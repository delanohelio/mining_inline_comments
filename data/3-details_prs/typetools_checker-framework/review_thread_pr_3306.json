{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2OTk2OTAz", "number": 3306, "reviewThreads": {"totalCount": 60, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxOTo0MzoyMFrOD8Nhxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDoxMDozNVrOEGJkWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDYyNzkxOnYy", "diffSide": "RIGHT", "path": "docs/manual/accumulation-checker.tex", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxOTo0MzoyMFrOGVA4BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxOTo0MzoyMFrOGVA4BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4NzYyMQ==", "bodyText": "with -> has", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r424687621", "createdAt": "2020-05-13T19:43:20Z", "author": {"login": "msridhar"}, "path": "docs/manual/accumulation-checker.tex", "diffHunk": "@@ -0,0 +1,80 @@\n+\\htmlhr\n+\\chapterAndLabel{Building an accumulation checker}{accumulation-checker}\n+\n+%% This chapter should appear after the \"creating a checker\" chapter, or perhaps as part of it,\n+%% once accumulation support is complete.\n+\n+This chapter describes how to build a particular kind of checker---an accumulation\n+checker. If you want to \\emph{use} an existing checker, you do not need to read this chapter.\n+\n+An \\emph{accumulation analysis} is a program analysis where the\n+analysis abstraction is a monotonically increasing set, and some operation is legal\n+only when the set is large enough---that is, the estimate has accumulated\n+sufficiently many items.\n+Accumulation analysis is a special case of typestate analysis in which\n+(1) the order in which operations are performed does not affect what is subsequently legal,\n+and (2) the accumulation does not add restrictions; that is, as\n+more operations are performed, more operations become legal.\n+\n+Unlike a traditional typestate analysis, an accumulation analysis does\n+not require an alias analysis for soundness. It can therefore be implemented\n+as a flow-sensitive type system.\n+\n+The Checker Framework contains a generic accumulation analysis that can\n+be extended to implement any particular accumulation analysis. We refer to\n+such an extension as an \"accumulation checker\" in this chapter.\n+\n+Before reading the rest of this chapter, you should\n+read the section on creating a checker (Chapter~\\ref{creating-a-checker}).\n+The rest of this chapter assumes you have done so.\n+\n+\\paragraphAndLabel{Defining type qualifiers}{accumulation-qualifiers}\n+\n+The first step in building an accumulation checker is to decide what it is\n+your checker will accumulate, and how to represent it. The Checker Framework's\n+support for accumulation analysis requires you to accumulate a string representation\n+of whatever you are accumulating. For example, when accumulating which methods have\n+been called on an object, you might choose to accumulate method names.\n+\n+Define a type qualifier that with a single argument: a \\<String[]> named \\<value>.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16d5df6a2d08fb499909ea642a8c77d0f4ccf114"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDYzNzU2OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxOTo0NjoyNFrOGVA-MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMDozOTowM1rOGVCq_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4OTIwMA==", "bodyText": "FWIW I can't really read this lattice.  Is this a standard notation?", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r424689200", "createdAt": "2020-05-13T19:46:24Z", "author": {"login": "msridhar"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,280 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement their own version of the\n+ * constructor, which should take a {@link BaseTypeChecker} and pass constants for the annotation\n+ * classes required by the constructor defined in this class.\n+ *\n+ * <p>New subclasses must also call {@link #postInit()} in their constructors.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /** The canonical top and bottom annotations for this accumulation checker. */\n+    public final AnnotationMirror TOP, BOTTOM;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> ACC;\n+\n+    /**\n+     * Create a new accumulation checker's annotated type factory.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.\n+     * @param t the top type in the hierarchy\n+     * @param bot the bottom type in the hierarchy\n+     */\n+    protected AccumulationAnnotatedTypeFactory(\n+            BaseTypeChecker checker,\n+            Class<? extends Annotation> accumulator,\n+            Class<? extends Annotation> t,\n+            Class<? extends Annotation> bot) {\n+        super(checker);\n+\n+        TOP = AnnotationBuilder.fromClass(elements, t);\n+        BOTTOM = AnnotationBuilder.fromClass(elements, bot);\n+        ACC = accumulator;\n+\n+        // Every subclass must call postInit!\n+        if (this.getClass() == AccumulationAnnotatedTypeFactory.class) {\n+            this.postInit();\n+        }\n+    }\n+\n+    /**\n+     * Creates a new instance of the accumulator annotation that contains the elements of {@code\n+     * values} in sorted order.\n+     *\n+     * @param values the arguments to the annotation\n+     * @return an annotation mirror representing the accumulator annotation with values's arguments,\n+     *     or top is {@code values} is empty\n+     */\n+    public AnnotationMirror createAccumulatorAnnotation(final String... values) {\n+        if (values.length == 0) {\n+            return TOP;\n+        }\n+        AnnotationBuilder builder = new AnnotationBuilder(processingEnv, ACC);\n+        Arrays.sort(values);\n+        builder.setValue(\"value\", values);\n+        return builder.build();\n+    }\n+\n+    /**\n+     * Utility method that returns whether the return type of the given method invocation tree has\n+     * an @This annotation from the Returns Receiver Checker.\n+     *\n+     * @param tree the method invocation tree to check\n+     * @return whether the method being invoked returns its receiver\n+     */\n+    public boolean returnsThis(final MethodInvocationTree tree) {\n+        ReturnsReceiverAnnotatedTypeFactory rrATF =\n+                getTypeFactoryOfSubchecker(ReturnsReceiverChecker.class);\n+        ExecutableElement methodEle = TreeUtils.elementFromUse(tree);\n+        AnnotatedTypeMirror methodAtm = rrATF.getAnnotatedType(methodEle);\n+        AnnotatedTypeMirror rrType =\n+                ((AnnotatedTypeMirror.AnnotatedExecutableType) methodAtm).getReturnType();\n+        return rrType != null && rrType.hasAnnotation(This.class);\n+    }\n+\n+    /**\n+     * Is the given annotation an accumulator annotation?\n+     *\n+     * @param anm an annotation mirror\n+     * @return whether the annotation mirror is an instance of this factory's accumulator annotation\n+     */\n+    public boolean isAccumulatorAnnotation(AnnotationMirror anm) {\n+        return AnnotationUtils.areSameByClass(anm, ACC);\n+    }\n+\n+    @Override\n+    protected TreeAnnotator createTreeAnnotator() {\n+        return new ListTreeAnnotator(\n+                super.createTreeAnnotator(), new AccumulationTreeAnnotator(this));\n+    }\n+\n+    /** Handles fluent APIs using the Returns Receiver Checker. */\n+    protected class AccumulationTreeAnnotator extends TreeAnnotator {\n+\n+        /**\n+         * Mandatory constructor.\n+         *\n+         * @param factory the type factory\n+         */\n+        public AccumulationTreeAnnotator(AccumulationAnnotatedTypeFactory factory) {\n+            super(factory);\n+        }\n+\n+        @Override\n+        public Void visitMethodInvocation(MethodInvocationTree tree, AnnotatedTypeMirror type) {\n+            // Check to see if the ReturnsReceiver Checker has a @This annotation\n+            // on the return type of the method.\n+            if (returnsThis(tree)) {\n+\n+                // Fetch the current type of the receiver, or top if none exists.\n+                ExpressionTree receiverTree = TreeUtils.getReceiverTree(tree.getMethodSelect());\n+                AnnotatedTypeMirror receiverType;\n+                AnnotationMirror receiverAnno;\n+\n+                if (receiverTree != null\n+                        && (receiverType = getAnnotatedType(receiverTree)) != null) {\n+                    receiverAnno = receiverType.getAnnotationInHierarchy(TOP);\n+                } else {\n+                    receiverAnno = TOP;\n+                }\n+\n+                type.replaceAnnotation(receiverAnno);\n+            }\n+            return super.visitMethodInvocation(tree, type);\n+        }\n+    }\n+\n+    @Override\n+    public QualifierHierarchy createQualifierHierarchy(MultiGraphFactory factory) {\n+        return new AccumulationQualifierHierarchy(factory);\n+    }\n+\n+    /**\n+     * All accumulation analyses share a similar type hierarchy. This hierarchy implements the\n+     * subtyping, LUB, and GLB for that hierarchy. The lattice looks like:\n+     *\n+     * <p>top / \\ acc(x) acc(y) ... \\ / acc(x,y) ... | bottom", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16d5df6a2d08fb499909ea642a8c77d0f4ccf114"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcxNzA1Mg==", "bodyText": "The formatter messed this up. Sorry about that.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r424717052", "createdAt": "2020-05-13T20:39:03Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,280 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement their own version of the\n+ * constructor, which should take a {@link BaseTypeChecker} and pass constants for the annotation\n+ * classes required by the constructor defined in this class.\n+ *\n+ * <p>New subclasses must also call {@link #postInit()} in their constructors.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /** The canonical top and bottom annotations for this accumulation checker. */\n+    public final AnnotationMirror TOP, BOTTOM;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> ACC;\n+\n+    /**\n+     * Create a new accumulation checker's annotated type factory.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.\n+     * @param t the top type in the hierarchy\n+     * @param bot the bottom type in the hierarchy\n+     */\n+    protected AccumulationAnnotatedTypeFactory(\n+            BaseTypeChecker checker,\n+            Class<? extends Annotation> accumulator,\n+            Class<? extends Annotation> t,\n+            Class<? extends Annotation> bot) {\n+        super(checker);\n+\n+        TOP = AnnotationBuilder.fromClass(elements, t);\n+        BOTTOM = AnnotationBuilder.fromClass(elements, bot);\n+        ACC = accumulator;\n+\n+        // Every subclass must call postInit!\n+        if (this.getClass() == AccumulationAnnotatedTypeFactory.class) {\n+            this.postInit();\n+        }\n+    }\n+\n+    /**\n+     * Creates a new instance of the accumulator annotation that contains the elements of {@code\n+     * values} in sorted order.\n+     *\n+     * @param values the arguments to the annotation\n+     * @return an annotation mirror representing the accumulator annotation with values's arguments,\n+     *     or top is {@code values} is empty\n+     */\n+    public AnnotationMirror createAccumulatorAnnotation(final String... values) {\n+        if (values.length == 0) {\n+            return TOP;\n+        }\n+        AnnotationBuilder builder = new AnnotationBuilder(processingEnv, ACC);\n+        Arrays.sort(values);\n+        builder.setValue(\"value\", values);\n+        return builder.build();\n+    }\n+\n+    /**\n+     * Utility method that returns whether the return type of the given method invocation tree has\n+     * an @This annotation from the Returns Receiver Checker.\n+     *\n+     * @param tree the method invocation tree to check\n+     * @return whether the method being invoked returns its receiver\n+     */\n+    public boolean returnsThis(final MethodInvocationTree tree) {\n+        ReturnsReceiverAnnotatedTypeFactory rrATF =\n+                getTypeFactoryOfSubchecker(ReturnsReceiverChecker.class);\n+        ExecutableElement methodEle = TreeUtils.elementFromUse(tree);\n+        AnnotatedTypeMirror methodAtm = rrATF.getAnnotatedType(methodEle);\n+        AnnotatedTypeMirror rrType =\n+                ((AnnotatedTypeMirror.AnnotatedExecutableType) methodAtm).getReturnType();\n+        return rrType != null && rrType.hasAnnotation(This.class);\n+    }\n+\n+    /**\n+     * Is the given annotation an accumulator annotation?\n+     *\n+     * @param anm an annotation mirror\n+     * @return whether the annotation mirror is an instance of this factory's accumulator annotation\n+     */\n+    public boolean isAccumulatorAnnotation(AnnotationMirror anm) {\n+        return AnnotationUtils.areSameByClass(anm, ACC);\n+    }\n+\n+    @Override\n+    protected TreeAnnotator createTreeAnnotator() {\n+        return new ListTreeAnnotator(\n+                super.createTreeAnnotator(), new AccumulationTreeAnnotator(this));\n+    }\n+\n+    /** Handles fluent APIs using the Returns Receiver Checker. */\n+    protected class AccumulationTreeAnnotator extends TreeAnnotator {\n+\n+        /**\n+         * Mandatory constructor.\n+         *\n+         * @param factory the type factory\n+         */\n+        public AccumulationTreeAnnotator(AccumulationAnnotatedTypeFactory factory) {\n+            super(factory);\n+        }\n+\n+        @Override\n+        public Void visitMethodInvocation(MethodInvocationTree tree, AnnotatedTypeMirror type) {\n+            // Check to see if the ReturnsReceiver Checker has a @This annotation\n+            // on the return type of the method.\n+            if (returnsThis(tree)) {\n+\n+                // Fetch the current type of the receiver, or top if none exists.\n+                ExpressionTree receiverTree = TreeUtils.getReceiverTree(tree.getMethodSelect());\n+                AnnotatedTypeMirror receiverType;\n+                AnnotationMirror receiverAnno;\n+\n+                if (receiverTree != null\n+                        && (receiverType = getAnnotatedType(receiverTree)) != null) {\n+                    receiverAnno = receiverType.getAnnotationInHierarchy(TOP);\n+                } else {\n+                    receiverAnno = TOP;\n+                }\n+\n+                type.replaceAnnotation(receiverAnno);\n+            }\n+            return super.visitMethodInvocation(tree, type);\n+        }\n+    }\n+\n+    @Override\n+    public QualifierHierarchy createQualifierHierarchy(MultiGraphFactory factory) {\n+        return new AccumulationQualifierHierarchy(factory);\n+    }\n+\n+    /**\n+     * All accumulation analyses share a similar type hierarchy. This hierarchy implements the\n+     * subtyping, LUB, and GLB for that hierarchy. The lattice looks like:\n+     *\n+     * <p>top / \\ acc(x) acc(y) ... \\ / acc(x,y) ... | bottom", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4OTIwMA=="}, "originalCommit": {"oid": "16d5df6a2d08fb499909ea642a8c77d0f4ccf114"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDY0MjI4OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationChecker.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxOTo0Nzo0N1rOGVBBEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMTowMzo0OFrOGVDcpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4OTkzOA==", "bodyText": "Is it possible someone might want to build an accumulation checker that does not require returns-receiver reasoning?  Or shall we just assume any accumulation checker is also dealing with fluent APIs?", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r424689938", "createdAt": "2020-05-13T19:47:47Z", "author": {"login": "msridhar"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationChecker.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.checkerframework.common.accumulation;\n+\n+import java.util.LinkedHashSet;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+\n+/**\n+ * An accumulation checker is one that accumulates some property: method calls, keys into maps, etc.\n+ * All accumulation analyses share some common features: their type systems are similar in\n+ * structure, they need to reason about fluent APIs, and they need some way to easily add facts to\n+ * the accumulation they are tracking. This accumulation analysis represents all facts as Strings.\n+ *\n+ * <p>Accumulation checkers are particularly interesting because they can represent many\n+ * typestate-like properties, but do not require a precise alias analysis for soundness.\n+ *\n+ * <p>This class provides a basic accumulation checker that can be extended to implement a\n+ * particular accumulation type system. The primary extension point is the constructor of {@link\n+ * AccumulationAnnotatedTypeFactory}, which every subclass should override to provide custom\n+ * annotations.\n+ */\n+public abstract class AccumulationChecker extends BaseTypeChecker {\n+\n+    @Override\n+    protected LinkedHashSet<Class<? extends BaseTypeChecker>> getImmediateSubcheckerClasses() {\n+        LinkedHashSet<Class<? extends BaseTypeChecker>> checkers =\n+                super.getImmediateSubcheckerClasses();\n+        checkers.add(ReturnsReceiverChecker.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16d5df6a2d08fb499909ea642a8c77d0f4ccf114"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyMDE0Ng==", "bodyText": "I assumed that anyone building an accumulation checker would want RR reasoning - there's not much reason to not include it. I suppose we could make it configurable, somehow (but then again, it already is - someone who didn't want the RR checker could override this method again!).\nI'll add something to the javadoc that mentions it.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r424720146", "createdAt": "2020-05-13T20:45:06Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationChecker.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.checkerframework.common.accumulation;\n+\n+import java.util.LinkedHashSet;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+\n+/**\n+ * An accumulation checker is one that accumulates some property: method calls, keys into maps, etc.\n+ * All accumulation analyses share some common features: their type systems are similar in\n+ * structure, they need to reason about fluent APIs, and they need some way to easily add facts to\n+ * the accumulation they are tracking. This accumulation analysis represents all facts as Strings.\n+ *\n+ * <p>Accumulation checkers are particularly interesting because they can represent many\n+ * typestate-like properties, but do not require a precise alias analysis for soundness.\n+ *\n+ * <p>This class provides a basic accumulation checker that can be extended to implement a\n+ * particular accumulation type system. The primary extension point is the constructor of {@link\n+ * AccumulationAnnotatedTypeFactory}, which every subclass should override to provide custom\n+ * annotations.\n+ */\n+public abstract class AccumulationChecker extends BaseTypeChecker {\n+\n+    @Override\n+    protected LinkedHashSet<Class<? extends BaseTypeChecker>> getImmediateSubcheckerClasses() {\n+        LinkedHashSet<Class<? extends BaseTypeChecker>> checkers =\n+                super.getImmediateSubcheckerClasses();\n+        checkers.add(ReturnsReceiverChecker.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4OTkzOA=="}, "originalCommit": {"oid": "16d5df6a2d08fb499909ea642a8c77d0f4ccf114"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyOTc2NQ==", "bodyText": "There is the whole including a sub-checker doubles the overall checking time issue... \ud83d\ude42But this is fine for now", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r424729765", "createdAt": "2020-05-13T21:03:48Z", "author": {"login": "msridhar"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationChecker.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.checkerframework.common.accumulation;\n+\n+import java.util.LinkedHashSet;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+\n+/**\n+ * An accumulation checker is one that accumulates some property: method calls, keys into maps, etc.\n+ * All accumulation analyses share some common features: their type systems are similar in\n+ * structure, they need to reason about fluent APIs, and they need some way to easily add facts to\n+ * the accumulation they are tracking. This accumulation analysis represents all facts as Strings.\n+ *\n+ * <p>Accumulation checkers are particularly interesting because they can represent many\n+ * typestate-like properties, but do not require a precise alias analysis for soundness.\n+ *\n+ * <p>This class provides a basic accumulation checker that can be extended to implement a\n+ * particular accumulation type system. The primary extension point is the constructor of {@link\n+ * AccumulationAnnotatedTypeFactory}, which every subclass should override to provide custom\n+ * annotations.\n+ */\n+public abstract class AccumulationChecker extends BaseTypeChecker {\n+\n+    @Override\n+    protected LinkedHashSet<Class<? extends BaseTypeChecker>> getImmediateSubcheckerClasses() {\n+        LinkedHashSet<Class<? extends BaseTypeChecker>> checkers =\n+                super.getImmediateSubcheckerClasses();\n+        checkers.add(ReturnsReceiverChecker.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY4OTkzOA=="}, "originalCommit": {"oid": "16d5df6a2d08fb499909ea642a8c77d0f4ccf114"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDY0NjUzOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxOTo0OTowNVrOGVBDxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxOTo0OTowNVrOGVBDxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5MDYzMA==", "bodyText": "This will only be true if methods b and c are deterministic.  If they are not, only the estimate of a will be updated, and the types of a.b() and a.b().c() are computed in the type factory.  We should update the documentation to be clearer about this", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r424690630", "createdAt": "2020-05-13T19:49:05Z", "author": {"login": "msridhar"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate} or\n+ * {@link #accumulate(MethodInvocationNode, TransferResult, String...)} methods to accumulate a\n+ * string at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    public AccumulationTransfer(CFAnalysis analysis) {\n+        super(analysis);\n+        typeFactory = (AccumulationAnnotatedTypeFactory) analysis.getTypeFactory();\n+    }\n+\n+    /**\n+     * Updates the estimate of how many things node has accumulated to include all the values.\n+     *\n+     * @param node the node whose estimate should be adjusted\n+     * @param result the result containing the store to be modified\n+     * @param values the new accumulation values\n+     */\n+    public void accumulate(Node node, TransferResult<CFValue, CFStore> result, String... values) {\n+        AnnotatedTypeMirror oldType = typeFactory.getAnnotatedType(node.getTree());\n+        AnnotationMirror newAnno = getNewAnno(oldType, values);\n+        insertIntoStores(result, node, newAnno);\n+    }\n+\n+    /**\n+     * Updates the estimate for the receiver and any other receiver-returning methods in a chain\n+     * with this MethodInvocationNode to include the new values.\n+     *\n+     * <p>For example, if the argument is the expression {@code a.b().c()}, the new value is \"foo\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16d5df6a2d08fb499909ea642a8c77d0f4ccf114"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDY2Mjc3OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxOTo1Mzo1M1rOGVBOMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxOTo1Mzo1M1rOGVBOMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5MzI5Ng==", "bodyText": "As noted above, this call will do nothing when receiver is a method call that is not deterministic.  Not sure if we should change the implementation logic to reflect this more clearly.  Nothing incorrect happens now, but it may confuse future readers of the code", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r424693296", "createdAt": "2020-05-13T19:53:53Z", "author": {"login": "msridhar"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate} or\n+ * {@link #accumulate(MethodInvocationNode, TransferResult, String...)} methods to accumulate a\n+ * string at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    public AccumulationTransfer(CFAnalysis analysis) {\n+        super(analysis);\n+        typeFactory = (AccumulationAnnotatedTypeFactory) analysis.getTypeFactory();\n+    }\n+\n+    /**\n+     * Updates the estimate of how many things node has accumulated to include all the values.\n+     *\n+     * @param node the node whose estimate should be adjusted\n+     * @param result the result containing the store to be modified\n+     * @param values the new accumulation values\n+     */\n+    public void accumulate(Node node, TransferResult<CFValue, CFStore> result, String... values) {\n+        AnnotatedTypeMirror oldType = typeFactory.getAnnotatedType(node.getTree());\n+        AnnotationMirror newAnno = getNewAnno(oldType, values);\n+        insertIntoStores(result, node, newAnno);\n+    }\n+\n+    /**\n+     * Updates the estimate for the receiver and any other receiver-returning methods in a chain\n+     * with this MethodInvocationNode to include the new values.\n+     *\n+     * <p>For example, if the argument is the expression {@code a.b().c()}, the new value is \"foo\",\n+     * and b and c return their receiver, all of the expressions {@code a}, {@code a.b()}, and\n+     * {@code a.b().c()} would have their estimates updated to include \"foo\".\n+     *\n+     * @param node a method invocation whose receiver is to be updated\n+     * @param result the result containing the store to be modified\n+     * @param values the new accumulation values\n+     */\n+    public void accumulate(\n+            MethodInvocationNode node, TransferResult<CFValue, CFStore> result, String... values) {\n+        Node receiver = node.getTarget().getReceiver();\n+        AnnotatedTypeMirror oldType = typeFactory.getReceiverType(node.getTree());\n+        // e.g. if the node being visited is static\n+        if (oldType == null) {\n+            return;\n+        }\n+        AnnotationMirror newAnno = getNewAnno(oldType, values);\n+        while (receiver != null) {\n+            insertIntoStores(result, receiver, newAnno);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16d5df6a2d08fb499909ea642a8c77d0f4ccf114"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDg5NjU1OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMTowNjozMVrOGVDhtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjoxODowN1rOGVj__A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczMTA2Mg==", "bodyText": "Can we add a bit more detail on what this tree annotator is actually doing?  Like the example we give in the transfer function documentation.  This can be in the class documentation or the docs of visitMethodInvocation().", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r424731062", "createdAt": "2020-05-13T21:06:31Z", "author": {"login": "msridhar"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,288 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement their own version of the\n+ * constructor, which should take a {@link BaseTypeChecker} and pass constants for the annotation\n+ * classes required by the constructor defined in this class.\n+ *\n+ * <p>New subclasses must also call {@link #postInit()} in their constructors.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /** The canonical top and bottom annotations for this accumulation checker. */\n+    public final AnnotationMirror TOP, BOTTOM;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> ACC;\n+\n+    /**\n+     * Create a new accumulation checker's annotated type factory.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.\n+     * @param t the top type in the hierarchy\n+     * @param bot the bottom type in the hierarchy\n+     */\n+    protected AccumulationAnnotatedTypeFactory(\n+            BaseTypeChecker checker,\n+            Class<? extends Annotation> accumulator,\n+            Class<? extends Annotation> t,\n+            Class<? extends Annotation> bot) {\n+        super(checker);\n+\n+        TOP = AnnotationBuilder.fromClass(elements, t);\n+        BOTTOM = AnnotationBuilder.fromClass(elements, bot);\n+        ACC = accumulator;\n+\n+        // Every subclass must call postInit!\n+        if (this.getClass() == AccumulationAnnotatedTypeFactory.class) {\n+            this.postInit();\n+        }\n+    }\n+\n+    /**\n+     * Creates a new instance of the accumulator annotation that contains the elements of {@code\n+     * values} in sorted order.\n+     *\n+     * @param values the arguments to the annotation\n+     * @return an annotation mirror representing the accumulator annotation with values's arguments,\n+     *     or top is {@code values} is empty\n+     */\n+    public AnnotationMirror createAccumulatorAnnotation(final String... values) {\n+        if (values.length == 0) {\n+            return TOP;\n+        }\n+        AnnotationBuilder builder = new AnnotationBuilder(processingEnv, ACC);\n+        Arrays.sort(values);\n+        builder.setValue(\"value\", values);\n+        return builder.build();\n+    }\n+\n+    /**\n+     * Utility method that returns whether the return type of the given method invocation tree has\n+     * an @This annotation from the Returns Receiver Checker.\n+     *\n+     * @param tree the method invocation tree to check\n+     * @return whether the method being invoked returns its receiver\n+     */\n+    public boolean returnsThis(final MethodInvocationTree tree) {\n+        ReturnsReceiverAnnotatedTypeFactory rrATF =\n+                getTypeFactoryOfSubchecker(ReturnsReceiverChecker.class);\n+        ExecutableElement methodEle = TreeUtils.elementFromUse(tree);\n+        AnnotatedTypeMirror methodAtm = rrATF.getAnnotatedType(methodEle);\n+        AnnotatedTypeMirror rrType =\n+                ((AnnotatedTypeMirror.AnnotatedExecutableType) methodAtm).getReturnType();\n+        return rrType != null && rrType.hasAnnotation(This.class);\n+    }\n+\n+    /**\n+     * Is the given annotation an accumulator annotation?\n+     *\n+     * @param anm an annotation mirror\n+     * @return whether the annotation mirror is an instance of this factory's accumulator annotation\n+     */\n+    public boolean isAccumulatorAnnotation(AnnotationMirror anm) {\n+        return AnnotationUtils.areSameByClass(anm, ACC);\n+    }\n+\n+    @Override\n+    protected TreeAnnotator createTreeAnnotator() {\n+        return new ListTreeAnnotator(\n+                super.createTreeAnnotator(), new AccumulationTreeAnnotator(this));\n+    }\n+\n+    /** Handles fluent APIs using the Returns Receiver Checker. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f81727d201bb9335f6992609dc89777f8c783c2"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI2MzEwMA==", "bodyText": "I added it to the docs for getMethodInvocation()", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r425263100", "createdAt": "2020-05-14T16:18:07Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,288 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement their own version of the\n+ * constructor, which should take a {@link BaseTypeChecker} and pass constants for the annotation\n+ * classes required by the constructor defined in this class.\n+ *\n+ * <p>New subclasses must also call {@link #postInit()} in their constructors.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /** The canonical top and bottom annotations for this accumulation checker. */\n+    public final AnnotationMirror TOP, BOTTOM;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> ACC;\n+\n+    /**\n+     * Create a new accumulation checker's annotated type factory.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.\n+     * @param t the top type in the hierarchy\n+     * @param bot the bottom type in the hierarchy\n+     */\n+    protected AccumulationAnnotatedTypeFactory(\n+            BaseTypeChecker checker,\n+            Class<? extends Annotation> accumulator,\n+            Class<? extends Annotation> t,\n+            Class<? extends Annotation> bot) {\n+        super(checker);\n+\n+        TOP = AnnotationBuilder.fromClass(elements, t);\n+        BOTTOM = AnnotationBuilder.fromClass(elements, bot);\n+        ACC = accumulator;\n+\n+        // Every subclass must call postInit!\n+        if (this.getClass() == AccumulationAnnotatedTypeFactory.class) {\n+            this.postInit();\n+        }\n+    }\n+\n+    /**\n+     * Creates a new instance of the accumulator annotation that contains the elements of {@code\n+     * values} in sorted order.\n+     *\n+     * @param values the arguments to the annotation\n+     * @return an annotation mirror representing the accumulator annotation with values's arguments,\n+     *     or top is {@code values} is empty\n+     */\n+    public AnnotationMirror createAccumulatorAnnotation(final String... values) {\n+        if (values.length == 0) {\n+            return TOP;\n+        }\n+        AnnotationBuilder builder = new AnnotationBuilder(processingEnv, ACC);\n+        Arrays.sort(values);\n+        builder.setValue(\"value\", values);\n+        return builder.build();\n+    }\n+\n+    /**\n+     * Utility method that returns whether the return type of the given method invocation tree has\n+     * an @This annotation from the Returns Receiver Checker.\n+     *\n+     * @param tree the method invocation tree to check\n+     * @return whether the method being invoked returns its receiver\n+     */\n+    public boolean returnsThis(final MethodInvocationTree tree) {\n+        ReturnsReceiverAnnotatedTypeFactory rrATF =\n+                getTypeFactoryOfSubchecker(ReturnsReceiverChecker.class);\n+        ExecutableElement methodEle = TreeUtils.elementFromUse(tree);\n+        AnnotatedTypeMirror methodAtm = rrATF.getAnnotatedType(methodEle);\n+        AnnotatedTypeMirror rrType =\n+                ((AnnotatedTypeMirror.AnnotatedExecutableType) methodAtm).getReturnType();\n+        return rrType != null && rrType.hasAnnotation(This.class);\n+    }\n+\n+    /**\n+     * Is the given annotation an accumulator annotation?\n+     *\n+     * @param anm an annotation mirror\n+     * @return whether the annotation mirror is an instance of this factory's accumulator annotation\n+     */\n+    public boolean isAccumulatorAnnotation(AnnotationMirror anm) {\n+        return AnnotationUtils.areSameByClass(anm, ACC);\n+    }\n+\n+    @Override\n+    protected TreeAnnotator createTreeAnnotator() {\n+        return new ListTreeAnnotator(\n+                super.createTreeAnnotator(), new AccumulationTreeAnnotator(this));\n+    }\n+\n+    /** Handles fluent APIs using the Returns Receiver Checker. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczMTA2Mg=="}, "originalCommit": {"oid": "2f81727d201bb9335f6992609dc89777f8c783c2"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODIxNjgxOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjoyMToyOFrOGVkIvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNzowNzo1MlrOGVmE1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI2NTM0MA==", "bodyText": "Wait, isn't the point that this annotator takes the receiver type and \"accumulates in\" the current method invocation?", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r425265340", "createdAt": "2020-05-14T16:21:28Z", "author": {"login": "msridhar"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -135,6 +135,14 @@ public AccumulationTreeAnnotator(AccumulationAnnotatedTypeFactory factory) {\n             super(factory);\n         }\n \n+        /**\n+         * If a method returns its receiver, and the receiver has an accumulation type, then the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02bba698cb153df0a4a4d47d30862e7445edad44"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI5MjA2Nw==", "bodyText": "Only the Object Construction Checker does that. This version is simpler - all it does it make the return type match the receiver type if the method returns this. The TestAccumulationChecker handles actually accumulating method calls differently than the OCC, also - note that it does the actual accumulation in the Transfer class.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r425292067", "createdAt": "2020-05-14T16:59:57Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -135,6 +135,14 @@ public AccumulationTreeAnnotator(AccumulationAnnotatedTypeFactory factory) {\n             super(factory);\n         }\n \n+        /**\n+         * If a method returns its receiver, and the receiver has an accumulation type, then the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI2NTM0MA=="}, "originalCommit": {"oid": "02bba698cb153df0a4a4d47d30862e7445edad44"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI5NzExMA==", "bodyText": "I get it now.  Since the transfer function computes the complete accumulated type for the most deeply-nested receiver, all the type factory has to do is to copy that type to the return value for each call and it will get bubbled up.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r425297110", "createdAt": "2020-05-14T17:07:52Z", "author": {"login": "msridhar"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -135,6 +135,14 @@ public AccumulationTreeAnnotator(AccumulationAnnotatedTypeFactory factory) {\n             super(factory);\n         }\n \n+        /**\n+         * If a method returns its receiver, and the receiver has an accumulation type, then the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI2NTM0MA=="}, "originalCommit": {"oid": "02bba698cb153df0a4a4d47d30862e7445edad44"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjgzMTA5OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTozODo0OFrOGWRknw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTozODo0OFrOGWRknw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAwOTc1OQ==", "bodyText": "What are the requirements for top and bottom?\n\nMust they be instances of accumulator?  If top must be, I don't see the point of passing it explicitly.\nMust they be distinct from accumulator?\nMust they have a value field of String[] type?  The code seems to assume that top does, but I wonder if that assumption is warranted.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426009759", "createdAt": "2020-05-15T19:38:48Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,296 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement a constructor, which should\n+ * take a {@link BaseTypeChecker} and call both the constructor defined in this class and {@link\n+ * #postInit()}.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /** The canonical top annotation for this accumulation checker. */\n+    public final AnnotationMirror TOP;\n+\n+    /** The canonical bottom annotation for this accumulation checker. */\n+    public final AnnotationMirror BOTTOM;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> ACC;\n+\n+    /**\n+     * Create an annotated type factory for an accumulation checker.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.\n+     * @param top the top type in the hierarchy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db3bcf35ce34724fbb2f868601ab10f198ead13"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjgzNjIwOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo0MDozNFrOGWRnvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMjowMDo1NVrOGWU_wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMDU1Nw==", "bodyText": "values is used/aliased without being copied.  That can be OK, but is worth documenting (or changing if it is not an intended part of the design).", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426010557", "createdAt": "2020-05-15T19:40:34Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,296 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement a constructor, which should\n+ * take a {@link BaseTypeChecker} and call both the constructor defined in this class and {@link\n+ * #postInit()}.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /** The canonical top annotation for this accumulation checker. */\n+    public final AnnotationMirror TOP;\n+\n+    /** The canonical bottom annotation for this accumulation checker. */\n+    public final AnnotationMirror BOTTOM;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> ACC;\n+\n+    /**\n+     * Create an annotated type factory for an accumulation checker.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.\n+     * @param top the top type in the hierarchy\n+     * @param bottom the bottom type in the hierarchy\n+     */\n+    protected AccumulationAnnotatedTypeFactory(\n+            BaseTypeChecker checker,\n+            Class<? extends Annotation> accumulator,\n+            Class<? extends Annotation> top,\n+            Class<? extends Annotation> bottom) {\n+        super(checker);\n+\n+        TOP = AnnotationBuilder.fromClass(elements, top);\n+        BOTTOM = AnnotationBuilder.fromClass(elements, bottom);\n+        ACC = accumulator;\n+\n+        // Every subclass must call postInit!  This does not do so for subclasses.\n+        if (this.getClass() == AccumulationAnnotatedTypeFactory.class) {\n+            this.postInit();\n+        }\n+    }\n+\n+    /**\n+     * Creates a new instance of the accumulator annotation that contains the elements of {@code\n+     * values} in sorted order.\n+     *\n+     * @param values the arguments to the annotation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db3bcf35ce34724fbb2f868601ab10f198ead13"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA2NTg1Nw==", "bodyText": "I think that is only the case if an explicit array is passed. I added a note to the documentation.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426065857", "createdAt": "2020-05-15T22:00:55Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,296 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement a constructor, which should\n+ * take a {@link BaseTypeChecker} and call both the constructor defined in this class and {@link\n+ * #postInit()}.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /** The canonical top annotation for this accumulation checker. */\n+    public final AnnotationMirror TOP;\n+\n+    /** The canonical bottom annotation for this accumulation checker. */\n+    public final AnnotationMirror BOTTOM;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> ACC;\n+\n+    /**\n+     * Create an annotated type factory for an accumulation checker.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.\n+     * @param top the top type in the hierarchy\n+     * @param bottom the bottom type in the hierarchy\n+     */\n+    protected AccumulationAnnotatedTypeFactory(\n+            BaseTypeChecker checker,\n+            Class<? extends Annotation> accumulator,\n+            Class<? extends Annotation> top,\n+            Class<? extends Annotation> bottom) {\n+        super(checker);\n+\n+        TOP = AnnotationBuilder.fromClass(elements, top);\n+        BOTTOM = AnnotationBuilder.fromClass(elements, bottom);\n+        ACC = accumulator;\n+\n+        // Every subclass must call postInit!  This does not do so for subclasses.\n+        if (this.getClass() == AccumulationAnnotatedTypeFactory.class) {\n+            this.postInit();\n+        }\n+    }\n+\n+    /**\n+     * Creates a new instance of the accumulator annotation that contains the elements of {@code\n+     * values} in sorted order.\n+     *\n+     * @param values the arguments to the annotation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMDU1Nw=="}, "originalCommit": {"oid": "1db3bcf35ce34724fbb2f868601ab10f198ead13"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjgzNjk3OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo0MDo1M1rOGWRoRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMjowMzozOFrOGWVC6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMDY5NA==", "bodyText": "How about abstracting this into a field, to slightly improve efficiency?", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426010694", "createdAt": "2020-05-15T19:40:53Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,296 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement a constructor, which should\n+ * take a {@link BaseTypeChecker} and call both the constructor defined in this class and {@link\n+ * #postInit()}.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /** The canonical top annotation for this accumulation checker. */\n+    public final AnnotationMirror TOP;\n+\n+    /** The canonical bottom annotation for this accumulation checker. */\n+    public final AnnotationMirror BOTTOM;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> ACC;\n+\n+    /**\n+     * Create an annotated type factory for an accumulation checker.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.\n+     * @param top the top type in the hierarchy\n+     * @param bottom the bottom type in the hierarchy\n+     */\n+    protected AccumulationAnnotatedTypeFactory(\n+            BaseTypeChecker checker,\n+            Class<? extends Annotation> accumulator,\n+            Class<? extends Annotation> top,\n+            Class<? extends Annotation> bottom) {\n+        super(checker);\n+\n+        TOP = AnnotationBuilder.fromClass(elements, top);\n+        BOTTOM = AnnotationBuilder.fromClass(elements, bottom);\n+        ACC = accumulator;\n+\n+        // Every subclass must call postInit!  This does not do so for subclasses.\n+        if (this.getClass() == AccumulationAnnotatedTypeFactory.class) {\n+            this.postInit();\n+        }\n+    }\n+\n+    /**\n+     * Creates a new instance of the accumulator annotation that contains the elements of {@code\n+     * values} in sorted order.\n+     *\n+     * @param values the arguments to the annotation\n+     * @return an annotation mirror representing the accumulator annotation with {@code values}'s\n+     *     arguments, or top if {@code values} is empty\n+     */\n+    public AnnotationMirror createAccumulatorAnnotation(final String... values) {\n+        if (values.length == 0) {\n+            return TOP;\n+        }\n+        AnnotationBuilder builder = new AnnotationBuilder(processingEnv, ACC);\n+        Arrays.sort(values);\n+        builder.setValue(\"value\", values);\n+        return builder.build();\n+    }\n+\n+    /**\n+     * Returns true if the return type of the given method invocation tree has an @This annotation\n+     * from the Returns Receiver Checker.\n+     *\n+     * @param tree a method invocation tree\n+     * @return true if the method being invoked returns its receiver\n+     */\n+    public boolean returnsThis(final MethodInvocationTree tree) {\n+        ReturnsReceiverAnnotatedTypeFactory rrATF =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db3bcf35ce34724fbb2f868601ab10f198ead13"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA2NjY2NQ==", "bodyText": "AnnotatedTypeFactories must not put subchecker type factories into fields. I have learned this the hard way before. In many other checkers, I've created a getSpecificSubchecker() method for each subchecker, but I didn't think that was really necessary here. See the documentation for getTypeFactoryOfSubchecker(): https://github.com/typetools/checker-framework/blob/master/framework/src/main/java/org/checkerframework/framework/type/GenericAnnotatedTypeFactory.java#L1585", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426066665", "createdAt": "2020-05-15T22:03:38Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,296 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement a constructor, which should\n+ * take a {@link BaseTypeChecker} and call both the constructor defined in this class and {@link\n+ * #postInit()}.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /** The canonical top annotation for this accumulation checker. */\n+    public final AnnotationMirror TOP;\n+\n+    /** The canonical bottom annotation for this accumulation checker. */\n+    public final AnnotationMirror BOTTOM;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> ACC;\n+\n+    /**\n+     * Create an annotated type factory for an accumulation checker.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.\n+     * @param top the top type in the hierarchy\n+     * @param bottom the bottom type in the hierarchy\n+     */\n+    protected AccumulationAnnotatedTypeFactory(\n+            BaseTypeChecker checker,\n+            Class<? extends Annotation> accumulator,\n+            Class<? extends Annotation> top,\n+            Class<? extends Annotation> bottom) {\n+        super(checker);\n+\n+        TOP = AnnotationBuilder.fromClass(elements, top);\n+        BOTTOM = AnnotationBuilder.fromClass(elements, bottom);\n+        ACC = accumulator;\n+\n+        // Every subclass must call postInit!  This does not do so for subclasses.\n+        if (this.getClass() == AccumulationAnnotatedTypeFactory.class) {\n+            this.postInit();\n+        }\n+    }\n+\n+    /**\n+     * Creates a new instance of the accumulator annotation that contains the elements of {@code\n+     * values} in sorted order.\n+     *\n+     * @param values the arguments to the annotation\n+     * @return an annotation mirror representing the accumulator annotation with {@code values}'s\n+     *     arguments, or top if {@code values} is empty\n+     */\n+    public AnnotationMirror createAccumulatorAnnotation(final String... values) {\n+        if (values.length == 0) {\n+            return TOP;\n+        }\n+        AnnotationBuilder builder = new AnnotationBuilder(processingEnv, ACC);\n+        Arrays.sort(values);\n+        builder.setValue(\"value\", values);\n+        return builder.build();\n+    }\n+\n+    /**\n+     * Returns true if the return type of the given method invocation tree has an @This annotation\n+     * from the Returns Receiver Checker.\n+     *\n+     * @param tree a method invocation tree\n+     * @return true if the method being invoked returns its receiver\n+     */\n+    public boolean returnsThis(final MethodInvocationTree tree) {\n+        ReturnsReceiverAnnotatedTypeFactory rrATF =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMDY5NA=="}, "originalCommit": {"oid": "1db3bcf35ce34724fbb2f868601ab10f198ead13"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjgzOTAyOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo0MTo0MFrOGWRplQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMjowNDozN1rOGWVD-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMTAyOQ==", "bodyText": "How is this related to TOP and BOTTOM?  Is it definitely true of TOP, or only possibly true?  Is it definitely false of BOTTOM?", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426011029", "createdAt": "2020-05-15T19:41:40Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,296 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement a constructor, which should\n+ * take a {@link BaseTypeChecker} and call both the constructor defined in this class and {@link\n+ * #postInit()}.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /** The canonical top annotation for this accumulation checker. */\n+    public final AnnotationMirror TOP;\n+\n+    /** The canonical bottom annotation for this accumulation checker. */\n+    public final AnnotationMirror BOTTOM;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> ACC;\n+\n+    /**\n+     * Create an annotated type factory for an accumulation checker.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.\n+     * @param top the top type in the hierarchy\n+     * @param bottom the bottom type in the hierarchy\n+     */\n+    protected AccumulationAnnotatedTypeFactory(\n+            BaseTypeChecker checker,\n+            Class<? extends Annotation> accumulator,\n+            Class<? extends Annotation> top,\n+            Class<? extends Annotation> bottom) {\n+        super(checker);\n+\n+        TOP = AnnotationBuilder.fromClass(elements, top);\n+        BOTTOM = AnnotationBuilder.fromClass(elements, bottom);\n+        ACC = accumulator;\n+\n+        // Every subclass must call postInit!  This does not do so for subclasses.\n+        if (this.getClass() == AccumulationAnnotatedTypeFactory.class) {\n+            this.postInit();\n+        }\n+    }\n+\n+    /**\n+     * Creates a new instance of the accumulator annotation that contains the elements of {@code\n+     * values} in sorted order.\n+     *\n+     * @param values the arguments to the annotation\n+     * @return an annotation mirror representing the accumulator annotation with {@code values}'s\n+     *     arguments, or top if {@code values} is empty\n+     */\n+    public AnnotationMirror createAccumulatorAnnotation(final String... values) {\n+        if (values.length == 0) {\n+            return TOP;\n+        }\n+        AnnotationBuilder builder = new AnnotationBuilder(processingEnv, ACC);\n+        Arrays.sort(values);\n+        builder.setValue(\"value\", values);\n+        return builder.build();\n+    }\n+\n+    /**\n+     * Returns true if the return type of the given method invocation tree has an @This annotation\n+     * from the Returns Receiver Checker.\n+     *\n+     * @param tree a method invocation tree\n+     * @return true if the method being invoked returns its receiver\n+     */\n+    public boolean returnsThis(final MethodInvocationTree tree) {\n+        ReturnsReceiverAnnotatedTypeFactory rrATF =\n+                getTypeFactoryOfSubchecker(ReturnsReceiverChecker.class);\n+        ExecutableElement methodEle = TreeUtils.elementFromUse(tree);\n+        AnnotatedTypeMirror methodAtm = rrATF.getAnnotatedType(methodEle);\n+        AnnotatedTypeMirror rrType =\n+                ((AnnotatedTypeMirror.AnnotatedExecutableType) methodAtm).getReturnType();\n+        return rrType != null && rrType.hasAnnotation(This.class);\n+    }\n+\n+    /**\n+     * Is the given annotation an accumulator annotation?\n+     *\n+     * @param anm an annotation mirror\n+     * @return true if the annotation mirror is an instance of this factory's accumulator annotation\n+     */\n+    public boolean isAccumulatorAnnotation(AnnotationMirror anm) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db3bcf35ce34724fbb2f868601ab10f198ead13"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA2NjkzNg==", "bodyText": "It is definitely false of both. I think the documentation is clear, with the changes I've made elsewhere to make clear that the top, bottom, and accumulator annotations are expected to be distinct.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426066936", "createdAt": "2020-05-15T22:04:37Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,296 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement a constructor, which should\n+ * take a {@link BaseTypeChecker} and call both the constructor defined in this class and {@link\n+ * #postInit()}.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /** The canonical top annotation for this accumulation checker. */\n+    public final AnnotationMirror TOP;\n+\n+    /** The canonical bottom annotation for this accumulation checker. */\n+    public final AnnotationMirror BOTTOM;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> ACC;\n+\n+    /**\n+     * Create an annotated type factory for an accumulation checker.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.\n+     * @param top the top type in the hierarchy\n+     * @param bottom the bottom type in the hierarchy\n+     */\n+    protected AccumulationAnnotatedTypeFactory(\n+            BaseTypeChecker checker,\n+            Class<? extends Annotation> accumulator,\n+            Class<? extends Annotation> top,\n+            Class<? extends Annotation> bottom) {\n+        super(checker);\n+\n+        TOP = AnnotationBuilder.fromClass(elements, top);\n+        BOTTOM = AnnotationBuilder.fromClass(elements, bottom);\n+        ACC = accumulator;\n+\n+        // Every subclass must call postInit!  This does not do so for subclasses.\n+        if (this.getClass() == AccumulationAnnotatedTypeFactory.class) {\n+            this.postInit();\n+        }\n+    }\n+\n+    /**\n+     * Creates a new instance of the accumulator annotation that contains the elements of {@code\n+     * values} in sorted order.\n+     *\n+     * @param values the arguments to the annotation\n+     * @return an annotation mirror representing the accumulator annotation with {@code values}'s\n+     *     arguments, or top if {@code values} is empty\n+     */\n+    public AnnotationMirror createAccumulatorAnnotation(final String... values) {\n+        if (values.length == 0) {\n+            return TOP;\n+        }\n+        AnnotationBuilder builder = new AnnotationBuilder(processingEnv, ACC);\n+        Arrays.sort(values);\n+        builder.setValue(\"value\", values);\n+        return builder.build();\n+    }\n+\n+    /**\n+     * Returns true if the return type of the given method invocation tree has an @This annotation\n+     * from the Returns Receiver Checker.\n+     *\n+     * @param tree a method invocation tree\n+     * @return true if the method being invoked returns its receiver\n+     */\n+    public boolean returnsThis(final MethodInvocationTree tree) {\n+        ReturnsReceiverAnnotatedTypeFactory rrATF =\n+                getTypeFactoryOfSubchecker(ReturnsReceiverChecker.class);\n+        ExecutableElement methodEle = TreeUtils.elementFromUse(tree);\n+        AnnotatedTypeMirror methodAtm = rrATF.getAnnotatedType(methodEle);\n+        AnnotatedTypeMirror rrType =\n+                ((AnnotatedTypeMirror.AnnotatedExecutableType) methodAtm).getReturnType();\n+        return rrType != null && rrType.hasAnnotation(This.class);\n+    }\n+\n+    /**\n+     * Is the given annotation an accumulator annotation?\n+     *\n+     * @param anm an annotation mirror\n+     * @return true if the annotation mirror is an instance of this factory's accumulator annotation\n+     */\n+    public boolean isAccumulatorAnnotation(AnnotationMirror anm) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMTAyOQ=="}, "originalCommit": {"oid": "1db3bcf35ce34724fbb2f868601ab10f198ead13"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjgzOTc3OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo0MjowMFrOGWRqFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo0MjowMFrOGWRqFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMTE1OQ==", "bodyText": "Please use a more specific verb than \"handles\".", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426011159", "createdAt": "2020-05-15T19:42:00Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,296 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement a constructor, which should\n+ * take a {@link BaseTypeChecker} and call both the constructor defined in this class and {@link\n+ * #postInit()}.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /** The canonical top annotation for this accumulation checker. */\n+    public final AnnotationMirror TOP;\n+\n+    /** The canonical bottom annotation for this accumulation checker. */\n+    public final AnnotationMirror BOTTOM;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> ACC;\n+\n+    /**\n+     * Create an annotated type factory for an accumulation checker.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.\n+     * @param top the top type in the hierarchy\n+     * @param bottom the bottom type in the hierarchy\n+     */\n+    protected AccumulationAnnotatedTypeFactory(\n+            BaseTypeChecker checker,\n+            Class<? extends Annotation> accumulator,\n+            Class<? extends Annotation> top,\n+            Class<? extends Annotation> bottom) {\n+        super(checker);\n+\n+        TOP = AnnotationBuilder.fromClass(elements, top);\n+        BOTTOM = AnnotationBuilder.fromClass(elements, bottom);\n+        ACC = accumulator;\n+\n+        // Every subclass must call postInit!  This does not do so for subclasses.\n+        if (this.getClass() == AccumulationAnnotatedTypeFactory.class) {\n+            this.postInit();\n+        }\n+    }\n+\n+    /**\n+     * Creates a new instance of the accumulator annotation that contains the elements of {@code\n+     * values} in sorted order.\n+     *\n+     * @param values the arguments to the annotation\n+     * @return an annotation mirror representing the accumulator annotation with {@code values}'s\n+     *     arguments, or top if {@code values} is empty\n+     */\n+    public AnnotationMirror createAccumulatorAnnotation(final String... values) {\n+        if (values.length == 0) {\n+            return TOP;\n+        }\n+        AnnotationBuilder builder = new AnnotationBuilder(processingEnv, ACC);\n+        Arrays.sort(values);\n+        builder.setValue(\"value\", values);\n+        return builder.build();\n+    }\n+\n+    /**\n+     * Returns true if the return type of the given method invocation tree has an @This annotation\n+     * from the Returns Receiver Checker.\n+     *\n+     * @param tree a method invocation tree\n+     * @return true if the method being invoked returns its receiver\n+     */\n+    public boolean returnsThis(final MethodInvocationTree tree) {\n+        ReturnsReceiverAnnotatedTypeFactory rrATF =\n+                getTypeFactoryOfSubchecker(ReturnsReceiverChecker.class);\n+        ExecutableElement methodEle = TreeUtils.elementFromUse(tree);\n+        AnnotatedTypeMirror methodAtm = rrATF.getAnnotatedType(methodEle);\n+        AnnotatedTypeMirror rrType =\n+                ((AnnotatedTypeMirror.AnnotatedExecutableType) methodAtm).getReturnType();\n+        return rrType != null && rrType.hasAnnotation(This.class);\n+    }\n+\n+    /**\n+     * Is the given annotation an accumulator annotation?\n+     *\n+     * @param anm an annotation mirror\n+     * @return true if the annotation mirror is an instance of this factory's accumulator annotation\n+     */\n+    public boolean isAccumulatorAnnotation(AnnotationMirror anm) {\n+        return AnnotationUtils.areSameByClass(anm, ACC);\n+    }\n+\n+    @Override\n+    protected TreeAnnotator createTreeAnnotator() {\n+        return new ListTreeAnnotator(\n+                super.createTreeAnnotator(), new AccumulationTreeAnnotator(this));\n+    }\n+\n+    /** Handles fluent APIs using the Returns Receiver Checker. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db3bcf35ce34724fbb2f868601ab10f198ead13"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mjg0MDQyOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo0MjoxMlrOGWRqew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMjowNzo1NlrOGWVHxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMTI1OQ==", "bodyText": "What does \"Mandatory\" mean here?", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426011259", "createdAt": "2020-05-15T19:42:12Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,296 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement a constructor, which should\n+ * take a {@link BaseTypeChecker} and call both the constructor defined in this class and {@link\n+ * #postInit()}.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /** The canonical top annotation for this accumulation checker. */\n+    public final AnnotationMirror TOP;\n+\n+    /** The canonical bottom annotation for this accumulation checker. */\n+    public final AnnotationMirror BOTTOM;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> ACC;\n+\n+    /**\n+     * Create an annotated type factory for an accumulation checker.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.\n+     * @param top the top type in the hierarchy\n+     * @param bottom the bottom type in the hierarchy\n+     */\n+    protected AccumulationAnnotatedTypeFactory(\n+            BaseTypeChecker checker,\n+            Class<? extends Annotation> accumulator,\n+            Class<? extends Annotation> top,\n+            Class<? extends Annotation> bottom) {\n+        super(checker);\n+\n+        TOP = AnnotationBuilder.fromClass(elements, top);\n+        BOTTOM = AnnotationBuilder.fromClass(elements, bottom);\n+        ACC = accumulator;\n+\n+        // Every subclass must call postInit!  This does not do so for subclasses.\n+        if (this.getClass() == AccumulationAnnotatedTypeFactory.class) {\n+            this.postInit();\n+        }\n+    }\n+\n+    /**\n+     * Creates a new instance of the accumulator annotation that contains the elements of {@code\n+     * values} in sorted order.\n+     *\n+     * @param values the arguments to the annotation\n+     * @return an annotation mirror representing the accumulator annotation with {@code values}'s\n+     *     arguments, or top if {@code values} is empty\n+     */\n+    public AnnotationMirror createAccumulatorAnnotation(final String... values) {\n+        if (values.length == 0) {\n+            return TOP;\n+        }\n+        AnnotationBuilder builder = new AnnotationBuilder(processingEnv, ACC);\n+        Arrays.sort(values);\n+        builder.setValue(\"value\", values);\n+        return builder.build();\n+    }\n+\n+    /**\n+     * Returns true if the return type of the given method invocation tree has an @This annotation\n+     * from the Returns Receiver Checker.\n+     *\n+     * @param tree a method invocation tree\n+     * @return true if the method being invoked returns its receiver\n+     */\n+    public boolean returnsThis(final MethodInvocationTree tree) {\n+        ReturnsReceiverAnnotatedTypeFactory rrATF =\n+                getTypeFactoryOfSubchecker(ReturnsReceiverChecker.class);\n+        ExecutableElement methodEle = TreeUtils.elementFromUse(tree);\n+        AnnotatedTypeMirror methodAtm = rrATF.getAnnotatedType(methodEle);\n+        AnnotatedTypeMirror rrType =\n+                ((AnnotatedTypeMirror.AnnotatedExecutableType) methodAtm).getReturnType();\n+        return rrType != null && rrType.hasAnnotation(This.class);\n+    }\n+\n+    /**\n+     * Is the given annotation an accumulator annotation?\n+     *\n+     * @param anm an annotation mirror\n+     * @return true if the annotation mirror is an instance of this factory's accumulator annotation\n+     */\n+    public boolean isAccumulatorAnnotation(AnnotationMirror anm) {\n+        return AnnotationUtils.areSameByClass(anm, ACC);\n+    }\n+\n+    @Override\n+    protected TreeAnnotator createTreeAnnotator() {\n+        return new ListTreeAnnotator(\n+                super.createTreeAnnotator(), new AccumulationTreeAnnotator(this));\n+    }\n+\n+    /** Handles fluent APIs using the Returns Receiver Checker. */\n+    protected class AccumulationTreeAnnotator extends TreeAnnotator {\n+\n+        /**\n+         * Mandatory constructor.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db3bcf35ce34724fbb2f868601ab10f198ead13"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA2NzkwOQ==", "bodyText": "Java requires you to write a constructor for classes that don't have a default constructor. It is therefore \"mandatory\" to write one. More to the point, there's nothing to say about this constructor - it just calls super - but Javadoc is required. I never know what to write in these cases, so I write something inane to satisfy the checker.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426067909", "createdAt": "2020-05-15T22:07:56Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,296 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement a constructor, which should\n+ * take a {@link BaseTypeChecker} and call both the constructor defined in this class and {@link\n+ * #postInit()}.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /** The canonical top annotation for this accumulation checker. */\n+    public final AnnotationMirror TOP;\n+\n+    /** The canonical bottom annotation for this accumulation checker. */\n+    public final AnnotationMirror BOTTOM;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> ACC;\n+\n+    /**\n+     * Create an annotated type factory for an accumulation checker.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.\n+     * @param top the top type in the hierarchy\n+     * @param bottom the bottom type in the hierarchy\n+     */\n+    protected AccumulationAnnotatedTypeFactory(\n+            BaseTypeChecker checker,\n+            Class<? extends Annotation> accumulator,\n+            Class<? extends Annotation> top,\n+            Class<? extends Annotation> bottom) {\n+        super(checker);\n+\n+        TOP = AnnotationBuilder.fromClass(elements, top);\n+        BOTTOM = AnnotationBuilder.fromClass(elements, bottom);\n+        ACC = accumulator;\n+\n+        // Every subclass must call postInit!  This does not do so for subclasses.\n+        if (this.getClass() == AccumulationAnnotatedTypeFactory.class) {\n+            this.postInit();\n+        }\n+    }\n+\n+    /**\n+     * Creates a new instance of the accumulator annotation that contains the elements of {@code\n+     * values} in sorted order.\n+     *\n+     * @param values the arguments to the annotation\n+     * @return an annotation mirror representing the accumulator annotation with {@code values}'s\n+     *     arguments, or top if {@code values} is empty\n+     */\n+    public AnnotationMirror createAccumulatorAnnotation(final String... values) {\n+        if (values.length == 0) {\n+            return TOP;\n+        }\n+        AnnotationBuilder builder = new AnnotationBuilder(processingEnv, ACC);\n+        Arrays.sort(values);\n+        builder.setValue(\"value\", values);\n+        return builder.build();\n+    }\n+\n+    /**\n+     * Returns true if the return type of the given method invocation tree has an @This annotation\n+     * from the Returns Receiver Checker.\n+     *\n+     * @param tree a method invocation tree\n+     * @return true if the method being invoked returns its receiver\n+     */\n+    public boolean returnsThis(final MethodInvocationTree tree) {\n+        ReturnsReceiverAnnotatedTypeFactory rrATF =\n+                getTypeFactoryOfSubchecker(ReturnsReceiverChecker.class);\n+        ExecutableElement methodEle = TreeUtils.elementFromUse(tree);\n+        AnnotatedTypeMirror methodAtm = rrATF.getAnnotatedType(methodEle);\n+        AnnotatedTypeMirror rrType =\n+                ((AnnotatedTypeMirror.AnnotatedExecutableType) methodAtm).getReturnType();\n+        return rrType != null && rrType.hasAnnotation(This.class);\n+    }\n+\n+    /**\n+     * Is the given annotation an accumulator annotation?\n+     *\n+     * @param anm an annotation mirror\n+     * @return true if the annotation mirror is an instance of this factory's accumulator annotation\n+     */\n+    public boolean isAccumulatorAnnotation(AnnotationMirror anm) {\n+        return AnnotationUtils.areSameByClass(anm, ACC);\n+    }\n+\n+    @Override\n+    protected TreeAnnotator createTreeAnnotator() {\n+        return new ListTreeAnnotator(\n+                super.createTreeAnnotator(), new AccumulationTreeAnnotator(this));\n+    }\n+\n+    /** Handles fluent APIs using the Returns Receiver Checker. */\n+    protected class AccumulationTreeAnnotator extends TreeAnnotator {\n+\n+        /**\n+         * Mandatory constructor.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMTI1OQ=="}, "originalCommit": {"oid": "1db3bcf35ce34724fbb2f868601ab10f198ead13"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mjg0Mjc0OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo0Mjo1OFrOGWRr3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMjowODo0M1rOGWVIfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMTYxMg==", "bodyText": "This comment may be true, but it doesn't say what the method does.  should it be \"... then give a method invocation the same type as the receiver\"?", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426011612", "createdAt": "2020-05-15T19:42:58Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,296 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement a constructor, which should\n+ * take a {@link BaseTypeChecker} and call both the constructor defined in this class and {@link\n+ * #postInit()}.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /** The canonical top annotation for this accumulation checker. */\n+    public final AnnotationMirror TOP;\n+\n+    /** The canonical bottom annotation for this accumulation checker. */\n+    public final AnnotationMirror BOTTOM;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> ACC;\n+\n+    /**\n+     * Create an annotated type factory for an accumulation checker.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.\n+     * @param top the top type in the hierarchy\n+     * @param bottom the bottom type in the hierarchy\n+     */\n+    protected AccumulationAnnotatedTypeFactory(\n+            BaseTypeChecker checker,\n+            Class<? extends Annotation> accumulator,\n+            Class<? extends Annotation> top,\n+            Class<? extends Annotation> bottom) {\n+        super(checker);\n+\n+        TOP = AnnotationBuilder.fromClass(elements, top);\n+        BOTTOM = AnnotationBuilder.fromClass(elements, bottom);\n+        ACC = accumulator;\n+\n+        // Every subclass must call postInit!  This does not do so for subclasses.\n+        if (this.getClass() == AccumulationAnnotatedTypeFactory.class) {\n+            this.postInit();\n+        }\n+    }\n+\n+    /**\n+     * Creates a new instance of the accumulator annotation that contains the elements of {@code\n+     * values} in sorted order.\n+     *\n+     * @param values the arguments to the annotation\n+     * @return an annotation mirror representing the accumulator annotation with {@code values}'s\n+     *     arguments, or top if {@code values} is empty\n+     */\n+    public AnnotationMirror createAccumulatorAnnotation(final String... values) {\n+        if (values.length == 0) {\n+            return TOP;\n+        }\n+        AnnotationBuilder builder = new AnnotationBuilder(processingEnv, ACC);\n+        Arrays.sort(values);\n+        builder.setValue(\"value\", values);\n+        return builder.build();\n+    }\n+\n+    /**\n+     * Returns true if the return type of the given method invocation tree has an @This annotation\n+     * from the Returns Receiver Checker.\n+     *\n+     * @param tree a method invocation tree\n+     * @return true if the method being invoked returns its receiver\n+     */\n+    public boolean returnsThis(final MethodInvocationTree tree) {\n+        ReturnsReceiverAnnotatedTypeFactory rrATF =\n+                getTypeFactoryOfSubchecker(ReturnsReceiverChecker.class);\n+        ExecutableElement methodEle = TreeUtils.elementFromUse(tree);\n+        AnnotatedTypeMirror methodAtm = rrATF.getAnnotatedType(methodEle);\n+        AnnotatedTypeMirror rrType =\n+                ((AnnotatedTypeMirror.AnnotatedExecutableType) methodAtm).getReturnType();\n+        return rrType != null && rrType.hasAnnotation(This.class);\n+    }\n+\n+    /**\n+     * Is the given annotation an accumulator annotation?\n+     *\n+     * @param anm an annotation mirror\n+     * @return true if the annotation mirror is an instance of this factory's accumulator annotation\n+     */\n+    public boolean isAccumulatorAnnotation(AnnotationMirror anm) {\n+        return AnnotationUtils.areSameByClass(anm, ACC);\n+    }\n+\n+    @Override\n+    protected TreeAnnotator createTreeAnnotator() {\n+        return new ListTreeAnnotator(\n+                super.createTreeAnnotator(), new AccumulationTreeAnnotator(this));\n+    }\n+\n+    /** Handles fluent APIs using the Returns Receiver Checker. */\n+    protected class AccumulationTreeAnnotator extends TreeAnnotator {\n+\n+        /**\n+         * Mandatory constructor.\n+         *\n+         * @param factory the type factory\n+         */\n+        public AccumulationTreeAnnotator(AccumulationAnnotatedTypeFactory factory) {\n+            super(factory);\n+        }\n+\n+        /**\n+         * If a method returns its receiver, and the receiver has an accumulation type, then the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db3bcf35ce34724fbb2f868601ab10f198ead13"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA2ODA5NQ==", "bodyText": "I removed the comment on the method, and moved this into a list of the rules the annotator is responsible for implementing.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426068095", "createdAt": "2020-05-15T22:08:43Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,296 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement a constructor, which should\n+ * take a {@link BaseTypeChecker} and call both the constructor defined in this class and {@link\n+ * #postInit()}.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /** The canonical top annotation for this accumulation checker. */\n+    public final AnnotationMirror TOP;\n+\n+    /** The canonical bottom annotation for this accumulation checker. */\n+    public final AnnotationMirror BOTTOM;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> ACC;\n+\n+    /**\n+     * Create an annotated type factory for an accumulation checker.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.\n+     * @param top the top type in the hierarchy\n+     * @param bottom the bottom type in the hierarchy\n+     */\n+    protected AccumulationAnnotatedTypeFactory(\n+            BaseTypeChecker checker,\n+            Class<? extends Annotation> accumulator,\n+            Class<? extends Annotation> top,\n+            Class<? extends Annotation> bottom) {\n+        super(checker);\n+\n+        TOP = AnnotationBuilder.fromClass(elements, top);\n+        BOTTOM = AnnotationBuilder.fromClass(elements, bottom);\n+        ACC = accumulator;\n+\n+        // Every subclass must call postInit!  This does not do so for subclasses.\n+        if (this.getClass() == AccumulationAnnotatedTypeFactory.class) {\n+            this.postInit();\n+        }\n+    }\n+\n+    /**\n+     * Creates a new instance of the accumulator annotation that contains the elements of {@code\n+     * values} in sorted order.\n+     *\n+     * @param values the arguments to the annotation\n+     * @return an annotation mirror representing the accumulator annotation with {@code values}'s\n+     *     arguments, or top if {@code values} is empty\n+     */\n+    public AnnotationMirror createAccumulatorAnnotation(final String... values) {\n+        if (values.length == 0) {\n+            return TOP;\n+        }\n+        AnnotationBuilder builder = new AnnotationBuilder(processingEnv, ACC);\n+        Arrays.sort(values);\n+        builder.setValue(\"value\", values);\n+        return builder.build();\n+    }\n+\n+    /**\n+     * Returns true if the return type of the given method invocation tree has an @This annotation\n+     * from the Returns Receiver Checker.\n+     *\n+     * @param tree a method invocation tree\n+     * @return true if the method being invoked returns its receiver\n+     */\n+    public boolean returnsThis(final MethodInvocationTree tree) {\n+        ReturnsReceiverAnnotatedTypeFactory rrATF =\n+                getTypeFactoryOfSubchecker(ReturnsReceiverChecker.class);\n+        ExecutableElement methodEle = TreeUtils.elementFromUse(tree);\n+        AnnotatedTypeMirror methodAtm = rrATF.getAnnotatedType(methodEle);\n+        AnnotatedTypeMirror rrType =\n+                ((AnnotatedTypeMirror.AnnotatedExecutableType) methodAtm).getReturnType();\n+        return rrType != null && rrType.hasAnnotation(This.class);\n+    }\n+\n+    /**\n+     * Is the given annotation an accumulator annotation?\n+     *\n+     * @param anm an annotation mirror\n+     * @return true if the annotation mirror is an instance of this factory's accumulator annotation\n+     */\n+    public boolean isAccumulatorAnnotation(AnnotationMirror anm) {\n+        return AnnotationUtils.areSameByClass(anm, ACC);\n+    }\n+\n+    @Override\n+    protected TreeAnnotator createTreeAnnotator() {\n+        return new ListTreeAnnotator(\n+                super.createTreeAnnotator(), new AccumulationTreeAnnotator(this));\n+    }\n+\n+    /** Handles fluent APIs using the Returns Receiver Checker. */\n+    protected class AccumulationTreeAnnotator extends TreeAnnotator {\n+\n+        /**\n+         * Mandatory constructor.\n+         *\n+         * @param factory the type factory\n+         */\n+        public AccumulationTreeAnnotator(AccumulationAnnotatedTypeFactory factory) {\n+            super(factory);\n+        }\n+\n+        /**\n+         * If a method returns its receiver, and the receiver has an accumulation type, then the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMTYxMg=="}, "originalCommit": {"oid": "1db3bcf35ce34724fbb2f868601ab10f198ead13"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mjg0NDkzOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo0Mzo0NVrOGWRtUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo0Mzo0NVrOGWRtUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMTk4NQ==", "bodyText": "\"i.e.\" implies they are the same.  They are .equals(), but not ==, I think:  the side effects won't affect the invoked method.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426011985", "createdAt": "2020-05-15T19:43:45Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,296 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement a constructor, which should\n+ * take a {@link BaseTypeChecker} and call both the constructor defined in this class and {@link\n+ * #postInit()}.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /** The canonical top annotation for this accumulation checker. */\n+    public final AnnotationMirror TOP;\n+\n+    /** The canonical bottom annotation for this accumulation checker. */\n+    public final AnnotationMirror BOTTOM;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> ACC;\n+\n+    /**\n+     * Create an annotated type factory for an accumulation checker.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.\n+     * @param top the top type in the hierarchy\n+     * @param bottom the bottom type in the hierarchy\n+     */\n+    protected AccumulationAnnotatedTypeFactory(\n+            BaseTypeChecker checker,\n+            Class<? extends Annotation> accumulator,\n+            Class<? extends Annotation> top,\n+            Class<? extends Annotation> bottom) {\n+        super(checker);\n+\n+        TOP = AnnotationBuilder.fromClass(elements, top);\n+        BOTTOM = AnnotationBuilder.fromClass(elements, bottom);\n+        ACC = accumulator;\n+\n+        // Every subclass must call postInit!  This does not do so for subclasses.\n+        if (this.getClass() == AccumulationAnnotatedTypeFactory.class) {\n+            this.postInit();\n+        }\n+    }\n+\n+    /**\n+     * Creates a new instance of the accumulator annotation that contains the elements of {@code\n+     * values} in sorted order.\n+     *\n+     * @param values the arguments to the annotation\n+     * @return an annotation mirror representing the accumulator annotation with {@code values}'s\n+     *     arguments, or top if {@code values} is empty\n+     */\n+    public AnnotationMirror createAccumulatorAnnotation(final String... values) {\n+        if (values.length == 0) {\n+            return TOP;\n+        }\n+        AnnotationBuilder builder = new AnnotationBuilder(processingEnv, ACC);\n+        Arrays.sort(values);\n+        builder.setValue(\"value\", values);\n+        return builder.build();\n+    }\n+\n+    /**\n+     * Returns true if the return type of the given method invocation tree has an @This annotation\n+     * from the Returns Receiver Checker.\n+     *\n+     * @param tree a method invocation tree\n+     * @return true if the method being invoked returns its receiver\n+     */\n+    public boolean returnsThis(final MethodInvocationTree tree) {\n+        ReturnsReceiverAnnotatedTypeFactory rrATF =\n+                getTypeFactoryOfSubchecker(ReturnsReceiverChecker.class);\n+        ExecutableElement methodEle = TreeUtils.elementFromUse(tree);\n+        AnnotatedTypeMirror methodAtm = rrATF.getAnnotatedType(methodEle);\n+        AnnotatedTypeMirror rrType =\n+                ((AnnotatedTypeMirror.AnnotatedExecutableType) methodAtm).getReturnType();\n+        return rrType != null && rrType.hasAnnotation(This.class);\n+    }\n+\n+    /**\n+     * Is the given annotation an accumulator annotation?\n+     *\n+     * @param anm an annotation mirror\n+     * @return true if the annotation mirror is an instance of this factory's accumulator annotation\n+     */\n+    public boolean isAccumulatorAnnotation(AnnotationMirror anm) {\n+        return AnnotationUtils.areSameByClass(anm, ACC);\n+    }\n+\n+    @Override\n+    protected TreeAnnotator createTreeAnnotator() {\n+        return new ListTreeAnnotator(\n+                super.createTreeAnnotator(), new AccumulationTreeAnnotator(this));\n+    }\n+\n+    /** Handles fluent APIs using the Returns Receiver Checker. */\n+    protected class AccumulationTreeAnnotator extends TreeAnnotator {\n+\n+        /**\n+         * Mandatory constructor.\n+         *\n+         * @param factory the type factory\n+         */\n+        public AccumulationTreeAnnotator(AccumulationAnnotatedTypeFactory factory) {\n+            super(factory);\n+        }\n+\n+        /**\n+         * If a method returns its receiver, and the receiver has an accumulation type, then the\n+         * default type of its return value is the type of the receiver.\n+         *\n+         * @param tree a method invocation tree\n+         * @param type the type of that tree (i.e. the return type of the invoked method). Is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db3bcf35ce34724fbb2f868601ab10f198ead13"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mjg0NjYwOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo0NDoyN1rOGWRuag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo0NDoyN1rOGWRuag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMjI2Ng==", "bodyText": "The comment about the return type of the invorked method is not true for polymorphic methods.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426012266", "createdAt": "2020-05-15T19:44:27Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,296 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement a constructor, which should\n+ * take a {@link BaseTypeChecker} and call both the constructor defined in this class and {@link\n+ * #postInit()}.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /** The canonical top annotation for this accumulation checker. */\n+    public final AnnotationMirror TOP;\n+\n+    /** The canonical bottom annotation for this accumulation checker. */\n+    public final AnnotationMirror BOTTOM;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> ACC;\n+\n+    /**\n+     * Create an annotated type factory for an accumulation checker.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.\n+     * @param top the top type in the hierarchy\n+     * @param bottom the bottom type in the hierarchy\n+     */\n+    protected AccumulationAnnotatedTypeFactory(\n+            BaseTypeChecker checker,\n+            Class<? extends Annotation> accumulator,\n+            Class<? extends Annotation> top,\n+            Class<? extends Annotation> bottom) {\n+        super(checker);\n+\n+        TOP = AnnotationBuilder.fromClass(elements, top);\n+        BOTTOM = AnnotationBuilder.fromClass(elements, bottom);\n+        ACC = accumulator;\n+\n+        // Every subclass must call postInit!  This does not do so for subclasses.\n+        if (this.getClass() == AccumulationAnnotatedTypeFactory.class) {\n+            this.postInit();\n+        }\n+    }\n+\n+    /**\n+     * Creates a new instance of the accumulator annotation that contains the elements of {@code\n+     * values} in sorted order.\n+     *\n+     * @param values the arguments to the annotation\n+     * @return an annotation mirror representing the accumulator annotation with {@code values}'s\n+     *     arguments, or top if {@code values} is empty\n+     */\n+    public AnnotationMirror createAccumulatorAnnotation(final String... values) {\n+        if (values.length == 0) {\n+            return TOP;\n+        }\n+        AnnotationBuilder builder = new AnnotationBuilder(processingEnv, ACC);\n+        Arrays.sort(values);\n+        builder.setValue(\"value\", values);\n+        return builder.build();\n+    }\n+\n+    /**\n+     * Returns true if the return type of the given method invocation tree has an @This annotation\n+     * from the Returns Receiver Checker.\n+     *\n+     * @param tree a method invocation tree\n+     * @return true if the method being invoked returns its receiver\n+     */\n+    public boolean returnsThis(final MethodInvocationTree tree) {\n+        ReturnsReceiverAnnotatedTypeFactory rrATF =\n+                getTypeFactoryOfSubchecker(ReturnsReceiverChecker.class);\n+        ExecutableElement methodEle = TreeUtils.elementFromUse(tree);\n+        AnnotatedTypeMirror methodAtm = rrATF.getAnnotatedType(methodEle);\n+        AnnotatedTypeMirror rrType =\n+                ((AnnotatedTypeMirror.AnnotatedExecutableType) methodAtm).getReturnType();\n+        return rrType != null && rrType.hasAnnotation(This.class);\n+    }\n+\n+    /**\n+     * Is the given annotation an accumulator annotation?\n+     *\n+     * @param anm an annotation mirror\n+     * @return true if the annotation mirror is an instance of this factory's accumulator annotation\n+     */\n+    public boolean isAccumulatorAnnotation(AnnotationMirror anm) {\n+        return AnnotationUtils.areSameByClass(anm, ACC);\n+    }\n+\n+    @Override\n+    protected TreeAnnotator createTreeAnnotator() {\n+        return new ListTreeAnnotator(\n+                super.createTreeAnnotator(), new AccumulationTreeAnnotator(this));\n+    }\n+\n+    /** Handles fluent APIs using the Returns Receiver Checker. */\n+    protected class AccumulationTreeAnnotator extends TreeAnnotator {\n+\n+        /**\n+         * Mandatory constructor.\n+         *\n+         * @param factory the type factory\n+         */\n+        public AccumulationTreeAnnotator(AccumulationAnnotatedTypeFactory factory) {\n+            super(factory);\n+        }\n+\n+        /**\n+         * If a method returns its receiver, and the receiver has an accumulation type, then the\n+         * default type of its return value is the type of the receiver.\n+         *\n+         * @param tree a method invocation tree\n+         * @param type the type of that tree (i.e. the return type of the invoked method). Is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db3bcf35ce34724fbb2f868601ab10f198ead13"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mjg1MDc0OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo0NTo1MVrOGWRxBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMjoxNToyMFrOGWVPTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMjkzNA==", "bodyText": "I have a strong negative reaction to assignments within conditionals.\n\nThey are surprising and therefore liable to be overlooked or misinterpreted, especially given that \"=\" is a mathematical symbol for equality.\nThey are hard to reason about.\n\nPlease rewrite this code to avoid assignments within conditionals.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426012934", "createdAt": "2020-05-15T19:45:51Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,296 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement a constructor, which should\n+ * take a {@link BaseTypeChecker} and call both the constructor defined in this class and {@link\n+ * #postInit()}.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /** The canonical top annotation for this accumulation checker. */\n+    public final AnnotationMirror TOP;\n+\n+    /** The canonical bottom annotation for this accumulation checker. */\n+    public final AnnotationMirror BOTTOM;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> ACC;\n+\n+    /**\n+     * Create an annotated type factory for an accumulation checker.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.\n+     * @param top the top type in the hierarchy\n+     * @param bottom the bottom type in the hierarchy\n+     */\n+    protected AccumulationAnnotatedTypeFactory(\n+            BaseTypeChecker checker,\n+            Class<? extends Annotation> accumulator,\n+            Class<? extends Annotation> top,\n+            Class<? extends Annotation> bottom) {\n+        super(checker);\n+\n+        TOP = AnnotationBuilder.fromClass(elements, top);\n+        BOTTOM = AnnotationBuilder.fromClass(elements, bottom);\n+        ACC = accumulator;\n+\n+        // Every subclass must call postInit!  This does not do so for subclasses.\n+        if (this.getClass() == AccumulationAnnotatedTypeFactory.class) {\n+            this.postInit();\n+        }\n+    }\n+\n+    /**\n+     * Creates a new instance of the accumulator annotation that contains the elements of {@code\n+     * values} in sorted order.\n+     *\n+     * @param values the arguments to the annotation\n+     * @return an annotation mirror representing the accumulator annotation with {@code values}'s\n+     *     arguments, or top if {@code values} is empty\n+     */\n+    public AnnotationMirror createAccumulatorAnnotation(final String... values) {\n+        if (values.length == 0) {\n+            return TOP;\n+        }\n+        AnnotationBuilder builder = new AnnotationBuilder(processingEnv, ACC);\n+        Arrays.sort(values);\n+        builder.setValue(\"value\", values);\n+        return builder.build();\n+    }\n+\n+    /**\n+     * Returns true if the return type of the given method invocation tree has an @This annotation\n+     * from the Returns Receiver Checker.\n+     *\n+     * @param tree a method invocation tree\n+     * @return true if the method being invoked returns its receiver\n+     */\n+    public boolean returnsThis(final MethodInvocationTree tree) {\n+        ReturnsReceiverAnnotatedTypeFactory rrATF =\n+                getTypeFactoryOfSubchecker(ReturnsReceiverChecker.class);\n+        ExecutableElement methodEle = TreeUtils.elementFromUse(tree);\n+        AnnotatedTypeMirror methodAtm = rrATF.getAnnotatedType(methodEle);\n+        AnnotatedTypeMirror rrType =\n+                ((AnnotatedTypeMirror.AnnotatedExecutableType) methodAtm).getReturnType();\n+        return rrType != null && rrType.hasAnnotation(This.class);\n+    }\n+\n+    /**\n+     * Is the given annotation an accumulator annotation?\n+     *\n+     * @param anm an annotation mirror\n+     * @return true if the annotation mirror is an instance of this factory's accumulator annotation\n+     */\n+    public boolean isAccumulatorAnnotation(AnnotationMirror anm) {\n+        return AnnotationUtils.areSameByClass(anm, ACC);\n+    }\n+\n+    @Override\n+    protected TreeAnnotator createTreeAnnotator() {\n+        return new ListTreeAnnotator(\n+                super.createTreeAnnotator(), new AccumulationTreeAnnotator(this));\n+    }\n+\n+    /** Handles fluent APIs using the Returns Receiver Checker. */\n+    protected class AccumulationTreeAnnotator extends TreeAnnotator {\n+\n+        /**\n+         * Mandatory constructor.\n+         *\n+         * @param factory the type factory\n+         */\n+        public AccumulationTreeAnnotator(AccumulationAnnotatedTypeFactory factory) {\n+            super(factory);\n+        }\n+\n+        /**\n+         * If a method returns its receiver, and the receiver has an accumulation type, then the\n+         * default type of its return value is the type of the receiver.\n+         *\n+         * @param tree a method invocation tree\n+         * @param type the type of that tree (i.e. the return type of the invoked method). Is\n+         *     (possibly) side-effected by this method.\n+         * @return nothing, works by side-effect on {@code type}\n+         */\n+        @Override\n+        public Void visitMethodInvocation(MethodInvocationTree tree, AnnotatedTypeMirror type) {\n+            if (returnsThis(tree)) {\n+                // There is a @This annotation on the return type of the invoked method.\n+\n+                // Fetch the current type of the receiver, or top if none exists.\n+                ExpressionTree receiverTree = TreeUtils.getReceiverTree(tree.getMethodSelect());\n+                AnnotatedTypeMirror receiverType;\n+                AnnotationMirror receiverAnno;\n+\n+                if (receiverTree != null\n+                        && (receiverType = getAnnotatedType(receiverTree)) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db3bcf35ce34724fbb2f868601ab10f198ead13"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA2OTgzNg==", "bodyText": "This particular code snippet is hard to read either way, and using an assignment within a conditional less verbose. Nevertheless, I've changed it to comply with the Checker Framework's typical code style, because an assignment within a conditional will be more confusing if they are not commonly used in a particular code base.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426069836", "createdAt": "2020-05-15T22:15:20Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,296 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement a constructor, which should\n+ * take a {@link BaseTypeChecker} and call both the constructor defined in this class and {@link\n+ * #postInit()}.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /** The canonical top annotation for this accumulation checker. */\n+    public final AnnotationMirror TOP;\n+\n+    /** The canonical bottom annotation for this accumulation checker. */\n+    public final AnnotationMirror BOTTOM;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> ACC;\n+\n+    /**\n+     * Create an annotated type factory for an accumulation checker.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.\n+     * @param top the top type in the hierarchy\n+     * @param bottom the bottom type in the hierarchy\n+     */\n+    protected AccumulationAnnotatedTypeFactory(\n+            BaseTypeChecker checker,\n+            Class<? extends Annotation> accumulator,\n+            Class<? extends Annotation> top,\n+            Class<? extends Annotation> bottom) {\n+        super(checker);\n+\n+        TOP = AnnotationBuilder.fromClass(elements, top);\n+        BOTTOM = AnnotationBuilder.fromClass(elements, bottom);\n+        ACC = accumulator;\n+\n+        // Every subclass must call postInit!  This does not do so for subclasses.\n+        if (this.getClass() == AccumulationAnnotatedTypeFactory.class) {\n+            this.postInit();\n+        }\n+    }\n+\n+    /**\n+     * Creates a new instance of the accumulator annotation that contains the elements of {@code\n+     * values} in sorted order.\n+     *\n+     * @param values the arguments to the annotation\n+     * @return an annotation mirror representing the accumulator annotation with {@code values}'s\n+     *     arguments, or top if {@code values} is empty\n+     */\n+    public AnnotationMirror createAccumulatorAnnotation(final String... values) {\n+        if (values.length == 0) {\n+            return TOP;\n+        }\n+        AnnotationBuilder builder = new AnnotationBuilder(processingEnv, ACC);\n+        Arrays.sort(values);\n+        builder.setValue(\"value\", values);\n+        return builder.build();\n+    }\n+\n+    /**\n+     * Returns true if the return type of the given method invocation tree has an @This annotation\n+     * from the Returns Receiver Checker.\n+     *\n+     * @param tree a method invocation tree\n+     * @return true if the method being invoked returns its receiver\n+     */\n+    public boolean returnsThis(final MethodInvocationTree tree) {\n+        ReturnsReceiverAnnotatedTypeFactory rrATF =\n+                getTypeFactoryOfSubchecker(ReturnsReceiverChecker.class);\n+        ExecutableElement methodEle = TreeUtils.elementFromUse(tree);\n+        AnnotatedTypeMirror methodAtm = rrATF.getAnnotatedType(methodEle);\n+        AnnotatedTypeMirror rrType =\n+                ((AnnotatedTypeMirror.AnnotatedExecutableType) methodAtm).getReturnType();\n+        return rrType != null && rrType.hasAnnotation(This.class);\n+    }\n+\n+    /**\n+     * Is the given annotation an accumulator annotation?\n+     *\n+     * @param anm an annotation mirror\n+     * @return true if the annotation mirror is an instance of this factory's accumulator annotation\n+     */\n+    public boolean isAccumulatorAnnotation(AnnotationMirror anm) {\n+        return AnnotationUtils.areSameByClass(anm, ACC);\n+    }\n+\n+    @Override\n+    protected TreeAnnotator createTreeAnnotator() {\n+        return new ListTreeAnnotator(\n+                super.createTreeAnnotator(), new AccumulationTreeAnnotator(this));\n+    }\n+\n+    /** Handles fluent APIs using the Returns Receiver Checker. */\n+    protected class AccumulationTreeAnnotator extends TreeAnnotator {\n+\n+        /**\n+         * Mandatory constructor.\n+         *\n+         * @param factory the type factory\n+         */\n+        public AccumulationTreeAnnotator(AccumulationAnnotatedTypeFactory factory) {\n+            super(factory);\n+        }\n+\n+        /**\n+         * If a method returns its receiver, and the receiver has an accumulation type, then the\n+         * default type of its return value is the type of the receiver.\n+         *\n+         * @param tree a method invocation tree\n+         * @param type the type of that tree (i.e. the return type of the invoked method). Is\n+         *     (possibly) side-effected by this method.\n+         * @return nothing, works by side-effect on {@code type}\n+         */\n+        @Override\n+        public Void visitMethodInvocation(MethodInvocationTree tree, AnnotatedTypeMirror type) {\n+            if (returnsThis(tree)) {\n+                // There is a @This annotation on the return type of the invoked method.\n+\n+                // Fetch the current type of the receiver, or top if none exists.\n+                ExpressionTree receiverTree = TreeUtils.getReceiverTree(tree.getMethodSelect());\n+                AnnotatedTypeMirror receiverType;\n+                AnnotationMirror receiverAnno;\n+\n+                if (receiverTree != null\n+                        && (receiverType = getAnnotatedType(receiverTree)) != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMjkzNA=="}, "originalCommit": {"oid": "1db3bcf35ce34724fbb2f868601ab10f198ead13"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mjg1NDUzOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo0NzowN1rOGWRzYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMjoxNjoxMVrOGWVQXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMzUzNw==", "bodyText": "I am concerned about this call.  It is possible that receiverAnno is higher in the hierarchy than type, and so this would move the type up in the hierarchy (and override the method specification) rather than refining it.  Should this be GLB instead?", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426013537", "createdAt": "2020-05-15T19:47:07Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,296 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement a constructor, which should\n+ * take a {@link BaseTypeChecker} and call both the constructor defined in this class and {@link\n+ * #postInit()}.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /** The canonical top annotation for this accumulation checker. */\n+    public final AnnotationMirror TOP;\n+\n+    /** The canonical bottom annotation for this accumulation checker. */\n+    public final AnnotationMirror BOTTOM;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> ACC;\n+\n+    /**\n+     * Create an annotated type factory for an accumulation checker.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.\n+     * @param top the top type in the hierarchy\n+     * @param bottom the bottom type in the hierarchy\n+     */\n+    protected AccumulationAnnotatedTypeFactory(\n+            BaseTypeChecker checker,\n+            Class<? extends Annotation> accumulator,\n+            Class<? extends Annotation> top,\n+            Class<? extends Annotation> bottom) {\n+        super(checker);\n+\n+        TOP = AnnotationBuilder.fromClass(elements, top);\n+        BOTTOM = AnnotationBuilder.fromClass(elements, bottom);\n+        ACC = accumulator;\n+\n+        // Every subclass must call postInit!  This does not do so for subclasses.\n+        if (this.getClass() == AccumulationAnnotatedTypeFactory.class) {\n+            this.postInit();\n+        }\n+    }\n+\n+    /**\n+     * Creates a new instance of the accumulator annotation that contains the elements of {@code\n+     * values} in sorted order.\n+     *\n+     * @param values the arguments to the annotation\n+     * @return an annotation mirror representing the accumulator annotation with {@code values}'s\n+     *     arguments, or top if {@code values} is empty\n+     */\n+    public AnnotationMirror createAccumulatorAnnotation(final String... values) {\n+        if (values.length == 0) {\n+            return TOP;\n+        }\n+        AnnotationBuilder builder = new AnnotationBuilder(processingEnv, ACC);\n+        Arrays.sort(values);\n+        builder.setValue(\"value\", values);\n+        return builder.build();\n+    }\n+\n+    /**\n+     * Returns true if the return type of the given method invocation tree has an @This annotation\n+     * from the Returns Receiver Checker.\n+     *\n+     * @param tree a method invocation tree\n+     * @return true if the method being invoked returns its receiver\n+     */\n+    public boolean returnsThis(final MethodInvocationTree tree) {\n+        ReturnsReceiverAnnotatedTypeFactory rrATF =\n+                getTypeFactoryOfSubchecker(ReturnsReceiverChecker.class);\n+        ExecutableElement methodEle = TreeUtils.elementFromUse(tree);\n+        AnnotatedTypeMirror methodAtm = rrATF.getAnnotatedType(methodEle);\n+        AnnotatedTypeMirror rrType =\n+                ((AnnotatedTypeMirror.AnnotatedExecutableType) methodAtm).getReturnType();\n+        return rrType != null && rrType.hasAnnotation(This.class);\n+    }\n+\n+    /**\n+     * Is the given annotation an accumulator annotation?\n+     *\n+     * @param anm an annotation mirror\n+     * @return true if the annotation mirror is an instance of this factory's accumulator annotation\n+     */\n+    public boolean isAccumulatorAnnotation(AnnotationMirror anm) {\n+        return AnnotationUtils.areSameByClass(anm, ACC);\n+    }\n+\n+    @Override\n+    protected TreeAnnotator createTreeAnnotator() {\n+        return new ListTreeAnnotator(\n+                super.createTreeAnnotator(), new AccumulationTreeAnnotator(this));\n+    }\n+\n+    /** Handles fluent APIs using the Returns Receiver Checker. */\n+    protected class AccumulationTreeAnnotator extends TreeAnnotator {\n+\n+        /**\n+         * Mandatory constructor.\n+         *\n+         * @param factory the type factory\n+         */\n+        public AccumulationTreeAnnotator(AccumulationAnnotatedTypeFactory factory) {\n+            super(factory);\n+        }\n+\n+        /**\n+         * If a method returns its receiver, and the receiver has an accumulation type, then the\n+         * default type of its return value is the type of the receiver.\n+         *\n+         * @param tree a method invocation tree\n+         * @param type the type of that tree (i.e. the return type of the invoked method). Is\n+         *     (possibly) side-effected by this method.\n+         * @return nothing, works by side-effect on {@code type}\n+         */\n+        @Override\n+        public Void visitMethodInvocation(MethodInvocationTree tree, AnnotatedTypeMirror type) {\n+            if (returnsThis(tree)) {\n+                // There is a @This annotation on the return type of the invoked method.\n+\n+                // Fetch the current type of the receiver, or top if none exists.\n+                ExpressionTree receiverTree = TreeUtils.getReceiverTree(tree.getMethodSelect());\n+                AnnotatedTypeMirror receiverType;\n+                AnnotationMirror receiverAnno;\n+\n+                if (receiverTree != null\n+                        && (receiverType = getAnnotatedType(receiverTree)) != null) {\n+                    receiverAnno = receiverType.getAnnotationInHierarchy(TOP);\n+                } else {\n+                    receiverAnno = TOP;\n+                }\n+\n+                type.replaceAnnotation(receiverAnno);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db3bcf35ce34724fbb2f868601ab10f198ead13"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA3MDExMQ==", "bodyText": "Good catch!", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426070111", "createdAt": "2020-05-15T22:16:11Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,296 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement a constructor, which should\n+ * take a {@link BaseTypeChecker} and call both the constructor defined in this class and {@link\n+ * #postInit()}.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /** The canonical top annotation for this accumulation checker. */\n+    public final AnnotationMirror TOP;\n+\n+    /** The canonical bottom annotation for this accumulation checker. */\n+    public final AnnotationMirror BOTTOM;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> ACC;\n+\n+    /**\n+     * Create an annotated type factory for an accumulation checker.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.\n+     * @param top the top type in the hierarchy\n+     * @param bottom the bottom type in the hierarchy\n+     */\n+    protected AccumulationAnnotatedTypeFactory(\n+            BaseTypeChecker checker,\n+            Class<? extends Annotation> accumulator,\n+            Class<? extends Annotation> top,\n+            Class<? extends Annotation> bottom) {\n+        super(checker);\n+\n+        TOP = AnnotationBuilder.fromClass(elements, top);\n+        BOTTOM = AnnotationBuilder.fromClass(elements, bottom);\n+        ACC = accumulator;\n+\n+        // Every subclass must call postInit!  This does not do so for subclasses.\n+        if (this.getClass() == AccumulationAnnotatedTypeFactory.class) {\n+            this.postInit();\n+        }\n+    }\n+\n+    /**\n+     * Creates a new instance of the accumulator annotation that contains the elements of {@code\n+     * values} in sorted order.\n+     *\n+     * @param values the arguments to the annotation\n+     * @return an annotation mirror representing the accumulator annotation with {@code values}'s\n+     *     arguments, or top if {@code values} is empty\n+     */\n+    public AnnotationMirror createAccumulatorAnnotation(final String... values) {\n+        if (values.length == 0) {\n+            return TOP;\n+        }\n+        AnnotationBuilder builder = new AnnotationBuilder(processingEnv, ACC);\n+        Arrays.sort(values);\n+        builder.setValue(\"value\", values);\n+        return builder.build();\n+    }\n+\n+    /**\n+     * Returns true if the return type of the given method invocation tree has an @This annotation\n+     * from the Returns Receiver Checker.\n+     *\n+     * @param tree a method invocation tree\n+     * @return true if the method being invoked returns its receiver\n+     */\n+    public boolean returnsThis(final MethodInvocationTree tree) {\n+        ReturnsReceiverAnnotatedTypeFactory rrATF =\n+                getTypeFactoryOfSubchecker(ReturnsReceiverChecker.class);\n+        ExecutableElement methodEle = TreeUtils.elementFromUse(tree);\n+        AnnotatedTypeMirror methodAtm = rrATF.getAnnotatedType(methodEle);\n+        AnnotatedTypeMirror rrType =\n+                ((AnnotatedTypeMirror.AnnotatedExecutableType) methodAtm).getReturnType();\n+        return rrType != null && rrType.hasAnnotation(This.class);\n+    }\n+\n+    /**\n+     * Is the given annotation an accumulator annotation?\n+     *\n+     * @param anm an annotation mirror\n+     * @return true if the annotation mirror is an instance of this factory's accumulator annotation\n+     */\n+    public boolean isAccumulatorAnnotation(AnnotationMirror anm) {\n+        return AnnotationUtils.areSameByClass(anm, ACC);\n+    }\n+\n+    @Override\n+    protected TreeAnnotator createTreeAnnotator() {\n+        return new ListTreeAnnotator(\n+                super.createTreeAnnotator(), new AccumulationTreeAnnotator(this));\n+    }\n+\n+    /** Handles fluent APIs using the Returns Receiver Checker. */\n+    protected class AccumulationTreeAnnotator extends TreeAnnotator {\n+\n+        /**\n+         * Mandatory constructor.\n+         *\n+         * @param factory the type factory\n+         */\n+        public AccumulationTreeAnnotator(AccumulationAnnotatedTypeFactory factory) {\n+            super(factory);\n+        }\n+\n+        /**\n+         * If a method returns its receiver, and the receiver has an accumulation type, then the\n+         * default type of its return value is the type of the receiver.\n+         *\n+         * @param tree a method invocation tree\n+         * @param type the type of that tree (i.e. the return type of the invoked method). Is\n+         *     (possibly) side-effected by this method.\n+         * @return nothing, works by side-effect on {@code type}\n+         */\n+        @Override\n+        public Void visitMethodInvocation(MethodInvocationTree tree, AnnotatedTypeMirror type) {\n+            if (returnsThis(tree)) {\n+                // There is a @This annotation on the return type of the invoked method.\n+\n+                // Fetch the current type of the receiver, or top if none exists.\n+                ExpressionTree receiverTree = TreeUtils.getReceiverTree(tree.getMethodSelect());\n+                AnnotatedTypeMirror receiverType;\n+                AnnotationMirror receiverAnno;\n+\n+                if (receiverTree != null\n+                        && (receiverType = getAnnotatedType(receiverTree)) != null) {\n+                    receiverAnno = receiverType.getAnnotationInHierarchy(TOP);\n+                } else {\n+                    receiverAnno = TOP;\n+                }\n+\n+                type.replaceAnnotation(receiverAnno);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMzUzNw=="}, "originalCommit": {"oid": "1db3bcf35ce34724fbb2f868601ab10f198ead13"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mjg1NjY4OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo0Nzo0OVrOGWR0pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo0Nzo0OVrOGWR0pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxMzg2Mw==", "bodyText": "top is either identical to, or equivalent in the type hierarchy to, acc().  So I would add \"= acc()\" here.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426013863", "createdAt": "2020-05-15T19:47:49Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,296 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement a constructor, which should\n+ * take a {@link BaseTypeChecker} and call both the constructor defined in this class and {@link\n+ * #postInit()}.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /** The canonical top annotation for this accumulation checker. */\n+    public final AnnotationMirror TOP;\n+\n+    /** The canonical bottom annotation for this accumulation checker. */\n+    public final AnnotationMirror BOTTOM;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> ACC;\n+\n+    /**\n+     * Create an annotated type factory for an accumulation checker.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.\n+     * @param top the top type in the hierarchy\n+     * @param bottom the bottom type in the hierarchy\n+     */\n+    protected AccumulationAnnotatedTypeFactory(\n+            BaseTypeChecker checker,\n+            Class<? extends Annotation> accumulator,\n+            Class<? extends Annotation> top,\n+            Class<? extends Annotation> bottom) {\n+        super(checker);\n+\n+        TOP = AnnotationBuilder.fromClass(elements, top);\n+        BOTTOM = AnnotationBuilder.fromClass(elements, bottom);\n+        ACC = accumulator;\n+\n+        // Every subclass must call postInit!  This does not do so for subclasses.\n+        if (this.getClass() == AccumulationAnnotatedTypeFactory.class) {\n+            this.postInit();\n+        }\n+    }\n+\n+    /**\n+     * Creates a new instance of the accumulator annotation that contains the elements of {@code\n+     * values} in sorted order.\n+     *\n+     * @param values the arguments to the annotation\n+     * @return an annotation mirror representing the accumulator annotation with {@code values}'s\n+     *     arguments, or top if {@code values} is empty\n+     */\n+    public AnnotationMirror createAccumulatorAnnotation(final String... values) {\n+        if (values.length == 0) {\n+            return TOP;\n+        }\n+        AnnotationBuilder builder = new AnnotationBuilder(processingEnv, ACC);\n+        Arrays.sort(values);\n+        builder.setValue(\"value\", values);\n+        return builder.build();\n+    }\n+\n+    /**\n+     * Returns true if the return type of the given method invocation tree has an @This annotation\n+     * from the Returns Receiver Checker.\n+     *\n+     * @param tree a method invocation tree\n+     * @return true if the method being invoked returns its receiver\n+     */\n+    public boolean returnsThis(final MethodInvocationTree tree) {\n+        ReturnsReceiverAnnotatedTypeFactory rrATF =\n+                getTypeFactoryOfSubchecker(ReturnsReceiverChecker.class);\n+        ExecutableElement methodEle = TreeUtils.elementFromUse(tree);\n+        AnnotatedTypeMirror methodAtm = rrATF.getAnnotatedType(methodEle);\n+        AnnotatedTypeMirror rrType =\n+                ((AnnotatedTypeMirror.AnnotatedExecutableType) methodAtm).getReturnType();\n+        return rrType != null && rrType.hasAnnotation(This.class);\n+    }\n+\n+    /**\n+     * Is the given annotation an accumulator annotation?\n+     *\n+     * @param anm an annotation mirror\n+     * @return true if the annotation mirror is an instance of this factory's accumulator annotation\n+     */\n+    public boolean isAccumulatorAnnotation(AnnotationMirror anm) {\n+        return AnnotationUtils.areSameByClass(anm, ACC);\n+    }\n+\n+    @Override\n+    protected TreeAnnotator createTreeAnnotator() {\n+        return new ListTreeAnnotator(\n+                super.createTreeAnnotator(), new AccumulationTreeAnnotator(this));\n+    }\n+\n+    /** Handles fluent APIs using the Returns Receiver Checker. */\n+    protected class AccumulationTreeAnnotator extends TreeAnnotator {\n+\n+        /**\n+         * Mandatory constructor.\n+         *\n+         * @param factory the type factory\n+         */\n+        public AccumulationTreeAnnotator(AccumulationAnnotatedTypeFactory factory) {\n+            super(factory);\n+        }\n+\n+        /**\n+         * If a method returns its receiver, and the receiver has an accumulation type, then the\n+         * default type of its return value is the type of the receiver.\n+         *\n+         * @param tree a method invocation tree\n+         * @param type the type of that tree (i.e. the return type of the invoked method). Is\n+         *     (possibly) side-effected by this method.\n+         * @return nothing, works by side-effect on {@code type}\n+         */\n+        @Override\n+        public Void visitMethodInvocation(MethodInvocationTree tree, AnnotatedTypeMirror type) {\n+            if (returnsThis(tree)) {\n+                // There is a @This annotation on the return type of the invoked method.\n+\n+                // Fetch the current type of the receiver, or top if none exists.\n+                ExpressionTree receiverTree = TreeUtils.getReceiverTree(tree.getMethodSelect());\n+                AnnotatedTypeMirror receiverType;\n+                AnnotationMirror receiverAnno;\n+\n+                if (receiverTree != null\n+                        && (receiverType = getAnnotatedType(receiverTree)) != null) {\n+                    receiverAnno = receiverType.getAnnotationInHierarchy(TOP);\n+                } else {\n+                    receiverAnno = TOP;\n+                }\n+\n+                type.replaceAnnotation(receiverAnno);\n+            }\n+            return super.visitMethodInvocation(tree, type);\n+        }\n+    }\n+\n+    @Override\n+    public QualifierHierarchy createQualifierHierarchy(MultiGraphFactory factory) {\n+        return new AccumulationQualifierHierarchy(factory);\n+    }\n+\n+    /**\n+     * All accumulation analyses share a similar type hierarchy. This hierarchy implements the\n+     * subtyping, LUB, and GLB for that hierarchy. The lattice looks like:\n+     *\n+     * <pre>\n+     *       top", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db3bcf35ce34724fbb2f868601ab10f198ead13"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mjg2MzU2OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo1MDoxNFrOGWR49g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo1MDoxNFrOGWR49g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxNDk2Ng==", "bodyText": "This is assumes that TOP has no value field, or might have no value field.\nThat's rather subtle.  To make this (and other) code easier to read, please create a method isTop and use it.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426014966", "createdAt": "2020-05-15T19:50:14Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,296 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement a constructor, which should\n+ * take a {@link BaseTypeChecker} and call both the constructor defined in this class and {@link\n+ * #postInit()}.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /** The canonical top annotation for this accumulation checker. */\n+    public final AnnotationMirror TOP;\n+\n+    /** The canonical bottom annotation for this accumulation checker. */\n+    public final AnnotationMirror BOTTOM;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> ACC;\n+\n+    /**\n+     * Create an annotated type factory for an accumulation checker.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.\n+     * @param top the top type in the hierarchy\n+     * @param bottom the bottom type in the hierarchy\n+     */\n+    protected AccumulationAnnotatedTypeFactory(\n+            BaseTypeChecker checker,\n+            Class<? extends Annotation> accumulator,\n+            Class<? extends Annotation> top,\n+            Class<? extends Annotation> bottom) {\n+        super(checker);\n+\n+        TOP = AnnotationBuilder.fromClass(elements, top);\n+        BOTTOM = AnnotationBuilder.fromClass(elements, bottom);\n+        ACC = accumulator;\n+\n+        // Every subclass must call postInit!  This does not do so for subclasses.\n+        if (this.getClass() == AccumulationAnnotatedTypeFactory.class) {\n+            this.postInit();\n+        }\n+    }\n+\n+    /**\n+     * Creates a new instance of the accumulator annotation that contains the elements of {@code\n+     * values} in sorted order.\n+     *\n+     * @param values the arguments to the annotation\n+     * @return an annotation mirror representing the accumulator annotation with {@code values}'s\n+     *     arguments, or top if {@code values} is empty\n+     */\n+    public AnnotationMirror createAccumulatorAnnotation(final String... values) {\n+        if (values.length == 0) {\n+            return TOP;\n+        }\n+        AnnotationBuilder builder = new AnnotationBuilder(processingEnv, ACC);\n+        Arrays.sort(values);\n+        builder.setValue(\"value\", values);\n+        return builder.build();\n+    }\n+\n+    /**\n+     * Returns true if the return type of the given method invocation tree has an @This annotation\n+     * from the Returns Receiver Checker.\n+     *\n+     * @param tree a method invocation tree\n+     * @return true if the method being invoked returns its receiver\n+     */\n+    public boolean returnsThis(final MethodInvocationTree tree) {\n+        ReturnsReceiverAnnotatedTypeFactory rrATF =\n+                getTypeFactoryOfSubchecker(ReturnsReceiverChecker.class);\n+        ExecutableElement methodEle = TreeUtils.elementFromUse(tree);\n+        AnnotatedTypeMirror methodAtm = rrATF.getAnnotatedType(methodEle);\n+        AnnotatedTypeMirror rrType =\n+                ((AnnotatedTypeMirror.AnnotatedExecutableType) methodAtm).getReturnType();\n+        return rrType != null && rrType.hasAnnotation(This.class);\n+    }\n+\n+    /**\n+     * Is the given annotation an accumulator annotation?\n+     *\n+     * @param anm an annotation mirror\n+     * @return true if the annotation mirror is an instance of this factory's accumulator annotation\n+     */\n+    public boolean isAccumulatorAnnotation(AnnotationMirror anm) {\n+        return AnnotationUtils.areSameByClass(anm, ACC);\n+    }\n+\n+    @Override\n+    protected TreeAnnotator createTreeAnnotator() {\n+        return new ListTreeAnnotator(\n+                super.createTreeAnnotator(), new AccumulationTreeAnnotator(this));\n+    }\n+\n+    /** Handles fluent APIs using the Returns Receiver Checker. */\n+    protected class AccumulationTreeAnnotator extends TreeAnnotator {\n+\n+        /**\n+         * Mandatory constructor.\n+         *\n+         * @param factory the type factory\n+         */\n+        public AccumulationTreeAnnotator(AccumulationAnnotatedTypeFactory factory) {\n+            super(factory);\n+        }\n+\n+        /**\n+         * If a method returns its receiver, and the receiver has an accumulation type, then the\n+         * default type of its return value is the type of the receiver.\n+         *\n+         * @param tree a method invocation tree\n+         * @param type the type of that tree (i.e. the return type of the invoked method). Is\n+         *     (possibly) side-effected by this method.\n+         * @return nothing, works by side-effect on {@code type}\n+         */\n+        @Override\n+        public Void visitMethodInvocation(MethodInvocationTree tree, AnnotatedTypeMirror type) {\n+            if (returnsThis(tree)) {\n+                // There is a @This annotation on the return type of the invoked method.\n+\n+                // Fetch the current type of the receiver, or top if none exists.\n+                ExpressionTree receiverTree = TreeUtils.getReceiverTree(tree.getMethodSelect());\n+                AnnotatedTypeMirror receiverType;\n+                AnnotationMirror receiverAnno;\n+\n+                if (receiverTree != null\n+                        && (receiverType = getAnnotatedType(receiverTree)) != null) {\n+                    receiverAnno = receiverType.getAnnotationInHierarchy(TOP);\n+                } else {\n+                    receiverAnno = TOP;\n+                }\n+\n+                type.replaceAnnotation(receiverAnno);\n+            }\n+            return super.visitMethodInvocation(tree, type);\n+        }\n+    }\n+\n+    @Override\n+    public QualifierHierarchy createQualifierHierarchy(MultiGraphFactory factory) {\n+        return new AccumulationQualifierHierarchy(factory);\n+    }\n+\n+    /**\n+     * All accumulation analyses share a similar type hierarchy. This hierarchy implements the\n+     * subtyping, LUB, and GLB for that hierarchy. The lattice looks like:\n+     *\n+     * <pre>\n+     *       top\n+     *      /   \\\n+     * acc(x)   acc(y) ...\n+     *      \\   /\n+     *     acc(x,y) ...\n+     *        |\n+     *      bottom\n+     * </pre>\n+     */\n+    protected class AccumulationQualifierHierarchy extends MultiGraphQualifierHierarchy {\n+\n+        /**\n+         * Create the qualifier hierarchy\n+         *\n+         * @param factory the factory\n+         */\n+        public AccumulationQualifierHierarchy(MultiGraphFactory factory) {\n+            super(factory);\n+        }\n+\n+        @Override\n+        public AnnotationMirror getTopAnnotation(final AnnotationMirror start) {\n+            return TOP;\n+        }\n+\n+        /**\n+         * GLB in this type system is set union of the arguments of the two annotations, unless one\n+         * of them is bottom, in which case the result is also bottom.\n+         */\n+        @Override\n+        public AnnotationMirror greatestLowerBound(\n+                final AnnotationMirror a1, final AnnotationMirror a2) {\n+            if (AnnotationUtils.areSame(a1, BOTTOM) || AnnotationUtils.areSame(a2, BOTTOM)) {\n+                return BOTTOM;\n+            }\n+\n+            if (!AnnotationUtils.hasElementValue(a1, \"value\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db3bcf35ce34724fbb2f868601ab10f198ead13"}, "originalPosition": 216}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mjg3NDEzOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo1NDowMFrOGWR_uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzowNDoxMFrOGWV_gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxNjY5OQ==", "bodyText": "The use of LinkedHashSet seems pointless here, because a1Val will be in the wrong order afterward -- and anyway, createAccumulatorAnnotation always sorts its argument.\nHow about one of these?\n\nmake a1Val a TreeSet\nmake a1Val a LinkedList and instead of doing addAll, do a mergesort merge step?  That can be done efficiently in O(n) time.\n\nWith either of these approaches, you can have a private createAccumulatorAnnotationFromSorted routine that takes a sorted list and doesn't need to call sort.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426016699", "createdAt": "2020-05-15T19:54:00Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,296 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement a constructor, which should\n+ * take a {@link BaseTypeChecker} and call both the constructor defined in this class and {@link\n+ * #postInit()}.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /** The canonical top annotation for this accumulation checker. */\n+    public final AnnotationMirror TOP;\n+\n+    /** The canonical bottom annotation for this accumulation checker. */\n+    public final AnnotationMirror BOTTOM;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> ACC;\n+\n+    /**\n+     * Create an annotated type factory for an accumulation checker.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.\n+     * @param top the top type in the hierarchy\n+     * @param bottom the bottom type in the hierarchy\n+     */\n+    protected AccumulationAnnotatedTypeFactory(\n+            BaseTypeChecker checker,\n+            Class<? extends Annotation> accumulator,\n+            Class<? extends Annotation> top,\n+            Class<? extends Annotation> bottom) {\n+        super(checker);\n+\n+        TOP = AnnotationBuilder.fromClass(elements, top);\n+        BOTTOM = AnnotationBuilder.fromClass(elements, bottom);\n+        ACC = accumulator;\n+\n+        // Every subclass must call postInit!  This does not do so for subclasses.\n+        if (this.getClass() == AccumulationAnnotatedTypeFactory.class) {\n+            this.postInit();\n+        }\n+    }\n+\n+    /**\n+     * Creates a new instance of the accumulator annotation that contains the elements of {@code\n+     * values} in sorted order.\n+     *\n+     * @param values the arguments to the annotation\n+     * @return an annotation mirror representing the accumulator annotation with {@code values}'s\n+     *     arguments, or top if {@code values} is empty\n+     */\n+    public AnnotationMirror createAccumulatorAnnotation(final String... values) {\n+        if (values.length == 0) {\n+            return TOP;\n+        }\n+        AnnotationBuilder builder = new AnnotationBuilder(processingEnv, ACC);\n+        Arrays.sort(values);\n+        builder.setValue(\"value\", values);\n+        return builder.build();\n+    }\n+\n+    /**\n+     * Returns true if the return type of the given method invocation tree has an @This annotation\n+     * from the Returns Receiver Checker.\n+     *\n+     * @param tree a method invocation tree\n+     * @return true if the method being invoked returns its receiver\n+     */\n+    public boolean returnsThis(final MethodInvocationTree tree) {\n+        ReturnsReceiverAnnotatedTypeFactory rrATF =\n+                getTypeFactoryOfSubchecker(ReturnsReceiverChecker.class);\n+        ExecutableElement methodEle = TreeUtils.elementFromUse(tree);\n+        AnnotatedTypeMirror methodAtm = rrATF.getAnnotatedType(methodEle);\n+        AnnotatedTypeMirror rrType =\n+                ((AnnotatedTypeMirror.AnnotatedExecutableType) methodAtm).getReturnType();\n+        return rrType != null && rrType.hasAnnotation(This.class);\n+    }\n+\n+    /**\n+     * Is the given annotation an accumulator annotation?\n+     *\n+     * @param anm an annotation mirror\n+     * @return true if the annotation mirror is an instance of this factory's accumulator annotation\n+     */\n+    public boolean isAccumulatorAnnotation(AnnotationMirror anm) {\n+        return AnnotationUtils.areSameByClass(anm, ACC);\n+    }\n+\n+    @Override\n+    protected TreeAnnotator createTreeAnnotator() {\n+        return new ListTreeAnnotator(\n+                super.createTreeAnnotator(), new AccumulationTreeAnnotator(this));\n+    }\n+\n+    /** Handles fluent APIs using the Returns Receiver Checker. */\n+    protected class AccumulationTreeAnnotator extends TreeAnnotator {\n+\n+        /**\n+         * Mandatory constructor.\n+         *\n+         * @param factory the type factory\n+         */\n+        public AccumulationTreeAnnotator(AccumulationAnnotatedTypeFactory factory) {\n+            super(factory);\n+        }\n+\n+        /**\n+         * If a method returns its receiver, and the receiver has an accumulation type, then the\n+         * default type of its return value is the type of the receiver.\n+         *\n+         * @param tree a method invocation tree\n+         * @param type the type of that tree (i.e. the return type of the invoked method). Is\n+         *     (possibly) side-effected by this method.\n+         * @return nothing, works by side-effect on {@code type}\n+         */\n+        @Override\n+        public Void visitMethodInvocation(MethodInvocationTree tree, AnnotatedTypeMirror type) {\n+            if (returnsThis(tree)) {\n+                // There is a @This annotation on the return type of the invoked method.\n+\n+                // Fetch the current type of the receiver, or top if none exists.\n+                ExpressionTree receiverTree = TreeUtils.getReceiverTree(tree.getMethodSelect());\n+                AnnotatedTypeMirror receiverType;\n+                AnnotationMirror receiverAnno;\n+\n+                if (receiverTree != null\n+                        && (receiverType = getAnnotatedType(receiverTree)) != null) {\n+                    receiverAnno = receiverType.getAnnotationInHierarchy(TOP);\n+                } else {\n+                    receiverAnno = TOP;\n+                }\n+\n+                type.replaceAnnotation(receiverAnno);\n+            }\n+            return super.visitMethodInvocation(tree, type);\n+        }\n+    }\n+\n+    @Override\n+    public QualifierHierarchy createQualifierHierarchy(MultiGraphFactory factory) {\n+        return new AccumulationQualifierHierarchy(factory);\n+    }\n+\n+    /**\n+     * All accumulation analyses share a similar type hierarchy. This hierarchy implements the\n+     * subtyping, LUB, and GLB for that hierarchy. The lattice looks like:\n+     *\n+     * <pre>\n+     *       top\n+     *      /   \\\n+     * acc(x)   acc(y) ...\n+     *      \\   /\n+     *     acc(x,y) ...\n+     *        |\n+     *      bottom\n+     * </pre>\n+     */\n+    protected class AccumulationQualifierHierarchy extends MultiGraphQualifierHierarchy {\n+\n+        /**\n+         * Create the qualifier hierarchy\n+         *\n+         * @param factory the factory\n+         */\n+        public AccumulationQualifierHierarchy(MultiGraphFactory factory) {\n+            super(factory);\n+        }\n+\n+        @Override\n+        public AnnotationMirror getTopAnnotation(final AnnotationMirror start) {\n+            return TOP;\n+        }\n+\n+        /**\n+         * GLB in this type system is set union of the arguments of the two annotations, unless one\n+         * of them is bottom, in which case the result is also bottom.\n+         */\n+        @Override\n+        public AnnotationMirror greatestLowerBound(\n+                final AnnotationMirror a1, final AnnotationMirror a2) {\n+            if (AnnotationUtils.areSame(a1, BOTTOM) || AnnotationUtils.areSame(a2, BOTTOM)) {\n+                return BOTTOM;\n+            }\n+\n+            if (!AnnotationUtils.hasElementValue(a1, \"value\")) {\n+                return a2;\n+            }\n+\n+            if (!AnnotationUtils.hasElementValue(a2, \"value\")) {\n+                return a1;\n+            }\n+\n+            if (isAccumulatorAnnotation(a1) && isAccumulatorAnnotation(a2)) {\n+                Set<String> a1Val =\n+                        new LinkedHashSet<>(\n+                                ValueCheckerUtils.getValueOfAnnotationWithStringArgument(a1));\n+                Set<String> a2Val =\n+                        new LinkedHashSet<>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db3bcf35ce34724fbb2f868601ab10f198ead13"}, "originalPosition": 229}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA3NTIxOQ==", "bodyText": "With either of these approaches, you can have a private createAccumulatorAnnotationFromSorted routine that takes a sorted list and doesn't need to call sort.\n\nI don't think this is a good idea. Arrays#sort is extremely optimized, and isn't going to spend very long to verify that an input array is sorted (O(n)) time, especially with such small arrays. I would prefer the safety of guaranteeing that the values of accumulator annotations are always sorted, even in the presence of bugs in the implementation, to the (extremely small) speedup you're proposing.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426075219", "createdAt": "2020-05-15T22:35:34Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,296 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement a constructor, which should\n+ * take a {@link BaseTypeChecker} and call both the constructor defined in this class and {@link\n+ * #postInit()}.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /** The canonical top annotation for this accumulation checker. */\n+    public final AnnotationMirror TOP;\n+\n+    /** The canonical bottom annotation for this accumulation checker. */\n+    public final AnnotationMirror BOTTOM;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> ACC;\n+\n+    /**\n+     * Create an annotated type factory for an accumulation checker.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.\n+     * @param top the top type in the hierarchy\n+     * @param bottom the bottom type in the hierarchy\n+     */\n+    protected AccumulationAnnotatedTypeFactory(\n+            BaseTypeChecker checker,\n+            Class<? extends Annotation> accumulator,\n+            Class<? extends Annotation> top,\n+            Class<? extends Annotation> bottom) {\n+        super(checker);\n+\n+        TOP = AnnotationBuilder.fromClass(elements, top);\n+        BOTTOM = AnnotationBuilder.fromClass(elements, bottom);\n+        ACC = accumulator;\n+\n+        // Every subclass must call postInit!  This does not do so for subclasses.\n+        if (this.getClass() == AccumulationAnnotatedTypeFactory.class) {\n+            this.postInit();\n+        }\n+    }\n+\n+    /**\n+     * Creates a new instance of the accumulator annotation that contains the elements of {@code\n+     * values} in sorted order.\n+     *\n+     * @param values the arguments to the annotation\n+     * @return an annotation mirror representing the accumulator annotation with {@code values}'s\n+     *     arguments, or top if {@code values} is empty\n+     */\n+    public AnnotationMirror createAccumulatorAnnotation(final String... values) {\n+        if (values.length == 0) {\n+            return TOP;\n+        }\n+        AnnotationBuilder builder = new AnnotationBuilder(processingEnv, ACC);\n+        Arrays.sort(values);\n+        builder.setValue(\"value\", values);\n+        return builder.build();\n+    }\n+\n+    /**\n+     * Returns true if the return type of the given method invocation tree has an @This annotation\n+     * from the Returns Receiver Checker.\n+     *\n+     * @param tree a method invocation tree\n+     * @return true if the method being invoked returns its receiver\n+     */\n+    public boolean returnsThis(final MethodInvocationTree tree) {\n+        ReturnsReceiverAnnotatedTypeFactory rrATF =\n+                getTypeFactoryOfSubchecker(ReturnsReceiverChecker.class);\n+        ExecutableElement methodEle = TreeUtils.elementFromUse(tree);\n+        AnnotatedTypeMirror methodAtm = rrATF.getAnnotatedType(methodEle);\n+        AnnotatedTypeMirror rrType =\n+                ((AnnotatedTypeMirror.AnnotatedExecutableType) methodAtm).getReturnType();\n+        return rrType != null && rrType.hasAnnotation(This.class);\n+    }\n+\n+    /**\n+     * Is the given annotation an accumulator annotation?\n+     *\n+     * @param anm an annotation mirror\n+     * @return true if the annotation mirror is an instance of this factory's accumulator annotation\n+     */\n+    public boolean isAccumulatorAnnotation(AnnotationMirror anm) {\n+        return AnnotationUtils.areSameByClass(anm, ACC);\n+    }\n+\n+    @Override\n+    protected TreeAnnotator createTreeAnnotator() {\n+        return new ListTreeAnnotator(\n+                super.createTreeAnnotator(), new AccumulationTreeAnnotator(this));\n+    }\n+\n+    /** Handles fluent APIs using the Returns Receiver Checker. */\n+    protected class AccumulationTreeAnnotator extends TreeAnnotator {\n+\n+        /**\n+         * Mandatory constructor.\n+         *\n+         * @param factory the type factory\n+         */\n+        public AccumulationTreeAnnotator(AccumulationAnnotatedTypeFactory factory) {\n+            super(factory);\n+        }\n+\n+        /**\n+         * If a method returns its receiver, and the receiver has an accumulation type, then the\n+         * default type of its return value is the type of the receiver.\n+         *\n+         * @param tree a method invocation tree\n+         * @param type the type of that tree (i.e. the return type of the invoked method). Is\n+         *     (possibly) side-effected by this method.\n+         * @return nothing, works by side-effect on {@code type}\n+         */\n+        @Override\n+        public Void visitMethodInvocation(MethodInvocationTree tree, AnnotatedTypeMirror type) {\n+            if (returnsThis(tree)) {\n+                // There is a @This annotation on the return type of the invoked method.\n+\n+                // Fetch the current type of the receiver, or top if none exists.\n+                ExpressionTree receiverTree = TreeUtils.getReceiverTree(tree.getMethodSelect());\n+                AnnotatedTypeMirror receiverType;\n+                AnnotationMirror receiverAnno;\n+\n+                if (receiverTree != null\n+                        && (receiverType = getAnnotatedType(receiverTree)) != null) {\n+                    receiverAnno = receiverType.getAnnotationInHierarchy(TOP);\n+                } else {\n+                    receiverAnno = TOP;\n+                }\n+\n+                type.replaceAnnotation(receiverAnno);\n+            }\n+            return super.visitMethodInvocation(tree, type);\n+        }\n+    }\n+\n+    @Override\n+    public QualifierHierarchy createQualifierHierarchy(MultiGraphFactory factory) {\n+        return new AccumulationQualifierHierarchy(factory);\n+    }\n+\n+    /**\n+     * All accumulation analyses share a similar type hierarchy. This hierarchy implements the\n+     * subtyping, LUB, and GLB for that hierarchy. The lattice looks like:\n+     *\n+     * <pre>\n+     *       top\n+     *      /   \\\n+     * acc(x)   acc(y) ...\n+     *      \\   /\n+     *     acc(x,y) ...\n+     *        |\n+     *      bottom\n+     * </pre>\n+     */\n+    protected class AccumulationQualifierHierarchy extends MultiGraphQualifierHierarchy {\n+\n+        /**\n+         * Create the qualifier hierarchy\n+         *\n+         * @param factory the factory\n+         */\n+        public AccumulationQualifierHierarchy(MultiGraphFactory factory) {\n+            super(factory);\n+        }\n+\n+        @Override\n+        public AnnotationMirror getTopAnnotation(final AnnotationMirror start) {\n+            return TOP;\n+        }\n+\n+        /**\n+         * GLB in this type system is set union of the arguments of the two annotations, unless one\n+         * of them is bottom, in which case the result is also bottom.\n+         */\n+        @Override\n+        public AnnotationMirror greatestLowerBound(\n+                final AnnotationMirror a1, final AnnotationMirror a2) {\n+            if (AnnotationUtils.areSame(a1, BOTTOM) || AnnotationUtils.areSame(a2, BOTTOM)) {\n+                return BOTTOM;\n+            }\n+\n+            if (!AnnotationUtils.hasElementValue(a1, \"value\")) {\n+                return a2;\n+            }\n+\n+            if (!AnnotationUtils.hasElementValue(a2, \"value\")) {\n+                return a1;\n+            }\n+\n+            if (isAccumulatorAnnotation(a1) && isAccumulatorAnnotation(a2)) {\n+                Set<String> a1Val =\n+                        new LinkedHashSet<>(\n+                                ValueCheckerUtils.getValueOfAnnotationWithStringArgument(a1));\n+                Set<String> a2Val =\n+                        new LinkedHashSet<>(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxNjY5OQ=="}, "originalCommit": {"oid": "1db3bcf35ce34724fbb2f868601ab10f198ead13"}, "originalPosition": 229}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4MjE3OQ==", "bodyText": "To follow up on this, I just looked through how the Value Checker handles subtyping, etc. between @StringVal annotations, and I'm going to do the same thing here. It uses List rather than converting to sets in the QualifierHierarchy, and sorts and removes at the same time by converting to a TreeSet and back in the method that produces new StringVal annotations.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426082179", "createdAt": "2020-05-15T23:04:10Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,296 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement a constructor, which should\n+ * take a {@link BaseTypeChecker} and call both the constructor defined in this class and {@link\n+ * #postInit()}.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /** The canonical top annotation for this accumulation checker. */\n+    public final AnnotationMirror TOP;\n+\n+    /** The canonical bottom annotation for this accumulation checker. */\n+    public final AnnotationMirror BOTTOM;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> ACC;\n+\n+    /**\n+     * Create an annotated type factory for an accumulation checker.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.\n+     * @param top the top type in the hierarchy\n+     * @param bottom the bottom type in the hierarchy\n+     */\n+    protected AccumulationAnnotatedTypeFactory(\n+            BaseTypeChecker checker,\n+            Class<? extends Annotation> accumulator,\n+            Class<? extends Annotation> top,\n+            Class<? extends Annotation> bottom) {\n+        super(checker);\n+\n+        TOP = AnnotationBuilder.fromClass(elements, top);\n+        BOTTOM = AnnotationBuilder.fromClass(elements, bottom);\n+        ACC = accumulator;\n+\n+        // Every subclass must call postInit!  This does not do so for subclasses.\n+        if (this.getClass() == AccumulationAnnotatedTypeFactory.class) {\n+            this.postInit();\n+        }\n+    }\n+\n+    /**\n+     * Creates a new instance of the accumulator annotation that contains the elements of {@code\n+     * values} in sorted order.\n+     *\n+     * @param values the arguments to the annotation\n+     * @return an annotation mirror representing the accumulator annotation with {@code values}'s\n+     *     arguments, or top if {@code values} is empty\n+     */\n+    public AnnotationMirror createAccumulatorAnnotation(final String... values) {\n+        if (values.length == 0) {\n+            return TOP;\n+        }\n+        AnnotationBuilder builder = new AnnotationBuilder(processingEnv, ACC);\n+        Arrays.sort(values);\n+        builder.setValue(\"value\", values);\n+        return builder.build();\n+    }\n+\n+    /**\n+     * Returns true if the return type of the given method invocation tree has an @This annotation\n+     * from the Returns Receiver Checker.\n+     *\n+     * @param tree a method invocation tree\n+     * @return true if the method being invoked returns its receiver\n+     */\n+    public boolean returnsThis(final MethodInvocationTree tree) {\n+        ReturnsReceiverAnnotatedTypeFactory rrATF =\n+                getTypeFactoryOfSubchecker(ReturnsReceiverChecker.class);\n+        ExecutableElement methodEle = TreeUtils.elementFromUse(tree);\n+        AnnotatedTypeMirror methodAtm = rrATF.getAnnotatedType(methodEle);\n+        AnnotatedTypeMirror rrType =\n+                ((AnnotatedTypeMirror.AnnotatedExecutableType) methodAtm).getReturnType();\n+        return rrType != null && rrType.hasAnnotation(This.class);\n+    }\n+\n+    /**\n+     * Is the given annotation an accumulator annotation?\n+     *\n+     * @param anm an annotation mirror\n+     * @return true if the annotation mirror is an instance of this factory's accumulator annotation\n+     */\n+    public boolean isAccumulatorAnnotation(AnnotationMirror anm) {\n+        return AnnotationUtils.areSameByClass(anm, ACC);\n+    }\n+\n+    @Override\n+    protected TreeAnnotator createTreeAnnotator() {\n+        return new ListTreeAnnotator(\n+                super.createTreeAnnotator(), new AccumulationTreeAnnotator(this));\n+    }\n+\n+    /** Handles fluent APIs using the Returns Receiver Checker. */\n+    protected class AccumulationTreeAnnotator extends TreeAnnotator {\n+\n+        /**\n+         * Mandatory constructor.\n+         *\n+         * @param factory the type factory\n+         */\n+        public AccumulationTreeAnnotator(AccumulationAnnotatedTypeFactory factory) {\n+            super(factory);\n+        }\n+\n+        /**\n+         * If a method returns its receiver, and the receiver has an accumulation type, then the\n+         * default type of its return value is the type of the receiver.\n+         *\n+         * @param tree a method invocation tree\n+         * @param type the type of that tree (i.e. the return type of the invoked method). Is\n+         *     (possibly) side-effected by this method.\n+         * @return nothing, works by side-effect on {@code type}\n+         */\n+        @Override\n+        public Void visitMethodInvocation(MethodInvocationTree tree, AnnotatedTypeMirror type) {\n+            if (returnsThis(tree)) {\n+                // There is a @This annotation on the return type of the invoked method.\n+\n+                // Fetch the current type of the receiver, or top if none exists.\n+                ExpressionTree receiverTree = TreeUtils.getReceiverTree(tree.getMethodSelect());\n+                AnnotatedTypeMirror receiverType;\n+                AnnotationMirror receiverAnno;\n+\n+                if (receiverTree != null\n+                        && (receiverType = getAnnotatedType(receiverTree)) != null) {\n+                    receiverAnno = receiverType.getAnnotationInHierarchy(TOP);\n+                } else {\n+                    receiverAnno = TOP;\n+                }\n+\n+                type.replaceAnnotation(receiverAnno);\n+            }\n+            return super.visitMethodInvocation(tree, type);\n+        }\n+    }\n+\n+    @Override\n+    public QualifierHierarchy createQualifierHierarchy(MultiGraphFactory factory) {\n+        return new AccumulationQualifierHierarchy(factory);\n+    }\n+\n+    /**\n+     * All accumulation analyses share a similar type hierarchy. This hierarchy implements the\n+     * subtyping, LUB, and GLB for that hierarchy. The lattice looks like:\n+     *\n+     * <pre>\n+     *       top\n+     *      /   \\\n+     * acc(x)   acc(y) ...\n+     *      \\   /\n+     *     acc(x,y) ...\n+     *        |\n+     *      bottom\n+     * </pre>\n+     */\n+    protected class AccumulationQualifierHierarchy extends MultiGraphQualifierHierarchy {\n+\n+        /**\n+         * Create the qualifier hierarchy\n+         *\n+         * @param factory the factory\n+         */\n+        public AccumulationQualifierHierarchy(MultiGraphFactory factory) {\n+            super(factory);\n+        }\n+\n+        @Override\n+        public AnnotationMirror getTopAnnotation(final AnnotationMirror start) {\n+            return TOP;\n+        }\n+\n+        /**\n+         * GLB in this type system is set union of the arguments of the two annotations, unless one\n+         * of them is bottom, in which case the result is also bottom.\n+         */\n+        @Override\n+        public AnnotationMirror greatestLowerBound(\n+                final AnnotationMirror a1, final AnnotationMirror a2) {\n+            if (AnnotationUtils.areSame(a1, BOTTOM) || AnnotationUtils.areSame(a2, BOTTOM)) {\n+                return BOTTOM;\n+            }\n+\n+            if (!AnnotationUtils.hasElementValue(a1, \"value\")) {\n+                return a2;\n+            }\n+\n+            if (!AnnotationUtils.hasElementValue(a2, \"value\")) {\n+                return a1;\n+            }\n+\n+            if (isAccumulatorAnnotation(a1) && isAccumulatorAnnotation(a2)) {\n+                Set<String> a1Val =\n+                        new LinkedHashSet<>(\n+                                ValueCheckerUtils.getValueOfAnnotationWithStringArgument(a1));\n+                Set<String> a2Val =\n+                        new LinkedHashSet<>(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxNjY5OQ=="}, "originalCommit": {"oid": "1db3bcf35ce34724fbb2f868601ab10f198ead13"}, "originalPosition": 229}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mjg4MDQxOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo1NjoyMFrOGWSDuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo1NjoyMFrOGWSDuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxNzcyMw==", "bodyText": "This does not have to be a LinkedHashSet.  A HashSet will give the same results.  Though with a LinkedHashSet (or just a LinkedList for both variables is more efficient), you can do an O(n) instead of O(n log n) pass to remove duplicates, and then call a createAccumulatorAnnotationFromSorted routine to avoid subsequent calls to sort.\n(More generally, it seems the code is trying to retain order to reduce the need for sorting, but then it does not take advantage of that (except insofar as sort may run faster on a partially-sorted array).", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426017723", "createdAt": "2020-05-15T19:56:20Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,296 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement a constructor, which should\n+ * take a {@link BaseTypeChecker} and call both the constructor defined in this class and {@link\n+ * #postInit()}.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /** The canonical top annotation for this accumulation checker. */\n+    public final AnnotationMirror TOP;\n+\n+    /** The canonical bottom annotation for this accumulation checker. */\n+    public final AnnotationMirror BOTTOM;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> ACC;\n+\n+    /**\n+     * Create an annotated type factory for an accumulation checker.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.\n+     * @param top the top type in the hierarchy\n+     * @param bottom the bottom type in the hierarchy\n+     */\n+    protected AccumulationAnnotatedTypeFactory(\n+            BaseTypeChecker checker,\n+            Class<? extends Annotation> accumulator,\n+            Class<? extends Annotation> top,\n+            Class<? extends Annotation> bottom) {\n+        super(checker);\n+\n+        TOP = AnnotationBuilder.fromClass(elements, top);\n+        BOTTOM = AnnotationBuilder.fromClass(elements, bottom);\n+        ACC = accumulator;\n+\n+        // Every subclass must call postInit!  This does not do so for subclasses.\n+        if (this.getClass() == AccumulationAnnotatedTypeFactory.class) {\n+            this.postInit();\n+        }\n+    }\n+\n+    /**\n+     * Creates a new instance of the accumulator annotation that contains the elements of {@code\n+     * values} in sorted order.\n+     *\n+     * @param values the arguments to the annotation\n+     * @return an annotation mirror representing the accumulator annotation with {@code values}'s\n+     *     arguments, or top if {@code values} is empty\n+     */\n+    public AnnotationMirror createAccumulatorAnnotation(final String... values) {\n+        if (values.length == 0) {\n+            return TOP;\n+        }\n+        AnnotationBuilder builder = new AnnotationBuilder(processingEnv, ACC);\n+        Arrays.sort(values);\n+        builder.setValue(\"value\", values);\n+        return builder.build();\n+    }\n+\n+    /**\n+     * Returns true if the return type of the given method invocation tree has an @This annotation\n+     * from the Returns Receiver Checker.\n+     *\n+     * @param tree a method invocation tree\n+     * @return true if the method being invoked returns its receiver\n+     */\n+    public boolean returnsThis(final MethodInvocationTree tree) {\n+        ReturnsReceiverAnnotatedTypeFactory rrATF =\n+                getTypeFactoryOfSubchecker(ReturnsReceiverChecker.class);\n+        ExecutableElement methodEle = TreeUtils.elementFromUse(tree);\n+        AnnotatedTypeMirror methodAtm = rrATF.getAnnotatedType(methodEle);\n+        AnnotatedTypeMirror rrType =\n+                ((AnnotatedTypeMirror.AnnotatedExecutableType) methodAtm).getReturnType();\n+        return rrType != null && rrType.hasAnnotation(This.class);\n+    }\n+\n+    /**\n+     * Is the given annotation an accumulator annotation?\n+     *\n+     * @param anm an annotation mirror\n+     * @return true if the annotation mirror is an instance of this factory's accumulator annotation\n+     */\n+    public boolean isAccumulatorAnnotation(AnnotationMirror anm) {\n+        return AnnotationUtils.areSameByClass(anm, ACC);\n+    }\n+\n+    @Override\n+    protected TreeAnnotator createTreeAnnotator() {\n+        return new ListTreeAnnotator(\n+                super.createTreeAnnotator(), new AccumulationTreeAnnotator(this));\n+    }\n+\n+    /** Handles fluent APIs using the Returns Receiver Checker. */\n+    protected class AccumulationTreeAnnotator extends TreeAnnotator {\n+\n+        /**\n+         * Mandatory constructor.\n+         *\n+         * @param factory the type factory\n+         */\n+        public AccumulationTreeAnnotator(AccumulationAnnotatedTypeFactory factory) {\n+            super(factory);\n+        }\n+\n+        /**\n+         * If a method returns its receiver, and the receiver has an accumulation type, then the\n+         * default type of its return value is the type of the receiver.\n+         *\n+         * @param tree a method invocation tree\n+         * @param type the type of that tree (i.e. the return type of the invoked method). Is\n+         *     (possibly) side-effected by this method.\n+         * @return nothing, works by side-effect on {@code type}\n+         */\n+        @Override\n+        public Void visitMethodInvocation(MethodInvocationTree tree, AnnotatedTypeMirror type) {\n+            if (returnsThis(tree)) {\n+                // There is a @This annotation on the return type of the invoked method.\n+\n+                // Fetch the current type of the receiver, or top if none exists.\n+                ExpressionTree receiverTree = TreeUtils.getReceiverTree(tree.getMethodSelect());\n+                AnnotatedTypeMirror receiverType;\n+                AnnotationMirror receiverAnno;\n+\n+                if (receiverTree != null\n+                        && (receiverType = getAnnotatedType(receiverTree)) != null) {\n+                    receiverAnno = receiverType.getAnnotationInHierarchy(TOP);\n+                } else {\n+                    receiverAnno = TOP;\n+                }\n+\n+                type.replaceAnnotation(receiverAnno);\n+            }\n+            return super.visitMethodInvocation(tree, type);\n+        }\n+    }\n+\n+    @Override\n+    public QualifierHierarchy createQualifierHierarchy(MultiGraphFactory factory) {\n+        return new AccumulationQualifierHierarchy(factory);\n+    }\n+\n+    /**\n+     * All accumulation analyses share a similar type hierarchy. This hierarchy implements the\n+     * subtyping, LUB, and GLB for that hierarchy. The lattice looks like:\n+     *\n+     * <pre>\n+     *       top\n+     *      /   \\\n+     * acc(x)   acc(y) ...\n+     *      \\   /\n+     *     acc(x,y) ...\n+     *        |\n+     *      bottom\n+     * </pre>\n+     */\n+    protected class AccumulationQualifierHierarchy extends MultiGraphQualifierHierarchy {\n+\n+        /**\n+         * Create the qualifier hierarchy\n+         *\n+         * @param factory the factory\n+         */\n+        public AccumulationQualifierHierarchy(MultiGraphFactory factory) {\n+            super(factory);\n+        }\n+\n+        @Override\n+        public AnnotationMirror getTopAnnotation(final AnnotationMirror start) {\n+            return TOP;\n+        }\n+\n+        /**\n+         * GLB in this type system is set union of the arguments of the two annotations, unless one\n+         * of them is bottom, in which case the result is also bottom.\n+         */\n+        @Override\n+        public AnnotationMirror greatestLowerBound(\n+                final AnnotationMirror a1, final AnnotationMirror a2) {\n+            if (AnnotationUtils.areSame(a1, BOTTOM) || AnnotationUtils.areSame(a2, BOTTOM)) {\n+                return BOTTOM;\n+            }\n+\n+            if (!AnnotationUtils.hasElementValue(a1, \"value\")) {\n+                return a2;\n+            }\n+\n+            if (!AnnotationUtils.hasElementValue(a2, \"value\")) {\n+                return a1;\n+            }\n+\n+            if (isAccumulatorAnnotation(a1) && isAccumulatorAnnotation(a2)) {\n+                Set<String> a1Val =\n+                        new LinkedHashSet<>(\n+                                ValueCheckerUtils.getValueOfAnnotationWithStringArgument(a1));\n+                Set<String> a2Val =\n+                        new LinkedHashSet<>(\n+                                ValueCheckerUtils.getValueOfAnnotationWithStringArgument(a2));\n+                a1Val.addAll(a2Val);\n+                return createAccumulatorAnnotation(a1Val.toArray(new String[0]));\n+            } else {\n+                return BOTTOM;\n+            }\n+        }\n+\n+        /**\n+         * LUB in this type system is set intersection of the arguments of the two annotations,\n+         * unless one of them is bottom, in which case the result is the other annotation.\n+         */\n+        @Override\n+        public AnnotationMirror leastUpperBound(\n+                final AnnotationMirror a1, final AnnotationMirror a2) {\n+            if (AnnotationUtils.areSame(a1, BOTTOM)) {\n+                return a2;\n+            } else if (AnnotationUtils.areSame(a2, BOTTOM)) {\n+                return a1;\n+            }\n+\n+            if (!AnnotationUtils.hasElementValue(a1, \"value\")) {\n+                return a1;\n+            }\n+\n+            if (!AnnotationUtils.hasElementValue(a2, \"value\")) {\n+                return a2;\n+            }\n+\n+            if (isAccumulatorAnnotation(a1) && isAccumulatorAnnotation(a2)) {\n+                Set<String> a1Val =\n+                        new LinkedHashSet<>(\n+                                ValueCheckerUtils.getValueOfAnnotationWithStringArgument(a1));\n+                Set<String> a2Val =\n+                        new LinkedHashSet<>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db3bcf35ce34724fbb2f868601ab10f198ead13"}, "originalPosition": 264}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mjg4MzExOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo1NzoyM1rOGWSFhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMjo0NTowMlrOGWVtdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxODE4Mw==", "bodyText": "This uses a different test for top than !AnnotationUtils.hasElementValue(a1, \"value\") above.  Abstract it out into a method call, throughout.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426018183", "createdAt": "2020-05-15T19:57:23Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,296 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement a constructor, which should\n+ * take a {@link BaseTypeChecker} and call both the constructor defined in this class and {@link\n+ * #postInit()}.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /** The canonical top annotation for this accumulation checker. */\n+    public final AnnotationMirror TOP;\n+\n+    /** The canonical bottom annotation for this accumulation checker. */\n+    public final AnnotationMirror BOTTOM;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> ACC;\n+\n+    /**\n+     * Create an annotated type factory for an accumulation checker.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.\n+     * @param top the top type in the hierarchy\n+     * @param bottom the bottom type in the hierarchy\n+     */\n+    protected AccumulationAnnotatedTypeFactory(\n+            BaseTypeChecker checker,\n+            Class<? extends Annotation> accumulator,\n+            Class<? extends Annotation> top,\n+            Class<? extends Annotation> bottom) {\n+        super(checker);\n+\n+        TOP = AnnotationBuilder.fromClass(elements, top);\n+        BOTTOM = AnnotationBuilder.fromClass(elements, bottom);\n+        ACC = accumulator;\n+\n+        // Every subclass must call postInit!  This does not do so for subclasses.\n+        if (this.getClass() == AccumulationAnnotatedTypeFactory.class) {\n+            this.postInit();\n+        }\n+    }\n+\n+    /**\n+     * Creates a new instance of the accumulator annotation that contains the elements of {@code\n+     * values} in sorted order.\n+     *\n+     * @param values the arguments to the annotation\n+     * @return an annotation mirror representing the accumulator annotation with {@code values}'s\n+     *     arguments, or top if {@code values} is empty\n+     */\n+    public AnnotationMirror createAccumulatorAnnotation(final String... values) {\n+        if (values.length == 0) {\n+            return TOP;\n+        }\n+        AnnotationBuilder builder = new AnnotationBuilder(processingEnv, ACC);\n+        Arrays.sort(values);\n+        builder.setValue(\"value\", values);\n+        return builder.build();\n+    }\n+\n+    /**\n+     * Returns true if the return type of the given method invocation tree has an @This annotation\n+     * from the Returns Receiver Checker.\n+     *\n+     * @param tree a method invocation tree\n+     * @return true if the method being invoked returns its receiver\n+     */\n+    public boolean returnsThis(final MethodInvocationTree tree) {\n+        ReturnsReceiverAnnotatedTypeFactory rrATF =\n+                getTypeFactoryOfSubchecker(ReturnsReceiverChecker.class);\n+        ExecutableElement methodEle = TreeUtils.elementFromUse(tree);\n+        AnnotatedTypeMirror methodAtm = rrATF.getAnnotatedType(methodEle);\n+        AnnotatedTypeMirror rrType =\n+                ((AnnotatedTypeMirror.AnnotatedExecutableType) methodAtm).getReturnType();\n+        return rrType != null && rrType.hasAnnotation(This.class);\n+    }\n+\n+    /**\n+     * Is the given annotation an accumulator annotation?\n+     *\n+     * @param anm an annotation mirror\n+     * @return true if the annotation mirror is an instance of this factory's accumulator annotation\n+     */\n+    public boolean isAccumulatorAnnotation(AnnotationMirror anm) {\n+        return AnnotationUtils.areSameByClass(anm, ACC);\n+    }\n+\n+    @Override\n+    protected TreeAnnotator createTreeAnnotator() {\n+        return new ListTreeAnnotator(\n+                super.createTreeAnnotator(), new AccumulationTreeAnnotator(this));\n+    }\n+\n+    /** Handles fluent APIs using the Returns Receiver Checker. */\n+    protected class AccumulationTreeAnnotator extends TreeAnnotator {\n+\n+        /**\n+         * Mandatory constructor.\n+         *\n+         * @param factory the type factory\n+         */\n+        public AccumulationTreeAnnotator(AccumulationAnnotatedTypeFactory factory) {\n+            super(factory);\n+        }\n+\n+        /**\n+         * If a method returns its receiver, and the receiver has an accumulation type, then the\n+         * default type of its return value is the type of the receiver.\n+         *\n+         * @param tree a method invocation tree\n+         * @param type the type of that tree (i.e. the return type of the invoked method). Is\n+         *     (possibly) side-effected by this method.\n+         * @return nothing, works by side-effect on {@code type}\n+         */\n+        @Override\n+        public Void visitMethodInvocation(MethodInvocationTree tree, AnnotatedTypeMirror type) {\n+            if (returnsThis(tree)) {\n+                // There is a @This annotation on the return type of the invoked method.\n+\n+                // Fetch the current type of the receiver, or top if none exists.\n+                ExpressionTree receiverTree = TreeUtils.getReceiverTree(tree.getMethodSelect());\n+                AnnotatedTypeMirror receiverType;\n+                AnnotationMirror receiverAnno;\n+\n+                if (receiverTree != null\n+                        && (receiverType = getAnnotatedType(receiverTree)) != null) {\n+                    receiverAnno = receiverType.getAnnotationInHierarchy(TOP);\n+                } else {\n+                    receiverAnno = TOP;\n+                }\n+\n+                type.replaceAnnotation(receiverAnno);\n+            }\n+            return super.visitMethodInvocation(tree, type);\n+        }\n+    }\n+\n+    @Override\n+    public QualifierHierarchy createQualifierHierarchy(MultiGraphFactory factory) {\n+        return new AccumulationQualifierHierarchy(factory);\n+    }\n+\n+    /**\n+     * All accumulation analyses share a similar type hierarchy. This hierarchy implements the\n+     * subtyping, LUB, and GLB for that hierarchy. The lattice looks like:\n+     *\n+     * <pre>\n+     *       top\n+     *      /   \\\n+     * acc(x)   acc(y) ...\n+     *      \\   /\n+     *     acc(x,y) ...\n+     *        |\n+     *      bottom\n+     * </pre>\n+     */\n+    protected class AccumulationQualifierHierarchy extends MultiGraphQualifierHierarchy {\n+\n+        /**\n+         * Create the qualifier hierarchy\n+         *\n+         * @param factory the factory\n+         */\n+        public AccumulationQualifierHierarchy(MultiGraphFactory factory) {\n+            super(factory);\n+        }\n+\n+        @Override\n+        public AnnotationMirror getTopAnnotation(final AnnotationMirror start) {\n+            return TOP;\n+        }\n+\n+        /**\n+         * GLB in this type system is set union of the arguments of the two annotations, unless one\n+         * of them is bottom, in which case the result is also bottom.\n+         */\n+        @Override\n+        public AnnotationMirror greatestLowerBound(\n+                final AnnotationMirror a1, final AnnotationMirror a2) {\n+            if (AnnotationUtils.areSame(a1, BOTTOM) || AnnotationUtils.areSame(a2, BOTTOM)) {\n+                return BOTTOM;\n+            }\n+\n+            if (!AnnotationUtils.hasElementValue(a1, \"value\")) {\n+                return a2;\n+            }\n+\n+            if (!AnnotationUtils.hasElementValue(a2, \"value\")) {\n+                return a1;\n+            }\n+\n+            if (isAccumulatorAnnotation(a1) && isAccumulatorAnnotation(a2)) {\n+                Set<String> a1Val =\n+                        new LinkedHashSet<>(\n+                                ValueCheckerUtils.getValueOfAnnotationWithStringArgument(a1));\n+                Set<String> a2Val =\n+                        new LinkedHashSet<>(\n+                                ValueCheckerUtils.getValueOfAnnotationWithStringArgument(a2));\n+                a1Val.addAll(a2Val);\n+                return createAccumulatorAnnotation(a1Val.toArray(new String[0]));\n+            } else {\n+                return BOTTOM;\n+            }\n+        }\n+\n+        /**\n+         * LUB in this type system is set intersection of the arguments of the two annotations,\n+         * unless one of them is bottom, in which case the result is the other annotation.\n+         */\n+        @Override\n+        public AnnotationMirror leastUpperBound(\n+                final AnnotationMirror a1, final AnnotationMirror a2) {\n+            if (AnnotationUtils.areSame(a1, BOTTOM)) {\n+                return a2;\n+            } else if (AnnotationUtils.areSame(a2, BOTTOM)) {\n+                return a1;\n+            }\n+\n+            if (!AnnotationUtils.hasElementValue(a1, \"value\")) {\n+                return a1;\n+            }\n+\n+            if (!AnnotationUtils.hasElementValue(a2, \"value\")) {\n+                return a2;\n+            }\n+\n+            if (isAccumulatorAnnotation(a1) && isAccumulatorAnnotation(a2)) {\n+                Set<String> a1Val =\n+                        new LinkedHashSet<>(\n+                                ValueCheckerUtils.getValueOfAnnotationWithStringArgument(a1));\n+                Set<String> a2Val =\n+                        new LinkedHashSet<>(\n+                                ValueCheckerUtils.getValueOfAnnotationWithStringArgument(a2));\n+                a1Val.retainAll(a2Val);\n+                return createAccumulatorAnnotation(a1Val.toArray(new String[0]));\n+            } else {\n+                return TOP;\n+            }\n+        }\n+\n+        /** isSubtype in this type system is subset. */\n+        @Override\n+        public boolean isSubtype(final AnnotationMirror subAnno, final AnnotationMirror superAnno) {\n+            if (AnnotationUtils.areSame(subAnno, BOTTOM)) {\n+                return true;\n+            }\n+            if (AnnotationUtils.areSame(superAnno, BOTTOM)) {\n+                return false;\n+            }\n+\n+            if (AnnotationUtils.areSame(superAnno, TOP)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db3bcf35ce34724fbb2f868601ab10f198ead13"}, "originalPosition": 283}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA3NzU1OA==", "bodyText": "For consistency with how bottom is tested here and throughout, I changed all the checks for top to this one. I don't see the point of another procedure call that is just a wrapper for this call to AnnotationUtils#areSame", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426077558", "createdAt": "2020-05-15T22:45:02Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,296 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement a constructor, which should\n+ * take a {@link BaseTypeChecker} and call both the constructor defined in this class and {@link\n+ * #postInit()}.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /** The canonical top annotation for this accumulation checker. */\n+    public final AnnotationMirror TOP;\n+\n+    /** The canonical bottom annotation for this accumulation checker. */\n+    public final AnnotationMirror BOTTOM;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> ACC;\n+\n+    /**\n+     * Create an annotated type factory for an accumulation checker.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.\n+     * @param top the top type in the hierarchy\n+     * @param bottom the bottom type in the hierarchy\n+     */\n+    protected AccumulationAnnotatedTypeFactory(\n+            BaseTypeChecker checker,\n+            Class<? extends Annotation> accumulator,\n+            Class<? extends Annotation> top,\n+            Class<? extends Annotation> bottom) {\n+        super(checker);\n+\n+        TOP = AnnotationBuilder.fromClass(elements, top);\n+        BOTTOM = AnnotationBuilder.fromClass(elements, bottom);\n+        ACC = accumulator;\n+\n+        // Every subclass must call postInit!  This does not do so for subclasses.\n+        if (this.getClass() == AccumulationAnnotatedTypeFactory.class) {\n+            this.postInit();\n+        }\n+    }\n+\n+    /**\n+     * Creates a new instance of the accumulator annotation that contains the elements of {@code\n+     * values} in sorted order.\n+     *\n+     * @param values the arguments to the annotation\n+     * @return an annotation mirror representing the accumulator annotation with {@code values}'s\n+     *     arguments, or top if {@code values} is empty\n+     */\n+    public AnnotationMirror createAccumulatorAnnotation(final String... values) {\n+        if (values.length == 0) {\n+            return TOP;\n+        }\n+        AnnotationBuilder builder = new AnnotationBuilder(processingEnv, ACC);\n+        Arrays.sort(values);\n+        builder.setValue(\"value\", values);\n+        return builder.build();\n+    }\n+\n+    /**\n+     * Returns true if the return type of the given method invocation tree has an @This annotation\n+     * from the Returns Receiver Checker.\n+     *\n+     * @param tree a method invocation tree\n+     * @return true if the method being invoked returns its receiver\n+     */\n+    public boolean returnsThis(final MethodInvocationTree tree) {\n+        ReturnsReceiverAnnotatedTypeFactory rrATF =\n+                getTypeFactoryOfSubchecker(ReturnsReceiverChecker.class);\n+        ExecutableElement methodEle = TreeUtils.elementFromUse(tree);\n+        AnnotatedTypeMirror methodAtm = rrATF.getAnnotatedType(methodEle);\n+        AnnotatedTypeMirror rrType =\n+                ((AnnotatedTypeMirror.AnnotatedExecutableType) methodAtm).getReturnType();\n+        return rrType != null && rrType.hasAnnotation(This.class);\n+    }\n+\n+    /**\n+     * Is the given annotation an accumulator annotation?\n+     *\n+     * @param anm an annotation mirror\n+     * @return true if the annotation mirror is an instance of this factory's accumulator annotation\n+     */\n+    public boolean isAccumulatorAnnotation(AnnotationMirror anm) {\n+        return AnnotationUtils.areSameByClass(anm, ACC);\n+    }\n+\n+    @Override\n+    protected TreeAnnotator createTreeAnnotator() {\n+        return new ListTreeAnnotator(\n+                super.createTreeAnnotator(), new AccumulationTreeAnnotator(this));\n+    }\n+\n+    /** Handles fluent APIs using the Returns Receiver Checker. */\n+    protected class AccumulationTreeAnnotator extends TreeAnnotator {\n+\n+        /**\n+         * Mandatory constructor.\n+         *\n+         * @param factory the type factory\n+         */\n+        public AccumulationTreeAnnotator(AccumulationAnnotatedTypeFactory factory) {\n+            super(factory);\n+        }\n+\n+        /**\n+         * If a method returns its receiver, and the receiver has an accumulation type, then the\n+         * default type of its return value is the type of the receiver.\n+         *\n+         * @param tree a method invocation tree\n+         * @param type the type of that tree (i.e. the return type of the invoked method). Is\n+         *     (possibly) side-effected by this method.\n+         * @return nothing, works by side-effect on {@code type}\n+         */\n+        @Override\n+        public Void visitMethodInvocation(MethodInvocationTree tree, AnnotatedTypeMirror type) {\n+            if (returnsThis(tree)) {\n+                // There is a @This annotation on the return type of the invoked method.\n+\n+                // Fetch the current type of the receiver, or top if none exists.\n+                ExpressionTree receiverTree = TreeUtils.getReceiverTree(tree.getMethodSelect());\n+                AnnotatedTypeMirror receiverType;\n+                AnnotationMirror receiverAnno;\n+\n+                if (receiverTree != null\n+                        && (receiverType = getAnnotatedType(receiverTree)) != null) {\n+                    receiverAnno = receiverType.getAnnotationInHierarchy(TOP);\n+                } else {\n+                    receiverAnno = TOP;\n+                }\n+\n+                type.replaceAnnotation(receiverAnno);\n+            }\n+            return super.visitMethodInvocation(tree, type);\n+        }\n+    }\n+\n+    @Override\n+    public QualifierHierarchy createQualifierHierarchy(MultiGraphFactory factory) {\n+        return new AccumulationQualifierHierarchy(factory);\n+    }\n+\n+    /**\n+     * All accumulation analyses share a similar type hierarchy. This hierarchy implements the\n+     * subtyping, LUB, and GLB for that hierarchy. The lattice looks like:\n+     *\n+     * <pre>\n+     *       top\n+     *      /   \\\n+     * acc(x)   acc(y) ...\n+     *      \\   /\n+     *     acc(x,y) ...\n+     *        |\n+     *      bottom\n+     * </pre>\n+     */\n+    protected class AccumulationQualifierHierarchy extends MultiGraphQualifierHierarchy {\n+\n+        /**\n+         * Create the qualifier hierarchy\n+         *\n+         * @param factory the factory\n+         */\n+        public AccumulationQualifierHierarchy(MultiGraphFactory factory) {\n+            super(factory);\n+        }\n+\n+        @Override\n+        public AnnotationMirror getTopAnnotation(final AnnotationMirror start) {\n+            return TOP;\n+        }\n+\n+        /**\n+         * GLB in this type system is set union of the arguments of the two annotations, unless one\n+         * of them is bottom, in which case the result is also bottom.\n+         */\n+        @Override\n+        public AnnotationMirror greatestLowerBound(\n+                final AnnotationMirror a1, final AnnotationMirror a2) {\n+            if (AnnotationUtils.areSame(a1, BOTTOM) || AnnotationUtils.areSame(a2, BOTTOM)) {\n+                return BOTTOM;\n+            }\n+\n+            if (!AnnotationUtils.hasElementValue(a1, \"value\")) {\n+                return a2;\n+            }\n+\n+            if (!AnnotationUtils.hasElementValue(a2, \"value\")) {\n+                return a1;\n+            }\n+\n+            if (isAccumulatorAnnotation(a1) && isAccumulatorAnnotation(a2)) {\n+                Set<String> a1Val =\n+                        new LinkedHashSet<>(\n+                                ValueCheckerUtils.getValueOfAnnotationWithStringArgument(a1));\n+                Set<String> a2Val =\n+                        new LinkedHashSet<>(\n+                                ValueCheckerUtils.getValueOfAnnotationWithStringArgument(a2));\n+                a1Val.addAll(a2Val);\n+                return createAccumulatorAnnotation(a1Val.toArray(new String[0]));\n+            } else {\n+                return BOTTOM;\n+            }\n+        }\n+\n+        /**\n+         * LUB in this type system is set intersection of the arguments of the two annotations,\n+         * unless one of them is bottom, in which case the result is the other annotation.\n+         */\n+        @Override\n+        public AnnotationMirror leastUpperBound(\n+                final AnnotationMirror a1, final AnnotationMirror a2) {\n+            if (AnnotationUtils.areSame(a1, BOTTOM)) {\n+                return a2;\n+            } else if (AnnotationUtils.areSame(a2, BOTTOM)) {\n+                return a1;\n+            }\n+\n+            if (!AnnotationUtils.hasElementValue(a1, \"value\")) {\n+                return a1;\n+            }\n+\n+            if (!AnnotationUtils.hasElementValue(a2, \"value\")) {\n+                return a2;\n+            }\n+\n+            if (isAccumulatorAnnotation(a1) && isAccumulatorAnnotation(a2)) {\n+                Set<String> a1Val =\n+                        new LinkedHashSet<>(\n+                                ValueCheckerUtils.getValueOfAnnotationWithStringArgument(a1));\n+                Set<String> a2Val =\n+                        new LinkedHashSet<>(\n+                                ValueCheckerUtils.getValueOfAnnotationWithStringArgument(a2));\n+                a1Val.retainAll(a2Val);\n+                return createAccumulatorAnnotation(a1Val.toArray(new String[0]));\n+            } else {\n+                return TOP;\n+            }\n+        }\n+\n+        /** isSubtype in this type system is subset. */\n+        @Override\n+        public boolean isSubtype(final AnnotationMirror subAnno, final AnnotationMirror superAnno) {\n+            if (AnnotationUtils.areSame(subAnno, BOTTOM)) {\n+                return true;\n+            }\n+            if (AnnotationUtils.areSame(superAnno, BOTTOM)) {\n+                return false;\n+            }\n+\n+            if (AnnotationUtils.areSame(superAnno, TOP)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxODE4Mw=="}, "originalCommit": {"oid": "1db3bcf35ce34724fbb2f868601ab10f198ead13"}, "originalPosition": 283}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mjg4NTI1OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo1ODoxM1rOGWSG6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo1ODoxM1rOGWSG6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxODUzOQ==", "bodyText": "Since both lists are sorted, this can use an O(n) algorithm rather than the O(n^2) algorithm in List.containsAll.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426018539", "createdAt": "2020-05-15T19:58:13Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,296 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement a constructor, which should\n+ * take a {@link BaseTypeChecker} and call both the constructor defined in this class and {@link\n+ * #postInit()}.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /** The canonical top annotation for this accumulation checker. */\n+    public final AnnotationMirror TOP;\n+\n+    /** The canonical bottom annotation for this accumulation checker. */\n+    public final AnnotationMirror BOTTOM;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> ACC;\n+\n+    /**\n+     * Create an annotated type factory for an accumulation checker.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.\n+     * @param top the top type in the hierarchy\n+     * @param bottom the bottom type in the hierarchy\n+     */\n+    protected AccumulationAnnotatedTypeFactory(\n+            BaseTypeChecker checker,\n+            Class<? extends Annotation> accumulator,\n+            Class<? extends Annotation> top,\n+            Class<? extends Annotation> bottom) {\n+        super(checker);\n+\n+        TOP = AnnotationBuilder.fromClass(elements, top);\n+        BOTTOM = AnnotationBuilder.fromClass(elements, bottom);\n+        ACC = accumulator;\n+\n+        // Every subclass must call postInit!  This does not do so for subclasses.\n+        if (this.getClass() == AccumulationAnnotatedTypeFactory.class) {\n+            this.postInit();\n+        }\n+    }\n+\n+    /**\n+     * Creates a new instance of the accumulator annotation that contains the elements of {@code\n+     * values} in sorted order.\n+     *\n+     * @param values the arguments to the annotation\n+     * @return an annotation mirror representing the accumulator annotation with {@code values}'s\n+     *     arguments, or top if {@code values} is empty\n+     */\n+    public AnnotationMirror createAccumulatorAnnotation(final String... values) {\n+        if (values.length == 0) {\n+            return TOP;\n+        }\n+        AnnotationBuilder builder = new AnnotationBuilder(processingEnv, ACC);\n+        Arrays.sort(values);\n+        builder.setValue(\"value\", values);\n+        return builder.build();\n+    }\n+\n+    /**\n+     * Returns true if the return type of the given method invocation tree has an @This annotation\n+     * from the Returns Receiver Checker.\n+     *\n+     * @param tree a method invocation tree\n+     * @return true if the method being invoked returns its receiver\n+     */\n+    public boolean returnsThis(final MethodInvocationTree tree) {\n+        ReturnsReceiverAnnotatedTypeFactory rrATF =\n+                getTypeFactoryOfSubchecker(ReturnsReceiverChecker.class);\n+        ExecutableElement methodEle = TreeUtils.elementFromUse(tree);\n+        AnnotatedTypeMirror methodAtm = rrATF.getAnnotatedType(methodEle);\n+        AnnotatedTypeMirror rrType =\n+                ((AnnotatedTypeMirror.AnnotatedExecutableType) methodAtm).getReturnType();\n+        return rrType != null && rrType.hasAnnotation(This.class);\n+    }\n+\n+    /**\n+     * Is the given annotation an accumulator annotation?\n+     *\n+     * @param anm an annotation mirror\n+     * @return true if the annotation mirror is an instance of this factory's accumulator annotation\n+     */\n+    public boolean isAccumulatorAnnotation(AnnotationMirror anm) {\n+        return AnnotationUtils.areSameByClass(anm, ACC);\n+    }\n+\n+    @Override\n+    protected TreeAnnotator createTreeAnnotator() {\n+        return new ListTreeAnnotator(\n+                super.createTreeAnnotator(), new AccumulationTreeAnnotator(this));\n+    }\n+\n+    /** Handles fluent APIs using the Returns Receiver Checker. */\n+    protected class AccumulationTreeAnnotator extends TreeAnnotator {\n+\n+        /**\n+         * Mandatory constructor.\n+         *\n+         * @param factory the type factory\n+         */\n+        public AccumulationTreeAnnotator(AccumulationAnnotatedTypeFactory factory) {\n+            super(factory);\n+        }\n+\n+        /**\n+         * If a method returns its receiver, and the receiver has an accumulation type, then the\n+         * default type of its return value is the type of the receiver.\n+         *\n+         * @param tree a method invocation tree\n+         * @param type the type of that tree (i.e. the return type of the invoked method). Is\n+         *     (possibly) side-effected by this method.\n+         * @return nothing, works by side-effect on {@code type}\n+         */\n+        @Override\n+        public Void visitMethodInvocation(MethodInvocationTree tree, AnnotatedTypeMirror type) {\n+            if (returnsThis(tree)) {\n+                // There is a @This annotation on the return type of the invoked method.\n+\n+                // Fetch the current type of the receiver, or top if none exists.\n+                ExpressionTree receiverTree = TreeUtils.getReceiverTree(tree.getMethodSelect());\n+                AnnotatedTypeMirror receiverType;\n+                AnnotationMirror receiverAnno;\n+\n+                if (receiverTree != null\n+                        && (receiverType = getAnnotatedType(receiverTree)) != null) {\n+                    receiverAnno = receiverType.getAnnotationInHierarchy(TOP);\n+                } else {\n+                    receiverAnno = TOP;\n+                }\n+\n+                type.replaceAnnotation(receiverAnno);\n+            }\n+            return super.visitMethodInvocation(tree, type);\n+        }\n+    }\n+\n+    @Override\n+    public QualifierHierarchy createQualifierHierarchy(MultiGraphFactory factory) {\n+        return new AccumulationQualifierHierarchy(factory);\n+    }\n+\n+    /**\n+     * All accumulation analyses share a similar type hierarchy. This hierarchy implements the\n+     * subtyping, LUB, and GLB for that hierarchy. The lattice looks like:\n+     *\n+     * <pre>\n+     *       top\n+     *      /   \\\n+     * acc(x)   acc(y) ...\n+     *      \\   /\n+     *     acc(x,y) ...\n+     *        |\n+     *      bottom\n+     * </pre>\n+     */\n+    protected class AccumulationQualifierHierarchy extends MultiGraphQualifierHierarchy {\n+\n+        /**\n+         * Create the qualifier hierarchy\n+         *\n+         * @param factory the factory\n+         */\n+        public AccumulationQualifierHierarchy(MultiGraphFactory factory) {\n+            super(factory);\n+        }\n+\n+        @Override\n+        public AnnotationMirror getTopAnnotation(final AnnotationMirror start) {\n+            return TOP;\n+        }\n+\n+        /**\n+         * GLB in this type system is set union of the arguments of the two annotations, unless one\n+         * of them is bottom, in which case the result is also bottom.\n+         */\n+        @Override\n+        public AnnotationMirror greatestLowerBound(\n+                final AnnotationMirror a1, final AnnotationMirror a2) {\n+            if (AnnotationUtils.areSame(a1, BOTTOM) || AnnotationUtils.areSame(a2, BOTTOM)) {\n+                return BOTTOM;\n+            }\n+\n+            if (!AnnotationUtils.hasElementValue(a1, \"value\")) {\n+                return a2;\n+            }\n+\n+            if (!AnnotationUtils.hasElementValue(a2, \"value\")) {\n+                return a1;\n+            }\n+\n+            if (isAccumulatorAnnotation(a1) && isAccumulatorAnnotation(a2)) {\n+                Set<String> a1Val =\n+                        new LinkedHashSet<>(\n+                                ValueCheckerUtils.getValueOfAnnotationWithStringArgument(a1));\n+                Set<String> a2Val =\n+                        new LinkedHashSet<>(\n+                                ValueCheckerUtils.getValueOfAnnotationWithStringArgument(a2));\n+                a1Val.addAll(a2Val);\n+                return createAccumulatorAnnotation(a1Val.toArray(new String[0]));\n+            } else {\n+                return BOTTOM;\n+            }\n+        }\n+\n+        /**\n+         * LUB in this type system is set intersection of the arguments of the two annotations,\n+         * unless one of them is bottom, in which case the result is the other annotation.\n+         */\n+        @Override\n+        public AnnotationMirror leastUpperBound(\n+                final AnnotationMirror a1, final AnnotationMirror a2) {\n+            if (AnnotationUtils.areSame(a1, BOTTOM)) {\n+                return a2;\n+            } else if (AnnotationUtils.areSame(a2, BOTTOM)) {\n+                return a1;\n+            }\n+\n+            if (!AnnotationUtils.hasElementValue(a1, \"value\")) {\n+                return a1;\n+            }\n+\n+            if (!AnnotationUtils.hasElementValue(a2, \"value\")) {\n+                return a2;\n+            }\n+\n+            if (isAccumulatorAnnotation(a1) && isAccumulatorAnnotation(a2)) {\n+                Set<String> a1Val =\n+                        new LinkedHashSet<>(\n+                                ValueCheckerUtils.getValueOfAnnotationWithStringArgument(a1));\n+                Set<String> a2Val =\n+                        new LinkedHashSet<>(\n+                                ValueCheckerUtils.getValueOfAnnotationWithStringArgument(a2));\n+                a1Val.retainAll(a2Val);\n+                return createAccumulatorAnnotation(a1Val.toArray(new String[0]));\n+            } else {\n+                return TOP;\n+            }\n+        }\n+\n+        /** isSubtype in this type system is subset. */\n+        @Override\n+        public boolean isSubtype(final AnnotationMirror subAnno, final AnnotationMirror superAnno) {\n+            if (AnnotationUtils.areSame(subAnno, BOTTOM)) {\n+                return true;\n+            }\n+            if (AnnotationUtils.areSame(superAnno, BOTTOM)) {\n+                return false;\n+            }\n+\n+            if (AnnotationUtils.areSame(superAnno, TOP)) {\n+                return true;\n+            }\n+            if (AnnotationUtils.areSame(subAnno, TOP)) {\n+                return false;\n+            }\n+\n+            List<String> subVal = ValueCheckerUtils.getValueOfAnnotationWithStringArgument(subAnno);\n+            List<String> superVal =\n+                    ValueCheckerUtils.getValueOfAnnotationWithStringArgument(superAnno);\n+            return subVal.containsAll(superVal);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db3bcf35ce34724fbb2f868601ab10f198ead13"}, "originalPosition": 293}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mjg4NjA1OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo1ODozN1rOGWSHhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzowOTo1MVrOGWWETw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxODY5Mw==", "bodyText": "What does \"Required\" mean to convey here?", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426018693", "createdAt": "2020-05-15T19:58:37Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate} or\n+ * {@link #accumulate(MethodInvocationNode, TransferResult, String...)} methods to accumulate a\n+ * string at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    /** The type factory. */\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    /**\n+     * Required constructor.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db3bcf35ce34724fbb2f868601ab10f198ead13"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4MzQwNw==", "bodyText": "see my comment about \"mandatory\" above. In my opinion, there's no need for Javadoc for these constructors.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426083407", "createdAt": "2020-05-15T23:09:51Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate} or\n+ * {@link #accumulate(MethodInvocationNode, TransferResult, String...)} methods to accumulate a\n+ * string at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    /** The type factory. */\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    /**\n+     * Required constructor.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxODY5Mw=="}, "originalCommit": {"oid": "1db3bcf35ce34724fbb2f868601ab10f198ead13"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mjg4OTQyOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxOTo1OTo1NVrOGWSJoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzo0OTo0MVrOGWWjKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxOTIzMw==", "bodyText": "The first sentence says this method is about receivers, but a.b().c() is not the receiver nor within the reciever.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426019233", "createdAt": "2020-05-15T19:59:55Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate} or\n+ * {@link #accumulate(MethodInvocationNode, TransferResult, String...)} methods to accumulate a\n+ * string at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    /** The type factory. */\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    /**\n+     * Required constructor.\n+     *\n+     * @param analysis the analysis\n+     */\n+    public AccumulationTransfer(CFAnalysis analysis) {\n+        super(analysis);\n+        typeFactory = (AccumulationAnnotatedTypeFactory) analysis.getTypeFactory();\n+    }\n+\n+    /**\n+     * Updates the estimate of how many things {@code node} has accumulated.\n+     *\n+     * @param node the node whose estimate should be expanded\n+     * @param result the transfer result containing the store to be modified\n+     * @param values the new accumulation values\n+     */\n+    public void accumulate(Node node, TransferResult<CFValue, CFStore> result, String... values) {\n+        AnnotatedTypeMirror oldType = typeFactory.getAnnotatedType(node.getTree());\n+        AnnotationMirror newAnno = getNewAnno(oldType, values);\n+        insertIntoStores(result, node, newAnno);\n+    }\n+\n+    /**\n+     * Updates the estimate for the receiver and any other receiver-returning methods in a chain\n+     * with this MethodInvocationNode to include the new values.\n+     *\n+     * <p>For example, if the argument is the expression {@code a.b().c()}, the new value is \"foo\",\n+     * and b and c return their receiver (and are deterministic), all of the expressions {@code a},\n+     * {@code a.b()}, and {@code a.b().c()} would have their estimates updated to include \"foo\". If", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db3bcf35ce34724fbb2f868601ab10f198ead13"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5MTMwNQ==", "bodyText": "Thanks for pointing this out. This method didn't actually do what it said it did. I've consolidated the two accumulate methods, and their documentation should now be accurate. There was a corresponding error in TestAccumulationTransfer where accumulate was called on the method invocation (i.e. the return type), not the receiver, as it should have been. These two errors together allowed the tests to pass.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426091305", "createdAt": "2020-05-15T23:49:41Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate} or\n+ * {@link #accumulate(MethodInvocationNode, TransferResult, String...)} methods to accumulate a\n+ * string at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    /** The type factory. */\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    /**\n+     * Required constructor.\n+     *\n+     * @param analysis the analysis\n+     */\n+    public AccumulationTransfer(CFAnalysis analysis) {\n+        super(analysis);\n+        typeFactory = (AccumulationAnnotatedTypeFactory) analysis.getTypeFactory();\n+    }\n+\n+    /**\n+     * Updates the estimate of how many things {@code node} has accumulated.\n+     *\n+     * @param node the node whose estimate should be expanded\n+     * @param result the transfer result containing the store to be modified\n+     * @param values the new accumulation values\n+     */\n+    public void accumulate(Node node, TransferResult<CFValue, CFStore> result, String... values) {\n+        AnnotatedTypeMirror oldType = typeFactory.getAnnotatedType(node.getTree());\n+        AnnotationMirror newAnno = getNewAnno(oldType, values);\n+        insertIntoStores(result, node, newAnno);\n+    }\n+\n+    /**\n+     * Updates the estimate for the receiver and any other receiver-returning methods in a chain\n+     * with this MethodInvocationNode to include the new values.\n+     *\n+     * <p>For example, if the argument is the expression {@code a.b().c()}, the new value is \"foo\",\n+     * and b and c return their receiver (and are deterministic), all of the expressions {@code a},\n+     * {@code a.b()}, and {@code a.b().c()} would have their estimates updated to include \"foo\". If", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxOTIzMw=="}, "originalCommit": {"oid": "1db3bcf35ce34724fbb2f868601ab10f198ead13"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mjg5MjgzOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDowMToxM1rOGWSL4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDowMToxM1rOGWSL4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxOTgwOQ==", "bodyText": "Does \"not affected\" mean they are not updated, or they are updated as if all the methods had been deterministic, or they are updated (not \"not updated\"), but maybe in a different way than if all the methods had been deterministic?", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426019809", "createdAt": "2020-05-15T20:01:13Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate} or\n+ * {@link #accumulate(MethodInvocationNode, TransferResult, String...)} methods to accumulate a\n+ * string at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    /** The type factory. */\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    /**\n+     * Required constructor.\n+     *\n+     * @param analysis the analysis\n+     */\n+    public AccumulationTransfer(CFAnalysis analysis) {\n+        super(analysis);\n+        typeFactory = (AccumulationAnnotatedTypeFactory) analysis.getTypeFactory();\n+    }\n+\n+    /**\n+     * Updates the estimate of how many things {@code node} has accumulated.\n+     *\n+     * @param node the node whose estimate should be expanded\n+     * @param result the transfer result containing the store to be modified\n+     * @param values the new accumulation values\n+     */\n+    public void accumulate(Node node, TransferResult<CFValue, CFStore> result, String... values) {\n+        AnnotatedTypeMirror oldType = typeFactory.getAnnotatedType(node.getTree());\n+        AnnotationMirror newAnno = getNewAnno(oldType, values);\n+        insertIntoStores(result, node, newAnno);\n+    }\n+\n+    /**\n+     * Updates the estimate for the receiver and any other receiver-returning methods in a chain\n+     * with this MethodInvocationNode to include the new values.\n+     *\n+     * <p>For example, if the argument is the expression {@code a.b().c()}, the new value is \"foo\",\n+     * and b and c return their receiver (and are deterministic), all of the expressions {@code a},\n+     * {@code a.b()}, and {@code a.b().c()} would have their estimates updated to include \"foo\". If\n+     * any method in the chain is non-deterministic, its estimate will not be updated (but the rest\n+     * of the chain is not affected).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db3bcf35ce34724fbb2f868601ab10f198ead13"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mjg5MzM0OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDowMToyNlrOGWSMNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDowMToyNlrOGWSMNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAxOTg5Mg==", "bodyText": "Please be more specific.  Is this union?", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426019892", "createdAt": "2020-05-15T20:01:26Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate} or\n+ * {@link #accumulate(MethodInvocationNode, TransferResult, String...)} methods to accumulate a\n+ * string at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    /** The type factory. */\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    /**\n+     * Required constructor.\n+     *\n+     * @param analysis the analysis\n+     */\n+    public AccumulationTransfer(CFAnalysis analysis) {\n+        super(analysis);\n+        typeFactory = (AccumulationAnnotatedTypeFactory) analysis.getTypeFactory();\n+    }\n+\n+    /**\n+     * Updates the estimate of how many things {@code node} has accumulated.\n+     *\n+     * @param node the node whose estimate should be expanded\n+     * @param result the transfer result containing the store to be modified\n+     * @param values the new accumulation values\n+     */\n+    public void accumulate(Node node, TransferResult<CFValue, CFStore> result, String... values) {\n+        AnnotatedTypeMirror oldType = typeFactory.getAnnotatedType(node.getTree());\n+        AnnotationMirror newAnno = getNewAnno(oldType, values);\n+        insertIntoStores(result, node, newAnno);\n+    }\n+\n+    /**\n+     * Updates the estimate for the receiver and any other receiver-returning methods in a chain\n+     * with this MethodInvocationNode to include the new values.\n+     *\n+     * <p>For example, if the argument is the expression {@code a.b().c()}, the new value is \"foo\",\n+     * and b and c return their receiver (and are deterministic), all of the expressions {@code a},\n+     * {@code a.b()}, and {@code a.b().c()} would have their estimates updated to include \"foo\". If\n+     * any method in the chain is non-deterministic, its estimate will not be updated (but the rest\n+     * of the chain is not affected).\n+     *\n+     * @param node a method invocation whose receiver is to be updated\n+     * @param result the result containing the store to be modified\n+     * @param values the new accumulation values\n+     */\n+    public void accumulate(\n+            MethodInvocationNode node, TransferResult<CFValue, CFStore> result, String... values) {\n+        Node receiver = node.getTarget().getReceiver();\n+        AnnotatedTypeMirror oldType = typeFactory.getReceiverType(node.getTree());\n+        // e.g. if the node being visited is static\n+        if (oldType == null) {\n+            return;\n+        }\n+        AnnotationMirror newAnno = getNewAnno(oldType, values);\n+        while (receiver != null) {\n+            // Note that this call doesn't do anything if receiver is a method call\n+            // that is not deterministic, though it can still continue to recurse.\n+            insertIntoStores(result, receiver, newAnno);\n+\n+            Tree receiverTree = receiver.getTree();\n+            // Possibly recurse: if the receiver is itself a method call,\n+            // then we need to also propagate this new information to its receiver\n+            // if the method being called has an @This return type.\n+            //\n+            // Note that we must check for null, because the tree could be\n+            // implicit (when calling an instance method on the class itself).\n+            // In that case, do not attempt to refine either - the receiver is\n+            // not a method invocation, anyway.\n+            if (receiverTree == null || receiverTree.getKind() != Tree.Kind.METHOD_INVOCATION) {\n+                // Do not continue, because the receiver isn't a method invocation itself. The\n+                // end of the chain of calls has been reached.\n+                break;\n+            }\n+\n+            MethodInvocationTree receiverAsMethodInvocation =\n+                    (MethodInvocationTree) receiver.getTree();\n+\n+            if (typeFactory.returnsThis(receiverAsMethodInvocation)) {\n+                receiver = ((MethodInvocationNode) receiver).getTarget().getReceiver();\n+            } else {\n+                // Do not continue, because the method does not return @This.\n+                break;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Combines the values in oldType with the values in newValues to produce a single accumulator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db3bcf35ce34724fbb2f868601ab10f198ead13"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mjg5NTU0OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDowMjoyMlrOGWSNnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzo1MTo1MVrOGWWk4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAyMDI1NQ==", "bodyText": "getNewAnno is a vague name that I found confusing at call sites.  Please rename it.  Should \"New\" in the name be replaced by \"Glb\"?  (Or possibly by \"Union\"?)", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426020255", "createdAt": "2020-05-15T20:02:22Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate} or\n+ * {@link #accumulate(MethodInvocationNode, TransferResult, String...)} methods to accumulate a\n+ * string at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    /** The type factory. */\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    /**\n+     * Required constructor.\n+     *\n+     * @param analysis the analysis\n+     */\n+    public AccumulationTransfer(CFAnalysis analysis) {\n+        super(analysis);\n+        typeFactory = (AccumulationAnnotatedTypeFactory) analysis.getTypeFactory();\n+    }\n+\n+    /**\n+     * Updates the estimate of how many things {@code node} has accumulated.\n+     *\n+     * @param node the node whose estimate should be expanded\n+     * @param result the transfer result containing the store to be modified\n+     * @param values the new accumulation values\n+     */\n+    public void accumulate(Node node, TransferResult<CFValue, CFStore> result, String... values) {\n+        AnnotatedTypeMirror oldType = typeFactory.getAnnotatedType(node.getTree());\n+        AnnotationMirror newAnno = getNewAnno(oldType, values);\n+        insertIntoStores(result, node, newAnno);\n+    }\n+\n+    /**\n+     * Updates the estimate for the receiver and any other receiver-returning methods in a chain\n+     * with this MethodInvocationNode to include the new values.\n+     *\n+     * <p>For example, if the argument is the expression {@code a.b().c()}, the new value is \"foo\",\n+     * and b and c return their receiver (and are deterministic), all of the expressions {@code a},\n+     * {@code a.b()}, and {@code a.b().c()} would have their estimates updated to include \"foo\". If\n+     * any method in the chain is non-deterministic, its estimate will not be updated (but the rest\n+     * of the chain is not affected).\n+     *\n+     * @param node a method invocation whose receiver is to be updated\n+     * @param result the result containing the store to be modified\n+     * @param values the new accumulation values\n+     */\n+    public void accumulate(\n+            MethodInvocationNode node, TransferResult<CFValue, CFStore> result, String... values) {\n+        Node receiver = node.getTarget().getReceiver();\n+        AnnotatedTypeMirror oldType = typeFactory.getReceiverType(node.getTree());\n+        // e.g. if the node being visited is static\n+        if (oldType == null) {\n+            return;\n+        }\n+        AnnotationMirror newAnno = getNewAnno(oldType, values);\n+        while (receiver != null) {\n+            // Note that this call doesn't do anything if receiver is a method call\n+            // that is not deterministic, though it can still continue to recurse.\n+            insertIntoStores(result, receiver, newAnno);\n+\n+            Tree receiverTree = receiver.getTree();\n+            // Possibly recurse: if the receiver is itself a method call,\n+            // then we need to also propagate this new information to its receiver\n+            // if the method being called has an @This return type.\n+            //\n+            // Note that we must check for null, because the tree could be\n+            // implicit (when calling an instance method on the class itself).\n+            // In that case, do not attempt to refine either - the receiver is\n+            // not a method invocation, anyway.\n+            if (receiverTree == null || receiverTree.getKind() != Tree.Kind.METHOD_INVOCATION) {\n+                // Do not continue, because the receiver isn't a method invocation itself. The\n+                // end of the chain of calls has been reached.\n+                break;\n+            }\n+\n+            MethodInvocationTree receiverAsMethodInvocation =\n+                    (MethodInvocationTree) receiver.getTree();\n+\n+            if (typeFactory.returnsThis(receiverAsMethodInvocation)) {\n+                receiver = ((MethodInvocationNode) receiver).getTarget().getReceiver();\n+            } else {\n+                // Do not continue, because the method does not return @This.\n+                break;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Combines the values in oldType with the values in newValues to produce a single accumulator\n+     * type qualifier.\n+     *\n+     * @param oldType an annotated type mirror whose values should be included\n+     * @param newValues new values to include\n+     * @return an annotation representing all the values\n+     */\n+    private AnnotationMirror getNewAnno(AnnotatedTypeMirror oldType, String[] newValues) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db3bcf35ce34724fbb2f868601ab10f198ead13"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5MTc0Nw==", "bodyText": "I prefer \"combined\", but if that's still confusing I can change it to \"union\", which I think sounds weird when you say it out loud", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426091747", "createdAt": "2020-05-15T23:51:51Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate} or\n+ * {@link #accumulate(MethodInvocationNode, TransferResult, String...)} methods to accumulate a\n+ * string at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    /** The type factory. */\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    /**\n+     * Required constructor.\n+     *\n+     * @param analysis the analysis\n+     */\n+    public AccumulationTransfer(CFAnalysis analysis) {\n+        super(analysis);\n+        typeFactory = (AccumulationAnnotatedTypeFactory) analysis.getTypeFactory();\n+    }\n+\n+    /**\n+     * Updates the estimate of how many things {@code node} has accumulated.\n+     *\n+     * @param node the node whose estimate should be expanded\n+     * @param result the transfer result containing the store to be modified\n+     * @param values the new accumulation values\n+     */\n+    public void accumulate(Node node, TransferResult<CFValue, CFStore> result, String... values) {\n+        AnnotatedTypeMirror oldType = typeFactory.getAnnotatedType(node.getTree());\n+        AnnotationMirror newAnno = getNewAnno(oldType, values);\n+        insertIntoStores(result, node, newAnno);\n+    }\n+\n+    /**\n+     * Updates the estimate for the receiver and any other receiver-returning methods in a chain\n+     * with this MethodInvocationNode to include the new values.\n+     *\n+     * <p>For example, if the argument is the expression {@code a.b().c()}, the new value is \"foo\",\n+     * and b and c return their receiver (and are deterministic), all of the expressions {@code a},\n+     * {@code a.b()}, and {@code a.b().c()} would have their estimates updated to include \"foo\". If\n+     * any method in the chain is non-deterministic, its estimate will not be updated (but the rest\n+     * of the chain is not affected).\n+     *\n+     * @param node a method invocation whose receiver is to be updated\n+     * @param result the result containing the store to be modified\n+     * @param values the new accumulation values\n+     */\n+    public void accumulate(\n+            MethodInvocationNode node, TransferResult<CFValue, CFStore> result, String... values) {\n+        Node receiver = node.getTarget().getReceiver();\n+        AnnotatedTypeMirror oldType = typeFactory.getReceiverType(node.getTree());\n+        // e.g. if the node being visited is static\n+        if (oldType == null) {\n+            return;\n+        }\n+        AnnotationMirror newAnno = getNewAnno(oldType, values);\n+        while (receiver != null) {\n+            // Note that this call doesn't do anything if receiver is a method call\n+            // that is not deterministic, though it can still continue to recurse.\n+            insertIntoStores(result, receiver, newAnno);\n+\n+            Tree receiverTree = receiver.getTree();\n+            // Possibly recurse: if the receiver is itself a method call,\n+            // then we need to also propagate this new information to its receiver\n+            // if the method being called has an @This return type.\n+            //\n+            // Note that we must check for null, because the tree could be\n+            // implicit (when calling an instance method on the class itself).\n+            // In that case, do not attempt to refine either - the receiver is\n+            // not a method invocation, anyway.\n+            if (receiverTree == null || receiverTree.getKind() != Tree.Kind.METHOD_INVOCATION) {\n+                // Do not continue, because the receiver isn't a method invocation itself. The\n+                // end of the chain of calls has been reached.\n+                break;\n+            }\n+\n+            MethodInvocationTree receiverAsMethodInvocation =\n+                    (MethodInvocationTree) receiver.getTree();\n+\n+            if (typeFactory.returnsThis(receiverAsMethodInvocation)) {\n+                receiver = ((MethodInvocationNode) receiver).getTarget().getReceiver();\n+            } else {\n+                // Do not continue, because the method does not return @This.\n+                break;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Combines the values in oldType with the values in newValues to produce a single accumulator\n+     * type qualifier.\n+     *\n+     * @param oldType an annotated type mirror whose values should be included\n+     * @param newValues new values to include\n+     * @return an annotation representing all the values\n+     */\n+    private AnnotationMirror getNewAnno(AnnotatedTypeMirror oldType, String[] newValues) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAyMDI1NQ=="}, "originalCommit": {"oid": "1db3bcf35ce34724fbb2f868601ab10f198ead13"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mjg5ODUwOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDowMzoyNlrOGWSPcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzo1MzozOFrOGWWmCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAyMDcyMw==", "bodyText": "How can !typeFactory.isAccumulatorAnnotation(oldAnno) be true?  Is that an error?  Or is it a funny way to test for BOTTOM and (in some type systems) TOP?", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426020723", "createdAt": "2020-05-15T20:03:26Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate} or\n+ * {@link #accumulate(MethodInvocationNode, TransferResult, String...)} methods to accumulate a\n+ * string at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    /** The type factory. */\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    /**\n+     * Required constructor.\n+     *\n+     * @param analysis the analysis\n+     */\n+    public AccumulationTransfer(CFAnalysis analysis) {\n+        super(analysis);\n+        typeFactory = (AccumulationAnnotatedTypeFactory) analysis.getTypeFactory();\n+    }\n+\n+    /**\n+     * Updates the estimate of how many things {@code node} has accumulated.\n+     *\n+     * @param node the node whose estimate should be expanded\n+     * @param result the transfer result containing the store to be modified\n+     * @param values the new accumulation values\n+     */\n+    public void accumulate(Node node, TransferResult<CFValue, CFStore> result, String... values) {\n+        AnnotatedTypeMirror oldType = typeFactory.getAnnotatedType(node.getTree());\n+        AnnotationMirror newAnno = getNewAnno(oldType, values);\n+        insertIntoStores(result, node, newAnno);\n+    }\n+\n+    /**\n+     * Updates the estimate for the receiver and any other receiver-returning methods in a chain\n+     * with this MethodInvocationNode to include the new values.\n+     *\n+     * <p>For example, if the argument is the expression {@code a.b().c()}, the new value is \"foo\",\n+     * and b and c return their receiver (and are deterministic), all of the expressions {@code a},\n+     * {@code a.b()}, and {@code a.b().c()} would have their estimates updated to include \"foo\". If\n+     * any method in the chain is non-deterministic, its estimate will not be updated (but the rest\n+     * of the chain is not affected).\n+     *\n+     * @param node a method invocation whose receiver is to be updated\n+     * @param result the result containing the store to be modified\n+     * @param values the new accumulation values\n+     */\n+    public void accumulate(\n+            MethodInvocationNode node, TransferResult<CFValue, CFStore> result, String... values) {\n+        Node receiver = node.getTarget().getReceiver();\n+        AnnotatedTypeMirror oldType = typeFactory.getReceiverType(node.getTree());\n+        // e.g. if the node being visited is static\n+        if (oldType == null) {\n+            return;\n+        }\n+        AnnotationMirror newAnno = getNewAnno(oldType, values);\n+        while (receiver != null) {\n+            // Note that this call doesn't do anything if receiver is a method call\n+            // that is not deterministic, though it can still continue to recurse.\n+            insertIntoStores(result, receiver, newAnno);\n+\n+            Tree receiverTree = receiver.getTree();\n+            // Possibly recurse: if the receiver is itself a method call,\n+            // then we need to also propagate this new information to its receiver\n+            // if the method being called has an @This return type.\n+            //\n+            // Note that we must check for null, because the tree could be\n+            // implicit (when calling an instance method on the class itself).\n+            // In that case, do not attempt to refine either - the receiver is\n+            // not a method invocation, anyway.\n+            if (receiverTree == null || receiverTree.getKind() != Tree.Kind.METHOD_INVOCATION) {\n+                // Do not continue, because the receiver isn't a method invocation itself. The\n+                // end of the chain of calls has been reached.\n+                break;\n+            }\n+\n+            MethodInvocationTree receiverAsMethodInvocation =\n+                    (MethodInvocationTree) receiver.getTree();\n+\n+            if (typeFactory.returnsThis(receiverAsMethodInvocation)) {\n+                receiver = ((MethodInvocationNode) receiver).getTarget().getReceiver();\n+            } else {\n+                // Do not continue, because the method does not return @This.\n+                break;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Combines the values in oldType with the values in newValues to produce a single accumulator\n+     * type qualifier.\n+     *\n+     * @param oldType an annotated type mirror whose values should be included\n+     * @param newValues new values to include\n+     * @return an annotation representing all the values\n+     */\n+    private AnnotationMirror getNewAnno(AnnotatedTypeMirror oldType, String[] newValues) {\n+        AnnotationMirror oldAnno;\n+        if (oldType == null) {\n+            oldAnno = typeFactory.TOP;\n+        } else {\n+            oldAnno = oldType.getAnnotationInHierarchy(typeFactory.TOP);\n+            if (oldAnno == null || !typeFactory.isAccumulatorAnnotation(oldAnno)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1db3bcf35ce34724fbb2f868601ab10f198ead13"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5MjA0Mg==", "bodyText": "It was a funny way to test for bottom or top. It turns out it isn't even necessary, so I removed it.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426092042", "createdAt": "2020-05-15T23:53:38Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate} or\n+ * {@link #accumulate(MethodInvocationNode, TransferResult, String...)} methods to accumulate a\n+ * string at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    /** The type factory. */\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    /**\n+     * Required constructor.\n+     *\n+     * @param analysis the analysis\n+     */\n+    public AccumulationTransfer(CFAnalysis analysis) {\n+        super(analysis);\n+        typeFactory = (AccumulationAnnotatedTypeFactory) analysis.getTypeFactory();\n+    }\n+\n+    /**\n+     * Updates the estimate of how many things {@code node} has accumulated.\n+     *\n+     * @param node the node whose estimate should be expanded\n+     * @param result the transfer result containing the store to be modified\n+     * @param values the new accumulation values\n+     */\n+    public void accumulate(Node node, TransferResult<CFValue, CFStore> result, String... values) {\n+        AnnotatedTypeMirror oldType = typeFactory.getAnnotatedType(node.getTree());\n+        AnnotationMirror newAnno = getNewAnno(oldType, values);\n+        insertIntoStores(result, node, newAnno);\n+    }\n+\n+    /**\n+     * Updates the estimate for the receiver and any other receiver-returning methods in a chain\n+     * with this MethodInvocationNode to include the new values.\n+     *\n+     * <p>For example, if the argument is the expression {@code a.b().c()}, the new value is \"foo\",\n+     * and b and c return their receiver (and are deterministic), all of the expressions {@code a},\n+     * {@code a.b()}, and {@code a.b().c()} would have their estimates updated to include \"foo\". If\n+     * any method in the chain is non-deterministic, its estimate will not be updated (but the rest\n+     * of the chain is not affected).\n+     *\n+     * @param node a method invocation whose receiver is to be updated\n+     * @param result the result containing the store to be modified\n+     * @param values the new accumulation values\n+     */\n+    public void accumulate(\n+            MethodInvocationNode node, TransferResult<CFValue, CFStore> result, String... values) {\n+        Node receiver = node.getTarget().getReceiver();\n+        AnnotatedTypeMirror oldType = typeFactory.getReceiverType(node.getTree());\n+        // e.g. if the node being visited is static\n+        if (oldType == null) {\n+            return;\n+        }\n+        AnnotationMirror newAnno = getNewAnno(oldType, values);\n+        while (receiver != null) {\n+            // Note that this call doesn't do anything if receiver is a method call\n+            // that is not deterministic, though it can still continue to recurse.\n+            insertIntoStores(result, receiver, newAnno);\n+\n+            Tree receiverTree = receiver.getTree();\n+            // Possibly recurse: if the receiver is itself a method call,\n+            // then we need to also propagate this new information to its receiver\n+            // if the method being called has an @This return type.\n+            //\n+            // Note that we must check for null, because the tree could be\n+            // implicit (when calling an instance method on the class itself).\n+            // In that case, do not attempt to refine either - the receiver is\n+            // not a method invocation, anyway.\n+            if (receiverTree == null || receiverTree.getKind() != Tree.Kind.METHOD_INVOCATION) {\n+                // Do not continue, because the receiver isn't a method invocation itself. The\n+                // end of the chain of calls has been reached.\n+                break;\n+            }\n+\n+            MethodInvocationTree receiverAsMethodInvocation =\n+                    (MethodInvocationTree) receiver.getTree();\n+\n+            if (typeFactory.returnsThis(receiverAsMethodInvocation)) {\n+                receiver = ((MethodInvocationNode) receiver).getTarget().getReceiver();\n+            } else {\n+                // Do not continue, because the method does not return @This.\n+                break;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Combines the values in oldType with the values in newValues to produce a single accumulator\n+     * type qualifier.\n+     *\n+     * @param oldType an annotated type mirror whose values should be included\n+     * @param newValues new values to include\n+     * @return an annotation representing all the values\n+     */\n+    private AnnotationMirror getNewAnno(AnnotatedTypeMirror oldType, String[] newValues) {\n+        AnnotationMirror oldAnno;\n+        if (oldType == null) {\n+            oldAnno = typeFactory.TOP;\n+        } else {\n+            oldAnno = oldType.getAnnotationInHierarchy(typeFactory.TOP);\n+            if (oldAnno == null || !typeFactory.isAccumulatorAnnotation(oldAnno)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAyMDcyMw=="}, "originalCommit": {"oid": "1db3bcf35ce34724fbb2f868601ab10f198ead13"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODQ4MTUxOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTo1MzozMlrOGXFbBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDowMzozOFrOGcqdzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1OTI2OQ==", "bodyText": "I don't see the need for a distinct top annotation.  I think that users can use @Accum() instead of @AccumTop.\n\nFewer annotations means less work for implementers and less for users to learn (less documentation to read).\n\"Top\" is type system jargon.  Let's avoid that were possible.\nIt's confusing to users to have two different ways to express the same concept: @Accum() and @AccumTop.  I am also concerned that error messages will refer to @AccumTop when the users wrote @Accum(), which may confuse them.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426859269", "createdAt": "2020-05-18T19:53:32Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,279 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement a constructor, which should\n+ * take a {@link BaseTypeChecker} and call both the constructor defined in this class and {@link\n+ * #postInit()}.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /** The canonical top annotation for this accumulation checker. */\n+    public final AnnotationMirror top;\n+\n+    /** The canonical bottom annotation for this accumulation checker. */\n+    public final AnnotationMirror bottom;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> accumulator;\n+\n+    /**\n+     * Create an annotated type factory for an accumulation checker.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.\n+     * @param top the top type in the hierarchy, which must be a supertype of {@code accumulator}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6047e3987fbc00fbbf23b6b115a40086d86eea57"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcwOTA3MQ==", "bodyText": "This is a good idea. I modeled the general accumulation type system on @CalledMethods, which has a separate top type, but I'm no longer convinced it's needed there, either.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r432709071", "createdAt": "2020-05-29T20:03:38Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,279 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement a constructor, which should\n+ * take a {@link BaseTypeChecker} and call both the constructor defined in this class and {@link\n+ * #postInit()}.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /** The canonical top annotation for this accumulation checker. */\n+    public final AnnotationMirror top;\n+\n+    /** The canonical bottom annotation for this accumulation checker. */\n+    public final AnnotationMirror bottom;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> accumulator;\n+\n+    /**\n+     * Create an annotated type factory for an accumulation checker.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.\n+     * @param top the top type in the hierarchy, which must be a supertype of {@code accumulator}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1OTI2OQ=="}, "originalCommit": {"oid": "6047e3987fbc00fbbf23b6b115a40086d86eea57"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODQ4NDYxOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTo1NDozMlrOGXFc6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDozNDo1NlrOGcrRTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1OTc1Mw==", "bodyText": "Facts like the existence of a single argument named \"value\" are testable in this method.  Users are likely to violate the requirements, unfortunately.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426859753", "createdAt": "2020-05-18T19:54:32Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,279 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement a constructor, which should\n+ * take a {@link BaseTypeChecker} and call both the constructor defined in this class and {@link\n+ * #postInit()}.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /** The canonical top annotation for this accumulation checker. */\n+    public final AnnotationMirror top;\n+\n+    /** The canonical bottom annotation for this accumulation checker. */\n+    public final AnnotationMirror bottom;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> accumulator;\n+\n+    /**\n+     * Create an annotated type factory for an accumulation checker.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6047e3987fbc00fbbf23b6b115a40086d86eea57"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcyMjI1NA==", "bodyText": "That's a good point. I've added tests for all these requirements.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r432722254", "createdAt": "2020-05-29T20:34:56Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,279 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement a constructor, which should\n+ * take a {@link BaseTypeChecker} and call both the constructor defined in this class and {@link\n+ * #postInit()}.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /** The canonical top annotation for this accumulation checker. */\n+    public final AnnotationMirror top;\n+\n+    /** The canonical bottom annotation for this accumulation checker. */\n+    public final AnnotationMirror bottom;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> accumulator;\n+\n+    /**\n+     * Create an annotated type factory for an accumulation checker.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1OTc1Mw=="}, "originalCommit": {"oid": "6047e3987fbc00fbbf23b6b115a40086d86eea57"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODQ5MTM2OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTo1NjozNVrOGXFg7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTo1NjozNVrOGXFg7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg2MDc4MA==", "bodyText": "What is the reason for permitting null as a value?  It is not used in the given code.  I think client code will be clearer if it uses Collections.emptyList(); it isn't obvious what null would be a special value for (a user might think it means bottom).  And, having two ways to accomplish the same goal can be confusing.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426860780", "createdAt": "2020-05-18T19:56:35Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,279 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement a constructor, which should\n+ * take a {@link BaseTypeChecker} and call both the constructor defined in this class and {@link\n+ * #postInit()}.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /** The canonical top annotation for this accumulation checker. */\n+    public final AnnotationMirror top;\n+\n+    /** The canonical bottom annotation for this accumulation checker. */\n+    public final AnnotationMirror bottom;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> accumulator;\n+\n+    /**\n+     * Create an annotated type factory for an accumulation checker.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.\n+     * @param top the top type in the hierarchy, which must be a supertype of {@code accumulator}.\n+     *     The top type should be an annotation with no arguments.\n+     * @param bottom the bottom type in the hierarchy, which must be a subtype of {@code\n+     *     accumulator}. The bottom type should be an annotation with no arguments.\n+     */\n+    protected AccumulationAnnotatedTypeFactory(\n+            BaseTypeChecker checker,\n+            Class<? extends Annotation> accumulator,\n+            Class<? extends Annotation> top,\n+            Class<? extends Annotation> bottom) {\n+        super(checker);\n+\n+        this.top = AnnotationBuilder.fromClass(elements, top);\n+        this.bottom = AnnotationBuilder.fromClass(elements, bottom);\n+        this.accumulator = accumulator;\n+\n+        // Every subclass must call postInit!  This does not do so for subclasses.\n+        if (this.getClass() == AccumulationAnnotatedTypeFactory.class) {\n+            this.postInit();\n+        }\n+    }\n+\n+    /**\n+     * Creates a new instance of the accumulator annotation that contains the elements of {@code\n+     * values}.\n+     *\n+     * @param values the arguments to the annotation. The values can contain duplicates and can be\n+     *     in any order.\n+     * @return an annotation mirror representing the accumulator annotation with {@code values}'s\n+     *     arguments, or top if {@code values} is null or empty\n+     */\n+    public AnnotationMirror createAccumulatorAnnotation(@Nullable List<String> values) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6047e3987fbc00fbbf23b6b115a40086d86eea57"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODQ5MzczOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTo1NzoyNFrOGXFiZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTo1NzoyNFrOGXFiZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg2MTE1Ng==", "bodyText": "It's usually clearer to name rules rather than number them.  That also insulates against renumbering or reordering.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426861156", "createdAt": "2020-05-18T19:57:24Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,279 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement a constructor, which should\n+ * take a {@link BaseTypeChecker} and call both the constructor defined in this class and {@link\n+ * #postInit()}.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /** The canonical top annotation for this accumulation checker. */\n+    public final AnnotationMirror top;\n+\n+    /** The canonical bottom annotation for this accumulation checker. */\n+    public final AnnotationMirror bottom;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> accumulator;\n+\n+    /**\n+     * Create an annotated type factory for an accumulation checker.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.\n+     * @param top the top type in the hierarchy, which must be a supertype of {@code accumulator}.\n+     *     The top type should be an annotation with no arguments.\n+     * @param bottom the bottom type in the hierarchy, which must be a subtype of {@code\n+     *     accumulator}. The bottom type should be an annotation with no arguments.\n+     */\n+    protected AccumulationAnnotatedTypeFactory(\n+            BaseTypeChecker checker,\n+            Class<? extends Annotation> accumulator,\n+            Class<? extends Annotation> top,\n+            Class<? extends Annotation> bottom) {\n+        super(checker);\n+\n+        this.top = AnnotationBuilder.fromClass(elements, top);\n+        this.bottom = AnnotationBuilder.fromClass(elements, bottom);\n+        this.accumulator = accumulator;\n+\n+        // Every subclass must call postInit!  This does not do so for subclasses.\n+        if (this.getClass() == AccumulationAnnotatedTypeFactory.class) {\n+            this.postInit();\n+        }\n+    }\n+\n+    /**\n+     * Creates a new instance of the accumulator annotation that contains the elements of {@code\n+     * values}.\n+     *\n+     * @param values the arguments to the annotation. The values can contain duplicates and can be\n+     *     in any order.\n+     * @return an annotation mirror representing the accumulator annotation with {@code values}'s\n+     *     arguments, or top if {@code values} is null or empty\n+     */\n+    public AnnotationMirror createAccumulatorAnnotation(@Nullable List<String> values) {\n+        if (values == null || values.size() == 0) {\n+            return top;\n+        }\n+        AnnotationBuilder builder = new AnnotationBuilder(processingEnv, accumulator);\n+        builder.setValue(\"value\", ValueCheckerUtils.removeDuplicates(values));\n+        return builder.build();\n+    }\n+\n+    /**\n+     * Returns true if the return type of the given method invocation tree has an @This annotation\n+     * from the Returns Receiver Checker.\n+     *\n+     * @param tree a method invocation tree\n+     * @return true if the method being invoked returns its receiver\n+     */\n+    public boolean returnsThis(final MethodInvocationTree tree) {\n+        // Must call `getTypeFactoryOfSubchecker` each time, not store and reuse.\n+        ReturnsReceiverAnnotatedTypeFactory rrATF =\n+                getTypeFactoryOfSubchecker(ReturnsReceiverChecker.class);\n+        ExecutableElement methodEle = TreeUtils.elementFromUse(tree);\n+        AnnotatedTypeMirror methodAtm = rrATF.getAnnotatedType(methodEle);\n+        AnnotatedTypeMirror rrType =\n+                ((AnnotatedTypeMirror.AnnotatedExecutableType) methodAtm).getReturnType();\n+        return rrType != null && rrType.hasAnnotation(This.class);\n+    }\n+\n+    /**\n+     * Is the given annotation an accumulator annotation?\n+     *\n+     * @param anm an annotation mirror\n+     * @return true if the annotation mirror is an instance of this factory's accumulator annotation\n+     */\n+    public boolean isAccumulatorAnnotation(AnnotationMirror anm) {\n+        return AnnotationUtils.areSameByClass(anm, accumulator);\n+    }\n+\n+    @Override\n+    protected TreeAnnotator createTreeAnnotator() {\n+        return new ListTreeAnnotator(\n+                super.createTreeAnnotator(), new AccumulationTreeAnnotator(this));\n+    }\n+\n+    /**\n+     * This tree annotator implements the following rule(s): 1. If a method returns its receiver,\n+     * and the receiver has an accumulation type, then the default type of the method's return value\n+     * is the type of the receiver.\n+     */\n+    protected class AccumulationTreeAnnotator extends TreeAnnotator {\n+\n+        /**\n+         * Creates an instance of this tree annotator for the given type factory.\n+         *\n+         * @param factory the type factory\n+         */\n+        public AccumulationTreeAnnotator(AccumulationAnnotatedTypeFactory factory) {\n+            super(factory);\n+        }\n+\n+        /**\n+         * Implements rule 1.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6047e3987fbc00fbbf23b6b115a40086d86eea57"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODQ5OTYyOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTo1OToyMFrOGXFl8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTo1OToyMFrOGXFl8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg2MjA2Ng==", "bodyText": "Minor: leastUpperBound uses else if rather than a second if.  We might as well make them consistent to avoid readers doing a double-take.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426862066", "createdAt": "2020-05-18T19:59:20Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,279 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement a constructor, which should\n+ * take a {@link BaseTypeChecker} and call both the constructor defined in this class and {@link\n+ * #postInit()}.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /** The canonical top annotation for this accumulation checker. */\n+    public final AnnotationMirror top;\n+\n+    /** The canonical bottom annotation for this accumulation checker. */\n+    public final AnnotationMirror bottom;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> accumulator;\n+\n+    /**\n+     * Create an annotated type factory for an accumulation checker.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.\n+     * @param top the top type in the hierarchy, which must be a supertype of {@code accumulator}.\n+     *     The top type should be an annotation with no arguments.\n+     * @param bottom the bottom type in the hierarchy, which must be a subtype of {@code\n+     *     accumulator}. The bottom type should be an annotation with no arguments.\n+     */\n+    protected AccumulationAnnotatedTypeFactory(\n+            BaseTypeChecker checker,\n+            Class<? extends Annotation> accumulator,\n+            Class<? extends Annotation> top,\n+            Class<? extends Annotation> bottom) {\n+        super(checker);\n+\n+        this.top = AnnotationBuilder.fromClass(elements, top);\n+        this.bottom = AnnotationBuilder.fromClass(elements, bottom);\n+        this.accumulator = accumulator;\n+\n+        // Every subclass must call postInit!  This does not do so for subclasses.\n+        if (this.getClass() == AccumulationAnnotatedTypeFactory.class) {\n+            this.postInit();\n+        }\n+    }\n+\n+    /**\n+     * Creates a new instance of the accumulator annotation that contains the elements of {@code\n+     * values}.\n+     *\n+     * @param values the arguments to the annotation. The values can contain duplicates and can be\n+     *     in any order.\n+     * @return an annotation mirror representing the accumulator annotation with {@code values}'s\n+     *     arguments, or top if {@code values} is null or empty\n+     */\n+    public AnnotationMirror createAccumulatorAnnotation(@Nullable List<String> values) {\n+        if (values == null || values.size() == 0) {\n+            return top;\n+        }\n+        AnnotationBuilder builder = new AnnotationBuilder(processingEnv, accumulator);\n+        builder.setValue(\"value\", ValueCheckerUtils.removeDuplicates(values));\n+        return builder.build();\n+    }\n+\n+    /**\n+     * Returns true if the return type of the given method invocation tree has an @This annotation\n+     * from the Returns Receiver Checker.\n+     *\n+     * @param tree a method invocation tree\n+     * @return true if the method being invoked returns its receiver\n+     */\n+    public boolean returnsThis(final MethodInvocationTree tree) {\n+        // Must call `getTypeFactoryOfSubchecker` each time, not store and reuse.\n+        ReturnsReceiverAnnotatedTypeFactory rrATF =\n+                getTypeFactoryOfSubchecker(ReturnsReceiverChecker.class);\n+        ExecutableElement methodEle = TreeUtils.elementFromUse(tree);\n+        AnnotatedTypeMirror methodAtm = rrATF.getAnnotatedType(methodEle);\n+        AnnotatedTypeMirror rrType =\n+                ((AnnotatedTypeMirror.AnnotatedExecutableType) methodAtm).getReturnType();\n+        return rrType != null && rrType.hasAnnotation(This.class);\n+    }\n+\n+    /**\n+     * Is the given annotation an accumulator annotation?\n+     *\n+     * @param anm an annotation mirror\n+     * @return true if the annotation mirror is an instance of this factory's accumulator annotation\n+     */\n+    public boolean isAccumulatorAnnotation(AnnotationMirror anm) {\n+        return AnnotationUtils.areSameByClass(anm, accumulator);\n+    }\n+\n+    @Override\n+    protected TreeAnnotator createTreeAnnotator() {\n+        return new ListTreeAnnotator(\n+                super.createTreeAnnotator(), new AccumulationTreeAnnotator(this));\n+    }\n+\n+    /**\n+     * This tree annotator implements the following rule(s): 1. If a method returns its receiver,\n+     * and the receiver has an accumulation type, then the default type of the method's return value\n+     * is the type of the receiver.\n+     */\n+    protected class AccumulationTreeAnnotator extends TreeAnnotator {\n+\n+        /**\n+         * Creates an instance of this tree annotator for the given type factory.\n+         *\n+         * @param factory the type factory\n+         */\n+        public AccumulationTreeAnnotator(AccumulationAnnotatedTypeFactory factory) {\n+            super(factory);\n+        }\n+\n+        /**\n+         * Implements rule 1.\n+         *\n+         * @param tree a method invocation tree\n+         * @param type the type {@code tree} (i.e. the return type of the invoked method). Is\n+         *     (possibly) side-effected by this method.\n+         * @return nothing, works by side-effect on {@code type}\n+         */\n+        @Override\n+        public Void visitMethodInvocation(MethodInvocationTree tree, AnnotatedTypeMirror type) {\n+            if (returnsThis(tree)) {\n+                // There is a @This annotation on the return type of the invoked method.\n+\n+                ExpressionTree receiverTree = TreeUtils.getReceiverTree(tree.getMethodSelect());\n+                AnnotatedTypeMirror receiverType =\n+                        receiverTree == null ? null : getAnnotatedType(receiverTree);\n+                // The current type of the receiver, or top if none exists.\n+                AnnotationMirror receiverAnno =\n+                        receiverType == null ? top : receiverType.getAnnotationInHierarchy(top);\n+\n+                AnnotationMirror returnAnno = type.getAnnotationInHierarchy(top);\n+                type.replaceAnnotation(qualHierarchy.greatestLowerBound(returnAnno, receiverAnno));\n+            }\n+            return super.visitMethodInvocation(tree, type);\n+        }\n+    }\n+\n+    @Override\n+    public QualifierHierarchy createQualifierHierarchy(MultiGraphFactory factory) {\n+        return new AccumulationQualifierHierarchy(factory);\n+    }\n+\n+    /**\n+     * All accumulation analyses share a similar type hierarchy. This hierarchy implements the\n+     * subtyping, LUB, and GLB for that hierarchy. The lattice looks like:\n+     *\n+     * <pre>\n+     *    top = acc()\n+     *      /   \\\n+     * acc(x)   acc(y) ...\n+     *      \\   /\n+     *     acc(x,y) ...\n+     *        |\n+     *      bottom\n+     * </pre>\n+     */\n+    protected class AccumulationQualifierHierarchy extends MultiGraphQualifierHierarchy {\n+\n+        /**\n+         * Create the qualifier hierarchy\n+         *\n+         * @param factory the factory\n+         */\n+        public AccumulationQualifierHierarchy(MultiGraphFactory factory) {\n+            super(factory);\n+        }\n+\n+        @Override\n+        public AnnotationMirror getTopAnnotation(final AnnotationMirror start) {\n+            return top;\n+        }\n+\n+        /**\n+         * GLB in this type system is set union of the arguments of the two annotations, unless one\n+         * of them is bottom, in which case the result is also bottom.\n+         */\n+        @Override\n+        public AnnotationMirror greatestLowerBound(\n+                final AnnotationMirror a1, final AnnotationMirror a2) {\n+            if (AnnotationUtils.areSame(a1, bottom) || AnnotationUtils.areSame(a2, bottom)) {\n+                return bottom;\n+            }\n+\n+            if (AnnotationUtils.areSame(a1, top)) {\n+                return a2;\n+            }\n+\n+            if (AnnotationUtils.areSame(a2, top)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6047e3987fbc00fbbf23b6b115a40086d86eea57"}, "originalPosition": 220}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODUwNTg4OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMDowMToyM1rOGXFp2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMDowMToyM1rOGXFp2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg2MzA2NA==", "bodyText": "How can this happen?  (Maybe if there are other types than top, accumulator, and bottom?  But in that case clients should either use a different type hierarchy or should ensure that other types never flow to here.)\nI suggest making this throw an exception rather than silently returning bottom.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426863064", "createdAt": "2020-05-18T20:01:23Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,279 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement a constructor, which should\n+ * take a {@link BaseTypeChecker} and call both the constructor defined in this class and {@link\n+ * #postInit()}.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /** The canonical top annotation for this accumulation checker. */\n+    public final AnnotationMirror top;\n+\n+    /** The canonical bottom annotation for this accumulation checker. */\n+    public final AnnotationMirror bottom;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> accumulator;\n+\n+    /**\n+     * Create an annotated type factory for an accumulation checker.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.\n+     * @param top the top type in the hierarchy, which must be a supertype of {@code accumulator}.\n+     *     The top type should be an annotation with no arguments.\n+     * @param bottom the bottom type in the hierarchy, which must be a subtype of {@code\n+     *     accumulator}. The bottom type should be an annotation with no arguments.\n+     */\n+    protected AccumulationAnnotatedTypeFactory(\n+            BaseTypeChecker checker,\n+            Class<? extends Annotation> accumulator,\n+            Class<? extends Annotation> top,\n+            Class<? extends Annotation> bottom) {\n+        super(checker);\n+\n+        this.top = AnnotationBuilder.fromClass(elements, top);\n+        this.bottom = AnnotationBuilder.fromClass(elements, bottom);\n+        this.accumulator = accumulator;\n+\n+        // Every subclass must call postInit!  This does not do so for subclasses.\n+        if (this.getClass() == AccumulationAnnotatedTypeFactory.class) {\n+            this.postInit();\n+        }\n+    }\n+\n+    /**\n+     * Creates a new instance of the accumulator annotation that contains the elements of {@code\n+     * values}.\n+     *\n+     * @param values the arguments to the annotation. The values can contain duplicates and can be\n+     *     in any order.\n+     * @return an annotation mirror representing the accumulator annotation with {@code values}'s\n+     *     arguments, or top if {@code values} is null or empty\n+     */\n+    public AnnotationMirror createAccumulatorAnnotation(@Nullable List<String> values) {\n+        if (values == null || values.size() == 0) {\n+            return top;\n+        }\n+        AnnotationBuilder builder = new AnnotationBuilder(processingEnv, accumulator);\n+        builder.setValue(\"value\", ValueCheckerUtils.removeDuplicates(values));\n+        return builder.build();\n+    }\n+\n+    /**\n+     * Returns true if the return type of the given method invocation tree has an @This annotation\n+     * from the Returns Receiver Checker.\n+     *\n+     * @param tree a method invocation tree\n+     * @return true if the method being invoked returns its receiver\n+     */\n+    public boolean returnsThis(final MethodInvocationTree tree) {\n+        // Must call `getTypeFactoryOfSubchecker` each time, not store and reuse.\n+        ReturnsReceiverAnnotatedTypeFactory rrATF =\n+                getTypeFactoryOfSubchecker(ReturnsReceiverChecker.class);\n+        ExecutableElement methodEle = TreeUtils.elementFromUse(tree);\n+        AnnotatedTypeMirror methodAtm = rrATF.getAnnotatedType(methodEle);\n+        AnnotatedTypeMirror rrType =\n+                ((AnnotatedTypeMirror.AnnotatedExecutableType) methodAtm).getReturnType();\n+        return rrType != null && rrType.hasAnnotation(This.class);\n+    }\n+\n+    /**\n+     * Is the given annotation an accumulator annotation?\n+     *\n+     * @param anm an annotation mirror\n+     * @return true if the annotation mirror is an instance of this factory's accumulator annotation\n+     */\n+    public boolean isAccumulatorAnnotation(AnnotationMirror anm) {\n+        return AnnotationUtils.areSameByClass(anm, accumulator);\n+    }\n+\n+    @Override\n+    protected TreeAnnotator createTreeAnnotator() {\n+        return new ListTreeAnnotator(\n+                super.createTreeAnnotator(), new AccumulationTreeAnnotator(this));\n+    }\n+\n+    /**\n+     * This tree annotator implements the following rule(s): 1. If a method returns its receiver,\n+     * and the receiver has an accumulation type, then the default type of the method's return value\n+     * is the type of the receiver.\n+     */\n+    protected class AccumulationTreeAnnotator extends TreeAnnotator {\n+\n+        /**\n+         * Creates an instance of this tree annotator for the given type factory.\n+         *\n+         * @param factory the type factory\n+         */\n+        public AccumulationTreeAnnotator(AccumulationAnnotatedTypeFactory factory) {\n+            super(factory);\n+        }\n+\n+        /**\n+         * Implements rule 1.\n+         *\n+         * @param tree a method invocation tree\n+         * @param type the type {@code tree} (i.e. the return type of the invoked method). Is\n+         *     (possibly) side-effected by this method.\n+         * @return nothing, works by side-effect on {@code type}\n+         */\n+        @Override\n+        public Void visitMethodInvocation(MethodInvocationTree tree, AnnotatedTypeMirror type) {\n+            if (returnsThis(tree)) {\n+                // There is a @This annotation on the return type of the invoked method.\n+\n+                ExpressionTree receiverTree = TreeUtils.getReceiverTree(tree.getMethodSelect());\n+                AnnotatedTypeMirror receiverType =\n+                        receiverTree == null ? null : getAnnotatedType(receiverTree);\n+                // The current type of the receiver, or top if none exists.\n+                AnnotationMirror receiverAnno =\n+                        receiverType == null ? top : receiverType.getAnnotationInHierarchy(top);\n+\n+                AnnotationMirror returnAnno = type.getAnnotationInHierarchy(top);\n+                type.replaceAnnotation(qualHierarchy.greatestLowerBound(returnAnno, receiverAnno));\n+            }\n+            return super.visitMethodInvocation(tree, type);\n+        }\n+    }\n+\n+    @Override\n+    public QualifierHierarchy createQualifierHierarchy(MultiGraphFactory factory) {\n+        return new AccumulationQualifierHierarchy(factory);\n+    }\n+\n+    /**\n+     * All accumulation analyses share a similar type hierarchy. This hierarchy implements the\n+     * subtyping, LUB, and GLB for that hierarchy. The lattice looks like:\n+     *\n+     * <pre>\n+     *    top = acc()\n+     *      /   \\\n+     * acc(x)   acc(y) ...\n+     *      \\   /\n+     *     acc(x,y) ...\n+     *        |\n+     *      bottom\n+     * </pre>\n+     */\n+    protected class AccumulationQualifierHierarchy extends MultiGraphQualifierHierarchy {\n+\n+        /**\n+         * Create the qualifier hierarchy\n+         *\n+         * @param factory the factory\n+         */\n+        public AccumulationQualifierHierarchy(MultiGraphFactory factory) {\n+            super(factory);\n+        }\n+\n+        @Override\n+        public AnnotationMirror getTopAnnotation(final AnnotationMirror start) {\n+            return top;\n+        }\n+\n+        /**\n+         * GLB in this type system is set union of the arguments of the two annotations, unless one\n+         * of them is bottom, in which case the result is also bottom.\n+         */\n+        @Override\n+        public AnnotationMirror greatestLowerBound(\n+                final AnnotationMirror a1, final AnnotationMirror a2) {\n+            if (AnnotationUtils.areSame(a1, bottom) || AnnotationUtils.areSame(a2, bottom)) {\n+                return bottom;\n+            }\n+\n+            if (AnnotationUtils.areSame(a1, top)) {\n+                return a2;\n+            }\n+\n+            if (AnnotationUtils.areSame(a2, top)) {\n+                return a1;\n+            }\n+\n+            if (isAccumulatorAnnotation(a1) && isAccumulatorAnnotation(a2)) {\n+                List<String> a1Val = ValueCheckerUtils.getValueOfAnnotationWithStringArgument(a1);\n+                List<String> a2Val = ValueCheckerUtils.getValueOfAnnotationWithStringArgument(a2);\n+                a1Val.addAll(a2Val);\n+                return createAccumulatorAnnotation(a1Val);\n+            } else {\n+                return bottom;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6047e3987fbc00fbbf23b6b115a40086d86eea57"}, "originalPosition": 230}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODUwNjkxOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMDowMTo0OVrOGXFqiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMDowMTo0OVrOGXFqiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg2MzI0MQ==", "bodyText": "Same question as above about whether this should be an error.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426863241", "createdAt": "2020-05-18T20:01:49Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,279 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.TreeUtils;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement a constructor, which should\n+ * take a {@link BaseTypeChecker} and call both the constructor defined in this class and {@link\n+ * #postInit()}.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /** The canonical top annotation for this accumulation checker. */\n+    public final AnnotationMirror top;\n+\n+    /** The canonical bottom annotation for this accumulation checker. */\n+    public final AnnotationMirror bottom;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> accumulator;\n+\n+    /**\n+     * Create an annotated type factory for an accumulation checker.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.\n+     * @param top the top type in the hierarchy, which must be a supertype of {@code accumulator}.\n+     *     The top type should be an annotation with no arguments.\n+     * @param bottom the bottom type in the hierarchy, which must be a subtype of {@code\n+     *     accumulator}. The bottom type should be an annotation with no arguments.\n+     */\n+    protected AccumulationAnnotatedTypeFactory(\n+            BaseTypeChecker checker,\n+            Class<? extends Annotation> accumulator,\n+            Class<? extends Annotation> top,\n+            Class<? extends Annotation> bottom) {\n+        super(checker);\n+\n+        this.top = AnnotationBuilder.fromClass(elements, top);\n+        this.bottom = AnnotationBuilder.fromClass(elements, bottom);\n+        this.accumulator = accumulator;\n+\n+        // Every subclass must call postInit!  This does not do so for subclasses.\n+        if (this.getClass() == AccumulationAnnotatedTypeFactory.class) {\n+            this.postInit();\n+        }\n+    }\n+\n+    /**\n+     * Creates a new instance of the accumulator annotation that contains the elements of {@code\n+     * values}.\n+     *\n+     * @param values the arguments to the annotation. The values can contain duplicates and can be\n+     *     in any order.\n+     * @return an annotation mirror representing the accumulator annotation with {@code values}'s\n+     *     arguments, or top if {@code values} is null or empty\n+     */\n+    public AnnotationMirror createAccumulatorAnnotation(@Nullable List<String> values) {\n+        if (values == null || values.size() == 0) {\n+            return top;\n+        }\n+        AnnotationBuilder builder = new AnnotationBuilder(processingEnv, accumulator);\n+        builder.setValue(\"value\", ValueCheckerUtils.removeDuplicates(values));\n+        return builder.build();\n+    }\n+\n+    /**\n+     * Returns true if the return type of the given method invocation tree has an @This annotation\n+     * from the Returns Receiver Checker.\n+     *\n+     * @param tree a method invocation tree\n+     * @return true if the method being invoked returns its receiver\n+     */\n+    public boolean returnsThis(final MethodInvocationTree tree) {\n+        // Must call `getTypeFactoryOfSubchecker` each time, not store and reuse.\n+        ReturnsReceiverAnnotatedTypeFactory rrATF =\n+                getTypeFactoryOfSubchecker(ReturnsReceiverChecker.class);\n+        ExecutableElement methodEle = TreeUtils.elementFromUse(tree);\n+        AnnotatedTypeMirror methodAtm = rrATF.getAnnotatedType(methodEle);\n+        AnnotatedTypeMirror rrType =\n+                ((AnnotatedTypeMirror.AnnotatedExecutableType) methodAtm).getReturnType();\n+        return rrType != null && rrType.hasAnnotation(This.class);\n+    }\n+\n+    /**\n+     * Is the given annotation an accumulator annotation?\n+     *\n+     * @param anm an annotation mirror\n+     * @return true if the annotation mirror is an instance of this factory's accumulator annotation\n+     */\n+    public boolean isAccumulatorAnnotation(AnnotationMirror anm) {\n+        return AnnotationUtils.areSameByClass(anm, accumulator);\n+    }\n+\n+    @Override\n+    protected TreeAnnotator createTreeAnnotator() {\n+        return new ListTreeAnnotator(\n+                super.createTreeAnnotator(), new AccumulationTreeAnnotator(this));\n+    }\n+\n+    /**\n+     * This tree annotator implements the following rule(s): 1. If a method returns its receiver,\n+     * and the receiver has an accumulation type, then the default type of the method's return value\n+     * is the type of the receiver.\n+     */\n+    protected class AccumulationTreeAnnotator extends TreeAnnotator {\n+\n+        /**\n+         * Creates an instance of this tree annotator for the given type factory.\n+         *\n+         * @param factory the type factory\n+         */\n+        public AccumulationTreeAnnotator(AccumulationAnnotatedTypeFactory factory) {\n+            super(factory);\n+        }\n+\n+        /**\n+         * Implements rule 1.\n+         *\n+         * @param tree a method invocation tree\n+         * @param type the type {@code tree} (i.e. the return type of the invoked method). Is\n+         *     (possibly) side-effected by this method.\n+         * @return nothing, works by side-effect on {@code type}\n+         */\n+        @Override\n+        public Void visitMethodInvocation(MethodInvocationTree tree, AnnotatedTypeMirror type) {\n+            if (returnsThis(tree)) {\n+                // There is a @This annotation on the return type of the invoked method.\n+\n+                ExpressionTree receiverTree = TreeUtils.getReceiverTree(tree.getMethodSelect());\n+                AnnotatedTypeMirror receiverType =\n+                        receiverTree == null ? null : getAnnotatedType(receiverTree);\n+                // The current type of the receiver, or top if none exists.\n+                AnnotationMirror receiverAnno =\n+                        receiverType == null ? top : receiverType.getAnnotationInHierarchy(top);\n+\n+                AnnotationMirror returnAnno = type.getAnnotationInHierarchy(top);\n+                type.replaceAnnotation(qualHierarchy.greatestLowerBound(returnAnno, receiverAnno));\n+            }\n+            return super.visitMethodInvocation(tree, type);\n+        }\n+    }\n+\n+    @Override\n+    public QualifierHierarchy createQualifierHierarchy(MultiGraphFactory factory) {\n+        return new AccumulationQualifierHierarchy(factory);\n+    }\n+\n+    /**\n+     * All accumulation analyses share a similar type hierarchy. This hierarchy implements the\n+     * subtyping, LUB, and GLB for that hierarchy. The lattice looks like:\n+     *\n+     * <pre>\n+     *    top = acc()\n+     *      /   \\\n+     * acc(x)   acc(y) ...\n+     *      \\   /\n+     *     acc(x,y) ...\n+     *        |\n+     *      bottom\n+     * </pre>\n+     */\n+    protected class AccumulationQualifierHierarchy extends MultiGraphQualifierHierarchy {\n+\n+        /**\n+         * Create the qualifier hierarchy\n+         *\n+         * @param factory the factory\n+         */\n+        public AccumulationQualifierHierarchy(MultiGraphFactory factory) {\n+            super(factory);\n+        }\n+\n+        @Override\n+        public AnnotationMirror getTopAnnotation(final AnnotationMirror start) {\n+            return top;\n+        }\n+\n+        /**\n+         * GLB in this type system is set union of the arguments of the two annotations, unless one\n+         * of them is bottom, in which case the result is also bottom.\n+         */\n+        @Override\n+        public AnnotationMirror greatestLowerBound(\n+                final AnnotationMirror a1, final AnnotationMirror a2) {\n+            if (AnnotationUtils.areSame(a1, bottom) || AnnotationUtils.areSame(a2, bottom)) {\n+                return bottom;\n+            }\n+\n+            if (AnnotationUtils.areSame(a1, top)) {\n+                return a2;\n+            }\n+\n+            if (AnnotationUtils.areSame(a2, top)) {\n+                return a1;\n+            }\n+\n+            if (isAccumulatorAnnotation(a1) && isAccumulatorAnnotation(a2)) {\n+                List<String> a1Val = ValueCheckerUtils.getValueOfAnnotationWithStringArgument(a1);\n+                List<String> a2Val = ValueCheckerUtils.getValueOfAnnotationWithStringArgument(a2);\n+                a1Val.addAll(a2Val);\n+                return createAccumulatorAnnotation(a1Val);\n+            } else {\n+                return bottom;\n+            }\n+        }\n+\n+        /**\n+         * LUB in this type system is set intersection of the arguments of the two annotations,\n+         * unless one of them is bottom, in which case the result is the other annotation.\n+         */\n+        @Override\n+        public AnnotationMirror leastUpperBound(\n+                final AnnotationMirror a1, final AnnotationMirror a2) {\n+            if (AnnotationUtils.areSame(a1, bottom)) {\n+                return a2;\n+            } else if (AnnotationUtils.areSame(a2, bottom)) {\n+                return a1;\n+            }\n+\n+            if (AnnotationUtils.areSame(a1, top) || AnnotationUtils.areSame(a2, top)) {\n+                return top;\n+            }\n+\n+            if (isAccumulatorAnnotation(a1) && isAccumulatorAnnotation(a2)) {\n+                List<String> a1Val = ValueCheckerUtils.getValueOfAnnotationWithStringArgument(a1);\n+                List<String> a2Val = ValueCheckerUtils.getValueOfAnnotationWithStringArgument(a2);\n+                a1Val.retainAll(a2Val);\n+                return createAccumulatorAnnotation(a1Val);\n+            } else {\n+                return top;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6047e3987fbc00fbbf23b6b115a40086d86eea57"}, "originalPosition": 257}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTEyMzg1OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMDoxODo1NFrOGXLluA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDo1MjoxOFrOGcrtRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk2MDMxMg==", "bodyText": "\"any deterministic methods\": they might follow it, as in a.b().nondet().c().d() where b, c, and d are deterministic.  Do the values go through nondet() and affect all of b(), c(), and d()?", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426960312", "createdAt": "2020-05-19T00:18:54Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.Tree.Kind;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate}\n+ * method to accumulate a string at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    /** The type factory. */\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    /**\n+     * Build a new AccumulationTransfer for the given analysis.\n+     *\n+     * @param analysis the analysis\n+     */\n+    public AccumulationTransfer(CFAnalysis analysis) {\n+        super(analysis);\n+        typeFactory = (AccumulationAnnotatedTypeFactory) analysis.getTypeFactory();\n+    }\n+\n+    /**\n+     * Updates the estimate of how many things {@code node} has accumulated.\n+     *\n+     * <p>If the node is an invocation of a method that returns its receiver, then its receiver's\n+     * type will also be updated. This chain will continue as long as each receiver is itself a\n+     * receiver-returning method invocation.\n+     *\n+     * <p>For example, suppose the argument is the expression {@code a.b().c()}, the new value is\n+     * \"foo\", and b and c return their receiver (and are deterministic). Then all of the expressions\n+     * {@code a}, {@code a.b()}, and {@code a.b().c()} would have their estimates updated to include\n+     * \"foo\".\n+     *\n+     * <p>If any method in the chain is non-deterministic, its estimate will not be updated (but the\n+     * types of any deterministic methods, and the ultimate receiver, will be updated).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6047e3987fbc00fbbf23b6b115a40086d86eea57"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcyOTQxNQ==", "bodyText": "yes, as long as nondet returns @This. I think this is just an imprecision caused by the dataflow framework rather than something fundamental, since the RR information should make the fact that the method isn't known to be deterministic irrelevant.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r432729415", "createdAt": "2020-05-29T20:52:18Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.Tree.Kind;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate}\n+ * method to accumulate a string at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    /** The type factory. */\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    /**\n+     * Build a new AccumulationTransfer for the given analysis.\n+     *\n+     * @param analysis the analysis\n+     */\n+    public AccumulationTransfer(CFAnalysis analysis) {\n+        super(analysis);\n+        typeFactory = (AccumulationAnnotatedTypeFactory) analysis.getTypeFactory();\n+    }\n+\n+    /**\n+     * Updates the estimate of how many things {@code node} has accumulated.\n+     *\n+     * <p>If the node is an invocation of a method that returns its receiver, then its receiver's\n+     * type will also be updated. This chain will continue as long as each receiver is itself a\n+     * receiver-returning method invocation.\n+     *\n+     * <p>For example, suppose the argument is the expression {@code a.b().c()}, the new value is\n+     * \"foo\", and b and c return their receiver (and are deterministic). Then all of the expressions\n+     * {@code a}, {@code a.b()}, and {@code a.b().c()} would have their estimates updated to include\n+     * \"foo\".\n+     *\n+     * <p>If any method in the chain is non-deterministic, its estimate will not be updated (but the\n+     * types of any deterministic methods, and the ultimate receiver, will be updated).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk2MDMxMg=="}, "originalCommit": {"oid": "6047e3987fbc00fbbf23b6b115a40086d86eea57"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTEyNTQ4OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMDoxOTo1NVrOGXLmsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDo1NDoxOFrOGcrwYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk2MDU2Mg==", "bodyText": "\"the ultimate receiver\": this isn't clear.  I think you mean a in your examples, but I'm not sure.  The receiver value is identical, so I'm not sure what this means.  It's only the expressions that differ.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426960562", "createdAt": "2020-05-19T00:19:55Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.Tree.Kind;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate}\n+ * method to accumulate a string at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    /** The type factory. */\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    /**\n+     * Build a new AccumulationTransfer for the given analysis.\n+     *\n+     * @param analysis the analysis\n+     */\n+    public AccumulationTransfer(CFAnalysis analysis) {\n+        super(analysis);\n+        typeFactory = (AccumulationAnnotatedTypeFactory) analysis.getTypeFactory();\n+    }\n+\n+    /**\n+     * Updates the estimate of how many things {@code node} has accumulated.\n+     *\n+     * <p>If the node is an invocation of a method that returns its receiver, then its receiver's\n+     * type will also be updated. This chain will continue as long as each receiver is itself a\n+     * receiver-returning method invocation.\n+     *\n+     * <p>For example, suppose the argument is the expression {@code a.b().c()}, the new value is\n+     * \"foo\", and b and c return their receiver (and are deterministic). Then all of the expressions\n+     * {@code a}, {@code a.b()}, and {@code a.b().c()} would have their estimates updated to include\n+     * \"foo\".\n+     *\n+     * <p>If any method in the chain is non-deterministic, its estimate will not be updated (but the\n+     * types of any deterministic methods, and the ultimate receiver, will be updated).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6047e3987fbc00fbbf23b6b115a40086d86eea57"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjczMDIxMQ==", "bodyText": "I do mean a. Really, what was meant was the first receiver expression that isn't an invocation of a method that returns its receiver. I'll update the text.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r432730211", "createdAt": "2020-05-29T20:54:18Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.Tree.Kind;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate}\n+ * method to accumulate a string at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    /** The type factory. */\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    /**\n+     * Build a new AccumulationTransfer for the given analysis.\n+     *\n+     * @param analysis the analysis\n+     */\n+    public AccumulationTransfer(CFAnalysis analysis) {\n+        super(analysis);\n+        typeFactory = (AccumulationAnnotatedTypeFactory) analysis.getTypeFactory();\n+    }\n+\n+    /**\n+     * Updates the estimate of how many things {@code node} has accumulated.\n+     *\n+     * <p>If the node is an invocation of a method that returns its receiver, then its receiver's\n+     * type will also be updated. This chain will continue as long as each receiver is itself a\n+     * receiver-returning method invocation.\n+     *\n+     * <p>For example, suppose the argument is the expression {@code a.b().c()}, the new value is\n+     * \"foo\", and b and c return their receiver (and are deterministic). Then all of the expressions\n+     * {@code a}, {@code a.b()}, and {@code a.b().c()} would have their estimates updated to include\n+     * \"foo\".\n+     *\n+     * <p>If any method in the chain is non-deterministic, its estimate will not be updated (but the\n+     * types of any deterministic methods, and the ultimate receiver, will be updated).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk2MDU2Mg=="}, "originalCommit": {"oid": "6047e3987fbc00fbbf23b6b115a40086d86eea57"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTEyNzgyOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMDoyMDo1OVrOGXLn7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDowMjo0OFrOGcqcVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk2MDg3OQ==", "bodyText": "Why is asList called?  The callee, getCombinedAnno, will make a copy anyway.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426960879", "createdAt": "2020-05-19T00:20:59Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.Tree.Kind;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate}\n+ * method to accumulate a string at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    /** The type factory. */\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    /**\n+     * Build a new AccumulationTransfer for the given analysis.\n+     *\n+     * @param analysis the analysis\n+     */\n+    public AccumulationTransfer(CFAnalysis analysis) {\n+        super(analysis);\n+        typeFactory = (AccumulationAnnotatedTypeFactory) analysis.getTypeFactory();\n+    }\n+\n+    /**\n+     * Updates the estimate of how many things {@code node} has accumulated.\n+     *\n+     * <p>If the node is an invocation of a method that returns its receiver, then its receiver's\n+     * type will also be updated. This chain will continue as long as each receiver is itself a\n+     * receiver-returning method invocation.\n+     *\n+     * <p>For example, suppose the argument is the expression {@code a.b().c()}, the new value is\n+     * \"foo\", and b and c return their receiver (and are deterministic). Then all of the expressions\n+     * {@code a}, {@code a.b()}, and {@code a.b().c()} would have their estimates updated to include\n+     * \"foo\".\n+     *\n+     * <p>If any method in the chain is non-deterministic, its estimate will not be updated (but the\n+     * types of any deterministic methods, and the ultimate receiver, will be updated).\n+     *\n+     * @param node the node whose estimate should be expanded\n+     * @param result the transfer result containing the store to be modified\n+     * @param values the new accumulation values\n+     */\n+    public void accumulate(Node node, TransferResult<CFValue, CFStore> result, String... values) {\n+        Tree tree = node.getTree();\n+        if (tree == null) {\n+            return;\n+        }\n+        AnnotatedTypeMirror oldType = typeFactory.getAnnotatedType(tree);\n+        AnnotationMirror newAnno = getCombinedAnno(oldType, Arrays.asList(values));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6047e3987fbc00fbbf23b6b115a40086d86eea57"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcwODY5Mg==", "bodyText": "This is no longer a concern with the other changes I've made.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r432708692", "createdAt": "2020-05-29T20:02:48Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.Tree.Kind;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate}\n+ * method to accumulate a string at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    /** The type factory. */\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    /**\n+     * Build a new AccumulationTransfer for the given analysis.\n+     *\n+     * @param analysis the analysis\n+     */\n+    public AccumulationTransfer(CFAnalysis analysis) {\n+        super(analysis);\n+        typeFactory = (AccumulationAnnotatedTypeFactory) analysis.getTypeFactory();\n+    }\n+\n+    /**\n+     * Updates the estimate of how many things {@code node} has accumulated.\n+     *\n+     * <p>If the node is an invocation of a method that returns its receiver, then its receiver's\n+     * type will also be updated. This chain will continue as long as each receiver is itself a\n+     * receiver-returning method invocation.\n+     *\n+     * <p>For example, suppose the argument is the expression {@code a.b().c()}, the new value is\n+     * \"foo\", and b and c return their receiver (and are deterministic). Then all of the expressions\n+     * {@code a}, {@code a.b()}, and {@code a.b().c()} would have their estimates updated to include\n+     * \"foo\".\n+     *\n+     * <p>If any method in the chain is non-deterministic, its estimate will not be updated (but the\n+     * types of any deterministic methods, and the ultimate receiver, will be updated).\n+     *\n+     * @param node the node whose estimate should be expanded\n+     * @param result the transfer result containing the store to be modified\n+     * @param values the new accumulation values\n+     */\n+    public void accumulate(Node node, TransferResult<CFValue, CFStore> result, String... values) {\n+        Tree tree = node.getTree();\n+        if (tree == null) {\n+            return;\n+        }\n+        AnnotatedTypeMirror oldType = typeFactory.getAnnotatedType(tree);\n+        AnnotationMirror newAnno = getCombinedAnno(oldType, Arrays.asList(values));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk2MDg3OQ=="}, "originalCommit": {"oid": "6047e3987fbc00fbbf23b6b115a40086d86eea57"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTEzMDk5OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMDoyMjoyMFrOGXLpmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMDoyMjoyMFrOGXLpmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk2MTMwNw==", "bodyText": "The documentation is clear, but I still find \"getCombinedAnno\" unclear since it's not the annotations that are being combined (lubbed) but the values that are being combined (unioned).  I would change \"Combined\" in the method name to \"glb\" or \"union\" or \"accumulated\".", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426961307", "createdAt": "2020-05-19T00:22:20Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.Tree.Kind;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate}\n+ * method to accumulate a string at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    /** The type factory. */\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    /**\n+     * Build a new AccumulationTransfer for the given analysis.\n+     *\n+     * @param analysis the analysis\n+     */\n+    public AccumulationTransfer(CFAnalysis analysis) {\n+        super(analysis);\n+        typeFactory = (AccumulationAnnotatedTypeFactory) analysis.getTypeFactory();\n+    }\n+\n+    /**\n+     * Updates the estimate of how many things {@code node} has accumulated.\n+     *\n+     * <p>If the node is an invocation of a method that returns its receiver, then its receiver's\n+     * type will also be updated. This chain will continue as long as each receiver is itself a\n+     * receiver-returning method invocation.\n+     *\n+     * <p>For example, suppose the argument is the expression {@code a.b().c()}, the new value is\n+     * \"foo\", and b and c return their receiver (and are deterministic). Then all of the expressions\n+     * {@code a}, {@code a.b()}, and {@code a.b().c()} would have their estimates updated to include\n+     * \"foo\".\n+     *\n+     * <p>If any method in the chain is non-deterministic, its estimate will not be updated (but the\n+     * types of any deterministic methods, and the ultimate receiver, will be updated).\n+     *\n+     * @param node the node whose estimate should be expanded\n+     * @param result the transfer result containing the store to be modified\n+     * @param values the new accumulation values\n+     */\n+    public void accumulate(Node node, TransferResult<CFValue, CFStore> result, String... values) {\n+        Tree tree = node.getTree();\n+        if (tree == null) {\n+            return;\n+        }\n+        AnnotatedTypeMirror oldType = typeFactory.getAnnotatedType(tree);\n+        AnnotationMirror newAnno = getCombinedAnno(oldType, Arrays.asList(values));\n+        insertIntoStores(result, node, newAnno);\n+\n+        if (tree.getKind() == Kind.METHOD_INVOCATION) {\n+            MethodInvocationNode methodInvocationNode = (MethodInvocationNode) node;\n+            Node receiver = methodInvocationNode.getTarget().getReceiver();\n+            MethodInvocationTree invokedMethod = (MethodInvocationTree) tree;\n+\n+            while (receiver != null && typeFactory.returnsThis(invokedMethod)) {\n+                // Note that this call doesn't do anything if receiver is a method call\n+                // that is not deterministic, though it can still continue to recurse.\n+                insertIntoStores(result, receiver, newAnno);\n+\n+                Tree receiverTree = receiver.getTree();\n+                // Possibly recurse: if the receiver is itself a method call,\n+                // then we need to also propagate this new information to its receiver\n+                // if the method being called has an @This return type.\n+                //\n+                // Note that we must check for null, because the tree could be\n+                // implicit (when calling an instance method on the class itself).\n+                // In that case, do not attempt to refine either - the receiver is\n+                // not a method invocation, anyway.\n+                if (receiverTree == null || receiverTree.getKind() != Tree.Kind.METHOD_INVOCATION) {\n+                    // Do not continue, because the receiver isn't a method invocation itself. The\n+                    // end of the chain of calls has been reached.\n+                    break;\n+                }\n+\n+                invokedMethod = (MethodInvocationTree) receiver.getTree();\n+                receiver = ((MethodInvocationNode) receiver).getTarget().getReceiver();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Unions the values in oldType with the values in newValues to produce a single accumulator\n+     * type qualifier.\n+     *\n+     * @param oldType an annotated type mirror whose values should be included, or null which is\n+     *     treated as top\n+     * @param newValues new values to include\n+     * @return an annotation representing all the values\n+     */\n+    private AnnotationMirror getCombinedAnno(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6047e3987fbc00fbbf23b6b115a40086d86eea57"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTEzMzE5OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMDoyMzozMlrOGXLq6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMDoyMzozMlrOGXLq6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk2MTY0MQ==", "bodyText": "Why does this method treat null specially?  Are there places that null is more convenient to call?", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426961641", "createdAt": "2020-05-19T00:23:32Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.Tree.Kind;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate}\n+ * method to accumulate a string at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    /** The type factory. */\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    /**\n+     * Build a new AccumulationTransfer for the given analysis.\n+     *\n+     * @param analysis the analysis\n+     */\n+    public AccumulationTransfer(CFAnalysis analysis) {\n+        super(analysis);\n+        typeFactory = (AccumulationAnnotatedTypeFactory) analysis.getTypeFactory();\n+    }\n+\n+    /**\n+     * Updates the estimate of how many things {@code node} has accumulated.\n+     *\n+     * <p>If the node is an invocation of a method that returns its receiver, then its receiver's\n+     * type will also be updated. This chain will continue as long as each receiver is itself a\n+     * receiver-returning method invocation.\n+     *\n+     * <p>For example, suppose the argument is the expression {@code a.b().c()}, the new value is\n+     * \"foo\", and b and c return their receiver (and are deterministic). Then all of the expressions\n+     * {@code a}, {@code a.b()}, and {@code a.b().c()} would have their estimates updated to include\n+     * \"foo\".\n+     *\n+     * <p>If any method in the chain is non-deterministic, its estimate will not be updated (but the\n+     * types of any deterministic methods, and the ultimate receiver, will be updated).\n+     *\n+     * @param node the node whose estimate should be expanded\n+     * @param result the transfer result containing the store to be modified\n+     * @param values the new accumulation values\n+     */\n+    public void accumulate(Node node, TransferResult<CFValue, CFStore> result, String... values) {\n+        Tree tree = node.getTree();\n+        if (tree == null) {\n+            return;\n+        }\n+        AnnotatedTypeMirror oldType = typeFactory.getAnnotatedType(tree);\n+        AnnotationMirror newAnno = getCombinedAnno(oldType, Arrays.asList(values));\n+        insertIntoStores(result, node, newAnno);\n+\n+        if (tree.getKind() == Kind.METHOD_INVOCATION) {\n+            MethodInvocationNode methodInvocationNode = (MethodInvocationNode) node;\n+            Node receiver = methodInvocationNode.getTarget().getReceiver();\n+            MethodInvocationTree invokedMethod = (MethodInvocationTree) tree;\n+\n+            while (receiver != null && typeFactory.returnsThis(invokedMethod)) {\n+                // Note that this call doesn't do anything if receiver is a method call\n+                // that is not deterministic, though it can still continue to recurse.\n+                insertIntoStores(result, receiver, newAnno);\n+\n+                Tree receiverTree = receiver.getTree();\n+                // Possibly recurse: if the receiver is itself a method call,\n+                // then we need to also propagate this new information to its receiver\n+                // if the method being called has an @This return type.\n+                //\n+                // Note that we must check for null, because the tree could be\n+                // implicit (when calling an instance method on the class itself).\n+                // In that case, do not attempt to refine either - the receiver is\n+                // not a method invocation, anyway.\n+                if (receiverTree == null || receiverTree.getKind() != Tree.Kind.METHOD_INVOCATION) {\n+                    // Do not continue, because the receiver isn't a method invocation itself. The\n+                    // end of the chain of calls has been reached.\n+                    break;\n+                }\n+\n+                invokedMethod = (MethodInvocationTree) receiver.getTree();\n+                receiver = ((MethodInvocationNode) receiver).getTarget().getReceiver();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Unions the values in oldType with the values in newValues to produce a single accumulator\n+     * type qualifier.\n+     *\n+     * @param oldType an annotated type mirror whose values should be included, or null which is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6047e3987fbc00fbbf23b6b115a40086d86eea57"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTEzNTA3OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMDoyNDo1MVrOGXLsLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxOTo1NToyN1rOGcqPow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk2MTk2NA==", "bodyText": "Is the logic in these lines similar to that in visitMethodInvocation?  If so, consider abstracting it out.\nOr, since getCombinedAnnotation is only called once, you could create a method getAnnotationMirror that calls getAnnotatedType and then calls this logic.  That seems like a logical place for it, and then this method could just take an AnnotationMirror as an argument.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426961964", "createdAt": "2020-05-19T00:24:51Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.Tree.Kind;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate}\n+ * method to accumulate a string at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    /** The type factory. */\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    /**\n+     * Build a new AccumulationTransfer for the given analysis.\n+     *\n+     * @param analysis the analysis\n+     */\n+    public AccumulationTransfer(CFAnalysis analysis) {\n+        super(analysis);\n+        typeFactory = (AccumulationAnnotatedTypeFactory) analysis.getTypeFactory();\n+    }\n+\n+    /**\n+     * Updates the estimate of how many things {@code node} has accumulated.\n+     *\n+     * <p>If the node is an invocation of a method that returns its receiver, then its receiver's\n+     * type will also be updated. This chain will continue as long as each receiver is itself a\n+     * receiver-returning method invocation.\n+     *\n+     * <p>For example, suppose the argument is the expression {@code a.b().c()}, the new value is\n+     * \"foo\", and b and c return their receiver (and are deterministic). Then all of the expressions\n+     * {@code a}, {@code a.b()}, and {@code a.b().c()} would have their estimates updated to include\n+     * \"foo\".\n+     *\n+     * <p>If any method in the chain is non-deterministic, its estimate will not be updated (but the\n+     * types of any deterministic methods, and the ultimate receiver, will be updated).\n+     *\n+     * @param node the node whose estimate should be expanded\n+     * @param result the transfer result containing the store to be modified\n+     * @param values the new accumulation values\n+     */\n+    public void accumulate(Node node, TransferResult<CFValue, CFStore> result, String... values) {\n+        Tree tree = node.getTree();\n+        if (tree == null) {\n+            return;\n+        }\n+        AnnotatedTypeMirror oldType = typeFactory.getAnnotatedType(tree);\n+        AnnotationMirror newAnno = getCombinedAnno(oldType, Arrays.asList(values));\n+        insertIntoStores(result, node, newAnno);\n+\n+        if (tree.getKind() == Kind.METHOD_INVOCATION) {\n+            MethodInvocationNode methodInvocationNode = (MethodInvocationNode) node;\n+            Node receiver = methodInvocationNode.getTarget().getReceiver();\n+            MethodInvocationTree invokedMethod = (MethodInvocationTree) tree;\n+\n+            while (receiver != null && typeFactory.returnsThis(invokedMethod)) {\n+                // Note that this call doesn't do anything if receiver is a method call\n+                // that is not deterministic, though it can still continue to recurse.\n+                insertIntoStores(result, receiver, newAnno);\n+\n+                Tree receiverTree = receiver.getTree();\n+                // Possibly recurse: if the receiver is itself a method call,\n+                // then we need to also propagate this new information to its receiver\n+                // if the method being called has an @This return type.\n+                //\n+                // Note that we must check for null, because the tree could be\n+                // implicit (when calling an instance method on the class itself).\n+                // In that case, do not attempt to refine either - the receiver is\n+                // not a method invocation, anyway.\n+                if (receiverTree == null || receiverTree.getKind() != Tree.Kind.METHOD_INVOCATION) {\n+                    // Do not continue, because the receiver isn't a method invocation itself. The\n+                    // end of the chain of calls has been reached.\n+                    break;\n+                }\n+\n+                invokedMethod = (MethodInvocationTree) receiver.getTree();\n+                receiver = ((MethodInvocationNode) receiver).getTarget().getReceiver();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Unions the values in oldType with the values in newValues to produce a single accumulator\n+     * type qualifier.\n+     *\n+     * @param oldType an annotated type mirror whose values should be included, or null which is\n+     *     treated as top\n+     * @param newValues new values to include\n+     * @return an annotation representing all the values\n+     */\n+    private AnnotationMirror getCombinedAnno(\n+            @Nullable AnnotatedTypeMirror oldType, List<String> newValues) {\n+        AnnotationMirror oldAnno;\n+        if (oldType == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6047e3987fbc00fbbf23b6b115a40086d86eea57"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcwNTQ0Mw==", "bodyText": "I rewrote the logic here to make it clear that they're not quite the same - in the annotated type factory, it's not necessary to check for the annotation mirror being null, but here it is. So I don't think there's any need to abstract the one or two lines they share.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r432705443", "createdAt": "2020-05-29T19:55:27Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.Tree.Kind;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate}\n+ * method to accumulate a string at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    /** The type factory. */\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    /**\n+     * Build a new AccumulationTransfer for the given analysis.\n+     *\n+     * @param analysis the analysis\n+     */\n+    public AccumulationTransfer(CFAnalysis analysis) {\n+        super(analysis);\n+        typeFactory = (AccumulationAnnotatedTypeFactory) analysis.getTypeFactory();\n+    }\n+\n+    /**\n+     * Updates the estimate of how many things {@code node} has accumulated.\n+     *\n+     * <p>If the node is an invocation of a method that returns its receiver, then its receiver's\n+     * type will also be updated. This chain will continue as long as each receiver is itself a\n+     * receiver-returning method invocation.\n+     *\n+     * <p>For example, suppose the argument is the expression {@code a.b().c()}, the new value is\n+     * \"foo\", and b and c return their receiver (and are deterministic). Then all of the expressions\n+     * {@code a}, {@code a.b()}, and {@code a.b().c()} would have their estimates updated to include\n+     * \"foo\".\n+     *\n+     * <p>If any method in the chain is non-deterministic, its estimate will not be updated (but the\n+     * types of any deterministic methods, and the ultimate receiver, will be updated).\n+     *\n+     * @param node the node whose estimate should be expanded\n+     * @param result the transfer result containing the store to be modified\n+     * @param values the new accumulation values\n+     */\n+    public void accumulate(Node node, TransferResult<CFValue, CFStore> result, String... values) {\n+        Tree tree = node.getTree();\n+        if (tree == null) {\n+            return;\n+        }\n+        AnnotatedTypeMirror oldType = typeFactory.getAnnotatedType(tree);\n+        AnnotationMirror newAnno = getCombinedAnno(oldType, Arrays.asList(values));\n+        insertIntoStores(result, node, newAnno);\n+\n+        if (tree.getKind() == Kind.METHOD_INVOCATION) {\n+            MethodInvocationNode methodInvocationNode = (MethodInvocationNode) node;\n+            Node receiver = methodInvocationNode.getTarget().getReceiver();\n+            MethodInvocationTree invokedMethod = (MethodInvocationTree) tree;\n+\n+            while (receiver != null && typeFactory.returnsThis(invokedMethod)) {\n+                // Note that this call doesn't do anything if receiver is a method call\n+                // that is not deterministic, though it can still continue to recurse.\n+                insertIntoStores(result, receiver, newAnno);\n+\n+                Tree receiverTree = receiver.getTree();\n+                // Possibly recurse: if the receiver is itself a method call,\n+                // then we need to also propagate this new information to its receiver\n+                // if the method being called has an @This return type.\n+                //\n+                // Note that we must check for null, because the tree could be\n+                // implicit (when calling an instance method on the class itself).\n+                // In that case, do not attempt to refine either - the receiver is\n+                // not a method invocation, anyway.\n+                if (receiverTree == null || receiverTree.getKind() != Tree.Kind.METHOD_INVOCATION) {\n+                    // Do not continue, because the receiver isn't a method invocation itself. The\n+                    // end of the chain of calls has been reached.\n+                    break;\n+                }\n+\n+                invokedMethod = (MethodInvocationTree) receiver.getTree();\n+                receiver = ((MethodInvocationNode) receiver).getTarget().getReceiver();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Unions the values in oldType with the values in newValues to produce a single accumulator\n+     * type qualifier.\n+     *\n+     * @param oldType an annotated type mirror whose values should be included, or null which is\n+     *     treated as top\n+     * @param newValues new values to include\n+     * @return an annotation representing all the values\n+     */\n+    private AnnotationMirror getCombinedAnno(\n+            @Nullable AnnotatedTypeMirror oldType, List<String> newValues) {\n+        AnnotationMirror oldAnno;\n+        if (oldType == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk2MTk2NA=="}, "originalCommit": {"oid": "6047e3987fbc00fbbf23b6b115a40086d86eea57"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTEzNzk3OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMDoyNjozOFrOGXLt_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxOTo0NjoxOFrOGcp-BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk2MjQzMQ==", "bodyText": "I think this is a way of saying \"not top or bottom\".  It's surprising that combining any A with top has the same effect as combining A with bottom.  Is that intentional?  Should combining A with bottom lead to bottom?", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r426962431", "createdAt": "2020-05-19T00:26:38Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.Tree.Kind;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate}\n+ * method to accumulate a string at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    /** The type factory. */\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    /**\n+     * Build a new AccumulationTransfer for the given analysis.\n+     *\n+     * @param analysis the analysis\n+     */\n+    public AccumulationTransfer(CFAnalysis analysis) {\n+        super(analysis);\n+        typeFactory = (AccumulationAnnotatedTypeFactory) analysis.getTypeFactory();\n+    }\n+\n+    /**\n+     * Updates the estimate of how many things {@code node} has accumulated.\n+     *\n+     * <p>If the node is an invocation of a method that returns its receiver, then its receiver's\n+     * type will also be updated. This chain will continue as long as each receiver is itself a\n+     * receiver-returning method invocation.\n+     *\n+     * <p>For example, suppose the argument is the expression {@code a.b().c()}, the new value is\n+     * \"foo\", and b and c return their receiver (and are deterministic). Then all of the expressions\n+     * {@code a}, {@code a.b()}, and {@code a.b().c()} would have their estimates updated to include\n+     * \"foo\".\n+     *\n+     * <p>If any method in the chain is non-deterministic, its estimate will not be updated (but the\n+     * types of any deterministic methods, and the ultimate receiver, will be updated).\n+     *\n+     * @param node the node whose estimate should be expanded\n+     * @param result the transfer result containing the store to be modified\n+     * @param values the new accumulation values\n+     */\n+    public void accumulate(Node node, TransferResult<CFValue, CFStore> result, String... values) {\n+        Tree tree = node.getTree();\n+        if (tree == null) {\n+            return;\n+        }\n+        AnnotatedTypeMirror oldType = typeFactory.getAnnotatedType(tree);\n+        AnnotationMirror newAnno = getCombinedAnno(oldType, Arrays.asList(values));\n+        insertIntoStores(result, node, newAnno);\n+\n+        if (tree.getKind() == Kind.METHOD_INVOCATION) {\n+            MethodInvocationNode methodInvocationNode = (MethodInvocationNode) node;\n+            Node receiver = methodInvocationNode.getTarget().getReceiver();\n+            MethodInvocationTree invokedMethod = (MethodInvocationTree) tree;\n+\n+            while (receiver != null && typeFactory.returnsThis(invokedMethod)) {\n+                // Note that this call doesn't do anything if receiver is a method call\n+                // that is not deterministic, though it can still continue to recurse.\n+                insertIntoStores(result, receiver, newAnno);\n+\n+                Tree receiverTree = receiver.getTree();\n+                // Possibly recurse: if the receiver is itself a method call,\n+                // then we need to also propagate this new information to its receiver\n+                // if the method being called has an @This return type.\n+                //\n+                // Note that we must check for null, because the tree could be\n+                // implicit (when calling an instance method on the class itself).\n+                // In that case, do not attempt to refine either - the receiver is\n+                // not a method invocation, anyway.\n+                if (receiverTree == null || receiverTree.getKind() != Tree.Kind.METHOD_INVOCATION) {\n+                    // Do not continue, because the receiver isn't a method invocation itself. The\n+                    // end of the chain of calls has been reached.\n+                    break;\n+                }\n+\n+                invokedMethod = (MethodInvocationTree) receiver.getTree();\n+                receiver = ((MethodInvocationNode) receiver).getTarget().getReceiver();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Unions the values in oldType with the values in newValues to produce a single accumulator\n+     * type qualifier.\n+     *\n+     * @param oldType an annotated type mirror whose values should be included, or null which is\n+     *     treated as top\n+     * @param newValues new values to include\n+     * @return an annotation representing all the values\n+     */\n+    private AnnotationMirror getCombinedAnno(\n+            @Nullable AnnotatedTypeMirror oldType, List<String> newValues) {\n+        AnnotationMirror oldAnno;\n+        if (oldType == null) {\n+            oldAnno = typeFactory.top;\n+        } else {\n+            oldAnno = oldType.getAnnotationInHierarchy(typeFactory.top);\n+            if (oldAnno == null) {\n+                oldAnno = typeFactory.top;\n+            }\n+        }\n+        List<String> allValues = new ArrayList<>(newValues);\n+        if (typeFactory.isAccumulatorAnnotation(oldAnno)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6047e3987fbc00fbbf23b6b115a40086d86eea57"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcwMDkzMg==", "bodyText": "I rewrote this method to make this test unnecessary (it now uses GLB).", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r432700932", "createdAt": "2020-05-29T19:46:18Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.Tree.Kind;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate}\n+ * method to accumulate a string at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    /** The type factory. */\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    /**\n+     * Build a new AccumulationTransfer for the given analysis.\n+     *\n+     * @param analysis the analysis\n+     */\n+    public AccumulationTransfer(CFAnalysis analysis) {\n+        super(analysis);\n+        typeFactory = (AccumulationAnnotatedTypeFactory) analysis.getTypeFactory();\n+    }\n+\n+    /**\n+     * Updates the estimate of how many things {@code node} has accumulated.\n+     *\n+     * <p>If the node is an invocation of a method that returns its receiver, then its receiver's\n+     * type will also be updated. This chain will continue as long as each receiver is itself a\n+     * receiver-returning method invocation.\n+     *\n+     * <p>For example, suppose the argument is the expression {@code a.b().c()}, the new value is\n+     * \"foo\", and b and c return their receiver (and are deterministic). Then all of the expressions\n+     * {@code a}, {@code a.b()}, and {@code a.b().c()} would have their estimates updated to include\n+     * \"foo\".\n+     *\n+     * <p>If any method in the chain is non-deterministic, its estimate will not be updated (but the\n+     * types of any deterministic methods, and the ultimate receiver, will be updated).\n+     *\n+     * @param node the node whose estimate should be expanded\n+     * @param result the transfer result containing the store to be modified\n+     * @param values the new accumulation values\n+     */\n+    public void accumulate(Node node, TransferResult<CFValue, CFStore> result, String... values) {\n+        Tree tree = node.getTree();\n+        if (tree == null) {\n+            return;\n+        }\n+        AnnotatedTypeMirror oldType = typeFactory.getAnnotatedType(tree);\n+        AnnotationMirror newAnno = getCombinedAnno(oldType, Arrays.asList(values));\n+        insertIntoStores(result, node, newAnno);\n+\n+        if (tree.getKind() == Kind.METHOD_INVOCATION) {\n+            MethodInvocationNode methodInvocationNode = (MethodInvocationNode) node;\n+            Node receiver = methodInvocationNode.getTarget().getReceiver();\n+            MethodInvocationTree invokedMethod = (MethodInvocationTree) tree;\n+\n+            while (receiver != null && typeFactory.returnsThis(invokedMethod)) {\n+                // Note that this call doesn't do anything if receiver is a method call\n+                // that is not deterministic, though it can still continue to recurse.\n+                insertIntoStores(result, receiver, newAnno);\n+\n+                Tree receiverTree = receiver.getTree();\n+                // Possibly recurse: if the receiver is itself a method call,\n+                // then we need to also propagate this new information to its receiver\n+                // if the method being called has an @This return type.\n+                //\n+                // Note that we must check for null, because the tree could be\n+                // implicit (when calling an instance method on the class itself).\n+                // In that case, do not attempt to refine either - the receiver is\n+                // not a method invocation, anyway.\n+                if (receiverTree == null || receiverTree.getKind() != Tree.Kind.METHOD_INVOCATION) {\n+                    // Do not continue, because the receiver isn't a method invocation itself. The\n+                    // end of the chain of calls has been reached.\n+                    break;\n+                }\n+\n+                invokedMethod = (MethodInvocationTree) receiver.getTree();\n+                receiver = ((MethodInvocationNode) receiver).getTarget().getReceiver();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Unions the values in oldType with the values in newValues to produce a single accumulator\n+     * type qualifier.\n+     *\n+     * @param oldType an annotated type mirror whose values should be included, or null which is\n+     *     treated as top\n+     * @param newValues new values to include\n+     * @return an annotation representing all the values\n+     */\n+    private AnnotationMirror getCombinedAnno(\n+            @Nullable AnnotatedTypeMirror oldType, List<String> newValues) {\n+        AnnotationMirror oldAnno;\n+        if (oldType == null) {\n+            oldAnno = typeFactory.top;\n+        } else {\n+            oldAnno = oldType.getAnnotationInHierarchy(typeFactory.top);\n+            if (oldAnno == null) {\n+                oldAnno = typeFactory.top;\n+            }\n+        }\n+        List<String> allValues = new ArrayList<>(newValues);\n+        if (typeFactory.isAccumulatorAnnotation(oldAnno)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk2MjQzMQ=="}, "originalCommit": {"oid": "6047e3987fbc00fbbf23b6b115a40086d86eea57"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTA3MDEyOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTowMjoxM1rOGdiIsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTowMjoxM1rOGdiIsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyMTE2OQ==", "bodyText": "\"argument\" should be \"element\".\nThe test also fails if it has zero elements, so the message may be misleading.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r433621169", "createdAt": "2020-06-02T05:02:13Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,311 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.BugInCF;\n+import org.checkerframework.javacutil.TreeUtils;\n+import org.checkerframework.javacutil.UserError;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement a constructor, which should\n+ * take a {@link BaseTypeChecker} and call both the constructor defined in this class and {@link\n+ * #postInit()}.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /**\n+     * The canonical top annotation for this accumulation checker: an instance of the accumulator\n+     * annotation with no arguments.\n+     */\n+    public final AnnotationMirror top;\n+\n+    /** The canonical bottom annotation for this accumulation checker. */\n+    public final AnnotationMirror bottom;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> accumulator;\n+\n+    /**\n+     * Create an annotated type factory for an accumulation checker.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.\n+     * @param bottom the bottom type in the hierarchy, which must be a subtype of {@code\n+     *     accumulator}. The bottom type should be an annotation with no arguments.\n+     */\n+    protected AccumulationAnnotatedTypeFactory(\n+            BaseTypeChecker checker,\n+            Class<? extends Annotation> accumulator,\n+            Class<? extends Annotation> bottom) {\n+        super(checker);\n+\n+        this.accumulator = accumulator;\n+\n+        // Check that the requirements of the accumulator are met.\n+        Method[] accDeclaredMethods = accumulator.getDeclaredMethods();\n+        if (accDeclaredMethods.length != 1) {\n+            rejectMalformedAccumulator(\"not have more than one argument\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd7e2283ffbdca30d18559ecb330c9428575ce8d"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTA3MTkxOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTowMzoxM1rOGdiJuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTowMzoxM1rOGdiJuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyMTQzMw==", "bodyText": "This check, and the next one, are not about the annotation but about its value element, so the string created by rejectMalformedAccumulator is imprecise and possibly confusing.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r433621433", "createdAt": "2020-06-02T05:03:13Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,311 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.BugInCF;\n+import org.checkerframework.javacutil.TreeUtils;\n+import org.checkerframework.javacutil.UserError;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement a constructor, which should\n+ * take a {@link BaseTypeChecker} and call both the constructor defined in this class and {@link\n+ * #postInit()}.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /**\n+     * The canonical top annotation for this accumulation checker: an instance of the accumulator\n+     * annotation with no arguments.\n+     */\n+    public final AnnotationMirror top;\n+\n+    /** The canonical bottom annotation for this accumulation checker. */\n+    public final AnnotationMirror bottom;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> accumulator;\n+\n+    /**\n+     * Create an annotated type factory for an accumulation checker.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.\n+     * @param bottom the bottom type in the hierarchy, which must be a subtype of {@code\n+     *     accumulator}. The bottom type should be an annotation with no arguments.\n+     */\n+    protected AccumulationAnnotatedTypeFactory(\n+            BaseTypeChecker checker,\n+            Class<? extends Annotation> accumulator,\n+            Class<? extends Annotation> bottom) {\n+        super(checker);\n+\n+        this.accumulator = accumulator;\n+\n+        // Check that the requirements of the accumulator are met.\n+        Method[] accDeclaredMethods = accumulator.getDeclaredMethods();\n+        if (accDeclaredMethods.length != 1) {\n+            rejectMalformedAccumulator(\"not have more than one argument\");\n+        }\n+        Method value = accDeclaredMethods[0];\n+        if (value.getName() != \"value\") {\n+            rejectMalformedAccumulator(\"name its argument \\\"value\\\"\");\n+        }\n+        if (!value.getReturnType().isInstance(new String[0])) {\n+            rejectMalformedAccumulator(\"have an argument of type String[]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd7e2283ffbdca30d18559ecb330c9428575ce8d"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTA3NDM1OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTowNDo0OFrOGdiLQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNTowNDo0OFrOGdiLQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyMTgyNA==", "bodyText": "A UserError is when a user passed wrong arguments to the Checker Framework.  It can be corrected by changing the run-time invocation.  A bug in the source code of a checker should be thrown as a BugInCF., even if that source code was written by someone other than the main Checker Framework developers.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r433621824", "createdAt": "2020-06-02T05:04:48Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,311 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.ExpressionTree;\n+import com.sun.source.tree.MethodInvocationTree;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.ExecutableElement;\n+import org.checkerframework.common.basetype.BaseAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverAnnotatedTypeFactory;\n+import org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker;\n+import org.checkerframework.common.returnsreceiver.qual.This;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.QualifierHierarchy;\n+import org.checkerframework.framework.type.treeannotator.ListTreeAnnotator;\n+import org.checkerframework.framework.type.treeannotator.TreeAnnotator;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy;\n+import org.checkerframework.framework.util.MultiGraphQualifierHierarchy.MultiGraphFactory;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.AnnotationUtils;\n+import org.checkerframework.javacutil.BugInCF;\n+import org.checkerframework.javacutil.TreeUtils;\n+import org.checkerframework.javacutil.UserError;\n+\n+/**\n+ * An annotated type factory for an accumulation checker.\n+ *\n+ * <p>New accumulation checkers should extend this class and implement a constructor, which should\n+ * take a {@link BaseTypeChecker} and call both the constructor defined in this class and {@link\n+ * #postInit()}.\n+ */\n+public abstract class AccumulationAnnotatedTypeFactory extends BaseAnnotatedTypeFactory {\n+\n+    /**\n+     * The canonical top annotation for this accumulation checker: an instance of the accumulator\n+     * annotation with no arguments.\n+     */\n+    public final AnnotationMirror top;\n+\n+    /** The canonical bottom annotation for this accumulation checker. */\n+    public final AnnotationMirror bottom;\n+\n+    /**\n+     * The annotation that accumulates things in this accumulation checker. Must be an annotation\n+     * with exactly one field named \"value\" whose type is a String array.\n+     */\n+    private final Class<? extends Annotation> accumulator;\n+\n+    /**\n+     * Create an annotated type factory for an accumulation checker.\n+     *\n+     * @param checker the checker\n+     * @param accumulator the accumulator type in the hierarchy. Must be an annotation with a single\n+     *     argument named \"value\" whose type is a String array.\n+     * @param bottom the bottom type in the hierarchy, which must be a subtype of {@code\n+     *     accumulator}. The bottom type should be an annotation with no arguments.\n+     */\n+    protected AccumulationAnnotatedTypeFactory(\n+            BaseTypeChecker checker,\n+            Class<? extends Annotation> accumulator,\n+            Class<? extends Annotation> bottom) {\n+        super(checker);\n+\n+        this.accumulator = accumulator;\n+\n+        // Check that the requirements of the accumulator are met.\n+        Method[] accDeclaredMethods = accumulator.getDeclaredMethods();\n+        if (accDeclaredMethods.length != 1) {\n+            rejectMalformedAccumulator(\"not have more than one argument\");\n+        }\n+        Method value = accDeclaredMethods[0];\n+        if (value.getName() != \"value\") {\n+            rejectMalformedAccumulator(\"name its argument \\\"value\\\"\");\n+        }\n+        if (!value.getReturnType().isInstance(new String[0])) {\n+            rejectMalformedAccumulator(\"have an argument of type String[]\");\n+        }\n+        if (((String[]) value.getDefaultValue()).length != 0) {\n+            rejectMalformedAccumulator(\"must have the empty string array {} as its default value\");\n+        }\n+\n+        this.bottom = AnnotationBuilder.fromClass(elements, bottom);\n+        this.top = createAccumulatorAnnotation(Collections.emptyList());\n+\n+        // Every subclass must call postInit!  This does not do so for subclasses.\n+        if (this.getClass() == AccumulationAnnotatedTypeFactory.class) {\n+            this.postInit();\n+        }\n+    }\n+\n+    /**\n+     * Common error message for malformed accumulator annotation.\n+     *\n+     * @param missing what is missing from the accumulator, suitable for use in this string to\n+     *     replace $MISSING$: \"The accumulator annotation Foo must $MISSING$.\"\n+     */\n+    private void rejectMalformedAccumulator(String missing) {\n+        throw new UserError(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd7e2283ffbdca30d18559ecb330c9428575ce8d"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTA5NTkzOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNToxNzo1MlrOGdiYBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNToxNzo1MlrOGdiYBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyNTA5NA==", "bodyText": "\"the chain\" isn't really defined.  Can you define that term before you start discussing the behavior of the method?", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r433625094", "createdAt": "2020-06-02T05:17:52Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.Tree.Kind;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate}\n+ * method to accumulate a string at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    /** The type factory. */\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    /**\n+     * Build a new AccumulationTransfer for the given analysis.\n+     *\n+     * @param analysis the analysis\n+     */\n+    public AccumulationTransfer(CFAnalysis analysis) {\n+        super(analysis);\n+        typeFactory = (AccumulationAnnotatedTypeFactory) analysis.getTypeFactory();\n+    }\n+\n+    /**\n+     * Updates the estimate of how many things {@code node} has accumulated.\n+     *\n+     * <p>If the node is an invocation of a method that returns its receiver, then its receiver's\n+     * type will also be updated. This chain will continue as long as each receiver is itself a\n+     * receiver-returning method invocation.\n+     *\n+     * <p>For example, suppose the argument is the expression {@code a.b().c()}, the new value is\n+     * \"foo\", and b and c return their receiver (and are deterministic). Then all of the expressions\n+     * {@code a}, {@code a.b()}, and {@code a.b().c()} would have their estimates updated to include\n+     * \"foo\".\n+     *\n+     * <p>If any method in the chain is non-deterministic, its estimate will not be updated (but the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd7e2283ffbdca30d18559ecb330c9428575ce8d"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTEwMDc0OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNToyMDoyN1rOGdia6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxOToyNjo0NlrOGeqMHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyNTgzMg==", "bodyText": "Why is it important to mention that the method is deterministic?\nI think every method that returns its receiver is deterministic, so this would be a vacuous test and it's confusing why it is mentioned as an extra condition.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r433625832", "createdAt": "2020-06-02T05:20:27Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.Tree.Kind;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate}\n+ * method to accumulate a string at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    /** The type factory. */\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    /**\n+     * Build a new AccumulationTransfer for the given analysis.\n+     *\n+     * @param analysis the analysis\n+     */\n+    public AccumulationTransfer(CFAnalysis analysis) {\n+        super(analysis);\n+        typeFactory = (AccumulationAnnotatedTypeFactory) analysis.getTypeFactory();\n+    }\n+\n+    /**\n+     * Updates the estimate of how many things {@code node} has accumulated.\n+     *\n+     * <p>If the node is an invocation of a method that returns its receiver, then its receiver's\n+     * type will also be updated. This chain will continue as long as each receiver is itself a\n+     * receiver-returning method invocation.\n+     *\n+     * <p>For example, suppose the argument is the expression {@code a.b().c()}, the new value is\n+     * \"foo\", and b and c return their receiver (and are deterministic). Then all of the expressions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd7e2283ffbdca30d18559ecb330c9428575ce8d"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5NDUyNg==", "bodyText": "I think Manu made this point at some point, which is why we added it to the documentation. I agree it is distracting. @msridhar do you think removing any mention of determinism is okay here - it is a general fact about how dataflow works rather than something specific to how accumulation analysis works.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r434794526", "createdAt": "2020-06-03T19:13:03Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.Tree.Kind;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate}\n+ * method to accumulate a string at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    /** The type factory. */\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    /**\n+     * Build a new AccumulationTransfer for the given analysis.\n+     *\n+     * @param analysis the analysis\n+     */\n+    public AccumulationTransfer(CFAnalysis analysis) {\n+        super(analysis);\n+        typeFactory = (AccumulationAnnotatedTypeFactory) analysis.getTypeFactory();\n+    }\n+\n+    /**\n+     * Updates the estimate of how many things {@code node} has accumulated.\n+     *\n+     * <p>If the node is an invocation of a method that returns its receiver, then its receiver's\n+     * type will also be updated. This chain will continue as long as each receiver is itself a\n+     * receiver-returning method invocation.\n+     *\n+     * <p>For example, suppose the argument is the expression {@code a.b().c()}, the new value is\n+     * \"foo\", and b and c return their receiver (and are deterministic). Then all of the expressions", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyNTgzMg=="}, "originalCommit": {"oid": "bd7e2283ffbdca30d18559ecb330c9428575ce8d"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgwMTY5NQ==", "bodyText": "Yes we can remove the mention of determinism", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r434801695", "createdAt": "2020-06-03T19:26:46Z", "author": {"login": "msridhar"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.Tree.Kind;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate}\n+ * method to accumulate a string at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    /** The type factory. */\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    /**\n+     * Build a new AccumulationTransfer for the given analysis.\n+     *\n+     * @param analysis the analysis\n+     */\n+    public AccumulationTransfer(CFAnalysis analysis) {\n+        super(analysis);\n+        typeFactory = (AccumulationAnnotatedTypeFactory) analysis.getTypeFactory();\n+    }\n+\n+    /**\n+     * Updates the estimate of how many things {@code node} has accumulated.\n+     *\n+     * <p>If the node is an invocation of a method that returns its receiver, then its receiver's\n+     * type will also be updated. This chain will continue as long as each receiver is itself a\n+     * receiver-returning method invocation.\n+     *\n+     * <p>For example, suppose the argument is the expression {@code a.b().c()}, the new value is\n+     * \"foo\", and b and c return their receiver (and are deterministic). Then all of the expressions", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyNTgzMg=="}, "originalCommit": {"oid": "bd7e2283ffbdca30d18559ecb330c9428575ce8d"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTEwNjMwOnYy", "diffSide": "RIGHT", "path": "framework/tests/accumulation/Generics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNToyMzoxNlrOGdieLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNToyMzoxNlrOGdieLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyNjY2OA==", "bodyText": "Please remove these comments, or indicate how they are actionable.  For example, is the programmer supposed to keep the two versions of the test in sync by making a duplicate pull request on the other repository?", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r433626668", "createdAt": "2020-06-02T05:23:16Z", "author": {"login": "mernst"}, "path": "framework/tests/accumulation/Generics.java", "diffHunk": "@@ -0,0 +1,45 @@\n+// Copied from the Object Construction Checker.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd7e2283ffbdca30d18559ecb330c9428575ce8d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTExNzkwOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNToyOToxMFrOGdik8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNToyOToxMFrOGdik8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYyODQwMg==", "bodyText": "Are there tests of this functionality?  Test SimpleFluent.java does not seem to test it.  I expect a test would look like\n  s.a().b().c();\n  s.build();", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r433628402", "createdAt": "2020-06-02T05:29:10Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.Tree.Kind;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate}\n+ * method to accumulate a string at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    /** The type factory. */\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    /**\n+     * Build a new AccumulationTransfer for the given analysis.\n+     *\n+     * @param analysis the analysis\n+     */\n+    public AccumulationTransfer(CFAnalysis analysis) {\n+        super(analysis);\n+        typeFactory = (AccumulationAnnotatedTypeFactory) analysis.getTypeFactory();\n+    }\n+\n+    /**\n+     * Updates the estimate of how many things {@code node} has accumulated.\n+     *\n+     * <p>If the node is an invocation of a method that returns its receiver, then its receiver's\n+     * type will also be updated. This chain will continue as long as each receiver is itself a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd7e2283ffbdca30d18559ecb330c9428575ce8d"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzA2NDk5OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMjo0NToyOFrOGg25Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOToyNDoyMlrOGj_nMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEwNzAzOQ==", "bodyText": "Is there a test case that shows this halting at a non-receiver-returning method invocation?", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r437107039", "createdAt": "2020-06-09T02:45:28Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.Tree.Kind;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate}\n+ * method to add a string to the estimate at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    /** The type factory. */\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    /**\n+     * Build a new AccumulationTransfer for the given analysis.\n+     *\n+     * @param analysis the analysis\n+     */\n+    public AccumulationTransfer(CFAnalysis analysis) {\n+        super(analysis);\n+        typeFactory = (AccumulationAnnotatedTypeFactory) analysis.getTypeFactory();\n+    }\n+\n+    /**\n+     * Updates the estimate of how many things {@code node} has accumulated.\n+     *\n+     * <p>If the node is an invocation of a method that returns its receiver, then its receiver's\n+     * type will also be updated. In a chain of method calls, this process will continue as long as\n+     * each receiver is itself a receiver-returning method invocation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52abc210698334562fe89c1d6f1fba36b185935d"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM5NTU2OA==", "bodyText": "Yes. See ~line 35 of SimpleFluent.java, for example.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r440395568", "createdAt": "2020-06-15T19:24:22Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.Tree.Kind;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate}\n+ * method to add a string to the estimate at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    /** The type factory. */\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    /**\n+     * Build a new AccumulationTransfer for the given analysis.\n+     *\n+     * @param analysis the analysis\n+     */\n+    public AccumulationTransfer(CFAnalysis analysis) {\n+        super(analysis);\n+        typeFactory = (AccumulationAnnotatedTypeFactory) analysis.getTypeFactory();\n+    }\n+\n+    /**\n+     * Updates the estimate of how many things {@code node} has accumulated.\n+     *\n+     * <p>If the node is an invocation of a method that returns its receiver, then its receiver's\n+     * type will also be updated. In a chain of method calls, this process will continue as long as\n+     * each receiver is itself a receiver-returning method invocation.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEwNzAzOQ=="}, "originalCommit": {"oid": "52abc210698334562fe89c1d6f1fba36b185935d"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzA2NTg3OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMjo0NTo1OVrOGg255g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMToyNzowMlrOGktylw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEwNzE3NA==", "bodyText": "Could you add this test case?  Probably there will be a comment saying the code is safe and the checker currently issues a false positive warning.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r437107174", "createdAt": "2020-06-09T02:45:59Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.Tree.Kind;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate}\n+ * method to add a string to the estimate at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    /** The type factory. */\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    /**\n+     * Build a new AccumulationTransfer for the given analysis.\n+     *\n+     * @param analysis the analysis\n+     */\n+    public AccumulationTransfer(CFAnalysis analysis) {\n+        super(analysis);\n+        typeFactory = (AccumulationAnnotatedTypeFactory) analysis.getTypeFactory();\n+    }\n+\n+    /**\n+     * Updates the estimate of how many things {@code node} has accumulated.\n+     *\n+     * <p>If the node is an invocation of a method that returns its receiver, then its receiver's\n+     * type will also be updated. In a chain of method calls, this process will continue as long as\n+     * each receiver is itself a receiver-returning method invocation.\n+     *\n+     * <p>For example, suppose {@code node} is the expression {@code a.b().c()}, the new value\n+     * (added by the accumulation analysis because of the {@code .c()} call) is \"foo\", and b and c\n+     * return their receiver. Then all of the expressions {@code a.b().c()}, {@code a.b()}, and\n+     * {@code a} would have their estimates updated to include \"foo\". Note that due to what kind of\n+     * values can be held in the store, this information is lost outside the method chain. That is,\n+     * the returns-receiver propagated information is lost outside the expression in which the\n+     * returns-receiver method invocations are nested.\n+     *\n+     * <p>As a concrete example, consider the Called Methods accumulation checker: if {@code build}\n+     * requires a, b, and c to be called, then {@code foo.a().b().c().build();} will typecheck (they\n+     * are in one fluent method chain), but {@code foo.a().b().c(); foo.build();} will not -- the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52abc210698334562fe89c1d6f1fba36b185935d"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM5Njc2Mg==", "bodyText": "The test case exists, in SimpleFluent.java. It passes, because the Test Accumulation called-methods checker includes the other rules that allows the code to typecheck. I'll clarify this documentation to explicitly mention the need for another rule from the user if they want to handle this kind of case.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r440396762", "createdAt": "2020-06-15T19:26:37Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.Tree.Kind;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate}\n+ * method to add a string to the estimate at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    /** The type factory. */\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    /**\n+     * Build a new AccumulationTransfer for the given analysis.\n+     *\n+     * @param analysis the analysis\n+     */\n+    public AccumulationTransfer(CFAnalysis analysis) {\n+        super(analysis);\n+        typeFactory = (AccumulationAnnotatedTypeFactory) analysis.getTypeFactory();\n+    }\n+\n+    /**\n+     * Updates the estimate of how many things {@code node} has accumulated.\n+     *\n+     * <p>If the node is an invocation of a method that returns its receiver, then its receiver's\n+     * type will also be updated. In a chain of method calls, this process will continue as long as\n+     * each receiver is itself a receiver-returning method invocation.\n+     *\n+     * <p>For example, suppose {@code node} is the expression {@code a.b().c()}, the new value\n+     * (added by the accumulation analysis because of the {@code .c()} call) is \"foo\", and b and c\n+     * return their receiver. Then all of the expressions {@code a.b().c()}, {@code a.b()}, and\n+     * {@code a} would have their estimates updated to include \"foo\". Note that due to what kind of\n+     * values can be held in the store, this information is lost outside the method chain. That is,\n+     * the returns-receiver propagated information is lost outside the expression in which the\n+     * returns-receiver method invocations are nested.\n+     *\n+     * <p>As a concrete example, consider the Called Methods accumulation checker: if {@code build}\n+     * requires a, b, and c to be called, then {@code foo.a().b().c().build();} will typecheck (they\n+     * are in one fluent method chain), but {@code foo.a().b().c(); foo.build();} will not -- the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEwNzE3NA=="}, "originalCommit": {"oid": "52abc210698334562fe89c1d6f1fba36b185935d"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE1MjE1MQ==", "bodyText": "The test case I had in mind contained a non-@This-returning method in the middle of a chain of @This-returning methods.  That is, there appear @This-returning methods both before and after it.  I added such a test case, and it fails.  It is poorly named m8 and you might want to rename it.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r441152151", "createdAt": "2020-06-16T21:27:02Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.Tree.Kind;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate}\n+ * method to add a string to the estimate at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    /** The type factory. */\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    /**\n+     * Build a new AccumulationTransfer for the given analysis.\n+     *\n+     * @param analysis the analysis\n+     */\n+    public AccumulationTransfer(CFAnalysis analysis) {\n+        super(analysis);\n+        typeFactory = (AccumulationAnnotatedTypeFactory) analysis.getTypeFactory();\n+    }\n+\n+    /**\n+     * Updates the estimate of how many things {@code node} has accumulated.\n+     *\n+     * <p>If the node is an invocation of a method that returns its receiver, then its receiver's\n+     * type will also be updated. In a chain of method calls, this process will continue as long as\n+     * each receiver is itself a receiver-returning method invocation.\n+     *\n+     * <p>For example, suppose {@code node} is the expression {@code a.b().c()}, the new value\n+     * (added by the accumulation analysis because of the {@code .c()} call) is \"foo\", and b and c\n+     * return their receiver. Then all of the expressions {@code a.b().c()}, {@code a.b()}, and\n+     * {@code a} would have their estimates updated to include \"foo\". Note that due to what kind of\n+     * values can be held in the store, this information is lost outside the method chain. That is,\n+     * the returns-receiver propagated information is lost outside the expression in which the\n+     * returns-receiver method invocations are nested.\n+     *\n+     * <p>As a concrete example, consider the Called Methods accumulation checker: if {@code build}\n+     * requires a, b, and c to be called, then {@code foo.a().b().c().build();} will typecheck (they\n+     * are in one fluent method chain), but {@code foo.a().b().c(); foo.build();} will not -- the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEwNzE3NA=="}, "originalCommit": {"oid": "52abc210698334562fe89c1d6f1fba36b185935d"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzA2NzUzOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMjo0Njo1N1rOGg260w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMjo0Njo1N1rOGg260w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEwNzQxMQ==", "bodyText": "The reason that a.b().c() gets updated is different from why the other two expressions get updated.  I think that is worth calling out in the example.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r437107411", "createdAt": "2020-06-09T02:46:57Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.Tree.Kind;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate}\n+ * method to add a string to the estimate at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    /** The type factory. */\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    /**\n+     * Build a new AccumulationTransfer for the given analysis.\n+     *\n+     * @param analysis the analysis\n+     */\n+    public AccumulationTransfer(CFAnalysis analysis) {\n+        super(analysis);\n+        typeFactory = (AccumulationAnnotatedTypeFactory) analysis.getTypeFactory();\n+    }\n+\n+    /**\n+     * Updates the estimate of how many things {@code node} has accumulated.\n+     *\n+     * <p>If the node is an invocation of a method that returns its receiver, then its receiver's\n+     * type will also be updated. In a chain of method calls, this process will continue as long as\n+     * each receiver is itself a receiver-returning method invocation.\n+     *\n+     * <p>For example, suppose {@code node} is the expression {@code a.b().c()}, the new value\n+     * (added by the accumulation analysis because of the {@code .c()} call) is \"foo\", and b and c\n+     * return their receiver. Then all of the expressions {@code a.b().c()}, {@code a.b()}, and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52abc210698334562fe89c1d6f1fba36b185935d"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzA3MzE0OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMjo1MDozMlrOGg2-VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMjo1MDozMlrOGg2-VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEwODMwOQ==", "bodyText": "Please add a test case for this.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r437108309", "createdAt": "2020-06-09T02:50:32Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.Tree.Kind;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate}\n+ * method to add a string to the estimate at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    /** The type factory. */\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    /**\n+     * Build a new AccumulationTransfer for the given analysis.\n+     *\n+     * @param analysis the analysis\n+     */\n+    public AccumulationTransfer(CFAnalysis analysis) {\n+        super(analysis);\n+        typeFactory = (AccumulationAnnotatedTypeFactory) analysis.getTypeFactory();\n+    }\n+\n+    /**\n+     * Updates the estimate of how many things {@code node} has accumulated.\n+     *\n+     * <p>If the node is an invocation of a method that returns its receiver, then its receiver's\n+     * type will also be updated. In a chain of method calls, this process will continue as long as\n+     * each receiver is itself a receiver-returning method invocation.\n+     *\n+     * <p>For example, suppose {@code node} is the expression {@code a.b().c()}, the new value\n+     * (added by the accumulation analysis because of the {@code .c()} call) is \"foo\", and b and c\n+     * return their receiver. Then all of the expressions {@code a.b().c()}, {@code a.b()}, and\n+     * {@code a} would have their estimates updated to include \"foo\". Note that due to what kind of\n+     * values can be held in the store, this information is lost outside the method chain. That is,\n+     * the returns-receiver propagated information is lost outside the expression in which the\n+     * returns-receiver method invocations are nested.\n+     *\n+     * <p>As a concrete example, consider the Called Methods accumulation checker: if {@code build}\n+     * requires a, b, and c to be called, then {@code foo.a().b().c().build();} will typecheck (they\n+     * are in one fluent method chain), but {@code foo.a().b().c(); foo.build();} will not -- the\n+     * store does not keep the information that a, b, and c have been called outside the chain.\n+     * {@code foo}'s type will be {@code CalledMethods(\"a\")}, because only {@code a()} was called on\n+     * {@code foo} directly.\n+     *\n+     * @param node the node whose estimate should be expanded\n+     * @param result the transfer result containing the store to be modified\n+     * @param values the new accumulation values\n+     */\n+    public void accumulate(Node node, TransferResult<CFValue, CFStore> result, String... values) {\n+        Tree tree = node.getTree();\n+        if (tree == null) {\n+            return;\n+        }\n+        AnnotatedTypeMirror oldType = typeFactory.getAnnotatedType(tree);\n+        AnnotationMirror newAnno = getUnionAnno(oldType, Arrays.asList(values));\n+        insertIntoStores(result, node, newAnno);\n+\n+        if (tree.getKind() == Kind.METHOD_INVOCATION) {\n+            MethodInvocationNode methodInvocationNode = (MethodInvocationNode) node;\n+            Node receiver = methodInvocationNode.getTarget().getReceiver();\n+            MethodInvocationTree invokedMethod = (MethodInvocationTree) tree;\n+\n+            while (receiver != null && typeFactory.returnsThis(invokedMethod)) {\n+                // Note that this call doesn't do anything if receiver is a method call\n+                // that is not deterministic, though it can still continue to recurse.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52abc210698334562fe89c1d6f1fba36b185935d"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzA3MzIxOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMjo1MDozNVrOGg2-YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMjo1MDozNVrOGg2-YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEwODMyMQ==", "bodyText": "invokedMethod is not a method.  It's a call.  Therefore, the name is confusing.  It's also confusing that although methodInvocationNode and invokedMethod represent the same thing (just as different types), their names do not reflect this relationship.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r437108321", "createdAt": "2020-06-09T02:50:35Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.Tree.Kind;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate}\n+ * method to add a string to the estimate at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    /** The type factory. */\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    /**\n+     * Build a new AccumulationTransfer for the given analysis.\n+     *\n+     * @param analysis the analysis\n+     */\n+    public AccumulationTransfer(CFAnalysis analysis) {\n+        super(analysis);\n+        typeFactory = (AccumulationAnnotatedTypeFactory) analysis.getTypeFactory();\n+    }\n+\n+    /**\n+     * Updates the estimate of how many things {@code node} has accumulated.\n+     *\n+     * <p>If the node is an invocation of a method that returns its receiver, then its receiver's\n+     * type will also be updated. In a chain of method calls, this process will continue as long as\n+     * each receiver is itself a receiver-returning method invocation.\n+     *\n+     * <p>For example, suppose {@code node} is the expression {@code a.b().c()}, the new value\n+     * (added by the accumulation analysis because of the {@code .c()} call) is \"foo\", and b and c\n+     * return their receiver. Then all of the expressions {@code a.b().c()}, {@code a.b()}, and\n+     * {@code a} would have their estimates updated to include \"foo\". Note that due to what kind of\n+     * values can be held in the store, this information is lost outside the method chain. That is,\n+     * the returns-receiver propagated information is lost outside the expression in which the\n+     * returns-receiver method invocations are nested.\n+     *\n+     * <p>As a concrete example, consider the Called Methods accumulation checker: if {@code build}\n+     * requires a, b, and c to be called, then {@code foo.a().b().c().build();} will typecheck (they\n+     * are in one fluent method chain), but {@code foo.a().b().c(); foo.build();} will not -- the\n+     * store does not keep the information that a, b, and c have been called outside the chain.\n+     * {@code foo}'s type will be {@code CalledMethods(\"a\")}, because only {@code a()} was called on\n+     * {@code foo} directly.\n+     *\n+     * @param node the node whose estimate should be expanded\n+     * @param result the transfer result containing the store to be modified\n+     * @param values the new accumulation values\n+     */\n+    public void accumulate(Node node, TransferResult<CFValue, CFStore> result, String... values) {\n+        Tree tree = node.getTree();\n+        if (tree == null) {\n+            return;\n+        }\n+        AnnotatedTypeMirror oldType = typeFactory.getAnnotatedType(tree);\n+        AnnotationMirror newAnno = getUnionAnno(oldType, Arrays.asList(values));\n+        insertIntoStores(result, node, newAnno);\n+\n+        if (tree.getKind() == Kind.METHOD_INVOCATION) {\n+            MethodInvocationNode methodInvocationNode = (MethodInvocationNode) node;\n+            Node receiver = methodInvocationNode.getTarget().getReceiver();\n+            MethodInvocationTree invokedMethod = (MethodInvocationTree) tree;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52abc210698334562fe89c1d6f1fba36b185935d"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzA3MzI3OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMjo1MDozN1rOGg2-aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMjo1MDozN1rOGg2-aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEwODMzMQ==", "bodyText": "Please document the relationship between these variables.  It isn't obvious from the code.\nCan you convert any of them from loop-carried dependencies into local variables within the loop?  If you can reduce the number of variables that the loop maintains, the loop will be easier to understand.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r437108331", "createdAt": "2020-06-09T02:50:37Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.Tree.Kind;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate}\n+ * method to add a string to the estimate at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    /** The type factory. */\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    /**\n+     * Build a new AccumulationTransfer for the given analysis.\n+     *\n+     * @param analysis the analysis\n+     */\n+    public AccumulationTransfer(CFAnalysis analysis) {\n+        super(analysis);\n+        typeFactory = (AccumulationAnnotatedTypeFactory) analysis.getTypeFactory();\n+    }\n+\n+    /**\n+     * Updates the estimate of how many things {@code node} has accumulated.\n+     *\n+     * <p>If the node is an invocation of a method that returns its receiver, then its receiver's\n+     * type will also be updated. In a chain of method calls, this process will continue as long as\n+     * each receiver is itself a receiver-returning method invocation.\n+     *\n+     * <p>For example, suppose {@code node} is the expression {@code a.b().c()}, the new value\n+     * (added by the accumulation analysis because of the {@code .c()} call) is \"foo\", and b and c\n+     * return their receiver. Then all of the expressions {@code a.b().c()}, {@code a.b()}, and\n+     * {@code a} would have their estimates updated to include \"foo\". Note that due to what kind of\n+     * values can be held in the store, this information is lost outside the method chain. That is,\n+     * the returns-receiver propagated information is lost outside the expression in which the\n+     * returns-receiver method invocations are nested.\n+     *\n+     * <p>As a concrete example, consider the Called Methods accumulation checker: if {@code build}\n+     * requires a, b, and c to be called, then {@code foo.a().b().c().build();} will typecheck (they\n+     * are in one fluent method chain), but {@code foo.a().b().c(); foo.build();} will not -- the\n+     * store does not keep the information that a, b, and c have been called outside the chain.\n+     * {@code foo}'s type will be {@code CalledMethods(\"a\")}, because only {@code a()} was called on\n+     * {@code foo} directly.\n+     *\n+     * @param node the node whose estimate should be expanded\n+     * @param result the transfer result containing the store to be modified\n+     * @param values the new accumulation values\n+     */\n+    public void accumulate(Node node, TransferResult<CFValue, CFStore> result, String... values) {\n+        Tree tree = node.getTree();\n+        if (tree == null) {\n+            return;\n+        }\n+        AnnotatedTypeMirror oldType = typeFactory.getAnnotatedType(tree);\n+        AnnotationMirror newAnno = getUnionAnno(oldType, Arrays.asList(values));\n+        insertIntoStores(result, node, newAnno);\n+\n+        if (tree.getKind() == Kind.METHOD_INVOCATION) {\n+            MethodInvocationNode methodInvocationNode = (MethodInvocationNode) node;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52abc210698334562fe89c1d6f1fba36b185935d"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODQ3OTkyOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTozMDowMlrOGkt39g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTozMDowMlrOGkt39g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE1MzUyNg==", "bodyText": "Should the remainder of this loop be equivalent to a recursive call to accumulate, just more efficient?\nIf so, could you add a comment to that effect?  (Or maybe even make it a recursive call to accumulate, which will be shorter and simpler code, though a bit less efficient.  If you do that, you can remove the while loop.)", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r441153526", "createdAt": "2020-06-16T21:30:02Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.Tree.Kind;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate}\n+ * method to add a string to the estimate at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    /** The type factory. */\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    /**\n+     * Build a new AccumulationTransfer for the given analysis.\n+     *\n+     * @param analysis the analysis\n+     */\n+    public AccumulationTransfer(CFAnalysis analysis) {\n+        super(analysis);\n+        typeFactory = (AccumulationAnnotatedTypeFactory) analysis.getTypeFactory();\n+    }\n+\n+    /**\n+     * Updates the estimate of how many things {@code node} has accumulated.\n+     *\n+     * <p>If the node is an invocation of a method that returns its receiver, then its receiver's\n+     * type will also be updated. In a chain of method calls, this process will continue backward as\n+     * long as each receiver is itself a receiver-returning method invocation.\n+     *\n+     * <p>For example, suppose {@code node} is the expression {@code a.b().c()}, the new value\n+     * (added by the accumulation analysis because of the {@code .c()} call) is \"foo\", and b and c\n+     * return their receiver. This method will directly update the estimate of {@code a.b().c()} to\n+     * include \"foo\". In addition, the estimates for the expressions {@code a.b()} and {@code a}\n+     * would have their estimates updated to include \"foo\", because c and b (respectively) return\n+     * their receivers. Note that due to what kind of values can be held in the store, this\n+     * information is lost outside the method chain. That is, the returns-receiver propagated\n+     * information is lost outside the expression in which the returns-receiver method invocations\n+     * are nested.\n+     *\n+     * <p>As a concrete example, consider the Called Methods accumulation checker: if {@code build}\n+     * requires a, b, and c to be called, then {@code foo.a().b().c().build();} will typecheck (they\n+     * are in one fluent method chain), but {@code foo.a().b().c(); foo.build();} will not -- the\n+     * store does not keep the information that a, b, and c have been called outside the chain.\n+     * {@code foo}'s type will be {@code CalledMethods(\"a\")}, because only {@code a()} was called\n+     * directly on {@code foo}. For such code to typecheck, the Called Methods accumulation checker\n+     * uses an additional rule: the return type of a receiver-returning method {@code rr()} is\n+     * {@code CalledMethods(\"rr\")}. This rule is implemented directly in the {@link\n+     * org.checkerframework.framework.type.treeannotator.TreeAnnotator} subclass defined in the\n+     * Called Methods type factory.\n+     *\n+     * @param node the node whose estimate should be expanded\n+     * @param result the transfer result containing the store to be modified\n+     * @param values the new accumulation values\n+     */\n+    public void accumulate(Node node, TransferResult<CFValue, CFStore> result, String... values) {\n+        Tree tree = node.getTree();\n+        if (tree == null) {\n+            return;\n+        }\n+        AnnotatedTypeMirror oldType = typeFactory.getAnnotatedType(tree);\n+        AnnotationMirror newAnno = getUnionAnno(oldType, Arrays.asList(values));\n+        insertIntoStores(result, node, newAnno);\n+\n+        if (tree.getKind() == Kind.METHOD_INVOCATION) {\n+            MethodInvocationNode methodInvocationNode = (MethodInvocationNode) node;\n+            while (methodInvocationNode != null) {\n+\n+                Node receiver = methodInvocationNode.getTarget().getReceiver();\n+\n+                if (receiver == null || !typeFactory.returnsThis((MethodInvocationTree) tree)) {\n+                    break;\n+                }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5e1c5f3b4c3712913efeb6c85647352a32d8c48"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODQ4ODE2OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTozMjo1N1rOGkt89w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTozMjo1N1rOGkt89w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE1NDgwNw==", "bodyText": "This use of newAnno looks wrong to me.  newAnno was computed earlier for a later method call, and if the recursion goes past a non-@This-returning call, then the value should be reset rather than carried across that call.  I added a failing test case, m8, that illustrates incorrect behavior.\nShould the recursion go through non-@This returning methods at all?\nIt is also a bit suspicious that no call of getUnionAnno occurs.  Could you write a comment saying why it is not needed, and it's OK to do complete replacement rather than GLB?", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r441154807", "createdAt": "2020-06-16T21:32:57Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.Tree.Kind;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate}\n+ * method to add a string to the estimate at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    /** The type factory. */\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    /**\n+     * Build a new AccumulationTransfer for the given analysis.\n+     *\n+     * @param analysis the analysis\n+     */\n+    public AccumulationTransfer(CFAnalysis analysis) {\n+        super(analysis);\n+        typeFactory = (AccumulationAnnotatedTypeFactory) analysis.getTypeFactory();\n+    }\n+\n+    /**\n+     * Updates the estimate of how many things {@code node} has accumulated.\n+     *\n+     * <p>If the node is an invocation of a method that returns its receiver, then its receiver's\n+     * type will also be updated. In a chain of method calls, this process will continue backward as\n+     * long as each receiver is itself a receiver-returning method invocation.\n+     *\n+     * <p>For example, suppose {@code node} is the expression {@code a.b().c()}, the new value\n+     * (added by the accumulation analysis because of the {@code .c()} call) is \"foo\", and b and c\n+     * return their receiver. This method will directly update the estimate of {@code a.b().c()} to\n+     * include \"foo\". In addition, the estimates for the expressions {@code a.b()} and {@code a}\n+     * would have their estimates updated to include \"foo\", because c and b (respectively) return\n+     * their receivers. Note that due to what kind of values can be held in the store, this\n+     * information is lost outside the method chain. That is, the returns-receiver propagated\n+     * information is lost outside the expression in which the returns-receiver method invocations\n+     * are nested.\n+     *\n+     * <p>As a concrete example, consider the Called Methods accumulation checker: if {@code build}\n+     * requires a, b, and c to be called, then {@code foo.a().b().c().build();} will typecheck (they\n+     * are in one fluent method chain), but {@code foo.a().b().c(); foo.build();} will not -- the\n+     * store does not keep the information that a, b, and c have been called outside the chain.\n+     * {@code foo}'s type will be {@code CalledMethods(\"a\")}, because only {@code a()} was called\n+     * directly on {@code foo}. For such code to typecheck, the Called Methods accumulation checker\n+     * uses an additional rule: the return type of a receiver-returning method {@code rr()} is\n+     * {@code CalledMethods(\"rr\")}. This rule is implemented directly in the {@link\n+     * org.checkerframework.framework.type.treeannotator.TreeAnnotator} subclass defined in the\n+     * Called Methods type factory.\n+     *\n+     * @param node the node whose estimate should be expanded\n+     * @param result the transfer result containing the store to be modified\n+     * @param values the new accumulation values\n+     */\n+    public void accumulate(Node node, TransferResult<CFValue, CFStore> result, String... values) {\n+        Tree tree = node.getTree();\n+        if (tree == null) {\n+            return;\n+        }\n+        AnnotatedTypeMirror oldType = typeFactory.getAnnotatedType(tree);\n+        AnnotationMirror newAnno = getUnionAnno(oldType, Arrays.asList(values));\n+        insertIntoStores(result, node, newAnno);\n+\n+        if (tree.getKind() == Kind.METHOD_INVOCATION) {\n+            MethodInvocationNode methodInvocationNode = (MethodInvocationNode) node;\n+            while (methodInvocationNode != null) {\n+\n+                Node receiver = methodInvocationNode.getTarget().getReceiver();\n+\n+                if (receiver == null || !typeFactory.returnsThis((MethodInvocationTree) tree)) {\n+                    break;\n+                }\n+\n+                // Note that this call doesn't do anything if receiver is a method call\n+                // that is not deterministic, though the code below can still continue to recurse.\n+                // (The code above tested that `tree` returns `this` but did not test `receiver`.)\n+                insertIntoStores(result, receiver, newAnno);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5e1c5f3b4c3712913efeb6c85647352a32d8c48"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODgzNjc0OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDoxMDozNVrOGkxREg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzo1MDowNlrOGlQnGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIwOTEwNg==", "bodyText": "Is this for loop guaranteed to execute exactly 0 or 1 times?  Should it assert that about the size of flowAnnos?  I think that each one must be either the accumulator or bottom; is that correct?  Is that worth verifying?", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r441209106", "createdAt": "2020-06-17T00:10:35Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,125 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.Tree.Kind;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate}\n+ * method to add a string to the estimate at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    /** The type factory. */\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    /**\n+     * Build a new AccumulationTransfer for the given analysis.\n+     *\n+     * @param analysis the analysis\n+     */\n+    public AccumulationTransfer(CFAnalysis analysis) {\n+        super(analysis);\n+        typeFactory = (AccumulationAnnotatedTypeFactory) analysis.getTypeFactory();\n+    }\n+\n+    /**\n+     * Updates the estimate of how many things {@code node} has accumulated.\n+     *\n+     * <p>If the node is an invocation of a method that returns its receiver, then its receiver's\n+     * type will also be updated. In a chain of method calls, this process will continue backward as\n+     * long as each receiver is itself a receiver-returning method invocation.\n+     *\n+     * <p>For example, suppose {@code node} is the expression {@code a.b().c()}, the new value\n+     * (added by the accumulation analysis because of the {@code .c()} call) is \"foo\", and b and c\n+     * return their receiver. This method will directly update the estimate of {@code a.b().c()} to\n+     * include \"foo\". In addition, the estimates for the expressions {@code a.b()} and {@code a}\n+     * would have their estimates updated to include \"foo\", because c and b (respectively) return\n+     * their receivers. Note that due to what kind of values can be held in the store, this\n+     * information is lost outside the method chain. That is, the returns-receiver propagated\n+     * information is lost outside the expression in which the returns-receiver method invocations\n+     * are nested.\n+     *\n+     * <p>As a concrete example, consider the Called Methods accumulation checker: if {@code build}\n+     * requires a, b, and c to be called, then {@code foo.a().b().c().build();} will typecheck (they\n+     * are in one fluent method chain), but {@code foo.a().b().c(); foo.build();} will not -- the\n+     * store does not keep the information that a, b, and c have been called outside the chain.\n+     * {@code foo}'s type will be {@code CalledMethods(\"a\")}, because only {@code a()} was called\n+     * directly on {@code foo}. For such code to typecheck, the Called Methods accumulation checker\n+     * uses an additional rule: the return type of a receiver-returning method {@code rr()} is\n+     * {@code CalledMethods(\"rr\")}. This rule is implemented directly in the {@link\n+     * org.checkerframework.framework.type.treeannotator.TreeAnnotator} subclass defined in the\n+     * Called Methods type factory.\n+     *\n+     * @param node the node whose estimate should be expanded\n+     * @param result the transfer result containing the store to be modified\n+     * @param values the new accumulation values\n+     */\n+    public void accumulate(Node node, TransferResult<CFValue, CFStore> result, String... values) {\n+        List<String> valuesAsList = Arrays.asList(values);\n+        // If dataflow has already recorded information about the target, fetch it and integrate\n+        // it into the list of values in the new annotation.\n+        CFValue flowValue = result.getResultValue();\n+        if (flowValue != null) {\n+            Set<AnnotationMirror> flowAnnos = flowValue.getAnnotations();\n+            for (AnnotationMirror anno : flowAnnos) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cac0323e0495a11957b6a7b441d8a9b37179f496"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyMjY0OQ==", "bodyText": "Is this for loop guaranteed to execute exactly 0 or 1 times\n\nYes. I added an assertion.\n\nI think that each one must be either the accumulator or bottom; is that correct?\n\nYes. My original version of this code included a test for it, but it was redundant with checking that the result of the call to getValueOfAnnotationWithStringArgument is non-null, so I removed it.", "url": "https://github.com/typetools/checker-framework/pull/3306#discussion_r441722649", "createdAt": "2020-06-17T17:50:06Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/accumulation/AccumulationTransfer.java", "diffHunk": "@@ -0,0 +1,125 @@\n+package org.checkerframework.common.accumulation;\n+\n+import com.sun.source.tree.MethodInvocationTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.Tree.Kind;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.AnnotationMirror;\n+import org.checkerframework.common.value.ValueCheckerUtils;\n+import org.checkerframework.dataflow.analysis.FlowExpressions;\n+import org.checkerframework.dataflow.analysis.FlowExpressions.Receiver;\n+import org.checkerframework.dataflow.analysis.TransferResult;\n+import org.checkerframework.dataflow.cfg.node.MethodInvocationNode;\n+import org.checkerframework.dataflow.cfg.node.Node;\n+import org.checkerframework.framework.flow.CFAnalysis;\n+import org.checkerframework.framework.flow.CFStore;\n+import org.checkerframework.framework.flow.CFTransfer;\n+import org.checkerframework.framework.flow.CFValue;\n+\n+/**\n+ * The default transfer function for an accumulation checker.\n+ *\n+ * <p>Subclasses should call the {@link #accumulate(Node, TransferResult, String...)} accumulate}\n+ * method to add a string to the estimate at a particular program point.\n+ */\n+public class AccumulationTransfer extends CFTransfer {\n+\n+    /** The type factory. */\n+    protected final AccumulationAnnotatedTypeFactory typeFactory;\n+\n+    /**\n+     * Build a new AccumulationTransfer for the given analysis.\n+     *\n+     * @param analysis the analysis\n+     */\n+    public AccumulationTransfer(CFAnalysis analysis) {\n+        super(analysis);\n+        typeFactory = (AccumulationAnnotatedTypeFactory) analysis.getTypeFactory();\n+    }\n+\n+    /**\n+     * Updates the estimate of how many things {@code node} has accumulated.\n+     *\n+     * <p>If the node is an invocation of a method that returns its receiver, then its receiver's\n+     * type will also be updated. In a chain of method calls, this process will continue backward as\n+     * long as each receiver is itself a receiver-returning method invocation.\n+     *\n+     * <p>For example, suppose {@code node} is the expression {@code a.b().c()}, the new value\n+     * (added by the accumulation analysis because of the {@code .c()} call) is \"foo\", and b and c\n+     * return their receiver. This method will directly update the estimate of {@code a.b().c()} to\n+     * include \"foo\". In addition, the estimates for the expressions {@code a.b()} and {@code a}\n+     * would have their estimates updated to include \"foo\", because c and b (respectively) return\n+     * their receivers. Note that due to what kind of values can be held in the store, this\n+     * information is lost outside the method chain. That is, the returns-receiver propagated\n+     * information is lost outside the expression in which the returns-receiver method invocations\n+     * are nested.\n+     *\n+     * <p>As a concrete example, consider the Called Methods accumulation checker: if {@code build}\n+     * requires a, b, and c to be called, then {@code foo.a().b().c().build();} will typecheck (they\n+     * are in one fluent method chain), but {@code foo.a().b().c(); foo.build();} will not -- the\n+     * store does not keep the information that a, b, and c have been called outside the chain.\n+     * {@code foo}'s type will be {@code CalledMethods(\"a\")}, because only {@code a()} was called\n+     * directly on {@code foo}. For such code to typecheck, the Called Methods accumulation checker\n+     * uses an additional rule: the return type of a receiver-returning method {@code rr()} is\n+     * {@code CalledMethods(\"rr\")}. This rule is implemented directly in the {@link\n+     * org.checkerframework.framework.type.treeannotator.TreeAnnotator} subclass defined in the\n+     * Called Methods type factory.\n+     *\n+     * @param node the node whose estimate should be expanded\n+     * @param result the transfer result containing the store to be modified\n+     * @param values the new accumulation values\n+     */\n+    public void accumulate(Node node, TransferResult<CFValue, CFStore> result, String... values) {\n+        List<String> valuesAsList = Arrays.asList(values);\n+        // If dataflow has already recorded information about the target, fetch it and integrate\n+        // it into the list of values in the new annotation.\n+        CFValue flowValue = result.getResultValue();\n+        if (flowValue != null) {\n+            Set<AnnotationMirror> flowAnnos = flowValue.getAnnotations();\n+            for (AnnotationMirror anno : flowAnnos) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIwOTEwNg=="}, "originalCommit": {"oid": "cac0323e0495a11957b6a7b441d8a9b37179f496"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1819, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}