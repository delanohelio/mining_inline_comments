{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4NzA5OTQy", "number": 3887, "title": "Initialized Fields Checker", "bodyText": "", "createdAt": "2020-11-10T19:19:01Z", "url": "https://github.com/typetools/checker-framework/pull/3887", "merged": true, "mergeCommit": {"oid": "bfc4d2c4d476177822b9a815b18cf3e30685cfe9"}, "closed": true, "closedAt": "2020-11-13T21:09:46Z", "author": {"login": "mernst"}, "timelineItems": {"totalCount": 165, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABda7kImAH2gAyNTE4NzA5OTQyOmRjN2Q1MzVkMGQyZmE0ZmY1NjJlN2E0ZTYxMWY2ODBiM2I4NGI5N2E=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdcMc1MAH2gAyNTE4NzA5OTQyOmY5YmEwOTljN2Q0NDFhMGY3NjQ5ZTY3ZGMzN2I4MWMxNTVjMzM4MzQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "dc7d535d0d2fa4ff562e7a4e611f680b3b84b97a", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/dc7d535d0d2fa4ff562e7a4e611f680b3b84b97a", "committedDate": "2020-11-09T21:23:08Z", "message": "Fix arguments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6d5133dc285f4a95b0d38629068cca4c218b331", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/f6d5133dc285f4a95b0d38629068cca4c218b331", "committedDate": "2020-11-09T21:23:27Z", "message": "Merge ../checker-framework-fork-mernst-branch-getDefaultValueAnnotatedType into initializedfields-precursors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01fd06b94836f29d85e37bf551c6435a19192e42", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/01fd06b94836f29d85e37bf551c6435a19192e42", "committedDate": "2020-11-09T21:24:14Z", "message": "Define method TreeUtils.createLiteral"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a58664f72269482e55b2092d3c7e8f97283ddd08", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/a58664f72269482e55b2092d3c7e8f97283ddd08", "committedDate": "2020-11-09T21:24:43Z", "message": "Fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57a41d18c1470b93bc7dd49d80125a88d3d0495a", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/57a41d18c1470b93bc7dd49d80125a88d3d0495a", "committedDate": "2020-11-09T21:25:09Z", "message": "Merge ../checker-framework-fork-mernst-branch-getDefaultValueAnnotatedType into initializedfields-precursors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24279ae2a5c3a805c23ade9b3e6e0b0dce06e565", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/24279ae2a5c3a805c23ade9b3e6e0b0dce06e565", "committedDate": "2020-11-09T21:25:53Z", "message": "Merge ../checker-framework-fork-mernst-branch-initializedfields-precursors into initializedfields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6b23455418315d452f833cc640ed36a070001bf", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/b6b23455418315d452f833cc640ed36a070001bf", "committedDate": "2020-11-09T21:31:02Z", "message": "Define method TreeUtils.createLiteral"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f76dedf8c535b848277e316dacba3065e8c08ec7", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/f76dedf8c535b848277e316dacba3065e8c08ec7", "committedDate": "2020-11-09T21:31:41Z", "message": "Merge ../checker-framework-fork-mernst-branch-getDefaultValueAnnotatedType into initializedfields-precursors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8623072c325c4cbe24b9f40f3121117b583e7e85", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/8623072c325c4cbe24b9f40f3121117b583e7e85", "committedDate": "2020-11-09T21:32:25Z", "message": "Define method TreeUtils.createLiteral"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5368d5f1634744daa05aa5f0566a0f3d3b620e7", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/f5368d5f1634744daa05aa5f0566a0f3d3b620e7", "committedDate": "2020-11-09T21:33:37Z", "message": "Merge ../checker-framework-fork-mernst-branch-getDefaultValueAnnotatedType into initializedfields-precursors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9f3c8a2745d2560c1d7c4aa7ab927fac8d50454", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/e9f3c8a2745d2560c1d7c4aa7ab927fac8d50454", "committedDate": "2020-11-09T21:34:26Z", "message": "Merge ../checker-framework-fork-mernst-branch-initializedfields-precursors into initializedfields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "672523fce73cf58ebda212cdd28b5254536ff721", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/672523fce73cf58ebda212cdd28b5254536ff721", "committedDate": "2020-11-09T22:43:17Z", "message": "Define method TreeUtils.createLiteral"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d95c12333f5a0ff3b0e64b0c1e26b5a11439d2cd", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/d95c12333f5a0ff3b0e64b0c1e26b5a11439d2cd", "committedDate": "2020-11-09T22:45:24Z", "message": "Merge ../checker-framework-fork-mernst-branch-getDefaultValueAnnotatedType into initializedfields-precursors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6809bffb9a1a35b0b3817d7214beb96f11532bd6", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/6809bffb9a1a35b0b3817d7214beb96f11532bd6", "committedDate": "2020-11-09T22:46:25Z", "message": "Merge ../checker-framework-fork-mernst-branch-initializedfields-precursors into initializedfields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "130e789c3a1cfc28b44ae431a8aed4445f4748be", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/130e789c3a1cfc28b44ae431a8aed4445f4748be", "committedDate": "2020-11-09T22:49:49Z", "message": "Merge ../checker-framework-branch-master into getDefaultValueAnnotatedType"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7102ffe700075909e9700d9e074d12494d2c585", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/c7102ffe700075909e9700d9e074d12494d2c585", "committedDate": "2020-11-09T22:52:02Z", "message": "Revert expected warnings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6bcca8cbc67a865485a9bbe07acec1ec58511a46", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/6bcca8cbc67a865485a9bbe07acec1ec58511a46", "committedDate": "2020-11-09T22:52:12Z", "message": "Add TODO"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85699c329800511ad67b0ff486f44f69fb857c4e", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/85699c329800511ad67b0ff486f44f69fb857c4e", "committedDate": "2020-11-09T22:52:49Z", "message": "Merge ../checker-framework-fork-mernst-branch-getDefaultValueAnnotatedType into initializedfields-precursors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f52e2cdafce0d9b00bf6090243057fd96deacac", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/2f52e2cdafce0d9b00bf6090243057fd96deacac", "committedDate": "2020-11-09T22:53:27Z", "message": "Merge ../checker-framework-fork-mernst-branch-initializedfields-precursors into initializedfields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e30d56081d823842f09c698f20551f77f68d85da", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/e30d56081d823842f09c698f20551f77f68d85da", "committedDate": "2020-11-09T23:43:36Z", "message": "Fix typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32174b41c6ddd7e97e9def9e6582f936a5563a4c", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/32174b41c6ddd7e97e9def9e6582f936a5563a4c", "committedDate": "2020-11-09T23:47:40Z", "message": "Move method, also fix a dumb bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db99481b9b0cf233d3a10c22d906a938295834e0", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/db99481b9b0cf233d3a10c22d906a938295834e0", "committedDate": "2020-11-09T23:52:13Z", "message": "Merge ../checker-framework-fork-mernst-branch-getDefaultValueAnnotatedType into initializedfields-precursors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1d3c00585408bd4f0a91da000b085e0aeb40745", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/c1d3c00585408bd4f0a91da000b085e0aeb40745", "committedDate": "2020-11-09T23:52:54Z", "message": "Merge ../checker-framework-fork-mernst-branch-initializedfields-precursors into initializedfields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02f1d304c4b5f1577e0d218e1f46f90164921666", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/02f1d304c4b5f1577e0d218e1f46f90164921666", "committedDate": "2020-11-09T23:54:26Z", "message": "Add import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0dd381abac8f039982e2d3bf813ebb915f7daa61", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/0dd381abac8f039982e2d3bf813ebb915f7daa61", "committedDate": "2020-11-10T03:55:11Z", "message": "Merge ../checker-framework-branch-master into initializedfields-precursors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b30ec38cbcb50a3c662939a2ed0a8192116eaf32", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/b30ec38cbcb50a3c662939a2ed0a8192116eaf32", "committedDate": "2020-11-10T03:55:51Z", "message": "Merge ../checker-framework-fork-mernst-branch-initializedfields-precursors into initializedfields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d3240fce96feeabbfce0cbaec8a0b2a673a6612", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/0d3240fce96feeabbfce0cbaec8a0b2a673a6612", "committedDate": "2020-11-10T15:56:46Z", "message": "Fix Javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc9c874bd69b08333832963670f02b0d0bd828e8", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/fc9c874bd69b08333832963670f02b0d0bd828e8", "committedDate": "2020-11-10T16:24:13Z", "message": "Fix cut-and-paste error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "186ca4d16c609c87e235b25eb694dc6ad2052510", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/186ca4d16c609c87e235b25eb694dc6ad2052510", "committedDate": "2020-11-10T16:58:26Z", "message": "Merge ../checker-framework-branch-master into initializedfields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83c80b21dbf14bfb04e4a8d4b49d0905644b520a", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/83c80b21dbf14bfb04e4a8d4b49d0905644b520a", "committedDate": "2020-11-10T17:09:14Z", "message": "Fix initialization warnings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b663a8eca9636858ff84f71cf9e11d439352552", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/8b663a8eca9636858ff84f71cf9e11d439352552", "committedDate": "2020-11-10T17:21:18Z", "message": "Undo an unrelated change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd4d85f604d0241e83bffff82749196eeec2ad62", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/dd4d85f604d0241e83bffff82749196eeec2ad62", "committedDate": "2020-11-10T17:30:56Z", "message": "Always compute types for literal trees"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5128d6cda516bc13a044fc2e77563f97c581fc1f", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/5128d6cda516bc13a044fc2e77563f97c581fc1f", "committedDate": "2020-11-10T17:44:02Z", "message": "Clarify relationship to Initialization Checker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d198b81e779efa250a5e2b44b4f96e1aa439f8a", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/3d198b81e779efa250a5e2b44b4f96e1aa439f8a", "committedDate": "2020-11-10T17:44:21Z", "message": "English fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de813bbd178e32d632c39a2da8f533d38ab1cb4c", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/de813bbd178e32d632c39a2da8f533d38ab1cb4c", "committedDate": "2020-11-10T17:57:10Z", "message": "Eliminate -AcheckInitializedFields command-line argument"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfdb3bd4e33ac5bc3ec833270e81b535ce5502e6", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/bfdb3bd4e33ac5bc3ec833270e81b535ce5502e6", "committedDate": "2020-11-10T18:01:49Z", "message": "Signature annotations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e0f09ac0f0a04ffe64f520b14964f108352f3d9", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/1e0f09ac0f0a04ffe64f520b14964f108352f3d9", "committedDate": "2020-11-10T18:41:48Z", "message": "Fix signature annotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05723527ce5a21323dec5453dbb91f78508df6ed", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/05723527ce5a21323dec5453dbb91f78508df6ed", "committedDate": "2020-11-10T18:45:43Z", "message": "Explain unsoundness"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe3a5d3271a354cb2448b54737f48b8eeef2bb75", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/fe3a5d3271a354cb2448b54737f48b8eeef2bb75", "committedDate": "2020-11-10T19:24:16Z", "message": "Typo fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NTUxMzUz", "url": "https://github.com/typetools/checker-framework/pull/3887#pullrequestreview-527551353", "createdAt": "2020-11-10T19:46:29Z", "commit": {"oid": "fe3a5d3271a354cb2448b54737f48b8eeef2bb75"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxOTo0NjoyOVrOHws_gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDowMjo1N1rOHwtkLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgzMDg0OQ==", "bodyText": "Why was this change necessary? It seems unrelated to the other work in this PR.", "url": "https://github.com/typetools/checker-framework/pull/3887#discussion_r520830849", "createdAt": "2020-11-10T19:46:29Z", "author": {"login": "kelloggm"}, "path": "checker/src/main/java/org/checkerframework/checker/index/lowerbound/LowerBoundAnnotatedTypeFactory.java", "diffHunk": "@@ -175,7 +176,9 @@ public void addComputedTypeAnnotations(Tree tree, AnnotatedTypeMirror type, bool\n         // If dataflow shouldn't be used to compute this type, then do not use the result from\n         // the Value Checker, because dataflow is used to compute that type.  (Without this,\n         // \"int i = 1; --i;\" fails.)\n-        if (iUseFlow && tree != null && TreeUtils.isExpressionTree(tree)) {\n+        if (tree != null\n+                && TreeUtils.isExpressionTree(tree)\n+                && (iUseFlow || tree instanceof LiteralTree)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe3a5d3271a354cb2448b54737f48b8eeef2bb75"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgzMTY5Nw==", "bodyText": "This isn't quite true - every type system that has an annotation that is inconsistent with null, 0, or false is unsound. Those that do not (such as e.g. the Tainting Checker) aren't unsound.", "url": "https://github.com/typetools/checker-framework/pull/3887#discussion_r520831697", "createdAt": "2020-11-10T19:47:58Z", "author": {"login": "kelloggm"}, "path": "docs/manual/initialized-fields-checker.tex", "diffHunk": "@@ -0,0 +1,172 @@\n+\\htmlhr\n+\\chapterAndLabel{Initialized Fields Checker}{initialized-fields-checker}\n+\n+The Initialized Fields Checker warns if a constructor does not initialize a\n+field.\n+If you run it together with other checkers (by supplying multiple checkers\n+to the \\<-processor> command-line option), then it issues warnings only if\n+the default value assigned by Java (0, true, or null) is not consistent\n+with the field's annotation, for the other checkers.\n+% It's actually the checkers and their subcheckers if any.  Saying that\n+% would be confusing to most users, who don't know what a \"subchecker\" is.\n+% The term \"subchecker\" appears only in the \"creating a checker\" section of\n+% the manual.\n+\n+An example invocation is\n+\n+\\begin{Verbatim}\n+javac -processor ValueChecker,InitializedFieldsChecker MyFile.java\n+\\end{Verbatim}\n+\n+\n+\\sectionAndLabel{Motivation:  uninitialized fields}{initialized-fields-motivation}\n+\n+Without the Initialized Fields Checker, every type system (except the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe3a5d3271a354cb2448b54737f48b8eeef2bb75"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgzMTkwOQ==", "bodyText": "It might be okay to leave this as-is, though, because bringing up that detail might make this too wordy.", "url": "https://github.com/typetools/checker-framework/pull/3887#discussion_r520831909", "createdAt": "2020-11-10T19:48:19Z", "author": {"login": "kelloggm"}, "path": "docs/manual/initialized-fields-checker.tex", "diffHunk": "@@ -0,0 +1,172 @@\n+\\htmlhr\n+\\chapterAndLabel{Initialized Fields Checker}{initialized-fields-checker}\n+\n+The Initialized Fields Checker warns if a constructor does not initialize a\n+field.\n+If you run it together with other checkers (by supplying multiple checkers\n+to the \\<-processor> command-line option), then it issues warnings only if\n+the default value assigned by Java (0, true, or null) is not consistent\n+with the field's annotation, for the other checkers.\n+% It's actually the checkers and their subcheckers if any.  Saying that\n+% would be confusing to most users, who don't know what a \"subchecker\" is.\n+% The term \"subchecker\" appears only in the \"creating a checker\" section of\n+% the manual.\n+\n+An example invocation is\n+\n+\\begin{Verbatim}\n+javac -processor ValueChecker,InitializedFieldsChecker MyFile.java\n+\\end{Verbatim}\n+\n+\n+\\sectionAndLabel{Motivation:  uninitialized fields}{initialized-fields-motivation}\n+\n+Without the Initialized Fields Checker, every type system (except the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgzMTY5Nw=="}, "originalCommit": {"oid": "fe3a5d3271a354cb2448b54737f48b8eeef2bb75"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgzNTAxOA==", "bodyText": "I think you can replace this with executableElement.getKind() == ElementKind.CONSTRUCTOR to avoid the string comparison", "url": "https://github.com/typetools/checker-framework/pull/3887#discussion_r520835018", "createdAt": "2020-11-10T19:53:37Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/initializedfields/InitializedFieldsAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,240 @@\n+package org.checkerframework.common.initializedfields;\n+\n+import com.sun.source.tree.VariableTree;\n+import com.sun.tools.javac.processing.JavacProcessingEnvironment;\n+import com.sun.tools.javac.util.Context;\n+import com.sun.tools.javac.util.Options;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.Element;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.element.VariableElement;\n+import org.checkerframework.checker.signature.qual.BinaryName;\n+import org.checkerframework.common.accumulation.AccumulationAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.basetype.BaseTypeVisitor;\n+import org.checkerframework.common.initializedfields.qual.EnsuresInitializedFields;\n+import org.checkerframework.common.initializedfields.qual.InitializedFields;\n+import org.checkerframework.common.initializedfields.qual.InitializedFieldsBottom;\n+import org.checkerframework.common.initializedfields.qual.InitializedFieldsPredicate;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.GenericAnnotatedTypeFactory;\n+import org.checkerframework.framework.util.Contract;\n+import org.checkerframework.framework.util.ContractsUtils;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.ElementUtils;\n+import org.checkerframework.javacutil.UserError;\n+\n+/** The annotated type factory for the Initialized Fields Checker. */\n+public class InitializedFieldsAnnotatedTypeFactory extends AccumulationAnnotatedTypeFactory {\n+\n+    /**\n+     * The type factories that determine whether the default value is consistent with the annotated\n+     * type. If empty, warn about all uninitialized fields.\n+     */\n+    List<GenericAnnotatedTypeFactory<?, ?, ?, ?>> defaultValueAtypeFactories;\n+\n+    /**\n+     * Creates a new InitializedFieldsAnnotatedTypeFactory.\n+     *\n+     * @param checker the checker\n+     */\n+    public InitializedFieldsAnnotatedTypeFactory(BaseTypeChecker checker) {\n+        super(\n+                checker,\n+                InitializedFields.class,\n+                InitializedFieldsBottom.class,\n+                InitializedFieldsPredicate.class);\n+\n+        Context context = ((JavacProcessingEnvironment) processingEnv).getContext();\n+        String checkerNames = Options.instance(context).get(\"-processor\");\n+        defaultValueAtypeFactories = new ArrayList<>();\n+        for (String checkerName : checkerNames.split(\",\")) {\n+            if (checkerName.equals(InitializedFieldsChecker.class.getCanonicalName())) {\n+                continue;\n+            }\n+            @SuppressWarnings(\"signature:argument.type.incompatible\") // -processor is a binary name\n+            GenericAnnotatedTypeFactory<?, ?, ?, ?> atf = getTypeFactory(checkerName);\n+            if (atf == null) {\n+                throw new UserError(\n+                        \"Cannot find %s; check the classpath or processorpath\", checkerName);\n+            }\n+            defaultValueAtypeFactories.add(atf);\n+        }\n+\n+        this.postInit();\n+    }\n+\n+    /**\n+     * Returns the type factory for the given checker.\n+     *\n+     * @param checkerName the fully-qualified class name of a checker\n+     * @return the type factory for the given checker\n+     */\n+    GenericAnnotatedTypeFactory<?, ?, ?, ?> getTypeFactory(@BinaryName String checkerName) {\n+        try {\n+            Class<?> checkerClass = Class.forName(checkerName);\n+            @SuppressWarnings(\"unchecked\")\n+            BaseTypeChecker c =\n+                    ((Class<? extends BaseTypeChecker>) checkerClass)\n+                            .getDeclaredConstructor()\n+                            .newInstance();\n+            c.init(processingEnv);\n+            c.initChecker();\n+            BaseTypeVisitor<?> v = c.createSourceVisitorPublic();\n+            GenericAnnotatedTypeFactory<?, ?, ?, ?> atf = v.createTypeFactoryPublic();\n+            return atf;\n+        } catch (ClassNotFoundException\n+                | InstantiationException\n+                | InvocationTargetException\n+                | IllegalAccessException\n+                | NoSuchMethodException e) {\n+            throw new UserError(\"Problem instantiating \" + checkerName, e);\n+        }\n+    }\n+\n+    @Override\n+    public InitializedFieldsContractsUtils getContractsUtils() {\n+        return new InitializedFieldsContractsUtils(this);\n+    }\n+\n+    /**\n+     * A subclass of ContractsUtils that adds a postcondition contract to each constructor,\n+     * requiring that it initializes all fields.\n+     */\n+    private class InitializedFieldsContractsUtils extends ContractsUtils {\n+        /**\n+         * Creates an InitializedFieldsContractsUtils for the given factory.\n+         *\n+         * @param factory the type factory associated with the newly-created ContractsUtils\n+         */\n+        public InitializedFieldsContractsUtils(GenericAnnotatedTypeFactory<?, ?, ?, ?> factory) {\n+            super(factory);\n+        }\n+\n+        @Override\n+        public Set<Contract.Postcondition> getPostconditions(ExecutableElement executableElement) {\n+            Set<Contract.Postcondition> result = super.getPostconditions(executableElement);\n+\n+            // Only process methods defined in source code being type-checked.\n+            if (declarationFromElement(executableElement) != null) {\n+\n+                if (executableElement.getSimpleName().contentEquals(\"<init>\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe3a5d3271a354cb2448b54737f48b8eeef2bb75"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgzNjE3Nw==", "bodyText": "The default value for booleans in Java is false, not true. This should probably also mention 0.0, which is the default for floating point types.\nI think the code gets this right, but this documentation is wrong.", "url": "https://github.com/typetools/checker-framework/pull/3887#discussion_r520836177", "createdAt": "2020-11-10T19:55:49Z", "author": {"login": "kelloggm"}, "path": "docs/manual/initialized-fields-checker.tex", "diffHunk": "@@ -0,0 +1,172 @@\n+\\htmlhr\n+\\chapterAndLabel{Initialized Fields Checker}{initialized-fields-checker}\n+\n+The Initialized Fields Checker warns if a constructor does not initialize a\n+field.\n+If you run it together with other checkers (by supplying multiple checkers\n+to the \\<-processor> command-line option), then it issues warnings only if\n+the default value assigned by Java (0, true, or null) is not consistent", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe3a5d3271a354cb2448b54737f48b8eeef2bb75"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgzNzM2Ng==", "bodyText": "The default value for booleans is false, not true", "url": "https://github.com/typetools/checker-framework/pull/3887#discussion_r520837366", "createdAt": "2020-11-10T19:57:51Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/initializedfields/InitializedFieldsAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,240 @@\n+package org.checkerframework.common.initializedfields;\n+\n+import com.sun.source.tree.VariableTree;\n+import com.sun.tools.javac.processing.JavacProcessingEnvironment;\n+import com.sun.tools.javac.util.Context;\n+import com.sun.tools.javac.util.Options;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.Element;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.element.VariableElement;\n+import org.checkerframework.checker.signature.qual.BinaryName;\n+import org.checkerframework.common.accumulation.AccumulationAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.basetype.BaseTypeVisitor;\n+import org.checkerframework.common.initializedfields.qual.EnsuresInitializedFields;\n+import org.checkerframework.common.initializedfields.qual.InitializedFields;\n+import org.checkerframework.common.initializedfields.qual.InitializedFieldsBottom;\n+import org.checkerframework.common.initializedfields.qual.InitializedFieldsPredicate;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.GenericAnnotatedTypeFactory;\n+import org.checkerframework.framework.util.Contract;\n+import org.checkerframework.framework.util.ContractsUtils;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.ElementUtils;\n+import org.checkerframework.javacutil.UserError;\n+\n+/** The annotated type factory for the Initialized Fields Checker. */\n+public class InitializedFieldsAnnotatedTypeFactory extends AccumulationAnnotatedTypeFactory {\n+\n+    /**\n+     * The type factories that determine whether the default value is consistent with the annotated\n+     * type. If empty, warn about all uninitialized fields.\n+     */\n+    List<GenericAnnotatedTypeFactory<?, ?, ?, ?>> defaultValueAtypeFactories;\n+\n+    /**\n+     * Creates a new InitializedFieldsAnnotatedTypeFactory.\n+     *\n+     * @param checker the checker\n+     */\n+    public InitializedFieldsAnnotatedTypeFactory(BaseTypeChecker checker) {\n+        super(\n+                checker,\n+                InitializedFields.class,\n+                InitializedFieldsBottom.class,\n+                InitializedFieldsPredicate.class);\n+\n+        Context context = ((JavacProcessingEnvironment) processingEnv).getContext();\n+        String checkerNames = Options.instance(context).get(\"-processor\");\n+        defaultValueAtypeFactories = new ArrayList<>();\n+        for (String checkerName : checkerNames.split(\",\")) {\n+            if (checkerName.equals(InitializedFieldsChecker.class.getCanonicalName())) {\n+                continue;\n+            }\n+            @SuppressWarnings(\"signature:argument.type.incompatible\") // -processor is a binary name\n+            GenericAnnotatedTypeFactory<?, ?, ?, ?> atf = getTypeFactory(checkerName);\n+            if (atf == null) {\n+                throw new UserError(\n+                        \"Cannot find %s; check the classpath or processorpath\", checkerName);\n+            }\n+            defaultValueAtypeFactories.add(atf);\n+        }\n+\n+        this.postInit();\n+    }\n+\n+    /**\n+     * Returns the type factory for the given checker.\n+     *\n+     * @param checkerName the fully-qualified class name of a checker\n+     * @return the type factory for the given checker\n+     */\n+    GenericAnnotatedTypeFactory<?, ?, ?, ?> getTypeFactory(@BinaryName String checkerName) {\n+        try {\n+            Class<?> checkerClass = Class.forName(checkerName);\n+            @SuppressWarnings(\"unchecked\")\n+            BaseTypeChecker c =\n+                    ((Class<? extends BaseTypeChecker>) checkerClass)\n+                            .getDeclaredConstructor()\n+                            .newInstance();\n+            c.init(processingEnv);\n+            c.initChecker();\n+            BaseTypeVisitor<?> v = c.createSourceVisitorPublic();\n+            GenericAnnotatedTypeFactory<?, ?, ?, ?> atf = v.createTypeFactoryPublic();\n+            return atf;\n+        } catch (ClassNotFoundException\n+                | InstantiationException\n+                | InvocationTargetException\n+                | IllegalAccessException\n+                | NoSuchMethodException e) {\n+            throw new UserError(\"Problem instantiating \" + checkerName, e);\n+        }\n+    }\n+\n+    @Override\n+    public InitializedFieldsContractsUtils getContractsUtils() {\n+        return new InitializedFieldsContractsUtils(this);\n+    }\n+\n+    /**\n+     * A subclass of ContractsUtils that adds a postcondition contract to each constructor,\n+     * requiring that it initializes all fields.\n+     */\n+    private class InitializedFieldsContractsUtils extends ContractsUtils {\n+        /**\n+         * Creates an InitializedFieldsContractsUtils for the given factory.\n+         *\n+         * @param factory the type factory associated with the newly-created ContractsUtils\n+         */\n+        public InitializedFieldsContractsUtils(GenericAnnotatedTypeFactory<?, ?, ?, ?> factory) {\n+            super(factory);\n+        }\n+\n+        @Override\n+        public Set<Contract.Postcondition> getPostconditions(ExecutableElement executableElement) {\n+            Set<Contract.Postcondition> result = super.getPostconditions(executableElement);\n+\n+            // Only process methods defined in source code being type-checked.\n+            if (declarationFromElement(executableElement) != null) {\n+\n+                if (executableElement.getSimpleName().contentEquals(\"<init>\")) {\n+                    // It's a constructor\n+\n+                    String[] fieldsToInitialize =\n+                            fieldsToInitialize(\n+                                    (TypeElement) executableElement.getEnclosingElement());\n+                    if (fieldsToInitialize.length != 0) {\n+\n+                        AnnotationMirror initializedFieldsAnno;\n+                        {\n+                            AnnotationBuilder builder =\n+                                    new AnnotationBuilder(\n+                                            processingEnv,\n+                                            InitializedFields.class.getCanonicalName());\n+                            builder.setValue(\"value\", fieldsToInitialize);\n+                            initializedFieldsAnno = builder.build();\n+                        }\n+                        AnnotationMirror ensuresAnno;\n+                        {\n+                            AnnotationBuilder builder =\n+                                    new AnnotationBuilder(\n+                                            processingEnv,\n+                                            EnsuresInitializedFields.class.getCanonicalName());\n+                            builder.setValue(\"value\", new String[] {\"this\"});\n+                            builder.setValue(\"fields\", fieldsToInitialize);\n+                            ensuresAnno = builder.build();\n+                        }\n+                        Contract.Postcondition ensuresContract =\n+                                new Contract.Postcondition(\n+                                        \"this\", initializedFieldsAnno, ensuresAnno);\n+\n+                        result.add(ensuresContract);\n+                    }\n+                }\n+            }\n+\n+            return result;\n+        }\n+    }\n+\n+    /**\n+     * Returns the fields that the constructor must initialize. These are the fields F declared in\n+     * this class that satisfy all of the following conditions:\n+     *\n+     * <ul>\n+     *   <li>F is a non-final field (if final, Java will issue a warning, so we don't need to).\n+     *   <li>F's declaration has no initializer.\n+     *   <li>No initialization block or static initialization block sets the field. (This seems to\n+     *       be handled automagically. There is no code for it in this method, but the tests pass.)\n+     *   <li>F's annotated type is not consistent with the default value (0, 0.0, false, or null)\n+     * </ul>\n+     *\n+     * @param type the type whose fields to list\n+     * @return the fields whose type is not consistent with the default value, so the constructor\n+     *     must initialize them\n+     */\n+    // It is a bit wasteful that this is recomputed for each constructor.\n+    private String[] fieldsToInitialize(TypeElement type) {\n+        List<String> result = new ArrayList<String>();\n+\n+        for (Element member : type.getEnclosedElements()) {\n+\n+            if (member.getKind() != ElementKind.FIELD) {\n+                continue;\n+            }\n+\n+            VariableElement field = (VariableElement) member;\n+            if (ElementUtils.isFinal(field)) {\n+                continue;\n+            }\n+\n+            VariableTree fieldTree = (VariableTree) declarationFromElement(field);\n+            if (fieldTree.getInitializer() != null) {\n+                continue;\n+            }\n+\n+            if (!defaultValueIsOK(field)) {\n+                result.add(field.getSimpleName().toString());\n+            }\n+        }\n+\n+        return result.toArray(new String[result.size()]);\n+    }\n+\n+    /**\n+     * Returns true if the default field value (0, true, or null) is consistent with the field's", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe3a5d3271a354cb2448b54737f48b8eeef2bb75"}, "originalPosition": 212}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgzNzg0NA==", "bodyText": "Why can't you add this default? It would just be adding default {\"this} to the end of this line, right?", "url": "https://github.com/typetools/checker-framework/pull/3887#discussion_r520837844", "createdAt": "2020-11-10T19:58:47Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/initializedfields/qual/EnsuresInitializedFields.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package org.checkerframework.common.initializedfields.qual;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import org.checkerframework.framework.qual.PostconditionAnnotation;\n+import org.checkerframework.framework.qual.QualifierArgument;\n+\n+/**\n+ * A method postcondition annotation indicates which fields the method definitely initializes.\n+ *\n+ * @checker_framework.manual #initialized-fields-checker Initialized Fields Checker\n+ */\n+@PostconditionAnnotation(qualifier = InitializedFields.class)\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target({ElementType.METHOD})\n+public @interface EnsuresInitializedFields {\n+    /**\n+     * The object(s) whose fields this method initializes.\n+     *\n+     * @return object(s) whose fields are initialized\n+     */\n+    public String[] value(); // TODO: default \"this\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe3a5d3271a354cb2448b54737f48b8eeef2bb75"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgzODk3MA==", "bodyText": "Why do you need InitializedFieldsPredicate? I can't think of a situation where it would be useful.", "url": "https://github.com/typetools/checker-framework/pull/3887#discussion_r520838970", "createdAt": "2020-11-10T20:00:40Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/initializedfields/qual/InitializedFieldsPredicate.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package org.checkerframework.common.initializedfields.qual;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import org.checkerframework.framework.qual.SubtypeOf;\n+\n+/**\n+ * A predicate annotation for the Initialized Fields type system.\n+ *\n+ * @checker_framework.manual #initialized-fields-checker Initialized Fields Checker\n+ */\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target({ElementType.TYPE_USE, ElementType.TYPE_PARAMETER})\n+@SubtypeOf({InitializedFields.class})\n+public @interface InitializedFieldsPredicate {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe3a5d3271a354cb2448b54737f48b8eeef2bb75"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgzOTI3Mg==", "bodyText": "(There is a constructor in AccumulationAnnotatedTypeFactory that doesn't require a predicate annotation.)", "url": "https://github.com/typetools/checker-framework/pull/3887#discussion_r520839272", "createdAt": "2020-11-10T20:01:09Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/initializedfields/qual/InitializedFieldsPredicate.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package org.checkerframework.common.initializedfields.qual;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import org.checkerframework.framework.qual.SubtypeOf;\n+\n+/**\n+ * A predicate annotation for the Initialized Fields type system.\n+ *\n+ * @checker_framework.manual #initialized-fields-checker Initialized Fields Checker\n+ */\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target({ElementType.TYPE_USE, ElementType.TYPE_PARAMETER})\n+@SubtypeOf({InitializedFields.class})\n+public @interface InitializedFieldsPredicate {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgzODk3MA=="}, "originalCommit": {"oid": "fe3a5d3271a354cb2448b54737f48b8eeef2bb75"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgzOTUxMA==", "bodyText": "Extraneous whitespace changes?", "url": "https://github.com/typetools/checker-framework/pull/3887#discussion_r520839510", "createdAt": "2020-11-10T20:01:36Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/framework/qual/PostconditionAnnotation.java", "diffHunk": "@@ -33,10 +33,10 @@\n  * <pre><code>\n  * {@literal @}PostconditionAnnotation(qualifier = MinLen.class)\n  * {@literal @}Target({ElementType.METHOD, ElementType.CONSTRUCTOR})\n- * public {@literal @}interface EnsuresMinLen {\n- *   String[] value();\n- *   {@literal @}QualifierArgument(\"value\")\n- *   int targetValue() default 0;\n+ *  public {@literal @}interface EnsuresMinLen {\n+ *    String[] value();\n+ *    {@literal @}QualifierArgument(\"value\")\n+ *    int targetValue() default 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe3a5d3271a354cb2448b54737f48b8eeef2bb75"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg0MDIzNw==", "bodyText": "Does this new constructor remove the need for the suppress warnings above?", "url": "https://github.com/typetools/checker-framework/pull/3887#discussion_r520840237", "createdAt": "2020-11-10T20:02:57Z", "author": {"login": "kelloggm"}, "path": "framework/tests/all-systems/GenericExtendsTypeVars.java", "diffHunk": "@@ -20,11 +20,20 @@ void context() {\n class Test<KK extends FF, FF extends MMyMap<KK, KK>> {\n     KK kk;\n     FF ff;\n+\n+    Test(KK kk, FF ff) {\n+        this.kk = kk;\n+        this.ff = ff;\n+    }\n }\n \n @SuppressWarnings(\"initialization.fields.uninitialized\")\n class RecursiveTypevarClass<T extends RecursiveTypevarClass<T>> {\n     T t;\n+\n+    RecursiveTypevarClass(T t) {\n+        this.t = t;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe3a5d3271a354cb2448b54737f48b8eeef2bb75"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a5ddd2ae288380fed1a67a78b6ff497f9afca56", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/9a5ddd2ae288380fed1a67a78b6ff497f9afca56", "committedDate": "2020-11-10T20:46:09Z", "message": "Code review feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "494b3c68c5186f379e39df2c5cc18f3f1efb2434", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/494b3c68c5186f379e39df2c5cc18f3f1efb2434", "committedDate": "2020-11-10T20:49:01Z", "message": "Merge ../checker-framework-branch-master into initializedfields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2fe7ffcdc329f65ee049732d0c6f1b989ef32c4", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/c2fe7ffcdc329f65ee049732d0c6f1b989ef32c4", "committedDate": "2020-11-10T20:57:13Z", "message": "Read default annotations for contracts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35159e5aba2f9f6b4ea50988541d2d199e2bc8b6", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/35159e5aba2f9f6b4ea50988541d2d199e2bc8b6", "committedDate": "2020-11-10T21:55:11Z", "message": "Remove InitializedFieldsPredicate"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5Mzc5Mzgw", "url": "https://github.com/typetools/checker-framework/pull/3887#pullrequestreview-529379380", "createdAt": "2020-11-12T18:37:53Z", "commit": {"oid": "35159e5aba2f9f6b4ea50988541d2d199e2bc8b6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxODozNzo1NFrOHyIfBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOToxMDowM1rOHyJs3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyOTg2MQ==", "bodyText": "What's the subtyping relationship between @InitializedFields annotations?", "url": "https://github.com/typetools/checker-framework/pull/3887#discussion_r522329861", "createdAt": "2020-11-12T18:37:54Z", "author": {"login": "smillst"}, "path": "docs/manual/initialized-fields-checker.tex", "diffHunk": "@@ -0,0 +1,174 @@\n+\\htmlhr\n+\\chapterAndLabel{Initialized Fields Checker}{initialized-fields-checker}\n+\n+The Initialized Fields Checker warns if a constructor does not initialize a\n+field.\n+If you run it together with other checkers (by supplying multiple checkers\n+to the \\<-processor> command-line option), then it issues warnings only if\n+the default value assigned by Java (0, false, or null) is not consistent\n+with the field's annotation, for the other checkers.\n+% It's actually the checkers and their subcheckers if any.  Saying that\n+% would be confusing to most users, who don't know what a \"subchecker\" is.\n+% The term \"subchecker\" appears only in the \"creating a checker\" section of\n+% the manual.\n+\n+An example invocation is\n+\n+\\begin{Verbatim}\n+javac -processor ValueChecker,InitializedFieldsChecker MyFile.java\n+\\end{Verbatim}\n+\n+\n+\\sectionAndLabel{Motivation:  uninitialized fields}{initialized-fields-motivation}\n+\n+Without the Initialized Fields Checker, every type system is\n+unsound with respect to fields that are never set.  (Exception:  The\n+Nullness Checker (\\chapterpageref{nullness-checker}) is sound. Also, a type\n+system is sound if every annotation is consistent with 0, false, and null.)\n+Consider the following code:\n+\n+\\begin{Verbatim}\n+import org.checkerframework.checker.index.qual.Positive;\n+\n+class MyClass {\n+  @Positive int x;\n+  MyClass() {\n+    // empty body\n+  }\n+\n+  @Positive int getX() {\n+    return x;\n+  }\n+}\n+\\end{Verbatim}\n+\n+\\noindent\n+Method \\<getX> is incorrect because it returns 0, which is not positive.\n+However, the code type-checks because there is never an assignment to \\<x>\n+whose right-hand side is not positive.\n+If you run the Index Checker together with the Initialized Fields Checker,\n+then the code correctly does not type-check.\n+\n+\n+\\subsubsectionAndLabel{Remaining unsoundness}{initialized-fields-remaining-unsoundness}\n+\n+Even with the Initialized Fields Checker, every type system (except the\n+Nullness Checker, \\chapterpageref{nullness-checker}) is unsound with\n+respect to partially-initialized fields.  Consider the following code:\n+\n+\\begin{Verbatim}\n+import org.checkerframework.checker.index.qual.Positive;\n+\n+class MyClass {\n+  @Positive int x;\n+  MyClass() {\n+    foo(this);\n+    x = 1;\n+  }\n+\n+  @Positive int foo() {\n+    // ... use x, expecting it to be positive ...\n+  }\n+}\n+\\end{Verbatim}\n+\n+\\noindent\n+Within method \\<foo>, \\<x> can have the value 0 even though the type of\n+\\<x> is \\<@Positive int>.\n+\n+\n+\\sectionAndLabel{Example}{initialized-fields-example}\n+\n+As an example, consider the following code:\n+\n+\\begin{Verbatim}\n+import org.checkerframework.checker.index.qual.Positive;\n+\n+class MyClass {\n+\n+  @Positive int x;\n+  @Positive int y;\n+  int z;\n+\n+  // Warning: field y is not initialized\n+  MyClass() {\n+    x = 1;\n+  }\n+}\n+\\end{Verbatim}\n+\n+When run by itself, the Initialized Fields Checker warns that fields \\<y>\n+and field \\<z> are not set.\n+\n+When run together with the Index Checker, the Initialized Fields Checker\n+warns that field \\<y> is not set.  It does not warn about field \\<z>,\n+because its default value (0) is consistent with its annotations.\n+\n+\n+\\sectionAndLabel{Annotations}{initialized-fields-annotations}\n+\n+The Initialized Fields type system uses the following type annotations:\n+\\begin{description}\n+\\item[\\refqualclass{checker/initializedfields/qual}{InitializedFields}]\n+  indicates which fields have definitely been initialized so far.\n+\\item[\\refqualclass{checker/initializedfields/qual}{InitializedFieldsBottom}]\n+  is the type of \\<null>.  Programmers rarely write this type.\n+\\item[\\refqualclass{checker/initializedfields/qual}{PolyInitializedFields}]\n+  is a qualifier that is polymorphic over field initialization (see\n+  Section~\\ref{method-qualifier-polymorphism}).\n+\\end{description}\n+\n+% TODO: draw a diagram of the type hierarchy.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35159e5aba2f9f6b4ea50988541d2d199e2bc8b6"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMzMjM4Nw==", "bodyText": "The processor list can contain classes that are not BaseTypeCheckers.  Those class should be ignored rather than cause an exception.", "url": "https://github.com/typetools/checker-framework/pull/3887#discussion_r522332387", "createdAt": "2020-11-12T18:41:55Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/common/initializedfields/InitializedFieldsAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,235 @@\n+package org.checkerframework.common.initializedfields;\n+\n+import com.sun.source.tree.VariableTree;\n+import com.sun.tools.javac.processing.JavacProcessingEnvironment;\n+import com.sun.tools.javac.util.Context;\n+import com.sun.tools.javac.util.Options;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.Element;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.element.VariableElement;\n+import org.checkerframework.checker.signature.qual.BinaryName;\n+import org.checkerframework.common.accumulation.AccumulationAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.basetype.BaseTypeVisitor;\n+import org.checkerframework.common.initializedfields.qual.EnsuresInitializedFields;\n+import org.checkerframework.common.initializedfields.qual.InitializedFields;\n+import org.checkerframework.common.initializedfields.qual.InitializedFieldsBottom;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.GenericAnnotatedTypeFactory;\n+import org.checkerframework.framework.util.Contract;\n+import org.checkerframework.framework.util.ContractsUtils;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.ElementUtils;\n+import org.checkerframework.javacutil.UserError;\n+\n+/** The annotated type factory for the Initialized Fields Checker. */\n+public class InitializedFieldsAnnotatedTypeFactory extends AccumulationAnnotatedTypeFactory {\n+\n+    /**\n+     * The type factories that determine whether the default value is consistent with the annotated\n+     * type. If empty, warn about all uninitialized fields.\n+     */\n+    List<GenericAnnotatedTypeFactory<?, ?, ?, ?>> defaultValueAtypeFactories;\n+\n+    /**\n+     * Creates a new InitializedFieldsAnnotatedTypeFactory.\n+     *\n+     * @param checker the checker\n+     */\n+    public InitializedFieldsAnnotatedTypeFactory(BaseTypeChecker checker) {\n+        super(checker, InitializedFields.class, InitializedFieldsBottom.class);\n+\n+        Context context = ((JavacProcessingEnvironment) processingEnv).getContext();\n+        String checkerNames = Options.instance(context).get(\"-processor\");\n+        defaultValueAtypeFactories = new ArrayList<>();\n+        for (String checkerName : checkerNames.split(\",\")) {\n+            if (checkerName.equals(InitializedFieldsChecker.class.getCanonicalName())) {\n+                continue;\n+            }\n+            @SuppressWarnings(\"signature:argument.type.incompatible\") // -processor is a binary name\n+            GenericAnnotatedTypeFactory<?, ?, ?, ?> atf = getTypeFactory(checkerName);\n+            if (atf == null) {\n+                throw new UserError(\n+                        \"Cannot find %s; check the classpath or processorpath\", checkerName);\n+            }\n+            defaultValueAtypeFactories.add(atf);\n+        }\n+\n+        this.postInit();\n+    }\n+\n+    /**\n+     * Returns the type factory for the given checker.\n+     *\n+     * @param checkerName the fully-qualified class name of a checker\n+     * @return the type factory for the given checker\n+     */\n+    GenericAnnotatedTypeFactory<?, ?, ?, ?> getTypeFactory(@BinaryName String checkerName) {\n+        try {\n+            Class<?> checkerClass = Class.forName(checkerName);\n+            @SuppressWarnings(\"unchecked\")\n+            BaseTypeChecker c =\n+                    ((Class<? extends BaseTypeChecker>) checkerClass)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35159e5aba2f9f6b4ea50988541d2d199e2bc8b6"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMzNzU4Nw==", "bodyText": "If you just want to check primary annotations, then you can call QualifierHierarchy#isSubtype.   But the fieldType might be a type variable in which case, the field type might not have a primary annotation.  So, what you have written is correct.  (I would delete this comment.)", "url": "https://github.com/typetools/checker-framework/pull/3887#discussion_r522337587", "createdAt": "2020-11-12T18:50:30Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/common/initializedfields/InitializedFieldsAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,235 @@\n+package org.checkerframework.common.initializedfields;\n+\n+import com.sun.source.tree.VariableTree;\n+import com.sun.tools.javac.processing.JavacProcessingEnvironment;\n+import com.sun.tools.javac.util.Context;\n+import com.sun.tools.javac.util.Options;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.Element;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.element.VariableElement;\n+import org.checkerframework.checker.signature.qual.BinaryName;\n+import org.checkerframework.common.accumulation.AccumulationAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.basetype.BaseTypeVisitor;\n+import org.checkerframework.common.initializedfields.qual.EnsuresInitializedFields;\n+import org.checkerframework.common.initializedfields.qual.InitializedFields;\n+import org.checkerframework.common.initializedfields.qual.InitializedFieldsBottom;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.GenericAnnotatedTypeFactory;\n+import org.checkerframework.framework.util.Contract;\n+import org.checkerframework.framework.util.ContractsUtils;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.ElementUtils;\n+import org.checkerframework.javacutil.UserError;\n+\n+/** The annotated type factory for the Initialized Fields Checker. */\n+public class InitializedFieldsAnnotatedTypeFactory extends AccumulationAnnotatedTypeFactory {\n+\n+    /**\n+     * The type factories that determine whether the default value is consistent with the annotated\n+     * type. If empty, warn about all uninitialized fields.\n+     */\n+    List<GenericAnnotatedTypeFactory<?, ?, ?, ?>> defaultValueAtypeFactories;\n+\n+    /**\n+     * Creates a new InitializedFieldsAnnotatedTypeFactory.\n+     *\n+     * @param checker the checker\n+     */\n+    public InitializedFieldsAnnotatedTypeFactory(BaseTypeChecker checker) {\n+        super(checker, InitializedFields.class, InitializedFieldsBottom.class);\n+\n+        Context context = ((JavacProcessingEnvironment) processingEnv).getContext();\n+        String checkerNames = Options.instance(context).get(\"-processor\");\n+        defaultValueAtypeFactories = new ArrayList<>();\n+        for (String checkerName : checkerNames.split(\",\")) {\n+            if (checkerName.equals(InitializedFieldsChecker.class.getCanonicalName())) {\n+                continue;\n+            }\n+            @SuppressWarnings(\"signature:argument.type.incompatible\") // -processor is a binary name\n+            GenericAnnotatedTypeFactory<?, ?, ?, ?> atf = getTypeFactory(checkerName);\n+            if (atf == null) {\n+                throw new UserError(\n+                        \"Cannot find %s; check the classpath or processorpath\", checkerName);\n+            }\n+            defaultValueAtypeFactories.add(atf);\n+        }\n+\n+        this.postInit();\n+    }\n+\n+    /**\n+     * Returns the type factory for the given checker.\n+     *\n+     * @param checkerName the fully-qualified class name of a checker\n+     * @return the type factory for the given checker\n+     */\n+    GenericAnnotatedTypeFactory<?, ?, ?, ?> getTypeFactory(@BinaryName String checkerName) {\n+        try {\n+            Class<?> checkerClass = Class.forName(checkerName);\n+            @SuppressWarnings(\"unchecked\")\n+            BaseTypeChecker c =\n+                    ((Class<? extends BaseTypeChecker>) checkerClass)\n+                            .getDeclaredConstructor()\n+                            .newInstance();\n+            c.init(processingEnv);\n+            c.initChecker();\n+            BaseTypeVisitor<?> v = c.createSourceVisitorPublic();\n+            GenericAnnotatedTypeFactory<?, ?, ?, ?> atf = v.createTypeFactoryPublic();\n+            return atf;\n+        } catch (ClassNotFoundException\n+                | InstantiationException\n+                | InvocationTargetException\n+                | IllegalAccessException\n+                | NoSuchMethodException e) {\n+            throw new UserError(\"Problem instantiating \" + checkerName, e);\n+        }\n+    }\n+\n+    @Override\n+    public InitializedFieldsContractsUtils getContractsUtils() {\n+        return new InitializedFieldsContractsUtils(this);\n+    }\n+\n+    /**\n+     * A subclass of ContractsUtils that adds a postcondition contract to each constructor,\n+     * requiring that it initializes all fields.\n+     */\n+    private class InitializedFieldsContractsUtils extends ContractsUtils {\n+        /**\n+         * Creates an InitializedFieldsContractsUtils for the given factory.\n+         *\n+         * @param factory the type factory associated with the newly-created ContractsUtils\n+         */\n+        public InitializedFieldsContractsUtils(GenericAnnotatedTypeFactory<?, ?, ?, ?> factory) {\n+            super(factory);\n+        }\n+\n+        @Override\n+        public Set<Contract.Postcondition> getPostconditions(ExecutableElement executableElement) {\n+            Set<Contract.Postcondition> result = super.getPostconditions(executableElement);\n+\n+            // Only process methods defined in source code being type-checked.\n+            if (declarationFromElement(executableElement) != null) {\n+\n+                if (executableElement.getKind() == ElementKind.CONSTRUCTOR) {\n+                    // It's a constructor\n+\n+                    String[] fieldsToInitialize =\n+                            fieldsToInitialize(\n+                                    (TypeElement) executableElement.getEnclosingElement());\n+                    if (fieldsToInitialize.length != 0) {\n+\n+                        AnnotationMirror initializedFieldsAnno;\n+                        {\n+                            AnnotationBuilder builder =\n+                                    new AnnotationBuilder(\n+                                            processingEnv,\n+                                            InitializedFields.class.getCanonicalName());\n+                            builder.setValue(\"value\", fieldsToInitialize);\n+                            initializedFieldsAnno = builder.build();\n+                        }\n+                        AnnotationMirror ensuresAnno;\n+                        {\n+                            AnnotationBuilder builder =\n+                                    new AnnotationBuilder(\n+                                            processingEnv,\n+                                            EnsuresInitializedFields.class.getCanonicalName());\n+                            builder.setValue(\"value\", new String[] {\"this\"});\n+                            builder.setValue(\"fields\", fieldsToInitialize);\n+                            ensuresAnno = builder.build();\n+                        }\n+                        Contract.Postcondition ensuresContract =\n+                                new Contract.Postcondition(\n+                                        \"this\", initializedFieldsAnno, ensuresAnno);\n+\n+                        result.add(ensuresContract);\n+                    }\n+                }\n+            }\n+\n+            return result;\n+        }\n+    }\n+\n+    /**\n+     * Returns the fields that the constructor must initialize. These are the fields F declared in\n+     * this class that satisfy all of the following conditions:\n+     *\n+     * <ul>\n+     *   <li>F is a non-final field (if final, Java will issue a warning, so we don't need to).\n+     *   <li>F's declaration has no initializer.\n+     *   <li>No initialization block or static initialization block sets the field. (This seems to\n+     *       be handled automagically. There is no code for it in this method, but the tests pass.)\n+     *   <li>F's annotated type is not consistent with the default value (0, 0.0, false, or null)\n+     * </ul>\n+     *\n+     * @param type the type whose fields to list\n+     * @return the fields whose type is not consistent with the default value, so the constructor\n+     *     must initialize them\n+     */\n+    // It is a bit wasteful that this is recomputed for each constructor.\n+    private String[] fieldsToInitialize(TypeElement type) {\n+        List<String> result = new ArrayList<String>();\n+\n+        for (Element member : type.getEnclosedElements()) {\n+\n+            if (member.getKind() != ElementKind.FIELD) {\n+                continue;\n+            }\n+\n+            VariableElement field = (VariableElement) member;\n+            if (ElementUtils.isFinal(field)) {\n+                continue;\n+            }\n+\n+            VariableTree fieldTree = (VariableTree) declarationFromElement(field);\n+            if (fieldTree.getInitializer() != null) {\n+                continue;\n+            }\n+\n+            if (!defaultValueIsOK(field)) {\n+                result.add(field.getSimpleName().toString());\n+            }\n+        }\n+\n+        return result.toArray(new String[result.size()]);\n+    }\n+\n+    /**\n+     * Returns true if the default field value (0, false, or null) is consistent with the field's\n+     * declared type.\n+     *\n+     * @param field a field\n+     * @return true if the default field value is consistent with the field's declared type\n+     */\n+    private boolean defaultValueIsOK(VariableElement field) {\n+        if (defaultValueAtypeFactories.isEmpty()) {\n+            return false;\n+        }\n+\n+        for (GenericAnnotatedTypeFactory<?, ?, ?, ?> defaultValueAtypeFactory :\n+                defaultValueAtypeFactories) {\n+\n+            AnnotatedTypeMirror fieldType = defaultValueAtypeFactory.getAnnotatedType(field);\n+            AnnotatedTypeMirror defaultValueType =\n+                    defaultValueAtypeFactory.getDefaultValueAnnotatedType(\n+                            fieldType.getUnderlyingType());\n+            // Could call isPrimarySubtype, but that is only defined in DefaultTypeHierarchy.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35159e5aba2f9f6b4ea50988541d2d199e2bc8b6"}, "originalPosition": 225}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM0MTI2OQ==", "bodyText": "contracts.postcondition.not.satisfied should have the checker name prefix.  Also, no need to add value = .", "url": "https://github.com/typetools/checker-framework/pull/3887#discussion_r522341269", "createdAt": "2020-11-12T18:56:35Z", "author": {"login": "smillst"}, "path": "framework/tests/all-systems/WildCardCrash.java", "diffHunk": "@@ -16,7 +16,7 @@ public SomeGen(CFAbstractAnalysis123<CFValue123, ?, ?> analysis) {}\n \n class CFValue123 extends CFAbstractValue123<CFValue123> {}\n \n-@SuppressWarnings(\"initialization\")\n+@SuppressWarnings(value = {\"initialization\", \"contracts.postcondition.not.satisfied\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35159e5aba2f9f6b4ea50988541d2d199e2bc8b6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM0NDI4NQ==", "bodyText": "I think these fields are still included in the returned array.  It's just that dataflow visits initialization block or static initialization block as part of the constructor.  So, I would delete this bullet point.", "url": "https://github.com/typetools/checker-framework/pull/3887#discussion_r522344285", "createdAt": "2020-11-12T19:01:48Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/common/initializedfields/InitializedFieldsAnnotatedTypeFactory.java", "diffHunk": "@@ -0,0 +1,235 @@\n+package org.checkerframework.common.initializedfields;\n+\n+import com.sun.source.tree.VariableTree;\n+import com.sun.tools.javac.processing.JavacProcessingEnvironment;\n+import com.sun.tools.javac.util.Context;\n+import com.sun.tools.javac.util.Options;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.element.AnnotationMirror;\n+import javax.lang.model.element.Element;\n+import javax.lang.model.element.ElementKind;\n+import javax.lang.model.element.ExecutableElement;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.element.VariableElement;\n+import org.checkerframework.checker.signature.qual.BinaryName;\n+import org.checkerframework.common.accumulation.AccumulationAnnotatedTypeFactory;\n+import org.checkerframework.common.basetype.BaseTypeChecker;\n+import org.checkerframework.common.basetype.BaseTypeVisitor;\n+import org.checkerframework.common.initializedfields.qual.EnsuresInitializedFields;\n+import org.checkerframework.common.initializedfields.qual.InitializedFields;\n+import org.checkerframework.common.initializedfields.qual.InitializedFieldsBottom;\n+import org.checkerframework.framework.type.AnnotatedTypeMirror;\n+import org.checkerframework.framework.type.GenericAnnotatedTypeFactory;\n+import org.checkerframework.framework.util.Contract;\n+import org.checkerframework.framework.util.ContractsUtils;\n+import org.checkerframework.javacutil.AnnotationBuilder;\n+import org.checkerframework.javacutil.ElementUtils;\n+import org.checkerframework.javacutil.UserError;\n+\n+/** The annotated type factory for the Initialized Fields Checker. */\n+public class InitializedFieldsAnnotatedTypeFactory extends AccumulationAnnotatedTypeFactory {\n+\n+    /**\n+     * The type factories that determine whether the default value is consistent with the annotated\n+     * type. If empty, warn about all uninitialized fields.\n+     */\n+    List<GenericAnnotatedTypeFactory<?, ?, ?, ?>> defaultValueAtypeFactories;\n+\n+    /**\n+     * Creates a new InitializedFieldsAnnotatedTypeFactory.\n+     *\n+     * @param checker the checker\n+     */\n+    public InitializedFieldsAnnotatedTypeFactory(BaseTypeChecker checker) {\n+        super(checker, InitializedFields.class, InitializedFieldsBottom.class);\n+\n+        Context context = ((JavacProcessingEnvironment) processingEnv).getContext();\n+        String checkerNames = Options.instance(context).get(\"-processor\");\n+        defaultValueAtypeFactories = new ArrayList<>();\n+        for (String checkerName : checkerNames.split(\",\")) {\n+            if (checkerName.equals(InitializedFieldsChecker.class.getCanonicalName())) {\n+                continue;\n+            }\n+            @SuppressWarnings(\"signature:argument.type.incompatible\") // -processor is a binary name\n+            GenericAnnotatedTypeFactory<?, ?, ?, ?> atf = getTypeFactory(checkerName);\n+            if (atf == null) {\n+                throw new UserError(\n+                        \"Cannot find %s; check the classpath or processorpath\", checkerName);\n+            }\n+            defaultValueAtypeFactories.add(atf);\n+        }\n+\n+        this.postInit();\n+    }\n+\n+    /**\n+     * Returns the type factory for the given checker.\n+     *\n+     * @param checkerName the fully-qualified class name of a checker\n+     * @return the type factory for the given checker\n+     */\n+    GenericAnnotatedTypeFactory<?, ?, ?, ?> getTypeFactory(@BinaryName String checkerName) {\n+        try {\n+            Class<?> checkerClass = Class.forName(checkerName);\n+            @SuppressWarnings(\"unchecked\")\n+            BaseTypeChecker c =\n+                    ((Class<? extends BaseTypeChecker>) checkerClass)\n+                            .getDeclaredConstructor()\n+                            .newInstance();\n+            c.init(processingEnv);\n+            c.initChecker();\n+            BaseTypeVisitor<?> v = c.createSourceVisitorPublic();\n+            GenericAnnotatedTypeFactory<?, ?, ?, ?> atf = v.createTypeFactoryPublic();\n+            return atf;\n+        } catch (ClassNotFoundException\n+                | InstantiationException\n+                | InvocationTargetException\n+                | IllegalAccessException\n+                | NoSuchMethodException e) {\n+            throw new UserError(\"Problem instantiating \" + checkerName, e);\n+        }\n+    }\n+\n+    @Override\n+    public InitializedFieldsContractsUtils getContractsUtils() {\n+        return new InitializedFieldsContractsUtils(this);\n+    }\n+\n+    /**\n+     * A subclass of ContractsUtils that adds a postcondition contract to each constructor,\n+     * requiring that it initializes all fields.\n+     */\n+    private class InitializedFieldsContractsUtils extends ContractsUtils {\n+        /**\n+         * Creates an InitializedFieldsContractsUtils for the given factory.\n+         *\n+         * @param factory the type factory associated with the newly-created ContractsUtils\n+         */\n+        public InitializedFieldsContractsUtils(GenericAnnotatedTypeFactory<?, ?, ?, ?> factory) {\n+            super(factory);\n+        }\n+\n+        @Override\n+        public Set<Contract.Postcondition> getPostconditions(ExecutableElement executableElement) {\n+            Set<Contract.Postcondition> result = super.getPostconditions(executableElement);\n+\n+            // Only process methods defined in source code being type-checked.\n+            if (declarationFromElement(executableElement) != null) {\n+\n+                if (executableElement.getKind() == ElementKind.CONSTRUCTOR) {\n+                    // It's a constructor\n+\n+                    String[] fieldsToInitialize =\n+                            fieldsToInitialize(\n+                                    (TypeElement) executableElement.getEnclosingElement());\n+                    if (fieldsToInitialize.length != 0) {\n+\n+                        AnnotationMirror initializedFieldsAnno;\n+                        {\n+                            AnnotationBuilder builder =\n+                                    new AnnotationBuilder(\n+                                            processingEnv,\n+                                            InitializedFields.class.getCanonicalName());\n+                            builder.setValue(\"value\", fieldsToInitialize);\n+                            initializedFieldsAnno = builder.build();\n+                        }\n+                        AnnotationMirror ensuresAnno;\n+                        {\n+                            AnnotationBuilder builder =\n+                                    new AnnotationBuilder(\n+                                            processingEnv,\n+                                            EnsuresInitializedFields.class.getCanonicalName());\n+                            builder.setValue(\"value\", new String[] {\"this\"});\n+                            builder.setValue(\"fields\", fieldsToInitialize);\n+                            ensuresAnno = builder.build();\n+                        }\n+                        Contract.Postcondition ensuresContract =\n+                                new Contract.Postcondition(\n+                                        \"this\", initializedFieldsAnno, ensuresAnno);\n+\n+                        result.add(ensuresContract);\n+                    }\n+                }\n+            }\n+\n+            return result;\n+        }\n+    }\n+\n+    /**\n+     * Returns the fields that the constructor must initialize. These are the fields F declared in\n+     * this class that satisfy all of the following conditions:\n+     *\n+     * <ul>\n+     *   <li>F is a non-final field (if final, Java will issue a warning, so we don't need to).\n+     *   <li>F's declaration has no initializer.\n+     *   <li>No initialization block or static initialization block sets the field. (This seems to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35159e5aba2f9f6b4ea50988541d2d199e2bc8b6"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM0ODI1NQ==", "bodyText": "What does @EnsuresInitializedFields(value = {\"this\", \"a\"}, fields = { \"c\", \"d\"}) mean?  I think that value should just be a string.  Then @EnsuresInitializedFields should be repeatable.", "url": "https://github.com/typetools/checker-framework/pull/3887#discussion_r522348255", "createdAt": "2020-11-12T19:07:39Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/common/initializedfields/qual/EnsuresInitializedFields.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package org.checkerframework.common.initializedfields.qual;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import org.checkerframework.framework.qual.PostconditionAnnotation;\n+import org.checkerframework.framework.qual.QualifierArgument;\n+\n+/**\n+ * A method postcondition annotation indicates which fields the method definitely initializes.\n+ *\n+ * @checker_framework.manual #initialized-fields-checker Initialized Fields Checker\n+ */\n+@PostconditionAnnotation(qualifier = InitializedFields.class)\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target({ElementType.METHOD})\n+public @interface EnsuresInitializedFields {\n+    /**\n+     * The object(s) whose fields this method initializes.\n+     *\n+     * @return object(s) whose fields are initialized\n+     */\n+    public String[] value() default {\"this\"};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35159e5aba2f9f6b4ea50988541d2d199e2bc8b6"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM0OTc5MA==", "bodyText": "This seems wrong to me.  I'm assuming there's a problem because of the LiteralTrees created by the Initialized Fields Checker.  I'll see if I can find a better work around.", "url": "https://github.com/typetools/checker-framework/pull/3887#discussion_r522349790", "createdAt": "2020-11-12T19:10:03Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/framework/type/GenericAnnotatedTypeFactory.java", "diffHunk": "@@ -1633,7 +1634,7 @@ protected final void addComputedTypeAnnotations(Tree tree, AnnotatedTypeMirror t\n      */\n     protected void addComputedTypeAnnotations(\n             Tree tree, AnnotatedTypeMirror type, boolean iUseFlow) {\n-        assert root != null\n+        assert root != null || tree instanceof LiteralTree", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35159e5aba2f9f6b4ea50988541d2d199e2bc8b6"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba6723a2b6312cbef79b32b717e6fe19c5657009", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/ba6723a2b6312cbef79b32b717e6fe19c5657009", "committedDate": "2020-11-12T21:18:46Z", "message": "Merge ../checker-framework-fork-mernst-branch-initializedfields into ensuresinitializedfields-repeatable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0757886879f605c6899e23dcaeb4e163208eb1b7", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/0757886879f605c6899e23dcaeb4e163208eb1b7", "committedDate": "2020-11-12T21:24:20Z", "message": "Address code review feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c60cf627722ed51b5b996224ad8c577495b75828", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/c60cf627722ed51b5b996224ad8c577495b75828", "committedDate": "2020-11-12T21:29:08Z", "message": "Make `@EnsuresInitializedFields` annotation repeatable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89cd1be994076e34f35ade6d7c0b20d19d6dfdff", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/89cd1be994076e34f35ade6d7c0b20d19d6dfdff", "committedDate": "2020-11-12T21:31:34Z", "message": "Merge ../checker-framework-fork-mernst-branch-initializedfields into ensuresinitializedfields-repeatable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4286eeb3ff637357343b58692bef095716f4da3f", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/4286eeb3ff637357343b58692bef095716f4da3f", "committedDate": "2020-11-12T22:06:16Z", "message": "Fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee3968447afcc61037b7676199304083519e0bee", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/ee3968447afcc61037b7676199304083519e0bee", "committedDate": "2020-11-12T23:12:49Z", "message": "Define method getElementValueArrayOrSingleton"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b04d086b4cbb2e4ed74924488dd36db9f8d46188", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/b04d086b4cbb2e4ed74924488dd36db9f8d46188", "committedDate": "2020-11-12T23:19:30Z", "message": "Merge ../checker-framework-branch-master into initializedfields-precursors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfb59a407b3889ee5669b000362ae206f1ebb09b", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/dfb59a407b3889ee5669b000362ae206f1ebb09b", "committedDate": "2020-11-12T23:21:08Z", "message": "Merge ../checker-framework-branch-master into initializedfields-precursors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2b9b7921af4a3f2444662399c49bdde9e1d905c", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/f2b9b7921af4a3f2444662399c49bdde9e1d905c", "committedDate": "2020-11-12T23:21:36Z", "message": "Merge ../checker-framework-fork-mernst-branch-initializedfields-precursors into initializedfields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb5b8f5ce9543c3970cfb7f818592ed4ab66e713", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/cb5b8f5ce9543c3970cfb7f818592ed4ab66e713", "committedDate": "2020-11-12T23:45:36Z", "message": "Merge ../checker-framework-fork-mernst-branch-ensuresinitializedfields-repeatable into initializedfields"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwMjQ5MTA1", "url": "https://github.com/typetools/checker-framework/pull/3887#pullrequestreview-530249105", "createdAt": "2020-11-13T17:12:32Z", "commit": {"oid": "cb5b8f5ce9543c3970cfb7f818592ed4ab66e713"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNzoxMjozM1rOHy3XZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNzoxMjozM1rOHy3XZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA5Nzk1Ng==", "bodyText": "I think this is done, so this line can be removed.", "url": "https://github.com/typetools/checker-framework/pull/3887#discussion_r523097956", "createdAt": "2020-11-13T17:12:33Z", "author": {"login": "kelloggm"}, "path": "docs/manual/initialized-fields-checker.tex", "diffHunk": "@@ -0,0 +1,183 @@\n+\\htmlhr\n+\\chapterAndLabel{Initialized Fields Checker}{initialized-fields-checker}\n+\n+The Initialized Fields Checker warns if a constructor does not initialize a\n+field.\n+If you run it together with other checkers (by supplying multiple checkers\n+to the \\<-processor> command-line option), then it issues warnings only if\n+the default value assigned by Java (0, false, or null) is not consistent\n+with the field's annotation, for the other checkers.\n+% It's actually the checkers and their subcheckers if any.  Saying that\n+% would be confusing to most users, who don't know what a \"subchecker\" is.\n+% The term \"subchecker\" appears only in the \"creating a checker\" section of\n+% the manual.\n+\n+An example invocation is\n+\n+\\begin{Verbatim}\n+javac -processor ValueChecker,InitializedFieldsChecker MyFile.java\n+\\end{Verbatim}\n+\n+\n+\\sectionAndLabel{Motivation:  uninitialized fields}{initialized-fields-motivation}\n+\n+Without the Initialized Fields Checker, every type system is\n+unsound with respect to fields that are never set.  (Exception:  The\n+Nullness Checker (\\chapterpageref{nullness-checker}) is sound. Also, a type\n+system is sound if every annotation is consistent with 0, false, and null.)\n+Consider the following code:\n+\n+\\begin{Verbatim}\n+import org.checkerframework.checker.index.qual.Positive;\n+\n+class MyClass {\n+  @Positive int x;\n+  MyClass() {\n+    // empty body\n+  }\n+\n+  @Positive int getX() {\n+    return x;\n+  }\n+}\n+\\end{Verbatim}\n+\n+\\noindent\n+Method \\<getX> is incorrect because it returns 0, which is not positive.\n+However, the code type-checks because there is never an assignment to \\<x>\n+whose right-hand side is not positive.\n+If you run the Index Checker together with the Initialized Fields Checker,\n+then the code correctly does not type-check.\n+\n+\n+\\subsubsectionAndLabel{Remaining unsoundness}{initialized-fields-remaining-unsoundness}\n+\n+Even with the Initialized Fields Checker, every type system (except the\n+Nullness Checker, \\chapterpageref{nullness-checker}) is unsound with\n+respect to partially-initialized fields.  Consider the following code:\n+\n+\\begin{Verbatim}\n+import org.checkerframework.checker.index.qual.Positive;\n+\n+class MyClass {\n+  @Positive int x;\n+  MyClass() {\n+    foo(this);\n+    x = 1;\n+  }\n+\n+  @Positive int foo() {\n+    // ... use x, expecting it to be positive ...\n+  }\n+}\n+\\end{Verbatim}\n+\n+\\noindent\n+Within method \\<foo>, \\<x> can have the value 0 even though the type of\n+\\<x> is \\<@Positive int>.\n+\n+\n+\\sectionAndLabel{Example}{initialized-fields-example}\n+\n+As an example, consider the following code:\n+\n+\\begin{Verbatim}\n+import org.checkerframework.checker.index.qual.Positive;\n+\n+class MyClass {\n+\n+  @Positive int x;\n+  @Positive int y;\n+  int z;\n+\n+  // Warning: field y is not initialized\n+  MyClass() {\n+    x = 1;\n+  }\n+}\n+\\end{Verbatim}\n+\n+When run by itself, the Initialized Fields Checker warns that fields \\<y>\n+and field \\<z> are not set.\n+\n+When run together with the Index Checker, the Initialized Fields Checker\n+warns that field \\<y> is not set.  It does not warn about field \\<z>,\n+because its default value (0) is consistent with its annotations.\n+\n+\n+\\sectionAndLabel{Annotations}{initialized-fields-annotations}\n+\n+The Initialized Fields type system uses the following type annotations:\n+\\begin{description}\n+\\item[\\refqualclass{checker/initializedfields/qual}{InitializedFields}]\n+  indicates which fields have definitely been initialized so far.\n+\\item[\\refqualclass{checker/initializedfields/qual}{InitializedFieldsBottom}]\n+  is the type of \\<null>.  Programmers rarely write this type.\n+\\item[\\refqualclass{checker/initializedfields/qual}{PolyInitializedFields}]\n+  is a qualifier that is polymorphic over field initialization (see\n+  Section~\\ref{method-qualifier-polymorphism}).\n+\\end{description}\n+\n+\\begin{figure}\n+\\includeimage{initializedfields}{4.5cm}\n+\\caption{The type qualifier hierarchy of the Initialized Fields Checker.\n+\\<@InitializedFieldsBottom> is rarely written by a programmer.}\n+\\label{fig-initialized-fields-hierarchy}\n+\\end{figure}\n+\n+Figure~\\ref{fig-initialized-fields-hierarchy} shows the the subtyping\n+relationships among the type qualifiers.\n+\n+% TODO: draw a diagram of the type hierarchy.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb5b8f5ce9543c3970cfb7f818592ed4ab66e713"}, "originalPosition": 131}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b35251845a63f298df21040dfeebcae10a672633", "author": {"user": {"login": "smillst", "name": "Suzanne Millstein"}}, "url": "https://github.com/typetools/checker-framework/commit/b35251845a63f298df21040dfeebcae10a672633", "committedDate": "2020-11-13T17:34:45Z", "message": "Remove unneeded code."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b789d58b8bcf868e93935fdee50f054bc5b2401f", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/b789d58b8bcf868e93935fdee50f054bc5b2401f", "committedDate": "2020-11-13T17:36:56Z", "message": "Remove a TODO"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ad3284f56dfde3491944b6cd02657b7b984ec55", "author": {"user": {"login": "smillst", "name": "Suzanne Millstein"}}, "url": "https://github.com/typetools/checker-framework/commit/4ad3284f56dfde3491944b6cd02657b7b984ec55", "committedDate": "2020-11-13T17:51:37Z", "message": "Don't use flow to compute the type of default values."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d01f2e2bbaafe1934da1a30c9769cff7030a11a1", "author": {"user": {"login": "smillst", "name": "Suzanne Millstein"}}, "url": "https://github.com/typetools/checker-framework/commit/d01f2e2bbaafe1934da1a30c9769cff7030a11a1", "committedDate": "2020-11-13T17:51:56Z", "message": "Merge branch 'initializedfields' of github.com:mernst/checker-framework into initializedfields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8376b684ef15157fea46dda329e8dc55e8b7661a", "author": {"user": {"login": "smillst", "name": "Suzanne Millstein"}}, "url": "https://github.com/typetools/checker-framework/commit/8376b684ef15157fea46dda329e8dc55e8b7661a", "committedDate": "2020-11-13T18:06:23Z", "message": "Revert another change."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwMjg0NzIw", "url": "https://github.com/typetools/checker-framework/pull/3887#pullrequestreview-530284720", "createdAt": "2020-11-13T17:56:50Z", "commit": {"oid": "d01f2e2bbaafe1934da1a30c9769cff7030a11a1"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNzo1Njo1MFrOHy5Juw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNzo1Njo1MFrOHy5Juw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzEyNzIyNw==", "bodyText": "The Collections.singletonList returns an immutable list, so clients can't side-effect it.", "url": "https://github.com/typetools/checker-framework/pull/3887#discussion_r523127227", "createdAt": "2020-11-13T17:56:50Z", "author": {"login": "smillst"}, "path": "javacutil/src/main/java/org/checkerframework/javacutil/AnnotationUtils.java", "diffHunk": "@@ -809,6 +811,43 @@ public NoSuchElementException(String message) {\n         return result;\n     }\n \n+    /**\n+     * Get the element with the name {@code elementName} of the annotation {@code anno}. The element\n+     * has type {@code expectedType} or array of {@code expectedType}.\n+     *\n+     * <p>Parameter useDefaults is used to determine whether default values should be used for\n+     * annotation values. Finding defaults requires more computation, so should be false when no\n+     * defaulting is needed.\n+     *\n+     * @param anno the annotation to disassemble\n+     * @param elementName the name of the element to access\n+     * @param expectedType the expected type used to cast the return type\n+     * @param <T> the class of the expected type\n+     * @param useDefaults whether to apply default values to the element\n+     * @return the value of the element with the given name; it is a new list, so it is safe for", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d01f2e2bbaafe1934da1a30c9769cff7030a11a1"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b7202718abb6031ee7cdeb670eb1b193050158b", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/2b7202718abb6031ee7cdeb670eb1b193050158b", "committedDate": "2020-11-13T18:52:05Z", "message": "Use `new ArrayList` instead of `singletonList`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ebedec47a5ec4d76a1c23993a9970fd262911bbf", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/ebedec47a5ec4d76a1c23993a9970fd262911bbf", "committedDate": "2020-11-13T18:52:29Z", "message": "Merge branch 'initializedfields' of github.com:mernst/checker-framework into initializedfields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9ba099c7d441a0f7649e67dc37b81c155c33834", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/f9ba099c7d441a0f7649e67dc37b81c155c33834", "committedDate": "2020-11-13T19:37:28Z", "message": "Fix constructor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdef27c8b2f1f38f9b4c07bc818eb494ac6a5f21", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/bdef27c8b2f1f38f9b4c07bc818eb494ac6a5f21", "committedDate": "2020-11-06T18:40:15Z", "message": "Initialized Fields Checker\n\nIt does no enforcement yet"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db90590a17c4b727644182421e50fb166096b005", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/db90590a17c4b727644182421e50fb166096b005", "committedDate": "2020-11-06T19:18:47Z", "message": "Merge ../checker-framework-branch-master into initializedfields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3e11125e0a26994b85c0399bf5931808b4b2ffe", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/c3e11125e0a26994b85c0399bf5931808b4b2ffe", "committedDate": "2020-11-06T19:20:18Z", "message": "Support accumulation for an arbitrary Receiver, not just for a Node"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0d7916224ec6fbd2b8cf7acf35e56aaa84992d4", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/f0d7916224ec6fbd2b8cf7acf35e56aaa84992d4", "committedDate": "2020-11-06T19:21:52Z", "message": "Support accumulation for an arbitrary Receiver, not just for a Node"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "540a3d12964f389ae4ec97adfc261afb2f12dd48", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/540a3d12964f389ae4ec97adfc261afb2f12dd48", "committedDate": "2020-11-06T19:22:12Z", "message": "Merge ../checker-framework-branch-master into accumulation-refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a92659e65dadb64a2d9c35297c3e742665989b1e", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/a92659e65dadb64a2d9c35297c3e742665989b1e", "committedDate": "2020-11-06T19:22:56Z", "message": "Merge ../checker-framework-fork-mernst-branch-accumulation-refactor into initializedfields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "227ecb7747fbd47e00f08bf8d1f53e4a7c830e12", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/227ecb7747fbd47e00f08bf8d1f53e4a7c830e12", "committedDate": "2020-11-06T19:26:24Z", "message": "Merge ../checker-framework-branch-master into accumulation-refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44f4f2cb39f1c8f719349f49c960086e833b24c5", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/44f4f2cb39f1c8f719349f49c960086e833b24c5", "committedDate": "2020-11-06T19:26:38Z", "message": "Merge ../checker-framework-fork-mernst-branch-accumulation-refactor into initializedfields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b528dc2c8ee8d7cb8357657da959e12a74a1f1a", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/6b528dc2c8ee8d7cb8357657da959e12a74a1f1a", "committedDate": "2020-11-06T19:27:40Z", "message": "InitializesFields annotation (checkpoint)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8f2f8a65633c80935ec46230e016f109dab6b9f", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/a8f2f8a65633c80935ec46230e016f109dab6b9f", "committedDate": "2020-11-06T19:34:46Z", "message": "Rename a field canonically"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d950b26fc087d2a9e88d38f8b3e6680d8677678d", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/d950b26fc087d2a9e88d38f8b3e6680d8677678d", "committedDate": "2020-11-06T19:35:40Z", "message": "Rename a field canonically"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ecd7bcc57fa8122d6b830ea789a6fe68ee20dad", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/4ecd7bcc57fa8122d6b830ea789a6fe68ee20dad", "committedDate": "2020-11-06T19:36:03Z", "message": "Merge ../checker-framework-fork-mernst-branch-accumulation-refactor into initializedfields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a39261ee51c44b7b1980d9356b4473016584510", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/2a39261ee51c44b7b1980d9356b4473016584510", "committedDate": "2020-11-06T19:48:45Z", "message": "Checkpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed313b8d10b94533691eb15455958c6a2164727e", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/ed313b8d10b94533691eb15455958c6a2164727e", "committedDate": "2020-11-06T22:26:34Z", "message": "Handle @EnsuresInitializedFields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bca1d1f9254a2614b7bbf48eee2f3455136d789", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/1bca1d1f9254a2614b7bbf48eee2f3455136d789", "committedDate": "2020-11-06T22:26:46Z", "message": "Merge ../checker-framework-branch-master into initializedfields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ef021529f1d3db731e4b617f0c1ae4292638b22", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/8ef021529f1d3db731e4b617f0c1ae4292638b22", "committedDate": "2020-11-06T22:41:13Z", "message": "Add Javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f62bb982470b72b8050c2b5d57bd9f5c37a9ac96", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/f62bb982470b72b8050c2b5d57bd9f5c37a9ac96", "committedDate": "2020-11-06T22:41:22Z", "message": "Remove unneeded code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2f660349cacb31b47b36124c419592f9f953c0f", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/e2f660349cacb31b47b36124c419592f9f953c0f", "committedDate": "2020-11-06T22:49:57Z", "message": "Undo a refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4112465c50d0bfe9d5cb851f9c587c12f0a827f", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/a4112465c50d0bfe9d5cb851f9c587c12f0a827f", "committedDate": "2020-11-07T05:38:58Z", "message": "Remove method ContractsUtils.getInstance()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06953b82566ba4af5607e894bea4c0e0940170a2", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/06953b82566ba4af5607e894bea4c0e0940170a2", "committedDate": "2020-11-07T05:44:34Z", "message": "Use consistent variable names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4afe9f87e3dd318cb1a1686528477af7765fce61", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/4afe9f87e3dd318cb1a1686528477af7765fce61", "committedDate": "2020-11-07T12:45:17Z", "message": "Add Javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a7c747ad4f88e8d10266bba660c8ec27b8e1434", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/1a7c747ad4f88e8d10266bba660c8ec27b8e1434", "committedDate": "2020-11-07T13:08:26Z", "message": "Move ContractsUtils instance from visitor to type factory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05d832354e412378d2f1e25ab68e6df1e9a6676d", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/05d832354e412378d2f1e25ab68e6df1e9a6676d", "committedDate": "2020-11-07T13:45:33Z", "message": "Add Javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f15318d7de0d3d158deda17057e48a8b509aaee", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/2f15318d7de0d3d158deda17057e48a8b509aaee", "committedDate": "2020-11-07T13:46:53Z", "message": "Merge ../checker-framework-branch-master into initializedfields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7c83b1c27bb206c10eab1af3a39485dbb8a1b74", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/f7c83b1c27bb206c10eab1af3a39485dbb8a1b74", "committedDate": "2020-11-07T13:53:30Z", "message": "Merge?"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f6e67c571e0fdd230e60221cb24e76c377723a1", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/2f6e67c571e0fdd230e60221cb24e76c377723a1", "committedDate": "2020-11-07T13:54:40Z", "message": "Merge ../checker-framework-fork-mernst-branch-ContractsUtils-getInstance into ContractsUtils-in-typefactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f6cfbb7ac3098e41e5699df1d7c6028c2e04354", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/5f6cfbb7ac3098e41e5699df1d7c6028c2e04354", "committedDate": "2020-11-07T13:56:36Z", "message": "Fix bad merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba652c782bbc1f897145de74bb9fa4891ea7853a", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/ba652c782bbc1f897145de74bb9fa4891ea7853a", "committedDate": "2020-11-07T13:57:19Z", "message": "Merge ../checker-framework-fork-mernst-branch-ContractsUtils-in-typefactory into initializedfields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "994251af88b76a17344d60572fd115a97fbbbf35", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/994251af88b76a17344d60572fd115a97fbbbf35", "committedDate": "2020-11-07T14:50:25Z", "message": "Undo undesired change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3d049ecf3b8d8f60df1082d9644ef51d72499dd", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/f3d049ecf3b8d8f60df1082d9644ef51d72499dd", "committedDate": "2020-11-07T14:53:42Z", "message": "Merge ../checker-framework-branch-master into ContractsUtils-getInstance"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f09e2d7dfca81aaa9fe198581b784e4d6d85fac3", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/f09e2d7dfca81aaa9fe198581b784e4d6d85fac3", "committedDate": "2020-11-07T14:54:11Z", "message": "Merge ../checker-framework-fork-mernst-branch-ContractsUtils-getInstance into ContractsUtils-in-typefactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19e1c61cb8f07823876eef05226e0086c14922f8", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/19e1c61cb8f07823876eef05226e0086c14922f8", "committedDate": "2020-11-07T14:54:39Z", "message": "Merge ../checker-framework-fork-mernst-branch-ContractsUtils-in-typefactory into initializedfields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68e5b63c1e1db89903ac3b57a179103a99100065", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/68e5b63c1e1db89903ac3b57a179103a99100065", "committedDate": "2020-11-07T14:58:44Z", "message": "How to enforce accumulation-related properties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb7842316b99bca4ea1379ba55ddc6b5ae8718cc", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/bb7842316b99bca4ea1379ba55ddc6b5ae8718cc", "committedDate": "2020-11-07T15:03:38Z", "message": "Add more documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46df88d201aa81748875dde552ba5054653f1afd", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/46df88d201aa81748875dde552ba5054653f1afd", "committedDate": "2020-11-07T17:01:08Z", "message": "Remove unused formal parameters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d6195db220d7ccf2cad1aca036416c526f747db", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/9d6195db220d7ccf2cad1aca036416c526f747db", "committedDate": "2020-11-07T17:02:41Z", "message": "Add method getDefaultValueAnnotatedType"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46c05971ed14f7666c9bc8261c125c579c54c22c", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/46c05971ed14f7666c9bc8261c125c579c54c22c", "committedDate": "2020-11-07T17:03:05Z", "message": "Comment cleanups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c88a57f64327452c5116210234b85d2ffe2cda4e", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/c88a57f64327452c5116210234b85d2ffe2cda4e", "committedDate": "2020-11-07T17:03:54Z", "message": "Add a synthetic postcondition to constructors (checkpoint)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e2b85b2eb111dda7fcd1fbfe515e8075e0b1d0a", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/2e2b85b2eb111dda7fcd1fbfe515e8075e0b1d0a", "committedDate": "2020-11-07T17:05:17Z", "message": "Merge ../checker-framework-fork-mernst-branch-remove-contractannotation into initializedfields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4240bc0ac5c041e00292894a402a7fe99c8cf3e3", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/4240bc0ac5c041e00292894a402a7fe99c8cf3e3", "committedDate": "2020-11-07T20:29:38Z", "message": "Add a synthetic postcondition to constructors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "295f7b32016993823bec6a8a8e08c3045d0ccad4", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/295f7b32016993823bec6a8a8e08c3045d0ccad4", "committedDate": "2020-11-07T20:31:11Z", "message": "Merge ../checker-framework-branch-master into ContractsUtils-getInstance"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92b9051a671bdc6171a8b325d4886161bb658e8c", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/92b9051a671bdc6171a8b325d4886161bb658e8c", "committedDate": "2020-11-07T20:31:34Z", "message": "Merge ../checker-framework-fork-mernst-branch-ContractsUtils-getInstance into ContractsUtils-in-typefactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "072784181c171ad8e9d06c2818dbb7a4f8c2f160", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/072784181c171ad8e9d06c2818dbb7a4f8c2f160", "committedDate": "2020-11-07T20:31:56Z", "message": "Merge ../checker-framework-fork-mernst-branch-ContractsUtils-in-typefactory into initializedfields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "046e5d3a1b6c9555b232984e2645b4c1f6ea69d4", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/046e5d3a1b6c9555b232984e2645b4c1f6ea69d4", "committedDate": "2020-11-07T20:36:30Z", "message": "Define method getDefaultValueAnnotatedType"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3065d0a066bd19e5553c0d369dd0935b7981374", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/d3065d0a066bd19e5553c0d369dd0935b7981374", "committedDate": "2020-11-07T20:40:36Z", "message": "Merge ../checker-framework-fork-mernst-branch-getDefaultValueAnnotatedType into initializedfields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ea45ca9d3957cb8f9dbbd7505f8f73590d48fcb", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/9ea45ca9d3957cb8f9dbbd7505f8f73590d48fcb", "committedDate": "2020-11-08T01:48:08Z", "message": "Update expected output"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5346eb249abe4e1e30c5f214b4aee3933ae5879c", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/5346eb249abe4e1e30c5f214b4aee3933ae5879c", "committedDate": "2020-11-08T14:11:54Z", "message": "Update expected output"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a788f29147990878feb2b4b1d36edc00c583b698", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/a788f29147990878feb2b4b1d36edc00c583b698", "committedDate": "2020-11-08T23:59:12Z", "message": "Add a test in initialized-fields-value"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ed9f4821237605ad04f9a52eee92df275e55bc3", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/7ed9f4821237605ad04f9a52eee92df275e55bc3", "committedDate": "2020-11-09T00:04:09Z", "message": "Merge ../checker-framework-fork-mernst-branch-remove-contractannotation into initializedfields-precursors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "696fd25f25093843d279f63050e21beba3c2943e", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/696fd25f25093843d279f63050e21beba3c2943e", "committedDate": "2020-11-09T00:04:33Z", "message": "Merge ../checker-framework-fork-mernst-branch-getDefaultValueAnnotatedType into initializedfields-precursors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f8d6368ba1364f37e6a536271346cdb7ac479b6", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/1f8d6368ba1364f37e6a536271346cdb7ac479b6", "committedDate": "2020-11-09T00:04:56Z", "message": "Merge ../checker-framework-fork-mernst-branch-initializedfields-precursors into initializedfields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f73fbe2e582e6e2d85534ab3c5f0cfa28fab38af", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/f73fbe2e582e6e2d85534ab3c5f0cfa28fab38af", "committedDate": "2020-11-09T00:08:32Z", "message": "Merge ../checker-framework-fork-mernst-branch-accumulation-doc into initializedfields-precursors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f4fe3caadf6a58ac74668d10e2d6b5ad8f14ef7", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/1f4fe3caadf6a58ac74668d10e2d6b5ad8f14ef7", "committedDate": "2020-11-09T00:08:45Z", "message": "Merge ../checker-framework-fork-mernst-branch-initializedfields-precursors into initializedfields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bac71d32e6ced9fa621023df60f5da9dbe0e2ce", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/8bac71d32e6ced9fa621023df60f5da9dbe0e2ce", "committedDate": "2020-11-09T00:12:32Z", "message": "Clarify when a checker shorthand is applied"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0adf3efa500bd1b5994344c9b85919ca298a35b6", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/0adf3efa500bd1b5994344c9b85919ca298a35b6", "committedDate": "2020-11-09T00:19:44Z", "message": "Use description environment for qualifiers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37cd2e9a71954b1e6d2f33fa2617adf185a1eb8e", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/37cd2e9a71954b1e6d2f33fa2617adf185a1eb8e", "committedDate": "2020-11-09T00:22:48Z", "message": "Remove diagnostic output"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2d630c3e77d0145e6bdb72db5ccae6e5fcc5a16", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/d2d630c3e77d0145e6bdb72db5ccae6e5fcc5a16", "committedDate": "2020-11-09T00:23:12Z", "message": "Merge ../checker-framework-fork-mernst-branch-qualifier-description-environment into initializedfields-precursors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b046618adb843211e820a97464155f559c1f11fa", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/b046618adb843211e820a97464155f559c1f11fa", "committedDate": "2020-11-09T00:23:26Z", "message": "Merge ../checker-framework-fork-mernst-branch-initializedfields-precursors into initializedfields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cb50481b2cd56c45005854ad6efcca657f11943", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/2cb50481b2cd56c45005854ad6efcca657f11943", "committedDate": "2020-11-09T00:24:11Z", "message": "Merge ../checker-framework-branch-master into ContractsUtils-in-typefactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3173dfd414f2403798dd7eabf36e1c42aa8cd3a", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/c3173dfd414f2403798dd7eabf36e1c42aa8cd3a", "committedDate": "2020-11-09T00:25:07Z", "message": "Merge ../checker-framework-branch-master into initializedfields-precursors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b28c2cbd043ca980b59a7ed61825a6aeb880bfd", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/0b28c2cbd043ca980b59a7ed61825a6aeb880bfd", "committedDate": "2020-11-09T00:28:12Z", "message": "Update list of .tex files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "342bdaa4e7740ea7908468f7c8338a4ce7c20dda", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/342bdaa4e7740ea7908468f7c8338a4ce7c20dda", "committedDate": "2020-11-09T00:30:55Z", "message": "Move Aliasing Checker chapter later in manual"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8e9ca2b87fdf8dc5a614fbf99edd4f0e33d0a3d", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/f8e9ca2b87fdf8dc5a614fbf99edd4f0e33d0a3d", "committedDate": "2020-11-09T00:31:46Z", "message": "Merge ../checker-framework-fork-mernst-branch-aliasing-checker-later-in-manual into initializedfields-precursors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b23ff68a525b3bb329ba7e3f726dbf26b8ce955c", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/b23ff68a525b3bb329ba7e3f726dbf26b8ce955c", "committedDate": "2020-11-09T00:34:23Z", "message": "Merge ../checker-framework-fork-mernst-branch-initializedfields-precursors into initializedfields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fdfcb3800a9072ca615a6b1e754958c71413ab69", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/fdfcb3800a9072ca615a6b1e754958c71413ab69", "committedDate": "2020-11-09T00:37:06Z", "message": "Merge ../checker-framework-fork-mernst-branch-checker-shorthand into initializedfields-precursors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9d6e83d0c8b969b7e855b11c159ce423a675466", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/c9d6e83d0c8b969b7e855b11c159ce423a675466", "committedDate": "2020-11-09T00:37:16Z", "message": "Merge ../checker-framework-fork-mernst-branch-initializedfields-precursors into initializedfields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64d2144a24f033806c97a41dffd5505e799217c2", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/64d2144a24f033806c97a41dffd5505e799217c2", "committedDate": "2020-11-09T00:41:23Z", "message": "More documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d726a544d24a676a79294c56bbac8325086ad27", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/7d726a544d24a676a79294c56bbac8325086ad27", "committedDate": "2020-11-09T00:42:06Z", "message": "Fix TypeTag"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bb039d46f63e3bca0f071582b4e4db1e155cb97", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/9bb039d46f63e3bca0f071582b4e4db1e155cb97", "committedDate": "2020-11-09T00:42:53Z", "message": "Merge ../checker-framework-branch-master into ContractsUtils-getInstance"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c508254e35c4ee4e239800277346310e0b2312c1", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/c508254e35c4ee4e239800277346310e0b2312c1", "committedDate": "2020-11-09T00:43:04Z", "message": "Merge ../checker-framework-fork-mernst-branch-ContractsUtils-getInstance into ContractsUtils-in-typefactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66205534b757395f215203a53f8cc3f76ed7e272", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/66205534b757395f215203a53f8cc3f76ed7e272", "committedDate": "2020-11-09T00:43:15Z", "message": "Merge ../checker-framework-fork-mernst-branch-ContractsUtils-in-typefactory into initializedfields-precursors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bdcacb4cee4ce44c89be546482d5abebdb6db34", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/2bdcacb4cee4ce44c89be546482d5abebdb6db34", "committedDate": "2020-11-09T00:43:41Z", "message": "Merge ../checker-framework-fork-mernst-branch-getDefaultValueAnnotatedType into initializedfields-precursors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50e1ac17dc6765c3826ae7c8c66c17ced30f7c06", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/50e1ac17dc6765c3826ae7c8c66c17ced30f7c06", "committedDate": "2020-11-09T00:44:28Z", "message": "Merge ../checker-framework-fork-mernst-branch-checker-shorthand into initializedfields-precursors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c524781cb4ceaa31dc97ab352fbef8bc5c83998", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/1c524781cb4ceaa31dc97ab352fbef8bc5c83998", "committedDate": "2020-11-09T00:44:47Z", "message": "Merge ../checker-framework-fork-mernst-branch-initializedfields-precursors into initializedfields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e803f56ee65effb8308803ff4d3410574a20550f", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/e803f56ee65effb8308803ff4d3410574a20550f", "committedDate": "2020-11-09T00:50:06Z", "message": "Expand diagnostics for AnnotatedTypeFactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87facedf64daa6f160363d3e269199d06b7be7b8", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/87facedf64daa6f160363d3e269199d06b7be7b8", "committedDate": "2020-11-09T00:53:40Z", "message": "Make an implicit behavior explicit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b08f0853d303e3aa4fd8a52fafe6e759f353849", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/0b08f0853d303e3aa4fd8a52fafe6e759f353849", "committedDate": "2020-11-09T00:56:57Z", "message": "Merge ../checker-framework-fork-mernst-branch-atf-diagnostics into initializedfields-precursors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1963ecb7e947e00b20b496ede809a7da84f9a67", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/d1963ecb7e947e00b20b496ede809a7da84f9a67", "committedDate": "2020-11-09T00:58:11Z", "message": "Merge ../checker-framework-fork-mernst-branch-defaulttypehierarchy-optimization into initializedfields-precursors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8157924f428b3789823cb634f075f9eec2e4f9e", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/b8157924f428b3789823cb634f075f9eec2e4f9e", "committedDate": "2020-11-09T01:01:20Z", "message": "Cleanups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea6e993d5745f6d06e6b26857ed89bf74447e4f5", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/ea6e993d5745f6d06e6b26857ed89bf74447e4f5", "committedDate": "2020-11-09T01:01:51Z", "message": "Merge ../checker-framework-fork-mernst-branch-initializedfields-precursors into initializedfields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acd4b4558e002cbfcb2edcb1a1f0097772b64cbc", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/acd4b4558e002cbfcb2edcb1a1f0097772b64cbc", "committedDate": "2020-11-09T01:07:15Z", "message": "Tweaks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4ec605fb09569cd6dd6094db48e1ea894b3b8ad", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/c4ec605fb09569cd6dd6094db48e1ea894b3b8ad", "committedDate": "2020-11-09T01:32:42Z", "message": "Improve documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9dd0199690f79a3a11238a25fe110ade8a9fb65c", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/9dd0199690f79a3a11238a25fe110ade8a9fb65c", "committedDate": "2020-11-09T05:50:29Z", "message": "Add Javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "376e3479242fc09bb97294a583c6d7f156d5a228", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/376e3479242fc09bb97294a583c6d7f156d5a228", "committedDate": "2020-11-09T14:58:14Z", "message": "Add TODO comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d834358ea4b704db8096750e64599731bd02d310", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/d834358ea4b704db8096750e64599731bd02d310", "committedDate": "2020-11-09T18:40:07Z", "message": "Merge ../checker-framework-fork-mernst-branch-master into remove-contractannotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a54d73831652a0024287257f125f1cbe5938b2d", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/1a54d73831652a0024287257f125f1cbe5938b2d", "committedDate": "2020-11-09T18:40:48Z", "message": "Add changelog entry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1449161149ab8df948a97b23a3219397a7d7f789", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/1449161149ab8df948a97b23a3219397a7d7f789", "committedDate": "2020-11-09T18:43:38Z", "message": "Merge ../checker-framework-fork-mernst into ContractsUtils-in-typefactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55ad5cd350f6bb94ec5fe3fc80adba30d3b35d78", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/55ad5cd350f6bb94ec5fe3fc80adba30d3b35d78", "committedDate": "2020-11-09T18:44:54Z", "message": "Add changelog"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fde08c23cc3b60ee0a6480caf71062a87aeb5892", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/fde08c23cc3b60ee0a6480caf71062a87aeb5892", "committedDate": "2020-11-09T18:48:08Z", "message": "Merge ../checker-framework-branch-master into ContractsUtils-in-typefactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15f9ffbbaf72835294e4f2d019eaa48b98ba90a6", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/15f9ffbbaf72835294e4f2d019eaa48b98ba90a6", "committedDate": "2020-11-09T18:58:46Z", "message": "Tweak wording"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1596b8d328a7e1025bbc6449c710bbe2e987bc9", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/b1596b8d328a7e1025bbc6449c710bbe2e987bc9", "committedDate": "2020-11-09T19:00:43Z", "message": "Merge ../checker-framework-fork-mernst-branch-ContractsUtils-in-typefactory into initializedfields-precursors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bd9089d59090533f515a11ed7ea5a304f1bc40b", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/9bd9089d59090533f515a11ed7ea5a304f1bc40b", "committedDate": "2020-11-09T19:01:34Z", "message": "Merge ../checker-framework-fork-mernst-branch-remove-contractannotation into initializedfields-precursors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72d53102b9335c1aa50a14a030b90fd5188f007d", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/72d53102b9335c1aa50a14a030b90fd5188f007d", "committedDate": "2020-11-09T19:03:12Z", "message": "Merge ../checker-framework-fork-mernst-branch-defaulttypehierarchy-optimization into initializedfields-precursors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62aebba548e49fba130872b3972d8cf5ae4ddf13", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/62aebba548e49fba130872b3972d8cf5ae4ddf13", "committedDate": "2020-11-09T19:03:43Z", "message": "Merge ../checker-framework-branch-master into initializedfields-precursors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07056141d7a6d07c3d537ecf90c91ee6983492a0", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/07056141d7a6d07c3d537ecf90c91ee6983492a0", "committedDate": "2020-11-09T19:04:05Z", "message": "Merge ../checker-framework-fork-mernst-branch-initializedfields-precursors into initializedfields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7558d6276285b2bee9fc740eac667cb2f56fbe0", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/f7558d6276285b2bee9fc740eac667cb2f56fbe0", "committedDate": "2020-11-09T19:11:47Z", "message": "Merge ../checker-framework-branch-master into initializedfields-precursors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b38bfc8bb65d9e55e0a1c4555930e542ae819a3e", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/b38bfc8bb65d9e55e0a1c4555930e542ae819a3e", "committedDate": "2020-11-09T19:11:58Z", "message": "Merge ../checker-framework-fork-mernst-branch-initializedfields-precursors into initializedfields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f1941456b3ddeb3b3ee6b3cd637f1501f150395", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/1f1941456b3ddeb3b3ee6b3cd637f1501f150395", "committedDate": "2020-11-09T21:17:28Z", "message": "Define method TreeUtils.createLiteral"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d63d040e3b8b87074aa0a5c91fd2f3bee358e8d", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/3d63d040e3b8b87074aa0a5c91fd2f3bee358e8d", "committedDate": "2020-11-09T21:18:16Z", "message": "Merge ../checker-framework-fork-mernst-branch-getDefaultValueAnnotatedType into initializedfields-precursors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01237e0cbefe834734048f6debe977bcc1b940a9", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/01237e0cbefe834734048f6debe977bcc1b940a9", "committedDate": "2020-11-09T21:18:58Z", "message": "Merge ../checker-framework-fork-mernst-branch-initializedfields-precursors into initializedfields"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2508, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}