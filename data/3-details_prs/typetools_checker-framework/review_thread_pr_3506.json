{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2NDE0Mzgw", "number": 3506, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzo1ODoxNVrOER6nDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzo1ODoxNVrOER6nDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjIxNTE3OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/type/DefaultTypeHierarchy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzo1ODoxNVrOG24tnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzo1ODoxNVrOG24tnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIwNTQ2OQ==", "bodyText": "This cache is to prevent infinite recursion on recursive types.", "url": "https://github.com/typetools/checker-framework/pull/3506#discussion_r460205469", "createdAt": "2020-07-24T17:58:15Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/framework/type/DefaultTypeHierarchy.java", "diffHunk": "@@ -281,17 +284,22 @@ protected boolean isBottom(final AnnotatedTypeMirror subtype) {\n     }\n \n     /**\n-     * Check and subtype first determines if the subtype/supertype combination has already been\n-     * visited. If so, it returns true, otherwise add the subtype/supertype combination and then\n-     * make a subtype check\n+     * Like {@link #isSubtype(AnnotatedTypeMirror, AnnotatedTypeMirror)}, but uses a cache for\n+     * performance.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6fd022c1d1f2a1c3500d8df776b0aa793d7836e"}, "originalPosition": 136}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1584, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}