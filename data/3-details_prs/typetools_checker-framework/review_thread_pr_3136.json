{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MTg2MDI3", "number": 3136, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzo0OTo1MlrODmyj8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTowODozN1rODngWQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDAwODgzOnYy", "diffSide": "RIGHT", "path": "javacutil/src/main/java/org/checkerframework/javacutil/AbstractTypeProcessor.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzo0OTo1MlrOF0aQPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMTo1OTo0OFrOF1Kkog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUwMDQxMg==", "bodyText": "What uses do you imagine for the parameter? Instead of nothing, this passes just the success/failure bit. Why not the number of errors or the error messages themselves?\nOnly two of the checkers actually do something with the boolean. As an alternative, those two checkers could create a Log instance and look at the number of errors themselves.\nSo if you don't have a larger plan for this parameter, just changing those two checkers would be a smaller change.", "url": "https://github.com/typetools/checker-framework/pull/3136#discussion_r390500412", "createdAt": "2020-03-10T17:49:52Z", "author": {"login": "wmdietl"}, "path": "javacutil/src/main/java/org/checkerframework/javacutil/AbstractTypeProcessor.java", "diffHunk": "@@ -139,10 +139,10 @@ public void typeProcessingStart() {}\n      * <p>Subclasses may override this method to do any aggregate analysis (e.g. generate report,\n      * persistence) or resource deallocation.\n      *\n-     * <p>If an error (a Java error or a processor error) is reported, this method is not guaranteed\n-     * to be invoked.\n+     * @param hasError true if compilation issued an error, either from the Java compiler or from a\n+     *     pluggable type-checker\n      */\n-    public void typeProcessingOver() {}\n+    public void typeProcessingOver(boolean hasError) {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a4c145da79d35baf58002a173c8476a13a1b740"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyNDI4Ng==", "bodyText": "This is preparatory to #3137.  I separated it so that it was two smaller pull requests each with one topic.  This is what #3137 needs.  A future pull request could do more, like your suggestion.", "url": "https://github.com/typetools/checker-framework/pull/3136#discussion_r390524286", "createdAt": "2020-03-10T18:28:12Z", "author": {"login": "mernst"}, "path": "javacutil/src/main/java/org/checkerframework/javacutil/AbstractTypeProcessor.java", "diffHunk": "@@ -139,10 +139,10 @@ public void typeProcessingStart() {}\n      * <p>Subclasses may override this method to do any aggregate analysis (e.g. generate report,\n      * persistence) or resource deallocation.\n      *\n-     * <p>If an error (a Java error or a processor error) is reported, this method is not guaranteed\n-     * to be invoked.\n+     * @param hasError true if compilation issued an error, either from the Java compiler or from a\n+     *     pluggable type-checker\n      */\n-    public void typeProcessingOver() {}\n+    public void typeProcessingOver(boolean hasError) {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUwMDQxMg=="}, "originalCommit": {"oid": "9a4c145da79d35baf58002a173c8476a13a1b740"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyNTAyNw==", "bodyText": "Or, you could just review #3137 instead of this one.", "url": "https://github.com/typetools/checker-framework/pull/3136#discussion_r390525027", "createdAt": "2020-03-10T18:29:27Z", "author": {"login": "mernst"}, "path": "javacutil/src/main/java/org/checkerframework/javacutil/AbstractTypeProcessor.java", "diffHunk": "@@ -139,10 +139,10 @@ public void typeProcessingStart() {}\n      * <p>Subclasses may override this method to do any aggregate analysis (e.g. generate report,\n      * persistence) or resource deallocation.\n      *\n-     * <p>If an error (a Java error or a processor error) is reported, this method is not guaranteed\n-     * to be invoked.\n+     * @param hasError true if compilation issued an error, either from the Java compiler or from a\n+     *     pluggable type-checker\n      */\n-    public void typeProcessingOver() {}\n+    public void typeProcessingOver(boolean hasError) {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUwMDQxMg=="}, "originalCommit": {"oid": "9a4c145da79d35baf58002a173c8476a13a1b740"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU3NjAxNA==", "bodyText": "How does #3137 need this? The implementation in SourceChecker there is:\n    public void typeProcessingOver(boolean hasError) {\n        writeJsonDiagnostics();\n        super.typeProcessingOver(hasError);\n    }\nSo we could remove the boolean parameter, change the logic to always call typeProcessingOver, and change the two checkers that depend on success/failure to use the Log to do that.", "url": "https://github.com/typetools/checker-framework/pull/3136#discussion_r390576014", "createdAt": "2020-03-10T20:00:15Z", "author": {"login": "wmdietl"}, "path": "javacutil/src/main/java/org/checkerframework/javacutil/AbstractTypeProcessor.java", "diffHunk": "@@ -139,10 +139,10 @@ public void typeProcessingStart() {}\n      * <p>Subclasses may override this method to do any aggregate analysis (e.g. generate report,\n      * persistence) or resource deallocation.\n      *\n-     * <p>If an error (a Java error or a processor error) is reported, this method is not guaranteed\n-     * to be invoked.\n+     * @param hasError true if compilation issued an error, either from the Java compiler or from a\n+     *     pluggable type-checker\n      */\n-    public void typeProcessingOver() {}\n+    public void typeProcessingOver(boolean hasError) {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUwMDQxMg=="}, "originalCommit": {"oid": "9a4c145da79d35baf58002a173c8476a13a1b740"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2MDEyOA==", "bodyText": "#3137 depends on typeProcessingOver being called even if an error occurred (which is the topic of this pull request).  #3137 does not depend on the hasError boolean, though this pull request does depend on the hasError boolean.  Sorry if that was unclear.\nI count three checkers that use the boolean, not two:  AnnotationStatistics, CFGProcessor, and JavaCodeStatistics.\nThe boolean helps them preserve behavior, and is all they need.  I don't think it is simpler to make most clients create a log that they don't need, and I don't want this pull request to change their behavior.\nIf there is a need for the log in the future, then we should change the functionality, but it doesn't seem desirable to me right now.", "url": "https://github.com/typetools/checker-framework/pull/3136#discussion_r390660128", "createdAt": "2020-03-10T23:02:37Z", "author": {"login": "mernst"}, "path": "javacutil/src/main/java/org/checkerframework/javacutil/AbstractTypeProcessor.java", "diffHunk": "@@ -139,10 +139,10 @@ public void typeProcessingStart() {}\n      * <p>Subclasses may override this method to do any aggregate analysis (e.g. generate report,\n      * persistence) or resource deallocation.\n      *\n-     * <p>If an error (a Java error or a processor error) is reported, this method is not guaranteed\n-     * to be invoked.\n+     * @param hasError true if compilation issued an error, either from the Java compiler or from a\n+     *     pluggable type-checker\n      */\n-    public void typeProcessingOver() {}\n+    public void typeProcessingOver(boolean hasError) {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUwMDQxMg=="}, "originalCommit": {"oid": "9a4c145da79d35baf58002a173c8476a13a1b740"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI5MjA2Ng==", "bodyText": "I've made some changes in #3158. Please see whether you like them. I find it nicer without the boolean.\nA few javadoc issues probably still need to be sorted out.", "url": "https://github.com/typetools/checker-framework/pull/3136#discussion_r391292066", "createdAt": "2020-03-11T21:59:48Z", "author": {"login": "wmdietl"}, "path": "javacutil/src/main/java/org/checkerframework/javacutil/AbstractTypeProcessor.java", "diffHunk": "@@ -139,10 +139,10 @@ public void typeProcessingStart() {}\n      * <p>Subclasses may override this method to do any aggregate analysis (e.g. generate report,\n      * persistence) or resource deallocation.\n      *\n-     * <p>If an error (a Java error or a processor error) is reported, this method is not guaranteed\n-     * to be invoked.\n+     * @param hasError true if compilation issued an error, either from the Java compiler or from a\n+     *     pluggable type-checker\n      */\n-    public void typeProcessingOver() {}\n+    public void typeProcessingOver(boolean hasError) {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUwMDQxMg=="}, "originalCommit": {"oid": "9a4c145da79d35baf58002a173c8476a13a1b740"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzUxMDQzOnYy", "diffSide": "RIGHT", "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/CFGProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTowODozN1rOF1it6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTowODozN1rOF1it6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY4NzY1Ng==", "bodyText": "This change should be in a separate PR.", "url": "https://github.com/typetools/checker-framework/pull/3136#discussion_r391687656", "createdAt": "2020-03-12T15:08:37Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/CFGProcessor.java", "diffHunk": "@@ -35,8 +37,8 @@\n     /** Tree node for the specified method. */\n     private @Nullable MethodTree methodTree;\n \n-    /** Result of CFG process. */\n-    private @Nullable CFGProcessResult result;\n+    /** Result of CFG process; is set by {@link #typeProcessingOver}. */\n+    private @MonotonicNonNull CFGProcessResult result = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31d9b84e17e4d730f892873e9d8cf6258fd1857a"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1888, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}