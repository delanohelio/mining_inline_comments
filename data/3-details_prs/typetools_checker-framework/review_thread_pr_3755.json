{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwMzA4MzU2", "number": 3755, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzozNTowM1rOEsI-NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNjozMToyNlrOEss5AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzE5Nzk2OnYy", "diffSide": "RIGHT", "path": "javacutil/src/main/java/org/checkerframework/javacutil/TreeUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzozNTowM1rOHfS75A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzozNTowM1rOHfS75A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU3ODE0OA==", "bodyText": "The should be called leftmostTypeTree.", "url": "https://github.com/typetools/checker-framework/pull/3755#discussion_r502578148", "createdAt": "2020-10-09T17:35:03Z", "author": {"login": "smillst"}, "path": "javacutil/src/main/java/org/checkerframework/javacutil/TreeUtils.java", "diffHunk": "@@ -1541,4 +1540,68 @@ public static boolean isWideningBinary(BinaryTree node) {\n                 return false;\n         }\n     }\n+\n+    /**\n+     * Returns the annotations explicitly written on the given type.\n+     *\n+     * @param declAnnos a list of annotations on a variable/method declaration; null if this type is\n+     *     not from such a location\n+     * @param typeTree the type whose annotations to return\n+     * @return the annotations explicitly written on the given type.\n+     */\n+    public static List<? extends AnnotationTree> getExplicitAnnotations(\n+            List<? extends AnnotationTree> declAnnos, Tree typeTree) {\n+        while (true) {\n+            switch (typeTree.getKind()) {\n+                case IDENTIFIER:\n+                case PRIMITIVE_TYPE:\n+                    if (declAnnos == null) {\n+                        return Collections.emptyList();\n+                    }\n+                    return declAnnos;\n+                case ANNOTATED_TYPE:\n+                    return ((AnnotatedTypeTree) typeTree).getAnnotations();\n+                case MEMBER_SELECT:\n+                    if (declAnnos == null) {\n+                        return Collections.emptyList();\n+                    }\n+                    typeTree = ((MemberSelectTree) typeTree).getExpression();\n+                    break;\n+                case PARAMETERIZED_TYPE:\n+                    typeTree = ((ParameterizedTypeTree) typeTree).getType();\n+                    break;\n+                default:\n+                    throw new BugInCF(\n+                            \"what typeTree? %s %s %s\",\n+                            typeTree.getKind(), typeTree.getClass(), typeTree);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Returns the leftmost type component of the argument. This is the type component that a type\n+     * annotation would apply to, if written on a declaration of a variable of the given type.\n+     *\n+     * @param typeTree a type\n+     * @return the leftmost type component of the argument\n+     */\n+    public static Tree leftmostType(Tree typeTree) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ad9ea38fd5ecd6234b11dc3978b133a8e87bd6f"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzIwNDgwOnYy", "diffSide": "RIGHT", "path": "javacutil/src/main/java/org/checkerframework/javacutil/TreeUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzozNzoxNlrOHfS__Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzozNzoxNlrOHfS__Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU3OTE5Nw==", "bodyText": "This should be getExplicitAnnotatonTrees.   Also, typeTree can't be any type tree.  For example, ArrayTrees can't be passed.  The documentation should be explicit about what trees may be passed. (And/or maybe just make it a private method in the class that uses it. Since it doesn't take all TypeTrees, I'm not sure it is of general use.)", "url": "https://github.com/typetools/checker-framework/pull/3755#discussion_r502579197", "createdAt": "2020-10-09T17:37:16Z", "author": {"login": "smillst"}, "path": "javacutil/src/main/java/org/checkerframework/javacutil/TreeUtils.java", "diffHunk": "@@ -1541,4 +1540,68 @@ public static boolean isWideningBinary(BinaryTree node) {\n                 return false;\n         }\n     }\n+\n+    /**\n+     * Returns the annotations explicitly written on the given type.\n+     *\n+     * @param declAnnos a list of annotations on a variable/method declaration; null if this type is\n+     *     not from such a location\n+     * @param typeTree the type whose annotations to return\n+     * @return the annotations explicitly written on the given type.\n+     */\n+    public static List<? extends AnnotationTree> getExplicitAnnotations(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ad9ea38fd5ecd6234b11dc3978b133a8e87bd6f"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzIxMTg0OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeVisitor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzozOTowOVrOHfTD8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzozOTowOVrOHfTD8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4MDIxMQ==", "bodyText": "Why not just make this a void method?", "url": "https://github.com/typetools/checker-framework/pull/3755#discussion_r502580211", "createdAt": "2020-10-09T17:39:09Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeVisitor.java", "diffHunk": "@@ -2257,6 +2265,29 @@ public Void visitThrow(ThrowTree node, Void p) {\n         return super.visitThrow(node, p);\n     }\n \n+    @Override\n+    public Void visitAnnotatedType(AnnotatedTypeTree node, Void p) {\n+        visitAnnotatedType(null, node, node);\n+        return super.visitAnnotatedType(node, p);\n+    }\n+\n+    /**\n+     * Checks an annotated type. Invoked by {@link #visitAnnotatedType(AnnotatedTypeTree, Void)} and\n+     * also by {@link #visitVariable}. Exists to prevent code duplication between the two. Checking\n+     * in visitVariable is needed because there isn't an AnnotatedTypeTree within a variable\n+     * declaration -- all the annotations are attached to the VariableTree.\n+     *\n+     * @param declAnnos the user-written type annotations on a variable/method declaration, if this\n+     *     type is from one; null otherwise\n+     * @param typeTree the type that the annotations apply to\n+     * @param node where to report errors/warnings\n+     * @return nothing\n+     */\n+    public Void visitAnnotatedType(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ad9ea38fd5ecd6234b11dc3978b133a8e87bd6f"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzIxNzkyOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeVisitor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzo0MTowM1rOHfTHuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNjoxNjoxMlrOHgFGdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4MTE3Ng==", "bodyText": "These aren't declaration annotations; they are the annotation trees stored as modifiers of a variable.", "url": "https://github.com/typetools/checker-framework/pull/3755#discussion_r502581176", "createdAt": "2020-10-09T17:41:03Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeVisitor.java", "diffHunk": "@@ -2257,6 +2265,29 @@ public Void visitThrow(ThrowTree node, Void p) {\n         return super.visitThrow(node, p);\n     }\n \n+    @Override\n+    public Void visitAnnotatedType(AnnotatedTypeTree node, Void p) {\n+        visitAnnotatedType(null, node, node);\n+        return super.visitAnnotatedType(node, p);\n+    }\n+\n+    /**\n+     * Checks an annotated type. Invoked by {@link #visitAnnotatedType(AnnotatedTypeTree, Void)} and\n+     * also by {@link #visitVariable}. Exists to prevent code duplication between the two. Checking\n+     * in visitVariable is needed because there isn't an AnnotatedTypeTree within a variable\n+     * declaration -- all the annotations are attached to the VariableTree.\n+     *\n+     * @param declAnnos the user-written type annotations on a variable/method declaration, if this", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ad9ea38fd5ecd6234b11dc3978b133a8e87bd6f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0ODczMg==", "bodyText": "Can you be explicit about what change you are suggesting?  I can't tell from your comment.\nI agree they are not declaration annotations; they are annotations stored in the declaration location.  I used declAnnos for that concept.  Are you asking for a different variable name, and if so what name do you suggest?\nI don't agree with your suggestion to change \"variable declaration\" to \"variable\".  Strictly speaking, they are not stored as modifiers of a variable, but as modifiers of a variable declaration (which is represented as a VariableTree).", "url": "https://github.com/typetools/checker-framework/pull/3755#discussion_r502748732", "createdAt": "2020-10-10T05:22:48Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeVisitor.java", "diffHunk": "@@ -2257,6 +2265,29 @@ public Void visitThrow(ThrowTree node, Void p) {\n         return super.visitThrow(node, p);\n     }\n \n+    @Override\n+    public Void visitAnnotatedType(AnnotatedTypeTree node, Void p) {\n+        visitAnnotatedType(null, node, node);\n+        return super.visitAnnotatedType(node, p);\n+    }\n+\n+    /**\n+     * Checks an annotated type. Invoked by {@link #visitAnnotatedType(AnnotatedTypeTree, Void)} and\n+     * also by {@link #visitVariable}. Exists to prevent code duplication between the two. Checking\n+     * in visitVariable is needed because there isn't an AnnotatedTypeTree within a variable\n+     * declaration -- all the annotations are attached to the VariableTree.\n+     *\n+     * @param declAnnos the user-written type annotations on a variable/method declaration, if this", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4MTE3Ng=="}, "originalCommit": {"oid": "3ad9ea38fd5ecd6234b11dc3978b133a8e87bd6f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwMDA1NQ==", "bodyText": "When I see declAnnos, I think thats a collection/set of AnnotationMirrors that are declaration annotations, as in annotation without @Target(ElementType.TYPE_USE).  I would change declAnnos to annoTrees.  Also, the annotations could be declarations annotations or type annotations, so I would change the user-written type annotations to just the user-written annotations.", "url": "https://github.com/typetools/checker-framework/pull/3755#discussion_r503400055", "createdAt": "2020-10-12T16:16:12Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeVisitor.java", "diffHunk": "@@ -2257,6 +2265,29 @@ public Void visitThrow(ThrowTree node, Void p) {\n         return super.visitThrow(node, p);\n     }\n \n+    @Override\n+    public Void visitAnnotatedType(AnnotatedTypeTree node, Void p) {\n+        visitAnnotatedType(null, node, node);\n+        return super.visitAnnotatedType(node, p);\n+    }\n+\n+    /**\n+     * Checks an annotated type. Invoked by {@link #visitAnnotatedType(AnnotatedTypeTree, Void)} and\n+     * also by {@link #visitVariable}. Exists to prevent code duplication between the two. Checking\n+     * in visitVariable is needed because there isn't an AnnotatedTypeTree within a variable\n+     * declaration -- all the annotations are attached to the VariableTree.\n+     *\n+     * @param declAnnos the user-written type annotations on a variable/method declaration, if this", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4MTE3Ng=="}, "originalCommit": {"oid": "3ad9ea38fd5ecd6234b11dc3978b133a8e87bd6f"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzIyMzIyOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeVisitor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzo0Mjo0OFrOHfTK8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzo0Mjo0OFrOHfTK8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4MjAwMA==", "bodyText": "The Javadoc here should mention #visitAnnotatedType(List<? extends AnnotationTree>, Tree, Tree).", "url": "https://github.com/typetools/checker-framework/pull/3755#discussion_r502582000", "createdAt": "2020-10-09T17:42:48Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeVisitor.java", "diffHunk": "@@ -2257,6 +2265,29 @@ public Void visitThrow(ThrowTree node, Void p) {\n         return super.visitThrow(node, p);\n     }\n \n+    @Override\n+    public Void visitAnnotatedType(AnnotatedTypeTree node, Void p) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ad9ea38fd5ecd6234b11dc3978b133a8e87bd6f"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzIyNjEzOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeVisitor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzo0Mzo0NlrOHfTMvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzo0Mzo0NlrOHfTMvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4MjQ2Mg==", "bodyText": "I don't understand why ArrayTypes are treated differently.", "url": "https://github.com/typetools/checker-framework/pull/3755#discussion_r502582462", "createdAt": "2020-10-09T17:43:46Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeVisitor.java", "diffHunk": "@@ -1156,6 +1158,12 @@ public Void visitTypeParameter(TypeParameterTree node, Void p) {\n     public Void visitVariable(VariableTree node, Void p) {\n         warnAboutTypeAnnotationsTooEarly(node, node.getModifiers());\n \n+        Tree typeTree = node.getType();\n+        while (typeTree.getKind() == Tree.Kind.ARRAY_TYPE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ad9ea38fd5ecd6234b11dc3978b133a8e87bd6f"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzI3MTY3OnYy", "diffSide": "RIGHT", "path": "checker/src/main/java/org/checkerframework/checker/nullness/NullnessVisitor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzo1ODo0MlrOHfTpDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzo1ODo0MlrOHfTpDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4OTcxMQ==", "bodyText": "This is an unannotatedTypeTree.", "url": "https://github.com/typetools/checker-framework/pull/3755#discussion_r502589711", "createdAt": "2020-10-09T17:58:42Z", "author": {"login": "smillst"}, "path": "checker/src/main/java/org/checkerframework/checker/nullness/NullnessVisitor.java", "diffHunk": "@@ -663,42 +667,48 @@ public Void visitAnnotation(AnnotationTree node, Void p) {\n         return null;\n     }\n \n-    // This is needed in addition to visitAnnotatedType because there isn't an AnnotatedTypeTree\n-    // within a variable declaration -- all the annotations are attached to the VariableTree.\n     @Override\n-    public Void visitVariable(VariableTree node, Void p) {\n-        TypeMirror tm = TreeUtils.typeOf(node.getType());\n-        if (TypesUtils.isPrimitive(tm)) {\n-            if (atypeFactory.containsNullnessAnnotation(node.getModifiers().getAnnotations())) {\n+    public Void visitAnnotatedType(\n+            @Nullable List<? extends AnnotationTree> declAnnos, Tree typeTree, Tree node) {\n+        Tree unannotatedType = unannotatedType(typeTree);\n+\n+        if (unannotatedType.getKind() == Tree.Kind.PRIMITIVE_TYPE) {\n+            if (atypeFactory.containsNullnessAnnotation(declAnnos, typeTree)) {\n                 checker.reportError(node, \"nullness.on.primitive\");\n                 return null;\n             }\n-        } else if (tm.getKind() == TypeKind.ARRAY) {\n-            Tree innermostComponentTypeTree = node.getType();\n-            while (innermostComponentTypeTree.getKind() == Tree.Kind.ARRAY_TYPE) {\n-                innermostComponentTypeTree = ((ArrayTypeTree) innermostComponentTypeTree).getType();\n-            }\n-            if (innermostComponentTypeTree.getKind() == Tree.Kind.PRIMITIVE_TYPE\n-                    && atypeFactory.containsNullnessAnnotation(\n-                            node.getModifiers().getAnnotations())) {\n-                checker.reportError(innermostComponentTypeTree, \"nullness.on.primitive\");\n-                return null;\n+        }\n+\n+        if (declAnnos != null) {\n+            switch (unannotatedType.getKind()) {\n+                case MEMBER_SELECT:\n+                    if (atypeFactory.containsNullnessAnnotation(\n+                            declAnnos, ((MemberSelectTree) unannotatedType).getExpression())) {\n+                        checker.reportError(\n+                                TreeUtils.leftmostType(unannotatedType), \"nullness.on.outer\");\n+                    }\n+                    break;\n+                default:\n+                    break;\n             }\n         }\n \n-        return super.visitVariable(node, p);\n+        return super.visitAnnotatedType(declAnnos, typeTree, node);\n     }\n \n-    @Override\n-    public Void visitAnnotatedType(AnnotatedTypeTree node, Void p) {\n-        TypeMirror tm = TreeUtils.typeOf(node);\n-        if (TypesUtils.isPrimitive(tm)) {\n-            if (atypeFactory.containsNullnessAnnotation(node.getAnnotations())) {\n-                checker.reportError(node, \"nullness.on.primitive\");\n-                return null;\n-            }\n+    /**\n+     * If the argument is a tree of kind ANNOTATED_TYPE, return its unannotated version. Otherwise,\n+     * return the argument.\n+     *\n+     * @param typeTree a tree\n+     * @return the tree without annotations\n+     */\n+    private Tree unannotatedType(Tree typeTree) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ad9ea38fd5ecd6234b11dc3978b133a8e87bd6f"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzM0MTM5OnYy", "diffSide": "RIGHT", "path": "checker/tests/nullness/ScopingConstruct.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxODoyMDo1NlrOHfUTLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxODoyMDo1NlrOHfUTLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjYwMDQ5NQ==", "bodyText": "There is currently no error on this line.  Should there be?", "url": "https://github.com/typetools/checker-framework/pull/3755#discussion_r502600495", "createdAt": "2020-10-09T18:20:56Z", "author": {"login": "smillst"}, "path": "checker/tests/nullness/ScopingConstruct.java", "diffHunk": "@@ -0,0 +1,28 @@\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+\n+@SuppressWarnings(\"initialization.fields.uninitialized\")\n+class ScopingConstruct {\n+\n+    // TODO: add nested classes within these two?\n+    static class StaticNested {}\n+\n+    class Inner {}\n+\n+    @Nullable StaticNested nsn;\n+\n+    @Nullable Inner ni;\n+\n+    // This is a Java error.\n+    // @Nullable ScopingConstruct.StaticNested nscsn;\n+\n+    ScopingConstruct.@Nullable StaticNested scnsn;\n+\n+    // :: error: (nullness.on.outer)\n+    @Nullable ScopingConstruct.Inner nsci;\n+\n+    ScopingConstruct.@Nullable Inner scni;\n+\n+    // :: error: (nullness.on.outer)\n+    @Nullable ScopingConstruct.Inner @Nullable [] array;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a27cebab67e3cb1cfe22daffc735fc0e4d6e0c35"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzA1NDc1OnYy", "diffSide": "RIGHT", "path": "javacutil/src/main/java/org/checkerframework/javacutil/TreeUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNjoyMjo1MFrOHgFUuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNjoyMjo1MFrOHgFUuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwMzcwNQ==", "bodyText": "I would also change declAnnos to annoTree here, too.", "url": "https://github.com/typetools/checker-framework/pull/3755#discussion_r503403705", "createdAt": "2020-10-12T16:22:50Z", "author": {"login": "smillst"}, "path": "javacutil/src/main/java/org/checkerframework/javacutil/TreeUtils.java", "diffHunk": "@@ -1541,4 +1540,47 @@ public static boolean isWideningBinary(BinaryTree node) {\n                 return false;\n         }\n     }\n+\n+    /**\n+     * Returns the annotations explicitly written on the given type.\n+     *\n+     * @param declAnnos annotations written before a variable/method declaration; null if this type\n+     *     is not from such a location\n+     * @param typeTree the type whose annotations to return\n+     * @return the annotations explicitly written on the given type.\n+     */\n+    public static List<? extends AnnotationTree> getExplicitAnnotationTrees(\n+            List<? extends AnnotationTree> declAnnos, Tree typeTree) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c43a51ea8a0000d5fd266f70749970cf1b5f8363"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzA4Mjg5OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeVisitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNjozMToyNlrOHgFmAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODoxNDowN1rOHgItpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwODEyOA==", "bodyText": "Checks an annotated type.\n\nIs it all annotated types, or could we still be missing some?  It's fine if you aren't confident, I'm just curious.", "url": "https://github.com/typetools/checker-framework/pull/3755#discussion_r503408128", "createdAt": "2020-10-12T16:31:26Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeVisitor.java", "diffHunk": "@@ -2257,6 +2264,33 @@ public Void visitThrow(ThrowTree node, Void p) {\n         return super.visitThrow(node, p);\n     }\n \n+    /**\n+     * Rather than overriding this method, clients should often override {@link\n+     * #visitAnnotatedType(List,Tree)}. That method also handles the case of annotations at the\n+     * beginning of a variable or method declaration. javac parses all those annotations as being on\n+     * the variable or method declaration, even though the ones that are type annotations logically\n+     * belong to the variable type or method return type.\n+     */\n+    @Override\n+    public Void visitAnnotatedType(AnnotatedTypeTree node, Void p) {\n+        visitAnnotatedType(null, node);\n+        return super.visitAnnotatedType(node, p);\n+    }\n+\n+    /**\n+     * Checks an annotated type. Invoked by {@link #visitAnnotatedType(AnnotatedTypeTree, Void)} and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c43a51ea8a0000d5fd266f70749970cf1b5f8363"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ1OTIzOA==", "bodyText": "I'm pretty sure it is invoked for all annotated types.", "url": "https://github.com/typetools/checker-framework/pull/3755#discussion_r503459238", "createdAt": "2020-10-12T18:14:07Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeVisitor.java", "diffHunk": "@@ -2257,6 +2264,33 @@ public Void visitThrow(ThrowTree node, Void p) {\n         return super.visitThrow(node, p);\n     }\n \n+    /**\n+     * Rather than overriding this method, clients should often override {@link\n+     * #visitAnnotatedType(List,Tree)}. That method also handles the case of annotations at the\n+     * beginning of a variable or method declaration. javac parses all those annotations as being on\n+     * the variable or method declaration, even though the ones that are type annotations logically\n+     * belong to the variable type or method return type.\n+     */\n+    @Override\n+    public Void visitAnnotatedType(AnnotatedTypeTree node, Void p) {\n+        visitAnnotatedType(null, node);\n+        return super.visitAnnotatedType(node, p);\n+    }\n+\n+    /**\n+     * Checks an annotated type. Invoked by {@link #visitAnnotatedType(AnnotatedTypeTree, Void)} and", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwODEyOA=="}, "originalCommit": {"oid": "c43a51ea8a0000d5fd266f70749970cf1b5f8363"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 975, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}