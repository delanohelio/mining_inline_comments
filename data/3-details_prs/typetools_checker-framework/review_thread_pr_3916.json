{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1MDM3NjU3", "number": 3916, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNDoxNTowNFrOE8PA8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNDoxNTowNFrOE8PA8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTk2MDE2OnYy", "diffSide": "RIGHT", "path": "docs/manual/creating-a-checker.tex", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNDoxNTowNFrOH4PPbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTowMDoxMFrOH4RQHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODczMjAxNA==", "bodyText": "Wouldn't it be more consistent to also recommend Tree.getKind() for Trees? Did you find any recommendation to use instanceof for Trees?\n#3901 changes the code to use Tree.getKind() and if we had a clear recommendation, we could check for consistent use automatically.", "url": "https://github.com/typetools/checker-framework/pull/3916#discussion_r528732014", "createdAt": "2020-11-23T14:15:04Z", "author": {"login": "wmdietl"}, "path": "docs/manual/creating-a-checker.tex", "diffHunk": "@@ -2327,12 +2327,14 @@\n help you to create your checker.\n \n \\emph{Type-checking}:\n-Do not use \\code{instanceof} to determine the class of the object,\n+Do not use \\code{instanceof} to determine the class of a \\<TypeMirror> or \\<Element>,\n because you cannot necessarily predict the run-time type of the object that\n-implements an interface.  Instead, use the \\code{getKind()} method.  The\n-method returns \\refModelclass{type}{TypeKind},\n-\\refModelclass{element}{ElementKind}, and \\refTreeclass{tree}{Tree.Kind}\n-for the three interfaces, respectively.\n+implements an interface.  Instead, use the\n+\\sunjavadoc{java.compiler/javax/lang/model/type/TypeMirror.html\\#getKind()}{TypeMirror.getKind()}\n+or\n+\\sunjavadoc{java.compiler/javax/lang/model/element/Element.html\\#getKind()}{Element.getKind()}\n+method.\n+For \\<Tree>s, you can use either \\<Tree.getKind()> or \\<instanceof>.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcca0b3d475caed3b825a59f804e2c9008a1dd3b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc1MDQ3MA==", "bodyText": "It would be possible to recommend using Tree.getKind().\nPro:\n\nmore consistent with other model interfaces like Element.\n\nCon:\n\nrequires a change to code, which currently uses instanceof.  (#3901 is the change)\ncode becomes less clear.  The current instanceof tests always guard a cast.  It is idiomatic to do instanceof then a cast, and such code is obviously correct.  Using getKind() requires a reader to understand the relationship between the kinds and the classes.  There is already a high overhead to someone reading the code to understand all the different interfaces, and using getKind() more would increase it just a little bit more.\nnot necessary, since there is only one implementation of Tree\nnot recommended anywhere:  I found no guidance to use Tree.getKind().", "url": "https://github.com/typetools/checker-framework/pull/3916#discussion_r528750470", "createdAt": "2020-11-23T14:40:52Z", "author": {"login": "mernst"}, "path": "docs/manual/creating-a-checker.tex", "diffHunk": "@@ -2327,12 +2327,14 @@\n help you to create your checker.\n \n \\emph{Type-checking}:\n-Do not use \\code{instanceof} to determine the class of the object,\n+Do not use \\code{instanceof} to determine the class of a \\<TypeMirror> or \\<Element>,\n because you cannot necessarily predict the run-time type of the object that\n-implements an interface.  Instead, use the \\code{getKind()} method.  The\n-method returns \\refModelclass{type}{TypeKind},\n-\\refModelclass{element}{ElementKind}, and \\refTreeclass{tree}{Tree.Kind}\n-for the three interfaces, respectively.\n+implements an interface.  Instead, use the\n+\\sunjavadoc{java.compiler/javax/lang/model/type/TypeMirror.html\\#getKind()}{TypeMirror.getKind()}\n+or\n+\\sunjavadoc{java.compiler/javax/lang/model/element/Element.html\\#getKind()}{Element.getKind()}\n+method.\n+For \\<Tree>s, you can use either \\<Tree.getKind()> or \\<instanceof>.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODczMjAxNA=="}, "originalCommit": {"oid": "fcca0b3d475caed3b825a59f804e2c9008a1dd3b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc2NDk1OA==", "bodyText": "#3901 is already done, so that doesn't seem like a con.\nThe second and third con equally apply to Element and TypeMirror, so following a consistent style would actually reduce the mental overhead, by applying a simple rule: if the interface provides a getKind() method, use it. Then one doesn't need to think about whether this is an Element/TypeMirror/Tree and has a consistent recommendation.", "url": "https://github.com/typetools/checker-framework/pull/3916#discussion_r528764958", "createdAt": "2020-11-23T15:00:10Z", "author": {"login": "wmdietl"}, "path": "docs/manual/creating-a-checker.tex", "diffHunk": "@@ -2327,12 +2327,14 @@\n help you to create your checker.\n \n \\emph{Type-checking}:\n-Do not use \\code{instanceof} to determine the class of the object,\n+Do not use \\code{instanceof} to determine the class of a \\<TypeMirror> or \\<Element>,\n because you cannot necessarily predict the run-time type of the object that\n-implements an interface.  Instead, use the \\code{getKind()} method.  The\n-method returns \\refModelclass{type}{TypeKind},\n-\\refModelclass{element}{ElementKind}, and \\refTreeclass{tree}{Tree.Kind}\n-for the three interfaces, respectively.\n+implements an interface.  Instead, use the\n+\\sunjavadoc{java.compiler/javax/lang/model/type/TypeMirror.html\\#getKind()}{TypeMirror.getKind()}\n+or\n+\\sunjavadoc{java.compiler/javax/lang/model/element/Element.html\\#getKind()}{Element.getKind()}\n+method.\n+For \\<Tree>s, you can use either \\<Tree.getKind()> or \\<instanceof>.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODczMjAxNA=="}, "originalCommit": {"oid": "fcca0b3d475caed3b825a59f804e2c9008a1dd3b"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 926, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}