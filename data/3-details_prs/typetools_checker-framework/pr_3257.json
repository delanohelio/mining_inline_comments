{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNDM4Njc0", "number": 3257, "title": "Create stub files from Java source files", "bodyText": "Originally developed by @zhangjiangqige at https://github.com/zhangjiangqige/try-javaparser/blob/master/src/main/java/org/zhangjiangqige/Minimizer.java and mentioned in #3010.\nSome refactorings and improved documentation compared to original.\nDoes JavaStubifier sound reasonable? Better name suggestions welcome!\n@smillst I've run this on checker/dist/jdk/jdk11 and it worked as expected. As discussed, could you separately look into integrating this into the build? We should try integration into the build even before Java 8 usage.\nWhen merging, keep the co-author line below:\nCo-authored-by: zhangjiangqige zhangjiangqige@gmail.com", "createdAt": "2020-04-14T22:09:05Z", "url": "https://github.com/typetools/checker-framework/pull/3257", "merged": true, "mergeCommit": {"oid": "0df0d8c21133366aedbfcc830a85f4757ee0e418"}, "closed": true, "closedAt": "2020-04-24T14:54:20Z", "author": {"login": "wmdietl"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcXq2_WgH2gAyNDAzNDM4Njc0OmZjNGRiZjA2Y2M2OGJmY2QyZDA1YzY4ZjUxMzdhODdmY2YwNzQ2ODg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcajyBvAH2gAyNDAzNDM4Njc0OjMyZGYzMTAyMmRkZjY5NmZkMWUyNTkzZjM5MDQyNDBlOGJmYzk5NDU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fc4dbf06cc68bfcd2d05c68f5137a87fcf074688", "author": {"user": {"login": "wmdietl", "name": "Werner Dietl"}}, "url": "https://github.com/typetools/checker-framework/commit/fc4dbf06cc68bfcd2d05c68f5137a87fcf074688", "committedDate": "2020-04-14T22:02:25Z", "message": "Create stub files from Java source files.\n\nCo-authored-by: zhangjiangqige <zhangjiangqige@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNTM4NTI0", "url": "https://github.com/typetools/checker-framework/pull/3257#pullrequestreview-393538524", "createdAt": "2020-04-15T07:56:53Z", "commit": {"oid": "fc4dbf06cc68bfcd2d05c68f5137a87fcf074688"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNzo1Njo1M1rOGFuF-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODowMzoxNlrOGFuUcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1MTI1OQ==", "bodyText": "This comment doesn't convey what the routine does.  Please make it more specific.  The same feedback applies to other comments in the file.", "url": "https://github.com/typetools/checker-framework/pull/3257#discussion_r408651259", "createdAt": "2020-04-15T07:56:53Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/stub/JavaStubifier.java", "diffHunk": "@@ -0,0 +1,181 @@\n+package org.checkerframework.framework.stub;\n+\n+import com.github.javaparser.ParseResult;\n+import com.github.javaparser.ParserConfiguration;\n+import com.github.javaparser.ast.*;\n+import com.github.javaparser.ast.body.*;\n+import com.github.javaparser.ast.expr.MemberValuePair;\n+import com.github.javaparser.ast.expr.NormalAnnotationExpr;\n+import com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAccessModifiers;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.visitor.ModifierVisitor;\n+import com.github.javaparser.utils.ParserCollectionStrategy;\n+import com.github.javaparser.utils.ProjectRoot;\n+import com.github.javaparser.utils.SourceRoot;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+/**\n+ * Process Java source files in a directory to produce minimal stub files, by removing:\n+ *\n+ * <ol>\n+ *   <li>everything that is private or package-private,\n+ *   <li>all comments, except for an initial copyright header,\n+ *   <li>all method bodies,\n+ *   <li>all field initializers,\n+ *   <li>all initializer blocks,\n+ *   <li>attributes to the {@code Deprecated} annotation (to be Java 8 compatible).\n+ * </ol>\n+ */\n+public class JavaStubifier {\n+    /**\n+     * Processes each provided command-line argument.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc4dbf06cc68bfcd2d05c68f5137a87fcf074688"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1MTMwMA==", "bodyText": "Please say what they are: one or more directories.", "url": "https://github.com/typetools/checker-framework/pull/3257#discussion_r408651300", "createdAt": "2020-04-15T07:56:56Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/stub/JavaStubifier.java", "diffHunk": "@@ -0,0 +1,181 @@\n+package org.checkerframework.framework.stub;\n+\n+import com.github.javaparser.ParseResult;\n+import com.github.javaparser.ParserConfiguration;\n+import com.github.javaparser.ast.*;\n+import com.github.javaparser.ast.body.*;\n+import com.github.javaparser.ast.expr.MemberValuePair;\n+import com.github.javaparser.ast.expr.NormalAnnotationExpr;\n+import com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAccessModifiers;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.visitor.ModifierVisitor;\n+import com.github.javaparser.utils.ParserCollectionStrategy;\n+import com.github.javaparser.utils.ProjectRoot;\n+import com.github.javaparser.utils.SourceRoot;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+/**\n+ * Process Java source files in a directory to produce minimal stub files, by removing:\n+ *\n+ * <ol>\n+ *   <li>everything that is private or package-private,\n+ *   <li>all comments, except for an initial copyright header,\n+ *   <li>all method bodies,\n+ *   <li>all field initializers,\n+ *   <li>all initializer blocks,\n+ *   <li>attributes to the {@code Deprecated} annotation (to be Java 8 compatible).\n+ * </ol>\n+ */\n+public class JavaStubifier {\n+    /**\n+     * Processes each provided command-line argument.\n+     *\n+     * @param args command-line arguments", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc4dbf06cc68bfcd2d05c68f5137a87fcf074688"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1MjA3Mw==", "bodyText": "What is a \"source root\"?\n(Also, here and elsewhere clarify \"process\".", "url": "https://github.com/typetools/checker-framework/pull/3257#discussion_r408652073", "createdAt": "2020-04-15T07:58:16Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/stub/JavaStubifier.java", "diffHunk": "@@ -0,0 +1,181 @@\n+package org.checkerframework.framework.stub;\n+\n+import com.github.javaparser.ParseResult;\n+import com.github.javaparser.ParserConfiguration;\n+import com.github.javaparser.ast.*;\n+import com.github.javaparser.ast.body.*;\n+import com.github.javaparser.ast.expr.MemberValuePair;\n+import com.github.javaparser.ast.expr.NormalAnnotationExpr;\n+import com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAccessModifiers;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.visitor.ModifierVisitor;\n+import com.github.javaparser.utils.ParserCollectionStrategy;\n+import com.github.javaparser.utils.ProjectRoot;\n+import com.github.javaparser.utils.SourceRoot;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+/**\n+ * Process Java source files in a directory to produce minimal stub files, by removing:\n+ *\n+ * <ol>\n+ *   <li>everything that is private or package-private,\n+ *   <li>all comments, except for an initial copyright header,\n+ *   <li>all method bodies,\n+ *   <li>all field initializers,\n+ *   <li>all initializer blocks,\n+ *   <li>attributes to the {@code Deprecated} annotation (to be Java 8 compatible).\n+ * </ol>\n+ */\n+public class JavaStubifier {\n+    /**\n+     * Processes each provided command-line argument.\n+     *\n+     * @param args command-line arguments\n+     */\n+    public static void main(String[] args) {\n+        if (args.length < 1) {\n+            System.err.println(\"Usage: provide one or more directory names to process\");\n+            System.exit(1);\n+        }\n+        for (String dir : args) {\n+            process(dir);\n+        }\n+    }\n+\n+    /**\n+     * Process the given directory.\n+     *\n+     * @param dir directory to process\n+     */\n+    private static void process(String dir) {\n+        Path root = Paths.get(dir);\n+\n+        ParserConfiguration conf = new ParserConfiguration();\n+        MinimizationVisitor sm = new MinimizationVisitor();\n+\n+        ProjectRoot projectRoot = new ParserCollectionStrategy().collect(root);\n+        projectRoot\n+                .getSourceRoots()\n+                .forEach(\n+                        sourceRoot -> {\n+                            try {\n+                                sourceRoot.parse(\"\", conf, new MinimizationCallback(sm));\n+                            } catch (IOException e) {\n+                                System.err.println(\"IOException: \" + e);\n+                            }\n+                        });\n+    }\n+\n+    /** Callback to process one source root. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc4dbf06cc68bfcd2d05c68f5137a87fcf074688"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1Mjk1Ng==", "bodyText": "Nit: I would rename Minimization to Minimize or Minimizer throughout, to make the terminology shorter and more active.", "url": "https://github.com/typetools/checker-framework/pull/3257#discussion_r408652956", "createdAt": "2020-04-15T07:59:47Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/stub/JavaStubifier.java", "diffHunk": "@@ -0,0 +1,181 @@\n+package org.checkerframework.framework.stub;\n+\n+import com.github.javaparser.ParseResult;\n+import com.github.javaparser.ParserConfiguration;\n+import com.github.javaparser.ast.*;\n+import com.github.javaparser.ast.body.*;\n+import com.github.javaparser.ast.expr.MemberValuePair;\n+import com.github.javaparser.ast.expr.NormalAnnotationExpr;\n+import com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAccessModifiers;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.visitor.ModifierVisitor;\n+import com.github.javaparser.utils.ParserCollectionStrategy;\n+import com.github.javaparser.utils.ProjectRoot;\n+import com.github.javaparser.utils.SourceRoot;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+/**\n+ * Process Java source files in a directory to produce minimal stub files, by removing:\n+ *\n+ * <ol>\n+ *   <li>everything that is private or package-private,\n+ *   <li>all comments, except for an initial copyright header,\n+ *   <li>all method bodies,\n+ *   <li>all field initializers,\n+ *   <li>all initializer blocks,\n+ *   <li>attributes to the {@code Deprecated} annotation (to be Java 8 compatible).\n+ * </ol>\n+ */\n+public class JavaStubifier {\n+    /**\n+     * Processes each provided command-line argument.\n+     *\n+     * @param args command-line arguments\n+     */\n+    public static void main(String[] args) {\n+        if (args.length < 1) {\n+            System.err.println(\"Usage: provide one or more directory names to process\");\n+            System.exit(1);\n+        }\n+        for (String dir : args) {\n+            process(dir);\n+        }\n+    }\n+\n+    /**\n+     * Process the given directory.\n+     *\n+     * @param dir directory to process\n+     */\n+    private static void process(String dir) {\n+        Path root = Paths.get(dir);\n+\n+        ParserConfiguration conf = new ParserConfiguration();\n+        MinimizationVisitor sm = new MinimizationVisitor();\n+\n+        ProjectRoot projectRoot = new ParserCollectionStrategy().collect(root);\n+        projectRoot\n+                .getSourceRoots()\n+                .forEach(\n+                        sourceRoot -> {\n+                            try {\n+                                sourceRoot.parse(\"\", conf, new MinimizationCallback(sm));\n+                            } catch (IOException e) {\n+                                System.err.println(\"IOException: \" + e);\n+                            }\n+                        });\n+    }\n+\n+    /** Callback to process one source root. */\n+    private static class MinimizationCallback implements SourceRoot.Callback {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc4dbf06cc68bfcd2d05c68f5137a87fcf074688"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1NDk2MA==", "bodyText": "Does it do so in place?", "url": "https://github.com/typetools/checker-framework/pull/3257#discussion_r408654960", "createdAt": "2020-04-15T08:03:16Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/stub/JavaStubifier.java", "diffHunk": "@@ -0,0 +1,181 @@\n+package org.checkerframework.framework.stub;\n+\n+import com.github.javaparser.ParseResult;\n+import com.github.javaparser.ParserConfiguration;\n+import com.github.javaparser.ast.*;\n+import com.github.javaparser.ast.body.*;\n+import com.github.javaparser.ast.expr.MemberValuePair;\n+import com.github.javaparser.ast.expr.NormalAnnotationExpr;\n+import com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAccessModifiers;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.visitor.ModifierVisitor;\n+import com.github.javaparser.utils.ParserCollectionStrategy;\n+import com.github.javaparser.utils.ProjectRoot;\n+import com.github.javaparser.utils.SourceRoot;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+/**\n+ * Process Java source files in a directory to produce minimal stub files, by removing:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc4dbf06cc68bfcd2d05c68f5137a87fcf074688"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfb768f606ca79097a121ce48def4e1e02bac2b2", "author": {"user": {"login": "wmdietl", "name": "Werner Dietl"}}, "url": "https://github.com/typetools/checker-framework/commit/cfb768f606ca79097a121ce48def4e1e02bac2b2", "committedDate": "2020-04-15T21:45:34Z", "message": "Merge branch 'master' of github.com:typetools/checker-framework into java-minimizer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11786e844af937a1349d935494d61766e07cebb9", "author": {"user": {"login": "smillst", "name": "Suzanne Millstein"}}, "url": "https://github.com/typetools/checker-framework/commit/11786e844af937a1349d935494d61766e07cebb9", "committedDate": "2020-04-19T17:12:30Z", "message": "Merge remote-tracking branch 'origin/master' into java-minimizer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2MDQyMDk0", "url": "https://github.com/typetools/checker-framework/pull/3257#pullrequestreview-396042094", "createdAt": "2020-04-19T17:24:09Z", "commit": {"oid": "11786e844af937a1349d935494d61766e07cebb9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxNzoyNDowOVrOGH6dhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxNzoyNDowOVrOGH6dhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk1MTA0NQ==", "bodyText": "Can you either remove this or add a flag to turn it on/off?", "url": "https://github.com/typetools/checker-framework/pull/3257#discussion_r410951045", "createdAt": "2020-04-19T17:24:09Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/framework/stub/JavaStubifier.java", "diffHunk": "@@ -0,0 +1,181 @@\n+package org.checkerframework.framework.stub;\n+\n+import com.github.javaparser.ParseResult;\n+import com.github.javaparser.ParserConfiguration;\n+import com.github.javaparser.ast.*;\n+import com.github.javaparser.ast.body.*;\n+import com.github.javaparser.ast.expr.MemberValuePair;\n+import com.github.javaparser.ast.expr.NormalAnnotationExpr;\n+import com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAccessModifiers;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.visitor.ModifierVisitor;\n+import com.github.javaparser.utils.ParserCollectionStrategy;\n+import com.github.javaparser.utils.ProjectRoot;\n+import com.github.javaparser.utils.SourceRoot;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+/**\n+ * Process Java source files in a directory to produce minimal stub files, by removing:\n+ *\n+ * <ol>\n+ *   <li>everything that is private or package-private,\n+ *   <li>all comments, except for an initial copyright header,\n+ *   <li>all method bodies,\n+ *   <li>all field initializers,\n+ *   <li>all initializer blocks,\n+ *   <li>attributes to the {@code Deprecated} annotation (to be Java 8 compatible).\n+ * </ol>\n+ */\n+public class JavaStubifier {\n+    /**\n+     * Processes each provided command-line argument.\n+     *\n+     * @param args command-line arguments\n+     */\n+    public static void main(String[] args) {\n+        if (args.length < 1) {\n+            System.err.println(\"Usage: provide one or more directory names to process\");\n+            System.exit(1);\n+        }\n+        for (String dir : args) {\n+            process(dir);\n+        }\n+    }\n+\n+    /**\n+     * Process the given directory.\n+     *\n+     * @param dir directory to process\n+     */\n+    private static void process(String dir) {\n+        Path root = Paths.get(dir);\n+\n+        ParserConfiguration conf = new ParserConfiguration();\n+        MinimizationVisitor sm = new MinimizationVisitor();\n+\n+        ProjectRoot projectRoot = new ParserCollectionStrategy().collect(root);\n+        projectRoot\n+                .getSourceRoots()\n+                .forEach(\n+                        sourceRoot -> {\n+                            try {\n+                                sourceRoot.parse(\"\", conf, new MinimizationCallback(sm));\n+                            } catch (IOException e) {\n+                                System.err.println(\"IOException: \" + e);\n+                            }\n+                        });\n+    }\n+\n+    /** Callback to process one source root. */\n+    private static class MinimizationCallback implements SourceRoot.Callback {\n+        private final MinimizationVisitor sm;\n+\n+        public MinimizationCallback(MinimizationVisitor sm) {\n+            this.sm = sm;\n+        }\n+\n+        @Override\n+        public Result process(\n+                Path localPath, Path absolutePath, ParseResult<CompilationUnit> result) {\n+            Result res = Result.SAVE;\n+            System.out.printf(\"Minimizing %s%n\", absolutePath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11786e844af937a1349d935494d61766e07cebb9"}, "originalPosition": 85}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f7e0f14e034f8155b8b71fc58ae63013fe5f727", "author": {"user": {"login": "wmdietl", "name": "Werner Dietl"}}, "url": "https://github.com/typetools/checker-framework/commit/8f7e0f14e034f8155b8b71fc58ae63013fe5f727", "committedDate": "2020-04-19T17:43:25Z", "message": "Merge branch 'java-minimizer' of github.com:wmdietl/checker-framework into java-minimizer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44270ab5329ed84e45eae2b7e144cd77ac07405d", "author": {"user": {"login": "wmdietl", "name": "Werner Dietl"}}, "url": "https://github.com/typetools/checker-framework/commit/44270ab5329ed84e45eae2b7e144cd77ac07405d", "committedDate": "2020-04-19T18:19:10Z", "message": "Add documentation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e619bf16bab0af7dea6d29a8cc93fccbff7674df", "author": {"user": {"login": "wmdietl", "name": "Werner Dietl"}}, "url": "https://github.com/typetools/checker-framework/commit/e619bf16bab0af7dea6d29a8cc93fccbff7674df", "committedDate": "2020-04-19T18:21:34Z", "message": "Simplify code. Improve documentation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc3973ba00b106e2d920ef59a313b2b18903dea5", "author": {"user": {"login": "smillst", "name": "Suzanne Millstein"}}, "url": "https://github.com/typetools/checker-framework/commit/bc3973ba00b106e2d920ef59a313b2b18903dea5", "committedDate": "2020-04-19T19:11:39Z", "message": "Rename the resource directory jdk11 to annotated-jdk. (#3262)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "daff97129d7e3c7ae4e4d218f7c8de567beb1b83", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/daff97129d7e3c7ae4e4d218f7c8de567beb1b83", "committedDate": "2020-04-19T19:11:39Z", "message": "Make field protected because it is referenced from Javadoc of protected method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc70a04b851ef4faeb4c646f83555005235f56b8", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/bc70a04b851ef4faeb4c646f83555005235f56b8", "committedDate": "2020-04-19T19:11:39Z", "message": "Remove broken link"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fb51f0fc52aefa117875da98e3fbd6a11330805", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/4fb51f0fc52aefa117875da98e3fbd6a11330805", "committedDate": "2020-04-19T19:11:39Z", "message": "Update IntelliJ IDEA instructions (fix broken URLs)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbcf5ef486f122ad2e9e8169ae9dba242ac20f9a", "author": {"user": {"login": "smillst", "name": "Suzanne Millstein"}}, "url": "https://github.com/typetools/checker-framework/commit/fbcf5ef486f122ad2e9e8169ae9dba242ac20f9a", "committedDate": "2020-04-19T19:12:27Z", "message": "Use JavaStubifier to minimize the annotated jdk."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c7882f94ab2fb720d9dba83232b403c3469de9c", "author": {"user": {"login": "smillst", "name": "Suzanne Millstein"}}, "url": "https://github.com/typetools/checker-framework/commit/5c7882f94ab2fb720d9dba83232b403c3469de9c", "committedDate": "2020-04-19T19:13:55Z", "message": "Merge branch 'master' into java-minimizer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2MDUyNTg0", "url": "https://github.com/typetools/checker-framework/pull/3257#pullrequestreview-396052584", "createdAt": "2020-04-19T19:19:09Z", "commit": {"oid": "5c7882f94ab2fb720d9dba83232b403c3469de9c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxOToxOToxMFrOGH7vHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxOToxOToxMFrOGH7vHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDk3MTkzNA==", "bodyText": "I had to add this; otherwise, the interface java files were just removed.  Methods in interfaces are public even if they are not marked as such.  An interface could have a default method whose body should be removed, so we may want to fix this some other way.", "url": "https://github.com/typetools/checker-framework/pull/3257#discussion_r410971934", "createdAt": "2020-04-19T19:19:10Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/framework/stub/JavaStubifier.java", "diffHunk": "@@ -0,0 +1,184 @@\n+package org.checkerframework.framework.stub;\n+\n+import com.github.javaparser.ParseResult;\n+import com.github.javaparser.ast.*;\n+import com.github.javaparser.ast.body.*;\n+import com.github.javaparser.ast.expr.MemberValuePair;\n+import com.github.javaparser.ast.expr.NormalAnnotationExpr;\n+import com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAccessModifiers;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.visitor.ModifierVisitor;\n+import com.github.javaparser.utils.ParserCollectionStrategy;\n+import com.github.javaparser.utils.ProjectRoot;\n+import com.github.javaparser.utils.SourceRoot;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+/**\n+ * Process Java source files in a directory to produce, in-place, minimal stub files. Removes:\n+ *\n+ * <ol>\n+ *   <li>everything that is private or package-private,\n+ *   <li>all comments, except for an initial copyright header,\n+ *   <li>all method bodies,\n+ *   <li>all field initializers,\n+ *   <li>all initializer blocks,\n+ *   <li>attributes to the {@code Deprecated} annotation (to be Java 8 compatible).\n+ * </ol>\n+ */\n+public class JavaStubifier {\n+    /**\n+     * Processes each provided command-line argument.\n+     *\n+     * @param args command-line arguments: directories to process\n+     */\n+    public static void main(String[] args) {\n+        if (args.length < 1) {\n+            System.err.println(\"Usage: provide one or more directory names to process\");\n+            System.exit(1);\n+        }\n+        for (String arg : args) {\n+            process(arg);\n+        }\n+    }\n+\n+    /**\n+     * Process the given directory.\n+     *\n+     * @param dir directory to process\n+     */\n+    private static void process(String dir) {\n+        Path root = Paths.get(dir);\n+        MinimizerCallback mc = new MinimizerCallback();\n+        ProjectRoot projectRoot = new ParserCollectionStrategy().collect(root);\n+\n+        projectRoot\n+                .getSourceRoots()\n+                .forEach(\n+                        sourceRoot -> {\n+                            try {\n+                                sourceRoot.parse(\"\", mc);\n+                            } catch (IOException e) {\n+                                System.err.println(\"IOException: \" + e);\n+                            }\n+                        });\n+    }\n+\n+    /** Callback to process each Java file. */\n+    private static class MinimizerCallback implements SourceRoot.Callback {\n+        /** The visitor instance. */\n+        private final MinimizerVisitor mv;\n+\n+        /** Create a MinimizerCallback instance. */\n+        public MinimizerCallback() {\n+            this.mv = new MinimizerVisitor();\n+        }\n+\n+        @Override\n+        public Result process(\n+                Path localPath, Path absolutePath, ParseResult<CompilationUnit> result) {\n+            Result res = Result.SAVE;\n+            // System.out.printf(\"Minimizing %s%n\", absolutePath);\n+            Optional<CompilationUnit> opt = result.getResult();\n+            if (opt.isPresent()) {\n+                CompilationUnit cu = opt.get();\n+                // this somehow only removes comments except the\n+                // first one, and copyright headers are kept\n+                cu.getComments().forEach(Node::remove);\n+                mv.visit(cu, null);\n+                if (cu.findAll(ClassOrInterfaceDeclaration.class).isEmpty()\n+                        && cu.findAll(AnnotationDeclaration.class).isEmpty()\n+                        && cu.findAll(EnumDeclaration.class).isEmpty()\n+                        && !absolutePath.endsWith(\"package-info.java\")) {\n+                    // All content is removed, delete this file.\n+                    new File(absolutePath.toUri()).delete();\n+                    res = Result.DONT_SAVE;\n+                }\n+            }\n+            return res;\n+        }\n+    }\n+\n+    /** Visitor to processes one compilation unit. */\n+    private static class MinimizerVisitor extends ModifierVisitor<Void> {\n+        @Override\n+        public ClassOrInterfaceDeclaration visit(ClassOrInterfaceDeclaration cid, Void arg) {\n+            if (cid.isInterface()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c7882f94ab2fb720d9dba83232b403c3469de9c"}, "originalPosition": 109}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8023144cb9864547a3207de9009bdbaf3029afc2", "author": {"user": {"login": "smillst", "name": "Suzanne Millstein"}}, "url": "https://github.com/typetools/checker-framework/commit/8023144cb9864547a3207de9009bdbaf3029afc2", "committedDate": "2020-04-19T19:32:07Z", "message": "Fix typo."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba8a3450a19609133ac07bf9eddeb07ac3fac03f", "author": {"user": {"login": "wmdietl", "name": "Werner Dietl"}}, "url": "https://github.com/typetools/checker-framework/commit/ba8a3450a19609133ac07bf9eddeb07ac3fac03f", "committedDate": "2020-04-19T22:12:13Z", "message": "Handle members of interfaces as implicitly public."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18e9d3a94b4bd39470656304f8622673da1a0ab4", "author": {"user": {"login": "wmdietl", "name": "Werner Dietl"}}, "url": "https://github.com/typetools/checker-framework/commit/18e9d3a94b4bd39470656304f8622673da1a0ab4", "committedDate": "2020-04-20T00:12:22Z", "message": "Work around JavaParser issue."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2ODE1NjA3", "url": "https://github.com/typetools/checker-framework/pull/3257#pullrequestreview-396815607", "createdAt": "2020-04-20T21:11:00Z", "commit": {"oid": "18e9d3a94b4bd39470656304f8622673da1a0ab4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3438536901b045b0d61d117573838bfd311d32c", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/f3438536901b045b0d61d117573838bfd311d32c", "committedDate": "2020-04-21T20:10:54Z", "message": "Documentation improvements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NjM4OTA2", "url": "https://github.com/typetools/checker-framework/pull/3257#pullrequestreview-397638906", "createdAt": "2020-04-21T20:11:05Z", "commit": {"oid": "18e9d3a94b4bd39470656304f8622673da1a0ab4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a22d7bd41c61dad218368da3cb73f1f23a67dc9", "author": {"user": {"login": "wmdietl", "name": "Werner Dietl"}}, "url": "https://github.com/typetools/checker-framework/commit/9a22d7bd41c61dad218368da3cb73f1f23a67dc9", "committedDate": "2020-04-23T00:09:25Z", "message": "Rename minimized .java files to .astub."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e021e1b40836e03b55e24a1788aac8ae578fb23", "author": {"user": {"login": "wmdietl", "name": "Werner Dietl"}}, "url": "https://github.com/typetools/checker-framework/commit/8e021e1b40836e03b55e24a1788aac8ae578fb23", "committedDate": "2020-04-23T00:09:46Z", "message": "Merge branch 'master' of github.com:typetools/checker-framework into java-minimizer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdfbc9c45551f1b1a0f907315c80f3c413d9423a", "author": {"user": {"login": "wmdietl", "name": "Werner Dietl"}}, "url": "https://github.com/typetools/checker-framework/commit/cdfbc9c45551f1b1a0f907315c80f3c413d9423a", "committedDate": "2020-04-23T00:11:00Z", "message": "Use project subdir."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4Njc1MjUx", "url": "https://github.com/typetools/checker-framework/pull/3257#pullrequestreview-398675251", "createdAt": "2020-04-23T00:11:30Z", "commit": {"oid": "cdfbc9c45551f1b1a0f907315c80f3c413d9423a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMDoxMTozMFrOGKQ_YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMDoxMTozMFrOGKQ_YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQxNzMxMw==", "bodyText": "@mernst Is this the right command to rename the java files to astub files?", "url": "https://github.com/typetools/checker-framework/pull/3257#discussion_r413417313", "createdAt": "2020-04-23T00:11:30Z", "author": {"login": "wmdietl"}, "path": "docs/manual/annotating-libraries.tex", "diffHunk": "@@ -633,6 +633,32 @@\n % Furthermore, a programmer must search the stub file\n % for a given method rather than just skimming a few pages of method signatures.\n \n+Alternatively, you can minimize source files to make them more suitable as stub files.\n+Use the \\<JavaStubifier> to convert, in-place, all \\<.java> files in given directories into\n+minimal stub files.\n+\n+\\begin{Verbatim}\n+  mkdir project-stubs\n+  cp -R project/src project-stubs\n+  java -cp $CHECKERFRAMEWORK/checker/dist/checker.jar org.checkerframework.framework.stub.JavaStubifier project-stubs\n+  find project-stubs -type f -name \"*.java\" -exec rename 's/.java$/.astub/' {} \\;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfbc9c45551f1b1a0f907315c80f3c413d9423a"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NDMxMzMx", "url": "https://github.com/typetools/checker-framework/pull/3257#pullrequestreview-399431331", "createdAt": "2020-04-23T19:58:57Z", "commit": {"oid": "cdfbc9c45551f1b1a0f907315c80f3c413d9423a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTo1ODo1N1rOGK5sHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxOTo1ODo1N1rOGK5sHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA4NDEyNw==", "bodyText": "This is removing AbstractStringBuilder because it is a package private class.  However, some of the methods are exposed in public classes.", "url": "https://github.com/typetools/checker-framework/pull/3257#discussion_r414084127", "createdAt": "2020-04-23T19:58:57Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/framework/stub/JavaStubifier.java", "diffHunk": "@@ -0,0 +1,197 @@\n+package org.checkerframework.framework.stub;\n+\n+import com.github.javaparser.ParseResult;\n+import com.github.javaparser.ast.*;\n+import com.github.javaparser.ast.body.*;\n+import com.github.javaparser.ast.expr.MemberValuePair;\n+import com.github.javaparser.ast.expr.NormalAnnotationExpr;\n+import com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAccessModifiers;\n+import com.github.javaparser.ast.stmt.BlockStmt;\n+import com.github.javaparser.ast.visitor.ModifierVisitor;\n+import com.github.javaparser.utils.ParserCollectionStrategy;\n+import com.github.javaparser.utils.ProjectRoot;\n+import com.github.javaparser.utils.SourceRoot;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Optional;\n+\n+/**\n+ * Process Java source files in a directory to produce, in-place, minimal stub files.\n+ *\n+ * <p>To process a file means to remove:\n+ *\n+ * <ol>\n+ *   <li>everything that is private or package-private,\n+ *   <li>all comments, except for an initial copyright header,\n+ *   <li>all method bodies,\n+ *   <li>all field initializers,\n+ *   <li>all initializer blocks,\n+ *   <li>attributes to the {@code Deprecated} annotation (to be Java 8 compatible).\n+ * </ol>\n+ */\n+public class JavaStubifier {\n+    /**\n+     * Processes each provided command-line argument; see class documentation for details.\n+     *\n+     * @param args command-line arguments: directories to process\n+     */\n+    public static void main(String[] args) {\n+        if (args.length < 1) {\n+            System.err.println(\"Usage: provide one or more directory names to process\");\n+            System.exit(1);\n+        }\n+        for (String arg : args) {\n+            process(arg);\n+        }\n+    }\n+\n+    /**\n+     * Process each file in the given directory; see class documentation for details.\n+     *\n+     * @param dir directory to process\n+     */\n+    private static void process(String dir) {\n+        Path root = Paths.get(dir);\n+        MinimizerCallback mc = new MinimizerCallback();\n+        ProjectRoot projectRoot = new ParserCollectionStrategy().collect(root);\n+\n+        projectRoot\n+                .getSourceRoots()\n+                .forEach(\n+                        sourceRoot -> {\n+                            try {\n+                                sourceRoot.parse(\"\", mc);\n+                            } catch (IOException e) {\n+                                System.err.println(\"IOException: \" + e);\n+                            }\n+                        });\n+    }\n+\n+    /** Callback to process each Java file; see class documentation for details. */\n+    private static class MinimizerCallback implements SourceRoot.Callback {\n+        /** The visitor instance. */\n+        private final MinimizerVisitor mv;\n+\n+        /** Create a MinimizerCallback instance. */\n+        public MinimizerCallback() {\n+            this.mv = new MinimizerVisitor();\n+        }\n+\n+        @Override\n+        public Result process(\n+                Path localPath, Path absolutePath, ParseResult<CompilationUnit> result) {\n+            Result res = Result.SAVE;\n+            // System.out.printf(\"Minimizing %s%n\", absolutePath);\n+            Optional<CompilationUnit> opt = result.getResult();\n+            if (opt.isPresent()) {\n+                CompilationUnit cu = opt.get();\n+                // this somehow only removes comments except the\n+                // first one, and copyright headers are kept\n+                cu.getComments().forEach(Node::remove);\n+                mv.visit(cu, null);\n+                if (cu.findAll(ClassOrInterfaceDeclaration.class).isEmpty()\n+                        && cu.findAll(AnnotationDeclaration.class).isEmpty()\n+                        && cu.findAll(EnumDeclaration.class).isEmpty()\n+                        && !absolutePath.endsWith(\"package-info.java\")) {\n+                    // All content is removed, delete this file.\n+                    new File(absolutePath.toUri()).delete();\n+                    res = Result.DONT_SAVE;\n+                }\n+            }\n+            return res;\n+        }\n+    }\n+\n+    /** Visitor to process one compilation unit; see class documentation for details. */\n+    private static class MinimizerVisitor extends ModifierVisitor<Void> {\n+        /** Whether to consider members implicitly public. */\n+        private boolean implicitlyPublic = false;\n+\n+        @Override\n+        public ClassOrInterfaceDeclaration visit(ClassOrInterfaceDeclaration cid, Void arg) {\n+            boolean prevIP = implicitlyPublic;\n+            if (cid.isInterface()) {\n+                // All members of interfaces are implicitly public.\n+                implicitlyPublic = true;\n+            }\n+            super.visit(cid, arg);\n+            removeIfPrivateOrPkgPrivate(cid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdfbc9c45551f1b1a0f907315c80f3c413d9423a"}, "originalPosition": 120}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32df31022ddf696fd1e2593f3904240e8bfc9945", "author": {"user": {"login": "wmdietl", "name": "Werner Dietl"}}, "url": "https://github.com/typetools/checker-framework/commit/32df31022ddf696fd1e2593f3904240e8bfc9945", "committedDate": "2020-04-23T21:29:26Z", "message": "Fix visibility rules."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2958, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}