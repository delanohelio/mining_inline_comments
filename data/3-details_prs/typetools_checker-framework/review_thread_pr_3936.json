{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4MzkwMDAx", "number": 3936, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzoxMzozMVrOE-wSEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzoxMzozMVrOE-wSEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjM4MjI1OnYy", "diffSide": "RIGHT", "path": "javacutil/src/main/java/org/checkerframework/javacutil/ToStringComparator.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzoxMzozMVrOH8FJpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMDozMzo0NVrOH8MyCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc2MDk5OQ==", "bodyText": "Should this be Comparator<@Nullable Object>?", "url": "https://github.com/typetools/checker-framework/pull/3936#discussion_r532760999", "createdAt": "2020-11-30T17:13:31Z", "author": {"login": "smillst"}, "path": "javacutil/src/main/java/org/checkerframework/javacutil/ToStringComparator.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// TODO: Put this in plume-util and use it from there.\n+package org.checkerframework.javacutil;\n+\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/** A comparator that orders values based on the lexicographic ordering of their toString(). */\n+public class ToStringComparator implements Comparator<Object> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c4327aa3a3dc178752e8340a555893e58fbb4b2"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgyNDA4NA==", "bodyText": "It implements both Comparator<Object> and Comparator<@Nullable Object>.  I think I can only name one of those, and the two are incompatible.  Should I create a parameterized ToStringComparator instead?", "url": "https://github.com/typetools/checker-framework/pull/3936#discussion_r532824084", "createdAt": "2020-11-30T18:53:19Z", "author": {"login": "mernst"}, "path": "javacutil/src/main/java/org/checkerframework/javacutil/ToStringComparator.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// TODO: Put this in plume-util and use it from there.\n+package org.checkerframework.javacutil;\n+\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/** A comparator that orders values based on the lexicographic ordering of their toString(). */\n+public class ToStringComparator implements Comparator<Object> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc2MDk5OQ=="}, "originalCommit": {"oid": "3c4327aa3a3dc178752e8340a555893e58fbb4b2"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1NDE1Ng==", "bodyText": "The type argument of Comparator should be contravariant. That way we could make this Comparator<@Nullable Object> which would be a subtype of Comparator<@NonNull Object> (We don't have the functionality; #1970 is a request to implement it.)\nSo for now, I think it's enough to mention that ToStringComparator, handles null elements in that class Javadoc.\nAs an aside, the Nullness Checker line 34 should have issued a warning on line 34, I'll look into why it didn't.", "url": "https://github.com/typetools/checker-framework/pull/3936#discussion_r532854156", "createdAt": "2020-11-30T19:43:53Z", "author": {"login": "smillst"}, "path": "javacutil/src/main/java/org/checkerframework/javacutil/ToStringComparator.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// TODO: Put this in plume-util and use it from there.\n+package org.checkerframework.javacutil;\n+\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/** A comparator that orders values based on the lexicographic ordering of their toString(). */\n+public class ToStringComparator implements Comparator<Object> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc2MDk5OQ=="}, "originalCommit": {"oid": "3c4327aa3a3dc178752e8340a555893e58fbb4b2"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg2OTU1OQ==", "bodyText": "@smillst Let me know if the new comment looks good.", "url": "https://github.com/typetools/checker-framework/pull/3936#discussion_r532869559", "createdAt": "2020-11-30T20:02:54Z", "author": {"login": "mernst"}, "path": "javacutil/src/main/java/org/checkerframework/javacutil/ToStringComparator.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// TODO: Put this in plume-util and use it from there.\n+package org.checkerframework.javacutil;\n+\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/** A comparator that orders values based on the lexicographic ordering of their toString(). */\n+public class ToStringComparator implements Comparator<Object> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc2MDk5OQ=="}, "originalCommit": {"oid": "3c4327aa3a3dc178752e8340a555893e58fbb4b2"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg4NjAyNA==", "bodyText": "Looks good thanks!", "url": "https://github.com/typetools/checker-framework/pull/3936#discussion_r532886024", "createdAt": "2020-11-30T20:33:45Z", "author": {"login": "smillst"}, "path": "javacutil/src/main/java/org/checkerframework/javacutil/ToStringComparator.java", "diffHunk": "@@ -0,0 +1,37 @@\n+// TODO: Put this in plume-util and use it from there.\n+package org.checkerframework.javacutil;\n+\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/** A comparator that orders values based on the lexicographic ordering of their toString(). */\n+public class ToStringComparator implements Comparator<Object> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc2MDk5OQ=="}, "originalCommit": {"oid": "3c4327aa3a3dc178752e8340a555893e58fbb4b2"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 828, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}