{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwODgwMTg0", "number": 3406, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDozMDo0NFrOEKiRPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMzo1NjowNVrOETRANQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDgyNjg3OnYy", "diffSide": "RIGHT", "path": "docs/manual/creating-a-checker.tex", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDozMDo0NFrOGroclQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDozMDo0NFrOGroclQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwNDYyOQ==", "bodyText": "The boolean shouldn't be required, see the other boolean flags above. Just passing -AdumOnErrors should be equal to -AdumOnErrors=true. The user could turn off the flag using -AdumOnErrors=false.", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r448404629", "createdAt": "2020-07-01T14:30:44Z", "author": {"login": "wmdietl"}, "path": "docs/manual/creating-a-checker.tex", "diffHunk": "@@ -1783,6 +1783,10 @@\n already reported the bug, and you want to continue using the checker on a\n large codebase without being inundated in stack traces.\n \n+\\item \\code{-AdumpOnErrors}: Outputs the stack trace of the program when the\n+Checker Framework encounters an error or warning. The option also requires a\n+boolean parameter to enables its functionality (e.g. \\code{-AdumpOnErrors=true}).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c16f886f1dbd3f020745f89d001817d0ccacb564"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDg0MjYwOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeChecker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDozNDoyOVrOGrommA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDozNDoyOVrOGrommA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwNzE5Mg==", "bodyText": "We don't want individual messages for each element. Build up one string, including line breaks, and issue one NOTE.", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r448407192", "createdAt": "2020-07-01T14:34:29Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeChecker.java", "diffHunk": "@@ -584,6 +586,22 @@ private void printStoredMessages(CompilationUnitTree unit) {\n         if (messageStore != null) {\n             for (CheckerMessage msg : messageStore) {\n                 super.printOrStoreMessage(msg.kind, msg.message, msg.source, unit);\n+                printStackTrace(msg.trace);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Output the given stack trace if the \"dumpOnErrors\" option is enabled.\n+     *\n+     * @param trace stack trace when the checker encountered a warning/error\n+     */\n+    private void printStackTrace(StackTraceElement[] trace) {\n+        boolean dumpOnErrors = getBooleanOption(\"dumpOnErrors\", false);\n+        if (dumpOnErrors) {\n+            for (StackTraceElement elem : trace) {\n+                String msg = \"\\tat \" + elem;\n+                message(Diagnostic.Kind.NOTE, msg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "987c5604a43bf6f431c61318df693799ffabdcff"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDg1MTA3OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDozNjoyMlrOGrorxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDozNjoyMlrOGrorxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwODUxOQ==", "bodyText": "The printOrStoreMessage in this class should also handle this flag. So you might need to move the printStackTrace into this class and make it protected.", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r448408519", "createdAt": "2020-07-01T14:36:22Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -313,6 +313,10 @@\n     // org.checkerframework.framework.util.typeinference.DefaultTypeArgumentInference\n     \"showInferenceSteps\",\n \n+    // Output stack trace when checker encounters errors\n+    // org.checkerframework.common.basetype.BaseTypeChecker.printStackTrace()\n+    \"dumpOnErrors\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "987c5604a43bf6f431c61318df693799ffabdcff"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTgwNzUzOnYy", "diffSide": "RIGHT", "path": "docs/manual/creating-a-checker.tex", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMDowMDowN1rOG0dOsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDowNzo0N1rOG0xLfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY1ODAzMg==", "bodyText": "I think you can remove the of the program and shorten to output a stack trace when reporting errors or warnings.", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r457658032", "createdAt": "2020-07-20T20:00:07Z", "author": {"login": "wmdietl"}, "path": "docs/manual/creating-a-checker.tex", "diffHunk": "@@ -1783,6 +1783,9 @@\n already reported the bug, and you want to continue using the checker on a\n large codebase without being inundated in stack traces.\n \n+\\item \\code{-AdumpOnErrors}: Outputs the stack trace of the program when the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61546280613118ff773da926b6f035a2cb6fd2d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk4NDg5NA==", "bodyText": "I have updated the documentation in my latest commit.", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r457984894", "createdAt": "2020-07-21T10:07:47Z", "author": {"login": "aditya3434"}, "path": "docs/manual/creating-a-checker.tex", "diffHunk": "@@ -1783,6 +1783,9 @@\n already reported the bug, and you want to continue using the checker on a\n large codebase without being inundated in stack traces.\n \n+\\item \\code{-AdumpOnErrors}: Outputs the stack trace of the program when the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY1ODAzMg=="}, "originalCommit": {"oid": "b61546280613118ff773da926b6f035a2cb6fd2d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTgxNTA0OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMDowMjozNlrOG0dTpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDowODowNVrOG0xMEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY1OTMwMA==", "bodyText": "Use the short message I proposed for the manual.", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r457659300", "createdAt": "2020-07-20T20:02:36Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -315,6 +316,10 @@\n     // org.checkerframework.framework.util.typeinference.DefaultTypeArgumentInference\n     \"showInferenceSteps\",\n \n+    // Output stack trace when checker encounters errors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61546280613118ff773da926b6f035a2cb6fd2d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk4NTA0Mg==", "bodyText": "I have used the short message in my latest commit.", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r457985042", "createdAt": "2020-07-21T10:08:05Z", "author": {"login": "aditya3434"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -315,6 +316,10 @@\n     // org.checkerframework.framework.util.typeinference.DefaultTypeArgumentInference\n     \"showInferenceSteps\",\n \n+    // Output stack trace when checker encounters errors", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY1OTMwMA=="}, "originalCommit": {"oid": "b61546280613118ff773da926b6f035a2cb6fd2d"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTgyNTY4OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeChecker.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMDowNTo1NlrOG0daTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDowODo0NVrOG0xNdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MTAwNA==", "bodyText": "Don't say constructor message. The same Create a new CheckerMessage. as for the other constructor is fine.", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r457661004", "createdAt": "2020-07-20T20:05:56Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeChecker.java", "diffHunk": "@@ -619,10 +622,29 @@ private CheckerMessage(\n                 String message,\n                 @FindDistinct Tree source,\n                 @FindDistinct BaseTypeChecker checker) {\n+            this(kind, message, source, checker, null);\n+        }\n+\n+        /**\n+         * Constructor method for checker message if stack trace needs to be stored.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61546280613118ff773da926b6f035a2cb6fd2d"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MTcxNw==", "bodyText": "Actually, there are no calls of the constructor without a trace, so why have two constructors?", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r457661717", "createdAt": "2020-07-20T20:07:24Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeChecker.java", "diffHunk": "@@ -619,10 +622,29 @@ private CheckerMessage(\n                 String message,\n                 @FindDistinct Tree source,\n                 @FindDistinct BaseTypeChecker checker) {\n+            this(kind, message, source, checker, null);\n+        }\n+\n+        /**\n+         * Constructor method for checker message if stack trace needs to be stored.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MTAwNA=="}, "originalCommit": {"oid": "b61546280613118ff773da926b6f035a2cb6fd2d"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk4NTM5OA==", "bodyText": "I have updated the summary and removed the first redundant constructor from BaseTypeChecker.", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r457985398", "createdAt": "2020-07-21T10:08:45Z", "author": {"login": "aditya3434"}, "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeChecker.java", "diffHunk": "@@ -619,10 +622,29 @@ private CheckerMessage(\n                 String message,\n                 @FindDistinct Tree source,\n                 @FindDistinct BaseTypeChecker checker) {\n+            this(kind, message, source, checker, null);\n+        }\n+\n+        /**\n+         * Constructor method for checker message if stack trace needs to be stored.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MTAwNA=="}, "originalCommit": {"oid": "b61546280613118ff773da926b6f035a2cb6fd2d"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTgzNDMzOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMDowODo0N1rOG0dfqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNzo1ODo0MlrOG2maPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MjM3Ng==", "bodyText": "I don't see a call of this method in this class when the dumpOnErrors flag is provided.\nIs the flag handled for a SourceChecker?", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r457662376", "createdAt": "2020-07-20T20:08:47Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -1079,6 +1084,43 @@ protected void printOrStoreMessage(\n         Trees.instance(processingEnv).printMessage(kind, message, source, root);\n     }\n \n+    /**\n+     * printOrStoreMessage method with an added stack trace argument. The stack trace is printed\n+     * when the dumpOnErrors option is enabled.\n+     *\n+     * @param kind the kind of message to print\n+     * @param message the message text\n+     * @param source the souce code position of the diagnostic message\n+     * @param root the compilation unit\n+     * @param trace the stack trace where the checker encountered an error\n+     */\n+    protected void printOrStoreMessage(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61546280613118ff773da926b6f035a2cb6fd2d"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5MzQ0Mw==", "bodyText": "The dumpOnErrors flag stores the stack trace when the Checker Framework starts to print/store the error messages. The stack trace is stored in BaseTypeChecker, because after the error messages are stored, the stack trace starts to unwind for compound checkers. This is why the printOrStoreMessage is not seen in the stack trace because it wasn't part of it when the stack trace was stored. Hence, the functions calls that print and log the errors are not visible in the stack trace, but the user can observe where the error occurred.", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r457993443", "createdAt": "2020-07-21T10:23:19Z", "author": {"login": "aditya3434"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -1079,6 +1084,43 @@ protected void printOrStoreMessage(\n         Trees.instance(processingEnv).printMessage(kind, message, source, root);\n     }\n \n+    /**\n+     * printOrStoreMessage method with an added stack trace argument. The stack trace is printed\n+     * when the dumpOnErrors option is enabled.\n+     *\n+     * @param kind the kind of message to print\n+     * @param message the message text\n+     * @param source the souce code position of the diagnostic message\n+     * @param root the compilation unit\n+     * @param trace the stack trace where the checker encountered an error\n+     */\n+    protected void printOrStoreMessage(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MjM3Ng=="}, "originalCommit": {"oid": "b61546280613118ff773da926b6f035a2cb6fd2d"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzMDcwNA==", "bodyText": "This is a new message in SourceChecker, but I don't see a call to it in SourceChecker.\nThere should be a call in SourceChecker as well, in case somebody directly uses/extends it.", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r458430704", "createdAt": "2020-07-21T22:41:49Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -1079,6 +1084,43 @@ protected void printOrStoreMessage(\n         Trees.instance(processingEnv).printMessage(kind, message, source, root);\n     }\n \n+    /**\n+     * printOrStoreMessage method with an added stack trace argument. The stack trace is printed\n+     * when the dumpOnErrors option is enabled.\n+     *\n+     * @param kind the kind of message to print\n+     * @param message the message text\n+     * @param source the souce code position of the diagnostic message\n+     * @param root the compilation unit\n+     * @param trace the stack trace where the checker encountered an error\n+     */\n+    protected void printOrStoreMessage(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MjM3Ng=="}, "originalCommit": {"oid": "b61546280613118ff773da926b6f035a2cb6fd2d"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkwNTU5Nw==", "bodyText": "I have added the method call in this function so the stack trace will be printed if someone directly calls it.", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r459905597", "createdAt": "2020-07-24T07:58:42Z", "author": {"login": "aditya3434"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -1079,6 +1084,43 @@ protected void printOrStoreMessage(\n         Trees.instance(processingEnv).printMessage(kind, message, source, root);\n     }\n \n+    /**\n+     * printOrStoreMessage method with an added stack trace argument. The stack trace is printed\n+     * when the dumpOnErrors option is enabled.\n+     *\n+     * @param kind the kind of message to print\n+     * @param message the message text\n+     * @param source the souce code position of the diagnostic message\n+     * @param root the compilation unit\n+     * @param trace the stack trace where the checker encountered an error\n+     */\n+    protected void printOrStoreMessage(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MjM3Ng=="}, "originalCommit": {"oid": "b61546280613118ff773da926b6f035a2cb6fd2d"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTgzNTc5OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMDowOToxOFrOG0dgkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOTowMToyNlrOG1ZcpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MjYxMQ==", "bodyText": "Add an implementation comment why here you don't just call the other printOrStoreMessage overload.", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r457662611", "createdAt": "2020-07-20T20:09:18Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -1079,6 +1084,43 @@ protected void printOrStoreMessage(\n         Trees.instance(processingEnv).printMessage(kind, message, source, root);\n     }\n \n+    /**\n+     * printOrStoreMessage method with an added stack trace argument. The stack trace is printed\n+     * when the dumpOnErrors option is enabled.\n+     *\n+     * @param kind the kind of message to print\n+     * @param message the message text\n+     * @param source the souce code position of the diagnostic message\n+     * @param root the compilation unit\n+     * @param trace the stack trace where the checker encountered an error\n+     */\n+    protected void printOrStoreMessage(\n+            javax.tools.Diagnostic.Kind kind,\n+            String message,\n+            Tree source,\n+            CompilationUnitTree root,\n+            StackTraceElement[] trace) {\n+        Trees.instance(processingEnv).printMessage(kind, message, source, root);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61546280613118ff773da926b6f035a2cb6fd2d"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk4OTg3OQ==", "bodyText": "We can alternatively call the other printOrStoreMessage and it wouldn't affect the output. So I don't have a particular reason for not calling the function. If you think I should call the function, I can make a commit accordingly.", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r457989879", "createdAt": "2020-07-21T10:16:51Z", "author": {"login": "aditya3434"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -1079,6 +1084,43 @@ protected void printOrStoreMessage(\n         Trees.instance(processingEnv).printMessage(kind, message, source, root);\n     }\n \n+    /**\n+     * printOrStoreMessage method with an added stack trace argument. The stack trace is printed\n+     * when the dumpOnErrors option is enabled.\n+     *\n+     * @param kind the kind of message to print\n+     * @param message the message text\n+     * @param source the souce code position of the diagnostic message\n+     * @param root the compilation unit\n+     * @param trace the stack trace where the checker encountered an error\n+     */\n+    protected void printOrStoreMessage(\n+            javax.tools.Diagnostic.Kind kind,\n+            String message,\n+            Tree source,\n+            CompilationUnitTree root,\n+            StackTraceElement[] trace) {\n+        Trees.instance(processingEnv).printMessage(kind, message, source, root);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MjYxMQ=="}, "originalCommit": {"oid": "b61546280613118ff773da926b6f035a2cb6fd2d"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzMDkzNQ==", "bodyText": "I don't think that would give the same behavior, because BaseTypeChecker overrides that method and you would get two stack traces, wouldn't you?", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r458430935", "createdAt": "2020-07-21T22:42:28Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -1079,6 +1084,43 @@ protected void printOrStoreMessage(\n         Trees.instance(processingEnv).printMessage(kind, message, source, root);\n     }\n \n+    /**\n+     * printOrStoreMessage method with an added stack trace argument. The stack trace is printed\n+     * when the dumpOnErrors option is enabled.\n+     *\n+     * @param kind the kind of message to print\n+     * @param message the message text\n+     * @param source the souce code position of the diagnostic message\n+     * @param root the compilation unit\n+     * @param trace the stack trace where the checker encountered an error\n+     */\n+    protected void printOrStoreMessage(\n+            javax.tools.Diagnostic.Kind kind,\n+            String message,\n+            Tree source,\n+            CompilationUnitTree root,\n+            StackTraceElement[] trace) {\n+        Trees.instance(processingEnv).printMessage(kind, message, source, root);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MjYxMQ=="}, "originalCommit": {"oid": "b61546280613118ff773da926b6f035a2cb6fd2d"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY0NDY0NQ==", "bodyText": "I called the other function in the printOrStoreMessage method. It printed the stack trace once but didn't print the error itself. I have added an implementation comment about this behaviour in my latest commit.", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r458644645", "createdAt": "2020-07-22T09:01:26Z", "author": {"login": "aditya3434"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -1079,6 +1084,43 @@ protected void printOrStoreMessage(\n         Trees.instance(processingEnv).printMessage(kind, message, source, root);\n     }\n \n+    /**\n+     * printOrStoreMessage method with an added stack trace argument. The stack trace is printed\n+     * when the dumpOnErrors option is enabled.\n+     *\n+     * @param kind the kind of message to print\n+     * @param message the message text\n+     * @param source the souce code position of the diagnostic message\n+     * @param root the compilation unit\n+     * @param trace the stack trace where the checker encountered an error\n+     */\n+    protected void printOrStoreMessage(\n+            javax.tools.Diagnostic.Kind kind,\n+            String message,\n+            Tree source,\n+            CompilationUnitTree root,\n+            StackTraceElement[] trace) {\n+        Trees.instance(processingEnv).printMessage(kind, message, source, root);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MjYxMQ=="}, "originalCommit": {"oid": "b61546280613118ff773da926b6f035a2cb6fd2d"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTg0MTgzOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMDoxMToxN1rOG0dkbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODo1MzozNlrOG5Fv9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MzU5OA==", "bodyText": "Shouldn't this just be getBooleanOption(\"dumpOnErrors\")? That method already checks whether the option is given and false should be the default, shouldn't it?", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r457663598", "createdAt": "2020-07-20T20:11:17Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -1079,6 +1084,43 @@ protected void printOrStoreMessage(\n         Trees.instance(processingEnv).printMessage(kind, message, source, root);\n     }\n \n+    /**\n+     * printOrStoreMessage method with an added stack trace argument. The stack trace is printed\n+     * when the dumpOnErrors option is enabled.\n+     *\n+     * @param kind the kind of message to print\n+     * @param message the message text\n+     * @param source the souce code position of the diagnostic message\n+     * @param root the compilation unit\n+     * @param trace the stack trace where the checker encountered an error\n+     */\n+    protected void printOrStoreMessage(\n+            javax.tools.Diagnostic.Kind kind,\n+            String message,\n+            Tree source,\n+            CompilationUnitTree root,\n+            StackTraceElement[] trace) {\n+        Trees.instance(processingEnv).printMessage(kind, message, source, root);\n+        printStackTrace(trace);\n+    }\n+\n+    /**\n+     * Output the given stack trace if the \"dumpOnErrors\" option is enabled.\n+     *\n+     * @param trace stack trace when the checker encountered a warning/error\n+     */\n+    private void printStackTrace(StackTraceElement[] trace) {\n+        boolean dumpOnErrors =\n+                getOptions().containsKey(\"dumpOnErrors\") && getBooleanOption(\"dumpOnErrors\", true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61546280613118ff773da926b6f035a2cb6fd2d"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk4ODUwNw==", "bodyText": "I originally tried getBooleanOption(\"dumpOnErrors\", false), however it returns false whenever no boolean argument is given. getBooleanOption(\"dumpOnErrors\", true) works for the most part but returns true even if the dumpOnErrors option is not provided. To prevent that, I used the getOptions().containsKey(\"dumpOnErrors\") to check whether the dumpOnErrors option is given.", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r457988507", "createdAt": "2020-07-21T10:14:22Z", "author": {"login": "aditya3434"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -1079,6 +1084,43 @@ protected void printOrStoreMessage(\n         Trees.instance(processingEnv).printMessage(kind, message, source, root);\n     }\n \n+    /**\n+     * printOrStoreMessage method with an added stack trace argument. The stack trace is printed\n+     * when the dumpOnErrors option is enabled.\n+     *\n+     * @param kind the kind of message to print\n+     * @param message the message text\n+     * @param source the souce code position of the diagnostic message\n+     * @param root the compilation unit\n+     * @param trace the stack trace where the checker encountered an error\n+     */\n+    protected void printOrStoreMessage(\n+            javax.tools.Diagnostic.Kind kind,\n+            String message,\n+            Tree source,\n+            CompilationUnitTree root,\n+            StackTraceElement[] trace) {\n+        Trees.instance(processingEnv).printMessage(kind, message, source, root);\n+        printStackTrace(trace);\n+    }\n+\n+    /**\n+     * Output the given stack trace if the \"dumpOnErrors\" option is enabled.\n+     *\n+     * @param trace stack trace when the checker encountered a warning/error\n+     */\n+    private void printStackTrace(StackTraceElement[] trace) {\n+        boolean dumpOnErrors =\n+                getOptions().containsKey(\"dumpOnErrors\") && getBooleanOption(\"dumpOnErrors\", true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MzU5OA=="}, "originalCommit": {"oid": "b61546280613118ff773da926b6f035a2cb6fd2d"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzMzQ0Nw==", "bodyText": "That's a bit odd, looking at \n  \n    \n      checker-framework/framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java\n    \n    \n         Line 1589\n      in\n      3498970\n    \n    \n    \n    \n\n        \n          \n           if (value == null) { \n        \n    \n  \n\n I wouldn't expect that behavior.\nCan you investigate why this doesn't work as specified?", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r458433447", "createdAt": "2020-07-21T22:49:12Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -1079,6 +1084,43 @@ protected void printOrStoreMessage(\n         Trees.instance(processingEnv).printMessage(kind, message, source, root);\n     }\n \n+    /**\n+     * printOrStoreMessage method with an added stack trace argument. The stack trace is printed\n+     * when the dumpOnErrors option is enabled.\n+     *\n+     * @param kind the kind of message to print\n+     * @param message the message text\n+     * @param source the souce code position of the diagnostic message\n+     * @param root the compilation unit\n+     * @param trace the stack trace where the checker encountered an error\n+     */\n+    protected void printOrStoreMessage(\n+            javax.tools.Diagnostic.Kind kind,\n+            String message,\n+            Tree source,\n+            CompilationUnitTree root,\n+            StackTraceElement[] trace) {\n+        Trees.instance(processingEnv).printMessage(kind, message, source, root);\n+        printStackTrace(trace);\n+    }\n+\n+    /**\n+     * Output the given stack trace if the \"dumpOnErrors\" option is enabled.\n+     *\n+     * @param trace stack trace when the checker encountered a warning/error\n+     */\n+    private void printStackTrace(StackTraceElement[] trace) {\n+        boolean dumpOnErrors =\n+                getOptions().containsKey(\"dumpOnErrors\") && getBooleanOption(\"dumpOnErrors\", true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MzU5OA=="}, "originalCommit": {"oid": "b61546280613118ff773da926b6f035a2cb6fd2d"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY0ODcyMQ==", "bodyText": "If we write dumpOnErrors without a boolean argument, the value variable in the getBooleanOption() method would be null. Hence, the function would return the default value which, if we used getBooleanOption(\"dumpOnErrors\", false) would be false. So the stack trace won't be printed if we don't give the boolean value true. If we use getBooleanOption(\"dumpOnErrors\", true), then we don't need a boolean argument to print the stack trace, however, then it would print the stack trace even if dumpOnErrors is not provided because value will be null, and it would return the default value which is true.", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r458648721", "createdAt": "2020-07-22T09:08:24Z", "author": {"login": "aditya3434"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -1079,6 +1084,43 @@ protected void printOrStoreMessage(\n         Trees.instance(processingEnv).printMessage(kind, message, source, root);\n     }\n \n+    /**\n+     * printOrStoreMessage method with an added stack trace argument. The stack trace is printed\n+     * when the dumpOnErrors option is enabled.\n+     *\n+     * @param kind the kind of message to print\n+     * @param message the message text\n+     * @param source the souce code position of the diagnostic message\n+     * @param root the compilation unit\n+     * @param trace the stack trace where the checker encountered an error\n+     */\n+    protected void printOrStoreMessage(\n+            javax.tools.Diagnostic.Kind kind,\n+            String message,\n+            Tree source,\n+            CompilationUnitTree root,\n+            StackTraceElement[] trace) {\n+        Trees.instance(processingEnv).printMessage(kind, message, source, root);\n+        printStackTrace(trace);\n+    }\n+\n+    /**\n+     * Output the given stack trace if the \"dumpOnErrors\" option is enabled.\n+     *\n+     * @param trace stack trace when the checker encountered a warning/error\n+     */\n+    private void printStackTrace(StackTraceElement[] trace) {\n+        boolean dumpOnErrors =\n+                getOptions().containsKey(\"dumpOnErrors\") && getBooleanOption(\"dumpOnErrors\", true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MzU5OA=="}, "originalCommit": {"oid": "b61546280613118ff773da926b6f035a2cb6fd2d"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMyMDEwMQ==", "bodyText": "Is simply hasOption(\"dumpOnErrors\") enough? Then you don't need to introduce a local variable for this.\nIn a separate PR, can you look into what getBooleanOption is doing wrong? It is hardly used, so we should discuss what the correct behavior is.", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r462320101", "createdAt": "2020-07-29T13:58:56Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -1079,6 +1084,43 @@ protected void printOrStoreMessage(\n         Trees.instance(processingEnv).printMessage(kind, message, source, root);\n     }\n \n+    /**\n+     * printOrStoreMessage method with an added stack trace argument. The stack trace is printed\n+     * when the dumpOnErrors option is enabled.\n+     *\n+     * @param kind the kind of message to print\n+     * @param message the message text\n+     * @param source the souce code position of the diagnostic message\n+     * @param root the compilation unit\n+     * @param trace the stack trace where the checker encountered an error\n+     */\n+    protected void printOrStoreMessage(\n+            javax.tools.Diagnostic.Kind kind,\n+            String message,\n+            Tree source,\n+            CompilationUnitTree root,\n+            StackTraceElement[] trace) {\n+        Trees.instance(processingEnv).printMessage(kind, message, source, root);\n+        printStackTrace(trace);\n+    }\n+\n+    /**\n+     * Output the given stack trace if the \"dumpOnErrors\" option is enabled.\n+     *\n+     * @param trace stack trace when the checker encountered a warning/error\n+     */\n+    private void printStackTrace(StackTraceElement[] trace) {\n+        boolean dumpOnErrors =\n+                getOptions().containsKey(\"dumpOnErrors\") && getBooleanOption(\"dumpOnErrors\", true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MzU5OA=="}, "originalCommit": {"oid": "b61546280613118ff773da926b6f035a2cb6fd2d"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxNjIxNQ==", "bodyText": "hasOption(\"dumpOnErrors\") is the same as getOptions().containtsKey(\"dumpOnErrors\"). If we give the option -AdumpOnErrors=false, hasOption(\"dumpOnErrors\") will return true. Hence, we cannot use this directly. I have replaced getOptions().containtsKey(\"dumpOnErrors\") with hasOption(\"dumpOnErrors\").", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r462516215", "createdAt": "2020-07-29T18:53:36Z", "author": {"login": "aditya3434"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -1079,6 +1084,43 @@ protected void printOrStoreMessage(\n         Trees.instance(processingEnv).printMessage(kind, message, source, root);\n     }\n \n+    /**\n+     * printOrStoreMessage method with an added stack trace argument. The stack trace is printed\n+     * when the dumpOnErrors option is enabled.\n+     *\n+     * @param kind the kind of message to print\n+     * @param message the message text\n+     * @param source the souce code position of the diagnostic message\n+     * @param root the compilation unit\n+     * @param trace the stack trace where the checker encountered an error\n+     */\n+    protected void printOrStoreMessage(\n+            javax.tools.Diagnostic.Kind kind,\n+            String message,\n+            Tree source,\n+            CompilationUnitTree root,\n+            StackTraceElement[] trace) {\n+        Trees.instance(processingEnv).printMessage(kind, message, source, root);\n+        printStackTrace(trace);\n+    }\n+\n+    /**\n+     * Output the given stack trace if the \"dumpOnErrors\" option is enabled.\n+     *\n+     * @param trace stack trace when the checker encountered a warning/error\n+     */\n+    private void printStackTrace(StackTraceElement[] trace) {\n+        boolean dumpOnErrors =\n+                getOptions().containsKey(\"dumpOnErrors\") && getBooleanOption(\"dumpOnErrors\", true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MzU5OA=="}, "originalCommit": {"oid": "b61546280613118ff773da926b6f035a2cb6fd2d"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTg1MDU0OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMDoxNDowNFrOG0dqCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDowMjo1MlrOG0xBcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2NTAzMg==", "bodyText": "Don't build up with just a String! In particular that initial new String() is very ugly.\nUse a StringBuilder or a StringJoiner.", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r457665032", "createdAt": "2020-07-20T20:14:04Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -1079,6 +1084,43 @@ protected void printOrStoreMessage(\n         Trees.instance(processingEnv).printMessage(kind, message, source, root);\n     }\n \n+    /**\n+     * printOrStoreMessage method with an added stack trace argument. The stack trace is printed\n+     * when the dumpOnErrors option is enabled.\n+     *\n+     * @param kind the kind of message to print\n+     * @param message the message text\n+     * @param source the souce code position of the diagnostic message\n+     * @param root the compilation unit\n+     * @param trace the stack trace where the checker encountered an error\n+     */\n+    protected void printOrStoreMessage(\n+            javax.tools.Diagnostic.Kind kind,\n+            String message,\n+            Tree source,\n+            CompilationUnitTree root,\n+            StackTraceElement[] trace) {\n+        Trees.instance(processingEnv).printMessage(kind, message, source, root);\n+        printStackTrace(trace);\n+    }\n+\n+    /**\n+     * Output the given stack trace if the \"dumpOnErrors\" option is enabled.\n+     *\n+     * @param trace stack trace when the checker encountered a warning/error\n+     */\n+    private void printStackTrace(StackTraceElement[] trace) {\n+        boolean dumpOnErrors =\n+                getOptions().containsKey(\"dumpOnErrors\") && getBooleanOption(\"dumpOnErrors\", true);\n+        if (dumpOnErrors) {\n+            String msg = new String();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61546280613118ff773da926b6f035a2cb6fd2d"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk4MjMyMg==", "bodyText": "I have used a StringBuilder to build the stack trace and print it as a note in my latest commit.", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r457982322", "createdAt": "2020-07-21T10:02:52Z", "author": {"login": "aditya3434"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -1079,6 +1084,43 @@ protected void printOrStoreMessage(\n         Trees.instance(processingEnv).printMessage(kind, message, source, root);\n     }\n \n+    /**\n+     * printOrStoreMessage method with an added stack trace argument. The stack trace is printed\n+     * when the dumpOnErrors option is enabled.\n+     *\n+     * @param kind the kind of message to print\n+     * @param message the message text\n+     * @param source the souce code position of the diagnostic message\n+     * @param root the compilation unit\n+     * @param trace the stack trace where the checker encountered an error\n+     */\n+    protected void printOrStoreMessage(\n+            javax.tools.Diagnostic.Kind kind,\n+            String message,\n+            Tree source,\n+            CompilationUnitTree root,\n+            StackTraceElement[] trace) {\n+        Trees.instance(processingEnv).printMessage(kind, message, source, root);\n+        printStackTrace(trace);\n+    }\n+\n+    /**\n+     * Output the given stack trace if the \"dumpOnErrors\" option is enabled.\n+     *\n+     * @param trace stack trace when the checker encountered a warning/error\n+     */\n+    private void printStackTrace(StackTraceElement[] trace) {\n+        boolean dumpOnErrors =\n+                getOptions().containsKey(\"dumpOnErrors\") && getBooleanOption(\"dumpOnErrors\", true);\n+        if (dumpOnErrors) {\n+            String msg = new String();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2NTAzMg=="}, "originalCommit": {"oid": "b61546280613118ff773da926b6f035a2cb6fd2d"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDc0NTEzOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeChecker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjozODo1N1rOG1MUbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwODo1ODozMFrOG1ZVhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQyOTU0OA==", "bodyText": "Why is the field @Nullable? Same for the trace parameter that sets the field.\nThread.currentThread().getStackTrace() returns something non-null.", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r458429548", "createdAt": "2020-07-21T22:38:57Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeChecker.java", "diffHunk": "@@ -599,6 +600,8 @@ private void printStoredMessages(CompilationUnitTree unit) {\n         final String message;\n         /** The source code that the message is about. */\n         final @InternedDistinct Tree source;\n+        /** Stores the stack trace till the point the checker encounters an error. */\n+        final StackTraceElement @Nullable [] trace;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f99303d4b4d957ab2b63f97c24f4dd805167e9d"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY0MjgyMA==", "bodyText": "I think the IDE added it automatically when I initialized it. I have removed the annotation since it was, as you said, redundant.", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r458642820", "createdAt": "2020-07-22T08:58:30Z", "author": {"login": "aditya3434"}, "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeChecker.java", "diffHunk": "@@ -599,6 +600,8 @@ private void printStoredMessages(CompilationUnitTree unit) {\n         final String message;\n         /** The source code that the message is about. */\n         final @InternedDistinct Tree source;\n+        /** Stores the stack trace till the point the checker encounters an error. */\n+        final StackTraceElement @Nullable [] trace;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQyOTU0OA=="}, "originalCommit": {"oid": "3f99303d4b4d957ab2b63f97c24f4dd805167e9d"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjMzOTAyOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeChecker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMzo0OToyMFrOG45Vmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODo0OTozMFrOG5Fm2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMxMjg1OA==", "bodyText": "This is the stack trace when it encountered an error, so this should be something like The stack trace when the message is created.\nAlso change the parameter documentation to the same.", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r462312858", "createdAt": "2020-07-29T13:49:20Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeChecker.java", "diffHunk": "@@ -599,6 +600,8 @@ private void printStoredMessages(CompilationUnitTree unit) {\n         final String message;\n         /** The source code that the message is about. */\n         final @InternedDistinct Tree source;\n+        /** Stores the stack trace till the point the checker encounters an error. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b434c02838752959e35ba92d2690452acae617a0"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxMzg4Mw==", "bodyText": "I have changed the field and parameter description in my latest commit.", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r462513883", "createdAt": "2020-07-29T18:49:30Z", "author": {"login": "aditya3434"}, "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeChecker.java", "diffHunk": "@@ -599,6 +600,8 @@ private void printStoredMessages(CompilationUnitTree unit) {\n         final String message;\n         /** The source code that the message is about. */\n         final @InternedDistinct Tree source;\n+        /** Stores the stack trace till the point the checker encounters an error. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMxMjg1OA=="}, "originalCommit": {"oid": "b434c02838752959e35ba92d2690452acae617a0"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjM2NDY5OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMzo1NDo1OFrOG45mJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODo0OTo0N1rOG5FneQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMxNzA5Mg==", "bodyText": "Like for other overloaded methods, start out with the normal description of what the method is for and then describe the differences.\nAlso, @see cross-references can be useful.", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r462317092", "createdAt": "2020-07-29T13:54:58Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -1081,7 +1086,47 @@ protected void printOrStoreMessage(\n             String message,\n             Tree source,\n             CompilationUnitTree root) {\n+        StackTraceElement[] trace = Thread.currentThread().getStackTrace();\n+        printOrStoreMessage(kind, message, source, root, trace);\n+    }\n+\n+    /**\n+     * printOrStoreMessage method with an added stack trace argument. The stack trace is printed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b434c02838752959e35ba92d2690452acae617a0"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxNDA0MQ==", "bodyText": "I have updated the documentation in my latest commit.", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r462514041", "createdAt": "2020-07-29T18:49:47Z", "author": {"login": "aditya3434"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -1081,7 +1086,47 @@ protected void printOrStoreMessage(\n             String message,\n             Tree source,\n             CompilationUnitTree root) {\n+        StackTraceElement[] trace = Thread.currentThread().getStackTrace();\n+        printOrStoreMessage(kind, message, source, root, trace);\n+    }\n+\n+    /**\n+     * printOrStoreMessage method with an added stack trace argument. The stack trace is printed", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMxNzA5Mg=="}, "originalCommit": {"oid": "b434c02838752959e35ba92d2690452acae617a0"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjM2OTgxOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMzo1NjowNVrOG45pVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODo1MDowM1rOG5FoJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMxNzkwOA==", "bodyText": "That comment is out-of-date - you would now create an infinite loop, so this question no longer arises.", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r462317908", "createdAt": "2020-07-29T13:56:05Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -1081,7 +1086,47 @@ protected void printOrStoreMessage(\n             String message,\n             Tree source,\n             CompilationUnitTree root) {\n+        StackTraceElement[] trace = Thread.currentThread().getStackTrace();\n+        printOrStoreMessage(kind, message, source, root, trace);\n+    }\n+\n+    /**\n+     * printOrStoreMessage method with an added stack trace argument. The stack trace is printed\n+     * when the dumpOnErrors option is enabled.\n+     *\n+     * @param kind the kind of message to print\n+     * @param message the message text\n+     * @param source the souce code position of the diagnostic message\n+     * @param root the compilation unit\n+     * @param trace the stack trace where the checker encountered an error\n+     */\n+    protected void printOrStoreMessage(\n+            javax.tools.Diagnostic.Kind kind,\n+            String message,\n+            Tree source,\n+            CompilationUnitTree root,\n+            StackTraceElement[] trace) {\n+        // Not calling printOrStoreMessage(kind, message, source, root) since the error message", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b434c02838752959e35ba92d2690452acae617a0"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxNDIxMw==", "bodyText": "I have deleted the comment in my latest commit.", "url": "https://github.com/typetools/checker-framework/pull/3406#discussion_r462514213", "createdAt": "2020-07-29T18:50:03Z", "author": {"login": "aditya3434"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -1081,7 +1086,47 @@ protected void printOrStoreMessage(\n             String message,\n             Tree source,\n             CompilationUnitTree root) {\n+        StackTraceElement[] trace = Thread.currentThread().getStackTrace();\n+        printOrStoreMessage(kind, message, source, root, trace);\n+    }\n+\n+    /**\n+     * printOrStoreMessage method with an added stack trace argument. The stack trace is printed\n+     * when the dumpOnErrors option is enabled.\n+     *\n+     * @param kind the kind of message to print\n+     * @param message the message text\n+     * @param source the souce code position of the diagnostic message\n+     * @param root the compilation unit\n+     * @param trace the stack trace where the checker encountered an error\n+     */\n+    protected void printOrStoreMessage(\n+            javax.tools.Diagnostic.Kind kind,\n+            String message,\n+            Tree source,\n+            CompilationUnitTree root,\n+            StackTraceElement[] trace) {\n+        // Not calling printOrStoreMessage(kind, message, source, root) since the error message", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMxNzkwOA=="}, "originalCommit": {"oid": "b434c02838752959e35ba92d2690452acae617a0"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1721, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}