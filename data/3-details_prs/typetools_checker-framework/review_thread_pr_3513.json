{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2ODE1NDkw", "number": 3513, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwMDozMjoyMlrOESM1HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwMDozMjo0NVrOESM1PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTIwMDI5OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/reflection/DefaultReflectionResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwMDozMjoyMlrOG3QcJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwMDozMjoyMlrOG3QcJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU5NDIxNA==", "bodyText": "What is the relationship of this to arrays?", "url": "https://github.com/typetools/checker-framework/pull/3513#discussion_r460594214", "createdAt": "2020-07-27T00:32:22Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/reflection/DefaultReflectionResolver.java", "diffHunk": "@@ -206,17 +206,37 @@ private ParameterizedExecutableType resolveMethodCall(\n         return origResult;\n     }\n \n+    /**\n+     * Checks arguments of a method invocation are consistent with their corresponding parameters.\n+     *\n+     * @param resolvedTree MethodInvocationTree\n+     * @return result of checkArguments\n+     */\n     private boolean checkMethodArguments(MethodInvocationTree resolvedTree) {\n         // type.getKind() == actualType.getKind()\n         ExecutableElement methodDecl = TreeUtils.elementFromUse(resolvedTree);\n         return checkArguments(methodDecl.getParameters(), resolvedTree.getArguments());\n     }\n \n+    /**\n+     * Checks arguments of a new class are consistent with their corresponding parameters.\n+     *\n+     * @param resolvedTree NewClassTree\n+     * @return result of checkArguments\n+     */\n     private boolean checkNewClassArguments(NewClassTree resolvedTree) {\n         ExecutableElement methodDecl = TreeUtils.elementFromUse(resolvedTree);\n         return checkArguments(methodDecl.getParameters(), resolvedTree.getArguments());\n     }\n \n+    /**\n+     * Checks if array argument types are consistent with their corresponding parameter types.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7b142146b4679eedbf60f44969b28d0aef50b8b"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTIwMDQ3OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/reflection/DefaultReflectionResolver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwMDozMjozN1rOG3QcQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwMDozMjozN1rOG3QcQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU5NDI0Mg==", "bodyText": "What is the relationship of this to arrays?", "url": "https://github.com/typetools/checker-framework/pull/3513#discussion_r460594242", "createdAt": "2020-07-27T00:32:37Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/reflection/DefaultReflectionResolver.java", "diffHunk": "@@ -206,17 +206,38 @@ private ParameterizedExecutableType resolveMethodCall(\n         return origResult;\n     }\n \n+    /**\n+     * Checks that arguments of a method invocation are consistent with their corresponding\n+     * parameters.\n+     *\n+     * @param resolvedTree a method invocation\n+     * @return true if arguments are consistent with parameters\n+     */\n     private boolean checkMethodArguments(MethodInvocationTree resolvedTree) {\n         // type.getKind() == actualType.getKind()\n         ExecutableElement methodDecl = TreeUtils.elementFromUse(resolvedTree);\n         return checkArguments(methodDecl.getParameters(), resolvedTree.getArguments());\n     }\n \n+    /**\n+     * Checks that arguments of a constructor invocation are consistent with their corresponding\n+     * parameters.\n+     *\n+     * @param resolvedTree a constructor invocation\n+     * @return true if arguments are consistent with parameters\n+     */\n     private boolean checkNewClassArguments(NewClassTree resolvedTree) {\n         ExecutableElement methodDecl = TreeUtils.elementFromUse(resolvedTree);\n         return checkArguments(methodDecl.getParameters(), resolvedTree.getArguments());\n     }\n \n+    /**\n+     * Checks that array argument types are consistent with their corresponding parameter types.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9634cd53fdd540d9ddb7f4d04e767ab3439c7bd1"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTIwMDYwOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/reflection/DefaultReflectionResolver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwMDozMjo0NVrOG3QcUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwMDozMjo0NVrOG3QcUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU5NDI1OA==", "bodyText": "What is the relationship of this to arrays?", "url": "https://github.com/typetools/checker-framework/pull/3513#discussion_r460594258", "createdAt": "2020-07-27T00:32:45Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/reflection/DefaultReflectionResolver.java", "diffHunk": "@@ -206,17 +206,38 @@ private ParameterizedExecutableType resolveMethodCall(\n         return origResult;\n     }\n \n+    /**\n+     * Checks that arguments of a method invocation are consistent with their corresponding\n+     * parameters.\n+     *\n+     * @param resolvedTree a method invocation\n+     * @return true if arguments are consistent with parameters\n+     */\n     private boolean checkMethodArguments(MethodInvocationTree resolvedTree) {\n         // type.getKind() == actualType.getKind()\n         ExecutableElement methodDecl = TreeUtils.elementFromUse(resolvedTree);\n         return checkArguments(methodDecl.getParameters(), resolvedTree.getArguments());\n     }\n \n+    /**\n+     * Checks that arguments of a constructor invocation are consistent with their corresponding\n+     * parameters.\n+     *\n+     * @param resolvedTree a constructor invocation\n+     * @return true if arguments are consistent with parameters\n+     */\n     private boolean checkNewClassArguments(NewClassTree resolvedTree) {\n         ExecutableElement methodDecl = TreeUtils.elementFromUse(resolvedTree);\n         return checkArguments(methodDecl.getParameters(), resolvedTree.getArguments());\n     }\n \n+    /**\n+     * Checks that array argument types are consistent with their corresponding parameter types.\n+     *\n+     * @param parameters formal parameters\n+     * @param arguments actual arguments\n+     * @return true if array argument types are consistent with their corresponding parameter types", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9634cd53fdd540d9ddb7f4d04e767ab3439c7bd1"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1593, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}