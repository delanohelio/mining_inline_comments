{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3MDE3MzAz", "number": 3868, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODoyNTo0M1rOE25S8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODoyNjozMVrOE25UEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTk3Mjk4OnYy", "diffSide": "RIGHT", "path": "checker/src/main/java/org/checkerframework/checker/formatter/FormatterVisitor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODoyNTo0M1rOHv70aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODoyNTo0M1rOHv70aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAyNTE5Mg==", "bodyText": "This should be removed or commented out.", "url": "https://github.com/typetools/checker-framework/pull/3868#discussion_r520025192", "createdAt": "2020-11-09T18:25:43Z", "author": {"login": "smillst"}, "path": "checker/src/main/java/org/checkerframework/checker/formatter/FormatterVisitor.java", "diffHunk": "@@ -126,6 +127,15 @@ public Void visitMethodInvocation(MethodInvocationTree node, Void p) {\n                         break;\n                 }\n             }\n+\n+            // Support -Ainfer command-line argument\n+            WholeProgramInference wpi = atypeFactory.getWholeProgramInference();\n+            if (wpi != null && forwardsArguments(node, enclosingMethod)) {\n+                System.out.printf(\"forwardsArguments: %s %s%n\", node, enclosingMethod);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64c43affbf3d08cb91d1b0ca57ac6a775f54dff1"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTk3NTg1OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/wholeprograminference/WholeProgramInferenceScenes.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODoyNjozMVrOHv72LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODoyNjozMVrOHv72LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAyNTY0NQ==", "bodyText": "This should probably be remove/commented out.", "url": "https://github.com/typetools/checker-framework/pull/3868#discussion_r520025645", "createdAt": "2020-11-09T18:26:31Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/common/wholeprograminference/WholeProgramInferenceScenes.java", "diffHunk": "@@ -440,6 +441,27 @@ public void updateFromReturn(\n         }\n     }\n \n+    @Override\n+    public void addMethodDeclarationAnnotation(ExecutableElement methodElt, AnnotationMirror anno) {\n+\n+        // do not infer types for code that isn't presented as source\n+        if (!ElementUtils.isElementFromSourceCode(methodElt)) {\n+            return;\n+        }\n+\n+        String className = getEnclosingClassName(methodElt);\n+        String jaifPath = storage.getJaifPath(className);\n+        AClass clazz =\n+                storage.getAClass(className, jaifPath, ((MethodSymbol) methodElt).enclClass());\n+        AMethod method = clazz.methods.getVivify(JVMNames.getJVMMethodSignature(methodElt));\n+\n+        scenelib.annotations.Annotation sceneAnno =\n+                AnnotationConverter.annotationMirrorToAnnotation(anno);\n+        method.tlAnnotationsHere.add(sceneAnno);\n+        System.out.printf(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64c43affbf3d08cb91d1b0ca57ac6a775f54dff1"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 899, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}