{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUyNjg1MjQ0", "number": 3481, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMDoyMjoyNFrOEQasUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzozODoyNlrOEX1gCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjUwMDAxOnYy", "diffSide": "RIGHT", "path": "checker/src/main/java/org/checkerframework/checker/nullness/NullnessVisitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMDoyMjoyNFrOG0jr6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwODoyNzo0NlrOG0tl2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc2MzgxOA==", "bodyText": "Could you:\n\ncall TreeUtils.annotationsFromTree()\nuse AnnotationUtils.containsSame to look for the annotations\n\nThen you don't need to change the visibility below.", "url": "https://github.com/typetools/checker-framework/pull/3481#discussion_r457763818", "createdAt": "2020-07-21T00:22:24Z", "author": {"login": "wmdietl"}, "path": "checker/src/main/java/org/checkerframework/checker/nullness/NullnessVisitor.java", "diffHunk": "@@ -380,6 +381,20 @@ public Void visitIf(IfTree node, Void p) {\n         return super.visitIf(node, p);\n     }\n \n+    @Override\n+    public Void visitInstanceOf(InstanceOfTree node, Void p) {\n+        if (node.getType().getKind() == Kind.ANNOTATED_TYPE) {\n+            AnnotatedTypeMirror type = atypeFactory.fromExpression((ExpressionTree) node.getType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "416aaf0018a4343240fef9a46edde30755215b02"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkyNjEwNg==", "bodyText": "Thanks for the help! I have used the above methods and reset the visibility of fromExpression to private in AnnotatedTypeFactory.", "url": "https://github.com/typetools/checker-framework/pull/3481#discussion_r457926106", "createdAt": "2020-07-21T08:27:46Z", "author": {"login": "aditya3434"}, "path": "checker/src/main/java/org/checkerframework/checker/nullness/NullnessVisitor.java", "diffHunk": "@@ -380,6 +381,20 @@ public Void visitIf(IfTree node, Void p) {\n         return super.visitIf(node, p);\n     }\n \n+    @Override\n+    public Void visitInstanceOf(InstanceOfTree node, Void p) {\n+        if (node.getType().getKind() == Kind.ANNOTATED_TYPE) {\n+            AnnotatedTypeMirror type = atypeFactory.fromExpression((ExpressionTree) node.getType());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc2MzgxOA=="}, "originalCommit": {"oid": "416aaf0018a4343240fef9a46edde30755215b02"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDI5MjI5OnYy", "diffSide": "RIGHT", "path": "checker/src/main/java/org/checkerframework/checker/nullness/messages.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzozODoyMFrOG_2dAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzozODoyMFrOG_2dAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYwNTYzMw==", "bodyText": "\".error\" makes this key longer without making it more informative.  I suggest shortening the key.", "url": "https://github.com/typetools/checker-framework/pull/3481#discussion_r469605633", "createdAt": "2020-08-12T23:38:20Z", "author": {"login": "mernst"}, "path": "checker/src/main/java/org/checkerframework/checker/nullness/messages.properties", "diffHunk": "@@ -16,3 +16,5 @@ new.class.type.invalid=the annotations %s do not need be applied in object creat\n toArray.nullable.elements.not.newarray=call of toArray on collection of non-null elements yields an array of possibly-null elements; omit the argument to toArray or make it an explicit array constructor\n toArray.nullable.elements.mismatched.size=call of toArray on collection of non-null elements yields an array of possibly-null elements; cannot determine that the argument array has the same size as the receiver collection\n clear.system.property=call might clear a predefined system property; pass -Alint=permitClearProperty to permit it\n+instanceof.nullable.error=instanceof is only true for a non-null expression", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "429a06a84cf6e1103b3e6350dc478b7fc6a4e40c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDI5MjU2OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/common/basetype/messages.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzozODoyNlrOG_2dKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzozODoyNlrOG_2dKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYwNTY3NQ==", "bodyText": "I find this error message confusing.  The only point of performing x instanceof C is when C is a subtype of x's compile-time type, so it's weird for the message to say only that.\nI think this message is trying to say that, at run time, instanceof will not check the annotations.  Please make it do so.  That is similar to the \"cast.unsafe\" message earlier in the file.  You could make the error key \"instanceof.unsafe\" for parallelism.\nAlso, please use standard terms in the diagnostic message.  The JLS uses \"expression\" where you use \"operand\"", "url": "https://github.com/typetools/checker-framework/pull/3481#discussion_r469605675", "createdAt": "2020-08-12T23:38:26Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/basetype/messages.properties", "diffHunk": "@@ -111,3 +111,4 @@ field.invariant.not.found.superclass=the field invariant annotation is missing f\n field.invariant.not.subtype.superclass=the qualifier for field %s is not a subtype of the qualifier in the superclass field invariant%nfound: %s%nsuperclass type: %s\n \n invalid.annotation.location.bytecode=found annotation in unexpected location in bytecode on element: %s %nUse -AignoreInvalidAnnotationLocations to suppress this warning\n+operand.instanceof.subtype=reference type is a subtype of the operand type.%nOperand Type : %s%nReference Type : %s", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "429a06a84cf6e1103b3e6350dc478b7fc6a4e40c"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1570, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}