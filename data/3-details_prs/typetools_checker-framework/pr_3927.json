{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2MDcwNzcy", "number": 3927, "title": "Captured types in enhanced for loops", "bodyText": "When Dataflow desugars enhanced for loops, it creates a variable declaration for the iterator type using the type of expression.iterator(), where expression is the iterator expression in the enhanced for loop.   If the type of expression.iterator() contains a captured type, the type tree of the variable declaration will be missing annotations.  I couldn't find a way to add those annotations to the type tree.\nInstead, the tree for expression is saved in the method innovation for iter#num0.next(), where iter#num0 is the variable declaration created from the type of expression.iterator().  Then the framework uses this tree to get the correct type of  iter#num0.next().\n(This should be merged before #3922 )", "createdAt": "2020-11-24T00:08:13Z", "url": "https://github.com/typetools/checker-framework/pull/3927", "merged": true, "mergeCommit": {"oid": "a20abff8756fc433787ffc1342b14b791b14ff9c"}, "closed": true, "closedAt": "2020-11-25T18:29:21Z", "author": {"login": "smillst"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdfeAskAH2gAyNTI2MDcwNzcyOjY2NmFkODk4MjY1OTI4YTRkZjg1ZmM5ZTNhN2Q2NmU0NWRhOGE3ZjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdgCf6qgFqTUzODc1MDkxMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "666ad898265928a4df85fc9e3a7d66e45da8a7f5", "author": {"user": {"login": "smillst", "name": "Suzanne Millstein"}}, "url": "https://github.com/typetools/checker-framework/commit/666ad898265928a4df85fc9e3a7d66e45da8a7f5", "committedDate": "2020-11-23T23:46:48Z", "message": "Enhanced for loop."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c669a57caf71e1298cfaff417e7ce5788126def9", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/c669a57caf71e1298cfaff417e7ce5788126def9", "committedDate": "2020-11-24T01:00:28Z", "message": "Documentation tweaks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3MDI0OTEx", "url": "https://github.com/typetools/checker-framework/pull/3927#pullrequestreview-537024911", "createdAt": "2020-11-24T02:15:20Z", "commit": {"oid": "c669a57caf71e1298cfaff417e7ce5788126def9"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMjoxNToyMFrOH4oRKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMjoxNjo1NFrOH4oXDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE0MjA1OQ==", "bodyText": "I don't see an invocation of this method and no other read access of the field. I must be missing something.", "url": "https://github.com/typetools/checker-framework/pull/3927#discussion_r529142059", "createdAt": "2020-11-24T02:15:20Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/node/MethodInvocationNode.java", "diffHunk": "@@ -76,6 +96,28 @@ public TreePath getTreePath() {\n         return treePath;\n     }\n \n+    /**\n+     * If this MethodInvocationNode is a node for an {@link Iterator#next()} desugared from an\n+     * enhanced for loop, then return the expression in the for loop, e.g., {@code iter} in {@code\n+     * for(Object o: iter}. Otherwise, return null.\n+     *\n+     * @return the iter expression, or null if this is not a {@link Iterator#next()} from an\n+     *     enhanced for loop\n+     */\n+    public @Nullable ExpressionTree getIterExpression() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c669a57caf71e1298cfaff417e7ce5788126def9"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE0MjY4NQ==", "bodyText": "I would expand the Iter part to make clear it stands for Iterator.", "url": "https://github.com/typetools/checker-framework/pull/3927#discussion_r529142685", "createdAt": "2020-11-24T02:16:02Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/node/MethodInvocationNode.java", "diffHunk": "@@ -76,6 +96,28 @@ public TreePath getTreePath() {\n         return treePath;\n     }\n \n+    /**\n+     * If this MethodInvocationNode is a node for an {@link Iterator#next()} desugared from an\n+     * enhanced for loop, then return the expression in the for loop, e.g., {@code iter} in {@code\n+     * for(Object o: iter}. Otherwise, return null.\n+     *\n+     * @return the iter expression, or null if this is not a {@link Iterator#next()} from an\n+     *     enhanced for loop\n+     */\n+    public @Nullable ExpressionTree getIterExpression() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c669a57caf71e1298cfaff417e7ce5788126def9"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTE0MzU2NQ==", "bodyText": "Can you add a comment why this second call is necessary? I would have expected the expression to be equal to nextCallNode, on which setIterExpression was already called.", "url": "https://github.com/typetools/checker-framework/pull/3927#discussion_r529143565", "createdAt": "2020-11-24T02:16:54Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/builder/CFGTranslationPhaseOne.java", "diffHunk": "@@ -2426,10 +2426,16 @@ public Node visitEnhancedForLoop(EnhancedForLoopTree tree, Void p) {\n             MethodInvocationNode nextCallNode =\n                     new MethodInvocationNode(\n                             nextCall, nextAccessNode, Collections.emptyList(), getCurrentPath());\n+            // If the type of iteratorVariable is a capture, its type tree may be missing\n+            // annotations, so save the expression in the node so that the full type can be found\n+            // later.\n+            nextCallNode.setIterExpression(expression);\n             nextCallNode.setInSource(false);\n             extendWithNode(nextCallNode);\n \n-            translateAssignment(variable, new LocalVariableNode(variable), nextCall);\n+            AssignmentNode assignNode =\n+                    translateAssignment(variable, new LocalVariableNode(variable), nextCall);\n+            ((MethodInvocationNode) assignNode.getExpression()).setIterExpression(expression);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c669a57caf71e1298cfaff417e7ce5788126def9"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b20962ff63c67870cd120140b7f6507712fcd05", "author": {"user": {"login": "smillst", "name": "Suzanne Millstein"}}, "url": "https://github.com/typetools/checker-framework/commit/2b20962ff63c67870cd120140b7f6507712fcd05", "committedDate": "2020-11-24T02:34:49Z", "message": "Add missing changes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d311ef15be2f58100f074d6a56b861f8970387d7", "author": {"user": {"login": "smillst", "name": "Suzanne Millstein"}}, "url": "https://github.com/typetools/checker-framework/commit/d311ef15be2f58100f074d6a56b861f8970387d7", "committedDate": "2020-11-24T02:38:35Z", "message": "Address code review feedback."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c8bf98d39ff9e54dd2a37f6aa49ae5465f741d6", "author": {"user": {"login": "smillst", "name": "Suzanne Millstein"}}, "url": "https://github.com/typetools/checker-framework/commit/0c8bf98d39ff9e54dd2a37f6aa49ae5465f741d6", "committedDate": "2020-11-24T02:40:03Z", "message": "Merge remote-tracking branch 'remotes/smillst/for-loop-capture' into for-loop-capture\n\n# Conflicts:\n#\tdataflow/src/main/java/org/checkerframework/dataflow/cfg/node/MethodInvocationNode.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d85d4a6564d791dc722fa313ca3473435f7a4c5a", "author": {"user": {"login": "smillst", "name": "Suzanne Millstein"}}, "url": "https://github.com/typetools/checker-framework/commit/d85d4a6564d791dc722fa313ca3473435f7a4c5a", "committedDate": "2020-11-24T14:19:53Z", "message": "Remove change that isn't needed."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f221abb4861730d01316519005249565ac49bee", "author": {"user": {"login": "smillst", "name": "Suzanne Millstein"}}, "url": "https://github.com/typetools/checker-framework/commit/7f221abb4861730d01316519005249565ac49bee", "committedDate": "2020-11-24T17:52:55Z", "message": "This special case isn't needed."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1d2db9da072d579d4ee91e40c4d923f6580cc38", "author": {"user": {"login": "smillst", "name": "Suzanne Millstein"}}, "url": "https://github.com/typetools/checker-framework/commit/f1d2db9da072d579d4ee91e40c4d923f6580cc38", "committedDate": "2020-11-24T20:34:01Z", "message": "Merge remote-tracking branch 'origin/master' into for-loop-capture"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3ODk2NTgz", "url": "https://github.com/typetools/checker-framework/pull/3927#pullrequestreview-537896583", "createdAt": "2020-11-24T20:52:39Z", "commit": {"oid": "f1d2db9da072d579d4ee91e40c4d923f6580cc38"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDo1Mjo0MFrOH5UuaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMDo1Mjo0MFrOH5UuaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg3MDQ0MA==", "bodyText": "AnnotatedTypes.getIteratedType is not longer called.  The Checker Framework still compiles if I delete it.  I think it should be removed.", "url": "https://github.com/typetools/checker-framework/pull/3927#discussion_r529870440", "createdAt": "2020-11-24T20:52:40Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/common/basetype/BaseTypeVisitor.java", "diffHunk": "@@ -1393,10 +1393,7 @@ public Void visitAssignment(AssignmentTree node, Void p) {\n     @Override\n     public Void visitEnhancedForLoop(EnhancedForLoopTree node, Void p) {\n         AnnotatedTypeMirror var = atypeFactory.getAnnotatedTypeLhs(node.getVariable());\n-        AnnotatedTypeMirror iterableType = atypeFactory.getAnnotatedType(node.getExpression());\n-        AnnotatedTypeMirror iteratedType =\n-                AnnotatedTypes.getIteratedType(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1d2db9da072d579d4ee91e40c4d923f6580cc38"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e346b8bf3c6cfe046a707fab572d6e3ad02757d5", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/e346b8bf3c6cfe046a707fab572d6e3ad02757d5", "committedDate": "2020-11-24T21:05:27Z", "message": "Documentation improvements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bf1ebfc1d6da90c03fd20f072165ae554a80644", "author": {"user": {"login": "smillst", "name": "Suzanne Millstein"}}, "url": "https://github.com/typetools/checker-framework/commit/4bf1ebfc1d6da90c03fd20f072165ae554a80644", "committedDate": "2020-11-24T21:05:58Z", "message": "Remove AnnotatedTypes#getIteratedType"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be087ec007db5e9ccdf9c16c627ccf97fc980c8f", "author": {"user": {"login": "smillst", "name": "Suzanne Millstein"}}, "url": "https://github.com/typetools/checker-framework/commit/be087ec007db5e9ccdf9c16c627ccf97fc980c8f", "committedDate": "2020-11-24T21:06:50Z", "message": "Merge branch 'for-loop-capture' of github.com:smillst/checker-framework into for-loop-capture"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3OTIyODgw", "url": "https://github.com/typetools/checker-framework/pull/3927#pullrequestreview-537922880", "createdAt": "2020-11-24T21:06:52Z", "commit": {"oid": "e346b8bf3c6cfe046a707fab572d6e3ad02757d5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMTowNjo1MlrOH5VLNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMTowODo1N1rOH5VPRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg3NzgxMw==", "bodyText": "I realize the terminology existed before this pull request, but I find \"iterated type\" confusing because it's new, nonstandard jargon.  Consider renaming the methods, such as to getIteratorElementType.", "url": "https://github.com/typetools/checker-framework/pull/3927#discussion_r529877813", "createdAt": "2020-11-24T21:06:52Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java", "diffHunk": "@@ -2061,6 +2061,75 @@ protected void adaptGetClassReturnTypeToReceiver(\n         classWildcardArg.setExtendsBound(newBound);\n     }\n \n+    /**\n+     * Return the element type of the given iterator. This is usually the type of {@code\n+     * expression.itertor().next()}. If {@code expression} is an array, it is the component type of\n+     * the array.\n+     *\n+     * @param expression an expression whose type is an array or implements {@link Iterable}\n+     * @return the type of {@code expression.itertor().next()} or if {@code expression} is an array,\n+     *     the component type of the array.\n+     */\n+    public AnnotatedTypeMirror getIteratedType(ExpressionTree expression) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e346b8bf3c6cfe046a707fab572d6e3ad02757d5"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg3ODE2Mw==", "bodyText": "It pains me to see this re-computed on every call.  I would save it in a field.  Can you do that with iterableElmType too?", "url": "https://github.com/typetools/checker-framework/pull/3927#discussion_r529878163", "createdAt": "2020-11-24T21:07:33Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java", "diffHunk": "@@ -2061,6 +2061,75 @@ protected void adaptGetClassReturnTypeToReceiver(\n         classWildcardArg.setExtendsBound(newBound);\n     }\n \n+    /**\n+     * Return the element type of the given iterator. This is usually the type of {@code\n+     * expression.itertor().next()}. If {@code expression} is an array, it is the component type of\n+     * the array.\n+     *\n+     * @param expression an expression whose type is an array or implements {@link Iterable}\n+     * @return the type of {@code expression.itertor().next()} or if {@code expression} is an array,\n+     *     the component type of the array.\n+     */\n+    public AnnotatedTypeMirror getIteratedType(ExpressionTree expression) {\n+        return getIteratedType(expression, getAnnotatedType(expression));\n+    }\n+\n+    /**\n+     * Return the element type of the given iterator. This is usually the type of {@code\n+     * expression.itertor().next()}. If {@code expression} is an array, it is the component type of\n+     * the array.\n+     *\n+     * @param expression an expression whose type is an array or implements {@link Iterable}\n+     * @param iterableType the type of the expression\n+     * @return the type of {@code expression.itertor().next()} or if {@code expression} is an array,\n+     *     the component type of the array.\n+     */\n+    protected AnnotatedTypeMirror getIteratedType(\n+            ExpressionTree expression, AnnotatedTypeMirror iterableType) {\n+        switch (iterableType.getKind()) {\n+            case ARRAY:\n+                return ((AnnotatedArrayType) iterableType).getComponentType();\n+            case WILDCARD:\n+                return getIteratedType(\n+                        expression,\n+                        ((AnnotatedWildcardType) iterableType).getExtendsBound().deepCopy());\n+            case TYPEVAR:\n+                return getIteratedType(\n+                        expression, ((AnnotatedTypeVariable) iterableType).getUpperBound());\n+            case DECLARED:\n+                TypeElement iterableElement =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e346b8bf3c6cfe046a707fab572d6e3ad02757d5"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg3ODg1NQ==", "bodyText": "Please add a test case and reference that test case from this comment.  Or, if the comment is obviated by other changes such as the addition of the MethodInvocationNode.iteratorExpression field, delete the comment.", "url": "https://github.com/typetools/checker-framework/pull/3927#discussion_r529878855", "createdAt": "2020-11-24T21:08:57Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java", "diffHunk": "@@ -2061,6 +2061,75 @@ protected void adaptGetClassReturnTypeToReceiver(\n         classWildcardArg.setExtendsBound(newBound);\n     }\n \n+    /**\n+     * Return the element type of the given iterator. This is usually the type of {@code\n+     * expression.itertor().next()}. If {@code expression} is an array, it is the component type of\n+     * the array.\n+     *\n+     * @param expression an expression whose type is an array or implements {@link Iterable}\n+     * @return the type of {@code expression.itertor().next()} or if {@code expression} is an array,\n+     *     the component type of the array.\n+     */\n+    public AnnotatedTypeMirror getIteratedType(ExpressionTree expression) {\n+        return getIteratedType(expression, getAnnotatedType(expression));\n+    }\n+\n+    /**\n+     * Return the element type of the given iterator. This is usually the type of {@code\n+     * expression.itertor().next()}. If {@code expression} is an array, it is the component type of\n+     * the array.\n+     *\n+     * @param expression an expression whose type is an array or implements {@link Iterable}\n+     * @param iterableType the type of the expression\n+     * @return the type of {@code expression.itertor().next()} or if {@code expression} is an array,\n+     *     the component type of the array.\n+     */\n+    protected AnnotatedTypeMirror getIteratedType(\n+            ExpressionTree expression, AnnotatedTypeMirror iterableType) {\n+        switch (iterableType.getKind()) {\n+            case ARRAY:\n+                return ((AnnotatedArrayType) iterableType).getComponentType();\n+            case WILDCARD:\n+                return getIteratedType(\n+                        expression,\n+                        ((AnnotatedWildcardType) iterableType).getExtendsBound().deepCopy());\n+            case TYPEVAR:\n+                return getIteratedType(\n+                        expression, ((AnnotatedTypeVariable) iterableType).getUpperBound());\n+            case DECLARED:\n+                TypeElement iterableElement =\n+                        ElementUtils.getTypeElement(processingEnv, Iterable.class);\n+                AnnotatedDeclaredType iterableElmType = getAnnotatedType(iterableElement);\n+                AnnotatedDeclaredType dt =\n+                        AnnotatedTypes.asSuper(this, iterableType, iterableElmType);\n+                if (dt.getTypeArguments().isEmpty()) {\n+                    TypeElement e = ElementUtils.getTypeElement(processingEnv, Object.class);\n+                    return getAnnotatedType(e);\n+                } else {\n+                    return dt.getTypeArguments().get(0);\n+                }\n+\n+                // TODO: Properly desugar Iterator.next(). The below doesn't work because", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e346b8bf3c6cfe046a707fab572d6e3ad02757d5"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3OTUwNjg1", "url": "https://github.com/typetools/checker-framework/pull/3927#pullrequestreview-537950685", "createdAt": "2020-11-24T21:22:45Z", "commit": {"oid": "be087ec007db5e9ccdf9c16c627ccf97fc980c8f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMToyMjo0NVrOH5VsNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMToyMjo0NVrOH5VsNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg4NjI2Mw==", "bodyText": "@mernst I find the use of iterator here confusing.  If not an array, the expression must implement Iterable not Iterator.  I think you mean iterator as in an expression that can appear in a for each loop, but it's not clear.", "url": "https://github.com/typetools/checker-framework/pull/3927#discussion_r529886263", "createdAt": "2020-11-24T21:22:45Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java", "diffHunk": "@@ -2061,6 +2061,75 @@ protected void adaptGetClassReturnTypeToReceiver(\n         classWildcardArg.setExtendsBound(newBound);\n     }\n \n+    /**\n+     * Return the element type of the given iterator. This is usually the type of {@code", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be087ec007db5e9ccdf9c16c627ccf97fc980c8f"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7655a8732285038ee70c7dcb7d562fe8652821f5", "author": {"user": {"login": "smillst", "name": "Suzanne Millstein"}}, "url": "https://github.com/typetools/checker-framework/commit/7655a8732285038ee70c7dcb7d562fe8652821f5", "committedDate": "2020-11-24T21:37:24Z", "message": "Tweaks."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0254b58c9eb6f45a55da04ad13628e193f86fa58", "author": {"user": {"login": "smillst", "name": "Suzanne Millstein"}}, "url": "https://github.com/typetools/checker-framework/commit/0254b58c9eb6f45a55da04ad13628e193f86fa58", "committedDate": "2020-11-24T21:43:23Z", "message": "Tweaks."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fdac840ce17d9cf5866e18ba7133cca0b18bbc02", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/fdac840ce17d9cf5866e18ba7133cca0b18bbc02", "committedDate": "2020-11-24T21:59:40Z", "message": "Undo unrelated whitespace change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbbc698721887123059960d79d0c4dc66210478a", "author": {"user": {"login": "mernst", "name": "Michael Ernst"}}, "url": "https://github.com/typetools/checker-framework/commit/dbbc698721887123059960d79d0c4dc66210478a", "committedDate": "2020-11-24T21:59:52Z", "message": "Fix typo and clarify wording"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MDAxMDEz", "url": "https://github.com/typetools/checker-framework/pull/3927#pullrequestreview-538001013", "createdAt": "2020-11-24T22:00:07Z", "commit": {"oid": "0254b58c9eb6f45a55da04ad13628e193f86fa58"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MDE2Nzg4", "url": "https://github.com/typetools/checker-framework/pull/3927#pullrequestreview-538016788", "createdAt": "2020-11-24T22:24:23Z", "commit": {"oid": "dbbc698721887123059960d79d0c4dc66210478a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjoyNDoyNFrOH5Y1BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjoyNDoyNFrOH5Y1BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkzNzY2OQ==", "bodyText": "Should this be #getIteratorElementType...?", "url": "https://github.com/typetools/checker-framework/pull/3927#discussion_r529937669", "createdAt": "2020-11-24T22:24:24Z", "author": {"login": "wmdietl"}, "path": "changelog.txt", "diffHunk": "@@ -34,6 +34,9 @@ Removed a formal parameter from methods in `BaseTypeVisitor`:\n \n In Analysis.runAnalysisFor(), changed boolean parameter to enum BeforeOrAfter.\n \n+Removed org.checkerframework.framework.util.AnnotatedTypes#getIteratedType; use\n+AnnotatedTypeFactory#getIteratedType(ExpressionTree) instead.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbbc698721887123059960d79d0c4dc66210478a"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60fec345256b5c79843b71a180eb0f1b9e06646f", "author": {"user": {"login": "smillst", "name": "Suzanne Millstein"}}, "url": "https://github.com/typetools/checker-framework/commit/60fec345256b5c79843b71a180eb0f1b9e06646f", "committedDate": "2020-11-24T22:27:27Z", "message": "Fix change log."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb24bd35e0ace6d19c72cfea5de242d82315c516", "author": {"user": {"login": "smillst", "name": "Suzanne Millstein"}}, "url": "https://github.com/typetools/checker-framework/commit/eb24bd35e0ace6d19c72cfea5de242d82315c516", "committedDate": "2020-11-24T22:27:30Z", "message": "Merge remote-tracking branch 'origin/master' into for-loop-capture"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "638a9bcec861e1165dcae57ed8dda7173b8e7a24", "author": {"user": {"login": "smillst", "name": "Suzanne Millstein"}}, "url": "https://github.com/typetools/checker-framework/commit/638a9bcec861e1165dcae57ed8dda7173b8e7a24", "committedDate": "2020-11-24T22:27:40Z", "message": "Merge branch 'for-loop-capture' of github.com:smillst/checker-framework into for-loop-capture"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MDE4NzE3", "url": "https://github.com/typetools/checker-framework/pull/3927#pullrequestreview-538018717", "createdAt": "2020-11-24T22:27:56Z", "commit": {"oid": "dbbc698721887123059960d79d0c4dc66210478a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjoyODo1NFrOH5ZHqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjoyODo1NFrOH5ZHqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk0MjQ0MA==", "bodyText": "Should this be getIterableElementType?  That indicates the type of the argument more precisely.  I'm OK with the current name, too.", "url": "https://github.com/typetools/checker-framework/pull/3927#discussion_r529942440", "createdAt": "2020-11-24T22:28:54Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/type/AnnotatedTypeFactory.java", "diffHunk": "@@ -2061,6 +2069,75 @@ protected void adaptGetClassReturnTypeToReceiver(\n         classWildcardArg.setExtendsBound(newBound);\n     }\n \n+    /**\n+     * Return the element type of {@code expression}. This is usually the type of {@code\n+     * expression.itertor().next()}. If {@code expression} is an array, it is the component type of\n+     * the array.\n+     *\n+     * @param expression an expression whose type is an array or implements {@link Iterable}\n+     * @return the type of {@code expression.itertor().next()} or if {@code expression} is an array,\n+     *     the component type of the array.\n+     */\n+    public AnnotatedTypeMirror getIteratorElementType(ExpressionTree expression) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "638a9bcec861e1165dcae57ed8dda7173b8e7a24"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bcf5612f49f2123beed9c1be432190e424b9176", "author": {"user": {"login": "smillst", "name": "Suzanne Millstein"}}, "url": "https://github.com/typetools/checker-framework/commit/2bcf5612f49f2123beed9c1be432190e424b9176", "committedDate": "2020-11-24T22:30:56Z", "message": "Rename to getIterableElementType."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MDM0Nzk3", "url": "https://github.com/typetools/checker-framework/pull/3927#pullrequestreview-538034797", "createdAt": "2020-11-24T22:58:05Z", "commit": {"oid": "2bcf5612f49f2123beed9c1be432190e424b9176"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjo1ODowNVrOH5a_xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzowMjoxM1rOH5bQeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk3MzE4OA==", "bodyText": "Should this be \"Iterable\" rather than \"Iterator\"?  (The same comment applies elsewhere in the pull request.)", "url": "https://github.com/typetools/checker-framework/pull/3927#discussion_r529973188", "createdAt": "2020-11-24T22:58:05Z", "author": {"login": "mernst"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/builder/CFGTranslationPhaseOne.java", "diffHunk": "@@ -2426,10 +2426,18 @@ public Node visitEnhancedForLoop(EnhancedForLoopTree tree, Void p) {\n             MethodInvocationNode nextCallNode =\n                     new MethodInvocationNode(\n                             nextCall, nextAccessNode, Collections.emptyList(), getCurrentPath());\n+            // If the type of iteratorVariable is a capture, its type tree may be missing\n+            // annotations, so save the expression in the node so that the full type can be found\n+            // later.\n+            nextCallNode.setIteratorExpression(expression);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bcf5612f49f2123beed9c1be432190e424b9176"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk3NzQ2Ng==", "bodyText": "Can you make \"iter expression\" more descriptive?  Even changing it to a term that is used elsewhere in the code would be better, I think.", "url": "https://github.com/typetools/checker-framework/pull/3927#discussion_r529977466", "createdAt": "2020-11-24T23:02:13Z", "author": {"login": "mernst"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/node/MethodInvocationNode.java", "diffHunk": "@@ -76,6 +96,28 @@ public TreePath getTreePath() {\n         return treePath;\n     }\n \n+    /**\n+     * If this MethodInvocationNode is a node for an {@link Iterator#next()} desugared from an\n+     * enhanced for loop, then return the expression in the for loop, e.g., {@code iter} in {@code\n+     * for(Object o: iter}. Otherwise, return null.\n+     *\n+     * @return the iter expression, or null if this is not a {@link Iterator#next()} from an\n+     *     enhanced for loop\n+     */\n+    public @Nullable ExpressionTree getIteratorExpression() {\n+        return iteratorExpression;\n+    }\n+\n+    /**\n+     * Set the iter expression.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bcf5612f49f2123beed9c1be432190e424b9176"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "663c29fb520ecb7180120eb03c9c284da53de6b6", "author": {"user": {"login": "smillst", "name": "Suzanne Millstein"}}, "url": "https://github.com/typetools/checker-framework/commit/663c29fb520ecb7180120eb03c9c284da53de6b6", "committedDate": "2020-11-25T15:55:17Z", "message": "Renames."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NzUwOTEy", "url": "https://github.com/typetools/checker-framework/pull/3927#pullrequestreview-538750912", "createdAt": "2020-11-25T18:17:29Z", "commit": {"oid": "663c29fb520ecb7180120eb03c9c284da53de6b6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2551, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}