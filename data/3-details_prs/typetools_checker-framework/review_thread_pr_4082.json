{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2NTU1MzA3", "number": 4082, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMToyNTo1NVrOFJ6Bsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNjozM1rOFJ6UyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTMyMjExOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMToyNTo1NVrOIMbjnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxNToyNjowNVrOIMvevg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkwNTMwOQ==", "bodyText": "The result of getName() is not guaranteed to be interned, so use .equals().", "url": "https://github.com/typetools/checker-framework/pull/4082#discussion_r549905309", "createdAt": "2020-12-30T01:25:55Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -516,12 +519,94 @@\n     /** List of upstream checker names. Includes the current checker. */\n     protected List<@FullyQualifiedName String> upstreamCheckerNames;\n \n+    /**\n+     * Tries to unwrap ProcessingEnvironment from proxy in IntelliJ >=2020.3.\n+     *\n+     * @param envProxy is dynamic proxy wrapping processing environment\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapIntelliJ(Object envProxy) {\n+        InvocationHandler handler = Proxy.getInvocationHandler(envProxy);\n+        try {\n+            Field field = handler.getClass().getDeclaredField(\"val$delegateTo\");\n+            field.setAccessible(true);\n+            Object o = field.get(handler);\n+            if (o instanceof ProcessingEnvironment) {\n+                return (ProcessingEnvironment) o;\n+            }\n+            return null;\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Gradle incremental processing unwrapping inspired by project Lombok.\n+     *\n+     * @param delegateClass is class in which we try to find delegate field\n+     * @param env is processing environment wrapper\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapGradle(\n+            Class<?> delegateClass, Object env) {\n+        try {\n+            Field field = delegateClass.getDeclaredField(\"delegate\");\n+            field.setAccessible(true);\n+            Object o = field.get(env);\n+            if (o instanceof ProcessingEnvironment) {\n+                return (ProcessingEnvironment) o;\n+            }\n+            return null;\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * IntelliJ wraps processing environment in dynamic proxy to check for modifications done by\n+     * annotation processors. But lots of functionality both here and in AbstractTypeProcessor call\n+     * methods from javac that require processing environment to be\n+     * com.sun.tools.javac.processing.JavacProcessingEnvironment and fail on proxy - thus in case\n+     * proxy is used, we have to unwrap it.\n+     *\n+     * @param env is processing environment supplied to checker\n+     * @return unwrapped environment if it is dynamic proxy, created by IntelliJ; original value in\n+     *     all other cases\n+     */\n+    private static ProcessingEnvironment unwrapProcessingEnvironment(ProcessingEnvironment env) {\n+        // equality, not instanceof corresponds to test in Trees and JavacTask\n+        // comparison instead of equals is required by some tests in CheckerFramework CI\n+        if (env.getClass().getName()\n+                == \"com.sun.tools.javac.processing.JavacProcessingEnvironment\") {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ef247eaa29eaf8308a9d94d680f31e944d9837e"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDA0ODQwNA==", "bodyText": "I used equals originally and I do prefer it. But it caused typecheck_jdk11 test to fail originally... I might need Your help working around that.\nAnyways I committed change to equals for now", "url": "https://github.com/typetools/checker-framework/pull/4082#discussion_r550048404", "createdAt": "2020-12-30T08:52:18Z", "author": {"login": "MichalStehlikCz"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -516,12 +519,94 @@\n     /** List of upstream checker names. Includes the current checker. */\n     protected List<@FullyQualifiedName String> upstreamCheckerNames;\n \n+    /**\n+     * Tries to unwrap ProcessingEnvironment from proxy in IntelliJ >=2020.3.\n+     *\n+     * @param envProxy is dynamic proxy wrapping processing environment\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapIntelliJ(Object envProxy) {\n+        InvocationHandler handler = Proxy.getInvocationHandler(envProxy);\n+        try {\n+            Field field = handler.getClass().getDeclaredField(\"val$delegateTo\");\n+            field.setAccessible(true);\n+            Object o = field.get(handler);\n+            if (o instanceof ProcessingEnvironment) {\n+                return (ProcessingEnvironment) o;\n+            }\n+            return null;\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Gradle incremental processing unwrapping inspired by project Lombok.\n+     *\n+     * @param delegateClass is class in which we try to find delegate field\n+     * @param env is processing environment wrapper\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapGradle(\n+            Class<?> delegateClass, Object env) {\n+        try {\n+            Field field = delegateClass.getDeclaredField(\"delegate\");\n+            field.setAccessible(true);\n+            Object o = field.get(env);\n+            if (o instanceof ProcessingEnvironment) {\n+                return (ProcessingEnvironment) o;\n+            }\n+            return null;\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * IntelliJ wraps processing environment in dynamic proxy to check for modifications done by\n+     * annotation processors. But lots of functionality both here and in AbstractTypeProcessor call\n+     * methods from javac that require processing environment to be\n+     * com.sun.tools.javac.processing.JavacProcessingEnvironment and fail on proxy - thus in case\n+     * proxy is used, we have to unwrap it.\n+     *\n+     * @param env is processing environment supplied to checker\n+     * @return unwrapped environment if it is dynamic proxy, created by IntelliJ; original value in\n+     *     all other cases\n+     */\n+    private static ProcessingEnvironment unwrapProcessingEnvironment(ProcessingEnvironment env) {\n+        // equality, not instanceof corresponds to test in Trees and JavacTask\n+        // comparison instead of equals is required by some tests in CheckerFramework CI\n+        if (env.getClass().getName()\n+                == \"com.sun.tools.javac.processing.JavacProcessingEnvironment\") {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkwNTMwOQ=="}, "originalCommit": {"oid": "8ef247eaa29eaf8308a9d94d680f31e944d9837e"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE3ODc3NQ==", "bodyText": "See log from typecheck_jdk11.sh / test-typecheck.sh\n\nTask :framework:checkInterning\n/__w/1/s/framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java:586: warning: [interning:unnecessary.equals] use of .equals can be safely replaced by ==/!=\n.equals(\"com.sun.tools.javac.processing.JavacProcessingEnvironment\")) {\n^\nerror: warnings found and -Werror specified\n1 error\n1 warning", "url": "https://github.com/typetools/checker-framework/pull/4082#discussion_r550178775", "createdAt": "2020-12-30T12:30:23Z", "author": {"login": "MichalStehlikCz"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -516,12 +519,94 @@\n     /** List of upstream checker names. Includes the current checker. */\n     protected List<@FullyQualifiedName String> upstreamCheckerNames;\n \n+    /**\n+     * Tries to unwrap ProcessingEnvironment from proxy in IntelliJ >=2020.3.\n+     *\n+     * @param envProxy is dynamic proxy wrapping processing environment\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapIntelliJ(Object envProxy) {\n+        InvocationHandler handler = Proxy.getInvocationHandler(envProxy);\n+        try {\n+            Field field = handler.getClass().getDeclaredField(\"val$delegateTo\");\n+            field.setAccessible(true);\n+            Object o = field.get(handler);\n+            if (o instanceof ProcessingEnvironment) {\n+                return (ProcessingEnvironment) o;\n+            }\n+            return null;\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Gradle incremental processing unwrapping inspired by project Lombok.\n+     *\n+     * @param delegateClass is class in which we try to find delegate field\n+     * @param env is processing environment wrapper\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapGradle(\n+            Class<?> delegateClass, Object env) {\n+        try {\n+            Field field = delegateClass.getDeclaredField(\"delegate\");\n+            field.setAccessible(true);\n+            Object o = field.get(env);\n+            if (o instanceof ProcessingEnvironment) {\n+                return (ProcessingEnvironment) o;\n+            }\n+            return null;\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * IntelliJ wraps processing environment in dynamic proxy to check for modifications done by\n+     * annotation processors. But lots of functionality both here and in AbstractTypeProcessor call\n+     * methods from javac that require processing environment to be\n+     * com.sun.tools.javac.processing.JavacProcessingEnvironment and fail on proxy - thus in case\n+     * proxy is used, we have to unwrap it.\n+     *\n+     * @param env is processing environment supplied to checker\n+     * @return unwrapped environment if it is dynamic proxy, created by IntelliJ; original value in\n+     *     all other cases\n+     */\n+    private static ProcessingEnvironment unwrapProcessingEnvironment(ProcessingEnvironment env) {\n+        // equality, not instanceof corresponds to test in Trees and JavacTask\n+        // comparison instead of equals is required by some tests in CheckerFramework CI\n+        if (env.getClass().getName()\n+                == \"com.sun.tools.javac.processing.JavacProcessingEnvironment\") {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkwNTMwOQ=="}, "originalCommit": {"oid": "8ef247eaa29eaf8308a9d94d680f31e944d9837e"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIzMTc0Mg==", "bodyText": "Although there is no guarantee in general, when using Oracle's JDK the method's return value is interned, and we can make that assumption.  I put the == test back.", "url": "https://github.com/typetools/checker-framework/pull/4082#discussion_r550231742", "createdAt": "2020-12-30T15:26:05Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -516,12 +519,94 @@\n     /** List of upstream checker names. Includes the current checker. */\n     protected List<@FullyQualifiedName String> upstreamCheckerNames;\n \n+    /**\n+     * Tries to unwrap ProcessingEnvironment from proxy in IntelliJ >=2020.3.\n+     *\n+     * @param envProxy is dynamic proxy wrapping processing environment\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapIntelliJ(Object envProxy) {\n+        InvocationHandler handler = Proxy.getInvocationHandler(envProxy);\n+        try {\n+            Field field = handler.getClass().getDeclaredField(\"val$delegateTo\");\n+            field.setAccessible(true);\n+            Object o = field.get(handler);\n+            if (o instanceof ProcessingEnvironment) {\n+                return (ProcessingEnvironment) o;\n+            }\n+            return null;\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Gradle incremental processing unwrapping inspired by project Lombok.\n+     *\n+     * @param delegateClass is class in which we try to find delegate field\n+     * @param env is processing environment wrapper\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapGradle(\n+            Class<?> delegateClass, Object env) {\n+        try {\n+            Field field = delegateClass.getDeclaredField(\"delegate\");\n+            field.setAccessible(true);\n+            Object o = field.get(env);\n+            if (o instanceof ProcessingEnvironment) {\n+                return (ProcessingEnvironment) o;\n+            }\n+            return null;\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * IntelliJ wraps processing environment in dynamic proxy to check for modifications done by\n+     * annotation processors. But lots of functionality both here and in AbstractTypeProcessor call\n+     * methods from javac that require processing environment to be\n+     * com.sun.tools.javac.processing.JavacProcessingEnvironment and fail on proxy - thus in case\n+     * proxy is used, we have to unwrap it.\n+     *\n+     * @param env is processing environment supplied to checker\n+     * @return unwrapped environment if it is dynamic proxy, created by IntelliJ; original value in\n+     *     all other cases\n+     */\n+    private static ProcessingEnvironment unwrapProcessingEnvironment(ProcessingEnvironment env) {\n+        // equality, not instanceof corresponds to test in Trees and JavacTask\n+        // comparison instead of equals is required by some tests in CheckerFramework CI\n+        if (env.getClass().getName()\n+                == \"com.sun.tools.javac.processing.JavacProcessingEnvironment\") {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkwNTMwOQ=="}, "originalCommit": {"oid": "8ef247eaa29eaf8308a9d94d680f31e944d9837e"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTMzMDgwOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMTozMjo1M1rOIMboAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwODo1ODoxMVrOIMklCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkwNjQzNA==", "bodyText": "envProxy has type ProcessingEnvironment.  Is there a reason you didn't declare it as such?\nI have the same question regarding unwrapGradle.  Also, for consistency I would give the formal parameters of the two methods the same name.", "url": "https://github.com/typetools/checker-framework/pull/4082#discussion_r549906434", "createdAt": "2020-12-30T01:32:53Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -516,12 +519,94 @@\n     /** List of upstream checker names. Includes the current checker. */\n     protected List<@FullyQualifiedName String> upstreamCheckerNames;\n \n+    /**\n+     * Tries to unwrap ProcessingEnvironment from proxy in IntelliJ >=2020.3.\n+     *\n+     * @param envProxy is dynamic proxy wrapping processing environment\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapIntelliJ(Object envProxy) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ef247eaa29eaf8308a9d94d680f31e944d9837e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDA1MzEzMA==", "bodyText": "It was just copy & paste error as in original code, all parameters were declared as Object - fixed", "url": "https://github.com/typetools/checker-framework/pull/4082#discussion_r550053130", "createdAt": "2020-12-30T08:58:11Z", "author": {"login": "MichalStehlikCz"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -516,12 +519,94 @@\n     /** List of upstream checker names. Includes the current checker. */\n     protected List<@FullyQualifiedName String> upstreamCheckerNames;\n \n+    /**\n+     * Tries to unwrap ProcessingEnvironment from proxy in IntelliJ >=2020.3.\n+     *\n+     * @param envProxy is dynamic proxy wrapping processing environment\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapIntelliJ(Object envProxy) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkwNjQzNA=="}, "originalCommit": {"oid": "8ef247eaa29eaf8308a9d94d680f31e944d9837e"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTMzNDU0OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMTozNjoyNlrOIMbp6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwOTowNTowMlrOIMk5Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkwNjkyMA==", "bodyText": "I am having trouble understanding these two lines.  Could you please clarify?\n(I can't even tell whether this is two sentences or one; could you use capitalization and punctuation (a period at the end of the sentence) to help with that?)", "url": "https://github.com/typetools/checker-framework/pull/4082#discussion_r549906920", "createdAt": "2020-12-30T01:36:26Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -516,12 +519,94 @@\n     /** List of upstream checker names. Includes the current checker. */\n     protected List<@FullyQualifiedName String> upstreamCheckerNames;\n \n+    /**\n+     * Tries to unwrap ProcessingEnvironment from proxy in IntelliJ >=2020.3.\n+     *\n+     * @param envProxy is dynamic proxy wrapping processing environment\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapIntelliJ(Object envProxy) {\n+        InvocationHandler handler = Proxy.getInvocationHandler(envProxy);\n+        try {\n+            Field field = handler.getClass().getDeclaredField(\"val$delegateTo\");\n+            field.setAccessible(true);\n+            Object o = field.get(handler);\n+            if (o instanceof ProcessingEnvironment) {\n+                return (ProcessingEnvironment) o;\n+            }\n+            return null;\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Gradle incremental processing unwrapping inspired by project Lombok.\n+     *\n+     * @param delegateClass is class in which we try to find delegate field\n+     * @param env is processing environment wrapper\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapGradle(\n+            Class<?> delegateClass, Object env) {\n+        try {\n+            Field field = delegateClass.getDeclaredField(\"delegate\");\n+            field.setAccessible(true);\n+            Object o = field.get(env);\n+            if (o instanceof ProcessingEnvironment) {\n+                return (ProcessingEnvironment) o;\n+            }\n+            return null;\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * IntelliJ wraps processing environment in dynamic proxy to check for modifications done by\n+     * annotation processors. But lots of functionality both here and in AbstractTypeProcessor call\n+     * methods from javac that require processing environment to be\n+     * com.sun.tools.javac.processing.JavacProcessingEnvironment and fail on proxy - thus in case\n+     * proxy is used, we have to unwrap it.\n+     *\n+     * @param env is processing environment supplied to checker\n+     * @return unwrapped environment if it is dynamic proxy, created by IntelliJ; original value in\n+     *     all other cases\n+     */\n+    private static ProcessingEnvironment unwrapProcessingEnvironment(ProcessingEnvironment env) {\n+        // equality, not instanceof corresponds to test in Trees and JavacTask", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ef247eaa29eaf8308a9d94d680f31e944d9837e"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDA1ODI5NA==", "bodyText": "I tried to reformat comments to make them clearer", "url": "https://github.com/typetools/checker-framework/pull/4082#discussion_r550058294", "createdAt": "2020-12-30T09:05:02Z", "author": {"login": "MichalStehlikCz"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -516,12 +519,94 @@\n     /** List of upstream checker names. Includes the current checker. */\n     protected List<@FullyQualifiedName String> upstreamCheckerNames;\n \n+    /**\n+     * Tries to unwrap ProcessingEnvironment from proxy in IntelliJ >=2020.3.\n+     *\n+     * @param envProxy is dynamic proxy wrapping processing environment\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapIntelliJ(Object envProxy) {\n+        InvocationHandler handler = Proxy.getInvocationHandler(envProxy);\n+        try {\n+            Field field = handler.getClass().getDeclaredField(\"val$delegateTo\");\n+            field.setAccessible(true);\n+            Object o = field.get(handler);\n+            if (o instanceof ProcessingEnvironment) {\n+                return (ProcessingEnvironment) o;\n+            }\n+            return null;\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Gradle incremental processing unwrapping inspired by project Lombok.\n+     *\n+     * @param delegateClass is class in which we try to find delegate field\n+     * @param env is processing environment wrapper\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapGradle(\n+            Class<?> delegateClass, Object env) {\n+        try {\n+            Field field = delegateClass.getDeclaredField(\"delegate\");\n+            field.setAccessible(true);\n+            Object o = field.get(env);\n+            if (o instanceof ProcessingEnvironment) {\n+                return (ProcessingEnvironment) o;\n+            }\n+            return null;\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * IntelliJ wraps processing environment in dynamic proxy to check for modifications done by\n+     * annotation processors. But lots of functionality both here and in AbstractTypeProcessor call\n+     * methods from javac that require processing environment to be\n+     * com.sun.tools.javac.processing.JavacProcessingEnvironment and fail on proxy - thus in case\n+     * proxy is used, we have to unwrap it.\n+     *\n+     * @param env is processing environment supplied to checker\n+     * @return unwrapped environment if it is dynamic proxy, created by IntelliJ; original value in\n+     *     all other cases\n+     */\n+    private static ProcessingEnvironment unwrapProcessingEnvironment(ProcessingEnvironment env) {\n+        // equality, not instanceof corresponds to test in Trees and JavacTask", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkwNjkyMA=="}, "originalCommit": {"oid": "8ef247eaa29eaf8308a9d94d680f31e944d9837e"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTMzNTgzOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMTozNzozMVrOIMbqkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwOTowNTo0OFrOIMk70g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkwNzA4OA==", "bodyText": "Could you clarify \"here\"?  I think it means in this class, but it might mean in this method or something else.", "url": "https://github.com/typetools/checker-framework/pull/4082#discussion_r549907088", "createdAt": "2020-12-30T01:37:31Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -516,12 +519,94 @@\n     /** List of upstream checker names. Includes the current checker. */\n     protected List<@FullyQualifiedName String> upstreamCheckerNames;\n \n+    /**\n+     * Tries to unwrap ProcessingEnvironment from proxy in IntelliJ >=2020.3.\n+     *\n+     * @param envProxy is dynamic proxy wrapping processing environment\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapIntelliJ(Object envProxy) {\n+        InvocationHandler handler = Proxy.getInvocationHandler(envProxy);\n+        try {\n+            Field field = handler.getClass().getDeclaredField(\"val$delegateTo\");\n+            field.setAccessible(true);\n+            Object o = field.get(handler);\n+            if (o instanceof ProcessingEnvironment) {\n+                return (ProcessingEnvironment) o;\n+            }\n+            return null;\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Gradle incremental processing unwrapping inspired by project Lombok.\n+     *\n+     * @param delegateClass is class in which we try to find delegate field\n+     * @param env is processing environment wrapper\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapGradle(\n+            Class<?> delegateClass, Object env) {\n+        try {\n+            Field field = delegateClass.getDeclaredField(\"delegate\");\n+            field.setAccessible(true);\n+            Object o = field.get(env);\n+            if (o instanceof ProcessingEnvironment) {\n+                return (ProcessingEnvironment) o;\n+            }\n+            return null;\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * IntelliJ wraps processing environment in dynamic proxy to check for modifications done by\n+     * annotation processors. But lots of functionality both here and in AbstractTypeProcessor call", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ef247eaa29eaf8308a9d94d680f31e944d9837e"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDA1ODk2Mg==", "bodyText": "I believe you already addressed this problem in your commit, thanks", "url": "https://github.com/typetools/checker-framework/pull/4082#discussion_r550058962", "createdAt": "2020-12-30T09:05:48Z", "author": {"login": "MichalStehlikCz"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -516,12 +519,94 @@\n     /** List of upstream checker names. Includes the current checker. */\n     protected List<@FullyQualifiedName String> upstreamCheckerNames;\n \n+    /**\n+     * Tries to unwrap ProcessingEnvironment from proxy in IntelliJ >=2020.3.\n+     *\n+     * @param envProxy is dynamic proxy wrapping processing environment\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapIntelliJ(Object envProxy) {\n+        InvocationHandler handler = Proxy.getInvocationHandler(envProxy);\n+        try {\n+            Field field = handler.getClass().getDeclaredField(\"val$delegateTo\");\n+            field.setAccessible(true);\n+            Object o = field.get(handler);\n+            if (o instanceof ProcessingEnvironment) {\n+                return (ProcessingEnvironment) o;\n+            }\n+            return null;\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Gradle incremental processing unwrapping inspired by project Lombok.\n+     *\n+     * @param delegateClass is class in which we try to find delegate field\n+     * @param env is processing environment wrapper\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapGradle(\n+            Class<?> delegateClass, Object env) {\n+        try {\n+            Field field = delegateClass.getDeclaredField(\"delegate\");\n+            field.setAccessible(true);\n+            Object o = field.get(env);\n+            if (o instanceof ProcessingEnvironment) {\n+                return (ProcessingEnvironment) o;\n+            }\n+            return null;\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * IntelliJ wraps processing environment in dynamic proxy to check for modifications done by\n+     * annotation processors. But lots of functionality both here and in AbstractTypeProcessor call", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkwNzA4OA=="}, "originalCommit": {"oid": "8ef247eaa29eaf8308a9d94d680f31e944d9837e"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTMzNzc1OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMTozODo1NFrOIMbreQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwOToxODo1NlrOIMlicg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkwNzMyMQ==", "bodyText": "Which checker is this supplied to?  Or do you mean to the Checker Framework?\nAlso, please don't use passive voice.  Indicate the actor if it is important, or don't mention it if it is not.", "url": "https://github.com/typetools/checker-framework/pull/4082#discussion_r549907321", "createdAt": "2020-12-30T01:38:54Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -516,12 +519,94 @@\n     /** List of upstream checker names. Includes the current checker. */\n     protected List<@FullyQualifiedName String> upstreamCheckerNames;\n \n+    /**\n+     * Tries to unwrap ProcessingEnvironment from proxy in IntelliJ >=2020.3.\n+     *\n+     * @param envProxy is dynamic proxy wrapping processing environment\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapIntelliJ(Object envProxy) {\n+        InvocationHandler handler = Proxy.getInvocationHandler(envProxy);\n+        try {\n+            Field field = handler.getClass().getDeclaredField(\"val$delegateTo\");\n+            field.setAccessible(true);\n+            Object o = field.get(handler);\n+            if (o instanceof ProcessingEnvironment) {\n+                return (ProcessingEnvironment) o;\n+            }\n+            return null;\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Gradle incremental processing unwrapping inspired by project Lombok.\n+     *\n+     * @param delegateClass is class in which we try to find delegate field\n+     * @param env is processing environment wrapper\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapGradle(\n+            Class<?> delegateClass, Object env) {\n+        try {\n+            Field field = delegateClass.getDeclaredField(\"delegate\");\n+            field.setAccessible(true);\n+            Object o = field.get(env);\n+            if (o instanceof ProcessingEnvironment) {\n+                return (ProcessingEnvironment) o;\n+            }\n+            return null;\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * IntelliJ wraps processing environment in dynamic proxy to check for modifications done by\n+     * annotation processors. But lots of functionality both here and in AbstractTypeProcessor call\n+     * methods from javac that require processing environment to be\n+     * com.sun.tools.javac.processing.JavacProcessingEnvironment and fail on proxy - thus in case\n+     * proxy is used, we have to unwrap it.\n+     *\n+     * @param env is processing environment supplied to checker", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ef247eaa29eaf8308a9d94d680f31e944d9837e"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDA2ODg1MA==", "bodyText": "I removed text; I believe it is explained by comment on return sufficiently. Yes, I meant supplied to CheckerFramework, but I am not sure who is actually actor - frankly speaking, I do not quite understand mechanism used by IntelliJ or Gradle to inject their proxy around processing environment to compilation process :(", "url": "https://github.com/typetools/checker-framework/pull/4082#discussion_r550068850", "createdAt": "2020-12-30T09:18:56Z", "author": {"login": "MichalStehlikCz"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -516,12 +519,94 @@\n     /** List of upstream checker names. Includes the current checker. */\n     protected List<@FullyQualifiedName String> upstreamCheckerNames;\n \n+    /**\n+     * Tries to unwrap ProcessingEnvironment from proxy in IntelliJ >=2020.3.\n+     *\n+     * @param envProxy is dynamic proxy wrapping processing environment\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapIntelliJ(Object envProxy) {\n+        InvocationHandler handler = Proxy.getInvocationHandler(envProxy);\n+        try {\n+            Field field = handler.getClass().getDeclaredField(\"val$delegateTo\");\n+            field.setAccessible(true);\n+            Object o = field.get(handler);\n+            if (o instanceof ProcessingEnvironment) {\n+                return (ProcessingEnvironment) o;\n+            }\n+            return null;\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Gradle incremental processing unwrapping inspired by project Lombok.\n+     *\n+     * @param delegateClass is class in which we try to find delegate field\n+     * @param env is processing environment wrapper\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapGradle(\n+            Class<?> delegateClass, Object env) {\n+        try {\n+            Field field = delegateClass.getDeclaredField(\"delegate\");\n+            field.setAccessible(true);\n+            Object o = field.get(env);\n+            if (o instanceof ProcessingEnvironment) {\n+                return (ProcessingEnvironment) o;\n+            }\n+            return null;\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * IntelliJ wraps processing environment in dynamic proxy to check for modifications done by\n+     * annotation processors. But lots of functionality both here and in AbstractTypeProcessor call\n+     * methods from javac that require processing environment to be\n+     * com.sun.tools.javac.processing.JavacProcessingEnvironment and fail on proxy - thus in case\n+     * proxy is used, we have to unwrap it.\n+     *\n+     * @param env is processing environment supplied to checker", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkwNzMyMQ=="}, "originalCommit": {"oid": "8ef247eaa29eaf8308a9d94d680f31e944d9837e"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTM0ODk0OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMTo0ODowOFrOIMbw2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwOToyMDozN1rOIMlm7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkwODY5OQ==", "bodyText": "Annotations are not needed on local variables.  Could you remove this one and the next few to make the code less cluttered?", "url": "https://github.com/typetools/checker-framework/pull/4082#discussion_r549908699", "createdAt": "2020-12-30T01:48:08Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -516,12 +519,94 @@\n     /** List of upstream checker names. Includes the current checker. */\n     protected List<@FullyQualifiedName String> upstreamCheckerNames;\n \n+    /**\n+     * Tries to unwrap ProcessingEnvironment from proxy in IntelliJ >=2020.3.\n+     *\n+     * @param envProxy is dynamic proxy wrapping processing environment\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapIntelliJ(Object envProxy) {\n+        InvocationHandler handler = Proxy.getInvocationHandler(envProxy);\n+        try {\n+            Field field = handler.getClass().getDeclaredField(\"val$delegateTo\");\n+            field.setAccessible(true);\n+            Object o = field.get(handler);\n+            if (o instanceof ProcessingEnvironment) {\n+                return (ProcessingEnvironment) o;\n+            }\n+            return null;\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Gradle incremental processing unwrapping inspired by project Lombok.\n+     *\n+     * @param delegateClass is class in which we try to find delegate field\n+     * @param env is processing environment wrapper\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapGradle(\n+            Class<?> delegateClass, Object env) {\n+        try {\n+            Field field = delegateClass.getDeclaredField(\"delegate\");\n+            field.setAccessible(true);\n+            Object o = field.get(env);\n+            if (o instanceof ProcessingEnvironment) {\n+                return (ProcessingEnvironment) o;\n+            }\n+            return null;\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * IntelliJ wraps processing environment in dynamic proxy to check for modifications done by\n+     * annotation processors. But lots of functionality both here and in AbstractTypeProcessor call\n+     * methods from javac that require processing environment to be\n+     * com.sun.tools.javac.processing.JavacProcessingEnvironment and fail on proxy - thus in case\n+     * proxy is used, we have to unwrap it.\n+     *\n+     * @param env is processing environment supplied to checker\n+     * @return unwrapped environment if it is dynamic proxy, created by IntelliJ; original value in\n+     *     all other cases\n+     */\n+    private static ProcessingEnvironment unwrapProcessingEnvironment(ProcessingEnvironment env) {\n+        // equality, not instanceof corresponds to test in Trees and JavacTask\n+        // comparison instead of equals is required by some tests in CheckerFramework CI\n+        if (env.getClass().getName()\n+                == \"com.sun.tools.javac.processing.JavacProcessingEnvironment\") {\n+            return env;\n+        }\n+        // IntelliJ >2020.3 wraps processing environment in dynamic proxy...\n+        if (Proxy.isProxyClass(env.getClass())) {\n+            @Nullable ProcessingEnvironment unwrapped = unwrapIntelliJ(env);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ef247eaa29eaf8308a9d94d680f31e944d9837e"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDA2OTk5Nw==", "bodyText": "Ok, done", "url": "https://github.com/typetools/checker-framework/pull/4082#discussion_r550069997", "createdAt": "2020-12-30T09:20:37Z", "author": {"login": "MichalStehlikCz"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -516,12 +519,94 @@\n     /** List of upstream checker names. Includes the current checker. */\n     protected List<@FullyQualifiedName String> upstreamCheckerNames;\n \n+    /**\n+     * Tries to unwrap ProcessingEnvironment from proxy in IntelliJ >=2020.3.\n+     *\n+     * @param envProxy is dynamic proxy wrapping processing environment\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapIntelliJ(Object envProxy) {\n+        InvocationHandler handler = Proxy.getInvocationHandler(envProxy);\n+        try {\n+            Field field = handler.getClass().getDeclaredField(\"val$delegateTo\");\n+            field.setAccessible(true);\n+            Object o = field.get(handler);\n+            if (o instanceof ProcessingEnvironment) {\n+                return (ProcessingEnvironment) o;\n+            }\n+            return null;\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Gradle incremental processing unwrapping inspired by project Lombok.\n+     *\n+     * @param delegateClass is class in which we try to find delegate field\n+     * @param env is processing environment wrapper\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapGradle(\n+            Class<?> delegateClass, Object env) {\n+        try {\n+            Field field = delegateClass.getDeclaredField(\"delegate\");\n+            field.setAccessible(true);\n+            Object o = field.get(env);\n+            if (o instanceof ProcessingEnvironment) {\n+                return (ProcessingEnvironment) o;\n+            }\n+            return null;\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * IntelliJ wraps processing environment in dynamic proxy to check for modifications done by\n+     * annotation processors. But lots of functionality both here and in AbstractTypeProcessor call\n+     * methods from javac that require processing environment to be\n+     * com.sun.tools.javac.processing.JavacProcessingEnvironment and fail on proxy - thus in case\n+     * proxy is used, we have to unwrap it.\n+     *\n+     * @param env is processing environment supplied to checker\n+     * @return unwrapped environment if it is dynamic proxy, created by IntelliJ; original value in\n+     *     all other cases\n+     */\n+    private static ProcessingEnvironment unwrapProcessingEnvironment(ProcessingEnvironment env) {\n+        // equality, not instanceof corresponds to test in Trees and JavacTask\n+        // comparison instead of equals is required by some tests in CheckerFramework CI\n+        if (env.getClass().getName()\n+                == \"com.sun.tools.javac.processing.JavacProcessingEnvironment\") {\n+            return env;\n+        }\n+        // IntelliJ >2020.3 wraps processing environment in dynamic proxy...\n+        if (Proxy.isProxyClass(env.getClass())) {\n+            @Nullable ProcessingEnvironment unwrapped = unwrapIntelliJ(env);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkwODY5OQ=="}, "originalCommit": {"oid": "8ef247eaa29eaf8308a9d94d680f31e944d9837e"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTM3MDk2OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwMjowNjozM1rOIMb7zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwOToyODoxMVrOIMl-xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTUwMA==", "bodyText": "I suggest putting this test within unwrapIntelliJ, so that all logic related to IntelliJ proxies is together.", "url": "https://github.com/typetools/checker-framework/pull/4082#discussion_r549911500", "createdAt": "2020-12-30T02:06:33Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -516,12 +519,94 @@\n     /** List of upstream checker names. Includes the current checker. */\n     protected List<@FullyQualifiedName String> upstreamCheckerNames;\n \n+    /**\n+     * Tries to unwrap ProcessingEnvironment from proxy in IntelliJ >=2020.3.\n+     *\n+     * @param envProxy is dynamic proxy wrapping processing environment\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapIntelliJ(Object envProxy) {\n+        InvocationHandler handler = Proxy.getInvocationHandler(envProxy);\n+        try {\n+            Field field = handler.getClass().getDeclaredField(\"val$delegateTo\");\n+            field.setAccessible(true);\n+            Object o = field.get(handler);\n+            if (o instanceof ProcessingEnvironment) {\n+                return (ProcessingEnvironment) o;\n+            }\n+            return null;\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Gradle incremental processing unwrapping inspired by project Lombok.\n+     *\n+     * @param delegateClass is class in which we try to find delegate field\n+     * @param env is processing environment wrapper\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapGradle(\n+            Class<?> delegateClass, Object env) {\n+        try {\n+            Field field = delegateClass.getDeclaredField(\"delegate\");\n+            field.setAccessible(true);\n+            Object o = field.get(env);\n+            if (o instanceof ProcessingEnvironment) {\n+                return (ProcessingEnvironment) o;\n+            }\n+            return null;\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * IntelliJ wraps processing environment in dynamic proxy to check for modifications done by\n+     * annotation processors. But lots of functionality both here and in AbstractTypeProcessor call\n+     * methods from javac that require processing environment to be\n+     * com.sun.tools.javac.processing.JavacProcessingEnvironment and fail on proxy - thus in case\n+     * proxy is used, we have to unwrap it.\n+     *\n+     * @param env is processing environment supplied to checker\n+     * @return unwrapped environment if it is dynamic proxy, created by IntelliJ; original value in\n+     *     all other cases\n+     */\n+    private static ProcessingEnvironment unwrapProcessingEnvironment(ProcessingEnvironment env) {\n+        // equality, not instanceof corresponds to test in Trees and JavacTask\n+        // comparison instead of equals is required by some tests in CheckerFramework CI\n+        if (env.getClass().getName()\n+                == \"com.sun.tools.javac.processing.JavacProcessingEnvironment\") {\n+            return env;\n+        }\n+        // IntelliJ >2020.3 wraps processing environment in dynamic proxy...\n+        if (Proxy.isProxyClass(env.getClass())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ef247eaa29eaf8308a9d94d680f31e944d9837e"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDA3NjEwMw==", "bodyText": "Moved", "url": "https://github.com/typetools/checker-framework/pull/4082#discussion_r550076103", "createdAt": "2020-12-30T09:28:11Z", "author": {"login": "MichalStehlikCz"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -516,12 +519,94 @@\n     /** List of upstream checker names. Includes the current checker. */\n     protected List<@FullyQualifiedName String> upstreamCheckerNames;\n \n+    /**\n+     * Tries to unwrap ProcessingEnvironment from proxy in IntelliJ >=2020.3.\n+     *\n+     * @param envProxy is dynamic proxy wrapping processing environment\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapIntelliJ(Object envProxy) {\n+        InvocationHandler handler = Proxy.getInvocationHandler(envProxy);\n+        try {\n+            Field field = handler.getClass().getDeclaredField(\"val$delegateTo\");\n+            field.setAccessible(true);\n+            Object o = field.get(handler);\n+            if (o instanceof ProcessingEnvironment) {\n+                return (ProcessingEnvironment) o;\n+            }\n+            return null;\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Gradle incremental processing unwrapping inspired by project Lombok.\n+     *\n+     * @param delegateClass is class in which we try to find delegate field\n+     * @param env is processing environment wrapper\n+     * @return unwrapped processing environment, null if not successful\n+     */\n+    private static @Nullable ProcessingEnvironment unwrapGradle(\n+            Class<?> delegateClass, Object env) {\n+        try {\n+            Field field = delegateClass.getDeclaredField(\"delegate\");\n+            field.setAccessible(true);\n+            Object o = field.get(env);\n+            if (o instanceof ProcessingEnvironment) {\n+                return (ProcessingEnvironment) o;\n+            }\n+            return null;\n+        } catch (NoSuchFieldException | IllegalAccessException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * IntelliJ wraps processing environment in dynamic proxy to check for modifications done by\n+     * annotation processors. But lots of functionality both here and in AbstractTypeProcessor call\n+     * methods from javac that require processing environment to be\n+     * com.sun.tools.javac.processing.JavacProcessingEnvironment and fail on proxy - thus in case\n+     * proxy is used, we have to unwrap it.\n+     *\n+     * @param env is processing environment supplied to checker\n+     * @return unwrapped environment if it is dynamic proxy, created by IntelliJ; original value in\n+     *     all other cases\n+     */\n+    private static ProcessingEnvironment unwrapProcessingEnvironment(ProcessingEnvironment env) {\n+        // equality, not instanceof corresponds to test in Trees and JavacTask\n+        // comparison instead of equals is required by some tests in CheckerFramework CI\n+        if (env.getClass().getName()\n+                == \"com.sun.tools.javac.processing.JavacProcessingEnvironment\") {\n+            return env;\n+        }\n+        // IntelliJ >2020.3 wraps processing environment in dynamic proxy...\n+        if (Proxy.isProxyClass(env.getClass())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkxMTUwMA=="}, "originalCommit": {"oid": "8ef247eaa29eaf8308a9d94d680f31e944d9837e"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1904, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}