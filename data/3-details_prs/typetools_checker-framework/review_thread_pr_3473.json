{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4NjIwMDY4", "number": 3473, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjoxOToxMlrOEOVNsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMTo1NjoyMlrOEPr5DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDYzMDkxOnYy", "diffSide": "RIGHT", "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/FlowExpressions.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjoxOToxMlrOGxbKKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzo1MjoyMlrOGxewRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ3ODM3OA==", "bodyText": "Our \"Java\" expression language supports #1, but it is parsed into a LocalVariable.  So this comment here doesn't really make sense.", "url": "https://github.com/typetools/checker-framework/pull/3473#discussion_r454478378", "createdAt": "2020-07-14T16:19:12Z", "author": {"login": "smillst"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/FlowExpressions.java", "diffHunk": "@@ -447,8 +447,22 @@ private static Receiver internalReprOfMemberSelect(\n     }\n \n     /**\n-     * The poorly-named Receiver class is actually a Java AST. Each subclass represents a different\n-     * type of expression, such as MethodCall, ArrayAccess, LocalVariable, etc.\n+     * This class represents a Java expression and its type. However, it does not represent all\n+     * possible Java expressions (for example, it does not represent a ternary expression; use\n+     * {@link FlowExpressions.Unknown} for unrepresentable expressions). Furthermore, it supports", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d69d9a0d2ac87366159b25add077728e76c49203"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUwMzk3Ng==", "bodyText": "@smillst Can you clarify your concern?  Do you mean that it doesn't make sense to call #1 a formal parameter?  From the perspective of a user that's what it is used for.  The Java compiler and JVM do treat formal parameters as local variables, but I think of that as an implementation detail.  Can you suggest alternate wording if this comment is misleading?", "url": "https://github.com/typetools/checker-framework/pull/3473#discussion_r454503976", "createdAt": "2020-07-14T16:58:21Z", "author": {"login": "mernst"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/FlowExpressions.java", "diffHunk": "@@ -447,8 +447,22 @@ private static Receiver internalReprOfMemberSelect(\n     }\n \n     /**\n-     * The poorly-named Receiver class is actually a Java AST. Each subclass represents a different\n-     * type of expression, such as MethodCall, ArrayAccess, LocalVariable, etc.\n+     * This class represents a Java expression and its type. However, it does not represent all\n+     * possible Java expressions (for example, it does not represent a ternary expression; use\n+     * {@link FlowExpressions.Unknown} for unrepresentable expressions). Furthermore, it supports", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ3ODM3OA=="}, "originalCommit": {"oid": "d69d9a0d2ac87366159b25add077728e76c49203"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUxMjI4Ng==", "bodyText": "The Javadoc seems to imply that there are Receiver classes for the extensions to the Java language, but there aren't.  #1 is represented by a local variable and <self> is  converted before parsing by the Lock Checker.", "url": "https://github.com/typetools/checker-framework/pull/3473#discussion_r454512286", "createdAt": "2020-07-14T17:12:11Z", "author": {"login": "smillst"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/FlowExpressions.java", "diffHunk": "@@ -447,8 +447,22 @@ private static Receiver internalReprOfMemberSelect(\n     }\n \n     /**\n-     * The poorly-named Receiver class is actually a Java AST. Each subclass represents a different\n-     * type of expression, such as MethodCall, ArrayAccess, LocalVariable, etc.\n+     * This class represents a Java expression and its type. However, it does not represent all\n+     * possible Java expressions (for example, it does not represent a ternary expression; use\n+     * {@link FlowExpressions.Unknown} for unrepresentable expressions). Furthermore, it supports", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ3ODM3OA=="}, "originalCommit": {"oid": "d69d9a0d2ac87366159b25add077728e76c49203"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUzNzI4NQ==", "bodyText": "Thanks for clarifying.", "url": "https://github.com/typetools/checker-framework/pull/3473#discussion_r454537285", "createdAt": "2020-07-14T17:52:22Z", "author": {"login": "mernst"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/FlowExpressions.java", "diffHunk": "@@ -447,8 +447,22 @@ private static Receiver internalReprOfMemberSelect(\n     }\n \n     /**\n-     * The poorly-named Receiver class is actually a Java AST. Each subclass represents a different\n-     * type of expression, such as MethodCall, ArrayAccess, LocalVariable, etc.\n+     * This class represents a Java expression and its type. However, it does not represent all\n+     * possible Java expressions (for example, it does not represent a ternary expression; use\n+     * {@link FlowExpressions.Unknown} for unrepresentable expressions). Furthermore, it supports", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ3ODM3OA=="}, "originalCommit": {"oid": "d69d9a0d2ac87366159b25add077728e76c49203"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODgxNTk5OnYy", "diffSide": "RIGHT", "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/FlowExpressions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMTo0ODoxNVrOGziC3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMzowMzo0MFrOGzjRFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY4ODM1MQ==", "bodyText": "From @smillst comment #3473 (comment) it sounds like <self> isn't handled here at all. So we probably should instead highlight such checker-specific extensions?", "url": "https://github.com/typetools/checker-framework/pull/3473#discussion_r456688351", "createdAt": "2020-07-17T21:48:15Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/FlowExpressions.java", "diffHunk": "@@ -447,12 +447,13 @@ private static Receiver internalReprOfMemberSelect(\n     }\n \n     /**\n-     * This class represents a Java expression and its type. However, it does not represent all\n-     * possible Java expressions (for example, it does not represent a ternary expression; use\n-     * {@link FlowExpressions.Unknown} for unrepresentable expressions). Furthermore, it supports\n-     * some <a\n+     * This class represents a Java expression and its type. It does not represent all possible Java\n+     * expressions (for example, it does not represent a ternary expression; use {@link\n+     * FlowExpressions.Unknown} for unrepresentable expressions). Furthermore, its string syntax\n+     * supports some <a\n      * href=\"https://checkerframework.org/manual/#java-expressions-as-arguments\">extensions</a>,\n-     * notably {@code <self>} and {@code #1} for formal parameters.\n+     * notably {@code <self>} and {@code #1} for formal parameters. (There are not special", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd1b1c6e7e7caa46cc1b0c3bd020984c0a9c21d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcwODM3Mw==", "bodyText": "I will remove the mention from here, since it is specific to Checker Framework syntax.", "url": "https://github.com/typetools/checker-framework/pull/3473#discussion_r456708373", "createdAt": "2020-07-17T23:03:40Z", "author": {"login": "mernst"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/FlowExpressions.java", "diffHunk": "@@ -447,12 +447,13 @@ private static Receiver internalReprOfMemberSelect(\n     }\n \n     /**\n-     * This class represents a Java expression and its type. However, it does not represent all\n-     * possible Java expressions (for example, it does not represent a ternary expression; use\n-     * {@link FlowExpressions.Unknown} for unrepresentable expressions). Furthermore, it supports\n-     * some <a\n+     * This class represents a Java expression and its type. It does not represent all possible Java\n+     * expressions (for example, it does not represent a ternary expression; use {@link\n+     * FlowExpressions.Unknown} for unrepresentable expressions). Furthermore, its string syntax\n+     * supports some <a\n      * href=\"https://checkerframework.org/manual/#java-expressions-as-arguments\">extensions</a>,\n-     * notably {@code <self>} and {@code #1} for formal parameters.\n+     * notably {@code <self>} and {@code #1} for formal parameters. (There are not special", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY4ODM1MQ=="}, "originalCommit": {"oid": "1fd1b1c6e7e7caa46cc1b0c3bd020984c0a9c21d"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODgxNjQ2OnYy", "diffSide": "RIGHT", "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/FlowExpressions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMTo0ODozMlrOGziDLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMTo0ODozMlrOGziDLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY4ODQyOQ==", "bodyText": "Should the not be no?", "url": "https://github.com/typetools/checker-framework/pull/3473#discussion_r456688429", "createdAt": "2020-07-17T21:48:32Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/analysis/FlowExpressions.java", "diffHunk": "@@ -447,12 +447,13 @@ private static Receiver internalReprOfMemberSelect(\n     }\n \n     /**\n-     * This class represents a Java expression and its type. However, it does not represent all\n-     * possible Java expressions (for example, it does not represent a ternary expression; use\n-     * {@link FlowExpressions.Unknown} for unrepresentable expressions). Furthermore, it supports\n-     * some <a\n+     * This class represents a Java expression and its type. It does not represent all possible Java\n+     * expressions (for example, it does not represent a ternary expression; use {@link\n+     * FlowExpressions.Unknown} for unrepresentable expressions). Furthermore, its string syntax\n+     * supports some <a\n      * href=\"https://checkerframework.org/manual/#java-expressions-as-arguments\">extensions</a>,\n-     * notably {@code <self>} and {@code #1} for formal parameters.\n+     * notably {@code <self>} and {@code #1} for formal parameters. (There are not special", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd1b1c6e7e7caa46cc1b0c3bd020984c0a9c21d"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODgyMzgzOnYy", "diffSide": "RIGHT", "path": "docs/manual/advanced-features.tex", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMTo1MjowMlrOGziHdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNToyMjo0MFrOG0S7rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY4OTUyNA==", "bodyText": "Same concern about <self> as above.", "url": "https://github.com/typetools/checker-framework/pull/3473#discussion_r456689524", "createdAt": "2020-07-17T21:52:02Z", "author": {"login": "wmdietl"}, "path": "docs/manual/advanced-features.tex", "diffHunk": "@@ -1140,7 +1140,8 @@\n \\item \\refqualclass{checker/lock/qual}{Holding}\n \\end{itemize}\n \n-The set of permitted expressions is a subset of all Java expressions:\n+The set of permitted expressions is a subset of all Java expressions,\n+with a few extensions, notably \\code{<self>} and formal parameters like \\<\\#1>.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd1b1c6e7e7caa46cc1b0c3bd020984c0a9c21d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcwNzc5MQ==", "bodyText": "It is important to include <self> here, because this section is about the Checker Framework Java expression syntax.", "url": "https://github.com/typetools/checker-framework/pull/3473#discussion_r456707791", "createdAt": "2020-07-17T23:01:08Z", "author": {"login": "mernst"}, "path": "docs/manual/advanced-features.tex", "diffHunk": "@@ -1140,7 +1140,8 @@\n \\item \\refqualclass{checker/lock/qual}{Holding}\n \\end{itemize}\n \n-The set of permitted expressions is a subset of all Java expressions:\n+The set of permitted expressions is a subset of all Java expressions,\n+with a few extensions, notably \\code{<self>} and formal parameters like \\<\\#1>.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY4OTUyNA=="}, "originalCommit": {"oid": "1fd1b1c6e7e7caa46cc1b0c3bd020984c0a9c21d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcyNTU1NQ==", "bodyText": "But it is only the Lock Checker that supports the <self> expression: https://github.com/typetools/checker-framework/blob/master/checker/src/main/java/org/checkerframework/checker/lock/LockVisitor.java#L78\nSo it seems rather confusing to include it like it is a generally supported expression.", "url": "https://github.com/typetools/checker-framework/pull/3473#discussion_r456725555", "createdAt": "2020-07-18T00:34:13Z", "author": {"login": "wmdietl"}, "path": "docs/manual/advanced-features.tex", "diffHunk": "@@ -1140,7 +1140,8 @@\n \\item \\refqualclass{checker/lock/qual}{Holding}\n \\end{itemize}\n \n-The set of permitted expressions is a subset of all Java expressions:\n+The set of permitted expressions is a subset of all Java expressions,\n+with a few extensions, notably \\code{<self>} and formal parameters like \\<\\#1>.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY4OTUyNA=="}, "originalCommit": {"oid": "1fd1b1c6e7e7caa46cc1b0c3bd020984c0a9c21d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ4OTMyNg==", "bodyText": "I added a qualifier to its description.", "url": "https://github.com/typetools/checker-framework/pull/3473#discussion_r457489326", "createdAt": "2020-07-20T15:22:40Z", "author": {"login": "mernst"}, "path": "docs/manual/advanced-features.tex", "diffHunk": "@@ -1140,7 +1140,8 @@\n \\item \\refqualclass{checker/lock/qual}{Holding}\n \\end{itemize}\n \n-The set of permitted expressions is a subset of all Java expressions:\n+The set of permitted expressions is a subset of all Java expressions,\n+with a few extensions, notably \\code{<self>} and formal parameters like \\<\\#1>.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY4OTUyNA=="}, "originalCommit": {"oid": "1fd1b1c6e7e7caa46cc1b0c3bd020984c0a9c21d"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODgzMjEzOnYy", "diffSide": "RIGHT", "path": "docs/manual/advanced-features.tex", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMTo1NjoyMlrOGziMhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQwMDozNjozMVrOGzkViA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY5MDgyMA==", "bodyText": "Aren't at least comparisons still forbidden? Or is this partially addressing #3474?", "url": "https://github.com/typetools/checker-framework/pull/3473#discussion_r456690820", "createdAt": "2020-07-17T21:56:22Z", "author": {"login": "wmdietl"}, "path": "docs/manual/advanced-features.tex", "diffHunk": "@@ -1246,20 +1247,12 @@\n \n \n \\textbf{Limitations:}\n-The following Java expressions may not currently be written:\n-% The Checker Framework is best at reasoning about Java expressions that\n-% are variable references, but these expressions are not.\n-\\begin{itemize}\n-\\item String concatenation expressions.\n-\\item Mathematical operators (plus, minus, division, ...).\n-\\item Comparisons (equality, less than, etc.).\n-\\end{itemize}\n-\n-Additionally, it is not possible to write\n-quantification over all array components (e.g. to express that all\n+It is not possible to write a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd1b1c6e7e7caa46cc1b0c3bd020984c0a9c21d"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcwNzgzNw==", "bodyText": "Binary operations are possible, so I'm not positive that comparisons are explicitly forbidden.  Since part of the list became out of date, I removed it so that the rest does not get out of date.", "url": "https://github.com/typetools/checker-framework/pull/3473#discussion_r456707837", "createdAt": "2020-07-17T23:01:21Z", "author": {"login": "mernst"}, "path": "docs/manual/advanced-features.tex", "diffHunk": "@@ -1246,20 +1247,12 @@\n \n \n \\textbf{Limitations:}\n-The following Java expressions may not currently be written:\n-% The Checker Framework is best at reasoning about Java expressions that\n-% are variable references, but these expressions are not.\n-\\begin{itemize}\n-\\item String concatenation expressions.\n-\\item Mathematical operators (plus, minus, division, ...).\n-\\item Comparisons (equality, less than, etc.).\n-\\end{itemize}\n-\n-Additionally, it is not possible to write\n-quantification over all array components (e.g. to express that all\n+It is not possible to write a", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY5MDgyMA=="}, "originalCommit": {"oid": "1fd1b1c6e7e7caa46cc1b0c3bd020984c0a9c21d"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcyNTg5Ng==", "bodyText": "Ok, so let's leave it for #3474 to add proper restrictions again.", "url": "https://github.com/typetools/checker-framework/pull/3473#discussion_r456725896", "createdAt": "2020-07-18T00:36:31Z", "author": {"login": "wmdietl"}, "path": "docs/manual/advanced-features.tex", "diffHunk": "@@ -1246,20 +1247,12 @@\n \n \n \\textbf{Limitations:}\n-The following Java expressions may not currently be written:\n-% The Checker Framework is best at reasoning about Java expressions that\n-% are variable references, but these expressions are not.\n-\\begin{itemize}\n-\\item String concatenation expressions.\n-\\item Mathematical operators (plus, minus, division, ...).\n-\\item Comparisons (equality, less than, etc.).\n-\\end{itemize}\n-\n-Additionally, it is not possible to write\n-quantification over all array components (e.g. to express that all\n+It is not possible to write a", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY5MDgyMA=="}, "originalCommit": {"oid": "1fd1b1c6e7e7caa46cc1b0c3bd020984c0a9c21d"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1561, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}