{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3NDkxNjA1", "number": 3395, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMjo1NTozM1rOEIv02w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMTo1MDozMlrOEJnxTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjA3NjQzOnYy", "diffSide": "RIGHT", "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/DOTCFGVisualizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMjo1NTozNFrOGo5WDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMjo1NTozNFrOGo5WDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUzNTc1Nw==", "bodyText": "The two escape methods can stay private, right?", "url": "https://github.com/typetools/checker-framework/pull/3395#discussion_r445535757", "createdAt": "2020-06-25T12:55:34Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/DOTCFGVisualizer.java", "diffHunk": "@@ -284,7 +277,7 @@ public String visualizeStoreKeyVal(String keyName, Object value) {\n      * @param str the string to be escaped\n      * @return the escaped version of the string\n      */\n-    private String escapeDoubleQuotes(final String str) {\n+    protected String escapeDoubleQuotes(final String str) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f6c1a64f241e25d809b70c22eee0a2baf986c8e"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjA4OTkxOnYy", "diffSide": "RIGHT", "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/AbstractCFGVisualizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMjo1OToxNVrOGo5eiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMjo1OToxNVrOGo5eiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUzNzkyOA==", "bodyText": "How about Format the given object as a String suitable for the output format, i.e. with format-specific characters escaped.", "url": "https://github.com/typetools/checker-framework/pull/3395#discussion_r445537928", "createdAt": "2020-06-25T12:59:15Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/AbstractCFGVisualizer.java", "diffHunk": "@@ -261,6 +261,33 @@ protected String loopOverBlockContents(\n         }\n     }\n \n+    /**\n+     * Format the given object into a String.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f6c1a64f241e25d809b70c22eee0a2baf986c8e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Nzg4NTYzOnYy", "diffSide": "RIGHT", "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/DOTCFGVisualizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDo1MTo0MVrOGpLXMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDo1MTo0MVrOGpLXMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgzMDk2MA==", "bodyText": "Now that the two visualizeBlockNode methods are exactly the same, should we just remove them and make the Helper the real implementation in AbstractCFGVisualizer?", "url": "https://github.com/typetools/checker-framework/pull/3395#discussion_r445830960", "createdAt": "2020-06-25T20:51:41Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/DOTCFGVisualizer.java", "diffHunk": "@@ -206,21 +206,14 @@ protected String dotOutputFileName(UnderlyingAST ast) {\n         return outFileName;\n     }\n \n+    @Override\n+    protected String format(Object obj) {\n+        return escapeDoubleQuotes(obj);\n+    }\n+\n     @Override\n     public String visualizeBlockNode(Node t, @Nullable Analysis<V, S, T> analysis) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "082878c0e568a01bd2f5b72fdb48c2a7efec711e"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTg4MjkyOnYy", "diffSide": "LEFT", "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/AbstractCFGVisualizer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMToxNTo0MFrOGpyI7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMjowNDoxMFrOGpycAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2NjI4Ng==", "bodyText": "What happens if analysis is null? Before, it looks like an escapeString is appended when it is a SPECIAL_BLOCK.\nIs that missing now? Is that a problem or intended?", "url": "https://github.com/typetools/checker-framework/pull/3395#discussion_r446466286", "createdAt": "2020-06-27T01:15:40Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/AbstractCFGVisualizer.java", "diffHunk": "@@ -204,20 +201,17 @@ protected String visualizeBlockHelper(\n                     @SuppressWarnings(\"nullness:contracts.precondition.not.satisfied\")\n                     S store = analysis.getResult().getStoreAfter(lastNode);\n                     StringBuilder sbStore = new StringBuilder();\n-                    sbStore.append(escapeString).append(\"~~~~~~~~~\").append(escapeString);\n+                    sbStore.append(\"~~~~~~~~~\").append(escapeString);\n                     sbStore.append(\"After: \");\n                     if (store != null) {\n                         sbStore.append(visualizeStore(store));\n                     } else {\n-                        sbStore.append(\"null store\");\n+                        sbStore.append(\"null store\").append(escapeString);\n                     }\n                     sbBlock.append(sbStore);\n                 }\n             }\n         }\n-        if (!centered) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b336186edc370098ad2a92c7d2ca50a42b071b5"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3MTE3MA==", "bodyText": "It is intended, this logic is no longer needed.\nvisualizeSpecialBlockHelper should be responsible for making special blocks centered. DOTCFGVisualizer now passes a separator to visualizeSpecialBlockHelper: https://github.com/typetools/checker-framework/pull/3395/files#diff-f708a265ff3b24e68538c35aef4dfb7eR136\nNow in this situation, when the analysis is null, a special block in DOT will be like: [shape=oval label=\"<entry>\\n\"] (already centered).", "url": "https://github.com/typetools/checker-framework/pull/3395#discussion_r446471170", "createdAt": "2020-06-27T02:04:10Z", "author": {"login": "xingweitian"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/AbstractCFGVisualizer.java", "diffHunk": "@@ -204,20 +201,17 @@ protected String visualizeBlockHelper(\n                     @SuppressWarnings(\"nullness:contracts.precondition.not.satisfied\")\n                     S store = analysis.getResult().getStoreAfter(lastNode);\n                     StringBuilder sbStore = new StringBuilder();\n-                    sbStore.append(escapeString).append(\"~~~~~~~~~\").append(escapeString);\n+                    sbStore.append(\"~~~~~~~~~\").append(escapeString);\n                     sbStore.append(\"After: \");\n                     if (store != null) {\n                         sbStore.append(visualizeStore(store));\n                     } else {\n-                        sbStore.append(\"null store\");\n+                        sbStore.append(\"null store\").append(escapeString);\n                     }\n                     sbBlock.append(sbStore);\n                 }\n             }\n         }\n-        if (!centered) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2NjI4Ng=="}, "originalCommit": {"oid": "8b336186edc370098ad2a92c7d2ca50a42b071b5"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTg4NTc1OnYy", "diffSide": "RIGHT", "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/StringCFGVisualizer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMToxOTozNVrOGpyKVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMjowNToxOVrOGpycmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2NjY0NQ==", "bodyText": "Let's not use wildcard imports.", "url": "https://github.com/typetools/checker-framework/pull/3395#discussion_r446466645", "createdAt": "2020-06-27T01:19:35Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/StringCFGVisualizer.java", "diffHunk": "@@ -1,10 +1,6 @@\n package org.checkerframework.dataflow.cfg;\n \n-import java.util.HashMap;\n-import java.util.IdentityHashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b336186edc370098ad2a92c7d2ca50a42b071b5"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3MTMyMA==", "bodyText": "Thanks for catching it! Fixed.", "url": "https://github.com/typetools/checker-framework/pull/3395#discussion_r446471320", "createdAt": "2020-06-27T02:05:19Z", "author": {"login": "xingweitian"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/StringCFGVisualizer.java", "diffHunk": "@@ -1,10 +1,6 @@\n package org.checkerframework.dataflow.cfg;\n \n-import java.util.HashMap;\n-import java.util.IdentityHashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2NjY0NQ=="}, "originalCommit": {"oid": "8b336186edc370098ad2a92c7d2ca50a42b071b5"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTg4Njk1OnYy", "diffSide": "RIGHT", "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/StringCFGVisualizer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMToyMDozNlrOGpyK2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMjo1NTowMlrOGpytfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2Njc3OQ==", "bodyText": "Would it be hard to track down where the trailing spaces are coming from and make the output proper by construction?", "url": "https://github.com/typetools/checker-framework/pull/3395#discussion_r446466779", "createdAt": "2020-06-27T01:20:36Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/StringCFGVisualizer.java", "diffHunk": "@@ -25,7 +20,7 @@\n     @Override\n     public Map<String, Object> visualize(\n             ControlFlowGraph cfg, Block entry, @Nullable Analysis<V, S, T> analysis) {\n-        String stringGraph = visualizeGraph(cfg, entry, analysis);\n+        String stringGraph = visualizeGraph(cfg, entry, analysis).trim();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b336186edc370098ad2a92c7d2ca50a42b071b5"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3NTY0Ng==", "bodyText": "I just came up with another way to avoid trailing spaces. Thanks for the remind!", "url": "https://github.com/typetools/checker-framework/pull/3395#discussion_r446475646", "createdAt": "2020-06-27T02:55:02Z", "author": {"login": "xingweitian"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/StringCFGVisualizer.java", "diffHunk": "@@ -25,7 +20,7 @@\n     @Override\n     public Map<String, Object> visualize(\n             ControlFlowGraph cfg, Block entry, @Nullable Analysis<V, S, T> analysis) {\n-        String stringGraph = visualizeGraph(cfg, entry, analysis);\n+        String stringGraph = visualizeGraph(cfg, entry, analysis).trim();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2Njc3OQ=="}, "originalCommit": {"oid": "8b336186edc370098ad2a92c7d2ca50a42b071b5"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTI0MjM3OnYy", "diffSide": "RIGHT", "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/StringCFGVisualizer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMTo1MDozMlrOGqNOdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMToyOToxMFrOGqoURA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkxMDA2OA==", "bodyText": "Can you add a comment why the lineSeparator is only needed in this case?\nWasn't it nicer before with the Helper method that reduced duplication?", "url": "https://github.com/typetools/checker-framework/pull/3395#discussion_r446910068", "createdAt": "2020-06-29T11:50:32Z", "author": {"login": "wmdietl"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/StringCFGVisualizer.java", "diffHunk": "@@ -73,15 +65,25 @@ public String visualizeBlock(Block bb, @Nullable Analysis<V, S, T> analysis) {\n \n     @Override\n     public String visualizeSpecialBlock(SpecialBlock sbb) {\n-        return super.visualizeSpecialBlockHelper(sbb, lineSeparator);\n+        switch (sbb.getSpecialType()) {\n+            case ENTRY:\n+                return \"<entry>\" + lineSeparator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "126bc36a6ba68e0cc1b48128f953d79863844519"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM1MzkyNA==", "bodyText": "I have pushed a better solution... The previous change has been reverted.", "url": "https://github.com/typetools/checker-framework/pull/3395#discussion_r447353924", "createdAt": "2020-06-30T01:29:10Z", "author": {"login": "xingweitian"}, "path": "dataflow/src/main/java/org/checkerframework/dataflow/cfg/StringCFGVisualizer.java", "diffHunk": "@@ -73,15 +65,25 @@ public String visualizeBlock(Block bb, @Nullable Analysis<V, S, T> analysis) {\n \n     @Override\n     public String visualizeSpecialBlock(SpecialBlock sbb) {\n-        return super.visualizeSpecialBlockHelper(sbb, lineSeparator);\n+        switch (sbb.getSpecialType()) {\n+            case ENTRY:\n+                return \"<entry>\" + lineSeparator;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkxMDA2OA=="}, "originalCommit": {"oid": "126bc36a6ba68e0cc1b48128f953d79863844519"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1708, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}