{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4NDA3Mzk5", "number": 3524, "title": "Propagate length information from argument to return value of Arrays.copyOf()", "bodyText": "Fixes #3224;\nThe Value checker did not infer array length information from the arguments of Arrays.copyOf() method leading to false positives.\nTo avoid those false positives, check if the expression valueTree is a call to Arrays.copyOf() method in commonAssignmentCheck() of ValueVisitor.java and then add appropriate @ArrayLen annotations to the return value of Arrays.copyOf().", "createdAt": "2020-07-29T12:29:43Z", "url": "https://github.com/typetools/checker-framework/pull/3524", "merged": true, "mergeCommit": {"oid": "c9c65d1987378749539fd353e59faf0b0cf23178"}, "closed": true, "closedAt": "2020-08-03T14:57:02Z", "author": {"login": "PRITI1999"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABczjFNLgH2gAyNDU4NDA3Mzk5OjU2MjRkMjdhNzhiNGYwMDFiMWUzYzIyMWJlZjM3M2Y2NmNiMjJhN2Q=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc6jRaPgH2gAyNDU4NDA3Mzk5Ojg4MWJiZTk0MzUzMGQyYTJlMGQ4YThhMjU4NTBjMGFhNWRiZDRkZmM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5624d27a78b4f001b1e3c221bef373f66cb22a7d", "author": {"user": {"login": "PRITI1999", "name": "Priti Chattopadhyay"}}, "url": "https://github.com/typetools/checker-framework/commit/5624d27a78b4f001b1e3c221bef373f66cb22a7d", "committedDate": "2020-07-10T12:48:35Z", "message": "Merge pull request #1 from typetools/master\n\nUpdate fork"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3723b511d80ffc2424695f00d5765514782a92e4", "author": {"user": {"login": "PRITI1999", "name": "Priti Chattopadhyay"}}, "url": "https://github.com/typetools/checker-framework/commit/3723b511d80ffc2424695f00d5765514782a92e4", "committedDate": "2020-07-21T02:21:51Z", "message": "Merge pull request #4 from typetools/master\n\nUpdating fork"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32a728fa0fc51699fbeefd70c7dfa1b797ddfafa", "author": {"user": {"login": "PRITI1999", "name": "Priti Chattopadhyay"}}, "url": "https://github.com/typetools/checker-framework/commit/32a728fa0fc51699fbeefd70c7dfa1b797ddfafa", "committedDate": "2020-07-25T03:58:04Z", "message": "Temporary fix for #3224"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fea713f6d5402497c9d2abee4b2ba1755b1a54a", "author": {"user": {"login": "PRITI1999", "name": "Priti Chattopadhyay"}}, "url": "https://github.com/typetools/checker-framework/commit/2fea713f6d5402497c9d2abee4b2ba1755b1a54a", "committedDate": "2020-07-26T03:45:35Z", "message": "Add ArrayLen annotations from @IntVal"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "888a7a4d45dba9e750ceb1d8dcf144788d4f880e", "author": {"user": {"login": "PRITI1999", "name": "Priti Chattopadhyay"}}, "url": "https://github.com/typetools/checker-framework/commit/888a7a4d45dba9e750ceb1d8dcf144788d4f880e", "committedDate": "2020-07-28T02:29:11Z", "message": "Remove unnecessary () and add documentation to test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48ad98a2e508c37609e6afa1816fe662e2444bdc", "author": {"user": {"login": "PRITI1999", "name": "Priti Chattopadhyay"}}, "url": "https://github.com/typetools/checker-framework/commit/48ad98a2e508c37609e6afa1816fe662e2444bdc", "committedDate": "2020-07-29T02:12:04Z", "message": "Merge pull request #8 from typetools/master\n\nUpdate fork"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "688ca4f12aa48340354a9fc8b3748296efabcddb", "author": {"user": {"login": "PRITI1999", "name": "Priti Chattopadhyay"}}, "url": "https://github.com/typetools/checker-framework/commit/688ca4f12aa48340354a9fc8b3748296efabcddb", "committedDate": "2020-07-29T03:33:40Z", "message": "Remove unnecessary ()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NzI1ODcw", "url": "https://github.com/typetools/checker-framework/pull/3524#pullrequestreview-457725870", "createdAt": "2020-07-29T17:13:05Z", "commit": {"oid": "688ca4f12aa48340354a9fc8b3748296efabcddb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzoxMzowNVrOG5CIiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzoxNjozM1rOG5CRAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ1Njk2OA==", "bodyText": "This only tests that the second argument is any array length access expression. The correct test needs to check that it is an array length access for the array that is the first argument. You can add a test case for this:\n    public static void m4(String @MinLen(1) [] args, String[] otherArray) {\n        // :: error: assignment.type.incompatible\n        String @MinLen(1) [] args2 = Arrays.copyOf(args, otherArray.length);\n    }", "url": "https://github.com/typetools/checker-framework/pull/3524#discussion_r462456968", "createdAt": "2020-07-29T17:13:05Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/value/ValueVisitor.java", "diffHunk": "@@ -76,6 +79,26 @@ protected void commonAssignmentCheck(\n                     getTypeFactory().createIntRangeAnnotation(Range.CHAR_EVERYTHING));\n         }\n \n+        if (valueTree.getKind() == Kind.METHOD_INVOCATION\n+                && TreeUtils.isArrayscopyOfMethodInvocation((MethodInvocationTree) valueTree)\n+                && valueType.getKind() == TypeKind.ARRAY) {\n+            List<? extends ExpressionTree> args = ((MethodInvocationTree) valueTree).getArguments();\n+            AnnotatedTypeMirror arrType = atypeFactory.getAnnotatedType(args.get(0));\n+            if (TreeUtils.isArrayLengthAccess(args.get(1))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "688ca4f12aa48340354a9fc8b3748296efabcddb"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ1ODkwMA==", "bodyText": "Why only IntVal? If there is an IntRange annotation, you could take its lower bound (from field) and use that.", "url": "https://github.com/typetools/checker-framework/pull/3524#discussion_r462458900", "createdAt": "2020-07-29T17:16:11Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/value/ValueVisitor.java", "diffHunk": "@@ -76,6 +79,26 @@ protected void commonAssignmentCheck(\n                     getTypeFactory().createIntRangeAnnotation(Range.CHAR_EVERYTHING));\n         }\n \n+        if (valueTree.getKind() == Kind.METHOD_INVOCATION\n+                && TreeUtils.isArrayscopyOfMethodInvocation((MethodInvocationTree) valueTree)\n+                && valueType.getKind() == TypeKind.ARRAY) {\n+            List<? extends ExpressionTree> args = ((MethodInvocationTree) valueTree).getArguments();\n+            AnnotatedTypeMirror arrType = atypeFactory.getAnnotatedType(args.get(0));\n+            if (TreeUtils.isArrayLengthAccess(args.get(1))) {\n+                valueType = arrType;\n+            } else if (atypeFactory.getAnnotatedType(args.get(1)).getAnnotation(IntVal.class)\n+                    != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "688ca4f12aa48340354a9fc8b3748296efabcddb"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ1OTEzNw==", "bodyText": "(and, you should add a test with IntRange when you do)", "url": "https://github.com/typetools/checker-framework/pull/3524#discussion_r462459137", "createdAt": "2020-07-29T17:16:33Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/value/ValueVisitor.java", "diffHunk": "@@ -76,6 +79,26 @@ protected void commonAssignmentCheck(\n                     getTypeFactory().createIntRangeAnnotation(Range.CHAR_EVERYTHING));\n         }\n \n+        if (valueTree.getKind() == Kind.METHOD_INVOCATION\n+                && TreeUtils.isArrayscopyOfMethodInvocation((MethodInvocationTree) valueTree)\n+                && valueType.getKind() == TypeKind.ARRAY) {\n+            List<? extends ExpressionTree> args = ((MethodInvocationTree) valueTree).getArguments();\n+            AnnotatedTypeMirror arrType = atypeFactory.getAnnotatedType(args.get(0));\n+            if (TreeUtils.isArrayLengthAccess(args.get(1))) {\n+                valueType = arrType;\n+            } else if (atypeFactory.getAnnotatedType(args.get(1)).getAnnotation(IntVal.class)\n+                    != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ1ODkwMA=="}, "originalCommit": {"oid": "688ca4f12aa48340354a9fc8b3748296efabcddb"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3966be6af765918300fc12a7e5aac7d5c81edae3", "author": {"user": {"login": "PRITI1999", "name": "Priti Chattopadhyay"}}, "url": "https://github.com/typetools/checker-framework/commit/3966be6af765918300fc12a7e5aac7d5c81edae3", "committedDate": "2020-07-30T04:01:05Z", "message": "Improve fix and augment a func to the test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35a6430068cb3d0892bff03d6a6964ab94261e25", "author": {"user": {"login": "PRITI1999", "name": "Priti Chattopadhyay"}}, "url": "https://github.com/typetools/checker-framework/commit/35a6430068cb3d0892bff03d6a6964ab94261e25", "committedDate": "2020-07-30T04:02:33Z", "message": "Merge branch 'fix-issue-3224' of https://github.com/priti1999/checker-framework into fix-issue-3224"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NTUyNjAy", "url": "https://github.com/typetools/checker-framework/pull/3524#pullrequestreview-458552602", "createdAt": "2020-07-30T16:12:23Z", "commit": {"oid": "35a6430068cb3d0892bff03d6a6964ab94261e25"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNjoxMjoyNFrOG5qEJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNjozMzowM1rOG5q3PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzExMTIwNQ==", "bodyText": "nit: in camel-case, this should be isArraysCopyOfMethodInvocation (that is, capitalize the \"c\" in \"copy\")", "url": "https://github.com/typetools/checker-framework/pull/3524#discussion_r463111205", "createdAt": "2020-07-30T16:12:24Z", "author": {"login": "kelloggm"}, "path": "javacutil/src/main/java/org/checkerframework/javacutil/TreeUtils.java", "diffHunk": "@@ -1273,6 +1273,27 @@ public static boolean isAnonymousConstructor(final MethodTree method) {\n         return false;\n     }\n \n+    /**\n+     * Determines if the tree is a call to Arrays.copyOf()\n+     *\n+     * @param tree tree to check\n+     * @return true if the given tree is a call to Arrays.copyOf() method\n+     */\n+    public static boolean isArrayscopyOfMethodInvocation(MethodInvocationTree tree) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35a6430068cb3d0892bff03d6a6964ab94261e25"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzExMzIyMg==", "bodyText": "This test isn't strong enough - it will return true on any method named copyOf in a class named Arrays, even if it is not the one from the JDK.\nYou should look at how IndexMethodIdentifier in the Index Checker identifies specific methods; you should be able to use the same kind of code here to identify Arrays.copyOf with confidence.\n(It would probably also be worthwhile to add an inner static class named \"Arrays\" with a static \"copyOf\" method to the tests and then ensure that your code is not invoked when that method is called.)", "url": "https://github.com/typetools/checker-framework/pull/3524#discussion_r463113222", "createdAt": "2020-07-30T16:15:34Z", "author": {"login": "kelloggm"}, "path": "javacutil/src/main/java/org/checkerframework/javacutil/TreeUtils.java", "diffHunk": "@@ -1273,6 +1273,27 @@ public static boolean isAnonymousConstructor(final MethodTree method) {\n         return false;\n     }\n \n+    /**\n+     * Determines if the tree is a call to Arrays.copyOf()\n+     *\n+     * @param tree tree to check\n+     * @return true if the given tree is a call to Arrays.copyOf() method\n+     */\n+    public static boolean isArrayscopyOfMethodInvocation(MethodInvocationTree tree) {\n+        if (tree.getMethodSelect().getKind() != Kind.MEMBER_SELECT) {\n+            return false;\n+        }\n+\n+        MemberSelectTree memberSelectTree = (MemberSelectTree) tree.getMethodSelect();\n+\n+        if (memberSelectTree.getExpression().toString().equals(\"Arrays\")\n+                && getMethodName(memberSelectTree).equals(\"copyOf\")) {\n+            return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35a6430068cb3d0892bff03d6a6964ab94261e25"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEyMjczMQ==", "bodyText": "Please add a check here that the length of args is what you expect (i.e. 2) and throw a BugInCF otherwise", "url": "https://github.com/typetools/checker-framework/pull/3524#discussion_r463122731", "createdAt": "2020-07-30T16:30:22Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/value/ValueVisitor.java", "diffHunk": "@@ -76,6 +80,32 @@ protected void commonAssignmentCheck(\n                     getTypeFactory().createIntRangeAnnotation(Range.CHAR_EVERYTHING));\n         }\n \n+        if (valueTree.getKind() == Kind.METHOD_INVOCATION\n+                && TreeUtils.isArrayscopyOfMethodInvocation((MethodInvocationTree) valueTree)\n+                && valueType.getKind() == TypeKind.ARRAY) {\n+            List<? extends ExpressionTree> args = ((MethodInvocationTree) valueTree).getArguments();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35a6430068cb3d0892bff03d6a6964ab94261e25"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzEyNDI4NA==", "bodyText": "Rather than checking for IntVal and IntRange by hand, I suggest using ValueCheckerUtils.getPossibleValues, which returns a Range or null if the annotation isn't integral. It already has support for both IntVal and IntRange, and you should be able to just use its lower bound directly rather than doing the computations below. That will greatly simplify the code.", "url": "https://github.com/typetools/checker-framework/pull/3524#discussion_r463124284", "createdAt": "2020-07-30T16:33:03Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/value/ValueVisitor.java", "diffHunk": "@@ -76,6 +80,32 @@ protected void commonAssignmentCheck(\n                     getTypeFactory().createIntRangeAnnotation(Range.CHAR_EVERYTHING));\n         }\n \n+        if (valueTree.getKind() == Kind.METHOD_INVOCATION\n+                && TreeUtils.isArrayscopyOfMethodInvocation((MethodInvocationTree) valueTree)\n+                && valueType.getKind() == TypeKind.ARRAY) {\n+            List<? extends ExpressionTree> args = ((MethodInvocationTree) valueTree).getArguments();\n+            if (getTypeFactory().getAnnotatedType(args.get(1)).getAnnotation(IntVal.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35a6430068cb3d0892bff03d6a6964ab94261e25"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecb48f5408a45daab742c32b28819618ebc7380e", "author": {"user": {"login": "PRITI1999", "name": "Priti Chattopadhyay"}}, "url": "https://github.com/typetools/checker-framework/commit/ecb48f5408a45daab742c32b28819618ebc7380e", "committedDate": "2020-07-31T04:26:33Z", "message": "Improvements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e309153a6d4f56e9a1e00ad9849562f1f88c196a", "author": {"user": {"login": "PRITI1999", "name": "Priti Chattopadhyay"}}, "url": "https://github.com/typetools/checker-framework/commit/e309153a6d4f56e9a1e00ad9849562f1f88c196a", "committedDate": "2020-07-31T04:30:42Z", "message": "Correct variable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MjgyODU5", "url": "https://github.com/typetools/checker-framework/pull/3524#pullrequestreview-459282859", "createdAt": "2020-07-31T15:54:58Z", "commit": {"oid": "e309153a6d4f56e9a1e00ad9849562f1f88c196a"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1NDo1OFrOG6NlBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTo1NDo1OFrOG6NlBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY5MzA2Mg==", "bodyText": "range can be null here, but createArrayLenRange assumes its input in non-null. Can you add a null check and only do the type.replaceAnnotation(atypeFactory.createArrayLenRangeAnnotation(range)); if the range is non-null?", "url": "https://github.com/typetools/checker-framework/pull/3524#discussion_r463693062", "createdAt": "2020-07-31T15:54:58Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/value/ValueTreeAnnotator.java", "diffHunk": "@@ -398,6 +399,20 @@ public Void visitMethodInvocation(MethodInvocationTree tree, AnnotatedTypeMirror\n             }\n         }\n \n+        if (atypeFactory\n+                .getMethodIdentifier()\n+                .isArraysCopyOfInvocation(tree, atypeFactory.getProcessingEnv())) {\n+            List<? extends ExpressionTree> args = tree.getArguments();\n+            if (args.size() != 2) {\n+                throw new BugInCF(\n+                        \"Arrays.copyOf() should have 2 arguments. This point should not have reached\");\n+            }\n+            Range range =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e309153a6d4f56e9a1e00ad9849562f1f88c196a"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "221d3c0a38adb701171050395d054a55631c954f", "author": {"user": {"login": "PRITI1999", "name": "Priti Chattopadhyay"}}, "url": "https://github.com/typetools/checker-framework/commit/221d3c0a38adb701171050395d054a55631c954f", "committedDate": "2020-08-01T03:44:18Z", "message": "Build fix and minor improvement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a02c561d662715e38d7bfd29803d41f57e4f2c7", "author": {"user": {"login": "PRITI1999", "name": "Priti Chattopadhyay"}}, "url": "https://github.com/typetools/checker-framework/commit/5a02c561d662715e38d7bfd29803d41f57e4f2c7", "committedDate": "2020-08-01T05:05:16Z", "message": "Add doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "881bbe943530d2a2e0d8a8a25850c0aa5dbd4dfc", "author": {"user": {"login": "PRITI1999", "name": "Priti Chattopadhyay"}}, "url": "https://github.com/typetools/checker-framework/commit/881bbe943530d2a2e0d8a8a25850c0aa5dbd4dfc", "committedDate": "2020-08-01T06:59:23Z", "message": "build fix"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2738, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}