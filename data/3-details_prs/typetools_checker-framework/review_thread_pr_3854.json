{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1MTI4NjQ2", "number": 3854, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODowNjo1N1rOE1Vs-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODowODoxNlrOE1VuyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MzY1NTYwOnYy", "diffSide": "RIGHT", "path": "checker/src/main/java/org/checkerframework/checker/initialization/InitializationAnnotatedTypeFactory.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODowNjo1N1rOHtj05w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMjo0NjowNFrOHtxm2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUzNDk1MQ==", "bodyText": "If a and b are unrelated, then this will return an intersection type or an error type.  createUnderInitializationAnnotation uses the erased type of the intersection type and will throw an exception on the error type (I think).  Should bottom be returned instead?", "url": "https://github.com/typetools/checker-framework/pull/3854#discussion_r517534951", "createdAt": "2020-11-04T18:06:57Z", "author": {"login": "smillst"}, "path": "checker/src/main/java/org/checkerframework/checker/initialization/InitializationAnnotatedTypeFactory.java", "diffHunk": "@@ -888,5 +888,75 @@ protected TypeMirror lubTypeFrame(TypeMirror a, TypeMirror b) {\n \n             return TypesUtils.leastUpperBound(a, b, processingEnv);\n         }\n+\n+        /**\n+         * Compute the greatest lower bound of two initialization qualifiers. Returns null if one of\n+         * the qualifiers is not in the initialization hierarachy. Subclasses should override\n+         * greatestLowerBound and call this method for initialization qualifiers.\n+         *\n+         * @param anno1 an initialization qualifier\n+         * @param qual1 a qualifier kind\n+         * @param anno2 an initialization qualifier\n+         * @param qual2 a qualifier kind\n+         * @return the glb of anno1 and anno2\n+         */\n+        protected AnnotationMirror greatestLowerBoundInitialization(\n+                AnnotationMirror anno1,\n+                QualifierKind qual1,\n+                AnnotationMirror anno2,\n+                QualifierKind qual2) {\n+            if (!isInitializationAnnotation(anno1) || !isInitializationAnnotation(anno2)) {\n+                return null;\n+            }\n+\n+            // Handle the case where one is a subtype of the other.\n+            if (isSubtypeInitialization(anno1, qual1, anno2, qual2)) {\n+                return anno1;\n+            } else if (isSubtypeInitialization(anno2, qual2, anno1, qual1)) {\n+                return anno2;\n+            }\n+            boolean unknowninit1 = isUnknownInitialization(anno1);\n+            boolean unknowninit2 = isUnknownInitialization(anno2);\n+            boolean underinit1 = isUnderInitialization(anno1);\n+            boolean underinit2 = isUnderInitialization(anno2);\n+\n+            // Handle @Initialized.\n+            if (isInitialized(anno1)) {\n+                assert underinit2;\n+                return FBCBOTTOM;\n+            } else if (isInitialized(anno2)) {\n+                assert underinit1;\n+                return FBCBOTTOM;\n+            }\n+\n+            if (underinit1 && underinit2) {\n+                return createUnderInitializationAnnotation(\n+                        glbTypeFrame(\n+                                getTypeFrameFromAnnotation(anno1),\n+                                getTypeFrameFromAnnotation(anno2)));\n+            }\n+\n+            assert (unknowninit1 || underinit1) && (unknowninit2 || underinit2);\n+            return createUnderInitializationAnnotation(\n+                    glbTypeFrame(\n+                            getTypeFrameFromAnnotation(anno1), getTypeFrameFromAnnotation(anno2)));\n+        }\n+\n+        /**\n+         * Returns the greatest lower bound of two types.\n+         *\n+         * @param a the first argument\n+         * @param b the second argument\n+         * @return the glb of the two arguments\n+         */\n+        protected TypeMirror glbTypeFrame(TypeMirror a, TypeMirror b) {\n+            if (types.isSubtype(a, b)) {\n+                return a;\n+            } else if (types.isSubtype(b, a)) {\n+                return b;\n+            }\n+\n+            return TypesUtils.greatestLowerBound(a, b, processingEnv);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "085c21389f84fd023aaf8ecf44887fe06887b973"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY0MTc5OQ==", "bodyText": "By \"bottom\", do you mean the type of void?  That doesn't seem like a good argument/element to @UnderInitialization.\nMaybe it would be better to do this computation and then issue a warning if the result is an intersection or error type.", "url": "https://github.com/typetools/checker-framework/pull/3854#discussion_r517641799", "createdAt": "2020-11-04T21:29:01Z", "author": {"login": "mernst"}, "path": "checker/src/main/java/org/checkerframework/checker/initialization/InitializationAnnotatedTypeFactory.java", "diffHunk": "@@ -888,5 +888,75 @@ protected TypeMirror lubTypeFrame(TypeMirror a, TypeMirror b) {\n \n             return TypesUtils.leastUpperBound(a, b, processingEnv);\n         }\n+\n+        /**\n+         * Compute the greatest lower bound of two initialization qualifiers. Returns null if one of\n+         * the qualifiers is not in the initialization hierarachy. Subclasses should override\n+         * greatestLowerBound and call this method for initialization qualifiers.\n+         *\n+         * @param anno1 an initialization qualifier\n+         * @param qual1 a qualifier kind\n+         * @param anno2 an initialization qualifier\n+         * @param qual2 a qualifier kind\n+         * @return the glb of anno1 and anno2\n+         */\n+        protected AnnotationMirror greatestLowerBoundInitialization(\n+                AnnotationMirror anno1,\n+                QualifierKind qual1,\n+                AnnotationMirror anno2,\n+                QualifierKind qual2) {\n+            if (!isInitializationAnnotation(anno1) || !isInitializationAnnotation(anno2)) {\n+                return null;\n+            }\n+\n+            // Handle the case where one is a subtype of the other.\n+            if (isSubtypeInitialization(anno1, qual1, anno2, qual2)) {\n+                return anno1;\n+            } else if (isSubtypeInitialization(anno2, qual2, anno1, qual1)) {\n+                return anno2;\n+            }\n+            boolean unknowninit1 = isUnknownInitialization(anno1);\n+            boolean unknowninit2 = isUnknownInitialization(anno2);\n+            boolean underinit1 = isUnderInitialization(anno1);\n+            boolean underinit2 = isUnderInitialization(anno2);\n+\n+            // Handle @Initialized.\n+            if (isInitialized(anno1)) {\n+                assert underinit2;\n+                return FBCBOTTOM;\n+            } else if (isInitialized(anno2)) {\n+                assert underinit1;\n+                return FBCBOTTOM;\n+            }\n+\n+            if (underinit1 && underinit2) {\n+                return createUnderInitializationAnnotation(\n+                        glbTypeFrame(\n+                                getTypeFrameFromAnnotation(anno1),\n+                                getTypeFrameFromAnnotation(anno2)));\n+            }\n+\n+            assert (unknowninit1 || underinit1) && (unknowninit2 || underinit2);\n+            return createUnderInitializationAnnotation(\n+                    glbTypeFrame(\n+                            getTypeFrameFromAnnotation(anno1), getTypeFrameFromAnnotation(anno2)));\n+        }\n+\n+        /**\n+         * Returns the greatest lower bound of two types.\n+         *\n+         * @param a the first argument\n+         * @param b the second argument\n+         * @return the glb of the two arguments\n+         */\n+        protected TypeMirror glbTypeFrame(TypeMirror a, TypeMirror b) {\n+            if (types.isSubtype(a, b)) {\n+                return a;\n+            } else if (types.isSubtype(b, a)) {\n+                return b;\n+            }\n+\n+            return TypesUtils.greatestLowerBound(a, b, processingEnv);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUzNDk1MQ=="}, "originalCommit": {"oid": "085c21389f84fd023aaf8ecf44887fe06887b973"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2NjkzNw==", "bodyText": "I mean that the glb of the two annotation mirrors should be @FBCBottom if the glb of the elements of the annotation mirrors is an intersection or an error type.", "url": "https://github.com/typetools/checker-framework/pull/3854#discussion_r517666937", "createdAt": "2020-11-04T22:24:55Z", "author": {"login": "smillst"}, "path": "checker/src/main/java/org/checkerframework/checker/initialization/InitializationAnnotatedTypeFactory.java", "diffHunk": "@@ -888,5 +888,75 @@ protected TypeMirror lubTypeFrame(TypeMirror a, TypeMirror b) {\n \n             return TypesUtils.leastUpperBound(a, b, processingEnv);\n         }\n+\n+        /**\n+         * Compute the greatest lower bound of two initialization qualifiers. Returns null if one of\n+         * the qualifiers is not in the initialization hierarachy. Subclasses should override\n+         * greatestLowerBound and call this method for initialization qualifiers.\n+         *\n+         * @param anno1 an initialization qualifier\n+         * @param qual1 a qualifier kind\n+         * @param anno2 an initialization qualifier\n+         * @param qual2 a qualifier kind\n+         * @return the glb of anno1 and anno2\n+         */\n+        protected AnnotationMirror greatestLowerBoundInitialization(\n+                AnnotationMirror anno1,\n+                QualifierKind qual1,\n+                AnnotationMirror anno2,\n+                QualifierKind qual2) {\n+            if (!isInitializationAnnotation(anno1) || !isInitializationAnnotation(anno2)) {\n+                return null;\n+            }\n+\n+            // Handle the case where one is a subtype of the other.\n+            if (isSubtypeInitialization(anno1, qual1, anno2, qual2)) {\n+                return anno1;\n+            } else if (isSubtypeInitialization(anno2, qual2, anno1, qual1)) {\n+                return anno2;\n+            }\n+            boolean unknowninit1 = isUnknownInitialization(anno1);\n+            boolean unknowninit2 = isUnknownInitialization(anno2);\n+            boolean underinit1 = isUnderInitialization(anno1);\n+            boolean underinit2 = isUnderInitialization(anno2);\n+\n+            // Handle @Initialized.\n+            if (isInitialized(anno1)) {\n+                assert underinit2;\n+                return FBCBOTTOM;\n+            } else if (isInitialized(anno2)) {\n+                assert underinit1;\n+                return FBCBOTTOM;\n+            }\n+\n+            if (underinit1 && underinit2) {\n+                return createUnderInitializationAnnotation(\n+                        glbTypeFrame(\n+                                getTypeFrameFromAnnotation(anno1),\n+                                getTypeFrameFromAnnotation(anno2)));\n+            }\n+\n+            assert (unknowninit1 || underinit1) && (unknowninit2 || underinit2);\n+            return createUnderInitializationAnnotation(\n+                    glbTypeFrame(\n+                            getTypeFrameFromAnnotation(anno1), getTypeFrameFromAnnotation(anno2)));\n+        }\n+\n+        /**\n+         * Returns the greatest lower bound of two types.\n+         *\n+         * @param a the first argument\n+         * @param b the second argument\n+         * @return the glb of the two arguments\n+         */\n+        protected TypeMirror glbTypeFrame(TypeMirror a, TypeMirror b) {\n+            if (types.isSubtype(a, b)) {\n+                return a;\n+            } else if (types.isSubtype(b, a)) {\n+                return b;\n+            }\n+\n+            return TypesUtils.greatestLowerBound(a, b, processingEnv);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUzNDk1MQ=="}, "originalCommit": {"oid": "085c21389f84fd023aaf8ecf44887fe06887b973"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzc2MDczMQ==", "bodyText": "That makes sense, thanks.", "url": "https://github.com/typetools/checker-framework/pull/3854#discussion_r517760731", "createdAt": "2020-11-05T02:46:04Z", "author": {"login": "mernst"}, "path": "checker/src/main/java/org/checkerframework/checker/initialization/InitializationAnnotatedTypeFactory.java", "diffHunk": "@@ -888,5 +888,75 @@ protected TypeMirror lubTypeFrame(TypeMirror a, TypeMirror b) {\n \n             return TypesUtils.leastUpperBound(a, b, processingEnv);\n         }\n+\n+        /**\n+         * Compute the greatest lower bound of two initialization qualifiers. Returns null if one of\n+         * the qualifiers is not in the initialization hierarachy. Subclasses should override\n+         * greatestLowerBound and call this method for initialization qualifiers.\n+         *\n+         * @param anno1 an initialization qualifier\n+         * @param qual1 a qualifier kind\n+         * @param anno2 an initialization qualifier\n+         * @param qual2 a qualifier kind\n+         * @return the glb of anno1 and anno2\n+         */\n+        protected AnnotationMirror greatestLowerBoundInitialization(\n+                AnnotationMirror anno1,\n+                QualifierKind qual1,\n+                AnnotationMirror anno2,\n+                QualifierKind qual2) {\n+            if (!isInitializationAnnotation(anno1) || !isInitializationAnnotation(anno2)) {\n+                return null;\n+            }\n+\n+            // Handle the case where one is a subtype of the other.\n+            if (isSubtypeInitialization(anno1, qual1, anno2, qual2)) {\n+                return anno1;\n+            } else if (isSubtypeInitialization(anno2, qual2, anno1, qual1)) {\n+                return anno2;\n+            }\n+            boolean unknowninit1 = isUnknownInitialization(anno1);\n+            boolean unknowninit2 = isUnknownInitialization(anno2);\n+            boolean underinit1 = isUnderInitialization(anno1);\n+            boolean underinit2 = isUnderInitialization(anno2);\n+\n+            // Handle @Initialized.\n+            if (isInitialized(anno1)) {\n+                assert underinit2;\n+                return FBCBOTTOM;\n+            } else if (isInitialized(anno2)) {\n+                assert underinit1;\n+                return FBCBOTTOM;\n+            }\n+\n+            if (underinit1 && underinit2) {\n+                return createUnderInitializationAnnotation(\n+                        glbTypeFrame(\n+                                getTypeFrameFromAnnotation(anno1),\n+                                getTypeFrameFromAnnotation(anno2)));\n+            }\n+\n+            assert (unknowninit1 || underinit1) && (unknowninit2 || underinit2);\n+            return createUnderInitializationAnnotation(\n+                    glbTypeFrame(\n+                            getTypeFrameFromAnnotation(anno1), getTypeFrameFromAnnotation(anno2)));\n+        }\n+\n+        /**\n+         * Returns the greatest lower bound of two types.\n+         *\n+         * @param a the first argument\n+         * @param b the second argument\n+         * @return the glb of the two arguments\n+         */\n+        protected TypeMirror glbTypeFrame(TypeMirror a, TypeMirror b) {\n+            if (types.isSubtype(a, b)) {\n+                return a;\n+            } else if (types.isSubtype(b, a)) {\n+                return b;\n+            }\n+\n+            return TypesUtils.greatestLowerBound(a, b, processingEnv);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUzNDk1MQ=="}, "originalCommit": {"oid": "085c21389f84fd023aaf8ecf44887fe06887b973"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MzY2MDI0OnYy", "diffSide": "RIGHT", "path": "checker/src/main/java/org/checkerframework/checker/initialization/InitializationAnnotatedTypeFactory.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODowODoxNlrOHtj3wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMjoyMjoxOFrOHtr0DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUzNTY4MQ==", "bodyText": "This is duplicated in TypesUtils.greatestLowerBound, so you could just call it directly.", "url": "https://github.com/typetools/checker-framework/pull/3854#discussion_r517535681", "createdAt": "2020-11-04T18:08:16Z", "author": {"login": "smillst"}, "path": "checker/src/main/java/org/checkerframework/checker/initialization/InitializationAnnotatedTypeFactory.java", "diffHunk": "@@ -888,5 +888,75 @@ protected TypeMirror lubTypeFrame(TypeMirror a, TypeMirror b) {\n \n             return TypesUtils.leastUpperBound(a, b, processingEnv);\n         }\n+\n+        /**\n+         * Compute the greatest lower bound of two initialization qualifiers. Returns null if one of\n+         * the qualifiers is not in the initialization hierarachy. Subclasses should override\n+         * greatestLowerBound and call this method for initialization qualifiers.\n+         *\n+         * @param anno1 an initialization qualifier\n+         * @param qual1 a qualifier kind\n+         * @param anno2 an initialization qualifier\n+         * @param qual2 a qualifier kind\n+         * @return the glb of anno1 and anno2\n+         */\n+        protected AnnotationMirror greatestLowerBoundInitialization(\n+                AnnotationMirror anno1,\n+                QualifierKind qual1,\n+                AnnotationMirror anno2,\n+                QualifierKind qual2) {\n+            if (!isInitializationAnnotation(anno1) || !isInitializationAnnotation(anno2)) {\n+                return null;\n+            }\n+\n+            // Handle the case where one is a subtype of the other.\n+            if (isSubtypeInitialization(anno1, qual1, anno2, qual2)) {\n+                return anno1;\n+            } else if (isSubtypeInitialization(anno2, qual2, anno1, qual1)) {\n+                return anno2;\n+            }\n+            boolean unknowninit1 = isUnknownInitialization(anno1);\n+            boolean unknowninit2 = isUnknownInitialization(anno2);\n+            boolean underinit1 = isUnderInitialization(anno1);\n+            boolean underinit2 = isUnderInitialization(anno2);\n+\n+            // Handle @Initialized.\n+            if (isInitialized(anno1)) {\n+                assert underinit2;\n+                return FBCBOTTOM;\n+            } else if (isInitialized(anno2)) {\n+                assert underinit1;\n+                return FBCBOTTOM;\n+            }\n+\n+            if (underinit1 && underinit2) {\n+                return createUnderInitializationAnnotation(\n+                        glbTypeFrame(\n+                                getTypeFrameFromAnnotation(anno1),\n+                                getTypeFrameFromAnnotation(anno2)));\n+            }\n+\n+            assert (unknowninit1 || underinit1) && (unknowninit2 || underinit2);\n+            return createUnderInitializationAnnotation(\n+                    glbTypeFrame(\n+                            getTypeFrameFromAnnotation(anno1), getTypeFrameFromAnnotation(anno2)));\n+        }\n+\n+        /**\n+         * Returns the greatest lower bound of two types.\n+         *\n+         * @param a the first argument\n+         * @param b the second argument\n+         * @return the glb of the two arguments\n+         */\n+        protected TypeMirror glbTypeFrame(TypeMirror a, TypeMirror b) {\n+            if (types.isSubtype(a, b)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "085c21389f84fd023aaf8ecf44887fe06887b973"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYzMjMxNg==", "bodyText": "I don't see this special case in TypesUtils.greatestLowerBound.  Am I missing something?", "url": "https://github.com/typetools/checker-framework/pull/3854#discussion_r517632316", "createdAt": "2020-11-04T21:08:34Z", "author": {"login": "mernst"}, "path": "checker/src/main/java/org/checkerframework/checker/initialization/InitializationAnnotatedTypeFactory.java", "diffHunk": "@@ -888,5 +888,75 @@ protected TypeMirror lubTypeFrame(TypeMirror a, TypeMirror b) {\n \n             return TypesUtils.leastUpperBound(a, b, processingEnv);\n         }\n+\n+        /**\n+         * Compute the greatest lower bound of two initialization qualifiers. Returns null if one of\n+         * the qualifiers is not in the initialization hierarachy. Subclasses should override\n+         * greatestLowerBound and call this method for initialization qualifiers.\n+         *\n+         * @param anno1 an initialization qualifier\n+         * @param qual1 a qualifier kind\n+         * @param anno2 an initialization qualifier\n+         * @param qual2 a qualifier kind\n+         * @return the glb of anno1 and anno2\n+         */\n+        protected AnnotationMirror greatestLowerBoundInitialization(\n+                AnnotationMirror anno1,\n+                QualifierKind qual1,\n+                AnnotationMirror anno2,\n+                QualifierKind qual2) {\n+            if (!isInitializationAnnotation(anno1) || !isInitializationAnnotation(anno2)) {\n+                return null;\n+            }\n+\n+            // Handle the case where one is a subtype of the other.\n+            if (isSubtypeInitialization(anno1, qual1, anno2, qual2)) {\n+                return anno1;\n+            } else if (isSubtypeInitialization(anno2, qual2, anno1, qual1)) {\n+                return anno2;\n+            }\n+            boolean unknowninit1 = isUnknownInitialization(anno1);\n+            boolean unknowninit2 = isUnknownInitialization(anno2);\n+            boolean underinit1 = isUnderInitialization(anno1);\n+            boolean underinit2 = isUnderInitialization(anno2);\n+\n+            // Handle @Initialized.\n+            if (isInitialized(anno1)) {\n+                assert underinit2;\n+                return FBCBOTTOM;\n+            } else if (isInitialized(anno2)) {\n+                assert underinit1;\n+                return FBCBOTTOM;\n+            }\n+\n+            if (underinit1 && underinit2) {\n+                return createUnderInitializationAnnotation(\n+                        glbTypeFrame(\n+                                getTypeFrameFromAnnotation(anno1),\n+                                getTypeFrameFromAnnotation(anno2)));\n+            }\n+\n+            assert (unknowninit1 || underinit1) && (unknowninit2 || underinit2);\n+            return createUnderInitializationAnnotation(\n+                    glbTypeFrame(\n+                            getTypeFrameFromAnnotation(anno1), getTypeFrameFromAnnotation(anno2)));\n+        }\n+\n+        /**\n+         * Returns the greatest lower bound of two types.\n+         *\n+         * @param a the first argument\n+         * @param b the second argument\n+         * @return the glb of the two arguments\n+         */\n+        protected TypeMirror glbTypeFrame(TypeMirror a, TypeMirror b) {\n+            if (types.isSubtype(a, b)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUzNTY4MQ=="}, "originalCommit": {"oid": "085c21389f84fd023aaf8ecf44887fe06887b973"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2NTgwNQ==", "bodyText": "TypesUtils.greatestLowerBound calls com.sun.tools.javac.code.Types#glb(com.sun.tools.javac.code.Type, com.sun.tools.javac.code.Type) which has the special case.", "url": "https://github.com/typetools/checker-framework/pull/3854#discussion_r517665805", "createdAt": "2020-11-04T22:22:18Z", "author": {"login": "smillst"}, "path": "checker/src/main/java/org/checkerframework/checker/initialization/InitializationAnnotatedTypeFactory.java", "diffHunk": "@@ -888,5 +888,75 @@ protected TypeMirror lubTypeFrame(TypeMirror a, TypeMirror b) {\n \n             return TypesUtils.leastUpperBound(a, b, processingEnv);\n         }\n+\n+        /**\n+         * Compute the greatest lower bound of two initialization qualifiers. Returns null if one of\n+         * the qualifiers is not in the initialization hierarachy. Subclasses should override\n+         * greatestLowerBound and call this method for initialization qualifiers.\n+         *\n+         * @param anno1 an initialization qualifier\n+         * @param qual1 a qualifier kind\n+         * @param anno2 an initialization qualifier\n+         * @param qual2 a qualifier kind\n+         * @return the glb of anno1 and anno2\n+         */\n+        protected AnnotationMirror greatestLowerBoundInitialization(\n+                AnnotationMirror anno1,\n+                QualifierKind qual1,\n+                AnnotationMirror anno2,\n+                QualifierKind qual2) {\n+            if (!isInitializationAnnotation(anno1) || !isInitializationAnnotation(anno2)) {\n+                return null;\n+            }\n+\n+            // Handle the case where one is a subtype of the other.\n+            if (isSubtypeInitialization(anno1, qual1, anno2, qual2)) {\n+                return anno1;\n+            } else if (isSubtypeInitialization(anno2, qual2, anno1, qual1)) {\n+                return anno2;\n+            }\n+            boolean unknowninit1 = isUnknownInitialization(anno1);\n+            boolean unknowninit2 = isUnknownInitialization(anno2);\n+            boolean underinit1 = isUnderInitialization(anno1);\n+            boolean underinit2 = isUnderInitialization(anno2);\n+\n+            // Handle @Initialized.\n+            if (isInitialized(anno1)) {\n+                assert underinit2;\n+                return FBCBOTTOM;\n+            } else if (isInitialized(anno2)) {\n+                assert underinit1;\n+                return FBCBOTTOM;\n+            }\n+\n+            if (underinit1 && underinit2) {\n+                return createUnderInitializationAnnotation(\n+                        glbTypeFrame(\n+                                getTypeFrameFromAnnotation(anno1),\n+                                getTypeFrameFromAnnotation(anno2)));\n+            }\n+\n+            assert (unknowninit1 || underinit1) && (unknowninit2 || underinit2);\n+            return createUnderInitializationAnnotation(\n+                    glbTypeFrame(\n+                            getTypeFrameFromAnnotation(anno1), getTypeFrameFromAnnotation(anno2)));\n+        }\n+\n+        /**\n+         * Returns the greatest lower bound of two types.\n+         *\n+         * @param a the first argument\n+         * @param b the second argument\n+         * @return the glb of the two arguments\n+         */\n+        protected TypeMirror glbTypeFrame(TypeMirror a, TypeMirror b) {\n+            if (types.isSubtype(a, b)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUzNTY4MQ=="}, "originalCommit": {"oid": "085c21389f84fd023aaf8ecf44887fe06887b973"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 891, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}