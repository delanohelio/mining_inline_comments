{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5MDg2NTYy", "number": 3599, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNzozNTowOFrOEZldSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNzo0ODowMFrOEZlvRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjYzNTYxOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/stub/StubParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNzozNTowOFrOHCfB1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNzozNTowOFrOHCfB1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM2NzU3Mw==", "bodyText": "This should be moved into getAnnotation.  Or is there some reason it can't be?", "url": "https://github.com/typetools/checker-framework/pull/3599#discussion_r472367573", "createdAt": "2020-08-18T17:35:08Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/framework/stub/StubParser.java", "diffHunk": "@@ -1204,6 +1185,18 @@ private void annotate(AnnotatedTypeMirror type, List<AnnotationExpr> annotations\n         }\n         for (AnnotationExpr annotation : annotations) {\n             AnnotationMirror annoMirror = getAnnotation(annotation, allStubAnnotations);\n+            if (annoMirror == null) {\n+                // If the annotation was not imported, then #getAllStubAnnotations does", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a09b4d5b52aa887805f467b634bc7ebee9432298"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjY0NDQ4OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/stub/StubParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNzozNzo0MVrOHCfHaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNzozNzo0MVrOHCfHaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM2OTAwMA==", "bodyText": "Just call TypeElement classElement = elements.getTypeElement(typeName); directly so that the more sensible warning will be issued below.  (Make sure to document why getTypeElement isn't called.)", "url": "https://github.com/typetools/checker-framework/pull/3599#discussion_r472369000", "createdAt": "2020-08-18T17:37:41Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/framework/stub/StubParser.java", "diffHunk": "@@ -1204,6 +1185,18 @@ private void annotate(AnnotatedTypeMirror type, List<AnnotationExpr> annotations\n         }\n         for (AnnotationExpr annotation : annotations) {\n             AnnotationMirror annoMirror = getAnnotation(annotation, allStubAnnotations);\n+            if (annoMirror == null) {\n+                // If the annotation was not imported, then #getAllStubAnnotations does\n+                // not add it to the allStubAnnotations field. This code compensates for\n+                // that deficiency by adding the annotation when it is encountered (i.e. here).\n+                TypeElement annoTypeElt = getTypeElement(annotation.getNameAsString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a09b4d5b52aa887805f467b634bc7ebee9432298"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjY2MjkxOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/stub/StubParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNzo0Mjo1MVrOHCfS_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNzo0Mjo1MVrOHCfS_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM3MTk2NQ==", "bodyText": "In several places you deleted simple, instead, could you please change it to both fully-qualified and simple names.  That's important information.", "url": "https://github.com/typetools/checker-framework/pull/3599#discussion_r472371965", "createdAt": "2020-08-18T17:42:51Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/framework/stub/StubParser.java", "diffHunk": "@@ -142,9 +142,8 @@\n     private final Elements elements;\n \n     /**\n-     * The set of annotations found in the stub file. Keys are simple (unqualified) names. (This may\n-     * be a problem in the unlikely occurrence that a type-checker supports two annotations with the\n-     * same simple name.)\n+     * The set of annotations found in the stub file. Keys are names. There are two entries for each", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a09b4d5b52aa887805f467b634bc7ebee9432298"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjY4MTY0OnYy", "diffSide": "LEFT", "path": "framework/src/main/java/org/checkerframework/common/wholeprograminference/SceneToStubWriter.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNzo0ODowMFrOHCfesg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDo1NTo1M1rOHCmYGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM3NDk2Mg==", "bodyText": "The changes in this file should be merged to master in a separate commit. Can you open a separate PR with these changes?   I'll merge that PR first, so it's fine to leave these changes in this PR.  Also, can you add a test case for this that is unrelated to the other changes in this file?", "url": "https://github.com/typetools/checker-framework/pull/3599#discussion_r472374962", "createdAt": "2020-08-18T17:48:00Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/common/wholeprograminference/SceneToStubWriter.java", "diffHunk": "@@ -173,79 +173,29 @@ private static String formatAnnotations(Collection<? extends Annotation> annos)\n      * @return the type formatted to be written to Java source code, followed by a space character\n      */\n     private static String formatArrayType(ATypeElement scenelibRep, ArrayType javacRep) {\n-        int levels =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a09b4d5b52aa887805f467b634bc7ebee9432298"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQxODU3NA==", "bodyText": "The changes in this file should be merged to master in a separate commit\n\nI agree that would be cleaner. The reason I didn't do it is:\n\ncan you add a test case for this that is unrelated to the other changes in this file?\n\nI cannot. The error here only affects the order of the parts of the type that are contained in the javac representation. With respect to arrays, that means that the only parts that are incorrectly ordered are the []s - even the inferred annotations were ordered correctly before. The error only shows up when there are printable, but not inferred, annotations - which javac prints using fully-qualified names. So it's not possible to test these changes without the fix to the stub parser, but fixing the stub parser causes the existing tests to fail (because the algorithm is wrong).", "url": "https://github.com/typetools/checker-framework/pull/3599#discussion_r472418574", "createdAt": "2020-08-18T19:07:35Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/wholeprograminference/SceneToStubWriter.java", "diffHunk": "@@ -173,79 +173,29 @@ private static String formatAnnotations(Collection<? extends Annotation> annos)\n      * @return the type formatted to be written to Java source code, followed by a space character\n      */\n     private static String formatArrayType(ATypeElement scenelibRep, ArrayType javacRep) {\n-        int levels =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM3NDk2Mg=="}, "originalCommit": {"oid": "a09b4d5b52aa887805f467b634bc7ebee9432298"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQxOTI4Nw==", "bodyText": "even the inferred annotations were ordered correctly before\n\nWhat I mean by this is that the sceneLibRep and its associated structures in the old code caused inferred annotations on the inner arrays types to be printed in the correct order, even though the array parts themselves (the []s and any annotations in the javac types) were printed in the wrong order.", "url": "https://github.com/typetools/checker-framework/pull/3599#discussion_r472419287", "createdAt": "2020-08-18T19:08:59Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/wholeprograminference/SceneToStubWriter.java", "diffHunk": "@@ -173,79 +173,29 @@ private static String formatAnnotations(Collection<? extends Annotation> annos)\n      * @return the type formatted to be written to Java source code, followed by a space character\n      */\n     private static String formatArrayType(ATypeElement scenelibRep, ArrayType javacRep) {\n-        int levels =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM3NDk2Mg=="}, "originalCommit": {"oid": "a09b4d5b52aa887805f467b634bc7ebee9432298"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ3NjU2Nw==", "bodyText": "Thanks for the explantation.  Now I understand why you can't add a test case (or rather why the existing test case didn't fail until the other bugs where fixed).   Could you still open a separate PR without a test case?  Then we can just merge that one first, then merge this one.", "url": "https://github.com/typetools/checker-framework/pull/3599#discussion_r472476567", "createdAt": "2020-08-18T20:34:17Z", "author": {"login": "smillst"}, "path": "framework/src/main/java/org/checkerframework/common/wholeprograminference/SceneToStubWriter.java", "diffHunk": "@@ -173,79 +173,29 @@ private static String formatAnnotations(Collection<? extends Annotation> annos)\n      * @return the type formatted to be written to Java source code, followed by a space character\n      */\n     private static String formatArrayType(ATypeElement scenelibRep, ArrayType javacRep) {\n-        int levels =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM3NDk2Mg=="}, "originalCommit": {"oid": "a09b4d5b52aa887805f467b634bc7ebee9432298"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ4Nzk2MQ==", "bodyText": "#3601 has these changes", "url": "https://github.com/typetools/checker-framework/pull/3599#discussion_r472487961", "createdAt": "2020-08-18T20:55:53Z", "author": {"login": "kelloggm"}, "path": "framework/src/main/java/org/checkerframework/common/wholeprograminference/SceneToStubWriter.java", "diffHunk": "@@ -173,79 +173,29 @@ private static String formatAnnotations(Collection<? extends Annotation> annos)\n      * @return the type formatted to be written to Java source code, followed by a space character\n      */\n     private static String formatArrayType(ATypeElement scenelibRep, ArrayType javacRep) {\n-        int levels =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM3NDk2Mg=="}, "originalCommit": {"oid": "a09b4d5b52aa887805f467b634bc7ebee9432298"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1007, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}