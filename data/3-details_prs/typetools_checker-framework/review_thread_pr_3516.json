{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3Mjc3Mzcy", "number": 3516, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMzo0Mzo1N1rOETd1og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDozNDowNlrOET49-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODQ3MjY2OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/flow/CFAbstractValue.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMzo0Mzo1N1rOG5OA0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMzo0Mzo1N1rOG5OA0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1MTYwMg==", "bodyText": "Can this field also be protected final?", "url": "https://github.com/typetools/checker-framework/pull/3516#discussion_r462651602", "createdAt": "2020-07-29T23:43:57Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/flow/CFAbstractValue.java", "diffHunk": "@@ -51,9 +55,21 @@\n     /** The analysis class this value belongs to. */\n     protected final CFAbstractAnalysis<V, ?, ?> analysis;\n \n+    /** The underlying (Java) type in this abstract value. */\n     protected final TypeMirror underlyingType;\n+    /** The annotations in this abstract value. */\n     protected final Set<AnnotationMirror> annotations;\n \n+    /** Formats annotations without their package names. */\n+    AnnotationFormatter annoFormatter = new DefaultAnnotationFormatter();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7376940026a65b41d8e9733891d85b51705400d"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODQ5MDI1OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/flow/CFAbstractValue.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMzo1MjoxMlrOG5OK2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODo0NTozNlrOG5vdvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1NDE2OA==", "bodyText": "I'm a bit concerned about adding this field. We create many abstract values and this will make that more costly.\nWe only call toString/toStringSimple when we debug/visualize the CFG, so it would overall probably be much better to only create the formatter in toStringSimple.\nWhat do you think?", "url": "https://github.com/typetools/checker-framework/pull/3516#discussion_r462654168", "createdAt": "2020-07-29T23:52:12Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/flow/CFAbstractValue.java", "diffHunk": "@@ -51,9 +55,21 @@\n     /** The analysis class this value belongs to. */\n     protected final CFAbstractAnalysis<V, ?, ?> analysis;\n \n+    /** The underlying (Java) type in this abstract value. */\n     protected final TypeMirror underlyingType;\n+    /** The annotations in this abstract value. */\n     protected final Set<AnnotationMirror> annotations;\n \n+    /** Formats annotations without their package names. */\n+    AnnotationFormatter annoFormatter = new DefaultAnnotationFormatter();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7376940026a65b41d8e9733891d85b51705400d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE5OTY3OQ==", "bodyText": "I made the field static.  It has no state, but since its methods are non-static, there must be an instance of AnnotationFormatter.  But that instance can be the same for all uses.", "url": "https://github.com/typetools/checker-framework/pull/3516#discussion_r463199679", "createdAt": "2020-07-30T18:45:36Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/flow/CFAbstractValue.java", "diffHunk": "@@ -51,9 +55,21 @@\n     /** The analysis class this value belongs to. */\n     protected final CFAbstractAnalysis<V, ?, ?> analysis;\n \n+    /** The underlying (Java) type in this abstract value. */\n     protected final TypeMirror underlyingType;\n+    /** The annotations in this abstract value. */\n     protected final Set<AnnotationMirror> annotations;\n \n+    /** Formats annotations without their package names. */\n+    AnnotationFormatter annoFormatter = new DefaultAnnotationFormatter();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY1NDE2OA=="}, "originalCommit": {"oid": "f7376940026a65b41d8e9733891d85b51705400d"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MjkxMzgwOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/flow/CFAbstractValue.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDozMTo0NVrOG54P_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDozMTo0NVrOG54P_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0MzYxMg==", "bodyText": "Any reason to not make it final?\nI would probably still move this into toStringSimple, because that's the only place that uses this field and that method won't be used much. But I'm fine with a static field.", "url": "https://github.com/typetools/checker-framework/pull/3516#discussion_r463343612", "createdAt": "2020-07-31T00:31:45Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/flow/CFAbstractValue.java", "diffHunk": "@@ -48,12 +51,25 @@\n  */\n public abstract class CFAbstractValue<V extends CFAbstractValue<V>> implements AbstractValue<V> {\n \n+    /** Formats annotations without their package names. */\n+    protected static DefaultAnnotationFormatter defaultAnnotationFormatter =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53b0b9b9c110fe552fb13616cdf0b018e260b3bb"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MjkxNzcxOnYy", "diffSide": "RIGHT", "path": "javacutil/src/main/java/org/checkerframework/javacutil/ElementUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDozNDowNlrOG54SUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDozNDowNlrOG54SUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0NDIxMQ==", "bodyText": "Now that this method is public, we should move it to TypesUtils - the parameter type is TypeMirror, so that's where I would expect such a method.", "url": "https://github.com/typetools/checker-framework/pull/3516#discussion_r463344211", "createdAt": "2020-07-31T00:34:06Z", "author": {"login": "wmdietl"}, "path": "javacutil/src/main/java/org/checkerframework/javacutil/ElementUtils.java", "diffHunk": "@@ -215,20 +215,27 @@ public static String getSimpleName(ExecutableElement element) {\n      * @param type a type\n      * @return the simple type name, without annotations\n      */\n-    private static String simpleTypeName(TypeMirror type) {\n+    public static String simpleTypeName(TypeMirror type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53b0b9b9c110fe552fb13616cdf0b018e260b3bb"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1595, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}