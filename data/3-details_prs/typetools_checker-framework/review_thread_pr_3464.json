{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3NzQ1NTA1", "number": 3464, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNzo0MTo0NlrOENhLVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoyNzowMFrOEOSGIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjEwNTE3OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNzo0MTo0NlrOGwOMsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNzo0MTo0NlrOGwOMsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIxNzQ1OA==", "bodyText": "Please use correct capitalization for Checker Framework.", "url": "https://github.com/typetools/checker-framework/pull/3464#discussion_r453217458", "createdAt": "2020-07-11T17:41:46Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -253,6 +253,8 @@\n \n     /// Amount of detail in messages\n \n+    // Print the version of the checker framework", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a8331657649890bf7ec2261ffd3c18a965ea06e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjEwNTM3OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNzo0MjoxNFrOGwOMzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNzo0MjoxNFrOGwOMzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIxNzQ4NQ==", "bodyText": "Use correct name for Checker Framework.", "url": "https://github.com/typetools/checker-framework/pull/3464#discussion_r453217485", "createdAt": "2020-07-11T17:42:14Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -781,6 +783,14 @@ public void run() {\n                                     }\n                                 });\n             }\n+            if (hasOption(\"version\")) {\n+                String version = getCheckerVersion();\n+                if (version == null) {\n+                    messager.printMessage(Kind.NOTE, \"Version info not available!\");\n+                } else {\n+                    messager.printMessage(Kind.NOTE, \"checker-framework \" + version);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a8331657649890bf7ec2261ffd3c18a965ea06e"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjEwNjcwOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNzo0Mzo1M1rOGwONdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNzo0Mzo1M1rOGwONdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIxNzY1Mg==", "bodyText": "You need to document that this can return null.  Under what circumstances can it do so?  Should it throw an exception rather than returning null?", "url": "https://github.com/typetools/checker-framework/pull/3464#discussion_r453217652", "createdAt": "2020-07-11T17:43:53Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -2530,4 +2540,28 @@ private void printGitProperties() {\n             System.out.println(\"IOException while reading git.properties: \" + e.getMessage());\n         }\n     }\n+\n+    /** Extract the version of the Checker Framework */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a8331657649890bf7ec2261ffd3c18a965ea06e"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjEwNzQ2OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNzo0NDo1MVrOGwONyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNzo0NDo1MVrOGwONyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIxNzczOQ==", "bodyText": "Why does this loop continue after setting version?  Could you use a return statement here?", "url": "https://github.com/typetools/checker-framework/pull/3464#discussion_r453217739", "createdAt": "2020-07-11T17:44:51Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -2530,4 +2540,28 @@ private void printGitProperties() {\n             System.out.println(\"IOException while reading git.properties: \" + e.getMessage());\n         }\n     }\n+\n+    /** Extract the version of the Checker Framework */\n+    private String getCheckerVersion() {\n+        String version = null;\n+        Properties p = new Properties();\n+        String RLS_FILE = \"/docs/developer/release/release.properties\";\n+        p.putAll(getProperties(getClass(), RLS_FILE));\n+        String startTag = p.getProperty(\"checkers.ver.0\");\n+        String endTag = p.getProperty(\"checkers.ver.1\");\n+        String XML_FILE = \"/docs/examples/MavenExample/pom.xml\";\n+        try {\n+            InputStream in = getClass().getResourceAsStream(XML_FILE);\n+            BufferedReader reader = new BufferedReader(new InputStreamReader(in));\n+            String line = null;\n+            while ((line = reader.readLine()) != null && version == null) {\n+                if (line.split(startTag).length > 1) {\n+                    version = line.split(startTag)[1].split(endTag)[0];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a8331657649890bf7ec2261ffd3c18a965ea06e"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjExMTEzOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNzo0OTowM1rOGwOPcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNzo0OTowM1rOGwOPcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIxODE2MA==", "bodyText": "Rather than creating an empty Properties on line 2547 and then merging a Properties into it, can this line be\nProperties p = getProperties(getClass(), RLS_FILE);\n\n?", "url": "https://github.com/typetools/checker-framework/pull/3464#discussion_r453218160", "createdAt": "2020-07-11T17:49:03Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -2530,4 +2540,28 @@ private void printGitProperties() {\n             System.out.println(\"IOException while reading git.properties: \" + e.getMessage());\n         }\n     }\n+\n+    /** Extract the version of the Checker Framework */\n+    private String getCheckerVersion() {\n+        String version = null;\n+        Properties p = new Properties();\n+        String RLS_FILE = \"/docs/developer/release/release.properties\";\n+        p.putAll(getProperties(getClass(), RLS_FILE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a8331657649890bf7ec2261ffd3c18a965ea06e"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjExMjQ1OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNzo1MDozNFrOGwOQAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNzo1MDozNFrOGwOQAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIxODMwNg==", "bodyText": "Is it a bug if this line is reached?  If so, it is better to fail than to print a line that users are likely to overlook.", "url": "https://github.com/typetools/checker-framework/pull/3464#discussion_r453218306", "createdAt": "2020-07-11T17:50:34Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -2530,4 +2540,28 @@ private void printGitProperties() {\n             System.out.println(\"IOException while reading git.properties: \" + e.getMessage());\n         }\n     }\n+\n+    /** Extract the version of the Checker Framework */\n+    private String getCheckerVersion() {\n+        String version = null;\n+        Properties p = new Properties();\n+        String RLS_FILE = \"/docs/developer/release/release.properties\";\n+        p.putAll(getProperties(getClass(), RLS_FILE));\n+        String startTag = p.getProperty(\"checkers.ver.0\");\n+        String endTag = p.getProperty(\"checkers.ver.1\");\n+        String XML_FILE = \"/docs/examples/MavenExample/pom.xml\";\n+        try {\n+            InputStream in = getClass().getResourceAsStream(XML_FILE);\n+            BufferedReader reader = new BufferedReader(new InputStreamReader(in));\n+            String line = null;\n+            while ((line = reader.readLine()) != null && version == null) {\n+                if (line.split(startTag).length > 1) {\n+                    version = line.split(startTag)[1].split(endTag)[0];\n+                }\n+            }\n+        } catch (IOException e) {\n+            System.out.println(\"IOException while reading version information: \" + e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a8331657649890bf7ec2261ffd3c18a965ea06e"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjExMjk5OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNzo1MToxOFrOGwOQQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNzozMjoxMlrOGxHv8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIxODM3MQ==", "bodyText": "Under what circumstances is version null?  Is that a bug?", "url": "https://github.com/typetools/checker-framework/pull/3464#discussion_r453218371", "createdAt": "2020-07-11T17:51:18Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -781,6 +783,14 @@ public void run() {\n                                     }\n                                 });\n             }\n+            if (hasOption(\"version\")) {\n+                String version = getCheckerVersion();\n+                if (version == null) {\n+                    messager.printMessage(Kind.NOTE, \"Version info not available!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a8331657649890bf7ec2261ffd3c18a965ea06e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI2MTc1OQ==", "bodyText": "Its never null for the current version. It can only be null if the tag in release.properties is not found in XML_FILE. Should I remove this check altogether and throw an exception if ever version is null?", "url": "https://github.com/typetools/checker-framework/pull/3464#discussion_r453261759", "createdAt": "2020-07-12T03:29:47Z", "author": {"login": "PRITI1999"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -781,6 +783,14 @@ public void run() {\n                                     }\n                                 });\n             }\n+            if (hasOption(\"version\")) {\n+                String version = getCheckerVersion();\n+                if (version == null) {\n+                    messager.printMessage(Kind.NOTE, \"Version info not available!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIxODM3MQ=="}, "originalCommit": {"oid": "8a8331657649890bf7ec2261ffd3c18a965ea06e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI2NjM3MQ==", "bodyText": "Since that would indicate an unexpected problem, I think that is the best approach.", "url": "https://github.com/typetools/checker-framework/pull/3464#discussion_r453266371", "createdAt": "2020-07-12T04:40:09Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -781,6 +783,14 @@ public void run() {\n                                     }\n                                 });\n             }\n+            if (hasOption(\"version\")) {\n+                String version = getCheckerVersion();\n+                if (version == null) {\n+                    messager.printMessage(Kind.NOTE, \"Version info not available!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIxODM3MQ=="}, "originalCommit": {"oid": "8a8331657649890bf7ec2261ffd3c18a965ea06e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI3MjQ3OQ==", "bodyText": "Made the changes accordingly. Please re-review.", "url": "https://github.com/typetools/checker-framework/pull/3464#discussion_r453272479", "createdAt": "2020-07-12T06:03:13Z", "author": {"login": "PRITI1999"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -781,6 +783,14 @@ public void run() {\n                                     }\n                                 });\n             }\n+            if (hasOption(\"version\")) {\n+                String version = getCheckerVersion();\n+                if (version == null) {\n+                    messager.printMessage(Kind.NOTE, \"Version info not available!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIxODM3MQ=="}, "originalCommit": {"oid": "8a8331657649890bf7ec2261ffd3c18a965ea06e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY4OTQxMg==", "bodyText": "@PRITI1999 CI does not pass.  Please make it pass before requesting a review.", "url": "https://github.com/typetools/checker-framework/pull/3464#discussion_r453689412", "createdAt": "2020-07-13T14:26:50Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -781,6 +783,14 @@ public void run() {\n                                     }\n                                 });\n             }\n+            if (hasOption(\"version\")) {\n+                String version = getCheckerVersion();\n+                if (version == null) {\n+                    messager.printMessage(Kind.NOTE, \"Version info not available!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIxODM3MQ=="}, "originalCommit": {"oid": "8a8331657649890bf7ec2261ffd3c18a965ea06e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE2MDM3MQ==", "bodyText": "I apologize. CI succeeds now.", "url": "https://github.com/typetools/checker-framework/pull/3464#discussion_r454160371", "createdAt": "2020-07-14T07:32:12Z", "author": {"login": "PRITI1999"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -781,6 +783,14 @@ public void run() {\n                                     }\n                                 });\n             }\n+            if (hasOption(\"version\")) {\n+                String version = getCheckerVersion();\n+                if (version == null) {\n+                    messager.printMessage(Kind.NOTE, \"Version info not available!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIxODM3MQ=="}, "originalCommit": {"oid": "8a8331657649890bf7ec2261ffd3c18a965ea06e"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDA3NjM3OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoxNzozMVrOGxVxQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoxNzozMVrOGxVxQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5MDA4MA==", "bodyText": "Minor: end sentences with punctuation (in this case, a period).", "url": "https://github.com/typetools/checker-framework/pull/3464#discussion_r454390080", "createdAt": "2020-07-14T14:17:31Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -2530,4 +2535,33 @@ private void printGitProperties() {\n             System.out.println(\"IOException while reading git.properties: \" + e.getMessage());\n         }\n     }\n+\n+    /**\n+     * Extract the version of the Checker Framework", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cef0d29f42f4922c1638860005d0bd4515b8d449"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDA4MDQzOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoxODoyN1rOGxVzxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoxODoyN1rOGxVzxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5MDcyNw==", "bodyText": "It is usually not necessary to state the type, which is already stated nearby in the source code and in the generated API documentation.", "url": "https://github.com/typetools/checker-framework/pull/3464#discussion_r454390727", "createdAt": "2020-07-14T14:18:27Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -2530,4 +2535,33 @@ private void printGitProperties() {\n             System.out.println(\"IOException while reading git.properties: \" + e.getMessage());\n         }\n     }\n+\n+    /**\n+     * Extract the version of the Checker Framework\n+     *\n+     * @throws IOException if unable to read docs/developer/release/release.properties or\n+     *     docs/examples/MavenExample/pom.xml file\n+     * @throws NullPointerException if tag present in release.properties for Checker Framework\n+     *     version is not found in docs/examples/MavenExample/pom.xml\n+     * @return Checker Framework version {@link String}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cef0d29f42f4922c1638860005d0bd4515b8d449"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDA4MDY3OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoxODozMVrOGxVz-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoxODozMVrOGxVz-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5MDc3Nw==", "bodyText": "Why is this variable needed?", "url": "https://github.com/typetools/checker-framework/pull/3464#discussion_r454390777", "createdAt": "2020-07-14T14:18:31Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -2530,4 +2535,33 @@ private void printGitProperties() {\n             System.out.println(\"IOException while reading git.properties: \" + e.getMessage());\n         }\n     }\n+\n+    /**\n+     * Extract the version of the Checker Framework\n+     *\n+     * @throws IOException if unable to read docs/developer/release/release.properties or\n+     *     docs/examples/MavenExample/pom.xml file\n+     * @throws NullPointerException if tag present in release.properties for Checker Framework\n+     *     version is not found in docs/examples/MavenExample/pom.xml\n+     * @return Checker Framework version {@link String}\n+     */\n+    private String getCheckerVersion() throws IOException {\n+        String version = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cef0d29f42f4922c1638860005d0bd4515b8d449"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDA4NDEzOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoxOToyMlrOGxV2Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoxOToyMlrOGxV2Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5MTM0Mw==", "bodyText": "If you use \"Extract\", say from where.  Even better, I would leave implementation details like that out of the specification and just use \"Returns\".", "url": "https://github.com/typetools/checker-framework/pull/3464#discussion_r454391343", "createdAt": "2020-07-14T14:19:22Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -2530,4 +2535,33 @@ private void printGitProperties() {\n             System.out.println(\"IOException while reading git.properties: \" + e.getMessage());\n         }\n     }\n+\n+    /**\n+     * Extract the version of the Checker Framework", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cef0d29f42f4922c1638860005d0bd4515b8d449"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDA5NDE4OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoyMTozOFrOGxV8ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoyMTozOFrOGxV8ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5Mjk1NQ==", "bodyText": "This is an odd choice of exception.  Why not use BugInCF?", "url": "https://github.com/typetools/checker-framework/pull/3464#discussion_r454392955", "createdAt": "2020-07-14T14:21:38Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -2530,4 +2535,33 @@ private void printGitProperties() {\n             System.out.println(\"IOException while reading git.properties: \" + e.getMessage());\n         }\n     }\n+\n+    /**\n+     * Extract the version of the Checker Framework\n+     *\n+     * @throws IOException if unable to read docs/developer/release/release.properties or\n+     *     docs/examples/MavenExample/pom.xml file\n+     * @throws NullPointerException if tag present in release.properties for Checker Framework\n+     *     version is not found in docs/examples/MavenExample/pom.xml\n+     * @return Checker Framework version {@link String}\n+     */\n+    private String getCheckerVersion() throws IOException {\n+        String version = null;\n+        String RLS_FILE = \"/docs/developer/release/release.properties\";\n+        Properties releaseProperties = getProperties(getClass(), RLS_FILE);\n+        String startTag = releaseProperties.getProperty(\"checkers.ver.0\");\n+        String endTag = releaseProperties.getProperty(\"checkers.ver.1\");\n+        String XML_FILE = \"/docs/examples/MavenExample/pom.xml\";\n+        InputStream in = getClass().getResourceAsStream(XML_FILE);\n+        BufferedReader reader = new BufferedReader(new InputStreamReader(in));\n+        String line = null;\n+        while ((line = reader.readLine()) != null) {\n+            if (line.split(startTag).length > 1) {\n+                version = line.split(startTag)[1].split(endTag)[0];\n+                return version;\n+            }\n+        }\n+        throw new NullPointerException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cef0d29f42f4922c1638860005d0bd4515b8d449"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDEwOTA1OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoyNDo0NlrOGxWF3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoyNDo0NlrOGxWF3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5NTM1OQ==", "bodyText": "This line can be combined with the following one.", "url": "https://github.com/typetools/checker-framework/pull/3464#discussion_r454395359", "createdAt": "2020-07-14T14:24:46Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -2530,4 +2535,33 @@ private void printGitProperties() {\n             System.out.println(\"IOException while reading git.properties: \" + e.getMessage());\n         }\n     }\n+\n+    /**\n+     * Extract the version of the Checker Framework\n+     *\n+     * @throws IOException if unable to read docs/developer/release/release.properties or\n+     *     docs/examples/MavenExample/pom.xml file\n+     * @throws NullPointerException if tag present in release.properties for Checker Framework\n+     *     version is not found in docs/examples/MavenExample/pom.xml\n+     * @return Checker Framework version {@link String}\n+     */\n+    private String getCheckerVersion() throws IOException {\n+        String version = null;\n+        String RLS_FILE = \"/docs/developer/release/release.properties\";\n+        Properties releaseProperties = getProperties(getClass(), RLS_FILE);\n+        String startTag = releaseProperties.getProperty(\"checkers.ver.0\");\n+        String endTag = releaseProperties.getProperty(\"checkers.ver.1\");\n+        String XML_FILE = \"/docs/examples/MavenExample/pom.xml\";\n+        InputStream in = getClass().getResourceAsStream(XML_FILE);\n+        BufferedReader reader = new BufferedReader(new InputStreamReader(in));\n+        String line = null;\n+        while ((line = reader.readLine()) != null) {\n+            if (line.split(startTag).length > 1) {\n+                version = line.split(startTag)[1].split(endTag)[0];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cef0d29f42f4922c1638860005d0bd4515b8d449"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDExNzE3OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoyNjoyNFrOGxWK0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoyNjoyNFrOGxWK0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5NjYyNA==", "bodyText": "This user-visible change needs to be documented in the manual and in the changelog.", "url": "https://github.com/typetools/checker-framework/pull/3464#discussion_r454396624", "createdAt": "2020-07-14T14:26:24Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -253,6 +253,8 @@\n \n     /// Amount of detail in messages\n \n+    // Print the version of the Checker Framework\n+    \"version\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cef0d29f42f4922c1638860005d0bd4515b8d449"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDEyMDAyOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoyNzowMFrOGxWMig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNTowOTo1M1rOGxYNIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5NzA2Ng==", "bodyText": "Does this work?  It crashed for me when I tried to run it, because neither of the two files is not available in checker.jar.", "url": "https://github.com/typetools/checker-framework/pull/3464#discussion_r454397066", "createdAt": "2020-07-14T14:27:00Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -2530,4 +2535,33 @@ private void printGitProperties() {\n             System.out.println(\"IOException while reading git.properties: \" + e.getMessage());\n         }\n     }\n+\n+    /**\n+     * Extract the version of the Checker Framework\n+     *\n+     * @throws IOException if unable to read docs/developer/release/release.properties or\n+     *     docs/examples/MavenExample/pom.xml file\n+     * @throws NullPointerException if tag present in release.properties for Checker Framework\n+     *     version is not found in docs/examples/MavenExample/pom.xml\n+     * @return Checker Framework version {@link String}\n+     */\n+    private String getCheckerVersion() throws IOException {\n+        String version = null;\n+        String RLS_FILE = \"/docs/developer/release/release.properties\";\n+        Properties releaseProperties = getProperties(getClass(), RLS_FILE);\n+        String startTag = releaseProperties.getProperty(\"checkers.ver.0\");\n+        String endTag = releaseProperties.getProperty(\"checkers.ver.1\");\n+        String XML_FILE = \"/docs/examples/MavenExample/pom.xml\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cef0d29f42f4922c1638860005d0bd4515b8d449"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQyOTk4Ng==", "bodyText": "You could use git.properties instead.  See method printGitProperties.", "url": "https://github.com/typetools/checker-framework/pull/3464#discussion_r454429986", "createdAt": "2020-07-14T15:09:53Z", "author": {"login": "mernst"}, "path": "framework/src/main/java/org/checkerframework/framework/source/SourceChecker.java", "diffHunk": "@@ -2530,4 +2535,33 @@ private void printGitProperties() {\n             System.out.println(\"IOException while reading git.properties: \" + e.getMessage());\n         }\n     }\n+\n+    /**\n+     * Extract the version of the Checker Framework\n+     *\n+     * @throws IOException if unable to read docs/developer/release/release.properties or\n+     *     docs/examples/MavenExample/pom.xml file\n+     * @throws NullPointerException if tag present in release.properties for Checker Framework\n+     *     version is not found in docs/examples/MavenExample/pom.xml\n+     * @return Checker Framework version {@link String}\n+     */\n+    private String getCheckerVersion() throws IOException {\n+        String version = null;\n+        String RLS_FILE = \"/docs/developer/release/release.properties\";\n+        Properties releaseProperties = getProperties(getClass(), RLS_FILE);\n+        String startTag = releaseProperties.getProperty(\"checkers.ver.0\");\n+        String endTag = releaseProperties.getProperty(\"checkers.ver.1\");\n+        String XML_FILE = \"/docs/examples/MavenExample/pom.xml\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5NzA2Ng=="}, "originalCommit": {"oid": "cef0d29f42f4922c1638860005d0bd4515b8d449"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1554, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}