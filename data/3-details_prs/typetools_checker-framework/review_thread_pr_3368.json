{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNjc5NTg3", "number": 3368, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMToyNDoxMVrOEE5xqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMToyNDo1OFrOEE5yKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTc2MzYxOnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/type/TypeFromTypeTreeVisitor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMToyNDoxMVrOGi0IBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMToyNDoxMVrOGi0IBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE1ODc5MQ==", "bodyText": "Inlining the call to asUse() sounds like a good simplification, but it would be good to document that change in behavior. At the moment it sounds like type is returned directly.\nMaybe also the method name getTypeVariable*Use*FromDeclaration could highlight that.", "url": "https://github.com/typetools/checker-framework/pull/3368#discussion_r439158791", "createdAt": "2020-06-12T01:24:11Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/type/TypeFromTypeTreeVisitor.java", "diffHunk": "@@ -243,68 +244,56 @@ public AnnotatedTypeMirror visitWildcard(WildcardTree node, AnnotatedTypeFactory\n     }\n \n     /**\n-     * Returns an AnnotatedTypeMirror for uses of type variables with annotations written explicitly\n-     * on the type parameter declaration and/or its upper bound.\n+     * If a tree is can be found for the declaration of the type variable {@code type}, then a\n+     * {@link AnnotatedTypeVariable} is returned with explicit annotations from the type variables\n+     * declared bounds. If a tree cannot be found, then {@code type} is returned.\n      *\n-     * <p>Note for type variable uses in method signatures, explicit annotations on the declaration\n-     * are added by {@link TypeFromMemberVisitor#typeVarAnnotator}.\n+     * @param type type variable used to find declaration tree\n+     * @param f annotated type factory\n+     * @return the AnnotatedTypeVariable from the declaration of {@code type} or {@code type} if no", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb2ac1b6f5b182b53db4cab0b4f3faec65e0701"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTc2NDg5OnYy", "diffSide": "RIGHT", "path": "framework/src/main/java/org/checkerframework/framework/type/TypeFromTypeTreeVisitor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMToyNDo1OFrOGi0Iyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMToyNDo1OFrOGi0Iyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE1ODk4Ng==", "bodyText": "Could the return type be AnnotatedTypeVariable?", "url": "https://github.com/typetools/checker-framework/pull/3368#discussion_r439158986", "createdAt": "2020-06-12T01:24:58Z", "author": {"login": "wmdietl"}, "path": "framework/src/main/java/org/checkerframework/framework/type/TypeFromTypeTreeVisitor.java", "diffHunk": "@@ -243,68 +244,56 @@ public AnnotatedTypeMirror visitWildcard(WildcardTree node, AnnotatedTypeFactory\n     }\n \n     /**\n-     * Returns an AnnotatedTypeMirror for uses of type variables with annotations written explicitly\n-     * on the type parameter declaration and/or its upper bound.\n+     * If a tree is can be found for the declaration of the type variable {@code type}, then a\n+     * {@link AnnotatedTypeVariable} is returned with explicit annotations from the type variables\n+     * declared bounds. If a tree cannot be found, then {@code type} is returned.\n      *\n-     * <p>Note for type variable uses in method signatures, explicit annotations on the declaration\n-     * are added by {@link TypeFromMemberVisitor#typeVarAnnotator}.\n+     * @param type type variable used to find declaration tree\n+     * @param f annotated type factory\n+     * @return the AnnotatedTypeVariable from the declaration of {@code type} or {@code type} if no\n+     *     tree is found.\n      */\n-    private AnnotatedTypeMirror forTypeVariable(AnnotatedTypeMirror type, AnnotatedTypeFactory f) {\n-        if (type.getKind() != TypeKind.TYPEVAR) {\n-            throw new BugInCF(\n-                    \"TypeFromTree.forTypeVariable: should only be called on type variables\");\n-        }\n-        TypeVariable typeVar = (TypeVariable) type.getUnderlyingType();\n+    private AnnotatedTypeMirror getTypeVariableFromDeclaration(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eb2ac1b6f5b182b53db4cab0b4f3faec65e0701"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1686, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}