{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzMTkxMjcx", "number": 2746, "title": "Entities related to Entities of the same type", "bodyText": "Description\nThis resolves a bug if the left type and the right type of a relationship is identical. That setup was causing the virtual metadata to be populated incorrectly and the counts to be defined incorrectly.\nInstructions for Reviewers\nThe only 2 changes for the virtual metadata are in dspace-api/src/main/java/org/dspace/content/RelationshipMetadataServiceImpl.java to verify not only on the type, but also on the item's UUID\nThe counts are solved by defining whether the left or right side should be verified\nThere are already many existing ITs which still succeed.\nA new type of relationship has been defined in the test now where the left type and the right type of a relationship is identical\nChecklist\n\n My PR is small in size (e.g. less than 1,000 lines of code, not including comments & integration tests). Exceptions may be made if previously agreed upon.\n My PR passes Checkstyle validation based on the Code Style Guide\n My PR includes Javadoc for all new (or modified) public methods and classes. It also includes Javadoc for large or complex private methods.\n My PR passes all tests and includes new/updated Unit or Integration Tests for any bug fixes, improvements or new features. A few reminders about what constitutes good tests:\n\nInclude tests for different user types, including: (1) Anonymous user, (2) Logged in user (non-admin), and (3) Administrator.\nInclude tests for known error scenarios and error codes (e.g. 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found, etc)\nFor bug fixes, include a test that reproduces the bug and proves it is fixed. For clarity, it may be useful to provide the test in a separate commit from the bug fix.\n\n\n If my PR includes new, third-party dependencies (in any pom.xml), I've made sure their licenses align with the DSpace BSD License based on the Licensing of Contributions documentation.\n If my PR modifies the REST API, I've linked to the REST Contract page (or open PR) related to this change.", "createdAt": "2020-04-14T13:40:45Z", "url": "https://github.com/DSpace/DSpace/pull/2746", "merged": true, "mergeCommit": {"oid": "1f551dda36177d2c97dafe39b294d1e616b86675"}, "closed": true, "closedAt": "2020-12-04T17:36:42Z", "author": {"login": "benbosman"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcU9dQeAH2gAyNDAzMTkxMjcxOjEwYjNiMjAyOTIzMjY3NTA3MTczMDc2OTM2ZDhmNDFlZmMzZmVjN2Q=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdi7TsNAFqTU0NTE2MjUzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "10b3b202923267507173076936d8f41efc3fec7d", "author": {"user": {"login": "benbosman", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/10b3b202923267507173076936d8f41efc3fec7d", "committedDate": "2020-04-06T12:00:44Z", "message": "Support for a relationship from type A to type A (parent/child of same type)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c88af9f2ce9901783303284a183769cb0cda6755", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/c88af9f2ce9901783303284a183769cb0cda6755", "committedDate": "2020-04-09T12:08:59Z", "message": "[Task 70231] Added orgUnit x orgUnit relationshiptype and test to prove the labels in a circular relationship"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85e3bd0c52d4e7e4f12755b2e00440825bedcef2", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/85e3bd0c52d4e7e4f12755b2e00440825bedcef2", "committedDate": "2020-04-16T06:49:06Z", "message": "[Task 70401] adding failing IT to prove that count is wrong with parent and child OrgUnits in the findByLabel"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bff87e4eea63f9294aba94ff7743378d0eaabad", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/5bff87e4eea63f9294aba94ff7743378d0eaabad", "committedDate": "2020-04-16T07:42:04Z", "message": "[Task 70401] fixed the RelationshipService#countByItemAndRelationshipType to keep the isLeft parameter into account"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c91e98f48b223a367fc79512a6fce1b8bda0eb4", "author": {"user": {"login": "benbosman", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/6c91e98f48b223a367fc79512a6fce1b8bda0eb4", "committedDate": "2020-04-17T10:02:31Z", "message": "Merge pull request #19 from atmire/w2p-70401_count-queries-circular-entities\n\nW2p 70401 count queries circular entities"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7f6a4629649d22785c79273cb1a2140a9c83d48", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/c7f6a4629649d22785c79273cb1a2140a9c83d48", "committedDate": "2020-04-20T15:18:27Z", "message": "[Task 70419] fixed a bug where the RelationshipService creation did not check the max cardinality properly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccb18daeb03ea19cf7de3b380380b0618c2e7497", "author": {"user": {"login": "MarieVerdonck", "name": "Marie Verdonck"}}, "url": "https://github.com/DSpace/DSpace/commit/ccb18daeb03ea19cf7de3b380380b0618c2e7497", "committedDate": "2020-10-28T17:06:17Z", "message": "Git merge https://github.com/atmire/DSpace.git / master\n* Conflict file: RelationshipRestRepositoryIT"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MTA4MDIz", "url": "https://github.com/DSpace/DSpace/pull/2746#pullrequestreview-519108023", "createdAt": "2020-10-28T21:44:15Z", "commit": {"oid": "effd6410658b15859d6c83479e83a471e4b73397"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMTo0NDoxNVrOHp-pfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMTo0NDoxNVrOHp-pfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc4MDA5Mg==", "bodyText": "@benbosman : Just a quick note that this PR needs a rebase & cleanup.  It looks like nearly all the changes to RelationshipRestRepositoryIT are space changes (where the IDE seems to have made a lot of unrelated alignment changes).  If you could revert those space changes it'd make this PR easier to review (and it might even fall into the \"1 approval\" category).", "url": "https://github.com/DSpace/DSpace/pull/2746#discussion_r513780092", "createdAt": "2020-10-28T21:44:15Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/RelationshipRestRepositoryIT.java", "diffHunk": "@@ -105,60 +116,60 @@ public void setUp() throws Exception {\n         context.turnOffAuthorisationSystem();\n \n         parentCommunity = CommunityBuilder.createCommunity(context)\n-                                          .withName(\"Parent Community\")\n-                                          .build();\n+                .withName(\"Parent Community\")\n+                .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "effd6410658b15859d6c83479e83a471e4b73397"}, "originalPosition": 48}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "effd6410658b15859d6c83479e83a471e4b73397", "author": {"user": {"login": "benbosman", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/effd6410658b15859d6c83479e83a471e4b73397", "committedDate": "2020-09-10T10:21:27Z", "message": "Checkstyle"}, "afterCommit": {"oid": "ccb18daeb03ea19cf7de3b380380b0618c2e7497", "author": {"user": {"login": "MarieVerdonck", "name": "Marie Verdonck"}}, "url": "https://github.com/DSpace/DSpace/commit/ccb18daeb03ea19cf7de3b380380b0618c2e7497", "committedDate": "2020-10-28T17:06:17Z", "message": "Git merge https://github.com/atmire/DSpace.git / master\n* Conflict file: RelationshipRestRepositoryIT"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNzY0NDgx", "url": "https://github.com/DSpace/DSpace/pull/2746#pullrequestreview-521764481", "createdAt": "2020-11-02T16:00:20Z", "commit": {"oid": "ccb18daeb03ea19cf7de3b380380b0618c2e7497"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNjowMDoyMFrOHsKsXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNjowMDoyMFrOHsKsXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA3NDU4OQ==", "bodyText": "I don't specially like the approach of passing parameters that in my perspective describe the property of an object. In this particular case the object Relationship. The concept of Left and Right item are always subjective and relative to the person that defines it. I think a different approach that could be considered in the future is to probably considers an Item not for the location/position which is it, but if it's itself in a relation verification.\nBut I understand the reason for having this boolean here. And considering the required effort for a different approach, I'm ok with having it this way in this version.", "url": "https://github.com/DSpace/DSpace/pull/2746#discussion_r516074589", "createdAt": "2020-11-02T16:00:20Z", "author": {"login": "paulo-graca"}, "path": "dspace-api/src/main/java/org/dspace/content/dao/impl/RelationshipDAOImpl.java", "diffHunk": "@@ -201,18 +201,24 @@ public int countRows(Context context) throws SQLException {\n     }\n \n     @Override\n-    public int countByItemAndRelationshipType(Context context, Item item, RelationshipType relationshipType)\n-            throws SQLException {\n+    public int countByItemAndRelationshipType(Context context, Item item, RelationshipType relationshipType,\n+                                              boolean isLeft) throws SQLException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccb18daeb03ea19cf7de3b380380b0618c2e7497"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMjE0Njc1", "url": "https://github.com/DSpace/DSpace/pull/2746#pullrequestreview-542214675", "createdAt": "2020-12-01T19:12:25Z", "commit": {"oid": "ccb18daeb03ea19cf7de3b380380b0618c2e7497"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxOToxMjoyNVrOH872nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxOToxNTozMFrOH879cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1NzI0NA==", "bodyText": "This post() and all the others in this IT do not seem to be cleaning up after themselves.  Remember we should be using a try/finally, using an .andDo() to capture the ID of the created object (I suspect this code was just written prior to that best practice being established).  In any case, here's an example: https://github.com/DSpace/DSpace/blob/main/dspace-server-webapp/src/test/java/org/dspace/app/rest/ScriptRestRepositoryIT.java#L195-L207", "url": "https://github.com/DSpace/DSpace/pull/2746#discussion_r533657244", "createdAt": "2020-12-01T19:12:25Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/RelationshipRestRepositoryIT.java", "diffHunk": "@@ -2482,5 +2500,160 @@ public void putRelationshipWithJson() throws Exception {\n \n     }\n \n+    @Test\n+    public void orgUnitAndOrgUnitRelationshipVirtualMetadataTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        EntityType orgUnit = entityTypeService.findByEntityType(context, \"OrgUnit\");\n+        RelationshipType isParentOrgUnitOf = relationshipTypeService\n+            .findbyTypesAndTypeName(context, orgUnit, orgUnit, \"isParentOrgUnitOf\", \"isChildOrgUnitOf\");\n+\n+        MetadataSchema metadataSchema = metadataSchemaService.find(context, \"relation\");\n+        MetadataFieldBuilder.createMetadataField(context, metadataSchema, \"isParentOrgUnitOf\", null, null).build();\n+        MetadataFieldBuilder.createMetadataField(context, metadataSchema, \"isChildOrgUnitOf\", null, null).build();\n+\n+        String adminToken = getAuthToken(admin.getEmail(), password);\n+\n+        context.restoreAuthSystemState();\n+        // Here we create our first Relationship to the Publication to give it a dc.contributor.author virtual\n+        // metadata field.\n+        MvcResult mvcResult = getClient(adminToken).perform(post(\"/api/core/relationships\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccb18daeb03ea19cf7de3b380380b0618c2e7497"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1NzU0NQ==", "bodyText": "Again, post should cleanup after itself", "url": "https://github.com/DSpace/DSpace/pull/2746#discussion_r533657545", "createdAt": "2020-12-01T19:12:57Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/RelationshipRestRepositoryIT.java", "diffHunk": "@@ -2482,5 +2500,160 @@ public void putRelationshipWithJson() throws Exception {\n \n     }\n \n+    @Test\n+    public void orgUnitAndOrgUnitRelationshipVirtualMetadataTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        EntityType orgUnit = entityTypeService.findByEntityType(context, \"OrgUnit\");\n+        RelationshipType isParentOrgUnitOf = relationshipTypeService\n+            .findbyTypesAndTypeName(context, orgUnit, orgUnit, \"isParentOrgUnitOf\", \"isChildOrgUnitOf\");\n+\n+        MetadataSchema metadataSchema = metadataSchemaService.find(context, \"relation\");\n+        MetadataFieldBuilder.createMetadataField(context, metadataSchema, \"isParentOrgUnitOf\", null, null).build();\n+        MetadataFieldBuilder.createMetadataField(context, metadataSchema, \"isChildOrgUnitOf\", null, null).build();\n+\n+        String adminToken = getAuthToken(admin.getEmail(), password);\n+\n+        context.restoreAuthSystemState();\n+        // Here we create our first Relationship to the Publication to give it a dc.contributor.author virtual\n+        // metadata field.\n+        MvcResult mvcResult = getClient(adminToken).perform(post(\"/api/core/relationships\")\n+                                                                .param(\"relationshipType\",\n+                                                                       isParentOrgUnitOf.getID().toString())\n+                                                                .contentType(MediaType.parseMediaType\n+                                                                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                                                                         .TEXT_URI_LIST_VALUE))\n+                                                                .content(\n+                                                                    \"https://localhost:8080/server/api/core/items/\" + orgUnit1\n+                                                                        .getID() + \"\\n\" +\n+                                                                        \"https://localhost:8080/server/api/core/items\" +\n+                                                                        \"/\" + orgUnit2\n+                                                                        .getID()))\n+                                                   .andExpect(status().isCreated())\n+                                                   .andReturn();\n+\n+\n+        itemService.getMetadata(orgUnit1, \"*\", \"*\", \"*\", \"*\", true);\n+\n+        getClient(adminToken).perform(get(\"/api/core/items/\" + orgUnit1.getID()))\n+                             .andExpect(status().isOk())\n+                             .andExpect(jsonPath(\"$.metadata['relation.isParentOrgUnitOf'][0].value\",\n+                                                 is(String.valueOf(orgUnit2.getID()))));\n+        getClient(adminToken).perform(get(\"/api/core/items/\" + orgUnit2.getID()))\n+                             .andExpect(status().isOk())\n+                             .andExpect(jsonPath(\"$.metadata['relation.isChildOrgUnitOf'][0].value\",\n+                                                 is(String.valueOf(orgUnit1.getID()))));\n+\n+\n+\n+    }\n+\n+    @Test\n+    public void orgUnitFindByLabelParentChildOfCountTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        EntityType orgUnit = entityTypeService.findByEntityType(context, \"OrgUnit\");\n+        RelationshipType isParentOrgUnitOf = relationshipTypeService\n+            .findbyTypesAndTypeName(context, orgUnit, orgUnit, \"isParentOrgUnitOf\", \"isChildOrgUnitOf\");\n+\n+        MetadataSchema metadataSchema = metadataSchemaService.find(context, \"relation\");\n+        MetadataFieldBuilder.createMetadataField(context, metadataSchema, \"isParentOrgUnitOf\", null, null).build();\n+        MetadataFieldBuilder.createMetadataField(context, metadataSchema, \"isChildOrgUnitOf\", null, null).build();\n+\n+        String adminToken = getAuthToken(admin.getEmail(), password);\n+\n+        context.restoreAuthSystemState();\n+        // Here we create our first Relationship to the Publication to give it a dc.contributor.author virtual\n+        // metadata field.\n+        getClient(adminToken).perform(post(\"/api/core/relationships\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccb18daeb03ea19cf7de3b380380b0618c2e7497"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1NzY3Nw==", "bodyText": "Again, post should cleanup after itself", "url": "https://github.com/DSpace/DSpace/pull/2746#discussion_r533657677", "createdAt": "2020-12-01T19:13:12Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/RelationshipRestRepositoryIT.java", "diffHunk": "@@ -2482,5 +2500,160 @@ public void putRelationshipWithJson() throws Exception {\n \n     }\n \n+    @Test\n+    public void orgUnitAndOrgUnitRelationshipVirtualMetadataTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        EntityType orgUnit = entityTypeService.findByEntityType(context, \"OrgUnit\");\n+        RelationshipType isParentOrgUnitOf = relationshipTypeService\n+            .findbyTypesAndTypeName(context, orgUnit, orgUnit, \"isParentOrgUnitOf\", \"isChildOrgUnitOf\");\n+\n+        MetadataSchema metadataSchema = metadataSchemaService.find(context, \"relation\");\n+        MetadataFieldBuilder.createMetadataField(context, metadataSchema, \"isParentOrgUnitOf\", null, null).build();\n+        MetadataFieldBuilder.createMetadataField(context, metadataSchema, \"isChildOrgUnitOf\", null, null).build();\n+\n+        String adminToken = getAuthToken(admin.getEmail(), password);\n+\n+        context.restoreAuthSystemState();\n+        // Here we create our first Relationship to the Publication to give it a dc.contributor.author virtual\n+        // metadata field.\n+        MvcResult mvcResult = getClient(adminToken).perform(post(\"/api/core/relationships\")\n+                                                                .param(\"relationshipType\",\n+                                                                       isParentOrgUnitOf.getID().toString())\n+                                                                .contentType(MediaType.parseMediaType\n+                                                                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                                                                         .TEXT_URI_LIST_VALUE))\n+                                                                .content(\n+                                                                    \"https://localhost:8080/server/api/core/items/\" + orgUnit1\n+                                                                        .getID() + \"\\n\" +\n+                                                                        \"https://localhost:8080/server/api/core/items\" +\n+                                                                        \"/\" + orgUnit2\n+                                                                        .getID()))\n+                                                   .andExpect(status().isCreated())\n+                                                   .andReturn();\n+\n+\n+        itemService.getMetadata(orgUnit1, \"*\", \"*\", \"*\", \"*\", true);\n+\n+        getClient(adminToken).perform(get(\"/api/core/items/\" + orgUnit1.getID()))\n+                             .andExpect(status().isOk())\n+                             .andExpect(jsonPath(\"$.metadata['relation.isParentOrgUnitOf'][0].value\",\n+                                                 is(String.valueOf(orgUnit2.getID()))));\n+        getClient(adminToken).perform(get(\"/api/core/items/\" + orgUnit2.getID()))\n+                             .andExpect(status().isOk())\n+                             .andExpect(jsonPath(\"$.metadata['relation.isChildOrgUnitOf'][0].value\",\n+                                                 is(String.valueOf(orgUnit1.getID()))));\n+\n+\n+\n+    }\n+\n+    @Test\n+    public void orgUnitFindByLabelParentChildOfCountTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        EntityType orgUnit = entityTypeService.findByEntityType(context, \"OrgUnit\");\n+        RelationshipType isParentOrgUnitOf = relationshipTypeService\n+            .findbyTypesAndTypeName(context, orgUnit, orgUnit, \"isParentOrgUnitOf\", \"isChildOrgUnitOf\");\n+\n+        MetadataSchema metadataSchema = metadataSchemaService.find(context, \"relation\");\n+        MetadataFieldBuilder.createMetadataField(context, metadataSchema, \"isParentOrgUnitOf\", null, null).build();\n+        MetadataFieldBuilder.createMetadataField(context, metadataSchema, \"isChildOrgUnitOf\", null, null).build();\n+\n+        String adminToken = getAuthToken(admin.getEmail(), password);\n+\n+        context.restoreAuthSystemState();\n+        // Here we create our first Relationship to the Publication to give it a dc.contributor.author virtual\n+        // metadata field.\n+        getClient(adminToken).perform(post(\"/api/core/relationships\")\n+                                                                .param(\"relationshipType\",\n+                                                                       isParentOrgUnitOf.getID().toString())\n+                                                                .contentType(MediaType.parseMediaType\n+                                                                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                                                                         .TEXT_URI_LIST_VALUE))\n+                                                                .content(\n+                                                                    \"https://localhost:8080/server/api/core/items/\" + orgUnit1\n+                                                                        .getID() + \"\\n\" +\n+                                                                        \"https://localhost:8080/server/api/core/items\" +\n+                                                                        \"/\" + orgUnit2\n+                                                                        .getID()))\n+                                                   .andExpect(status().isCreated());\n+\n+        getClient(adminToken).perform(post(\"/api/core/relationships\")\n+                                                                .param(\"relationshipType\",\n+                                                                       isParentOrgUnitOf.getID().toString())\n+                                                                .contentType(MediaType.parseMediaType\n+                                                                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                                                                         .TEXT_URI_LIST_VALUE))\n+                                                                .content(\n+                                                                    \"https://localhost:8080/server/api/core/items/\" + orgUnit2\n+                                                                        .getID() + \"\\n\" +\n+                                                                        \"https://localhost:8080/server/api/core/items\" +\n+                                                                        \"/\" + orgUnit3\n+                                                                        .getID()))\n+                                                   .andExpect(status().isCreated());\n+\n+        getClient().perform(get(\"/api/core/relationships/search/byLabel\")\n+                                .param(\"label\", \"isChildOrgUnitOf\")\n+                                .param(\"dso\", String.valueOf(orgUnit2.getID()))\n+                                .param(\"page\", \"0\")\n+                                .param(\"size\", \"1\"))\n+                    .andExpect(status().isOk())\n+                    .andExpect(jsonPath(\"$.page\", PageMatcher.pageEntryWithTotalPagesAndElements(0, 1, 1, 1)));\n+\n+\n+    }\n+\n+\n+    @Test\n+    public void orgUnitLeftMaxCardinalityTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        EntityType orgUnit = entityTypeService.findByEntityType(context, \"OrgUnit\");\n+        RelationshipType isParentOrgUnitOf = relationshipTypeService\n+            .findbyTypesAndTypeName(context, orgUnit, orgUnit, \"isParentOrgUnitOf\", \"isChildOrgUnitOf\");\n \n+        MetadataSchema metadataSchema = metadataSchemaService.find(context, \"relation\");\n+        MetadataFieldBuilder.createMetadataField(context, metadataSchema, \"isParentOrgUnitOf\", null, null).build();\n+        MetadataFieldBuilder.createMetadataField(context, metadataSchema, \"isChildOrgUnitOf\", null, null).build();\n+\n+        String adminToken = getAuthToken(admin.getEmail(), password);\n+\n+        context.restoreAuthSystemState();\n+        // Here we create our first Relationship to the Publication to give it a dc.contributor.author virtual\n+        // metadata field.\n+        getClient(adminToken).perform(post(\"/api/core/relationships\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccb18daeb03ea19cf7de3b380380b0618c2e7497"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1NzgzNA==", "bodyText": "Again, post should cleanup after itself", "url": "https://github.com/DSpace/DSpace/pull/2746#discussion_r533657834", "createdAt": "2020-12-01T19:13:31Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/RelationshipRestRepositoryIT.java", "diffHunk": "@@ -2482,5 +2500,160 @@ public void putRelationshipWithJson() throws Exception {\n \n     }\n \n+    @Test\n+    public void orgUnitAndOrgUnitRelationshipVirtualMetadataTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        EntityType orgUnit = entityTypeService.findByEntityType(context, \"OrgUnit\");\n+        RelationshipType isParentOrgUnitOf = relationshipTypeService\n+            .findbyTypesAndTypeName(context, orgUnit, orgUnit, \"isParentOrgUnitOf\", \"isChildOrgUnitOf\");\n+\n+        MetadataSchema metadataSchema = metadataSchemaService.find(context, \"relation\");\n+        MetadataFieldBuilder.createMetadataField(context, metadataSchema, \"isParentOrgUnitOf\", null, null).build();\n+        MetadataFieldBuilder.createMetadataField(context, metadataSchema, \"isChildOrgUnitOf\", null, null).build();\n+\n+        String adminToken = getAuthToken(admin.getEmail(), password);\n+\n+        context.restoreAuthSystemState();\n+        // Here we create our first Relationship to the Publication to give it a dc.contributor.author virtual\n+        // metadata field.\n+        MvcResult mvcResult = getClient(adminToken).perform(post(\"/api/core/relationships\")\n+                                                                .param(\"relationshipType\",\n+                                                                       isParentOrgUnitOf.getID().toString())\n+                                                                .contentType(MediaType.parseMediaType\n+                                                                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                                                                         .TEXT_URI_LIST_VALUE))\n+                                                                .content(\n+                                                                    \"https://localhost:8080/server/api/core/items/\" + orgUnit1\n+                                                                        .getID() + \"\\n\" +\n+                                                                        \"https://localhost:8080/server/api/core/items\" +\n+                                                                        \"/\" + orgUnit2\n+                                                                        .getID()))\n+                                                   .andExpect(status().isCreated())\n+                                                   .andReturn();\n+\n+\n+        itemService.getMetadata(orgUnit1, \"*\", \"*\", \"*\", \"*\", true);\n+\n+        getClient(adminToken).perform(get(\"/api/core/items/\" + orgUnit1.getID()))\n+                             .andExpect(status().isOk())\n+                             .andExpect(jsonPath(\"$.metadata['relation.isParentOrgUnitOf'][0].value\",\n+                                                 is(String.valueOf(orgUnit2.getID()))));\n+        getClient(adminToken).perform(get(\"/api/core/items/\" + orgUnit2.getID()))\n+                             .andExpect(status().isOk())\n+                             .andExpect(jsonPath(\"$.metadata['relation.isChildOrgUnitOf'][0].value\",\n+                                                 is(String.valueOf(orgUnit1.getID()))));\n+\n+\n+\n+    }\n+\n+    @Test\n+    public void orgUnitFindByLabelParentChildOfCountTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        EntityType orgUnit = entityTypeService.findByEntityType(context, \"OrgUnit\");\n+        RelationshipType isParentOrgUnitOf = relationshipTypeService\n+            .findbyTypesAndTypeName(context, orgUnit, orgUnit, \"isParentOrgUnitOf\", \"isChildOrgUnitOf\");\n+\n+        MetadataSchema metadataSchema = metadataSchemaService.find(context, \"relation\");\n+        MetadataFieldBuilder.createMetadataField(context, metadataSchema, \"isParentOrgUnitOf\", null, null).build();\n+        MetadataFieldBuilder.createMetadataField(context, metadataSchema, \"isChildOrgUnitOf\", null, null).build();\n+\n+        String adminToken = getAuthToken(admin.getEmail(), password);\n+\n+        context.restoreAuthSystemState();\n+        // Here we create our first Relationship to the Publication to give it a dc.contributor.author virtual\n+        // metadata field.\n+        getClient(adminToken).perform(post(\"/api/core/relationships\")\n+                                                                .param(\"relationshipType\",\n+                                                                       isParentOrgUnitOf.getID().toString())\n+                                                                .contentType(MediaType.parseMediaType\n+                                                                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                                                                         .TEXT_URI_LIST_VALUE))\n+                                                                .content(\n+                                                                    \"https://localhost:8080/server/api/core/items/\" + orgUnit1\n+                                                                        .getID() + \"\\n\" +\n+                                                                        \"https://localhost:8080/server/api/core/items\" +\n+                                                                        \"/\" + orgUnit2\n+                                                                        .getID()))\n+                                                   .andExpect(status().isCreated());\n+\n+        getClient(adminToken).perform(post(\"/api/core/relationships\")\n+                                                                .param(\"relationshipType\",\n+                                                                       isParentOrgUnitOf.getID().toString())\n+                                                                .contentType(MediaType.parseMediaType\n+                                                                    (org.springframework.data.rest.webmvc.RestMediaTypes\n+                                                                         .TEXT_URI_LIST_VALUE))\n+                                                                .content(\n+                                                                    \"https://localhost:8080/server/api/core/items/\" + orgUnit2\n+                                                                        .getID() + \"\\n\" +\n+                                                                        \"https://localhost:8080/server/api/core/items\" +\n+                                                                        \"/\" + orgUnit3\n+                                                                        .getID()))\n+                                                   .andExpect(status().isCreated());\n+\n+        getClient().perform(get(\"/api/core/relationships/search/byLabel\")\n+                                .param(\"label\", \"isChildOrgUnitOf\")\n+                                .param(\"dso\", String.valueOf(orgUnit2.getID()))\n+                                .param(\"page\", \"0\")\n+                                .param(\"size\", \"1\"))\n+                    .andExpect(status().isOk())\n+                    .andExpect(jsonPath(\"$.page\", PageMatcher.pageEntryWithTotalPagesAndElements(0, 1, 1, 1)));\n+\n+\n+    }\n+\n+\n+    @Test\n+    public void orgUnitLeftMaxCardinalityTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        EntityType orgUnit = entityTypeService.findByEntityType(context, \"OrgUnit\");\n+        RelationshipType isParentOrgUnitOf = relationshipTypeService\n+            .findbyTypesAndTypeName(context, orgUnit, orgUnit, \"isParentOrgUnitOf\", \"isChildOrgUnitOf\");\n \n+        MetadataSchema metadataSchema = metadataSchemaService.find(context, \"relation\");\n+        MetadataFieldBuilder.createMetadataField(context, metadataSchema, \"isParentOrgUnitOf\", null, null).build();\n+        MetadataFieldBuilder.createMetadataField(context, metadataSchema, \"isChildOrgUnitOf\", null, null).build();\n+\n+        String adminToken = getAuthToken(admin.getEmail(), password);\n+\n+        context.restoreAuthSystemState();\n+        // Here we create our first Relationship to the Publication to give it a dc.contributor.author virtual\n+        // metadata field.\n+        getClient(adminToken).perform(post(\"/api/core/relationships\")\n+                                          .param(\"relationshipType\",\n+                                                 isParentOrgUnitOf.getID().toString())\n+                                          .contentType(MediaType.parseMediaType\n+                                              (org.springframework.data.rest.webmvc.RestMediaTypes\n+                                                   .TEXT_URI_LIST_VALUE))\n+                                          .content(\n+                                              \"https://localhost:8080/server/api/core/items/\" + orgUnit1\n+                                                  .getID() + \"\\n\" +\n+                                                  \"https://localhost:8080/server/api/core/items\" +\n+                                                  \"/\" + orgUnit2\n+                                                  .getID()))\n+                             .andExpect(status().isCreated());\n+\n+        getClient(adminToken).perform(post(\"/api/core/relationships\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccb18daeb03ea19cf7de3b380380b0618c2e7497"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY1ODk5Mw==", "bodyText": "I agree with @paulo-graca 's comment here.  It seems like this isLeft is needed, but it's an awkward implementation...the left/right concept is turning out to be quite confusing (and it is subjective).  I'm not sure what to replace it with though, as that would take more detailed discussion that would likely need to be delayed for post 7.0", "url": "https://github.com/DSpace/DSpace/pull/2746#discussion_r533658993", "createdAt": "2020-12-01T19:15:30Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/content/dao/impl/RelationshipDAOImpl.java", "diffHunk": "@@ -201,18 +201,24 @@ public int countRows(Context context) throws SQLException {\n     }\n \n     @Override\n-    public int countByItemAndRelationshipType(Context context, Item item, RelationshipType relationshipType)\n-            throws SQLException {\n+    public int countByItemAndRelationshipType(Context context, Item item, RelationshipType relationshipType,\n+                                              boolean isLeft) throws SQLException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA3NDU4OQ=="}, "originalCommit": {"oid": "ccb18daeb03ea19cf7de3b380380b0618c2e7497"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa09fb1074d4a404bd0ce0fd77cf7d19cdad8bff", "author": {"user": {"login": "MarieVerdonck", "name": "Marie Verdonck"}}, "url": "https://github.com/DSpace/DSpace/commit/aa09fb1074d4a404bd0ce0fd77cf7d19cdad8bff", "committedDate": "2020-12-04T09:23:30Z", "message": "Merge branch 'master' into circular-entities"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c47bd37be358ce30fa7a854eb19f1923b57d21b5", "author": {"user": {"login": "MarieVerdonck", "name": "Marie Verdonck"}}, "url": "https://github.com/DSpace/DSpace/commit/c47bd37be358ce30fa7a854eb19f1923b57d21b5", "committedDate": "2020-12-04T10:13:12Z", "message": "74947: Missing cleanup after post relationship creation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d70e121e93a31dba899850aa399eca35aa7dbf82", "author": {"user": {"login": "MarieVerdonck", "name": "Marie Verdonck"}}, "url": "https://github.com/DSpace/DSpace/commit/d70e121e93a31dba899850aa399eca35aa7dbf82", "committedDate": "2020-12-04T12:21:21Z", "message": "74947: Adjusting HandleDAOImplTest suffixes since this fails in CI tests:\nbecause of an existing Collection with the same handle already existing in test DB\n(problem does not occur running all tests locally)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1MTYyNTM2", "url": "https://github.com/DSpace/DSpace/pull/2746#pullrequestreview-545162536", "createdAt": "2020-12-04T17:36:34Z", "commit": {"oid": "d70e121e93a31dba899850aa399eca35aa7dbf82"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1432, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}