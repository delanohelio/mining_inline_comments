{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1ODkwMzM4", "number": 2648, "reviewThreads": {"totalCount": 40, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjozMTowMFrODdC0Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjowMDo1M1rOEA8wRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzgxNDY3OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/app/bulkedit/DSpaceCSV.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjozMTowMFrOFla1LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDozNDo1OFrOGWTESQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4MTIyOA==", "bodyText": "I think you meant to import java.nio.charset.StandardCharsets here and use StandardCharsets.UTF_8 in the code later in this file.  It's a bit odd to be using PDFBox here, since obviously this CSV code has nothing to do with PDFs.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r374781228", "createdAt": "2020-02-04T16:31:00Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/app/bulkedit/DSpaceCSV.java", "diffHunk": "@@ -27,7 +22,9 @@\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n+import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.pdfbox.util.Charsets;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5265ebd382097d221b9b9bfc2df708b5819f1fa0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAzNDI0OQ==", "bodyText": "This is still unresolved.  It looks like you should be importing java.nio.charset.StandardCharsets here, as this code has nothing to do with PDFBox or PDFs.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r426034249", "createdAt": "2020-05-15T20:34:58Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/app/bulkedit/DSpaceCSV.java", "diffHunk": "@@ -27,7 +22,9 @@\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n+import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.pdfbox.util.Charsets;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4MTIyOA=="}, "originalCommit": {"oid": "5265ebd382097d221b9b9bfc2df708b5819f1fa0"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzgzNTQxOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/app/bulkedit/MetadataExport.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjozNjozNVrOFlbCOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMDozMjo0MlrOGbcD3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4NDU2OQ==", "bodyText": "No method should complete() a Context that it does not create.  This could have unintended consequences (as a completed Context can no longer be used).", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r374784569", "createdAt": "2020-02-04T16:36:35Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/app/bulkedit/MetadataExport.java", "diffHunk": "@@ -7,272 +7,101 @@\n  */\n package org.dspace.app.bulkedit;\n \n+import java.io.OutputStream;\n import java.sql.SQLException;\n-import java.util.ArrayList;\n-import java.util.Iterator;\n-import java.util.List;\n \n-import com.google.common.collect.Iterators;\n-import org.apache.commons.cli.CommandLine;\n-import org.apache.commons.cli.CommandLineParser;\n-import org.apache.commons.cli.HelpFormatter;\n import org.apache.commons.cli.Options;\n import org.apache.commons.cli.ParseException;\n-import org.apache.commons.cli.PosixParser;\n-import org.dspace.content.Collection;\n-import org.dspace.content.Community;\n-import org.dspace.content.DSpaceObject;\n-import org.dspace.content.Item;\n-import org.dspace.content.factory.ContentServiceFactory;\n-import org.dspace.content.service.ItemService;\n-import org.dspace.core.Constants;\n+import org.dspace.content.service.MetadataDSpaceCsvExportService;\n import org.dspace.core.Context;\n-import org.dspace.handle.factory.HandleServiceFactory;\n+import org.dspace.eperson.service.EPersonService;\n+import org.dspace.scripts.DSpaceRunnable;\n+import org.springframework.beans.factory.annotation.Autowired;\n \n /**\n  * Metadata exporter to allow the batch export of metadata into a file\n  *\n  * @author Stuart Lewis\n  */\n-public class MetadataExport {\n-    /**\n-     * The items to export\n-     */\n-    protected Iterator<Item> toExport;\n+public class MetadataExport extends DSpaceRunnable {\n \n-    protected ItemService itemService;\n+    private Context context = null;\n+    private boolean help = false;\n+    private String filename = null;\n+    private String handle = null;\n+    private boolean exportAllMetadata = false;\n+    private boolean exportAllItems = false;\n \n-    protected Context context;\n+    @Autowired\n+    private MetadataDSpaceCsvExportService metadataDSpaceCsvExportService;\n \n-    /**\n-     * Whether to export all metadata, or just normally edited metadata\n-     */\n-    protected boolean exportAll;\n+    @Autowired\n+    private EPersonService ePersonService;\n \n-    protected MetadataExport() {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n+    private MetadataExport() {\n+        this.options = constructOptions();\n     }\n \n-    /**\n-     * Set up a new metadata export\n-     *\n-     * @param c         The Context\n-     * @param toExport  The ItemIterator of items to export\n-     * @param exportAll whether to export all metadata or not (include handle, provenance etc)\n-     */\n-    public MetadataExport(Context c, Iterator<Item> toExport, boolean exportAll) {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n-\n-        // Store the export settings\n-        this.toExport = toExport;\n-        this.exportAll = exportAll;\n-        this.context = c;\n-    }\n-\n-    /**\n-     * Method to export a community (and sub-communities and collections)\n-     *\n-     * @param c         The Context\n-     * @param toExport  The Community to export\n-     * @param exportAll whether to export all metadata or not (include handle, provenance etc)\n-     */\n-    public MetadataExport(Context c, Community toExport, boolean exportAll) {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n-\n-        try {\n-            // Try to export the community\n-            this.toExport = buildFromCommunity(c, toExport, 0);\n-            this.exportAll = exportAll;\n-            this.context = c;\n-        } catch (SQLException sqle) {\n-            // Something went wrong...\n-            System.err.println(\"Error running exporter:\");\n-            sqle.printStackTrace(System.err);\n-            System.exit(1);\n-        }\n-    }\n-\n-    /**\n-     * Build an array list of item ids that are in a community (include sub-communities and collections)\n-     *\n-     * @param context   DSpace context\n-     * @param community The community to build from\n-     * @param indent    How many spaces to use when writing out the names of items added\n-     * @return The list of item ids\n-     * @throws SQLException if database error\n-     */\n-    protected Iterator<Item> buildFromCommunity(Context context, Community community, int indent)\n-        throws SQLException {\n-        // Add all the collections\n-        List<Collection> collections = community.getCollections();\n-        Iterator<Item> result = null;\n-        for (Collection collection : collections) {\n-            for (int i = 0; i < indent; i++) {\n-                System.out.print(\" \");\n-            }\n-\n-            Iterator<Item> items = itemService.findByCollection(context, collection);\n-            result = addItemsToResult(result, items);\n-\n-        }\n-        // Add all the sub-communities\n-        List<Community> communities = community.getSubcommunities();\n-        for (Community subCommunity : communities) {\n-            for (int i = 0; i < indent; i++) {\n-                System.out.print(\" \");\n-            }\n-            Iterator<Item> items = buildFromCommunity(context, subCommunity, indent + 1);\n-            result = addItemsToResult(result, items);\n-        }\n-\n-        return result;\n-    }\n-\n-    private Iterator<Item> addItemsToResult(Iterator<Item> result, Iterator<Item> items) {\n-        if (result == null) {\n-            result = items;\n-        } else {\n-            result = Iterators.concat(result, items);\n-        }\n-\n-        return result;\n-    }\n-\n-    /**\n-     * Run the export\n-     *\n-     * @return the exported CSV lines\n-     */\n-    public DSpaceCSV export() {\n-        try {\n-            Context.Mode originalMode = context.getCurrentMode();\n-            context.setMode(Context.Mode.READ_ONLY);\n-\n-            // Process each item\n-            DSpaceCSV csv = new DSpaceCSV(exportAll);\n-            while (toExport.hasNext()) {\n-                Item item = toExport.next();\n-                csv.addItem(item);\n-                context.uncacheEntity(item);\n-            }\n-\n-            context.setMode(originalMode);\n-            // Return the results\n-            return csv;\n-        } catch (Exception e) {\n-            // Something went wrong...\n-            System.err.println(\"Error exporting to CSV:\");\n-            e.printStackTrace();\n-            return null;\n-        }\n-    }\n-\n-    /**\n-     * Print the help message\n-     *\n-     * @param options  The command line options the user gave\n-     * @param exitCode the system exit code to use\n-     */\n-    private static void printHelp(Options options, int exitCode) {\n-        // print the help message\n-        HelpFormatter myhelp = new HelpFormatter();\n-        myhelp.printHelp(\"MetadataExport\\n\", options);\n-        System.out.println(\"\\nfull export: metadataexport -f filename\");\n-        System.out.println(\"partial export: metadataexport -i handle -f filename\");\n-        System.exit(exitCode);\n-    }\n-\n-    /**\n-     * main method to run the metadata exporter\n-     *\n-     * @param argv the command line arguments given\n-     * @throws Exception if error occurs\n-     */\n-    public static void main(String[] argv) throws Exception {\n-        // Create an options object and populate it\n-        CommandLineParser parser = new PosixParser();\n-\n+    private Options constructOptions() {\n         Options options = new Options();\n \n         options.addOption(\"i\", \"id\", true, \"ID or handle of thing to export (item, collection, or community)\");\n+        options.getOption(\"i\").setType(String.class);\n         options.addOption(\"f\", \"file\", true, \"destination where you want file written\");\n+        options.getOption(\"f\").setType(OutputStream.class);\n+        options.getOption(\"f\").setRequired(true);\n         options.addOption(\"a\", \"all\", false,\n                           \"include all metadata fields that are not normally changed (e.g. provenance)\");\n+        options.getOption(\"a\").setType(boolean.class);\n         options.addOption(\"h\", \"help\", false, \"help\");\n+        options.getOption(\"h\").setType(boolean.class);\n \n-        CommandLine line = null;\n-\n-        try {\n-            line = parser.parse(options, argv);\n-        } catch (ParseException pe) {\n-            System.err.println(\"Error with commands.\");\n-            printHelp(options, 1);\n-            System.exit(0);\n-        }\n \n-        if (line.hasOption('h')) {\n-            printHelp(options, 0);\n-        }\n+        return options;\n+    }\n \n-        // Check a filename is given\n-        if (!line.hasOption('f')) {\n-            System.err.println(\"Required parameter -f missing!\");\n-            printHelp(options, 1);\n+    public void internalRun() throws Exception {\n+        if (help) {\n+            handler.logInfo(\"\\nfull export: metadata-export -f filename\");\n+            handler.logInfo(\"partial export: metadata-export -i handle -f filename\");\n+            printHelp();\n+            return;\n         }\n-        String filename = line.getOptionValue('f');\n \n-        // Create a context\n-        Context c = new Context(Context.Mode.READ_ONLY);\n-        c.turnOffAuthorisationSystem();\n-\n-        // The things we'll export\n-        Iterator<Item> toExport = null;\n-        MetadataExport exporter = null;\n+        DSpaceCSV dSpaceCSV = metadataDSpaceCsvExportService\n+            .handleExport(context, exportAllItems, exportAllMetadata, handle,\n+                          handler);\n+        handler.writeFilestream(context, filename, dSpaceCSV.getInputStream(), \"exportCSV\");\n+        context.restoreAuthSystemState();\n+        context.complete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5265ebd382097d221b9b9bfc2df708b5819f1fa0"}, "originalPosition": 262}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkxMjAxNg==", "bodyText": "Yes, this introduces a subtle coupling between the creating class and the completing class that could bite us later.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r375912016", "createdAt": "2020-02-06T15:42:51Z", "author": {"login": "mwoodiupui"}, "path": "dspace-api/src/main/java/org/dspace/app/bulkedit/MetadataExport.java", "diffHunk": "@@ -7,272 +7,101 @@\n  */\n package org.dspace.app.bulkedit;\n \n+import java.io.OutputStream;\n import java.sql.SQLException;\n-import java.util.ArrayList;\n-import java.util.Iterator;\n-import java.util.List;\n \n-import com.google.common.collect.Iterators;\n-import org.apache.commons.cli.CommandLine;\n-import org.apache.commons.cli.CommandLineParser;\n-import org.apache.commons.cli.HelpFormatter;\n import org.apache.commons.cli.Options;\n import org.apache.commons.cli.ParseException;\n-import org.apache.commons.cli.PosixParser;\n-import org.dspace.content.Collection;\n-import org.dspace.content.Community;\n-import org.dspace.content.DSpaceObject;\n-import org.dspace.content.Item;\n-import org.dspace.content.factory.ContentServiceFactory;\n-import org.dspace.content.service.ItemService;\n-import org.dspace.core.Constants;\n+import org.dspace.content.service.MetadataDSpaceCsvExportService;\n import org.dspace.core.Context;\n-import org.dspace.handle.factory.HandleServiceFactory;\n+import org.dspace.eperson.service.EPersonService;\n+import org.dspace.scripts.DSpaceRunnable;\n+import org.springframework.beans.factory.annotation.Autowired;\n \n /**\n  * Metadata exporter to allow the batch export of metadata into a file\n  *\n  * @author Stuart Lewis\n  */\n-public class MetadataExport {\n-    /**\n-     * The items to export\n-     */\n-    protected Iterator<Item> toExport;\n+public class MetadataExport extends DSpaceRunnable {\n \n-    protected ItemService itemService;\n+    private Context context = null;\n+    private boolean help = false;\n+    private String filename = null;\n+    private String handle = null;\n+    private boolean exportAllMetadata = false;\n+    private boolean exportAllItems = false;\n \n-    protected Context context;\n+    @Autowired\n+    private MetadataDSpaceCsvExportService metadataDSpaceCsvExportService;\n \n-    /**\n-     * Whether to export all metadata, or just normally edited metadata\n-     */\n-    protected boolean exportAll;\n+    @Autowired\n+    private EPersonService ePersonService;\n \n-    protected MetadataExport() {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n+    private MetadataExport() {\n+        this.options = constructOptions();\n     }\n \n-    /**\n-     * Set up a new metadata export\n-     *\n-     * @param c         The Context\n-     * @param toExport  The ItemIterator of items to export\n-     * @param exportAll whether to export all metadata or not (include handle, provenance etc)\n-     */\n-    public MetadataExport(Context c, Iterator<Item> toExport, boolean exportAll) {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n-\n-        // Store the export settings\n-        this.toExport = toExport;\n-        this.exportAll = exportAll;\n-        this.context = c;\n-    }\n-\n-    /**\n-     * Method to export a community (and sub-communities and collections)\n-     *\n-     * @param c         The Context\n-     * @param toExport  The Community to export\n-     * @param exportAll whether to export all metadata or not (include handle, provenance etc)\n-     */\n-    public MetadataExport(Context c, Community toExport, boolean exportAll) {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n-\n-        try {\n-            // Try to export the community\n-            this.toExport = buildFromCommunity(c, toExport, 0);\n-            this.exportAll = exportAll;\n-            this.context = c;\n-        } catch (SQLException sqle) {\n-            // Something went wrong...\n-            System.err.println(\"Error running exporter:\");\n-            sqle.printStackTrace(System.err);\n-            System.exit(1);\n-        }\n-    }\n-\n-    /**\n-     * Build an array list of item ids that are in a community (include sub-communities and collections)\n-     *\n-     * @param context   DSpace context\n-     * @param community The community to build from\n-     * @param indent    How many spaces to use when writing out the names of items added\n-     * @return The list of item ids\n-     * @throws SQLException if database error\n-     */\n-    protected Iterator<Item> buildFromCommunity(Context context, Community community, int indent)\n-        throws SQLException {\n-        // Add all the collections\n-        List<Collection> collections = community.getCollections();\n-        Iterator<Item> result = null;\n-        for (Collection collection : collections) {\n-            for (int i = 0; i < indent; i++) {\n-                System.out.print(\" \");\n-            }\n-\n-            Iterator<Item> items = itemService.findByCollection(context, collection);\n-            result = addItemsToResult(result, items);\n-\n-        }\n-        // Add all the sub-communities\n-        List<Community> communities = community.getSubcommunities();\n-        for (Community subCommunity : communities) {\n-            for (int i = 0; i < indent; i++) {\n-                System.out.print(\" \");\n-            }\n-            Iterator<Item> items = buildFromCommunity(context, subCommunity, indent + 1);\n-            result = addItemsToResult(result, items);\n-        }\n-\n-        return result;\n-    }\n-\n-    private Iterator<Item> addItemsToResult(Iterator<Item> result, Iterator<Item> items) {\n-        if (result == null) {\n-            result = items;\n-        } else {\n-            result = Iterators.concat(result, items);\n-        }\n-\n-        return result;\n-    }\n-\n-    /**\n-     * Run the export\n-     *\n-     * @return the exported CSV lines\n-     */\n-    public DSpaceCSV export() {\n-        try {\n-            Context.Mode originalMode = context.getCurrentMode();\n-            context.setMode(Context.Mode.READ_ONLY);\n-\n-            // Process each item\n-            DSpaceCSV csv = new DSpaceCSV(exportAll);\n-            while (toExport.hasNext()) {\n-                Item item = toExport.next();\n-                csv.addItem(item);\n-                context.uncacheEntity(item);\n-            }\n-\n-            context.setMode(originalMode);\n-            // Return the results\n-            return csv;\n-        } catch (Exception e) {\n-            // Something went wrong...\n-            System.err.println(\"Error exporting to CSV:\");\n-            e.printStackTrace();\n-            return null;\n-        }\n-    }\n-\n-    /**\n-     * Print the help message\n-     *\n-     * @param options  The command line options the user gave\n-     * @param exitCode the system exit code to use\n-     */\n-    private static void printHelp(Options options, int exitCode) {\n-        // print the help message\n-        HelpFormatter myhelp = new HelpFormatter();\n-        myhelp.printHelp(\"MetadataExport\\n\", options);\n-        System.out.println(\"\\nfull export: metadataexport -f filename\");\n-        System.out.println(\"partial export: metadataexport -i handle -f filename\");\n-        System.exit(exitCode);\n-    }\n-\n-    /**\n-     * main method to run the metadata exporter\n-     *\n-     * @param argv the command line arguments given\n-     * @throws Exception if error occurs\n-     */\n-    public static void main(String[] argv) throws Exception {\n-        // Create an options object and populate it\n-        CommandLineParser parser = new PosixParser();\n-\n+    private Options constructOptions() {\n         Options options = new Options();\n \n         options.addOption(\"i\", \"id\", true, \"ID or handle of thing to export (item, collection, or community)\");\n+        options.getOption(\"i\").setType(String.class);\n         options.addOption(\"f\", \"file\", true, \"destination where you want file written\");\n+        options.getOption(\"f\").setType(OutputStream.class);\n+        options.getOption(\"f\").setRequired(true);\n         options.addOption(\"a\", \"all\", false,\n                           \"include all metadata fields that are not normally changed (e.g. provenance)\");\n+        options.getOption(\"a\").setType(boolean.class);\n         options.addOption(\"h\", \"help\", false, \"help\");\n+        options.getOption(\"h\").setType(boolean.class);\n \n-        CommandLine line = null;\n-\n-        try {\n-            line = parser.parse(options, argv);\n-        } catch (ParseException pe) {\n-            System.err.println(\"Error with commands.\");\n-            printHelp(options, 1);\n-            System.exit(0);\n-        }\n \n-        if (line.hasOption('h')) {\n-            printHelp(options, 0);\n-        }\n+        return options;\n+    }\n \n-        // Check a filename is given\n-        if (!line.hasOption('f')) {\n-            System.err.println(\"Required parameter -f missing!\");\n-            printHelp(options, 1);\n+    public void internalRun() throws Exception {\n+        if (help) {\n+            handler.logInfo(\"\\nfull export: metadata-export -f filename\");\n+            handler.logInfo(\"partial export: metadata-export -i handle -f filename\");\n+            printHelp();\n+            return;\n         }\n-        String filename = line.getOptionValue('f');\n \n-        // Create a context\n-        Context c = new Context(Context.Mode.READ_ONLY);\n-        c.turnOffAuthorisationSystem();\n-\n-        // The things we'll export\n-        Iterator<Item> toExport = null;\n-        MetadataExport exporter = null;\n+        DSpaceCSV dSpaceCSV = metadataDSpaceCsvExportService\n+            .handleExport(context, exportAllItems, exportAllMetadata, handle,\n+                          handler);\n+        handler.writeFilestream(context, filename, dSpaceCSV.getInputStream(), \"exportCSV\");\n+        context.restoreAuthSystemState();\n+        context.complete();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4NDU2OQ=="}, "originalCommit": {"oid": "5265ebd382097d221b9b9bfc2df708b5819f1fa0"}, "originalPosition": 262}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAzNjk2MA==", "bodyText": "Again, please resolve prior feedback here.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r426036960", "createdAt": "2020-05-15T20:41:34Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/app/bulkedit/MetadataExport.java", "diffHunk": "@@ -7,272 +7,101 @@\n  */\n package org.dspace.app.bulkedit;\n \n+import java.io.OutputStream;\n import java.sql.SQLException;\n-import java.util.ArrayList;\n-import java.util.Iterator;\n-import java.util.List;\n \n-import com.google.common.collect.Iterators;\n-import org.apache.commons.cli.CommandLine;\n-import org.apache.commons.cli.CommandLineParser;\n-import org.apache.commons.cli.HelpFormatter;\n import org.apache.commons.cli.Options;\n import org.apache.commons.cli.ParseException;\n-import org.apache.commons.cli.PosixParser;\n-import org.dspace.content.Collection;\n-import org.dspace.content.Community;\n-import org.dspace.content.DSpaceObject;\n-import org.dspace.content.Item;\n-import org.dspace.content.factory.ContentServiceFactory;\n-import org.dspace.content.service.ItemService;\n-import org.dspace.core.Constants;\n+import org.dspace.content.service.MetadataDSpaceCsvExportService;\n import org.dspace.core.Context;\n-import org.dspace.handle.factory.HandleServiceFactory;\n+import org.dspace.eperson.service.EPersonService;\n+import org.dspace.scripts.DSpaceRunnable;\n+import org.springframework.beans.factory.annotation.Autowired;\n \n /**\n  * Metadata exporter to allow the batch export of metadata into a file\n  *\n  * @author Stuart Lewis\n  */\n-public class MetadataExport {\n-    /**\n-     * The items to export\n-     */\n-    protected Iterator<Item> toExport;\n+public class MetadataExport extends DSpaceRunnable {\n \n-    protected ItemService itemService;\n+    private Context context = null;\n+    private boolean help = false;\n+    private String filename = null;\n+    private String handle = null;\n+    private boolean exportAllMetadata = false;\n+    private boolean exportAllItems = false;\n \n-    protected Context context;\n+    @Autowired\n+    private MetadataDSpaceCsvExportService metadataDSpaceCsvExportService;\n \n-    /**\n-     * Whether to export all metadata, or just normally edited metadata\n-     */\n-    protected boolean exportAll;\n+    @Autowired\n+    private EPersonService ePersonService;\n \n-    protected MetadataExport() {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n+    private MetadataExport() {\n+        this.options = constructOptions();\n     }\n \n-    /**\n-     * Set up a new metadata export\n-     *\n-     * @param c         The Context\n-     * @param toExport  The ItemIterator of items to export\n-     * @param exportAll whether to export all metadata or not (include handle, provenance etc)\n-     */\n-    public MetadataExport(Context c, Iterator<Item> toExport, boolean exportAll) {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n-\n-        // Store the export settings\n-        this.toExport = toExport;\n-        this.exportAll = exportAll;\n-        this.context = c;\n-    }\n-\n-    /**\n-     * Method to export a community (and sub-communities and collections)\n-     *\n-     * @param c         The Context\n-     * @param toExport  The Community to export\n-     * @param exportAll whether to export all metadata or not (include handle, provenance etc)\n-     */\n-    public MetadataExport(Context c, Community toExport, boolean exportAll) {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n-\n-        try {\n-            // Try to export the community\n-            this.toExport = buildFromCommunity(c, toExport, 0);\n-            this.exportAll = exportAll;\n-            this.context = c;\n-        } catch (SQLException sqle) {\n-            // Something went wrong...\n-            System.err.println(\"Error running exporter:\");\n-            sqle.printStackTrace(System.err);\n-            System.exit(1);\n-        }\n-    }\n-\n-    /**\n-     * Build an array list of item ids that are in a community (include sub-communities and collections)\n-     *\n-     * @param context   DSpace context\n-     * @param community The community to build from\n-     * @param indent    How many spaces to use when writing out the names of items added\n-     * @return The list of item ids\n-     * @throws SQLException if database error\n-     */\n-    protected Iterator<Item> buildFromCommunity(Context context, Community community, int indent)\n-        throws SQLException {\n-        // Add all the collections\n-        List<Collection> collections = community.getCollections();\n-        Iterator<Item> result = null;\n-        for (Collection collection : collections) {\n-            for (int i = 0; i < indent; i++) {\n-                System.out.print(\" \");\n-            }\n-\n-            Iterator<Item> items = itemService.findByCollection(context, collection);\n-            result = addItemsToResult(result, items);\n-\n-        }\n-        // Add all the sub-communities\n-        List<Community> communities = community.getSubcommunities();\n-        for (Community subCommunity : communities) {\n-            for (int i = 0; i < indent; i++) {\n-                System.out.print(\" \");\n-            }\n-            Iterator<Item> items = buildFromCommunity(context, subCommunity, indent + 1);\n-            result = addItemsToResult(result, items);\n-        }\n-\n-        return result;\n-    }\n-\n-    private Iterator<Item> addItemsToResult(Iterator<Item> result, Iterator<Item> items) {\n-        if (result == null) {\n-            result = items;\n-        } else {\n-            result = Iterators.concat(result, items);\n-        }\n-\n-        return result;\n-    }\n-\n-    /**\n-     * Run the export\n-     *\n-     * @return the exported CSV lines\n-     */\n-    public DSpaceCSV export() {\n-        try {\n-            Context.Mode originalMode = context.getCurrentMode();\n-            context.setMode(Context.Mode.READ_ONLY);\n-\n-            // Process each item\n-            DSpaceCSV csv = new DSpaceCSV(exportAll);\n-            while (toExport.hasNext()) {\n-                Item item = toExport.next();\n-                csv.addItem(item);\n-                context.uncacheEntity(item);\n-            }\n-\n-            context.setMode(originalMode);\n-            // Return the results\n-            return csv;\n-        } catch (Exception e) {\n-            // Something went wrong...\n-            System.err.println(\"Error exporting to CSV:\");\n-            e.printStackTrace();\n-            return null;\n-        }\n-    }\n-\n-    /**\n-     * Print the help message\n-     *\n-     * @param options  The command line options the user gave\n-     * @param exitCode the system exit code to use\n-     */\n-    private static void printHelp(Options options, int exitCode) {\n-        // print the help message\n-        HelpFormatter myhelp = new HelpFormatter();\n-        myhelp.printHelp(\"MetadataExport\\n\", options);\n-        System.out.println(\"\\nfull export: metadataexport -f filename\");\n-        System.out.println(\"partial export: metadataexport -i handle -f filename\");\n-        System.exit(exitCode);\n-    }\n-\n-    /**\n-     * main method to run the metadata exporter\n-     *\n-     * @param argv the command line arguments given\n-     * @throws Exception if error occurs\n-     */\n-    public static void main(String[] argv) throws Exception {\n-        // Create an options object and populate it\n-        CommandLineParser parser = new PosixParser();\n-\n+    private Options constructOptions() {\n         Options options = new Options();\n \n         options.addOption(\"i\", \"id\", true, \"ID or handle of thing to export (item, collection, or community)\");\n+        options.getOption(\"i\").setType(String.class);\n         options.addOption(\"f\", \"file\", true, \"destination where you want file written\");\n+        options.getOption(\"f\").setType(OutputStream.class);\n+        options.getOption(\"f\").setRequired(true);\n         options.addOption(\"a\", \"all\", false,\n                           \"include all metadata fields that are not normally changed (e.g. provenance)\");\n+        options.getOption(\"a\").setType(boolean.class);\n         options.addOption(\"h\", \"help\", false, \"help\");\n+        options.getOption(\"h\").setType(boolean.class);\n \n-        CommandLine line = null;\n-\n-        try {\n-            line = parser.parse(options, argv);\n-        } catch (ParseException pe) {\n-            System.err.println(\"Error with commands.\");\n-            printHelp(options, 1);\n-            System.exit(0);\n-        }\n \n-        if (line.hasOption('h')) {\n-            printHelp(options, 0);\n-        }\n+        return options;\n+    }\n \n-        // Check a filename is given\n-        if (!line.hasOption('f')) {\n-            System.err.println(\"Required parameter -f missing!\");\n-            printHelp(options, 1);\n+    public void internalRun() throws Exception {\n+        if (help) {\n+            handler.logInfo(\"\\nfull export: metadata-export -f filename\");\n+            handler.logInfo(\"partial export: metadata-export -i handle -f filename\");\n+            printHelp();\n+            return;\n         }\n-        String filename = line.getOptionValue('f');\n \n-        // Create a context\n-        Context c = new Context(Context.Mode.READ_ONLY);\n-        c.turnOffAuthorisationSystem();\n-\n-        // The things we'll export\n-        Iterator<Item> toExport = null;\n-        MetadataExport exporter = null;\n+        DSpaceCSV dSpaceCSV = metadataDSpaceCsvExportService\n+            .handleExport(context, exportAllItems, exportAllMetadata, handle,\n+                          handler);\n+        handler.writeFilestream(context, filename, dSpaceCSV.getInputStream(), \"exportCSV\");\n+        context.restoreAuthSystemState();\n+        context.complete();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4NDU2OQ=="}, "originalCommit": {"oid": "5265ebd382097d221b9b9bfc2df708b5819f1fa0"}, "originalPosition": 262}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk1NTIwNQ==", "bodyText": "@tdonohue @mwoodiupui This is not something that we can easily dismiss here. This class represents a class that is run in a separate thread. This class creates the context & closes it as well. For this particular case we could go for a context.abort() as well (as this is an export that doesn't modify any data). But leaving it out would not be recommended as we don't want any open database connections for threads that are done.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r430955205", "createdAt": "2020-05-27T08:45:03Z", "author": {"login": "KevinVdV"}, "path": "dspace-api/src/main/java/org/dspace/app/bulkedit/MetadataExport.java", "diffHunk": "@@ -7,272 +7,101 @@\n  */\n package org.dspace.app.bulkedit;\n \n+import java.io.OutputStream;\n import java.sql.SQLException;\n-import java.util.ArrayList;\n-import java.util.Iterator;\n-import java.util.List;\n \n-import com.google.common.collect.Iterators;\n-import org.apache.commons.cli.CommandLine;\n-import org.apache.commons.cli.CommandLineParser;\n-import org.apache.commons.cli.HelpFormatter;\n import org.apache.commons.cli.Options;\n import org.apache.commons.cli.ParseException;\n-import org.apache.commons.cli.PosixParser;\n-import org.dspace.content.Collection;\n-import org.dspace.content.Community;\n-import org.dspace.content.DSpaceObject;\n-import org.dspace.content.Item;\n-import org.dspace.content.factory.ContentServiceFactory;\n-import org.dspace.content.service.ItemService;\n-import org.dspace.core.Constants;\n+import org.dspace.content.service.MetadataDSpaceCsvExportService;\n import org.dspace.core.Context;\n-import org.dspace.handle.factory.HandleServiceFactory;\n+import org.dspace.eperson.service.EPersonService;\n+import org.dspace.scripts.DSpaceRunnable;\n+import org.springframework.beans.factory.annotation.Autowired;\n \n /**\n  * Metadata exporter to allow the batch export of metadata into a file\n  *\n  * @author Stuart Lewis\n  */\n-public class MetadataExport {\n-    /**\n-     * The items to export\n-     */\n-    protected Iterator<Item> toExport;\n+public class MetadataExport extends DSpaceRunnable {\n \n-    protected ItemService itemService;\n+    private Context context = null;\n+    private boolean help = false;\n+    private String filename = null;\n+    private String handle = null;\n+    private boolean exportAllMetadata = false;\n+    private boolean exportAllItems = false;\n \n-    protected Context context;\n+    @Autowired\n+    private MetadataDSpaceCsvExportService metadataDSpaceCsvExportService;\n \n-    /**\n-     * Whether to export all metadata, or just normally edited metadata\n-     */\n-    protected boolean exportAll;\n+    @Autowired\n+    private EPersonService ePersonService;\n \n-    protected MetadataExport() {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n+    private MetadataExport() {\n+        this.options = constructOptions();\n     }\n \n-    /**\n-     * Set up a new metadata export\n-     *\n-     * @param c         The Context\n-     * @param toExport  The ItemIterator of items to export\n-     * @param exportAll whether to export all metadata or not (include handle, provenance etc)\n-     */\n-    public MetadataExport(Context c, Iterator<Item> toExport, boolean exportAll) {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n-\n-        // Store the export settings\n-        this.toExport = toExport;\n-        this.exportAll = exportAll;\n-        this.context = c;\n-    }\n-\n-    /**\n-     * Method to export a community (and sub-communities and collections)\n-     *\n-     * @param c         The Context\n-     * @param toExport  The Community to export\n-     * @param exportAll whether to export all metadata or not (include handle, provenance etc)\n-     */\n-    public MetadataExport(Context c, Community toExport, boolean exportAll) {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n-\n-        try {\n-            // Try to export the community\n-            this.toExport = buildFromCommunity(c, toExport, 0);\n-            this.exportAll = exportAll;\n-            this.context = c;\n-        } catch (SQLException sqle) {\n-            // Something went wrong...\n-            System.err.println(\"Error running exporter:\");\n-            sqle.printStackTrace(System.err);\n-            System.exit(1);\n-        }\n-    }\n-\n-    /**\n-     * Build an array list of item ids that are in a community (include sub-communities and collections)\n-     *\n-     * @param context   DSpace context\n-     * @param community The community to build from\n-     * @param indent    How many spaces to use when writing out the names of items added\n-     * @return The list of item ids\n-     * @throws SQLException if database error\n-     */\n-    protected Iterator<Item> buildFromCommunity(Context context, Community community, int indent)\n-        throws SQLException {\n-        // Add all the collections\n-        List<Collection> collections = community.getCollections();\n-        Iterator<Item> result = null;\n-        for (Collection collection : collections) {\n-            for (int i = 0; i < indent; i++) {\n-                System.out.print(\" \");\n-            }\n-\n-            Iterator<Item> items = itemService.findByCollection(context, collection);\n-            result = addItemsToResult(result, items);\n-\n-        }\n-        // Add all the sub-communities\n-        List<Community> communities = community.getSubcommunities();\n-        for (Community subCommunity : communities) {\n-            for (int i = 0; i < indent; i++) {\n-                System.out.print(\" \");\n-            }\n-            Iterator<Item> items = buildFromCommunity(context, subCommunity, indent + 1);\n-            result = addItemsToResult(result, items);\n-        }\n-\n-        return result;\n-    }\n-\n-    private Iterator<Item> addItemsToResult(Iterator<Item> result, Iterator<Item> items) {\n-        if (result == null) {\n-            result = items;\n-        } else {\n-            result = Iterators.concat(result, items);\n-        }\n-\n-        return result;\n-    }\n-\n-    /**\n-     * Run the export\n-     *\n-     * @return the exported CSV lines\n-     */\n-    public DSpaceCSV export() {\n-        try {\n-            Context.Mode originalMode = context.getCurrentMode();\n-            context.setMode(Context.Mode.READ_ONLY);\n-\n-            // Process each item\n-            DSpaceCSV csv = new DSpaceCSV(exportAll);\n-            while (toExport.hasNext()) {\n-                Item item = toExport.next();\n-                csv.addItem(item);\n-                context.uncacheEntity(item);\n-            }\n-\n-            context.setMode(originalMode);\n-            // Return the results\n-            return csv;\n-        } catch (Exception e) {\n-            // Something went wrong...\n-            System.err.println(\"Error exporting to CSV:\");\n-            e.printStackTrace();\n-            return null;\n-        }\n-    }\n-\n-    /**\n-     * Print the help message\n-     *\n-     * @param options  The command line options the user gave\n-     * @param exitCode the system exit code to use\n-     */\n-    private static void printHelp(Options options, int exitCode) {\n-        // print the help message\n-        HelpFormatter myhelp = new HelpFormatter();\n-        myhelp.printHelp(\"MetadataExport\\n\", options);\n-        System.out.println(\"\\nfull export: metadataexport -f filename\");\n-        System.out.println(\"partial export: metadataexport -i handle -f filename\");\n-        System.exit(exitCode);\n-    }\n-\n-    /**\n-     * main method to run the metadata exporter\n-     *\n-     * @param argv the command line arguments given\n-     * @throws Exception if error occurs\n-     */\n-    public static void main(String[] argv) throws Exception {\n-        // Create an options object and populate it\n-        CommandLineParser parser = new PosixParser();\n-\n+    private Options constructOptions() {\n         Options options = new Options();\n \n         options.addOption(\"i\", \"id\", true, \"ID or handle of thing to export (item, collection, or community)\");\n+        options.getOption(\"i\").setType(String.class);\n         options.addOption(\"f\", \"file\", true, \"destination where you want file written\");\n+        options.getOption(\"f\").setType(OutputStream.class);\n+        options.getOption(\"f\").setRequired(true);\n         options.addOption(\"a\", \"all\", false,\n                           \"include all metadata fields that are not normally changed (e.g. provenance)\");\n+        options.getOption(\"a\").setType(boolean.class);\n         options.addOption(\"h\", \"help\", false, \"help\");\n+        options.getOption(\"h\").setType(boolean.class);\n \n-        CommandLine line = null;\n-\n-        try {\n-            line = parser.parse(options, argv);\n-        } catch (ParseException pe) {\n-            System.err.println(\"Error with commands.\");\n-            printHelp(options, 1);\n-            System.exit(0);\n-        }\n \n-        if (line.hasOption('h')) {\n-            printHelp(options, 0);\n-        }\n+        return options;\n+    }\n \n-        // Check a filename is given\n-        if (!line.hasOption('f')) {\n-            System.err.println(\"Required parameter -f missing!\");\n-            printHelp(options, 1);\n+    public void internalRun() throws Exception {\n+        if (help) {\n+            handler.logInfo(\"\\nfull export: metadata-export -f filename\");\n+            handler.logInfo(\"partial export: metadata-export -i handle -f filename\");\n+            printHelp();\n+            return;\n         }\n-        String filename = line.getOptionValue('f');\n \n-        // Create a context\n-        Context c = new Context(Context.Mode.READ_ONLY);\n-        c.turnOffAuthorisationSystem();\n-\n-        // The things we'll export\n-        Iterator<Item> toExport = null;\n-        MetadataExport exporter = null;\n+        DSpaceCSV dSpaceCSV = metadataDSpaceCsvExportService\n+            .handleExport(context, exportAllItems, exportAllMetadata, handle,\n+                          handler);\n+        handler.writeFilestream(context, filename, dSpaceCSV.getInputStream(), \"exportCSV\");\n+        context.restoreAuthSystemState();\n+        context.complete();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4NDU2OQ=="}, "originalCommit": {"oid": "5265ebd382097d221b9b9bfc2df708b5819f1fa0"}, "originalPosition": 262}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIyMTIxNw==", "bodyText": "@KevinVdV : I'm sorry, but we cannot merge this as is. It will need refactoring.  Currently you've changed the behavior of this MetadataExport class, which is fine.  But, you've added a major flaw here.  Essentially, there are now two public methods... a setup() which creates a Context, and a internalRun() which commits the Context.  If someone accidentally calls internalRun() first, this will immediately fail with a NPE as no Context yet exists.   My recommendation here is to not have so many public methods, and ensure there is one method that creates & completes the context. It can call other methods to do processing with that context, but the context creation & closing must occur in the same method (no exceptions).", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r431221217", "createdAt": "2020-05-27T15:16:04Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/app/bulkedit/MetadataExport.java", "diffHunk": "@@ -7,272 +7,101 @@\n  */\n package org.dspace.app.bulkedit;\n \n+import java.io.OutputStream;\n import java.sql.SQLException;\n-import java.util.ArrayList;\n-import java.util.Iterator;\n-import java.util.List;\n \n-import com.google.common.collect.Iterators;\n-import org.apache.commons.cli.CommandLine;\n-import org.apache.commons.cli.CommandLineParser;\n-import org.apache.commons.cli.HelpFormatter;\n import org.apache.commons.cli.Options;\n import org.apache.commons.cli.ParseException;\n-import org.apache.commons.cli.PosixParser;\n-import org.dspace.content.Collection;\n-import org.dspace.content.Community;\n-import org.dspace.content.DSpaceObject;\n-import org.dspace.content.Item;\n-import org.dspace.content.factory.ContentServiceFactory;\n-import org.dspace.content.service.ItemService;\n-import org.dspace.core.Constants;\n+import org.dspace.content.service.MetadataDSpaceCsvExportService;\n import org.dspace.core.Context;\n-import org.dspace.handle.factory.HandleServiceFactory;\n+import org.dspace.eperson.service.EPersonService;\n+import org.dspace.scripts.DSpaceRunnable;\n+import org.springframework.beans.factory.annotation.Autowired;\n \n /**\n  * Metadata exporter to allow the batch export of metadata into a file\n  *\n  * @author Stuart Lewis\n  */\n-public class MetadataExport {\n-    /**\n-     * The items to export\n-     */\n-    protected Iterator<Item> toExport;\n+public class MetadataExport extends DSpaceRunnable {\n \n-    protected ItemService itemService;\n+    private Context context = null;\n+    private boolean help = false;\n+    private String filename = null;\n+    private String handle = null;\n+    private boolean exportAllMetadata = false;\n+    private boolean exportAllItems = false;\n \n-    protected Context context;\n+    @Autowired\n+    private MetadataDSpaceCsvExportService metadataDSpaceCsvExportService;\n \n-    /**\n-     * Whether to export all metadata, or just normally edited metadata\n-     */\n-    protected boolean exportAll;\n+    @Autowired\n+    private EPersonService ePersonService;\n \n-    protected MetadataExport() {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n+    private MetadataExport() {\n+        this.options = constructOptions();\n     }\n \n-    /**\n-     * Set up a new metadata export\n-     *\n-     * @param c         The Context\n-     * @param toExport  The ItemIterator of items to export\n-     * @param exportAll whether to export all metadata or not (include handle, provenance etc)\n-     */\n-    public MetadataExport(Context c, Iterator<Item> toExport, boolean exportAll) {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n-\n-        // Store the export settings\n-        this.toExport = toExport;\n-        this.exportAll = exportAll;\n-        this.context = c;\n-    }\n-\n-    /**\n-     * Method to export a community (and sub-communities and collections)\n-     *\n-     * @param c         The Context\n-     * @param toExport  The Community to export\n-     * @param exportAll whether to export all metadata or not (include handle, provenance etc)\n-     */\n-    public MetadataExport(Context c, Community toExport, boolean exportAll) {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n-\n-        try {\n-            // Try to export the community\n-            this.toExport = buildFromCommunity(c, toExport, 0);\n-            this.exportAll = exportAll;\n-            this.context = c;\n-        } catch (SQLException sqle) {\n-            // Something went wrong...\n-            System.err.println(\"Error running exporter:\");\n-            sqle.printStackTrace(System.err);\n-            System.exit(1);\n-        }\n-    }\n-\n-    /**\n-     * Build an array list of item ids that are in a community (include sub-communities and collections)\n-     *\n-     * @param context   DSpace context\n-     * @param community The community to build from\n-     * @param indent    How many spaces to use when writing out the names of items added\n-     * @return The list of item ids\n-     * @throws SQLException if database error\n-     */\n-    protected Iterator<Item> buildFromCommunity(Context context, Community community, int indent)\n-        throws SQLException {\n-        // Add all the collections\n-        List<Collection> collections = community.getCollections();\n-        Iterator<Item> result = null;\n-        for (Collection collection : collections) {\n-            for (int i = 0; i < indent; i++) {\n-                System.out.print(\" \");\n-            }\n-\n-            Iterator<Item> items = itemService.findByCollection(context, collection);\n-            result = addItemsToResult(result, items);\n-\n-        }\n-        // Add all the sub-communities\n-        List<Community> communities = community.getSubcommunities();\n-        for (Community subCommunity : communities) {\n-            for (int i = 0; i < indent; i++) {\n-                System.out.print(\" \");\n-            }\n-            Iterator<Item> items = buildFromCommunity(context, subCommunity, indent + 1);\n-            result = addItemsToResult(result, items);\n-        }\n-\n-        return result;\n-    }\n-\n-    private Iterator<Item> addItemsToResult(Iterator<Item> result, Iterator<Item> items) {\n-        if (result == null) {\n-            result = items;\n-        } else {\n-            result = Iterators.concat(result, items);\n-        }\n-\n-        return result;\n-    }\n-\n-    /**\n-     * Run the export\n-     *\n-     * @return the exported CSV lines\n-     */\n-    public DSpaceCSV export() {\n-        try {\n-            Context.Mode originalMode = context.getCurrentMode();\n-            context.setMode(Context.Mode.READ_ONLY);\n-\n-            // Process each item\n-            DSpaceCSV csv = new DSpaceCSV(exportAll);\n-            while (toExport.hasNext()) {\n-                Item item = toExport.next();\n-                csv.addItem(item);\n-                context.uncacheEntity(item);\n-            }\n-\n-            context.setMode(originalMode);\n-            // Return the results\n-            return csv;\n-        } catch (Exception e) {\n-            // Something went wrong...\n-            System.err.println(\"Error exporting to CSV:\");\n-            e.printStackTrace();\n-            return null;\n-        }\n-    }\n-\n-    /**\n-     * Print the help message\n-     *\n-     * @param options  The command line options the user gave\n-     * @param exitCode the system exit code to use\n-     */\n-    private static void printHelp(Options options, int exitCode) {\n-        // print the help message\n-        HelpFormatter myhelp = new HelpFormatter();\n-        myhelp.printHelp(\"MetadataExport\\n\", options);\n-        System.out.println(\"\\nfull export: metadataexport -f filename\");\n-        System.out.println(\"partial export: metadataexport -i handle -f filename\");\n-        System.exit(exitCode);\n-    }\n-\n-    /**\n-     * main method to run the metadata exporter\n-     *\n-     * @param argv the command line arguments given\n-     * @throws Exception if error occurs\n-     */\n-    public static void main(String[] argv) throws Exception {\n-        // Create an options object and populate it\n-        CommandLineParser parser = new PosixParser();\n-\n+    private Options constructOptions() {\n         Options options = new Options();\n \n         options.addOption(\"i\", \"id\", true, \"ID or handle of thing to export (item, collection, or community)\");\n+        options.getOption(\"i\").setType(String.class);\n         options.addOption(\"f\", \"file\", true, \"destination where you want file written\");\n+        options.getOption(\"f\").setType(OutputStream.class);\n+        options.getOption(\"f\").setRequired(true);\n         options.addOption(\"a\", \"all\", false,\n                           \"include all metadata fields that are not normally changed (e.g. provenance)\");\n+        options.getOption(\"a\").setType(boolean.class);\n         options.addOption(\"h\", \"help\", false, \"help\");\n+        options.getOption(\"h\").setType(boolean.class);\n \n-        CommandLine line = null;\n-\n-        try {\n-            line = parser.parse(options, argv);\n-        } catch (ParseException pe) {\n-            System.err.println(\"Error with commands.\");\n-            printHelp(options, 1);\n-            System.exit(0);\n-        }\n \n-        if (line.hasOption('h')) {\n-            printHelp(options, 0);\n-        }\n+        return options;\n+    }\n \n-        // Check a filename is given\n-        if (!line.hasOption('f')) {\n-            System.err.println(\"Required parameter -f missing!\");\n-            printHelp(options, 1);\n+    public void internalRun() throws Exception {\n+        if (help) {\n+            handler.logInfo(\"\\nfull export: metadata-export -f filename\");\n+            handler.logInfo(\"partial export: metadata-export -i handle -f filename\");\n+            printHelp();\n+            return;\n         }\n-        String filename = line.getOptionValue('f');\n \n-        // Create a context\n-        Context c = new Context(Context.Mode.READ_ONLY);\n-        c.turnOffAuthorisationSystem();\n-\n-        // The things we'll export\n-        Iterator<Item> toExport = null;\n-        MetadataExport exporter = null;\n+        DSpaceCSV dSpaceCSV = metadataDSpaceCsvExportService\n+            .handleExport(context, exportAllItems, exportAllMetadata, handle,\n+                          handler);\n+        handler.writeFilestream(context, filename, dSpaceCSV.getInputStream(), \"exportCSV\");\n+        context.restoreAuthSystemState();\n+        context.complete();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4NDU2OQ=="}, "originalCommit": {"oid": "5265ebd382097d221b9b9bfc2df708b5819f1fa0"}, "originalPosition": 262}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQyNDQ3OA==", "bodyText": "Should not internalRun() create and adjust the Context, use it, and close it?  Should not setup() simply collect information that internalRun() will use later?\nI must agree with @tdonohue here:  a Context should be created and closed within a single method, preferably within a single try block.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r431424478", "createdAt": "2020-05-27T20:32:42Z", "author": {"login": "mwoodiupui"}, "path": "dspace-api/src/main/java/org/dspace/app/bulkedit/MetadataExport.java", "diffHunk": "@@ -7,272 +7,101 @@\n  */\n package org.dspace.app.bulkedit;\n \n+import java.io.OutputStream;\n import java.sql.SQLException;\n-import java.util.ArrayList;\n-import java.util.Iterator;\n-import java.util.List;\n \n-import com.google.common.collect.Iterators;\n-import org.apache.commons.cli.CommandLine;\n-import org.apache.commons.cli.CommandLineParser;\n-import org.apache.commons.cli.HelpFormatter;\n import org.apache.commons.cli.Options;\n import org.apache.commons.cli.ParseException;\n-import org.apache.commons.cli.PosixParser;\n-import org.dspace.content.Collection;\n-import org.dspace.content.Community;\n-import org.dspace.content.DSpaceObject;\n-import org.dspace.content.Item;\n-import org.dspace.content.factory.ContentServiceFactory;\n-import org.dspace.content.service.ItemService;\n-import org.dspace.core.Constants;\n+import org.dspace.content.service.MetadataDSpaceCsvExportService;\n import org.dspace.core.Context;\n-import org.dspace.handle.factory.HandleServiceFactory;\n+import org.dspace.eperson.service.EPersonService;\n+import org.dspace.scripts.DSpaceRunnable;\n+import org.springframework.beans.factory.annotation.Autowired;\n \n /**\n  * Metadata exporter to allow the batch export of metadata into a file\n  *\n  * @author Stuart Lewis\n  */\n-public class MetadataExport {\n-    /**\n-     * The items to export\n-     */\n-    protected Iterator<Item> toExport;\n+public class MetadataExport extends DSpaceRunnable {\n \n-    protected ItemService itemService;\n+    private Context context = null;\n+    private boolean help = false;\n+    private String filename = null;\n+    private String handle = null;\n+    private boolean exportAllMetadata = false;\n+    private boolean exportAllItems = false;\n \n-    protected Context context;\n+    @Autowired\n+    private MetadataDSpaceCsvExportService metadataDSpaceCsvExportService;\n \n-    /**\n-     * Whether to export all metadata, or just normally edited metadata\n-     */\n-    protected boolean exportAll;\n+    @Autowired\n+    private EPersonService ePersonService;\n \n-    protected MetadataExport() {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n+    private MetadataExport() {\n+        this.options = constructOptions();\n     }\n \n-    /**\n-     * Set up a new metadata export\n-     *\n-     * @param c         The Context\n-     * @param toExport  The ItemIterator of items to export\n-     * @param exportAll whether to export all metadata or not (include handle, provenance etc)\n-     */\n-    public MetadataExport(Context c, Iterator<Item> toExport, boolean exportAll) {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n-\n-        // Store the export settings\n-        this.toExport = toExport;\n-        this.exportAll = exportAll;\n-        this.context = c;\n-    }\n-\n-    /**\n-     * Method to export a community (and sub-communities and collections)\n-     *\n-     * @param c         The Context\n-     * @param toExport  The Community to export\n-     * @param exportAll whether to export all metadata or not (include handle, provenance etc)\n-     */\n-    public MetadataExport(Context c, Community toExport, boolean exportAll) {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n-\n-        try {\n-            // Try to export the community\n-            this.toExport = buildFromCommunity(c, toExport, 0);\n-            this.exportAll = exportAll;\n-            this.context = c;\n-        } catch (SQLException sqle) {\n-            // Something went wrong...\n-            System.err.println(\"Error running exporter:\");\n-            sqle.printStackTrace(System.err);\n-            System.exit(1);\n-        }\n-    }\n-\n-    /**\n-     * Build an array list of item ids that are in a community (include sub-communities and collections)\n-     *\n-     * @param context   DSpace context\n-     * @param community The community to build from\n-     * @param indent    How many spaces to use when writing out the names of items added\n-     * @return The list of item ids\n-     * @throws SQLException if database error\n-     */\n-    protected Iterator<Item> buildFromCommunity(Context context, Community community, int indent)\n-        throws SQLException {\n-        // Add all the collections\n-        List<Collection> collections = community.getCollections();\n-        Iterator<Item> result = null;\n-        for (Collection collection : collections) {\n-            for (int i = 0; i < indent; i++) {\n-                System.out.print(\" \");\n-            }\n-\n-            Iterator<Item> items = itemService.findByCollection(context, collection);\n-            result = addItemsToResult(result, items);\n-\n-        }\n-        // Add all the sub-communities\n-        List<Community> communities = community.getSubcommunities();\n-        for (Community subCommunity : communities) {\n-            for (int i = 0; i < indent; i++) {\n-                System.out.print(\" \");\n-            }\n-            Iterator<Item> items = buildFromCommunity(context, subCommunity, indent + 1);\n-            result = addItemsToResult(result, items);\n-        }\n-\n-        return result;\n-    }\n-\n-    private Iterator<Item> addItemsToResult(Iterator<Item> result, Iterator<Item> items) {\n-        if (result == null) {\n-            result = items;\n-        } else {\n-            result = Iterators.concat(result, items);\n-        }\n-\n-        return result;\n-    }\n-\n-    /**\n-     * Run the export\n-     *\n-     * @return the exported CSV lines\n-     */\n-    public DSpaceCSV export() {\n-        try {\n-            Context.Mode originalMode = context.getCurrentMode();\n-            context.setMode(Context.Mode.READ_ONLY);\n-\n-            // Process each item\n-            DSpaceCSV csv = new DSpaceCSV(exportAll);\n-            while (toExport.hasNext()) {\n-                Item item = toExport.next();\n-                csv.addItem(item);\n-                context.uncacheEntity(item);\n-            }\n-\n-            context.setMode(originalMode);\n-            // Return the results\n-            return csv;\n-        } catch (Exception e) {\n-            // Something went wrong...\n-            System.err.println(\"Error exporting to CSV:\");\n-            e.printStackTrace();\n-            return null;\n-        }\n-    }\n-\n-    /**\n-     * Print the help message\n-     *\n-     * @param options  The command line options the user gave\n-     * @param exitCode the system exit code to use\n-     */\n-    private static void printHelp(Options options, int exitCode) {\n-        // print the help message\n-        HelpFormatter myhelp = new HelpFormatter();\n-        myhelp.printHelp(\"MetadataExport\\n\", options);\n-        System.out.println(\"\\nfull export: metadataexport -f filename\");\n-        System.out.println(\"partial export: metadataexport -i handle -f filename\");\n-        System.exit(exitCode);\n-    }\n-\n-    /**\n-     * main method to run the metadata exporter\n-     *\n-     * @param argv the command line arguments given\n-     * @throws Exception if error occurs\n-     */\n-    public static void main(String[] argv) throws Exception {\n-        // Create an options object and populate it\n-        CommandLineParser parser = new PosixParser();\n-\n+    private Options constructOptions() {\n         Options options = new Options();\n \n         options.addOption(\"i\", \"id\", true, \"ID or handle of thing to export (item, collection, or community)\");\n+        options.getOption(\"i\").setType(String.class);\n         options.addOption(\"f\", \"file\", true, \"destination where you want file written\");\n+        options.getOption(\"f\").setType(OutputStream.class);\n+        options.getOption(\"f\").setRequired(true);\n         options.addOption(\"a\", \"all\", false,\n                           \"include all metadata fields that are not normally changed (e.g. provenance)\");\n+        options.getOption(\"a\").setType(boolean.class);\n         options.addOption(\"h\", \"help\", false, \"help\");\n+        options.getOption(\"h\").setType(boolean.class);\n \n-        CommandLine line = null;\n-\n-        try {\n-            line = parser.parse(options, argv);\n-        } catch (ParseException pe) {\n-            System.err.println(\"Error with commands.\");\n-            printHelp(options, 1);\n-            System.exit(0);\n-        }\n \n-        if (line.hasOption('h')) {\n-            printHelp(options, 0);\n-        }\n+        return options;\n+    }\n \n-        // Check a filename is given\n-        if (!line.hasOption('f')) {\n-            System.err.println(\"Required parameter -f missing!\");\n-            printHelp(options, 1);\n+    public void internalRun() throws Exception {\n+        if (help) {\n+            handler.logInfo(\"\\nfull export: metadata-export -f filename\");\n+            handler.logInfo(\"partial export: metadata-export -i handle -f filename\");\n+            printHelp();\n+            return;\n         }\n-        String filename = line.getOptionValue('f');\n \n-        // Create a context\n-        Context c = new Context(Context.Mode.READ_ONLY);\n-        c.turnOffAuthorisationSystem();\n-\n-        // The things we'll export\n-        Iterator<Item> toExport = null;\n-        MetadataExport exporter = null;\n+        DSpaceCSV dSpaceCSV = metadataDSpaceCsvExportService\n+            .handleExport(context, exportAllItems, exportAllMetadata, handle,\n+                          handler);\n+        handler.writeFilestream(context, filename, dSpaceCSV.getInputStream(), \"exportCSV\");\n+        context.restoreAuthSystemState();\n+        context.complete();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4NDU2OQ=="}, "originalCommit": {"oid": "5265ebd382097d221b9b9bfc2df708b5819f1fa0"}, "originalPosition": 262}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzg0MzUyOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/app/bulkedit/MetadataExport.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjozODo0NVrOFlbHOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMjo1NjoxNVrOGbzybQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4NTg1MQ==", "bodyText": "We seem to be turning off Authorisation in this Context for a long time (which also could have unintended consequences). It's turned off here in the setup, but not restored again until internalRun() finishes up.  That means the context is not checking any authorizations during that entire time.\nOur best practice is to only use turnOffAuthorisationSystem() and restoreAuthSystemState() around small blocks of code. We should never leave authorization turned off between methods.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r374785851", "createdAt": "2020-02-04T16:38:45Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/app/bulkedit/MetadataExport.java", "diffHunk": "@@ -7,272 +7,101 @@\n  */\n package org.dspace.app.bulkedit;\n \n+import java.io.OutputStream;\n import java.sql.SQLException;\n-import java.util.ArrayList;\n-import java.util.Iterator;\n-import java.util.List;\n \n-import com.google.common.collect.Iterators;\n-import org.apache.commons.cli.CommandLine;\n-import org.apache.commons.cli.CommandLineParser;\n-import org.apache.commons.cli.HelpFormatter;\n import org.apache.commons.cli.Options;\n import org.apache.commons.cli.ParseException;\n-import org.apache.commons.cli.PosixParser;\n-import org.dspace.content.Collection;\n-import org.dspace.content.Community;\n-import org.dspace.content.DSpaceObject;\n-import org.dspace.content.Item;\n-import org.dspace.content.factory.ContentServiceFactory;\n-import org.dspace.content.service.ItemService;\n-import org.dspace.core.Constants;\n+import org.dspace.content.service.MetadataDSpaceCsvExportService;\n import org.dspace.core.Context;\n-import org.dspace.handle.factory.HandleServiceFactory;\n+import org.dspace.eperson.service.EPersonService;\n+import org.dspace.scripts.DSpaceRunnable;\n+import org.springframework.beans.factory.annotation.Autowired;\n \n /**\n  * Metadata exporter to allow the batch export of metadata into a file\n  *\n  * @author Stuart Lewis\n  */\n-public class MetadataExport {\n-    /**\n-     * The items to export\n-     */\n-    protected Iterator<Item> toExport;\n+public class MetadataExport extends DSpaceRunnable {\n \n-    protected ItemService itemService;\n+    private Context context = null;\n+    private boolean help = false;\n+    private String filename = null;\n+    private String handle = null;\n+    private boolean exportAllMetadata = false;\n+    private boolean exportAllItems = false;\n \n-    protected Context context;\n+    @Autowired\n+    private MetadataDSpaceCsvExportService metadataDSpaceCsvExportService;\n \n-    /**\n-     * Whether to export all metadata, or just normally edited metadata\n-     */\n-    protected boolean exportAll;\n+    @Autowired\n+    private EPersonService ePersonService;\n \n-    protected MetadataExport() {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n+    private MetadataExport() {\n+        this.options = constructOptions();\n     }\n \n-    /**\n-     * Set up a new metadata export\n-     *\n-     * @param c         The Context\n-     * @param toExport  The ItemIterator of items to export\n-     * @param exportAll whether to export all metadata or not (include handle, provenance etc)\n-     */\n-    public MetadataExport(Context c, Iterator<Item> toExport, boolean exportAll) {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n-\n-        // Store the export settings\n-        this.toExport = toExport;\n-        this.exportAll = exportAll;\n-        this.context = c;\n-    }\n-\n-    /**\n-     * Method to export a community (and sub-communities and collections)\n-     *\n-     * @param c         The Context\n-     * @param toExport  The Community to export\n-     * @param exportAll whether to export all metadata or not (include handle, provenance etc)\n-     */\n-    public MetadataExport(Context c, Community toExport, boolean exportAll) {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n-\n-        try {\n-            // Try to export the community\n-            this.toExport = buildFromCommunity(c, toExport, 0);\n-            this.exportAll = exportAll;\n-            this.context = c;\n-        } catch (SQLException sqle) {\n-            // Something went wrong...\n-            System.err.println(\"Error running exporter:\");\n-            sqle.printStackTrace(System.err);\n-            System.exit(1);\n-        }\n-    }\n-\n-    /**\n-     * Build an array list of item ids that are in a community (include sub-communities and collections)\n-     *\n-     * @param context   DSpace context\n-     * @param community The community to build from\n-     * @param indent    How many spaces to use when writing out the names of items added\n-     * @return The list of item ids\n-     * @throws SQLException if database error\n-     */\n-    protected Iterator<Item> buildFromCommunity(Context context, Community community, int indent)\n-        throws SQLException {\n-        // Add all the collections\n-        List<Collection> collections = community.getCollections();\n-        Iterator<Item> result = null;\n-        for (Collection collection : collections) {\n-            for (int i = 0; i < indent; i++) {\n-                System.out.print(\" \");\n-            }\n-\n-            Iterator<Item> items = itemService.findByCollection(context, collection);\n-            result = addItemsToResult(result, items);\n-\n-        }\n-        // Add all the sub-communities\n-        List<Community> communities = community.getSubcommunities();\n-        for (Community subCommunity : communities) {\n-            for (int i = 0; i < indent; i++) {\n-                System.out.print(\" \");\n-            }\n-            Iterator<Item> items = buildFromCommunity(context, subCommunity, indent + 1);\n-            result = addItemsToResult(result, items);\n-        }\n-\n-        return result;\n-    }\n-\n-    private Iterator<Item> addItemsToResult(Iterator<Item> result, Iterator<Item> items) {\n-        if (result == null) {\n-            result = items;\n-        } else {\n-            result = Iterators.concat(result, items);\n-        }\n-\n-        return result;\n-    }\n-\n-    /**\n-     * Run the export\n-     *\n-     * @return the exported CSV lines\n-     */\n-    public DSpaceCSV export() {\n-        try {\n-            Context.Mode originalMode = context.getCurrentMode();\n-            context.setMode(Context.Mode.READ_ONLY);\n-\n-            // Process each item\n-            DSpaceCSV csv = new DSpaceCSV(exportAll);\n-            while (toExport.hasNext()) {\n-                Item item = toExport.next();\n-                csv.addItem(item);\n-                context.uncacheEntity(item);\n-            }\n-\n-            context.setMode(originalMode);\n-            // Return the results\n-            return csv;\n-        } catch (Exception e) {\n-            // Something went wrong...\n-            System.err.println(\"Error exporting to CSV:\");\n-            e.printStackTrace();\n-            return null;\n-        }\n-    }\n-\n-    /**\n-     * Print the help message\n-     *\n-     * @param options  The command line options the user gave\n-     * @param exitCode the system exit code to use\n-     */\n-    private static void printHelp(Options options, int exitCode) {\n-        // print the help message\n-        HelpFormatter myhelp = new HelpFormatter();\n-        myhelp.printHelp(\"MetadataExport\\n\", options);\n-        System.out.println(\"\\nfull export: metadataexport -f filename\");\n-        System.out.println(\"partial export: metadataexport -i handle -f filename\");\n-        System.exit(exitCode);\n-    }\n-\n-    /**\n-     * main method to run the metadata exporter\n-     *\n-     * @param argv the command line arguments given\n-     * @throws Exception if error occurs\n-     */\n-    public static void main(String[] argv) throws Exception {\n-        // Create an options object and populate it\n-        CommandLineParser parser = new PosixParser();\n-\n+    private Options constructOptions() {\n         Options options = new Options();\n \n         options.addOption(\"i\", \"id\", true, \"ID or handle of thing to export (item, collection, or community)\");\n+        options.getOption(\"i\").setType(String.class);\n         options.addOption(\"f\", \"file\", true, \"destination where you want file written\");\n+        options.getOption(\"f\").setType(OutputStream.class);\n+        options.getOption(\"f\").setRequired(true);\n         options.addOption(\"a\", \"all\", false,\n                           \"include all metadata fields that are not normally changed (e.g. provenance)\");\n+        options.getOption(\"a\").setType(boolean.class);\n         options.addOption(\"h\", \"help\", false, \"help\");\n+        options.getOption(\"h\").setType(boolean.class);\n \n-        CommandLine line = null;\n-\n-        try {\n-            line = parser.parse(options, argv);\n-        } catch (ParseException pe) {\n-            System.err.println(\"Error with commands.\");\n-            printHelp(options, 1);\n-            System.exit(0);\n-        }\n \n-        if (line.hasOption('h')) {\n-            printHelp(options, 0);\n-        }\n+        return options;\n+    }\n \n-        // Check a filename is given\n-        if (!line.hasOption('f')) {\n-            System.err.println(\"Required parameter -f missing!\");\n-            printHelp(options, 1);\n+    public void internalRun() throws Exception {\n+        if (help) {\n+            handler.logInfo(\"\\nfull export: metadata-export -f filename\");\n+            handler.logInfo(\"partial export: metadata-export -i handle -f filename\");\n+            printHelp();\n+            return;\n         }\n-        String filename = line.getOptionValue('f');\n \n-        // Create a context\n-        Context c = new Context(Context.Mode.READ_ONLY);\n-        c.turnOffAuthorisationSystem();\n-\n-        // The things we'll export\n-        Iterator<Item> toExport = null;\n-        MetadataExport exporter = null;\n+        DSpaceCSV dSpaceCSV = metadataDSpaceCsvExportService\n+            .handleExport(context, exportAllItems, exportAllMetadata, handle,\n+                          handler);\n+        handler.writeFilestream(context, filename, dSpaceCSV.getInputStream(), \"exportCSV\");\n+        context.restoreAuthSystemState();\n+        context.complete();\n+    }\n \n-        // Export everything?\n-        boolean exportAll = line.hasOption('a');\n+    public void setup() throws ParseException {\n+        context = new Context();\n+        context.turnOffAuthorisationSystem();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5265ebd382097d221b9b9bfc2df708b5819f1fa0"}, "originalPosition": 269}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAzNzA0MQ==", "bodyText": "Again, please resolve prior feedback here.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r426037041", "createdAt": "2020-05-15T20:41:48Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/app/bulkedit/MetadataExport.java", "diffHunk": "@@ -7,272 +7,101 @@\n  */\n package org.dspace.app.bulkedit;\n \n+import java.io.OutputStream;\n import java.sql.SQLException;\n-import java.util.ArrayList;\n-import java.util.Iterator;\n-import java.util.List;\n \n-import com.google.common.collect.Iterators;\n-import org.apache.commons.cli.CommandLine;\n-import org.apache.commons.cli.CommandLineParser;\n-import org.apache.commons.cli.HelpFormatter;\n import org.apache.commons.cli.Options;\n import org.apache.commons.cli.ParseException;\n-import org.apache.commons.cli.PosixParser;\n-import org.dspace.content.Collection;\n-import org.dspace.content.Community;\n-import org.dspace.content.DSpaceObject;\n-import org.dspace.content.Item;\n-import org.dspace.content.factory.ContentServiceFactory;\n-import org.dspace.content.service.ItemService;\n-import org.dspace.core.Constants;\n+import org.dspace.content.service.MetadataDSpaceCsvExportService;\n import org.dspace.core.Context;\n-import org.dspace.handle.factory.HandleServiceFactory;\n+import org.dspace.eperson.service.EPersonService;\n+import org.dspace.scripts.DSpaceRunnable;\n+import org.springframework.beans.factory.annotation.Autowired;\n \n /**\n  * Metadata exporter to allow the batch export of metadata into a file\n  *\n  * @author Stuart Lewis\n  */\n-public class MetadataExport {\n-    /**\n-     * The items to export\n-     */\n-    protected Iterator<Item> toExport;\n+public class MetadataExport extends DSpaceRunnable {\n \n-    protected ItemService itemService;\n+    private Context context = null;\n+    private boolean help = false;\n+    private String filename = null;\n+    private String handle = null;\n+    private boolean exportAllMetadata = false;\n+    private boolean exportAllItems = false;\n \n-    protected Context context;\n+    @Autowired\n+    private MetadataDSpaceCsvExportService metadataDSpaceCsvExportService;\n \n-    /**\n-     * Whether to export all metadata, or just normally edited metadata\n-     */\n-    protected boolean exportAll;\n+    @Autowired\n+    private EPersonService ePersonService;\n \n-    protected MetadataExport() {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n+    private MetadataExport() {\n+        this.options = constructOptions();\n     }\n \n-    /**\n-     * Set up a new metadata export\n-     *\n-     * @param c         The Context\n-     * @param toExport  The ItemIterator of items to export\n-     * @param exportAll whether to export all metadata or not (include handle, provenance etc)\n-     */\n-    public MetadataExport(Context c, Iterator<Item> toExport, boolean exportAll) {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n-\n-        // Store the export settings\n-        this.toExport = toExport;\n-        this.exportAll = exportAll;\n-        this.context = c;\n-    }\n-\n-    /**\n-     * Method to export a community (and sub-communities and collections)\n-     *\n-     * @param c         The Context\n-     * @param toExport  The Community to export\n-     * @param exportAll whether to export all metadata or not (include handle, provenance etc)\n-     */\n-    public MetadataExport(Context c, Community toExport, boolean exportAll) {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n-\n-        try {\n-            // Try to export the community\n-            this.toExport = buildFromCommunity(c, toExport, 0);\n-            this.exportAll = exportAll;\n-            this.context = c;\n-        } catch (SQLException sqle) {\n-            // Something went wrong...\n-            System.err.println(\"Error running exporter:\");\n-            sqle.printStackTrace(System.err);\n-            System.exit(1);\n-        }\n-    }\n-\n-    /**\n-     * Build an array list of item ids that are in a community (include sub-communities and collections)\n-     *\n-     * @param context   DSpace context\n-     * @param community The community to build from\n-     * @param indent    How many spaces to use when writing out the names of items added\n-     * @return The list of item ids\n-     * @throws SQLException if database error\n-     */\n-    protected Iterator<Item> buildFromCommunity(Context context, Community community, int indent)\n-        throws SQLException {\n-        // Add all the collections\n-        List<Collection> collections = community.getCollections();\n-        Iterator<Item> result = null;\n-        for (Collection collection : collections) {\n-            for (int i = 0; i < indent; i++) {\n-                System.out.print(\" \");\n-            }\n-\n-            Iterator<Item> items = itemService.findByCollection(context, collection);\n-            result = addItemsToResult(result, items);\n-\n-        }\n-        // Add all the sub-communities\n-        List<Community> communities = community.getSubcommunities();\n-        for (Community subCommunity : communities) {\n-            for (int i = 0; i < indent; i++) {\n-                System.out.print(\" \");\n-            }\n-            Iterator<Item> items = buildFromCommunity(context, subCommunity, indent + 1);\n-            result = addItemsToResult(result, items);\n-        }\n-\n-        return result;\n-    }\n-\n-    private Iterator<Item> addItemsToResult(Iterator<Item> result, Iterator<Item> items) {\n-        if (result == null) {\n-            result = items;\n-        } else {\n-            result = Iterators.concat(result, items);\n-        }\n-\n-        return result;\n-    }\n-\n-    /**\n-     * Run the export\n-     *\n-     * @return the exported CSV lines\n-     */\n-    public DSpaceCSV export() {\n-        try {\n-            Context.Mode originalMode = context.getCurrentMode();\n-            context.setMode(Context.Mode.READ_ONLY);\n-\n-            // Process each item\n-            DSpaceCSV csv = new DSpaceCSV(exportAll);\n-            while (toExport.hasNext()) {\n-                Item item = toExport.next();\n-                csv.addItem(item);\n-                context.uncacheEntity(item);\n-            }\n-\n-            context.setMode(originalMode);\n-            // Return the results\n-            return csv;\n-        } catch (Exception e) {\n-            // Something went wrong...\n-            System.err.println(\"Error exporting to CSV:\");\n-            e.printStackTrace();\n-            return null;\n-        }\n-    }\n-\n-    /**\n-     * Print the help message\n-     *\n-     * @param options  The command line options the user gave\n-     * @param exitCode the system exit code to use\n-     */\n-    private static void printHelp(Options options, int exitCode) {\n-        // print the help message\n-        HelpFormatter myhelp = new HelpFormatter();\n-        myhelp.printHelp(\"MetadataExport\\n\", options);\n-        System.out.println(\"\\nfull export: metadataexport -f filename\");\n-        System.out.println(\"partial export: metadataexport -i handle -f filename\");\n-        System.exit(exitCode);\n-    }\n-\n-    /**\n-     * main method to run the metadata exporter\n-     *\n-     * @param argv the command line arguments given\n-     * @throws Exception if error occurs\n-     */\n-    public static void main(String[] argv) throws Exception {\n-        // Create an options object and populate it\n-        CommandLineParser parser = new PosixParser();\n-\n+    private Options constructOptions() {\n         Options options = new Options();\n \n         options.addOption(\"i\", \"id\", true, \"ID or handle of thing to export (item, collection, or community)\");\n+        options.getOption(\"i\").setType(String.class);\n         options.addOption(\"f\", \"file\", true, \"destination where you want file written\");\n+        options.getOption(\"f\").setType(OutputStream.class);\n+        options.getOption(\"f\").setRequired(true);\n         options.addOption(\"a\", \"all\", false,\n                           \"include all metadata fields that are not normally changed (e.g. provenance)\");\n+        options.getOption(\"a\").setType(boolean.class);\n         options.addOption(\"h\", \"help\", false, \"help\");\n+        options.getOption(\"h\").setType(boolean.class);\n \n-        CommandLine line = null;\n-\n-        try {\n-            line = parser.parse(options, argv);\n-        } catch (ParseException pe) {\n-            System.err.println(\"Error with commands.\");\n-            printHelp(options, 1);\n-            System.exit(0);\n-        }\n \n-        if (line.hasOption('h')) {\n-            printHelp(options, 0);\n-        }\n+        return options;\n+    }\n \n-        // Check a filename is given\n-        if (!line.hasOption('f')) {\n-            System.err.println(\"Required parameter -f missing!\");\n-            printHelp(options, 1);\n+    public void internalRun() throws Exception {\n+        if (help) {\n+            handler.logInfo(\"\\nfull export: metadata-export -f filename\");\n+            handler.logInfo(\"partial export: metadata-export -i handle -f filename\");\n+            printHelp();\n+            return;\n         }\n-        String filename = line.getOptionValue('f');\n \n-        // Create a context\n-        Context c = new Context(Context.Mode.READ_ONLY);\n-        c.turnOffAuthorisationSystem();\n-\n-        // The things we'll export\n-        Iterator<Item> toExport = null;\n-        MetadataExport exporter = null;\n+        DSpaceCSV dSpaceCSV = metadataDSpaceCsvExportService\n+            .handleExport(context, exportAllItems, exportAllMetadata, handle,\n+                          handler);\n+        handler.writeFilestream(context, filename, dSpaceCSV.getInputStream(), \"exportCSV\");\n+        context.restoreAuthSystemState();\n+        context.complete();\n+    }\n \n-        // Export everything?\n-        boolean exportAll = line.hasOption('a');\n+    public void setup() throws ParseException {\n+        context = new Context();\n+        context.turnOffAuthorisationSystem();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4NTg1MQ=="}, "originalCommit": {"oid": "5265ebd382097d221b9b9bfc2df708b5819f1fa0"}, "originalPosition": 269}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk2NDg1Mg==", "bodyText": "This is a port from the CLI script that initially does this on the following places:\n\nhttps://github.com/DSpace/DSpace/blob/master/dspace-api/src/main/java/org/dspace/app/bulkedit/MetadataExport.java#L226\nhttps://github.com/DSpace/DSpace/blob/master/dspace-api/src/main/java/org/dspace/app/bulkedit/MetadataExport.java#L275\n\nThe reason for this being that IF the script is executed from the CLI you don't want AuthorizeExceptions. This script can now not only be executed from the CLI but also from the REST api (the same class is used for both of these). The REST api has a user (which right now, which is certainly an admin as scripts & processes can only be executed by admins), but the CLI doesn't.\nSo a possible solution would be, is adding an a mandatory user parameter for the CLI, that way we can leave this out.\nWhat do you think ?", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r430964852", "createdAt": "2020-05-27T09:00:16Z", "author": {"login": "KevinVdV"}, "path": "dspace-api/src/main/java/org/dspace/app/bulkedit/MetadataExport.java", "diffHunk": "@@ -7,272 +7,101 @@\n  */\n package org.dspace.app.bulkedit;\n \n+import java.io.OutputStream;\n import java.sql.SQLException;\n-import java.util.ArrayList;\n-import java.util.Iterator;\n-import java.util.List;\n \n-import com.google.common.collect.Iterators;\n-import org.apache.commons.cli.CommandLine;\n-import org.apache.commons.cli.CommandLineParser;\n-import org.apache.commons.cli.HelpFormatter;\n import org.apache.commons.cli.Options;\n import org.apache.commons.cli.ParseException;\n-import org.apache.commons.cli.PosixParser;\n-import org.dspace.content.Collection;\n-import org.dspace.content.Community;\n-import org.dspace.content.DSpaceObject;\n-import org.dspace.content.Item;\n-import org.dspace.content.factory.ContentServiceFactory;\n-import org.dspace.content.service.ItemService;\n-import org.dspace.core.Constants;\n+import org.dspace.content.service.MetadataDSpaceCsvExportService;\n import org.dspace.core.Context;\n-import org.dspace.handle.factory.HandleServiceFactory;\n+import org.dspace.eperson.service.EPersonService;\n+import org.dspace.scripts.DSpaceRunnable;\n+import org.springframework.beans.factory.annotation.Autowired;\n \n /**\n  * Metadata exporter to allow the batch export of metadata into a file\n  *\n  * @author Stuart Lewis\n  */\n-public class MetadataExport {\n-    /**\n-     * The items to export\n-     */\n-    protected Iterator<Item> toExport;\n+public class MetadataExport extends DSpaceRunnable {\n \n-    protected ItemService itemService;\n+    private Context context = null;\n+    private boolean help = false;\n+    private String filename = null;\n+    private String handle = null;\n+    private boolean exportAllMetadata = false;\n+    private boolean exportAllItems = false;\n \n-    protected Context context;\n+    @Autowired\n+    private MetadataDSpaceCsvExportService metadataDSpaceCsvExportService;\n \n-    /**\n-     * Whether to export all metadata, or just normally edited metadata\n-     */\n-    protected boolean exportAll;\n+    @Autowired\n+    private EPersonService ePersonService;\n \n-    protected MetadataExport() {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n+    private MetadataExport() {\n+        this.options = constructOptions();\n     }\n \n-    /**\n-     * Set up a new metadata export\n-     *\n-     * @param c         The Context\n-     * @param toExport  The ItemIterator of items to export\n-     * @param exportAll whether to export all metadata or not (include handle, provenance etc)\n-     */\n-    public MetadataExport(Context c, Iterator<Item> toExport, boolean exportAll) {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n-\n-        // Store the export settings\n-        this.toExport = toExport;\n-        this.exportAll = exportAll;\n-        this.context = c;\n-    }\n-\n-    /**\n-     * Method to export a community (and sub-communities and collections)\n-     *\n-     * @param c         The Context\n-     * @param toExport  The Community to export\n-     * @param exportAll whether to export all metadata or not (include handle, provenance etc)\n-     */\n-    public MetadataExport(Context c, Community toExport, boolean exportAll) {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n-\n-        try {\n-            // Try to export the community\n-            this.toExport = buildFromCommunity(c, toExport, 0);\n-            this.exportAll = exportAll;\n-            this.context = c;\n-        } catch (SQLException sqle) {\n-            // Something went wrong...\n-            System.err.println(\"Error running exporter:\");\n-            sqle.printStackTrace(System.err);\n-            System.exit(1);\n-        }\n-    }\n-\n-    /**\n-     * Build an array list of item ids that are in a community (include sub-communities and collections)\n-     *\n-     * @param context   DSpace context\n-     * @param community The community to build from\n-     * @param indent    How many spaces to use when writing out the names of items added\n-     * @return The list of item ids\n-     * @throws SQLException if database error\n-     */\n-    protected Iterator<Item> buildFromCommunity(Context context, Community community, int indent)\n-        throws SQLException {\n-        // Add all the collections\n-        List<Collection> collections = community.getCollections();\n-        Iterator<Item> result = null;\n-        for (Collection collection : collections) {\n-            for (int i = 0; i < indent; i++) {\n-                System.out.print(\" \");\n-            }\n-\n-            Iterator<Item> items = itemService.findByCollection(context, collection);\n-            result = addItemsToResult(result, items);\n-\n-        }\n-        // Add all the sub-communities\n-        List<Community> communities = community.getSubcommunities();\n-        for (Community subCommunity : communities) {\n-            for (int i = 0; i < indent; i++) {\n-                System.out.print(\" \");\n-            }\n-            Iterator<Item> items = buildFromCommunity(context, subCommunity, indent + 1);\n-            result = addItemsToResult(result, items);\n-        }\n-\n-        return result;\n-    }\n-\n-    private Iterator<Item> addItemsToResult(Iterator<Item> result, Iterator<Item> items) {\n-        if (result == null) {\n-            result = items;\n-        } else {\n-            result = Iterators.concat(result, items);\n-        }\n-\n-        return result;\n-    }\n-\n-    /**\n-     * Run the export\n-     *\n-     * @return the exported CSV lines\n-     */\n-    public DSpaceCSV export() {\n-        try {\n-            Context.Mode originalMode = context.getCurrentMode();\n-            context.setMode(Context.Mode.READ_ONLY);\n-\n-            // Process each item\n-            DSpaceCSV csv = new DSpaceCSV(exportAll);\n-            while (toExport.hasNext()) {\n-                Item item = toExport.next();\n-                csv.addItem(item);\n-                context.uncacheEntity(item);\n-            }\n-\n-            context.setMode(originalMode);\n-            // Return the results\n-            return csv;\n-        } catch (Exception e) {\n-            // Something went wrong...\n-            System.err.println(\"Error exporting to CSV:\");\n-            e.printStackTrace();\n-            return null;\n-        }\n-    }\n-\n-    /**\n-     * Print the help message\n-     *\n-     * @param options  The command line options the user gave\n-     * @param exitCode the system exit code to use\n-     */\n-    private static void printHelp(Options options, int exitCode) {\n-        // print the help message\n-        HelpFormatter myhelp = new HelpFormatter();\n-        myhelp.printHelp(\"MetadataExport\\n\", options);\n-        System.out.println(\"\\nfull export: metadataexport -f filename\");\n-        System.out.println(\"partial export: metadataexport -i handle -f filename\");\n-        System.exit(exitCode);\n-    }\n-\n-    /**\n-     * main method to run the metadata exporter\n-     *\n-     * @param argv the command line arguments given\n-     * @throws Exception if error occurs\n-     */\n-    public static void main(String[] argv) throws Exception {\n-        // Create an options object and populate it\n-        CommandLineParser parser = new PosixParser();\n-\n+    private Options constructOptions() {\n         Options options = new Options();\n \n         options.addOption(\"i\", \"id\", true, \"ID or handle of thing to export (item, collection, or community)\");\n+        options.getOption(\"i\").setType(String.class);\n         options.addOption(\"f\", \"file\", true, \"destination where you want file written\");\n+        options.getOption(\"f\").setType(OutputStream.class);\n+        options.getOption(\"f\").setRequired(true);\n         options.addOption(\"a\", \"all\", false,\n                           \"include all metadata fields that are not normally changed (e.g. provenance)\");\n+        options.getOption(\"a\").setType(boolean.class);\n         options.addOption(\"h\", \"help\", false, \"help\");\n+        options.getOption(\"h\").setType(boolean.class);\n \n-        CommandLine line = null;\n-\n-        try {\n-            line = parser.parse(options, argv);\n-        } catch (ParseException pe) {\n-            System.err.println(\"Error with commands.\");\n-            printHelp(options, 1);\n-            System.exit(0);\n-        }\n \n-        if (line.hasOption('h')) {\n-            printHelp(options, 0);\n-        }\n+        return options;\n+    }\n \n-        // Check a filename is given\n-        if (!line.hasOption('f')) {\n-            System.err.println(\"Required parameter -f missing!\");\n-            printHelp(options, 1);\n+    public void internalRun() throws Exception {\n+        if (help) {\n+            handler.logInfo(\"\\nfull export: metadata-export -f filename\");\n+            handler.logInfo(\"partial export: metadata-export -i handle -f filename\");\n+            printHelp();\n+            return;\n         }\n-        String filename = line.getOptionValue('f');\n \n-        // Create a context\n-        Context c = new Context(Context.Mode.READ_ONLY);\n-        c.turnOffAuthorisationSystem();\n-\n-        // The things we'll export\n-        Iterator<Item> toExport = null;\n-        MetadataExport exporter = null;\n+        DSpaceCSV dSpaceCSV = metadataDSpaceCsvExportService\n+            .handleExport(context, exportAllItems, exportAllMetadata, handle,\n+                          handler);\n+        handler.writeFilestream(context, filename, dSpaceCSV.getInputStream(), \"exportCSV\");\n+        context.restoreAuthSystemState();\n+        context.complete();\n+    }\n \n-        // Export everything?\n-        boolean exportAll = line.hasOption('a');\n+    public void setup() throws ParseException {\n+        context = new Context();\n+        context.turnOffAuthorisationSystem();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4NTg1MQ=="}, "originalCommit": {"oid": "5265ebd382097d221b9b9bfc2df708b5819f1fa0"}, "originalPosition": 269}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIyNDA0OA==", "bodyText": "@KevinVdV : Again, you've accidentally introduced a flaw here.  As you linked to previously, it's perfectly OK to turn off/on authorizations within the same method.  However, now that this is across separate methods, it will require finer tuning.  You may need to turn it off & on & off & on again only when needed within specific methods.  Or, maybe there's a way to turn it off in the calling code in order to surround two other internal method calls...then turn it back on after those calls.\nBut, again, this PR's current behavior is flawed as we don't allow for turning off authorizations across methods...that can have unintended consequences and accidentally bypass AuthorizeExceptions that we expect to occur.\nI'm OK with us requiring a user parameter on CLI if that helps us get around this problem.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r431224048", "createdAt": "2020-05-27T15:20:01Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/app/bulkedit/MetadataExport.java", "diffHunk": "@@ -7,272 +7,101 @@\n  */\n package org.dspace.app.bulkedit;\n \n+import java.io.OutputStream;\n import java.sql.SQLException;\n-import java.util.ArrayList;\n-import java.util.Iterator;\n-import java.util.List;\n \n-import com.google.common.collect.Iterators;\n-import org.apache.commons.cli.CommandLine;\n-import org.apache.commons.cli.CommandLineParser;\n-import org.apache.commons.cli.HelpFormatter;\n import org.apache.commons.cli.Options;\n import org.apache.commons.cli.ParseException;\n-import org.apache.commons.cli.PosixParser;\n-import org.dspace.content.Collection;\n-import org.dspace.content.Community;\n-import org.dspace.content.DSpaceObject;\n-import org.dspace.content.Item;\n-import org.dspace.content.factory.ContentServiceFactory;\n-import org.dspace.content.service.ItemService;\n-import org.dspace.core.Constants;\n+import org.dspace.content.service.MetadataDSpaceCsvExportService;\n import org.dspace.core.Context;\n-import org.dspace.handle.factory.HandleServiceFactory;\n+import org.dspace.eperson.service.EPersonService;\n+import org.dspace.scripts.DSpaceRunnable;\n+import org.springframework.beans.factory.annotation.Autowired;\n \n /**\n  * Metadata exporter to allow the batch export of metadata into a file\n  *\n  * @author Stuart Lewis\n  */\n-public class MetadataExport {\n-    /**\n-     * The items to export\n-     */\n-    protected Iterator<Item> toExport;\n+public class MetadataExport extends DSpaceRunnable {\n \n-    protected ItemService itemService;\n+    private Context context = null;\n+    private boolean help = false;\n+    private String filename = null;\n+    private String handle = null;\n+    private boolean exportAllMetadata = false;\n+    private boolean exportAllItems = false;\n \n-    protected Context context;\n+    @Autowired\n+    private MetadataDSpaceCsvExportService metadataDSpaceCsvExportService;\n \n-    /**\n-     * Whether to export all metadata, or just normally edited metadata\n-     */\n-    protected boolean exportAll;\n+    @Autowired\n+    private EPersonService ePersonService;\n \n-    protected MetadataExport() {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n+    private MetadataExport() {\n+        this.options = constructOptions();\n     }\n \n-    /**\n-     * Set up a new metadata export\n-     *\n-     * @param c         The Context\n-     * @param toExport  The ItemIterator of items to export\n-     * @param exportAll whether to export all metadata or not (include handle, provenance etc)\n-     */\n-    public MetadataExport(Context c, Iterator<Item> toExport, boolean exportAll) {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n-\n-        // Store the export settings\n-        this.toExport = toExport;\n-        this.exportAll = exportAll;\n-        this.context = c;\n-    }\n-\n-    /**\n-     * Method to export a community (and sub-communities and collections)\n-     *\n-     * @param c         The Context\n-     * @param toExport  The Community to export\n-     * @param exportAll whether to export all metadata or not (include handle, provenance etc)\n-     */\n-    public MetadataExport(Context c, Community toExport, boolean exportAll) {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n-\n-        try {\n-            // Try to export the community\n-            this.toExport = buildFromCommunity(c, toExport, 0);\n-            this.exportAll = exportAll;\n-            this.context = c;\n-        } catch (SQLException sqle) {\n-            // Something went wrong...\n-            System.err.println(\"Error running exporter:\");\n-            sqle.printStackTrace(System.err);\n-            System.exit(1);\n-        }\n-    }\n-\n-    /**\n-     * Build an array list of item ids that are in a community (include sub-communities and collections)\n-     *\n-     * @param context   DSpace context\n-     * @param community The community to build from\n-     * @param indent    How many spaces to use when writing out the names of items added\n-     * @return The list of item ids\n-     * @throws SQLException if database error\n-     */\n-    protected Iterator<Item> buildFromCommunity(Context context, Community community, int indent)\n-        throws SQLException {\n-        // Add all the collections\n-        List<Collection> collections = community.getCollections();\n-        Iterator<Item> result = null;\n-        for (Collection collection : collections) {\n-            for (int i = 0; i < indent; i++) {\n-                System.out.print(\" \");\n-            }\n-\n-            Iterator<Item> items = itemService.findByCollection(context, collection);\n-            result = addItemsToResult(result, items);\n-\n-        }\n-        // Add all the sub-communities\n-        List<Community> communities = community.getSubcommunities();\n-        for (Community subCommunity : communities) {\n-            for (int i = 0; i < indent; i++) {\n-                System.out.print(\" \");\n-            }\n-            Iterator<Item> items = buildFromCommunity(context, subCommunity, indent + 1);\n-            result = addItemsToResult(result, items);\n-        }\n-\n-        return result;\n-    }\n-\n-    private Iterator<Item> addItemsToResult(Iterator<Item> result, Iterator<Item> items) {\n-        if (result == null) {\n-            result = items;\n-        } else {\n-            result = Iterators.concat(result, items);\n-        }\n-\n-        return result;\n-    }\n-\n-    /**\n-     * Run the export\n-     *\n-     * @return the exported CSV lines\n-     */\n-    public DSpaceCSV export() {\n-        try {\n-            Context.Mode originalMode = context.getCurrentMode();\n-            context.setMode(Context.Mode.READ_ONLY);\n-\n-            // Process each item\n-            DSpaceCSV csv = new DSpaceCSV(exportAll);\n-            while (toExport.hasNext()) {\n-                Item item = toExport.next();\n-                csv.addItem(item);\n-                context.uncacheEntity(item);\n-            }\n-\n-            context.setMode(originalMode);\n-            // Return the results\n-            return csv;\n-        } catch (Exception e) {\n-            // Something went wrong...\n-            System.err.println(\"Error exporting to CSV:\");\n-            e.printStackTrace();\n-            return null;\n-        }\n-    }\n-\n-    /**\n-     * Print the help message\n-     *\n-     * @param options  The command line options the user gave\n-     * @param exitCode the system exit code to use\n-     */\n-    private static void printHelp(Options options, int exitCode) {\n-        // print the help message\n-        HelpFormatter myhelp = new HelpFormatter();\n-        myhelp.printHelp(\"MetadataExport\\n\", options);\n-        System.out.println(\"\\nfull export: metadataexport -f filename\");\n-        System.out.println(\"partial export: metadataexport -i handle -f filename\");\n-        System.exit(exitCode);\n-    }\n-\n-    /**\n-     * main method to run the metadata exporter\n-     *\n-     * @param argv the command line arguments given\n-     * @throws Exception if error occurs\n-     */\n-    public static void main(String[] argv) throws Exception {\n-        // Create an options object and populate it\n-        CommandLineParser parser = new PosixParser();\n-\n+    private Options constructOptions() {\n         Options options = new Options();\n \n         options.addOption(\"i\", \"id\", true, \"ID or handle of thing to export (item, collection, or community)\");\n+        options.getOption(\"i\").setType(String.class);\n         options.addOption(\"f\", \"file\", true, \"destination where you want file written\");\n+        options.getOption(\"f\").setType(OutputStream.class);\n+        options.getOption(\"f\").setRequired(true);\n         options.addOption(\"a\", \"all\", false,\n                           \"include all metadata fields that are not normally changed (e.g. provenance)\");\n+        options.getOption(\"a\").setType(boolean.class);\n         options.addOption(\"h\", \"help\", false, \"help\");\n+        options.getOption(\"h\").setType(boolean.class);\n \n-        CommandLine line = null;\n-\n-        try {\n-            line = parser.parse(options, argv);\n-        } catch (ParseException pe) {\n-            System.err.println(\"Error with commands.\");\n-            printHelp(options, 1);\n-            System.exit(0);\n-        }\n \n-        if (line.hasOption('h')) {\n-            printHelp(options, 0);\n-        }\n+        return options;\n+    }\n \n-        // Check a filename is given\n-        if (!line.hasOption('f')) {\n-            System.err.println(\"Required parameter -f missing!\");\n-            printHelp(options, 1);\n+    public void internalRun() throws Exception {\n+        if (help) {\n+            handler.logInfo(\"\\nfull export: metadata-export -f filename\");\n+            handler.logInfo(\"partial export: metadata-export -i handle -f filename\");\n+            printHelp();\n+            return;\n         }\n-        String filename = line.getOptionValue('f');\n \n-        // Create a context\n-        Context c = new Context(Context.Mode.READ_ONLY);\n-        c.turnOffAuthorisationSystem();\n-\n-        // The things we'll export\n-        Iterator<Item> toExport = null;\n-        MetadataExport exporter = null;\n+        DSpaceCSV dSpaceCSV = metadataDSpaceCsvExportService\n+            .handleExport(context, exportAllItems, exportAllMetadata, handle,\n+                          handler);\n+        handler.writeFilestream(context, filename, dSpaceCSV.getInputStream(), \"exportCSV\");\n+        context.restoreAuthSystemState();\n+        context.complete();\n+    }\n \n-        // Export everything?\n-        boolean exportAll = line.hasOption('a');\n+    public void setup() throws ParseException {\n+        context = new Context();\n+        context.turnOffAuthorisationSystem();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4NTg1MQ=="}, "originalCommit": {"oid": "5265ebd382097d221b9b9bfc2df708b5819f1fa0"}, "originalPosition": 269}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQyODkwNw==", "bodyText": "As above, I'd suggest moving turnOffAuthorizationSystem() and the subsequent setCurrentUser() from setup() to internalRun().  I don't see why setup() needs a Context at all, so I say that it shouldn't have one.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r431428907", "createdAt": "2020-05-27T20:41:09Z", "author": {"login": "mwoodiupui"}, "path": "dspace-api/src/main/java/org/dspace/app/bulkedit/MetadataExport.java", "diffHunk": "@@ -7,272 +7,101 @@\n  */\n package org.dspace.app.bulkedit;\n \n+import java.io.OutputStream;\n import java.sql.SQLException;\n-import java.util.ArrayList;\n-import java.util.Iterator;\n-import java.util.List;\n \n-import com.google.common.collect.Iterators;\n-import org.apache.commons.cli.CommandLine;\n-import org.apache.commons.cli.CommandLineParser;\n-import org.apache.commons.cli.HelpFormatter;\n import org.apache.commons.cli.Options;\n import org.apache.commons.cli.ParseException;\n-import org.apache.commons.cli.PosixParser;\n-import org.dspace.content.Collection;\n-import org.dspace.content.Community;\n-import org.dspace.content.DSpaceObject;\n-import org.dspace.content.Item;\n-import org.dspace.content.factory.ContentServiceFactory;\n-import org.dspace.content.service.ItemService;\n-import org.dspace.core.Constants;\n+import org.dspace.content.service.MetadataDSpaceCsvExportService;\n import org.dspace.core.Context;\n-import org.dspace.handle.factory.HandleServiceFactory;\n+import org.dspace.eperson.service.EPersonService;\n+import org.dspace.scripts.DSpaceRunnable;\n+import org.springframework.beans.factory.annotation.Autowired;\n \n /**\n  * Metadata exporter to allow the batch export of metadata into a file\n  *\n  * @author Stuart Lewis\n  */\n-public class MetadataExport {\n-    /**\n-     * The items to export\n-     */\n-    protected Iterator<Item> toExport;\n+public class MetadataExport extends DSpaceRunnable {\n \n-    protected ItemService itemService;\n+    private Context context = null;\n+    private boolean help = false;\n+    private String filename = null;\n+    private String handle = null;\n+    private boolean exportAllMetadata = false;\n+    private boolean exportAllItems = false;\n \n-    protected Context context;\n+    @Autowired\n+    private MetadataDSpaceCsvExportService metadataDSpaceCsvExportService;\n \n-    /**\n-     * Whether to export all metadata, or just normally edited metadata\n-     */\n-    protected boolean exportAll;\n+    @Autowired\n+    private EPersonService ePersonService;\n \n-    protected MetadataExport() {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n+    private MetadataExport() {\n+        this.options = constructOptions();\n     }\n \n-    /**\n-     * Set up a new metadata export\n-     *\n-     * @param c         The Context\n-     * @param toExport  The ItemIterator of items to export\n-     * @param exportAll whether to export all metadata or not (include handle, provenance etc)\n-     */\n-    public MetadataExport(Context c, Iterator<Item> toExport, boolean exportAll) {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n-\n-        // Store the export settings\n-        this.toExport = toExport;\n-        this.exportAll = exportAll;\n-        this.context = c;\n-    }\n-\n-    /**\n-     * Method to export a community (and sub-communities and collections)\n-     *\n-     * @param c         The Context\n-     * @param toExport  The Community to export\n-     * @param exportAll whether to export all metadata or not (include handle, provenance etc)\n-     */\n-    public MetadataExport(Context c, Community toExport, boolean exportAll) {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n-\n-        try {\n-            // Try to export the community\n-            this.toExport = buildFromCommunity(c, toExport, 0);\n-            this.exportAll = exportAll;\n-            this.context = c;\n-        } catch (SQLException sqle) {\n-            // Something went wrong...\n-            System.err.println(\"Error running exporter:\");\n-            sqle.printStackTrace(System.err);\n-            System.exit(1);\n-        }\n-    }\n-\n-    /**\n-     * Build an array list of item ids that are in a community (include sub-communities and collections)\n-     *\n-     * @param context   DSpace context\n-     * @param community The community to build from\n-     * @param indent    How many spaces to use when writing out the names of items added\n-     * @return The list of item ids\n-     * @throws SQLException if database error\n-     */\n-    protected Iterator<Item> buildFromCommunity(Context context, Community community, int indent)\n-        throws SQLException {\n-        // Add all the collections\n-        List<Collection> collections = community.getCollections();\n-        Iterator<Item> result = null;\n-        for (Collection collection : collections) {\n-            for (int i = 0; i < indent; i++) {\n-                System.out.print(\" \");\n-            }\n-\n-            Iterator<Item> items = itemService.findByCollection(context, collection);\n-            result = addItemsToResult(result, items);\n-\n-        }\n-        // Add all the sub-communities\n-        List<Community> communities = community.getSubcommunities();\n-        for (Community subCommunity : communities) {\n-            for (int i = 0; i < indent; i++) {\n-                System.out.print(\" \");\n-            }\n-            Iterator<Item> items = buildFromCommunity(context, subCommunity, indent + 1);\n-            result = addItemsToResult(result, items);\n-        }\n-\n-        return result;\n-    }\n-\n-    private Iterator<Item> addItemsToResult(Iterator<Item> result, Iterator<Item> items) {\n-        if (result == null) {\n-            result = items;\n-        } else {\n-            result = Iterators.concat(result, items);\n-        }\n-\n-        return result;\n-    }\n-\n-    /**\n-     * Run the export\n-     *\n-     * @return the exported CSV lines\n-     */\n-    public DSpaceCSV export() {\n-        try {\n-            Context.Mode originalMode = context.getCurrentMode();\n-            context.setMode(Context.Mode.READ_ONLY);\n-\n-            // Process each item\n-            DSpaceCSV csv = new DSpaceCSV(exportAll);\n-            while (toExport.hasNext()) {\n-                Item item = toExport.next();\n-                csv.addItem(item);\n-                context.uncacheEntity(item);\n-            }\n-\n-            context.setMode(originalMode);\n-            // Return the results\n-            return csv;\n-        } catch (Exception e) {\n-            // Something went wrong...\n-            System.err.println(\"Error exporting to CSV:\");\n-            e.printStackTrace();\n-            return null;\n-        }\n-    }\n-\n-    /**\n-     * Print the help message\n-     *\n-     * @param options  The command line options the user gave\n-     * @param exitCode the system exit code to use\n-     */\n-    private static void printHelp(Options options, int exitCode) {\n-        // print the help message\n-        HelpFormatter myhelp = new HelpFormatter();\n-        myhelp.printHelp(\"MetadataExport\\n\", options);\n-        System.out.println(\"\\nfull export: metadataexport -f filename\");\n-        System.out.println(\"partial export: metadataexport -i handle -f filename\");\n-        System.exit(exitCode);\n-    }\n-\n-    /**\n-     * main method to run the metadata exporter\n-     *\n-     * @param argv the command line arguments given\n-     * @throws Exception if error occurs\n-     */\n-    public static void main(String[] argv) throws Exception {\n-        // Create an options object and populate it\n-        CommandLineParser parser = new PosixParser();\n-\n+    private Options constructOptions() {\n         Options options = new Options();\n \n         options.addOption(\"i\", \"id\", true, \"ID or handle of thing to export (item, collection, or community)\");\n+        options.getOption(\"i\").setType(String.class);\n         options.addOption(\"f\", \"file\", true, \"destination where you want file written\");\n+        options.getOption(\"f\").setType(OutputStream.class);\n+        options.getOption(\"f\").setRequired(true);\n         options.addOption(\"a\", \"all\", false,\n                           \"include all metadata fields that are not normally changed (e.g. provenance)\");\n+        options.getOption(\"a\").setType(boolean.class);\n         options.addOption(\"h\", \"help\", false, \"help\");\n+        options.getOption(\"h\").setType(boolean.class);\n \n-        CommandLine line = null;\n-\n-        try {\n-            line = parser.parse(options, argv);\n-        } catch (ParseException pe) {\n-            System.err.println(\"Error with commands.\");\n-            printHelp(options, 1);\n-            System.exit(0);\n-        }\n \n-        if (line.hasOption('h')) {\n-            printHelp(options, 0);\n-        }\n+        return options;\n+    }\n \n-        // Check a filename is given\n-        if (!line.hasOption('f')) {\n-            System.err.println(\"Required parameter -f missing!\");\n-            printHelp(options, 1);\n+    public void internalRun() throws Exception {\n+        if (help) {\n+            handler.logInfo(\"\\nfull export: metadata-export -f filename\");\n+            handler.logInfo(\"partial export: metadata-export -i handle -f filename\");\n+            printHelp();\n+            return;\n         }\n-        String filename = line.getOptionValue('f');\n \n-        // Create a context\n-        Context c = new Context(Context.Mode.READ_ONLY);\n-        c.turnOffAuthorisationSystem();\n-\n-        // The things we'll export\n-        Iterator<Item> toExport = null;\n-        MetadataExport exporter = null;\n+        DSpaceCSV dSpaceCSV = metadataDSpaceCsvExportService\n+            .handleExport(context, exportAllItems, exportAllMetadata, handle,\n+                          handler);\n+        handler.writeFilestream(context, filename, dSpaceCSV.getInputStream(), \"exportCSV\");\n+        context.restoreAuthSystemState();\n+        context.complete();\n+    }\n \n-        // Export everything?\n-        boolean exportAll = line.hasOption('a');\n+    public void setup() throws ParseException {\n+        context = new Context();\n+        context.turnOffAuthorisationSystem();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4NTg1MQ=="}, "originalCommit": {"oid": "5265ebd382097d221b9b9bfc2df708b5819f1fa0"}, "originalPosition": 269}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgxMzIyOQ==", "bodyText": "Agreed, we will make adjustments to keep the context object limited to methods & remove it as a variable in the class.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r431813229", "createdAt": "2020-05-28T12:56:15Z", "author": {"login": "KevinVdV"}, "path": "dspace-api/src/main/java/org/dspace/app/bulkedit/MetadataExport.java", "diffHunk": "@@ -7,272 +7,101 @@\n  */\n package org.dspace.app.bulkedit;\n \n+import java.io.OutputStream;\n import java.sql.SQLException;\n-import java.util.ArrayList;\n-import java.util.Iterator;\n-import java.util.List;\n \n-import com.google.common.collect.Iterators;\n-import org.apache.commons.cli.CommandLine;\n-import org.apache.commons.cli.CommandLineParser;\n-import org.apache.commons.cli.HelpFormatter;\n import org.apache.commons.cli.Options;\n import org.apache.commons.cli.ParseException;\n-import org.apache.commons.cli.PosixParser;\n-import org.dspace.content.Collection;\n-import org.dspace.content.Community;\n-import org.dspace.content.DSpaceObject;\n-import org.dspace.content.Item;\n-import org.dspace.content.factory.ContentServiceFactory;\n-import org.dspace.content.service.ItemService;\n-import org.dspace.core.Constants;\n+import org.dspace.content.service.MetadataDSpaceCsvExportService;\n import org.dspace.core.Context;\n-import org.dspace.handle.factory.HandleServiceFactory;\n+import org.dspace.eperson.service.EPersonService;\n+import org.dspace.scripts.DSpaceRunnable;\n+import org.springframework.beans.factory.annotation.Autowired;\n \n /**\n  * Metadata exporter to allow the batch export of metadata into a file\n  *\n  * @author Stuart Lewis\n  */\n-public class MetadataExport {\n-    /**\n-     * The items to export\n-     */\n-    protected Iterator<Item> toExport;\n+public class MetadataExport extends DSpaceRunnable {\n \n-    protected ItemService itemService;\n+    private Context context = null;\n+    private boolean help = false;\n+    private String filename = null;\n+    private String handle = null;\n+    private boolean exportAllMetadata = false;\n+    private boolean exportAllItems = false;\n \n-    protected Context context;\n+    @Autowired\n+    private MetadataDSpaceCsvExportService metadataDSpaceCsvExportService;\n \n-    /**\n-     * Whether to export all metadata, or just normally edited metadata\n-     */\n-    protected boolean exportAll;\n+    @Autowired\n+    private EPersonService ePersonService;\n \n-    protected MetadataExport() {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n+    private MetadataExport() {\n+        this.options = constructOptions();\n     }\n \n-    /**\n-     * Set up a new metadata export\n-     *\n-     * @param c         The Context\n-     * @param toExport  The ItemIterator of items to export\n-     * @param exportAll whether to export all metadata or not (include handle, provenance etc)\n-     */\n-    public MetadataExport(Context c, Iterator<Item> toExport, boolean exportAll) {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n-\n-        // Store the export settings\n-        this.toExport = toExport;\n-        this.exportAll = exportAll;\n-        this.context = c;\n-    }\n-\n-    /**\n-     * Method to export a community (and sub-communities and collections)\n-     *\n-     * @param c         The Context\n-     * @param toExport  The Community to export\n-     * @param exportAll whether to export all metadata or not (include handle, provenance etc)\n-     */\n-    public MetadataExport(Context c, Community toExport, boolean exportAll) {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n-\n-        try {\n-            // Try to export the community\n-            this.toExport = buildFromCommunity(c, toExport, 0);\n-            this.exportAll = exportAll;\n-            this.context = c;\n-        } catch (SQLException sqle) {\n-            // Something went wrong...\n-            System.err.println(\"Error running exporter:\");\n-            sqle.printStackTrace(System.err);\n-            System.exit(1);\n-        }\n-    }\n-\n-    /**\n-     * Build an array list of item ids that are in a community (include sub-communities and collections)\n-     *\n-     * @param context   DSpace context\n-     * @param community The community to build from\n-     * @param indent    How many spaces to use when writing out the names of items added\n-     * @return The list of item ids\n-     * @throws SQLException if database error\n-     */\n-    protected Iterator<Item> buildFromCommunity(Context context, Community community, int indent)\n-        throws SQLException {\n-        // Add all the collections\n-        List<Collection> collections = community.getCollections();\n-        Iterator<Item> result = null;\n-        for (Collection collection : collections) {\n-            for (int i = 0; i < indent; i++) {\n-                System.out.print(\" \");\n-            }\n-\n-            Iterator<Item> items = itemService.findByCollection(context, collection);\n-            result = addItemsToResult(result, items);\n-\n-        }\n-        // Add all the sub-communities\n-        List<Community> communities = community.getSubcommunities();\n-        for (Community subCommunity : communities) {\n-            for (int i = 0; i < indent; i++) {\n-                System.out.print(\" \");\n-            }\n-            Iterator<Item> items = buildFromCommunity(context, subCommunity, indent + 1);\n-            result = addItemsToResult(result, items);\n-        }\n-\n-        return result;\n-    }\n-\n-    private Iterator<Item> addItemsToResult(Iterator<Item> result, Iterator<Item> items) {\n-        if (result == null) {\n-            result = items;\n-        } else {\n-            result = Iterators.concat(result, items);\n-        }\n-\n-        return result;\n-    }\n-\n-    /**\n-     * Run the export\n-     *\n-     * @return the exported CSV lines\n-     */\n-    public DSpaceCSV export() {\n-        try {\n-            Context.Mode originalMode = context.getCurrentMode();\n-            context.setMode(Context.Mode.READ_ONLY);\n-\n-            // Process each item\n-            DSpaceCSV csv = new DSpaceCSV(exportAll);\n-            while (toExport.hasNext()) {\n-                Item item = toExport.next();\n-                csv.addItem(item);\n-                context.uncacheEntity(item);\n-            }\n-\n-            context.setMode(originalMode);\n-            // Return the results\n-            return csv;\n-        } catch (Exception e) {\n-            // Something went wrong...\n-            System.err.println(\"Error exporting to CSV:\");\n-            e.printStackTrace();\n-            return null;\n-        }\n-    }\n-\n-    /**\n-     * Print the help message\n-     *\n-     * @param options  The command line options the user gave\n-     * @param exitCode the system exit code to use\n-     */\n-    private static void printHelp(Options options, int exitCode) {\n-        // print the help message\n-        HelpFormatter myhelp = new HelpFormatter();\n-        myhelp.printHelp(\"MetadataExport\\n\", options);\n-        System.out.println(\"\\nfull export: metadataexport -f filename\");\n-        System.out.println(\"partial export: metadataexport -i handle -f filename\");\n-        System.exit(exitCode);\n-    }\n-\n-    /**\n-     * main method to run the metadata exporter\n-     *\n-     * @param argv the command line arguments given\n-     * @throws Exception if error occurs\n-     */\n-    public static void main(String[] argv) throws Exception {\n-        // Create an options object and populate it\n-        CommandLineParser parser = new PosixParser();\n-\n+    private Options constructOptions() {\n         Options options = new Options();\n \n         options.addOption(\"i\", \"id\", true, \"ID or handle of thing to export (item, collection, or community)\");\n+        options.getOption(\"i\").setType(String.class);\n         options.addOption(\"f\", \"file\", true, \"destination where you want file written\");\n+        options.getOption(\"f\").setType(OutputStream.class);\n+        options.getOption(\"f\").setRequired(true);\n         options.addOption(\"a\", \"all\", false,\n                           \"include all metadata fields that are not normally changed (e.g. provenance)\");\n+        options.getOption(\"a\").setType(boolean.class);\n         options.addOption(\"h\", \"help\", false, \"help\");\n+        options.getOption(\"h\").setType(boolean.class);\n \n-        CommandLine line = null;\n-\n-        try {\n-            line = parser.parse(options, argv);\n-        } catch (ParseException pe) {\n-            System.err.println(\"Error with commands.\");\n-            printHelp(options, 1);\n-            System.exit(0);\n-        }\n \n-        if (line.hasOption('h')) {\n-            printHelp(options, 0);\n-        }\n+        return options;\n+    }\n \n-        // Check a filename is given\n-        if (!line.hasOption('f')) {\n-            System.err.println(\"Required parameter -f missing!\");\n-            printHelp(options, 1);\n+    public void internalRun() throws Exception {\n+        if (help) {\n+            handler.logInfo(\"\\nfull export: metadata-export -f filename\");\n+            handler.logInfo(\"partial export: metadata-export -i handle -f filename\");\n+            printHelp();\n+            return;\n         }\n-        String filename = line.getOptionValue('f');\n \n-        // Create a context\n-        Context c = new Context(Context.Mode.READ_ONLY);\n-        c.turnOffAuthorisationSystem();\n-\n-        // The things we'll export\n-        Iterator<Item> toExport = null;\n-        MetadataExport exporter = null;\n+        DSpaceCSV dSpaceCSV = metadataDSpaceCsvExportService\n+            .handleExport(context, exportAllItems, exportAllMetadata, handle,\n+                          handler);\n+        handler.writeFilestream(context, filename, dSpaceCSV.getInputStream(), \"exportCSV\");\n+        context.restoreAuthSystemState();\n+        context.complete();\n+    }\n \n-        // Export everything?\n-        boolean exportAll = line.hasOption('a');\n+    public void setup() throws ParseException {\n+        context = new Context();\n+        context.turnOffAuthorisationSystem();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4NTg1MQ=="}, "originalCommit": {"oid": "5265ebd382097d221b9b9bfc2df708b5819f1fa0"}, "originalPosition": 269}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzg0Nzg2OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/app/bulkedit/MetadataExport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjozOTo1MVrOFlbJ7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDozODo0MVrOGWTKVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4NjU0Mw==", "bodyText": "I think this method (and others in this same file) is missing an @Override annotation", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r374786543", "createdAt": "2020-02-04T16:39:51Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/app/bulkedit/MetadataExport.java", "diffHunk": "@@ -7,272 +7,101 @@\n  */\n package org.dspace.app.bulkedit;\n \n+import java.io.OutputStream;\n import java.sql.SQLException;\n-import java.util.ArrayList;\n-import java.util.Iterator;\n-import java.util.List;\n \n-import com.google.common.collect.Iterators;\n-import org.apache.commons.cli.CommandLine;\n-import org.apache.commons.cli.CommandLineParser;\n-import org.apache.commons.cli.HelpFormatter;\n import org.apache.commons.cli.Options;\n import org.apache.commons.cli.ParseException;\n-import org.apache.commons.cli.PosixParser;\n-import org.dspace.content.Collection;\n-import org.dspace.content.Community;\n-import org.dspace.content.DSpaceObject;\n-import org.dspace.content.Item;\n-import org.dspace.content.factory.ContentServiceFactory;\n-import org.dspace.content.service.ItemService;\n-import org.dspace.core.Constants;\n+import org.dspace.content.service.MetadataDSpaceCsvExportService;\n import org.dspace.core.Context;\n-import org.dspace.handle.factory.HandleServiceFactory;\n+import org.dspace.eperson.service.EPersonService;\n+import org.dspace.scripts.DSpaceRunnable;\n+import org.springframework.beans.factory.annotation.Autowired;\n \n /**\n  * Metadata exporter to allow the batch export of metadata into a file\n  *\n  * @author Stuart Lewis\n  */\n-public class MetadataExport {\n-    /**\n-     * The items to export\n-     */\n-    protected Iterator<Item> toExport;\n+public class MetadataExport extends DSpaceRunnable {\n \n-    protected ItemService itemService;\n+    private Context context = null;\n+    private boolean help = false;\n+    private String filename = null;\n+    private String handle = null;\n+    private boolean exportAllMetadata = false;\n+    private boolean exportAllItems = false;\n \n-    protected Context context;\n+    @Autowired\n+    private MetadataDSpaceCsvExportService metadataDSpaceCsvExportService;\n \n-    /**\n-     * Whether to export all metadata, or just normally edited metadata\n-     */\n-    protected boolean exportAll;\n+    @Autowired\n+    private EPersonService ePersonService;\n \n-    protected MetadataExport() {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n+    private MetadataExport() {\n+        this.options = constructOptions();\n     }\n \n-    /**\n-     * Set up a new metadata export\n-     *\n-     * @param c         The Context\n-     * @param toExport  The ItemIterator of items to export\n-     * @param exportAll whether to export all metadata or not (include handle, provenance etc)\n-     */\n-    public MetadataExport(Context c, Iterator<Item> toExport, boolean exportAll) {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n-\n-        // Store the export settings\n-        this.toExport = toExport;\n-        this.exportAll = exportAll;\n-        this.context = c;\n-    }\n-\n-    /**\n-     * Method to export a community (and sub-communities and collections)\n-     *\n-     * @param c         The Context\n-     * @param toExport  The Community to export\n-     * @param exportAll whether to export all metadata or not (include handle, provenance etc)\n-     */\n-    public MetadataExport(Context c, Community toExport, boolean exportAll) {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n-\n-        try {\n-            // Try to export the community\n-            this.toExport = buildFromCommunity(c, toExport, 0);\n-            this.exportAll = exportAll;\n-            this.context = c;\n-        } catch (SQLException sqle) {\n-            // Something went wrong...\n-            System.err.println(\"Error running exporter:\");\n-            sqle.printStackTrace(System.err);\n-            System.exit(1);\n-        }\n-    }\n-\n-    /**\n-     * Build an array list of item ids that are in a community (include sub-communities and collections)\n-     *\n-     * @param context   DSpace context\n-     * @param community The community to build from\n-     * @param indent    How many spaces to use when writing out the names of items added\n-     * @return The list of item ids\n-     * @throws SQLException if database error\n-     */\n-    protected Iterator<Item> buildFromCommunity(Context context, Community community, int indent)\n-        throws SQLException {\n-        // Add all the collections\n-        List<Collection> collections = community.getCollections();\n-        Iterator<Item> result = null;\n-        for (Collection collection : collections) {\n-            for (int i = 0; i < indent; i++) {\n-                System.out.print(\" \");\n-            }\n-\n-            Iterator<Item> items = itemService.findByCollection(context, collection);\n-            result = addItemsToResult(result, items);\n-\n-        }\n-        // Add all the sub-communities\n-        List<Community> communities = community.getSubcommunities();\n-        for (Community subCommunity : communities) {\n-            for (int i = 0; i < indent; i++) {\n-                System.out.print(\" \");\n-            }\n-            Iterator<Item> items = buildFromCommunity(context, subCommunity, indent + 1);\n-            result = addItemsToResult(result, items);\n-        }\n-\n-        return result;\n-    }\n-\n-    private Iterator<Item> addItemsToResult(Iterator<Item> result, Iterator<Item> items) {\n-        if (result == null) {\n-            result = items;\n-        } else {\n-            result = Iterators.concat(result, items);\n-        }\n-\n-        return result;\n-    }\n-\n-    /**\n-     * Run the export\n-     *\n-     * @return the exported CSV lines\n-     */\n-    public DSpaceCSV export() {\n-        try {\n-            Context.Mode originalMode = context.getCurrentMode();\n-            context.setMode(Context.Mode.READ_ONLY);\n-\n-            // Process each item\n-            DSpaceCSV csv = new DSpaceCSV(exportAll);\n-            while (toExport.hasNext()) {\n-                Item item = toExport.next();\n-                csv.addItem(item);\n-                context.uncacheEntity(item);\n-            }\n-\n-            context.setMode(originalMode);\n-            // Return the results\n-            return csv;\n-        } catch (Exception e) {\n-            // Something went wrong...\n-            System.err.println(\"Error exporting to CSV:\");\n-            e.printStackTrace();\n-            return null;\n-        }\n-    }\n-\n-    /**\n-     * Print the help message\n-     *\n-     * @param options  The command line options the user gave\n-     * @param exitCode the system exit code to use\n-     */\n-    private static void printHelp(Options options, int exitCode) {\n-        // print the help message\n-        HelpFormatter myhelp = new HelpFormatter();\n-        myhelp.printHelp(\"MetadataExport\\n\", options);\n-        System.out.println(\"\\nfull export: metadataexport -f filename\");\n-        System.out.println(\"partial export: metadataexport -i handle -f filename\");\n-        System.exit(exitCode);\n-    }\n-\n-    /**\n-     * main method to run the metadata exporter\n-     *\n-     * @param argv the command line arguments given\n-     * @throws Exception if error occurs\n-     */\n-    public static void main(String[] argv) throws Exception {\n-        // Create an options object and populate it\n-        CommandLineParser parser = new PosixParser();\n-\n+    private Options constructOptions() {\n         Options options = new Options();\n \n         options.addOption(\"i\", \"id\", true, \"ID or handle of thing to export (item, collection, or community)\");\n+        options.getOption(\"i\").setType(String.class);\n         options.addOption(\"f\", \"file\", true, \"destination where you want file written\");\n+        options.getOption(\"f\").setType(OutputStream.class);\n+        options.getOption(\"f\").setRequired(true);\n         options.addOption(\"a\", \"all\", false,\n                           \"include all metadata fields that are not normally changed (e.g. provenance)\");\n+        options.getOption(\"a\").setType(boolean.class);\n         options.addOption(\"h\", \"help\", false, \"help\");\n+        options.getOption(\"h\").setType(boolean.class);\n \n-        CommandLine line = null;\n-\n-        try {\n-            line = parser.parse(options, argv);\n-        } catch (ParseException pe) {\n-            System.err.println(\"Error with commands.\");\n-            printHelp(options, 1);\n-            System.exit(0);\n-        }\n \n-        if (line.hasOption('h')) {\n-            printHelp(options, 0);\n-        }\n+        return options;\n+    }\n \n-        // Check a filename is given\n-        if (!line.hasOption('f')) {\n-            System.err.println(\"Required parameter -f missing!\");\n-            printHelp(options, 1);\n+    public void internalRun() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5265ebd382097d221b9b9bfc2df708b5819f1fa0"}, "originalPosition": 241}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAzNTc5OA==", "bodyText": "Again, still missing an @Override here I believe.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r426035798", "createdAt": "2020-05-15T20:38:41Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/app/bulkedit/MetadataExport.java", "diffHunk": "@@ -7,272 +7,101 @@\n  */\n package org.dspace.app.bulkedit;\n \n+import java.io.OutputStream;\n import java.sql.SQLException;\n-import java.util.ArrayList;\n-import java.util.Iterator;\n-import java.util.List;\n \n-import com.google.common.collect.Iterators;\n-import org.apache.commons.cli.CommandLine;\n-import org.apache.commons.cli.CommandLineParser;\n-import org.apache.commons.cli.HelpFormatter;\n import org.apache.commons.cli.Options;\n import org.apache.commons.cli.ParseException;\n-import org.apache.commons.cli.PosixParser;\n-import org.dspace.content.Collection;\n-import org.dspace.content.Community;\n-import org.dspace.content.DSpaceObject;\n-import org.dspace.content.Item;\n-import org.dspace.content.factory.ContentServiceFactory;\n-import org.dspace.content.service.ItemService;\n-import org.dspace.core.Constants;\n+import org.dspace.content.service.MetadataDSpaceCsvExportService;\n import org.dspace.core.Context;\n-import org.dspace.handle.factory.HandleServiceFactory;\n+import org.dspace.eperson.service.EPersonService;\n+import org.dspace.scripts.DSpaceRunnable;\n+import org.springframework.beans.factory.annotation.Autowired;\n \n /**\n  * Metadata exporter to allow the batch export of metadata into a file\n  *\n  * @author Stuart Lewis\n  */\n-public class MetadataExport {\n-    /**\n-     * The items to export\n-     */\n-    protected Iterator<Item> toExport;\n+public class MetadataExport extends DSpaceRunnable {\n \n-    protected ItemService itemService;\n+    private Context context = null;\n+    private boolean help = false;\n+    private String filename = null;\n+    private String handle = null;\n+    private boolean exportAllMetadata = false;\n+    private boolean exportAllItems = false;\n \n-    protected Context context;\n+    @Autowired\n+    private MetadataDSpaceCsvExportService metadataDSpaceCsvExportService;\n \n-    /**\n-     * Whether to export all metadata, or just normally edited metadata\n-     */\n-    protected boolean exportAll;\n+    @Autowired\n+    private EPersonService ePersonService;\n \n-    protected MetadataExport() {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n+    private MetadataExport() {\n+        this.options = constructOptions();\n     }\n \n-    /**\n-     * Set up a new metadata export\n-     *\n-     * @param c         The Context\n-     * @param toExport  The ItemIterator of items to export\n-     * @param exportAll whether to export all metadata or not (include handle, provenance etc)\n-     */\n-    public MetadataExport(Context c, Iterator<Item> toExport, boolean exportAll) {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n-\n-        // Store the export settings\n-        this.toExport = toExport;\n-        this.exportAll = exportAll;\n-        this.context = c;\n-    }\n-\n-    /**\n-     * Method to export a community (and sub-communities and collections)\n-     *\n-     * @param c         The Context\n-     * @param toExport  The Community to export\n-     * @param exportAll whether to export all metadata or not (include handle, provenance etc)\n-     */\n-    public MetadataExport(Context c, Community toExport, boolean exportAll) {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n-\n-        try {\n-            // Try to export the community\n-            this.toExport = buildFromCommunity(c, toExport, 0);\n-            this.exportAll = exportAll;\n-            this.context = c;\n-        } catch (SQLException sqle) {\n-            // Something went wrong...\n-            System.err.println(\"Error running exporter:\");\n-            sqle.printStackTrace(System.err);\n-            System.exit(1);\n-        }\n-    }\n-\n-    /**\n-     * Build an array list of item ids that are in a community (include sub-communities and collections)\n-     *\n-     * @param context   DSpace context\n-     * @param community The community to build from\n-     * @param indent    How many spaces to use when writing out the names of items added\n-     * @return The list of item ids\n-     * @throws SQLException if database error\n-     */\n-    protected Iterator<Item> buildFromCommunity(Context context, Community community, int indent)\n-        throws SQLException {\n-        // Add all the collections\n-        List<Collection> collections = community.getCollections();\n-        Iterator<Item> result = null;\n-        for (Collection collection : collections) {\n-            for (int i = 0; i < indent; i++) {\n-                System.out.print(\" \");\n-            }\n-\n-            Iterator<Item> items = itemService.findByCollection(context, collection);\n-            result = addItemsToResult(result, items);\n-\n-        }\n-        // Add all the sub-communities\n-        List<Community> communities = community.getSubcommunities();\n-        for (Community subCommunity : communities) {\n-            for (int i = 0; i < indent; i++) {\n-                System.out.print(\" \");\n-            }\n-            Iterator<Item> items = buildFromCommunity(context, subCommunity, indent + 1);\n-            result = addItemsToResult(result, items);\n-        }\n-\n-        return result;\n-    }\n-\n-    private Iterator<Item> addItemsToResult(Iterator<Item> result, Iterator<Item> items) {\n-        if (result == null) {\n-            result = items;\n-        } else {\n-            result = Iterators.concat(result, items);\n-        }\n-\n-        return result;\n-    }\n-\n-    /**\n-     * Run the export\n-     *\n-     * @return the exported CSV lines\n-     */\n-    public DSpaceCSV export() {\n-        try {\n-            Context.Mode originalMode = context.getCurrentMode();\n-            context.setMode(Context.Mode.READ_ONLY);\n-\n-            // Process each item\n-            DSpaceCSV csv = new DSpaceCSV(exportAll);\n-            while (toExport.hasNext()) {\n-                Item item = toExport.next();\n-                csv.addItem(item);\n-                context.uncacheEntity(item);\n-            }\n-\n-            context.setMode(originalMode);\n-            // Return the results\n-            return csv;\n-        } catch (Exception e) {\n-            // Something went wrong...\n-            System.err.println(\"Error exporting to CSV:\");\n-            e.printStackTrace();\n-            return null;\n-        }\n-    }\n-\n-    /**\n-     * Print the help message\n-     *\n-     * @param options  The command line options the user gave\n-     * @param exitCode the system exit code to use\n-     */\n-    private static void printHelp(Options options, int exitCode) {\n-        // print the help message\n-        HelpFormatter myhelp = new HelpFormatter();\n-        myhelp.printHelp(\"MetadataExport\\n\", options);\n-        System.out.println(\"\\nfull export: metadataexport -f filename\");\n-        System.out.println(\"partial export: metadataexport -i handle -f filename\");\n-        System.exit(exitCode);\n-    }\n-\n-    /**\n-     * main method to run the metadata exporter\n-     *\n-     * @param argv the command line arguments given\n-     * @throws Exception if error occurs\n-     */\n-    public static void main(String[] argv) throws Exception {\n-        // Create an options object and populate it\n-        CommandLineParser parser = new PosixParser();\n-\n+    private Options constructOptions() {\n         Options options = new Options();\n \n         options.addOption(\"i\", \"id\", true, \"ID or handle of thing to export (item, collection, or community)\");\n+        options.getOption(\"i\").setType(String.class);\n         options.addOption(\"f\", \"file\", true, \"destination where you want file written\");\n+        options.getOption(\"f\").setType(OutputStream.class);\n+        options.getOption(\"f\").setRequired(true);\n         options.addOption(\"a\", \"all\", false,\n                           \"include all metadata fields that are not normally changed (e.g. provenance)\");\n+        options.getOption(\"a\").setType(boolean.class);\n         options.addOption(\"h\", \"help\", false, \"help\");\n+        options.getOption(\"h\").setType(boolean.class);\n \n-        CommandLine line = null;\n-\n-        try {\n-            line = parser.parse(options, argv);\n-        } catch (ParseException pe) {\n-            System.err.println(\"Error with commands.\");\n-            printHelp(options, 1);\n-            System.exit(0);\n-        }\n \n-        if (line.hasOption('h')) {\n-            printHelp(options, 0);\n-        }\n+        return options;\n+    }\n \n-        // Check a filename is given\n-        if (!line.hasOption('f')) {\n-            System.err.println(\"Required parameter -f missing!\");\n-            printHelp(options, 1);\n+    public void internalRun() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4NjU0Mw=="}, "originalCommit": {"oid": "5265ebd382097d221b9b9bfc2df708b5819f1fa0"}, "originalPosition": 241}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzg1NjQzOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/app/bulkedit/MetadataImport.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjo0MTo1MVrOFlbO-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOTowNDo1OVrOGbAMKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4NzgzMw==", "bodyText": "Again, not a best practice. This method is completing a Context it didn't create.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r374787833", "createdAt": "2020-02-04T16:41:51Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/app/bulkedit/MetadataImport.java", "diffHunk": "@@ -167,21 +178,201 @@\n      * @param c        The context\n      * @param toImport An array of CSV lines to examine\n      */\n-    public MetadataImport(Context c, DSpaceCSV toImport) {\n+    public void initMetadataImport(DSpaceCSV toImport) {\n         // Store the import settings\n-        this.c = c;\n-        csv = toImport;\n         this.toImport = toImport.getCSVLines();\n-        installItemService = ContentServiceFactory.getInstance().getInstallItemService();\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n-        collectionService = ContentServiceFactory.getInstance().getCollectionService();\n-        handleService = HandleServiceFactory.getInstance().getHandleService();\n-        authorityValueService = AuthorityServiceFactory.getInstance().getAuthorityValueService();\n-        workspaceItemService = ContentServiceFactory.getInstance().getWorkspaceItemService();\n-        relationshipService = ContentServiceFactory.getInstance().getRelationshipService();\n-        relationshipTypeService = ContentServiceFactory.getInstance().getRelationshipTypeService();\n-        entityTypeService = ContentServiceFactory.getInstance().getEntityTypeService();\n-        entityService = ContentServiceFactory.getInstance().getEntityService();\n+    }\n+\n+    @Override\n+    public void internalRun() throws Exception {\n+        if (help) {\n+            printHelp();\n+            return;\n+        }\n+        // Read commandLines from the CSV file\n+        try {\n+\n+            Optional<InputStream> optionalFileStream = handler.getFileStream(c, filename);\n+            if (optionalFileStream.isPresent()) {\n+                csv = new DSpaceCSV(optionalFileStream.get(), c);\n+            } else {\n+                throw new IllegalArgumentException(\"Error reading file, the file couldn't be found for filename: \" +\n+                                                       filename);\n+            }\n+        } catch (MetadataImportInvalidHeadingException miihe) {\n+            throw miihe;\n+        } catch (Exception e) {\n+            throw new Exception(\"Error reading file: \" + e.getMessage(), e);\n+        }\n+\n+        // Perform the first import - just highlight differences\n+        initMetadataImport(csv);\n+        List<BulkEditChange> changes;\n+\n+        if (!commandLine.hasOption('s') || validateOnly) {\n+            // See what has changed\n+            try {\n+                changes = runImport(false, useWorkflow, workflowNotify, useTemplate);\n+            } catch (MetadataImportException mie) {\n+                throw mie;\n+            }\n+\n+            // Display the changes\n+            int changeCounter = displayChanges(changes, false);\n+\n+            // If there were changes, ask if we should execute them\n+            if (!validateOnly && changeCounter > 0) {\n+                try {\n+                    // Ask the user if they want to make the changes\n+                    handler.logInfo(\"\\n\" + changeCounter + \" item(s) will be changed\\n\");\n+                    change = determineChange(handler);\n+\n+                } catch (IOException ioe) {\n+                    throw new IOException(\"Error: \" + ioe.getMessage() + \", No changes have been made\", ioe);\n+                }\n+            } else {\n+                handler.logInfo(\"There were no changes detected\");\n+            }\n+        } else {\n+            change = true;\n+        }\n+\n+        try {\n+            // If required, make the change\n+            if (change && !validateOnly) {\n+                try {\n+                    // Make the changes\n+                    changes = runImport(true, useWorkflow, workflowNotify, useTemplate);\n+                } catch (MetadataImportException mie) {\n+                    throw mie;\n+                }\n+\n+                // Display the changes\n+                displayChanges(changes, true);\n+            }\n+\n+            // Finsh off and tidy up\n+            c.restoreAuthSystemState();\n+            c.complete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5265ebd382097d221b9b9bfc2df708b5819f1fa0"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAzODA2Nw==", "bodyText": "Again, please resolve prior feedback", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r426038067", "createdAt": "2020-05-15T20:44:32Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/app/bulkedit/MetadataImport.java", "diffHunk": "@@ -167,21 +178,201 @@\n      * @param c        The context\n      * @param toImport An array of CSV lines to examine\n      */\n-    public MetadataImport(Context c, DSpaceCSV toImport) {\n+    public void initMetadataImport(DSpaceCSV toImport) {\n         // Store the import settings\n-        this.c = c;\n-        csv = toImport;\n         this.toImport = toImport.getCSVLines();\n-        installItemService = ContentServiceFactory.getInstance().getInstallItemService();\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n-        collectionService = ContentServiceFactory.getInstance().getCollectionService();\n-        handleService = HandleServiceFactory.getInstance().getHandleService();\n-        authorityValueService = AuthorityServiceFactory.getInstance().getAuthorityValueService();\n-        workspaceItemService = ContentServiceFactory.getInstance().getWorkspaceItemService();\n-        relationshipService = ContentServiceFactory.getInstance().getRelationshipService();\n-        relationshipTypeService = ContentServiceFactory.getInstance().getRelationshipTypeService();\n-        entityTypeService = ContentServiceFactory.getInstance().getEntityTypeService();\n-        entityService = ContentServiceFactory.getInstance().getEntityService();\n+    }\n+\n+    @Override\n+    public void internalRun() throws Exception {\n+        if (help) {\n+            printHelp();\n+            return;\n+        }\n+        // Read commandLines from the CSV file\n+        try {\n+\n+            Optional<InputStream> optionalFileStream = handler.getFileStream(c, filename);\n+            if (optionalFileStream.isPresent()) {\n+                csv = new DSpaceCSV(optionalFileStream.get(), c);\n+            } else {\n+                throw new IllegalArgumentException(\"Error reading file, the file couldn't be found for filename: \" +\n+                                                       filename);\n+            }\n+        } catch (MetadataImportInvalidHeadingException miihe) {\n+            throw miihe;\n+        } catch (Exception e) {\n+            throw new Exception(\"Error reading file: \" + e.getMessage(), e);\n+        }\n+\n+        // Perform the first import - just highlight differences\n+        initMetadataImport(csv);\n+        List<BulkEditChange> changes;\n+\n+        if (!commandLine.hasOption('s') || validateOnly) {\n+            // See what has changed\n+            try {\n+                changes = runImport(false, useWorkflow, workflowNotify, useTemplate);\n+            } catch (MetadataImportException mie) {\n+                throw mie;\n+            }\n+\n+            // Display the changes\n+            int changeCounter = displayChanges(changes, false);\n+\n+            // If there were changes, ask if we should execute them\n+            if (!validateOnly && changeCounter > 0) {\n+                try {\n+                    // Ask the user if they want to make the changes\n+                    handler.logInfo(\"\\n\" + changeCounter + \" item(s) will be changed\\n\");\n+                    change = determineChange(handler);\n+\n+                } catch (IOException ioe) {\n+                    throw new IOException(\"Error: \" + ioe.getMessage() + \", No changes have been made\", ioe);\n+                }\n+            } else {\n+                handler.logInfo(\"There were no changes detected\");\n+            }\n+        } else {\n+            change = true;\n+        }\n+\n+        try {\n+            // If required, make the change\n+            if (change && !validateOnly) {\n+                try {\n+                    // Make the changes\n+                    changes = runImport(true, useWorkflow, workflowNotify, useTemplate);\n+                } catch (MetadataImportException mie) {\n+                    throw mie;\n+                }\n+\n+                // Display the changes\n+                displayChanges(changes, true);\n+            }\n+\n+            // Finsh off and tidy up\n+            c.restoreAuthSystemState();\n+            c.complete();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4NzgzMw=="}, "originalCommit": {"oid": "5265ebd382097d221b9b9bfc2df708b5819f1fa0"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk2Nzg1MQ==", "bodyText": "See comments above about the MetadataExport, this is similar except that we need a complete here because we are making changes.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r430967851", "createdAt": "2020-05-27T09:04:59Z", "author": {"login": "KevinVdV"}, "path": "dspace-api/src/main/java/org/dspace/app/bulkedit/MetadataImport.java", "diffHunk": "@@ -167,21 +178,201 @@\n      * @param c        The context\n      * @param toImport An array of CSV lines to examine\n      */\n-    public MetadataImport(Context c, DSpaceCSV toImport) {\n+    public void initMetadataImport(DSpaceCSV toImport) {\n         // Store the import settings\n-        this.c = c;\n-        csv = toImport;\n         this.toImport = toImport.getCSVLines();\n-        installItemService = ContentServiceFactory.getInstance().getInstallItemService();\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n-        collectionService = ContentServiceFactory.getInstance().getCollectionService();\n-        handleService = HandleServiceFactory.getInstance().getHandleService();\n-        authorityValueService = AuthorityServiceFactory.getInstance().getAuthorityValueService();\n-        workspaceItemService = ContentServiceFactory.getInstance().getWorkspaceItemService();\n-        relationshipService = ContentServiceFactory.getInstance().getRelationshipService();\n-        relationshipTypeService = ContentServiceFactory.getInstance().getRelationshipTypeService();\n-        entityTypeService = ContentServiceFactory.getInstance().getEntityTypeService();\n-        entityService = ContentServiceFactory.getInstance().getEntityService();\n+    }\n+\n+    @Override\n+    public void internalRun() throws Exception {\n+        if (help) {\n+            printHelp();\n+            return;\n+        }\n+        // Read commandLines from the CSV file\n+        try {\n+\n+            Optional<InputStream> optionalFileStream = handler.getFileStream(c, filename);\n+            if (optionalFileStream.isPresent()) {\n+                csv = new DSpaceCSV(optionalFileStream.get(), c);\n+            } else {\n+                throw new IllegalArgumentException(\"Error reading file, the file couldn't be found for filename: \" +\n+                                                       filename);\n+            }\n+        } catch (MetadataImportInvalidHeadingException miihe) {\n+            throw miihe;\n+        } catch (Exception e) {\n+            throw new Exception(\"Error reading file: \" + e.getMessage(), e);\n+        }\n+\n+        // Perform the first import - just highlight differences\n+        initMetadataImport(csv);\n+        List<BulkEditChange> changes;\n+\n+        if (!commandLine.hasOption('s') || validateOnly) {\n+            // See what has changed\n+            try {\n+                changes = runImport(false, useWorkflow, workflowNotify, useTemplate);\n+            } catch (MetadataImportException mie) {\n+                throw mie;\n+            }\n+\n+            // Display the changes\n+            int changeCounter = displayChanges(changes, false);\n+\n+            // If there were changes, ask if we should execute them\n+            if (!validateOnly && changeCounter > 0) {\n+                try {\n+                    // Ask the user if they want to make the changes\n+                    handler.logInfo(\"\\n\" + changeCounter + \" item(s) will be changed\\n\");\n+                    change = determineChange(handler);\n+\n+                } catch (IOException ioe) {\n+                    throw new IOException(\"Error: \" + ioe.getMessage() + \", No changes have been made\", ioe);\n+                }\n+            } else {\n+                handler.logInfo(\"There were no changes detected\");\n+            }\n+        } else {\n+            change = true;\n+        }\n+\n+        try {\n+            // If required, make the change\n+            if (change && !validateOnly) {\n+                try {\n+                    // Make the changes\n+                    changes = runImport(true, useWorkflow, workflowNotify, useTemplate);\n+                } catch (MetadataImportException mie) {\n+                    throw mie;\n+                }\n+\n+                // Display the changes\n+                displayChanges(changes, true);\n+            }\n+\n+            // Finsh off and tidy up\n+            c.restoreAuthSystemState();\n+            c.complete();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4NzgzMw=="}, "originalCommit": {"oid": "5265ebd382097d221b9b9bfc2df708b5819f1fa0"}, "originalPosition": 213}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzg1ODY5OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/app/bulkedit/MetadataImport.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjo0MjoyOVrOFlbQgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOTowNToyMlrOGbANIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4ODIyNw==", "bodyText": "Again, we are turning off all authorization checks and leaving them off until internalRun gets called. This is a bad practice.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r374788227", "createdAt": "2020-02-04T16:42:29Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/app/bulkedit/MetadataImport.java", "diffHunk": "@@ -167,21 +178,201 @@\n      * @param c        The context\n      * @param toImport An array of CSV lines to examine\n      */\n-    public MetadataImport(Context c, DSpaceCSV toImport) {\n+    public void initMetadataImport(DSpaceCSV toImport) {\n         // Store the import settings\n-        this.c = c;\n-        csv = toImport;\n         this.toImport = toImport.getCSVLines();\n-        installItemService = ContentServiceFactory.getInstance().getInstallItemService();\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n-        collectionService = ContentServiceFactory.getInstance().getCollectionService();\n-        handleService = HandleServiceFactory.getInstance().getHandleService();\n-        authorityValueService = AuthorityServiceFactory.getInstance().getAuthorityValueService();\n-        workspaceItemService = ContentServiceFactory.getInstance().getWorkspaceItemService();\n-        relationshipService = ContentServiceFactory.getInstance().getRelationshipService();\n-        relationshipTypeService = ContentServiceFactory.getInstance().getRelationshipTypeService();\n-        entityTypeService = ContentServiceFactory.getInstance().getEntityTypeService();\n-        entityService = ContentServiceFactory.getInstance().getEntityService();\n+    }\n+\n+    @Override\n+    public void internalRun() throws Exception {\n+        if (help) {\n+            printHelp();\n+            return;\n+        }\n+        // Read commandLines from the CSV file\n+        try {\n+\n+            Optional<InputStream> optionalFileStream = handler.getFileStream(c, filename);\n+            if (optionalFileStream.isPresent()) {\n+                csv = new DSpaceCSV(optionalFileStream.get(), c);\n+            } else {\n+                throw new IllegalArgumentException(\"Error reading file, the file couldn't be found for filename: \" +\n+                                                       filename);\n+            }\n+        } catch (MetadataImportInvalidHeadingException miihe) {\n+            throw miihe;\n+        } catch (Exception e) {\n+            throw new Exception(\"Error reading file: \" + e.getMessage(), e);\n+        }\n+\n+        // Perform the first import - just highlight differences\n+        initMetadataImport(csv);\n+        List<BulkEditChange> changes;\n+\n+        if (!commandLine.hasOption('s') || validateOnly) {\n+            // See what has changed\n+            try {\n+                changes = runImport(false, useWorkflow, workflowNotify, useTemplate);\n+            } catch (MetadataImportException mie) {\n+                throw mie;\n+            }\n+\n+            // Display the changes\n+            int changeCounter = displayChanges(changes, false);\n+\n+            // If there were changes, ask if we should execute them\n+            if (!validateOnly && changeCounter > 0) {\n+                try {\n+                    // Ask the user if they want to make the changes\n+                    handler.logInfo(\"\\n\" + changeCounter + \" item(s) will be changed\\n\");\n+                    change = determineChange(handler);\n+\n+                } catch (IOException ioe) {\n+                    throw new IOException(\"Error: \" + ioe.getMessage() + \", No changes have been made\", ioe);\n+                }\n+            } else {\n+                handler.logInfo(\"There were no changes detected\");\n+            }\n+        } else {\n+            change = true;\n+        }\n+\n+        try {\n+            // If required, make the change\n+            if (change && !validateOnly) {\n+                try {\n+                    // Make the changes\n+                    changes = runImport(true, useWorkflow, workflowNotify, useTemplate);\n+                } catch (MetadataImportException mie) {\n+                    throw mie;\n+                }\n+\n+                // Display the changes\n+                displayChanges(changes, true);\n+            }\n+\n+            // Finsh off and tidy up\n+            c.restoreAuthSystemState();\n+            c.complete();\n+        } catch (Exception e) {\n+            c.abort();\n+            throw new Exception(\n+                \"Error committing changes to database: \" + e.getMessage() + \", aborting most recent changes\", e);\n+        }\n+\n+    }\n+\n+    /**\n+     * This method determines whether the changes should be applied or not. This is default set to true for the REST\n+     * script as we don't want to interact with the caller. This will be overwritten in the CLI script to ask for\n+     * confirmation\n+     * @param handler   Applicable DSpaceRunnableHandler\n+     * @return boolean indicating the value\n+     * @throws IOException  If something goes wrong\n+     */\n+    protected boolean determineChange(DSpaceRunnableHandler handler) throws IOException {\n+        return true;\n+    }\n+\n+    public void setup() throws ParseException {\n+        useTemplate = false;\n+        filename = null;\n+        useWorkflow = false;\n+        workflowNotify = false;\n+\n+        if (commandLine.hasOption('h')) {\n+            help = true;\n+            return;\n+        }\n+\n+        // Check a filename is given\n+        if (!commandLine.hasOption('f')) {\n+            throw new ParseException(\"Required parameter -f missing!\");\n+        }\n+        filename = commandLine.getOptionValue('f');\n+\n+        // Option to apply template to new items\n+        if (commandLine.hasOption('t')) {\n+            useTemplate = true;\n+        }\n+\n+        // Options for workflows, and workflow notifications for new items\n+        if (commandLine.hasOption('w')) {\n+            useWorkflow = true;\n+            if (commandLine.hasOption('n')) {\n+                workflowNotify = true;\n+            }\n+        } else if (commandLine.hasOption('n')) {\n+            throw new ParseException(\n+                \"Invalid option 'n': (notify) can only be specified with the 'w' (workflow) option.\");\n+        }\n+        validateOnly = commandLine.hasOption('v');\n+\n+\n+        // Create a context\n+        try {\n+            c = new Context();\n+            c.turnOffAuthorisationSystem();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5265ebd382097d221b9b9bfc2df708b5819f1fa0"}, "originalPosition": 272}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAzODE4Mw==", "bodyText": "Again, please resolve prior feedback", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r426038183", "createdAt": "2020-05-15T20:44:51Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/app/bulkedit/MetadataImport.java", "diffHunk": "@@ -167,21 +178,201 @@\n      * @param c        The context\n      * @param toImport An array of CSV lines to examine\n      */\n-    public MetadataImport(Context c, DSpaceCSV toImport) {\n+    public void initMetadataImport(DSpaceCSV toImport) {\n         // Store the import settings\n-        this.c = c;\n-        csv = toImport;\n         this.toImport = toImport.getCSVLines();\n-        installItemService = ContentServiceFactory.getInstance().getInstallItemService();\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n-        collectionService = ContentServiceFactory.getInstance().getCollectionService();\n-        handleService = HandleServiceFactory.getInstance().getHandleService();\n-        authorityValueService = AuthorityServiceFactory.getInstance().getAuthorityValueService();\n-        workspaceItemService = ContentServiceFactory.getInstance().getWorkspaceItemService();\n-        relationshipService = ContentServiceFactory.getInstance().getRelationshipService();\n-        relationshipTypeService = ContentServiceFactory.getInstance().getRelationshipTypeService();\n-        entityTypeService = ContentServiceFactory.getInstance().getEntityTypeService();\n-        entityService = ContentServiceFactory.getInstance().getEntityService();\n+    }\n+\n+    @Override\n+    public void internalRun() throws Exception {\n+        if (help) {\n+            printHelp();\n+            return;\n+        }\n+        // Read commandLines from the CSV file\n+        try {\n+\n+            Optional<InputStream> optionalFileStream = handler.getFileStream(c, filename);\n+            if (optionalFileStream.isPresent()) {\n+                csv = new DSpaceCSV(optionalFileStream.get(), c);\n+            } else {\n+                throw new IllegalArgumentException(\"Error reading file, the file couldn't be found for filename: \" +\n+                                                       filename);\n+            }\n+        } catch (MetadataImportInvalidHeadingException miihe) {\n+            throw miihe;\n+        } catch (Exception e) {\n+            throw new Exception(\"Error reading file: \" + e.getMessage(), e);\n+        }\n+\n+        // Perform the first import - just highlight differences\n+        initMetadataImport(csv);\n+        List<BulkEditChange> changes;\n+\n+        if (!commandLine.hasOption('s') || validateOnly) {\n+            // See what has changed\n+            try {\n+                changes = runImport(false, useWorkflow, workflowNotify, useTemplate);\n+            } catch (MetadataImportException mie) {\n+                throw mie;\n+            }\n+\n+            // Display the changes\n+            int changeCounter = displayChanges(changes, false);\n+\n+            // If there were changes, ask if we should execute them\n+            if (!validateOnly && changeCounter > 0) {\n+                try {\n+                    // Ask the user if they want to make the changes\n+                    handler.logInfo(\"\\n\" + changeCounter + \" item(s) will be changed\\n\");\n+                    change = determineChange(handler);\n+\n+                } catch (IOException ioe) {\n+                    throw new IOException(\"Error: \" + ioe.getMessage() + \", No changes have been made\", ioe);\n+                }\n+            } else {\n+                handler.logInfo(\"There were no changes detected\");\n+            }\n+        } else {\n+            change = true;\n+        }\n+\n+        try {\n+            // If required, make the change\n+            if (change && !validateOnly) {\n+                try {\n+                    // Make the changes\n+                    changes = runImport(true, useWorkflow, workflowNotify, useTemplate);\n+                } catch (MetadataImportException mie) {\n+                    throw mie;\n+                }\n+\n+                // Display the changes\n+                displayChanges(changes, true);\n+            }\n+\n+            // Finsh off and tidy up\n+            c.restoreAuthSystemState();\n+            c.complete();\n+        } catch (Exception e) {\n+            c.abort();\n+            throw new Exception(\n+                \"Error committing changes to database: \" + e.getMessage() + \", aborting most recent changes\", e);\n+        }\n+\n+    }\n+\n+    /**\n+     * This method determines whether the changes should be applied or not. This is default set to true for the REST\n+     * script as we don't want to interact with the caller. This will be overwritten in the CLI script to ask for\n+     * confirmation\n+     * @param handler   Applicable DSpaceRunnableHandler\n+     * @return boolean indicating the value\n+     * @throws IOException  If something goes wrong\n+     */\n+    protected boolean determineChange(DSpaceRunnableHandler handler) throws IOException {\n+        return true;\n+    }\n+\n+    public void setup() throws ParseException {\n+        useTemplate = false;\n+        filename = null;\n+        useWorkflow = false;\n+        workflowNotify = false;\n+\n+        if (commandLine.hasOption('h')) {\n+            help = true;\n+            return;\n+        }\n+\n+        // Check a filename is given\n+        if (!commandLine.hasOption('f')) {\n+            throw new ParseException(\"Required parameter -f missing!\");\n+        }\n+        filename = commandLine.getOptionValue('f');\n+\n+        // Option to apply template to new items\n+        if (commandLine.hasOption('t')) {\n+            useTemplate = true;\n+        }\n+\n+        // Options for workflows, and workflow notifications for new items\n+        if (commandLine.hasOption('w')) {\n+            useWorkflow = true;\n+            if (commandLine.hasOption('n')) {\n+                workflowNotify = true;\n+            }\n+        } else if (commandLine.hasOption('n')) {\n+            throw new ParseException(\n+                \"Invalid option 'n': (notify) can only be specified with the 'w' (workflow) option.\");\n+        }\n+        validateOnly = commandLine.hasOption('v');\n+\n+\n+        // Create a context\n+        try {\n+            c = new Context();\n+            c.turnOffAuthorisationSystem();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4ODIyNw=="}, "originalCommit": {"oid": "5265ebd382097d221b9b9bfc2df708b5819f1fa0"}, "originalPosition": 272}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk2ODA5Nw==", "bodyText": "See comment above, same as MetadataExport.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r430968097", "createdAt": "2020-05-27T09:05:22Z", "author": {"login": "KevinVdV"}, "path": "dspace-api/src/main/java/org/dspace/app/bulkedit/MetadataImport.java", "diffHunk": "@@ -167,21 +178,201 @@\n      * @param c        The context\n      * @param toImport An array of CSV lines to examine\n      */\n-    public MetadataImport(Context c, DSpaceCSV toImport) {\n+    public void initMetadataImport(DSpaceCSV toImport) {\n         // Store the import settings\n-        this.c = c;\n-        csv = toImport;\n         this.toImport = toImport.getCSVLines();\n-        installItemService = ContentServiceFactory.getInstance().getInstallItemService();\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n-        collectionService = ContentServiceFactory.getInstance().getCollectionService();\n-        handleService = HandleServiceFactory.getInstance().getHandleService();\n-        authorityValueService = AuthorityServiceFactory.getInstance().getAuthorityValueService();\n-        workspaceItemService = ContentServiceFactory.getInstance().getWorkspaceItemService();\n-        relationshipService = ContentServiceFactory.getInstance().getRelationshipService();\n-        relationshipTypeService = ContentServiceFactory.getInstance().getRelationshipTypeService();\n-        entityTypeService = ContentServiceFactory.getInstance().getEntityTypeService();\n-        entityService = ContentServiceFactory.getInstance().getEntityService();\n+    }\n+\n+    @Override\n+    public void internalRun() throws Exception {\n+        if (help) {\n+            printHelp();\n+            return;\n+        }\n+        // Read commandLines from the CSV file\n+        try {\n+\n+            Optional<InputStream> optionalFileStream = handler.getFileStream(c, filename);\n+            if (optionalFileStream.isPresent()) {\n+                csv = new DSpaceCSV(optionalFileStream.get(), c);\n+            } else {\n+                throw new IllegalArgumentException(\"Error reading file, the file couldn't be found for filename: \" +\n+                                                       filename);\n+            }\n+        } catch (MetadataImportInvalidHeadingException miihe) {\n+            throw miihe;\n+        } catch (Exception e) {\n+            throw new Exception(\"Error reading file: \" + e.getMessage(), e);\n+        }\n+\n+        // Perform the first import - just highlight differences\n+        initMetadataImport(csv);\n+        List<BulkEditChange> changes;\n+\n+        if (!commandLine.hasOption('s') || validateOnly) {\n+            // See what has changed\n+            try {\n+                changes = runImport(false, useWorkflow, workflowNotify, useTemplate);\n+            } catch (MetadataImportException mie) {\n+                throw mie;\n+            }\n+\n+            // Display the changes\n+            int changeCounter = displayChanges(changes, false);\n+\n+            // If there were changes, ask if we should execute them\n+            if (!validateOnly && changeCounter > 0) {\n+                try {\n+                    // Ask the user if they want to make the changes\n+                    handler.logInfo(\"\\n\" + changeCounter + \" item(s) will be changed\\n\");\n+                    change = determineChange(handler);\n+\n+                } catch (IOException ioe) {\n+                    throw new IOException(\"Error: \" + ioe.getMessage() + \", No changes have been made\", ioe);\n+                }\n+            } else {\n+                handler.logInfo(\"There were no changes detected\");\n+            }\n+        } else {\n+            change = true;\n+        }\n+\n+        try {\n+            // If required, make the change\n+            if (change && !validateOnly) {\n+                try {\n+                    // Make the changes\n+                    changes = runImport(true, useWorkflow, workflowNotify, useTemplate);\n+                } catch (MetadataImportException mie) {\n+                    throw mie;\n+                }\n+\n+                // Display the changes\n+                displayChanges(changes, true);\n+            }\n+\n+            // Finsh off and tidy up\n+            c.restoreAuthSystemState();\n+            c.complete();\n+        } catch (Exception e) {\n+            c.abort();\n+            throw new Exception(\n+                \"Error committing changes to database: \" + e.getMessage() + \", aborting most recent changes\", e);\n+        }\n+\n+    }\n+\n+    /**\n+     * This method determines whether the changes should be applied or not. This is default set to true for the REST\n+     * script as we don't want to interact with the caller. This will be overwritten in the CLI script to ask for\n+     * confirmation\n+     * @param handler   Applicable DSpaceRunnableHandler\n+     * @return boolean indicating the value\n+     * @throws IOException  If something goes wrong\n+     */\n+    protected boolean determineChange(DSpaceRunnableHandler handler) throws IOException {\n+        return true;\n+    }\n+\n+    public void setup() throws ParseException {\n+        useTemplate = false;\n+        filename = null;\n+        useWorkflow = false;\n+        workflowNotify = false;\n+\n+        if (commandLine.hasOption('h')) {\n+            help = true;\n+            return;\n+        }\n+\n+        // Check a filename is given\n+        if (!commandLine.hasOption('f')) {\n+            throw new ParseException(\"Required parameter -f missing!\");\n+        }\n+        filename = commandLine.getOptionValue('f');\n+\n+        // Option to apply template to new items\n+        if (commandLine.hasOption('t')) {\n+            useTemplate = true;\n+        }\n+\n+        // Options for workflows, and workflow notifications for new items\n+        if (commandLine.hasOption('w')) {\n+            useWorkflow = true;\n+            if (commandLine.hasOption('n')) {\n+                workflowNotify = true;\n+            }\n+        } else if (commandLine.hasOption('n')) {\n+            throw new ParseException(\n+                \"Invalid option 'n': (notify) can only be specified with the 'w' (workflow) option.\");\n+        }\n+        validateOnly = commandLine.hasOption('v');\n+\n+\n+        // Create a context\n+        try {\n+            c = new Context();\n+            c.turnOffAuthorisationSystem();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc4ODIyNw=="}, "originalCommit": {"oid": "5265ebd382097d221b9b9bfc2df708b5819f1fa0"}, "originalPosition": 272}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzg4NDcxOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/scripts/DSpaceRunnable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjo0OToyMlrOFlbhBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDo0Njo0OVrOGWTWrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc5MjQ1NA==", "bodyText": "Could we describe what the \"epersonIdentifier\" is?  I'm assuming this should actually say something like \"Get the UUID of the EPerson that the script is running as\"?\nSame for setEpersonIdentifier() method below....what the \"epersonIdentifier\" refers to is not currently clear to me. But, I think it likely is the EPerson this script is running as.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r374792454", "createdAt": "2020-02-04T16:49:22Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/scripts/DSpaceRunnable.java", "diffHunk": "@@ -153,4 +170,32 @@ public boolean isAllowedToExecute(Context context) {\n         }\n         return false;\n     }\n+\n+    public void setBeanName(String beanName) {\n+        this.name = beanName;\n+    }\n+\n+    /**\n+     * Generic getter for the name\n+     * @return the name value of this DSpaceRunnable\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Generic getter for the epersonIdentifier", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5265ebd382097d221b9b9bfc2df708b5819f1fa0"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAzODk1Nw==", "bodyText": "Again, please resolve prior feedback", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r426038957", "createdAt": "2020-05-15T20:46:49Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/scripts/DSpaceRunnable.java", "diffHunk": "@@ -153,4 +170,32 @@ public boolean isAllowedToExecute(Context context) {\n         }\n         return false;\n     }\n+\n+    public void setBeanName(String beanName) {\n+        this.name = beanName;\n+    }\n+\n+    /**\n+     * Generic getter for the name\n+     * @return the name value of this DSpaceRunnable\n+     */\n+    public String getName() {\n+        return name;\n+    }\n+\n+    /**\n+     * Generic getter for the epersonIdentifier", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc5MjQ1NA=="}, "originalCommit": {"oid": "5265ebd382097d221b9b9bfc2df708b5819f1fa0"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzkyOTM3OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/ProcessRestController.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzowMToxNFrOFlb9EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMjoyODoyMlrOGbyzeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc5OTYzMw==", "bodyText": "Please rename this class...this is not a generic controller for the processes endpoint, as it looks like most of those requests would use ProcessRestRepository.  Instead, this should be updated to specifically deal with  /processes/files subresource.  So, maybe this should be:\n@RequestMapping(\"/api\" + ProcessRest.CATEGORY + \"/\" + ProcessRest.PLURAL_NAME + \"/files)\npublic class ProcessFilesRestController {", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r374799633", "createdAt": "2020-02-04T17:01:14Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/ProcessRestController.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;\n+import static org.springframework.hateoas.mvc.ControllerLinkBuilder.methodOn;\n+\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.dspace.app.rest.link.HalLinkService;\n+import org.dspace.app.rest.link.process.ProcessResourceHalLinkFactory;\n+import org.dspace.app.rest.model.BitstreamRest;\n+import org.dspace.app.rest.model.ProcessRest;\n+import org.dspace.app.rest.model.hateoas.BitstreamResource;\n+import org.dspace.app.rest.model.hateoas.ProcessFileWrapperResource;\n+import org.dspace.app.rest.repository.ProcessRestRepository;\n+import org.dspace.app.rest.utils.Utils;\n+import org.dspace.authorize.AuthorizeException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.web.PagedResourcesAssembler;\n+import org.springframework.hateoas.Link;\n+import org.springframework.hateoas.PagedResources;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+@RequestMapping(\"/api/\" + ProcessRest.CATEGORY + \"/\" + ProcessRest.PLURAL_NAME)\n+public class ProcessRestController {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5265ebd382097d221b9b9bfc2df708b5819f1fa0"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAzOTg5Mg==", "bodyText": "I think this Controller can now be removed in favor of a LinkRestRepository (see other LinkRestRepository classes as examples).  I don't see a reason why we this needs to a custom Controller", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r426039892", "createdAt": "2020-05-15T20:49:09Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/ProcessRestController.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;\n+import static org.springframework.hateoas.mvc.ControllerLinkBuilder.methodOn;\n+\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.dspace.app.rest.link.HalLinkService;\n+import org.dspace.app.rest.link.process.ProcessResourceHalLinkFactory;\n+import org.dspace.app.rest.model.BitstreamRest;\n+import org.dspace.app.rest.model.ProcessRest;\n+import org.dspace.app.rest.model.hateoas.BitstreamResource;\n+import org.dspace.app.rest.model.hateoas.ProcessFileWrapperResource;\n+import org.dspace.app.rest.repository.ProcessRestRepository;\n+import org.dspace.app.rest.utils.Utils;\n+import org.dspace.authorize.AuthorizeException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.web.PagedResourcesAssembler;\n+import org.springframework.hateoas.Link;\n+import org.springframework.hateoas.PagedResources;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+@RequestMapping(\"/api/\" + ProcessRest.CATEGORY + \"/\" + ProcessRest.PLURAL_NAME)\n+public class ProcessRestController {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc5OTYzMw=="}, "originalCommit": {"oid": "5265ebd382097d221b9b9bfc2df708b5819f1fa0"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc5NzExMg==", "bodyText": "We moved part of the controller to the new \"ProcessFilesLinkRepository\" class, the other ones couldn't. The LinkRestRepository framework does not allow us to further specify a repository than just the Category, Model and Name of the linkRest. This means that we\u2019re stuck at the /files endpoint and can\u2019t further specify path variables or further deeper URL structures. Therefore we need this Controller to take care of it.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r431797112", "createdAt": "2020-05-28T12:28:22Z", "author": {"login": "KevinVdV"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/ProcessRestController.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;\n+import static org.springframework.hateoas.mvc.ControllerLinkBuilder.methodOn;\n+\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.dspace.app.rest.link.HalLinkService;\n+import org.dspace.app.rest.link.process.ProcessResourceHalLinkFactory;\n+import org.dspace.app.rest.model.BitstreamRest;\n+import org.dspace.app.rest.model.ProcessRest;\n+import org.dspace.app.rest.model.hateoas.BitstreamResource;\n+import org.dspace.app.rest.model.hateoas.ProcessFileWrapperResource;\n+import org.dspace.app.rest.repository.ProcessRestRepository;\n+import org.dspace.app.rest.utils.Utils;\n+import org.dspace.authorize.AuthorizeException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.web.PagedResourcesAssembler;\n+import org.springframework.hateoas.Link;\n+import org.springframework.hateoas.PagedResources;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+@RequestMapping(\"/api/\" + ProcessRest.CATEGORY + \"/\" + ProcessRest.PLURAL_NAME)\n+public class ProcessRestController {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc5OTYzMw=="}, "originalCommit": {"oid": "5265ebd382097d221b9b9bfc2df708b5819f1fa0"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzkzMzQ1OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/ProcessRestController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzowMjoyMVrOFlb_ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDo0OTo1MlrOGWTbPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgwMDI5MQ==", "bodyText": "I'm assuming each of these methods should have @PreAuthorize annotations to access restrict files in some way?", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r374800291", "createdAt": "2020-02-04T17:02:21Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/ProcessRestController.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;\n+import static org.springframework.hateoas.mvc.ControllerLinkBuilder.methodOn;\n+\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.dspace.app.rest.link.HalLinkService;\n+import org.dspace.app.rest.link.process.ProcessResourceHalLinkFactory;\n+import org.dspace.app.rest.model.BitstreamRest;\n+import org.dspace.app.rest.model.ProcessRest;\n+import org.dspace.app.rest.model.hateoas.BitstreamResource;\n+import org.dspace.app.rest.model.hateoas.ProcessFileWrapperResource;\n+import org.dspace.app.rest.repository.ProcessRestRepository;\n+import org.dspace.app.rest.utils.Utils;\n+import org.dspace.authorize.AuthorizeException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.web.PagedResourcesAssembler;\n+import org.springframework.hateoas.Link;\n+import org.springframework.hateoas.PagedResources;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+@RequestMapping(\"/api/\" + ProcessRest.CATEGORY + \"/\" + ProcessRest.PLURAL_NAME)\n+public class ProcessRestController {\n+\n+    private static final Logger log = LogManager.getLogger();\n+\n+    @Autowired\n+    HalLinkService linkService;\n+\n+    @Autowired\n+    private ProcessRestRepository processRestRepository;\n+\n+    @Autowired\n+    private Utils utils;\n+\n+    @Autowired\n+    private HalLinkService halLinkService;\n+\n+    @Autowired\n+    ProcessResourceHalLinkFactory processResourceHalLinkFactory;\n+\n+    @RequestMapping(method = RequestMethod.GET, value = \"/{processId}/files\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5265ebd382097d221b9b9bfc2df708b5819f1fa0"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA0MDEyNg==", "bodyText": "All methods will need a @PreAuthorize annotation once you turn this into a LinkRestRepository.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r426040126", "createdAt": "2020-05-15T20:49:52Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/ProcessRestController.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;\n+import static org.springframework.hateoas.mvc.ControllerLinkBuilder.methodOn;\n+\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.dspace.app.rest.link.HalLinkService;\n+import org.dspace.app.rest.link.process.ProcessResourceHalLinkFactory;\n+import org.dspace.app.rest.model.BitstreamRest;\n+import org.dspace.app.rest.model.ProcessRest;\n+import org.dspace.app.rest.model.hateoas.BitstreamResource;\n+import org.dspace.app.rest.model.hateoas.ProcessFileWrapperResource;\n+import org.dspace.app.rest.repository.ProcessRestRepository;\n+import org.dspace.app.rest.utils.Utils;\n+import org.dspace.authorize.AuthorizeException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.web.PagedResourcesAssembler;\n+import org.springframework.hateoas.Link;\n+import org.springframework.hateoas.PagedResources;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+@RequestMapping(\"/api/\" + ProcessRest.CATEGORY + \"/\" + ProcessRest.PLURAL_NAME)\n+public class ProcessRestController {\n+\n+    private static final Logger log = LogManager.getLogger();\n+\n+    @Autowired\n+    HalLinkService linkService;\n+\n+    @Autowired\n+    private ProcessRestRepository processRestRepository;\n+\n+    @Autowired\n+    private Utils utils;\n+\n+    @Autowired\n+    private HalLinkService halLinkService;\n+\n+    @Autowired\n+    ProcessResourceHalLinkFactory processResourceHalLinkFactory;\n+\n+    @RequestMapping(method = RequestMethod.GET, value = \"/{processId}/files\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgwMDI5MQ=="}, "originalCommit": {"oid": "5265ebd382097d221b9b9bfc2df708b5819f1fa0"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzkzNTY2OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/model/ProcessFileWrapperRest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzowMzowMVrOFlcBCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDo1NDoyMlrOGWTiaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgwMDY1MA==", "bodyText": "This class is missing JavaDocs...as are the methods.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r374800650", "createdAt": "2020-02-04T17:03:01Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/model/ProcessFileWrapperRest.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.model;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+\n+public class ProcessFileWrapperRest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5265ebd382097d221b9b9bfc2df708b5819f1fa0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA0MTk2Mw==", "bodyText": "Again, please resolve prior feedback.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r426041963", "createdAt": "2020-05-15T20:54:22Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/model/ProcessFileWrapperRest.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.model;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+\n+public class ProcessFileWrapperRest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgwMDY1MA=="}, "originalCommit": {"oid": "5265ebd382097d221b9b9bfc2df708b5819f1fa0"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzkzNjQ0OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/model/hateoas/ProcessFileWrapperResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzowMzoxNFrOFlcBiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDo1NDoyOFrOGWTijw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgwMDc3Ng==", "bodyText": "This class is also missing JavaDocs", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r374800776", "createdAt": "2020-02-04T17:03:14Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/model/hateoas/ProcessFileWrapperResource.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.model.hateoas;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.dspace.app.rest.model.BitstreamRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.model.ProcessFileWrapperRest;\n+import org.dspace.app.rest.utils.Utils;\n+\n+\n+public class ProcessFileWrapperResource extends HALResource<ProcessFileWrapperRest> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5265ebd382097d221b9b9bfc2df708b5819f1fa0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA0MTk5OQ==", "bodyText": "Again, please resolve prior feedback.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r426041999", "createdAt": "2020-05-15T20:54:28Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/model/hateoas/ProcessFileWrapperResource.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.model.hateoas;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.dspace.app.rest.model.BitstreamRest;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.model.ProcessFileWrapperRest;\n+import org.dspace.app.rest.utils.Utils;\n+\n+\n+public class ProcessFileWrapperResource extends HALResource<ProcessFileWrapperRest> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgwMDc3Ng=="}, "originalCommit": {"oid": "5265ebd382097d221b9b9bfc2df708b5819f1fa0"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzkzODg5OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ProcessRestRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzowMzo0OFrOFlcC_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDo1NDozN1rOGWTitQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgwMTE0OA==", "bodyText": "Please add JavaDocs to all the new methods in this class", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r374801148", "createdAt": "2020-02-04T17:03:48Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ProcessRestRepository.java", "diffHunk": "@@ -59,6 +77,64 @@ public ProcessRest findOne(Context context, Integer id) {\n         }\n     }\n \n+    public List<BitstreamRest> getProcessBitstreams(Integer processId) throws SQLException, AuthorizeException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5265ebd382097d221b9b9bfc2df708b5819f1fa0"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA0MjAzNw==", "bodyText": "Again, please resolve prior feedback.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r426042037", "createdAt": "2020-05-15T20:54:37Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ProcessRestRepository.java", "diffHunk": "@@ -59,6 +77,64 @@ public ProcessRest findOne(Context context, Integer id) {\n         }\n     }\n \n+    public List<BitstreamRest> getProcessBitstreams(Integer processId) throws SQLException, AuthorizeException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgwMTE0OA=="}, "originalCommit": {"oid": "5265ebd382097d221b9b9bfc2df708b5819f1fa0"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzk1Nzc5OnYy", "diffSide": "RIGHT", "path": "dspace/config/registries/process-types.xml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzowOToyNFrOFlcPLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOToxNToxNVrOGbAlPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgwNDI3MQ==", "bodyText": "This should have a scope note, as its purpose is unclear...and it sounds like we do not want people to use this field. I'm also not sure I like having a schema with a single metadata field.  We should think about creating a dspace schema for fields that are internal, rather than creating new schemas every time we need an internal field.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r374804271", "createdAt": "2020-02-04T17:09:24Z", "author": {"login": "tdonohue"}, "path": "dspace/config/registries/process-types.xml", "diffHunk": "@@ -0,0 +1,20 @@\n+<dspace-dc-types>\n+\n+    <dspace-header>\n+        <title>DSpace Process Types</title>\n+    </dspace-header>\n+\n+    <dc-schema>\n+        <name>process</name>\n+        <namespace>http://dspace.org/process</namespace>\n+    </dc-schema>\n+\n+    <dc-type>\n+        <schema>process</schema>\n+        <element>type</element>\n+        <qualifier></qualifier>\n+        <scope_note></scope_note>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5265ebd382097d221b9b9bfc2df708b5819f1fa0"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA0MjMzOQ==", "bodyText": "Again, please resolve prior feedback.  I'm unclear of the purpose of this field, but I still don't think we should be creating a schema with only one metadata field within it.  If we need this field, we should take this opportunity to create a \"dspace\" schema and call this \"dspace.process.type\"", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r426042339", "createdAt": "2020-05-15T20:55:16Z", "author": {"login": "tdonohue"}, "path": "dspace/config/registries/process-types.xml", "diffHunk": "@@ -0,0 +1,20 @@\n+<dspace-dc-types>\n+\n+    <dspace-header>\n+        <title>DSpace Process Types</title>\n+    </dspace-header>\n+\n+    <dc-schema>\n+        <name>process</name>\n+        <namespace>http://dspace.org/process</namespace>\n+    </dc-schema>\n+\n+    <dc-type>\n+        <schema>process</schema>\n+        <element>type</element>\n+        <qualifier></qualifier>\n+        <scope_note></scope_note>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgwNDI3MQ=="}, "originalCommit": {"oid": "5265ebd382097d221b9b9bfc2df708b5819f1fa0"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3NDI3MQ==", "bodyText": "The metadata field was moved to a new \"dspace\" schema. We need to store the file type because we need to group files by type in our rest output, can be seen here: https://github.com/DSpace/Rest7Contract/blob/master/processes-endpoint.md#execution-file-output-list", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r430974271", "createdAt": "2020-05-27T09:15:15Z", "author": {"login": "KevinVdV"}, "path": "dspace/config/registries/process-types.xml", "diffHunk": "@@ -0,0 +1,20 @@\n+<dspace-dc-types>\n+\n+    <dspace-header>\n+        <title>DSpace Process Types</title>\n+    </dspace-header>\n+\n+    <dc-schema>\n+        <name>process</name>\n+        <namespace>http://dspace.org/process</namespace>\n+    </dc-schema>\n+\n+    <dc-type>\n+        <schema>process</schema>\n+        <element>type</element>\n+        <qualifier></qualifier>\n+        <scope_note></scope_note>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgwNDI3MQ=="}, "originalCommit": {"oid": "5265ebd382097d221b9b9bfc2df708b5819f1fa0"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzk2OTgxOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/app/bulkedit/MetadataExport.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzoxMjo1M1rOFlcWxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDo0MToyM1rOGWTOpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgwNjIxMg==", "bodyText": "Since this \"type\" of \"exportCSV\" is going to end up saved into a metadata field (process.type), should we consider using a constant for the value (maybe in the Process class or similar?).  It seems odd to hardcode it if the value means something to the Process.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r374806212", "createdAt": "2020-02-04T17:12:53Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/app/bulkedit/MetadataExport.java", "diffHunk": "@@ -7,272 +7,101 @@\n  */\n package org.dspace.app.bulkedit;\n \n+import java.io.OutputStream;\n import java.sql.SQLException;\n-import java.util.ArrayList;\n-import java.util.Iterator;\n-import java.util.List;\n \n-import com.google.common.collect.Iterators;\n-import org.apache.commons.cli.CommandLine;\n-import org.apache.commons.cli.CommandLineParser;\n-import org.apache.commons.cli.HelpFormatter;\n import org.apache.commons.cli.Options;\n import org.apache.commons.cli.ParseException;\n-import org.apache.commons.cli.PosixParser;\n-import org.dspace.content.Collection;\n-import org.dspace.content.Community;\n-import org.dspace.content.DSpaceObject;\n-import org.dspace.content.Item;\n-import org.dspace.content.factory.ContentServiceFactory;\n-import org.dspace.content.service.ItemService;\n-import org.dspace.core.Constants;\n+import org.dspace.content.service.MetadataDSpaceCsvExportService;\n import org.dspace.core.Context;\n-import org.dspace.handle.factory.HandleServiceFactory;\n+import org.dspace.eperson.service.EPersonService;\n+import org.dspace.scripts.DSpaceRunnable;\n+import org.springframework.beans.factory.annotation.Autowired;\n \n /**\n  * Metadata exporter to allow the batch export of metadata into a file\n  *\n  * @author Stuart Lewis\n  */\n-public class MetadataExport {\n-    /**\n-     * The items to export\n-     */\n-    protected Iterator<Item> toExport;\n+public class MetadataExport extends DSpaceRunnable {\n \n-    protected ItemService itemService;\n+    private Context context = null;\n+    private boolean help = false;\n+    private String filename = null;\n+    private String handle = null;\n+    private boolean exportAllMetadata = false;\n+    private boolean exportAllItems = false;\n \n-    protected Context context;\n+    @Autowired\n+    private MetadataDSpaceCsvExportService metadataDSpaceCsvExportService;\n \n-    /**\n-     * Whether to export all metadata, or just normally edited metadata\n-     */\n-    protected boolean exportAll;\n+    @Autowired\n+    private EPersonService ePersonService;\n \n-    protected MetadataExport() {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n+    private MetadataExport() {\n+        this.options = constructOptions();\n     }\n \n-    /**\n-     * Set up a new metadata export\n-     *\n-     * @param c         The Context\n-     * @param toExport  The ItemIterator of items to export\n-     * @param exportAll whether to export all metadata or not (include handle, provenance etc)\n-     */\n-    public MetadataExport(Context c, Iterator<Item> toExport, boolean exportAll) {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n-\n-        // Store the export settings\n-        this.toExport = toExport;\n-        this.exportAll = exportAll;\n-        this.context = c;\n-    }\n-\n-    /**\n-     * Method to export a community (and sub-communities and collections)\n-     *\n-     * @param c         The Context\n-     * @param toExport  The Community to export\n-     * @param exportAll whether to export all metadata or not (include handle, provenance etc)\n-     */\n-    public MetadataExport(Context c, Community toExport, boolean exportAll) {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n-\n-        try {\n-            // Try to export the community\n-            this.toExport = buildFromCommunity(c, toExport, 0);\n-            this.exportAll = exportAll;\n-            this.context = c;\n-        } catch (SQLException sqle) {\n-            // Something went wrong...\n-            System.err.println(\"Error running exporter:\");\n-            sqle.printStackTrace(System.err);\n-            System.exit(1);\n-        }\n-    }\n-\n-    /**\n-     * Build an array list of item ids that are in a community (include sub-communities and collections)\n-     *\n-     * @param context   DSpace context\n-     * @param community The community to build from\n-     * @param indent    How many spaces to use when writing out the names of items added\n-     * @return The list of item ids\n-     * @throws SQLException if database error\n-     */\n-    protected Iterator<Item> buildFromCommunity(Context context, Community community, int indent)\n-        throws SQLException {\n-        // Add all the collections\n-        List<Collection> collections = community.getCollections();\n-        Iterator<Item> result = null;\n-        for (Collection collection : collections) {\n-            for (int i = 0; i < indent; i++) {\n-                System.out.print(\" \");\n-            }\n-\n-            Iterator<Item> items = itemService.findByCollection(context, collection);\n-            result = addItemsToResult(result, items);\n-\n-        }\n-        // Add all the sub-communities\n-        List<Community> communities = community.getSubcommunities();\n-        for (Community subCommunity : communities) {\n-            for (int i = 0; i < indent; i++) {\n-                System.out.print(\" \");\n-            }\n-            Iterator<Item> items = buildFromCommunity(context, subCommunity, indent + 1);\n-            result = addItemsToResult(result, items);\n-        }\n-\n-        return result;\n-    }\n-\n-    private Iterator<Item> addItemsToResult(Iterator<Item> result, Iterator<Item> items) {\n-        if (result == null) {\n-            result = items;\n-        } else {\n-            result = Iterators.concat(result, items);\n-        }\n-\n-        return result;\n-    }\n-\n-    /**\n-     * Run the export\n-     *\n-     * @return the exported CSV lines\n-     */\n-    public DSpaceCSV export() {\n-        try {\n-            Context.Mode originalMode = context.getCurrentMode();\n-            context.setMode(Context.Mode.READ_ONLY);\n-\n-            // Process each item\n-            DSpaceCSV csv = new DSpaceCSV(exportAll);\n-            while (toExport.hasNext()) {\n-                Item item = toExport.next();\n-                csv.addItem(item);\n-                context.uncacheEntity(item);\n-            }\n-\n-            context.setMode(originalMode);\n-            // Return the results\n-            return csv;\n-        } catch (Exception e) {\n-            // Something went wrong...\n-            System.err.println(\"Error exporting to CSV:\");\n-            e.printStackTrace();\n-            return null;\n-        }\n-    }\n-\n-    /**\n-     * Print the help message\n-     *\n-     * @param options  The command line options the user gave\n-     * @param exitCode the system exit code to use\n-     */\n-    private static void printHelp(Options options, int exitCode) {\n-        // print the help message\n-        HelpFormatter myhelp = new HelpFormatter();\n-        myhelp.printHelp(\"MetadataExport\\n\", options);\n-        System.out.println(\"\\nfull export: metadataexport -f filename\");\n-        System.out.println(\"partial export: metadataexport -i handle -f filename\");\n-        System.exit(exitCode);\n-    }\n-\n-    /**\n-     * main method to run the metadata exporter\n-     *\n-     * @param argv the command line arguments given\n-     * @throws Exception if error occurs\n-     */\n-    public static void main(String[] argv) throws Exception {\n-        // Create an options object and populate it\n-        CommandLineParser parser = new PosixParser();\n-\n+    private Options constructOptions() {\n         Options options = new Options();\n \n         options.addOption(\"i\", \"id\", true, \"ID or handle of thing to export (item, collection, or community)\");\n+        options.getOption(\"i\").setType(String.class);\n         options.addOption(\"f\", \"file\", true, \"destination where you want file written\");\n+        options.getOption(\"f\").setType(OutputStream.class);\n+        options.getOption(\"f\").setRequired(true);\n         options.addOption(\"a\", \"all\", false,\n                           \"include all metadata fields that are not normally changed (e.g. provenance)\");\n+        options.getOption(\"a\").setType(boolean.class);\n         options.addOption(\"h\", \"help\", false, \"help\");\n+        options.getOption(\"h\").setType(boolean.class);\n \n-        CommandLine line = null;\n-\n-        try {\n-            line = parser.parse(options, argv);\n-        } catch (ParseException pe) {\n-            System.err.println(\"Error with commands.\");\n-            printHelp(options, 1);\n-            System.exit(0);\n-        }\n \n-        if (line.hasOption('h')) {\n-            printHelp(options, 0);\n-        }\n+        return options;\n+    }\n \n-        // Check a filename is given\n-        if (!line.hasOption('f')) {\n-            System.err.println(\"Required parameter -f missing!\");\n-            printHelp(options, 1);\n+    public void internalRun() throws Exception {\n+        if (help) {\n+            handler.logInfo(\"\\nfull export: metadata-export -f filename\");\n+            handler.logInfo(\"partial export: metadata-export -i handle -f filename\");\n+            printHelp();\n+            return;\n         }\n-        String filename = line.getOptionValue('f');\n \n-        // Create a context\n-        Context c = new Context(Context.Mode.READ_ONLY);\n-        c.turnOffAuthorisationSystem();\n-\n-        // The things we'll export\n-        Iterator<Item> toExport = null;\n-        MetadataExport exporter = null;\n+        DSpaceCSV dSpaceCSV = metadataDSpaceCsvExportService\n+            .handleExport(context, exportAllItems, exportAllMetadata, handle,\n+                          handler);\n+        handler.writeFilestream(context, filename, dSpaceCSV.getInputStream(), \"exportCSV\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5265ebd382097d221b9b9bfc2df708b5819f1fa0"}, "originalPosition": 260}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAzNjkwMA==", "bodyText": "Again, please resolve prior feedback here.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r426036900", "createdAt": "2020-05-15T20:41:23Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/app/bulkedit/MetadataExport.java", "diffHunk": "@@ -7,272 +7,101 @@\n  */\n package org.dspace.app.bulkedit;\n \n+import java.io.OutputStream;\n import java.sql.SQLException;\n-import java.util.ArrayList;\n-import java.util.Iterator;\n-import java.util.List;\n \n-import com.google.common.collect.Iterators;\n-import org.apache.commons.cli.CommandLine;\n-import org.apache.commons.cli.CommandLineParser;\n-import org.apache.commons.cli.HelpFormatter;\n import org.apache.commons.cli.Options;\n import org.apache.commons.cli.ParseException;\n-import org.apache.commons.cli.PosixParser;\n-import org.dspace.content.Collection;\n-import org.dspace.content.Community;\n-import org.dspace.content.DSpaceObject;\n-import org.dspace.content.Item;\n-import org.dspace.content.factory.ContentServiceFactory;\n-import org.dspace.content.service.ItemService;\n-import org.dspace.core.Constants;\n+import org.dspace.content.service.MetadataDSpaceCsvExportService;\n import org.dspace.core.Context;\n-import org.dspace.handle.factory.HandleServiceFactory;\n+import org.dspace.eperson.service.EPersonService;\n+import org.dspace.scripts.DSpaceRunnable;\n+import org.springframework.beans.factory.annotation.Autowired;\n \n /**\n  * Metadata exporter to allow the batch export of metadata into a file\n  *\n  * @author Stuart Lewis\n  */\n-public class MetadataExport {\n-    /**\n-     * The items to export\n-     */\n-    protected Iterator<Item> toExport;\n+public class MetadataExport extends DSpaceRunnable {\n \n-    protected ItemService itemService;\n+    private Context context = null;\n+    private boolean help = false;\n+    private String filename = null;\n+    private String handle = null;\n+    private boolean exportAllMetadata = false;\n+    private boolean exportAllItems = false;\n \n-    protected Context context;\n+    @Autowired\n+    private MetadataDSpaceCsvExportService metadataDSpaceCsvExportService;\n \n-    /**\n-     * Whether to export all metadata, or just normally edited metadata\n-     */\n-    protected boolean exportAll;\n+    @Autowired\n+    private EPersonService ePersonService;\n \n-    protected MetadataExport() {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n+    private MetadataExport() {\n+        this.options = constructOptions();\n     }\n \n-    /**\n-     * Set up a new metadata export\n-     *\n-     * @param c         The Context\n-     * @param toExport  The ItemIterator of items to export\n-     * @param exportAll whether to export all metadata or not (include handle, provenance etc)\n-     */\n-    public MetadataExport(Context c, Iterator<Item> toExport, boolean exportAll) {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n-\n-        // Store the export settings\n-        this.toExport = toExport;\n-        this.exportAll = exportAll;\n-        this.context = c;\n-    }\n-\n-    /**\n-     * Method to export a community (and sub-communities and collections)\n-     *\n-     * @param c         The Context\n-     * @param toExport  The Community to export\n-     * @param exportAll whether to export all metadata or not (include handle, provenance etc)\n-     */\n-    public MetadataExport(Context c, Community toExport, boolean exportAll) {\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n-\n-        try {\n-            // Try to export the community\n-            this.toExport = buildFromCommunity(c, toExport, 0);\n-            this.exportAll = exportAll;\n-            this.context = c;\n-        } catch (SQLException sqle) {\n-            // Something went wrong...\n-            System.err.println(\"Error running exporter:\");\n-            sqle.printStackTrace(System.err);\n-            System.exit(1);\n-        }\n-    }\n-\n-    /**\n-     * Build an array list of item ids that are in a community (include sub-communities and collections)\n-     *\n-     * @param context   DSpace context\n-     * @param community The community to build from\n-     * @param indent    How many spaces to use when writing out the names of items added\n-     * @return The list of item ids\n-     * @throws SQLException if database error\n-     */\n-    protected Iterator<Item> buildFromCommunity(Context context, Community community, int indent)\n-        throws SQLException {\n-        // Add all the collections\n-        List<Collection> collections = community.getCollections();\n-        Iterator<Item> result = null;\n-        for (Collection collection : collections) {\n-            for (int i = 0; i < indent; i++) {\n-                System.out.print(\" \");\n-            }\n-\n-            Iterator<Item> items = itemService.findByCollection(context, collection);\n-            result = addItemsToResult(result, items);\n-\n-        }\n-        // Add all the sub-communities\n-        List<Community> communities = community.getSubcommunities();\n-        for (Community subCommunity : communities) {\n-            for (int i = 0; i < indent; i++) {\n-                System.out.print(\" \");\n-            }\n-            Iterator<Item> items = buildFromCommunity(context, subCommunity, indent + 1);\n-            result = addItemsToResult(result, items);\n-        }\n-\n-        return result;\n-    }\n-\n-    private Iterator<Item> addItemsToResult(Iterator<Item> result, Iterator<Item> items) {\n-        if (result == null) {\n-            result = items;\n-        } else {\n-            result = Iterators.concat(result, items);\n-        }\n-\n-        return result;\n-    }\n-\n-    /**\n-     * Run the export\n-     *\n-     * @return the exported CSV lines\n-     */\n-    public DSpaceCSV export() {\n-        try {\n-            Context.Mode originalMode = context.getCurrentMode();\n-            context.setMode(Context.Mode.READ_ONLY);\n-\n-            // Process each item\n-            DSpaceCSV csv = new DSpaceCSV(exportAll);\n-            while (toExport.hasNext()) {\n-                Item item = toExport.next();\n-                csv.addItem(item);\n-                context.uncacheEntity(item);\n-            }\n-\n-            context.setMode(originalMode);\n-            // Return the results\n-            return csv;\n-        } catch (Exception e) {\n-            // Something went wrong...\n-            System.err.println(\"Error exporting to CSV:\");\n-            e.printStackTrace();\n-            return null;\n-        }\n-    }\n-\n-    /**\n-     * Print the help message\n-     *\n-     * @param options  The command line options the user gave\n-     * @param exitCode the system exit code to use\n-     */\n-    private static void printHelp(Options options, int exitCode) {\n-        // print the help message\n-        HelpFormatter myhelp = new HelpFormatter();\n-        myhelp.printHelp(\"MetadataExport\\n\", options);\n-        System.out.println(\"\\nfull export: metadataexport -f filename\");\n-        System.out.println(\"partial export: metadataexport -i handle -f filename\");\n-        System.exit(exitCode);\n-    }\n-\n-    /**\n-     * main method to run the metadata exporter\n-     *\n-     * @param argv the command line arguments given\n-     * @throws Exception if error occurs\n-     */\n-    public static void main(String[] argv) throws Exception {\n-        // Create an options object and populate it\n-        CommandLineParser parser = new PosixParser();\n-\n+    private Options constructOptions() {\n         Options options = new Options();\n \n         options.addOption(\"i\", \"id\", true, \"ID or handle of thing to export (item, collection, or community)\");\n+        options.getOption(\"i\").setType(String.class);\n         options.addOption(\"f\", \"file\", true, \"destination where you want file written\");\n+        options.getOption(\"f\").setType(OutputStream.class);\n+        options.getOption(\"f\").setRequired(true);\n         options.addOption(\"a\", \"all\", false,\n                           \"include all metadata fields that are not normally changed (e.g. provenance)\");\n+        options.getOption(\"a\").setType(boolean.class);\n         options.addOption(\"h\", \"help\", false, \"help\");\n+        options.getOption(\"h\").setType(boolean.class);\n \n-        CommandLine line = null;\n-\n-        try {\n-            line = parser.parse(options, argv);\n-        } catch (ParseException pe) {\n-            System.err.println(\"Error with commands.\");\n-            printHelp(options, 1);\n-            System.exit(0);\n-        }\n \n-        if (line.hasOption('h')) {\n-            printHelp(options, 0);\n-        }\n+        return options;\n+    }\n \n-        // Check a filename is given\n-        if (!line.hasOption('f')) {\n-            System.err.println(\"Required parameter -f missing!\");\n-            printHelp(options, 1);\n+    public void internalRun() throws Exception {\n+        if (help) {\n+            handler.logInfo(\"\\nfull export: metadata-export -f filename\");\n+            handler.logInfo(\"partial export: metadata-export -i handle -f filename\");\n+            printHelp();\n+            return;\n         }\n-        String filename = line.getOptionValue('f');\n \n-        // Create a context\n-        Context c = new Context(Context.Mode.READ_ONLY);\n-        c.turnOffAuthorisationSystem();\n-\n-        // The things we'll export\n-        Iterator<Item> toExport = null;\n-        MetadataExport exporter = null;\n+        DSpaceCSV dSpaceCSV = metadataDSpaceCsvExportService\n+            .handleExport(context, exportAllItems, exportAllMetadata, handle,\n+                          handler);\n+        handler.writeFilestream(context, filename, dSpaceCSV.getInputStream(), \"exportCSV\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgwNjIxMg=="}, "originalCommit": {"oid": "5265ebd382097d221b9b9bfc2df708b5819f1fa0"}, "originalPosition": 260}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDU1NTI4OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/scripts/DSpaceRunnable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwOToxNDowMlrOFtKT4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwOToxNDowMlrOFtKT4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg5OTE2OQ==", "bodyText": "if this attribute hold information related to a specific execution this imply that the bean needs to be declared as prototype or we need to force a single thread model. Both options are suboptimal, am I misreading?", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r382899169", "createdAt": "2020-02-22T09:14:02Z", "author": {"login": "abollini"}, "path": "dspace-api/src/main/java/org/dspace/scripts/DSpaceRunnable.java", "diffHunk": "@@ -24,8 +31,9 @@\n  * it provides the basic variables to be hold by the script as well as the means to initialize, parse and run the script\n  * Every DSpaceRunnable that is implemented in this way should be defined in the scripts.xml config file as a bean\n  */\n-public abstract class DSpaceRunnable implements Runnable {\n+public abstract class DSpaceRunnable implements Runnable, BeanNameAware {\n \n+    private UUID epersonIdentifier;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90073abfb7b7ffec2482751dd6ad92939ec874b0"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mjk5MTM4OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/app/bulkedit/DSpaceCSV.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDozODowOFrOGWTJaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDozODowOFrOGWTJaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAzNTU2Mw==", "bodyText": "Once you update the import to be StandardCharsets, this line should likely replace \"UTF-8\" with StandardCharsets.UTF_8 for consistency.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r426035563", "createdAt": "2020-05-15T20:38:08Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/app/bulkedit/DSpaceCSV.java", "diffHunk": "@@ -141,18 +138,18 @@ public DSpaceCSV(boolean exportAll) {\n     /**\n      * Create a new instance, reading the lines in from file\n      *\n-     * @param f The file to read from\n+     * @param inputStream the inputstream to read from\n      * @param c The DSpace Context\n      * @throws Exception thrown if there is an error reading or processing the file\n      */\n-    public DSpaceCSV(File f, Context c) throws Exception {\n+    public DSpaceCSV(InputStream inputStream, Context c) throws Exception {\n         // Initialise the class\n         init();\n \n         // Open the CSV file\n         BufferedReader input = null;\n         try {\n-            input = new BufferedReader(new InputStreamReader(new FileInputStream(f), \"UTF-8\"));\n+            input = new BufferedReader(new InputStreamReader(inputStream, \"UTF-8\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "026c2308eccf07a5f60dbf9572c264c028598f48"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mjk5MTU4OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/app/bulkedit/DSpaceCSV.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDozODoxNFrOGWTJjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDozODoxNFrOGWTJjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjAzNTU5OQ==", "bodyText": "Please add JavaDocs to this new public method.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r426035599", "createdAt": "2020-05-15T20:38:14Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/app/bulkedit/DSpaceCSV.java", "diffHunk": "@@ -622,22 +619,12 @@ public final void addItem(String line) throws Exception {\n         return csvLines;\n     }\n \n-    /**\n-     * Save the CSV file to the given filename\n-     *\n-     * @param filename The filename to save the CSV file to\n-     * @throws IOException Thrown if an error occurs when writing the file\n-     */\n-    public final void save(String filename) throws IOException {\n-        // Save the file\n-        BufferedWriter out = new BufferedWriter(\n-            new OutputStreamWriter(\n-                new FileOutputStream(filename), \"UTF-8\"));\n+    public InputStream getInputStream() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "026c2308eccf07a5f60dbf9572c264c028598f48"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzAyNzk0OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/link/process/ProcessHalLinkFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDo1MzozOFrOGWThAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMDo1MzozOFrOGWThAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA0MTYwMw==", "bodyText": "Needs JavaDocs to describe this abstract class.  This is especially important because it's an empty class, so we need to describe why it's needed.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r426041603", "createdAt": "2020-05-15T20:53:38Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/link/process/ProcessHalLinkFactory.java", "diffHunk": "@@ -0,0 +1,14 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.link.process;\n+\n+import org.dspace.app.rest.ProcessRestController;\n+import org.dspace.app.rest.link.HalLinkFactory;\n+\n+public abstract class ProcessHalLinkFactory<T> extends HalLinkFactory<T, ProcessRestController> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "026c2308eccf07a5f60dbf9572c264c028598f48"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDQ5NDc2OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/content/MetadataDSpaceCsvExportServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNjoyOTo1NFrOGb9SeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNjoyOTo1NFrOGb9SeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk2ODg4OQ==", "bodyText": "Please add Javadocs describing this implementation class", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r431968889", "createdAt": "2020-05-28T16:29:54Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/content/MetadataDSpaceCsvExportServiceImpl.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.content;\n+\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import com.google.common.collect.Iterators;\n+import org.dspace.app.bulkedit.DSpaceCSV;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.content.service.MetadataDSpaceCsvExportService;\n+import org.dspace.core.Constants;\n+import org.dspace.core.Context;\n+import org.dspace.handle.factory.HandleServiceFactory;\n+import org.dspace.scripts.handler.DSpaceRunnableHandler;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class MetadataDSpaceCsvExportServiceImpl implements MetadataDSpaceCsvExportService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8652e95686edf28f6431dd0f9e035e147ed01852"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDUwNjkwOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/app/bulkedit/MetadataImport.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNjozMjo1N1rOGb9aBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNjozMjo1N1rOGb9aBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk3MDgyMg==", "bodyText": "Tiny thing, we likely can remove this Try/Catch, as we usually don't do this when creating a new Context (see the code you wrote in MetadataExport).  If there's a need for it you've discovered, then I'd recommend we throw a RuntimeException here (not a ParseException), and also return the stacktrace, as e.getMessage() may not be enough info to know why the Context couldn't be created.  So, if you need the try/catch, this last line should be throw new RuntimeException(\"Unable to create a new DSpace Context\", e);", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r431970822", "createdAt": "2020-05-28T16:32:57Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/app/bulkedit/MetadataImport.java", "diffHunk": "@@ -143,45 +133,213 @@\n      */\n     protected Integer rowCount = 1;\n \n+    private boolean useTemplate = false;\n+    private String filename = null;\n+    private boolean useWorkflow = false;\n+    private boolean workflowNotify = false;\n+    private boolean change = false;\n+    private boolean help = false;\n+    protected boolean validateOnly;\n+\n     /**\n      * Logger\n      */\n     protected static final Logger log = org.apache.logging.log4j.LogManager.getLogger(MetadataImport.class);\n \n-    protected final AuthorityValueService authorityValueService;\n-\n-    protected final ItemService itemService;\n-    protected final InstallItemService installItemService;\n-    protected final CollectionService collectionService;\n-    protected final HandleService handleService;\n-    protected final WorkspaceItemService workspaceItemService;\n-    protected final RelationshipTypeService relationshipTypeService;\n-    protected final RelationshipService relationshipService;\n-    protected final EntityTypeService entityTypeService;\n-    protected final EntityService entityService;\n+    protected ItemService itemService = ContentServiceFactory.getInstance().getItemService();\n+    protected InstallItemService installItemService = ContentServiceFactory.getInstance().getInstallItemService();\n+    protected CollectionService collectionService = ContentServiceFactory.getInstance().getCollectionService();\n+    protected HandleService handleService = HandleServiceFactory.getInstance().getHandleService();\n+    protected WorkspaceItemService workspaceItemService = ContentServiceFactory.getInstance().getWorkspaceItemService();\n+    protected RelationshipTypeService relationshipTypeService = ContentServiceFactory.getInstance()\n+                                                                                     .getRelationshipTypeService();\n+    protected RelationshipService relationshipService = ContentServiceFactory.getInstance().getRelationshipService();\n+    protected EntityTypeService entityTypeService = ContentServiceFactory.getInstance().getEntityTypeService();\n+    protected EntityService entityService = ContentServiceFactory.getInstance().getEntityService();\n+    protected AuthorityValueService authorityValueService = AuthorityServiceFactory.getInstance()\n+                                                                                   .getAuthorityValueService();\n \n     /**\n      * Create an instance of the metadata importer. Requires a context and an array of CSV lines\n      * to examine.\n      *\n-     * @param c        The context\n      * @param toImport An array of CSV lines to examine\n      */\n-    public MetadataImport(Context c, DSpaceCSV toImport) {\n+    public void initMetadataImport(DSpaceCSV toImport) {\n         // Store the import settings\n-        this.c = c;\n-        csv = toImport;\n         this.toImport = toImport.getCSVLines();\n-        installItemService = ContentServiceFactory.getInstance().getInstallItemService();\n-        itemService = ContentServiceFactory.getInstance().getItemService();\n-        collectionService = ContentServiceFactory.getInstance().getCollectionService();\n-        handleService = HandleServiceFactory.getInstance().getHandleService();\n-        authorityValueService = AuthorityServiceFactory.getInstance().getAuthorityValueService();\n-        workspaceItemService = ContentServiceFactory.getInstance().getWorkspaceItemService();\n-        relationshipService = ContentServiceFactory.getInstance().getRelationshipService();\n-        relationshipTypeService = ContentServiceFactory.getInstance().getRelationshipTypeService();\n-        entityTypeService = ContentServiceFactory.getInstance().getEntityTypeService();\n-        entityService = ContentServiceFactory.getInstance().getEntityService();\n+    }\n+\n+    @Override\n+    public void internalRun() throws Exception {\n+        if (help) {\n+            printHelp();\n+            return;\n+        }\n+        // Create a context\n+        Context c = null;\n+        try {\n+            c = new Context();\n+            c.turnOffAuthorisationSystem();\n+        } catch (Exception e) {\n+            throw new ParseException(\"Unable to create a new DSpace Context: \" + e.getMessage());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8652e95686edf28f6431dd0f9e035e147ed01852"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTQ5NDEwOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/scripts/DSpaceRunnable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMToyNToxNFrOGcHSRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMToyNToxNFrOGcHSRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEzMjY3Nw==", "bodyText": "We've lost the JavaDocs on this class. It used to have some, but they may need updating anyways based on the changes to this class.  So, please add new JavaDocs.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r432132677", "createdAt": "2020-05-28T21:25:14Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/scripts/DSpaceRunnable.java", "diffHunk": "@@ -7,70 +7,65 @@\n  */\n package org.dspace.scripts;\n \n-import java.sql.SQLException;\n+import java.io.InputStream;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.UUID;\n \n import org.apache.commons.cli.CommandLine;\n import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.Option;\n import org.apache.commons.cli.Options;\n import org.apache.commons.cli.ParseException;\n-import org.dspace.authorize.service.AuthorizeService;\n-import org.dspace.core.Context;\n+import org.apache.commons.lang3.StringUtils;\n+import org.dspace.eperson.EPerson;\n+import org.dspace.scripts.configuration.ScriptConfiguration;\n import org.dspace.scripts.handler.DSpaceRunnableHandler;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Required;\n \n-/**\n- * This abstract class is the class that should be extended by each script.\n- * it provides the basic variables to be hold by the script as well as the means to initialize, parse and run the script\n- * Every DSpaceRunnable that is implemented in this way should be defined in the scripts.xml config file as a bean\n- */\n-public abstract class DSpaceRunnable implements Runnable {\n+public abstract class DSpaceRunnable<T extends ScriptConfiguration> implements Runnable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8652e95686edf28f6431dd0f9e035e147ed01852"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTUzMjExOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/scripts/ProcessServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMTozNzo0MFrOGcHpoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMTozNzo0MFrOGcHpoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEzODY1Nw==", "bodyText": "Small thing, but I wonder if dspace.process.type should be a constant, so that we don't have to remember what this field is called.  This is not a required change though, the PR can proceed without it.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r432138657", "createdAt": "2020-05-28T21:37:40Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/scripts/ProcessServiceImpl.java", "diffHunk": "@@ -141,6 +177,34 @@ public void update(Context context, Process process) throws SQLException {\n         return parameterList;\n     }\n \n+    @Override\n+    public Bitstream getBitstreamByName(Context context, Process process, String bitstreamName) {\n+        for (Bitstream bitstream : getBitstreams(context, process, null)) {\n+            if (StringUtils.equals(bitstream.getName(), bitstreamName)) {\n+                return bitstream;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public List<Bitstream> getBitstreams(Context context, Process process, String type) {\n+        List<Bitstream> allBitstreams = process.getBitstreams();\n+\n+        if (type == null) {\n+            return allBitstreams;\n+        } else {\n+            List<Bitstream> filteredBitstreams = new ArrayList<>();\n+            for (Bitstream bitstream : allBitstreams) {\n+                if (StringUtils.equals(bitstreamService.getMetadata(bitstream, \"dspace.process.type\"), type)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8652e95686edf28f6431dd0f9e035e147ed01852"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTU1MTI2OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/test/java/org/dspace/app/bulkedit/MetadataExportTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMTo0NDo0OFrOGcH1jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMTo0NDo0OFrOGcH1jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE0MTcwOQ==", "bodyText": "Please add a context.restoreAuthSystemState(); call after test data is created.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r432141709", "createdAt": "2020-05-28T21:44:48Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/test/java/org/dspace/app/bulkedit/MetadataExportTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.bulkedit;\n+\n+import static junit.framework.TestCase.assertTrue;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.dspace.AbstractIntegrationTest;\n+import org.dspace.app.launcher.ScriptLauncher;\n+import org.dspace.app.scripts.handler.impl.TestDSpaceRunnableHandler;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.WorkspaceItem;\n+import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.dspace.content.service.InstallItemService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.content.service.WorkspaceItemService;\n+import org.dspace.services.ConfigurationService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.junit.Test;\n+\n+public class MetadataExportTest extends AbstractIntegrationTest {\n+\n+    private ItemService itemService = ContentServiceFactory.getInstance().getItemService();\n+    private CollectionService collectionService = ContentServiceFactory.getInstance().getCollectionService();\n+    private CommunityService communityService = ContentServiceFactory.getInstance().getCommunityService();\n+    private WorkspaceItemService workspaceItemService = ContentServiceFactory.getInstance().getWorkspaceItemService();\n+    private InstallItemService installItemService = ContentServiceFactory.getInstance().getInstallItemService();\n+    private ConfigurationService configurationService = DSpaceServicesFactory.getInstance().getConfigurationService();\n+\n+    @Test\n+    public void metadataExportToCsvTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Community community = communityService.create(null, context);\n+        Collection collection = collectionService.create(context, community);\n+        WorkspaceItem wi = workspaceItemService.create(context, collection, true);\n+        Item item = wi.getItem();\n+        itemService.addMetadata(context, item, \"dc\", \"contributor\", \"author\", null, \"Donald, Smith\");\n+        item = installItemService.installItem(context, wi);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8652e95686edf28f6431dd0f9e035e147ed01852"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTU1NjczOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/test/java/org/dspace/app/bulkedit/MetadataImportTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMTo0Njo0OVrOGcH43A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMTo0Njo0OVrOGcH43A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE0MjU1Ng==", "bodyText": "Again, please add a context.restoreAuthSystemState(); call after test data is created.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r432142556", "createdAt": "2020-05-28T21:46:49Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/test/java/org/dspace/app/bulkedit/MetadataImportTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.bulkedit;\n+\n+import static junit.framework.TestCase.assertTrue;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.dspace.AbstractIntegrationTest;\n+import org.dspace.app.launcher.ScriptLauncher;\n+import org.dspace.app.scripts.handler.impl.TestDSpaceRunnableHandler;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.services.ConfigurationService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.junit.Test;\n+\n+public class MetadataImportTest extends AbstractIntegrationTest {\n+\n+    private ItemService itemService = ContentServiceFactory.getInstance().getItemService();\n+    private CollectionService collectionService = ContentServiceFactory.getInstance().getCollectionService();\n+    private CommunityService communityService = ContentServiceFactory.getInstance().getCommunityService();\n+    private ConfigurationService configurationService = DSpaceServicesFactory.getInstance().getConfigurationService();\n+\n+    @Test\n+    public void metadataImportTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Community community = communityService.create(null, context);\n+        collectionService.create(context, community);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8652e95686edf28f6431dd0f9e035e147ed01852"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTU3MDc0OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/test/java/org/dspace/app/bulkedit/MetadataExportTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMTo1MjoxN1rOGcIBpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMTo1MjoxN1rOGcIBpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE0NDgwNg==", "bodyText": "This test does not appear to be cleaning up after itself.  Shouldn't we be deleting the test Community/Collection/Item at the end of this test?  Otherwise, they will remain in our test database and can impact any tests that run later.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r432144806", "createdAt": "2020-05-28T21:52:17Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/test/java/org/dspace/app/bulkedit/MetadataExportTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.bulkedit;\n+\n+import static junit.framework.TestCase.assertTrue;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.dspace.AbstractIntegrationTest;\n+import org.dspace.app.launcher.ScriptLauncher;\n+import org.dspace.app.scripts.handler.impl.TestDSpaceRunnableHandler;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.WorkspaceItem;\n+import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.dspace.content.service.InstallItemService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.content.service.WorkspaceItemService;\n+import org.dspace.services.ConfigurationService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.junit.Test;\n+\n+public class MetadataExportTest extends AbstractIntegrationTest {\n+\n+    private ItemService itemService = ContentServiceFactory.getInstance().getItemService();\n+    private CollectionService collectionService = ContentServiceFactory.getInstance().getCollectionService();\n+    private CommunityService communityService = ContentServiceFactory.getInstance().getCommunityService();\n+    private WorkspaceItemService workspaceItemService = ContentServiceFactory.getInstance().getWorkspaceItemService();\n+    private InstallItemService installItemService = ContentServiceFactory.getInstance().getInstallItemService();\n+    private ConfigurationService configurationService = DSpaceServicesFactory.getInstance().getConfigurationService();\n+\n+    @Test\n+    public void metadataExportToCsvTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Community community = communityService.create(null, context);\n+        Collection collection = collectionService.create(context, community);\n+        WorkspaceItem wi = workspaceItemService.create(context, collection, true);\n+        Item item = wi.getItem();\n+        itemService.addMetadata(context, item, \"dc\", \"contributor\", \"author\", null, \"Donald, Smith\");\n+        item = installItemService.installItem(context, wi);\n+        String fileLocation = configurationService.getProperty(\"dspace.dir\") + testProps.get(\"test.exportcsv\")\n+                                                                                        .toString();\n+\n+        String[] args = new String[] {\"metadata-export\", \"-i\", String.valueOf(item.getHandle()), \"-f\", fileLocation};\n+        TestDSpaceRunnableHandler testDSpaceRunnableHandler = new TestDSpaceRunnableHandler();\n+\n+        ScriptLauncher.handleScript(args, ScriptLauncher.getConfig(kernelImpl), testDSpaceRunnableHandler, kernelImpl);\n+        File file = new File(fileLocation);\n+        String fileContent = IOUtils.toString(new FileInputStream(file), StandardCharsets.UTF_8);\n+        assertTrue(fileContent.contains(\"Donald, Smith\"));\n+        assertTrue(fileContent.contains(String.valueOf(item.getID())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8652e95686edf28f6431dd0f9e035e147ed01852"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTU5MzA1OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/test/java/org/dspace/app/bulkedit/MetadataImportTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjowMDozMFrOGcIPjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTo0MTozNVrOGiWDzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE0ODM2Ng==", "bodyText": "This line seems potentially fragile to me (and not the best performance to load up all Items into memory only to find the \"next()\" one).  Is there no other way to parse out what Item was created from the output of the metadata-import script?   I'd prefer it if we could test that the output of the script is also correct here.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r432148366", "createdAt": "2020-05-28T22:00:30Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/test/java/org/dspace/app/bulkedit/MetadataImportTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.bulkedit;\n+\n+import static junit.framework.TestCase.assertTrue;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.dspace.AbstractIntegrationTest;\n+import org.dspace.app.launcher.ScriptLauncher;\n+import org.dspace.app.scripts.handler.impl.TestDSpaceRunnableHandler;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.services.ConfigurationService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.junit.Test;\n+\n+public class MetadataImportTest extends AbstractIntegrationTest {\n+\n+    private ItemService itemService = ContentServiceFactory.getInstance().getItemService();\n+    private CollectionService collectionService = ContentServiceFactory.getInstance().getCollectionService();\n+    private CommunityService communityService = ContentServiceFactory.getInstance().getCommunityService();\n+    private ConfigurationService configurationService = DSpaceServicesFactory.getInstance().getConfigurationService();\n+\n+    @Test\n+    public void metadataImportTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Community community = communityService.create(null, context);\n+        collectionService.create(context, community);\n+\n+        String fileLocation = configurationService.getProperty(\"dspace.dir\") + testProps.get(\"test.importcsv\")\n+                                                                                        .toString();\n+        String[] args = new String[] {\"metadata-import\", \"-f\", fileLocation, \"-e\", eperson.getEmail(), \"-s\"};\n+        TestDSpaceRunnableHandler testDSpaceRunnableHandler = new TestDSpaceRunnableHandler();\n+\n+        ScriptLauncher.handleScript(args, ScriptLauncher.getConfig(kernelImpl), testDSpaceRunnableHandler, kernelImpl);\n+        Item importedItem = itemService.findAll(context).next();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8652e95686edf28f6431dd0f9e035e147ed01852"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY2NjE5MQ==", "bodyText": "I understand why it can seem fragile, but as every test is cleaning up after itself there is only a single item in the iterator. There is no other way to retrieve the item that was ingested, as the handleScript() method doesn't provide output that we can parse to do a specific lookup for an item.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r438666191", "createdAt": "2020-06-11T09:41:35Z", "author": {"login": "KevinVdV"}, "path": "dspace-api/src/test/java/org/dspace/app/bulkedit/MetadataImportTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.bulkedit;\n+\n+import static junit.framework.TestCase.assertTrue;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.dspace.AbstractIntegrationTest;\n+import org.dspace.app.launcher.ScriptLauncher;\n+import org.dspace.app.scripts.handler.impl.TestDSpaceRunnableHandler;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.services.ConfigurationService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.junit.Test;\n+\n+public class MetadataImportTest extends AbstractIntegrationTest {\n+\n+    private ItemService itemService = ContentServiceFactory.getInstance().getItemService();\n+    private CollectionService collectionService = ContentServiceFactory.getInstance().getCollectionService();\n+    private CommunityService communityService = ContentServiceFactory.getInstance().getCommunityService();\n+    private ConfigurationService configurationService = DSpaceServicesFactory.getInstance().getConfigurationService();\n+\n+    @Test\n+    public void metadataImportTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Community community = communityService.create(null, context);\n+        collectionService.create(context, community);\n+\n+        String fileLocation = configurationService.getProperty(\"dspace.dir\") + testProps.get(\"test.importcsv\")\n+                                                                                        .toString();\n+        String[] args = new String[] {\"metadata-import\", \"-f\", fileLocation, \"-e\", eperson.getEmail(), \"-s\"};\n+        TestDSpaceRunnableHandler testDSpaceRunnableHandler = new TestDSpaceRunnableHandler();\n+\n+        ScriptLauncher.handleScript(args, ScriptLauncher.getConfig(kernelImpl), testDSpaceRunnableHandler, kernelImpl);\n+        Item importedItem = itemService.findAll(context).next();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE0ODM2Ng=="}, "originalCommit": {"oid": "8652e95686edf28f6431dd0f9e035e147ed01852"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTU5NDQ1OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/test/java/org/dspace/app/bulkedit/MetadataImportTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjowMTowMVrOGcIQew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjowMTowMVrOGcIQew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE0ODYwMw==", "bodyText": "Again, it looks like this test isn't cleaning up the data it creates.  It should be updated to cleanup any test data.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r432148603", "createdAt": "2020-05-28T22:01:01Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/test/java/org/dspace/app/bulkedit/MetadataImportTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.bulkedit;\n+\n+import static junit.framework.TestCase.assertTrue;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.dspace.AbstractIntegrationTest;\n+import org.dspace.app.launcher.ScriptLauncher;\n+import org.dspace.app.scripts.handler.impl.TestDSpaceRunnableHandler;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.services.ConfigurationService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.junit.Test;\n+\n+public class MetadataImportTest extends AbstractIntegrationTest {\n+\n+    private ItemService itemService = ContentServiceFactory.getInstance().getItemService();\n+    private CollectionService collectionService = ContentServiceFactory.getInstance().getCollectionService();\n+    private CommunityService communityService = ContentServiceFactory.getInstance().getCommunityService();\n+    private ConfigurationService configurationService = DSpaceServicesFactory.getInstance().getConfigurationService();\n+\n+    @Test\n+    public void metadataImportTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Community community = communityService.create(null, context);\n+        collectionService.create(context, community);\n+\n+        String fileLocation = configurationService.getProperty(\"dspace.dir\") + testProps.get(\"test.importcsv\")\n+                                                                                        .toString();\n+        String[] args = new String[] {\"metadata-import\", \"-f\", fileLocation, \"-e\", eperson.getEmail(), \"-s\"};\n+        TestDSpaceRunnableHandler testDSpaceRunnableHandler = new TestDSpaceRunnableHandler();\n+\n+        ScriptLauncher.handleScript(args, ScriptLauncher.getConfig(kernelImpl), testDSpaceRunnableHandler, kernelImpl);\n+        Item importedItem = itemService.findAll(context).next();\n+        assertTrue(\n+            StringUtils.equals(\n+                itemService.getMetadata(importedItem, \"dc\", \"contributor\", \"author\", Item.ANY).get(0).getValue(),\n+                \"Donald, SmithImported\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8652e95686edf28f6431dd0f9e035e147ed01852"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTYwMDcyOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/test/resources/test-config.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjowMzoxOVrOGcIUJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjowMzoxOVrOGcIUJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE0OTU0Mg==", "bodyText": "Silly thing, but it seems odd to me that these are absolute paths... I'd expect them to be the same as test.bitstream (which sits in the same directory).  So, I'd expect ./target/testing/dspace/assetstore/testImport.csv for example.  If this works as-is though, that's fine.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r432149542", "createdAt": "2020-05-28T22:03:19Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/test/resources/test-config.properties", "diffHunk": "@@ -11,3 +11,5 @@ test.folder = ./target/testing/\n \n # Path of the test bitstream (to use in BitstreamTest and elsewhere)\n test.bitstream = ./target/testing/dspace/assetstore/ConstitutionofIreland.pdf\n+test.exportcsv = /assetstore/test.csv\n+test.importcsv = /assetstore/testImport.csv", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8652e95686edf28f6431dd0f9e035e147ed01852"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTYxNDg1OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/ProcessFilesRestController.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjowODo0MVrOGcIc8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOToyNzowMlrOGkTBBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1MTc5NA==", "bodyText": "Just as a reminder, we should not be creating Controllers unless absolutely required. Generally speaking, if you ever start to create a Controller for any type of  GET request, this is a sign that you should rethink your code to try and use either a RestRepository or LinkRestRepository.  More advice inline below.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r432151794", "createdAt": "2020-05-28T22:08:41Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/ProcessFilesRestController.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.methodOn;\n+\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.dspace.app.rest.link.HalLinkService;\n+import org.dspace.app.rest.link.process.ProcessResourceHalLinkFactory;\n+import org.dspace.app.rest.model.BitstreamRest;\n+import org.dspace.app.rest.model.ProcessRest;\n+import org.dspace.app.rest.model.hateoas.BitstreamResource;\n+import org.dspace.app.rest.repository.ProcessRestRepository;\n+import org.dspace.app.rest.utils.Utils;\n+import org.dspace.authorize.AuthorizeException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.web.PagedResourcesAssembler;\n+import org.springframework.hateoas.Link;\n+import org.springframework.hateoas.PagedModel;\n+import org.springframework.hateoas.server.mvc.WebMvcLinkBuilder;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+@RequestMapping(\"/api/\" + ProcessRest.CATEGORY + \"/\" + ProcessRest.PLURAL_NAME + \"/{processId}/files\")\n+public class ProcessFilesRestController {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8652e95686edf28f6431dd0f9e035e147ed01852"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY2ODYyMw==", "bodyText": "A small update was needed on the RestResourceController in order to support one of the 2 methods for which this controller was needed. The remaining one is too specific & cannot be moved to the repository (unless we change the contract & this is still an open discussion).", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r438668623", "createdAt": "2020-06-11T09:45:57Z", "author": {"login": "KevinVdV"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/ProcessFilesRestController.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.methodOn;\n+\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.dspace.app.rest.link.HalLinkService;\n+import org.dspace.app.rest.link.process.ProcessResourceHalLinkFactory;\n+import org.dspace.app.rest.model.BitstreamRest;\n+import org.dspace.app.rest.model.ProcessRest;\n+import org.dspace.app.rest.model.hateoas.BitstreamResource;\n+import org.dspace.app.rest.repository.ProcessRestRepository;\n+import org.dspace.app.rest.utils.Utils;\n+import org.dspace.authorize.AuthorizeException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.web.PagedResourcesAssembler;\n+import org.springframework.hateoas.Link;\n+import org.springframework.hateoas.PagedModel;\n+import org.springframework.hateoas.server.mvc.WebMvcLinkBuilder;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+@RequestMapping(\"/api/\" + ProcessRest.CATEGORY + \"/\" + ProcessRest.PLURAL_NAME + \"/{processId}/files\")\n+public class ProcessFilesRestController {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1MTc5NA=="}, "originalCommit": {"oid": "8652e95686edf28f6431dd0f9e035e147ed01852"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2MDAzNg==", "bodyText": "@KevinVdV : I don't understand your note here, as the path this Controller responds to is not in the Contract: DSpace/RestContract#99   I'd need to understand the purpose of this endpoint as it's not clear to me.\nAlso, it's worth noting, per the REST Contract README, we don't support subpaths of the type you've added here.  You seem to be implying by the path /process/[id]/files/name/[name] that there are TWO unique identifiers for a File within a Process, either the name or the type (which is already documented as the unique identifier in the contract and has a path /process/[id]/files/[type]).  This is something we've not allowed on other endpoints, so we'd need a different path here that doesn't require a custom Controller (Again, as I've noted, we highly recommend against custom Controllers. If you find yourself creating one, please ask for advice on how to avoid it.)  One manner of implementing this in another way would be to reconsider this as a /api/core/bitstreams/search/byProcessAndName?process=[]&name=[].  It could still end up with a unique result, but it'd clarify that it's not the main unique identifier (and that Type is considered the main unique identifier).", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r439560036", "createdAt": "2020-06-12T17:46:03Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/ProcessFilesRestController.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.methodOn;\n+\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.dspace.app.rest.link.HalLinkService;\n+import org.dspace.app.rest.link.process.ProcessResourceHalLinkFactory;\n+import org.dspace.app.rest.model.BitstreamRest;\n+import org.dspace.app.rest.model.ProcessRest;\n+import org.dspace.app.rest.model.hateoas.BitstreamResource;\n+import org.dspace.app.rest.repository.ProcessRestRepository;\n+import org.dspace.app.rest.utils.Utils;\n+import org.dspace.authorize.AuthorizeException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.web.PagedResourcesAssembler;\n+import org.springframework.hateoas.Link;\n+import org.springframework.hateoas.PagedModel;\n+import org.springframework.hateoas.server.mvc.WebMvcLinkBuilder;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+@RequestMapping(\"/api/\" + ProcessRest.CATEGORY + \"/\" + ProcessRest.PLURAL_NAME + \"/{processId}/files\")\n+public class ProcessFilesRestController {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1MTc5NA=="}, "originalCommit": {"oid": "8652e95686edf28f6431dd0f9e035e147ed01852"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcxMzQ3Nw==", "bodyText": "This controller was removed as the name endpoint isn't used. A small leftover from an initial implementation.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r440713477", "createdAt": "2020-06-16T09:27:02Z", "author": {"login": "KevinVdV"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/ProcessFilesRestController.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.methodOn;\n+\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.dspace.app.rest.link.HalLinkService;\n+import org.dspace.app.rest.link.process.ProcessResourceHalLinkFactory;\n+import org.dspace.app.rest.model.BitstreamRest;\n+import org.dspace.app.rest.model.ProcessRest;\n+import org.dspace.app.rest.model.hateoas.BitstreamResource;\n+import org.dspace.app.rest.repository.ProcessRestRepository;\n+import org.dspace.app.rest.utils.Utils;\n+import org.dspace.authorize.AuthorizeException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.web.PagedResourcesAssembler;\n+import org.springframework.hateoas.Link;\n+import org.springframework.hateoas.PagedModel;\n+import org.springframework.hateoas.server.mvc.WebMvcLinkBuilder;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+@RequestMapping(\"/api/\" + ProcessRest.CATEGORY + \"/\" + ProcessRest.PLURAL_NAME + \"/{processId}/files\")\n+public class ProcessFilesRestController {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1MTc5NA=="}, "originalCommit": {"oid": "8652e95686edf28f6431dd0f9e035e147ed01852"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Mzk3MTY3OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/ProcessFilesRestController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDozNTowNlrOGcff0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDozNTowNlrOGcff0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUyOTM2MQ==", "bodyText": "This endpoint looks to be acting like a /search of Bitstreams (https://github.com/DSpace/Rest7Contract/blob/master/search-rels.md).  I see that's the same feedback that @abollini gave you in the REST Contract, which it looks like wasn't addressed yet: DSpace/RestContract#99 (comment)\nMy recommendation is to redesign this (in the Contract and here) to be /api/core/bitstreams/search/byProcessAndType or similar. This would allow you to move this code into the BitstreamRestRepository class in a method annotated with @SearchRestMethod.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r432529361", "createdAt": "2020-05-29T14:35:06Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/ProcessFilesRestController.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.methodOn;\n+\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.dspace.app.rest.link.HalLinkService;\n+import org.dspace.app.rest.link.process.ProcessResourceHalLinkFactory;\n+import org.dspace.app.rest.model.BitstreamRest;\n+import org.dspace.app.rest.model.ProcessRest;\n+import org.dspace.app.rest.model.hateoas.BitstreamResource;\n+import org.dspace.app.rest.repository.ProcessRestRepository;\n+import org.dspace.app.rest.utils.Utils;\n+import org.dspace.authorize.AuthorizeException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.web.PagedResourcesAssembler;\n+import org.springframework.hateoas.Link;\n+import org.springframework.hateoas.PagedModel;\n+import org.springframework.hateoas.server.mvc.WebMvcLinkBuilder;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+@RequestMapping(\"/api/\" + ProcessRest.CATEGORY + \"/\" + ProcessRest.PLURAL_NAME + \"/{processId}/files\")\n+public class ProcessFilesRestController {\n+\n+    private static final Logger log = LogManager.getLogger();\n+\n+    @Autowired\n+    HalLinkService linkService;\n+\n+    @Autowired\n+    private ProcessRestRepository processRestRepository;\n+\n+    @Autowired\n+    private Utils utils;\n+\n+    @Autowired\n+    ProcessResourceHalLinkFactory processResourceHalLinkFactory;\n+\n+    @RequestMapping(method = RequestMethod.GET, value = \"/{fileType}\")\n+    @PreAuthorize(\"hasPermission(#processId, 'PROCESS', 'READ')\")\n+    public PagedModel<BitstreamResource> listFilesWithTypeFromProcess(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8652e95686edf28f6431dd0f9e035e147ed01852"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Mzk3NzQ4OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/ProcessFilesRestController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDozNjozM1rOGcfjTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDozNjozM1rOGcfjTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUzMDI1NA==", "bodyText": "This endpoint seems to be missing from the original Rest Contract: DSpace/RestContract#99   So, I'm not sure of the use case here.  It might be implemented more like a /search as well (like above), but it seems like it's somehow implied to be a unique lookup, so it could also be a LinkRestRepository perhaps.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r432530254", "createdAt": "2020-05-29T14:36:33Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/ProcessFilesRestController.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.methodOn;\n+\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.dspace.app.rest.link.HalLinkService;\n+import org.dspace.app.rest.link.process.ProcessResourceHalLinkFactory;\n+import org.dspace.app.rest.model.BitstreamRest;\n+import org.dspace.app.rest.model.ProcessRest;\n+import org.dspace.app.rest.model.hateoas.BitstreamResource;\n+import org.dspace.app.rest.repository.ProcessRestRepository;\n+import org.dspace.app.rest.utils.Utils;\n+import org.dspace.authorize.AuthorizeException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.web.PagedResourcesAssembler;\n+import org.springframework.hateoas.Link;\n+import org.springframework.hateoas.PagedModel;\n+import org.springframework.hateoas.server.mvc.WebMvcLinkBuilder;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+@RequestMapping(\"/api/\" + ProcessRest.CATEGORY + \"/\" + ProcessRest.PLURAL_NAME + \"/{processId}/files\")\n+public class ProcessFilesRestController {\n+\n+    private static final Logger log = LogManager.getLogger();\n+\n+    @Autowired\n+    HalLinkService linkService;\n+\n+    @Autowired\n+    private ProcessRestRepository processRestRepository;\n+\n+    @Autowired\n+    private Utils utils;\n+\n+    @Autowired\n+    ProcessResourceHalLinkFactory processResourceHalLinkFactory;\n+\n+    @RequestMapping(method = RequestMethod.GET, value = \"/{fileType}\")\n+    @PreAuthorize(\"hasPermission(#processId, 'PROCESS', 'READ')\")\n+    public PagedModel<BitstreamResource> listFilesWithTypeFromProcess(\n+        @PathVariable(name = \"processId\") Integer processId,\n+        @PathVariable(name = \"fileType\") String fileType,\n+        Pageable pageable, PagedResourcesAssembler assembler) throws SQLException, AuthorizeException {\n+\n+        if (log.isTraceEnabled()) {\n+            log.trace(\"Retrieving Files with type \" + fileType + \" from Process with ID: \" + processId);\n+        }\n+\n+        List<BitstreamResource> bitstreamResources = processRestRepository\n+            .getProcessBitstreamsByType(processId, fileType).stream()\n+            .map(bitstreamRest -> new BitstreamResource(bitstreamRest, utils))\n+            .collect(Collectors.toList());\n+\n+        Page<BitstreamResource> page = utils.getPage(bitstreamResources, pageable);\n+\n+        Link link = WebMvcLinkBuilder.linkTo(\n+            methodOn(this.getClass()).listFilesWithTypeFromProcess(processId, fileType, pageable, assembler))\n+            .withSelfRel();\n+        PagedModel<BitstreamResource> result = assembler.toModel(page, link);\n+\n+        return result;\n+    }\n+\n+\n+    @RequestMapping(method = RequestMethod.GET, value = \"/name/{fileName:.+}\")\n+    @PreAuthorize(\"hasPermission(#processId, 'PROCESS', 'READ')\")\n+    public BitstreamResource getBitstreamByName(@PathVariable(name = \"processId\") Integer processId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8652e95686edf28f6431dd0f9e035e147ed01852"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDAxNDk2OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/BitstreamRestRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDo0NTo0N1rOGcf67g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTo1NjowMlrOGiWiLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUzNjMwMg==", "bodyText": "This is an undocumented change.  So, we need this to added/changed in the REST Contract.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r432536302", "createdAt": "2020-05-29T14:45:47Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/BitstreamRestRepository.java", "diffHunk": "@@ -95,22 +91,7 @@ public BitstreamRest findOne(Context context, UUID id) {\n     @Override\n     @PreAuthorize(\"hasAuthority('ADMIN')\")\n     public Page<BitstreamRest> findAll(Context context, Pageable pageable) {\n-        List<Bitstream> bit = new ArrayList<Bitstream>();\n-        Iterator<Bitstream> it = null;\n-        int total = 0;\n-        try {\n-            total = bs.countTotal(context);\n-            it = bs.findAll(context, pageable.getPageSize(), Math.toIntExact(pageable.getOffset()));\n-            while (it.hasNext()) {\n-                bit.add(it.next());\n-            }\n-        } catch (SQLException e) {\n-            throw new RuntimeException(e.getMessage(), e);\n-        }\n-        Projection projection = utils.obtainProjection();\n-        Page<BitstreamRest> page = new PageImpl<>(bit, pageable, total)\n-                .map((bitstream) -> converter.toRest(bitstream, projection));\n-        return page;\n+        throw new RepositoryMethodNotImplementedException(BitstreamRest.NAME, \"findAll\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8652e95686edf28f6431dd0f9e035e147ed01852"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY3Mzk2Ng==", "bodyText": "Agreed, I added a small commit to the outstanding contract PR for these changes: DSpace/RestContract@0ac3647", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r438673966", "createdAt": "2020-06-11T09:56:02Z", "author": {"login": "KevinVdV"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/BitstreamRestRepository.java", "diffHunk": "@@ -95,22 +91,7 @@ public BitstreamRest findOne(Context context, UUID id) {\n     @Override\n     @PreAuthorize(\"hasAuthority('ADMIN')\")\n     public Page<BitstreamRest> findAll(Context context, Pageable pageable) {\n-        List<Bitstream> bit = new ArrayList<Bitstream>();\n-        Iterator<Bitstream> it = null;\n-        int total = 0;\n-        try {\n-            total = bs.countTotal(context);\n-            it = bs.findAll(context, pageable.getPageSize(), Math.toIntExact(pageable.getOffset()));\n-            while (it.hasNext()) {\n-                bit.add(it.next());\n-            }\n-        } catch (SQLException e) {\n-            throw new RuntimeException(e.getMessage(), e);\n-        }\n-        Projection projection = utils.obtainProjection();\n-        Page<BitstreamRest> page = new PageImpl<>(bit, pageable, total)\n-                .map((bitstream) -> converter.toRest(bitstream, projection));\n-        return page;\n+        throw new RepositoryMethodNotImplementedException(BitstreamRest.NAME, \"findAll\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUzNjMwMg=="}, "originalCommit": {"oid": "8652e95686edf28f6431dd0f9e035e147ed01852"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDE5Mjk2OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/model/ProcessFileWrapperRest.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNTozMTozMlrOGchrzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNTo0NjoxOFrOGlMAJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU2NTE5OA==", "bodyText": "I'm not sure I understand what a ProcessFileWrapper is, as this isn't explained in this JavaDocs.  However, it might make more sense once the REST Contract is updated with examples.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r432565198", "createdAt": "2020-05-29T15:31:32Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/model/ProcessFileWrapperRest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.model;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+\n+\n+/**\n+ * The ProcessFileWrapper REST Resource\n+ *\n+ */\n+public class ProcessFileWrapperRest implements RestModel {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47b75f313e543923997cbe8c2ae717323aea7170"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEwODIzOQ==", "bodyText": "This one is needed for the following endpoint: https://github.com/DSpace/Rest7Contract/pull/99/files#diff-12aac6d84a3393b361553d3f2fe93962R141, we need a way here to have in our output:\n\nA process identifier\nA list of files\n\nThis object provides that wrapper, we can always rename it if you wish.\nPS: JavaDocs have been added.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r440108239", "createdAt": "2020-06-15T11:25:52Z", "author": {"login": "KevinVdV"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/model/ProcessFileWrapperRest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.model;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+\n+\n+/**\n+ * The ProcessFileWrapper REST Resource\n+ *\n+ */\n+public class ProcessFileWrapperRest implements RestModel {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU2NTE5OA=="}, "originalCommit": {"oid": "47b75f313e543923997cbe8c2ae717323aea7170"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMyNDQ3Ng==", "bodyText": "@KevinVdV : OK, I see. It seems like it's more about grouping this files by type.  So, we might consider calling this the ProcessFileTypeWrapperRest.  But, I don't feel strongly either way here.\nOne thing to note though is that the behavior of this endpoint is a bit different than normal, so we might want to verify with the Angular team that caching will work appropriately here.  Essentially, this endpoint is returning ProcessFileWrapperResource which is just a wrapper around a BitstreamResource.  So, the client side / UI needs to be aware of that so that it does NOT cache the ProcessFileWrapper separate from cached Bitstream objects (as treating these separately could end up duplicating some objects in the cache).\n@artlowel : have you seen the approach of this PR?\nNormally, to make this similar to other existing endpoints, the behavior here would be to have the /processes/<:process-id>/files endpoint directly return BitstreamResource objects.  But, that'd require rethinking the REST Contract slightly (as this /files path could no longer be grouped by dspace.process.filetype....but we still could have /files/[:type] return just the file of that type).\nI don't feel strongly either way here. I'm just pointing out that this endpoint is different from how others normally behave.  If @artlowel sees no issues with caching on the Angular side, then I'm OK with this approach.  Otherwise, if needed, we could rethink the Contract again to align this endpoint more with others that act similarly (e.g. /bundles/[:id]/bitstreams is somewhat similar in that it returns just a list of bitstreams, in that case belonging to a specific bundle)", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r440324476", "createdAt": "2020-06-15T17:12:08Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/model/ProcessFileWrapperRest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.model;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+\n+\n+/**\n+ * The ProcessFileWrapper REST Resource\n+ *\n+ */\n+public class ProcessFileWrapperRest implements RestModel {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU2NTE5OA=="}, "originalCommit": {"oid": "47b75f313e543923997cbe8c2ae717323aea7170"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ3NTI0MQ==", "bodyText": "Thanks for the heads up @tdonohue. That /files endpoint as described in the rest contract is indeed problematic. I'll discuss it with Kevin and Ben to see if we can't come up with something better.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r441475241", "createdAt": "2020-06-17T11:28:11Z", "author": {"login": "artlowel"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/model/ProcessFileWrapperRest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.model;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+\n+\n+/**\n+ * The ProcessFileWrapper REST Resource\n+ *\n+ */\n+public class ProcessFileWrapperRest implements RestModel {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU2NTE5OA=="}, "originalCommit": {"oid": "47b75f313e543923997cbe8c2ae717323aea7170"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYyODExNw==", "bodyText": "@tdonohue In discussion with Art & Ben I created the following contract PR: DSpace/RestContract#130, feel free to add feedback there, once accepted, we will implement these changes.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r441628117", "createdAt": "2020-06-17T15:18:43Z", "author": {"login": "KevinVdV"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/model/ProcessFileWrapperRest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.model;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+\n+\n+/**\n+ * The ProcessFileWrapper REST Resource\n+ *\n+ */\n+public class ProcessFileWrapperRest implements RestModel {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU2NTE5OA=="}, "originalCommit": {"oid": "47b75f313e543923997cbe8c2ae717323aea7170"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY0NzE0MA==", "bodyText": "@KevinVdV : I've added a review to the contract changes. They look good overall, I just added minor rewording suggestions.\nBased on the new contract changes, all my feedback in this discussion thread above can be ignored, and I'd expect all of the ProcessFileWrapper* classes to now be removed from this PR.  We should be able to now use a simple LinkRepository to return the Bitstreams associated with the Process.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r441647140", "createdAt": "2020-06-17T15:46:18Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/model/ProcessFileWrapperRest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.model;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+\n+\n+/**\n+ * The ProcessFileWrapper REST Resource\n+ *\n+ */\n+public class ProcessFileWrapperRest implements RestModel {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU2NTE5OA=="}, "originalCommit": {"oid": "47b75f313e543923997cbe8c2ae717323aea7170"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDIwMjM2OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/BitstreamRestRepositoryIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNTozMzo1NVrOGchxsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNTozMzo1NVrOGchxsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU2NjcwNg==", "bodyText": "If we are changing the behavior to be a 405 response, we only need to test that once.  So, this test is now unneeded, as you already test that the endpoint returns a 405 above.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r432566706", "createdAt": "2020-05-29T15:33:55Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/BitstreamRestRepositoryIT.java", "diffHunk": "@@ -162,33 +155,13 @@ public void findAllPaginationTest() throws Exception {\n         getClient(token).perform(get(\"/api/core/bitstreams/\")\n                    .param(\"size\", \"1\")\n                    .param(\"projection\", \"full\"))\n-                   .andExpect(status().isOk())\n-                   .andExpect(content().contentType(contentType))\n-                   .andExpect(jsonPath(\"$._embedded.bitstreams\", Matchers.contains(\n-                       BitstreamMatcher.matchBitstreamEntry(bitstream))\n-                   ))\n-                   .andExpect(jsonPath(\"$._embedded.bitstreams\", Matchers.not(\n-                       Matchers.contains(\n-                           BitstreamMatcher.matchBitstreamEntry(bitstream1))\n-                                       )\n-                   ))\n-\n-        ;\n+                   .andExpect(status().isMethodNotAllowed());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47b75f313e543923997cbe8c2ae717323aea7170"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDIwNDUyOnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/BitstreamRestRepositoryIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNTozNDozNlrOGchzJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNTozNDozNlrOGchzJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU2NzA3Ng==", "bodyText": "Same here, this test can be removed, we already test for 405 response above.  Retesting with different params isn't really necessary.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r432567076", "createdAt": "2020-05-29T15:34:36Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/BitstreamRestRepositoryIT.java", "diffHunk": "@@ -162,33 +155,13 @@ public void findAllPaginationTest() throws Exception {\n         getClient(token).perform(get(\"/api/core/bitstreams/\")\n                    .param(\"size\", \"1\")\n                    .param(\"projection\", \"full\"))\n-                   .andExpect(status().isOk())\n-                   .andExpect(content().contentType(contentType))\n-                   .andExpect(jsonPath(\"$._embedded.bitstreams\", Matchers.contains(\n-                       BitstreamMatcher.matchBitstreamEntry(bitstream))\n-                   ))\n-                   .andExpect(jsonPath(\"$._embedded.bitstreams\", Matchers.not(\n-                       Matchers.contains(\n-                           BitstreamMatcher.matchBitstreamEntry(bitstream1))\n-                                       )\n-                   ))\n-\n-        ;\n+                   .andExpect(status().isMethodNotAllowed());\n \n         getClient(token).perform(get(\"/api/core/bitstreams/\")\n                                 .param(\"size\", \"1\")\n                                 .param(\"page\", \"1\")\n                                 .param(\"projection\", \"full\"))\n-                   .andExpect(status().isOk())\n-                   .andExpect(content().contentType(contentType))\n-                   .andExpect(jsonPath(\"$._embedded.bitstreams\", Matchers.contains(\n-                       BitstreamMatcher.matchBitstreamEntry(bitstream1)\n-                   )))\n-                   .andExpect(jsonPath(\"$._embedded.bitstreams\", Matchers.not(\n-                       Matchers.contains(\n-                           BitstreamMatcher.matchBitstreamEntry(bitstream)\n-                       )\n-                   )));\n+                   .andExpect(status().isMethodNotAllowed());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47b75f313e543923997cbe8c2ae717323aea7170"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDIzMTcwOnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/ScriptRestRepositoryIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNTo0MTo0MlrOGciEcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNTo0MTo0MlrOGciEcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU3MTUwNw==", "bodyText": "Recently we've discovered this form of cleanup after a POST is incredibly inefficient (and sloooow).  The recommended way to do cleanup after a POST can be found in this recent PR: #2759.  Here's also a good example on master in the EPersonRestRepositoryIT:\n\nFirst use an andDo to capture the ID of the created object (which is more efficient then pulling down the entire response): https://github.com/DSpace/DSpace/blob/master/dspace-server-webapp/src/test/java/org/dspace/app/rest/EPersonRestRepositoryIT.java#L107-L108\nThen, use (or create) a Builder deletion method in a finally block: https://github.com/DSpace/DSpace/blob/master/dspace-server-webapp/src/test/java/org/dspace/app/rest/EPersonRestRepositoryIT.java#L119-L122\n\nPlease refactor this test to do something similar, as it'll help us retain consistency & speed up our tests. Thanks!", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r432571507", "createdAt": "2020-05-29T15:41:42Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/ScriptRestRepositoryIT.java", "diffHunk": "@@ -155,12 +178,22 @@ public void postProcessAdminWrongOptionsException() throws Exception {\n \n         String token = getAuthToken(admin.getEmail(), password);\n \n-        getClient(token).perform(post(\"/api/system/scripts/mock-script/processes\").contentType(\"multipart/form-data\"))\n-                        .andExpect(status().isAccepted())\n-                        .andExpect(jsonPath(\"$\", is(\n-                            ProcessMatcher.matchProcess(\"mock-script\",\n-                                                        String.valueOf(admin.getID()), new LinkedList<>(),\n-                                                        ProcessStatus.FAILED))));\n+        MvcResult mvcResult = getClient(token)\n+            .perform(post(\"/api/system/scripts/mock-script/processes\").contentType(\"multipart/form-data\"))\n+            .andExpect(status().isAccepted())\n+            .andExpect(jsonPath(\"$\", is(\n+                ProcessMatcher.matchProcess(\"mock-script\",\n+                                            String.valueOf(admin.getID()), new LinkedList<>(),\n+                                            ProcessStatus.FAILED)))).andReturn();\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+\n+        String content = mvcResult.getResponse().getContentAsString();\n+        Map<String, Object> map = mapper.readValue(content, Map.class);\n+        Integer processId = Integer.valueOf(String.valueOf(map.get(\"processId\")));\n+\n+        getClient(token).perform(delete(\"/api/system/processes/\" + processId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47b75f313e543923997cbe8c2ae717323aea7170"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDI4NzM3OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/ScriptRestRepositoryIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNTo1NToxOVrOGcinsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNTo1NToxOVrOGcinsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU4MDUyOQ==", "bodyText": "Same here, please refactor this cleanup after POST as described above.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r432580529", "createdAt": "2020-05-29T15:55:19Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/ScriptRestRepositoryIT.java", "diffHunk": "@@ -182,19 +215,28 @@ public void postProcessAdminNoOptionsFailedStatus() throws Exception {\n         parameters.add(new DSpaceCommandLineParameter(\"-q\", null));\n \n         List<ParameterValueRest> list = parameters.stream()\n-                .map(dSpaceCommandLineParameter -> dSpaceRunnableParameterConverter\n-                        .convert(dSpaceCommandLineParameter, Projection.DEFAULT)).collect(Collectors.toList());\n+                                                  .map(dSpaceCommandLineParameter -> dSpaceRunnableParameterConverter\n+                                                      .convert(dSpaceCommandLineParameter, Projection.DEFAULT))\n+                                                  .collect(Collectors.toList());\n \n         String token = getAuthToken(admin.getEmail(), password);\n \n-        getClient(token).perform(post(\"/api/system/scripts/mock-script/processes\").contentType(\"multipart/form-data\")\n-                                                                                  .param(\"properties\",\n-                                                                                         new Gson().toJson(list)))\n-                        .andExpect(status().isAccepted())\n-                        .andExpect(jsonPath(\"$\", is(\n-                            ProcessMatcher.matchProcess(\"mock-script\",\n-                                                        String.valueOf(admin.getID()), parameters,\n-                                                        ProcessStatus.FAILED))));\n+        MvcResult mvcResult = getClient(token)\n+            .perform(post(\"/api/system/scripts/mock-script/processes\").contentType(\"multipart/form-data\")\n+                                                                      .param(\"properties\",\n+                                                                             new Gson().toJson(list)))\n+            .andExpect(status().isAccepted())\n+            .andExpect(jsonPath(\"$\", is(\n+                ProcessMatcher.matchProcess(\"mock-script\",\n+                                            String.valueOf(admin.getID()), parameters,\n+                                            ProcessStatus.FAILED)))).andReturn();\n+        ObjectMapper mapper = new ObjectMapper();\n+\n+        String content = mvcResult.getResponse().getContentAsString();\n+        Map<String, Object> map = mapper.readValue(content, Map.class);\n+        Integer processId = Integer.valueOf(String.valueOf(map.get(\"processId\")));\n+\n+        getClient(token).perform(delete(\"/api/system/processes/\" + processId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47b75f313e543923997cbe8c2ae717323aea7170"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDI4ODQ0OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/ScriptRestRepositoryIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNTo1NTozN1rOGcioWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNTo1NTozN1rOGcioWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU4MDY5OA==", "bodyText": "Same here, please refactor this cleanup after POST as described above.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r432580698", "createdAt": "2020-05-29T15:55:37Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/ScriptRestRepositoryIT.java", "diffHunk": "@@ -214,24 +256,34 @@ public void postProcessAdminWithOptionsSuccess() throws Exception {\n         parameters.add(new DSpaceCommandLineParameter(\"-i\", null));\n \n         List<ParameterValueRest> list = parameters.stream()\n-                .map(dSpaceCommandLineParameter -> dSpaceRunnableParameterConverter\n-                        .convert(dSpaceCommandLineParameter, Projection.DEFAULT)).collect(Collectors.toList());\n+                                                  .map(dSpaceCommandLineParameter -> dSpaceRunnableParameterConverter\n+                                                      .convert(dSpaceCommandLineParameter, Projection.DEFAULT))\n+                                                  .collect(Collectors.toList());\n \n         String token = getAuthToken(admin.getEmail(), password);\n         List<ProcessStatus> acceptableProcessStatuses = new LinkedList<>();\n         acceptableProcessStatuses.addAll(Arrays.asList(ProcessStatus.SCHEDULED,\n                                                        ProcessStatus.RUNNING,\n                                                        ProcessStatus.COMPLETED));\n \n-        getClient(token).perform(post(\"/api/system/scripts/mock-script/processes\").contentType(\"multipart/form-data\")\n-                                                                                  .param(\"properties\",\n-                                                                                         new Gson().toJson(list)))\n-                        .andExpect(status().isAccepted())\n-                        .andExpect(jsonPath(\"$\", is(\n-                            ProcessMatcher.matchProcess(\"mock-script\",\n-                                                        String.valueOf(admin.getID()),\n-                                                        parameters,\n-                                                        acceptableProcessStatuses))));\n+        MvcResult mvcResult = getClient(token)\n+            .perform(post(\"/api/system/scripts/mock-script/processes\").contentType(\"multipart/form-data\")\n+                                                                      .param(\"properties\",\n+                                                                             new Gson().toJson(list)))\n+            .andExpect(status().isAccepted())\n+            .andExpect(jsonPath(\"$\", is(\n+                ProcessMatcher.matchProcess(\"mock-script\",\n+                                            String.valueOf(admin.getID()),\n+                                            parameters,\n+                                            acceptableProcessStatuses)))).andReturn();\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+\n+        String content = mvcResult.getResponse().getContentAsString();\n+        Map<String, Object> map = mapper.readValue(content, Map.class);\n+        Integer processId = Integer.valueOf(String.valueOf(map.get(\"processId\")));\n+\n+        getClient(token).perform(delete(\"/api/system/processes/\" + processId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47b75f313e543923997cbe8c2ae717323aea7170"}, "originalPosition": 243}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDI5MDEzOnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/ScriptRestRepositoryIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNTo1NjowNVrOGcipZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNTo1NjowNVrOGcipZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU4MDk2Ng==", "bodyText": "Same here, please refactor this cleanup after POST as described above.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r432580966", "createdAt": "2020-05-29T15:56:05Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/ScriptRestRepositoryIT.java", "diffHunk": "@@ -243,12 +295,78 @@ public void postProcessAdminWithWrongContentTypeBadRequestException() throws Exc\n                         .andExpect(status().isBadRequest());\n     }\n \n+    @Test\n+    public void postProcessAdminWithFileSuccess() throws Exception {\n+        LinkedList<DSpaceCommandLineParameter> parameters = new LinkedList<>();\n+\n+        parameters.add(new DSpaceCommandLineParameter(\"-r\", \"test\"));\n+        parameters.add(new DSpaceCommandLineParameter(\"-i\", null));\n+\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1).withName(\"Collection 1\").build();\n+        Collection col2 = CollectionBuilder.createCollection(context, child1).withName(\"Collection 2\").build();\n+\n+        //2. Three public items that are readable by Anonymous with different subjects\n+        Item publicItem1 = ItemBuilder.createItem(context, col1)\n+                                      .withTitle(\"Public item 1\")\n+                                      .withIssueDate(\"2017-10-17\")\n+                                      .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                                      .withSubject(\"ExtraEntry\")\n+                                      .build();\n+\n+        String bitstreamContent = \"Hello, World!\";\n+        MockMultipartFile bitstreamFile = new MockMultipartFile(\"file\",\n+                                                                \"helloProcessFile.txt\", MediaType.TEXT_PLAIN_VALUE,\n+                                                                bitstreamContent.getBytes());\n+        parameters.add(new DSpaceCommandLineParameter(\"-f\", \"helloProcessFile.txt\"));\n+\n+        List<ParameterValueRest> list = parameters.stream()\n+                                                  .map(dSpaceCommandLineParameter -> dSpaceRunnableParameterConverter\n+                                                      .convert(dSpaceCommandLineParameter, Projection.DEFAULT))\n+                                                  .collect(Collectors.toList());\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        List<ProcessStatus> acceptableProcessStatuses = new LinkedList<>();\n+        acceptableProcessStatuses.addAll(Arrays.asList(ProcessStatus.SCHEDULED,\n+                                                       ProcessStatus.RUNNING,\n+                                                       ProcessStatus.COMPLETED));\n+\n+        MvcResult mvcResult = getClient(token)\n+            .perform(fileUpload(\"/api/system/scripts/mock-script/processes\").file(bitstreamFile)\n+                                                                            .param(\"properties\",\n+                                                                                   new Gson().toJson(list)))\n+            .andExpect(status().isAccepted())\n+            .andExpect(jsonPath(\"$\", is(\n+                ProcessMatcher.matchProcess(\"mock-script\",\n+                                            String.valueOf(admin.getID()),\n+                                            parameters,\n+                                            acceptableProcessStatuses)))).andReturn();\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+\n+        String content = mvcResult.getResponse().getContentAsString();\n+        Map<String, Object> map = mapper.readValue(content, Map.class);\n+        Integer processId = Integer.valueOf(String.valueOf(map.get(\"processId\")));\n+\n+        getClient(token).perform(delete(\"/api/system/processes/\" + processId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47b75f313e543923997cbe8c2ae717323aea7170"}, "originalPosition": 312}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDMwODU0OnYy", "diffSide": "RIGHT", "path": "dspace/config/registries/dspace-types.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjowMDo1M1rOGci1AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjowMDo1M1rOGci1AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU4MzkzNg==", "bodyText": "Tiny thing, but I'd recommend we name this something like \"DSpace Internal Types Registry\" just to make it clear these are internal fields.  Plus that aligns well with the titles in other registries.", "url": "https://github.com/DSpace/DSpace/pull/2648#discussion_r432583936", "createdAt": "2020-05-29T16:00:53Z", "author": {"login": "tdonohue"}, "path": "dspace/config/registries/dspace-types.xml", "diffHunk": "@@ -0,0 +1,20 @@\n+<dspace-dc-types>\n+\n+    <dspace-header>\n+        <title>DSpace Types</title>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47b75f313e543923997cbe8c2ae717323aea7170"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1603, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}