{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4NDU0MjY2", "number": 2910, "title": "The /authz/authorizations/search/object endpoint sometimes ignores the feature param", "bodyText": "References\n\nFixes GitHub issue\n\nDescription\nThis PR ensures the feature parameter is always read and https://github.com/DSpace/Rest7Contract/blob/main/authorizations.md#object is implemented correctly\nInstructions for Reviewers\nThis can be verified by testing https://github.com/DSpace/Rest7Contract/blob/main/authorizations.md#object with and without the feature parameter\nChecklist\nThis checklist provides a reminder of what we are going to look for when reviewing your PR. You need not complete this checklist prior to creating your PR (draft PRs are always welcome). If you are unsure about an item in the checklist, don't hesitate to ask. We're here to help!\n\n My PR is small in size (e.g. less than 1,000 lines of code, not including comments & integration tests). Exceptions may be made if previously agreed upon.\n My PR passes Checkstyle validation based on the Code Style Guide.\n My PR includes Javadoc for all new (or modified) public methods and classes. It also includes Javadoc for large or complex private methods.\n My PR passes all tests and includes new/updated Unit or Integration Tests based on the Code Testing Guide.\n If my PR includes new, third-party dependencies (in any pom.xml), I've made sure their licenses align with the DSpace BSD License based on the Licensing of Contributions documentation.\n If my PR modifies the REST API, I've linked to the REST Contract page (or open PR) related to this change.", "createdAt": "2020-07-29T13:51:48Z", "url": "https://github.com/DSpace/DSpace/pull/2910", "merged": true, "mergeCommit": {"oid": "91fd47648b33fe15d0d50da917b49f374abd20d6"}, "closed": true, "closedAt": "2020-08-04T16:51:37Z", "author": {"login": "benbosman"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5pnygAH2gAyNDU4NDU0MjY2Ojc2ZDQ0MWI1M2ZjZjE2NjU3YTI2YWZlZGM4ZmU0ODBiNWI2NmFhNmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc6XNrngFqTQ1OTMxNDk1OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "76d441b53fcf16657a26afedc8fe480b5b66aa6f", "author": {"user": {"login": "samuelcambien", "name": "Samuel Cambien (Atmire)"}}, "url": "https://github.com/DSpace/DSpace/commit/76d441b53fcf16657a26afedc8fe480b5b66aa6f", "committedDate": "2020-07-29T11:49:20Z", "message": "taskid 71855 The /authz/authorizations/search/object endpoint sometimes ignores the feature param"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e37600d64a43c109ef760b6daad61e730c5840fd", "author": {"user": {"login": "samuelcambien", "name": "Samuel Cambien (Atmire)"}}, "url": "https://github.com/DSpace/DSpace/commit/e37600d64a43c109ef760b6daad61e730c5840fd", "committedDate": "2020-07-29T12:47:23Z", "message": "taskid 71855 The /authz/authorizations/search/object endpoint sometimes ignores the feature param - feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MzE0OTU4", "url": "https://github.com/DSpace/DSpace/pull/2910#pullrequestreview-459314958", "createdAt": "2020-07-31T16:45:45Z", "commit": {"oid": "e37600d64a43c109ef760b6daad61e730c5840fd"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNjo0NTo0NlrOG6PGCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNjo0NTo0NlrOG6PGCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcxNzg5OA==", "bodyText": "This looked odd to me at first, but you are correct :) We don't have an /objectAndFeature endpoint...it's named /object in the REST contract: https://github.com/DSpace/Rest7Contract/blob/main/authorizations.md#object", "url": "https://github.com/DSpace/DSpace/pull/2910#discussion_r463717898", "createdAt": "2020-07-31T16:45:46Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/AuthorizationRestRepositoryIT.java", "diffHunk": "@@ -982,94 +986,153 @@ public void findByObjectAndFeatureTest() throws Exception {\n         String adminToken = getAuthToken(admin.getEmail(), password);\n \n         // verify that it works for administrators - with eperson parameter\n-        getClient(adminToken).perform(get(\"/api/authz/authorizations/search/objectAndFeature\")\n+        getClient(adminToken).perform(get(\"/api/authz/authorizations/search/object\")\n                 .param(\"uri\", comUri)\n                 .param(\"projection\", \"level\")\n                 .param(\"embedLevelDepth\", \"1\")\n                 .param(\"feature\", alwaysTrue.getName())\n                 .param(\"eperson\", admin.getID().toString()))\n             .andExpect(status().isOk())\n-            .andExpect(jsonPath(\"$.type\", is(\"authorization\")))\n-            .andExpect(jsonPath(\"$._embedded.feature.id\", is(alwaysTrue.getName())))\n-            .andExpect(jsonPath(\"$.id\", Matchers.is(admin.getID().toString() + \"_\" + alwaysTrue.getName() + \"_\"\n-                    + comRest.getUniqueType() + \"_\" + comRest.getId())));\n+            .andExpect(jsonPath(\"$.page.totalElements\", is(1)))\n+            .andExpect(jsonPath(\"$._embedded.authorizations\", contains(\n+                    allOf(\n+                            hasJsonPath(\"$.id\", is(admin.getID().toString() + \"_\" + alwaysTrue.getName() + \"_\"\n+                                    + comRest.getUniqueType() + \"_\" + comRest.getId())),\n+                            hasJsonPath(\"$.type\", is(\"authorization\")),\n+                            hasJsonPath(\"$._embedded.feature.id\", is(alwaysTrue.getName())),\n+                            hasJsonPath(\"$._embedded.eperson.id\", is(admin.getID().toString()))\n+                    )\n+            )));\n \n         // verify that it works for administrators - without eperson parameter\n-        getClient(adminToken).perform(get(\"/api/authz/authorizations/search/objectAndFeature\")\n+        getClient(adminToken).perform(get(\"/api/authz/authorizations/search/object\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e37600d64a43c109ef760b6daad61e730c5840fd"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1290, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}