{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1NTM4MzI2", "number": 2706, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMToyNzowN1rODm3Ljw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMToyOTowOVrODm3NzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDc2NTU5OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/DiscoveryRestControllerIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMToyNzowN1rOF0hpuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNDoyMjowNFrOF05G-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYyMTYyNA==", "bodyText": "please add also a test with the \"normal\" eperson", "url": "https://github.com/DSpace/DSpace/pull/2706#discussion_r390621624", "createdAt": "2020-03-10T21:27:07Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/DiscoveryRestControllerIT.java", "diffHunk": "@@ -3717,4 +3719,195 @@ public void discoverSearchObjectsTestForWithdrawnOrPrivateItemsByAdminUser() thr\n \n     }\n \n+    @Test\n+    public void discoverSearchObjectsTestForDiscoverableAndUniscoverableItemsItemsNonAdmin() throws Exception {\n+\n+        //We turn off the authorization system in order to create the structure as defined below\n+        context.turnOffAuthorisationSystem();\n+\n+        //** GIVEN **\n+\n+        //1. A community-collection structure with one parent community with sub-community and two collections.\n+\n+        parentCommunity = CommunityBuilder\n+                .createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+        Community child1 = CommunityBuilder\n+                .createSubCommunity(context, parentCommunity)\n+                .withName(\"Sub Community\")\n+                .build();\n+        Collection col1 = CollectionBuilder\n+                .createCollection(context, child1)\n+                .withName(\"Collection 1\")\n+                .build();\n+        Collection col2 = CollectionBuilder\n+                .createCollection(context, child1)\n+                .withName(\"Collection 2\")\n+                .build();\n+\n+        //2. One public item, one private, one withdrawn.\n+\n+        ItemBuilder.createItem(context, col1)\n+                .withTitle(\"Public Test Item\")\n+                .withIssueDate(\"2010-10-17\")\n+                .withAuthor(\"Smith, Donald\")\n+                .withSubject(\"ExtraEntry\")\n+                .build();\n+\n+        ItemBuilder.createItem(context, col2)\n+                .withTitle(\"Withdrawn Test Item\")\n+                .withIssueDate(\"1990-02-13\")\n+                .withAuthor(\"Smith, Maria\")\n+                .withAuthor(\"Doe, Jane\")\n+                .withSubject(\"ExtraEntry\")\n+                .withdrawn()\n+                .build();\n+\n+        ItemBuilder.createItem(context, col2)\n+                .withTitle(\"Private Test Item\")\n+                .withIssueDate(\"2010-02-13\")\n+                .withAuthor(\"Smith, Maria\")\n+                .withAuthor(\"Doe, Jane\")\n+                .withSubject(\"AnotherTest\")\n+                .withSubject(\"ExtraEntry\")\n+                .makeUnDiscoverable()\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        //** WHEN **\n+\n+        //A non-admin user browses this endpoint to find the withdrawn or private objects in the system\n+        //With a query stating 'Test'\n+\n+        getClient().perform(get(\"/api/discover/search/objects\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ac969b75117f94ef3511ebe96abadd14d4db781"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAwNTk0NA==", "bodyText": "We will add this test", "url": "https://github.com/DSpace/DSpace/pull/2706#discussion_r391005944", "createdAt": "2020-03-11T14:22:04Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/DiscoveryRestControllerIT.java", "diffHunk": "@@ -3717,4 +3719,195 @@ public void discoverSearchObjectsTestForWithdrawnOrPrivateItemsByAdminUser() thr\n \n     }\n \n+    @Test\n+    public void discoverSearchObjectsTestForDiscoverableAndUniscoverableItemsItemsNonAdmin() throws Exception {\n+\n+        //We turn off the authorization system in order to create the structure as defined below\n+        context.turnOffAuthorisationSystem();\n+\n+        //** GIVEN **\n+\n+        //1. A community-collection structure with one parent community with sub-community and two collections.\n+\n+        parentCommunity = CommunityBuilder\n+                .createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+        Community child1 = CommunityBuilder\n+                .createSubCommunity(context, parentCommunity)\n+                .withName(\"Sub Community\")\n+                .build();\n+        Collection col1 = CollectionBuilder\n+                .createCollection(context, child1)\n+                .withName(\"Collection 1\")\n+                .build();\n+        Collection col2 = CollectionBuilder\n+                .createCollection(context, child1)\n+                .withName(\"Collection 2\")\n+                .build();\n+\n+        //2. One public item, one private, one withdrawn.\n+\n+        ItemBuilder.createItem(context, col1)\n+                .withTitle(\"Public Test Item\")\n+                .withIssueDate(\"2010-10-17\")\n+                .withAuthor(\"Smith, Donald\")\n+                .withSubject(\"ExtraEntry\")\n+                .build();\n+\n+        ItemBuilder.createItem(context, col2)\n+                .withTitle(\"Withdrawn Test Item\")\n+                .withIssueDate(\"1990-02-13\")\n+                .withAuthor(\"Smith, Maria\")\n+                .withAuthor(\"Doe, Jane\")\n+                .withSubject(\"ExtraEntry\")\n+                .withdrawn()\n+                .build();\n+\n+        ItemBuilder.createItem(context, col2)\n+                .withTitle(\"Private Test Item\")\n+                .withIssueDate(\"2010-02-13\")\n+                .withAuthor(\"Smith, Maria\")\n+                .withAuthor(\"Doe, Jane\")\n+                .withSubject(\"AnotherTest\")\n+                .withSubject(\"ExtraEntry\")\n+                .makeUnDiscoverable()\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        //** WHEN **\n+\n+        //A non-admin user browses this endpoint to find the withdrawn or private objects in the system\n+        //With a query stating 'Test'\n+\n+        getClient().perform(get(\"/api/discover/search/objects\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYyMTYyNA=="}, "originalCommit": {"oid": "0ac969b75117f94ef3511ebe96abadd14d4db781"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDc2ODE5OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/DiscoveryRestControllerIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMToyODowM1rOF0hrWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNDoyMjozNVrOF05Iiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYyMjA0MA==", "bodyText": "can we have a test for the withdrawn or private facets as they are quite special? or are such test already in place?", "url": "https://github.com/DSpace/DSpace/pull/2706#discussion_r390622040", "createdAt": "2020-03-10T21:28:03Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/DiscoveryRestControllerIT.java", "diffHunk": "@@ -3717,4 +3719,195 @@ public void discoverSearchObjectsTestForWithdrawnOrPrivateItemsByAdminUser() thr\n \n     }\n \n+    @Test\n+    public void discoverSearchObjectsTestForDiscoverableAndUniscoverableItemsItemsNonAdmin() throws Exception {\n+\n+        //We turn off the authorization system in order to create the structure as defined below\n+        context.turnOffAuthorisationSystem();\n+\n+        //** GIVEN **\n+\n+        //1. A community-collection structure with one parent community with sub-community and two collections.\n+\n+        parentCommunity = CommunityBuilder\n+                .createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+        Community child1 = CommunityBuilder\n+                .createSubCommunity(context, parentCommunity)\n+                .withName(\"Sub Community\")\n+                .build();\n+        Collection col1 = CollectionBuilder\n+                .createCollection(context, child1)\n+                .withName(\"Collection 1\")\n+                .build();\n+        Collection col2 = CollectionBuilder\n+                .createCollection(context, child1)\n+                .withName(\"Collection 2\")\n+                .build();\n+\n+        //2. One public item, one private, one withdrawn.\n+\n+        ItemBuilder.createItem(context, col1)\n+                .withTitle(\"Public Test Item\")\n+                .withIssueDate(\"2010-10-17\")\n+                .withAuthor(\"Smith, Donald\")\n+                .withSubject(\"ExtraEntry\")\n+                .build();\n+\n+        ItemBuilder.createItem(context, col2)\n+                .withTitle(\"Withdrawn Test Item\")\n+                .withIssueDate(\"1990-02-13\")\n+                .withAuthor(\"Smith, Maria\")\n+                .withAuthor(\"Doe, Jane\")\n+                .withSubject(\"ExtraEntry\")\n+                .withdrawn()\n+                .build();\n+\n+        ItemBuilder.createItem(context, col2)\n+                .withTitle(\"Private Test Item\")\n+                .withIssueDate(\"2010-02-13\")\n+                .withAuthor(\"Smith, Maria\")\n+                .withAuthor(\"Doe, Jane\")\n+                .withSubject(\"AnotherTest\")\n+                .withSubject(\"ExtraEntry\")\n+                .makeUnDiscoverable()\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        //** WHEN **\n+\n+        //A non-admin user browses this endpoint to find the withdrawn or private objects in the system\n+        //With a query stating 'Test'\n+\n+        getClient().perform(get(\"/api/discover/search/objects\")\n+                .param(\"configuration\", \"discoverableAndUndiscoverableItems\")\n+                .param(\"query\", \"Test\"))\n+\n+                //** THEN **\n+\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$.type\", is(\"discover\")))\n+                .andExpect(jsonPath(\"$._embedded.searchResult.page\", is(\n+                        PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 1)\n+                )))\n+                .andExpect(jsonPath(\"$._embedded.searchResult._embedded.objects\", Matchers.contains(\n+                        SearchResultMatcher.matchOnItemName(\"item\", \"items\", \"Public Test Item\")\n+                )))\n+                .andExpect(jsonPath(\"$._links.self.href\", containsString(\"/api/discover/search/objects\")));\n+    }\n+\n+    @Test\n+    public void discoverSearchObjectsTestForDiscoverableAndUniscoverableItemsItemsByAdminUser() throws Exception {\n+\n+        //We turn off the authorization system in order to create the structure as defined below\n+        context.turnOffAuthorisationSystem();\n+\n+        //** GIVEN **\n+\n+        //1. A community-collection structure with one parent community with sub-community and two collections.\n+\n+        parentCommunity = CommunityBuilder\n+                .createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+        Community child1 = CommunityBuilder\n+                .createSubCommunity(context, parentCommunity)\n+                .withName(\"Sub Community\")\n+                .build();\n+        Collection col1 = CollectionBuilder\n+                .createCollection(context, child1)\n+                .withName(\"Collection 1\")\n+                .build();\n+        Collection col2 = CollectionBuilder\n+                .createCollection(context, child1)\n+                .withName(\"Collection 2\")\n+                .build();\n+\n+        //2. One public item, one private, one withdrawn.\n+\n+        ItemBuilder.createItem(context, col1)\n+                .withTitle(\"Public Test Item\")\n+                .withIssueDate(\"2010-10-17\")\n+                .withAuthor(\"Smith, Donald\")\n+                .withSubject(\"ExtraEntry\")\n+                .build();\n+\n+        ItemBuilder.createItem(context, col2)\n+                .withTitle(\"Withdrawn Test Item\")\n+                .withIssueDate(\"1990-02-13\")\n+                .withAuthor(\"Smith, Maria\")\n+                .withAuthor(\"Doe, Jane\")\n+                .withSubject(\"ExtraEntry\")\n+                .withdrawn()\n+                .build();\n+\n+        ItemBuilder.createItem(context, col2)\n+                .withTitle(\"Private Test Item\")\n+                .withIssueDate(\"2010-02-13\")\n+                .withAuthor(\"Smith, Maria\")\n+                .withAuthor(\"Doe, Jane\")\n+                .withSubject(\"AnotherTest\")\n+                .withSubject(\"ExtraEntry\")\n+                .makeUnDiscoverable()\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        //** WHEN **\n+\n+        // A system admin user browses this endpoint to find the withdrawn or private objects in the system\n+        // With a query stating 'Test'\n+\n+        String adminToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(adminToken).perform(get(\"/api/discover/search/objects\")\n+                .param(\"configuration\", \"discoverableAndUndiscoverableItems\")\n+                .param(\"query\", \"Test\"))\n+\n+                //** THEN **\n+\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$.type\", is(\"discover\")))\n+                .andExpect(jsonPath(\"$._embedded.searchResult.page\", is(\n+                        PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 3)\n+                )))\n+                .andExpect(jsonPath(\"$._embedded.searchResult._embedded.objects\",\n+                        Matchers.containsInAnyOrder(\n+                                SearchResultMatcher.matchOnItemName(\"item\", \"items\", \"Public Test Item\"),\n+                                SearchResultMatcher.matchOnItemName(\"item\", \"items\", \"Withdrawn Test Item\"),\n+                                SearchResultMatcher.matchOnItemName(\"item\", \"items\", \"Private Test Item\")\n+                        )\n+                ))\n+                .andExpect(jsonPath(\"$._embedded.facets\", Matchers.hasItems(\n+                        allOf(\n+                                hasJsonPath(\"$.name\", is(\"discoverable\")),\n+                                hasJsonPath(\"$._embedded.values\", Matchers.hasItems(\n+                                        allOf(\n+                                                hasJsonPath(\"$.label\", is(\"true\")),\n+                                                hasJsonPath(\"$.count\", is(2))\n+                                        ),\n+                                        allOf(\n+                                                hasJsonPath(\"$.label\", is(\"false\")),\n+                                                hasJsonPath(\"$.count\", is(1))\n+                                        )\n+                                ))\n+                        ),\n+                        allOf(\n+                                hasJsonPath(\"$.name\", is(\"withdrawn\")),\n+                                hasJsonPath(\"$._embedded.values\", Matchers.hasItems(\n+                                        allOf(\n+                                                hasJsonPath(\"$.label\", is(\"true\")),\n+                                                hasJsonPath(\"$.count\", is(1))\n+                                        ),\n+                                        allOf(\n+                                                hasJsonPath(\"$.label\", is(\"false\")),\n+                                                hasJsonPath(\"$.count\", is(2))\n+                                        )\n+                                ))\n+                        )\n+                )))\n+                .andExpect(jsonPath(\"$._links.self.href\", containsString(\"/api/discover/search/objects\")));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ac969b75117f94ef3511ebe96abadd14d4db781"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAwNjM0Nw==", "bodyText": "The facet results are tested, performing them as filters is not tested. Since they are not metadata facets, we can indeed add them as well", "url": "https://github.com/DSpace/DSpace/pull/2706#discussion_r391006347", "createdAt": "2020-03-11T14:22:35Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/DiscoveryRestControllerIT.java", "diffHunk": "@@ -3717,4 +3719,195 @@ public void discoverSearchObjectsTestForWithdrawnOrPrivateItemsByAdminUser() thr\n \n     }\n \n+    @Test\n+    public void discoverSearchObjectsTestForDiscoverableAndUniscoverableItemsItemsNonAdmin() throws Exception {\n+\n+        //We turn off the authorization system in order to create the structure as defined below\n+        context.turnOffAuthorisationSystem();\n+\n+        //** GIVEN **\n+\n+        //1. A community-collection structure with one parent community with sub-community and two collections.\n+\n+        parentCommunity = CommunityBuilder\n+                .createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+        Community child1 = CommunityBuilder\n+                .createSubCommunity(context, parentCommunity)\n+                .withName(\"Sub Community\")\n+                .build();\n+        Collection col1 = CollectionBuilder\n+                .createCollection(context, child1)\n+                .withName(\"Collection 1\")\n+                .build();\n+        Collection col2 = CollectionBuilder\n+                .createCollection(context, child1)\n+                .withName(\"Collection 2\")\n+                .build();\n+\n+        //2. One public item, one private, one withdrawn.\n+\n+        ItemBuilder.createItem(context, col1)\n+                .withTitle(\"Public Test Item\")\n+                .withIssueDate(\"2010-10-17\")\n+                .withAuthor(\"Smith, Donald\")\n+                .withSubject(\"ExtraEntry\")\n+                .build();\n+\n+        ItemBuilder.createItem(context, col2)\n+                .withTitle(\"Withdrawn Test Item\")\n+                .withIssueDate(\"1990-02-13\")\n+                .withAuthor(\"Smith, Maria\")\n+                .withAuthor(\"Doe, Jane\")\n+                .withSubject(\"ExtraEntry\")\n+                .withdrawn()\n+                .build();\n+\n+        ItemBuilder.createItem(context, col2)\n+                .withTitle(\"Private Test Item\")\n+                .withIssueDate(\"2010-02-13\")\n+                .withAuthor(\"Smith, Maria\")\n+                .withAuthor(\"Doe, Jane\")\n+                .withSubject(\"AnotherTest\")\n+                .withSubject(\"ExtraEntry\")\n+                .makeUnDiscoverable()\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        //** WHEN **\n+\n+        //A non-admin user browses this endpoint to find the withdrawn or private objects in the system\n+        //With a query stating 'Test'\n+\n+        getClient().perform(get(\"/api/discover/search/objects\")\n+                .param(\"configuration\", \"discoverableAndUndiscoverableItems\")\n+                .param(\"query\", \"Test\"))\n+\n+                //** THEN **\n+\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$.type\", is(\"discover\")))\n+                .andExpect(jsonPath(\"$._embedded.searchResult.page\", is(\n+                        PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 1)\n+                )))\n+                .andExpect(jsonPath(\"$._embedded.searchResult._embedded.objects\", Matchers.contains(\n+                        SearchResultMatcher.matchOnItemName(\"item\", \"items\", \"Public Test Item\")\n+                )))\n+                .andExpect(jsonPath(\"$._links.self.href\", containsString(\"/api/discover/search/objects\")));\n+    }\n+\n+    @Test\n+    public void discoverSearchObjectsTestForDiscoverableAndUniscoverableItemsItemsByAdminUser() throws Exception {\n+\n+        //We turn off the authorization system in order to create the structure as defined below\n+        context.turnOffAuthorisationSystem();\n+\n+        //** GIVEN **\n+\n+        //1. A community-collection structure with one parent community with sub-community and two collections.\n+\n+        parentCommunity = CommunityBuilder\n+                .createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+        Community child1 = CommunityBuilder\n+                .createSubCommunity(context, parentCommunity)\n+                .withName(\"Sub Community\")\n+                .build();\n+        Collection col1 = CollectionBuilder\n+                .createCollection(context, child1)\n+                .withName(\"Collection 1\")\n+                .build();\n+        Collection col2 = CollectionBuilder\n+                .createCollection(context, child1)\n+                .withName(\"Collection 2\")\n+                .build();\n+\n+        //2. One public item, one private, one withdrawn.\n+\n+        ItemBuilder.createItem(context, col1)\n+                .withTitle(\"Public Test Item\")\n+                .withIssueDate(\"2010-10-17\")\n+                .withAuthor(\"Smith, Donald\")\n+                .withSubject(\"ExtraEntry\")\n+                .build();\n+\n+        ItemBuilder.createItem(context, col2)\n+                .withTitle(\"Withdrawn Test Item\")\n+                .withIssueDate(\"1990-02-13\")\n+                .withAuthor(\"Smith, Maria\")\n+                .withAuthor(\"Doe, Jane\")\n+                .withSubject(\"ExtraEntry\")\n+                .withdrawn()\n+                .build();\n+\n+        ItemBuilder.createItem(context, col2)\n+                .withTitle(\"Private Test Item\")\n+                .withIssueDate(\"2010-02-13\")\n+                .withAuthor(\"Smith, Maria\")\n+                .withAuthor(\"Doe, Jane\")\n+                .withSubject(\"AnotherTest\")\n+                .withSubject(\"ExtraEntry\")\n+                .makeUnDiscoverable()\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        //** WHEN **\n+\n+        // A system admin user browses this endpoint to find the withdrawn or private objects in the system\n+        // With a query stating 'Test'\n+\n+        String adminToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(adminToken).perform(get(\"/api/discover/search/objects\")\n+                .param(\"configuration\", \"discoverableAndUndiscoverableItems\")\n+                .param(\"query\", \"Test\"))\n+\n+                //** THEN **\n+\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$.type\", is(\"discover\")))\n+                .andExpect(jsonPath(\"$._embedded.searchResult.page\", is(\n+                        PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 3)\n+                )))\n+                .andExpect(jsonPath(\"$._embedded.searchResult._embedded.objects\",\n+                        Matchers.containsInAnyOrder(\n+                                SearchResultMatcher.matchOnItemName(\"item\", \"items\", \"Public Test Item\"),\n+                                SearchResultMatcher.matchOnItemName(\"item\", \"items\", \"Withdrawn Test Item\"),\n+                                SearchResultMatcher.matchOnItemName(\"item\", \"items\", \"Private Test Item\")\n+                        )\n+                ))\n+                .andExpect(jsonPath(\"$._embedded.facets\", Matchers.hasItems(\n+                        allOf(\n+                                hasJsonPath(\"$.name\", is(\"discoverable\")),\n+                                hasJsonPath(\"$._embedded.values\", Matchers.hasItems(\n+                                        allOf(\n+                                                hasJsonPath(\"$.label\", is(\"true\")),\n+                                                hasJsonPath(\"$.count\", is(2))\n+                                        ),\n+                                        allOf(\n+                                                hasJsonPath(\"$.label\", is(\"false\")),\n+                                                hasJsonPath(\"$.count\", is(1))\n+                                        )\n+                                ))\n+                        ),\n+                        allOf(\n+                                hasJsonPath(\"$.name\", is(\"withdrawn\")),\n+                                hasJsonPath(\"$._embedded.values\", Matchers.hasItems(\n+                                        allOf(\n+                                                hasJsonPath(\"$.label\", is(\"true\")),\n+                                                hasJsonPath(\"$.count\", is(1))\n+                                        ),\n+                                        allOf(\n+                                                hasJsonPath(\"$.label\", is(\"false\")),\n+                                                hasJsonPath(\"$.count\", is(2))\n+                                        )\n+                                ))\n+                        )\n+                )))\n+                .andExpect(jsonPath(\"$._links.self.href\", containsString(\"/api/discover/search/objects\")));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYyMjA0MA=="}, "originalCommit": {"oid": "0ac969b75117f94ef3511ebe96abadd14d4db781"}, "originalPosition": 203}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDc3MTMyOnYy", "diffSide": "RIGHT", "path": "dspace/config/spring/api/discovery.xml", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMToyOTowOVrOF0htMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjoyODo0N1rOF1l_xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYyMjUxMw==", "bodyText": "I would prefer a shorter name, what about allitems or administrativeitemsview ?", "url": "https://github.com/DSpace/DSpace/pull/2706#discussion_r390622513", "createdAt": "2020-03-10T21:29:09Z", "author": {"login": "abollini"}, "path": "dspace/config/spring/api/discovery.xml", "diffHunk": "@@ -55,6 +55,7 @@\n                 <entry key=\"workspace\" value-ref=\"workspaceConfiguration\" />\n                 <entry key=\"workflow\" value-ref=\"workflowConfiguration\" />\n                 <entry key=\"undiscoverable\" value-ref=\"unDiscoverableItems\" />\n+                <entry key=\"discoverableAndUndiscoverableItems\" value-ref=\"discoverableAndUndiscoverableItems\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ac969b75117f94ef3511ebe96abadd14d4db781"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAxMDQyNA==", "bodyText": "I'd prefer not to use allitems to avoid situations similar to ItemService containing findAll and findAllUnfiltered. The administrativeItemsView seems ok, but it's a name that's not really visible to the user (Angular will use it for the search private items UI, but the user won't see the name)", "url": "https://github.com/DSpace/DSpace/pull/2706#discussion_r391010424", "createdAt": "2020-03-11T14:27:53Z", "author": {"login": "benbosman"}, "path": "dspace/config/spring/api/discovery.xml", "diffHunk": "@@ -55,6 +55,7 @@\n                 <entry key=\"workspace\" value-ref=\"workspaceConfiguration\" />\n                 <entry key=\"workflow\" value-ref=\"workflowConfiguration\" />\n                 <entry key=\"undiscoverable\" value-ref=\"unDiscoverableItems\" />\n+                <entry key=\"discoverableAndUndiscoverableItems\" value-ref=\"discoverableAndUndiscoverableItems\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYyMjUxMw=="}, "originalCommit": {"oid": "0ac969b75117f94ef3511ebe96abadd14d4db781"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTA1OTU4MA==", "bodyText": "@abollini and @benbosman : I'd recommend dropping \"Items\" from the key here, as no other filter uses that.  I'm fine with either \"discoverableAndUndiscoverable\" or \"administrativeView\".  I don't mind this key being longer, as long as it's descriptive.", "url": "https://github.com/DSpace/DSpace/pull/2706#discussion_r391059580", "createdAt": "2020-03-11T15:32:50Z", "author": {"login": "tdonohue"}, "path": "dspace/config/spring/api/discovery.xml", "diffHunk": "@@ -55,6 +55,7 @@\n                 <entry key=\"workspace\" value-ref=\"workspaceConfiguration\" />\n                 <entry key=\"workflow\" value-ref=\"workflowConfiguration\" />\n                 <entry key=\"undiscoverable\" value-ref=\"unDiscoverableItems\" />\n+                <entry key=\"discoverableAndUndiscoverableItems\" value-ref=\"discoverableAndUndiscoverableItems\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYyMjUxMw=="}, "originalCommit": {"oid": "0ac969b75117f94ef3511ebe96abadd14d4db781"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ4Nzg0Ng==", "bodyText": "Shall we use administrativeView in that case, seems to match everyone's requirements?", "url": "https://github.com/DSpace/DSpace/pull/2706#discussion_r391487846", "createdAt": "2020-03-12T09:17:10Z", "author": {"login": "benbosman"}, "path": "dspace/config/spring/api/discovery.xml", "diffHunk": "@@ -55,6 +55,7 @@\n                 <entry key=\"workspace\" value-ref=\"workspaceConfiguration\" />\n                 <entry key=\"workflow\" value-ref=\"workflowConfiguration\" />\n                 <entry key=\"undiscoverable\" value-ref=\"unDiscoverableItems\" />\n+                <entry key=\"discoverableAndUndiscoverableItems\" value-ref=\"discoverableAndUndiscoverableItems\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYyMjUxMw=="}, "originalCommit": {"oid": "0ac969b75117f94ef3511ebe96abadd14d4db781"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc0MTM4MQ==", "bodyText": "@benbosman : \"administrativeView\" is fine by me.", "url": "https://github.com/DSpace/DSpace/pull/2706#discussion_r391741381", "createdAt": "2020-03-12T16:28:47Z", "author": {"login": "tdonohue"}, "path": "dspace/config/spring/api/discovery.xml", "diffHunk": "@@ -55,6 +55,7 @@\n                 <entry key=\"workspace\" value-ref=\"workspaceConfiguration\" />\n                 <entry key=\"workflow\" value-ref=\"workflowConfiguration\" />\n                 <entry key=\"undiscoverable\" value-ref=\"unDiscoverableItems\" />\n+                <entry key=\"discoverableAndUndiscoverableItems\" value-ref=\"discoverableAndUndiscoverableItems\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYyMjUxMw=="}, "originalCommit": {"oid": "0ac969b75117f94ef3511ebe96abadd14d4db781"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1689, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}