{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2MTg5NzM3", "number": 2830, "title": "Parent links for bitstream->bundle->item", "bodyText": "References\nAdd references/links to any related tickets or PRs. These may include:\n\nLink to REST Contract - Bundle to Item (Functionality+Tests)\nLink to REST Contract - Bitstream to Bundle (Tests)\n\nDescription\n\nAt the moment, there were some missing \u2018parent\u2019 links present in the returned records for bitstreams/bundles/items + the ones that are present, needed to be properly tested.\nThis PR adds in the exposed links for the bundle to the owning item and the related tests, as well as additional tests for the links from the bitstream to the owning bundle\n\nInstructions for Reviewers\nPlease add a more detailed description of the changes made by your PR. At a minimum, providing a bulleted list of changes in your PR is helpful to reviewers.\nList of changes in this PR:\n\nBundleItemLinkRepository created for the link of the bundle to the owning item\nTests added in BundleRestRepositoryIT, BitstreamRestRepositoryIT and BundleMatcher for these links\n\nFairly straightforward testing can be done here.\nGoing through the bitstreams/bundles should contain the relevant parent links\nChecklist\nThis checklist provides a reminder of what we are going to look for when reviewing your PR. You need not complete this checklist prior to creating your PR (draft PRs are always welcome). If you are unsure about an item in the checklist, don't hesitate to ask. We're here to help!\n\n My PR is small in size (e.g. less than 1,000 lines of code, not including comments & integration tests). Exceptions may be made if previously agreed upon.\n My PR passes Checkstyle validation based on the Code Style Guide.\n My PR includes Javadoc for all new (or modified) public methods and classes. It also includes Javadoc for large or complex private methods.\n My PR passes all tests and includes new/updated Unit or Integration Tests based on the Code Testing Guide.\n If my PR includes new, third-party dependencies (in any pom.xml), I've made sure their licenses align with the DSpace BSD License based on the Licensing of Contributions documentation.\n If my PR modifies the REST API, I've linked to the REST Contract page (or open PR) related to this change.", "createdAt": "2020-07-08T11:47:32Z", "url": "https://github.com/DSpace/DSpace/pull/2830", "merged": true, "mergeCommit": {"oid": "9a9253e0912ccfcaba7bf8765120c510292056c2"}, "closed": true, "closedAt": "2020-07-23T17:53:42Z", "author": {"login": "jonas-atmire"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcy4UtcAH2gAyNDQ2MTg5NzM3OmRmZTMzZDI3M2UyYzExODliNGVhZTU0MDQxZThjNDU5MTRlMDdjMTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3zJ9MgFqTQ1NDM2MjQ5OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "dfe33d273e2c1189b4eae54041e8c45914e07c17", "author": {"user": {"login": "Atmire-Kristof", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/dfe33d273e2c1189b4eae54041e8c45914e07c17", "committedDate": "2020-07-08T10:59:36Z", "message": "71701: item link on BundleRest + embedded parent tests for bundle and bitstream"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3243f19127f61f793598fe8e6dab19c522b0f5ec", "author": {"user": {"login": "Atmire-Kristof", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/3243f19127f61f793598fe8e6dab19c522b0f5ec", "committedDate": "2020-07-08T10:59:36Z", "message": "71701: Additional parent link tests for Bitstream and Bundle + JavaDocs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e33a866c6af5cd885770aba53aae92fdc323f6c", "author": {"user": {"login": "Atmire-Kristof", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/3e33a866c6af5cd885770aba53aae92fdc323f6c", "committedDate": "2020-07-08T10:59:36Z", "message": "71701: Checkstyle fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1ODUxMDE2", "url": "https://github.com/DSpace/DSpace/pull/2830#pullrequestreview-445851016", "createdAt": "2020-07-09T18:06:06Z", "commit": {"oid": "3e33a866c6af5cd885770aba53aae92fdc323f6c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODowNjowNlrOGvcMCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODowODoxNVrOGvcQZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM5ODA4OQ==", "bodyText": "I would just say: get the Item where the bundle resides in. We should not support bundle shared between multiple items", "url": "https://github.com/DSpace/DSpace/pull/2830#discussion_r452398089", "createdAt": "2020-07-09T18:06:06Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/BundleItemLinkRepository.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import javax.annotation.Nullable;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.dspace.app.rest.model.BundleRest;\n+import org.dspace.app.rest.model.ItemRest;\n+import org.dspace.app.rest.projection.Projection;\n+import org.dspace.content.Bundle;\n+import org.dspace.content.Item;\n+import org.dspace.content.service.BundleService;\n+import org.dspace.core.Context;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Link repository for \"item\" subresource of an individual bundle.\n+ */\n+@Component(BundleRest.CATEGORY + \".\" + BundleRest.NAME + \".\" + BundleRest.ITEM)\n+public class BundleItemLinkRepository extends AbstractDSpaceRestRepository\n+        implements LinkRestRepository {\n+\n+    @Autowired\n+    BundleService bundleService;\n+\n+    /**\n+     * Get the first item the provided bundle resides in\n+     */\n+    @PreAuthorize(\"hasPermission(#bundleId, 'BUNDLE', 'READ')\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e33a866c6af5cd885770aba53aae92fdc323f6c"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM5ODk4Ng==", "bodyText": "I would prefer to remove this test as this is an use case that we don't want to support", "url": "https://github.com/DSpace/DSpace/pull/2830#discussion_r452398986", "createdAt": "2020-07-09T18:07:49Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/BitstreamRestRepositoryIT.java", "diffHunk": "@@ -1143,5 +1146,133 @@ public void testHiddenMetadataForUserWithWriteRights() throws Exception {\n \n     }\n \n+    @Test\n+    public void getEmbeddedBundleForBitstream() throws Exception {\n+        //We turn off the authorization system in order to create the structure as defined below\n+        context.turnOffAuthorisationSystem();\n+\n+        //** GIVEN **\n+        //1. A community-collection structure with one parent community with sub-community and one collection.\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                .withName(\"Sub Community\")\n+                .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1).withName(\"Collection 1\").build();\n+\n+        //2. One public items that is readable by Anonymous\n+        Item publicItem1 = ItemBuilder.createItem(context, col1)\n+                .withTitle(\"Test\")\n+                .withIssueDate(\"2010-10-17\")\n+                .withAuthor(\"Smith, Donald\")\n+                .withSubject(\"ExtraEntry\")\n+                .build();\n+\n+        String bitstreamContent = \"ThisIsSomeDummyText\";\n+\n+        //Add a bitstream to an item\n+        Bitstream bitstream = null;\n+        try (InputStream is = IOUtils.toInputStream(bitstreamContent, CharEncoding.UTF_8)) {\n+            bitstream = BitstreamBuilder.\n+                    createBitstream(context, publicItem1, is)\n+                    .withName(\"Bitstream\")\n+                    .withDescription(\"Description\")\n+                    .withMimeType(\"text/plain\")\n+                    .build();\n+        }\n+\n+        Bundle bundle = bitstream.getBundles().get(0);\n+\n+        //Get the bitstream with embedded bundle\n+        getClient().perform(get(\"/api/core/bitstreams/\" + bitstream.getID() + \"?embed=bundle\"))\n+                .andExpect(status().isOk())\n+                .andExpect(content().contentType(contentType))\n+                .andExpect(jsonPath(\"$._embedded.bundle\",\n+                        BundleMatcher.matchProperties(\n+                                bundle.getName(),\n+                                bundle.getID(),\n+                                bundle.getHandle(),\n+                                bundle.getType()\n+                        )\n+                ));\n+    }\n+\n+    @Test\n+    public void linksToFirstBundleWhenMultipleBundles() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e33a866c6af5cd885770aba53aae92fdc323f6c"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM5OTIwNQ==", "bodyText": "I would prefer to remove this test as this is an use case that we don't want to support", "url": "https://github.com/DSpace/DSpace/pull/2830#discussion_r452399205", "createdAt": "2020-07-09T18:08:15Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/BundleRestRepositoryIT.java", "diffHunk": "@@ -636,4 +641,49 @@ public void deleteBundle_NoAuthToken() throws Exception {\n                 .andExpect(status().isOk());\n     }\n \n+    @Test\n+    public void getEmbeddedItemForBundle() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        bundle1 = BundleBuilder.createBundle(context, item)\n+                .withName(\"testname\")\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/bundles/\" + bundle1.getID() + \"?embed=item\"))\n+                .andExpect(status().isOk())\n+                .andExpect(content().contentType(contentType))\n+                .andExpect(jsonPath(\"$._embedded.item\",\n+                        ItemMatcher.matchItemWithTitleAndDateIssued(item, \"Public item 1\", \"2017-10-17\")\n+                ));\n+    }\n+\n+    @Test\n+    public void linksToFirstItemWhenMultipleItems() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e33a866c6af5cd885770aba53aae92fdc323f6c"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNTcxNjc0", "url": "https://github.com/DSpace/DSpace/pull/2830#pullrequestreview-452571674", "createdAt": "2020-07-21T15:24:26Z", "commit": {"oid": "3e33a866c6af5cd885770aba53aae92fdc323f6c"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNToyNDoyNlrOG09VeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNToyNjo0OVrOG09ccA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE4NDA1Nw==", "bodyText": "I'm OK with this test, as it proves that we are only ever returning the FIRST bundle if somehow an Item did exist in multiple bundles.\nThat said, I think @abollini is correct that we need to add a special comment on this method.  I'd recommend we add JavaDocs or a comment above this test method to say:\nThis test proves that, if a bitstream is linked to multiple bundles, we only ever return the first bundle.  **NOTE: DSpace does NOT support or expect to have a bitstream linked to multiple bundles**.  But, because the database does allow for it, this test simply proves the REST API will respond without an error.", "url": "https://github.com/DSpace/DSpace/pull/2830#discussion_r458184057", "createdAt": "2020-07-21T15:24:26Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/BitstreamRestRepositoryIT.java", "diffHunk": "@@ -1143,5 +1146,133 @@ public void testHiddenMetadataForUserWithWriteRights() throws Exception {\n \n     }\n \n+    @Test\n+    public void getEmbeddedBundleForBitstream() throws Exception {\n+        //We turn off the authorization system in order to create the structure as defined below\n+        context.turnOffAuthorisationSystem();\n+\n+        //** GIVEN **\n+        //1. A community-collection structure with one parent community with sub-community and one collection.\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                .withName(\"Sub Community\")\n+                .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1).withName(\"Collection 1\").build();\n+\n+        //2. One public items that is readable by Anonymous\n+        Item publicItem1 = ItemBuilder.createItem(context, col1)\n+                .withTitle(\"Test\")\n+                .withIssueDate(\"2010-10-17\")\n+                .withAuthor(\"Smith, Donald\")\n+                .withSubject(\"ExtraEntry\")\n+                .build();\n+\n+        String bitstreamContent = \"ThisIsSomeDummyText\";\n+\n+        //Add a bitstream to an item\n+        Bitstream bitstream = null;\n+        try (InputStream is = IOUtils.toInputStream(bitstreamContent, CharEncoding.UTF_8)) {\n+            bitstream = BitstreamBuilder.\n+                    createBitstream(context, publicItem1, is)\n+                    .withName(\"Bitstream\")\n+                    .withDescription(\"Description\")\n+                    .withMimeType(\"text/plain\")\n+                    .build();\n+        }\n+\n+        Bundle bundle = bitstream.getBundles().get(0);\n+\n+        //Get the bitstream with embedded bundle\n+        getClient().perform(get(\"/api/core/bitstreams/\" + bitstream.getID() + \"?embed=bundle\"))\n+                .andExpect(status().isOk())\n+                .andExpect(content().contentType(contentType))\n+                .andExpect(jsonPath(\"$._embedded.bundle\",\n+                        BundleMatcher.matchProperties(\n+                                bundle.getName(),\n+                                bundle.getID(),\n+                                bundle.getHandle(),\n+                                bundle.getType()\n+                        )\n+                ));\n+    }\n+\n+    @Test\n+    public void linksToFirstBundleWhenMultipleBundles() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM5ODk4Ng=="}, "originalCommit": {"oid": "3e33a866c6af5cd885770aba53aae92fdc323f6c"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE4NTg0MA==", "bodyText": "Again, as before, I'm OK with this test, as it proves our REST API won't completely error out if somehow a site has a Bundle belonging to two Items.\nThat said, I agree with @abollini  that this isn't something we should actively support.  So, again, let's add some JavaDocs/comments to this test method to say something like:\nThis test proves that, if a bundle is linked to multiple items, we only ever return the first item. **NOTE: DSpace does NOT support or expect to have a bundle linked to multiple items**. But, because the database does allow for it, this test simply proves the REST API will respond without an error.", "url": "https://github.com/DSpace/DSpace/pull/2830#discussion_r458185840", "createdAt": "2020-07-21T15:26:49Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/BundleRestRepositoryIT.java", "diffHunk": "@@ -636,4 +641,49 @@ public void deleteBundle_NoAuthToken() throws Exception {\n                 .andExpect(status().isOk());\n     }\n \n+    @Test\n+    public void getEmbeddedItemForBundle() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        bundle1 = BundleBuilder.createBundle(context, item)\n+                .withName(\"testname\")\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/core/bundles/\" + bundle1.getID() + \"?embed=item\"))\n+                .andExpect(status().isOk())\n+                .andExpect(content().contentType(contentType))\n+                .andExpect(jsonPath(\"$._embedded.item\",\n+                        ItemMatcher.matchItemWithTitleAndDateIssued(item, \"Public item 1\", \"2017-10-17\")\n+                ));\n+    }\n+\n+    @Test\n+    public void linksToFirstItemWhenMultipleItems() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM5OTIwNQ=="}, "originalCommit": {"oid": "3e33a866c6af5cd885770aba53aae92fdc323f6c"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "836876508f42f44583b8aadd22d4859473b3b9d9", "author": {"user": {"login": "jonas-atmire", "name": "Jonas Van Goolen"}}, "url": "https://github.com/DSpace/DSpace/commit/836876508f42f44583b8aadd22d4859473b3b9d9", "committedDate": "2020-07-23T06:59:10Z", "message": "Addition of explanation to tests + Small comment update"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MzYyNDk4", "url": "https://github.com/DSpace/DSpace/pull/2830#pullrequestreview-454362498", "createdAt": "2020-07-23T17:47:57Z", "commit": {"oid": "836876508f42f44583b8aadd22d4859473b3b9d9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1523, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}