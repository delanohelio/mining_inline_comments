{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzMzc4MDk5", "number": 3003, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMToxODowMFrOEzAUcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMToxODoyOFrOEzAVFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTE4MDY3OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/ItemRestRepositoryIT.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMToxODowMFrOHp91lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxNToxMTozOFrOIdly0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc2NjgwNA==", "bodyText": "Shouldn't this test also check to make sure that deleting the item also deleted the relationship & copied metadata over to the Item?   It looks like right now, we are just verifying that the relationship cannot be deleted directly, but that the Item deletion succeeds.  I know that's also useful (as the item deletion would not succeed), but it seems like it only tests part of the new code?", "url": "https://github.com/DSpace/DSpace/pull/3003#discussion_r513766804", "createdAt": "2020-10-28T21:18:00Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/ItemRestRepositoryIT.java", "diffHunk": "@@ -2740,5 +2746,68 @@ public void testHiddenMetadataForUserWithWriteRights() throws Exception {\n \n     }\n \n+    @Test\n+    public void deleteItemWithMinRelationshipsTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        //** GIVEN **\n+        //1. A community with one collection.\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Collection col1 = CollectionBuilder\n+            .createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        Item author1 = ItemBuilder.createItem(context, col1)\n+                                  .withTitle(\"Author1\")\n+                                  .withIssueDate(\"2017-10-17\")\n+                                  .withAuthor(\"Smith, Donald\")\n+                                  .withPersonIdentifierLastName(\"Smith\")\n+                                  .withPersonIdentifierFirstName(\"Donald\")\n+                                  .withRelationshipType(\"Person\")\n+                                  .build();\n+\n+        Item author2 = ItemBuilder.createItem(context, col1)\n+                                  .withTitle(\"Author2\")\n+                                  .withIssueDate(\"2016-02-13\")\n+                                  .withAuthor(\"Smith, Maria\")\n+                                  .withRelationshipType(\"Person\")\n+                                  .build();\n+\n+        Item publication1 = ItemBuilder.createItem(context, col1)\n+                                       .withTitle(\"Publication1\")\n+                                       .withAuthor(\"Testy, TEst\")\n+                                       .withIssueDate(\"2015-01-01\")\n+                                       .withRelationshipType(\"Publication\")\n+                                       .build();\n+\n+        EntityType publication = EntityTypeBuilder.createEntityTypeBuilder(context, \"Publication\").build();\n+        EntityType person = EntityTypeBuilder.createEntityTypeBuilder(context, \"Person\").build();\n+\n+\n+        RelationshipType isAuthorOfPublication = RelationshipTypeBuilder\n+            .createRelationshipTypeBuilder(context, publication, person, \"isAuthorOfPublication\",\n+                                           \"isPublicationOfAuthor\", 2, null, 0,\n+                                           null).withCopyToLeft(false).withCopyToRight(true).build();\n+\n+        Relationship relationship1 = RelationshipBuilder\n+            .createRelationshipBuilder(context, publication1, author1, isAuthorOfPublication).build();\n+        Relationship relationship2 = RelationshipBuilder\n+            .createRelationshipBuilder(context, publication1, author2, isAuthorOfPublication).build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/relationships/\" + relationship1.getID()))\n+                        .andExpect(status().is(400));\n+        //Delete public item\n+        getClient(token).perform(delete(\"/api/core/items/\" + publication1.getID()))\n+                        .andExpect(status().is(204));\n+        getClient(token).perform(get(\"/api/core/items/\" + publication1.getID()))\n+                        .andExpect(status().is(404));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a8f81db44b9e3005c5f3d2439dab56917271097"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODMwNTIxNQ==", "bodyText": "The test to verify the relationship is deleted is now present. This did reveal that the status code of a non-existing relationship was not 404 yet, which has been fixed in this PR now\nWe're working on the details of the metadata copy", "url": "https://github.com/DSpace/DSpace/pull/3003#discussion_r558305215", "createdAt": "2021-01-15T13:27:17Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/ItemRestRepositoryIT.java", "diffHunk": "@@ -2740,5 +2746,68 @@ public void testHiddenMetadataForUserWithWriteRights() throws Exception {\n \n     }\n \n+    @Test\n+    public void deleteItemWithMinRelationshipsTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        //** GIVEN **\n+        //1. A community with one collection.\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Collection col1 = CollectionBuilder\n+            .createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        Item author1 = ItemBuilder.createItem(context, col1)\n+                                  .withTitle(\"Author1\")\n+                                  .withIssueDate(\"2017-10-17\")\n+                                  .withAuthor(\"Smith, Donald\")\n+                                  .withPersonIdentifierLastName(\"Smith\")\n+                                  .withPersonIdentifierFirstName(\"Donald\")\n+                                  .withRelationshipType(\"Person\")\n+                                  .build();\n+\n+        Item author2 = ItemBuilder.createItem(context, col1)\n+                                  .withTitle(\"Author2\")\n+                                  .withIssueDate(\"2016-02-13\")\n+                                  .withAuthor(\"Smith, Maria\")\n+                                  .withRelationshipType(\"Person\")\n+                                  .build();\n+\n+        Item publication1 = ItemBuilder.createItem(context, col1)\n+                                       .withTitle(\"Publication1\")\n+                                       .withAuthor(\"Testy, TEst\")\n+                                       .withIssueDate(\"2015-01-01\")\n+                                       .withRelationshipType(\"Publication\")\n+                                       .build();\n+\n+        EntityType publication = EntityTypeBuilder.createEntityTypeBuilder(context, \"Publication\").build();\n+        EntityType person = EntityTypeBuilder.createEntityTypeBuilder(context, \"Person\").build();\n+\n+\n+        RelationshipType isAuthorOfPublication = RelationshipTypeBuilder\n+            .createRelationshipTypeBuilder(context, publication, person, \"isAuthorOfPublication\",\n+                                           \"isPublicationOfAuthor\", 2, null, 0,\n+                                           null).withCopyToLeft(false).withCopyToRight(true).build();\n+\n+        Relationship relationship1 = RelationshipBuilder\n+            .createRelationshipBuilder(context, publication1, author1, isAuthorOfPublication).build();\n+        Relationship relationship2 = RelationshipBuilder\n+            .createRelationshipBuilder(context, publication1, author2, isAuthorOfPublication).build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/relationships/\" + relationship1.getID()))\n+                        .andExpect(status().is(400));\n+        //Delete public item\n+        getClient(token).perform(delete(\"/api/core/items/\" + publication1.getID()))\n+                        .andExpect(status().is(204));\n+        getClient(token).perform(get(\"/api/core/items/\" + publication1.getID()))\n+                        .andExpect(status().is(404));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc2NjgwNA=="}, "originalCommit": {"oid": "9a8f81db44b9e3005c5f3d2439dab56917271097"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg5ODgzNA==", "bodyText": "This has been solved now as well", "url": "https://github.com/DSpace/DSpace/pull/3003#discussion_r567898834", "createdAt": "2021-02-01T15:11:38Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/ItemRestRepositoryIT.java", "diffHunk": "@@ -2740,5 +2746,68 @@ public void testHiddenMetadataForUserWithWriteRights() throws Exception {\n \n     }\n \n+    @Test\n+    public void deleteItemWithMinRelationshipsTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        //** GIVEN **\n+        //1. A community with one collection.\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Collection col1 = CollectionBuilder\n+            .createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        Item author1 = ItemBuilder.createItem(context, col1)\n+                                  .withTitle(\"Author1\")\n+                                  .withIssueDate(\"2017-10-17\")\n+                                  .withAuthor(\"Smith, Donald\")\n+                                  .withPersonIdentifierLastName(\"Smith\")\n+                                  .withPersonIdentifierFirstName(\"Donald\")\n+                                  .withRelationshipType(\"Person\")\n+                                  .build();\n+\n+        Item author2 = ItemBuilder.createItem(context, col1)\n+                                  .withTitle(\"Author2\")\n+                                  .withIssueDate(\"2016-02-13\")\n+                                  .withAuthor(\"Smith, Maria\")\n+                                  .withRelationshipType(\"Person\")\n+                                  .build();\n+\n+        Item publication1 = ItemBuilder.createItem(context, col1)\n+                                       .withTitle(\"Publication1\")\n+                                       .withAuthor(\"Testy, TEst\")\n+                                       .withIssueDate(\"2015-01-01\")\n+                                       .withRelationshipType(\"Publication\")\n+                                       .build();\n+\n+        EntityType publication = EntityTypeBuilder.createEntityTypeBuilder(context, \"Publication\").build();\n+        EntityType person = EntityTypeBuilder.createEntityTypeBuilder(context, \"Person\").build();\n+\n+\n+        RelationshipType isAuthorOfPublication = RelationshipTypeBuilder\n+            .createRelationshipTypeBuilder(context, publication, person, \"isAuthorOfPublication\",\n+                                           \"isPublicationOfAuthor\", 2, null, 0,\n+                                           null).withCopyToLeft(false).withCopyToRight(true).build();\n+\n+        Relationship relationship1 = RelationshipBuilder\n+            .createRelationshipBuilder(context, publication1, author1, isAuthorOfPublication).build();\n+        Relationship relationship2 = RelationshipBuilder\n+            .createRelationshipBuilder(context, publication1, author2, isAuthorOfPublication).build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/relationships/\" + relationship1.getID()))\n+                        .andExpect(status().is(400));\n+        //Delete public item\n+        getClient(token).perform(delete(\"/api/core/items/\" + publication1.getID()))\n+                        .andExpect(status().is(204));\n+        getClient(token).perform(get(\"/api/core/items/\" + publication1.getID()))\n+                        .andExpect(status().is(404));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc2NjgwNA=="}, "originalCommit": {"oid": "9a8f81db44b9e3005c5f3d2439dab56917271097"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTE4MjI4OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMToxODoyOFrOHp92iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMzoyNzoyNVrOIUcP7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc2NzA1MQ==", "bodyText": "Same with this test...it seems like we should be checking that the relationship was deleted & metadata copied over.", "url": "https://github.com/DSpace/DSpace/pull/3003#discussion_r513767051", "createdAt": "2020-10-28T21:18:28Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java", "diffHunk": "@@ -4613,4 +4619,66 @@ public void findOneFullProjectionTest() throws Exception {\n                                 .andExpect(jsonPath(\"$._embedded.collection._embedded.adminGroup\").doesNotExist());\n \n     }\n+\n+    @Test\n+    public void deleteWorkspaceItemWithMinRelationshipsTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        //** GIVEN **\n+        //1. A community with one collection.\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Collection col1 = CollectionBuilder\n+            .createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        Item author1 = ItemBuilder.createItem(context, col1)\n+                                  .withTitle(\"Author1\")\n+                                  .withIssueDate(\"2017-10-17\")\n+                                  .withAuthor(\"Smith, Donald\")\n+                                  .withPersonIdentifierLastName(\"Smith\")\n+                                  .withPersonIdentifierFirstName(\"Donald\")\n+                                  .withRelationshipType(\"Person\")\n+                                  .build();\n+\n+        Item author2 = ItemBuilder.createItem(context, col1)\n+                                  .withTitle(\"Author2\")\n+                                  .withIssueDate(\"2016-02-13\")\n+                                  .withAuthor(\"Smith, Maria\")\n+                                  .withRelationshipType(\"Person\")\n+                                  .build();\n+\n+        //2. One workspace item.\n+        WorkspaceItem workspaceItem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                                                          .withRelationshipType(\"Publication\")\n+                                                          .build();\n+\n+        EntityType publication = EntityTypeBuilder.createEntityTypeBuilder(context, \"Publication\").build();\n+        EntityType person = EntityTypeBuilder.createEntityTypeBuilder(context, \"Person\").build();\n+\n+\n+        RelationshipType isAuthorOfPublication = RelationshipTypeBuilder\n+            .createRelationshipTypeBuilder(context, publication, person, \"isAuthorOfPublication\",\n+                                           \"isPublicationOfAuthor\", 2, null, 0,\n+                                           null).withCopyToLeft(false).withCopyToRight(true).build();\n+\n+        Relationship relationship1 = RelationshipBuilder\n+            .createRelationshipBuilder(context, workspaceItem.getItem(), author1, isAuthorOfPublication).build();\n+        Relationship relationship2 = RelationshipBuilder\n+            .createRelationshipBuilder(context, workspaceItem.getItem(), author2, isAuthorOfPublication).build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/relationships/\" + relationship1.getID()))\n+                        .andExpect(status().is(400));\n+\n+        //Delete the workspaceitem\n+        getClient(token).perform(delete(\"/api/submission/workspaceitems/\" + workspaceItem.getID()))\n+                        .andExpect(status().is(204));\n+        getClient(token).perform(get(\"/api/submission/workspaceitems/\" + workspaceItem.getID()))\n+                        .andExpect(status().is(404));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a8f81db44b9e3005c5f3d2439dab56917271097"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODMwNTI2Mw==", "bodyText": "The test to verify the relationship is deleted is now present", "url": "https://github.com/DSpace/DSpace/pull/3003#discussion_r558305263", "createdAt": "2021-01-15T13:27:25Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java", "diffHunk": "@@ -4613,4 +4619,66 @@ public void findOneFullProjectionTest() throws Exception {\n                                 .andExpect(jsonPath(\"$._embedded.collection._embedded.adminGroup\").doesNotExist());\n \n     }\n+\n+    @Test\n+    public void deleteWorkspaceItemWithMinRelationshipsTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        //** GIVEN **\n+        //1. A community with one collection.\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Collection col1 = CollectionBuilder\n+            .createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        Item author1 = ItemBuilder.createItem(context, col1)\n+                                  .withTitle(\"Author1\")\n+                                  .withIssueDate(\"2017-10-17\")\n+                                  .withAuthor(\"Smith, Donald\")\n+                                  .withPersonIdentifierLastName(\"Smith\")\n+                                  .withPersonIdentifierFirstName(\"Donald\")\n+                                  .withRelationshipType(\"Person\")\n+                                  .build();\n+\n+        Item author2 = ItemBuilder.createItem(context, col1)\n+                                  .withTitle(\"Author2\")\n+                                  .withIssueDate(\"2016-02-13\")\n+                                  .withAuthor(\"Smith, Maria\")\n+                                  .withRelationshipType(\"Person\")\n+                                  .build();\n+\n+        //2. One workspace item.\n+        WorkspaceItem workspaceItem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                                                          .withRelationshipType(\"Publication\")\n+                                                          .build();\n+\n+        EntityType publication = EntityTypeBuilder.createEntityTypeBuilder(context, \"Publication\").build();\n+        EntityType person = EntityTypeBuilder.createEntityTypeBuilder(context, \"Person\").build();\n+\n+\n+        RelationshipType isAuthorOfPublication = RelationshipTypeBuilder\n+            .createRelationshipTypeBuilder(context, publication, person, \"isAuthorOfPublication\",\n+                                           \"isPublicationOfAuthor\", 2, null, 0,\n+                                           null).withCopyToLeft(false).withCopyToRight(true).build();\n+\n+        Relationship relationship1 = RelationshipBuilder\n+            .createRelationshipBuilder(context, workspaceItem.getItem(), author1, isAuthorOfPublication).build();\n+        Relationship relationship2 = RelationshipBuilder\n+            .createRelationshipBuilder(context, workspaceItem.getItem(), author2, isAuthorOfPublication).build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(delete(\"/api/core/relationships/\" + relationship1.getID()))\n+                        .andExpect(status().is(400));\n+\n+        //Delete the workspaceitem\n+        getClient(token).perform(delete(\"/api/submission/workspaceitems/\" + workspaceItem.getID()))\n+                        .andExpect(status().is(204));\n+        getClient(token).perform(get(\"/api/submission/workspaceitems/\" + workspaceItem.getID()))\n+                        .andExpect(status().is(404));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc2NzA1MQ=="}, "originalCommit": {"oid": "9a8f81db44b9e3005c5f3d2439dab56917271097"}, "originalPosition": 101}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1421, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}