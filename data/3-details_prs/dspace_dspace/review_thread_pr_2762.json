{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5OTY3NTc0", "number": 2762, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDowMzoxOVrOEBBZeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDoxODoxOFrOEBBozg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTA2OTM2OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ConfigurationRestRepository.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDowMzoxOVrOGcqdOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDowMzoxOVrOGcqdOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcwODkyMg==", "bodyText": "You can replace this getArrayProperty().length check with a call to configurationService.hasProperty().  That's the recommended way to determine if a property exists in our configuration.", "url": "https://github.com/DSpace/DSpace/pull/2762#discussion_r432708922", "createdAt": "2020-05-29T20:03:19Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ConfigurationRestRepository.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import javax.annotation.Resource;\n+\n+import org.dspace.app.rest.exception.RepositoryMethodNotImplementedException;\n+import org.dspace.app.rest.model.PropertyRest;\n+import org.dspace.core.Context;\n+import org.dspace.services.ConfigurationService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * This is the repository responsible of exposing configuration properties\n+ */\n+@Component(PropertyRest.CATEGORY + \".\" + PropertyRest.NAME)\n+public class ConfigurationRestRepository extends DSpaceRestRepository<PropertyRest, String> {\n+    @Autowired\n+    private ConfigurationService configurationService;\n+\n+    @Resource(name = \"exposedConfigurationProperties\")\n+    private ArrayList<String> exposedProperties;\n+\n+    /**\n+     * Gets the value of a configuration property if it is exposed via REST\n+     *\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * curl http://<dspace.server.url>/api/config/properties/google.analytics.key\n+     *  -XGET \\\n+     *  -H 'Authorization: Bearer eyJhbGciOiJI...'\n+     * }\n+     * </pre>\n+     *\n+     * @param property\n+     * @return\n+     */\n+    @Override\n+    public PropertyRest findOne(Context context, String property) {\n+        if (!exposedProperties.contains(property) || configurationService.getArrayProperty(property).length == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fcb782230bb5b71a799322e23998d427aac5419"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTA5MTI4OnYy", "diffSide": "RIGHT", "path": "dspace/config/spring/rest/exposed-properties-configuration.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDoxMTozMlrOGcqrJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDoxMTozMlrOGcqrJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcxMjQ4Ng==", "bodyText": "Since this is a simple array/list of property keys, why not make this configurable within the rest.cfg file?\nIn other words, it'd be much easier to set this like:\nrest.properties.exposed = google.analytics.key\nrest.properties.exposed = second.property\n\nThen in the ConfigurationRestRepository, you can access these values by doing:\n@Value(\"${rest.properties.exposed}\")\nprivate String[] exposedProperties;\n\nI'd rather this setting be in our normal configuration as that makes it much more flexible. It's easier to override in local.cfg, via environment variable or System property setting.", "url": "https://github.com/DSpace/DSpace/pull/2762#discussion_r432712486", "createdAt": "2020-05-29T20:11:32Z", "author": {"login": "tdonohue"}, "path": "dspace/config/spring/rest/exposed-properties-configuration.xml", "diffHunk": "@@ -0,0 +1,12 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:util=\"http://www.springframework.org/schema/util\"\n+       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd\">\n+\n+    <!-- Define which configuration properties are exposed through the http://<dspace.server.url>/api/config/properties/\n+         rest endpoint. If a rest request is made for a property which exists, but isn't listed here, the server will\n+         respond that the property wasn't found.-->\n+    <util:list id=\"exposedConfigurationProperties\" value-type=\"java.lang.String\">\n+        <value>google.analytics.key</value>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fcb782230bb5b71a799322e23998d427aac5419"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTEwODYyOnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ConfigurationRestRepository.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMDoxODoxOFrOGcq2Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNTozMTozNVrOGd3PEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcxNTMwNg==", "bodyText": "As I was reviewing this code, I've just now realized that I'm not sure whether we want a 405 response on the main endpoint (which I know we decided on in the contract).  If this returns a 405, that is more secure, but how will the Client ever know which properties are available?  Do we just need to assume the Client is hardcoded to know what properties are server side properties?\nThis isn't a question we have to resolve in this particular PR, it could be resolved in a followup PR.  But, we might be setting up a problem similar to the one described in DS-4495 by completely hiding the list of configurations from the client side.  Maybe @artlowel should look at this PRs approach to see if it will work for the Angular UI?", "url": "https://github.com/DSpace/DSpace/pull/2762#discussion_r432715306", "createdAt": "2020-05-29T20:18:18Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ConfigurationRestRepository.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import javax.annotation.Resource;\n+\n+import org.dspace.app.rest.exception.RepositoryMethodNotImplementedException;\n+import org.dspace.app.rest.model.PropertyRest;\n+import org.dspace.core.Context;\n+import org.dspace.services.ConfigurationService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * This is the repository responsible of exposing configuration properties\n+ */\n+@Component(PropertyRest.CATEGORY + \".\" + PropertyRest.NAME)\n+public class ConfigurationRestRepository extends DSpaceRestRepository<PropertyRest, String> {\n+    @Autowired\n+    private ConfigurationService configurationService;\n+\n+    @Resource(name = \"exposedConfigurationProperties\")\n+    private ArrayList<String> exposedProperties;\n+\n+    /**\n+     * Gets the value of a configuration property if it is exposed via REST\n+     *\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * curl http://<dspace.server.url>/api/config/properties/google.analytics.key\n+     *  -XGET \\\n+     *  -H 'Authorization: Bearer eyJhbGciOiJI...'\n+     * }\n+     * </pre>\n+     *\n+     * @param property\n+     * @return\n+     */\n+    @Override\n+    public PropertyRest findOne(Context context, String property) {\n+        if (!exposedProperties.contains(property) || configurationService.getArrayProperty(property).length == 0) {\n+            throw new ResourceNotFoundException(\"No such configuration property: \" + property);\n+        }\n+\n+        String[] propertyValues = configurationService.getArrayProperty(property);\n+\n+        PropertyRest propertyRest = new PropertyRest();\n+        propertyRest.setName(property);\n+        propertyRest.setValues(Arrays.asList(propertyValues));\n+\n+        return propertyRest;\n+    }\n+\n+    @Override\n+    public Page<PropertyRest> findAll(Context context, Pageable pageable) {\n+        throw new RepositoryMethodNotImplementedException(\"No implementation found; Method not allowed\", \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fcb782230bb5b71a799322e23998d427aac5419"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc0NDc5Mw==", "bodyText": "I don't really see a way past hardcoding the property names we need for a specific feature in the client. E.g. the client side code that needs to configure the google analytics ID needs to know some name for the property it needs from the server. It can't just iterate over the list of all properties until it finds something that looks like a google analytics ID.\nAs long as the property name is the only part of the url we need to hardcode we'll be fine. It's not that different from filling in the UUID in the findById for an item for example. We also don't get the complete HAL link from the server in those cases.\nThe only use case to have the findAll endpoint available I can think of right now would be an overview of the server config for admins, which could be useful, but isn't planned right now as far as I know.", "url": "https://github.com/DSpace/DSpace/pull/2762#discussion_r433744793", "createdAt": "2020-06-02T09:31:01Z", "author": {"login": "artlowel"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ConfigurationRestRepository.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import javax.annotation.Resource;\n+\n+import org.dspace.app.rest.exception.RepositoryMethodNotImplementedException;\n+import org.dspace.app.rest.model.PropertyRest;\n+import org.dspace.core.Context;\n+import org.dspace.services.ConfigurationService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * This is the repository responsible of exposing configuration properties\n+ */\n+@Component(PropertyRest.CATEGORY + \".\" + PropertyRest.NAME)\n+public class ConfigurationRestRepository extends DSpaceRestRepository<PropertyRest, String> {\n+    @Autowired\n+    private ConfigurationService configurationService;\n+\n+    @Resource(name = \"exposedConfigurationProperties\")\n+    private ArrayList<String> exposedProperties;\n+\n+    /**\n+     * Gets the value of a configuration property if it is exposed via REST\n+     *\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * curl http://<dspace.server.url>/api/config/properties/google.analytics.key\n+     *  -XGET \\\n+     *  -H 'Authorization: Bearer eyJhbGciOiJI...'\n+     * }\n+     * </pre>\n+     *\n+     * @param property\n+     * @return\n+     */\n+    @Override\n+    public PropertyRest findOne(Context context, String property) {\n+        if (!exposedProperties.contains(property) || configurationService.getArrayProperty(property).length == 0) {\n+            throw new ResourceNotFoundException(\"No such configuration property: \" + property);\n+        }\n+\n+        String[] propertyValues = configurationService.getArrayProperty(property);\n+\n+        PropertyRest propertyRest = new PropertyRest();\n+        propertyRest.setName(property);\n+        propertyRest.setValues(Arrays.asList(propertyValues));\n+\n+        return propertyRest;\n+    }\n+\n+    @Override\n+    public Page<PropertyRest> findAll(Context context, Pageable pageable) {\n+        throw new RepositoryMethodNotImplementedException(\"No implementation found; Method not allowed\", \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcxNTMwNg=="}, "originalCommit": {"oid": "7fcb782230bb5b71a799322e23998d427aac5419"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk2Njg2NQ==", "bodyText": "@artlowel : Good points, and you are right. I'll flag this comment as resolved, as we can just keep the 405 response here for now.", "url": "https://github.com/DSpace/DSpace/pull/2762#discussion_r433966865", "createdAt": "2020-06-02T15:31:35Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ConfigurationRestRepository.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import javax.annotation.Resource;\n+\n+import org.dspace.app.rest.exception.RepositoryMethodNotImplementedException;\n+import org.dspace.app.rest.model.PropertyRest;\n+import org.dspace.core.Context;\n+import org.dspace.services.ConfigurationService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * This is the repository responsible of exposing configuration properties\n+ */\n+@Component(PropertyRest.CATEGORY + \".\" + PropertyRest.NAME)\n+public class ConfigurationRestRepository extends DSpaceRestRepository<PropertyRest, String> {\n+    @Autowired\n+    private ConfigurationService configurationService;\n+\n+    @Resource(name = \"exposedConfigurationProperties\")\n+    private ArrayList<String> exposedProperties;\n+\n+    /**\n+     * Gets the value of a configuration property if it is exposed via REST\n+     *\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * curl http://<dspace.server.url>/api/config/properties/google.analytics.key\n+     *  -XGET \\\n+     *  -H 'Authorization: Bearer eyJhbGciOiJI...'\n+     * }\n+     * </pre>\n+     *\n+     * @param property\n+     * @return\n+     */\n+    @Override\n+    public PropertyRest findOne(Context context, String property) {\n+        if (!exposedProperties.contains(property) || configurationService.getArrayProperty(property).length == 0) {\n+            throw new ResourceNotFoundException(\"No such configuration property: \" + property);\n+        }\n+\n+        String[] propertyValues = configurationService.getArrayProperty(property);\n+\n+        PropertyRest propertyRest = new PropertyRest();\n+        propertyRest.setName(property);\n+        propertyRest.setValues(Arrays.asList(propertyValues));\n+\n+        return propertyRest;\n+    }\n+\n+    @Override\n+    public Page<PropertyRest> findAll(Context context, Pageable pageable) {\n+        throw new RepositoryMethodNotImplementedException(\"No implementation found; Method not allowed\", \"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjcxNTMwNg=="}, "originalCommit": {"oid": "7fcb782230bb5b71a799322e23998d427aac5419"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1513, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}