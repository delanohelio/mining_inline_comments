{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4Mzc0NzA1", "number": 2686, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTo0NjoyMFrODlmREQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNDowODoxMFrODnFw_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzUwODY1OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/app/util/GroupUtil.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTo0NjoyMFrOFylUxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNToyOTo0NlrOF0URNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4NDY0NQ==", "bodyText": "A few minor comments on these COLLECTION_SUFFIXES.\n\nI don't recall DSpace supporting groups named with the suffix WFSTEP...is there a reason why these are listed here?\nWhile the \"traditional\" workflow was limited to 3 workflow steps, the CollectionServiceImpl.createWorkflowGroup() code seems to support any number of steps: https://github.com/DSpace/DSpace/blob/master/dspace-api/src/main/java/org/dspace/content/CollectionServiceImpl.java#L358-L359   This means that hardcoding these suffixes to be only 1, 2 or 3 may not be sufficient.\n\nOverall though, I like the idea of moving these Prefixes & Suffixes into a Util class (and I actually wish that the CollectionService and CommunityService used such a Util class rather than hardcoding their own names...but that could be fixed in a future PR)", "url": "https://github.com/DSpace/DSpace/pull/2686#discussion_r388584645", "createdAt": "2020-03-05T21:46:20Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/app/util/GroupUtil.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.util;\n+\n+import java.sql.SQLException;\n+\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.dspace.core.Context;\n+import org.dspace.eperson.Group;\n+\n+/**\n+ * A class which provides utility methods for Groups\n+ */\n+public class GroupUtil {\n+\n+    private GroupUtil() {\n+    }\n+\n+    /**\n+     * The collection prefix, all groups which are specific to\n+     * a collection start with this.\n+     */\n+    private static final String COLLECTION_PREFIX = \"COLLECTION_\";\n+\n+    /**\n+     * These are the possible collection suffixes, all groups which are\n+     * specific to a collection will end with one of these. The collection\n+     * id should be in between the prefix and the suffix.\n+     * <p>\n+     * Note: the order of these suffixes are important, see getCollectionRole()\n+     */\n+    private static final String[] COLLECTION_SUFFIXES =\n+        {\"_SUBMIT\", \"_ADMIN\", \"_WFSTEP_1\", \"_WORKFLOW_STEP_1\", \"_WFSTEP_2\", \"_WORKFLOW_STEP_2\", \"_WFSTEP_3\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c6be96c9bf0384a09f3d7908c4d071de70618d2"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxNzM4OA==", "bodyText": "This was ported from https://github.com/DSpace/DSpace/blob/dspace-6_x/dspace-xmlui/src/main/java/org/dspace/app/xmlui/aspect/administrative/FlowGroupUtils.java#L428 to be compatible with DSpace 6 (but moved to the API indeed where it belongs)\nWith your feedback, I do realize now that the old workflow has been dropped, so \"_WFSTEP_1\", \"_WORKFLOW_STEP_1\", \u2026 are no longer applicable, and neither is CollectionServiceImpl.createWorkflowGroup()\nThe new workflow rather uses XmlWorkflowServiceImpl.getWorkflowRoleGroup()\nI assume this PR has to be adjusted based on that syntax", "url": "https://github.com/DSpace/DSpace/pull/2686#discussion_r388817388", "createdAt": "2020-03-06T10:10:29Z", "author": {"login": "benbosman"}, "path": "dspace-api/src/main/java/org/dspace/app/util/GroupUtil.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.util;\n+\n+import java.sql.SQLException;\n+\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.dspace.core.Context;\n+import org.dspace.eperson.Group;\n+\n+/**\n+ * A class which provides utility methods for Groups\n+ */\n+public class GroupUtil {\n+\n+    private GroupUtil() {\n+    }\n+\n+    /**\n+     * The collection prefix, all groups which are specific to\n+     * a collection start with this.\n+     */\n+    private static final String COLLECTION_PREFIX = \"COLLECTION_\";\n+\n+    /**\n+     * These are the possible collection suffixes, all groups which are\n+     * specific to a collection will end with one of these. The collection\n+     * id should be in between the prefix and the suffix.\n+     * <p>\n+     * Note: the order of these suffixes are important, see getCollectionRole()\n+     */\n+    private static final String[] COLLECTION_SUFFIXES =\n+        {\"_SUBMIT\", \"_ADMIN\", \"_WFSTEP_1\", \"_WORKFLOW_STEP_1\", \"_WFSTEP_2\", \"_WORKFLOW_STEP_2\", \"_WFSTEP_3\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4NDY0NQ=="}, "originalCommit": {"oid": "5c6be96c9bf0384a09f3d7908c4d071de70618d2"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkxODc0MQ==", "bodyText": "Even in 6.3 there is exactly one line containing \"WFSTEP\", in dspace-xmlui/src/main/java/org/dspace/app/xmlui/aspect/administrative/FlowGroupUtils.java:\n\n private static final String[] COLLECTION_SUFFIXES = {\"_SUBMIT\",\"_ADMIN\",\"_WFSTEP_1\",\"_WORKFLOW_STEP_1\",\"_WFSTEP_2\",\"_WORKFLOW_STEP_2\",\"_WFSTEP_3\",\"_WORKFLOW_STEP_3\",\"_DEFAULT_ITEM_READ\"};\n\n\nThey appear to be left-overs from before v6.", "url": "https://github.com/DSpace/DSpace/pull/2686#discussion_r388918741", "createdAt": "2020-03-06T14:02:59Z", "author": {"login": "mwoodiupui"}, "path": "dspace-api/src/main/java/org/dspace/app/util/GroupUtil.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.util;\n+\n+import java.sql.SQLException;\n+\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.dspace.core.Context;\n+import org.dspace.eperson.Group;\n+\n+/**\n+ * A class which provides utility methods for Groups\n+ */\n+public class GroupUtil {\n+\n+    private GroupUtil() {\n+    }\n+\n+    /**\n+     * The collection prefix, all groups which are specific to\n+     * a collection start with this.\n+     */\n+    private static final String COLLECTION_PREFIX = \"COLLECTION_\";\n+\n+    /**\n+     * These are the possible collection suffixes, all groups which are\n+     * specific to a collection will end with one of these. The collection\n+     * id should be in between the prefix and the suffix.\n+     * <p>\n+     * Note: the order of these suffixes are important, see getCollectionRole()\n+     */\n+    private static final String[] COLLECTION_SUFFIXES =\n+        {\"_SUBMIT\", \"_ADMIN\", \"_WFSTEP_1\", \"_WORKFLOW_STEP_1\", \"_WFSTEP_2\", \"_WORKFLOW_STEP_2\", \"_WFSTEP_3\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4NDY0NQ=="}, "originalCommit": {"oid": "5c6be96c9bf0384a09f3d7908c4d071de70618d2"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk5MzIwMA==", "bodyText": "@benbosman : Yes, the old workflow has been dropped.  So, if some of these suffixes are no longer needed, I say we clean them up now.   That said, obviously, a lot of 6.x sites will have groups named COLLECTION_[uuid]_WORKFLOW_STEP_1, so if these are not useful then we should make sure the upgrade process renames/moves them to be COLLECTION_[uuid]_WORKFLOW_ROLE_[name] (the new name).  I'm not sure if we have a process to already do that, but if not, we should create a JIRA ticket to accomplish that in a separate PR.\nWe also need to either remove that old CollectionServiceImpl.createWorkflowGroup() method, or create a separate ticket to ensure it gets cleaned up.  It seems like a few artifacts of the old workflow process still remain.", "url": "https://github.com/DSpace/DSpace/pull/2686#discussion_r388993200", "createdAt": "2020-03-06T16:08:52Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/app/util/GroupUtil.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.util;\n+\n+import java.sql.SQLException;\n+\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.dspace.core.Context;\n+import org.dspace.eperson.Group;\n+\n+/**\n+ * A class which provides utility methods for Groups\n+ */\n+public class GroupUtil {\n+\n+    private GroupUtil() {\n+    }\n+\n+    /**\n+     * The collection prefix, all groups which are specific to\n+     * a collection start with this.\n+     */\n+    private static final String COLLECTION_PREFIX = \"COLLECTION_\";\n+\n+    /**\n+     * These are the possible collection suffixes, all groups which are\n+     * specific to a collection will end with one of these. The collection\n+     * id should be in between the prefix and the suffix.\n+     * <p>\n+     * Note: the order of these suffixes are important, see getCollectionRole()\n+     */\n+    private static final String[] COLLECTION_SUFFIXES =\n+        {\"_SUBMIT\", \"_ADMIN\", \"_WFSTEP_1\", \"_WORKFLOW_STEP_1\", \"_WFSTEP_2\", \"_WORKFLOW_STEP_2\", \"_WFSTEP_3\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4NDY0NQ=="}, "originalCommit": {"oid": "5c6be96c9bf0384a09f3d7908c4d071de70618d2"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAyODU3OA==", "bodyText": "@tdonohue The concept of COLLECTION_SUFFIXES won't be compatible with the COLLECTION_[uuid]_WORKFLOW_ROLE_[name]. But the COLLECTION_SUFFIXES are only used in the getCollection method, so I think it won't be hard to change the design a bit and stop using the COLLECTION_SUFFIXES.\nI did also verify for older DSpace versions, it doesn't display a link to the collection in the groups, explaining why it doesn't work to port the functionality from https://github.com/DSpace/DSpace/blob/dspace-6_x/dspace-xmlui/src/main/java/org/dspace/app/xmlui/aspect/administrative/FlowGroupUtils.java#L428", "url": "https://github.com/DSpace/DSpace/pull/2686#discussion_r389028578", "createdAt": "2020-03-06T17:06:10Z", "author": {"login": "benbosman"}, "path": "dspace-api/src/main/java/org/dspace/app/util/GroupUtil.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.util;\n+\n+import java.sql.SQLException;\n+\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.dspace.core.Context;\n+import org.dspace.eperson.Group;\n+\n+/**\n+ * A class which provides utility methods for Groups\n+ */\n+public class GroupUtil {\n+\n+    private GroupUtil() {\n+    }\n+\n+    /**\n+     * The collection prefix, all groups which are specific to\n+     * a collection start with this.\n+     */\n+    private static final String COLLECTION_PREFIX = \"COLLECTION_\";\n+\n+    /**\n+     * These are the possible collection suffixes, all groups which are\n+     * specific to a collection will end with one of these. The collection\n+     * id should be in between the prefix and the suffix.\n+     * <p>\n+     * Note: the order of these suffixes are important, see getCollectionRole()\n+     */\n+    private static final String[] COLLECTION_SUFFIXES =\n+        {\"_SUBMIT\", \"_ADMIN\", \"_WFSTEP_1\", \"_WORKFLOW_STEP_1\", \"_WFSTEP_2\", \"_WORKFLOW_STEP_2\", \"_WFSTEP_3\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4NDY0NQ=="}, "originalCommit": {"oid": "5c6be96c9bf0384a09f3d7908c4d071de70618d2"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQwMjM1OQ==", "bodyText": "This has been adjusted in 542a40a", "url": "https://github.com/DSpace/DSpace/pull/2686#discussion_r390402359", "createdAt": "2020-03-10T15:29:46Z", "author": {"login": "benbosman"}, "path": "dspace-api/src/main/java/org/dspace/app/util/GroupUtil.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.util;\n+\n+import java.sql.SQLException;\n+\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.dspace.core.Context;\n+import org.dspace.eperson.Group;\n+\n+/**\n+ * A class which provides utility methods for Groups\n+ */\n+public class GroupUtil {\n+\n+    private GroupUtil() {\n+    }\n+\n+    /**\n+     * The collection prefix, all groups which are specific to\n+     * a collection start with this.\n+     */\n+    private static final String COLLECTION_PREFIX = \"COLLECTION_\";\n+\n+    /**\n+     * These are the possible collection suffixes, all groups which are\n+     * specific to a collection will end with one of these. The collection\n+     * id should be in between the prefix and the suffix.\n+     * <p>\n+     * Note: the order of these suffixes are important, see getCollectionRole()\n+     */\n+    private static final String[] COLLECTION_SUFFIXES =\n+        {\"_SUBMIT\", \"_ADMIN\", \"_WFSTEP_1\", \"_WORKFLOW_STEP_1\", \"_WFSTEP_2\", \"_WORKFLOW_STEP_2\", \"_WFSTEP_3\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4NDY0NQ=="}, "originalCommit": {"oid": "5c6be96c9bf0384a09f3d7908c4d071de70618d2"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzUxNTU2OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/app/util/GroupUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTo0ODoxOFrOFylYug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwODoxMzoxMFrOF0spRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4NTY1OA==", "bodyText": "Small thing, but you don't really need to keep a static reference to the CollectionService or CommunityService in this Util class. Each of those services are only used once, in the below methods.  So, you can just get a reference in the method when you need it.", "url": "https://github.com/DSpace/DSpace/pull/2686#discussion_r388585658", "createdAt": "2020-03-05T21:48:18Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/app/util/GroupUtil.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.util;\n+\n+import java.sql.SQLException;\n+\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.dspace.core.Context;\n+import org.dspace.eperson.Group;\n+\n+/**\n+ * A class which provides utility methods for Groups\n+ */\n+public class GroupUtil {\n+\n+    private GroupUtil() {\n+    }\n+\n+    /**\n+     * The collection prefix, all groups which are specific to\n+     * a collection start with this.\n+     */\n+    private static final String COLLECTION_PREFIX = \"COLLECTION_\";\n+\n+    /**\n+     * These are the possible collection suffixes, all groups which are\n+     * specific to a collection will end with one of these. The collection\n+     * id should be in between the prefix and the suffix.\n+     * <p>\n+     * Note: the order of these suffixes are important, see getCollectionRole()\n+     */\n+    private static final String[] COLLECTION_SUFFIXES =\n+        {\"_SUBMIT\", \"_ADMIN\", \"_WFSTEP_1\", \"_WORKFLOW_STEP_1\", \"_WFSTEP_2\", \"_WORKFLOW_STEP_2\", \"_WFSTEP_3\",\n+            \"_WORKFLOW_STEP_3\", \"_DEFAULT_ITEM_READ\"};\n+\n+    /**\n+     * The community prefix: all groups which are specific to\n+     * a community start with this.\n+     */\n+    private static final String COMMUNITY_PREFIX = \"COMMUNITY_\";\n+\n+    /**\n+     * These are the possible community suffixes. All groups which are\n+     * specific to a collection will end with one of these. The collection\n+     * id should be between the prefix and the suffix.\n+     * <p>\n+     * Note: the order of these suffixes are important, see getCollectionRole()\n+     */\n+    private static final String[] COMMUNITY_SUFFIXES = {\"_ADMIN\"};\n+\n+    protected static final CollectionService collectionService = ContentServiceFactory.getInstance()\n+                                                                                      .getCollectionService();\n+    protected static final CommunityService communityService = ContentServiceFactory.getInstance()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c6be96c9bf0384a09f3d7908c4d071de70618d2"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgwMTczMw==", "bodyText": "This has now been auto wired instead of using static references", "url": "https://github.com/DSpace/DSpace/pull/2686#discussion_r390801733", "createdAt": "2020-03-11T08:13:10Z", "author": {"login": "benbosman"}, "path": "dspace-api/src/main/java/org/dspace/app/util/GroupUtil.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.util;\n+\n+import java.sql.SQLException;\n+\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.dspace.core.Context;\n+import org.dspace.eperson.Group;\n+\n+/**\n+ * A class which provides utility methods for Groups\n+ */\n+public class GroupUtil {\n+\n+    private GroupUtil() {\n+    }\n+\n+    /**\n+     * The collection prefix, all groups which are specific to\n+     * a collection start with this.\n+     */\n+    private static final String COLLECTION_PREFIX = \"COLLECTION_\";\n+\n+    /**\n+     * These are the possible collection suffixes, all groups which are\n+     * specific to a collection will end with one of these. The collection\n+     * id should be in between the prefix and the suffix.\n+     * <p>\n+     * Note: the order of these suffixes are important, see getCollectionRole()\n+     */\n+    private static final String[] COLLECTION_SUFFIXES =\n+        {\"_SUBMIT\", \"_ADMIN\", \"_WFSTEP_1\", \"_WORKFLOW_STEP_1\", \"_WFSTEP_2\", \"_WORKFLOW_STEP_2\", \"_WFSTEP_3\",\n+            \"_WORKFLOW_STEP_3\", \"_DEFAULT_ITEM_READ\"};\n+\n+    /**\n+     * The community prefix: all groups which are specific to\n+     * a community start with this.\n+     */\n+    private static final String COMMUNITY_PREFIX = \"COMMUNITY_\";\n+\n+    /**\n+     * These are the possible community suffixes. All groups which are\n+     * specific to a collection will end with one of these. The collection\n+     * id should be between the prefix and the suffix.\n+     * <p>\n+     * Note: the order of these suffixes are important, see getCollectionRole()\n+     */\n+    private static final String[] COMMUNITY_SUFFIXES = {\"_ADMIN\"};\n+\n+    protected static final CollectionService collectionService = ContentServiceFactory.getInstance()\n+                                                                                      .getCollectionService();\n+    protected static final CommunityService communityService = ContentServiceFactory.getInstance()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4NTY1OA=="}, "originalCommit": {"oid": "5c6be96c9bf0384a09f3d7908c4d071de70618d2"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzU0OTczOnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/GroupEPersonLinkRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTo1NjowOVrOFylrYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwODoxMzoyNlrOF0spxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5MDQzMg==", "bodyText": "Tiny mistake, this JavaDocs is slightly wrong. This class is the Link repository for the \"epersons\" subresource", "url": "https://github.com/DSpace/DSpace/pull/2686#discussion_r388590432", "createdAt": "2020-03-05T21:56:09Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/GroupEPersonLinkRepository.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import javax.annotation.Nullable;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.projection.Projection;\n+import org.dspace.core.Context;\n+import org.dspace.eperson.EPerson;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Link repository for \"groups\" subresource of an individual group.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c6be96c9bf0384a09f3d7908c4d071de70618d2"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgwMTg2MQ==", "bodyText": "This has been adjusted", "url": "https://github.com/DSpace/DSpace/pull/2686#discussion_r390801861", "createdAt": "2020-03-11T08:13:26Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/GroupEPersonLinkRepository.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import javax.annotation.Nullable;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.projection.Projection;\n+import org.dspace.core.Context;\n+import org.dspace.eperson.EPerson;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Link repository for \"groups\" subresource of an individual group.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5MDQzMg=="}, "originalCommit": {"oid": "5c6be96c9bf0384a09f3d7908c4d071de70618d2"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzU1Njg4OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/AuthenticationRestControllerIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTo1ODo0NlrOFylv-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwODoxNjowMFrOF0st_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5MTYwOQ==", "bodyText": "Could you explain further why existing Authentication tests need to be disabled temporarily?  This seems odd to me, but I must be missing something.", "url": "https://github.com/DSpace/DSpace/pull/2686#discussion_r388591609", "createdAt": "2020-03-05T21:58:46Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/AuthenticationRestControllerIT.java", "diffHunk": "@@ -58,6 +59,8 @@ public void setup() throws Exception {\n     }\n \n     @Test\n+    @Ignore\n+    // Ignored until an endpoint is added to return all groups", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c6be96c9bf0384a09f3d7908c4d071de70618d2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgwMjk0MA==", "bodyText": "This has been clarified in the comments now.\nIt's related to the long discussion about accessing indirect groups, for which no agreement on the contract was found.\nA REST API to get the indirect groups is still TBD", "url": "https://github.com/DSpace/DSpace/pull/2686#discussion_r390802940", "createdAt": "2020-03-11T08:16:00Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/AuthenticationRestControllerIT.java", "diffHunk": "@@ -58,6 +59,8 @@ public void setup() throws Exception {\n     }\n \n     @Test\n+    @Ignore\n+    // Ignored until an endpoint is added to return all groups", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5MTYwOQ=="}, "originalCommit": {"oid": "5c6be96c9bf0384a09f3d7908c4d071de70618d2"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzU2NjkwOnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/EPersonRestRepositoryIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjowMTo1NlrOFyl13w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwODoxNzo0MFrOF0swzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5MzExOQ==", "bodyText": "Could we please add some additional search/byMetadata tests for searching by UUID, email address and first name?  It looks like we modified the search behavior in this PR, but still only have tests proving that last name searches work correctly.", "url": "https://github.com/DSpace/DSpace/pull/2686#discussion_r388593119", "createdAt": "2020-03-05T22:01:56Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/EPersonRestRepositoryIT.java", "diffHunk": "@@ -392,8 +396,8 @@ public void findByName() throws Exception {\n                     .andExpect(jsonPath(\"$.page.totalElements\", is(4)));\n \n         // it must be case insensitive\n-        getClient(authToken).perform(get(\"/api/eperson/epersons/search/byName\")\n-                .param(\"q\", ePerson.getLastName().toLowerCase()))\n+        getClient(authToken).perform(get(\"/api/eperson/epersons/search/byMetadata\")\n+                .param(\"query\", ePerson.getLastName().toLowerCase()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c6be96c9bf0384a09f3d7908c4d071de70618d2"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgwMzY2MA==", "bodyText": "The EPersonRestRepositoryIT has been adjusted to include findByMetadataUsingFirstName, findByMetadataUsingEmail, findByMetadataUsingUuid\nWe actually still use the same Service method for searching by metadata, but it's always useful to test all features", "url": "https://github.com/DSpace/DSpace/pull/2686#discussion_r390803660", "createdAt": "2020-03-11T08:17:40Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/EPersonRestRepositoryIT.java", "diffHunk": "@@ -392,8 +396,8 @@ public void findByName() throws Exception {\n                     .andExpect(jsonPath(\"$.page.totalElements\", is(4)));\n \n         // it must be case insensitive\n-        getClient(authToken).perform(get(\"/api/eperson/epersons/search/byName\")\n-                .param(\"q\", ePerson.getLastName().toLowerCase()))\n+        getClient(authToken).perform(get(\"/api/eperson/epersons/search/byMetadata\")\n+                .param(\"query\", ePerson.getLastName().toLowerCase()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5MzExOQ=="}, "originalCommit": {"oid": "5c6be96c9bf0384a09f3d7908c4d071de70618d2"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzU3NzE5OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/builder/EPersonBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjowNToyNVrOFyl8Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwODoxODo0MFrOF0sygA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5NDY5OQ==", "bodyText": "Tiny thing to mention (just cause I've seen it alot in this PR).  It's sorta useless (to me) to use e.getMessage() here.  We either should pass in a more specific error message, or just do throw new RuntimeException(e);", "url": "https://github.com/DSpace/DSpace/pull/2686#discussion_r388594699", "createdAt": "2020-03-05T22:05:25Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/builder/EPersonBuilder.java", "diffHunk": "@@ -107,4 +109,20 @@ public EPersonBuilder withPassword(final String password) {\n         ePersonService.setPassword(ePerson, password);\n         return this;\n     }\n+\n+    public static void deleteEPerson(UUID uuid) throws SQLException, IOException {\n+        try (Context c = new Context()) {\n+            c.turnOffAuthorisationSystem();\n+            EPerson ePerson = ePersonService.find(c, uuid);\n+            if (ePerson != null) {\n+                try {\n+                    ePersonService.delete(c, ePerson);\n+                } catch (AuthorizeException e) {\n+                    // cannot occur, just wrap it to make the compiler happy\n+                    throw new RuntimeException(e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c6be96c9bf0384a09f3d7908c4d071de70618d2"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgwNDA5Ng==", "bodyText": "This has been adjusted", "url": "https://github.com/DSpace/DSpace/pull/2686#discussion_r390804096", "createdAt": "2020-03-11T08:18:40Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/builder/EPersonBuilder.java", "diffHunk": "@@ -107,4 +109,20 @@ public EPersonBuilder withPassword(final String password) {\n         ePersonService.setPassword(ePerson, password);\n         return this;\n     }\n+\n+    public static void deleteEPerson(UUID uuid) throws SQLException, IOException {\n+        try (Context c = new Context()) {\n+            c.turnOffAuthorisationSystem();\n+            EPerson ePerson = ePersonService.find(c, uuid);\n+            if (ePerson != null) {\n+                try {\n+                    ePersonService.delete(c, ePerson);\n+                } catch (AuthorizeException e) {\n+                    // cannot occur, just wrap it to make the compiler happy\n+                    throw new RuntimeException(e.getMessage(), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5NDY5OQ=="}, "originalCommit": {"oid": "5c6be96c9bf0384a09f3d7908c4d071de70618d2"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzU5ODkwOnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/GroupRestController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjoxMzoxMlrOFymJVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwODoxOToyNlrOF0szzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5ODEwMw==", "bodyText": "Please add JavaDocs to this private method as it is used a LOT above, and it doesn't describe what authorizations it is checking for.", "url": "https://github.com/DSpace/DSpace/pull/2686#discussion_r388598103", "createdAt": "2020-03-05T22:13:12Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/GroupRestController.java", "diffHunk": "@@ -0,0 +1,281 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static java.util.regex.Pattern.compile;\n+import static org.apache.http.HttpStatus.SC_NO_CONTENT;\n+import static org.apache.http.HttpStatus.SC_UNPROCESSABLE_ENTITY;\n+import static org.dspace.app.rest.utils.ContextUtil.obtainContext;\n+import static org.dspace.app.rest.utils.RegexUtils.REGEX_UUID;\n+import static org.dspace.app.util.AuthorizeUtil.authorizeManageAdminGroup;\n+import static org.dspace.app.util.AuthorizeUtil.authorizeManageSubmittersGroup;\n+import static org.dspace.app.util.AuthorizeUtil.authorizeManageWorkflowsGroup;\n+import static org.dspace.app.util.GroupUtil.getCollection;\n+import static org.dspace.app.util.GroupUtil.getCommunity;\n+import static org.springframework.web.bind.annotation.RequestMethod.DELETE;\n+import static org.springframework.web.bind.annotation.RequestMethod.POST;\n+\n+import java.io.IOException;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.dspace.app.rest.exception.UnprocessableEntityException;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.utils.Utils;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.core.Context;\n+import org.dspace.eperson.EPerson;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.EPersonService;\n+import org.dspace.eperson.service.GroupService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+/**\n+ * This will be the entry point for the api/eperson/groups endpoint with additional paths to it\n+ */\n+@RestController\n+@RequestMapping(\"/api/\" + GroupRest.CATEGORY + \"/\" + GroupRest.GROUPS)\n+public class GroupRestController {\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private EPersonService ePersonService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    Utils utils;\n+\n+    /**\n+     * Method to add one or more subgroups to a group.\n+     * The subgroups to be added should be provided in the request body as a uri-list.\n+     * @param uuid     the uuid of the group to add the subgroups to\n+     */\n+    @PreAuthorize(\"hasAuthority('AUTHENTICATED')\")\n+    @RequestMapping( method = POST, path = \"/{uuid}/subgroups\", consumes = {\"text/uri-list\"})\n+    public void addChildGroups(@PathVariable UUID uuid, HttpServletResponse response, HttpServletRequest request)\n+            throws SQLException, AuthorizeException {\n+\n+        Context context = obtainContext(request);\n+\n+        Group parentGroup = groupService.find(context, uuid);\n+        if (parentGroup == null) {\n+            throw new ResourceNotFoundException(\"parent group is not found for uuid: \" + uuid);\n+        }\n+\n+        checkAuthorization(context, parentGroup);\n+\n+        List<String> groupLinks = utils.getStringListFromRequest(request);\n+\n+        List<Group> childGroups = new ArrayList<>();\n+        for (String groupLink : groupLinks) {\n+            Optional<Group> childGroup = findGroup(context, groupLink);\n+            if (!childGroup.isPresent() || !canAddGroup(context, parentGroup, childGroup.get())) {\n+                throw new UnprocessableEntityException(\"cannot add child group: \" + groupLink);\n+            }\n+            childGroups.add(childGroup.get());\n+        }\n+\n+        for (Group childGroup : childGroups) {\n+            groupService.addMember(context, parentGroup, childGroup);\n+        }\n+\n+        context.commit();\n+\n+        response.setStatus(SC_NO_CONTENT);\n+    }\n+\n+    private Optional<Group> findGroup(Context context, String groupLink) throws SQLException {\n+\n+        Group group = null;\n+\n+        Pattern linkPattern = compile(\"^.*/(\" + REGEX_UUID + \")/?$\");\n+        Matcher matcher = linkPattern.matcher(groupLink);\n+        if (matcher.matches()) {\n+            group = groupService.find(context, UUID.fromString(matcher.group(1)));\n+        }\n+\n+        return Optional.ofNullable(group);\n+    }\n+\n+    private boolean canAddGroup(Context context, Group parentGroup, Group childGroup) throws SQLException {\n+\n+        return !groupService.isParentOf(context, childGroup, parentGroup);\n+    }\n+\n+    /**\n+     * Method to add one or more members to a group.\n+     * The members to be added should be provided in the request body as a uri-list.\n+     * @param uuid     the uuid of the group to add the members to\n+     */\n+    @PreAuthorize(\"hasAuthority('AUTHENTICATED')\")\n+    @RequestMapping( method = POST, path = \"/{uuid}/epersons\", consumes = {\"text/uri-list\"})\n+    public void addMembers(@PathVariable UUID uuid, HttpServletResponse response, HttpServletRequest request)\n+            throws SQLException, AuthorizeException {\n+\n+        Context context = obtainContext(request);\n+\n+        Group parentGroup = groupService.find(context, uuid);\n+        if (parentGroup == null) {\n+            throw new ResourceNotFoundException(\"parent group is not found for uuid: \" + uuid);\n+        }\n+\n+        checkAuthorization(context, parentGroup);\n+\n+        List<String> memberLinks = utils.getStringListFromRequest(request);\n+\n+        List<EPerson> members = new ArrayList<>();\n+        for (String memberLink : memberLinks) {\n+            Optional<EPerson> member = findEPerson(context, memberLink);\n+            if (!member.isPresent()) {\n+                throw new UnprocessableEntityException(\"cannot add child group: \" + memberLink);\n+            }\n+            members.add(member.get());\n+        }\n+\n+        for (EPerson member : members) {\n+            groupService.addMember(context, parentGroup, member);\n+        }\n+\n+        context.commit();\n+\n+        response.setStatus(SC_NO_CONTENT);\n+    }\n+\n+    private Optional<EPerson> findEPerson(Context context, String groupLink) throws SQLException {\n+\n+        EPerson ePerson = null;\n+\n+        Pattern linkPattern = compile(\"^.*/(\" + REGEX_UUID + \")/?$\");\n+        Matcher matcher = linkPattern.matcher(groupLink);\n+        if (matcher.matches()) {\n+            ePerson = ePersonService.find(context, UUID.fromString(matcher.group(1)));\n+        }\n+\n+        return Optional.ofNullable(ePerson);\n+    }\n+\n+    /**\n+     * Method to remove a subgroup from a group.\n+     * @param parentUUID    the uuid of the parent group\n+     * @param childUUID     the uuid of the subgroup which has to be removed\n+     */\n+    @PreAuthorize(\"hasAuthority('AUTHENTICATED')\")\n+    @RequestMapping( method = DELETE, path = \"/{parentUUID}/subgroups/{childUUID}\")\n+    public void removeChildGroup(@PathVariable UUID parentUUID, @PathVariable UUID childUUID,\n+                     HttpServletResponse response, HttpServletRequest request)\n+            throws IOException, SQLException, AuthorizeException {\n+\n+        Context context = obtainContext(request);\n+\n+        Group parentGroup = groupService.find(context, parentUUID);\n+        if (parentGroup == null) {\n+            throw new ResourceNotFoundException(\"parent group is not found for uuid: \" + parentUUID);\n+        }\n+\n+        checkAuthorization(context, parentGroup);\n+\n+        Group childGroup = groupService.find(context, childUUID);\n+        if (childGroup == null) {\n+            response.sendError(SC_UNPROCESSABLE_ENTITY);\n+        }\n+\n+        groupService.removeMember(context, parentGroup, childGroup);\n+\n+        context.commit();\n+\n+        response.setStatus(SC_NO_CONTENT);\n+    }\n+\n+    /**\n+     * Method to remove a member from a group.\n+     * @param parentUUID    the uuid of the parent group\n+     * @param memberUUID    the uuid of the member which has to be removed\n+     */\n+    @PreAuthorize(\"hasAuthority('AUTHENTICATED')\")\n+    @RequestMapping( method = DELETE, path = \"/{parentUUID}/epersons/{memberUUID}\")\n+    public void removeMember(@PathVariable UUID parentUUID, @PathVariable UUID memberUUID,\n+                             HttpServletResponse response, HttpServletRequest request)\n+            throws IOException, SQLException, AuthorizeException {\n+\n+        Context context = obtainContext(request);\n+\n+        Group parentGroup = groupService.find(context, parentUUID);\n+        if (parentGroup == null) {\n+            throw new ResourceNotFoundException(\"parent group is not found for uuid: \" + parentUUID);\n+        }\n+\n+        checkAuthorization(context, parentGroup);\n+\n+        EPerson childGroup = ePersonService.find(context, memberUUID);\n+        if (childGroup == null) {\n+            response.sendError(SC_UNPROCESSABLE_ENTITY);\n+        }\n+\n+        groupService.removeMember(context, parentGroup, childGroup);\n+\n+        context.commit();\n+\n+        response.setStatus(SC_NO_CONTENT);\n+    }\n+\n+    private void checkAuthorization(Context context, Group group) throws SQLException, AuthorizeException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c6be96c9bf0384a09f3d7908c4d071de70618d2"}, "originalPosition": 246}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgwNDQzMA==", "bodyText": "The JavaDocs have been included", "url": "https://github.com/DSpace/DSpace/pull/2686#discussion_r390804430", "createdAt": "2020-03-11T08:19:26Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/GroupRestController.java", "diffHunk": "@@ -0,0 +1,281 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static java.util.regex.Pattern.compile;\n+import static org.apache.http.HttpStatus.SC_NO_CONTENT;\n+import static org.apache.http.HttpStatus.SC_UNPROCESSABLE_ENTITY;\n+import static org.dspace.app.rest.utils.ContextUtil.obtainContext;\n+import static org.dspace.app.rest.utils.RegexUtils.REGEX_UUID;\n+import static org.dspace.app.util.AuthorizeUtil.authorizeManageAdminGroup;\n+import static org.dspace.app.util.AuthorizeUtil.authorizeManageSubmittersGroup;\n+import static org.dspace.app.util.AuthorizeUtil.authorizeManageWorkflowsGroup;\n+import static org.dspace.app.util.GroupUtil.getCollection;\n+import static org.dspace.app.util.GroupUtil.getCommunity;\n+import static org.springframework.web.bind.annotation.RequestMethod.DELETE;\n+import static org.springframework.web.bind.annotation.RequestMethod.POST;\n+\n+import java.io.IOException;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.dspace.app.rest.exception.UnprocessableEntityException;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.utils.Utils;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.core.Context;\n+import org.dspace.eperson.EPerson;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.EPersonService;\n+import org.dspace.eperson.service.GroupService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+/**\n+ * This will be the entry point for the api/eperson/groups endpoint with additional paths to it\n+ */\n+@RestController\n+@RequestMapping(\"/api/\" + GroupRest.CATEGORY + \"/\" + GroupRest.GROUPS)\n+public class GroupRestController {\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private EPersonService ePersonService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    Utils utils;\n+\n+    /**\n+     * Method to add one or more subgroups to a group.\n+     * The subgroups to be added should be provided in the request body as a uri-list.\n+     * @param uuid     the uuid of the group to add the subgroups to\n+     */\n+    @PreAuthorize(\"hasAuthority('AUTHENTICATED')\")\n+    @RequestMapping( method = POST, path = \"/{uuid}/subgroups\", consumes = {\"text/uri-list\"})\n+    public void addChildGroups(@PathVariable UUID uuid, HttpServletResponse response, HttpServletRequest request)\n+            throws SQLException, AuthorizeException {\n+\n+        Context context = obtainContext(request);\n+\n+        Group parentGroup = groupService.find(context, uuid);\n+        if (parentGroup == null) {\n+            throw new ResourceNotFoundException(\"parent group is not found for uuid: \" + uuid);\n+        }\n+\n+        checkAuthorization(context, parentGroup);\n+\n+        List<String> groupLinks = utils.getStringListFromRequest(request);\n+\n+        List<Group> childGroups = new ArrayList<>();\n+        for (String groupLink : groupLinks) {\n+            Optional<Group> childGroup = findGroup(context, groupLink);\n+            if (!childGroup.isPresent() || !canAddGroup(context, parentGroup, childGroup.get())) {\n+                throw new UnprocessableEntityException(\"cannot add child group: \" + groupLink);\n+            }\n+            childGroups.add(childGroup.get());\n+        }\n+\n+        for (Group childGroup : childGroups) {\n+            groupService.addMember(context, parentGroup, childGroup);\n+        }\n+\n+        context.commit();\n+\n+        response.setStatus(SC_NO_CONTENT);\n+    }\n+\n+    private Optional<Group> findGroup(Context context, String groupLink) throws SQLException {\n+\n+        Group group = null;\n+\n+        Pattern linkPattern = compile(\"^.*/(\" + REGEX_UUID + \")/?$\");\n+        Matcher matcher = linkPattern.matcher(groupLink);\n+        if (matcher.matches()) {\n+            group = groupService.find(context, UUID.fromString(matcher.group(1)));\n+        }\n+\n+        return Optional.ofNullable(group);\n+    }\n+\n+    private boolean canAddGroup(Context context, Group parentGroup, Group childGroup) throws SQLException {\n+\n+        return !groupService.isParentOf(context, childGroup, parentGroup);\n+    }\n+\n+    /**\n+     * Method to add one or more members to a group.\n+     * The members to be added should be provided in the request body as a uri-list.\n+     * @param uuid     the uuid of the group to add the members to\n+     */\n+    @PreAuthorize(\"hasAuthority('AUTHENTICATED')\")\n+    @RequestMapping( method = POST, path = \"/{uuid}/epersons\", consumes = {\"text/uri-list\"})\n+    public void addMembers(@PathVariable UUID uuid, HttpServletResponse response, HttpServletRequest request)\n+            throws SQLException, AuthorizeException {\n+\n+        Context context = obtainContext(request);\n+\n+        Group parentGroup = groupService.find(context, uuid);\n+        if (parentGroup == null) {\n+            throw new ResourceNotFoundException(\"parent group is not found for uuid: \" + uuid);\n+        }\n+\n+        checkAuthorization(context, parentGroup);\n+\n+        List<String> memberLinks = utils.getStringListFromRequest(request);\n+\n+        List<EPerson> members = new ArrayList<>();\n+        for (String memberLink : memberLinks) {\n+            Optional<EPerson> member = findEPerson(context, memberLink);\n+            if (!member.isPresent()) {\n+                throw new UnprocessableEntityException(\"cannot add child group: \" + memberLink);\n+            }\n+            members.add(member.get());\n+        }\n+\n+        for (EPerson member : members) {\n+            groupService.addMember(context, parentGroup, member);\n+        }\n+\n+        context.commit();\n+\n+        response.setStatus(SC_NO_CONTENT);\n+    }\n+\n+    private Optional<EPerson> findEPerson(Context context, String groupLink) throws SQLException {\n+\n+        EPerson ePerson = null;\n+\n+        Pattern linkPattern = compile(\"^.*/(\" + REGEX_UUID + \")/?$\");\n+        Matcher matcher = linkPattern.matcher(groupLink);\n+        if (matcher.matches()) {\n+            ePerson = ePersonService.find(context, UUID.fromString(matcher.group(1)));\n+        }\n+\n+        return Optional.ofNullable(ePerson);\n+    }\n+\n+    /**\n+     * Method to remove a subgroup from a group.\n+     * @param parentUUID    the uuid of the parent group\n+     * @param childUUID     the uuid of the subgroup which has to be removed\n+     */\n+    @PreAuthorize(\"hasAuthority('AUTHENTICATED')\")\n+    @RequestMapping( method = DELETE, path = \"/{parentUUID}/subgroups/{childUUID}\")\n+    public void removeChildGroup(@PathVariable UUID parentUUID, @PathVariable UUID childUUID,\n+                     HttpServletResponse response, HttpServletRequest request)\n+            throws IOException, SQLException, AuthorizeException {\n+\n+        Context context = obtainContext(request);\n+\n+        Group parentGroup = groupService.find(context, parentUUID);\n+        if (parentGroup == null) {\n+            throw new ResourceNotFoundException(\"parent group is not found for uuid: \" + parentUUID);\n+        }\n+\n+        checkAuthorization(context, parentGroup);\n+\n+        Group childGroup = groupService.find(context, childUUID);\n+        if (childGroup == null) {\n+            response.sendError(SC_UNPROCESSABLE_ENTITY);\n+        }\n+\n+        groupService.removeMember(context, parentGroup, childGroup);\n+\n+        context.commit();\n+\n+        response.setStatus(SC_NO_CONTENT);\n+    }\n+\n+    /**\n+     * Method to remove a member from a group.\n+     * @param parentUUID    the uuid of the parent group\n+     * @param memberUUID    the uuid of the member which has to be removed\n+     */\n+    @PreAuthorize(\"hasAuthority('AUTHENTICATED')\")\n+    @RequestMapping( method = DELETE, path = \"/{parentUUID}/epersons/{memberUUID}\")\n+    public void removeMember(@PathVariable UUID parentUUID, @PathVariable UUID memberUUID,\n+                             HttpServletResponse response, HttpServletRequest request)\n+            throws IOException, SQLException, AuthorizeException {\n+\n+        Context context = obtainContext(request);\n+\n+        Group parentGroup = groupService.find(context, parentUUID);\n+        if (parentGroup == null) {\n+            throw new ResourceNotFoundException(\"parent group is not found for uuid: \" + parentUUID);\n+        }\n+\n+        checkAuthorization(context, parentGroup);\n+\n+        EPerson childGroup = ePersonService.find(context, memberUUID);\n+        if (childGroup == null) {\n+            response.sendError(SC_UNPROCESSABLE_ENTITY);\n+        }\n+\n+        groupService.removeMember(context, parentGroup, childGroup);\n+\n+        context.commit();\n+\n+        response.setStatus(SC_NO_CONTENT);\n+    }\n+\n+    private void checkAuthorization(Context context, Group group) throws SQLException, AuthorizeException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5ODEwMw=="}, "originalCommit": {"oid": "5c6be96c9bf0384a09f3d7908c4d071de70618d2"}, "originalPosition": 246}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzYwMjYyOnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/GroupRestController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjoxNDozN1rOFymLlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwODoyMToxM1rOF0s23w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5ODY3Ng==", "bodyText": "We might want to add a note in the JavaDocs regarding why this is set to \"AUTHENTICATED\".  It initially confused me (as it looks like a security issue).  But, I see that it's because you need to do different types of permission checks based on the group type (in checkAuthorization() method)", "url": "https://github.com/DSpace/DSpace/pull/2686#discussion_r388598676", "createdAt": "2020-03-05T22:14:37Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/GroupRestController.java", "diffHunk": "@@ -0,0 +1,281 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static java.util.regex.Pattern.compile;\n+import static org.apache.http.HttpStatus.SC_NO_CONTENT;\n+import static org.apache.http.HttpStatus.SC_UNPROCESSABLE_ENTITY;\n+import static org.dspace.app.rest.utils.ContextUtil.obtainContext;\n+import static org.dspace.app.rest.utils.RegexUtils.REGEX_UUID;\n+import static org.dspace.app.util.AuthorizeUtil.authorizeManageAdminGroup;\n+import static org.dspace.app.util.AuthorizeUtil.authorizeManageSubmittersGroup;\n+import static org.dspace.app.util.AuthorizeUtil.authorizeManageWorkflowsGroup;\n+import static org.dspace.app.util.GroupUtil.getCollection;\n+import static org.dspace.app.util.GroupUtil.getCommunity;\n+import static org.springframework.web.bind.annotation.RequestMethod.DELETE;\n+import static org.springframework.web.bind.annotation.RequestMethod.POST;\n+\n+import java.io.IOException;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.dspace.app.rest.exception.UnprocessableEntityException;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.utils.Utils;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.core.Context;\n+import org.dspace.eperson.EPerson;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.EPersonService;\n+import org.dspace.eperson.service.GroupService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+/**\n+ * This will be the entry point for the api/eperson/groups endpoint with additional paths to it\n+ */\n+@RestController\n+@RequestMapping(\"/api/\" + GroupRest.CATEGORY + \"/\" + GroupRest.GROUPS)\n+public class GroupRestController {\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private EPersonService ePersonService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    Utils utils;\n+\n+    /**\n+     * Method to add one or more subgroups to a group.\n+     * The subgroups to be added should be provided in the request body as a uri-list.\n+     * @param uuid     the uuid of the group to add the subgroups to\n+     */\n+    @PreAuthorize(\"hasAuthority('AUTHENTICATED')\")\n+    @RequestMapping( method = POST, path = \"/{uuid}/subgroups\", consumes = {\"text/uri-list\"})\n+    public void addChildGroups(@PathVariable UUID uuid, HttpServletResponse response, HttpServletRequest request)\n+            throws SQLException, AuthorizeException {\n+\n+        Context context = obtainContext(request);\n+\n+        Group parentGroup = groupService.find(context, uuid);\n+        if (parentGroup == null) {\n+            throw new ResourceNotFoundException(\"parent group is not found for uuid: \" + uuid);\n+        }\n+\n+        checkAuthorization(context, parentGroup);\n+\n+        List<String> groupLinks = utils.getStringListFromRequest(request);\n+\n+        List<Group> childGroups = new ArrayList<>();\n+        for (String groupLink : groupLinks) {\n+            Optional<Group> childGroup = findGroup(context, groupLink);\n+            if (!childGroup.isPresent() || !canAddGroup(context, parentGroup, childGroup.get())) {\n+                throw new UnprocessableEntityException(\"cannot add child group: \" + groupLink);\n+            }\n+            childGroups.add(childGroup.get());\n+        }\n+\n+        for (Group childGroup : childGroups) {\n+            groupService.addMember(context, parentGroup, childGroup);\n+        }\n+\n+        context.commit();\n+\n+        response.setStatus(SC_NO_CONTENT);\n+    }\n+\n+    private Optional<Group> findGroup(Context context, String groupLink) throws SQLException {\n+\n+        Group group = null;\n+\n+        Pattern linkPattern = compile(\"^.*/(\" + REGEX_UUID + \")/?$\");\n+        Matcher matcher = linkPattern.matcher(groupLink);\n+        if (matcher.matches()) {\n+            group = groupService.find(context, UUID.fromString(matcher.group(1)));\n+        }\n+\n+        return Optional.ofNullable(group);\n+    }\n+\n+    private boolean canAddGroup(Context context, Group parentGroup, Group childGroup) throws SQLException {\n+\n+        return !groupService.isParentOf(context, childGroup, parentGroup);\n+    }\n+\n+    /**\n+     * Method to add one or more members to a group.\n+     * The members to be added should be provided in the request body as a uri-list.\n+     * @param uuid     the uuid of the group to add the members to\n+     */\n+    @PreAuthorize(\"hasAuthority('AUTHENTICATED')\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c6be96c9bf0384a09f3d7908c4d071de70618d2"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgwNTIxNQ==", "bodyText": "The JavaDocs have been adjusted", "url": "https://github.com/DSpace/DSpace/pull/2686#discussion_r390805215", "createdAt": "2020-03-11T08:21:13Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/GroupRestController.java", "diffHunk": "@@ -0,0 +1,281 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static java.util.regex.Pattern.compile;\n+import static org.apache.http.HttpStatus.SC_NO_CONTENT;\n+import static org.apache.http.HttpStatus.SC_UNPROCESSABLE_ENTITY;\n+import static org.dspace.app.rest.utils.ContextUtil.obtainContext;\n+import static org.dspace.app.rest.utils.RegexUtils.REGEX_UUID;\n+import static org.dspace.app.util.AuthorizeUtil.authorizeManageAdminGroup;\n+import static org.dspace.app.util.AuthorizeUtil.authorizeManageSubmittersGroup;\n+import static org.dspace.app.util.AuthorizeUtil.authorizeManageWorkflowsGroup;\n+import static org.dspace.app.util.GroupUtil.getCollection;\n+import static org.dspace.app.util.GroupUtil.getCommunity;\n+import static org.springframework.web.bind.annotation.RequestMethod.DELETE;\n+import static org.springframework.web.bind.annotation.RequestMethod.POST;\n+\n+import java.io.IOException;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.dspace.app.rest.exception.UnprocessableEntityException;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.utils.Utils;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.core.Context;\n+import org.dspace.eperson.EPerson;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.EPersonService;\n+import org.dspace.eperson.service.GroupService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+/**\n+ * This will be the entry point for the api/eperson/groups endpoint with additional paths to it\n+ */\n+@RestController\n+@RequestMapping(\"/api/\" + GroupRest.CATEGORY + \"/\" + GroupRest.GROUPS)\n+public class GroupRestController {\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private EPersonService ePersonService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    Utils utils;\n+\n+    /**\n+     * Method to add one or more subgroups to a group.\n+     * The subgroups to be added should be provided in the request body as a uri-list.\n+     * @param uuid     the uuid of the group to add the subgroups to\n+     */\n+    @PreAuthorize(\"hasAuthority('AUTHENTICATED')\")\n+    @RequestMapping( method = POST, path = \"/{uuid}/subgroups\", consumes = {\"text/uri-list\"})\n+    public void addChildGroups(@PathVariable UUID uuid, HttpServletResponse response, HttpServletRequest request)\n+            throws SQLException, AuthorizeException {\n+\n+        Context context = obtainContext(request);\n+\n+        Group parentGroup = groupService.find(context, uuid);\n+        if (parentGroup == null) {\n+            throw new ResourceNotFoundException(\"parent group is not found for uuid: \" + uuid);\n+        }\n+\n+        checkAuthorization(context, parentGroup);\n+\n+        List<String> groupLinks = utils.getStringListFromRequest(request);\n+\n+        List<Group> childGroups = new ArrayList<>();\n+        for (String groupLink : groupLinks) {\n+            Optional<Group> childGroup = findGroup(context, groupLink);\n+            if (!childGroup.isPresent() || !canAddGroup(context, parentGroup, childGroup.get())) {\n+                throw new UnprocessableEntityException(\"cannot add child group: \" + groupLink);\n+            }\n+            childGroups.add(childGroup.get());\n+        }\n+\n+        for (Group childGroup : childGroups) {\n+            groupService.addMember(context, parentGroup, childGroup);\n+        }\n+\n+        context.commit();\n+\n+        response.setStatus(SC_NO_CONTENT);\n+    }\n+\n+    private Optional<Group> findGroup(Context context, String groupLink) throws SQLException {\n+\n+        Group group = null;\n+\n+        Pattern linkPattern = compile(\"^.*/(\" + REGEX_UUID + \")/?$\");\n+        Matcher matcher = linkPattern.matcher(groupLink);\n+        if (matcher.matches()) {\n+            group = groupService.find(context, UUID.fromString(matcher.group(1)));\n+        }\n+\n+        return Optional.ofNullable(group);\n+    }\n+\n+    private boolean canAddGroup(Context context, Group parentGroup, Group childGroup) throws SQLException {\n+\n+        return !groupService.isParentOf(context, childGroup, parentGroup);\n+    }\n+\n+    /**\n+     * Method to add one or more members to a group.\n+     * The members to be added should be provided in the request body as a uri-list.\n+     * @param uuid     the uuid of the group to add the members to\n+     */\n+    @PreAuthorize(\"hasAuthority('AUTHENTICATED')\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5ODY3Ng=="}, "originalCommit": {"oid": "5c6be96c9bf0384a09f3d7908c4d071de70618d2"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzYxMjYzOnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/GroupRestController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMjoxNzo1MFrOFymRHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwODoyMTozOFrOF0s3vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYwMDA5NA==", "bodyText": "Tiny thing, but I think you can be using context.complete() in all the methods in this class.  These are individual requests that should not allow for context reuse in other methods.  (Looking in other Controllers, they all use complete() as well)", "url": "https://github.com/DSpace/DSpace/pull/2686#discussion_r388600094", "createdAt": "2020-03-05T22:17:50Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/GroupRestController.java", "diffHunk": "@@ -0,0 +1,281 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static java.util.regex.Pattern.compile;\n+import static org.apache.http.HttpStatus.SC_NO_CONTENT;\n+import static org.apache.http.HttpStatus.SC_UNPROCESSABLE_ENTITY;\n+import static org.dspace.app.rest.utils.ContextUtil.obtainContext;\n+import static org.dspace.app.rest.utils.RegexUtils.REGEX_UUID;\n+import static org.dspace.app.util.AuthorizeUtil.authorizeManageAdminGroup;\n+import static org.dspace.app.util.AuthorizeUtil.authorizeManageSubmittersGroup;\n+import static org.dspace.app.util.AuthorizeUtil.authorizeManageWorkflowsGroup;\n+import static org.dspace.app.util.GroupUtil.getCollection;\n+import static org.dspace.app.util.GroupUtil.getCommunity;\n+import static org.springframework.web.bind.annotation.RequestMethod.DELETE;\n+import static org.springframework.web.bind.annotation.RequestMethod.POST;\n+\n+import java.io.IOException;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.dspace.app.rest.exception.UnprocessableEntityException;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.utils.Utils;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.core.Context;\n+import org.dspace.eperson.EPerson;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.EPersonService;\n+import org.dspace.eperson.service.GroupService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+/**\n+ * This will be the entry point for the api/eperson/groups endpoint with additional paths to it\n+ */\n+@RestController\n+@RequestMapping(\"/api/\" + GroupRest.CATEGORY + \"/\" + GroupRest.GROUPS)\n+public class GroupRestController {\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private EPersonService ePersonService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    Utils utils;\n+\n+    /**\n+     * Method to add one or more subgroups to a group.\n+     * The subgroups to be added should be provided in the request body as a uri-list.\n+     * @param uuid     the uuid of the group to add the subgroups to\n+     */\n+    @PreAuthorize(\"hasAuthority('AUTHENTICATED')\")\n+    @RequestMapping( method = POST, path = \"/{uuid}/subgroups\", consumes = {\"text/uri-list\"})\n+    public void addChildGroups(@PathVariable UUID uuid, HttpServletResponse response, HttpServletRequest request)\n+            throws SQLException, AuthorizeException {\n+\n+        Context context = obtainContext(request);\n+\n+        Group parentGroup = groupService.find(context, uuid);\n+        if (parentGroup == null) {\n+            throw new ResourceNotFoundException(\"parent group is not found for uuid: \" + uuid);\n+        }\n+\n+        checkAuthorization(context, parentGroup);\n+\n+        List<String> groupLinks = utils.getStringListFromRequest(request);\n+\n+        List<Group> childGroups = new ArrayList<>();\n+        for (String groupLink : groupLinks) {\n+            Optional<Group> childGroup = findGroup(context, groupLink);\n+            if (!childGroup.isPresent() || !canAddGroup(context, parentGroup, childGroup.get())) {\n+                throw new UnprocessableEntityException(\"cannot add child group: \" + groupLink);\n+            }\n+            childGroups.add(childGroup.get());\n+        }\n+\n+        for (Group childGroup : childGroups) {\n+            groupService.addMember(context, parentGroup, childGroup);\n+        }\n+\n+        context.commit();\n+\n+        response.setStatus(SC_NO_CONTENT);\n+    }\n+\n+    private Optional<Group> findGroup(Context context, String groupLink) throws SQLException {\n+\n+        Group group = null;\n+\n+        Pattern linkPattern = compile(\"^.*/(\" + REGEX_UUID + \")/?$\");\n+        Matcher matcher = linkPattern.matcher(groupLink);\n+        if (matcher.matches()) {\n+            group = groupService.find(context, UUID.fromString(matcher.group(1)));\n+        }\n+\n+        return Optional.ofNullable(group);\n+    }\n+\n+    private boolean canAddGroup(Context context, Group parentGroup, Group childGroup) throws SQLException {\n+\n+        return !groupService.isParentOf(context, childGroup, parentGroup);\n+    }\n+\n+    /**\n+     * Method to add one or more members to a group.\n+     * The members to be added should be provided in the request body as a uri-list.\n+     * @param uuid     the uuid of the group to add the members to\n+     */\n+    @PreAuthorize(\"hasAuthority('AUTHENTICATED')\")\n+    @RequestMapping( method = POST, path = \"/{uuid}/epersons\", consumes = {\"text/uri-list\"})\n+    public void addMembers(@PathVariable UUID uuid, HttpServletResponse response, HttpServletRequest request)\n+            throws SQLException, AuthorizeException {\n+\n+        Context context = obtainContext(request);\n+\n+        Group parentGroup = groupService.find(context, uuid);\n+        if (parentGroup == null) {\n+            throw new ResourceNotFoundException(\"parent group is not found for uuid: \" + uuid);\n+        }\n+\n+        checkAuthorization(context, parentGroup);\n+\n+        List<String> memberLinks = utils.getStringListFromRequest(request);\n+\n+        List<EPerson> members = new ArrayList<>();\n+        for (String memberLink : memberLinks) {\n+            Optional<EPerson> member = findEPerson(context, memberLink);\n+            if (!member.isPresent()) {\n+                throw new UnprocessableEntityException(\"cannot add child group: \" + memberLink);\n+            }\n+            members.add(member.get());\n+        }\n+\n+        for (EPerson member : members) {\n+            groupService.addMember(context, parentGroup, member);\n+        }\n+\n+        context.commit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c6be96c9bf0384a09f3d7908c4d071de70618d2"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgwNTQzOA==", "bodyText": "This has been adjusted", "url": "https://github.com/DSpace/DSpace/pull/2686#discussion_r390805438", "createdAt": "2020-03-11T08:21:38Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/GroupRestController.java", "diffHunk": "@@ -0,0 +1,281 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static java.util.regex.Pattern.compile;\n+import static org.apache.http.HttpStatus.SC_NO_CONTENT;\n+import static org.apache.http.HttpStatus.SC_UNPROCESSABLE_ENTITY;\n+import static org.dspace.app.rest.utils.ContextUtil.obtainContext;\n+import static org.dspace.app.rest.utils.RegexUtils.REGEX_UUID;\n+import static org.dspace.app.util.AuthorizeUtil.authorizeManageAdminGroup;\n+import static org.dspace.app.util.AuthorizeUtil.authorizeManageSubmittersGroup;\n+import static org.dspace.app.util.AuthorizeUtil.authorizeManageWorkflowsGroup;\n+import static org.dspace.app.util.GroupUtil.getCollection;\n+import static org.dspace.app.util.GroupUtil.getCommunity;\n+import static org.springframework.web.bind.annotation.RequestMethod.DELETE;\n+import static org.springframework.web.bind.annotation.RequestMethod.POST;\n+\n+import java.io.IOException;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.dspace.app.rest.exception.UnprocessableEntityException;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.utils.Utils;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.core.Context;\n+import org.dspace.eperson.EPerson;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.EPersonService;\n+import org.dspace.eperson.service.GroupService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+/**\n+ * This will be the entry point for the api/eperson/groups endpoint with additional paths to it\n+ */\n+@RestController\n+@RequestMapping(\"/api/\" + GroupRest.CATEGORY + \"/\" + GroupRest.GROUPS)\n+public class GroupRestController {\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Autowired\n+    private EPersonService ePersonService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    Utils utils;\n+\n+    /**\n+     * Method to add one or more subgroups to a group.\n+     * The subgroups to be added should be provided in the request body as a uri-list.\n+     * @param uuid     the uuid of the group to add the subgroups to\n+     */\n+    @PreAuthorize(\"hasAuthority('AUTHENTICATED')\")\n+    @RequestMapping( method = POST, path = \"/{uuid}/subgroups\", consumes = {\"text/uri-list\"})\n+    public void addChildGroups(@PathVariable UUID uuid, HttpServletResponse response, HttpServletRequest request)\n+            throws SQLException, AuthorizeException {\n+\n+        Context context = obtainContext(request);\n+\n+        Group parentGroup = groupService.find(context, uuid);\n+        if (parentGroup == null) {\n+            throw new ResourceNotFoundException(\"parent group is not found for uuid: \" + uuid);\n+        }\n+\n+        checkAuthorization(context, parentGroup);\n+\n+        List<String> groupLinks = utils.getStringListFromRequest(request);\n+\n+        List<Group> childGroups = new ArrayList<>();\n+        for (String groupLink : groupLinks) {\n+            Optional<Group> childGroup = findGroup(context, groupLink);\n+            if (!childGroup.isPresent() || !canAddGroup(context, parentGroup, childGroup.get())) {\n+                throw new UnprocessableEntityException(\"cannot add child group: \" + groupLink);\n+            }\n+            childGroups.add(childGroup.get());\n+        }\n+\n+        for (Group childGroup : childGroups) {\n+            groupService.addMember(context, parentGroup, childGroup);\n+        }\n+\n+        context.commit();\n+\n+        response.setStatus(SC_NO_CONTENT);\n+    }\n+\n+    private Optional<Group> findGroup(Context context, String groupLink) throws SQLException {\n+\n+        Group group = null;\n+\n+        Pattern linkPattern = compile(\"^.*/(\" + REGEX_UUID + \")/?$\");\n+        Matcher matcher = linkPattern.matcher(groupLink);\n+        if (matcher.matches()) {\n+            group = groupService.find(context, UUID.fromString(matcher.group(1)));\n+        }\n+\n+        return Optional.ofNullable(group);\n+    }\n+\n+    private boolean canAddGroup(Context context, Group parentGroup, Group childGroup) throws SQLException {\n+\n+        return !groupService.isParentOf(context, childGroup, parentGroup);\n+    }\n+\n+    /**\n+     * Method to add one or more members to a group.\n+     * The members to be added should be provided in the request body as a uri-list.\n+     * @param uuid     the uuid of the group to add the members to\n+     */\n+    @PreAuthorize(\"hasAuthority('AUTHENTICATED')\")\n+    @RequestMapping( method = POST, path = \"/{uuid}/epersons\", consumes = {\"text/uri-list\"})\n+    public void addMembers(@PathVariable UUID uuid, HttpServletResponse response, HttpServletRequest request)\n+            throws SQLException, AuthorizeException {\n+\n+        Context context = obtainContext(request);\n+\n+        Group parentGroup = groupService.find(context, uuid);\n+        if (parentGroup == null) {\n+            throw new ResourceNotFoundException(\"parent group is not found for uuid: \" + uuid);\n+        }\n+\n+        checkAuthorization(context, parentGroup);\n+\n+        List<String> memberLinks = utils.getStringListFromRequest(request);\n+\n+        List<EPerson> members = new ArrayList<>();\n+        for (String memberLink : memberLinks) {\n+            Optional<EPerson> member = findEPerson(context, memberLink);\n+            if (!member.isPresent()) {\n+                throw new UnprocessableEntityException(\"cannot add child group: \" + memberLink);\n+            }\n+            members.add(member.get());\n+        }\n+\n+        for (EPerson member : members) {\n+            groupService.addMember(context, parentGroup, member);\n+        }\n+\n+        context.commit();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODYwMDA5NA=="}, "originalCommit": {"oid": "5c6be96c9bf0384a09f3d7908c4d071de70618d2"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzE1NTE5OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/utils/GroupUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNDowODoxMFrOF04ehQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjozNzowMVrOF1mUgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk5NTU4OQ==", "bodyText": "Tiny thing. The JavaDocs here are a bit wrong, as they talk about Collection instead of Community.  You could likely remove most of the Javadocs here.\nAlso, honestly, you could switch the Community Group checks to be the same as the (updated) Collection Group checks, therefore removing this COMMUNITY_SUFFIXES altogether.  People shouldn't be naming groups with a long UUID within them, and if they are, they likely want it related to the Community/Collection anyhow.  This isn't required of this PR, but just wanted to suggest it.", "url": "https://github.com/DSpace/DSpace/pull/2686#discussion_r390995589", "createdAt": "2020-03-11T14:08:10Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/utils/GroupUtil.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.utils;\n+\n+import java.sql.SQLException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.dspace.core.Context;\n+import org.dspace.eperson.Group;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * A class which provides utility methods for Groups\n+ */\n+@Component\n+public class GroupUtil {\n+\n+    private GroupUtil() {\n+    }\n+\n+    /**\n+     * UUID regex used in the collection regex\n+     */\n+    private static final String UUID_REGEX = \"[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}\\\\-[0-9a-fA-F]{4}\\\\-[0\" +\n+            \"-9a-fA-F]{12}\";\n+    /**\n+     * Collection regex used to extract the ID\n+     */\n+    private static final String COLLECTION_REGEX = \"COLLECTION_(\" + UUID_REGEX + \")_.*?\";\n+\n+    /**\n+     * The community prefix: all groups which are specific to\n+     * a community start with this.\n+     */\n+    private static final String COMMUNITY_PREFIX = \"COMMUNITY_\";\n+\n+    /**\n+     * These are the possible community suffixes. All groups which are\n+     * specific to a collection will end with one of these. The collection\n+     * id should be between the prefix and the suffix.\n+     * <p>\n+     * Note: the order of these suffixes are important, see getCollectionRole()\n+     */\n+    private static final String[] COMMUNITY_SUFFIXES = {\"_ADMIN\"};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f5a1780362d8844521d837ef2d50c8f2bb8d2cb"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc0NjY5MA==", "bodyText": "The JavaDocs have been adjusted (and the /subgroups change was also completed)", "url": "https://github.com/DSpace/DSpace/pull/2686#discussion_r391746690", "createdAt": "2020-03-12T16:37:01Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/utils/GroupUtil.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.utils;\n+\n+import java.sql.SQLException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.dspace.core.Context;\n+import org.dspace.eperson.Group;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * A class which provides utility methods for Groups\n+ */\n+@Component\n+public class GroupUtil {\n+\n+    private GroupUtil() {\n+    }\n+\n+    /**\n+     * UUID regex used in the collection regex\n+     */\n+    private static final String UUID_REGEX = \"[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}\\\\-[0-9a-fA-F]{4}\\\\-[0\" +\n+            \"-9a-fA-F]{12}\";\n+    /**\n+     * Collection regex used to extract the ID\n+     */\n+    private static final String COLLECTION_REGEX = \"COLLECTION_(\" + UUID_REGEX + \")_.*?\";\n+\n+    /**\n+     * The community prefix: all groups which are specific to\n+     * a community start with this.\n+     */\n+    private static final String COMMUNITY_PREFIX = \"COMMUNITY_\";\n+\n+    /**\n+     * These are the possible community suffixes. All groups which are\n+     * specific to a collection will end with one of these. The collection\n+     * id should be between the prefix and the suffix.\n+     * <p>\n+     * Note: the order of these suffixes are important, see getCollectionRole()\n+     */\n+    private static final String[] COMMUNITY_SUFFIXES = {\"_ADMIN\"};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk5NTU4OQ=="}, "originalCommit": {"oid": "7f5a1780362d8844521d837ef2d50c8f2bb8d2cb"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1661, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}