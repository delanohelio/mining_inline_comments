{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4Njk2MzQ3", "number": 2687, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNTozNzo0MFrODiv-_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNTo0MTo1NFrODiwGPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NzY0MzUwOnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/ItemRestRepositoryIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNTozNzo0MFrOFuK6wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNTozNzo0MFrOFuK6wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk1NzY5Ng==", "bodyText": "Two other tests are necessary in this method:\n\nWe need a test that a Full Admin can see the Embargoed Item.\nCan we create a second Community which is not a parent of collection1 and ensure that an Admin of that new Community is also Forbidden?", "url": "https://github.com/DSpace/DSpace/pull/2687#discussion_r383957696", "createdAt": "2020-02-25T15:37:40Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/ItemRestRepositoryIT.java", "diffHunk": "@@ -1294,6 +1295,102 @@ public void embargoAccessTest() throws Exception {\n \n     }\n \n+    @Test\n+    public void embargoAccessGrantAdminsTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminParentCommunity = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"adminCommunity@mail.com\")\n+                .withPassword(\"qwerty01\")\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .withAdminGroup(adminParentCommunity)\n+                .build();\n+\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                .withName(\"Sub Community\")\n+                .build();\n+\n+        EPerson adminCollection1 = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"adminCollection1@mail.com\")\n+                .withPassword(\"qwerty02\")\n+                .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                .withName(\"Collection 1\")\n+                .withAdminGroup(adminCollection1)\n+                .build();\n+\n+        EPerson adminCollection2 = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"adminCollection2@mail.com\")\n+                .withPassword(\"qwerty03\")\n+                .build();\n+        Collection col2 = CollectionBuilder.createCollection(context, child1)\n+                .withName(\"Collection 2\")\n+                .withAdminGroup(adminCollection2)\n+                .build();\n+\n+        Item embargoedItem = ItemBuilder.createItem(context, col1)\n+                .withTitle(\"Public item 1\")\n+                .withIssueDate(\"2015-10-21\")\n+                .withAuthor(\"Smith, Donald\")\n+                .withSubject(\"ExtraEntry\")\n+                .withEmbargoPeriod(\"1 week\")\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+        // parent community's admin user is allowed access to embargoed item\n+        String tokenAdminParentCommunity = getAuthToken(adminParentCommunity.getEmail(), \"qwerty01\");\n+        getClient(tokenAdminParentCommunity).perform(get(\"/api/core/items/\" + embargoedItem.getID()))\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$\", is(ItemMatcher.matchItemProperties(embargoedItem))));\n+\n+        // collection1's admin user is allowed access to embargoed item\n+        String tokenAdminCollection1 = getAuthToken(adminCollection1.getEmail(), \"qwerty02\");\n+        getClient(tokenAdminCollection1).perform(get(\"/api/core/items/\" + embargoedItem.getID()))\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$\", is(ItemMatcher.matchItemProperties(embargoedItem))));\n+\n+        // collection2's admin user is NOT allowed access to embargoed item of collection1\n+        String tokenAdminCollection2 = getAuthToken(adminCollection2.getEmail(), \"qwerty03\");\n+        getClient(tokenAdminCollection2).perform(get(\"/api/core/items/\" + embargoedItem.getID()))\n+                .andExpect(status().isForbidden());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a0a5078de99516b939e9afc426f7f6f09e38174"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NzY1MjIxOnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/ItemRestRepositoryIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNTozOTo0OVrOFuLAWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNTozOTo0OVrOFuLAWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk1OTEyOQ==", "bodyText": "We should also have a test here to verify that anonymous users are Forbidden", "url": "https://github.com/DSpace/DSpace/pull/2687#discussion_r383959129", "createdAt": "2020-02-25T15:39:49Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/ItemRestRepositoryIT.java", "diffHunk": "@@ -1422,6 +1519,118 @@ public void privateGroupAccessTest() throws Exception {\n                         Matchers.containsString(\"/api/core/items\")));\n     }\n \n+    @Test\n+    public void restrictedGroupAccessForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson memberRestrictGroup = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"eperson1@mail.com\")\n+                .withPassword(\"qwerty01\")\n+                .build();\n+\n+        Group restrictGroup = GroupBuilder.createGroup(context)\n+                .addMember(memberRestrictGroup)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                .withName(\"Sub Community\")\n+                .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                .withName(\"Collection 1\")\n+                .build();\n+\n+        Item itemRestrictedByGroup = ItemBuilder.createItem(context, col1)\n+                .withTitle(\"Public item 1\")\n+                .withIssueDate(\"2011-11-13\")\n+                .withAuthor(\"Smith, Donald\")\n+                .withReaderGroup(restrictGroup)\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        //A member of the restricted group is also allowed access to restricted item\n+        String tokenMemberRestrictedGroup = getAuthToken(memberRestrictGroup.getEmail(), \"qwerty01\");\n+        getClient(tokenMemberRestrictedGroup).perform(get(\"/api/core/items/\" + itemRestrictedByGroup.getID()))\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$\", is(ItemMatcher.matchItemProperties(itemRestrictedByGroup))));\n+\n+        //members who are not part of the restricted group, have no access to the item\n+        String tokenEPerson = getAuthToken(eperson.getEmail(), password);\n+        getClient(tokenEPerson).perform(get(\"/api/core/items/\" + itemRestrictedByGroup.getID()))\n+                .andExpect(status().isForbidden());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a0a5078de99516b939e9afc426f7f6f09e38174"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NzY2MjA0OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/ItemRestRepositoryIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNTo0MTo1NFrOFuLGhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNTo0MTo1NFrOFuLGhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk2MDcxMA==", "bodyText": "Again, here it'd be good to create another Community that is not a parent of collection1, and ensure that a Community Admin of that new Community is also Forbidden.", "url": "https://github.com/DSpace/DSpace/pull/2687#discussion_r383960710", "createdAt": "2020-02-25T15:41:54Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/ItemRestRepositoryIT.java", "diffHunk": "@@ -1422,6 +1519,118 @@ public void privateGroupAccessTest() throws Exception {\n                         Matchers.containsString(\"/api/core/items\")));\n     }\n \n+    @Test\n+    public void restrictedGroupAccessForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson memberRestrictGroup = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"eperson1@mail.com\")\n+                .withPassword(\"qwerty01\")\n+                .build();\n+\n+        Group restrictGroup = GroupBuilder.createGroup(context)\n+                .addMember(memberRestrictGroup)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                .withName(\"Sub Community\")\n+                .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                .withName(\"Collection 1\")\n+                .build();\n+\n+        Item itemRestrictedByGroup = ItemBuilder.createItem(context, col1)\n+                .withTitle(\"Public item 1\")\n+                .withIssueDate(\"2011-11-13\")\n+                .withAuthor(\"Smith, Donald\")\n+                .withReaderGroup(restrictGroup)\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        //A member of the restricted group is also allowed access to restricted item\n+        String tokenMemberRestrictedGroup = getAuthToken(memberRestrictGroup.getEmail(), \"qwerty01\");\n+        getClient(tokenMemberRestrictedGroup).perform(get(\"/api/core/items/\" + itemRestrictedByGroup.getID()))\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$\", is(ItemMatcher.matchItemProperties(itemRestrictedByGroup))));\n+\n+        //members who are not part of the restricted group, have no access to the item\n+        String tokenEPerson = getAuthToken(eperson.getEmail(), password);\n+        getClient(tokenEPerson).perform(get(\"/api/core/items/\" + itemRestrictedByGroup.getID()))\n+                .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void restrictedGroupAccessGrantAdminsTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminParentCommunity = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"adminCommunity@mail.com\")\n+                .withPassword(\"qwerty01\")\n+                .build();\n+\n+        Group restrictedGroup = GroupBuilder.createGroup(context)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .withAdminGroup(adminParentCommunity)\n+                .build();\n+\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                .withName(\"Sub Community\")\n+                .build();\n+\n+        EPerson adminCollection1 = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"adminCollection1@mail.com\")\n+                .withPassword(\"qwerty02\")\n+                .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                .withName(\"Collection 1\")\n+                .withAdminGroup(adminCollection1)\n+                .build();\n+\n+        EPerson adminCollection2 = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"adminCollection2@mail.com\")\n+                .withPassword(\"qwerty03\")\n+                .build();\n+        Collection col2 = CollectionBuilder.createCollection(context, child1)\n+                .withName(\"Collection 2\")\n+                .withAdminGroup(adminCollection2)\n+                .build();\n+\n+        Item itemRestrictedByGroup = ItemBuilder.createItem(context, col1)\n+                .withTitle(\"Public item 1\")\n+                .withIssueDate(\"2015-10-21\")\n+                .withAuthor(\"Smith, Donald\")\n+                .withSubject(\"ExtraEntry\")\n+                .withReaderGroup(restrictedGroup)\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+        // parent community's admin user is allowed access to restricted item\n+        String tokenAdminParentCommunity = getAuthToken(adminParentCommunity.getEmail(), \"qwerty01\");\n+        getClient(tokenAdminParentCommunity).perform(get(\"/api/core/items/\" + itemRestrictedByGroup.getID()))\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$\", is(ItemMatcher.matchItemProperties(itemRestrictedByGroup))));\n+\n+        // collection1's admin user is allowed access to restricted item\n+        String tokenAdminCollection1 = getAuthToken(adminCollection1.getEmail(), \"qwerty02\");\n+        getClient(tokenAdminCollection1).perform(get(\"/api/core/items/\" + itemRestrictedByGroup.getID()))\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$\", is(ItemMatcher.matchItemProperties(itemRestrictedByGroup))));\n+\n+        // collection2's admin user is NOT allowed access to restricted item of collection1\n+        String tokenAdminCollection2 = getAuthToken(adminCollection2.getEmail(), \"qwerty03\");\n+        getClient(tokenAdminCollection2).perform(get(\"/api/core/items/\" + itemRestrictedByGroup.getID()))\n+                .andExpect(status().isForbidden());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a0a5078de99516b939e9afc426f7f6f09e38174"}, "originalPosition": 224}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1663, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}