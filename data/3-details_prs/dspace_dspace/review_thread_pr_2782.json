{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2NDU1MDU3", "number": 2782, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMzo1MDoyOFrOEgAAeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNjozNzoyN1rOEgEldA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxOTkwMDA5OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/statistics/SolrLoggerServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMzo1MDoyOFrOHMnjFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMzowMjoxOFrOHNMqyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk5MjkxNg==", "bodyText": "I'm not sure I understand why we turned this into a variable. It looks like it's now always zero (0) in this PR.  I'm not against making this a variable you need to pass in, but I don't understand the reasoning, as it seems like a lot of code refactoring to turn a 1 into a 0.  Could you explain why you've gone with this approach?\nI'm probably missing something, but it'd be nice to understand why sometimes this might need to be 0 and why sometimes it might need to be 1.  We also may want to describe that a bit more in the JavaDocs for facetMinCount, so that it's clear what 0 or 1 mean here.", "url": "https://github.com/DSpace/DSpace/pull/2782#discussion_r482992916", "createdAt": "2020-09-03T13:50:28Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/statistics/SolrLoggerServiceImpl.java", "diffHunk": "@@ -985,28 +996,29 @@ protected String getDateView(String name, String type, Context context) {\n     @Override\n     public QueryResponse query(String query, String filterQuery,\n                                String facetField, int rows, int max, String dateType, String dateStart,\n-                               String dateEnd, List<String> facetQueries, String sort, boolean ascending)\n+                               String dateEnd, List<String> facetQueries, String sort, boolean ascending,\n+                               int facetMinCount)\n         throws SolrServerException, IOException {\n         if (solr == null) {\n             return null;\n         }\n \n         // System.out.println(\"QUERY\");\n         SolrQuery solrQuery = new SolrQuery().setRows(rows).setQuery(query)\n-                                             .setFacetMinCount(1);\n+                                             .setFacetMinCount(facetMinCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c88b6ef2e7c28a924d85fa3d04cce769baaebb3c"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYwMTA5Nw==", "bodyText": "@tdonohue facetMinCount needed to be able to set to 0:\n\nTo be able to get the months which have no views as point => need to set facetMinCount to 0 for just that query (here:https://github.com/atmire/DSpace/blob/w2p-71214_Usage-reports/dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/UsageReportService.java#L223), which required the change in SolrLoggerServiceImpl to make facetMinCount a method parameter, but this did propagate into adding this method parameter into a lot of other place that use SolrLoggerServiceImpl. \u2028So now points with views=0 also get returned (for TotalVisits I could manually create a point with view = 0, but this was needed just for TotalVisitsPerMonth, not for the Cities/Countries, otherwise there would be long list of points with views=0 that have a view in another item, so for those facetMinCount=1 was still needed\nNote: if you want for the TotalDownloads on an item have a point for each of its bitstream (no just those with views > 0), then the point creation just has to be changed to check totalVisits on each bitstream because if you use facetMinCount=0 there then every bitstream ever retrieved will be in points list", "url": "https://github.com/DSpace/DSpace/pull/2782#discussion_r483601097", "createdAt": "2020-09-04T13:02:18Z", "author": {"login": "MarieVerdonck"}, "path": "dspace-api/src/main/java/org/dspace/statistics/SolrLoggerServiceImpl.java", "diffHunk": "@@ -985,28 +996,29 @@ protected String getDateView(String name, String type, Context context) {\n     @Override\n     public QueryResponse query(String query, String filterQuery,\n                                String facetField, int rows, int max, String dateType, String dateStart,\n-                               String dateEnd, List<String> facetQueries, String sort, boolean ascending)\n+                               String dateEnd, List<String> facetQueries, String sort, boolean ascending,\n+                               int facetMinCount)\n         throws SolrServerException, IOException {\n         if (solr == null) {\n             return null;\n         }\n \n         // System.out.println(\"QUERY\");\n         SolrQuery solrQuery = new SolrQuery().setRows(rows).setQuery(query)\n-                                             .setFacetMinCount(1);\n+                                             .setFacetMinCount(facetMinCount);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk5MjkxNg=="}, "originalCommit": {"oid": "c88b6ef2e7c28a924d85fa3d04cce769baaebb3c"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxOTkxNTU3OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/model/UsageReportPointDsoTotalVisitsRest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMzo1Mzo0OFrOHMns0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMzowMTowOVrOHNMoUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk5NTQxMA==", "bodyText": "Needs JavaDocs as it's unclear what a valid \"type\" is for this class.  All others of these UsageReportPointRest class seem to have a constant type.", "url": "https://github.com/DSpace/DSpace/pull/2782#discussion_r482995410", "createdAt": "2020-09-03T13:53:48Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/model/UsageReportPointDsoTotalVisitsRest.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.model;\n+\n+/**\n+ * This class serves as a REST representation of a TotalVisit data Point of a DSO's {@link UsageReportRest} from the\n+ * DSpace statistics\n+ *\n+ * @author Maria Verdonck (Atmire) on 08/06/2020\n+ */\n+public class UsageReportPointDsoTotalVisitsRest extends UsageReportPointRest {\n+\n+    private String type;\n+\n+    @Override\n+    public String getType() {\n+        return this.type;\n+    }\n+\n+    public void setType(String type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c88b6ef2e7c28a924d85fa3d04cce769baaebb3c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYwMDQ2Nw==", "bodyText": "Done", "url": "https://github.com/DSpace/DSpace/pull/2782#discussion_r483600467", "createdAt": "2020-09-04T13:01:09Z", "author": {"login": "MarieVerdonck"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/model/UsageReportPointDsoTotalVisitsRest.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.model;\n+\n+/**\n+ * This class serves as a REST representation of a TotalVisit data Point of a DSO's {@link UsageReportRest} from the\n+ * DSpace statistics\n+ *\n+ * @author Maria Verdonck (Atmire) on 08/06/2020\n+ */\n+public class UsageReportPointDsoTotalVisitsRest extends UsageReportPointRest {\n+\n+    private String type;\n+\n+    @Override\n+    public String getType() {\n+        return this.type;\n+    }\n+\n+    public void setType(String type) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk5NTQxMA=="}, "originalCommit": {"oid": "c88b6ef2e7c28a924d85fa3d04cce769baaebb3c"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxOTkxOTAxOnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/model/UsageReportPointRest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMzo1NDozMlrOHMnu_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMzowMjo1MVrOHNMryQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk5NTk2Nw==", "bodyText": "Please add JavaDocs to all these public methods...that way they will be inherited (via @Override) to all extending classes.", "url": "https://github.com/DSpace/DSpace/pull/2782#discussion_r482995967", "createdAt": "2020-09-03T13:54:32Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/model/UsageReportPointRest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.model;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.dspace.app.rest.StatisticsRestController;\n+\n+/**\n+ * This class serves as a REST representation of a Point of a {@link UsageReportRest} from the DSpace statistics\n+ *\n+ * @author Maria Verdonck (Atmire) on 08/06/2020\n+ */\n+public class UsageReportPointRest extends BaseObjectRest<String> {\n+    public static final String NAME = \"point\";\n+    public static final String CATEGORY = RestModel.STATISTICS;\n+    protected String id;\n+    protected String label;\n+    private Map<String, Integer> values;\n+\n+    public String getCategory() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c88b6ef2e7c28a924d85fa3d04cce769baaebb3c"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYwMTM1Mw==", "bodyText": "Done", "url": "https://github.com/DSpace/DSpace/pull/2782#discussion_r483601353", "createdAt": "2020-09-04T13:02:51Z", "author": {"login": "MarieVerdonck"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/model/UsageReportPointRest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.model;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.dspace.app.rest.StatisticsRestController;\n+\n+/**\n+ * This class serves as a REST representation of a Point of a {@link UsageReportRest} from the DSpace statistics\n+ *\n+ * @author Maria Verdonck (Atmire) on 08/06/2020\n+ */\n+public class UsageReportPointRest extends BaseObjectRest<String> {\n+    public static final String NAME = \"point\";\n+    public static final String CATEGORY = RestModel.STATISTICS;\n+    protected String id;\n+    protected String label;\n+    private Map<String, Integer> values;\n+\n+    public String getCategory() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk5NTk2Nw=="}, "originalCommit": {"oid": "c88b6ef2e7c28a924d85fa3d04cce769baaebb3c"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxOTkyNjczOnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/model/UsageReportRest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMzo1NjowNVrOHMnztw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMzowMjo1OVrOHNMsFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk5NzE3NQ==", "bodyText": "Same here, JavaDocs on all the public methods would help distinguish this from UsageReportPointRest, as the two classes look very similar at a glance.", "url": "https://github.com/DSpace/DSpace/pull/2782#discussion_r482997175", "createdAt": "2020-09-03T13:56:05Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/model/UsageReportRest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.model;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.dspace.app.rest.StatisticsRestController;\n+\n+/**\n+ * This class serves as a REST representation of a Usage Report from the DSpace statistics\n+ *\n+ * @author Maria Verdonck (Atmire) on 08/06/2020\n+ */\n+public class UsageReportRest extends BaseObjectRest<String> {\n+    public static final String NAME = \"usagereport\";\n+    public static final String CATEGORY = RestModel.STATISTICS;\n+\n+    @JsonProperty(value = \"report-type\")\n+    private String reportType;\n+    private List<UsageReportPointRest> points;\n+\n+    public String getCategory() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c88b6ef2e7c28a924d85fa3d04cce769baaebb3c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYwMTQyOA==", "bodyText": "Done", "url": "https://github.com/DSpace/DSpace/pull/2782#discussion_r483601428", "createdAt": "2020-09-04T13:02:59Z", "author": {"login": "MarieVerdonck"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/model/UsageReportRest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.model;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.dspace.app.rest.StatisticsRestController;\n+\n+/**\n+ * This class serves as a REST representation of a Usage Report from the DSpace statistics\n+ *\n+ * @author Maria Verdonck (Atmire) on 08/06/2020\n+ */\n+public class UsageReportRest extends BaseObjectRest<String> {\n+    public static final String NAME = \"usagereport\";\n+    public static final String CATEGORY = RestModel.STATISTICS;\n+\n+    @JsonProperty(value = \"report-type\")\n+    private String reportType;\n+    private List<UsageReportPointRest> points;\n+\n+    public String getCategory() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk5NzE3NQ=="}, "originalCommit": {"oid": "c88b6ef2e7c28a924d85fa3d04cce769baaebb3c"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxOTk0ODgyOnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/UsageReportService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDowMDozOFrOHMoB5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMzowMzozNFrOHNMtZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwMDgwNg==", "bodyText": "This looks odd. Why does it need to extend AbstractDSpaceRestRepository when this isn't a RestRepository class?  It's also odd that this service is placed under the org.dspace.app.rest.repository package (where no other Services exist)\nI'm open to other ideas, but I wonder if this should be renamed UsageReportUtils and put under the org.dspace.app.rest.utils package with other similar utility classes?", "url": "https://github.com/DSpace/DSpace/pull/2782#discussion_r483000806", "createdAt": "2020-09-03T14:00:38Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/UsageReportService.java", "diffHunk": "@@ -0,0 +1,359 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.io.IOException;\n+import java.sql.SQLException;\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.solr.client.solrj.SolrServerException;\n+import org.dspace.app.rest.exception.DSpaceBadRequestException;\n+import org.dspace.app.rest.model.UsageReportPointCityRest;\n+import org.dspace.app.rest.model.UsageReportPointCountryRest;\n+import org.dspace.app.rest.model.UsageReportPointDateRest;\n+import org.dspace.app.rest.model.UsageReportPointDsoTotalVisitsRest;\n+import org.dspace.app.rest.model.UsageReportRest;\n+import org.dspace.app.rest.utils.DSpaceObjectUtils;\n+import org.dspace.content.Bitstream;\n+import org.dspace.content.DSpaceObject;\n+import org.dspace.content.Item;\n+import org.dspace.content.Site;\n+import org.dspace.core.Constants;\n+import org.dspace.core.Context;\n+import org.dspace.handle.service.HandleService;\n+import org.dspace.statistics.Dataset;\n+import org.dspace.statistics.content.DatasetDSpaceObjectGenerator;\n+import org.dspace.statistics.content.DatasetTimeGenerator;\n+import org.dspace.statistics.content.DatasetTypeGenerator;\n+import org.dspace.statistics.content.StatisticsDataVisits;\n+import org.dspace.statistics.content.StatisticsListing;\n+import org.dspace.statistics.content.StatisticsTable;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * This is the Service dealing with the {@link UsageReportRest} logic\n+ *\n+ * @author Maria Verdonck (Atmire) on 08/06/2020\n+ */\n+@Component\n+public class UsageReportService extends AbstractDSpaceRestRepository {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c88b6ef2e7c28a924d85fa3d04cce769baaebb3c"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYwMTc2Ng==", "bodyText": "This was left over from before the endpoint methods to retrieve the actual usage reports were moved to StatisticsRestRepository, moved to util and removed extends", "url": "https://github.com/DSpace/DSpace/pull/2782#discussion_r483601766", "createdAt": "2020-09-04T13:03:34Z", "author": {"login": "MarieVerdonck"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/UsageReportService.java", "diffHunk": "@@ -0,0 +1,359 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.io.IOException;\n+import java.sql.SQLException;\n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.solr.client.solrj.SolrServerException;\n+import org.dspace.app.rest.exception.DSpaceBadRequestException;\n+import org.dspace.app.rest.model.UsageReportPointCityRest;\n+import org.dspace.app.rest.model.UsageReportPointCountryRest;\n+import org.dspace.app.rest.model.UsageReportPointDateRest;\n+import org.dspace.app.rest.model.UsageReportPointDsoTotalVisitsRest;\n+import org.dspace.app.rest.model.UsageReportRest;\n+import org.dspace.app.rest.utils.DSpaceObjectUtils;\n+import org.dspace.content.Bitstream;\n+import org.dspace.content.DSpaceObject;\n+import org.dspace.content.Item;\n+import org.dspace.content.Site;\n+import org.dspace.core.Constants;\n+import org.dspace.core.Context;\n+import org.dspace.handle.service.HandleService;\n+import org.dspace.statistics.Dataset;\n+import org.dspace.statistics.content.DatasetDSpaceObjectGenerator;\n+import org.dspace.statistics.content.DatasetTimeGenerator;\n+import org.dspace.statistics.content.DatasetTypeGenerator;\n+import org.dspace.statistics.content.StatisticsDataVisits;\n+import org.dspace.statistics.content.StatisticsListing;\n+import org.dspace.statistics.content.StatisticsTable;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * This is the Service dealing with the {@link UsageReportRest} logic\n+ *\n+ * @author Maria Verdonck (Atmire) on 08/06/2020\n+ */\n+@Component\n+public class UsageReportService extends AbstractDSpaceRestRepository {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwMDgwNg=="}, "originalCommit": {"oid": "c88b6ef2e7c28a924d85fa3d04cce769baaebb3c"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDY1MDEyOnYy", "diffSide": "RIGHT", "path": "dspace/config/modules/usage-statistics.cfg", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNjozNzoyN1rOHMu3KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMzowMzo0N1rOHNMtzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzExMjc0NA==", "bodyText": "Am I correct to assume that site's should set this to true if they are running stats-util -s to shard their index each year?  https://wiki.lyrasis.org/display/DSDOC6x/SOLR+Statistics+Maintenance#SOLRStatisticsMaintenance-SolrShardingByYear\nIf so, we should document that in this comment. by saying something like;\nIf you are sharding your statistics index each year by running \"dspace stats-util -s\", you should set this to \"true\"\nFinally, as a general question, why did we default this to false?  It seems like in the current code, it's essentially defaulting to true...as SolrLoggerServiceImpl.initSolrYearCores() always runs by default and it checks to see if you have any year-based shards available.   So, is this fixing some bug you stumbled across with initSolrYearCores()?", "url": "https://github.com/DSpace/DSpace/pull/2782#discussion_r483112744", "createdAt": "2020-09-03T16:37:27Z", "author": {"login": "tdonohue"}, "path": "dspace/config/modules/usage-statistics.cfg", "diffHunk": "@@ -40,3 +40,6 @@ usage-statistics.authorization.admin.workflow=true\n # Enable/disable if a matching for a bot should be case sensitive\n # Setting this value to true will increase cpu usage, but bots will be found more accurately\n #usage-statistics.bots.case-insensitive = false\n+\n+# Set to true if the statistics core is sharded into a core per year, defaults to false\n+usage-statistics.shardedByYear = false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c88b6ef2e7c28a924d85fa3d04cce769baaebb3c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ0NTU0OA==", "bodyText": "@tdonohue Quick update already:\nWe'll investigate this again since this was a while back that we created this, but re-reading the initial description, the problem here was that we noticed that the counts were being duplicated. So if the item count was triggered 3 times, the 'normal' core that was not sharded was being loaded twice, and the end result of the reported records was 6 counts.", "url": "https://github.com/DSpace/DSpace/pull/2782#discussion_r483445548", "createdAt": "2020-09-04T07:43:34Z", "author": {"login": "jonas-atmire"}, "path": "dspace/config/modules/usage-statistics.cfg", "diffHunk": "@@ -40,3 +40,6 @@ usage-statistics.authorization.admin.workflow=true\n # Enable/disable if a matching for a bot should be case sensitive\n # Setting this value to true will increase cpu usage, but bots will be found more accurately\n #usage-statistics.bots.case-insensitive = false\n+\n+# Set to true if the statistics core is sharded into a core per year, defaults to false\n+usage-statistics.shardedByYear = false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzExMjc0NA=="}, "originalCommit": {"oid": "c88b6ef2e7c28a924d85fa3d04cce769baaebb3c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYwMTg2OA==", "bodyText": "@tdonohue This config is to prevent the initSolrYearCores() from running if the core is not shared.\nIf this method ran the statisticYearCores became an ArrayList containing {solrUrlbase}/solr/statistics twice (resulting in all views being counted twice).\nIn initSolrYearCores the first one gets added because there is A solr statistics core (the only one), but then the seconds gets added at \n  \n    \n      DSpace/dspace-api/src/main/java/org/dspace/statistics/SolrLoggerServiceImpl.java\n    \n    \n         Line 1589\n      in\n      bf7a813\n    \n    \n    \n    \n\n        \n          \n           statisticYearCores.add(((HttpSolrClient) solr) \n        \n    \n  \n\n, but there is only 1 statistics core.\u2028If the statistics core has not been sharded, there is no need to initialise the solrYearCores, so the config check made the most sense here.", "url": "https://github.com/DSpace/DSpace/pull/2782#discussion_r483601868", "createdAt": "2020-09-04T13:03:47Z", "author": {"login": "MarieVerdonck"}, "path": "dspace/config/modules/usage-statistics.cfg", "diffHunk": "@@ -40,3 +40,6 @@ usage-statistics.authorization.admin.workflow=true\n # Enable/disable if a matching for a bot should be case sensitive\n # Setting this value to true will increase cpu usage, but bots will be found more accurately\n #usage-statistics.bots.case-insensitive = false\n+\n+# Set to true if the statistics core is sharded into a core per year, defaults to false\n+usage-statistics.shardedByYear = false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzExMjc0NA=="}, "originalCommit": {"oid": "c88b6ef2e7c28a924d85fa3d04cce769baaebb3c"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1549, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}