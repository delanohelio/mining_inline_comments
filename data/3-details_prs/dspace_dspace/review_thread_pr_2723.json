{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNTUxODAx", "number": 2723, "reviewThreads": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxOTo0MDo0N1rODs023Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDo1NTozM1rODvvPbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzI5OTQ5OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/GroupRestController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxOTo0MDo0N1rOF95XEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxOTo0MDo0N1rOF95XEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ0NzI0OQ==", "bodyText": "Since this seems like a simple GET, shouldn't it be implemented as a LinkRestRepository?  In other words, I wonder if this should be implemented as GroupObjectLinkRepository, similar to how we have a GroupGroupLinkRepository for subgroups, and a GroupEPersonLinkRepository for EPeople members.", "url": "https://github.com/DSpace/DSpace/pull/2723#discussion_r400447249", "createdAt": "2020-03-30T19:40:47Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/GroupRestController.java", "diffHunk": "@@ -308,4 +315,15 @@ private void checkAuthorization(Context context, Group group) throws SQLExceptio\n \n         throw new AuthorizeException(\"not authorized to manage this group\");\n     }\n+\n+    /**\n+     * This returns the DSpace Object (Community, Collection) belonging to this Group.\n+     * This is only applicable for roles in that DSpace Object\n+     * e.g. the Community Administrator or Collection Submitter Group\n+     * @param uuid The uuid of the group\n+     */\n+    @RequestMapping(method = RequestMethod.GET, value = REGEX_REQUESTMAPPING_IDENTIFIER_AS_UUID + \"/object\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "516c7b39a91069120d13d7a457b2d9009b74239d"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzM0NDI1OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/GroupRestRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxOTo1Mzo1NFrOF95zVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxOTo1Mzo1NFrOF95zVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1NDQ4Ng==", "bodyText": "I'd rather see more specific error messages here, as there's a few different scenarios here we should be aware of:\n\nA permanent group's name can never be patched.  But, its description can be updated.\nSame with a Community/Collection group's name (not editable) & description (editable), unless it's detached. In which case it can be patched.\n\nSo, at a minimum, it seems like we need different errors & checks here.  Permanent groups can never have name updates, but can have description updates.  Community/Collection groups can be updated if the Community/Collection is deleted, but are otherwise considered \"permanent\".", "url": "https://github.com/DSpace/DSpace/pull/2723#discussion_r400454486", "createdAt": "2020-03-30T19:53:54Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/GroupRestRepository.java", "diffHunk": "@@ -117,6 +136,10 @@ public GroupRest findOne(Context context, UUID id) {\n     @PreAuthorize(\"hasPermission(#id, 'GROUP', 'WRITE')\")\n     protected void patch(Context context, HttpServletRequest request, String apiCategory, String model, UUID id,\n                          Patch patch) throws AuthorizeException, SQLException {\n+        final Group group = dsoService.find(context, id);\n+        if (group != null && isPatchUnprocessable(context, group)) {\n+            throw new UnprocessableEntityException(\"This group cannot be patched.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "516c7b39a91069120d13d7a457b2d9009b74239d"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzM0ODI5OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/GroupRestRepository.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxOTo1NTowOFrOF9511Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjoxNDoyMlrOF_IJZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1NTEyNQ==", "bodyText": "I'm not sure this is true. We need to be able to delete a Community or Collection's \"SUBMIT\" or \"ADMIN\" group in order to remove those roles. So they can be deleted, even if the parent object exists.\nHowever, a permanent group can never be deleted.", "url": "https://github.com/DSpace/DSpace/pull/2723#discussion_r400455125", "createdAt": "2020-03-30T19:55:08Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/GroupRestRepository.java", "diffHunk": "@@ -149,4 +172,77 @@ protected void patch(Context context, HttpServletRequest request, String apiCate\n     public Class<GroupRest> getDomainClass() {\n         return GroupRest.class;\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('ADMIN')\")\n+    protected void delete(Context context, UUID uuid) throws AuthorizeException {\n+        Group group = null;\n+        try {\n+            group = gs.find(context, uuid);\n+            if (group == null) {\n+                throw new ResourceNotFoundException(\n+                        GroupRest.CATEGORY + \".\" + GroupRest.NAME\n+                                + \" with id: \" + uuid + \" not found\"\n+                );\n+            }\n+            if (isDeleteUnprocessable(context, group)) {\n+                throw new UnprocessableEntityException(\"This group cannot be deleted\");\n+            }\n+            gs.delete(context, group);\n+        } catch (SQLException | IOException e) {\n+            throw new RuntimeException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private boolean isDeleteUnprocessable(Context context, Group group) {\n+        try {\n+            return group.isPermanent() || gs.getParentObject(context, group) != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "516c7b39a91069120d13d7a457b2d9009b74239d"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQyMjI1Nw==", "bodyText": "There are separate endpoints for that purpose: DSpace/RestContract#105\nIt would be best that groups are deleted using those endpoints, if we delete from the general group endpoint you could be deleting a group that is attached a community/collection & this would inadvertently delete the link.", "url": "https://github.com/DSpace/DSpace/pull/2723#discussion_r401422257", "createdAt": "2020-04-01T07:54:47Z", "author": {"login": "KevinVdV"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/GroupRestRepository.java", "diffHunk": "@@ -149,4 +172,77 @@ protected void patch(Context context, HttpServletRequest request, String apiCate\n     public Class<GroupRest> getDomainClass() {\n         return GroupRest.class;\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('ADMIN')\")\n+    protected void delete(Context context, UUID uuid) throws AuthorizeException {\n+        Group group = null;\n+        try {\n+            group = gs.find(context, uuid);\n+            if (group == null) {\n+                throw new ResourceNotFoundException(\n+                        GroupRest.CATEGORY + \".\" + GroupRest.NAME\n+                                + \" with id: \" + uuid + \" not found\"\n+                );\n+            }\n+            if (isDeleteUnprocessable(context, group)) {\n+                throw new UnprocessableEntityException(\"This group cannot be deleted\");\n+            }\n+            gs.delete(context, group);\n+        } catch (SQLException | IOException e) {\n+            throw new RuntimeException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private boolean isDeleteUnprocessable(Context context, Group group) {\n+        try {\n+            return group.isPermanent() || gs.getParentObject(context, group) != null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1NTEyNQ=="}, "originalCommit": {"oid": "516c7b39a91069120d13d7a457b2d9009b74239d"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTczODA4NA==", "bodyText": "@KevinVdV : good point. My mistake, as I didn't recall this was being managed as a separate endpoint. In that case, I agree with you that we should only allow deletion of Community/Collection Groups via the communities and collections endpoints.  Thanks for clarifying this!", "url": "https://github.com/DSpace/DSpace/pull/2723#discussion_r401738084", "createdAt": "2020-04-01T16:14:22Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/GroupRestRepository.java", "diffHunk": "@@ -149,4 +172,77 @@ protected void patch(Context context, HttpServletRequest request, String apiCate\n     public Class<GroupRest> getDomainClass() {\n         return GroupRest.class;\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('ADMIN')\")\n+    protected void delete(Context context, UUID uuid) throws AuthorizeException {\n+        Group group = null;\n+        try {\n+            group = gs.find(context, uuid);\n+            if (group == null) {\n+                throw new ResourceNotFoundException(\n+                        GroupRest.CATEGORY + \".\" + GroupRest.NAME\n+                                + \" with id: \" + uuid + \" not found\"\n+                );\n+            }\n+            if (isDeleteUnprocessable(context, group)) {\n+                throw new UnprocessableEntityException(\"This group cannot be deleted\");\n+            }\n+            gs.delete(context, group);\n+        } catch (SQLException | IOException e) {\n+            throw new RuntimeException(e.getMessage(), e);\n+        }\n+    }\n+\n+    private boolean isDeleteUnprocessable(Context context, Group group) {\n+        try {\n+            return group.isPermanent() || gs.getParentObject(context, group) != null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1NTEyNQ=="}, "originalCommit": {"oid": "516c7b39a91069120d13d7a457b2d9009b74239d"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzM0OTczOnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/GroupRestRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxOTo1NTozM1rOF952uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxOTo1NTozM1rOF952uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1NTM1Mw==", "bodyText": "Again, I'd prefer more descriptive errors here as to why the group cannot be deleted.", "url": "https://github.com/DSpace/DSpace/pull/2723#discussion_r400455353", "createdAt": "2020-03-30T19:55:33Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/GroupRestRepository.java", "diffHunk": "@@ -149,4 +172,77 @@ protected void patch(Context context, HttpServletRequest request, String apiCate\n     public Class<GroupRest> getDomainClass() {\n         return GroupRest.class;\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasAuthority('ADMIN')\")\n+    protected void delete(Context context, UUID uuid) throws AuthorizeException {\n+        Group group = null;\n+        try {\n+            group = gs.find(context, uuid);\n+            if (group == null) {\n+                throw new ResourceNotFoundException(\n+                        GroupRest.CATEGORY + \".\" + GroupRest.NAME\n+                                + \" with id: \" + uuid + \" not found\"\n+                );\n+            }\n+            if (isDeleteUnprocessable(context, group)) {\n+                throw new UnprocessableEntityException(\"This group cannot be deleted\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "516c7b39a91069120d13d7a457b2d9009b74239d"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTQ2OTY3OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/GroupRestController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjoxNjoxMlrOF_IOFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjoxNjoxMlrOF_IOFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTczOTI4NQ==", "bodyText": "You should be able to remove all the changes to GroupRestController now that you've refactored this into GroupParentObjectLinkRepository", "url": "https://github.com/DSpace/DSpace/pull/2723#discussion_r401739285", "createdAt": "2020-04-01T16:16:12Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/GroupRestController.java", "diffHunk": "@@ -76,6 +80,9 @@\n     @Autowired\n     GroupUtil groupUtil;\n \n+    @Autowired\n+    GroupRestRepository repository;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9b9c7adf3e1502d0092defd727fa86e031eadcd"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTQ4MTA0OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/patch/operation/GroupNameReplaceOperation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjoxODo1NlrOF_IVgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjoxODo1NlrOF_IVgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc0MTE4Ng==", "bodyText": "I think this should say \"Group name replacement patches\" (or similar) :)", "url": "https://github.com/DSpace/DSpace/pull/2723#discussion_r401741186", "createdAt": "2020-04-01T16:18:56Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/patch/operation/GroupNameReplaceOperation.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository.patch.operation;\n+\n+import java.sql.SQLException;\n+\n+import org.dspace.app.rest.exception.DSpaceBadRequestException;\n+import org.dspace.app.rest.exception.UnprocessableEntityException;\n+import org.dspace.app.rest.model.patch.Operation;\n+import org.dspace.content.DSpaceObject;\n+import org.dspace.core.Context;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.factory.EPersonServiceFactory;\n+import org.dspace.eperson.service.GroupService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Implementation for Group password patches.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9b9c7adf3e1502d0092defd727fa86e031eadcd"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTQ5NjA2OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjoyMjozM1rOF_IfGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjoyMjozM1rOF_IfGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc0MzY0MQ==", "bodyText": "You should not need to manually hardcode the JSON request.  We have a getPatchContent() method that will generate this for you.  Here's another replace example from another IT: https://github.com/DSpace/DSpace/blob/master/dspace-server-webapp/src/test/java/org/dspace/app/rest/ItemRestRepositoryIT.java#L411-L414", "url": "https://github.com/DSpace/DSpace/pull/2723#discussion_r401743641", "createdAt": "2020-04-01T16:22:33Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "diffHunk": "@@ -450,6 +459,109 @@ private void runPatchMetadataTests(EPerson asUser, int expectedStatus) throws Ex\n         new MetadataPatchSuite().runWith(getClient(token), \"/api/eperson/groups/\" + group.getID(), expectedStatus);\n     }\n \n+    @Test\n+    public void patchGroupName() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group group = GroupBuilder.createGroup(context).withName(\"Group\").build();\n+        context.restoreAuthSystemState();\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        String requestBody\n+                = \"      [\\n\"\n+                + \"        {\\n\"\n+                + \"          \\\"op\\\": \\\"replace\\\",\\n\"\n+                + \"          \\\"path\\\": \\\"/name\\\",\\n\"\n+                + \"          \\\"value\\\": \\\"new name\\\"\\n\"\n+                + \"        }\\n\"\n+                + \"      ]\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9b9c7adf3e1502d0092defd727fa86e031eadcd"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTQ5NzgxOnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjoyMjo1N1rOF_IgJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjoyMjo1N1rOF_IgJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc0MzkxMQ==", "bodyText": "Again, no need to create JSON by hand here (see above comment)", "url": "https://github.com/DSpace/DSpace/pull/2723#discussion_r401743911", "createdAt": "2020-04-01T16:22:57Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "diffHunk": "@@ -450,6 +459,109 @@ private void runPatchMetadataTests(EPerson asUser, int expectedStatus) throws Ex\n         new MetadataPatchSuite().runWith(getClient(token), \"/api/eperson/groups/\" + group.getID(), expectedStatus);\n     }\n \n+    @Test\n+    public void patchGroupName() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group group = GroupBuilder.createGroup(context).withName(\"Group\").build();\n+        context.restoreAuthSystemState();\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        String requestBody\n+                = \"      [\\n\"\n+                + \"        {\\n\"\n+                + \"          \\\"op\\\": \\\"replace\\\",\\n\"\n+                + \"          \\\"path\\\": \\\"/name\\\",\\n\"\n+                + \"          \\\"value\\\": \\\"new name\\\"\\n\"\n+                + \"        }\\n\"\n+                + \"      ]\";\n+        getClient(token)\n+                .perform(patch(\"/api/eperson/groups/\" + group.getID()).content(requestBody)\n+                                 .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                .andExpect(status().isOk());\n+        getClient(token)\n+                .perform(get(\"/api/eperson/groups/\" + group.getID()))\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$\", Matchers.is(\n+                        GroupMatcher.matchGroupEntry(group.getID(), \"new name\"))\n+                ));\n+    }\n+\n+    @Test\n+    public void patchGroupWithParentUnprocessable() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson reviewer1 = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"reviewer1@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                .withName(\"Sub Community\")\n+                .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                .withName(\"Collection 1\")\n+                .withWorkflowGroup(1, admin, reviewer1)\n+                .build();\n+\n+        final Group workflowGroup = col1.getWorkflowStep1(context);\n+        final String name = workflowGroup.getName();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        String requestBody\n+                = \"      [\\n\"\n+                + \"        {\\n\"\n+                + \"          \\\"op\\\": \\\"replace\\\",\\n\"\n+                + \"          \\\"path\\\": \\\"/name\\\",\\n\"\n+                + \"          \\\"value\\\": \\\"new name\\\"\\n\"\n+                + \"        }\\n\"\n+                + \"      ]\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9b9c7adf3e1502d0092defd727fa86e031eadcd"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTQ5ODcyOnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjoyMzoxMVrOF_IguA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjoyMzoxMVrOF_IguA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc0NDA1Ng==", "bodyText": "Same here, shouldn't need to be created by hand.", "url": "https://github.com/DSpace/DSpace/pull/2723#discussion_r401744056", "createdAt": "2020-04-01T16:23:11Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "diffHunk": "@@ -450,6 +459,109 @@ private void runPatchMetadataTests(EPerson asUser, int expectedStatus) throws Ex\n         new MetadataPatchSuite().runWith(getClient(token), \"/api/eperson/groups/\" + group.getID(), expectedStatus);\n     }\n \n+    @Test\n+    public void patchGroupName() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group group = GroupBuilder.createGroup(context).withName(\"Group\").build();\n+        context.restoreAuthSystemState();\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        String requestBody\n+                = \"      [\\n\"\n+                + \"        {\\n\"\n+                + \"          \\\"op\\\": \\\"replace\\\",\\n\"\n+                + \"          \\\"path\\\": \\\"/name\\\",\\n\"\n+                + \"          \\\"value\\\": \\\"new name\\\"\\n\"\n+                + \"        }\\n\"\n+                + \"      ]\";\n+        getClient(token)\n+                .perform(patch(\"/api/eperson/groups/\" + group.getID()).content(requestBody)\n+                                 .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                .andExpect(status().isOk());\n+        getClient(token)\n+                .perform(get(\"/api/eperson/groups/\" + group.getID()))\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$\", Matchers.is(\n+                        GroupMatcher.matchGroupEntry(group.getID(), \"new name\"))\n+                ));\n+    }\n+\n+    @Test\n+    public void patchGroupWithParentUnprocessable() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson reviewer1 = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"reviewer1@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                .withName(\"Sub Community\")\n+                .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                .withName(\"Collection 1\")\n+                .withWorkflowGroup(1, admin, reviewer1)\n+                .build();\n+\n+        final Group workflowGroup = col1.getWorkflowStep1(context);\n+        final String name = workflowGroup.getName();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        String requestBody\n+                = \"      [\\n\"\n+                + \"        {\\n\"\n+                + \"          \\\"op\\\": \\\"replace\\\",\\n\"\n+                + \"          \\\"path\\\": \\\"/name\\\",\\n\"\n+                + \"          \\\"value\\\": \\\"new name\\\"\\n\"\n+                + \"        }\\n\"\n+                + \"      ]\";\n+        getClient(token)\n+                .perform(patch(\"/api/eperson/groups/\" + workflowGroup.getID()).content(requestBody)\n+                                 .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                .andExpect(status().isUnprocessableEntity());\n+\n+        getClient(token)\n+                .perform(get(\"/api/eperson/groups/\" + workflowGroup.getID()))\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$\", Matchers.is(\n+                        GroupMatcher.matchGroupEntry(workflowGroup.getID(), name))\n+                ));\n+    }\n+\n+    @Test\n+    public void patchPermanentGroupUnprocessable() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+        final Group group = groupService.findByName(context, Group.ANONYMOUS);\n+        final String name = group.getName();\n+        context.restoreAuthSystemState();\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        String requestBody\n+                = \"      [\\n\"\n+                + \"        {\\n\"\n+                + \"          \\\"op\\\": \\\"replace\\\",\\n\"\n+                + \"          \\\"path\\\": \\\"/name\\\",\\n\"\n+                + \"          \\\"value\\\": \\\"new name\\\"\\n\"\n+                + \"        }\\n\"\n+                + \"      ]\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9b9c7adf3e1502d0092defd727fa86e031eadcd"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTUwMTY3OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjoyMzo1MFrOF_IifA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDo0Nzo1M1rOGCVgnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc0NDUwOA==", "bodyText": "This method is missing a context.restoreAuthSystemState();", "url": "https://github.com/DSpace/DSpace/pull/2723#discussion_r401744508", "createdAt": "2020-04-01T16:23:50Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "diffHunk": "@@ -450,6 +459,109 @@ private void runPatchMetadataTests(EPerson asUser, int expectedStatus) throws Ex\n         new MetadataPatchSuite().runWith(getClient(token), \"/api/eperson/groups/\" + group.getID(), expectedStatus);\n     }\n \n+    @Test\n+    public void patchGroupName() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group group = GroupBuilder.createGroup(context).withName(\"Group\").build();\n+        context.restoreAuthSystemState();\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        String requestBody\n+                = \"      [\\n\"\n+                + \"        {\\n\"\n+                + \"          \\\"op\\\": \\\"replace\\\",\\n\"\n+                + \"          \\\"path\\\": \\\"/name\\\",\\n\"\n+                + \"          \\\"value\\\": \\\"new name\\\"\\n\"\n+                + \"        }\\n\"\n+                + \"      ]\";\n+        getClient(token)\n+                .perform(patch(\"/api/eperson/groups/\" + group.getID()).content(requestBody)\n+                                 .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                .andExpect(status().isOk());\n+        getClient(token)\n+                .perform(get(\"/api/eperson/groups/\" + group.getID()))\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$\", Matchers.is(\n+                        GroupMatcher.matchGroupEntry(group.getID(), \"new name\"))\n+                ));\n+    }\n+\n+    @Test\n+    public void patchGroupWithParentUnprocessable() throws Exception {\n+        context.turnOffAuthorisationSystem();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9b9c7adf3e1502d0092defd727fa86e031eadcd"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEwMjc1MQ==", "bodyText": "This method is still missing a context.restoreAuthSystemState(); after it finishes creating the necessary test content.", "url": "https://github.com/DSpace/DSpace/pull/2723#discussion_r405102751", "createdAt": "2020-04-07T20:47:53Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "diffHunk": "@@ -450,6 +459,109 @@ private void runPatchMetadataTests(EPerson asUser, int expectedStatus) throws Ex\n         new MetadataPatchSuite().runWith(getClient(token), \"/api/eperson/groups/\" + group.getID(), expectedStatus);\n     }\n \n+    @Test\n+    public void patchGroupName() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Group group = GroupBuilder.createGroup(context).withName(\"Group\").build();\n+        context.restoreAuthSystemState();\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        String requestBody\n+                = \"      [\\n\"\n+                + \"        {\\n\"\n+                + \"          \\\"op\\\": \\\"replace\\\",\\n\"\n+                + \"          \\\"path\\\": \\\"/name\\\",\\n\"\n+                + \"          \\\"value\\\": \\\"new name\\\"\\n\"\n+                + \"        }\\n\"\n+                + \"      ]\";\n+        getClient(token)\n+                .perform(patch(\"/api/eperson/groups/\" + group.getID()).content(requestBody)\n+                                 .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                .andExpect(status().isOk());\n+        getClient(token)\n+                .perform(get(\"/api/eperson/groups/\" + group.getID()))\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$\", Matchers.is(\n+                        GroupMatcher.matchGroupEntry(group.getID(), \"new name\"))\n+                ));\n+    }\n+\n+    @Test\n+    public void patchGroupWithParentUnprocessable() throws Exception {\n+        context.turnOffAuthorisationSystem();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc0NDUwOA=="}, "originalCommit": {"oid": "c9b9c7adf3e1502d0092defd727fa86e031eadcd"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTUwNjI4OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjoyNDo1NVrOF_IlSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjoyNDo1NVrOF_IlSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc0NTIyNw==", "bodyText": "This method is missing a context.restoreAuthSystemState();   Also, could we add a comment as to why the context.commit() and reloadEntity are required in this test?  Most tests don't actually need those.  Are they needed here because you are doing a delete? Or could they be removed?\n(You might want to reverify the commit & reloadEntity are required after switching to using the GroupBuilder. I don't think they should be required, but I could be wrong here.)", "url": "https://github.com/DSpace/DSpace/pull/2723#discussion_r401745227", "createdAt": "2020-04-01T16:24:55Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "diffHunk": "@@ -1538,4 +1650,342 @@ public void removeMemberUnprocessableTest() throws Exception {\n             }\n         }\n     }\n+\n+    @Test\n+    public void deleteGroupTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        Group parentGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+\n+            parentGroup = groupService.create(context);\n+\n+            context.commit();\n+\n+            parentGroup = context.reloadEntity(parentGroup);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9b9c7adf3e1502d0092defd727fa86e031eadcd"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTUwODc2OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjoyNToyOVrOF_Im1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjoyNToyOVrOF_Im1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc0NTYyMQ==", "bodyText": "Same as above. should use GroupBuilder, missing a context.restoreAuthSystemState(); and same question about commit() and reloadEntity() as above.", "url": "https://github.com/DSpace/DSpace/pull/2723#discussion_r401745621", "createdAt": "2020-04-01T16:25:29Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "diffHunk": "@@ -1538,4 +1650,342 @@ public void removeMemberUnprocessableTest() throws Exception {\n             }\n         }\n     }\n+\n+    @Test\n+    public void deleteGroupTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        Group parentGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+\n+            parentGroup = groupService.create(context);\n+\n+            context.commit();\n+\n+            parentGroup = context.reloadEntity(parentGroup);\n+\n+            String authToken = getAuthToken(admin.getEmail(), password);\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+            getClient(authToken).perform(\n+                    delete(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isNoContent());\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isNotFound());\n+\n+        } finally {\n+            if (parentGroup != null) {\n+                GroupBuilder.deleteGroup(parentGroup.getID());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void deleteGroupUnauthorizedTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        Group parentGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+\n+            parentGroup = groupService.create(context);\n+\n+            context.commit();\n+\n+            parentGroup = context.reloadEntity(parentGroup);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9b9c7adf3e1502d0092defd727fa86e031eadcd"}, "originalPosition": 203}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTUxMDQ5OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjoyNTo1NFrOF_In-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjoyNTo1NFrOF_In-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc0NTkxMw==", "bodyText": "Same as above. should use GroupBuilder, missing a context.restoreAuthSystemState(); and same question about commit() and reloadEntity() as above.", "url": "https://github.com/DSpace/DSpace/pull/2723#discussion_r401745913", "createdAt": "2020-04-01T16:25:54Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "diffHunk": "@@ -1538,4 +1650,342 @@ public void removeMemberUnprocessableTest() throws Exception {\n             }\n         }\n     }\n+\n+    @Test\n+    public void deleteGroupTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        Group parentGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+\n+            parentGroup = groupService.create(context);\n+\n+            context.commit();\n+\n+            parentGroup = context.reloadEntity(parentGroup);\n+\n+            String authToken = getAuthToken(admin.getEmail(), password);\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+            getClient(authToken).perform(\n+                    delete(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isNoContent());\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isNotFound());\n+\n+        } finally {\n+            if (parentGroup != null) {\n+                GroupBuilder.deleteGroup(parentGroup.getID());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void deleteGroupUnauthorizedTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        Group parentGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+\n+            parentGroup = groupService.create(context);\n+\n+            context.commit();\n+\n+            parentGroup = context.reloadEntity(parentGroup);\n+\n+            String authToken = getAuthToken(admin.getEmail(), password);\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+            getClient().perform(\n+                    delete(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isUnauthorized());\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+        } finally {\n+            if (parentGroup != null) {\n+                GroupBuilder.deleteGroup(parentGroup.getID());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void deleteGroupUnprocessableTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson reviewer1 = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"reviewer1@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                .withName(\"Sub Community\")\n+                .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                .withName(\"Collection 1\")\n+                .withWorkflowGroup(1, admin, reviewer1)\n+                .build();\n+\n+        final Group workflowGroup = col1.getWorkflowStep1(context);\n+        context.commit();\n+        context.reloadEntity(workflowGroup);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9b9c7adf3e1502d0092defd727fa86e031eadcd"}, "originalPosition": 248}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTUxMjM1OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjoyNjoyMFrOF_IpHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjoyNjoyMFrOF_IpHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc0NjIwNw==", "bodyText": "Same as above. should use GroupBuilder, missing a context.restoreAuthSystemState(); and same question about commit() and reloadEntity() as above.", "url": "https://github.com/DSpace/DSpace/pull/2723#discussion_r401746207", "createdAt": "2020-04-01T16:26:20Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "diffHunk": "@@ -1538,4 +1650,342 @@ public void removeMemberUnprocessableTest() throws Exception {\n             }\n         }\n     }\n+\n+    @Test\n+    public void deleteGroupTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        Group parentGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+\n+            parentGroup = groupService.create(context);\n+\n+            context.commit();\n+\n+            parentGroup = context.reloadEntity(parentGroup);\n+\n+            String authToken = getAuthToken(admin.getEmail(), password);\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+            getClient(authToken).perform(\n+                    delete(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isNoContent());\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isNotFound());\n+\n+        } finally {\n+            if (parentGroup != null) {\n+                GroupBuilder.deleteGroup(parentGroup.getID());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void deleteGroupUnauthorizedTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        Group parentGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+\n+            parentGroup = groupService.create(context);\n+\n+            context.commit();\n+\n+            parentGroup = context.reloadEntity(parentGroup);\n+\n+            String authToken = getAuthToken(admin.getEmail(), password);\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+            getClient().perform(\n+                    delete(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isUnauthorized());\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+        } finally {\n+            if (parentGroup != null) {\n+                GroupBuilder.deleteGroup(parentGroup.getID());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void deleteGroupUnprocessableTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson reviewer1 = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"reviewer1@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                .withName(\"Sub Community\")\n+                .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                .withName(\"Collection 1\")\n+                .withWorkflowGroup(1, admin, reviewer1)\n+                .build();\n+\n+        final Group workflowGroup = col1.getWorkflowStep1(context);\n+        context.commit();\n+        context.reloadEntity(workflowGroup);\n+\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + workflowGroup.getID())\n+        ).andExpect(status().isOk());\n+\n+        getClient(authToken).perform(\n+                delete(\"/api/eperson/groups/\" + workflowGroup.getID())\n+        ).andExpect(status().isUnprocessableEntity());\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + workflowGroup.getID())\n+        ).andExpect(status().isOk());\n+\n+    }\n+\n+    @Test\n+    public void deletePermanentGroupUnprocessableTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+        final Group group = groupService.findByName(context, Group.ANONYMOUS);\n+        context.restoreAuthSystemState();\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + group.getID())\n+        ).andExpect(status().isOk());\n+\n+        getClient(authToken).perform(\n+                delete(\"/api/eperson/groups/\" + group.getID())\n+        ).andExpect(status().isUnprocessableEntity());\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + group.getID())\n+        ).andExpect(status().isOk());\n+\n+    }\n+\n+    @Test\n+    public void deleteGroupForbiddenTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        Group parentGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+\n+            parentGroup = groupService.create(context);\n+\n+            context.commit();\n+\n+            parentGroup = context.reloadEntity(parentGroup);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9b9c7adf3e1502d0092defd727fa86e031eadcd"}, "originalPosition": 304}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTUyNDM3OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjoyOTowOFrOF_Iwlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjoyOTowOFrOF_Iwlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc0ODExOQ==", "bodyText": "Same as above. should use GroupBuilder, missing a context.restoreAuthSystemState(); and same question about commit() and reloadEntity() as above.", "url": "https://github.com/DSpace/DSpace/pull/2723#discussion_r401748119", "createdAt": "2020-04-01T16:29:08Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "diffHunk": "@@ -1538,4 +1650,342 @@ public void removeMemberUnprocessableTest() throws Exception {\n             }\n         }\n     }\n+\n+    @Test\n+    public void deleteGroupTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        Group parentGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+\n+            parentGroup = groupService.create(context);\n+\n+            context.commit();\n+\n+            parentGroup = context.reloadEntity(parentGroup);\n+\n+            String authToken = getAuthToken(admin.getEmail(), password);\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+            getClient(authToken).perform(\n+                    delete(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isNoContent());\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isNotFound());\n+\n+        } finally {\n+            if (parentGroup != null) {\n+                GroupBuilder.deleteGroup(parentGroup.getID());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void deleteGroupUnauthorizedTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        Group parentGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+\n+            parentGroup = groupService.create(context);\n+\n+            context.commit();\n+\n+            parentGroup = context.reloadEntity(parentGroup);\n+\n+            String authToken = getAuthToken(admin.getEmail(), password);\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+            getClient().perform(\n+                    delete(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isUnauthorized());\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+        } finally {\n+            if (parentGroup != null) {\n+                GroupBuilder.deleteGroup(parentGroup.getID());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void deleteGroupUnprocessableTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson reviewer1 = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"reviewer1@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                .withName(\"Sub Community\")\n+                .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                .withName(\"Collection 1\")\n+                .withWorkflowGroup(1, admin, reviewer1)\n+                .build();\n+\n+        final Group workflowGroup = col1.getWorkflowStep1(context);\n+        context.commit();\n+        context.reloadEntity(workflowGroup);\n+\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + workflowGroup.getID())\n+        ).andExpect(status().isOk());\n+\n+        getClient(authToken).perform(\n+                delete(\"/api/eperson/groups/\" + workflowGroup.getID())\n+        ).andExpect(status().isUnprocessableEntity());\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + workflowGroup.getID())\n+        ).andExpect(status().isOk());\n+\n+    }\n+\n+    @Test\n+    public void deletePermanentGroupUnprocessableTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+        final Group group = groupService.findByName(context, Group.ANONYMOUS);\n+        context.restoreAuthSystemState();\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + group.getID())\n+        ).andExpect(status().isOk());\n+\n+        getClient(authToken).perform(\n+                delete(\"/api/eperson/groups/\" + group.getID())\n+        ).andExpect(status().isUnprocessableEntity());\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + group.getID())\n+        ).andExpect(status().isOk());\n+\n+    }\n+\n+    @Test\n+    public void deleteGroupForbiddenTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        Group parentGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+\n+            parentGroup = groupService.create(context);\n+\n+            context.commit();\n+\n+            parentGroup = context.reloadEntity(parentGroup);\n+\n+            String adminToken = getAuthToken(admin.getEmail(), password);\n+            String authToken = getAuthToken(eperson.getEmail(), password);\n+\n+            getClient(adminToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+            getClient(authToken).perform(\n+                    delete(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isForbidden());\n+\n+            getClient(adminToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+        } finally {\n+            if (parentGroup != null) {\n+                GroupBuilder.deleteGroup(parentGroup.getID());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void deleteGroupNotFoundTest() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        context.commit();\n+\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(authToken).perform(\n+                delete(\"/api/eperson/groups/\" + UUID.randomUUID())\n+        ).andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void getGroupObjectCommunityTest() throws Exception {\n+        CommunityService communityService\n+                = ContentServiceFactory.getInstance().getCommunityService();\n+        Community community = null;\n+        Group adminGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+            community = communityService.create(null, context);\n+            adminGroup = communityService.createAdministrators(context, community);\n+            context.commit();\n+            adminGroup = context.reloadEntity(adminGroup);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9b9c7adf3e1502d0092defd727fa86e031eadcd"}, "originalPosition": 353}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTUyNDkyOnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjoyOToxNVrOF_Iw7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjoyOToxNVrOF_Iw7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc0ODIwNQ==", "bodyText": "Same as above. should use GroupBuilder, missing a context.restoreAuthSystemState(); and same question about commit() and reloadEntity() as above.", "url": "https://github.com/DSpace/DSpace/pull/2723#discussion_r401748205", "createdAt": "2020-04-01T16:29:15Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "diffHunk": "@@ -1538,4 +1650,342 @@ public void removeMemberUnprocessableTest() throws Exception {\n             }\n         }\n     }\n+\n+    @Test\n+    public void deleteGroupTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        Group parentGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+\n+            parentGroup = groupService.create(context);\n+\n+            context.commit();\n+\n+            parentGroup = context.reloadEntity(parentGroup);\n+\n+            String authToken = getAuthToken(admin.getEmail(), password);\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+            getClient(authToken).perform(\n+                    delete(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isNoContent());\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isNotFound());\n+\n+        } finally {\n+            if (parentGroup != null) {\n+                GroupBuilder.deleteGroup(parentGroup.getID());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void deleteGroupUnauthorizedTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        Group parentGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+\n+            parentGroup = groupService.create(context);\n+\n+            context.commit();\n+\n+            parentGroup = context.reloadEntity(parentGroup);\n+\n+            String authToken = getAuthToken(admin.getEmail(), password);\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+            getClient().perform(\n+                    delete(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isUnauthorized());\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+        } finally {\n+            if (parentGroup != null) {\n+                GroupBuilder.deleteGroup(parentGroup.getID());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void deleteGroupUnprocessableTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson reviewer1 = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"reviewer1@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                .withName(\"Sub Community\")\n+                .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                .withName(\"Collection 1\")\n+                .withWorkflowGroup(1, admin, reviewer1)\n+                .build();\n+\n+        final Group workflowGroup = col1.getWorkflowStep1(context);\n+        context.commit();\n+        context.reloadEntity(workflowGroup);\n+\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + workflowGroup.getID())\n+        ).andExpect(status().isOk());\n+\n+        getClient(authToken).perform(\n+                delete(\"/api/eperson/groups/\" + workflowGroup.getID())\n+        ).andExpect(status().isUnprocessableEntity());\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + workflowGroup.getID())\n+        ).andExpect(status().isOk());\n+\n+    }\n+\n+    @Test\n+    public void deletePermanentGroupUnprocessableTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+        final Group group = groupService.findByName(context, Group.ANONYMOUS);\n+        context.restoreAuthSystemState();\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + group.getID())\n+        ).andExpect(status().isOk());\n+\n+        getClient(authToken).perform(\n+                delete(\"/api/eperson/groups/\" + group.getID())\n+        ).andExpect(status().isUnprocessableEntity());\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + group.getID())\n+        ).andExpect(status().isOk());\n+\n+    }\n+\n+    @Test\n+    public void deleteGroupForbiddenTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        Group parentGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+\n+            parentGroup = groupService.create(context);\n+\n+            context.commit();\n+\n+            parentGroup = context.reloadEntity(parentGroup);\n+\n+            String adminToken = getAuthToken(admin.getEmail(), password);\n+            String authToken = getAuthToken(eperson.getEmail(), password);\n+\n+            getClient(adminToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+            getClient(authToken).perform(\n+                    delete(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isForbidden());\n+\n+            getClient(adminToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+        } finally {\n+            if (parentGroup != null) {\n+                GroupBuilder.deleteGroup(parentGroup.getID());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void deleteGroupNotFoundTest() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        context.commit();\n+\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(authToken).perform(\n+                delete(\"/api/eperson/groups/\" + UUID.randomUUID())\n+        ).andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void getGroupObjectCommunityTest() throws Exception {\n+        CommunityService communityService\n+                = ContentServiceFactory.getInstance().getCommunityService();\n+        Community community = null;\n+        Group adminGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+            community = communityService.create(null, context);\n+            adminGroup = communityService.createAdministrators(context, community);\n+            context.commit();\n+            adminGroup = context.reloadEntity(adminGroup);\n+\n+            String authToken = getAuthToken(admin.getEmail(), password);\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/object\")\n+            ).andExpect(status().isOk());\n+        } finally {\n+            if (community != null) {\n+                CommunityBuilder.deleteCommunity(community.getID());\n+            }\n+            if (adminGroup != null) {\n+                GroupBuilder.deleteGroup(adminGroup.getID());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void getGroupObjectCollectionTest() throws Exception {\n+        CommunityService communityService\n+                = ContentServiceFactory.getInstance().getCommunityService();\n+        CollectionService collectionService\n+                = ContentServiceFactory.getInstance().getCollectionService();\n+        Community community = null;\n+        Collection collection = null;\n+        Group adminGroup = null;\n+        Group worfklowGroup = null;\n+        Group submitterGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+            community = communityService.create(null, context);\n+            collection = collectionService.create(context, community);\n+            adminGroup = collectionService.createAdministrators(context, collection);\n+            worfklowGroup = collectionService.createWorkflowGroup(context, collection, 1);\n+            submitterGroup = collectionService.createSubmitters(context, collection);\n+            context.commit();\n+            adminGroup = context.reloadEntity(adminGroup);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9b9c7adf3e1502d0092defd727fa86e031eadcd"}, "originalPosition": 389}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTUzNDc3OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjozMTozN1rOF_I3BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjozMTozN1rOF_I3BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc0OTc2NA==", "bodyText": "You should be using the GroupBuilder.createGroup() method to create all the Groups in these tests.  That way they will be automatically cleaned up after the test completes. In other words, you no longer need any of the finally clauses in any of the tests you created, as long as you use the GroupBuilder test utility.", "url": "https://github.com/DSpace/DSpace/pull/2723#discussion_r401749764", "createdAt": "2020-04-01T16:31:37Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "diffHunk": "@@ -1538,4 +1650,342 @@ public void removeMemberUnprocessableTest() throws Exception {\n             }\n         }\n     }\n+\n+    @Test\n+    public void deleteGroupTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        Group parentGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+\n+            parentGroup = groupService.create(context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9b9c7adf3e1502d0092defd727fa86e031eadcd"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTU0MzQ4OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjozMzo0MVrOF_I8mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjozMzo0MVrOF_I8mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc1MTE5NA==", "bodyText": "Same as above. should use GroupBuilder, missing a context.restoreAuthSystemState(); and same question about commit() and reloadEntity() as above.", "url": "https://github.com/DSpace/DSpace/pull/2723#discussion_r401751194", "createdAt": "2020-04-01T16:33:41Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "diffHunk": "@@ -1538,4 +1650,342 @@ public void removeMemberUnprocessableTest() throws Exception {\n             }\n         }\n     }\n+\n+    @Test\n+    public void deleteGroupTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        Group parentGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+\n+            parentGroup = groupService.create(context);\n+\n+            context.commit();\n+\n+            parentGroup = context.reloadEntity(parentGroup);\n+\n+            String authToken = getAuthToken(admin.getEmail(), password);\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+            getClient(authToken).perform(\n+                    delete(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isNoContent());\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isNotFound());\n+\n+        } finally {\n+            if (parentGroup != null) {\n+                GroupBuilder.deleteGroup(parentGroup.getID());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void deleteGroupUnauthorizedTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        Group parentGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+\n+            parentGroup = groupService.create(context);\n+\n+            context.commit();\n+\n+            parentGroup = context.reloadEntity(parentGroup);\n+\n+            String authToken = getAuthToken(admin.getEmail(), password);\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+            getClient().perform(\n+                    delete(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isUnauthorized());\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+        } finally {\n+            if (parentGroup != null) {\n+                GroupBuilder.deleteGroup(parentGroup.getID());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void deleteGroupUnprocessableTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson reviewer1 = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"reviewer1@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                .withName(\"Sub Community\")\n+                .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                .withName(\"Collection 1\")\n+                .withWorkflowGroup(1, admin, reviewer1)\n+                .build();\n+\n+        final Group workflowGroup = col1.getWorkflowStep1(context);\n+        context.commit();\n+        context.reloadEntity(workflowGroup);\n+\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + workflowGroup.getID())\n+        ).andExpect(status().isOk());\n+\n+        getClient(authToken).perform(\n+                delete(\"/api/eperson/groups/\" + workflowGroup.getID())\n+        ).andExpect(status().isUnprocessableEntity());\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + workflowGroup.getID())\n+        ).andExpect(status().isOk());\n+\n+    }\n+\n+    @Test\n+    public void deletePermanentGroupUnprocessableTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+        final Group group = groupService.findByName(context, Group.ANONYMOUS);\n+        context.restoreAuthSystemState();\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + group.getID())\n+        ).andExpect(status().isOk());\n+\n+        getClient(authToken).perform(\n+                delete(\"/api/eperson/groups/\" + group.getID())\n+        ).andExpect(status().isUnprocessableEntity());\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + group.getID())\n+        ).andExpect(status().isOk());\n+\n+    }\n+\n+    @Test\n+    public void deleteGroupForbiddenTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        Group parentGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+\n+            parentGroup = groupService.create(context);\n+\n+            context.commit();\n+\n+            parentGroup = context.reloadEntity(parentGroup);\n+\n+            String adminToken = getAuthToken(admin.getEmail(), password);\n+            String authToken = getAuthToken(eperson.getEmail(), password);\n+\n+            getClient(adminToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+            getClient(authToken).perform(\n+                    delete(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isForbidden());\n+\n+            getClient(adminToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+        } finally {\n+            if (parentGroup != null) {\n+                GroupBuilder.deleteGroup(parentGroup.getID());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void deleteGroupNotFoundTest() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        context.commit();\n+\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(authToken).perform(\n+                delete(\"/api/eperson/groups/\" + UUID.randomUUID())\n+        ).andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void getGroupObjectCommunityTest() throws Exception {\n+        CommunityService communityService\n+                = ContentServiceFactory.getInstance().getCommunityService();\n+        Community community = null;\n+        Group adminGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+            community = communityService.create(null, context);\n+            adminGroup = communityService.createAdministrators(context, community);\n+            context.commit();\n+            adminGroup = context.reloadEntity(adminGroup);\n+\n+            String authToken = getAuthToken(admin.getEmail(), password);\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/object\")\n+            ).andExpect(status().isOk());\n+        } finally {\n+            if (community != null) {\n+                CommunityBuilder.deleteCommunity(community.getID());\n+            }\n+            if (adminGroup != null) {\n+                GroupBuilder.deleteGroup(adminGroup.getID());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void getGroupObjectCollectionTest() throws Exception {\n+        CommunityService communityService\n+                = ContentServiceFactory.getInstance().getCommunityService();\n+        CollectionService collectionService\n+                = ContentServiceFactory.getInstance().getCollectionService();\n+        Community community = null;\n+        Collection collection = null;\n+        Group adminGroup = null;\n+        Group worfklowGroup = null;\n+        Group submitterGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+            community = communityService.create(null, context);\n+            collection = collectionService.create(context, community);\n+            adminGroup = collectionService.createAdministrators(context, collection);\n+            worfklowGroup = collectionService.createWorkflowGroup(context, collection, 1);\n+            submitterGroup = collectionService.createSubmitters(context, collection);\n+            context.commit();\n+            adminGroup = context.reloadEntity(adminGroup);\n+\n+            String authToken = getAuthToken(admin.getEmail(), password);\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/object\")\n+            ).andExpect(status().isOk());\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + worfklowGroup.getID() + \"/object\")\n+            ).andExpect(status().isOk());\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + submitterGroup.getID() + \"/object\")\n+            ).andExpect(status().isOk());\n+        } finally {\n+            if (collection != null) {\n+                CollectionBuilder.deleteCollection(collection.getID());\n+            }\n+            if (community != null) {\n+                CommunityBuilder.deleteCommunity(community.getID());\n+            }\n+            if (adminGroup != null) {\n+                GroupBuilder.deleteGroup(adminGroup.getID());\n+            }\n+            if (worfklowGroup != null) {\n+                GroupBuilder.deleteGroup(worfklowGroup.getID());\n+            }\n+            if (submitterGroup != null) {\n+                GroupBuilder.deleteGroup(submitterGroup.getID());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void getGroupObjectNotFoundTest() throws Exception {\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+        Group adminGroup = null;\n+        try {\n+            context.turnOffAuthorisationSystem();\n+            adminGroup = groupService.create(context);\n+            context.commit();\n+            adminGroup = context.reloadEntity(adminGroup);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9b9c7adf3e1502d0092defd727fa86e031eadcd"}, "originalPosition": 428}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTU0NDAxOnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjozMzo0OVrOF_I86w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjozMzo0OVrOF_I86w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc1MTI3NQ==", "bodyText": "Same as above. should use GroupBuilder, missing a context.restoreAuthSystemState(); and same question about commit() and reloadEntity() as above.", "url": "https://github.com/DSpace/DSpace/pull/2723#discussion_r401751275", "createdAt": "2020-04-01T16:33:49Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "diffHunk": "@@ -1538,4 +1650,342 @@ public void removeMemberUnprocessableTest() throws Exception {\n             }\n         }\n     }\n+\n+    @Test\n+    public void deleteGroupTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        Group parentGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+\n+            parentGroup = groupService.create(context);\n+\n+            context.commit();\n+\n+            parentGroup = context.reloadEntity(parentGroup);\n+\n+            String authToken = getAuthToken(admin.getEmail(), password);\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+            getClient(authToken).perform(\n+                    delete(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isNoContent());\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isNotFound());\n+\n+        } finally {\n+            if (parentGroup != null) {\n+                GroupBuilder.deleteGroup(parentGroup.getID());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void deleteGroupUnauthorizedTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        Group parentGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+\n+            parentGroup = groupService.create(context);\n+\n+            context.commit();\n+\n+            parentGroup = context.reloadEntity(parentGroup);\n+\n+            String authToken = getAuthToken(admin.getEmail(), password);\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+            getClient().perform(\n+                    delete(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isUnauthorized());\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+        } finally {\n+            if (parentGroup != null) {\n+                GroupBuilder.deleteGroup(parentGroup.getID());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void deleteGroupUnprocessableTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson reviewer1 = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"reviewer1@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                .withName(\"Sub Community\")\n+                .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                .withName(\"Collection 1\")\n+                .withWorkflowGroup(1, admin, reviewer1)\n+                .build();\n+\n+        final Group workflowGroup = col1.getWorkflowStep1(context);\n+        context.commit();\n+        context.reloadEntity(workflowGroup);\n+\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + workflowGroup.getID())\n+        ).andExpect(status().isOk());\n+\n+        getClient(authToken).perform(\n+                delete(\"/api/eperson/groups/\" + workflowGroup.getID())\n+        ).andExpect(status().isUnprocessableEntity());\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + workflowGroup.getID())\n+        ).andExpect(status().isOk());\n+\n+    }\n+\n+    @Test\n+    public void deletePermanentGroupUnprocessableTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+        final Group group = groupService.findByName(context, Group.ANONYMOUS);\n+        context.restoreAuthSystemState();\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + group.getID())\n+        ).andExpect(status().isOk());\n+\n+        getClient(authToken).perform(\n+                delete(\"/api/eperson/groups/\" + group.getID())\n+        ).andExpect(status().isUnprocessableEntity());\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + group.getID())\n+        ).andExpect(status().isOk());\n+\n+    }\n+\n+    @Test\n+    public void deleteGroupForbiddenTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        Group parentGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+\n+            parentGroup = groupService.create(context);\n+\n+            context.commit();\n+\n+            parentGroup = context.reloadEntity(parentGroup);\n+\n+            String adminToken = getAuthToken(admin.getEmail(), password);\n+            String authToken = getAuthToken(eperson.getEmail(), password);\n+\n+            getClient(adminToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+            getClient(authToken).perform(\n+                    delete(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isForbidden());\n+\n+            getClient(adminToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+        } finally {\n+            if (parentGroup != null) {\n+                GroupBuilder.deleteGroup(parentGroup.getID());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void deleteGroupNotFoundTest() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        context.commit();\n+\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(authToken).perform(\n+                delete(\"/api/eperson/groups/\" + UUID.randomUUID())\n+        ).andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void getGroupObjectCommunityTest() throws Exception {\n+        CommunityService communityService\n+                = ContentServiceFactory.getInstance().getCommunityService();\n+        Community community = null;\n+        Group adminGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+            community = communityService.create(null, context);\n+            adminGroup = communityService.createAdministrators(context, community);\n+            context.commit();\n+            adminGroup = context.reloadEntity(adminGroup);\n+\n+            String authToken = getAuthToken(admin.getEmail(), password);\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/object\")\n+            ).andExpect(status().isOk());\n+        } finally {\n+            if (community != null) {\n+                CommunityBuilder.deleteCommunity(community.getID());\n+            }\n+            if (adminGroup != null) {\n+                GroupBuilder.deleteGroup(adminGroup.getID());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void getGroupObjectCollectionTest() throws Exception {\n+        CommunityService communityService\n+                = ContentServiceFactory.getInstance().getCommunityService();\n+        CollectionService collectionService\n+                = ContentServiceFactory.getInstance().getCollectionService();\n+        Community community = null;\n+        Collection collection = null;\n+        Group adminGroup = null;\n+        Group worfklowGroup = null;\n+        Group submitterGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+            community = communityService.create(null, context);\n+            collection = collectionService.create(context, community);\n+            adminGroup = collectionService.createAdministrators(context, collection);\n+            worfklowGroup = collectionService.createWorkflowGroup(context, collection, 1);\n+            submitterGroup = collectionService.createSubmitters(context, collection);\n+            context.commit();\n+            adminGroup = context.reloadEntity(adminGroup);\n+\n+            String authToken = getAuthToken(admin.getEmail(), password);\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/object\")\n+            ).andExpect(status().isOk());\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + worfklowGroup.getID() + \"/object\")\n+            ).andExpect(status().isOk());\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + submitterGroup.getID() + \"/object\")\n+            ).andExpect(status().isOk());\n+        } finally {\n+            if (collection != null) {\n+                CollectionBuilder.deleteCollection(collection.getID());\n+            }\n+            if (community != null) {\n+                CommunityBuilder.deleteCommunity(community.getID());\n+            }\n+            if (adminGroup != null) {\n+                GroupBuilder.deleteGroup(adminGroup.getID());\n+            }\n+            if (worfklowGroup != null) {\n+                GroupBuilder.deleteGroup(worfklowGroup.getID());\n+            }\n+            if (submitterGroup != null) {\n+                GroupBuilder.deleteGroup(submitterGroup.getID());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void getGroupObjectNotFoundTest() throws Exception {\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+        Group adminGroup = null;\n+        try {\n+            context.turnOffAuthorisationSystem();\n+            adminGroup = groupService.create(context);\n+            context.commit();\n+            adminGroup = context.reloadEntity(adminGroup);\n+\n+            String authToken = getAuthToken(admin.getEmail(), password);\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/object\")\n+            ).andExpect(status().isNotFound());\n+        } finally {\n+            if (adminGroup != null) {\n+                GroupBuilder.deleteGroup(adminGroup.getID());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void getGroupObjectUnauthorizedTest() throws Exception {\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+        Group adminGroup = null;\n+        try {\n+            context.turnOffAuthorisationSystem();\n+            adminGroup = groupService.create(context);\n+            context.commit();\n+            adminGroup = context.reloadEntity(adminGroup);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9b9c7adf3e1502d0092defd727fa86e031eadcd"}, "originalPosition": 449}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTU1MDIyOnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjozNToyNlrOF_JA5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjozNToyNlrOF_JA5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc1MjI5NQ==", "bodyText": "This test looks great. It's not hardcoding JSON & it's using the GroupBuilder to create a test Group.  The other tests above should use this same pattern to make them easier to read/review.\nHowever, the only thing missing here is a context.restoreAuthSystemState();", "url": "https://github.com/DSpace/DSpace/pull/2723#discussion_r401752295", "createdAt": "2020-04-01T16:35:26Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "diffHunk": "@@ -1538,4 +1650,342 @@ public void removeMemberUnprocessableTest() throws Exception {\n             }\n         }\n     }\n+\n+    @Test\n+    public void deleteGroupTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        Group parentGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+\n+            parentGroup = groupService.create(context);\n+\n+            context.commit();\n+\n+            parentGroup = context.reloadEntity(parentGroup);\n+\n+            String authToken = getAuthToken(admin.getEmail(), password);\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+            getClient(authToken).perform(\n+                    delete(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isNoContent());\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isNotFound());\n+\n+        } finally {\n+            if (parentGroup != null) {\n+                GroupBuilder.deleteGroup(parentGroup.getID());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void deleteGroupUnauthorizedTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        Group parentGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+\n+            parentGroup = groupService.create(context);\n+\n+            context.commit();\n+\n+            parentGroup = context.reloadEntity(parentGroup);\n+\n+            String authToken = getAuthToken(admin.getEmail(), password);\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+            getClient().perform(\n+                    delete(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isUnauthorized());\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+        } finally {\n+            if (parentGroup != null) {\n+                GroupBuilder.deleteGroup(parentGroup.getID());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void deleteGroupUnprocessableTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson reviewer1 = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"reviewer1@example.com\")\n+                .withPassword(password)\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                .withName(\"Sub Community\")\n+                .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                .withName(\"Collection 1\")\n+                .withWorkflowGroup(1, admin, reviewer1)\n+                .build();\n+\n+        final Group workflowGroup = col1.getWorkflowStep1(context);\n+        context.commit();\n+        context.reloadEntity(workflowGroup);\n+\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + workflowGroup.getID())\n+        ).andExpect(status().isOk());\n+\n+        getClient(authToken).perform(\n+                delete(\"/api/eperson/groups/\" + workflowGroup.getID())\n+        ).andExpect(status().isUnprocessableEntity());\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + workflowGroup.getID())\n+        ).andExpect(status().isOk());\n+\n+    }\n+\n+    @Test\n+    public void deletePermanentGroupUnprocessableTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+        final Group group = groupService.findByName(context, Group.ANONYMOUS);\n+        context.restoreAuthSystemState();\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + group.getID())\n+        ).andExpect(status().isOk());\n+\n+        getClient(authToken).perform(\n+                delete(\"/api/eperson/groups/\" + group.getID())\n+        ).andExpect(status().isUnprocessableEntity());\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + group.getID())\n+        ).andExpect(status().isOk());\n+\n+    }\n+\n+    @Test\n+    public void deleteGroupForbiddenTest() throws Exception {\n+\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+\n+        Group parentGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+\n+            parentGroup = groupService.create(context);\n+\n+            context.commit();\n+\n+            parentGroup = context.reloadEntity(parentGroup);\n+\n+            String adminToken = getAuthToken(admin.getEmail(), password);\n+            String authToken = getAuthToken(eperson.getEmail(), password);\n+\n+            getClient(adminToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+            getClient(authToken).perform(\n+                    delete(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isForbidden());\n+\n+            getClient(adminToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+        } finally {\n+            if (parentGroup != null) {\n+                GroupBuilder.deleteGroup(parentGroup.getID());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void deleteGroupNotFoundTest() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        context.commit();\n+\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(authToken).perform(\n+                delete(\"/api/eperson/groups/\" + UUID.randomUUID())\n+        ).andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void getGroupObjectCommunityTest() throws Exception {\n+        CommunityService communityService\n+                = ContentServiceFactory.getInstance().getCommunityService();\n+        Community community = null;\n+        Group adminGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+            community = communityService.create(null, context);\n+            adminGroup = communityService.createAdministrators(context, community);\n+            context.commit();\n+            adminGroup = context.reloadEntity(adminGroup);\n+\n+            String authToken = getAuthToken(admin.getEmail(), password);\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/object\")\n+            ).andExpect(status().isOk());\n+        } finally {\n+            if (community != null) {\n+                CommunityBuilder.deleteCommunity(community.getID());\n+            }\n+            if (adminGroup != null) {\n+                GroupBuilder.deleteGroup(adminGroup.getID());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void getGroupObjectCollectionTest() throws Exception {\n+        CommunityService communityService\n+                = ContentServiceFactory.getInstance().getCommunityService();\n+        CollectionService collectionService\n+                = ContentServiceFactory.getInstance().getCollectionService();\n+        Community community = null;\n+        Collection collection = null;\n+        Group adminGroup = null;\n+        Group worfklowGroup = null;\n+        Group submitterGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+            community = communityService.create(null, context);\n+            collection = collectionService.create(context, community);\n+            adminGroup = collectionService.createAdministrators(context, collection);\n+            worfklowGroup = collectionService.createWorkflowGroup(context, collection, 1);\n+            submitterGroup = collectionService.createSubmitters(context, collection);\n+            context.commit();\n+            adminGroup = context.reloadEntity(adminGroup);\n+\n+            String authToken = getAuthToken(admin.getEmail(), password);\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/object\")\n+            ).andExpect(status().isOk());\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + worfklowGroup.getID() + \"/object\")\n+            ).andExpect(status().isOk());\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + submitterGroup.getID() + \"/object\")\n+            ).andExpect(status().isOk());\n+        } finally {\n+            if (collection != null) {\n+                CollectionBuilder.deleteCollection(collection.getID());\n+            }\n+            if (community != null) {\n+                CommunityBuilder.deleteCommunity(community.getID());\n+            }\n+            if (adminGroup != null) {\n+                GroupBuilder.deleteGroup(adminGroup.getID());\n+            }\n+            if (worfklowGroup != null) {\n+                GroupBuilder.deleteGroup(worfklowGroup.getID());\n+            }\n+            if (submitterGroup != null) {\n+                GroupBuilder.deleteGroup(submitterGroup.getID());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void getGroupObjectNotFoundTest() throws Exception {\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+        Group adminGroup = null;\n+        try {\n+            context.turnOffAuthorisationSystem();\n+            adminGroup = groupService.create(context);\n+            context.commit();\n+            adminGroup = context.reloadEntity(adminGroup);\n+\n+            String authToken = getAuthToken(admin.getEmail(), password);\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/object\")\n+            ).andExpect(status().isNotFound());\n+        } finally {\n+            if (adminGroup != null) {\n+                GroupBuilder.deleteGroup(adminGroup.getID());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void getGroupObjectUnauthorizedTest() throws Exception {\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+        Group adminGroup = null;\n+        try {\n+            context.turnOffAuthorisationSystem();\n+            adminGroup = groupService.create(context);\n+            context.commit();\n+            adminGroup = context.reloadEntity(adminGroup);\n+\n+            getClient().perform(\n+                    get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/object\")\n+            ).andExpect(status().isUnauthorized());\n+        } finally {\n+            if (adminGroup != null) {\n+                GroupBuilder.deleteGroup(adminGroup.getID());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void patchNameTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        String testGroupName = \"Test group\";\n+        Group group = GroupBuilder.createGroup(context)\n+                .withName(testGroupName)\n+                .build();\n+\n+\n+        String newName = \"New test name\";\n+        List<Operation> ops = new ArrayList<Operation>();\n+        ReplaceOperation replaceOperation = new ReplaceOperation(\"/name\", newName);\n+        ops.add(replaceOperation);\n+        String patchBody = getPatchContent(ops);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9b9c7adf3e1502d0092defd727fa86e031eadcd"}, "originalPosition": 475}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzc3NTc3OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/GroupParentObjectLinkRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDozOTowNVrOGCVNQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDozOTowNVrOGCVNQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA5Nzc5NA==", "bodyText": "You shouldn't need to check these permissions manually in Java Code.  You can still use a @PreAuthorize annotation on this method by doing:\n@PreAuthorize(\"hasPermission(#groupId, 'GROUP', 'READ') or hasAuthority('ADMIN')\")\nIf you look at how hasPermission is defined for GROUP Read privileges, you'll see it's actually just returning true whenever you are a member of the group: https://github.com/DSpace/DSpace/blob/master/dspace-server-webapp/src/main/java/org/dspace/app/rest/security/GroupRestPermissionEvaluatorPlugin.java#L67-L69", "url": "https://github.com/DSpace/DSpace/pull/2723#discussion_r405097794", "createdAt": "2020-04-07T20:39:05Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/GroupParentObjectLinkRepository.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import javax.annotation.Nullable;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.dspace.app.rest.model.DSpaceObjectRest;\n+import org.dspace.app.rest.model.GroupRest;\n+import org.dspace.app.rest.projection.Projection;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.DSpaceObject;\n+import org.dspace.core.Constants;\n+import org.dspace.core.Context;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Link repository for the parent object of a group.\n+ */\n+@Component(GroupRest.CATEGORY + \".\" + GroupRest.NAME + \".\" + GroupRest.OBJECT)\n+public class GroupParentObjectLinkRepository extends AbstractDSpaceRestRepository\n+        implements LinkRestRepository {\n+\n+    @Autowired\n+    GroupService groupService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    /**\n+     * This returns the DSpace Object (Community, Collection) belonging to this Group.\n+     * This is only applicable for roles in that DSpace Object\n+     * e.g. the Community Administrator or Collection Submitter Group\n+     */\n+    public DSpaceObjectRest getParentObject(\n+            @Nullable HttpServletRequest request,\n+            UUID groupId,\n+            @Nullable Pageable optionalPageable,\n+            Projection projection\n+    ) {\n+        Context context = obtainContext();\n+        try {\n+            Group group = groupService.find(context, groupId);\n+            if (group == null) {\n+                throw new ResourceNotFoundException(\n+                        GroupRest.CATEGORY + \".\" + GroupRest.NAME\n+                                + \" with id: \" + groupId + \" not found\"\n+                );\n+            } else {\n+                DSpaceObject parent = groupService.getParentObject(context, group);\n+                if (parent != null) {\n+                    if (groupService.isMember(context, context.getCurrentUser(), group)\n+                            || authorizeService.authorizeActionBoolean(context, parent, Constants.ADMIN)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e62d912b11c33ce31fd30bb69493f63399871dfc"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzgxNTcxOnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDo0OTo0OVrOGCVlBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDo0OTo0OVrOGCVlBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEwMzg3OA==", "bodyText": "You don't need the context.turnOffAuthorisationSystem() and context.restoreAuthSystemState() lines here. You aren't creating test content, you are just searching for the ANONYMOUS group.", "url": "https://github.com/DSpace/DSpace/pull/2723#discussion_r405103878", "createdAt": "2020-04-07T20:49:49Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "diffHunk": "@@ -1538,4 +1637,337 @@ public void removeMemberUnprocessableTest() throws Exception {\n             }\n         }\n     }\n+\n+    @Test\n+    public void deleteGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        Group parentGroup = GroupBuilder.createGroup(context)\n+                .withName(\"test group\")\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isOk());\n+\n+        getClient(authToken).perform(\n+                delete(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isNoContent());\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void deleteGroupUnauthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        Group parentGroup = GroupBuilder.createGroup(context)\n+                .withName(\"test group\")\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isOk());\n+\n+        getClient().perform(\n+                delete(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isUnauthorized());\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isOk());\n+    }\n+\n+    @Test\n+    public void deleteGroupUnprocessableTest() throws Exception {\n+        Collection col1 = null;\n+        Community child1 = null;\n+        Group workflowGroup = null;\n+        try {\n+            context.turnOffAuthorisationSystem();\n+\n+            EPerson reviewer1 = EPersonBuilder.createEPerson(context)\n+                    .withEmail(\"reviewer1@example.com\")\n+                    .withPassword(password)\n+                    .build();\n+\n+            parentCommunity = CommunityBuilder.createCommunity(context)\n+                    .withName(\"Parent Community\")\n+                    .build();\n+            child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                    .withName(\"Sub Community\")\n+                    .build();\n+            col1 = CollectionBuilder.createCollection(context, child1)\n+                    .withName(\"Collection 1\")\n+                    .withWorkflowGroup(1, admin, reviewer1)\n+                    .build();\n+\n+            workflowGroup = col1.getWorkflowStep1(context);\n+            context.restoreAuthSystemState();\n+\n+            String authToken = getAuthToken(admin.getEmail(), password);\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + workflowGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+            getClient(authToken).perform(\n+                    delete(\"/api/eperson/groups/\" + workflowGroup.getID())\n+            ).andExpect(status().isUnprocessableEntity());\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + workflowGroup.getID())\n+            ).andExpect(status().isOk());\n+        } finally {\n+            if (col1 != null) {\n+                CollectionBuilder.deleteCollection(col1.getID());\n+            }\n+            if (child1 != null) {\n+                CommunityBuilder.deleteCommunity(child1.getID());\n+            }\n+            if (parentCommunity != null) {\n+                CommunityBuilder.deleteCommunity(parentCommunity.getID());\n+            }\n+            if (workflowGroup != null) {\n+                GroupBuilder.deleteGroup(workflowGroup.getID());\n+            }\n+        }\n+\n+    }\n+\n+    @Test\n+    public void deletePermanentGroupUnprocessableTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+        final Group group = groupService.findByName(context, Group.ANONYMOUS);\n+        context.restoreAuthSystemState();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e62d912b11c33ce31fd30bb69493f63399871dfc"}, "originalPosition": 249}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzgzMDg3OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDo1Mzo1OVrOGCVuPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDo1Mzo1OVrOGCVuPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEwNjIzOA==", "bodyText": "You've misunderstood how these *Builder classes work. Any content created using the Builder class will be automatically cleaned up when AbstractBuilder.cleanupObjects() is called here: https://github.com/DSpace/DSpace/blob/master/dspace-server-webapp/src/test/java/org/dspace/app/rest/test/AbstractIntegrationTestWithDatabase.java#L177\nThis means that you can remove this entire finally clause (and the try as well).  These various delete*() methods don't need to be called here...they will be called automatically during cleanup.", "url": "https://github.com/DSpace/DSpace/pull/2723#discussion_r405106238", "createdAt": "2020-04-07T20:53:59Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "diffHunk": "@@ -1538,4 +1637,337 @@ public void removeMemberUnprocessableTest() throws Exception {\n             }\n         }\n     }\n+\n+    @Test\n+    public void deleteGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        Group parentGroup = GroupBuilder.createGroup(context)\n+                .withName(\"test group\")\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isOk());\n+\n+        getClient(authToken).perform(\n+                delete(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isNoContent());\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void deleteGroupUnauthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        Group parentGroup = GroupBuilder.createGroup(context)\n+                .withName(\"test group\")\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isOk());\n+\n+        getClient().perform(\n+                delete(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isUnauthorized());\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isOk());\n+    }\n+\n+    @Test\n+    public void deleteGroupUnprocessableTest() throws Exception {\n+        Collection col1 = null;\n+        Community child1 = null;\n+        Group workflowGroup = null;\n+        try {\n+            context.turnOffAuthorisationSystem();\n+\n+            EPerson reviewer1 = EPersonBuilder.createEPerson(context)\n+                    .withEmail(\"reviewer1@example.com\")\n+                    .withPassword(password)\n+                    .build();\n+\n+            parentCommunity = CommunityBuilder.createCommunity(context)\n+                    .withName(\"Parent Community\")\n+                    .build();\n+            child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                    .withName(\"Sub Community\")\n+                    .build();\n+            col1 = CollectionBuilder.createCollection(context, child1)\n+                    .withName(\"Collection 1\")\n+                    .withWorkflowGroup(1, admin, reviewer1)\n+                    .build();\n+\n+            workflowGroup = col1.getWorkflowStep1(context);\n+            context.restoreAuthSystemState();\n+\n+            String authToken = getAuthToken(admin.getEmail(), password);\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + workflowGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+            getClient(authToken).perform(\n+                    delete(\"/api/eperson/groups/\" + workflowGroup.getID())\n+            ).andExpect(status().isUnprocessableEntity());\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + workflowGroup.getID())\n+            ).andExpect(status().isOk());\n+        } finally {\n+            if (col1 != null) {\n+                CollectionBuilder.deleteCollection(col1.getID());\n+            }\n+            if (child1 != null) {\n+                CommunityBuilder.deleteCommunity(child1.getID());\n+            }\n+            if (parentCommunity != null) {\n+                CommunityBuilder.deleteCommunity(parentCommunity.getID());\n+            }\n+            if (workflowGroup != null) {\n+                GroupBuilder.deleteGroup(workflowGroup.getID());\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e62d912b11c33ce31fd30bb69493f63399871dfc"}, "originalPosition": 240}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzgzMzg1OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDo1NDo0NVrOGCVwAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDo1NDo0NVrOGCVwAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEwNjY4OQ==", "bodyText": "Again, this finally and try can be completely removed. Cleanup happens automatically when using Builders.", "url": "https://github.com/DSpace/DSpace/pull/2723#discussion_r405106689", "createdAt": "2020-04-07T20:54:45Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "diffHunk": "@@ -1538,4 +1637,337 @@ public void removeMemberUnprocessableTest() throws Exception {\n             }\n         }\n     }\n+\n+    @Test\n+    public void deleteGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        Group parentGroup = GroupBuilder.createGroup(context)\n+                .withName(\"test group\")\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isOk());\n+\n+        getClient(authToken).perform(\n+                delete(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isNoContent());\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void deleteGroupUnauthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        Group parentGroup = GroupBuilder.createGroup(context)\n+                .withName(\"test group\")\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isOk());\n+\n+        getClient().perform(\n+                delete(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isUnauthorized());\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isOk());\n+    }\n+\n+    @Test\n+    public void deleteGroupUnprocessableTest() throws Exception {\n+        Collection col1 = null;\n+        Community child1 = null;\n+        Group workflowGroup = null;\n+        try {\n+            context.turnOffAuthorisationSystem();\n+\n+            EPerson reviewer1 = EPersonBuilder.createEPerson(context)\n+                    .withEmail(\"reviewer1@example.com\")\n+                    .withPassword(password)\n+                    .build();\n+\n+            parentCommunity = CommunityBuilder.createCommunity(context)\n+                    .withName(\"Parent Community\")\n+                    .build();\n+            child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                    .withName(\"Sub Community\")\n+                    .build();\n+            col1 = CollectionBuilder.createCollection(context, child1)\n+                    .withName(\"Collection 1\")\n+                    .withWorkflowGroup(1, admin, reviewer1)\n+                    .build();\n+\n+            workflowGroup = col1.getWorkflowStep1(context);\n+            context.restoreAuthSystemState();\n+\n+            String authToken = getAuthToken(admin.getEmail(), password);\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + workflowGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+            getClient(authToken).perform(\n+                    delete(\"/api/eperson/groups/\" + workflowGroup.getID())\n+            ).andExpect(status().isUnprocessableEntity());\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + workflowGroup.getID())\n+            ).andExpect(status().isOk());\n+        } finally {\n+            if (col1 != null) {\n+                CollectionBuilder.deleteCollection(col1.getID());\n+            }\n+            if (child1 != null) {\n+                CommunityBuilder.deleteCommunity(child1.getID());\n+            }\n+            if (parentCommunity != null) {\n+                CommunityBuilder.deleteCommunity(parentCommunity.getID());\n+            }\n+            if (workflowGroup != null) {\n+                GroupBuilder.deleteGroup(workflowGroup.getID());\n+            }\n+        }\n+\n+    }\n+\n+    @Test\n+    public void deletePermanentGroupUnprocessableTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+        final Group group = groupService.findByName(context, Group.ANONYMOUS);\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + group.getID())\n+        ).andExpect(status().isOk());\n+\n+        getClient(authToken).perform(\n+                delete(\"/api/eperson/groups/\" + group.getID())\n+        ).andExpect(status().isUnprocessableEntity());\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + group.getID())\n+        ).andExpect(status().isOk());\n+\n+    }\n+\n+    @Test\n+    public void deleteGroupForbiddenTest() throws Exception {\n+\n+        Group parentGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+\n+            parentGroup = GroupBuilder.createGroup(context)\n+                    .withName(\"test group\")\n+                    .build();\n+\n+            context.restoreAuthSystemState();\n+\n+            String adminToken = getAuthToken(admin.getEmail(), password);\n+            String authToken = getAuthToken(eperson.getEmail(), password);\n+\n+            getClient(adminToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+            getClient(authToken).perform(\n+                    delete(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isForbidden());\n+\n+            getClient(adminToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+        } finally {\n+            if (parentGroup != null) {\n+                GroupBuilder.deleteGroup(parentGroup.getID());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e62d912b11c33ce31fd30bb69493f63399871dfc"}, "originalPosition": 298}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzgzNDcxOnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDo1NTowMFrOGCVweQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDo1NTowMFrOGCVweQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEwNjgwOQ==", "bodyText": "Again, this finally and try can be completely removed. Cleanup happens automatically when using Builders.", "url": "https://github.com/DSpace/DSpace/pull/2723#discussion_r405106809", "createdAt": "2020-04-07T20:55:00Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "diffHunk": "@@ -1538,4 +1637,337 @@ public void removeMemberUnprocessableTest() throws Exception {\n             }\n         }\n     }\n+\n+    @Test\n+    public void deleteGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        Group parentGroup = GroupBuilder.createGroup(context)\n+                .withName(\"test group\")\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isOk());\n+\n+        getClient(authToken).perform(\n+                delete(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isNoContent());\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void deleteGroupUnauthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        Group parentGroup = GroupBuilder.createGroup(context)\n+                .withName(\"test group\")\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isOk());\n+\n+        getClient().perform(\n+                delete(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isUnauthorized());\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isOk());\n+    }\n+\n+    @Test\n+    public void deleteGroupUnprocessableTest() throws Exception {\n+        Collection col1 = null;\n+        Community child1 = null;\n+        Group workflowGroup = null;\n+        try {\n+            context.turnOffAuthorisationSystem();\n+\n+            EPerson reviewer1 = EPersonBuilder.createEPerson(context)\n+                    .withEmail(\"reviewer1@example.com\")\n+                    .withPassword(password)\n+                    .build();\n+\n+            parentCommunity = CommunityBuilder.createCommunity(context)\n+                    .withName(\"Parent Community\")\n+                    .build();\n+            child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                    .withName(\"Sub Community\")\n+                    .build();\n+            col1 = CollectionBuilder.createCollection(context, child1)\n+                    .withName(\"Collection 1\")\n+                    .withWorkflowGroup(1, admin, reviewer1)\n+                    .build();\n+\n+            workflowGroup = col1.getWorkflowStep1(context);\n+            context.restoreAuthSystemState();\n+\n+            String authToken = getAuthToken(admin.getEmail(), password);\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + workflowGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+            getClient(authToken).perform(\n+                    delete(\"/api/eperson/groups/\" + workflowGroup.getID())\n+            ).andExpect(status().isUnprocessableEntity());\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + workflowGroup.getID())\n+            ).andExpect(status().isOk());\n+        } finally {\n+            if (col1 != null) {\n+                CollectionBuilder.deleteCollection(col1.getID());\n+            }\n+            if (child1 != null) {\n+                CommunityBuilder.deleteCommunity(child1.getID());\n+            }\n+            if (parentCommunity != null) {\n+                CommunityBuilder.deleteCommunity(parentCommunity.getID());\n+            }\n+            if (workflowGroup != null) {\n+                GroupBuilder.deleteGroup(workflowGroup.getID());\n+            }\n+        }\n+\n+    }\n+\n+    @Test\n+    public void deletePermanentGroupUnprocessableTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+        final Group group = groupService.findByName(context, Group.ANONYMOUS);\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + group.getID())\n+        ).andExpect(status().isOk());\n+\n+        getClient(authToken).perform(\n+                delete(\"/api/eperson/groups/\" + group.getID())\n+        ).andExpect(status().isUnprocessableEntity());\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + group.getID())\n+        ).andExpect(status().isOk());\n+\n+    }\n+\n+    @Test\n+    public void deleteGroupForbiddenTest() throws Exception {\n+\n+        Group parentGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+\n+            parentGroup = GroupBuilder.createGroup(context)\n+                    .withName(\"test group\")\n+                    .build();\n+\n+            context.restoreAuthSystemState();\n+\n+            String adminToken = getAuthToken(admin.getEmail(), password);\n+            String authToken = getAuthToken(eperson.getEmail(), password);\n+\n+            getClient(adminToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+            getClient(authToken).perform(\n+                    delete(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isForbidden());\n+\n+            getClient(adminToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+        } finally {\n+            if (parentGroup != null) {\n+                GroupBuilder.deleteGroup(parentGroup.getID());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void deleteGroupNotFoundTest() throws Exception {\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(authToken).perform(\n+                delete(\"/api/eperson/groups/\" + UUID.randomUUID())\n+        ).andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void getGroupObjectCommunityTest() throws Exception {\n+        Community community = null;\n+        Group adminGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+            community =  CommunityBuilder.createCommunity(context)\n+                    .withName(\"Parent Community\")\n+                    .withAdminGroup(admin)\n+                    .build();\n+            adminGroup = community.getAdministrators();\n+            context.restoreAuthSystemState();\n+\n+            String authToken = getAuthToken(admin.getEmail(), password);\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/object\")\n+            ).andExpect(status().isOk());\n+        } finally {\n+            if (community != null) {\n+                CommunityBuilder.deleteCommunity(community.getID());\n+            }\n+            if (adminGroup != null) {\n+                GroupBuilder.deleteGroup(adminGroup.getID());\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e62d912b11c33ce31fd30bb69493f63399871dfc"}, "originalPosition": 337}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzgzNTM0OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDo1NToxMlrOGCVw5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDo1NToxMlrOGCVw5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEwNjkxOA==", "bodyText": "Again, this finally and try can be completely removed. Cleanup happens automatically when using Builders.", "url": "https://github.com/DSpace/DSpace/pull/2723#discussion_r405106918", "createdAt": "2020-04-07T20:55:12Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "diffHunk": "@@ -1538,4 +1637,337 @@ public void removeMemberUnprocessableTest() throws Exception {\n             }\n         }\n     }\n+\n+    @Test\n+    public void deleteGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        Group parentGroup = GroupBuilder.createGroup(context)\n+                .withName(\"test group\")\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isOk());\n+\n+        getClient(authToken).perform(\n+                delete(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isNoContent());\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void deleteGroupUnauthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        Group parentGroup = GroupBuilder.createGroup(context)\n+                .withName(\"test group\")\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isOk());\n+\n+        getClient().perform(\n+                delete(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isUnauthorized());\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isOk());\n+    }\n+\n+    @Test\n+    public void deleteGroupUnprocessableTest() throws Exception {\n+        Collection col1 = null;\n+        Community child1 = null;\n+        Group workflowGroup = null;\n+        try {\n+            context.turnOffAuthorisationSystem();\n+\n+            EPerson reviewer1 = EPersonBuilder.createEPerson(context)\n+                    .withEmail(\"reviewer1@example.com\")\n+                    .withPassword(password)\n+                    .build();\n+\n+            parentCommunity = CommunityBuilder.createCommunity(context)\n+                    .withName(\"Parent Community\")\n+                    .build();\n+            child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                    .withName(\"Sub Community\")\n+                    .build();\n+            col1 = CollectionBuilder.createCollection(context, child1)\n+                    .withName(\"Collection 1\")\n+                    .withWorkflowGroup(1, admin, reviewer1)\n+                    .build();\n+\n+            workflowGroup = col1.getWorkflowStep1(context);\n+            context.restoreAuthSystemState();\n+\n+            String authToken = getAuthToken(admin.getEmail(), password);\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + workflowGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+            getClient(authToken).perform(\n+                    delete(\"/api/eperson/groups/\" + workflowGroup.getID())\n+            ).andExpect(status().isUnprocessableEntity());\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + workflowGroup.getID())\n+            ).andExpect(status().isOk());\n+        } finally {\n+            if (col1 != null) {\n+                CollectionBuilder.deleteCollection(col1.getID());\n+            }\n+            if (child1 != null) {\n+                CommunityBuilder.deleteCommunity(child1.getID());\n+            }\n+            if (parentCommunity != null) {\n+                CommunityBuilder.deleteCommunity(parentCommunity.getID());\n+            }\n+            if (workflowGroup != null) {\n+                GroupBuilder.deleteGroup(workflowGroup.getID());\n+            }\n+        }\n+\n+    }\n+\n+    @Test\n+    public void deletePermanentGroupUnprocessableTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+        final Group group = groupService.findByName(context, Group.ANONYMOUS);\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + group.getID())\n+        ).andExpect(status().isOk());\n+\n+        getClient(authToken).perform(\n+                delete(\"/api/eperson/groups/\" + group.getID())\n+        ).andExpect(status().isUnprocessableEntity());\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + group.getID())\n+        ).andExpect(status().isOk());\n+\n+    }\n+\n+    @Test\n+    public void deleteGroupForbiddenTest() throws Exception {\n+\n+        Group parentGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+\n+            parentGroup = GroupBuilder.createGroup(context)\n+                    .withName(\"test group\")\n+                    .build();\n+\n+            context.restoreAuthSystemState();\n+\n+            String adminToken = getAuthToken(admin.getEmail(), password);\n+            String authToken = getAuthToken(eperson.getEmail(), password);\n+\n+            getClient(adminToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+            getClient(authToken).perform(\n+                    delete(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isForbidden());\n+\n+            getClient(adminToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+        } finally {\n+            if (parentGroup != null) {\n+                GroupBuilder.deleteGroup(parentGroup.getID());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void deleteGroupNotFoundTest() throws Exception {\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(authToken).perform(\n+                delete(\"/api/eperson/groups/\" + UUID.randomUUID())\n+        ).andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void getGroupObjectCommunityTest() throws Exception {\n+        Community community = null;\n+        Group adminGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+            community =  CommunityBuilder.createCommunity(context)\n+                    .withName(\"Parent Community\")\n+                    .withAdminGroup(admin)\n+                    .build();\n+            adminGroup = community.getAdministrators();\n+            context.restoreAuthSystemState();\n+\n+            String authToken = getAuthToken(admin.getEmail(), password);\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/object\")\n+            ).andExpect(status().isOk());\n+        } finally {\n+            if (community != null) {\n+                CommunityBuilder.deleteCommunity(community.getID());\n+            }\n+            if (adminGroup != null) {\n+                GroupBuilder.deleteGroup(adminGroup.getID());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void getGroupObjectCollectionTest() throws Exception {\n+        Community community = null;\n+        Collection collection = null;\n+        Group adminGroup = null;\n+        Group worfklowGroup = null;\n+        Group submitterGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+            community = CommunityBuilder.createCommunity(context)\n+                    .withName(\"Parent Community\")\n+                    .withAdminGroup(admin)\n+                    .build();\n+            collection = CollectionBuilder.createCollection(context, community)\n+                    .withName(\"Collection\")\n+                    .withAdminGroup(admin)\n+                    .withWorkflowGroup(1, admin)\n+                    .withSubmitterGroup(admin)\n+                    .build();\n+            adminGroup = collection.getAdministrators();\n+            worfklowGroup = collection.getWorkflowStep1(context);\n+            submitterGroup = collection.getSubmitters();\n+            context.restoreAuthSystemState();\n+\n+            String authToken = getAuthToken(admin.getEmail(), password);\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/object\")\n+            ).andExpect(status().isOk());\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + worfklowGroup.getID() + \"/object\")\n+            ).andExpect(status().isOk());\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + submitterGroup.getID() + \"/object\")\n+            ).andExpect(status().isOk());\n+        } finally {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e62d912b11c33ce31fd30bb69493f63399871dfc"}, "originalPosition": 375}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzgzNTczOnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDo1NToxOVrOGCVxJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDo1NToxOVrOGCVxJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEwNjk4MQ==", "bodyText": "Again, this finally and try can be completely removed. Cleanup happens automatically when using Builders.", "url": "https://github.com/DSpace/DSpace/pull/2723#discussion_r405106981", "createdAt": "2020-04-07T20:55:19Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "diffHunk": "@@ -1538,4 +1637,337 @@ public void removeMemberUnprocessableTest() throws Exception {\n             }\n         }\n     }\n+\n+    @Test\n+    public void deleteGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        Group parentGroup = GroupBuilder.createGroup(context)\n+                .withName(\"test group\")\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isOk());\n+\n+        getClient(authToken).perform(\n+                delete(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isNoContent());\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void deleteGroupUnauthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        Group parentGroup = GroupBuilder.createGroup(context)\n+                .withName(\"test group\")\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isOk());\n+\n+        getClient().perform(\n+                delete(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isUnauthorized());\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isOk());\n+    }\n+\n+    @Test\n+    public void deleteGroupUnprocessableTest() throws Exception {\n+        Collection col1 = null;\n+        Community child1 = null;\n+        Group workflowGroup = null;\n+        try {\n+            context.turnOffAuthorisationSystem();\n+\n+            EPerson reviewer1 = EPersonBuilder.createEPerson(context)\n+                    .withEmail(\"reviewer1@example.com\")\n+                    .withPassword(password)\n+                    .build();\n+\n+            parentCommunity = CommunityBuilder.createCommunity(context)\n+                    .withName(\"Parent Community\")\n+                    .build();\n+            child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                    .withName(\"Sub Community\")\n+                    .build();\n+            col1 = CollectionBuilder.createCollection(context, child1)\n+                    .withName(\"Collection 1\")\n+                    .withWorkflowGroup(1, admin, reviewer1)\n+                    .build();\n+\n+            workflowGroup = col1.getWorkflowStep1(context);\n+            context.restoreAuthSystemState();\n+\n+            String authToken = getAuthToken(admin.getEmail(), password);\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + workflowGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+            getClient(authToken).perform(\n+                    delete(\"/api/eperson/groups/\" + workflowGroup.getID())\n+            ).andExpect(status().isUnprocessableEntity());\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + workflowGroup.getID())\n+            ).andExpect(status().isOk());\n+        } finally {\n+            if (col1 != null) {\n+                CollectionBuilder.deleteCollection(col1.getID());\n+            }\n+            if (child1 != null) {\n+                CommunityBuilder.deleteCommunity(child1.getID());\n+            }\n+            if (parentCommunity != null) {\n+                CommunityBuilder.deleteCommunity(parentCommunity.getID());\n+            }\n+            if (workflowGroup != null) {\n+                GroupBuilder.deleteGroup(workflowGroup.getID());\n+            }\n+        }\n+\n+    }\n+\n+    @Test\n+    public void deletePermanentGroupUnprocessableTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+        final Group group = groupService.findByName(context, Group.ANONYMOUS);\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + group.getID())\n+        ).andExpect(status().isOk());\n+\n+        getClient(authToken).perform(\n+                delete(\"/api/eperson/groups/\" + group.getID())\n+        ).andExpect(status().isUnprocessableEntity());\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + group.getID())\n+        ).andExpect(status().isOk());\n+\n+    }\n+\n+    @Test\n+    public void deleteGroupForbiddenTest() throws Exception {\n+\n+        Group parentGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+\n+            parentGroup = GroupBuilder.createGroup(context)\n+                    .withName(\"test group\")\n+                    .build();\n+\n+            context.restoreAuthSystemState();\n+\n+            String adminToken = getAuthToken(admin.getEmail(), password);\n+            String authToken = getAuthToken(eperson.getEmail(), password);\n+\n+            getClient(adminToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+            getClient(authToken).perform(\n+                    delete(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isForbidden());\n+\n+            getClient(adminToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+        } finally {\n+            if (parentGroup != null) {\n+                GroupBuilder.deleteGroup(parentGroup.getID());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void deleteGroupNotFoundTest() throws Exception {\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(authToken).perform(\n+                delete(\"/api/eperson/groups/\" + UUID.randomUUID())\n+        ).andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void getGroupObjectCommunityTest() throws Exception {\n+        Community community = null;\n+        Group adminGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+            community =  CommunityBuilder.createCommunity(context)\n+                    .withName(\"Parent Community\")\n+                    .withAdminGroup(admin)\n+                    .build();\n+            adminGroup = community.getAdministrators();\n+            context.restoreAuthSystemState();\n+\n+            String authToken = getAuthToken(admin.getEmail(), password);\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/object\")\n+            ).andExpect(status().isOk());\n+        } finally {\n+            if (community != null) {\n+                CommunityBuilder.deleteCommunity(community.getID());\n+            }\n+            if (adminGroup != null) {\n+                GroupBuilder.deleteGroup(adminGroup.getID());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void getGroupObjectCollectionTest() throws Exception {\n+        Community community = null;\n+        Collection collection = null;\n+        Group adminGroup = null;\n+        Group worfklowGroup = null;\n+        Group submitterGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+            community = CommunityBuilder.createCommunity(context)\n+                    .withName(\"Parent Community\")\n+                    .withAdminGroup(admin)\n+                    .build();\n+            collection = CollectionBuilder.createCollection(context, community)\n+                    .withName(\"Collection\")\n+                    .withAdminGroup(admin)\n+                    .withWorkflowGroup(1, admin)\n+                    .withSubmitterGroup(admin)\n+                    .build();\n+            adminGroup = collection.getAdministrators();\n+            worfklowGroup = collection.getWorkflowStep1(context);\n+            submitterGroup = collection.getSubmitters();\n+            context.restoreAuthSystemState();\n+\n+            String authToken = getAuthToken(admin.getEmail(), password);\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/object\")\n+            ).andExpect(status().isOk());\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + worfklowGroup.getID() + \"/object\")\n+            ).andExpect(status().isOk());\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + submitterGroup.getID() + \"/object\")\n+            ).andExpect(status().isOk());\n+        } finally {\n+            if (collection != null) {\n+                CollectionBuilder.deleteCollection(collection.getID());\n+            }\n+            if (community != null) {\n+                CommunityBuilder.deleteCommunity(community.getID());\n+            }\n+            if (adminGroup != null) {\n+                GroupBuilder.deleteGroup(adminGroup.getID());\n+            }\n+            if (worfklowGroup != null) {\n+                GroupBuilder.deleteGroup(worfklowGroup.getID());\n+            }\n+            if (submitterGroup != null) {\n+                GroupBuilder.deleteGroup(submitterGroup.getID());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void getGroupObjectNotFoundTest() throws Exception {\n+        Group adminGroup = null;\n+        try {\n+            context.turnOffAuthorisationSystem();\n+            adminGroup = GroupBuilder.createGroup(context)\n+                    .withName(\"test group\")\n+                    .build();\n+            context.restoreAuthSystemState();\n+\n+            String authToken = getAuthToken(admin.getEmail(), password);\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/object\")\n+            ).andExpect(status().isNoContent());\n+        } finally {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e62d912b11c33ce31fd30bb69493f63399871dfc"}, "originalPosition": 408}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzgzNjYxOnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDo1NTozM1rOGCVxqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDo1NTozM1rOGCVxqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEwNzExNA==", "bodyText": "Again, this finally and try can be completely removed. Cleanup happens automatically when using Builders.", "url": "https://github.com/DSpace/DSpace/pull/2723#discussion_r405107114", "createdAt": "2020-04-07T20:55:33Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/GroupRestRepositoryIT.java", "diffHunk": "@@ -1538,4 +1637,337 @@ public void removeMemberUnprocessableTest() throws Exception {\n             }\n         }\n     }\n+\n+    @Test\n+    public void deleteGroupTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        Group parentGroup = GroupBuilder.createGroup(context)\n+                .withName(\"test group\")\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isOk());\n+\n+        getClient(authToken).perform(\n+                delete(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isNoContent());\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void deleteGroupUnauthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        Group parentGroup = GroupBuilder.createGroup(context)\n+                .withName(\"test group\")\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isOk());\n+\n+        getClient().perform(\n+                delete(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isUnauthorized());\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + parentGroup.getID())\n+        ).andExpect(status().isOk());\n+    }\n+\n+    @Test\n+    public void deleteGroupUnprocessableTest() throws Exception {\n+        Collection col1 = null;\n+        Community child1 = null;\n+        Group workflowGroup = null;\n+        try {\n+            context.turnOffAuthorisationSystem();\n+\n+            EPerson reviewer1 = EPersonBuilder.createEPerson(context)\n+                    .withEmail(\"reviewer1@example.com\")\n+                    .withPassword(password)\n+                    .build();\n+\n+            parentCommunity = CommunityBuilder.createCommunity(context)\n+                    .withName(\"Parent Community\")\n+                    .build();\n+            child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                    .withName(\"Sub Community\")\n+                    .build();\n+            col1 = CollectionBuilder.createCollection(context, child1)\n+                    .withName(\"Collection 1\")\n+                    .withWorkflowGroup(1, admin, reviewer1)\n+                    .build();\n+\n+            workflowGroup = col1.getWorkflowStep1(context);\n+            context.restoreAuthSystemState();\n+\n+            String authToken = getAuthToken(admin.getEmail(), password);\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + workflowGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+            getClient(authToken).perform(\n+                    delete(\"/api/eperson/groups/\" + workflowGroup.getID())\n+            ).andExpect(status().isUnprocessableEntity());\n+\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + workflowGroup.getID())\n+            ).andExpect(status().isOk());\n+        } finally {\n+            if (col1 != null) {\n+                CollectionBuilder.deleteCollection(col1.getID());\n+            }\n+            if (child1 != null) {\n+                CommunityBuilder.deleteCommunity(child1.getID());\n+            }\n+            if (parentCommunity != null) {\n+                CommunityBuilder.deleteCommunity(parentCommunity.getID());\n+            }\n+            if (workflowGroup != null) {\n+                GroupBuilder.deleteGroup(workflowGroup.getID());\n+            }\n+        }\n+\n+    }\n+\n+    @Test\n+    public void deletePermanentGroupUnprocessableTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        GroupService groupService = EPersonServiceFactory.getInstance().getGroupService();\n+        final Group group = groupService.findByName(context, Group.ANONYMOUS);\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + group.getID())\n+        ).andExpect(status().isOk());\n+\n+        getClient(authToken).perform(\n+                delete(\"/api/eperson/groups/\" + group.getID())\n+        ).andExpect(status().isUnprocessableEntity());\n+\n+        getClient(authToken).perform(\n+                get(\"/api/eperson/groups/\" + group.getID())\n+        ).andExpect(status().isOk());\n+\n+    }\n+\n+    @Test\n+    public void deleteGroupForbiddenTest() throws Exception {\n+\n+        Group parentGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+\n+            parentGroup = GroupBuilder.createGroup(context)\n+                    .withName(\"test group\")\n+                    .build();\n+\n+            context.restoreAuthSystemState();\n+\n+            String adminToken = getAuthToken(admin.getEmail(), password);\n+            String authToken = getAuthToken(eperson.getEmail(), password);\n+\n+            getClient(adminToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+            getClient(authToken).perform(\n+                    delete(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isForbidden());\n+\n+            getClient(adminToken).perform(\n+                    get(\"/api/eperson/groups/\" + parentGroup.getID())\n+            ).andExpect(status().isOk());\n+\n+        } finally {\n+            if (parentGroup != null) {\n+                GroupBuilder.deleteGroup(parentGroup.getID());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void deleteGroupNotFoundTest() throws Exception {\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(authToken).perform(\n+                delete(\"/api/eperson/groups/\" + UUID.randomUUID())\n+        ).andExpect(status().isNotFound());\n+    }\n+\n+    @Test\n+    public void getGroupObjectCommunityTest() throws Exception {\n+        Community community = null;\n+        Group adminGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+            community =  CommunityBuilder.createCommunity(context)\n+                    .withName(\"Parent Community\")\n+                    .withAdminGroup(admin)\n+                    .build();\n+            adminGroup = community.getAdministrators();\n+            context.restoreAuthSystemState();\n+\n+            String authToken = getAuthToken(admin.getEmail(), password);\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/object\")\n+            ).andExpect(status().isOk());\n+        } finally {\n+            if (community != null) {\n+                CommunityBuilder.deleteCommunity(community.getID());\n+            }\n+            if (adminGroup != null) {\n+                GroupBuilder.deleteGroup(adminGroup.getID());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void getGroupObjectCollectionTest() throws Exception {\n+        Community community = null;\n+        Collection collection = null;\n+        Group adminGroup = null;\n+        Group worfklowGroup = null;\n+        Group submitterGroup = null;\n+\n+        try {\n+            context.turnOffAuthorisationSystem();\n+            community = CommunityBuilder.createCommunity(context)\n+                    .withName(\"Parent Community\")\n+                    .withAdminGroup(admin)\n+                    .build();\n+            collection = CollectionBuilder.createCollection(context, community)\n+                    .withName(\"Collection\")\n+                    .withAdminGroup(admin)\n+                    .withWorkflowGroup(1, admin)\n+                    .withSubmitterGroup(admin)\n+                    .build();\n+            adminGroup = collection.getAdministrators();\n+            worfklowGroup = collection.getWorkflowStep1(context);\n+            submitterGroup = collection.getSubmitters();\n+            context.restoreAuthSystemState();\n+\n+            String authToken = getAuthToken(admin.getEmail(), password);\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/object\")\n+            ).andExpect(status().isOk());\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + worfklowGroup.getID() + \"/object\")\n+            ).andExpect(status().isOk());\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + submitterGroup.getID() + \"/object\")\n+            ).andExpect(status().isOk());\n+        } finally {\n+            if (collection != null) {\n+                CollectionBuilder.deleteCollection(collection.getID());\n+            }\n+            if (community != null) {\n+                CommunityBuilder.deleteCommunity(community.getID());\n+            }\n+            if (adminGroup != null) {\n+                GroupBuilder.deleteGroup(adminGroup.getID());\n+            }\n+            if (worfklowGroup != null) {\n+                GroupBuilder.deleteGroup(worfklowGroup.getID());\n+            }\n+            if (submitterGroup != null) {\n+                GroupBuilder.deleteGroup(submitterGroup.getID());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void getGroupObjectNotFoundTest() throws Exception {\n+        Group adminGroup = null;\n+        try {\n+            context.turnOffAuthorisationSystem();\n+            adminGroup = GroupBuilder.createGroup(context)\n+                    .withName(\"test group\")\n+                    .build();\n+            context.restoreAuthSystemState();\n+\n+            String authToken = getAuthToken(admin.getEmail(), password);\n+            getClient(authToken).perform(\n+                    get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/object\")\n+            ).andExpect(status().isNoContent());\n+        } finally {\n+            if (adminGroup != null) {\n+                GroupBuilder.deleteGroup(adminGroup.getID());\n+            }\n+        }\n+    }\n+\n+    @Test\n+    public void getGroupObjectUnauthorizedTest() throws Exception {\n+        Group adminGroup = null;\n+        Community community = null;\n+        try {\n+            context.turnOffAuthorisationSystem();\n+            community = CommunityBuilder.createCommunity(context)\n+                    .withName(\"Parent Community\")\n+                    .withAdminGroup(admin)\n+                    .build();\n+            adminGroup = community.getAdministrators();\n+            context.restoreAuthSystemState();\n+\n+            getClient().perform(\n+                    get(\"/api/eperson/groups/\" + adminGroup.getID() + \"/object\")\n+            ).andExpect(status().isUnauthorized());\n+        } finally {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e62d912b11c33ce31fd30bb69493f63399871dfc"}, "originalPosition": 431}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1472, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}