{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5NjI1OTI3", "number": 2691, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNToxNjoxNFrOEUGFfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTozNjozOVrOEUGhUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTA2Njg3OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/content/RelationshipMetadataValue.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNToxNjoxNFrOG6MR6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNToxODo0NlrOG-TI8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY3MTc4NQ==", "bodyText": "Please add JavaDocs to describe this method.  It looks like it's just extracting the RelationshipID corresponding to the current RelationshipMetadataValue?", "url": "https://github.com/DSpace/DSpace/pull/2691#discussion_r463671785", "createdAt": "2020-07-31T15:16:14Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/content/RelationshipMetadataValue.java", "diffHunk": "@@ -57,4 +59,8 @@ public boolean equals(Object obj) {\n         }\n         return super.equals(obj);\n     }\n+\n+    public int getRelationshipId() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95b5cabae25e75379c1a5090a3a4fdf0d427d0cf"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk3ODQ4Mg==", "bodyText": "The JavaDocs have been created", "url": "https://github.com/DSpace/DSpace/pull/2691#discussion_r467978482", "createdAt": "2020-08-10T15:18:46Z", "author": {"login": "benbosman"}, "path": "dspace-api/src/main/java/org/dspace/content/RelationshipMetadataValue.java", "diffHunk": "@@ -57,4 +59,8 @@ public boolean equals(Object obj) {\n         }\n         return super.equals(obj);\n     }\n+\n+    public int getRelationshipId() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY3MTc4NQ=="}, "originalCommit": {"oid": "95b5cabae25e75379c1a5090a3a4fdf0d427d0cf"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTA3MjMwOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/content/service/DSpaceObjectService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNToxNzo0MFrOG6MVQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNToxOToxN1rOG-TKUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY3MjY0MQ==", "bodyText": "Could you update the JavaDocs for all these modified methods to have a @return annotation now & describe what is returned?", "url": "https://github.com/DSpace/DSpace/pull/2691#discussion_r463672641", "createdAt": "2020-07-31T15:17:40Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/content/service/DSpaceObjectService.java", "diffHunk": "@@ -202,8 +202,8 @@\n      * @param values    the values to add.\n      * @throws SQLException if database error\n      */\n-    public void addMetadata(Context context, T dso, String schema, String element, String qualifier, String lang,\n-                            List<String> values) throws SQLException;\n+    public List<MetadataValue> addMetadata(Context context, T dso, String schema, String element, String qualifier,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95b5cabae25e75379c1a5090a3a4fdf0d427d0cf"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk3ODgzMg==", "bodyText": "The JavaDocs have been created", "url": "https://github.com/DSpace/DSpace/pull/2691#discussion_r467978832", "createdAt": "2020-08-10T15:19:17Z", "author": {"login": "benbosman"}, "path": "dspace-api/src/main/java/org/dspace/content/service/DSpaceObjectService.java", "diffHunk": "@@ -202,8 +202,8 @@\n      * @param values    the values to add.\n      * @throws SQLException if database error\n      */\n-    public void addMetadata(Context context, T dso, String schema, String element, String qualifier, String lang,\n-                            List<String> values) throws SQLException;\n+    public List<MetadataValue> addMetadata(Context context, T dso, String schema, String element, String qualifier,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY3MjY0MQ=="}, "originalCommit": {"oid": "95b5cabae25e75379c1a5090a3a4fdf0d427d0cf"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTA5ODc2OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/PatchMetadataIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNToyNTowOVrOG6MlmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNToxOToyNVrOG-TKpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY3NjgyNQ==", "bodyText": "This post needs to be updated to cleanup after itself.  Remember the (newer) best practices to use an andDo in a try/finally, similar to this test: https://github.com/DSpace/DSpace/blob/main/dspace-server-webapp/src/test/java/org/dspace/app/rest/RelationshipRestRepositoryIT.java#L278", "url": "https://github.com/DSpace/DSpace/pull/2691#discussion_r463676825", "createdAt": "2020-07-31T15:25:09Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/PatchMetadataIT.java", "diffHunk": "@@ -0,0 +1,803 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.junit.Assert.assertThat;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.patch;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.builder.ItemBuilder;\n+import org.dspace.app.rest.builder.WorkspaceItemBuilder;\n+import org.dspace.app.rest.matcher.MetadataMatcher;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.model.patch.AddOperation;\n+import org.dspace.app.rest.model.patch.MoveOperation;\n+import org.dspace.app.rest.model.patch.Operation;\n+import org.dspace.app.rest.model.patch.RemoveOperation;\n+import org.dspace.app.rest.model.patch.ReplaceOperation;\n+import org.dspace.app.rest.test.AbstractEntityIntegrationTest;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.MetadataValue;\n+import org.dspace.content.RelationshipType;\n+import org.dspace.content.WorkspaceItem;\n+import org.dspace.content.service.EntityTypeService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.content.service.RelationshipTypeService;\n+import org.dspace.content.service.WorkspaceItemService;\n+import org.hamcrest.Matchers;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+/**\n+ * Created by kristof on 20/02/2020\n+ */\n+public class PatchMetadataIT extends AbstractEntityIntegrationTest {\n+\n+    @Autowired\n+    private RelationshipTypeService relationshipTypeService;\n+\n+    @Autowired\n+    private EntityTypeService entityTypeService;\n+\n+    @Autowired\n+    private ItemService itemService;\n+\n+    @Autowired\n+    private WorkspaceItemService workspaceItemService;\n+\n+    private Collection collection;\n+    private WorkspaceItem publicationItem;\n+    private Item personItem1;\n+    private Item personItem2;\n+    private RelationshipType publicationPersonRelationshipType;\n+\n+    private List<String> authorsOriginalOrder;\n+\n+    private String addedAuthor;\n+    private String replacedAuthor;\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        context.turnOffAuthorisationSystem();\n+\n+        Community community = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent community\")\n+                .build();\n+        collection = CollectionBuilder.createCollection(context, community)\n+                .withName(\"Collection\")\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    /**\n+     * A method to create a workspace publication containing 5 authors: 3 regular authors and 2 related Person items.\n+     * The authors are added in a specific order:\n+     * - \"Whyte, William\": Regular author\n+     * - \"Dahlen, Sarah\": Related Person\n+     * - \"Peterson, Karrie\": Regular author\n+     * - \"Perotti, Enrico\": Regular author\n+     * - \"Linton, Oliver\": Related Person\n+     */\n+    private void initPersonPublicationWorkspace() throws Exception {\n+        // Setup the original order of authors\n+        authorsOriginalOrder = new ArrayList<>();\n+        authorsOriginalOrder.add(\"Whyte, William\");\n+        // Second one will be virtual metadata\n+        authorsOriginalOrder.add(\"Dahlen, Sarah\");\n+        authorsOriginalOrder.add(\"Peterson, Karrie\");\n+        authorsOriginalOrder.add(\"Perotti, Enrico\");\n+        // 5th one will be virtual metadata\n+        authorsOriginalOrder.add(\"Linton, Oliver\");\n+\n+        addedAuthor = \"Semple, Robert\";\n+        replacedAuthor = \"New Value\";\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        personItem1 = ItemBuilder.createItem(context, collection)\n+                .withTitle(\"Person 1\")\n+                .withPersonIdentifierFirstName(\"Sarah\")\n+                .withPersonIdentifierLastName(\"Dahlen\")\n+                .withRelationshipType(\"Person\")\n+                .build();\n+        personItem2 = ItemBuilder.createItem(context, collection)\n+                .withTitle(\"Person 2\")\n+                .withPersonIdentifierFirstName(\"Oliver\")\n+                .withPersonIdentifierLastName(\"Linton\")\n+                .withRelationshipType(\"Person\")\n+                .build();\n+        publicationItem = WorkspaceItemBuilder.createWorkspaceItem(context, collection)\n+                .withTitle(\"Publication 1\")\n+                .withRelationshipType(\"Publication\")\n+                .build();\n+        publicationPersonRelationshipType = relationshipTypeService.findbyTypesAndTypeName(context,\n+                entityTypeService.findByEntityType(context, \"Publication\"),\n+                entityTypeService.findByEntityType(context, \"Person\"),\n+                \"isAuthorOfPublication\",\n+                \"isPublicationOfAuthor\");\n+\n+        String adminToken = getAuthToken(admin.getEmail(), password);\n+\n+        // Make sure we grab the latest instance of the Item from the database before adding a regular author\n+        WorkspaceItem publication = workspaceItemService.find(context, publicationItem.getID());\n+        itemService.addMetadata(context, publication.getItem(),\n+                \"dc\", \"contributor\", \"author\", Item.ANY, authorsOriginalOrder.get(0));\n+        workspaceItemService.update(context, publication);\n+\n+        context.restoreAuthSystemState();\n+\n+        // Create a relationship between publication and person 1\n+        MvcResult mvcResult = getClient(adminToken).perform(post(\"/api/core/relationships\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95b5cabae25e75379c1a5090a3a4fdf0d427d0cf"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk3ODkxOA==", "bodyText": "The cleanup code has been included", "url": "https://github.com/DSpace/DSpace/pull/2691#discussion_r467978918", "createdAt": "2020-08-10T15:19:25Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/PatchMetadataIT.java", "diffHunk": "@@ -0,0 +1,803 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.junit.Assert.assertThat;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.patch;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.builder.ItemBuilder;\n+import org.dspace.app.rest.builder.WorkspaceItemBuilder;\n+import org.dspace.app.rest.matcher.MetadataMatcher;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.model.patch.AddOperation;\n+import org.dspace.app.rest.model.patch.MoveOperation;\n+import org.dspace.app.rest.model.patch.Operation;\n+import org.dspace.app.rest.model.patch.RemoveOperation;\n+import org.dspace.app.rest.model.patch.ReplaceOperation;\n+import org.dspace.app.rest.test.AbstractEntityIntegrationTest;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.MetadataValue;\n+import org.dspace.content.RelationshipType;\n+import org.dspace.content.WorkspaceItem;\n+import org.dspace.content.service.EntityTypeService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.content.service.RelationshipTypeService;\n+import org.dspace.content.service.WorkspaceItemService;\n+import org.hamcrest.Matchers;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+/**\n+ * Created by kristof on 20/02/2020\n+ */\n+public class PatchMetadataIT extends AbstractEntityIntegrationTest {\n+\n+    @Autowired\n+    private RelationshipTypeService relationshipTypeService;\n+\n+    @Autowired\n+    private EntityTypeService entityTypeService;\n+\n+    @Autowired\n+    private ItemService itemService;\n+\n+    @Autowired\n+    private WorkspaceItemService workspaceItemService;\n+\n+    private Collection collection;\n+    private WorkspaceItem publicationItem;\n+    private Item personItem1;\n+    private Item personItem2;\n+    private RelationshipType publicationPersonRelationshipType;\n+\n+    private List<String> authorsOriginalOrder;\n+\n+    private String addedAuthor;\n+    private String replacedAuthor;\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        context.turnOffAuthorisationSystem();\n+\n+        Community community = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent community\")\n+                .build();\n+        collection = CollectionBuilder.createCollection(context, community)\n+                .withName(\"Collection\")\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    /**\n+     * A method to create a workspace publication containing 5 authors: 3 regular authors and 2 related Person items.\n+     * The authors are added in a specific order:\n+     * - \"Whyte, William\": Regular author\n+     * - \"Dahlen, Sarah\": Related Person\n+     * - \"Peterson, Karrie\": Regular author\n+     * - \"Perotti, Enrico\": Regular author\n+     * - \"Linton, Oliver\": Related Person\n+     */\n+    private void initPersonPublicationWorkspace() throws Exception {\n+        // Setup the original order of authors\n+        authorsOriginalOrder = new ArrayList<>();\n+        authorsOriginalOrder.add(\"Whyte, William\");\n+        // Second one will be virtual metadata\n+        authorsOriginalOrder.add(\"Dahlen, Sarah\");\n+        authorsOriginalOrder.add(\"Peterson, Karrie\");\n+        authorsOriginalOrder.add(\"Perotti, Enrico\");\n+        // 5th one will be virtual metadata\n+        authorsOriginalOrder.add(\"Linton, Oliver\");\n+\n+        addedAuthor = \"Semple, Robert\";\n+        replacedAuthor = \"New Value\";\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        personItem1 = ItemBuilder.createItem(context, collection)\n+                .withTitle(\"Person 1\")\n+                .withPersonIdentifierFirstName(\"Sarah\")\n+                .withPersonIdentifierLastName(\"Dahlen\")\n+                .withRelationshipType(\"Person\")\n+                .build();\n+        personItem2 = ItemBuilder.createItem(context, collection)\n+                .withTitle(\"Person 2\")\n+                .withPersonIdentifierFirstName(\"Oliver\")\n+                .withPersonIdentifierLastName(\"Linton\")\n+                .withRelationshipType(\"Person\")\n+                .build();\n+        publicationItem = WorkspaceItemBuilder.createWorkspaceItem(context, collection)\n+                .withTitle(\"Publication 1\")\n+                .withRelationshipType(\"Publication\")\n+                .build();\n+        publicationPersonRelationshipType = relationshipTypeService.findbyTypesAndTypeName(context,\n+                entityTypeService.findByEntityType(context, \"Publication\"),\n+                entityTypeService.findByEntityType(context, \"Person\"),\n+                \"isAuthorOfPublication\",\n+                \"isPublicationOfAuthor\");\n+\n+        String adminToken = getAuthToken(admin.getEmail(), password);\n+\n+        // Make sure we grab the latest instance of the Item from the database before adding a regular author\n+        WorkspaceItem publication = workspaceItemService.find(context, publicationItem.getID());\n+        itemService.addMetadata(context, publication.getItem(),\n+                \"dc\", \"contributor\", \"author\", Item.ANY, authorsOriginalOrder.get(0));\n+        workspaceItemService.update(context, publication);\n+\n+        context.restoreAuthSystemState();\n+\n+        // Create a relationship between publication and person 1\n+        MvcResult mvcResult = getClient(adminToken).perform(post(\"/api/core/relationships\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY3NjgyNQ=="}, "originalCommit": {"oid": "95b5cabae25e75379c1a5090a3a4fdf0d427d0cf"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTEwMjcyOnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/PatchMetadataIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNToyNjoyMVrOG6MoDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNToxOTozM1rOG-TLBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY3NzQ1Mw==", "bodyText": "Again, this post needs to be updated to cleanup after itself.  In this scenario, since there are two posts here, you could have a try/finally around essentially most of this test method & do cleanup of both after the assertions below", "url": "https://github.com/DSpace/DSpace/pull/2691#discussion_r463677453", "createdAt": "2020-07-31T15:26:21Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/PatchMetadataIT.java", "diffHunk": "@@ -0,0 +1,803 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.junit.Assert.assertThat;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.patch;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.builder.ItemBuilder;\n+import org.dspace.app.rest.builder.WorkspaceItemBuilder;\n+import org.dspace.app.rest.matcher.MetadataMatcher;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.model.patch.AddOperation;\n+import org.dspace.app.rest.model.patch.MoveOperation;\n+import org.dspace.app.rest.model.patch.Operation;\n+import org.dspace.app.rest.model.patch.RemoveOperation;\n+import org.dspace.app.rest.model.patch.ReplaceOperation;\n+import org.dspace.app.rest.test.AbstractEntityIntegrationTest;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.MetadataValue;\n+import org.dspace.content.RelationshipType;\n+import org.dspace.content.WorkspaceItem;\n+import org.dspace.content.service.EntityTypeService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.content.service.RelationshipTypeService;\n+import org.dspace.content.service.WorkspaceItemService;\n+import org.hamcrest.Matchers;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+/**\n+ * Created by kristof on 20/02/2020\n+ */\n+public class PatchMetadataIT extends AbstractEntityIntegrationTest {\n+\n+    @Autowired\n+    private RelationshipTypeService relationshipTypeService;\n+\n+    @Autowired\n+    private EntityTypeService entityTypeService;\n+\n+    @Autowired\n+    private ItemService itemService;\n+\n+    @Autowired\n+    private WorkspaceItemService workspaceItemService;\n+\n+    private Collection collection;\n+    private WorkspaceItem publicationItem;\n+    private Item personItem1;\n+    private Item personItem2;\n+    private RelationshipType publicationPersonRelationshipType;\n+\n+    private List<String> authorsOriginalOrder;\n+\n+    private String addedAuthor;\n+    private String replacedAuthor;\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        context.turnOffAuthorisationSystem();\n+\n+        Community community = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent community\")\n+                .build();\n+        collection = CollectionBuilder.createCollection(context, community)\n+                .withName(\"Collection\")\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    /**\n+     * A method to create a workspace publication containing 5 authors: 3 regular authors and 2 related Person items.\n+     * The authors are added in a specific order:\n+     * - \"Whyte, William\": Regular author\n+     * - \"Dahlen, Sarah\": Related Person\n+     * - \"Peterson, Karrie\": Regular author\n+     * - \"Perotti, Enrico\": Regular author\n+     * - \"Linton, Oliver\": Related Person\n+     */\n+    private void initPersonPublicationWorkspace() throws Exception {\n+        // Setup the original order of authors\n+        authorsOriginalOrder = new ArrayList<>();\n+        authorsOriginalOrder.add(\"Whyte, William\");\n+        // Second one will be virtual metadata\n+        authorsOriginalOrder.add(\"Dahlen, Sarah\");\n+        authorsOriginalOrder.add(\"Peterson, Karrie\");\n+        authorsOriginalOrder.add(\"Perotti, Enrico\");\n+        // 5th one will be virtual metadata\n+        authorsOriginalOrder.add(\"Linton, Oliver\");\n+\n+        addedAuthor = \"Semple, Robert\";\n+        replacedAuthor = \"New Value\";\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        personItem1 = ItemBuilder.createItem(context, collection)\n+                .withTitle(\"Person 1\")\n+                .withPersonIdentifierFirstName(\"Sarah\")\n+                .withPersonIdentifierLastName(\"Dahlen\")\n+                .withRelationshipType(\"Person\")\n+                .build();\n+        personItem2 = ItemBuilder.createItem(context, collection)\n+                .withTitle(\"Person 2\")\n+                .withPersonIdentifierFirstName(\"Oliver\")\n+                .withPersonIdentifierLastName(\"Linton\")\n+                .withRelationshipType(\"Person\")\n+                .build();\n+        publicationItem = WorkspaceItemBuilder.createWorkspaceItem(context, collection)\n+                .withTitle(\"Publication 1\")\n+                .withRelationshipType(\"Publication\")\n+                .build();\n+        publicationPersonRelationshipType = relationshipTypeService.findbyTypesAndTypeName(context,\n+                entityTypeService.findByEntityType(context, \"Publication\"),\n+                entityTypeService.findByEntityType(context, \"Person\"),\n+                \"isAuthorOfPublication\",\n+                \"isPublicationOfAuthor\");\n+\n+        String adminToken = getAuthToken(admin.getEmail(), password);\n+\n+        // Make sure we grab the latest instance of the Item from the database before adding a regular author\n+        WorkspaceItem publication = workspaceItemService.find(context, publicationItem.getID());\n+        itemService.addMetadata(context, publication.getItem(),\n+                \"dc\", \"contributor\", \"author\", Item.ANY, authorsOriginalOrder.get(0));\n+        workspaceItemService.update(context, publication);\n+\n+        context.restoreAuthSystemState();\n+\n+        // Create a relationship between publication and person 1\n+        MvcResult mvcResult = getClient(adminToken).perform(post(\"/api/core/relationships\")\n+                .param(\"relationshipType\", publicationPersonRelationshipType.getID().toString())\n+                .contentType(MediaType.parseMediaType\n+                        (org.springframework.data.rest.webmvc.RestMediaTypes.TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/core/items/\" + publicationItem.getItem().getID() + \"\\n\" +\n+                                \"https://localhost:8080/server/api/core/items/\" + personItem1.getID()))\n+                .andExpect(status().isCreated())\n+                .andReturn();\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        // Add two more regular authors\n+        List<String> regularMetadata = new ArrayList<>();\n+        publication = workspaceItemService.find(context, publicationItem.getID());\n+        regularMetadata.add(authorsOriginalOrder.get(2));\n+        regularMetadata.add(authorsOriginalOrder.get(3));\n+        itemService.addMetadata(context, publication.getItem(),\n+                \"dc\", \"contributor\", \"author\", null, regularMetadata);\n+        workspaceItemService.update(context, publication);\n+\n+        context.restoreAuthSystemState();\n+\n+        // Create a relationship between publication and person 2\n+        mvcResult = getClient(adminToken).perform(post(\"/api/core/relationships\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95b5cabae25e75379c1a5090a3a4fdf0d427d0cf"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk3OTAxNQ==", "bodyText": "The cleanup code has been included", "url": "https://github.com/DSpace/DSpace/pull/2691#discussion_r467979015", "createdAt": "2020-08-10T15:19:33Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/PatchMetadataIT.java", "diffHunk": "@@ -0,0 +1,803 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.junit.Assert.assertThat;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.patch;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.builder.ItemBuilder;\n+import org.dspace.app.rest.builder.WorkspaceItemBuilder;\n+import org.dspace.app.rest.matcher.MetadataMatcher;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.model.patch.AddOperation;\n+import org.dspace.app.rest.model.patch.MoveOperation;\n+import org.dspace.app.rest.model.patch.Operation;\n+import org.dspace.app.rest.model.patch.RemoveOperation;\n+import org.dspace.app.rest.model.patch.ReplaceOperation;\n+import org.dspace.app.rest.test.AbstractEntityIntegrationTest;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.MetadataValue;\n+import org.dspace.content.RelationshipType;\n+import org.dspace.content.WorkspaceItem;\n+import org.dspace.content.service.EntityTypeService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.content.service.RelationshipTypeService;\n+import org.dspace.content.service.WorkspaceItemService;\n+import org.hamcrest.Matchers;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+/**\n+ * Created by kristof on 20/02/2020\n+ */\n+public class PatchMetadataIT extends AbstractEntityIntegrationTest {\n+\n+    @Autowired\n+    private RelationshipTypeService relationshipTypeService;\n+\n+    @Autowired\n+    private EntityTypeService entityTypeService;\n+\n+    @Autowired\n+    private ItemService itemService;\n+\n+    @Autowired\n+    private WorkspaceItemService workspaceItemService;\n+\n+    private Collection collection;\n+    private WorkspaceItem publicationItem;\n+    private Item personItem1;\n+    private Item personItem2;\n+    private RelationshipType publicationPersonRelationshipType;\n+\n+    private List<String> authorsOriginalOrder;\n+\n+    private String addedAuthor;\n+    private String replacedAuthor;\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        context.turnOffAuthorisationSystem();\n+\n+        Community community = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent community\")\n+                .build();\n+        collection = CollectionBuilder.createCollection(context, community)\n+                .withName(\"Collection\")\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    /**\n+     * A method to create a workspace publication containing 5 authors: 3 regular authors and 2 related Person items.\n+     * The authors are added in a specific order:\n+     * - \"Whyte, William\": Regular author\n+     * - \"Dahlen, Sarah\": Related Person\n+     * - \"Peterson, Karrie\": Regular author\n+     * - \"Perotti, Enrico\": Regular author\n+     * - \"Linton, Oliver\": Related Person\n+     */\n+    private void initPersonPublicationWorkspace() throws Exception {\n+        // Setup the original order of authors\n+        authorsOriginalOrder = new ArrayList<>();\n+        authorsOriginalOrder.add(\"Whyte, William\");\n+        // Second one will be virtual metadata\n+        authorsOriginalOrder.add(\"Dahlen, Sarah\");\n+        authorsOriginalOrder.add(\"Peterson, Karrie\");\n+        authorsOriginalOrder.add(\"Perotti, Enrico\");\n+        // 5th one will be virtual metadata\n+        authorsOriginalOrder.add(\"Linton, Oliver\");\n+\n+        addedAuthor = \"Semple, Robert\";\n+        replacedAuthor = \"New Value\";\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        personItem1 = ItemBuilder.createItem(context, collection)\n+                .withTitle(\"Person 1\")\n+                .withPersonIdentifierFirstName(\"Sarah\")\n+                .withPersonIdentifierLastName(\"Dahlen\")\n+                .withRelationshipType(\"Person\")\n+                .build();\n+        personItem2 = ItemBuilder.createItem(context, collection)\n+                .withTitle(\"Person 2\")\n+                .withPersonIdentifierFirstName(\"Oliver\")\n+                .withPersonIdentifierLastName(\"Linton\")\n+                .withRelationshipType(\"Person\")\n+                .build();\n+        publicationItem = WorkspaceItemBuilder.createWorkspaceItem(context, collection)\n+                .withTitle(\"Publication 1\")\n+                .withRelationshipType(\"Publication\")\n+                .build();\n+        publicationPersonRelationshipType = relationshipTypeService.findbyTypesAndTypeName(context,\n+                entityTypeService.findByEntityType(context, \"Publication\"),\n+                entityTypeService.findByEntityType(context, \"Person\"),\n+                \"isAuthorOfPublication\",\n+                \"isPublicationOfAuthor\");\n+\n+        String adminToken = getAuthToken(admin.getEmail(), password);\n+\n+        // Make sure we grab the latest instance of the Item from the database before adding a regular author\n+        WorkspaceItem publication = workspaceItemService.find(context, publicationItem.getID());\n+        itemService.addMetadata(context, publication.getItem(),\n+                \"dc\", \"contributor\", \"author\", Item.ANY, authorsOriginalOrder.get(0));\n+        workspaceItemService.update(context, publication);\n+\n+        context.restoreAuthSystemState();\n+\n+        // Create a relationship between publication and person 1\n+        MvcResult mvcResult = getClient(adminToken).perform(post(\"/api/core/relationships\")\n+                .param(\"relationshipType\", publicationPersonRelationshipType.getID().toString())\n+                .contentType(MediaType.parseMediaType\n+                        (org.springframework.data.rest.webmvc.RestMediaTypes.TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/core/items/\" + publicationItem.getItem().getID() + \"\\n\" +\n+                                \"https://localhost:8080/server/api/core/items/\" + personItem1.getID()))\n+                .andExpect(status().isCreated())\n+                .andReturn();\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        // Add two more regular authors\n+        List<String> regularMetadata = new ArrayList<>();\n+        publication = workspaceItemService.find(context, publicationItem.getID());\n+        regularMetadata.add(authorsOriginalOrder.get(2));\n+        regularMetadata.add(authorsOriginalOrder.get(3));\n+        itemService.addMetadata(context, publication.getItem(),\n+                \"dc\", \"contributor\", \"author\", null, regularMetadata);\n+        workspaceItemService.update(context, publication);\n+\n+        context.restoreAuthSystemState();\n+\n+        // Create a relationship between publication and person 2\n+        mvcResult = getClient(adminToken).perform(post(\"/api/core/relationships\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY3NzQ1Mw=="}, "originalCommit": {"oid": "95b5cabae25e75379c1a5090a3a4fdf0d427d0cf"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTEyMDc3OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/PatchMetadataIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTozMTo0OFrOG6MzXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNToyMDoxN1rOG-TNAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY4MDM1MQ==", "bodyText": "Just a note, this sort of assertion is easier to read/understand (and shorter) if you use assertEquals() instead of the longer assertThat(...., equalTo()).  It's not a required change, but I find it slightly easier to read.", "url": "https://github.com/DSpace/DSpace/pull/2691#discussion_r463680351", "createdAt": "2020-07-31T15:31:48Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/PatchMetadataIT.java", "diffHunk": "@@ -0,0 +1,803 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.junit.Assert.assertThat;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.patch;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.builder.ItemBuilder;\n+import org.dspace.app.rest.builder.WorkspaceItemBuilder;\n+import org.dspace.app.rest.matcher.MetadataMatcher;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.model.patch.AddOperation;\n+import org.dspace.app.rest.model.patch.MoveOperation;\n+import org.dspace.app.rest.model.patch.Operation;\n+import org.dspace.app.rest.model.patch.RemoveOperation;\n+import org.dspace.app.rest.model.patch.ReplaceOperation;\n+import org.dspace.app.rest.test.AbstractEntityIntegrationTest;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.MetadataValue;\n+import org.dspace.content.RelationshipType;\n+import org.dspace.content.WorkspaceItem;\n+import org.dspace.content.service.EntityTypeService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.content.service.RelationshipTypeService;\n+import org.dspace.content.service.WorkspaceItemService;\n+import org.hamcrest.Matchers;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+/**\n+ * Created by kristof on 20/02/2020\n+ */\n+public class PatchMetadataIT extends AbstractEntityIntegrationTest {\n+\n+    @Autowired\n+    private RelationshipTypeService relationshipTypeService;\n+\n+    @Autowired\n+    private EntityTypeService entityTypeService;\n+\n+    @Autowired\n+    private ItemService itemService;\n+\n+    @Autowired\n+    private WorkspaceItemService workspaceItemService;\n+\n+    private Collection collection;\n+    private WorkspaceItem publicationItem;\n+    private Item personItem1;\n+    private Item personItem2;\n+    private RelationshipType publicationPersonRelationshipType;\n+\n+    private List<String> authorsOriginalOrder;\n+\n+    private String addedAuthor;\n+    private String replacedAuthor;\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        context.turnOffAuthorisationSystem();\n+\n+        Community community = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent community\")\n+                .build();\n+        collection = CollectionBuilder.createCollection(context, community)\n+                .withName(\"Collection\")\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    /**\n+     * A method to create a workspace publication containing 5 authors: 3 regular authors and 2 related Person items.\n+     * The authors are added in a specific order:\n+     * - \"Whyte, William\": Regular author\n+     * - \"Dahlen, Sarah\": Related Person\n+     * - \"Peterson, Karrie\": Regular author\n+     * - \"Perotti, Enrico\": Regular author\n+     * - \"Linton, Oliver\": Related Person\n+     */\n+    private void initPersonPublicationWorkspace() throws Exception {\n+        // Setup the original order of authors\n+        authorsOriginalOrder = new ArrayList<>();\n+        authorsOriginalOrder.add(\"Whyte, William\");\n+        // Second one will be virtual metadata\n+        authorsOriginalOrder.add(\"Dahlen, Sarah\");\n+        authorsOriginalOrder.add(\"Peterson, Karrie\");\n+        authorsOriginalOrder.add(\"Perotti, Enrico\");\n+        // 5th one will be virtual metadata\n+        authorsOriginalOrder.add(\"Linton, Oliver\");\n+\n+        addedAuthor = \"Semple, Robert\";\n+        replacedAuthor = \"New Value\";\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        personItem1 = ItemBuilder.createItem(context, collection)\n+                .withTitle(\"Person 1\")\n+                .withPersonIdentifierFirstName(\"Sarah\")\n+                .withPersonIdentifierLastName(\"Dahlen\")\n+                .withRelationshipType(\"Person\")\n+                .build();\n+        personItem2 = ItemBuilder.createItem(context, collection)\n+                .withTitle(\"Person 2\")\n+                .withPersonIdentifierFirstName(\"Oliver\")\n+                .withPersonIdentifierLastName(\"Linton\")\n+                .withRelationshipType(\"Person\")\n+                .build();\n+        publicationItem = WorkspaceItemBuilder.createWorkspaceItem(context, collection)\n+                .withTitle(\"Publication 1\")\n+                .withRelationshipType(\"Publication\")\n+                .build();\n+        publicationPersonRelationshipType = relationshipTypeService.findbyTypesAndTypeName(context,\n+                entityTypeService.findByEntityType(context, \"Publication\"),\n+                entityTypeService.findByEntityType(context, \"Person\"),\n+                \"isAuthorOfPublication\",\n+                \"isPublicationOfAuthor\");\n+\n+        String adminToken = getAuthToken(admin.getEmail(), password);\n+\n+        // Make sure we grab the latest instance of the Item from the database before adding a regular author\n+        WorkspaceItem publication = workspaceItemService.find(context, publicationItem.getID());\n+        itemService.addMetadata(context, publication.getItem(),\n+                \"dc\", \"contributor\", \"author\", Item.ANY, authorsOriginalOrder.get(0));\n+        workspaceItemService.update(context, publication);\n+\n+        context.restoreAuthSystemState();\n+\n+        // Create a relationship between publication and person 1\n+        MvcResult mvcResult = getClient(adminToken).perform(post(\"/api/core/relationships\")\n+                .param(\"relationshipType\", publicationPersonRelationshipType.getID().toString())\n+                .contentType(MediaType.parseMediaType\n+                        (org.springframework.data.rest.webmvc.RestMediaTypes.TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/core/items/\" + publicationItem.getItem().getID() + \"\\n\" +\n+                                \"https://localhost:8080/server/api/core/items/\" + personItem1.getID()))\n+                .andExpect(status().isCreated())\n+                .andReturn();\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        // Add two more regular authors\n+        List<String> regularMetadata = new ArrayList<>();\n+        publication = workspaceItemService.find(context, publicationItem.getID());\n+        regularMetadata.add(authorsOriginalOrder.get(2));\n+        regularMetadata.add(authorsOriginalOrder.get(3));\n+        itemService.addMetadata(context, publication.getItem(),\n+                \"dc\", \"contributor\", \"author\", null, regularMetadata);\n+        workspaceItemService.update(context, publication);\n+\n+        context.restoreAuthSystemState();\n+\n+        // Create a relationship between publication and person 2\n+        mvcResult = getClient(adminToken).perform(post(\"/api/core/relationships\")\n+                .param(\"relationshipType\", publicationPersonRelationshipType.getID().toString())\n+                .contentType(MediaType.parseMediaType\n+                        (org.springframework.data.rest.webmvc.RestMediaTypes.TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/core/items/\" + publicationItem.getItem().getID() + \"\\n\" +\n+                                \"https://localhost:8080/server/api/core/items/\" + personItem2.getID()))\n+                .andExpect(status().isCreated())\n+                .andReturn();\n+\n+        publication = workspaceItemService.find(context, publicationItem.getID());\n+        List<MetadataValue> publicationAuthorList =\n+                itemService.getMetadata(publication.getItem(), \"dc\", \"contributor\", \"author\", Item.ANY);\n+        assertThat(publicationAuthorList.size(), equalTo(5));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95b5cabae25e75379c1a5090a3a4fdf0d427d0cf"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk3OTUyMA==", "bodyText": "The assertEquals is now used", "url": "https://github.com/DSpace/DSpace/pull/2691#discussion_r467979520", "createdAt": "2020-08-10T15:20:17Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/PatchMetadataIT.java", "diffHunk": "@@ -0,0 +1,803 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.junit.Assert.assertThat;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.patch;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.builder.ItemBuilder;\n+import org.dspace.app.rest.builder.WorkspaceItemBuilder;\n+import org.dspace.app.rest.matcher.MetadataMatcher;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.model.patch.AddOperation;\n+import org.dspace.app.rest.model.patch.MoveOperation;\n+import org.dspace.app.rest.model.patch.Operation;\n+import org.dspace.app.rest.model.patch.RemoveOperation;\n+import org.dspace.app.rest.model.patch.ReplaceOperation;\n+import org.dspace.app.rest.test.AbstractEntityIntegrationTest;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.MetadataValue;\n+import org.dspace.content.RelationshipType;\n+import org.dspace.content.WorkspaceItem;\n+import org.dspace.content.service.EntityTypeService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.content.service.RelationshipTypeService;\n+import org.dspace.content.service.WorkspaceItemService;\n+import org.hamcrest.Matchers;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+/**\n+ * Created by kristof on 20/02/2020\n+ */\n+public class PatchMetadataIT extends AbstractEntityIntegrationTest {\n+\n+    @Autowired\n+    private RelationshipTypeService relationshipTypeService;\n+\n+    @Autowired\n+    private EntityTypeService entityTypeService;\n+\n+    @Autowired\n+    private ItemService itemService;\n+\n+    @Autowired\n+    private WorkspaceItemService workspaceItemService;\n+\n+    private Collection collection;\n+    private WorkspaceItem publicationItem;\n+    private Item personItem1;\n+    private Item personItem2;\n+    private RelationshipType publicationPersonRelationshipType;\n+\n+    private List<String> authorsOriginalOrder;\n+\n+    private String addedAuthor;\n+    private String replacedAuthor;\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        context.turnOffAuthorisationSystem();\n+\n+        Community community = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent community\")\n+                .build();\n+        collection = CollectionBuilder.createCollection(context, community)\n+                .withName(\"Collection\")\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    /**\n+     * A method to create a workspace publication containing 5 authors: 3 regular authors and 2 related Person items.\n+     * The authors are added in a specific order:\n+     * - \"Whyte, William\": Regular author\n+     * - \"Dahlen, Sarah\": Related Person\n+     * - \"Peterson, Karrie\": Regular author\n+     * - \"Perotti, Enrico\": Regular author\n+     * - \"Linton, Oliver\": Related Person\n+     */\n+    private void initPersonPublicationWorkspace() throws Exception {\n+        // Setup the original order of authors\n+        authorsOriginalOrder = new ArrayList<>();\n+        authorsOriginalOrder.add(\"Whyte, William\");\n+        // Second one will be virtual metadata\n+        authorsOriginalOrder.add(\"Dahlen, Sarah\");\n+        authorsOriginalOrder.add(\"Peterson, Karrie\");\n+        authorsOriginalOrder.add(\"Perotti, Enrico\");\n+        // 5th one will be virtual metadata\n+        authorsOriginalOrder.add(\"Linton, Oliver\");\n+\n+        addedAuthor = \"Semple, Robert\";\n+        replacedAuthor = \"New Value\";\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        personItem1 = ItemBuilder.createItem(context, collection)\n+                .withTitle(\"Person 1\")\n+                .withPersonIdentifierFirstName(\"Sarah\")\n+                .withPersonIdentifierLastName(\"Dahlen\")\n+                .withRelationshipType(\"Person\")\n+                .build();\n+        personItem2 = ItemBuilder.createItem(context, collection)\n+                .withTitle(\"Person 2\")\n+                .withPersonIdentifierFirstName(\"Oliver\")\n+                .withPersonIdentifierLastName(\"Linton\")\n+                .withRelationshipType(\"Person\")\n+                .build();\n+        publicationItem = WorkspaceItemBuilder.createWorkspaceItem(context, collection)\n+                .withTitle(\"Publication 1\")\n+                .withRelationshipType(\"Publication\")\n+                .build();\n+        publicationPersonRelationshipType = relationshipTypeService.findbyTypesAndTypeName(context,\n+                entityTypeService.findByEntityType(context, \"Publication\"),\n+                entityTypeService.findByEntityType(context, \"Person\"),\n+                \"isAuthorOfPublication\",\n+                \"isPublicationOfAuthor\");\n+\n+        String adminToken = getAuthToken(admin.getEmail(), password);\n+\n+        // Make sure we grab the latest instance of the Item from the database before adding a regular author\n+        WorkspaceItem publication = workspaceItemService.find(context, publicationItem.getID());\n+        itemService.addMetadata(context, publication.getItem(),\n+                \"dc\", \"contributor\", \"author\", Item.ANY, authorsOriginalOrder.get(0));\n+        workspaceItemService.update(context, publication);\n+\n+        context.restoreAuthSystemState();\n+\n+        // Create a relationship between publication and person 1\n+        MvcResult mvcResult = getClient(adminToken).perform(post(\"/api/core/relationships\")\n+                .param(\"relationshipType\", publicationPersonRelationshipType.getID().toString())\n+                .contentType(MediaType.parseMediaType\n+                        (org.springframework.data.rest.webmvc.RestMediaTypes.TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/core/items/\" + publicationItem.getItem().getID() + \"\\n\" +\n+                                \"https://localhost:8080/server/api/core/items/\" + personItem1.getID()))\n+                .andExpect(status().isCreated())\n+                .andReturn();\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        // Add two more regular authors\n+        List<String> regularMetadata = new ArrayList<>();\n+        publication = workspaceItemService.find(context, publicationItem.getID());\n+        regularMetadata.add(authorsOriginalOrder.get(2));\n+        regularMetadata.add(authorsOriginalOrder.get(3));\n+        itemService.addMetadata(context, publication.getItem(),\n+                \"dc\", \"contributor\", \"author\", null, regularMetadata);\n+        workspaceItemService.update(context, publication);\n+\n+        context.restoreAuthSystemState();\n+\n+        // Create a relationship between publication and person 2\n+        mvcResult = getClient(adminToken).perform(post(\"/api/core/relationships\")\n+                .param(\"relationshipType\", publicationPersonRelationshipType.getID().toString())\n+                .contentType(MediaType.parseMediaType\n+                        (org.springframework.data.rest.webmvc.RestMediaTypes.TEXT_URI_LIST_VALUE))\n+                .content(\"https://localhost:8080/server/api/core/items/\" + publicationItem.getItem().getID() + \"\\n\" +\n+                                \"https://localhost:8080/server/api/core/items/\" + personItem2.getID()))\n+                .andExpect(status().isCreated())\n+                .andReturn();\n+\n+        publication = workspaceItemService.find(context, publicationItem.getID());\n+        List<MetadataValue> publicationAuthorList =\n+                itemService.getMetadata(publication.getItem(), \"dc\", \"contributor\", \"author\", Item.ANY);\n+        assertThat(publicationAuthorList.size(), equalTo(5));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY4MDM1MQ=="}, "originalCommit": {"oid": "95b5cabae25e75379c1a5090a3a4fdf0d427d0cf"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTEzODA5OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/PatchMetadataIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNTozNjozOVrOG6M-Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNToyMDo0MVrOG-TOHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY4MzExNQ==", "bodyText": "It looks (to me) like we are always testing with mixed content...some Entities, and some textual authors.  Could we add a few basic tests to verify this patching also works for only textual authors?", "url": "https://github.com/DSpace/DSpace/pull/2691#discussion_r463683115", "createdAt": "2020-07-31T15:36:39Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/PatchMetadataIT.java", "diffHunk": "@@ -0,0 +1,803 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.junit.Assert.assertThat;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.patch;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.builder.ItemBuilder;\n+import org.dspace.app.rest.builder.WorkspaceItemBuilder;\n+import org.dspace.app.rest.matcher.MetadataMatcher;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.model.patch.AddOperation;\n+import org.dspace.app.rest.model.patch.MoveOperation;\n+import org.dspace.app.rest.model.patch.Operation;\n+import org.dspace.app.rest.model.patch.RemoveOperation;\n+import org.dspace.app.rest.model.patch.ReplaceOperation;\n+import org.dspace.app.rest.test.AbstractEntityIntegrationTest;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.MetadataValue;\n+import org.dspace.content.RelationshipType;\n+import org.dspace.content.WorkspaceItem;\n+import org.dspace.content.service.EntityTypeService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.content.service.RelationshipTypeService;\n+import org.dspace.content.service.WorkspaceItemService;\n+import org.hamcrest.Matchers;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+/**\n+ * Created by kristof on 20/02/2020\n+ */\n+public class PatchMetadataIT extends AbstractEntityIntegrationTest {\n+\n+    @Autowired\n+    private RelationshipTypeService relationshipTypeService;\n+\n+    @Autowired\n+    private EntityTypeService entityTypeService;\n+\n+    @Autowired\n+    private ItemService itemService;\n+\n+    @Autowired\n+    private WorkspaceItemService workspaceItemService;\n+\n+    private Collection collection;\n+    private WorkspaceItem publicationItem;\n+    private Item personItem1;\n+    private Item personItem2;\n+    private RelationshipType publicationPersonRelationshipType;\n+\n+    private List<String> authorsOriginalOrder;\n+\n+    private String addedAuthor;\n+    private String replacedAuthor;\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        context.turnOffAuthorisationSystem();\n+\n+        Community community = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent community\")\n+                .build();\n+        collection = CollectionBuilder.createCollection(context, community)\n+                .withName(\"Collection\")\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    /**\n+     * A method to create a workspace publication containing 5 authors: 3 regular authors and 2 related Person items.\n+     * The authors are added in a specific order:\n+     * - \"Whyte, William\": Regular author\n+     * - \"Dahlen, Sarah\": Related Person\n+     * - \"Peterson, Karrie\": Regular author\n+     * - \"Perotti, Enrico\": Regular author\n+     * - \"Linton, Oliver\": Related Person", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95b5cabae25e75379c1a5090a3a4fdf0d427d0cf"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzk3OTgwNA==", "bodyText": "Another set of test for only textual authors has been included", "url": "https://github.com/DSpace/DSpace/pull/2691#discussion_r467979804", "createdAt": "2020-08-10T15:20:41Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/PatchMetadataIT.java", "diffHunk": "@@ -0,0 +1,803 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.junit.Assert.assertThat;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.patch;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.builder.ItemBuilder;\n+import org.dspace.app.rest.builder.WorkspaceItemBuilder;\n+import org.dspace.app.rest.matcher.MetadataMatcher;\n+import org.dspace.app.rest.model.MetadataValueRest;\n+import org.dspace.app.rest.model.patch.AddOperation;\n+import org.dspace.app.rest.model.patch.MoveOperation;\n+import org.dspace.app.rest.model.patch.Operation;\n+import org.dspace.app.rest.model.patch.RemoveOperation;\n+import org.dspace.app.rest.model.patch.ReplaceOperation;\n+import org.dspace.app.rest.test.AbstractEntityIntegrationTest;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.MetadataValue;\n+import org.dspace.content.RelationshipType;\n+import org.dspace.content.WorkspaceItem;\n+import org.dspace.content.service.EntityTypeService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.content.service.RelationshipTypeService;\n+import org.dspace.content.service.WorkspaceItemService;\n+import org.hamcrest.Matchers;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+/**\n+ * Created by kristof on 20/02/2020\n+ */\n+public class PatchMetadataIT extends AbstractEntityIntegrationTest {\n+\n+    @Autowired\n+    private RelationshipTypeService relationshipTypeService;\n+\n+    @Autowired\n+    private EntityTypeService entityTypeService;\n+\n+    @Autowired\n+    private ItemService itemService;\n+\n+    @Autowired\n+    private WorkspaceItemService workspaceItemService;\n+\n+    private Collection collection;\n+    private WorkspaceItem publicationItem;\n+    private Item personItem1;\n+    private Item personItem2;\n+    private RelationshipType publicationPersonRelationshipType;\n+\n+    private List<String> authorsOriginalOrder;\n+\n+    private String addedAuthor;\n+    private String replacedAuthor;\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        context.turnOffAuthorisationSystem();\n+\n+        Community community = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent community\")\n+                .build();\n+        collection = CollectionBuilder.createCollection(context, community)\n+                .withName(\"Collection\")\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    /**\n+     * A method to create a workspace publication containing 5 authors: 3 regular authors and 2 related Person items.\n+     * The authors are added in a specific order:\n+     * - \"Whyte, William\": Regular author\n+     * - \"Dahlen, Sarah\": Related Person\n+     * - \"Peterson, Karrie\": Regular author\n+     * - \"Perotti, Enrico\": Regular author\n+     * - \"Linton, Oliver\": Related Person", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY4MzExNQ=="}, "originalCommit": {"oid": "95b5cabae25e75379c1a5090a3a4fdf0d427d0cf"}, "originalPosition": 104}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1676, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}