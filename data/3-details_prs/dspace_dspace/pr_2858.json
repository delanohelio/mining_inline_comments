{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5NTUxNDgx", "number": 2858, "title": "DS-4061 expose sitemaps and schedule automatic updates", "bodyText": "References\n\nFixes #2802.\nLink to (original) JIRA ticket.  Also fixes DS-1901\nThe REST contract was considered not relevant\n\nDescription\nThis will return the contents of a given sitemap, typically as HTML or XML. Sample URLs\n\n/server/sitemaps/sitemap_index.html contains a list of links to other maps (links to Server) with content type HTML\n/server/sitemaps/sitemap0.html contains a list of links to items (links to Angular) with content type HTML\n/server/sitemaps/sitemap_index.xml contains an XML with links to other maps (links to Server) with content type XML\n/server/sitemaps/sitemap0.xml contains an XML with links to items (links to Angular) with content type XML\n\nInstructions for Reviewers\nMake sure that the config of the server and Angular are correct\nMake sure that after deploying this PR, you use dspace/bin/dspace generate-sitemaps to create the sitemaps with the correct URLs\nOpen /server/sitemaps/sitemap_index.html or /server/sitemaps/sitemap_index.xml and you can follow links\nAs discussed, this PR also contains a configurable solution to automatically rebuild sitemaps without a cron job. This can be found at https://github.com/DSpace/DSpace/pull/2858/files#diff-540baf79d64235945c1d30aff36ee09eR15\nChecklist\nThis checklist provides a reminder of what we are going to look for when reviewing your PR. You need not complete this checklist prior to creating your PR (draft PRs are always welcome). If you are unsure about an item in the checklist, don't hesitate to ask. We're here to help!\n\n My PR is small in size (e.g. less than 1,000 lines of code, not including comments & integration tests). Exceptions may be made if previously agreed upon.\n My PR passes Checkstyle validation based on the Code Style Guide.\n My PR includes Javadoc for all new (or modified) public methods and classes. It also includes Javadoc for large or complex private methods.\n My PR passes all tests and includes new/updated Unit or Integration Tests based on the Code Testing Guide.\n If my PR includes new, third-party dependencies (in any pom.xml), I've made sure their licenses align with the DSpace BSD License based on the Licensing of Contributions documentation.\n If my PR modifies the REST API, I've linked to the REST Contract page (or open PR) related to this change.", "createdAt": "2020-07-15T15:18:05Z", "url": "https://github.com/DSpace/DSpace/pull/2858", "merged": true, "mergeCommit": {"oid": "344ec6e0e05ab968edb0293a50cac895a4ab5cb5"}, "closed": true, "closedAt": "2020-08-26T15:16:50Z", "author": {"login": "benbosman"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcy5eOhAH2gAyNDQ5NTUxNDgxOjU2YmUxYmJlNzQ1ZGQwYTYyMDJlMzFlMjcxNzNmOWUxMTEwY2M0NmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCrfZrAH2gAyNDQ5NTUxNDgxOjRkM2ZkODc3MjI1ZTlmYzZjZWRkM2Y4ODZiZGU0YjlkMDY3YzhkMDc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "56be1bbe745dd0a6202e31e27173f9e1110cc46e", "author": {"user": {"login": "MarieVerdonck", "name": "Marie Verdonck"}}, "url": "https://github.com/DSpace/DSpace/commit/56be1bbe745dd0a6202e31e27173f9e1110cc46e", "committedDate": "2020-07-08T12:19:54Z", "message": "71734: Sitemap REST controller"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "894738a6826a93719b419741a810eb819fdf7e6f", "author": {"user": {"login": "MarieVerdonck", "name": "Marie Verdonck"}}, "url": "https://github.com/DSpace/DSpace/commit/894738a6826a93719b419741a810eb819fdf7e6f", "committedDate": "2020-07-08T13:44:58Z", "message": "71736: Changes to sitemap contents"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0480b6521948b952cf2d85bcc3a901fd5a5bda82", "author": {"user": {"login": "MarieVerdonck", "name": "Marie Verdonck"}}, "url": "https://github.com/DSpace/DSpace/commit/0480b6521948b952cf2d85bcc3a901fd5a5bda82", "committedDate": "2020-07-08T17:10:39Z", "message": "71737: Sitemap REST IT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0a7104e9f5747cf235d254b6a0efec3b13e38b1", "author": {"user": {"login": "MarieVerdonck", "name": "Marie Verdonck"}}, "url": "https://github.com/DSpace/DSpace/commit/d0a7104e9f5747cf235d254b6a0efec3b13e38b1", "committedDate": "2020-07-09T08:52:05Z", "message": "71738: Automatic cron job for sitemaps"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c911a0f79a61cfed9624c983e849b69ccfbc86fa", "author": {"user": {"login": "MarieVerdonck", "name": "Marie Verdonck"}}, "url": "https://github.com/DSpace/DSpace/commit/c911a0f79a61cfed9624c983e849b69ccfbc86fa", "committedDate": "2020-07-15T11:27:55Z", "message": "71859: Endpoint path sitemaps changed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d64d39f5369c2ffb4bebc84521351a040f2ab0ec", "author": {"user": {"login": "MarieVerdonck", "name": "Marie Verdonck"}}, "url": "https://github.com/DSpace/DSpace/commit/d64d39f5369c2ffb4bebc84521351a040f2ab0ec", "committedDate": "2020-07-15T13:53:21Z", "message": "Merge branch 'dspace-origin-master' into w2p-71734_sitemaps\n\n# Conflicts:\n#\tdspace-server-webapp/src/test/java/org/dspace/app/rest/RootRestResourceControllerIT.java\n#\tdspace-server-webapp/src/test/java/org/dspace/app/rest/ShibbolethRestControllerIT.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNTg5MDI0", "url": "https://github.com/DSpace/DSpace/pull/2858#pullrequestreview-452589024", "createdAt": "2020-07-21T15:42:15Z", "commit": {"oid": "d64d39f5369c2ffb4bebc84521351a040f2ab0ec"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNTo0MjoxNVrOG0-KqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxOTo1NDowMFrOG1HdRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE5NzY3Mw==", "bodyText": "Because this endpoint is hardcoded in two places (here and in the Controller), I'd prefer that we move this to a configuration key in dspace.cfg.  You could call it sitemap.path = sitemaps   (As that would be similar to oai.path in oai.cfg and sword-server.path in sword-server.cfg), and place it next to the existing sitemap.dir setting in dspace.cfg", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r458197673", "createdAt": "2020-07-21T15:42:15Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/app/sitemap/GenerateSitemaps.java", "diffHunk": "@@ -61,6 +61,8 @@\n     private static final ConfigurationService configurationService =\n         DSpaceServicesFactory.getInstance().getConfigurationService();\n \n+    public static final String SITEMAPS_ENDPOINT = \"/sitemaps\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d64d39f5369c2ffb4bebc84521351a040f2ab0ec"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwMDAyNQ==", "bodyText": "I'm a little torn on these changes.  The Handles should still work here (as we still support Handles)...but a redirection is needed to the /communities path, /collections path, etc.  Is there a specific reason you chose to remove the Handles from the sitemap?", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r458200025", "createdAt": "2020-07-21T15:45:28Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/app/sitemap/GenerateSitemaps.java", "diffHunk": "@@ -168,21 +176,19 @@ public static void generateSitemaps(boolean makeHTMLMap,\n         AbstractGenerator sitemapsOrg = null;\n \n         if (makeHTMLMap) {\n-            html = new HTMLSitemapGenerator(outputDir, htmlMapStem + \"?map=\",\n-                                            null);\n+            html = new HTMLSitemapGenerator(outputDir, sitemapStem, \".html\");\n         }\n \n         if (makeSitemapOrg) {\n-            sitemapsOrg = new SitemapsOrgGenerator(outputDir, sitemapStem\n-                + \"?map=\", null);\n+            sitemapsOrg = new SitemapsOrgGenerator(outputDir, sitemapStem, \".xml\");\n         }\n \n         Context c = new Context(Context.Mode.READ_ONLY);\n \n         List<Community> comms = communityService.findAll(c);\n \n         for (Community comm : comms) {\n-            String url = handleURLStem + comm.getHandle();\n+            String url = uiURLStem + \"/communities/\" + comm.getID();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d64d39f5369c2ffb4bebc84521351a040f2ab0ec"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwMjg1MA==", "bodyText": "If we move this path to configuration, you should replace this line with:\n@RequestMapping(\"/${sitemap.path:sitemaps}\")\nThat says to use the value of \"sitemap.path\" from configuration, but if it's not found, default to \"sitemaps\".", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r458202850", "createdAt": "2020-07-21T15:49:21Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/SitemapRestController.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.sql.SQLException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.catalina.connector.ClientAbortException;\n+import org.apache.logging.log4j.Logger;\n+import org.dspace.app.rest.utils.ContextUtil;\n+import org.dspace.app.rest.utils.MultipartFileSender;\n+import org.dspace.core.Context;\n+import org.dspace.services.ConfigurationService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+\n+/**\n+ * This is a specialized controller to provide access to the sitemap files, generated by\n+ * {@link org.dspace.app.sitemap.GenerateSitemaps}\n+ *\n+ * The mapping for requested endpoint try to resolve a valid sitemap file name, for example\n+ * <pre>\n+ * {@code\n+ * https://<dspace.server.url>/sitemaps/26453b4d-e513-44e8-8d5b-395f62972eff/sitemap0.html\n+ * }\n+ * </pre>\n+ *\n+ * @author Maria Verdonck (Atmire) on 08/07/2020\n+ */\n+@Controller\n+@RequestMapping(\"/sitemaps\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d64d39f5369c2ffb4bebc84521351a040f2ab0ec"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwNzQxMw==", "bodyText": "This seems a tad odd to me.  But, it sounds like you hit a scenario where it is needed.  So, I'm OK. with it.  But, I'd recommend a minor improvement.  First, please make sure the context is valid before completing it. If it's not valid, the DB doesn't even have an open connection.  So, please use:\nif (context.isValid()) { \n    context.complete();\n}", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r458207413", "createdAt": "2020-07-21T15:55:39Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/SitemapRestController.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.sql.SQLException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.catalina.connector.ClientAbortException;\n+import org.apache.logging.log4j.Logger;\n+import org.dspace.app.rest.utils.ContextUtil;\n+import org.dspace.app.rest.utils.MultipartFileSender;\n+import org.dspace.core.Context;\n+import org.dspace.services.ConfigurationService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+\n+/**\n+ * This is a specialized controller to provide access to the sitemap files, generated by\n+ * {@link org.dspace.app.sitemap.GenerateSitemaps}\n+ *\n+ * The mapping for requested endpoint try to resolve a valid sitemap file name, for example\n+ * <pre>\n+ * {@code\n+ * https://<dspace.server.url>/sitemaps/26453b4d-e513-44e8-8d5b-395f62972eff/sitemap0.html\n+ * }\n+ * </pre>\n+ *\n+ * @author Maria Verdonck (Atmire) on 08/07/2020\n+ */\n+@Controller\n+@RequestMapping(\"/sitemaps\")\n+public class SitemapRestController {\n+\n+    private static final Logger log = org.apache.logging.log4j.LogManager.getLogger(SitemapRestController.class);\n+\n+    @Autowired\n+    ConfigurationService configurationService;\n+\n+    // Most file systems are configured to use block sizes of 4096 or 8192 and our buffer should be a multiple of that.\n+    private static final int BUFFER_SIZE = 4096 * 10;\n+\n+    /**\n+     * Tries to retrieve a matching sitemap file in configured location\n+     *\n+     * @param name     the name of the requested sitemap file\n+     * @param response the HTTP response\n+     * @param request  the HTTP request\n+     * @throws SQLException if db error while completing DSpace context\n+     * @throws IOException  if IO error surrounding sitemap file\n+     */\n+    @GetMapping(\"/{name}\")\n+    public void retrieve(@PathVariable String name, HttpServletResponse response,\n+        HttpServletRequest request) throws IOException, SQLException {\n+        // Find sitemap with given name in dspace/sitemaps\n+        File foundSitemapFile = null;\n+        File sitemapOutputDir = new File(configurationService.getProperty(\"sitemap.dir\"));\n+        if (sitemapOutputDir.exists() && sitemapOutputDir.isDirectory()) {\n+            // List of all files and directories inside sitemapOutputDir\n+            File sitemapFilesList[] = sitemapOutputDir.listFiles();\n+            for (File sitemapFile : sitemapFilesList) {\n+                if (name.equalsIgnoreCase(sitemapFile.getName())) {\n+                    if (sitemapFile.isFile()) {\n+                        foundSitemapFile = sitemapFile;\n+                    } else {\n+                        throw new ResourceNotFoundException(\n+                            \"Directory with name \" + name + \" in \" + sitemapOutputDir.getAbsolutePath() +\n+                            \" found, but no file.\");\n+                    }\n+                }\n+            }\n+        } else {\n+            throw new ResourceNotFoundException(\n+                \"Sitemap directory in \" + sitemapOutputDir.getAbsolutePath() + \" does not \" +\n+                \"exist, either sitemaps have not been generated (./dspace generate-sitemaps),\" +\n+                \" or are located elsewhere (config used: sitemap.dir).\");\n+        }\n+        if (foundSitemapFile == null) {\n+            throw new ResourceNotFoundException(\n+                \"Could not find sitemap file with name \" + name + \" in \" + sitemapOutputDir.getAbsolutePath());\n+        } else {\n+            // return found sitemap file\n+            this.returnSitemapFile(foundSitemapFile, response, request);\n+        }\n+    }\n+\n+    /**\n+     * Sends back the matching sitemap file as a MultipartFile, with the headers set with details of the file\n+     * (content, size, name, last modified)\n+     *\n+     * @param foundSitemapFile the found sitemap file, with matching name as in request path\n+     * @param response         the HTTP response\n+     * @param request          the HTTP request\n+     * @throws SQLException if db error while completing DSpace context\n+     * @throws IOException  if IO error surrounding sitemap file\n+     */\n+    private void returnSitemapFile(File foundSitemapFile, HttpServletResponse response, HttpServletRequest request)\n+        throws SQLException, IOException {\n+        // Pipe the bits\n+        try (InputStream is = new FileInputStream(foundSitemapFile)) {\n+            MultipartFileSender sender = MultipartFileSender\n+                .fromInputStream(is)\n+                .withBufferSize(BUFFER_SIZE)\n+                .withFileName(foundSitemapFile.getName())\n+                .withLength(foundSitemapFile.length())\n+                .withMimetype(Files.probeContentType(foundSitemapFile.toPath()))\n+                .with(request)\n+                .with(response);\n+\n+            sender.withLastModified(foundSitemapFile.lastModified());\n+\n+            // Determine if we need to send the file as a download or if the browser can open it inline\n+            long dispositionThreshold = configurationService.getLongProperty(\"webui.content_disposition_threshold\");\n+            if (dispositionThreshold >= 0 && foundSitemapFile.length() > dispositionThreshold) {\n+                sender.withDisposition(MultipartFileSender.CONTENT_DISPOSITION_ATTACHMENT);\n+            }\n+\n+            Context context = ContextUtil.obtainContext(request);\n+\n+            // We have all the data we need, close the connection to the database so that it doesn't stay open during\n+            // download/streaming\n+            context.complete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d64d39f5369c2ffb4bebc84521351a040f2ab0ec"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwOTQ1OA==", "bodyText": "Again, this should read from configuration.  So, have it set a default value for the tests instead by doing something like: configurationService.setPropery(\"sitemap.path\", \"sitemaps\");", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r458209458", "createdAt": "2020-07-21T15:58:24Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/SitemapRestControllerIT.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.dspace.app.rest.builder.CollectionBuilder.createCollection;\n+import static org.dspace.app.rest.builder.CommunityBuilder.createCommunity;\n+import static org.dspace.app.rest.builder.ItemBuilder.createItem;\n+import static org.junit.Assert.assertTrue;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.services.ConfigurationService;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+/**\n+ * Integration test to test the /sitemaps/{name} endpoint, see {@link SitemapRestController}\n+ *\n+ * @author Maria Verdonck (Atmire) on 08/07/2020\n+ */\n+public class SitemapRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+    @Autowired\n+    ConfigurationService configurationService;\n+\n+    private final static String SITEMAPS_ENDPOINT = \"/sitemaps\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d64d39f5369c2ffb4bebc84521351a040f2ab0ec"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0OTg5Mg==", "bodyText": "This needs to be configurable, as we shouldn't assume that everyone needs this to run at the same rate.  We also should document the syntax expected here -- it looks like the syntax is defined here? https://www.quartz-scheduler.org/api/2.3.0/org/quartz/CronTrigger.html\nMaybe we should create a config in dspace.cfg named sitemap.cron and changing this entry to say cron=\"${sitemap.cron}\"?\n# Define cron for how frequently the sitemap should refresh.\n# Defaults to running daily at 1:15am\n# Syntax is defined at https://www.quartz-scheduler.org/api/2.3.0/org/quartz/CronTrigger.html\nsitemap.cron = 0 15 1 * * ?\n\nOr, if we feel a cron syntax is too complex, we could switch this to using fixed-rate and have a simple configuration like:\n# Refresh sitemap every 4 hours (4 x 60 x 60 x 1,000ms)\nsitemap.refreshrate = 28800000\n\nI don't feel strongly here, but I suspect users might have an easier time configuring the refreshrate instead of a custom cron schedule.", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r458349892", "createdAt": "2020-07-21T19:54:00Z", "author": {"login": "tdonohue"}, "path": "dspace/config/spring/api/task-scheduler.xml", "diffHunk": "@@ -0,0 +1,20 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xmlns:task=\"http://www.springframework.org/schema/task\"\n+       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+    http://www.springframework.org/schema/beans/spring-beans.xsd\n+    http://www.springframework.org/schema/task\n+    http://www.springframework.org/task/spring-task.xsd\">\n+\n+  <!-- Configure the scheduler -->\n+  <task:scheduler id=\"myScheduler\" pool-size=\"10\"/>\n+\n+  <!-- Configure parameters -->\n+  <task:scheduled-tasks scheduler=\"myScheduler\">\n+    <task:scheduled ref=\"GenerateSitemaps\" method=\"generateSitemapsScheduled\" cron=\"0 15 1 * * ?\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d64d39f5369c2ffb4bebc84521351a040f2ab0ec"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MTQ1MzM5", "url": "https://github.com/DSpace/DSpace/pull/2858#pullrequestreview-454145339", "createdAt": "2020-07-23T13:45:41Z", "commit": {"oid": "d64d39f5369c2ffb4bebc84521351a040f2ab0ec"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzo0NTo0MVrOG2LPEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNzo0Mjo0NlrOG2U-zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ2MDM3MQ==", "bodyText": "we need to cleanup the output of these script in an After method. Maybe here is convenient to think about a Before/After Class annotation to save time", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r459460371", "createdAt": "2020-07-23T13:45:41Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/SitemapRestControllerIT.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.dspace.app.rest.builder.CollectionBuilder.createCollection;\n+import static org.dspace.app.rest.builder.CommunityBuilder.createCommunity;\n+import static org.dspace.app.rest.builder.ItemBuilder.createItem;\n+import static org.junit.Assert.assertTrue;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.services.ConfigurationService;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+/**\n+ * Integration test to test the /sitemaps/{name} endpoint, see {@link SitemapRestController}\n+ *\n+ * @author Maria Verdonck (Atmire) on 08/07/2020\n+ */\n+public class SitemapRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+    @Autowired\n+    ConfigurationService configurationService;\n+\n+    private final static String SITEMAPS_ENDPOINT = \"/sitemaps\";\n+\n+    private Item item1;\n+    private Item item2;\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+\n+        super.setUp();\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        Community community = createCommunity(context).build();\n+        Collection collection = createCollection(context, community).build();\n+        this.item1 = createItem(context, collection)\n+            .withTitle(\"Test 1\")\n+            .withIssueDate(\"2010-10-17\")\n+            .build();\n+        this.item2 = createItem(context, collection)\n+            .withTitle(\"Test 2\")\n+            .withIssueDate(\"2015-8-3\")\n+            .build();\n+\n+        runDSpaceScript(\"generate-sitemaps\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d64d39f5369c2ffb4bebc84521351a040f2ab0ec"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ2MTA4Mg==", "bodyText": "can you add explicit test to verify that we are protected by file system traversal ?", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r459461082", "createdAt": "2020-07-23T13:46:40Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/SitemapRestControllerIT.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.dspace.app.rest.builder.CollectionBuilder.createCollection;\n+import static org.dspace.app.rest.builder.CommunityBuilder.createCommunity;\n+import static org.dspace.app.rest.builder.ItemBuilder.createItem;\n+import static org.junit.Assert.assertTrue;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.services.ConfigurationService;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+/**\n+ * Integration test to test the /sitemaps/{name} endpoint, see {@link SitemapRestController}\n+ *\n+ * @author Maria Verdonck (Atmire) on 08/07/2020\n+ */\n+public class SitemapRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+    @Autowired\n+    ConfigurationService configurationService;\n+\n+    private final static String SITEMAPS_ENDPOINT = \"/sitemaps\";\n+\n+    private Item item1;\n+    private Item item2;\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+\n+        super.setUp();\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        Community community = createCommunity(context).build();\n+        Collection collection = createCollection(context, community).build();\n+        this.item1 = createItem(context, collection)\n+            .withTitle(\"Test 1\")\n+            .withIssueDate(\"2010-10-17\")\n+            .build();\n+        this.item2 = createItem(context, collection)\n+            .withTitle(\"Test 2\")\n+            .withIssueDate(\"2015-8-3\")\n+            .build();\n+\n+        runDSpaceScript(\"generate-sitemaps\");\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void testSitemap_notValidSiteMapFile() throws Exception {\n+        //** WHEN **\n+        //We attempt to retrieve a non valid sitemap file\n+        getClient().perform(get(SITEMAPS_ENDPOINT + \"/notValidSiteMapFile\"))\n+                   //** THEN **\n+                   .andExpect(status().isNotFound());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d64d39f5369c2ffb4bebc84521351a040f2ab0ec"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYxNDQxNA==", "bodyText": "it would be also useful to include the ping to the search engine as a configurable option similar to how now can be specified with the -p from the command line.", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r459614414", "createdAt": "2020-07-23T17:32:54Z", "author": {"login": "abollini"}, "path": "dspace/config/spring/api/task-scheduler.xml", "diffHunk": "@@ -0,0 +1,20 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xmlns:task=\"http://www.springframework.org/schema/task\"\n+       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+    http://www.springframework.org/schema/beans/spring-beans.xsd\n+    http://www.springframework.org/schema/task\n+    http://www.springframework.org/task/spring-task.xsd\">\n+\n+  <!-- Configure the scheduler -->\n+  <task:scheduler id=\"myScheduler\" pool-size=\"10\"/>\n+\n+  <!-- Configure parameters -->\n+  <task:scheduled-tasks scheduler=\"myScheduler\">\n+    <task:scheduled ref=\"GenerateSitemaps\" method=\"generateSitemapsScheduled\" cron=\"0 15 1 * * ?\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0OTg5Mg=="}, "originalCommit": {"oid": "d64d39f5369c2ffb4bebc84521351a040f2ab0ec"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYxNjE2Ng==", "bodyText": "can we found a way to make easier turn off the scheduler without touching the xml file? an option could be our own implementation wrapping the default one with an additional boolean flag, if turned off the scheduler will just silent.\nThis is needed in deployment where there are multiple nodes, off course we must have the scheduler running only on a node (where we can set the property to true using ENV variable)", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r459616166", "createdAt": "2020-07-23T17:36:04Z", "author": {"login": "abollini"}, "path": "dspace/config/spring/api/task-scheduler.xml", "diffHunk": "@@ -0,0 +1,20 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xmlns:task=\"http://www.springframework.org/schema/task\"\n+       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+    http://www.springframework.org/schema/beans/spring-beans.xsd\n+    http://www.springframework.org/schema/task\n+    http://www.springframework.org/task/spring-task.xsd\">\n+\n+  <!-- Configure the scheduler -->\n+  <task:scheduler id=\"myScheduler\" pool-size=\"10\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d64d39f5369c2ffb4bebc84521351a040f2ab0ec"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyMDA0NQ==", "bodyText": "I think that @benbosman is right here, forcing the context to complete will free up resource earlier that we will never use. The context.complete method is already internally protected with an isValid() check we should eventually put a guard against NPE but this would be a very odd scenario so I'm also fine in just having the NPE and throw a 500", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r459620045", "createdAt": "2020-07-23T17:42:46Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/SitemapRestController.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.sql.SQLException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.catalina.connector.ClientAbortException;\n+import org.apache.logging.log4j.Logger;\n+import org.dspace.app.rest.utils.ContextUtil;\n+import org.dspace.app.rest.utils.MultipartFileSender;\n+import org.dspace.core.Context;\n+import org.dspace.services.ConfigurationService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+\n+/**\n+ * This is a specialized controller to provide access to the sitemap files, generated by\n+ * {@link org.dspace.app.sitemap.GenerateSitemaps}\n+ *\n+ * The mapping for requested endpoint try to resolve a valid sitemap file name, for example\n+ * <pre>\n+ * {@code\n+ * https://<dspace.server.url>/sitemaps/26453b4d-e513-44e8-8d5b-395f62972eff/sitemap0.html\n+ * }\n+ * </pre>\n+ *\n+ * @author Maria Verdonck (Atmire) on 08/07/2020\n+ */\n+@Controller\n+@RequestMapping(\"/sitemaps\")\n+public class SitemapRestController {\n+\n+    private static final Logger log = org.apache.logging.log4j.LogManager.getLogger(SitemapRestController.class);\n+\n+    @Autowired\n+    ConfigurationService configurationService;\n+\n+    // Most file systems are configured to use block sizes of 4096 or 8192 and our buffer should be a multiple of that.\n+    private static final int BUFFER_SIZE = 4096 * 10;\n+\n+    /**\n+     * Tries to retrieve a matching sitemap file in configured location\n+     *\n+     * @param name     the name of the requested sitemap file\n+     * @param response the HTTP response\n+     * @param request  the HTTP request\n+     * @throws SQLException if db error while completing DSpace context\n+     * @throws IOException  if IO error surrounding sitemap file\n+     */\n+    @GetMapping(\"/{name}\")\n+    public void retrieve(@PathVariable String name, HttpServletResponse response,\n+        HttpServletRequest request) throws IOException, SQLException {\n+        // Find sitemap with given name in dspace/sitemaps\n+        File foundSitemapFile = null;\n+        File sitemapOutputDir = new File(configurationService.getProperty(\"sitemap.dir\"));\n+        if (sitemapOutputDir.exists() && sitemapOutputDir.isDirectory()) {\n+            // List of all files and directories inside sitemapOutputDir\n+            File sitemapFilesList[] = sitemapOutputDir.listFiles();\n+            for (File sitemapFile : sitemapFilesList) {\n+                if (name.equalsIgnoreCase(sitemapFile.getName())) {\n+                    if (sitemapFile.isFile()) {\n+                        foundSitemapFile = sitemapFile;\n+                    } else {\n+                        throw new ResourceNotFoundException(\n+                            \"Directory with name \" + name + \" in \" + sitemapOutputDir.getAbsolutePath() +\n+                            \" found, but no file.\");\n+                    }\n+                }\n+            }\n+        } else {\n+            throw new ResourceNotFoundException(\n+                \"Sitemap directory in \" + sitemapOutputDir.getAbsolutePath() + \" does not \" +\n+                \"exist, either sitemaps have not been generated (./dspace generate-sitemaps),\" +\n+                \" or are located elsewhere (config used: sitemap.dir).\");\n+        }\n+        if (foundSitemapFile == null) {\n+            throw new ResourceNotFoundException(\n+                \"Could not find sitemap file with name \" + name + \" in \" + sitemapOutputDir.getAbsolutePath());\n+        } else {\n+            // return found sitemap file\n+            this.returnSitemapFile(foundSitemapFile, response, request);\n+        }\n+    }\n+\n+    /**\n+     * Sends back the matching sitemap file as a MultipartFile, with the headers set with details of the file\n+     * (content, size, name, last modified)\n+     *\n+     * @param foundSitemapFile the found sitemap file, with matching name as in request path\n+     * @param response         the HTTP response\n+     * @param request          the HTTP request\n+     * @throws SQLException if db error while completing DSpace context\n+     * @throws IOException  if IO error surrounding sitemap file\n+     */\n+    private void returnSitemapFile(File foundSitemapFile, HttpServletResponse response, HttpServletRequest request)\n+        throws SQLException, IOException {\n+        // Pipe the bits\n+        try (InputStream is = new FileInputStream(foundSitemapFile)) {\n+            MultipartFileSender sender = MultipartFileSender\n+                .fromInputStream(is)\n+                .withBufferSize(BUFFER_SIZE)\n+                .withFileName(foundSitemapFile.getName())\n+                .withLength(foundSitemapFile.length())\n+                .withMimetype(Files.probeContentType(foundSitemapFile.toPath()))\n+                .with(request)\n+                .with(response);\n+\n+            sender.withLastModified(foundSitemapFile.lastModified());\n+\n+            // Determine if we need to send the file as a download or if the browser can open it inline\n+            long dispositionThreshold = configurationService.getLongProperty(\"webui.content_disposition_threshold\");\n+            if (dispositionThreshold >= 0 && foundSitemapFile.length() > dispositionThreshold) {\n+                sender.withDisposition(MultipartFileSender.CONTENT_DISPOSITION_ATTACHMENT);\n+            }\n+\n+            Context context = ContextUtil.obtainContext(request);\n+\n+            // We have all the data we need, close the connection to the database so that it doesn't stay open during\n+            // download/streaming\n+            context.complete();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwNzQxMw=="}, "originalCommit": {"oid": "d64d39f5369c2ffb4bebc84521351a040f2ab0ec"}, "originalPosition": 136}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ba6a748874dbf7b3952ed0cb393a796e2202180", "author": {"user": {"login": "MarieVerdonck", "name": "Marie Verdonck"}}, "url": "https://github.com/DSpace/DSpace/commit/1ba6a748874dbf7b3952ed0cb393a796e2202180", "committedDate": "2020-07-29T15:56:48Z", "message": "72351: sitemaps path to config + in tests &\nscript extension to delete sitemaps dir > called at end of tests &\ntest for malicious file traversal"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NDE3OTU2", "url": "https://github.com/DSpace/DSpace/pull/2858#pullrequestreview-458417956", "createdAt": "2020-07-30T13:49:25Z", "commit": {"oid": "1ba6a748874dbf7b3952ed0cb393a796e2202180"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzo0OToyNVrOG5j3Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzo0OToyNVrOG5j3Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAwOTYzNA==", "bodyText": "is this what we really expect/want?\nI would suggest to return a forbidden or a not found. The first is preferred in my opinion as it should also whom is more concerned about security to track this devil request for further analysis.", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r463009634", "createdAt": "2020-07-30T13:49:25Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/SitemapRestControllerIT.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.dspace.app.rest.builder.CollectionBuilder.createCollection;\n+import static org.dspace.app.rest.builder.CommunityBuilder.createCommunity;\n+import static org.dspace.app.rest.builder.ItemBuilder.createItem;\n+import static org.junit.Assert.assertTrue;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import javax.servlet.ServletException;\n+\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.services.ConfigurationService;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+/**\n+ * Integration test to test the /sitemaps/{name} endpoint, see {@link SitemapRestController}\n+ *\n+ * @author Maria Verdonck (Atmire) on 08/07/2020\n+ */\n+public class SitemapRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+    @Autowired\n+    ConfigurationService configurationService;\n+\n+    private final static String SITEMAPS_ENDPOINT = \"sitemaps\";\n+\n+    private Item item1;\n+    private Item item2;\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+\n+        configurationService.setProperty(\"sitemap.path\", SITEMAPS_ENDPOINT);\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        Community community = createCommunity(context).build();\n+        Collection collection = createCollection(context, community).build();\n+        this.item1 = createItem(context, collection)\n+            .withTitle(\"Test 1\")\n+            .withIssueDate(\"2010-10-17\")\n+            .build();\n+        this.item2 = createItem(context, collection)\n+            .withTitle(\"Test 2\")\n+            .withIssueDate(\"2015-8-3\")\n+            .build();\n+\n+        runDSpaceScript(\"generate-sitemaps\");\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @After\n+    public void destroy() throws Exception {\n+        // delete sitemaps generated by tests in before\n+        runDSpaceScript(\"generate-sitemaps\", \"-d\");\n+\n+        super.destroy();\n+    }\n+\n+    @Test\n+    public void testSitemap_notValidSiteMapFile() throws Exception {\n+        //** WHEN **\n+        //We attempt to retrieve a non valid sitemap file\n+        getClient().perform(get(\"/\" + SITEMAPS_ENDPOINT + \"/notValidSiteMapFile\"))\n+                   //** THEN **\n+                   .andExpect(status().isNotFound());\n+    }\n+\n+    @Test(expected = ServletException.class)\n+    public void testSitemap_fileSystemTraversal_dspaceCfg() throws Exception {\n+        //** WHEN **\n+        //We attempt to use endpoint for malicious file system traversal\n+        getClient().perform(get(\"/\" + SITEMAPS_ENDPOINT + \"/%2e%2e/config/dspace.cfg\"));\n+    }\n+\n+    @Test(expected = ServletException.class)\n+    public void testSitemap_fileSystemTraversal_dspaceCfg2() throws Exception {\n+        //** WHEN **\n+        //We attempt to use endpoint for malicious file system traversal\n+        getClient().perform(get(\"/\" + SITEMAPS_ENDPOINT + \"/%2e%2e%2fconfig%2fdspace.cfg\"));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ba6a748874dbf7b3952ed0cb393a796e2202180"}, "originalPosition": 100}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NzI1NTc5", "url": "https://github.com/DSpace/DSpace/pull/2858#pullrequestreview-458725579", "createdAt": "2020-07-30T20:17:59Z", "commit": {"oid": "1ba6a748874dbf7b3952ed0cb393a796e2202180"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMDoxODowMFrOG5yXAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMDoxODowMFrOG5yXAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI0NzEwNQ==", "bodyText": "can we call the static method directly here? it would be more easy to understand and efficient", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r463247105", "createdAt": "2020-07-30T20:18:00Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/SitemapRestControllerIT.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.dspace.app.rest.builder.CollectionBuilder.createCollection;\n+import static org.dspace.app.rest.builder.CommunityBuilder.createCommunity;\n+import static org.dspace.app.rest.builder.ItemBuilder.createItem;\n+import static org.junit.Assert.assertTrue;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import javax.servlet.ServletException;\n+\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.services.ConfigurationService;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+/**\n+ * Integration test to test the /sitemaps/{name} endpoint, see {@link SitemapRestController}\n+ *\n+ * @author Maria Verdonck (Atmire) on 08/07/2020\n+ */\n+public class SitemapRestControllerIT extends AbstractControllerIntegrationTest {\n+\n+    @Autowired\n+    ConfigurationService configurationService;\n+\n+    private final static String SITEMAPS_ENDPOINT = \"sitemaps\";\n+\n+    private Item item1;\n+    private Item item2;\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+\n+        configurationService.setProperty(\"sitemap.path\", SITEMAPS_ENDPOINT);\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        Community community = createCommunity(context).build();\n+        Collection collection = createCollection(context, community).build();\n+        this.item1 = createItem(context, collection)\n+            .withTitle(\"Test 1\")\n+            .withIssueDate(\"2010-10-17\")\n+            .build();\n+        this.item2 = createItem(context, collection)\n+            .withTitle(\"Test 2\")\n+            .withIssueDate(\"2015-8-3\")\n+            .build();\n+\n+        runDSpaceScript(\"generate-sitemaps\");\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @After\n+    public void destroy() throws Exception {\n+        // delete sitemaps generated by tests in before\n+        runDSpaceScript(\"generate-sitemaps\", \"-d\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ba6a748874dbf7b3952ed0cb393a796e2202180"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d087aa18443a2f2a76ac23fc393f737145651b1", "author": {"user": {"login": "MarieVerdonck", "name": "Marie Verdonck"}}, "url": "https://github.com/DSpace/DSpace/commit/3d087aa18443a2f2a76ac23fc393f737145651b1", "committedDate": "2020-08-06T11:52:43Z", "message": "72426: Sitemap cron schedule configurable in dspace.cfg"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00166862ea65d649e21fe4e67dc09dceb50e1209", "author": {"user": {"login": "MarieVerdonck", "name": "Marie Verdonck"}}, "url": "https://github.com/DSpace/DSpace/commit/00166862ea65d649e21fe4e67dc09dceb50e1209", "committedDate": "2020-08-06T12:03:48Z", "message": "Revert whitespace changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5aa01787a7e91d21538b9c58c74782c15acf2f78", "author": {"user": {"login": "MarieVerdonck", "name": "Marie Verdonck"}}, "url": "https://github.com/DSpace/DSpace/commit/5aa01787a7e91d21538b9c58c74782c15acf2f78", "committedDate": "2020-08-06T12:20:33Z", "message": "Merge branch 'dspace-origin-master' into w2p-71734_sitemaps"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cff1d0a69af562327bdc87f711ffc881f7b17b00", "author": {"user": {"login": "MarieVerdonck", "name": "Marie Verdonck"}}, "url": "https://github.com/DSpace/DSpace/commit/cff1d0a69af562327bdc87f711ffc881f7b17b00", "committedDate": "2020-08-06T12:22:26Z", "message": "poolsize fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1c9bc9061b5456b3daf526cd179216b1181943a", "author": {"user": {"login": "MarieVerdonck", "name": "Marie Verdonck"}}, "url": "https://github.com/DSpace/DSpace/commit/a1c9bc9061b5456b3daf526cd179216b1181943a", "committedDate": "2020-08-06T14:10:07Z", "message": "Collection and Community Builder moved fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4e64e5bf373ee2be6cb304f88b0177ba131c4b1", "author": {"user": {"login": "MarieVerdonck", "name": "Marie Verdonck"}}, "url": "https://github.com/DSpace/DSpace/commit/b4e64e5bf373ee2be6cb304f88b0177ba131c4b1", "committedDate": "2020-08-07T15:10:32Z", "message": "71738: Sitemap scheduler with annotations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNDU0NzM5", "url": "https://github.com/DSpace/DSpace/pull/2858#pullrequestreview-463454739", "createdAt": "2020-08-07T16:42:59Z", "commit": {"oid": "b4e64e5bf373ee2be6cb304f88b0177ba131c4b1"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNjo0Mjo1OVrOG9gq8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNjo0NjoyNFrOG9gxTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE1MTYwMg==", "bodyText": "Minor thing here. I'd recommend we comment this out by default and change comment slightly. So, update to something like:\n# Customize the path of sitemaps in the server webapp\n# Defaults to \"sitemaps\", which means they are available at ${dspace.server.url}/sitemaps/\n# sitemap.path = sitemaps", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r467151602", "createdAt": "2020-08-07T16:42:59Z", "author": {"login": "tdonohue"}, "path": "dspace/config/dspace.cfg", "diffHunk": "@@ -1429,6 +1429,9 @@ webui.content_disposition_threshold = 8388608\n # the directory where the generated sitemaps are stored\n sitemap.dir = ${dspace.dir}/sitemaps\n \n+# sitemaps endpoint path used in SitemapRestController and in the url paths when sitemaps are generated\n+sitemap.path = sitemaps", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4e64e5bf373ee2be6cb304f88b0177ba131c4b1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE1MzIzMQ==", "bodyText": "Another very minor change.  Please update this line to also describe how to disable via local.cfg.  I've also found (via testing) that this config is not refreshed automatically (which isn't a big deal), so we should document that you need to restart Tomcat.\nSo, let's say something like:\n# Remove (comment out) this config to disable the sitemap scheduler.\n# Sitemap scheduler can also be disabled by setting to \"-\" (single dash) in local.cfg.\n# Keep in mind, changing the schedule requires rebooting your servlet container, e.g. Tomcat.", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r467153231", "createdAt": "2020-08-07T16:46:24Z", "author": {"login": "tdonohue"}, "path": "dspace/config/dspace.cfg", "diffHunk": "@@ -1442,6 +1445,12 @@ sitemap.engineurls = http://www.google.com/webmasters/sitemaps/ping?sitemap=\n #\n # No known Sitemap 'ping' URL for MSN/Live search\n \n+# Define cron for how frequently the sitemap should refresh.\n+# Defaults to running daily at 1:15am\n+# Remove (comment) out this config to disable the sitemap scheduler", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4e64e5bf373ee2be6cb304f88b0177ba131c4b1"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3164be125e8d8d40df5a6b3b332c125150c2af1d", "author": {"user": {"login": "MarieVerdonck", "name": "Marie Verdonck"}}, "url": "https://github.com/DSpace/DSpace/commit/3164be125e8d8d40df5a6b3b332c125150c2af1d", "committedDate": "2020-08-17T09:28:39Z", "message": "72505: sitemaps config feedback applied & changed base url of sitemap_index files to ui.url"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNzQ2NDE0", "url": "https://github.com/DSpace/DSpace/pull/2858#pullrequestreview-470746414", "createdAt": "2020-08-19T18:50:51Z", "commit": {"oid": "3164be125e8d8d40df5a6b3b332c125150c2af1d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxODo1MDo1MVrOHDU1og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxODo1MDo1MVrOHDU1og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI0OTE4Ng==", "bodyText": "Minor change required here.  Based on updates to DSpace/dspace-angular#825 , this sitemapStem should be updated to just be:\nString sitemapStem = uiURLStem + \"/sitemap\";\nThe reason is that, at the UI level, the sitemapsEndpoint has no meaning. It's only valid for the REST API.  This is needed, to ensure that the sitemap files are available at the root level of the UI (e.g. http://localhost:4000/sitemap_index.xml , http://localhost:4000/sitemap0.xml)", "url": "https://github.com/DSpace/DSpace/pull/2858#discussion_r473249186", "createdAt": "2020-08-19T18:50:51Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/app/sitemap/GenerateSitemaps.java", "diffHunk": "@@ -150,14 +180,10 @@ public static void main(String[] args) throws Exception {\n      * @throws IOException  if IO error\n      *                      if IO error occurs.\n      */\n-    public static void generateSitemaps(boolean makeHTMLMap,\n-                                        boolean makeSitemapOrg) throws SQLException, IOException {\n-        String sitemapStem = configurationService.getProperty(\"dspace.ui.url\")\n-            + \"/sitemap\";\n-        String htmlMapStem = configurationService.getProperty(\"dspace.ui.url\")\n-            + \"/htmlmap\";\n-        String handleURLStem = configurationService.getProperty(\"dspace.ui.url\")\n-            + \"/handle/\";\n+    public static void generateSitemaps(boolean makeHTMLMap, boolean makeSitemapOrg) throws SQLException, IOException {\n+        String sitemapsEndpoint = configurationService.getProperty(\"sitemap.path\", \"sitemaps\");\n+        String uiURLStem = configurationService.getProperty(\"dspace.ui.url\");\n+        String sitemapStem = uiURLStem + \"/\" + sitemapsEndpoint + \"/sitemap\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3164be125e8d8d40df5a6b3b332c125150c2af1d"}, "originalPosition": 87}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNjEyMzYy", "url": "https://github.com/DSpace/DSpace/pull/2858#pullrequestreview-471612362", "createdAt": "2020-08-20T13:26:50Z", "commit": {"oid": "3164be125e8d8d40df5a6b3b332c125150c2af1d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b86f331d43041d3991124534c4c546068d75546", "author": {"user": {"login": "MarieVerdonck", "name": "Marie Verdonck"}}, "url": "https://github.com/DSpace/DSpace/commit/4b86f331d43041d3991124534c4c546068d75546", "committedDate": "2020-08-26T11:52:59Z", "message": "72505: Url sitemaps fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d3fd877225e9fc6cedd3f886bde4b9d067c8d07", "author": {"user": {"login": "MarieVerdonck", "name": "Marie Verdonck"}}, "url": "https://github.com/DSpace/DSpace/commit/4d3fd877225e9fc6cedd3f886bde4b9d067c8d07", "committedDate": "2020-08-26T13:05:18Z", "message": "72505: Url sitemaps change - test fix"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1530, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}