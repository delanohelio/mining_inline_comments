{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4NDEyNDU5", "number": 3026, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMDoyMzo0NFrOE1YlQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMDoyMzo0NFrOE1YlQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDEyNzM5OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMDoyMzo0NFrOHtoY2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMToxMDowMFrOHup62g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYwOTY4OQ==", "bodyText": "@alemarte : This entire section of code can be simplified if you'd just use andDo(), similar to other post calls in this same IT class, e.g. https://github.com/DSpace/DSpace/blob/main/dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java#L837-L842\nThe code you have here will \"work\", but it's much slower as you are loading the entire result into a Map in order to just get the id returned.  Instead, you should be able to do something like\nAtomicReference<Integer> idRef = new AtomicReference<>();\ngetClient(token).perform(post(\"/api/submission/workspaceitems\")\n                    .param(\"owningCollection\", col1.getID().toString())\n                    .contentType(parseMediaType(TEXT_URI_LIST_VALUE))\n                    .content(\"https://localhost:8080/server/api/integration/externalsources/\" +\n                                                  \"mock/entryValues/one\"))\n                    .andExpect(status().isCreated())\n                    .andExcept(jsonPath(\"$._embedded.collection.id\", is(col1.getID().toString())))\n                    .andDo(result -> idRef.set(read(result.getResponse().getContentAsString(), \"$.id\")));\nworkspaceItemId = idRef.get();\n\nWe also should be cleaning up in this method, by having a try() / finally, with WorkspaceItemBuilder.deleteWorkspaceItem(idRef.get()); in the finally block.\nThis change in code does mean that you won't be able to get the itemUuidString, but I don't think that's necessary for this test.  All you need to ensure is that the WorkspaceItem is created in the correct collection, having metadata which matches the mock external source.", "url": "https://github.com/DSpace/DSpace/pull/3026#discussion_r517609689", "createdAt": "2020-11-04T20:23:44Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java", "diffHunk": "@@ -3829,6 +3829,55 @@ public void createWorkspaceItemFromExternalSourcesUnauthorized() throws Exceptio\n                    .andExpect(status().isUnauthorized());\n     }\n \n+    @Test\n+    public void createWorkspaceItemFromExternalSourcesNonAdminWithPermission() throws Exception {\n+        //We turn off the authorization system in order to create the structure as defined below\n+        context.turnOffAuthorisationSystem();\n+        //** GIVEN **\n+        //1. A community-collection structure with one parent community with sub-community and two collections.\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1).withName(\"Collection 1\")\n+                .withSubmitterGroup(eperson).build();\n+\n+        context.restoreAuthSystemState();\n+\n+        Integer workspaceItemId = null;\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        MvcResult mvcResult = getClient(token).perform(post(\"/api/submission/workspaceitems?owningCollection=\"\n+                                          + col1.getID().toString())\n+                                     .contentType(parseMediaType(\n+                                         TEXT_URI_LIST_VALUE))\n+                                     .content(\"https://localhost:8080/server/api/integration/externalsources/\" +\n+                                                  \"mock/entryValues/one\"))\n+                                    .andExpect(status().isCreated()).andReturn();\n+\n+        String content = mvcResult.getResponse().getContentAsString();\n+        Map<String,Object> map = mapper.readValue(content, Map.class);\n+        workspaceItemId = (Integer) map.get(\"id\");\n+        String itemUuidString = String.valueOf(((Map) ((Map) map.get(\"_embedded\")).get(\"item\")).get(\"uuid\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57417884acd97c36f4485e7d83ab8fe22be04451"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODY4MzM1NA==", "bodyText": "Thanks for your review @tdonohue. All the suggested improvements have been committed.", "url": "https://github.com/DSpace/DSpace/pull/3026#discussion_r518683354", "createdAt": "2020-11-06T11:10:00Z", "author": {"login": "alemarte"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java", "diffHunk": "@@ -3829,6 +3829,55 @@ public void createWorkspaceItemFromExternalSourcesUnauthorized() throws Exceptio\n                    .andExpect(status().isUnauthorized());\n     }\n \n+    @Test\n+    public void createWorkspaceItemFromExternalSourcesNonAdminWithPermission() throws Exception {\n+        //We turn off the authorization system in order to create the structure as defined below\n+        context.turnOffAuthorisationSystem();\n+        //** GIVEN **\n+        //1. A community-collection structure with one parent community with sub-community and two collections.\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1).withName(\"Collection 1\")\n+                .withSubmitterGroup(eperson).build();\n+\n+        context.restoreAuthSystemState();\n+\n+        Integer workspaceItemId = null;\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        MvcResult mvcResult = getClient(token).perform(post(\"/api/submission/workspaceitems?owningCollection=\"\n+                                          + col1.getID().toString())\n+                                     .contentType(parseMediaType(\n+                                         TEXT_URI_LIST_VALUE))\n+                                     .content(\"https://localhost:8080/server/api/integration/externalsources/\" +\n+                                                  \"mock/entryValues/one\"))\n+                                    .andExpect(status().isCreated()).andReturn();\n+\n+        String content = mvcResult.getResponse().getContentAsString();\n+        Map<String,Object> map = mapper.readValue(content, Map.class);\n+        workspaceItemId = (Integer) map.get(\"id\");\n+        String itemUuidString = String.valueOf(((Map) ((Map) map.get(\"_embedded\")).get(\"item\")).get(\"uuid\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYwOTY4OQ=="}, "originalCommit": {"oid": "57417884acd97c36f4485e7d83ab8fe22be04451"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1434, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}