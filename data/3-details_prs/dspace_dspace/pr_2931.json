{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5Mjg5ODU4", "number": 2931, "title": "Scripts and processes search", "bodyText": "References\n\nRelated to REST Contract\n\nDescription\nAt the moment, the scripts and processes endpoint doesn\u2019t offer a search endpoint.\nThis endpoint returns a list of processes that match the provided parameters as per the REST contract.\nInstructions for Reviewers\nList of changes in this PR:\n\nA new endpoint for the search has been added to the 'ProcessRestRepository'.\nThe parameters are passed on to the 'ProcessService' for the requested search using ProcessQueryParameterContainer (for easier extension of the params later on).\nThe queries being done are checked straight on the DB since the related information is kept as is.\nPlease note that a default descending sorting for the startTime has been added if no sort option is provided\n\nChecklist\nThis checklist provides a reminder of what we are going to look for when reviewing your PR. You need not complete this checklist prior to creating your PR (draft PRs are always welcome). If you are unsure about an item in the checklist, don't hesitate to ask. We're here to help!\n\n My PR is small in size (e.g. less than 1,000 lines of code, not including comments & integration tests). Exceptions may be made if previously agreed upon.\n My PR passes Checkstyle validation based on the Code Style Guide.\n My PR includes Javadoc for all new (or modified) public methods and classes. It also includes Javadoc for large or complex private methods.\n My PR passes all tests and includes new/updated Unit or Integration Tests based on the Code Testing Guide.\n If my PR includes new, third-party dependencies (in any pom.xml), I've made sure their licenses align with the DSpace BSD License based on the Licensing of Contributions documentation.\n If my PR modifies the REST API, I've linked to the REST Contract page (or open PR) related to this change.", "createdAt": "2020-08-18T08:21:38Z", "url": "https://github.com/DSpace/DSpace/pull/2931", "merged": true, "mergeCommit": {"oid": "1e7781e1955a6b40aad0fd407c56e376f401ce92"}, "closed": true, "closedAt": "2020-09-17T13:43:17Z", "author": {"login": "jonas-atmire"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-asarAH2gAyNDY5Mjg5ODU4OjY4Mzg5YzE4NjNkZGRmZTBjNjg1NzdhNjA4YmRjMDkxYzhkMTk1NzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJxN6hAFqTQ5MDYwODQ2Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "68389c1863dddfe0c68577a608bdc091c8d19570", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/68389c1863dddfe0c68577a608bdc091c8d19570", "committedDate": "2020-08-13T07:15:26Z", "message": "[Task 72498] added the searchByProperty endpoint on the Process endpoints"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c605cfff3a60145c8f58eabfcfc9370d584580d", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/4c605cfff3a60145c8f58eabfcfc9370d584580d", "committedDate": "2020-08-13T10:19:11Z", "message": "[Task 72498] rewrote ProcessQueryParameterContainer logic to have a map instead of set variables"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67d04b2254bb7a5781d5ebeee074aa71f40f6222", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/67d04b2254bb7a5781d5ebeee074aa71f40f6222", "committedDate": "2020-08-14T13:26:04Z", "message": "[Task 72498] implemented the Sort option for the Process Search and added tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4389fa33c6f8257b1874c6ed4731aa98c80d676c", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/4389fa33c6f8257b1874c6ed4731aa98c80d676c", "committedDate": "2020-08-18T09:57:15Z", "message": "[Task 72498] added javadocs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNzY2NDk5", "url": "https://github.com/DSpace/DSpace/pull/2931#pullrequestreview-481766499", "createdAt": "2020-09-03T11:59:28Z", "commit": {"oid": "4389fa33c6f8257b1874c6ed4731aa98c80d676c"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMTo1OToyOFrOHMjSFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMjoxMjo1MlrOHMjvlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyMzAyOQ==", "bodyText": "although this works, I would avoid searching on a null eperson UUID, and move this in the if block below", "url": "https://github.com/DSpace/DSpace/pull/2931#discussion_r482923029", "createdAt": "2020-09-03T11:59:28Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ProcessRestRepository.java", "diffHunk": "@@ -135,6 +150,104 @@ protected void delete(Context context, Integer integer)\n         }\n     }\n \n+    /**\n+     * Search method that will take Parameters and return a list of {@link ProcessRest} objects\n+     * based on the {@link Process} objects that were in the databank that adhere to these params\n+     * @param ePersonUuid   The UUID for the EPerson that started the Process\n+     * @param scriptName    The name of the Script for which the Process belongs to\n+     * @param processStatusString   The status of the Process\n+     * @param pageable      The pageable\n+     * @return              A page of {@link ProcessRest} objects adhering to the params\n+     * @throws SQLException If something goes wrong\n+     */\n+    @SearchRestMethod(name = \"byProperty\")\n+    @PreAuthorize(\"hasAuthority('ADMIN')\")\n+    public Page<ProcessRest> findProcessesByProperty(@Parameter(value = \"userId\") UUID ePersonUuid,\n+                                                     @Parameter(value = \"scriptName\") String scriptName,\n+                                                     @Parameter(value = \"processStatus\") String processStatusString,\n+                                                     Pageable pageable)\n+        throws SQLException {\n+        if (StringUtils.isBlank(scriptName) && ePersonUuid == null && StringUtils.isBlank(processStatusString)) {\n+            throw new DSpaceBadRequestException(\"Either a name, user UUID or ProcessStatus should be provided\");\n+        }\n+\n+        Context context = obtainContext();\n+        EPerson ePerson = epersonService.find(context, ePersonUuid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4389fa33c6f8257b1874c6ed4731aa98c80d676c"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyMzQ5Nw==", "bodyText": "what will happen if it's not a valid status, is there an IT for this use case?", "url": "https://github.com/DSpace/DSpace/pull/2931#discussion_r482923497", "createdAt": "2020-09-03T12:00:18Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ProcessRestRepository.java", "diffHunk": "@@ -135,6 +150,104 @@ protected void delete(Context context, Integer integer)\n         }\n     }\n \n+    /**\n+     * Search method that will take Parameters and return a list of {@link ProcessRest} objects\n+     * based on the {@link Process} objects that were in the databank that adhere to these params\n+     * @param ePersonUuid   The UUID for the EPerson that started the Process\n+     * @param scriptName    The name of the Script for which the Process belongs to\n+     * @param processStatusString   The status of the Process\n+     * @param pageable      The pageable\n+     * @return              A page of {@link ProcessRest} objects adhering to the params\n+     * @throws SQLException If something goes wrong\n+     */\n+    @SearchRestMethod(name = \"byProperty\")\n+    @PreAuthorize(\"hasAuthority('ADMIN')\")\n+    public Page<ProcessRest> findProcessesByProperty(@Parameter(value = \"userId\") UUID ePersonUuid,\n+                                                     @Parameter(value = \"scriptName\") String scriptName,\n+                                                     @Parameter(value = \"processStatus\") String processStatusString,\n+                                                     Pageable pageable)\n+        throws SQLException {\n+        if (StringUtils.isBlank(scriptName) && ePersonUuid == null && StringUtils.isBlank(processStatusString)) {\n+            throw new DSpaceBadRequestException(\"Either a name, user UUID or ProcessStatus should be provided\");\n+        }\n+\n+        Context context = obtainContext();\n+        EPerson ePerson = epersonService.find(context, ePersonUuid);\n+        if (ePersonUuid != null && ePerson == null) {\n+            throw new DSpaceBadRequestException(\"No EPerson with the given UUID is found\");\n+        }\n+\n+        ProcessStatus processStatus = StringUtils.isBlank(processStatusString) ? null :\n+            ProcessStatus.valueOf(processStatusString);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4389fa33c6f8257b1874c6ed4731aa98c80d676c"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyNDI0Nw==", "bodyText": "why do you need to explicitly restrict to these values?\nIs this because I mentioned them in the contract, because I simply copied it from https://github.com/DSpace/Rest7Contract/blob/main/processes-endpoint.md#execution-details", "url": "https://github.com/DSpace/DSpace/pull/2931#discussion_r482924247", "createdAt": "2020-09-03T12:01:40Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ProcessRestRepository.java", "diffHunk": "@@ -135,6 +150,104 @@ protected void delete(Context context, Integer integer)\n         }\n     }\n \n+    /**\n+     * Search method that will take Parameters and return a list of {@link ProcessRest} objects\n+     * based on the {@link Process} objects that were in the databank that adhere to these params\n+     * @param ePersonUuid   The UUID for the EPerson that started the Process\n+     * @param scriptName    The name of the Script for which the Process belongs to\n+     * @param processStatusString   The status of the Process\n+     * @param pageable      The pageable\n+     * @return              A page of {@link ProcessRest} objects adhering to the params\n+     * @throws SQLException If something goes wrong\n+     */\n+    @SearchRestMethod(name = \"byProperty\")\n+    @PreAuthorize(\"hasAuthority('ADMIN')\")\n+    public Page<ProcessRest> findProcessesByProperty(@Parameter(value = \"userId\") UUID ePersonUuid,\n+                                                     @Parameter(value = \"scriptName\") String scriptName,\n+                                                     @Parameter(value = \"processStatus\") String processStatusString,\n+                                                     Pageable pageable)\n+        throws SQLException {\n+        if (StringUtils.isBlank(scriptName) && ePersonUuid == null && StringUtils.isBlank(processStatusString)) {\n+            throw new DSpaceBadRequestException(\"Either a name, user UUID or ProcessStatus should be provided\");\n+        }\n+\n+        Context context = obtainContext();\n+        EPerson ePerson = epersonService.find(context, ePersonUuid);\n+        if (ePersonUuid != null && ePerson == null) {\n+            throw new DSpaceBadRequestException(\"No EPerson with the given UUID is found\");\n+        }\n+\n+        ProcessStatus processStatus = StringUtils.isBlank(processStatusString) ? null :\n+            ProcessStatus.valueOf(processStatusString);\n+        if (processStatus != null && processStatus != ProcessStatus.RUNNING && processStatus != ProcessStatus.COMPLETED", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4389fa33c6f8257b1874c6ed4731aa98c80d676c"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyNzQ2Nw==", "bodyText": "can you also add a test with the other user ID (can be in the same method)\nOtherwise you're only testing for the current user (the user from the token)", "url": "https://github.com/DSpace/DSpace/pull/2931#discussion_r482927467", "createdAt": "2020-09-03T12:07:39Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/ProcessRestRepositoryIT.java", "diffHunk": "@@ -322,6 +324,447 @@ public void getProcessFilesTypesRandomProcessId() throws Exception {\n \n     }\n \n+    @Test\n+    public void searchProcessTestForbidden() throws Exception {\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void searchProcessTestUnauthorized() throws Exception {\n+\n+        getClient().perform(get(\"/api/system/processes/search/byProperty\"))\n+                        .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUser() throws Exception {\n+        Process newProcess = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess4 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess5 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess6 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess7 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters).build();\n+        Process newProcess8 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters).build();\n+        Process newProcess9 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters).build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4389fa33c6f8257b1874c6ed4731aa98c80d676c"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkzMDE2Mg==", "bodyText": "With the name searchProcessTestByUserSortedOnDefault, I did expect no sort parameters. Did I misinterpret the goal of this method?", "url": "https://github.com/DSpace/DSpace/pull/2931#discussion_r482930162", "createdAt": "2020-09-03T12:12:21Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/ProcessRestRepositoryIT.java", "diffHunk": "@@ -322,6 +324,447 @@ public void getProcessFilesTypesRandomProcessId() throws Exception {\n \n     }\n \n+    @Test\n+    public void searchProcessTestForbidden() throws Exception {\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void searchProcessTestUnauthorized() throws Exception {\n+\n+        getClient().perform(get(\"/api/system/processes/search/byProperty\"))\n+                        .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUser() throws Exception {\n+        Process newProcess = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess4 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess5 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess6 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess7 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters).build();\n+        Process newProcess8 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters).build();\n+        Process newProcess9 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters).build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                .param(\"userId\", admin.getID().toString()))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", containsInAnyOrder(\n+                            ProcessMatcher.matchProcess(process.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        process.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess7.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess7.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess8.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess8.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess9.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess9.getID(), parameters, ProcessStatus.SCHEDULED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 4))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByProcessStatus() throws Exception {\n+        Process newProcess = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess4 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess5 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess6 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess7 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+        Process newProcess8 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters).build();\n+        Process newProcess9 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"processStatus\", \"FAILED\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", containsInAnyOrder(\n+                            ProcessMatcher.matchProcess(newProcess7.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess7.getID(), parameters, ProcessStatus.FAILED),\n+                            ProcessMatcher.matchProcess(newProcess9.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess9.getID(), parameters, ProcessStatus.FAILED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 2))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByScriptName() throws Exception {\n+        Process newProcess = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess4 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess5 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess6 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess7 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+        Process newProcess8 = ProcessBuilder.createProcess(context, admin, \"another-mock-script\", parameters).build();\n+        Process newProcess9 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"scriptName\", \"another-mock-script\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", containsInAnyOrder(\n+                            ProcessMatcher.matchProcess(newProcess8.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess8.getID(), parameters, ProcessStatus.SCHEDULED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 1))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByScriptNameAndUserId() throws Exception {\n+        Process newProcess = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess4 = ProcessBuilder.createProcess(context, eperson, \"another-mock-script\", parameters).build();\n+        Process newProcess5 = ProcessBuilder.createProcess(context, eperson, \"another-mock-script\", parameters).build();\n+        Process newProcess6 = ProcessBuilder.createProcess(context, eperson, \"another-mock-script\", parameters).build();\n+        Process newProcess7 = ProcessBuilder.createProcess(context, admin, \"another-mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+        Process newProcess8 = ProcessBuilder.createProcess(context, admin, \"another-mock-script\", parameters).build();\n+        Process newProcess9 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"scriptName\", \"another-mock-script\")\n+                                     .param(\"userId\", admin.getID().toString()))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", containsInAnyOrder(\n+                            ProcessMatcher.matchProcess(newProcess7.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess7.getID(), parameters, ProcessStatus.FAILED),\n+                            ProcessMatcher.matchProcess(newProcess8.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess8.getID(), parameters, ProcessStatus.SCHEDULED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 2))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserIdAndProcessStatus() throws Exception {\n+        Process newProcess = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+        Process newProcess4 = ProcessBuilder.createProcess(context, eperson, \"another-mock-script\", parameters).build();\n+        Process newProcess5 = ProcessBuilder.createProcess(context, eperson, \"another-mock-script\", parameters).build();\n+        Process newProcess6 = ProcessBuilder.createProcess(context, eperson, \"another-mock-script\", parameters).build();\n+        Process newProcess7 = ProcessBuilder.createProcess(context, admin, \"another-mock-script\", parameters).build();\n+        Process newProcess8 = ProcessBuilder.createProcess(context, admin, \"another-mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+        Process newProcess9 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"processStatus\", \"FAILED\")\n+                                     .param(\"userId\", admin.getID().toString()))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", containsInAnyOrder(\n+                            ProcessMatcher.matchProcess(newProcess9.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess9.getID(), parameters, ProcessStatus.FAILED),\n+                            ProcessMatcher.matchProcess(newProcess8.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess8.getID(), parameters, ProcessStatus.FAILED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 2))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserIdAndProcessStatusAndScriptName() throws Exception {\n+        Process newProcess = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+        Process newProcess4 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess5 = ProcessBuilder.createProcess(context, eperson, \"another-mock-script\", parameters).build();\n+        Process newProcess6 = ProcessBuilder.createProcess(context, eperson, \"another-mock-script\", parameters).build();\n+        Process newProcess7 = ProcessBuilder.createProcess(context, admin, \"another-mock-script\", parameters).build();\n+        Process newProcess8 = ProcessBuilder.createProcess(context, admin, \"another-mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+        Process newProcess9 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters).build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"processStatus\", \"FAILED\")\n+                                     .param(\"userId\", eperson.getID().toString())\n+                                     .param(\"scriptName\", \"mock-script\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", containsInAnyOrder(\n+                            ProcessMatcher.matchProcess(\"mock-script\",\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess1.getID(), parameters, ProcessStatus.FAILED),\n+                            ProcessMatcher.matchProcess(\"mock-script\",\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess3.getID(), parameters, ProcessStatus.FAILED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 2))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestNoParametersBadRequest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\"))\n+                        .andExpect(status().isBadRequest());\n+    }\n+\n+    @Test\n+    public void searchProcessTestInvalidProcessStatusParamBadRequest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"processStatus\", \"SCHEDULED\"))\n+                        .andExpect(status().isBadRequest());\n+    }\n+\n+    @Test\n+    public void searchProcessTestInvalidEPersonUuid() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"userId\", UUID.randomUUID().toString()))\n+                        .andExpect(status().isBadRequest());\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserSortedOnStartTimeAsc() throws Exception {\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"10/01/1990\", \"20/01/1990\").build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"11/01/1990\", \"19/01/1990\").build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"12/01/1990\", \"18/01/1990\").build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"userId\", eperson.getID().toString())\n+                                    .param(\"sort\", \"startTime,asc\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", contains(\n+                            ProcessMatcher.matchProcess(newProcess1.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess1.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess2.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess2.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess3.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess3.getID(), parameters, ProcessStatus.SCHEDULED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 3))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserSortedOnStartTimeDesc() throws Exception {\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"10/01/1990\", \"20/01/1990\").build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"11/01/1990\", \"19/01/1990\").build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"12/01/1990\", \"18/01/1990\").build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"userId\", eperson.getID().toString())\n+                                     .param(\"sort\", \"startTime,desc\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", contains(\n+                            ProcessMatcher.matchProcess(newProcess3.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess3.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess2.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess2.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess1.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess1.getID(), parameters, ProcessStatus.SCHEDULED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 3))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserSortedOnEndTimeAsc() throws Exception {\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"10/01/1990\", \"20/01/1990\").build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"11/01/1990\", \"19/01/1990\").build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"12/01/1990\", \"18/01/1990\").build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"userId\", eperson.getID().toString())\n+                                     .param(\"sort\", \"endTime,asc\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", contains(\n+                            ProcessMatcher.matchProcess(newProcess3.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess3.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess2.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess2.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess1.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess1.getID(), parameters, ProcessStatus.SCHEDULED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 3))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserSortedOnEndTimeDesc() throws Exception {\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"10/01/1990\", \"20/01/1990\").build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"11/01/1990\", \"19/01/1990\").build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"12/01/1990\", \"18/01/1990\").build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"userId\", eperson.getID().toString())\n+                                     .param(\"sort\", \"endTime,desc\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", contains(\n+                            ProcessMatcher.matchProcess(newProcess1.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess1.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess2.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess2.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess3.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess3.getID(), parameters, ProcessStatus.SCHEDULED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 3))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserSortedOnMultipleBadRequest() throws Exception {\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"10/01/1990\", \"20/01/1990\").build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"11/01/1990\", \"19/01/1990\").build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"12/01/1990\", \"18/01/1990\").build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"userId\", eperson.getID().toString())\n+                                     .param(\"sort\", \"endTime,desc\")\n+                                     .param(\"sort\", \"startTime,desc\"))\n+                        .andExpect(status().isBadRequest());\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserSortedOnDefault() throws Exception {\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"10/01/1990\", \"20/01/1990\").build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"11/01/1990\", \"19/01/1990\").build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"12/01/1990\", \"18/01/1990\").build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"userId\", eperson.getID().toString())\n+                                     .param(\"sort\", \"startTime,desc\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4389fa33c6f8257b1874c6ed4731aa98c80d676c"}, "originalPosition": 414}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkzMDU4MA==", "bodyText": "isn't an invalid search option supposed to throw an exception?", "url": "https://github.com/DSpace/DSpace/pull/2931#discussion_r482930580", "createdAt": "2020-09-03T12:12:52Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/ProcessRestRepositoryIT.java", "diffHunk": "@@ -322,6 +324,447 @@ public void getProcessFilesTypesRandomProcessId() throws Exception {\n \n     }\n \n+    @Test\n+    public void searchProcessTestForbidden() throws Exception {\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void searchProcessTestUnauthorized() throws Exception {\n+\n+        getClient().perform(get(\"/api/system/processes/search/byProperty\"))\n+                        .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUser() throws Exception {\n+        Process newProcess = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess4 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess5 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess6 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess7 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters).build();\n+        Process newProcess8 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters).build();\n+        Process newProcess9 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters).build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                .param(\"userId\", admin.getID().toString()))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", containsInAnyOrder(\n+                            ProcessMatcher.matchProcess(process.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        process.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess7.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess7.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess8.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess8.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess9.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess9.getID(), parameters, ProcessStatus.SCHEDULED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 4))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByProcessStatus() throws Exception {\n+        Process newProcess = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess4 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess5 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess6 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess7 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+        Process newProcess8 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters).build();\n+        Process newProcess9 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"processStatus\", \"FAILED\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", containsInAnyOrder(\n+                            ProcessMatcher.matchProcess(newProcess7.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess7.getID(), parameters, ProcessStatus.FAILED),\n+                            ProcessMatcher.matchProcess(newProcess9.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess9.getID(), parameters, ProcessStatus.FAILED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 2))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByScriptName() throws Exception {\n+        Process newProcess = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess4 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess5 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess6 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess7 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+        Process newProcess8 = ProcessBuilder.createProcess(context, admin, \"another-mock-script\", parameters).build();\n+        Process newProcess9 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"scriptName\", \"another-mock-script\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", containsInAnyOrder(\n+                            ProcessMatcher.matchProcess(newProcess8.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess8.getID(), parameters, ProcessStatus.SCHEDULED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 1))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByScriptNameAndUserId() throws Exception {\n+        Process newProcess = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess4 = ProcessBuilder.createProcess(context, eperson, \"another-mock-script\", parameters).build();\n+        Process newProcess5 = ProcessBuilder.createProcess(context, eperson, \"another-mock-script\", parameters).build();\n+        Process newProcess6 = ProcessBuilder.createProcess(context, eperson, \"another-mock-script\", parameters).build();\n+        Process newProcess7 = ProcessBuilder.createProcess(context, admin, \"another-mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+        Process newProcess8 = ProcessBuilder.createProcess(context, admin, \"another-mock-script\", parameters).build();\n+        Process newProcess9 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"scriptName\", \"another-mock-script\")\n+                                     .param(\"userId\", admin.getID().toString()))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", containsInAnyOrder(\n+                            ProcessMatcher.matchProcess(newProcess7.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess7.getID(), parameters, ProcessStatus.FAILED),\n+                            ProcessMatcher.matchProcess(newProcess8.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess8.getID(), parameters, ProcessStatus.SCHEDULED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 2))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserIdAndProcessStatus() throws Exception {\n+        Process newProcess = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+        Process newProcess4 = ProcessBuilder.createProcess(context, eperson, \"another-mock-script\", parameters).build();\n+        Process newProcess5 = ProcessBuilder.createProcess(context, eperson, \"another-mock-script\", parameters).build();\n+        Process newProcess6 = ProcessBuilder.createProcess(context, eperson, \"another-mock-script\", parameters).build();\n+        Process newProcess7 = ProcessBuilder.createProcess(context, admin, \"another-mock-script\", parameters).build();\n+        Process newProcess8 = ProcessBuilder.createProcess(context, admin, \"another-mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+        Process newProcess9 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"processStatus\", \"FAILED\")\n+                                     .param(\"userId\", admin.getID().toString()))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", containsInAnyOrder(\n+                            ProcessMatcher.matchProcess(newProcess9.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess9.getID(), parameters, ProcessStatus.FAILED),\n+                            ProcessMatcher.matchProcess(newProcess8.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess8.getID(), parameters, ProcessStatus.FAILED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 2))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserIdAndProcessStatusAndScriptName() throws Exception {\n+        Process newProcess = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+        Process newProcess4 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess5 = ProcessBuilder.createProcess(context, eperson, \"another-mock-script\", parameters).build();\n+        Process newProcess6 = ProcessBuilder.createProcess(context, eperson, \"another-mock-script\", parameters).build();\n+        Process newProcess7 = ProcessBuilder.createProcess(context, admin, \"another-mock-script\", parameters).build();\n+        Process newProcess8 = ProcessBuilder.createProcess(context, admin, \"another-mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+        Process newProcess9 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters).build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"processStatus\", \"FAILED\")\n+                                     .param(\"userId\", eperson.getID().toString())\n+                                     .param(\"scriptName\", \"mock-script\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", containsInAnyOrder(\n+                            ProcessMatcher.matchProcess(\"mock-script\",\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess1.getID(), parameters, ProcessStatus.FAILED),\n+                            ProcessMatcher.matchProcess(\"mock-script\",\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess3.getID(), parameters, ProcessStatus.FAILED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 2))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestNoParametersBadRequest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\"))\n+                        .andExpect(status().isBadRequest());\n+    }\n+\n+    @Test\n+    public void searchProcessTestInvalidProcessStatusParamBadRequest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"processStatus\", \"SCHEDULED\"))\n+                        .andExpect(status().isBadRequest());\n+    }\n+\n+    @Test\n+    public void searchProcessTestInvalidEPersonUuid() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"userId\", UUID.randomUUID().toString()))\n+                        .andExpect(status().isBadRequest());\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserSortedOnStartTimeAsc() throws Exception {\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"10/01/1990\", \"20/01/1990\").build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"11/01/1990\", \"19/01/1990\").build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"12/01/1990\", \"18/01/1990\").build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"userId\", eperson.getID().toString())\n+                                    .param(\"sort\", \"startTime,asc\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", contains(\n+                            ProcessMatcher.matchProcess(newProcess1.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess1.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess2.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess2.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess3.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess3.getID(), parameters, ProcessStatus.SCHEDULED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 3))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserSortedOnStartTimeDesc() throws Exception {\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"10/01/1990\", \"20/01/1990\").build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"11/01/1990\", \"19/01/1990\").build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"12/01/1990\", \"18/01/1990\").build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"userId\", eperson.getID().toString())\n+                                     .param(\"sort\", \"startTime,desc\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", contains(\n+                            ProcessMatcher.matchProcess(newProcess3.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess3.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess2.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess2.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess1.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess1.getID(), parameters, ProcessStatus.SCHEDULED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 3))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserSortedOnEndTimeAsc() throws Exception {\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"10/01/1990\", \"20/01/1990\").build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"11/01/1990\", \"19/01/1990\").build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"12/01/1990\", \"18/01/1990\").build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"userId\", eperson.getID().toString())\n+                                     .param(\"sort\", \"endTime,asc\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", contains(\n+                            ProcessMatcher.matchProcess(newProcess3.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess3.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess2.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess2.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess1.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess1.getID(), parameters, ProcessStatus.SCHEDULED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 3))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserSortedOnEndTimeDesc() throws Exception {\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"10/01/1990\", \"20/01/1990\").build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"11/01/1990\", \"19/01/1990\").build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"12/01/1990\", \"18/01/1990\").build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"userId\", eperson.getID().toString())\n+                                     .param(\"sort\", \"endTime,desc\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", contains(\n+                            ProcessMatcher.matchProcess(newProcess1.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess1.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess2.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess2.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess3.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess3.getID(), parameters, ProcessStatus.SCHEDULED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 3))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserSortedOnMultipleBadRequest() throws Exception {\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"10/01/1990\", \"20/01/1990\").build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"11/01/1990\", \"19/01/1990\").build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"12/01/1990\", \"18/01/1990\").build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"userId\", eperson.getID().toString())\n+                                     .param(\"sort\", \"endTime,desc\")\n+                                     .param(\"sort\", \"startTime,desc\"))\n+                        .andExpect(status().isBadRequest());\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserSortedOnDefault() throws Exception {\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"10/01/1990\", \"20/01/1990\").build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"11/01/1990\", \"19/01/1990\").build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"12/01/1990\", \"18/01/1990\").build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"userId\", eperson.getID().toString())\n+                                     .param(\"sort\", \"startTime,desc\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", contains(\n+                            ProcessMatcher.matchProcess(newProcess3.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess3.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess2.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess2.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess1.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess1.getID(), parameters, ProcessStatus.SCHEDULED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 3))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserSortedOnNonExistingIsSortedAsDefault() throws Exception {\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"10/01/1990\", \"20/01/1990\").build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"11/01/1990\", \"19/01/1990\").build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"12/01/1990\", \"18/01/1990\").build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"userId\", eperson.getID().toString())\n+                                     .param(\"sort\", \"eaz,desc\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4389fa33c6f8257b1874c6ed4731aa98c80d676c"}, "originalPosition": 444}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13b59f9522c752f66455f2b83d6f3f67971c81fb", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/13b59f9522c752f66455f2b83d6f3f67971c81fb", "committedDate": "2020-09-08T09:13:39Z", "message": "[Task 73021] applied feedback to the scripts&processes search endpoint"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1MjAxODEx", "url": "https://github.com/DSpace/DSpace/pull/2931#pullrequestreview-485201811", "createdAt": "2020-09-09T16:36:47Z", "commit": {"oid": "13b59f9522c752f66455f2b83d6f3f67971c81fb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f3719258c08cbd8bf9919316370419fabda72a9", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/6f3719258c08cbd8bf9919316370419fabda72a9", "committedDate": "2020-09-14T12:48:02Z", "message": "Merge remote-tracking branch 'dspace/main' into w2p-72498_scripts-and-processes-search\n\nConflicts:\n\tdspace-api/src/main/java/org/dspace/scripts/ProcessServiceImpl.java\n\tdspace-api/src/main/java/org/dspace/scripts/service/ProcessService.java\n\tdspace-server-webapp/src/test/java/org/dspace/app/rest/ProcessRestRepositoryIT.java\n\tdspace-server-webapp/src/test/java/org/dspace/app/rest/ScriptRestRepositoryIT.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNjA4NDY2", "url": "https://github.com/DSpace/DSpace/pull/2931#pullrequestreview-490608466", "createdAt": "2020-09-17T13:43:06Z", "commit": {"oid": "6f3719258c08cbd8bf9919316370419fabda72a9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1319, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}