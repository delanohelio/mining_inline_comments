{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwODU2Nzkw", "number": 2934, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoxNDoyNVrOEfEDbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoyODozNlrOEfEWpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDA3NzI1OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/test/java/org/dspace/eperson/GroupTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoxNDoyNVrOHLGl9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoxNDoyNVrOHLGl9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQwNDQwNw==", "bodyText": "Is this System.out really needed?  It seems like something we should remove as it's not used in tests.", "url": "https://github.com/DSpace/DSpace/pull/2934#discussion_r481404407", "createdAt": "2020-09-01T20:14:25Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/test/java/org/dspace/eperson/GroupTest.java", "diffHunk": "@@ -171,7 +171,7 @@ public void findByName() throws SQLException {\n     public void findAll() throws SQLException {\n         List<Group> groups = groupService.findAll(context, null);\n         assertThat(\"findAll 1\", groups, notNullValue());\n-        System.out.println(\"TEST GROUP OUTPUT \" + groups);\n+        System.out.println(\"TEST GROUP OUTPUT_TYPE \" + groups);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "959109a6a1f29bb372ee61acc82370ecadfa629b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDA3OTk2OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ProcessOutputLinkRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoxNTowNVrOHLGncg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoxNTowNVrOHLGncg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQwNDc4Ng==", "bodyText": "Please add JavaDocs at the top of this new Class to describe it", "url": "https://github.com/DSpace/DSpace/pull/2934#discussion_r481404786", "createdAt": "2020-09-01T20:15:05Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ProcessOutputLinkRepository.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.sql.SQLException;\n+import javax.annotation.Nullable;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.dspace.app.rest.model.BitstreamRest;\n+import org.dspace.app.rest.model.ProcessRest;\n+import org.dspace.app.rest.projection.Projection;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Bitstream;\n+import org.dspace.core.Context;\n+import org.dspace.scripts.Process;\n+import org.dspace.scripts.service.ProcessService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+@Component(ProcessRest.CATEGORY + \".\" + ProcessRest.NAME + \".\" + ProcessRest.OUTPUT)\n+public class ProcessOutputLinkRepository extends AbstractDSpaceRestRepository implements LinkRestRepository {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "959109a6a1f29bb372ee61acc82370ecadfa629b"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDA4MzIxOnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ProcessOutputLinkRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoxNTo0OFrOHLGpPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoxNTo0OFrOHLGpPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQwNTI0Nw==", "bodyText": "The above JavaDocs are somehow double-commented (and misaligned).  You can remove all the // on each line to line them back up.", "url": "https://github.com/DSpace/DSpace/pull/2934#discussion_r481405247", "createdAt": "2020-09-01T20:15:48Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ProcessOutputLinkRepository.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.sql.SQLException;\n+import javax.annotation.Nullable;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.dspace.app.rest.model.BitstreamRest;\n+import org.dspace.app.rest.model.ProcessRest;\n+import org.dspace.app.rest.projection.Projection;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Bitstream;\n+import org.dspace.core.Context;\n+import org.dspace.scripts.Process;\n+import org.dspace.scripts.service.ProcessService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+@Component(ProcessRest.CATEGORY + \".\" + ProcessRest.NAME + \".\" + ProcessRest.OUTPUT)\n+public class ProcessOutputLinkRepository extends AbstractDSpaceRestRepository implements LinkRestRepository {\n+\n+    @Autowired\n+    private ProcessService processService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    //    /**\n+//     * This method will retrieve the list of {@link ProcessLog} objects from the {@link Process} as defined through\n+//     the\n+//     * given ID in the rest call and it'll wrap this in a {@link ProcessOutputRest} object to return these\n+//     * @param request           The current request\n+//     * @param processId         The given processId for the {@link Process}\n+//     * @param optionalPageable  Pageable if applicable\n+//     * @param projection        The current projection\n+//     * @return                  The {@link ProcessOutputRest} containing the list of all {@link ProcessLog} for the\n+//     *                          given {@link Process}\n+//     * @throws SQLException         If something goes wrong\n+//     * @throws AuthorizeException   If something goes wrong\n+//     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "959109a6a1f29bb372ee61acc82370ecadfa629b"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDA4ODI4OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/scripts/service/ProcessService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoxNzoxN1rOHLGsQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoxNzoxN1rOHLGsQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQwNjAxOA==", "bodyText": "New methods both need JavaDocs added", "url": "https://github.com/DSpace/DSpace/pull/2934#discussion_r481406018", "createdAt": "2020-09-01T20:17:17Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/scripts/service/ProcessService.java", "diffHunk": "@@ -189,4 +190,7 @@ public void appendFile(Context context, Process process, InputStream is, String\n      */\n     public List<String> getFileTypesForProcessBitstreams(Context context, Process process);\n \n+    void appendLog(int processId, String scriptName, String output, ProcessLogLevel processLogLevel) throws IOException;\n+    void createLogBitstream(Context context, Process process)\n+             throws IOException, SQLException, AuthorizeException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "959109a6a1f29bb372ee61acc82370ecadfa629b"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDA5MDQwOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/scripts/ProcessServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoxNzo1OVrOHLGtlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoxNzo1OVrOHLGtlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQwNjM1Ng==", "bodyText": "Missing an @Override", "url": "https://github.com/DSpace/DSpace/pull/2934#discussion_r481406356", "createdAt": "2020-09-01T20:17:59Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/scripts/ProcessServiceImpl.java", "diffHunk": "@@ -245,4 +255,45 @@ public int countTotal(Context context) throws SQLException {\n         return new ArrayList<>(fileTypesSet);\n     }\n \n+    @Override\n+    public void appendLog(int processId, String scriptName, String output, ProcessLogLevel processLogLevel)\n+            throws IOException {\n+        File tmpDir = FileUtils.getTempDirectory();\n+        File tempFile = new File(tmpDir, scriptName + processId + \".log\");\n+        FileWriter out = new FileWriter(tempFile, true);\n+        try {\n+            try (BufferedWriter writer = new BufferedWriter(out)) {\n+                writer.append(formatLogLine(processId, scriptName, output, processLogLevel));\n+                writer.newLine();\n+            }\n+        } finally {\n+            out.close();\n+        }\n+    }\n+\n+    public void createLogBitstream(Context context, Process process)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "959109a6a1f29bb372ee61acc82370ecadfa629b"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDEwMTkyOnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/scripts/handler/impl/RestDSpaceRunnableHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoyMToyNlrOHLG0hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoyMToyNlrOHLG0hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQwODEzMg==", "bodyText": "This method accidentally removed the finally clause.  It should be added back in to ensure that the Context is aborted whenever an error occurs.", "url": "https://github.com/DSpace/DSpace/pull/2934#discussion_r481408132", "createdAt": "2020-09-01T20:21:26Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/scripts/handler/impl/RestDSpaceRunnableHandler.java", "diffHunk": "@@ -96,14 +103,18 @@ public void handleCompletion() {\n         try {\n             Process process = processService.find(context, processId);\n             processService.complete(context, process);\n-            context.complete();\n             logInfo(\"The script has completed\");\n+\n+            addLogBitstreamToProcess(context);\n+\n+            context.complete();\n         } catch (SQLException e) {\n             log.error(\"RestDSpaceRunnableHandler with process: \" + processId + \" could not be completed\", e);\n-        } finally {\n-            if (context.isValid()) {\n-                context.abort();\n-            }\n+        } catch (IOException | AuthorizeException e) {\n+            log.error(\"RestDSpaceRunnableHandler with process: \" + processId + \" could not be completed due to an \" +\n+                              \"error with the logging bitstream\", e);\n+        } catch (Exception e) {\n+            log.error(e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "959109a6a1f29bb372ee61acc82370ecadfa629b"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDEwODM0OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/ProcessRestRepositoryIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoyMzoxOFrOHLG4PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoyMzoxOFrOHLG4PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQwOTA4NQ==", "bodyText": "Why is this entire test commented out?", "url": "https://github.com/DSpace/DSpace/pull/2934#discussion_r481409085", "createdAt": "2020-09-01T20:23:18Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/ProcessRestRepositoryIT.java", "diffHunk": "@@ -322,6 +322,50 @@ public void getProcessFilesTypesRandomProcessId() throws Exception {\n \n     }\n \n+//    @Test\n+//    public void getProcessOutput() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "959109a6a1f29bb372ee61acc82370ecadfa629b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDEyNjQ2OnYy", "diffSide": "RIGHT", "path": "dspace/config/spring/api/scripts.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoyODozNlrOHLHC9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwODoyNjoxNVrOHOSQ7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQxMTgzMA==", "bodyText": "Could you add a comment to explain why this is set to 5?\nI'm also curious why the production version of dspaceRunnableThreadExecutor is of type ThreadPoolTaskExecutor, while all the tests use SyncTaskExecutor.  Shouldn't the tests use the same type of TaskExecutor as the main code?  If not, I think we should add an inline comment to describe the reason for the difference (it's not obvious to me).", "url": "https://github.com/DSpace/DSpace/pull/2934#discussion_r481411830", "createdAt": "2020-09-01T20:28:36Z", "author": {"login": "tdonohue"}, "path": "dspace/config/spring/api/scripts.xml", "diffHunk": "@@ -4,6 +4,10 @@\n     xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n            http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\">\n \n+    <bean id=\"dspaceRunnableThreadExecutor\" class=\"org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor\">\n+        <property name=\"corePoolSize\" value=\"5\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "959109a6a1f29bb372ee61acc82370ecadfa629b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc0MTM1OA==", "bodyText": "Could you add a comment to explain why this is set to 5?\nThere is no particular reason that this is set to 5, it\u2019s just a default to not allow too many threads to be working at the same time and potentially cause memory issues or other performance issues.  This was previously also set to 5, so we kept this as is\nI\u2019m also curious why the production version of dspaceRunnableThreadExecutor is of type ThreadPoolTaskExecutor, while all the tests use SyncTaskExecutor. Shouldn\u2019t the tests use the same type of TaskExecutor as the main code? If not, I think we should add an inline comment to describe the reason for the difference (it\u2019s not obvious to me).\nThe DSpaceRunnableThreadExecutor is responsible for executing the Process. This Process will either run synchronously or asynchronously.\nIn the production code, it\u2019s desirable that this happens asynchronously because we don\u2019t want the user to wait for his/her REST response until a Process is done with the execution, it\u2019ll return almost immediately and give a \u201crunning\u201d or \u201cscheduled\u201d if it\u2019s not done yet, but it\u2019ll continue to run in a different thread and the Process db object will be updated when this background thread is done running.\nThis way the user won\u2019t ever have to wait ages for the REST reply even when executing large scripts. We don\u2019t want the user to wait or any front-ends to be blocked whilst waiting for a response on the call when it could just be ran in the background and update the db when it\u2019s finished executing.\nIn the test code however, we want to actually test things after a REST call is made. This means that we can\u2019t have processes making alterations to the DB or be stuck in execution whilst the assertions are being tested in the tests. The result that\u2019s coming from the REST api has to be consistent and represent a state in which the Process is fully finished executing, whether it\u2019s completed or failed. This is necessary because otherwise our tests aren\u2019t going to be the same every time they\u2019re ran and they\u2019ll cause failures and inconsistencies.\nImplementing this SyncThreadExecutor ensures that any Processes started by the DSpaceRunnableThreadExecutor will have to fully run and be fully done before the REST response is sent. This means that we can check for completed or failed instead of sometimes running into \u201crunning\u201d status when the Process would still be executing. We\u2019re simply forcing the Process to fully finish its execution before we construct the REST response so that it\u2019s always consistent and non-variable.\nIf you remember from a while back, I mentioned that the tests were failing inconsistently, this was mostly because of the executor that was used.\nBecause of the asynchronous run that was being done at that point in time, the tests did not correctly await the responses/checked the assertions as was described above.\nWe did removed an unneeded dspaceRunnableThreadExecutor in the api scripts.xml. This is a bean that\u2019s only needed in the server module, so it should be in the REST package only if I\u2019m not horribly mistaken", "url": "https://github.com/DSpace/DSpace/pull/2934#discussion_r484741358", "createdAt": "2020-09-08T08:26:15Z", "author": {"login": "jonas-atmire"}, "path": "dspace/config/spring/api/scripts.xml", "diffHunk": "@@ -4,6 +4,10 @@\n     xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n            http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\">\n \n+    <bean id=\"dspaceRunnableThreadExecutor\" class=\"org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor\">\n+        <property name=\"corePoolSize\" value=\"5\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQxMTgzMA=="}, "originalCommit": {"oid": "959109a6a1f29bb372ee61acc82370ecadfa629b"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1404, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}