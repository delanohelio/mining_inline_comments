{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMTE5OTQ3", "number": 2791, "title": "DS-4514 Start new submission by uploading a Bibliographic File (using Live Import)", "bodyText": "References\nhttps://jira.lyrasis.org/browse/DS-4514\nFixes #2788\nDescription\nThis PR replaces BTE with the live import in the creation of new workspaceitem resulting from the upload of new files.\nAccording to the JIRA ticket the logic has been slightly changed so that at most one file is processed and if the processed file contains more bibliographic entries an exception is raised.\nA Rest Contract PR has been created as well as these aspects were not documented before, see DSpace/RestContract#131\nThis PR includes a new live import provider for extraction from bibtex file (the live import interface has been split between Query and File), moreover the existing pubmed live importer has been refactored to support also the file import. A pubmed xml file has been included in the test file with a corresponding test\nInstructions for Reviewers\nTests available in WorkspaceItemRestRepositoryIT.java\n\ncreateSingleWorkspaceItemFromFileWithOneEntryTest()\ncreateSingleWorkspaceItemFromMultipleFilesWithOneEntryTest()\ncreateSingleWorkspaceItemsFromSingleFileWithMultipleEntriesTest()\n\nList of changes in this PR:\n\nRestResourceController.upload now get a list of files\nImport bibtex files now use live import\nUser can now import pubmed xml\n\nChecklist\nThis checklist provides a reminder of what we are going to look for when reviewing your PR. You need not complete this checklist prior to creating your PR (draft PRs are always welcome). If you are unsure about an item in the checklist, don't hesitate to ask. We're here to help!\n\n My PR is small in size (e.g. less than 1,000 lines of code, not including comments & integration tests). Exceptions may be made if previously agreed upon.\n[  X ] My PR passes Checkstyle validation based on the Code Style Guide.\n[  X ] My PR includes Javadoc for all new (or modified) public methods and classes. It also includes Javadoc for large or complex private methods.\n[  X ] My PR passes all tests and includes new/updated Unit or Integration Tests based on the Code Testing Guide.\n If my PR includes new, third-party dependencies (in any pom.xml), I've made sure their licenses align with the DSpace BSD License based on the Licensing of Contributions documentation.\n[  X ] If my PR modifies the REST API, I've linked to the REST Contract page (or open PR) related to this change. (DSpace/RestContract#131)", "createdAt": "2020-06-25T16:07:33Z", "url": "https://github.com/DSpace/DSpace/pull/2791", "merged": true, "mergeCommit": {"oid": "fe9a7e6a96f260d850969377a57e35e1fee19f21"}, "closed": true, "closedAt": "2020-08-06T13:45:39Z", "author": {"login": "pasqualecvl"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcttsYsgH2gAyNDQwMTE5OTQ3OjY0MDQ2MDkzZDJjYjQ1ZWMyYmNmNmYzMzk2OTUzYzlkMmY5ZjkzMTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8KFXbgFqTQ2MjIyODY5Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "64046093d2cb45ec2bcf6f3396953c9d2f9f9315", "author": {"user": null}, "url": "https://github.com/DSpace/DSpace/commit/64046093d2cb45ec2bcf6f3396953c9d2f9f9315", "committedDate": "2020-06-22T09:46:53Z", "message": "Bibtex file import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aef91df802af0144df8dcc0d040c664d9170741d", "author": {"user": {"login": "pasqualecvl", "name": "Pasquale Cavallo"}}, "url": "https://github.com/DSpace/DSpace/commit/aef91df802af0144df8dcc0d040c664d9170741d", "committedDate": "2020-06-22T13:43:48Z", "message": "Use metadataField as unnamed bean"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ad4b0ed39252e9e58adde4f6ac062df2a43c16e", "author": {"user": {"login": "pasqualecvl", "name": "Pasquale Cavallo"}}, "url": "https://github.com/DSpace/DSpace/commit/8ad4b0ed39252e9e58adde4f6ac062df2a43c16e", "committedDate": "2020-06-22T23:51:59Z", "message": "Implement FileSource in PubmedImportMetadataSourceServiceImpl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c4a46377175fc7caeeacb55f653880b7f7f4d4f", "author": {"user": {"login": "pasqualecvl", "name": "Pasquale Cavallo"}}, "url": "https://github.com/DSpace/DSpace/commit/3c4a46377175fc7caeeacb55f653880b7f7f4d4f", "committedDate": "2020-06-22T23:58:42Z", "message": "pubmed test data"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "530a9d5fac9eee6fdaa075619087fa519fa11b3d", "author": {"user": {"login": "pasqualecvl", "name": "Pasquale Cavallo"}}, "url": "https://github.com/DSpace/DSpace/commit/530a9d5fac9eee6fdaa075619087fa519fa11b3d", "committedDate": "2020-06-23T15:11:56Z", "message": "Tests and minor fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecefb1a30222dbf664f5f3fe59245274111d9875", "author": {"user": {"login": "pasqualecvl", "name": "Pasquale Cavallo"}}, "url": "https://github.com/DSpace/DSpace/commit/ecefb1a30222dbf664f5f3fe59245274111d9875", "committedDate": "2020-06-24T12:52:33Z", "message": "Comment and minor improvements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9208879abffaf2866a3e7460ad3a4f32c0fc5f00", "author": {"user": {"login": "pasqualecvl", "name": "Pasquale Cavallo"}}, "url": "https://github.com/DSpace/DSpace/commit/9208879abffaf2866a3e7460ad3a4f32c0fc5f00", "committedDate": "2020-06-25T09:57:05Z", "message": "Update test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0b92196f3e1489bac5a475369890c0df3fd60cc", "author": {"user": {"login": "pasqualecvl", "name": "Pasquale Cavallo"}}, "url": "https://github.com/DSpace/DSpace/commit/c0b92196f3e1489bac5a475369890c0df3fd60cc", "committedDate": "2020-06-25T11:43:26Z", "message": "Fix multifile import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "014c623256364e8088d710c48c7c73a7de624db4", "author": {"user": {"login": "pasqualecvl", "name": "Pasquale Cavallo"}}, "url": "https://github.com/DSpace/DSpace/commit/014c623256364e8088d710c48c7c73a7de624db4", "committedDate": "2020-06-25T12:15:20Z", "message": "Manage empty or invalid files in multiple submission"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3a95a81f073b8ff09d965c2dae2c193000bee5f", "author": {"user": {"login": "abollini", "name": "Andrea Bollini"}}, "url": "https://github.com/DSpace/DSpace/commit/a3a95a81f073b8ff09d965c2dae2c193000bee5f", "committedDate": "2020-06-29T21:38:16Z", "message": "Merge branch 'master' of https://github.com/DSpace/DSpace into CST-3091"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfc53c98d21b1726c7a921d3ea8f30e1176b2874", "author": {"user": {"login": "pasqualecvl", "name": "Pasquale Cavallo"}}, "url": "https://github.com/DSpace/DSpace/commit/cfc53c98d21b1726c7a921d3ea8f30e1176b2874", "committedDate": "2020-07-01T08:52:49Z", "message": "Live import minor changes + LGTM alert fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb4abb7d515a825d744424dfc99d6606a2b0d756", "author": {"user": {"login": "pasqualecvl", "name": "Pasquale Cavallo"}}, "url": "https://github.com/DSpace/DSpace/commit/eb4abb7d515a825d744424dfc99d6606a2b0d756", "committedDate": "2020-07-01T09:00:31Z", "message": "Merge branch 'CST-3091' of https://github.com/4Science/DSpace into CST-3091"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwOTE0MDMw", "url": "https://github.com/DSpace/DSpace/pull/2791#pullrequestreview-450914030", "createdAt": "2020-07-17T19:41:54Z", "commit": {"oid": "eb4abb7d515a825d744424dfc99d6606a2b0d756"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOTo0MTo1NFrOGzfE0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOTo1OToxMVrOGzfi-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzOTY5OQ==", "bodyText": "Tiny thing. We may want to call this getRecordsCount.... I initially didn't understand what \"Nb\" stands for, but it looks like it's the number/count of records.", "url": "https://github.com/DSpace/DSpace/pull/2791#discussion_r456639699", "createdAt": "2020-07-17T19:41:54Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/importer/external/service/components/QuerySource.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+\n+package org.dspace.importer.external.service.components;\n+\n+import java.util.Collection;\n+\n+import org.dspace.content.Item;\n+import org.dspace.importer.external.datamodel.ImportRecord;\n+import org.dspace.importer.external.datamodel.Query;\n+import org.dspace.importer.external.exception.MetadataSourceException;\n+\n+\n+/**\n+ * Common interface for database-based imports.\n+ *\n+ * @author Roeland Dillen (roeland at atmire dot com)\n+ * @author Pasquale Cavallo (pasquale.cavallo@4science.it)\n+ */\n+\n+public interface QuerySource extends MetadataSource {\n+\n+    /**\n+     * Get a single record from the source.\n+     * The first match will be returned\n+     *\n+     * @param id identifier for the record\n+     * @return a matching record\n+     * @throws MetadataSourceException if the underlying methods throw any exception.\n+     */\n+    public ImportRecord getRecord(String id) throws MetadataSourceException;\n+\n+    /**\n+     * Gets the number of records matching a query\n+     *\n+     * @param query the query in string format\n+     * @return the number of records matching the query\n+     * @throws MetadataSourceException if the underlying methods throw any exception.\n+     */\n+    public int getNbRecords(String query) throws MetadataSourceException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb4abb7d515a825d744424dfc99d6606a2b0d756"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzOTgyOA==", "bodyText": "Same here, I'd call this getRecordsCount to make it clearer.", "url": "https://github.com/DSpace/DSpace/pull/2791#discussion_r456639828", "createdAt": "2020-07-17T19:42:11Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/importer/external/service/components/QuerySource.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+\n+package org.dspace.importer.external.service.components;\n+\n+import java.util.Collection;\n+\n+import org.dspace.content.Item;\n+import org.dspace.importer.external.datamodel.ImportRecord;\n+import org.dspace.importer.external.datamodel.Query;\n+import org.dspace.importer.external.exception.MetadataSourceException;\n+\n+\n+/**\n+ * Common interface for database-based imports.\n+ *\n+ * @author Roeland Dillen (roeland at atmire dot com)\n+ * @author Pasquale Cavallo (pasquale.cavallo@4science.it)\n+ */\n+\n+public interface QuerySource extends MetadataSource {\n+\n+    /**\n+     * Get a single record from the source.\n+     * The first match will be returned\n+     *\n+     * @param id identifier for the record\n+     * @return a matching record\n+     * @throws MetadataSourceException if the underlying methods throw any exception.\n+     */\n+    public ImportRecord getRecord(String id) throws MetadataSourceException;\n+\n+    /**\n+     * Gets the number of records matching a query\n+     *\n+     * @param query the query in string format\n+     * @return the number of records matching the query\n+     * @throws MetadataSourceException if the underlying methods throw any exception.\n+     */\n+    public int getNbRecords(String query) throws MetadataSourceException;\n+\n+    /**\n+     * Gets the number of records matching a query\n+     *\n+     * @param query the query object\n+     * @return the number of records matching the query\n+     * @throws MetadataSourceException if the underlying methods throw any exception.\n+     */\n+    public int getNbRecords(Query query) throws MetadataSourceException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb4abb7d515a825d744424dfc99d6606a2b0d756"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY0MTMyNg==", "bodyText": "Thanks for this update.  This originally seemed odd that we were renaming the parameter.  But, it looks like our Contract does say it should be owningCollection and not collection: https://github.com/DSpace/Rest7Contract/blob/main/workspaceitems.md#multipart-post-method", "url": "https://github.com/DSpace/DSpace/pull/2791#discussion_r456641326", "createdAt": "2020-07-17T19:45:37Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/WorkspaceItemRestRepository.java", "diffHunk": "@@ -360,147 +357,87 @@ protected void delete(Context context, Integer id) throws AuthorizeException {\n \n     @Override\n     public Iterable<WorkspaceItemRest> upload(Context context, HttpServletRequest request,\n-            MultipartFile uploadfile)\n+            List<MultipartFile> uploadfiles)\n         throws SQLException, FileNotFoundException, IOException, AuthorizeException {\n-        File file = Utils.getFile(uploadfile, \"upload-loader\", \"filedataloader\");\n         List<WorkspaceItemRest> results = new ArrayList<>();\n \n-        try {\n-            String uuid = request.getParameter(\"collection\");\n-            if (StringUtils.isBlank(uuid)) {\n-                uuid = configurationService.getProperty(\"submission.default.collection\");\n-            }\n-\n-            Collection collection = null;\n-            if (StringUtils.isNotBlank(uuid)) {\n-                collection = collectionService.find(context, UUID.fromString(uuid));\n-            } else {\n-                collection = collectionService.findAuthorizedOptimized(context, Constants.ADD).get(0);\n-            }\n-\n-            SubmissionConfig submissionConfig =\n-                submissionConfigReader.getSubmissionConfigByCollection(collection.getHandle());\n-\n-\n-            List<ItemSubmissionLookupDTO> tmpResult = new ArrayList<ItemSubmissionLookupDTO>();\n-\n-            TransformationEngine transformationEngine1 = submissionLookupService.getPhase1TransformationEngine();\n-            TransformationSpec spec = new TransformationSpec();\n-            // FIXME this is mostly due to the need to test. The BTE framework has an assert statement that check if the\n-            // number of found record is less than the requested and treat 0 as is, instead, the implementation assume\n-            // 0=unlimited this lead to test failure.\n-            // It is unclear if BTE really respect values other than 0/MAX allowing us to put a protection against heavy\n-            // load\n-            spec.setNumberOfRecords(Integer.MAX_VALUE);\n-            if (transformationEngine1 != null) {\n-                MultipleSubmissionLookupDataLoader dataLoader =\n-                    (MultipleSubmissionLookupDataLoader) transformationEngine1.getDataLoader();\n-\n-                List<String> fileDataLoaders = submissionLookupService.getFileProviders();\n-                for (String fileDataLoader : fileDataLoaders) {\n-                    dataLoader.setFile(file.getAbsolutePath(), fileDataLoader);\n-\n-                    try {\n-                        SubmissionLookupOutputGenerator outputGenerator =\n-                            (SubmissionLookupOutputGenerator) transformationEngine1.getOutputGenerator();\n-                        outputGenerator.setDtoList(new ArrayList<ItemSubmissionLookupDTO>());\n-                        log.debug(\"BTE transformation is about to start!\");\n-                        transformationEngine1.transform(spec);\n-                        log.debug(\"BTE transformation finished!\");\n-                        tmpResult.addAll(outputGenerator.getDtoList());\n-                        if (!tmpResult.isEmpty()) {\n-                            //exit with the results founded on the first data provided\n-                            break;\n-                        }\n-                    } catch (BadTransformationSpec e1) {\n-                        log.error(e1.getMessage(), e1);\n-                    } catch (MalformedSourceException e1) {\n-                        log.error(e1.getMessage(), e1);\n-                    }\n-                }\n-            }\n+        String uuid = request.getParameter(\"owningCollection\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb4abb7d515a825d744424dfc99d6606a2b0d756"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY0Mzg4Mw==", "bodyText": "Tiny thing.  This takes in a file, not an inputstream.  Also, the description here is wrong.  It is not taking in an InputStream, and it also is closing the InputStream it uses to read the file.  So, I think this should be updated.", "url": "https://github.com/DSpace/DSpace/pull/2791#discussion_r456643883", "createdAt": "2020-07-17T19:51:12Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/importer/external/service/ImportService.java", "diffHunk": "@@ -272,6 +296,36 @@ public ImportRecord getRecord(String uri, Query query) throws MetadataSourceExce\n         return importSources.keySet();\n     }\n \n+    /*\n+     * Get a collection of record from InputStream,\n+     * The first match will be return.\n+     * This method doesn't close the InputStream.\n+     * \n+     * @param fileInputStream the input stream to the resource", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb4abb7d515a825d744424dfc99d6606a2b0d756"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY0NTYxMQ==", "bodyText": "Tiny thing here. This comment is wrongly describing the test.  The below test seems to be verifying we only create one workspaceitem, even if we upload multiple bibliographic files.  The test is correct, but this description is incorrect, as we are not creating multiple workspaceitems here.", "url": "https://github.com/DSpace/DSpace/pull/2791#discussion_r456645611", "createdAt": "2020-07-17T19:55:05Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java", "diffHunk": "@@ -907,42 +907,245 @@ public void createMultipleWorkspaceItemFromFileTest() throws Exception {\n                         is(\"My Article\")))\n                 .andExpect(\n                         jsonPath(\"$._embedded.workspaceitems[0]._embedded.collection.id\", is(col1.getID().toString())))\n-                .andExpect(jsonPath(\"$._embedded.workspaceitems[1].sections.traditionalpageone['dc.title'][0].value\",\n-                        is(\"My Article 2\")))\n-                .andExpect(\n-                        jsonPath(\"$._embedded.workspaceitems[1]._embedded.collection.id\", is(col1.getID().toString())))\n-                .andExpect(jsonPath(\"$._embedded.workspaceitems[2].sections.traditionalpageone['dc.title'][0].value\",\n-                        is(\"My Article 3\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[0]\"\n+                     + \".metadata['dc.source'][0].value\",\n+                        is(\"/local/path/bibtex-test.bib\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[0]\"\n+                     + \".metadata['dc.title'][0].value\",\n+                        is(\"bibtex-test.bib\")))\n                 .andExpect(\n-                        jsonPath(\"$._embedded.workspaceitems[2]._embedded.collection.id\", is(col1.getID().toString())))\n-                .andExpect(\n-                        jsonPath(\"$._embedded.workspaceitems[*]._embedded.upload\").doesNotExist())\n+                        jsonPath(\"$._embedded.workspaceitems[*]._embedded.upload\").doesNotExist());\n         ;\n \n         // bulk create workspaceitems explicitly in the col2\n         getClient(authToken).perform(fileUpload(\"/api/submission/workspaceitems\")\n                     .file(bibtexFile)\n-                    .param(\"collection\", col2.getID().toString()))\n+                    .param(\"owningCollection\", col2.getID().toString()))\n                 .andExpect(status().isOk())\n                 .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.traditionalpageone['dc.title'][0].value\",\n                         is(\"My Article\")))\n                 .andExpect(\n                         jsonPath(\"$._embedded.workspaceitems[0]._embedded.collection.id\", is(col2.getID().toString())))\n-                .andExpect(jsonPath(\"$._embedded.workspaceitems[1].sections.traditionalpageone['dc.title'][0].value\",\n-                        is(\"My Article 2\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[0]\"\n+                     + \".metadata['dc.source'][0].value\",\n+                        is(\"/local/path/bibtex-test.bib\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload\"\n+                     + \".files[0].metadata['dc.title'][0].value\",\n+                        is(\"bibtex-test.bib\")))\n                 .andExpect(\n-                        jsonPath(\"$._embedded.workspaceitems[1]._embedded.collection.id\", is(col2.getID().toString())))\n-                .andExpect(jsonPath(\"$._embedded.workspaceitems[2].sections.traditionalpageone['dc.title'][0].value\",\n-                        is(\"My Article 3\")))\n+                        jsonPath(\"$._embedded.workspaceitems[*]._embedded.upload\").doesNotExist());\n+\n+        bibtex.close();\n+    }\n+\n+\n+\n+    @Test\n+    /**\n+     * Test the creation of workspaceitems POSTing to the resource collection endpoint a\n+     * bibtex and pubmed files\n+     *\n+     * @throws Exception\n+     */\n+    public void createSingleWorkspaceItemFromMultipleFilesWithOneEntryTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        //** GIVEN **\n+        //1. A community-collection structure with one parent community with sub-community and two collections.\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+        Collection col2 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 2\")\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+\n+        InputStream bibtex = getClass().getResourceAsStream(\"bibtex-test.bib\");\n+        final MockMultipartFile bibtexFile = new MockMultipartFile(\"file\", \"/local/path/bibtex-test.bib\",\n+            \"application/x-bibtex\", bibtex);\n+        InputStream xmlIS = getClass().getResourceAsStream(\"pubmed-test.xml\");\n+        final MockMultipartFile pubmedFile = new MockMultipartFile(\"file\", \"/local/path/pubmed-test.xml\",\n+            \"application/xml\", xmlIS);\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+        // bulk create workspaceitems in the default collection (col1)\n+        getClient(authToken).perform(fileUpload(\"/api/submission/workspaceitems\")\n+                    .file(bibtexFile).file(pubmedFile))\n+                // bulk create should return 200, 201 (created) is better for single resource\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.traditionalpageone['dc.title'][0].value\",\n+                        is(\"My Article\")))\n                 .andExpect(\n-                        jsonPath(\"$._embedded.workspaceitems[2]._embedded.collection.id\", is(col2.getID().toString())))\n+                        jsonPath(\"$._embedded.workspaceitems[0]._embedded.collection.id\", is(col1.getID().toString())))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[0]\"\n+                     + \".metadata['dc.source'][0].value\",\n+                        is(\"/local/path/bibtex-test.bib\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[0]\"\n+                     + \".metadata['dc.title'][0].value\",\n+                        is(\"bibtex-test.bib\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.traditionalpageone['dc.title'][1].value\")\n+                    .doesNotExist())\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[1]\"\n+                        + \".metadata['dc.source'][0].value\",\n+                            is(\"/local/path/pubmed-test.xml\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[1]\"\n+                        + \".metadata['dc.title'][0].value\",\n+                            is(\"pubmed-test.xml\")));\n+\n+        // bulk create workspaceitems explicitly in the col2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb4abb7d515a825d744424dfc99d6606a2b0d756"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY0NjEyMQ==", "bodyText": "Inline comments here are wrong (on lines 1068 and 1065).  This code is correctly returning a 422 because we don't allow/support bibliographic files that have multiple metadata records.", "url": "https://github.com/DSpace/DSpace/pull/2791#discussion_r456646121", "createdAt": "2020-07-17T19:56:20Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java", "diffHunk": "@@ -907,42 +907,245 @@ public void createMultipleWorkspaceItemFromFileTest() throws Exception {\n                         is(\"My Article\")))\n                 .andExpect(\n                         jsonPath(\"$._embedded.workspaceitems[0]._embedded.collection.id\", is(col1.getID().toString())))\n-                .andExpect(jsonPath(\"$._embedded.workspaceitems[1].sections.traditionalpageone['dc.title'][0].value\",\n-                        is(\"My Article 2\")))\n-                .andExpect(\n-                        jsonPath(\"$._embedded.workspaceitems[1]._embedded.collection.id\", is(col1.getID().toString())))\n-                .andExpect(jsonPath(\"$._embedded.workspaceitems[2].sections.traditionalpageone['dc.title'][0].value\",\n-                        is(\"My Article 3\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[0]\"\n+                     + \".metadata['dc.source'][0].value\",\n+                        is(\"/local/path/bibtex-test.bib\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[0]\"\n+                     + \".metadata['dc.title'][0].value\",\n+                        is(\"bibtex-test.bib\")))\n                 .andExpect(\n-                        jsonPath(\"$._embedded.workspaceitems[2]._embedded.collection.id\", is(col1.getID().toString())))\n-                .andExpect(\n-                        jsonPath(\"$._embedded.workspaceitems[*]._embedded.upload\").doesNotExist())\n+                        jsonPath(\"$._embedded.workspaceitems[*]._embedded.upload\").doesNotExist());\n         ;\n \n         // bulk create workspaceitems explicitly in the col2\n         getClient(authToken).perform(fileUpload(\"/api/submission/workspaceitems\")\n                     .file(bibtexFile)\n-                    .param(\"collection\", col2.getID().toString()))\n+                    .param(\"owningCollection\", col2.getID().toString()))\n                 .andExpect(status().isOk())\n                 .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.traditionalpageone['dc.title'][0].value\",\n                         is(\"My Article\")))\n                 .andExpect(\n                         jsonPath(\"$._embedded.workspaceitems[0]._embedded.collection.id\", is(col2.getID().toString())))\n-                .andExpect(jsonPath(\"$._embedded.workspaceitems[1].sections.traditionalpageone['dc.title'][0].value\",\n-                        is(\"My Article 2\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[0]\"\n+                     + \".metadata['dc.source'][0].value\",\n+                        is(\"/local/path/bibtex-test.bib\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload\"\n+                     + \".files[0].metadata['dc.title'][0].value\",\n+                        is(\"bibtex-test.bib\")))\n                 .andExpect(\n-                        jsonPath(\"$._embedded.workspaceitems[1]._embedded.collection.id\", is(col2.getID().toString())))\n-                .andExpect(jsonPath(\"$._embedded.workspaceitems[2].sections.traditionalpageone['dc.title'][0].value\",\n-                        is(\"My Article 3\")))\n+                        jsonPath(\"$._embedded.workspaceitems[*]._embedded.upload\").doesNotExist());\n+\n+        bibtex.close();\n+    }\n+\n+\n+\n+    @Test\n+    /**\n+     * Test the creation of workspaceitems POSTing to the resource collection endpoint a\n+     * bibtex and pubmed files\n+     *\n+     * @throws Exception\n+     */\n+    public void createSingleWorkspaceItemFromMultipleFilesWithOneEntryTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        //** GIVEN **\n+        //1. A community-collection structure with one parent community with sub-community and two collections.\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+        Collection col2 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 2\")\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+\n+        InputStream bibtex = getClass().getResourceAsStream(\"bibtex-test.bib\");\n+        final MockMultipartFile bibtexFile = new MockMultipartFile(\"file\", \"/local/path/bibtex-test.bib\",\n+            \"application/x-bibtex\", bibtex);\n+        InputStream xmlIS = getClass().getResourceAsStream(\"pubmed-test.xml\");\n+        final MockMultipartFile pubmedFile = new MockMultipartFile(\"file\", \"/local/path/pubmed-test.xml\",\n+            \"application/xml\", xmlIS);\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+        // bulk create workspaceitems in the default collection (col1)\n+        getClient(authToken).perform(fileUpload(\"/api/submission/workspaceitems\")\n+                    .file(bibtexFile).file(pubmedFile))\n+                // bulk create should return 200, 201 (created) is better for single resource\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.traditionalpageone['dc.title'][0].value\",\n+                        is(\"My Article\")))\n                 .andExpect(\n-                        jsonPath(\"$._embedded.workspaceitems[2]._embedded.collection.id\", is(col2.getID().toString())))\n+                        jsonPath(\"$._embedded.workspaceitems[0]._embedded.collection.id\", is(col1.getID().toString())))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[0]\"\n+                     + \".metadata['dc.source'][0].value\",\n+                        is(\"/local/path/bibtex-test.bib\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[0]\"\n+                     + \".metadata['dc.title'][0].value\",\n+                        is(\"bibtex-test.bib\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.traditionalpageone['dc.title'][1].value\")\n+                    .doesNotExist())\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[1]\"\n+                        + \".metadata['dc.source'][0].value\",\n+                            is(\"/local/path/pubmed-test.xml\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[1]\"\n+                        + \".metadata['dc.title'][0].value\",\n+                            is(\"pubmed-test.xml\")));\n+\n+        // bulk create workspaceitems explicitly in the col2\n+        getClient(authToken).perform(fileUpload(\"/api/submission/workspaceitems\")\n+                    .file(bibtexFile).file(pubmedFile)\n+                    .param(\"owningCollection\", col2.getID().toString()))\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.traditionalpageone['dc.title'][0].value\",\n+                        is(\"My Article\")))\n                 .andExpect(\n-                        jsonPath(\"$._embedded.workspaceitems[*]._embedded.upload\").doesNotExist())\n-        ;\n+                        jsonPath(\"$._embedded.workspaceitems[0]._embedded.collection.id\", is(col2.getID().toString())))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[0]\"\n+                     + \".metadata['dc.source'][0].value\",\n+                        is(\"/local/path/bibtex-test.bib\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload\"\n+                     + \".files[0].metadata['dc.title'][0].value\",\n+                        is(\"bibtex-test.bib\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.traditionalpageone['dc.title'][1].value\")\n+                        .doesNotExist())\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[1]\"\n+                     + \".metadata['dc.source'][0].value\",\n+                         is(\"/local/path/pubmed-test.xml\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[1]\"\n+                     + \".metadata['dc.title'][0].value\",\n+                         is(\"pubmed-test.xml\")));\n+        bibtex.close();\n+        xmlIS.close();\n+    }\n+\n+    @Test\n+    /**\n+     * Test the creation of workspaceitems POSTing to the resource collection endpoint a bibtex file\n+     * contains more than one entry.\n+     * \n+     * @throws Exception\n+     */\n+    public void createSingleWorkspaceItemsFromSingleFileWithMultipleEntriesTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n \n+        //** GIVEN **\n+        //1. A community-collection structure with one parent community with sub-community and two collections.\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+        Collection col2 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 2\")\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+\n+        InputStream bibtex = getClass().getResourceAsStream(\"bibtex-test-3-entries.bib\");\n+        final MockMultipartFile bibtexFile = new MockMultipartFile(\"file\", \"bibtex-test-3-entries.bib\",\n+            \"application/x-bibtex\",\n+                bibtex);\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+        // bulk create workspaceitems in the default collection (col1)\n+        getClient(authToken).perform(fileUpload(\"/api/submission/workspaceitems\")\n+                    .file(bibtexFile))\n+                // bulk create should return 200, 201 (created) is better for single resource\n+                .andExpect(status().is(422));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb4abb7d515a825d744424dfc99d6606a2b0d756"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY0NjcwNw==", "bodyText": "Again, test looks good. But comments on line 1109 and 1106 are wrong. We're not doing a bulk create test. This is testing a single PubMed file upload is working as expected.", "url": "https://github.com/DSpace/DSpace/pull/2791#discussion_r456646707", "createdAt": "2020-07-17T19:57:36Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java", "diffHunk": "@@ -907,42 +907,245 @@ public void createMultipleWorkspaceItemFromFileTest() throws Exception {\n                         is(\"My Article\")))\n                 .andExpect(\n                         jsonPath(\"$._embedded.workspaceitems[0]._embedded.collection.id\", is(col1.getID().toString())))\n-                .andExpect(jsonPath(\"$._embedded.workspaceitems[1].sections.traditionalpageone['dc.title'][0].value\",\n-                        is(\"My Article 2\")))\n-                .andExpect(\n-                        jsonPath(\"$._embedded.workspaceitems[1]._embedded.collection.id\", is(col1.getID().toString())))\n-                .andExpect(jsonPath(\"$._embedded.workspaceitems[2].sections.traditionalpageone['dc.title'][0].value\",\n-                        is(\"My Article 3\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[0]\"\n+                     + \".metadata['dc.source'][0].value\",\n+                        is(\"/local/path/bibtex-test.bib\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[0]\"\n+                     + \".metadata['dc.title'][0].value\",\n+                        is(\"bibtex-test.bib\")))\n                 .andExpect(\n-                        jsonPath(\"$._embedded.workspaceitems[2]._embedded.collection.id\", is(col1.getID().toString())))\n-                .andExpect(\n-                        jsonPath(\"$._embedded.workspaceitems[*]._embedded.upload\").doesNotExist())\n+                        jsonPath(\"$._embedded.workspaceitems[*]._embedded.upload\").doesNotExist());\n         ;\n \n         // bulk create workspaceitems explicitly in the col2\n         getClient(authToken).perform(fileUpload(\"/api/submission/workspaceitems\")\n                     .file(bibtexFile)\n-                    .param(\"collection\", col2.getID().toString()))\n+                    .param(\"owningCollection\", col2.getID().toString()))\n                 .andExpect(status().isOk())\n                 .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.traditionalpageone['dc.title'][0].value\",\n                         is(\"My Article\")))\n                 .andExpect(\n                         jsonPath(\"$._embedded.workspaceitems[0]._embedded.collection.id\", is(col2.getID().toString())))\n-                .andExpect(jsonPath(\"$._embedded.workspaceitems[1].sections.traditionalpageone['dc.title'][0].value\",\n-                        is(\"My Article 2\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[0]\"\n+                     + \".metadata['dc.source'][0].value\",\n+                        is(\"/local/path/bibtex-test.bib\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload\"\n+                     + \".files[0].metadata['dc.title'][0].value\",\n+                        is(\"bibtex-test.bib\")))\n                 .andExpect(\n-                        jsonPath(\"$._embedded.workspaceitems[1]._embedded.collection.id\", is(col2.getID().toString())))\n-                .andExpect(jsonPath(\"$._embedded.workspaceitems[2].sections.traditionalpageone['dc.title'][0].value\",\n-                        is(\"My Article 3\")))\n+                        jsonPath(\"$._embedded.workspaceitems[*]._embedded.upload\").doesNotExist());\n+\n+        bibtex.close();\n+    }\n+\n+\n+\n+    @Test\n+    /**\n+     * Test the creation of workspaceitems POSTing to the resource collection endpoint a\n+     * bibtex and pubmed files\n+     *\n+     * @throws Exception\n+     */\n+    public void createSingleWorkspaceItemFromMultipleFilesWithOneEntryTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        //** GIVEN **\n+        //1. A community-collection structure with one parent community with sub-community and two collections.\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+        Collection col2 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 2\")\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+\n+        InputStream bibtex = getClass().getResourceAsStream(\"bibtex-test.bib\");\n+        final MockMultipartFile bibtexFile = new MockMultipartFile(\"file\", \"/local/path/bibtex-test.bib\",\n+            \"application/x-bibtex\", bibtex);\n+        InputStream xmlIS = getClass().getResourceAsStream(\"pubmed-test.xml\");\n+        final MockMultipartFile pubmedFile = new MockMultipartFile(\"file\", \"/local/path/pubmed-test.xml\",\n+            \"application/xml\", xmlIS);\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+        // bulk create workspaceitems in the default collection (col1)\n+        getClient(authToken).perform(fileUpload(\"/api/submission/workspaceitems\")\n+                    .file(bibtexFile).file(pubmedFile))\n+                // bulk create should return 200, 201 (created) is better for single resource\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.traditionalpageone['dc.title'][0].value\",\n+                        is(\"My Article\")))\n                 .andExpect(\n-                        jsonPath(\"$._embedded.workspaceitems[2]._embedded.collection.id\", is(col2.getID().toString())))\n+                        jsonPath(\"$._embedded.workspaceitems[0]._embedded.collection.id\", is(col1.getID().toString())))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[0]\"\n+                     + \".metadata['dc.source'][0].value\",\n+                        is(\"/local/path/bibtex-test.bib\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[0]\"\n+                     + \".metadata['dc.title'][0].value\",\n+                        is(\"bibtex-test.bib\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.traditionalpageone['dc.title'][1].value\")\n+                    .doesNotExist())\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[1]\"\n+                        + \".metadata['dc.source'][0].value\",\n+                            is(\"/local/path/pubmed-test.xml\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[1]\"\n+                        + \".metadata['dc.title'][0].value\",\n+                            is(\"pubmed-test.xml\")));\n+\n+        // bulk create workspaceitems explicitly in the col2\n+        getClient(authToken).perform(fileUpload(\"/api/submission/workspaceitems\")\n+                    .file(bibtexFile).file(pubmedFile)\n+                    .param(\"owningCollection\", col2.getID().toString()))\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.traditionalpageone['dc.title'][0].value\",\n+                        is(\"My Article\")))\n                 .andExpect(\n-                        jsonPath(\"$._embedded.workspaceitems[*]._embedded.upload\").doesNotExist())\n-        ;\n+                        jsonPath(\"$._embedded.workspaceitems[0]._embedded.collection.id\", is(col2.getID().toString())))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[0]\"\n+                     + \".metadata['dc.source'][0].value\",\n+                        is(\"/local/path/bibtex-test.bib\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload\"\n+                     + \".files[0].metadata['dc.title'][0].value\",\n+                        is(\"bibtex-test.bib\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.traditionalpageone['dc.title'][1].value\")\n+                        .doesNotExist())\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[1]\"\n+                     + \".metadata['dc.source'][0].value\",\n+                         is(\"/local/path/pubmed-test.xml\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[1]\"\n+                     + \".metadata['dc.title'][0].value\",\n+                         is(\"pubmed-test.xml\")));\n+        bibtex.close();\n+        xmlIS.close();\n+    }\n+\n+    @Test\n+    /**\n+     * Test the creation of workspaceitems POSTing to the resource collection endpoint a bibtex file\n+     * contains more than one entry.\n+     * \n+     * @throws Exception\n+     */\n+    public void createSingleWorkspaceItemsFromSingleFileWithMultipleEntriesTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n \n+        //** GIVEN **\n+        //1. A community-collection structure with one parent community with sub-community and two collections.\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+        Collection col2 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 2\")\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+\n+        InputStream bibtex = getClass().getResourceAsStream(\"bibtex-test-3-entries.bib\");\n+        final MockMultipartFile bibtexFile = new MockMultipartFile(\"file\", \"bibtex-test-3-entries.bib\",\n+            \"application/x-bibtex\",\n+                bibtex);\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+        // bulk create workspaceitems in the default collection (col1)\n+        getClient(authToken).perform(fileUpload(\"/api/submission/workspaceitems\")\n+                    .file(bibtexFile))\n+                // bulk create should return 200, 201 (created) is better for single resource\n+                .andExpect(status().is(422));\n         bibtex.close();\n     }\n \n+    @Test\n+    /**\n+     * Test the creation of workspaceitems POSTing to the resource collection endpoint a pubmed XML\n+     * file.\n+     * \n+     * @throws Exception\n+     */\n+    public void createPubmedWorkspaceItemFromFileTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        //** GIVEN **\n+        //1. A community-collection structure with one parent community with sub-community and two collections.\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+        Collection col2 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 2\")\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+        InputStream xmlIS = getClass().getResourceAsStream(\"pubmed-test.xml\");\n+        final MockMultipartFile pubmedFile = new MockMultipartFile(\"file\", \"/local/path/pubmed-test.xml\",\n+            \"application/xml\", xmlIS);\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+        // bulk create workspaceitems in the default collection (col1)\n+        getClient(authToken).perform(fileUpload(\"/api/submission/workspaceitems\")\n+                    .file(pubmedFile))\n+                // bulk create should return 200, 201 (created) is better for single resource\n+                .andExpect(status().isOk())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb4abb7d515a825d744424dfc99d6606a2b0d756"}, "originalPosition": 242}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY0NzQxNw==", "bodyText": "Test is again correct, but the comment is slightly wrong.  This test is making sure we can create a single workspaceitem in a specific collection.", "url": "https://github.com/DSpace/DSpace/pull/2791#discussion_r456647417", "createdAt": "2020-07-17T19:59:11Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java", "diffHunk": "@@ -907,42 +907,245 @@ public void createMultipleWorkspaceItemFromFileTest() throws Exception {\n                         is(\"My Article\")))\n                 .andExpect(\n                         jsonPath(\"$._embedded.workspaceitems[0]._embedded.collection.id\", is(col1.getID().toString())))\n-                .andExpect(jsonPath(\"$._embedded.workspaceitems[1].sections.traditionalpageone['dc.title'][0].value\",\n-                        is(\"My Article 2\")))\n-                .andExpect(\n-                        jsonPath(\"$._embedded.workspaceitems[1]._embedded.collection.id\", is(col1.getID().toString())))\n-                .andExpect(jsonPath(\"$._embedded.workspaceitems[2].sections.traditionalpageone['dc.title'][0].value\",\n-                        is(\"My Article 3\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[0]\"\n+                     + \".metadata['dc.source'][0].value\",\n+                        is(\"/local/path/bibtex-test.bib\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[0]\"\n+                     + \".metadata['dc.title'][0].value\",\n+                        is(\"bibtex-test.bib\")))\n                 .andExpect(\n-                        jsonPath(\"$._embedded.workspaceitems[2]._embedded.collection.id\", is(col1.getID().toString())))\n-                .andExpect(\n-                        jsonPath(\"$._embedded.workspaceitems[*]._embedded.upload\").doesNotExist())\n+                        jsonPath(\"$._embedded.workspaceitems[*]._embedded.upload\").doesNotExist());\n         ;\n \n         // bulk create workspaceitems explicitly in the col2\n         getClient(authToken).perform(fileUpload(\"/api/submission/workspaceitems\")\n                     .file(bibtexFile)\n-                    .param(\"collection\", col2.getID().toString()))\n+                    .param(\"owningCollection\", col2.getID().toString()))\n                 .andExpect(status().isOk())\n                 .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.traditionalpageone['dc.title'][0].value\",\n                         is(\"My Article\")))\n                 .andExpect(\n                         jsonPath(\"$._embedded.workspaceitems[0]._embedded.collection.id\", is(col2.getID().toString())))\n-                .andExpect(jsonPath(\"$._embedded.workspaceitems[1].sections.traditionalpageone['dc.title'][0].value\",\n-                        is(\"My Article 2\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[0]\"\n+                     + \".metadata['dc.source'][0].value\",\n+                        is(\"/local/path/bibtex-test.bib\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload\"\n+                     + \".files[0].metadata['dc.title'][0].value\",\n+                        is(\"bibtex-test.bib\")))\n                 .andExpect(\n-                        jsonPath(\"$._embedded.workspaceitems[1]._embedded.collection.id\", is(col2.getID().toString())))\n-                .andExpect(jsonPath(\"$._embedded.workspaceitems[2].sections.traditionalpageone['dc.title'][0].value\",\n-                        is(\"My Article 3\")))\n+                        jsonPath(\"$._embedded.workspaceitems[*]._embedded.upload\").doesNotExist());\n+\n+        bibtex.close();\n+    }\n+\n+\n+\n+    @Test\n+    /**\n+     * Test the creation of workspaceitems POSTing to the resource collection endpoint a\n+     * bibtex and pubmed files\n+     *\n+     * @throws Exception\n+     */\n+    public void createSingleWorkspaceItemFromMultipleFilesWithOneEntryTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        //** GIVEN **\n+        //1. A community-collection structure with one parent community with sub-community and two collections.\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+        Collection col2 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 2\")\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+\n+        InputStream bibtex = getClass().getResourceAsStream(\"bibtex-test.bib\");\n+        final MockMultipartFile bibtexFile = new MockMultipartFile(\"file\", \"/local/path/bibtex-test.bib\",\n+            \"application/x-bibtex\", bibtex);\n+        InputStream xmlIS = getClass().getResourceAsStream(\"pubmed-test.xml\");\n+        final MockMultipartFile pubmedFile = new MockMultipartFile(\"file\", \"/local/path/pubmed-test.xml\",\n+            \"application/xml\", xmlIS);\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+        // bulk create workspaceitems in the default collection (col1)\n+        getClient(authToken).perform(fileUpload(\"/api/submission/workspaceitems\")\n+                    .file(bibtexFile).file(pubmedFile))\n+                // bulk create should return 200, 201 (created) is better for single resource\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.traditionalpageone['dc.title'][0].value\",\n+                        is(\"My Article\")))\n                 .andExpect(\n-                        jsonPath(\"$._embedded.workspaceitems[2]._embedded.collection.id\", is(col2.getID().toString())))\n+                        jsonPath(\"$._embedded.workspaceitems[0]._embedded.collection.id\", is(col1.getID().toString())))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[0]\"\n+                     + \".metadata['dc.source'][0].value\",\n+                        is(\"/local/path/bibtex-test.bib\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[0]\"\n+                     + \".metadata['dc.title'][0].value\",\n+                        is(\"bibtex-test.bib\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.traditionalpageone['dc.title'][1].value\")\n+                    .doesNotExist())\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[1]\"\n+                        + \".metadata['dc.source'][0].value\",\n+                            is(\"/local/path/pubmed-test.xml\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[1]\"\n+                        + \".metadata['dc.title'][0].value\",\n+                            is(\"pubmed-test.xml\")));\n+\n+        // bulk create workspaceitems explicitly in the col2\n+        getClient(authToken).perform(fileUpload(\"/api/submission/workspaceitems\")\n+                    .file(bibtexFile).file(pubmedFile)\n+                    .param(\"owningCollection\", col2.getID().toString()))\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.traditionalpageone['dc.title'][0].value\",\n+                        is(\"My Article\")))\n                 .andExpect(\n-                        jsonPath(\"$._embedded.workspaceitems[*]._embedded.upload\").doesNotExist())\n-        ;\n+                        jsonPath(\"$._embedded.workspaceitems[0]._embedded.collection.id\", is(col2.getID().toString())))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[0]\"\n+                     + \".metadata['dc.source'][0].value\",\n+                        is(\"/local/path/bibtex-test.bib\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload\"\n+                     + \".files[0].metadata['dc.title'][0].value\",\n+                        is(\"bibtex-test.bib\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.traditionalpageone['dc.title'][1].value\")\n+                        .doesNotExist())\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[1]\"\n+                     + \".metadata['dc.source'][0].value\",\n+                         is(\"/local/path/pubmed-test.xml\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[1]\"\n+                     + \".metadata['dc.title'][0].value\",\n+                         is(\"pubmed-test.xml\")));\n+        bibtex.close();\n+        xmlIS.close();\n+    }\n+\n+    @Test\n+    /**\n+     * Test the creation of workspaceitems POSTing to the resource collection endpoint a bibtex file\n+     * contains more than one entry.\n+     * \n+     * @throws Exception\n+     */\n+    public void createSingleWorkspaceItemsFromSingleFileWithMultipleEntriesTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n \n+        //** GIVEN **\n+        //1. A community-collection structure with one parent community with sub-community and two collections.\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+        Collection col2 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 2\")\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+\n+        InputStream bibtex = getClass().getResourceAsStream(\"bibtex-test-3-entries.bib\");\n+        final MockMultipartFile bibtexFile = new MockMultipartFile(\"file\", \"bibtex-test-3-entries.bib\",\n+            \"application/x-bibtex\",\n+                bibtex);\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+        // bulk create workspaceitems in the default collection (col1)\n+        getClient(authToken).perform(fileUpload(\"/api/submission/workspaceitems\")\n+                    .file(bibtexFile))\n+                // bulk create should return 200, 201 (created) is better for single resource\n+                .andExpect(status().is(422));\n         bibtex.close();\n     }\n \n+    @Test\n+    /**\n+     * Test the creation of workspaceitems POSTing to the resource collection endpoint a pubmed XML\n+     * file.\n+     * \n+     * @throws Exception\n+     */\n+    public void createPubmedWorkspaceItemFromFileTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        //** GIVEN **\n+        //1. A community-collection structure with one parent community with sub-community and two collections.\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+        Collection col2 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 2\")\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+        InputStream xmlIS = getClass().getResourceAsStream(\"pubmed-test.xml\");\n+        final MockMultipartFile pubmedFile = new MockMultipartFile(\"file\", \"/local/path/pubmed-test.xml\",\n+            \"application/xml\", xmlIS);\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+        // bulk create workspaceitems in the default collection (col1)\n+        getClient(authToken).perform(fileUpload(\"/api/submission/workspaceitems\")\n+                    .file(pubmedFile))\n+                // bulk create should return 200, 201 (created) is better for single resource\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.traditionalpageone['dc.title'][0].value\",\n+                        is(\"Multistep microreactions with proteins using electrocapture technology.\")))\n+                .andExpect(\n+                        jsonPath(\n+                        \"$._embedded.workspaceitems[0].sections.traditionalpageone['dc.identifier.other'][0].value\",\n+                        is(\"15117179\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.traditionalpageone\"\n+                        + \"['dc.contributor.author'][0].value\",\n+                        is(\"Astorga-Wells, Juan\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[0]\"\n+                    + \".metadata['dc.source'][0].value\",\n+                        is(\"/local/path/pubmed-test.xml\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[0]\"\n+                    + \".metadata['dc.title'][0].value\",\n+                        is(\"pubmed-test.xml\")));\n+\n+        // bulk create workspaceitems explicitly in the col2\n+        getClient(authToken).perform(fileUpload(\"/api/submission/workspaceitems\")\n+                    .file(pubmedFile)\n+                    .param(\"owningCollection\", col2.getID().toString()))\n+            .andExpect(status().isOk())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb4abb7d515a825d744424dfc99d6606a2b0d756"}, "originalPosition": 263}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cdc55163a00708c3c45924cf699c44fd188660d", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/5cdc55163a00708c3c45924cf699c44fd188660d", "committedDate": "2020-07-20T11:06:46Z", "message": "Implement community feedbacks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "575ce02077ac7438e70e8508a25129ac365b2341", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/575ce02077ac7438e70e8508a25129ac365b2341", "committedDate": "2020-07-20T13:32:32Z", "message": "update comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MTQ2NDg3", "url": "https://github.com/DSpace/DSpace/pull/2791#pullrequestreview-455146487", "createdAt": "2020-07-24T19:50:00Z", "commit": {"oid": "575ce02077ac7438e70e8508a25129ac365b2341"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NDk2MDA4", "url": "https://github.com/DSpace/DSpace/pull/2791#pullrequestreview-456496008", "createdAt": "2020-07-28T10:16:31Z", "commit": {"oid": "575ce02077ac7438e70e8508a25129ac365b2341"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMDoxNjozMVrOG4GJMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMDoxNjo0MlrOG4GJjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ3NDA5Nw==", "bodyText": "This exception is thrown in the getRecord() method if the provided file doesn't match the format for that source. If you have for example 5 sources & the last source is a match than 4 exceptions will be thrown and caught here.\nThis would mean that the \"exception\" isn't really an exception but the most common output.\nI would remove this catch & either add a \"supports()\" or an \"isValidFileForSource()\" method (or something similar) to the FileSource class. This way you can validate a file before you attempt to parse it.", "url": "https://github.com/DSpace/DSpace/pull/2791#discussion_r461474097", "createdAt": "2020-07-28T10:16:31Z", "author": {"login": "KevinVdV"}, "path": "dspace-api/src/main/java/org/dspace/importer/external/service/ImportService.java", "diffHunk": "@@ -272,6 +296,35 @@ public ImportRecord getRecord(String uri, Query query) throws MetadataSourceExce\n         return importSources.keySet();\n     }\n \n+    /*\n+     * Get a collection of record from File,\n+     * The first match will be return.\n+     * \n+     * @param file  The file from which will read records\n+     * @return a single record contains the metadatum\n+     * @throws FileMultipleOccurencesException if more than one entry is found\n+     */\n+    public ImportRecord getRecord(File file) throws FileMultipleOccurencesException, FileSourceException {\n+        ImportRecord importRecords = null;\n+        for (MetadataSource metadataSource : importSources.values()) {\n+            try (InputStream fileInputStream = new FileInputStream(file)) {\n+                if (metadataSource instanceof FileSource) {\n+                    FileSource fileSource = (FileSource)metadataSource;\n+                    importRecords = fileSource.getRecord(fileInputStream);\n+                    break;\n+                }\n+            } catch (FileSourceException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "575ce02077ac7438e70e8508a25129ac365b2341"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ3NDE5MQ==", "bodyText": "Same as above.", "url": "https://github.com/DSpace/DSpace/pull/2791#discussion_r461474191", "createdAt": "2020-07-28T10:16:42Z", "author": {"login": "KevinVdV"}, "path": "dspace-api/src/main/java/org/dspace/importer/external/service/ImportService.java", "diffHunk": "@@ -272,6 +296,35 @@ public ImportRecord getRecord(String uri, Query query) throws MetadataSourceExce\n         return importSources.keySet();\n     }\n \n+    /*\n+     * Get a collection of record from File,\n+     * The first match will be return.\n+     * \n+     * @param file  The file from which will read records\n+     * @return a single record contains the metadatum\n+     * @throws FileMultipleOccurencesException if more than one entry is found\n+     */\n+    public ImportRecord getRecord(File file) throws FileMultipleOccurencesException, FileSourceException {\n+        ImportRecord importRecords = null;\n+        for (MetadataSource metadataSource : importSources.values()) {\n+            try (InputStream fileInputStream = new FileInputStream(file)) {\n+                if (metadataSource instanceof FileSource) {\n+                    FileSource fileSource = (FileSource)metadataSource;\n+                    importRecords = fileSource.getRecord(fileInputStream);\n+                    break;\n+                }\n+            } catch (FileSourceException e) {\n+                log.debug(metadataSource.getImportSource() + \" isn't a valid parser for file\");\n+            } catch (FileMultipleOccurencesException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "575ce02077ac7438e70e8508a25129ac365b2341"}, "originalPosition": 170}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "107c70a6eed7e37c74da40c8c1981921d39918d6", "author": {"user": {"login": "pasqualecvl", "name": "Pasquale Cavallo"}}, "url": "https://github.com/DSpace/DSpace/commit/107c70a6eed7e37c74da40c8c1981921d39918d6", "committedDate": "2020-07-29T10:22:22Z", "message": "Add extensions supported by FileSource in Live Import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2e969ffeed527849ee084be6ad97cba62d5e747", "author": {"user": {"login": "pasqualecvl", "name": "Pasquale Cavallo"}}, "url": "https://github.com/DSpace/DSpace/commit/d2e969ffeed527849ee084be6ad97cba62d5e747", "committedDate": "2020-07-29T13:06:17Z", "message": "Merge remote-tracking branch 'refs/remotes/origin/main'"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMjI3ODQ0", "url": "https://github.com/DSpace/DSpace/pull/2791#pullrequestreview-462227844", "createdAt": "2020-08-06T06:44:49Z", "commit": {"oid": "d2e969ffeed527849ee084be6ad97cba62d5e747"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMjI4Njkz", "url": "https://github.com/DSpace/DSpace/pull/2791#pullrequestreview-462228693", "createdAt": "2020-08-06T06:46:27Z", "commit": {"oid": "d2e969ffeed527849ee084be6ad97cba62d5e747"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1509, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}