{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyMzY3NTk3", "number": 2719, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNToyMToyMFrODsuYGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMDowODoxN1rODuHGJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MjIzNzcwOnYy", "diffSide": "RIGHT", "path": "dspace-services/src/test/resources/config/local.properties", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNToyMToyMFrOF9vC4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNDo0MTo0MVrOF-ZNQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI3ODI0MA==", "bodyText": "This setting should be moved to /dspace-api/src/test/data/dspaceFolder/config/local.cfg  That's the local.cfg file that is used for all tests.  (I'm surprised this works to add it to dspace-services).\nAlternatively, (and possibly the better method), this config could be simply removed and updated dynamically in the tests that require it by doing something like:\n@Autowired\nprivate ConfigurationService configurationService;\n\n... then, in method that needs it...\n\nconfigurationService.setProperty(\"metadata.hide.dc.description.provenance\", true);\n\nKeep in mind, the ConfigurationService auto-reloads (resets itself to default values) after every test.  So, this lets you only set it to true in methods that need this setting, and all others will default to false.", "url": "https://github.com/DSpace/DSpace/pull/2719#discussion_r400278240", "createdAt": "2020-03-30T15:21:20Z", "author": {"login": "tdonohue"}, "path": "dspace-services/src/test/resources/config/local.properties", "diffHunk": "@@ -29,3 +29,9 @@ include = included.properties\n # (We purposefully misspell DSpace and correct it in tests)\n # See DSpaceConfigurationServiceTest.testAutomaticReload()\n prop.to.auto.reload = D-space\n+\n+\n+# This default configuration hides the dc.description.provenance field,\n+# since that usually contains email addresses which ought to be kept\n+# private and is mainly of interest to administrators:\n+metadata.hide.dc.description.provenance = true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9df42b3deaf8232742a8a31ded3390af0013dafa"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI4MzI4Mg==", "bodyText": "Actually, @benbosman , disregard all of the above. This setting can be removed as it's the default setting already.  See https://github.com/DSpace/DSpace/blob/master/dspace/config/dspace.cfg#L824", "url": "https://github.com/DSpace/DSpace/pull/2719#discussion_r400283282", "createdAt": "2020-03-30T15:27:35Z", "author": {"login": "tdonohue"}, "path": "dspace-services/src/test/resources/config/local.properties", "diffHunk": "@@ -29,3 +29,9 @@ include = included.properties\n # (We purposefully misspell DSpace and correct it in tests)\n # See DSpaceConfigurationServiceTest.testAutomaticReload()\n prop.to.auto.reload = D-space\n+\n+\n+# This default configuration hides the dc.description.provenance field,\n+# since that usually contains email addresses which ought to be kept\n+# private and is mainly of interest to administrators:\n+metadata.hide.dc.description.provenance = true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI3ODI0MA=="}, "originalCommit": {"oid": "9df42b3deaf8232742a8a31ded3390af0013dafa"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk2OTAyNw==", "bodyText": "This has been adjusted", "url": "https://github.com/DSpace/DSpace/pull/2719#discussion_r400969027", "createdAt": "2020-03-31T14:41:41Z", "author": {"login": "benbosman"}, "path": "dspace-services/src/test/resources/config/local.properties", "diffHunk": "@@ -29,3 +29,9 @@ include = included.properties\n # (We purposefully misspell DSpace and correct it in tests)\n # See DSpaceConfigurationServiceTest.testAutomaticReload()\n prop.to.auto.reload = D-space\n+\n+\n+# This default configuration hides the dc.description.provenance field,\n+# since that usually contains email addresses which ought to be kept\n+# private and is mainly of interest to administrators:\n+metadata.hide.dc.description.provenance = true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI3ODI0MA=="}, "originalCommit": {"oid": "9df42b3deaf8232742a8a31ded3390af0013dafa"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Njc3MjcwOnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/converter/DSpaceObjectConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMDowODowMlrOF_7krg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODo1NTowMFrOGDPtgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU4MDY1NA==", "bodyText": "Really tiny thing, but I prefer that we log more descriptive error messages.  For example, this could be something like:\nlog.error(\"Error filtering metadata based on permissions\", e);", "url": "https://github.com/DSpace/DSpace/pull/2719#discussion_r402580654", "createdAt": "2020-04-02T20:08:02Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/converter/DSpaceObjectConverter.java", "diffHunk": "@@ -35,10 +60,53 @@ public R convert(M obj, Projection projection) {\n             resource.setUuid(obj.getID().toString());\n         }\n         resource.setName(obj.getName());\n-        MetadataValueList metadataValues = new MetadataValueList(obj.getMetadata());\n+\n+        MetadataValueList metadataValues = getPermissionFilteredMetadata(getContext(), obj);\n         resource.setMetadata(converter.toRest(metadataValues, projection));\n         return resource;\n     }\n \n     protected abstract R newInstance();\n+\n+\n+    /**\n+     * Retrieves the metadata list filtered according to the hidden metadata configuration\n+     * When the context is null, it will return the metadatalist as for an anonymous user\n+     * @param context   The context\n+     * @param obj       The object of which the filtered metadata will be retrieved\n+     * @return A list of object metadata filtered based on the the hidden metadata configuration\n+     */\n+    public MetadataValueList getPermissionFilteredMetadata(Context context, M obj) {\n+        List<MetadataValue> metadata = obj.getMetadata();\n+        try {\n+            if (context != null && authorizeService.isAdmin(context)) {\n+                return new MetadataValueList(metadata);\n+            }\n+            for (MetadataValue mv : metadata) {\n+                MetadataField metadataField = mv.getMetadataField();\n+                if (metadataExposureService\n+                        .isHidden(context, metadataField.getMetadataSchema().getName(),\n+                                  metadataField.getElement(),\n+                                  metadataField.getQualifier())) {\n+                    metadata.remove(mv);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            log.error(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de0baab8fcb7051745094caebb4cf7ad249139e"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA1NjMyMw==", "bodyText": "has been updated", "url": "https://github.com/DSpace/DSpace/pull/2719#discussion_r406056323", "createdAt": "2020-04-09T08:55:00Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/converter/DSpaceObjectConverter.java", "diffHunk": "@@ -35,10 +60,53 @@ public R convert(M obj, Projection projection) {\n             resource.setUuid(obj.getID().toString());\n         }\n         resource.setName(obj.getName());\n-        MetadataValueList metadataValues = new MetadataValueList(obj.getMetadata());\n+\n+        MetadataValueList metadataValues = getPermissionFilteredMetadata(getContext(), obj);\n         resource.setMetadata(converter.toRest(metadataValues, projection));\n         return resource;\n     }\n \n     protected abstract R newInstance();\n+\n+\n+    /**\n+     * Retrieves the metadata list filtered according to the hidden metadata configuration\n+     * When the context is null, it will return the metadatalist as for an anonymous user\n+     * @param context   The context\n+     * @param obj       The object of which the filtered metadata will be retrieved\n+     * @return A list of object metadata filtered based on the the hidden metadata configuration\n+     */\n+    public MetadataValueList getPermissionFilteredMetadata(Context context, M obj) {\n+        List<MetadataValue> metadata = obj.getMetadata();\n+        try {\n+            if (context != null && authorizeService.isAdmin(context)) {\n+                return new MetadataValueList(metadata);\n+            }\n+            for (MetadataValue mv : metadata) {\n+                MetadataField metadataField = mv.getMetadataField();\n+                if (metadataExposureService\n+                        .isHidden(context, metadataField.getMetadataSchema().getName(),\n+                                  metadataField.getElement(),\n+                                  metadataField.getQualifier())) {\n+                    metadata.remove(mv);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            log.error(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU4MDY1NA=="}, "originalCommit": {"oid": "7de0baab8fcb7051745094caebb4cf7ad249139e"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Njc3MzUwOnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/converter/ItemConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMDowODoxN1rOF_7lIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwODo1NTowNlrOGDPtxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU4MDc3MA==", "bodyText": "Similar to above, this could be a more useful error message", "url": "https://github.com/DSpace/DSpace/pull/2719#discussion_r402580770", "createdAt": "2020-04-02T20:08:17Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/converter/ItemConverter.java", "diffHunk": "@@ -47,13 +51,41 @@ public ItemRest convert(Item obj, Projection projection) {\n         item.setWithdrawn(obj.isWithdrawn());\n         item.setLastModified(obj.getLastModified());\n \n-        List<MetadataValue> fullList = itemService.getMetadata(obj, Item.ANY, Item.ANY, Item.ANY, Item.ANY, true);\n-        MetadataValueList metadataValues = new MetadataValueList(fullList);\n-        item.setMetadata(converter.toRest(metadataValues, projection));\n-\n         return item;\n     }\n \n+    /**\n+     * Retrieves the metadata list filtered according to the hidden metadata configuration\n+     * When the context is null, it will return the metadatalist as for an anonymous user\n+     * Overrides the parent method to include virtual metadata\n+     * @param context The context\n+     * @param obj     The object of which the filtered metadata will be retrieved\n+     * @return A list of object metadata (including virtual metadata) filtered based on the the hidden metadata\n+     * configuration\n+     */\n+    @Override\n+    public MetadataValueList getPermissionFilteredMetadata(Context context, Item obj) {\n+        List<MetadataValue> fullList = itemService.getMetadata(obj, Item.ANY, Item.ANY, Item.ANY, Item.ANY, true);\n+        List<MetadataValue> returnList = new LinkedList<>();\n+        try {\n+            if (context != null && authorizeService.isAdmin(context)) {\n+                return new MetadataValueList(fullList);\n+            }\n+            for (MetadataValue mv : fullList) {\n+                MetadataField metadataField = mv.getMetadataField();\n+                if (!metadataExposureService\n+                        .isHidden(context, metadataField.getMetadataSchema().getName(),\n+                                  metadataField.getElement(),\n+                                  metadataField.getQualifier())) {\n+                    returnList.add(mv);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            log.error(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de0baab8fcb7051745094caebb4cf7ad249139e"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA1NjM4OA==", "bodyText": "has been updated", "url": "https://github.com/DSpace/DSpace/pull/2719#discussion_r406056388", "createdAt": "2020-04-09T08:55:06Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/converter/ItemConverter.java", "diffHunk": "@@ -47,13 +51,41 @@ public ItemRest convert(Item obj, Projection projection) {\n         item.setWithdrawn(obj.isWithdrawn());\n         item.setLastModified(obj.getLastModified());\n \n-        List<MetadataValue> fullList = itemService.getMetadata(obj, Item.ANY, Item.ANY, Item.ANY, Item.ANY, true);\n-        MetadataValueList metadataValues = new MetadataValueList(fullList);\n-        item.setMetadata(converter.toRest(metadataValues, projection));\n-\n         return item;\n     }\n \n+    /**\n+     * Retrieves the metadata list filtered according to the hidden metadata configuration\n+     * When the context is null, it will return the metadatalist as for an anonymous user\n+     * Overrides the parent method to include virtual metadata\n+     * @param context The context\n+     * @param obj     The object of which the filtered metadata will be retrieved\n+     * @return A list of object metadata (including virtual metadata) filtered based on the the hidden metadata\n+     * configuration\n+     */\n+    @Override\n+    public MetadataValueList getPermissionFilteredMetadata(Context context, Item obj) {\n+        List<MetadataValue> fullList = itemService.getMetadata(obj, Item.ANY, Item.ANY, Item.ANY, Item.ANY, true);\n+        List<MetadataValue> returnList = new LinkedList<>();\n+        try {\n+            if (context != null && authorizeService.isAdmin(context)) {\n+                return new MetadataValueList(fullList);\n+            }\n+            for (MetadataValue mv : fullList) {\n+                MetadataField metadataField = mv.getMetadataField();\n+                if (!metadataExposureService\n+                        .isHidden(context, metadataField.getMetadataSchema().getName(),\n+                                  metadataField.getElement(),\n+                                  metadataField.getQualifier())) {\n+                    returnList.add(mv);\n+                }\n+            }\n+        } catch (SQLException e) {\n+            log.error(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU4MDc3MA=="}, "originalCommit": {"oid": "7de0baab8fcb7051745094caebb4cf7ad249139e"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1694, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}