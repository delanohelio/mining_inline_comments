{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1MzU0NTA3", "number": 2646, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNDoxNjo0OFrODbPEeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMTo0MjozOFrODifO5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODg1MDUwOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/xmlworkflow/state/actions/WorkflowActionConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNDoxNjo0OFrOFimh5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNDoxNjo0OFrOFimh5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgyNzE3Mg==", "bodyText": "Can you add JavaDocs here", "url": "https://github.com/DSpace/DSpace/pull/2646#discussion_r371827172", "createdAt": "2020-01-28T14:16:48Z", "author": {"login": "benbosman"}, "path": "dspace-api/src/main/java/org/dspace/xmlworkflow/state/actions/WorkflowActionConfig.java", "diffHunk": "@@ -59,4 +61,8 @@ public Step getStep() {\n         return step;\n     }\n \n+    public List<String> getOptions() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d9b330d097676fbf4c7890f90c9642b87246d2"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODg1MjI1OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/xmlworkflow/state/actions/Action.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNDoxNzoxOFrOFimjBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNDoxNzoxOFrOFimjBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgyNzQ2MA==", "bodyText": "Can you add JavaDocs here", "url": "https://github.com/DSpace/DSpace/pull/2646#discussion_r371827460", "createdAt": "2020-01-28T14:17:18Z", "author": {"login": "benbosman"}, "path": "dspace-api/src/main/java/org/dspace/xmlworkflow/state/actions/Action.java", "diffHunk": "@@ -36,15 +36,16 @@\n public abstract class Action {\n \n     private WorkflowActionConfig parent;\n-    private static String ERROR_FIELDS_ATTRIBUTE = \"dspace.workflow.error_fields\";\n-\n+    private static final String ERROR_FIELDS_ATTRIBUTE = \"dspace.workflow.error_fields\";\n \n     public abstract void activate(Context c, XmlWorkflowItem wf)\n         throws SQLException, IOException, AuthorizeException, WorkflowException;\n \n     public abstract ActionResult execute(Context c, XmlWorkflowItem wfi, Step step, HttpServletRequest request)\n         throws SQLException, AuthorizeException, IOException, WorkflowException;\n \n+    public abstract List<String> getOptions();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d9b330d097676fbf4c7890f90c9642b87246d2"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODg2MzQzOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/xmlworkflow/state/actions/processingaction/AcceptEditRejectAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNDoyMDoyMVrOFimp5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNDoyMDoyMVrOFimp5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgyOTIyMQ==", "bodyText": "Since SUBMIT_EDIT_METADATA is a 'special' action, would it make sense to set it in the ProcessingAction for reuse?", "url": "https://github.com/DSpace/DSpace/pull/2646#discussion_r371829221", "createdAt": "2020-01-28T14:20:21Z", "author": {"login": "benbosman"}, "path": "dspace-api/src/main/java/org/dspace/xmlworkflow/state/actions/processingaction/AcceptEditRejectAction.java", "diffHunk": "@@ -31,40 +33,50 @@\n  */\n public class AcceptEditRejectAction extends ProcessingAction {\n \n-    public static final int MAIN_PAGE = 0;\n-    public static final int REJECT_PAGE = 1;\n+    private static final String SUBMIT_APPROVE = \"submit_approve\";\n+    private static final String SUBMIT_REJECT = \"submit_reject\";\n+    private static final String SUBMIT_EDIT_METADATA = \"submit_edit_metadata\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d9b330d097676fbf4c7890f90c9642b87246d2"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODkzMTEyOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/test/data/dspaceFolder/config/spring/api/workflow-actions.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNDozNzoxMFrOFinTfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNDozNzoxMFrOFinTfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgzOTg3MA==", "bodyText": "why does this have to differ from the default?", "url": "https://github.com/DSpace/DSpace/pull/2646#discussion_r371839870", "createdAt": "2020-01-28T14:37:10Z", "author": {"login": "benbosman"}, "path": "dspace-api/src/test/data/dspaceFolder/config/spring/api/workflow-actions.xml", "diffHunk": "@@ -0,0 +1,99 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans\n+    xmlns=\"http://www.springframework.org/schema/beans\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xmlns:util=\"http://www.springframework.org/schema/util\"\n+    xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd\n+                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd\">\n+\n+    <bean id=\"claimactionAPI\" class=\"org.dspace.xmlworkflow.state.actions.userassignment.ClaimAction\" scope=\"prototype\"/>\n+    <bean id=\"reviewactionAPI\" class=\"org.dspace.xmlworkflow.state.actions.processingaction.ReviewAction\" scope=\"prototype\"/>\n+    <bean id=\"editactionAPI\" class=\"org.dspace.xmlworkflow.state.actions.processingaction.AcceptEditRejectAction\" scope=\"prototype\"/>\n+    <bean id=\"finaleditactionAPI\" class=\"org.dspace.xmlworkflow.state.actions.processingaction.FinalEditAction\" scope=\"prototype\"/>\n+    <bean id=\"singleuserreviewactionAPI\" class=\"org.dspace.xmlworkflow.state.actions.processingaction.SingleUserReviewAction\" scope=\"prototype\"/>\n+\n+    <bean id=\"selectrevieweractionAPI\" class=\"org.dspace.xmlworkflow.state.actions.processingaction.SelectReviewerAction\" scope=\"prototype\">\n+        <property name=\"role\" ref=\"reviewer\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d9b330d097676fbf4c7890f90c9642b87246d2"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODk5NTI0OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/WorkflowDefinitionRestRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNDo1MzoyMFrOFin7tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNDo1MzoyMFrOFin7tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1MDE2Nw==", "bodyText": "I would expect a more generic 400 or 500 exception here since it exists but can't be retrieved", "url": "https://github.com/DSpace/DSpace/pull/2646#discussion_r371850167", "createdAt": "2020-01-28T14:53:20Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/WorkflowDefinitionRestRepository.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import org.dspace.app.rest.Parameter;\n+import org.dspace.app.rest.SearchRestMethod;\n+import org.dspace.app.rest.model.WorkflowDefinitionRest;\n+import org.dspace.content.Collection;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Context;\n+import org.dspace.xmlworkflow.WorkflowConfigurationException;\n+import org.dspace.xmlworkflow.factory.XmlWorkflowFactory;\n+import org.dspace.xmlworkflow.state.Workflow;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * This is the rest repository responsible for managing WorkflowDefinition Rest objects\n+ *\n+ * @author Maria Verdonck (Atmire) on 11/12/2019\n+ */\n+@Component(WorkflowDefinitionRest.CATEGORY + \".\" + WorkflowDefinitionRest.NAME)\n+public class WorkflowDefinitionRestRepository extends DSpaceRestRepository<WorkflowDefinitionRest, String> {\n+\n+    @Autowired\n+    protected XmlWorkflowFactory xmlWorkflowFactory;\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Override\n+    public WorkflowDefinitionRest findOne(Context context, String workflowName) {\n+        if (xmlWorkflowFactory.workflowByThisNameExists(workflowName)) {\n+            try {\n+                return converter.toRest(xmlWorkflowFactory.getWorkflowByName(workflowName), utils.obtainProjection());\n+            } catch (WorkflowConfigurationException e) {\n+                throw new ResourceNotFoundException(\"No workflow with name \" + workflowName + \" is configured\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d9b330d097676fbf4c7890f90c9642b87246d2"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5OTAzNjM1OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/WorkflowDefinitionController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNTowMzoxMlrOFioUzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNTowMzoxMlrOFioUzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1NjU5MQ==", "bodyText": "Shouldn't this also return the collection specifically linked to the default workflow (if any)?", "url": "https://github.com/DSpace/DSpace/pull/2646#discussion_r371856591", "createdAt": "2020-01-28T15:03:12Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/WorkflowDefinitionController.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import java.util.List;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.dspace.app.rest.converter.ConverterService;\n+import org.dspace.app.rest.model.CollectionRest;\n+import org.dspace.app.rest.model.WorkflowDefinitionRest;\n+import org.dspace.app.rest.utils.ContextUtil;\n+import org.dspace.app.rest.utils.Utils;\n+import org.dspace.content.Collection;\n+import org.dspace.core.Context;\n+import org.dspace.xmlworkflow.factory.XmlWorkflowFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+/**\n+ * Rest controller that handles the config for workflow definitions\n+ *\n+ * @author Maria Verdonck (Atmire) on 11/12/2019\n+ */\n+@RestController\n+@RequestMapping(\"/api/\" + WorkflowDefinitionRest.CATEGORY + \"/\" + WorkflowDefinitionRest.NAME_PLURAL)\n+public class WorkflowDefinitionController {\n+\n+    @Autowired\n+    protected XmlWorkflowFactory xmlWorkflowFactory;\n+\n+    @Autowired\n+    protected ConverterService converter;\n+\n+    @Autowired\n+    protected Utils utils;\n+\n+    /**\n+     * GET endpoint that returns the list of collections that make an explicit use of the workflow-definition.\n+     * If a collection doesn't specify the workflow-definition to be used, the default mapping applies,\n+     * but this collection is not included in the list returned by this method.\n+     *\n+     * @param request      The request object\n+     * @param workflowName Name of workflow we want the collections of that are mapped to is\n+     * @return List of collections mapped to the requested workflow\n+     */\n+    @RequestMapping(method = RequestMethod.GET, value = \"/{workflowName}/collections\")\n+    public Page<CollectionRest> getCollections(HttpServletRequest request, @PathVariable String workflowName,\n+                                               Pageable pageable) {\n+        if (xmlWorkflowFactory.workflowByThisNameExists(workflowName)) {\n+            Context context = ContextUtil.obtainContext(request);\n+            List<Collection> collectionsMappedToWorkflow;\n+            if (xmlWorkflowFactory.isDefaultWorkflow(workflowName)) {\n+                collectionsMappedToWorkflow = xmlWorkflowFactory.getAllNonMappedCollectionsHandles(context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20d9b330d097676fbf4c7890f90c9642b87246d2"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTUyNTYwOnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/WorkflowDefinitionController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNjozMDo0MlrOFl-iJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMDozOTozNFrOFmpd1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM2NjE4Mw==", "bodyText": "This controller is misnamed & seems to be mapping the same request path as WorkflowDefinitionRestRepository (and WorkflowDefinitionRest).   I'd recommend renaming this to WorkflowDefinitionCollectionController (or similar), as this controller is specifically managing the Collection relationship here.  We can also then add a more specific RequestMapping...along the lines of:\n@RequestMapping(\"/api/\" + WorkflowDefinitionRest.CATEGORY + \"/\" + WorkflowDefinitionRest.NAME_PLURAL + \"/{workflowName}/collections\")\npublic class WorkflowDefinitionCollectionsController {", "url": "https://github.com/DSpace/DSpace/pull/2646#discussion_r375366183", "createdAt": "2020-02-05T16:30:42Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/WorkflowDefinitionController.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.dspace.app.rest.converter.ConverterService;\n+import org.dspace.app.rest.model.CollectionRest;\n+import org.dspace.app.rest.model.WorkflowDefinitionRest;\n+import org.dspace.app.rest.utils.ContextUtil;\n+import org.dspace.app.rest.utils.Utils;\n+import org.dspace.content.Collection;\n+import org.dspace.core.Context;\n+import org.dspace.xmlworkflow.factory.XmlWorkflowFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+/**\n+ * Rest controller that handles the config for workflow definitions\n+ *\n+ * @author Maria Verdonck (Atmire) on 11/12/2019\n+ */\n+@RestController\n+@RequestMapping(\"/api/\" + WorkflowDefinitionRest.CATEGORY + \"/\" + WorkflowDefinitionRest.NAME_PLURAL)\n+public class WorkflowDefinitionController {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f732577425e0305730f2ef9b33cba6d309bf066b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA2OTU5MA==", "bodyText": "Update: it's also worth considering whether this controller could be replaced with a LinkRepository to obtain the collections subresource.  That would better align this PR with the Projections work in #2625  (which has converted many similar Controller methods into LinkRepository classes)", "url": "https://github.com/DSpace/DSpace/pull/2646#discussion_r376069590", "createdAt": "2020-02-06T20:39:34Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/WorkflowDefinitionController.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.dspace.app.rest.converter.ConverterService;\n+import org.dspace.app.rest.model.CollectionRest;\n+import org.dspace.app.rest.model.WorkflowDefinitionRest;\n+import org.dspace.app.rest.utils.ContextUtil;\n+import org.dspace.app.rest.utils.Utils;\n+import org.dspace.content.Collection;\n+import org.dspace.core.Context;\n+import org.dspace.xmlworkflow.factory.XmlWorkflowFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+/**\n+ * Rest controller that handles the config for workflow definitions\n+ *\n+ * @author Maria Verdonck (Atmire) on 11/12/2019\n+ */\n+@RestController\n+@RequestMapping(\"/api/\" + WorkflowDefinitionRest.CATEGORY + \"/\" + WorkflowDefinitionRest.NAME_PLURAL)\n+public class WorkflowDefinitionController {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM2NjE4Mw=="}, "originalCommit": {"oid": "f732577425e0305730f2ef9b33cba6d309bf066b"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTU0Nzc5OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/test/AbstractWorkflowDefinitionIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNjozNjoyNlrOFl-wDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNjo0OToyM1rOFntiqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM2OTc0Mw==", "bodyText": "This class seems unnecessary to me, as it's just calling the setup() of AbstractControllerIntegrationTest.  Is there a reason why we don't just remove this class and use AbstractControllerIntegrationTest directly?", "url": "https://github.com/DSpace/DSpace/pull/2646#discussion_r375369743", "createdAt": "2020-02-05T16:36:26Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/test/AbstractWorkflowDefinitionIntegrationTest.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.test;\n+\n+/**\n+ * @author Maria Verdonck (Atmire) on 17/12/2019\n+ */\n+public class AbstractWorkflowDefinitionIntegrationTest extends AbstractControllerIntegrationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f732577425e0305730f2ef9b33cba6d309bf066b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE4NDkzNg==", "bodyText": "Removed, wasn't used", "url": "https://github.com/DSpace/DSpace/pull/2646#discussion_r377184936", "createdAt": "2020-02-10T16:49:23Z", "author": {"login": "MarieVerdonck"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/test/AbstractWorkflowDefinitionIntegrationTest.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.test;\n+\n+/**\n+ * @author Maria Verdonck (Atmire) on 17/12/2019\n+ */\n+public class AbstractWorkflowDefinitionIntegrationTest extends AbstractControllerIntegrationTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM2OTc0Mw=="}, "originalCommit": {"oid": "f732577425e0305730f2ef9b33cba6d309bf066b"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDg5ODkyOnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkflowDefinitionRestRepositoryIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMTo0MjozOFrOFtw7Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMTo0MjozOFrOFtw7Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUzMTc5OQ==", "bodyText": "@MarieVerdonck : This could be simplified by writing\n.andExpect(status().isBadRequest());   You'll see similar code in other ITs in our codebase.", "url": "https://github.com/DSpace/DSpace/pull/2646#discussion_r383531799", "createdAt": "2020-02-24T21:42:38Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkflowDefinitionRestRepositoryIT.java", "diffHunk": "@@ -239,7 +240,7 @@ public void getWorkflowDefinitionByCollectionId_nonValidUUID() throws Exception\n         //When we call this facets endpoint\n         getClient(token).perform(get(WORKFLOW_DEFINITIONS_ENDPOINT + \"/search/findByCollection?uuid=\" + nonValidUUID))\n             //We expect a 400 Illegal Argument Exception cannot convert UUID\n-            .andExpect(status().is(400))\n+            .andExpect(status().is(HttpStatus.SC_BAD_REQUEST))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0acfbc6e44c0fcba2b1fe67014dd7bde6bd7646"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1600, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}