{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1NjI5MDQw", "number": 2899, "title": "Metadata field search", "bodyText": "References\nAdd references/links to any related tickets or PRs. These may include:\n\nLink to REST Contract\nThis REST implementation is related to this Angular ticket: DSpace/dspace-angular#750\n\nDescription\nThis PR handles the search methods for the retrieval of existing metadatafields based on a given query or using a combination of schema/element/qualifier\nInstructions for Reviewers\nList of changes in this PR:\n\nA 'IndexableMetadataField' class has been created so the information of the metadatafields can be kept in solr (For performance reasons we do NOT retrieve the information based on db calls)\nMetadataFieldIndexFactory handles the actual indexing of those fields -> Configured through core-services.xml\nMetadataFieldRestRepository has an additional byFieldName method that adds the search method for the metadatafields\nMetadataFieldNameRestController allows for frontend validation since this returns a single result as opposed to the pageable returned MetadataFieldRest objects (Checked with the Angular team and this was required for the validation)\n\nThis was separated out since it's not good practice to use an actual search for this.\n\n\n\nNotes to testers\n\nPlease make sure to reindex discovery completely so that actual metadatafields are indexed in solr as well\nCheck rest contract for example calls\n\nChecklist\nThis checklist provides a reminder of what we are going to look for when reviewing your PR. You need not complete this checklist prior to creating your PR (draft PRs are always welcome). If you are unsure about an item in the checklist, don't hesitate to ask. We're here to help!\n\n My PR is small in size (e.g. less than 1,000 lines of code, not including comments & integration tests). Exceptions may be made if previously agreed upon.\n My PR passes Checkstyle validation based on the Code Style Guide.\n My PR includes Javadoc for all new (or modified) public methods and classes. It also includes Javadoc for large or complex private methods.\n My PR passes all tests and includes new/updated Unit or Integration Tests based on the Code Testing Guide.\n If my PR includes new, third-party dependencies (in any pom.xml), I've made sure their licenses align with the DSpace BSD License based on the Licensing of Contributions documentation.\n If my PR modifies the REST API, I've linked to the REST Contract page (or open PR) related to this change.", "createdAt": "2020-07-23T10:54:16Z", "url": "https://github.com/DSpace/DSpace/pull/2899", "merged": true, "mergeCommit": {"oid": "debecc287a0df8d1b6c6d468113710815041c9fe"}, "closed": true, "closedAt": "2020-08-31T21:28:51Z", "author": {"login": "jonas-atmire"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5ZvdlAFqTQ1NjgzMjYyOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdEZrrYAFqTQ3ODk2NzU0Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2ODMyNjI5", "url": "https://github.com/DSpace/DSpace/pull/2899#pullrequestreview-456832629", "createdAt": "2020-07-28T17:01:04Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNzowMTowNVrOG4WA0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNzoxODoxNlrOG4Wotw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTczNDA5Nw==", "bodyText": "This Controller isn't needed as we don't have a /api/core/metdatafields/name/[:metadata-field-full-name] path in the Contract: https://github.com/DSpace/Rest7Contract/blob/main/metadatafields.md\nInstead, this endpoint is at /api/core/metadatafields/search/byFieldName and you've already implemented that endpoint in the MetadataFieldRestRepository in this same PR.  So, this entire Controller can be removed.", "url": "https://github.com/DSpace/DSpace/pull/2899#discussion_r461734097", "createdAt": "2020-07-28T17:01:05Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/MetadataFieldNameRestController.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import java.sql.SQLException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.dspace.app.rest.converter.ConverterService;\n+import org.dspace.app.rest.model.MetadataFieldRest;\n+import org.dspace.app.rest.utils.ContextUtil;\n+import org.dspace.app.rest.utils.Utils;\n+import org.dspace.content.MetadataField;\n+import org.dspace.content.service.MetadataFieldService;\n+import org.dspace.core.Context;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+/**\n+ * This controller will handle all the incoming calls on the /api/core/metadatafields/name/<:metadata-field-full-name>\n+ * endpoint where the metadata-field-full-name parameter can be filled in to match a specific metadata field by name\n+ * There's always at most one metadata field per name.\n+ * <p>\n+ * It responds with:\n+ * <p>\n+ * The single metadata field if there's a match\n+ * 404 if the metadata field doesn't exist\n+ *\n+ * @author Maria Verdonck (Atmire) on 17/07/2020\n+ */\n+@RestController\n+@RequestMapping(\"/api/\" + MetadataFieldRest.CATEGORY + \"/\" + MetadataFieldRest.NAME_PLURAL)\n+public class MetadataFieldNameRestController {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTczNTQyOQ==", "bodyText": "These tests can also be removed when the Controller is removed", "url": "https://github.com/DSpace/DSpace/pull/2899#discussion_r461735429", "createdAt": "2020-07-28T17:03:22Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/MetadataFieldNameRestControllerIT.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.dspace.app.rest.builder.MetadataFieldBuilder;\n+import org.dspace.app.rest.builder.MetadataSchemaBuilder;\n+import org.dspace.app.rest.test.AbstractEntityIntegrationTest;\n+import org.dspace.content.MetadataField;\n+import org.dspace.content.MetadataSchema;\n+import org.junit.Test;\n+\n+/**\n+ * Integration tests for the {@link org.dspace.app.rest.MetadataFieldNameRestController} controlled endpoints\n+ *\n+ * @author Maria Verdonck (Atmire) on 17/07/2020\n+ */\n+public class MetadataFieldNameRestControllerIT extends AbstractEntityIntegrationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc0MTg2OQ==", "bodyText": "Would it be possible to add a test (either here or in a separate test file) that proves that newly added or updated MetadataField objects will be automatically reindexed?\nI should know the answer to this, but I'm worried that our MetadataField index might not be automatically updated.  Is it being updated whenever a new field is added (or an existing field is updated)?", "url": "https://github.com/DSpace/DSpace/pull/2899#discussion_r461741869", "createdAt": "2020-07-28T17:14:22Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/test/java/org/dspace/discovery/MetadataFieldIndexFactoryImplTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.discovery;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.solr.common.SolrInputDocument;\n+import org.dspace.AbstractUnitTest;\n+import org.dspace.content.MetadataField;\n+import org.dspace.content.MetadataSchema;\n+import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.content.service.MetadataFieldService;\n+import org.dspace.content.service.MetadataSchemaService;\n+import org.dspace.discovery.indexobject.IndexableMetadataField;\n+import org.dspace.discovery.indexobject.MetadataFieldIndexFactoryImpl;\n+import org.junit.Test;\n+\n+/**\n+ * Test class for {@link MetadataFieldIndexFactoryImpl}\n+ *\n+ * @author Maria Verdonck (Atmire) on 23/07/2020\n+ */\n+public class MetadataFieldIndexFactoryImplTest extends AbstractUnitTest {\n+    private MetadataSchemaService metadataSchemaService =\n+        ContentServiceFactory.getInstance().getMetadataSchemaService();\n+    private MetadataFieldService metadataFieldService = ContentServiceFactory.getInstance().getMetadataFieldService();\n+\n+    private String schemaName = \"schema1\";\n+    private String elemName1 = \"elem1\";\n+    private String elemName2 = \"elem2\";\n+    private String qualName1 = \"qual1\";\n+\n+    private MetadataSchema schema;\n+    private MetadataField field1;\n+    private MetadataField field2;\n+\n+    @Test\n+    public void test_buildDocument_withQualifier() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc0NDMxMQ==", "bodyText": "It looks like we're missing a test that uses schema, element and qualifier together to select a single unique MetadataField.  Could you add that in as well?", "url": "https://github.com/DSpace/DSpace/pull/2899#discussion_r461744311", "createdAt": "2020-07-28T17:18:16Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/MetadatafieldRestRepositoryIT.java", "diffHunk": "@@ -168,6 +172,261 @@ public void findByNullSchema() throws Exception {\n                    .andExpect(status().isBadRequest());\n     }\n \n+    @Test\n+    public void findByFieldName_schema() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        MetadataSchema schema = MetadataSchemaBuilder.createMetadataSchema(context, \"ASchema\",\n+            \"http://www.dspace.org/ns/aschema\").build();\n+\n+        MetadataField metadataField = MetadataFieldBuilder\n+            .createMetadataField(context, schema, \"AnElement\", \"AQualifier\", \"AScopeNote\").build();\n+\n+        context.restoreAuthSystemState();\n+\n+        super.runDSpaceScript(\"index-discovery\", \"-b\");\n+\n+        getClient().perform(get(SEARCH_BYFIELDNAME_ENDPOINT)\n+            .param(\"schema\", schema.getName()))\n+                   .andExpect(status().isOk())\n+                   .andExpect(content().contentType(contentType))\n+                   .andExpect(jsonPath(\"$._embedded.metadatafields\", Matchers.hasItem(\n+                       MetadataFieldMatcher.matchMetadataField(metadataField))\n+                                      ))\n+                   .andExpect(jsonPath(\"$.page.size\", is(20)))\n+                   .andExpect(jsonPath(\"$.page.totalElements\", is(1)));\n+    }\n+\n+    @Test\n+    public void findByFieldName_element() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        MetadataSchema schema = MetadataSchemaBuilder.createMetadataSchema(context, \"ASchema\",\n+            \"http://www.dspace.org/ns/aschema\").build();\n+        MetadataSchema schema2 = MetadataSchemaBuilder.createMetadataSchema(context, \"ASchema2\",\n+            \"http://www.dspace.org/ns/aschema2\").build();\n+\n+        MetadataField metadataField = MetadataFieldBuilder\n+            .createMetadataField(context, schema, \"AnElement\", \"AQualifier\", \"AScopeNote\").build();\n+\n+        MetadataField metadataField2 = MetadataFieldBuilder\n+            .createMetadataField(context, schema2, \"AnElement\", \"AQualifier2\", \"AScopeNote2\").build();\n+\n+        context.restoreAuthSystemState();\n+\n+        super.runDSpaceScript(\"index-discovery\", \"-b\");\n+\n+        getClient().perform(get(SEARCH_BYFIELDNAME_ENDPOINT)\n+            .param(\"element\", \"AnElement\"))\n+                   .andExpect(status().isOk())\n+                   .andExpect(content().contentType(contentType))\n+                   .andExpect(jsonPath(\"$._embedded.metadatafields\", Matchers.hasItem(\n+                       MetadataFieldMatcher.matchMetadataField(metadataField))\n+                                      ))\n+                   .andExpect(jsonPath(\"$._embedded.metadatafields\", Matchers.hasItem(\n+                       MetadataFieldMatcher.matchMetadataField(metadataField2))\n+                                      ))\n+                   .andExpect(jsonPath(\"$.page.size\", is(20)))\n+                   .andExpect(jsonPath(\"$.page.totalElements\", is(2)));\n+    }\n+\n+    @Test\n+    public void findByFieldName_elementAndQualifier() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        MetadataSchema schema = MetadataSchemaBuilder.createMetadataSchema(context, \"ASchema\",\n+            \"http://www.dspace.org/ns/aschema\").build();\n+        MetadataSchema schema2 = MetadataSchemaBuilder.createMetadataSchema(context, \"ASchema2\",\n+            \"http://www.dspace.org/ns/aschema2\").build();\n+\n+        MetadataField metadataField = MetadataFieldBuilder\n+            .createMetadataField(context, schema, \"AnElement1\", \"AQualifier\", \"AScopeNote\").build();\n+\n+        MetadataField metadataField2 = MetadataFieldBuilder\n+            .createMetadataField(context, schema2, \"AnElement2\", \"AQualifier\", \"AScopeNote2\").build();\n+\n+        MetadataField metadataField3 = MetadataFieldBuilder\n+            .createMetadataField(context, schema, \"AnElement2\", \"AQualifier\", \"AScopeNote2\").build();\n+\n+        context.restoreAuthSystemState();\n+\n+        super.runDSpaceScript(\"index-discovery\", \"-b\");\n+\n+        getClient().perform(get(SEARCH_BYFIELDNAME_ENDPOINT)\n+            .param(\"element\", \"AnElement2\")\n+            .param(\"qualifier\", \"AQualifier\"))\n+                   .andExpect(status().isOk())\n+                   .andExpect(content().contentType(contentType))\n+                   .andExpect(jsonPath(\"$._embedded.metadatafields\", Matchers.hasItem(\n+                       MetadataFieldMatcher.matchMetadataField(metadataField2))\n+                                      ))\n+                   .andExpect(jsonPath(\"$._embedded.metadatafields\", Matchers.hasItem(\n+                       MetadataFieldMatcher.matchMetadataField(metadataField3))\n+                                      ))\n+                   .andExpect(jsonPath(\"$._embedded.metadatafields\", Matchers.not(hasItem(\n+                       MetadataFieldMatcher.matchMetadataField(metadataField))\n+                                                                                 )))\n+                   .andExpect(jsonPath(\"$.page.size\", is(20)))\n+                   .andExpect(jsonPath(\"$.page.totalElements\", is(2)));\n+    }\n+\n+    @Test\n+    public void findByFieldName_schemaAndQualifier() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        MetadataSchema schema = MetadataSchemaBuilder.createMetadataSchema(context, \"ASchema\",\n+            \"http://www.dspace.org/ns/aschema\").build();\n+        MetadataSchema schema2 = MetadataSchemaBuilder.createMetadataSchema(context, \"ASchema2\",\n+            \"http://www.dspace.org/ns/aschema2\").build();\n+\n+        MetadataField metadataField = MetadataFieldBuilder\n+            .createMetadataField(context, schema, \"AnElement1\", \"AQualifier\", \"AScopeNote\").build();\n+\n+        MetadataField metadataField2 = MetadataFieldBuilder\n+            .createMetadataField(context, schema2, \"AnElement2\", \"AQualifier\", \"AScopeNote2\").build();\n+\n+        MetadataField metadataField3 = MetadataFieldBuilder\n+            .createMetadataField(context, schema, \"AnElement3\", \"AQualifier\", \"AScopeNote3\").build();\n+\n+        context.restoreAuthSystemState();\n+\n+        super.runDSpaceScript(\"index-discovery\", \"-b\");\n+\n+        getClient().perform(get(SEARCH_BYFIELDNAME_ENDPOINT)\n+            .param(\"schema\", schema.getName())\n+            .param(\"qualifier\", \"AQualifier\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 215}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3629454ec0341a20f20006d9f78d31313ecf7bac", "author": {"user": {"login": "MarieVerdonck", "name": "Marie Verdonck"}}, "url": "https://github.com/DSpace/DSpace/commit/3629454ec0341a20f20006d9f78d31313ecf7bac", "committedDate": "2020-08-12T11:46:54Z", "message": "71752: Metadafield search byFieldName (by solr indexing mdFields)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "036e31c38dc1f4d2ea2997c1eaa40256cd961dc7", "author": {"user": {"login": "MarieVerdonck", "name": "Marie Verdonck"}}, "url": "https://github.com/DSpace/DSpace/commit/036e31c38dc1f4d2ea2997c1eaa40256cd961dc7", "committedDate": "2020-08-12T11:46:54Z", "message": "71752: ITs for /metadatafields/search/byFieldName endpoint &\nindexed MetadataFields now accessible to anon group & checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1aacdd2538eae5b0b2a7b4968c518e7a670326fa", "author": {"user": {"login": "MarieVerdonck", "name": "Marie Verdonck"}}, "url": "https://github.com/DSpace/DSpace/commit/1aacdd2538eae5b0b2a7b4968c518e7a670326fa", "committedDate": "2020-08-12T11:47:33Z", "message": "71752: endpoint metadatafield/name/{metadata-field-full-name} + tests added &\nfix for search byFieldName in mdFields with query param starting with element or qualifier"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fdef69b6da02f013eac774a23343cb33a793fe08", "author": {"user": {"login": "MarieVerdonck", "name": "Marie Verdonck"}}, "url": "https://github.com/DSpace/DSpace/commit/fdef69b6da02f013eac774a23343cb33a793fe08", "committedDate": "2020-08-12T11:47:33Z", "message": "71752: constants for field names; code cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c046a1c8f3e32630a710f92bb86d225baa262c21", "author": {"user": {"login": "MarieVerdonck", "name": "Marie Verdonck"}}, "url": "https://github.com/DSpace/DSpace/commit/c046a1c8f3e32630a710f92bb86d225baa262c21", "committedDate": "2020-08-12T11:47:33Z", "message": "71752: tests for MetadataFieldIndexFactoryImpl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9dae6a9579670e79cc806b53384cb69644c33b78", "author": {"user": {"login": "MarieVerdonck", "name": "Marie Verdonck"}}, "url": "https://github.com/DSpace/DSpace/commit/9dae6a9579670e79cc806b53384cb69644c33b78", "committedDate": "2020-08-12T11:47:33Z", "message": "71752: Reindex metadatafields on create/update/delete + tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75ebc887cc44495d00d24afcef47b819f7110ed7", "author": {"user": {"login": "MarieVerdonck", "name": "Marie Verdonck"}}, "url": "https://github.com/DSpace/DSpace/commit/75ebc887cc44495d00d24afcef47b819f7110ed7", "committedDate": "2020-08-12T11:47:33Z", "message": "71752: /metadatafield/<exactMdString> replace with byfieldName?exactName endpoint + tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "735c3bc791b3fe094ecdb835b24bace7329047af", "author": {"user": {"login": "MarieVerdonck", "name": "Marie Verdonck"}}, "url": "https://github.com/DSpace/DSpace/commit/735c3bc791b3fe094ecdb835b24bace7329047af", "committedDate": "2020-08-12T11:47:33Z", "message": "71752: disallow combination exactName and any of query/schema/element/qualifier query params in /byFieldName search endpoint"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "735c3bc791b3fe094ecdb835b24bace7329047af", "author": {"user": {"login": "MarieVerdonck", "name": "Marie Verdonck"}}, "url": "https://github.com/DSpace/DSpace/commit/735c3bc791b3fe094ecdb835b24bace7329047af", "committedDate": "2020-08-12T11:47:33Z", "message": "71752: disallow combination exactName and any of query/schema/element/qualifier query params in /byFieldName search endpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f26cf7def6c36147d80050a9967ae1e83c96c8c", "author": {"user": {"login": "MarieVerdonck", "name": "Marie Verdonck"}}, "url": "https://github.com/DSpace/DSpace/commit/2f26cf7def6c36147d80050a9967ae1e83c96c8c", "committedDate": "2020-08-21T14:07:07Z", "message": "71752: Refactored metadatafield indexing via event > consumer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NzkyMjEw", "url": "https://github.com/DSpace/DSpace/pull/2899#pullrequestreview-476792210", "createdAt": "2020-08-27T14:43:19Z", "commit": {"oid": "2f26cf7def6c36147d80050a9967ae1e83c96c8c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4OTY3NTQz", "url": "https://github.com/DSpace/DSpace/pull/2899#pullrequestreview-478967543", "createdAt": "2020-08-31T21:28:16Z", "commit": {"oid": "2f26cf7def6c36147d80050a9967ae1e83c96c8c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1534, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}