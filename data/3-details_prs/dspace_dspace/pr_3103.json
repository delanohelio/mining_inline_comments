{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0NDExNTc0", "number": 3103, "title": "Enable Customized CSRF Protection in Spring Security for Server Webapp", "bodyText": "References\n\nReplaces #2922 (Based heavily on this older PR with updates)\nReplaces #3001\nRequires DSpace/dspace-angular#977 when testing Angular UI\n\nDescription\nEnables a customized version of Spring Security CSRF (aka XSRF) Protection which works both cross-domain (where client & backend are on separate domains) and via Shibboleth.  The CSRF Protection is custom because, while it still uses Cookies to save CSRF tokens, the CSRF tokens are always sent between the frontend & backend via HTTP Headers (this is what allows it to work cross domain).\nAs noted in this LGTM rule, Spring Security enables this CSRF protection by default and recommends it \"for any request that could be processed by a browser client by normal users\".  In this PR, I've also made sure to use standard names for XSRF headers/cookies based on Angular XSRF Protection best practices -- this makes the Angular UI implementation a bit easier.\nDetail: How it Works\n\nServer Webapp generates CSRF token & stores in a server-side cookie named DSPACE-XSRF-COOKIE.  By default, this cookie is not readable to JS clients (HttpOnly=true). But, it is returned (by user's browser) on every subsequent request to backend.\nAt the same time, Server Webapp also sends the generated CSRF token in a header named DSPACE-XSRF-TOKEN to client (e.g. Angular UI).\nClient MUST look for DSPACE-XSRF-TOKEN header in a response from backend. If found, the client MUST store/save this token for later request(s).  For Angular UI, this task is/will be performed by a new XsrfInterceptor.\nWhenever the client is making a mutating request (e.g. POST, PUT, DELETE, etc), the CSRF token is REQUIRED to be sent back to the Server Webapp in the X-XSRF-TOKEN header.\n\nNOTE: non-mutating requests (e.g. GET, HEAD) do not check for an CSRF token. This is default behavior in Spring Security\n\n\nIn the Server Webapp, the X-XSRF-TOKEN header is received & compared to the current value of the server-side cookie named DSPACE-XSRF-COOKIE. If tokens match, the request is accepted. If tokens don't match a 403 is returned. This validation is done automatically by Spring Security.\n\nIn summary, the CSRF token is ALWAYS sent to/from the client & backend via HTTP headers. This is what allows the client and backend to be on different domains. The server-side cookie named DSPACE-XSRF-COOKIE is (usually) not accessible to the client. It only exists to allow the server-side to remember the currently active CSRF token, so that it can validate the CSRF token sent back (by the client) in the X-XSRF-TOKEN header.\nFull List of Changes\n\nEnables Spring Security's CSRF protection, using a custom DSpaceCsrfTokenRepository to send/receive the CSRF token (as described in detail above).\n\nAlso adds a custom DSpaceCsrfAuthenticationStrategy which ensures the CSRF token is only regenerated/changed when it is attempted to be used -- this is needed as the default AuthenticationStrategy ends up regenerating the token on every request when stateless authentication is used.\nAdds/Updates ITs to prove this is working as expected....including verifying an error is thrown if an invalid CSRF token is sent.\n\n\nUpdates /logout endpoint to ONLY respond to POST requests (previously it allowed for GET or POST).  This aligns with the OWASP principle \"Do not use GET requests for state changing operations\". It also is recommended by Spring Security\nAdded custom DSpaceAccessDeniedHandler to allow us to customize the error message when an invalid/missing CSRF token is sent.\nUpdated all Cookies to use SameSite=None attribute. This is necessary to allow Cookies to be passed back and forth (by a user's browser) between client & server when they are on different domains.  Without this, the browser will block (or fail to send) these cookies back whenever the UI and REST API are on a different domain.\nUpdated HAL Browser code to support CSRF as described above. This means it now reads the CSRF token from the new DSPACE-XSRF-TOKEN header...storing it in a new MyHalBrowserCsrfToken cookie (alongside MyHalBrowserToken cookie used for the Auth token), and sending it back in a X-XSRF-TOKEN header.\nMinor changes to AbstractBuilderCleanupUtil to list a few missing Builders.  Without them, I hit some odd IT errors.\nMinor cleanup/reorg of WebSecurityConfiguration just to make it more readable. Added some inline comments.\nMinor changes to ApplicationConfig to ensure URLs listed in rest.cors.allowed-origins configuration never end in a trailing slash.  Spring Security treats \"http://example.org\" and \"http://example.org/\" as different origins....which causes very odd behavior if you don't notice you added a trailing slash.\nMinor fixes to Docker settings for dspace-shibboleth docker image.  This fixes an annoying bug where Apache settings on that image were overwriting the HTTP Headers generated by the DSpace REST API, causing odd errors to occur.\n\nInstructions for Reviewers\n\nTest HalBrowser (especially login/logout)\nTest Authentication via Shibboleth\nTest Authentication via Password\nTest Angular UI functionality in general (Requires corresponding Angular PR)\n\nChecklist\n\n My PR is small in size (e.g. less than 1,000 lines of code, not including comments & integration tests). Exceptions may be made if previously agreed upon.\n My PR passes Checkstyle validation based on the Code Style Guide.\n My PR includes Javadoc for all new (or modified) public methods and classes. It also includes Javadoc for large or complex private methods.\n My PR passes all tests and includes new/updated Unit or Integration Tests based on the Code Testing Guide.\n If my PR includes new, third-party dependencies (in any pom.xml), I've made sure their licenses align with the DSpace BSD License based on the Licensing of Contributions documentation.\n If my PR modifies the REST API, I've linked to the REST Contract page (or open PR) related to this change.", "createdAt": "2020-12-22T22:53:49Z", "url": "https://github.com/DSpace/DSpace/pull/3103", "merged": true, "mergeCommit": {"oid": "d4c6bd7847b16a75f9e898399753484e29ac9036"}, "closed": true, "closedAt": "2021-02-08T17:44:34Z", "author": {"login": "tdonohue"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdtiDRBAH2gAyNTQ0NDExNTc0OmRlNThhNmNhMDM2N2YyOTkyYzMwZDcyMzdjMzM4MzM2YzYyNGMyMzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd07hjsgH2gAyNTQ0NDExNTc0OjcwMjUzYmMxYmYxNmNlNmI2MTJlNWJiZjNjYzg3NjQwN2UwNTYzNmE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "de58a6ca0367f2992c30d7237c338336c624c235", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/de58a6ca0367f2992c30d7237c338336c624c235", "committedDate": "2021-01-06T16:24:10Z", "message": "Reenable CSRF projection with recommended Angular settings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55c47194f4ae411852397efe66b0b6edb4910902", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/55c47194f4ae411852397efe66b0b6edb4910902", "committedDate": "2021-01-06T16:24:10Z", "message": "Cleanup WebSecurityConfiguration via reorg, adding comments & removing duplicative or unneeded default configs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6bf9a2fb35456c4f8f11d85bddde33feb0059ab", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/b6bf9a2fb35456c4f8f11d85bddde33feb0059ab", "committedDate": "2021-01-06T16:24:10Z", "message": "Add in missing Builders to enable automated cleanup for these builders"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "901cf6e285339425f554d40e1e11469498bb4058", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/901cf6e285339425f554d40e1e11469498bb4058", "committedDate": "2021-01-06T16:24:11Z", "message": "Fix possible XSS issue in Hal Browser. See https://github.com/mikekelly/hal-browser/pull/97"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d15e603d43f6fb0901d5e0a645ed9992c6fa9e89", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/d15e603d43f6fb0901d5e0a645ed9992c6fa9e89", "committedDate": "2021-01-06T16:24:11Z", "message": "Add (custom) CSRF support to HAL Browser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6c095f29651afeae152155d8621149bcd4e7802", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/f6c095f29651afeae152155d8621149bcd4e7802", "committedDate": "2021-01-06T16:24:11Z", "message": "Add comments to dspace.cfg describing Spring Boot proxy settings which may be applicable to sites using a proxy. I found this useful when testing SameSite cookies behind a HTTPS proxy."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30451676abd0151fa850314762f66beaf0530cfb", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/30451676abd0151fa850314762f66beaf0530cfb", "committedDate": "2021-01-06T16:24:12Z", "message": "Ensure allowed origins never end in a slash. Otherwise, you can get CORS errors even if the URL is correct."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d084358e70779748c02ad350da3ce9ac5d4dece4", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/d084358e70779748c02ad350da3ce9ac5d4dece4", "committedDate": "2021-01-06T16:24:13Z", "message": "Customize CsrfTokenRepository and CsrfAuthenticationStrategy to support cross domain CSRF protection."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "126775c665f017aed6b5db0e0953b61c309de16a", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/126775c665f017aed6b5db0e0953b61c309de16a", "committedDate": "2021-01-06T16:24:13Z", "message": "Update dspace-shibboleth docker settings to no longer overwrite Access-Control-Expose-Headers. Instead we'll use the ones from Tomcat."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acaa1dbc64e390a3188ac3a4cbe36e6a9711492a", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/acaa1dbc64e390a3188ac3a4cbe36e6a9711492a", "committedDate": "2021-01-06T16:24:14Z", "message": "Require POST for logout. Update CSRFTokenRepository to no longer allow server token to be read by Javascript"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b35a3f71be51356b72076baeafb194dfa0ac14cc", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/b35a3f71be51356b72076baeafb194dfa0ac14cc", "committedDate": "2021-01-06T16:24:14Z", "message": "Update HAL browser to use DSPACE-XSRF-TOKEN header and store token in custom MyHalBrowserCsrfToken Cookie. Minor comment fixes to TokenRepo"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "b35a3f71be51356b72076baeafb194dfa0ac14cc", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/b35a3f71be51356b72076baeafb194dfa0ac14cc", "committedDate": "2021-01-06T16:24:14Z", "message": "Update HAL browser to use DSPACE-XSRF-TOKEN header and store token in custom MyHalBrowserCsrfToken Cookie. Minor comment fixes to TokenRepo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6747bbea92b5abc1758f122f2e3e721c2a1634f9", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/6747bbea92b5abc1758f122f2e3e721c2a1634f9", "committedDate": "2021-01-08T21:56:54Z", "message": "Bug Fix: CSRF token should be reset after InvalidCsrfTokenException to allow for resyncing between client & server"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY3MjE1NzUw", "url": "https://github.com/DSpace/DSpace/pull/3103#pullrequestreview-567215750", "createdAt": "2021-01-13T13:24:39Z", "commit": {"oid": "6747bbea92b5abc1758f122f2e3e721c2a1634f9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc4MzY2NjA0", "url": "https://github.com/DSpace/DSpace/pull/3103#pullrequestreview-578366604", "createdAt": "2021-01-28T14:07:59Z", "commit": {"oid": "6747bbea92b5abc1758f122f2e3e721c2a1634f9"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxNDowNzo1OVrOIb5P3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQxNDoxODoyMVrOIb5uRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEyMDQxNA==", "bodyText": "just a minor thing but I would be happier if we found a way to resolve it at runtime or inject it. We should have a way to get the ExceptionHandlerResolver from spring and pass to it the exception", "url": "https://github.com/DSpace/DSpace/pull/3103#discussion_r566120414", "createdAt": "2021-01-28T14:07:59Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/exception/DSpaceAccessDeniedHandler.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.exception;\n+\n+import java.io.IOException;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.dspace.app.rest.security.WebSecurityConfiguration;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.web.access.AccessDeniedHandler;\n+import org.springframework.security.web.csrf.CsrfToken;\n+import org.springframework.security.web.csrf.CsrfTokenRepository;\n+import org.springframework.security.web.csrf.InvalidCsrfTokenException;\n+import org.springframework.security.web.csrf.MissingCsrfTokenException;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * This Handler customizes behavior of AccessDeniedException errors thrown by Spring Security/Boot.\n+ * <P>\n+ * More specifically, we use this Handler to ensure exceptions related to CSRF Tokens are also sent to our\n+ * DSpaceApiExceptionControllerAdvice class, which manages all exceptions for the DSpace backend. Without this\n+ * handler, those CSRF exceptions are managed by Spring Security/Boot *before* DSpaceApiExceptionControllerAdvice\n+ * is triggered.\n+ * <P>\n+ * Additionally, this Handler is customized to refresh the CSRF Token whenever an InvalidCsrfTokenException occurs.\n+ * This helps ensure our DSpace server-side token (stored in a server-side cookie) remains \"synced\" with the token\n+ * on the client side. If they ever get out of sync, the next request will throw an InvalidCsrfTokenException.\n+ *\n+ * @see DSpaceApiExceptionControllerAdvice\n+ */\n+@Component\n+public class DSpaceAccessDeniedHandler implements AccessDeniedHandler {\n+\n+    @Autowired\n+    private WebSecurityConfiguration webSecurityConfiguration;\n+\n+    /**\n+     * Override handle() to pass these exceptions over to our DSpaceApiExceptionControllerAdvice handler\n+     * @param request request\n+     * @param response response\n+     * @param ex AccessDeniedException\n+     * @throws IOException\n+     * @throws ServletException\n+     */\n+    @Override\n+    public void handle(HttpServletRequest request, HttpServletResponse response, AccessDeniedException ex)\n+        throws IOException, ServletException {\n+\n+        // Do nothing if response is already committed\n+        if (response.isCommitted()) {\n+            return;\n+        }\n+\n+        // If we had an InvalidCsrfTokenException, this means the client sent a CSRF token which did *not* match the\n+        // token on the server. In this scenario, we trigger a refresh of the CSRF token...as it's possible the user\n+        // switched clients (from HAL Browser to UI or visa versa) and has an out-of-sync token.\n+        if (ex instanceof InvalidCsrfTokenException) {\n+            // Get access to our enabled CSRF token repository\n+            CsrfTokenRepository csrfTokenRepository = webSecurityConfiguration.getCsrfTokenRepository();\n+\n+            // Remove current token & generate a new one\n+            csrfTokenRepository.saveToken(null, request, response);\n+            CsrfToken newToken = csrfTokenRepository.generateToken(request);\n+            csrfTokenRepository.saveToken(newToken, request, response);\n+        }\n+\n+        // Get access to our general exception handler\n+        DSpaceApiExceptionControllerAdvice handler = new DSpaceApiExceptionControllerAdvice();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6747bbea92b5abc1758f122f2e3e721c2a1634f9"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjEyODE5Ng==", "bodyText": "I don't see any real flow in the proposed solution but if we need to identify one area where we could have hidden problem it is probable the use of a cookie for the csrf check. I'm not sure if having such cookie in place could for instance lead to false positive report by security tool. I'm just curious to know if you have investigated the use of a CSRF JWT based repository see for instance\nhttps://stormpath.com/blog/csrf-protection-jwt-spring-security\nspring-projects/spring-security#5300", "url": "https://github.com/DSpace/DSpace/pull/3103#discussion_r566128196", "createdAt": "2021-01-28T14:18:21Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/security/DSpaceCsrfAuthenticationStrategy.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.security;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.web.authentication.session.SessionAuthenticationException;\n+import org.springframework.security.web.authentication.session.SessionAuthenticationStrategy;\n+import org.springframework.security.web.csrf.CsrfToken;\n+import org.springframework.security.web.csrf.CsrfTokenRepository;\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Custom SessionAuthenticationStrategy to be used alongside DSpaceCsrfTokenRepository.\n+ * <P>\n+ * Because DSpace is Stateless, this class only resets the CSRF Token if the client has attempted to use it (either\n+ * successfully or unsuccessfully). This ensures that the Token is not changed on every request (since we are stateless\n+ * every request creates a new Authentication object).\n+ * <P>\n+ * Based on Spring Security's CsrfAuthenticationStrategy:\n+ * https://github.com/spring-projects/spring-security/blob/5.2.x/web/src/main/java/org/springframework/security/web/csrf/CsrfAuthenticationStrategy.java\n+ */\n+public class DSpaceCsrfAuthenticationStrategy implements SessionAuthenticationStrategy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6747bbea92b5abc1758f122f2e3e721c2a1634f9"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70253bc1bf16ce6b612e5bbf3cc876407e05636a", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/70253bc1bf16ce6b612e5bbf3cc876407e05636a", "committedDate": "2021-01-29T16:02:21Z", "message": "Resolve feedback - Ensure DSpaceAccessDeniedHandler passes exception response handling to DSpaceApiExceptionControllerAdvice dynamically."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1287, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}