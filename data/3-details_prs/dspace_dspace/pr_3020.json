{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3ODM0NjQ3", "number": 3020, "title": "Upgrade to latest Guava (v30) and Solr (v8) to resolve security alerts", "bodyText": "References\nThis PR resolves 3 security alerts by upgrading Guava:\n\nhttps://github.com/DSpace/DSpace/network/alert/pom.xml/com.google.guava:guava/open\nhttps://github.com/DSpace/DSpace/network/alert/dspace/pom.xml/com.google.guava:guava/open\nhttps://github.com/DSpace/DSpace/network/alert/dspace-oai/pom.xml/com.google.guava:guava/open\n\nThis PR also moves us off an EOL version of Solr, resolving https://jira.lyrasis.org/browse/DS-4497\nDescription\nUpgrades the following dependencies:\n\nUpgrades guava from v19.0 to v30.0-jre. This resolves the security alerts listed above.\nUpgrades Solr from v7.3.1 to v8.7.0.  This was necessitated by the guava upgrade, as I was unable to get the latest version of guava to work with Solr v7 (because of Java API changes in guava).\nMinor upgrade of Jetty from v9.4.17.v20190418 to 9.4.35.v20201120 to align with the above upgrades and fix GitHub security alert\nOther minor dependency realignment in POMs to resolve dependency convergence issues.\n\nCode changes required by Guava upgrade:\n\nRemoves & replaces outdated/obsolete Lyncode builder-commons & test-support dependencies (from dspace-oai module classes).  These old Lyncode dependencies brought in a very old version of guava & were causing a headache in terms of dependency convergence.  It was easiest to completely remove them & replace them with updated code that did the same thing.\n\nIn order to determine what the Lyncode builders were doing, I looked at the source code at https://github.com/lyncode/builder-commons and found a modern replacement (in some cases using Guava directly & in others just using standard Java 11 code).\nThe Lyncode test-support classes were only used in PipelineTest, and I found replacement code in our existing QDCXslTest class which does a similar test without using Lyncode's test-support.\n\n\n\nCode changes required by Solr upgrade:\n\nUpdated SolrSearchCore and SolrServiceImpl to use GET requests when the EmbeddedSolrServer is in use (during integration test execution).\n\nThis was necessary to work around a known issue with POST requests with EmbeddedSolrServer: https://issues.apache.org/jira/browse/SOLR-12858\n\n\nUpdated IndexFactoryImpl to no longer use ContentStreamUpdateRequest for indexing full text.  Instead, it has been refactored to use Apache Tika directly.  Also introduced a new discovery.solr.fulltext.charLimit configuration to allow for more control over Tika's default character limit indexing settings.\n\nThis was necessary to work around recent changes/bugs introduced to ContentStreamUpdateRequest which are best described in this ticket https://issues.apache.org/jira/browse/SOLR-12798\nThose bugs in ContentStreamUpdateRequest resulted in frequent errors during full text indexing (o.e.j.h.HttpParser URI is too large >8192) because the ContentStreamUpdateRequest class no longer supports multipart post well & was sending all fields as URL parameters.\nMoving to using Apache Tika directly is also the recommended way to do full text indexing in Solr. See https://lucene.apache.org/solr/guide/8_7/uploading-data-with-solr-cell-using-apache-tika.html\n\n\nMinor updates to existing solrconfig.xml files to ensure they are aligned with Solr v8.7.0 default settings. (Some whitespace changes occurred here too that were automated by my IDE)\nUpdated Docker to support Solr v8 (and the new directory structure in Solr v8 docker images).  Also required moving to using the official Solr Docker image with Docker Compose, instead of creating our own custom image.\n\nAdditional minor changes:\n\nRenamed DatabaseRegistryUpdater to RegistryUpdater.  This ensures it comes alphabetically after the GroupServiceInitializer and therefore is always run after Groups are created (as Flyway defaults to running Callbacks alphabetically).  I stumbled on this problem when starting with a fresh database...as the RegistryUpdater depends on the GroupServiceInitializer.\n\nInstructions for Reviewers\n\nReview code\nVerify tests still succeed (they do)\nTest OAI-PMH interface & reindexing.\nTest Solr indexing (./dspace index-discovery -b)\nTest search/browse functionality.\n\n(NOTE: I've tested & verified all of the above and found no remaining issues.)\nChecklist\n\n My PR is small in size (e.g. less than 1,000 lines of code, not including comments & integration tests). Exceptions may be made if previously agreed upon.\n My PR passes Checkstyle validation based on the Code Style Guide.\n My PR includes Javadoc for all new (or modified) public methods and classes. It also includes Javadoc for large or complex private methods.\n My PR passes all tests and includes new/updated Unit or Integration Tests based on the Code Testing Guide.\n If my PR includes new, third-party dependencies (in any pom.xml), I've made sure their licenses align with the DSpace BSD License based on the Licensing of Contributions documentation.\n If my PR modifies the REST API, I've linked to the REST Contract page (or open PR) related to this change.", "createdAt": "2020-10-21T20:09:45Z", "url": "https://github.com/DSpace/DSpace/pull/3020", "merged": true, "mergeCommit": {"oid": "5d8285dc613706efa5935ce8c06bc449a935b69c"}, "closed": true, "closedAt": "2021-02-25T17:52:01Z", "author": {"login": "tdonohue"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdiCFz2gBqjQwNTk2MDQyODA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd9oMfuABqjQzNzc1NjA1MTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "dd9641a4b6d3f3b62bde386ed11ba8b11c75fdb8", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/dd9641a4b6d3f3b62bde386ed11ba8b11c75fdb8", "committedDate": "2021-01-04T17:49:06Z", "message": "Minor cleanup. Comment correction. Remove commented out code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "c75265e582ae9c7465a1bdd0720bf688d37cb471", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/c75265e582ae9c7465a1bdd0720bf688d37cb471", "committedDate": "2021-01-15T15:02:13Z", "message": "Upgrade to Solr 8.7.0. Fix dependency convergence issues. Minor fix to MockSolrServer for Solr 8 compatibility"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgxNDQ0ODMw", "url": "https://github.com/DSpace/DSpace/pull/3020#pullrequestreview-581444830", "createdAt": "2021-02-02T15:09:47Z", "commit": {"oid": "95d0cd18e500998f2ce67372d8e0edb66629d745"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxNTowOTo0OFrOIeVW_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxNTowOTo0OFrOIeVW_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODY3ODE0Mw==", "bodyText": "Log4j2's parameter substitution would reduce this expensive multiple-string-concatenation expression to a compile-time constant.", "url": "https://github.com/DSpace/DSpace/pull/3020#discussion_r568678143", "createdAt": "2021-02-02T15:09:48Z", "author": {"login": "mwoodiupui"}, "path": "dspace-api/src/main/java/org/dspace/discovery/indexobject/IndexFactoryImpl.java", "diffHunk": "@@ -74,32 +79,59 @@ public void writeDocument(Context context, T indexableObject, SolrInputDocument\n      * Write the document to the index under the appropriate unique identifier.\n      *\n      * @param doc     the solr document to be written to the server\n-     * @param streams list of bitstream content streams    DiscoverQueryBuilderTest.java:285\n+     * @param streams list of bitstream content streams\n      * @throws IOException A general class of exceptions produced by failed or interrupted I/O operations.\n      */\n     protected void writeDocument(SolrInputDocument doc, FullTextContentStreams streams)\n             throws IOException, SolrServerException {\n         final SolrClient solr = solrSearchCore.getSolr();\n         if (solr != null) {\n             if (streams != null && !streams.isEmpty()) {\n-                ContentStreamUpdateRequest req = new ContentStreamUpdateRequest(\"/update/extract\");\n-                req.addContentStream(streams);\n-\n-                ModifiableSolrParams params = new ModifiableSolrParams();\n+                // limit full text indexing to first 100,000 characters unless configured otherwise\n+                final int charLimit = DSpaceServicesFactory.getInstance().getConfigurationService()\n+                                                           .getIntProperty(\"discovery.solr.fulltext.charLimit\",\n+                                                                           100000);\n+\n+                // Use Tika's Text parser as the streams are always from the TEXT bundle (i.e. already extracted text)\n+                // TODO: We may wish to consider using Tika to extract the text in the future.\n+                TextAndCSVParser tikaParser = new TextAndCSVParser();\n+                BodyContentHandler tikaHandler = new BodyContentHandler(charLimit);\n+                Metadata tikaMetadata = new Metadata();\n+                ParseContext tikaContext = new ParseContext();\n+\n+                // Use Apache Tika to parse the full text stream\n+                try {\n+                    tikaParser.parse(streams.getStream(), tikaHandler, tikaMetadata, tikaContext);\n+                } catch (SAXException saxe) {\n+                    // Check if this SAXException is just a notice that this file was longer than the character limit.\n+                    // Unfortunately there is not a unique, public exception type to catch here. This error is thrown\n+                    // by Tika's WriteOutContentHandler when it encounters a document longer than the char limit\n+                    // https://github.com/apache/tika/blob/main/tika-core/src/main/java/org/apache/tika/sax/WriteOutContentHandler.java\n+                    if (saxe.getMessage().contains(\"limit has been reached\")) {\n+                        // log that we only indexed up to that configured limit\n+                        log.info(\"Full text is larger than the configured limit (discovery.solr.fulltext.charLimit).\"\n+                                     + \" Only the first \" + charLimit + \" characters were indexed.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95d0cd18e500998f2ce67372d8e0edb66629d745"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgxNDgwNTY2", "url": "https://github.com/DSpace/DSpace/pull/3020#pullrequestreview-581480566", "createdAt": "2021-02-02T15:42:11Z", "commit": {"oid": "95d0cd18e500998f2ce67372d8e0edb66629d745"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxNTo0MjoxMVrOIeW_3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxNTo0MjoxMVrOIeW_3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODcwNDk5MQ==", "bodyText": "Do we really want a hard commit after every document?  The usual advice from the Solr maintainers on committing in the client is \"don't.\"  If this method is ever used in bulk indexing, the bulk operation will be quite slow and make the top-level caches ineffective for all other users.  We should tune our autocommit settings for a good balance of indexing performance and visibility, and trust autocommit.", "url": "https://github.com/DSpace/DSpace/pull/3020#discussion_r568704991", "createdAt": "2021-02-02T15:42:11Z", "author": {"login": "mwoodiupui"}, "path": "dspace-api/src/main/java/org/dspace/discovery/indexobject/IndexFactoryImpl.java", "diffHunk": "@@ -74,32 +79,59 @@ public void writeDocument(Context context, T indexableObject, SolrInputDocument\n      * Write the document to the index under the appropriate unique identifier.\n      *\n      * @param doc     the solr document to be written to the server\n-     * @param streams list of bitstream content streams    DiscoverQueryBuilderTest.java:285\n+     * @param streams list of bitstream content streams\n      * @throws IOException A general class of exceptions produced by failed or interrupted I/O operations.\n      */\n     protected void writeDocument(SolrInputDocument doc, FullTextContentStreams streams)\n             throws IOException, SolrServerException {\n         final SolrClient solr = solrSearchCore.getSolr();\n         if (solr != null) {\n             if (streams != null && !streams.isEmpty()) {\n-                ContentStreamUpdateRequest req = new ContentStreamUpdateRequest(\"/update/extract\");\n-                req.addContentStream(streams);\n-\n-                ModifiableSolrParams params = new ModifiableSolrParams();\n+                // limit full text indexing to first 100,000 characters unless configured otherwise\n+                final int charLimit = DSpaceServicesFactory.getInstance().getConfigurationService()\n+                                                           .getIntProperty(\"discovery.solr.fulltext.charLimit\",\n+                                                                           100000);\n+\n+                // Use Tika's Text parser as the streams are always from the TEXT bundle (i.e. already extracted text)\n+                // TODO: We may wish to consider using Tika to extract the text in the future.\n+                TextAndCSVParser tikaParser = new TextAndCSVParser();\n+                BodyContentHandler tikaHandler = new BodyContentHandler(charLimit);\n+                Metadata tikaMetadata = new Metadata();\n+                ParseContext tikaContext = new ParseContext();\n+\n+                // Use Apache Tika to parse the full text stream\n+                try {\n+                    tikaParser.parse(streams.getStream(), tikaHandler, tikaMetadata, tikaContext);\n+                } catch (SAXException saxe) {\n+                    // Check if this SAXException is just a notice that this file was longer than the character limit.\n+                    // Unfortunately there is not a unique, public exception type to catch here. This error is thrown\n+                    // by Tika's WriteOutContentHandler when it encounters a document longer than the char limit\n+                    // https://github.com/apache/tika/blob/main/tika-core/src/main/java/org/apache/tika/sax/WriteOutContentHandler.java\n+                    if (saxe.getMessage().contains(\"limit has been reached\")) {\n+                        // log that we only indexed up to that configured limit\n+                        log.info(\"Full text is larger than the configured limit (discovery.solr.fulltext.charLimit).\"\n+                                     + \" Only the first \" + charLimit + \" characters were indexed.\");\n+                    } else {\n+                        throw new IOException(\"Tika parsing error. Could not index full text.\", saxe);\n+                    }\n+                } catch (TikaException ex) {\n+                    throw new IOException(\"Tika parsing error. Could not index full text.\", ex);\n+                }\n \n-                //req.setParam(ExtractingParams.EXTRACT_ONLY, \"true\");\n-                for (String name : doc.getFieldNames()) {\n-                    for (Object val : doc.getFieldValues(name)) {\n-                        params.add(ExtractingParams.LITERALS_PREFIX + name, val.toString());\n+                // Write Tika metadata to \"tika_meta_*\" fields.\n+                // This metadata is not very useful right now, but we'll keep it just in case it becomes more useful.\n+                for (String name : tikaMetadata.names()) {\n+                    for (String value : tikaMetadata.getValues(name)) {\n+                        doc.addField(\"tika_meta_\" + name, value);\n                     }\n                 }\n \n-                req.setParams(params);\n-                req.setParam(ExtractingParams.UNKNOWN_FIELD_PREFIX, \"attr_\");\n-                req.setParam(ExtractingParams.MAP_PREFIX + \"content\", \"fulltext\");\n-                req.setParam(ExtractingParams.EXTRACT_FORMAT, \"text\");\n-                req.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n-                req.process(solr);\n+                // Save (parsed) full text to \"fulltext\" field\n+                doc.addField(\"fulltext\", tikaHandler.toString());\n+\n+                // Add document & commit immediately\n+                solr.add(doc);\n+                solr.commit(true, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95d0cd18e500998f2ce67372d8e0edb66629d745"}, "originalPosition": 108}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgxNDgzOTg3", "url": "https://github.com/DSpace/DSpace/pull/3020#pullrequestreview-581483987", "createdAt": "2021-02-02T15:45:17Z", "commit": {"oid": "95d0cd18e500998f2ce67372d8e0edb66629d745"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxNTo0NToxN1rOIeXJzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxNTo0NToxN1rOIeXJzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODcwNzUzNQ==", "bodyText": "Paths.get(AbstractDSpaceIntegrationTest.getDspaceDir(), \"solr\");", "url": "https://github.com/DSpace/DSpace/pull/3020#discussion_r568707535", "createdAt": "2021-02-02T15:45:17Z", "author": {"login": "mwoodiupui"}, "path": "dspace-api/src/test/java/org/dspace/solr/MockSolrServer.java", "diffHunk": "@@ -159,9 +162,9 @@ public void destroy() throws Exception {\n      */\n     private static synchronized void initSolrContainer() {\n         if (container == null) {\n-            String solrDir = AbstractDSpaceIntegrationTest.getDspaceDir() + File.separator + \"solr\";\n-            log.info(\"Initializing SOLR CoreContainer with directory \" + solrDir);\n-            container = new CoreContainer(solrDir);\n+            Path solrDir = Paths.get(AbstractDSpaceIntegrationTest.getDspaceDir() + File.separator + \"solr\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95d0cd18e500998f2ce67372d8e0edb66629d745"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgxNDg0ODMz", "url": "https://github.com/DSpace/DSpace/pull/3020#pullrequestreview-581484833", "createdAt": "2021-02-02T15:46:07Z", "commit": {"oid": "95d0cd18e500998f2ce67372d8e0edb66629d745"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxNTo0NjowN1rOIeXMiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxNTo0NjowN1rOIeXMiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODcwODIzNQ==", "bodyText": "Parameter substitution here.\nAlso, another string concatenation in Paths.get.", "url": "https://github.com/DSpace/DSpace/pull/3020#discussion_r568708235", "createdAt": "2021-02-02T15:46:07Z", "author": {"login": "mwoodiupui"}, "path": "dspace-api/src/test/java/org/dspace/solr/MockSolrServer.java", "diffHunk": "@@ -159,9 +162,9 @@ public void destroy() throws Exception {\n      */\n     private static synchronized void initSolrContainer() {\n         if (container == null) {\n-            String solrDir = AbstractDSpaceIntegrationTest.getDspaceDir() + File.separator + \"solr\";\n-            log.info(\"Initializing SOLR CoreContainer with directory \" + solrDir);\n-            container = new CoreContainer(solrDir);\n+            Path solrDir = Paths.get(AbstractDSpaceIntegrationTest.getDspaceDir() + File.separator + \"solr\");\n+            log.info(\"Initializing SOLR CoreContainer with directory \" + solrDir.toAbsolutePath().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95d0cd18e500998f2ce67372d8e0edb66629d745"}, "originalPosition": 18}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "2ac127cb792c352c220b5dbfe986f749d6fa6e2d", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/2ac127cb792c352c220b5dbfe986f749d6fa6e2d", "committedDate": "2021-02-02T20:59:32Z", "message": "Minor refactors based on feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgyODU3NjE0", "url": "https://github.com/DSpace/DSpace/pull/3020#pullrequestreview-582857614", "createdAt": "2021-02-03T22:22:52Z", "commit": {"oid": "2ac127cb792c352c220b5dbfe986f749d6fa6e2d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QyMjoyMjo1MlrOIfZcuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QyMjoyMjo1MlrOIfZcuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTc5MzcyMA==", "bodyText": "We no longer have a direct dependency on solr-cell, but we've picked up a direct dependency on tika-parsers.  I'm testing a patch to address this.", "url": "https://github.com/DSpace/DSpace/pull/3020#discussion_r569793720", "createdAt": "2021-02-03T22:22:52Z", "author": {"login": "mwoodiupui"}, "path": "dspace-api/pom.xml", "diffHunk": "@@ -524,133 +566,33 @@\n             <scope>test</scope>\n             <version>${solr.client.version}</version>\n             <exclusions>\n+                <!-- Newer version brought in by opencsv -->\n                 <exclusion>\n-                    <groupId>commons-cli</groupId>\n-                    <artifactId>commons-cli</artifactId>\n-                </exclusion>\n-                <exclusion>\n-                    <groupId>org.eclipse.jetty</groupId>\n-                    <artifactId>jetty-continuation</artifactId>\n-                </exclusion>\n-                <exclusion>\n-                    <groupId>org.eclipse.jetty</groupId>\n-                    <artifactId>jetty-deploy</artifactId>\n-                </exclusion>\n-                <exclusion>\n-                    <groupId>org.eclipse.jetty</groupId>\n-                    <artifactId>jetty-http</artifactId>\n-                </exclusion>\n-                <exclusion>\n-                    <groupId>org.eclipse.jetty</groupId>\n-                    <artifactId>jetty-io</artifactId>\n-                </exclusion>\n-                <exclusion>\n-                    <groupId>org.eclipse.jetty</groupId>\n-                    <artifactId>jetty-jmx</artifactId>\n-                </exclusion>\n-                <exclusion>\n-                    <groupId>org.eclipse.jetty</groupId>\n-                    <artifactId>jetty-rewrite</artifactId>\n-                </exclusion>\n-                <exclusion>\n-                    <groupId>org.eclipse.jetty</groupId>\n-                    <artifactId>jetty-security</artifactId>\n-                </exclusion>\n-                <exclusion>\n-                    <groupId>org.eclipse.jetty</groupId>\n-                    <artifactId>jetty-server</artifactId>\n-                </exclusion>\n-                <exclusion>\n-                    <groupId>org.eclipse.jetty</groupId>\n-                    <artifactId>jetty-servlet</artifactId>\n-                </exclusion>\n-                <exclusion>\n-                    <groupId>org.eclipse.jetty</groupId>\n-                    <artifactId>jetty-servlets</artifactId>\n-                </exclusion>\n-                <exclusion>\n-                    <groupId>org.eclipse.jetty</groupId>\n-                    <artifactId>jetty-util</artifactId>\n-                </exclusion>\n-                <exclusion>\n-                    <groupId>org.eclipse.jetty</groupId>\n-                    <artifactId>jetty-webapp</artifactId>\n-                </exclusion>\n-                <exclusion>\n-                    <groupId>org.eclipse.jetty</groupId>\n-                    <artifactId>jetty-xml</artifactId>\n+                    <groupId>org.apache.commons</groupId>\n+                    <artifactId>commons-text</artifactId>\n                 </exclusion>\n             </exclusions>\n         </dependency>\n         <dependency>\n             <groupId>org.apache.solr</groupId>\n             <artifactId>solr-cell</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ac127cb792c352c220b5dbfe986f749d6fa6e2d"}, "originalPosition": 116}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgzODEyNzIw", "url": "https://github.com/DSpace/DSpace/pull/3020#pullrequestreview-583812720", "createdAt": "2021-02-04T21:06:22Z", "commit": {"oid": "954a0818930660d5144e97a066ec75bbb911faa5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgzODI2MTY4", "url": "https://github.com/DSpace/DSpace/pull/3020#pullrequestreview-583826168", "createdAt": "2021-02-04T21:25:24Z", "commit": {"oid": "954a0818930660d5144e97a066ec75bbb911faa5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQyMToyNToyNVrOIgH1Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQyMToyNToyNVrOIgH1Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDU1MzYxNQ==", "bodyText": "Do we need a finally{} clause to close streams?", "url": "https://github.com/DSpace/DSpace/pull/3020#discussion_r570553615", "createdAt": "2021-02-04T21:25:25Z", "author": {"login": "mwoodiupui"}, "path": "dspace-api/src/main/java/org/dspace/discovery/indexobject/IndexFactoryImpl.java", "diffHunk": "@@ -74,35 +79,60 @@ public void writeDocument(Context context, T indexableObject, SolrInputDocument\n      * Write the document to the index under the appropriate unique identifier.\n      *\n      * @param doc     the solr document to be written to the server\n-     * @param streams list of bitstream content streams    DiscoverQueryBuilderTest.java:285\n+     * @param streams list of bitstream content streams\n      * @throws IOException A general class of exceptions produced by failed or interrupted I/O operations.\n      */\n     protected void writeDocument(SolrInputDocument doc, FullTextContentStreams streams)\n             throws IOException, SolrServerException {\n         final SolrClient solr = solrSearchCore.getSolr();\n         if (solr != null) {\n+            // If full text stream(s) were passed in, we'll index them as part of the SolrInputDocument\n             if (streams != null && !streams.isEmpty()) {\n-                ContentStreamUpdateRequest req = new ContentStreamUpdateRequest(\"/update/extract\");\n-                req.addContentStream(streams);\n-\n-                ModifiableSolrParams params = new ModifiableSolrParams();\n+                // limit full text indexing to first 100,000 characters unless configured otherwise\n+                final int charLimit = DSpaceServicesFactory.getInstance().getConfigurationService()\n+                                                           .getIntProperty(\"discovery.solr.fulltext.charLimit\",\n+                                                                           100000);\n+\n+                // Use Tika's Text parser as the streams are always from the TEXT bundle (i.e. already extracted text)\n+                // TODO: We may wish to consider using Tika to extract the text in the future.\n+                TextAndCSVParser tikaParser = new TextAndCSVParser();\n+                BodyContentHandler tikaHandler = new BodyContentHandler(charLimit);\n+                Metadata tikaMetadata = new Metadata();\n+                ParseContext tikaContext = new ParseContext();\n+\n+                // Use Apache Tika to parse the full text stream\n+                try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "954a0818930660d5144e97a066ec75bbb911faa5"}, "originalPosition": 68}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk3OTM1OTMy", "url": "https://github.com/DSpace/DSpace/pull/3020#pullrequestreview-597935932", "createdAt": "2021-02-24T21:08:09Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "635d3414695191f559a10c5276d7f09d10aa616f", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/635d3414695191f559a10c5276d7f09d10aa616f", "committedDate": "2021-02-25T16:36:02Z", "message": "Upgrade to latest guava. Remove/replace outdated Lyncode builders & test-support which used old guava version."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d22a70611c55435c4702ef52554ce30d7e114fc3", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/d22a70611c55435c4702ef52554ce30d7e114fc3", "committedDate": "2021-02-25T16:36:02Z", "message": "Minor cleanup. Comment correction. Remove commented out code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cabcbabbca808cd22a169d03d2d3f641f6136fb", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/7cabcbabbca808cd22a169d03d2d3f641f6136fb", "committedDate": "2021-02-25T16:36:02Z", "message": "Rename to RegistryUpdater so that it comes alphabetically *after* GroupServiceInitializer as Flyway runs callbacks alphabetically"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25b00647b9faf3451c38c949221ce3c2731805d9", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/25b00647b9faf3451c38c949221ce3c2731805d9", "committedDate": "2021-02-25T16:36:02Z", "message": "Workaround https://issues.apache.org/jira/browse/SOLR-12858 by ensuring EmbeddedSolrServer always uses GET instead of POST"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "022b79cb5e99e0a7872fca8f1c79ca24c178ef62", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/022b79cb5e99e0a7872fca8f1c79ca24c178ef62", "committedDate": "2021-02-25T16:36:03Z", "message": "Upgrade to Solr 8.7.0. Fix dependency convergence issues. Minor fix to MockSolrServer for Solr 8 compatibility"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44aa1025ba5c0941ea827b22b72f1596d149ed63", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/44aa1025ba5c0941ea827b22b72f1596d149ed63", "committedDate": "2021-02-25T16:36:03Z", "message": "Update Docker for Solr v8"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee466114197dd94af7c77c0195caab094126e183", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/ee466114197dd94af7c77c0195caab094126e183", "committedDate": "2021-02-25T16:36:03Z", "message": "Update solrconfig.xml files for Solr v8 (also minor alignment correction)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffb17f0664557941c70ca41e2588ec7b1a4b0c57", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/ffb17f0664557941c70ca41e2588ec7b1a4b0c57", "committedDate": "2021-02-25T16:36:03Z", "message": "Fix/Workaround for https://issues.apache.org/jira/browse/SOLR-12798 . Use Tika directly for parsing instead of ContentStreamUpdateRequest (which results in \"URI is too large >8192\" errors in Solr v8)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea0d139c73cf6ae8fbcc86e0ad91e2f725217c78", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/ea0d139c73cf6ae8fbcc86e0ad91e2f725217c78", "committedDate": "2021-02-25T16:36:03Z", "message": "Add explicit dependency on Apache Tika to avoid UnsatisfiedDependencyException warnings from Spring Boot during startup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "891544a49becac227ac8ff52c33bb252d40940ba", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/891544a49becac227ac8ff52c33bb252d40940ba", "committedDate": "2021-02-25T16:36:03Z", "message": "Docker bug fix. Ensure new Solr v8 data directories are kept between Docker restarts."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90050c18fa2fbc2ae5bad8b92deaca799947a4d4", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/90050c18fa2fbc2ae5bad8b92deaca799947a4d4", "committedDate": "2021-02-25T16:36:04Z", "message": "Minor refactors based on feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e33b323135d7699743fa51873c05ef2fe5336904", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/e33b323135d7699743fa51873c05ef2fe5336904", "committedDate": "2021-02-25T16:36:04Z", "message": "Remove our custom Docker container for Solr. It's unreliable with Solr v8, and all the examples show to use docker-compose directly with official image."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "781456fadb76917b48cfad52ab42e59759f81ce2", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/781456fadb76917b48cfad52ab42e59759f81ce2", "committedDate": "2021-02-25T16:36:04Z", "message": "Upgrade Jetty to avoid security warnings from Snyk. Also fixes GitHub security alert"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4394d4bcca489c4c97e7dee6b4f406b36c427aea", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/4394d4bcca489c4c97e7dee6b4f406b36c427aea", "committedDate": "2021-02-25T16:36:04Z", "message": "Ensure InputStream is closed"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "4394d4bcca489c4c97e7dee6b4f406b36c427aea", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/4394d4bcca489c4c97e7dee6b4f406b36c427aea", "committedDate": "2021-02-25T16:36:04Z", "message": "Ensure InputStream is closed"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1361, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}