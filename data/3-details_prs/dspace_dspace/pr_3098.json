{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxODkxMjg3", "number": 3098, "title": "Enforce that facet \"filter-operator\" is a valid value", "bodyText": "References\n\nFixes #3027\n\nDescription\nIf no valid operator is passed in a filter query the discovery endpoint will now result in a bad request.\nIn my original issue above I noted that this shouldn't be checked for dates, but I'm afraid dates will also have to follow these rules (contains is the default), because the java code has no way to tell if the field is a date or not.\nInstructions for Reviewers\nFire of a query similar to: {dspace.url}/api/discover/search/objects?sort=score,DESC&page=0&size=10&f.author=pujari,%20kb\nThis should result in a bad request since the operator would be \"kb\". Next use:\n{dspace.url}/api/discover/search/objects?sort=score,DESC&page=0&size=10&f.author=pujari,%20kb,contains\nThis should work as \"contains\" is a valid operator.\nChecklist\nThis checklist provides a reminder of what we are going to look for when reviewing your PR. You need not complete this checklist prior to creating your PR (draft PRs are always welcome). If you are unsure about an item in the checklist, don't hesitate to ask. We're here to help!\n\n My PR is small in size (e.g. less than 1,000 lines of code, not including comments & integration tests). Exceptions may be made if previously agreed upon.\n My PR passes Checkstyle validation based on the Code Style Guide.\n My PR includes Javadoc for all new (or modified) public methods and classes. It also includes Javadoc for large or complex private methods.\n My PR passes all tests and includes new/updated Unit or Integration Tests based on the Code Testing Guide.\n If my PR includes new, third-party dependencies (in any pom.xml), I've made sure their licenses align with the DSpace BSD License based on the Licensing of Contributions documentation.\n If my PR modifies the REST API, I've linked to the REST Contract page (or open PR) related to this change.", "createdAt": "2020-12-17T14:10:30Z", "url": "https://github.com/DSpace/DSpace/pull/3098", "merged": true, "mergeCommit": {"oid": "ab4eec8119e9f96199e185bb1f21f58efd38bdc8"}, "closed": true, "closedAt": "2021-01-28T20:02:20Z", "author": {"login": "KevinVdV"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdnCEoYgH2gAyNTQxODkxMjg3OjExYWQ3MTk3MzAwYjI4ODM5MjdhNmI5OTRhOTkzODUwMGM3OGUwODE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd0ltZNAFqTU3ODM5NjQxMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "11ad7197300b2883927a6b994a9938500c78e081", "author": {"user": {"login": "MarieVerdonck", "name": "Marie Verdonck"}}, "url": "https://github.com/DSpace/DSpace/commit/11ad7197300b2883927a6b994a9938500c78e081", "committedDate": "2020-12-17T11:45:09Z", "message": "75361: Enforce that facet \"filter-operator\" is a valid value + IT"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY1ODAyNjU4", "url": "https://github.com/DSpace/DSpace/pull/3098#pullrequestreview-565802658", "createdAt": "2021-01-11T22:52:52Z", "commit": {"oid": "11ad7197300b2883927a6b994a9938500c78e081"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY4MTg5NzA2", "url": "https://github.com/DSpace/DSpace/pull/3098#pullrequestreview-568189706", "createdAt": "2021-01-14T12:32:55Z", "commit": {"oid": "11ad7197300b2883927a6b994a9938500c78e081"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMjozMjo1NVrOITirjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMjozMzo1N1rOITiteA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzM2MjA2MA==", "bodyText": "I suggest to return an UnprocessableEntityException here", "url": "https://github.com/DSpace/DSpace/pull/3098#discussion_r557362060", "createdAt": "2021-01-14T12:32:55Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/parameter/resolver/SearchFilterResolver.java", "diffHunk": "@@ -61,6 +65,19 @@ public Object resolveArgument(final MethodParameter parameter, final ModelAndVie\n         }\n     }\n \n+    private void checkIfValidOperator(String filterOperator) {\n+        if (StringUtils.isNotBlank(filterOperator)) {\n+            if (!ALLOWED_SEARCH_OPERATORS.contains(filterOperator.trim())) {\n+                throw new DSpaceBadRequestException(\n+                    \"The operator can't be \\\"\" + filterOperator + \"\\\", must be the of one of: \" +\n+                    String.join(\", \", ALLOWED_SEARCH_OPERATORS));\n+            }\n+        } else {\n+            throw new DSpaceBadRequestException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11ad7197300b2883927a6b994a9938500c78e081"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzM2MjQ2NQ==", "bodyText": "this should be a 422 (please fix also the comment)", "url": "https://github.com/DSpace/DSpace/pull/3098#discussion_r557362465", "createdAt": "2021-01-14T12:33:46Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/DiscoveryRestControllerIT.java", "diffHunk": "@@ -2895,6 +3197,108 @@ public void discoverSearchObjectsWithQueryOperatorNotAuthority() throws Exceptio\n \n     }\n \n+    @Test\n+    public void discoverSearchObjectsWithQueryOperatorNotAuthority() throws Exception {\n+        //We turn off the authorization system in order to create the structure as defined below\n+        context.turnOffAuthorisationSystem();\n+\n+        //** GIVEN **\n+        //1. A community-collection structure with one parent community with sub-community and two collections.\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1).withName(\"Collection 1\").build();\n+        Collection col2 = CollectionBuilder.createCollection(context, child1).withName(\"Collection 2\").build();\n+        //2. Three public items that are readable by Anonymous with different subjects\n+        Item publicItem1 = ItemBuilder.createItem(context, col1)\n+                                      .withTitle(\"Test\")\n+                                      .withIssueDate(\"2010-10-17\")\n+                                      .withAuthor(\"Smith, Donald\")\n+                                      .withSubject(\"ExtraEntry\")\n+                                      .build();\n+\n+        Item publicItem2 = ItemBuilder.createItem(context, col2)\n+                                      .withTitle(\"Test 2\")\n+                                      .withIssueDate(\"1990-02-13\")\n+                                      .withAuthor(\"Smith, Maria\").withAuthor(\"Doe, Jane\").withAuthor(\"Testing, Works\")\n+                                      .withSubject(\"TestingForMore\").withSubject(\"ExtraEntry\")\n+                                      .build();\n+\n+        Item publicItem3 = ItemBuilder.createItem(context, col2)\n+                                      .withTitle(\"Public item 2\")\n+                                      .withIssueDate(\"2010-02-13\")\n+                                      .withAuthor(\"Smith, Maria\").withAuthor(\"Doe, Jane\").withAuthor(\"test,test\")\n+                                      .withAuthor(\"test2, test2\").withAuthor(\"Maybe, Maybe\")\n+                                      .withSubject(\"AnotherTest\").withSubject(\"TestingForMore\")\n+                                      .withSubject(\"ExtraEntry\")\n+                                      .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        UUID scope = col2.getID();\n+        //** WHEN **\n+        //An anonymous user browses this endpoint to find the the objects in the system\n+        //With the given search filter\n+        getClient().perform(get(\"/api/discover/search/objects\")\n+            .param(\"f.title\", \"test,notauthority\"))\n+                   //** THEN **\n+                   //The status has to be 200 OK\n+                   .andExpect(status().isOk())\n+                   //The type has to be 'discover'\n+                   .andExpect(jsonPath(\"$.type\", is(\"discover\")))\n+                   //The page object needs to look like this\n+                   .andExpect(jsonPath(\"$._embedded.searchResult.page\", is(\n+                       PageMatcher.pageEntry(0, 20)\n+                                                                          )))\n+                   //The search results have to contain the items that match the searchFilter\n+                   .andExpect(jsonPath(\"$._embedded.searchResult._embedded.objects\", Matchers.hasItem(\n+                       SearchResultMatcher.matchOnItemName(\"item\", \"items\", \"Public item 2\")\n+                                                                                                     )))\n+                   //These facets have to show up in the embedded.facets section as well with the given hasMore property\n+                   // because we don't exceed their default limit for a hasMore true (the default is 10)\n+                   .andExpect(jsonPath(\"$._embedded.facets\", Matchers.containsInAnyOrder(\n+                       FacetEntryMatcher.authorFacet(false),\n+                       FacetEntryMatcher.entityTypeFacet(false),\n+                       FacetEntryMatcher.subjectFacet(false),\n+                       FacetEntryMatcher.dateIssuedFacet(false),\n+                       FacetEntryMatcher.hasContentInOriginalBundleFacet(false)\n+                                                                                        )))\n+                   //There always needs to be a self link available\n+                   .andExpect(jsonPath(\"$._links.self.href\", containsString(\"/api/discover/search/objects\")))\n+        ;\n+\n+    }\n+\n+    @Test\n+    public void discoverSearchObjectsWithMissingQueryOperator() throws Exception {\n+        //** WHEN **\n+        // An anonymous user browses this endpoint to find the the objects in the system\n+        // With the given search filter where there is the filter operator missing in the value (must be of form\n+        // <:filter-value>,<:filter-operator>)\n+        getClient().perform(get(\"/api/discover/search/objects\")\n+            .param(\"f.title\", \"test\"))\n+                   //** THEN **\n+                   //Will result in 404 status because of missing filter operator\n+                   .andExpect(status().isBadRequest());\n+    }\n+\n+    @Test\n+    public void discoverSearchObjectsWithNotValidQueryOperator() throws Exception {\n+        //** WHEN **\n+        // An anonymous user browses this endpoint to find the the objects in the system\n+        // With the given search filter where there is a non-valid filter operator given (must be of form\n+        // <:filter-value>,<:filter-operator> where the filter operator is one of: \u201ccontains\u201d, \u201cnotcontains\u201d, \"equals\"\n+        // \u201cnotequals\u201d, \u201cauthority\u201d, \u201cnotauthority\u201d, \"query\u201d); see enum RestSearchOperator\n+        getClient().perform(get(\"/api/discover/search/objects\")\n+            .param(\"f.title\", \"test,operator\"))\n+                   //** THEN **\n+                   //Will result in 404 status because of non-valid filter operator\n+                   .andExpect(status().isBadRequest());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11ad7197300b2883927a6b994a9938500c78e081"}, "originalPosition": 457}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzM2MjU1Mg==", "bodyText": "please update the comment to reflect 400", "url": "https://github.com/DSpace/DSpace/pull/3098#discussion_r557362552", "createdAt": "2021-01-14T12:33:57Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/DiscoveryRestControllerIT.java", "diffHunk": "@@ -2895,6 +3197,108 @@ public void discoverSearchObjectsWithQueryOperatorNotAuthority() throws Exceptio\n \n     }\n \n+    @Test\n+    public void discoverSearchObjectsWithQueryOperatorNotAuthority() throws Exception {\n+        //We turn off the authorization system in order to create the structure as defined below\n+        context.turnOffAuthorisationSystem();\n+\n+        //** GIVEN **\n+        //1. A community-collection structure with one parent community with sub-community and two collections.\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1).withName(\"Collection 1\").build();\n+        Collection col2 = CollectionBuilder.createCollection(context, child1).withName(\"Collection 2\").build();\n+        //2. Three public items that are readable by Anonymous with different subjects\n+        Item publicItem1 = ItemBuilder.createItem(context, col1)\n+                                      .withTitle(\"Test\")\n+                                      .withIssueDate(\"2010-10-17\")\n+                                      .withAuthor(\"Smith, Donald\")\n+                                      .withSubject(\"ExtraEntry\")\n+                                      .build();\n+\n+        Item publicItem2 = ItemBuilder.createItem(context, col2)\n+                                      .withTitle(\"Test 2\")\n+                                      .withIssueDate(\"1990-02-13\")\n+                                      .withAuthor(\"Smith, Maria\").withAuthor(\"Doe, Jane\").withAuthor(\"Testing, Works\")\n+                                      .withSubject(\"TestingForMore\").withSubject(\"ExtraEntry\")\n+                                      .build();\n+\n+        Item publicItem3 = ItemBuilder.createItem(context, col2)\n+                                      .withTitle(\"Public item 2\")\n+                                      .withIssueDate(\"2010-02-13\")\n+                                      .withAuthor(\"Smith, Maria\").withAuthor(\"Doe, Jane\").withAuthor(\"test,test\")\n+                                      .withAuthor(\"test2, test2\").withAuthor(\"Maybe, Maybe\")\n+                                      .withSubject(\"AnotherTest\").withSubject(\"TestingForMore\")\n+                                      .withSubject(\"ExtraEntry\")\n+                                      .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        UUID scope = col2.getID();\n+        //** WHEN **\n+        //An anonymous user browses this endpoint to find the the objects in the system\n+        //With the given search filter\n+        getClient().perform(get(\"/api/discover/search/objects\")\n+            .param(\"f.title\", \"test,notauthority\"))\n+                   //** THEN **\n+                   //The status has to be 200 OK\n+                   .andExpect(status().isOk())\n+                   //The type has to be 'discover'\n+                   .andExpect(jsonPath(\"$.type\", is(\"discover\")))\n+                   //The page object needs to look like this\n+                   .andExpect(jsonPath(\"$._embedded.searchResult.page\", is(\n+                       PageMatcher.pageEntry(0, 20)\n+                                                                          )))\n+                   //The search results have to contain the items that match the searchFilter\n+                   .andExpect(jsonPath(\"$._embedded.searchResult._embedded.objects\", Matchers.hasItem(\n+                       SearchResultMatcher.matchOnItemName(\"item\", \"items\", \"Public item 2\")\n+                                                                                                     )))\n+                   //These facets have to show up in the embedded.facets section as well with the given hasMore property\n+                   // because we don't exceed their default limit for a hasMore true (the default is 10)\n+                   .andExpect(jsonPath(\"$._embedded.facets\", Matchers.containsInAnyOrder(\n+                       FacetEntryMatcher.authorFacet(false),\n+                       FacetEntryMatcher.entityTypeFacet(false),\n+                       FacetEntryMatcher.subjectFacet(false),\n+                       FacetEntryMatcher.dateIssuedFacet(false),\n+                       FacetEntryMatcher.hasContentInOriginalBundleFacet(false)\n+                                                                                        )))\n+                   //There always needs to be a self link available\n+                   .andExpect(jsonPath(\"$._links.self.href\", containsString(\"/api/discover/search/objects\")))\n+        ;\n+\n+    }\n+\n+    @Test\n+    public void discoverSearchObjectsWithMissingQueryOperator() throws Exception {\n+        //** WHEN **\n+        // An anonymous user browses this endpoint to find the the objects in the system\n+        // With the given search filter where there is the filter operator missing in the value (must be of form\n+        // <:filter-value>,<:filter-operator>)\n+        getClient().perform(get(\"/api/discover/search/objects\")\n+            .param(\"f.title\", \"test\"))\n+                   //** THEN **\n+                   //Will result in 404 status because of missing filter operator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11ad7197300b2883927a6b994a9938500c78e081"}, "originalPosition": 442}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ffef90cedf82b922c51d7539e4ef7ead3d27edf", "author": {"user": {"login": "MarieVerdonck", "name": "Marie Verdonck"}}, "url": "https://github.com/DSpace/DSpace/commit/9ffef90cedf82b922c51d7539e4ef7ead3d27edf", "committedDate": "2021-01-20T15:25:14Z", "message": "76244: Feedback PR #3093 - Exceptions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc2NzMwNTAx", "url": "https://github.com/DSpace/DSpace/pull/3098#pullrequestreview-576730501", "createdAt": "2021-01-26T20:23:33Z", "commit": {"oid": "9ffef90cedf82b922c51d7539e4ef7ead3d27edf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMDoyMzozM1rOIapK6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMDoyNDozMVrOIapMyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgwODQyNg==", "bodyText": "this comment has been not yet processed", "url": "https://github.com/DSpace/DSpace/pull/3098#discussion_r564808426", "createdAt": "2021-01-26T20:23:33Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/parameter/resolver/SearchFilterResolver.java", "diffHunk": "@@ -61,6 +65,19 @@ public Object resolveArgument(final MethodParameter parameter, final ModelAndVie\n         }\n     }\n \n+    private void checkIfValidOperator(String filterOperator) {\n+        if (StringUtils.isNotBlank(filterOperator)) {\n+            if (!ALLOWED_SEARCH_OPERATORS.contains(filterOperator.trim())) {\n+                throw new DSpaceBadRequestException(\n+                    \"The operator can't be \\\"\" + filterOperator + \"\\\", must be the of one of: \" +\n+                    String.join(\", \", ALLOWED_SEARCH_OPERATORS));\n+            }\n+        } else {\n+            throw new DSpaceBadRequestException(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzM2MjA2MA=="}, "originalCommit": {"oid": "11ad7197300b2883927a6b994a9938500c78e081"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDgwODkwNQ==", "bodyText": "this should be 422 as well as agreed in the rest contract", "url": "https://github.com/DSpace/DSpace/pull/3098#discussion_r564808905", "createdAt": "2021-01-26T20:24:31Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/DiscoveryRestControllerIT.java", "diffHunk": "@@ -2895,6 +3197,108 @@ public void discoverSearchObjectsWithQueryOperatorNotAuthority() throws Exceptio\n \n     }\n \n+    @Test\n+    public void discoverSearchObjectsWithQueryOperatorNotAuthority() throws Exception {\n+        //We turn off the authorization system in order to create the structure as defined below\n+        context.turnOffAuthorisationSystem();\n+\n+        //** GIVEN **\n+        //1. A community-collection structure with one parent community with sub-community and two collections.\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1).withName(\"Collection 1\").build();\n+        Collection col2 = CollectionBuilder.createCollection(context, child1).withName(\"Collection 2\").build();\n+        //2. Three public items that are readable by Anonymous with different subjects\n+        Item publicItem1 = ItemBuilder.createItem(context, col1)\n+                                      .withTitle(\"Test\")\n+                                      .withIssueDate(\"2010-10-17\")\n+                                      .withAuthor(\"Smith, Donald\")\n+                                      .withSubject(\"ExtraEntry\")\n+                                      .build();\n+\n+        Item publicItem2 = ItemBuilder.createItem(context, col2)\n+                                      .withTitle(\"Test 2\")\n+                                      .withIssueDate(\"1990-02-13\")\n+                                      .withAuthor(\"Smith, Maria\").withAuthor(\"Doe, Jane\").withAuthor(\"Testing, Works\")\n+                                      .withSubject(\"TestingForMore\").withSubject(\"ExtraEntry\")\n+                                      .build();\n+\n+        Item publicItem3 = ItemBuilder.createItem(context, col2)\n+                                      .withTitle(\"Public item 2\")\n+                                      .withIssueDate(\"2010-02-13\")\n+                                      .withAuthor(\"Smith, Maria\").withAuthor(\"Doe, Jane\").withAuthor(\"test,test\")\n+                                      .withAuthor(\"test2, test2\").withAuthor(\"Maybe, Maybe\")\n+                                      .withSubject(\"AnotherTest\").withSubject(\"TestingForMore\")\n+                                      .withSubject(\"ExtraEntry\")\n+                                      .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        UUID scope = col2.getID();\n+        //** WHEN **\n+        //An anonymous user browses this endpoint to find the the objects in the system\n+        //With the given search filter\n+        getClient().perform(get(\"/api/discover/search/objects\")\n+            .param(\"f.title\", \"test,notauthority\"))\n+                   //** THEN **\n+                   //The status has to be 200 OK\n+                   .andExpect(status().isOk())\n+                   //The type has to be 'discover'\n+                   .andExpect(jsonPath(\"$.type\", is(\"discover\")))\n+                   //The page object needs to look like this\n+                   .andExpect(jsonPath(\"$._embedded.searchResult.page\", is(\n+                       PageMatcher.pageEntry(0, 20)\n+                                                                          )))\n+                   //The search results have to contain the items that match the searchFilter\n+                   .andExpect(jsonPath(\"$._embedded.searchResult._embedded.objects\", Matchers.hasItem(\n+                       SearchResultMatcher.matchOnItemName(\"item\", \"items\", \"Public item 2\")\n+                                                                                                     )))\n+                   //These facets have to show up in the embedded.facets section as well with the given hasMore property\n+                   // because we don't exceed their default limit for a hasMore true (the default is 10)\n+                   .andExpect(jsonPath(\"$._embedded.facets\", Matchers.containsInAnyOrder(\n+                       FacetEntryMatcher.authorFacet(false),\n+                       FacetEntryMatcher.entityTypeFacet(false),\n+                       FacetEntryMatcher.subjectFacet(false),\n+                       FacetEntryMatcher.dateIssuedFacet(false),\n+                       FacetEntryMatcher.hasContentInOriginalBundleFacet(false)\n+                                                                                        )))\n+                   //There always needs to be a self link available\n+                   .andExpect(jsonPath(\"$._links.self.href\", containsString(\"/api/discover/search/objects\")))\n+        ;\n+\n+    }\n+\n+    @Test\n+    public void discoverSearchObjectsWithMissingQueryOperator() throws Exception {\n+        //** WHEN **\n+        // An anonymous user browses this endpoint to find the the objects in the system\n+        // With the given search filter where there is the filter operator missing in the value (must be of form\n+        // <:filter-value>,<:filter-operator>)\n+        getClient().perform(get(\"/api/discover/search/objects\")\n+            .param(\"f.title\", \"test\"))\n+                   //** THEN **\n+                   //Will result in 400 status because of missing filter operator\n+                   .andExpect(status().isBadRequest());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ffef90cedf82b922c51d7539e4ef7ead3d27edf"}, "originalPosition": 443}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fcec01d5df1660d429547e0767146dfd4b3638c", "author": {"user": {"login": "MarieVerdonck", "name": "Marie Verdonck"}}, "url": "https://github.com/DSpace/DSpace/commit/8fcec01d5df1660d429547e0767146dfd4b3638c", "committedDate": "2021-01-27T10:01:32Z", "message": "76244: Feedback PR #3093 - Exceptions to match RestContract"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc4Mzk2NDEx", "url": "https://github.com/DSpace/DSpace/pull/3098#pullrequestreview-578396411", "createdAt": "2021-01-28T14:37:22Z", "commit": {"oid": "8fcec01d5df1660d429547e0767146dfd4b3638c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1284, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}