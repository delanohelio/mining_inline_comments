{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5NjI4Nzcy", "number": 2692, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOToxMjoxNVrODlucRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMToxMDoyOFrOE29Ecg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODg0ODA2OnYy", "diffSide": "RIGHT", "path": "dspace/config/launcher.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOToxMjoxNVrOFyxuNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzo1Nzo0NlrOF0akig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4Nzc2Nw==", "bodyText": "This looks like a typo to me. Shouldn't that be org.dspace.statistics.AnonymizeStatistics?", "url": "https://github.com/DSpace/DSpace/pull/2692#discussion_r388787767", "createdAt": "2020-03-06T09:12:15Z", "author": {"login": "pnbecker"}, "path": "dspace/config/launcher.xml", "diffHunk": "@@ -373,4 +373,11 @@\n             <class>org.dspace.app.util.InitializeEntities</class>\n         </step>\n     </command>\n+    <command>\n+        <name>anonymize-statistics</name>\n+        <description>Anonymize the ip values of the solr statistics</description>\n+        <step>\n+            <class>com.atmire.dspace.statistics.AnonymizeStatistics</class>", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgyMjQwOQ==", "bodyText": "Yes this is a typo, this needs to be fixed.", "url": "https://github.com/DSpace/DSpace/pull/2692#discussion_r388822409", "createdAt": "2020-03-06T10:20:28Z", "author": {"login": "ssolim"}, "path": "dspace/config/launcher.xml", "diffHunk": "@@ -373,4 +373,11 @@\n             <class>org.dspace.app.util.InitializeEntities</class>\n         </step>\n     </command>\n+    <command>\n+        <name>anonymize-statistics</name>\n+        <description>Anonymize the ip values of the solr statistics</description>\n+        <step>\n+            <class>com.atmire.dspace.statistics.AnonymizeStatistics</class>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4Nzc2Nw=="}, "originalCommit": null, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUwNTYxMA==", "bodyText": "You are correct, fixed this!", "url": "https://github.com/DSpace/DSpace/pull/2692#discussion_r390505610", "createdAt": "2020-03-10T17:57:46Z", "author": {"login": "samuelcambien"}, "path": "dspace/config/launcher.xml", "diffHunk": "@@ -373,4 +373,11 @@\n             <class>org.dspace.app.util.InitializeEntities</class>\n         </step>\n     </command>\n+    <command>\n+        <name>anonymize-statistics</name>\n+        <description>Anonymize the ip values of the solr statistics</description>\n+        <step>\n+            <class>com.atmire.dspace.statistics.AnonymizeStatistics</class>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4Nzc2Nw=="}, "originalCommit": null, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODg2OTA0OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/statistics/AnonymizeStatistics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOToxOToyN1rOFyx7Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzo1Nzo1MVrOF0aktg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5MTA2Mw==", "bodyText": "Just a suggestion, not a change request: I would expect a negative exit code here. If the help parameter is given, all other parameters are ignored and the task stopped without having done anything. That doesn't seem to be a successful run to me.", "url": "https://github.com/DSpace/DSpace/pull/2692#discussion_r388791063", "createdAt": "2020-03-06T09:19:27Z", "author": {"login": "pnbecker"}, "path": "dspace-api/src/main/java/org/dspace/statistics/AnonymizeStatistics.java", "diffHunk": "@@ -0,0 +1,274 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.statistics;\n+\n+import static java.lang.Integer.parseInt;\n+import static java.lang.Thread.currentThread;\n+import static java.lang.Thread.sleep;\n+import static java.util.Arrays.asList;\n+import static java.util.Calendar.DAY_OF_YEAR;\n+import static java.util.Collections.singletonList;\n+\n+import static org.apache.commons.cli.Option.builder;\n+import static org.apache.commons.lang.StringUtils.isNotBlank;\n+import static org.apache.commons.lang.time.DateFormatUtils.format;\n+import static org.apache.log4j.Logger.getLogger;\n+import static org.dspace.core.LogManager.getHeader;\n+import static org.dspace.statistics.SolrLoggerServiceImpl.DATE_FORMAT_8601;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.log4j.Logger;\n+import org.apache.solr.client.solrj.SolrServerException;\n+import org.apache.solr.client.solrj.response.QueryResponse;\n+import org.apache.solr.common.SolrDocument;\n+import org.dspace.core.Context;\n+import org.dspace.services.ConfigurationService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.dspace.statistics.factory.StatisticsServiceFactory;\n+import org.dspace.statistics.service.SolrLoggerService;\n+\n+public class AnonymizeStatistics {\n+\n+    private static Logger log = getLogger(AnonymizeStatistics.class);\n+    private static Context context = new Context();\n+    private static String action = \"anonymise_statistics\";\n+\n+    private static final String HELP_OPTION = \"h\";\n+    private static final String SLEEP_OPTION = \"s\";\n+    private static final String BATCH_SIZE_OPTION = \"b\";\n+    private static final String THREADS_OPTION = \"t\";\n+\n+    private static int sleep;\n+\n+    private static SolrLoggerService solrLoggerService =\n+            StatisticsServiceFactory.getInstance().getSolrLoggerService();\n+    private static ConfigurationService configurationService =\n+            DSpaceServicesFactory.getInstance().getConfigurationService();\n+\n+    private static int batchSize = 100;\n+    private static int threads = 2;\n+\n+    private static final Object ANONYMISED =\n+            configurationService.getProperty(\"anonymise_statistics.dns_mask\", \"anonymised\");\n+\n+    private static final String TIME_LIMIT;\n+\n+    static {\n+        Calendar calendar = Calendar.getInstance();\n+        calendar.add(DAY_OF_YEAR, -configurationService.getIntProperty(\"anonymise_statistics.time_limit\", 90));\n+        TIME_LIMIT = format(calendar, DATE_FORMAT_8601);\n+    }\n+\n+    private AnonymizeStatistics() {\n+\n+    }\n+\n+\n+    public static void main(String... args) throws ParseException {\n+\n+        parseCommandLineOptions(createCommandLineOptions(), args);\n+        anonymiseStatistics();\n+    }\n+\n+    private static Options createCommandLineOptions() {\n+\n+        Options options = new Options();\n+        options.addOption(\n+                builder(HELP_OPTION)\n+                        .longOpt(\"help\")\n+                        .desc(\"Print the usage of the script\")\n+                        .hasArg(false)\n+                        .build()\n+        );\n+\n+        options.addOption(\n+                builder(SLEEP_OPTION)\n+                        .longOpt(\"sleep\")\n+                        .desc(\"Sleep a certain time between each solr request\")\n+                        .hasArg(true)\n+                        .build()\n+        );\n+\n+        options.addOption(\n+            builder(BATCH_SIZE_OPTION)\n+                .longOpt(\"batch\")\n+                .desc(\"The amount of Solr records to be processed per batch (defaults to 100)\")\n+                .hasArg(true)\n+                .build()\n+        );\n+\n+        options.addOption(\n+            builder(THREADS_OPTION)\n+                .longOpt(\"threads\")\n+                .desc(\"The amount of threads used by the script (defaults to 2\")\n+                .hasArg(true)\n+                .build()\n+        );\n+\n+        return options;\n+    }\n+\n+    private static void parseCommandLineOptions(Options options, String... args) throws ParseException {\n+\n+        CommandLine commandLine = new DefaultParser().parse(options, args);\n+\n+        if (commandLine.hasOption(HELP_OPTION)) {\n+            printHelp(options);\n+            System.exit(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUwNTY1NA==", "bodyText": "Good suggestion, I've changed it.", "url": "https://github.com/DSpace/DSpace/pull/2692#discussion_r390505654", "createdAt": "2020-03-10T17:57:51Z", "author": {"login": "samuelcambien"}, "path": "dspace-api/src/main/java/org/dspace/statistics/AnonymizeStatistics.java", "diffHunk": "@@ -0,0 +1,274 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.statistics;\n+\n+import static java.lang.Integer.parseInt;\n+import static java.lang.Thread.currentThread;\n+import static java.lang.Thread.sleep;\n+import static java.util.Arrays.asList;\n+import static java.util.Calendar.DAY_OF_YEAR;\n+import static java.util.Collections.singletonList;\n+\n+import static org.apache.commons.cli.Option.builder;\n+import static org.apache.commons.lang.StringUtils.isNotBlank;\n+import static org.apache.commons.lang.time.DateFormatUtils.format;\n+import static org.apache.log4j.Logger.getLogger;\n+import static org.dspace.core.LogManager.getHeader;\n+import static org.dspace.statistics.SolrLoggerServiceImpl.DATE_FORMAT_8601;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.log4j.Logger;\n+import org.apache.solr.client.solrj.SolrServerException;\n+import org.apache.solr.client.solrj.response.QueryResponse;\n+import org.apache.solr.common.SolrDocument;\n+import org.dspace.core.Context;\n+import org.dspace.services.ConfigurationService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.dspace.statistics.factory.StatisticsServiceFactory;\n+import org.dspace.statistics.service.SolrLoggerService;\n+\n+public class AnonymizeStatistics {\n+\n+    private static Logger log = getLogger(AnonymizeStatistics.class);\n+    private static Context context = new Context();\n+    private static String action = \"anonymise_statistics\";\n+\n+    private static final String HELP_OPTION = \"h\";\n+    private static final String SLEEP_OPTION = \"s\";\n+    private static final String BATCH_SIZE_OPTION = \"b\";\n+    private static final String THREADS_OPTION = \"t\";\n+\n+    private static int sleep;\n+\n+    private static SolrLoggerService solrLoggerService =\n+            StatisticsServiceFactory.getInstance().getSolrLoggerService();\n+    private static ConfigurationService configurationService =\n+            DSpaceServicesFactory.getInstance().getConfigurationService();\n+\n+    private static int batchSize = 100;\n+    private static int threads = 2;\n+\n+    private static final Object ANONYMISED =\n+            configurationService.getProperty(\"anonymise_statistics.dns_mask\", \"anonymised\");\n+\n+    private static final String TIME_LIMIT;\n+\n+    static {\n+        Calendar calendar = Calendar.getInstance();\n+        calendar.add(DAY_OF_YEAR, -configurationService.getIntProperty(\"anonymise_statistics.time_limit\", 90));\n+        TIME_LIMIT = format(calendar, DATE_FORMAT_8601);\n+    }\n+\n+    private AnonymizeStatistics() {\n+\n+    }\n+\n+\n+    public static void main(String... args) throws ParseException {\n+\n+        parseCommandLineOptions(createCommandLineOptions(), args);\n+        anonymiseStatistics();\n+    }\n+\n+    private static Options createCommandLineOptions() {\n+\n+        Options options = new Options();\n+        options.addOption(\n+                builder(HELP_OPTION)\n+                        .longOpt(\"help\")\n+                        .desc(\"Print the usage of the script\")\n+                        .hasArg(false)\n+                        .build()\n+        );\n+\n+        options.addOption(\n+                builder(SLEEP_OPTION)\n+                        .longOpt(\"sleep\")\n+                        .desc(\"Sleep a certain time between each solr request\")\n+                        .hasArg(true)\n+                        .build()\n+        );\n+\n+        options.addOption(\n+            builder(BATCH_SIZE_OPTION)\n+                .longOpt(\"batch\")\n+                .desc(\"The amount of Solr records to be processed per batch (defaults to 100)\")\n+                .hasArg(true)\n+                .build()\n+        );\n+\n+        options.addOption(\n+            builder(THREADS_OPTION)\n+                .longOpt(\"threads\")\n+                .desc(\"The amount of threads used by the script (defaults to 2\")\n+                .hasArg(true)\n+                .build()\n+        );\n+\n+        return options;\n+    }\n+\n+    private static void parseCommandLineOptions(Options options, String... args) throws ParseException {\n+\n+        CommandLine commandLine = new DefaultParser().parse(options, args);\n+\n+        if (commandLine.hasOption(HELP_OPTION)) {\n+            printHelp(options);\n+            System.exit(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5MTA2Mw=="}, "originalCommit": null, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODg4Njc5OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/statistics/AnonymizeStatistics.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOToyNTowMVrOFyyF2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzo1ODowNlrOF0alTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5MzgxOQ==", "bodyText": "suggestion: rephrase to \"Sleep a certain time given in milliseconds between each solr request\"", "url": "https://github.com/DSpace/DSpace/pull/2692#discussion_r388793819", "createdAt": "2020-03-06T09:25:01Z", "author": {"login": "pnbecker"}, "path": "dspace-api/src/main/java/org/dspace/statistics/AnonymizeStatistics.java", "diffHunk": "@@ -0,0 +1,274 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.statistics;\n+\n+import static java.lang.Integer.parseInt;\n+import static java.lang.Thread.currentThread;\n+import static java.lang.Thread.sleep;\n+import static java.util.Arrays.asList;\n+import static java.util.Calendar.DAY_OF_YEAR;\n+import static java.util.Collections.singletonList;\n+\n+import static org.apache.commons.cli.Option.builder;\n+import static org.apache.commons.lang.StringUtils.isNotBlank;\n+import static org.apache.commons.lang.time.DateFormatUtils.format;\n+import static org.apache.log4j.Logger.getLogger;\n+import static org.dspace.core.LogManager.getHeader;\n+import static org.dspace.statistics.SolrLoggerServiceImpl.DATE_FORMAT_8601;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.log4j.Logger;\n+import org.apache.solr.client.solrj.SolrServerException;\n+import org.apache.solr.client.solrj.response.QueryResponse;\n+import org.apache.solr.common.SolrDocument;\n+import org.dspace.core.Context;\n+import org.dspace.services.ConfigurationService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.dspace.statistics.factory.StatisticsServiceFactory;\n+import org.dspace.statistics.service.SolrLoggerService;\n+\n+public class AnonymizeStatistics {\n+\n+    private static Logger log = getLogger(AnonymizeStatistics.class);\n+    private static Context context = new Context();\n+    private static String action = \"anonymise_statistics\";\n+\n+    private static final String HELP_OPTION = \"h\";\n+    private static final String SLEEP_OPTION = \"s\";\n+    private static final String BATCH_SIZE_OPTION = \"b\";\n+    private static final String THREADS_OPTION = \"t\";\n+\n+    private static int sleep;\n+\n+    private static SolrLoggerService solrLoggerService =\n+            StatisticsServiceFactory.getInstance().getSolrLoggerService();\n+    private static ConfigurationService configurationService =\n+            DSpaceServicesFactory.getInstance().getConfigurationService();\n+\n+    private static int batchSize = 100;\n+    private static int threads = 2;\n+\n+    private static final Object ANONYMISED =\n+            configurationService.getProperty(\"anonymise_statistics.dns_mask\", \"anonymised\");\n+\n+    private static final String TIME_LIMIT;\n+\n+    static {\n+        Calendar calendar = Calendar.getInstance();\n+        calendar.add(DAY_OF_YEAR, -configurationService.getIntProperty(\"anonymise_statistics.time_limit\", 90));\n+        TIME_LIMIT = format(calendar, DATE_FORMAT_8601);\n+    }\n+\n+    private AnonymizeStatistics() {\n+\n+    }\n+\n+\n+    public static void main(String... args) throws ParseException {\n+\n+        parseCommandLineOptions(createCommandLineOptions(), args);\n+        anonymiseStatistics();\n+    }\n+\n+    private static Options createCommandLineOptions() {\n+\n+        Options options = new Options();\n+        options.addOption(\n+                builder(HELP_OPTION)\n+                        .longOpt(\"help\")\n+                        .desc(\"Print the usage of the script\")\n+                        .hasArg(false)\n+                        .build()\n+        );\n+\n+        options.addOption(\n+                builder(SLEEP_OPTION)\n+                        .longOpt(\"sleep\")\n+                        .desc(\"Sleep a certain time between each solr request\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgyNDYwMw==", "bodyText": "+1 for this suggestion", "url": "https://github.com/DSpace/DSpace/pull/2692#discussion_r388824603", "createdAt": "2020-03-06T10:24:53Z", "author": {"login": "ssolim"}, "path": "dspace-api/src/main/java/org/dspace/statistics/AnonymizeStatistics.java", "diffHunk": "@@ -0,0 +1,274 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.statistics;\n+\n+import static java.lang.Integer.parseInt;\n+import static java.lang.Thread.currentThread;\n+import static java.lang.Thread.sleep;\n+import static java.util.Arrays.asList;\n+import static java.util.Calendar.DAY_OF_YEAR;\n+import static java.util.Collections.singletonList;\n+\n+import static org.apache.commons.cli.Option.builder;\n+import static org.apache.commons.lang.StringUtils.isNotBlank;\n+import static org.apache.commons.lang.time.DateFormatUtils.format;\n+import static org.apache.log4j.Logger.getLogger;\n+import static org.dspace.core.LogManager.getHeader;\n+import static org.dspace.statistics.SolrLoggerServiceImpl.DATE_FORMAT_8601;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.log4j.Logger;\n+import org.apache.solr.client.solrj.SolrServerException;\n+import org.apache.solr.client.solrj.response.QueryResponse;\n+import org.apache.solr.common.SolrDocument;\n+import org.dspace.core.Context;\n+import org.dspace.services.ConfigurationService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.dspace.statistics.factory.StatisticsServiceFactory;\n+import org.dspace.statistics.service.SolrLoggerService;\n+\n+public class AnonymizeStatistics {\n+\n+    private static Logger log = getLogger(AnonymizeStatistics.class);\n+    private static Context context = new Context();\n+    private static String action = \"anonymise_statistics\";\n+\n+    private static final String HELP_OPTION = \"h\";\n+    private static final String SLEEP_OPTION = \"s\";\n+    private static final String BATCH_SIZE_OPTION = \"b\";\n+    private static final String THREADS_OPTION = \"t\";\n+\n+    private static int sleep;\n+\n+    private static SolrLoggerService solrLoggerService =\n+            StatisticsServiceFactory.getInstance().getSolrLoggerService();\n+    private static ConfigurationService configurationService =\n+            DSpaceServicesFactory.getInstance().getConfigurationService();\n+\n+    private static int batchSize = 100;\n+    private static int threads = 2;\n+\n+    private static final Object ANONYMISED =\n+            configurationService.getProperty(\"anonymise_statistics.dns_mask\", \"anonymised\");\n+\n+    private static final String TIME_LIMIT;\n+\n+    static {\n+        Calendar calendar = Calendar.getInstance();\n+        calendar.add(DAY_OF_YEAR, -configurationService.getIntProperty(\"anonymise_statistics.time_limit\", 90));\n+        TIME_LIMIT = format(calendar, DATE_FORMAT_8601);\n+    }\n+\n+    private AnonymizeStatistics() {\n+\n+    }\n+\n+\n+    public static void main(String... args) throws ParseException {\n+\n+        parseCommandLineOptions(createCommandLineOptions(), args);\n+        anonymiseStatistics();\n+    }\n+\n+    private static Options createCommandLineOptions() {\n+\n+        Options options = new Options();\n+        options.addOption(\n+                builder(HELP_OPTION)\n+                        .longOpt(\"help\")\n+                        .desc(\"Print the usage of the script\")\n+                        .hasArg(false)\n+                        .build()\n+        );\n+\n+        options.addOption(\n+                builder(SLEEP_OPTION)\n+                        .longOpt(\"sleep\")\n+                        .desc(\"Sleep a certain time between each solr request\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5MzgxOQ=="}, "originalCommit": null, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUwNTgwNg==", "bodyText": "Good suggestion, I've changed it.", "url": "https://github.com/DSpace/DSpace/pull/2692#discussion_r390505806", "createdAt": "2020-03-10T17:58:06Z", "author": {"login": "samuelcambien"}, "path": "dspace-api/src/main/java/org/dspace/statistics/AnonymizeStatistics.java", "diffHunk": "@@ -0,0 +1,274 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.statistics;\n+\n+import static java.lang.Integer.parseInt;\n+import static java.lang.Thread.currentThread;\n+import static java.lang.Thread.sleep;\n+import static java.util.Arrays.asList;\n+import static java.util.Calendar.DAY_OF_YEAR;\n+import static java.util.Collections.singletonList;\n+\n+import static org.apache.commons.cli.Option.builder;\n+import static org.apache.commons.lang.StringUtils.isNotBlank;\n+import static org.apache.commons.lang.time.DateFormatUtils.format;\n+import static org.apache.log4j.Logger.getLogger;\n+import static org.dspace.core.LogManager.getHeader;\n+import static org.dspace.statistics.SolrLoggerServiceImpl.DATE_FORMAT_8601;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.log4j.Logger;\n+import org.apache.solr.client.solrj.SolrServerException;\n+import org.apache.solr.client.solrj.response.QueryResponse;\n+import org.apache.solr.common.SolrDocument;\n+import org.dspace.core.Context;\n+import org.dspace.services.ConfigurationService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.dspace.statistics.factory.StatisticsServiceFactory;\n+import org.dspace.statistics.service.SolrLoggerService;\n+\n+public class AnonymizeStatistics {\n+\n+    private static Logger log = getLogger(AnonymizeStatistics.class);\n+    private static Context context = new Context();\n+    private static String action = \"anonymise_statistics\";\n+\n+    private static final String HELP_OPTION = \"h\";\n+    private static final String SLEEP_OPTION = \"s\";\n+    private static final String BATCH_SIZE_OPTION = \"b\";\n+    private static final String THREADS_OPTION = \"t\";\n+\n+    private static int sleep;\n+\n+    private static SolrLoggerService solrLoggerService =\n+            StatisticsServiceFactory.getInstance().getSolrLoggerService();\n+    private static ConfigurationService configurationService =\n+            DSpaceServicesFactory.getInstance().getConfigurationService();\n+\n+    private static int batchSize = 100;\n+    private static int threads = 2;\n+\n+    private static final Object ANONYMISED =\n+            configurationService.getProperty(\"anonymise_statistics.dns_mask\", \"anonymised\");\n+\n+    private static final String TIME_LIMIT;\n+\n+    static {\n+        Calendar calendar = Calendar.getInstance();\n+        calendar.add(DAY_OF_YEAR, -configurationService.getIntProperty(\"anonymise_statistics.time_limit\", 90));\n+        TIME_LIMIT = format(calendar, DATE_FORMAT_8601);\n+    }\n+\n+    private AnonymizeStatistics() {\n+\n+    }\n+\n+\n+    public static void main(String... args) throws ParseException {\n+\n+        parseCommandLineOptions(createCommandLineOptions(), args);\n+        anonymiseStatistics();\n+    }\n+\n+    private static Options createCommandLineOptions() {\n+\n+        Options options = new Options();\n+        options.addOption(\n+                builder(HELP_OPTION)\n+                        .longOpt(\"help\")\n+                        .desc(\"Print the usage of the script\")\n+                        .hasArg(false)\n+                        .build()\n+        );\n+\n+        options.addOption(\n+                builder(SLEEP_OPTION)\n+                        .longOpt(\"sleep\")\n+                        .desc(\"Sleep a certain time between each solr request\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5MzgxOQ=="}, "originalCommit": null, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzY1MzMzOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/statistics/AnonymizeStatistics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDoxMToxNVrOHFm2zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDoxMToxNVrOHFm2zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY0MTU1MQ==", "bodyText": "Please add JavaDocs to this class to document it", "url": "https://github.com/DSpace/DSpace/pull/2692#discussion_r475641551", "createdAt": "2020-08-24T14:11:15Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/statistics/AnonymizeStatistics.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.statistics;\n+\n+import static java.lang.Integer.parseInt;\n+import static java.lang.Thread.currentThread;\n+import static java.lang.Thread.sleep;\n+import static java.util.Arrays.asList;\n+import static java.util.Calendar.DAY_OF_YEAR;\n+import static java.util.Collections.singletonList;\n+import static org.apache.commons.cli.Option.builder;\n+import static org.apache.commons.lang.StringUtils.isNotBlank;\n+import static org.apache.commons.lang.time.DateFormatUtils.format;\n+import static org.apache.log4j.Logger.getLogger;\n+import static org.dspace.core.LogManager.getHeader;\n+import static org.dspace.statistics.SolrLoggerServiceImpl.DATE_FORMAT_8601;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.log4j.Logger;\n+import org.apache.solr.client.solrj.SolrServerException;\n+import org.apache.solr.client.solrj.response.QueryResponse;\n+import org.apache.solr.common.SolrDocument;\n+import org.dspace.core.Context;\n+import org.dspace.services.ConfigurationService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.dspace.statistics.factory.StatisticsServiceFactory;\n+import org.dspace.statistics.service.SolrLoggerService;\n+\n+public class AnonymizeStatistics {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzY1NzMwOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/statistics/AnonymizeStatistics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDoxMjoxMVrOHFm5Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDoxMjoxMVrOHFm5Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY0MjE3OQ==", "bodyText": "Even though this is a private method, it contains most of the logic of the class. So, it should have JavaDocs or inline comments to describe how it is anonymizing statistics, etc.", "url": "https://github.com/DSpace/DSpace/pull/2692#discussion_r475642179", "createdAt": "2020-08-24T14:12:11Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/statistics/AnonymizeStatistics.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.statistics;\n+\n+import static java.lang.Integer.parseInt;\n+import static java.lang.Thread.currentThread;\n+import static java.lang.Thread.sleep;\n+import static java.util.Arrays.asList;\n+import static java.util.Calendar.DAY_OF_YEAR;\n+import static java.util.Collections.singletonList;\n+import static org.apache.commons.cli.Option.builder;\n+import static org.apache.commons.lang.StringUtils.isNotBlank;\n+import static org.apache.commons.lang.time.DateFormatUtils.format;\n+import static org.apache.log4j.Logger.getLogger;\n+import static org.dspace.core.LogManager.getHeader;\n+import static org.dspace.statistics.SolrLoggerServiceImpl.DATE_FORMAT_8601;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.log4j.Logger;\n+import org.apache.solr.client.solrj.SolrServerException;\n+import org.apache.solr.client.solrj.response.QueryResponse;\n+import org.apache.solr.common.SolrDocument;\n+import org.dspace.core.Context;\n+import org.dspace.services.ConfigurationService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.dspace.statistics.factory.StatisticsServiceFactory;\n+import org.dspace.statistics.service.SolrLoggerService;\n+\n+public class AnonymizeStatistics {\n+\n+    private static Logger log = getLogger(AnonymizeStatistics.class);\n+    private static Context context = new Context();\n+    private static String action = \"anonymize_statistics\";\n+\n+    private static final String HELP_OPTION = \"h\";\n+    private static final String SLEEP_OPTION = \"s\";\n+    private static final String BATCH_SIZE_OPTION = \"b\";\n+    private static final String THREADS_OPTION = \"t\";\n+\n+    private static int sleep;\n+\n+    private static SolrLoggerService solrLoggerService =\n+            StatisticsServiceFactory.getInstance().getSolrLoggerService();\n+    private static ConfigurationService configurationService =\n+            DSpaceServicesFactory.getInstance().getConfigurationService();\n+\n+    private static int batchSize = 100;\n+    private static int threads = 2;\n+\n+    private static final Object DNS_MASK =\n+            configurationService.getProperty(\"anonymize_statistics.dns_mask\", \"anonymized\");\n+\n+    private static final String TIME_LIMIT;\n+\n+    static {\n+        Calendar calendar = Calendar.getInstance();\n+        calendar.add(DAY_OF_YEAR, -configurationService.getIntProperty(\"anonymize_statistics.time_threshold\", 90));\n+        TIME_LIMIT = format(calendar, DATE_FORMAT_8601);\n+    }\n+\n+    private AnonymizeStatistics() {\n+\n+    }\n+\n+\n+    public static void main(String... args) throws ParseException {\n+\n+        parseCommandLineOptions(createCommandLineOptions(), args);\n+        anonymizeStatistics();\n+    }\n+\n+    private static Options createCommandLineOptions() {\n+\n+        Options options = new Options();\n+        options.addOption(\n+                builder(HELP_OPTION)\n+                        .longOpt(\"help\")\n+                        .desc(\"Print the usage of the script\")\n+                        .hasArg(false)\n+                        .build()\n+        );\n+\n+        options.addOption(\n+                builder(SLEEP_OPTION)\n+                        .longOpt(\"sleep\")\n+                        .desc(\"Sleep a certain time given in milliseconds between each solr request\")\n+                        .hasArg(true)\n+                        .build()\n+        );\n+\n+        options.addOption(\n+            builder(BATCH_SIZE_OPTION)\n+                .longOpt(\"batch\")\n+                .desc(\"The amount of Solr records to be processed per batch (defaults to 100)\")\n+                .hasArg(true)\n+                .build()\n+        );\n+\n+        options.addOption(\n+            builder(THREADS_OPTION)\n+                .longOpt(\"threads\")\n+                .desc(\"The amount of threads used by the script (defaults to 2\")\n+                .hasArg(true)\n+                .build()\n+        );\n+\n+        return options;\n+    }\n+\n+    private static void parseCommandLineOptions(Options options, String... args) throws ParseException {\n+\n+        CommandLine commandLine = new DefaultParser().parse(options, args);\n+\n+        if (commandLine.hasOption(HELP_OPTION)) {\n+            printHelp(options);\n+            System.exit(-1);\n+        }\n+\n+        if (commandLine.hasOption(SLEEP_OPTION)) {\n+            sleep = parseInt(commandLine.getOptionValue(SLEEP_OPTION));\n+        }\n+\n+        if (commandLine.hasOption(BATCH_SIZE_OPTION)) {\n+            batchSize = parseInt(commandLine.getOptionValue(BATCH_SIZE_OPTION));\n+        }\n+\n+        if (commandLine.hasOption(THREADS_OPTION)) {\n+            threads = parseInt(commandLine.getOptionValue(THREADS_OPTION));\n+        }\n+    }\n+\n+    private static void printHelp(Options options) {\n+        new HelpFormatter().printHelp(\"dsrun \" + AnonymizeStatistics.class.getCanonicalName(), options);\n+    }\n+\n+    private static void printInfo(String info) {\n+        System.out.println(info);\n+        log.info(getHeader(context, action, info));\n+    }\n+\n+    private static void printWarning(String warning) {\n+        System.out.println(warning);\n+        log.warn(getHeader(context, action, warning));\n+    }\n+\n+    private static void printError(Exception error) {\n+        error.printStackTrace();\n+        log.error(getHeader(context, action, error.getMessage()), error);\n+    }\n+\n+\n+    private static void anonymizeStatistics() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzY2MDMwOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/statistics/AnonymizeStatistics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDoxMjo1MFrOHFm7Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDoxMjo1MFrOHFm7Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY0MjYyNw==", "bodyText": "Please add JavaDocs to this internal class.", "url": "https://github.com/DSpace/DSpace/pull/2692#discussion_r475642627", "createdAt": "2020-08-24T14:12:50Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/statistics/AnonymizeStatistics.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.statistics;\n+\n+import static java.lang.Integer.parseInt;\n+import static java.lang.Thread.currentThread;\n+import static java.lang.Thread.sleep;\n+import static java.util.Arrays.asList;\n+import static java.util.Calendar.DAY_OF_YEAR;\n+import static java.util.Collections.singletonList;\n+import static org.apache.commons.cli.Option.builder;\n+import static org.apache.commons.lang.StringUtils.isNotBlank;\n+import static org.apache.commons.lang.time.DateFormatUtils.format;\n+import static org.apache.log4j.Logger.getLogger;\n+import static org.dspace.core.LogManager.getHeader;\n+import static org.dspace.statistics.SolrLoggerServiceImpl.DATE_FORMAT_8601;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.log4j.Logger;\n+import org.apache.solr.client.solrj.SolrServerException;\n+import org.apache.solr.client.solrj.response.QueryResponse;\n+import org.apache.solr.common.SolrDocument;\n+import org.dspace.core.Context;\n+import org.dspace.services.ConfigurationService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.dspace.statistics.factory.StatisticsServiceFactory;\n+import org.dspace.statistics.service.SolrLoggerService;\n+\n+public class AnonymizeStatistics {\n+\n+    private static Logger log = getLogger(AnonymizeStatistics.class);\n+    private static Context context = new Context();\n+    private static String action = \"anonymize_statistics\";\n+\n+    private static final String HELP_OPTION = \"h\";\n+    private static final String SLEEP_OPTION = \"s\";\n+    private static final String BATCH_SIZE_OPTION = \"b\";\n+    private static final String THREADS_OPTION = \"t\";\n+\n+    private static int sleep;\n+\n+    private static SolrLoggerService solrLoggerService =\n+            StatisticsServiceFactory.getInstance().getSolrLoggerService();\n+    private static ConfigurationService configurationService =\n+            DSpaceServicesFactory.getInstance().getConfigurationService();\n+\n+    private static int batchSize = 100;\n+    private static int threads = 2;\n+\n+    private static final Object DNS_MASK =\n+            configurationService.getProperty(\"anonymize_statistics.dns_mask\", \"anonymized\");\n+\n+    private static final String TIME_LIMIT;\n+\n+    static {\n+        Calendar calendar = Calendar.getInstance();\n+        calendar.add(DAY_OF_YEAR, -configurationService.getIntProperty(\"anonymize_statistics.time_threshold\", 90));\n+        TIME_LIMIT = format(calendar, DATE_FORMAT_8601);\n+    }\n+\n+    private AnonymizeStatistics() {\n+\n+    }\n+\n+\n+    public static void main(String... args) throws ParseException {\n+\n+        parseCommandLineOptions(createCommandLineOptions(), args);\n+        anonymizeStatistics();\n+    }\n+\n+    private static Options createCommandLineOptions() {\n+\n+        Options options = new Options();\n+        options.addOption(\n+                builder(HELP_OPTION)\n+                        .longOpt(\"help\")\n+                        .desc(\"Print the usage of the script\")\n+                        .hasArg(false)\n+                        .build()\n+        );\n+\n+        options.addOption(\n+                builder(SLEEP_OPTION)\n+                        .longOpt(\"sleep\")\n+                        .desc(\"Sleep a certain time given in milliseconds between each solr request\")\n+                        .hasArg(true)\n+                        .build()\n+        );\n+\n+        options.addOption(\n+            builder(BATCH_SIZE_OPTION)\n+                .longOpt(\"batch\")\n+                .desc(\"The amount of Solr records to be processed per batch (defaults to 100)\")\n+                .hasArg(true)\n+                .build()\n+        );\n+\n+        options.addOption(\n+            builder(THREADS_OPTION)\n+                .longOpt(\"threads\")\n+                .desc(\"The amount of threads used by the script (defaults to 2\")\n+                .hasArg(true)\n+                .build()\n+        );\n+\n+        return options;\n+    }\n+\n+    private static void parseCommandLineOptions(Options options, String... args) throws ParseException {\n+\n+        CommandLine commandLine = new DefaultParser().parse(options, args);\n+\n+        if (commandLine.hasOption(HELP_OPTION)) {\n+            printHelp(options);\n+            System.exit(-1);\n+        }\n+\n+        if (commandLine.hasOption(SLEEP_OPTION)) {\n+            sleep = parseInt(commandLine.getOptionValue(SLEEP_OPTION));\n+        }\n+\n+        if (commandLine.hasOption(BATCH_SIZE_OPTION)) {\n+            batchSize = parseInt(commandLine.getOptionValue(BATCH_SIZE_OPTION));\n+        }\n+\n+        if (commandLine.hasOption(THREADS_OPTION)) {\n+            threads = parseInt(commandLine.getOptionValue(THREADS_OPTION));\n+        }\n+    }\n+\n+    private static void printHelp(Options options) {\n+        new HelpFormatter().printHelp(\"dsrun \" + AnonymizeStatistics.class.getCanonicalName(), options);\n+    }\n+\n+    private static void printInfo(String info) {\n+        System.out.println(info);\n+        log.info(getHeader(context, action, info));\n+    }\n+\n+    private static void printWarning(String warning) {\n+        System.out.println(warning);\n+        log.warn(getHeader(context, action, warning));\n+    }\n+\n+    private static void printError(Exception error) {\n+        error.printStackTrace();\n+        log.error(getHeader(context, action, error.getMessage()), error);\n+    }\n+\n+\n+    private static void anonymizeStatistics() {\n+        try {\n+            long updated = 0;\n+            long total = getDocuments().getResults().getNumFound();\n+            printInfo(total + \" documents to update\");\n+\n+            ExecutorService executorService = Executors.newFixedThreadPool(threads);\n+\n+            QueryResponse documents;\n+            do {\n+                documents = getDocuments();\n+\n+                Collection<Callable<Boolean>> callables = new ArrayList<>();\n+                Set<String> shards = new HashSet<>();\n+\n+                for (SolrDocument document : documents.getResults()) {\n+                    updated++;\n+\n+                    callables.add(new DoProcessing(document, updated));\n+                    String shard = (String) document.getFieldValue(\"[shard]\");\n+\n+                    if (isNotBlank(shard)) {\n+                        shards.add(shard);\n+                    }\n+                }\n+\n+                executorService.invokeAll(callables);\n+\n+                solrLoggerService.commit();\n+\n+                for (String shard : shards) {\n+                    solrLoggerService.commitShard(shard);\n+                }\n+\n+                System.out.println(\"processed \" + updated + \" records\");\n+            } while (documents.getResults().getNumFound() > 0);\n+\n+            printInfo(updated + \" documents updated\");\n+            if (updated == total) {\n+                printInfo(\"all relevant documents were updated\");\n+            } else {\n+                printWarning(\"not all relevant documents were updated, check the DSpace logs for more details\");\n+            }\n+\n+        } catch (Exception e) {\n+            printError(e);\n+        }\n+    }\n+\n+    private static QueryResponse getDocuments() throws SolrServerException, IOException {\n+\n+        if (sleep > 0) {\n+            try {\n+                printInfo(\"sleep \" + sleep + \"ms\");\n+                sleep(sleep);\n+            } catch (InterruptedException e) {\n+                printError(e);\n+                currentThread().interrupt();\n+            }\n+        }\n+\n+        return solrLoggerService.query(\n+                \"ip:*\",\n+                \"time:[* TO \" + TIME_LIMIT + \"] AND -dns:\" + DNS_MASK,\n+                null, batchSize, -1, null, null, null, null, null, false, false, true\n+        );\n+    }\n+\n+    public static class DoProcessing implements Callable<Boolean> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 240}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzY2OTA5OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/statistics/AnonymizeStatistics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDoxNDo0NFrOHFnAZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDoxNDo0NFrOHFnAZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY0NDAwNQ==", "bodyText": "Could we describe this method with JavaDocs or add an inline comment above the query to describe which documents it's getting.  It seems like it's returning all docs from the last 90 days (or the configured time period)? Is that correct?", "url": "https://github.com/DSpace/DSpace/pull/2692#discussion_r475644005", "createdAt": "2020-08-24T14:14:44Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/statistics/AnonymizeStatistics.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.statistics;\n+\n+import static java.lang.Integer.parseInt;\n+import static java.lang.Thread.currentThread;\n+import static java.lang.Thread.sleep;\n+import static java.util.Arrays.asList;\n+import static java.util.Calendar.DAY_OF_YEAR;\n+import static java.util.Collections.singletonList;\n+import static org.apache.commons.cli.Option.builder;\n+import static org.apache.commons.lang.StringUtils.isNotBlank;\n+import static org.apache.commons.lang.time.DateFormatUtils.format;\n+import static org.apache.log4j.Logger.getLogger;\n+import static org.dspace.core.LogManager.getHeader;\n+import static org.dspace.statistics.SolrLoggerServiceImpl.DATE_FORMAT_8601;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.log4j.Logger;\n+import org.apache.solr.client.solrj.SolrServerException;\n+import org.apache.solr.client.solrj.response.QueryResponse;\n+import org.apache.solr.common.SolrDocument;\n+import org.dspace.core.Context;\n+import org.dspace.services.ConfigurationService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.dspace.statistics.factory.StatisticsServiceFactory;\n+import org.dspace.statistics.service.SolrLoggerService;\n+\n+public class AnonymizeStatistics {\n+\n+    private static Logger log = getLogger(AnonymizeStatistics.class);\n+    private static Context context = new Context();\n+    private static String action = \"anonymize_statistics\";\n+\n+    private static final String HELP_OPTION = \"h\";\n+    private static final String SLEEP_OPTION = \"s\";\n+    private static final String BATCH_SIZE_OPTION = \"b\";\n+    private static final String THREADS_OPTION = \"t\";\n+\n+    private static int sleep;\n+\n+    private static SolrLoggerService solrLoggerService =\n+            StatisticsServiceFactory.getInstance().getSolrLoggerService();\n+    private static ConfigurationService configurationService =\n+            DSpaceServicesFactory.getInstance().getConfigurationService();\n+\n+    private static int batchSize = 100;\n+    private static int threads = 2;\n+\n+    private static final Object DNS_MASK =\n+            configurationService.getProperty(\"anonymize_statistics.dns_mask\", \"anonymized\");\n+\n+    private static final String TIME_LIMIT;\n+\n+    static {\n+        Calendar calendar = Calendar.getInstance();\n+        calendar.add(DAY_OF_YEAR, -configurationService.getIntProperty(\"anonymize_statistics.time_threshold\", 90));\n+        TIME_LIMIT = format(calendar, DATE_FORMAT_8601);\n+    }\n+\n+    private AnonymizeStatistics() {\n+\n+    }\n+\n+\n+    public static void main(String... args) throws ParseException {\n+\n+        parseCommandLineOptions(createCommandLineOptions(), args);\n+        anonymizeStatistics();\n+    }\n+\n+    private static Options createCommandLineOptions() {\n+\n+        Options options = new Options();\n+        options.addOption(\n+                builder(HELP_OPTION)\n+                        .longOpt(\"help\")\n+                        .desc(\"Print the usage of the script\")\n+                        .hasArg(false)\n+                        .build()\n+        );\n+\n+        options.addOption(\n+                builder(SLEEP_OPTION)\n+                        .longOpt(\"sleep\")\n+                        .desc(\"Sleep a certain time given in milliseconds between each solr request\")\n+                        .hasArg(true)\n+                        .build()\n+        );\n+\n+        options.addOption(\n+            builder(BATCH_SIZE_OPTION)\n+                .longOpt(\"batch\")\n+                .desc(\"The amount of Solr records to be processed per batch (defaults to 100)\")\n+                .hasArg(true)\n+                .build()\n+        );\n+\n+        options.addOption(\n+            builder(THREADS_OPTION)\n+                .longOpt(\"threads\")\n+                .desc(\"The amount of threads used by the script (defaults to 2\")\n+                .hasArg(true)\n+                .build()\n+        );\n+\n+        return options;\n+    }\n+\n+    private static void parseCommandLineOptions(Options options, String... args) throws ParseException {\n+\n+        CommandLine commandLine = new DefaultParser().parse(options, args);\n+\n+        if (commandLine.hasOption(HELP_OPTION)) {\n+            printHelp(options);\n+            System.exit(-1);\n+        }\n+\n+        if (commandLine.hasOption(SLEEP_OPTION)) {\n+            sleep = parseInt(commandLine.getOptionValue(SLEEP_OPTION));\n+        }\n+\n+        if (commandLine.hasOption(BATCH_SIZE_OPTION)) {\n+            batchSize = parseInt(commandLine.getOptionValue(BATCH_SIZE_OPTION));\n+        }\n+\n+        if (commandLine.hasOption(THREADS_OPTION)) {\n+            threads = parseInt(commandLine.getOptionValue(THREADS_OPTION));\n+        }\n+    }\n+\n+    private static void printHelp(Options options) {\n+        new HelpFormatter().printHelp(\"dsrun \" + AnonymizeStatistics.class.getCanonicalName(), options);\n+    }\n+\n+    private static void printInfo(String info) {\n+        System.out.println(info);\n+        log.info(getHeader(context, action, info));\n+    }\n+\n+    private static void printWarning(String warning) {\n+        System.out.println(warning);\n+        log.warn(getHeader(context, action, warning));\n+    }\n+\n+    private static void printError(Exception error) {\n+        error.printStackTrace();\n+        log.error(getHeader(context, action, error.getMessage()), error);\n+    }\n+\n+\n+    private static void anonymizeStatistics() {\n+        try {\n+            long updated = 0;\n+            long total = getDocuments().getResults().getNumFound();\n+            printInfo(total + \" documents to update\");\n+\n+            ExecutorService executorService = Executors.newFixedThreadPool(threads);\n+\n+            QueryResponse documents;\n+            do {\n+                documents = getDocuments();\n+\n+                Collection<Callable<Boolean>> callables = new ArrayList<>();\n+                Set<String> shards = new HashSet<>();\n+\n+                for (SolrDocument document : documents.getResults()) {\n+                    updated++;\n+\n+                    callables.add(new DoProcessing(document, updated));\n+                    String shard = (String) document.getFieldValue(\"[shard]\");\n+\n+                    if (isNotBlank(shard)) {\n+                        shards.add(shard);\n+                    }\n+                }\n+\n+                executorService.invokeAll(callables);\n+\n+                solrLoggerService.commit();\n+\n+                for (String shard : shards) {\n+                    solrLoggerService.commitShard(shard);\n+                }\n+\n+                System.out.println(\"processed \" + updated + \" records\");\n+            } while (documents.getResults().getNumFound() > 0);\n+\n+            printInfo(updated + \" documents updated\");\n+            if (updated == total) {\n+                printInfo(\"all relevant documents were updated\");\n+            } else {\n+                printWarning(\"not all relevant documents were updated, check the DSpace logs for more details\");\n+            }\n+\n+        } catch (Exception e) {\n+            printError(e);\n+        }\n+    }\n+\n+    private static QueryResponse getDocuments() throws SolrServerException, IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 221}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzY4NzMyOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/statistics/SolrLoggerServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDoxODo1MlrOHFnLaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDoxODo1MlrOHFnLaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY0NjgyNQ==", "bodyText": "Could you add some inline comments regarding the shard logic here?  It's not clear at a glance why we are removing the version and shard fields, and then adding the entire solrDocument back to the shard.", "url": "https://github.com/DSpace/DSpace/pull/2692#discussion_r475646825", "createdAt": "2020-08-24T14:18:52Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/statistics/SolrLoggerServiceImpl.java", "diffHunk": "@@ -834,9 +874,17 @@ public void process(List<SolrInputDocument> docs)\n                     }\n                 }\n             }\n-            solr.add(solrDocument);\n+\n+            solrDocument.removeField(\"_version_\");\n+            solrDocument.removeField(\"[shard]\");\n+\n+            shard.add(solrDocument);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzY4OTY2OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/statistics/SolrLoggerServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDoxOToyNFrOHFnMuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDoxOToyNFrOHFnMuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY0NzE2MQ==", "bodyText": "New public method should have JavaDocs", "url": "https://github.com/DSpace/DSpace/pull/2692#discussion_r475647161", "createdAt": "2020-08-24T14:19:24Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/statistics/SolrLoggerServiceImpl.java", "diffHunk": "@@ -1595,4 +1684,17 @@ protected synchronized void initSolrYearCores() {\n         }\n         statisticYearCoresInit = true;\n     }\n+\n+    public Object anonymizeIp(String ip) throws UnknownHostException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 271}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzY5MDU4OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/statistics/service/SolrLoggerService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDoxOTozOFrOHFnNSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDoxOTozOFrOHFnNSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY0NzMwNg==", "bodyText": "Please add JavaDocs to this new method", "url": "https://github.com/DSpace/DSpace/pull/2692#discussion_r475647306", "createdAt": "2020-08-24T14:19:38Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/statistics/service/SolrLoggerService.java", "diffHunk": "@@ -116,6 +117,10 @@ public void update(String query, String action,\n                        List<String> fieldNames, List<List<Object>> fieldValuesList)\n         throws SolrServerException, IOException;\n \n+    public void update(String query, String action,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzY5MTAyOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/statistics/service/SolrLoggerService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDoxOTo0MlrOHFnNgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDoxOTo0MlrOHFnNgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY0NzM2Mw==", "bodyText": "Please add JavaDocs to this new method", "url": "https://github.com/DSpace/DSpace/pull/2692#discussion_r475647363", "createdAt": "2020-08-24T14:19:42Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/statistics/service/SolrLoggerService.java", "diffHunk": "@@ -175,6 +180,18 @@ public QueryResponse query(String query, String filterQuery,\n                                String dateEnd, List<String> facetQueries, String sort, boolean ascending)\n         throws SolrServerException, IOException;\n \n+    public QueryResponse query(String query, String filterQuery,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzY5MTM5OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/statistics/service/SolrLoggerService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDoxOTo0N1rOHFnNvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDoxOTo0N1rOHFnNvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY0NzQyMQ==", "bodyText": "Please add JavaDocs to this new method", "url": "https://github.com/DSpace/DSpace/pull/2692#discussion_r475647421", "createdAt": "2020-08-24T14:19:47Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/statistics/service/SolrLoggerService.java", "diffHunk": "@@ -175,6 +180,18 @@ public QueryResponse query(String query, String filterQuery,\n                                String dateEnd, List<String> facetQueries, String sort, boolean ascending)\n         throws SolrServerException, IOException;\n \n+    public QueryResponse query(String query, String filterQuery,\n+                               String facetField, int rows, int max, String dateType, String dateStart,\n+                               String dateEnd, List<String> facetQueries, String sort, boolean ascending,\n+                               boolean defaultFilterQueries)\n+            throws SolrServerException, IOException;\n+\n+    public QueryResponse query(String query, String filterQuery,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzY5MzI1OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/statistics/service/SolrLoggerService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDoyMDoxMVrOHFnO1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDoyMDoxMVrOHFnO1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY0NzcwMA==", "bodyText": "Please add JavaDocs to this new method", "url": "https://github.com/DSpace/DSpace/pull/2692#discussion_r475647700", "createdAt": "2020-08-24T14:20:11Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/statistics/service/SolrLoggerService.java", "diffHunk": "@@ -200,4 +217,10 @@ public QueryResponse query(String query, String filterQuery,\n      */\n     public void exportHits() throws Exception;\n \n+    public void commit() throws Exception;\n+\n+    public void commitShard(String shard) throws Exception;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDU1MDY0OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/statistics/AnonymizeStatistics.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDo1ODoxNFrOHwBV_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDo1ODoxNFrOHwBV_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDExNTcxMA==", "bodyText": "Should this use printInfo()?   Or maybe this was just for debugging & should be removed? It looks odd that this is the only call to System.out.println() in this method.", "url": "https://github.com/DSpace/DSpace/pull/2692#discussion_r520115710", "createdAt": "2020-11-09T20:58:14Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/statistics/AnonymizeStatistics.java", "diffHunk": "@@ -0,0 +1,287 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.statistics;\n+\n+import static java.lang.Integer.parseInt;\n+import static java.lang.Thread.currentThread;\n+import static java.lang.Thread.sleep;\n+import static java.util.Arrays.asList;\n+import static java.util.Calendar.DAY_OF_YEAR;\n+import static java.util.Collections.singletonList;\n+import static org.apache.commons.cli.Option.builder;\n+import static org.apache.commons.lang.time.DateFormatUtils.format;\n+import static org.apache.log4j.Logger.getLogger;\n+import static org.dspace.core.LogManager.getHeader;\n+import static org.dspace.statistics.SolrLoggerServiceImpl.DATE_FORMAT_8601;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.log4j.Logger;\n+import org.apache.solr.client.solrj.SolrServerException;\n+import org.apache.solr.client.solrj.response.QueryResponse;\n+import org.apache.solr.common.SolrDocument;\n+import org.dspace.core.Context;\n+import org.dspace.services.ConfigurationService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.dspace.statistics.factory.StatisticsServiceFactory;\n+import org.dspace.statistics.service.SolrLoggerService;\n+\n+/**\n+ * Script to anonymize solr statistics according to GDPR specifications.\n+ * This script will anonymize records older than a certain threshold, configurable with the\n+ * 'anonymize_statistics.time_threshold' config, with a default value of 90 days.\n+ * The records will be anonymized by replacing the last part of the ip address with a mask, this mask is configurable:\n+ * For IPv4 addresses, the config is 'anonymize_statistics.ip_v4_mask', with a default value of '255'\n+ * For IPv6 addresses, the config is 'anonymize_statistics.ip_v6_mask', with a default value of 'FFFF:FFFF'\n+ * The DNS value of the records will also be replaced by a mask, configurable with 'anonymize_statistics.dns_mask',\n+ * and with a default value of 'anonymized'.\n+ */\n+public class AnonymizeStatistics {\n+\n+    private static Logger log = getLogger(AnonymizeStatistics.class);\n+    private static Context context = new Context();\n+    private static String action = \"anonymize_statistics\";\n+\n+    private static final String HELP_OPTION = \"h\";\n+    private static final String SLEEP_OPTION = \"s\";\n+    private static final String BATCH_SIZE_OPTION = \"b\";\n+    private static final String THREADS_OPTION = \"t\";\n+\n+    private static int sleep;\n+\n+    private static SolrLoggerService solrLoggerService =\n+            StatisticsServiceFactory.getInstance().getSolrLoggerService();\n+    private static ConfigurationService configurationService =\n+            DSpaceServicesFactory.getInstance().getConfigurationService();\n+\n+    private static int batchSize = 100;\n+    private static int threads = 2;\n+\n+    private static final Object DNS_MASK =\n+            configurationService.getProperty(\"anonymize_statistics.dns_mask\", \"anonymized\");\n+\n+    private static final String TIME_LIMIT;\n+\n+    static {\n+        Calendar calendar = Calendar.getInstance();\n+        calendar.add(DAY_OF_YEAR, -configurationService.getIntProperty(\"anonymize_statistics.time_threshold\", 90));\n+        TIME_LIMIT = format(calendar, DATE_FORMAT_8601);\n+    }\n+\n+    private AnonymizeStatistics() {\n+\n+    }\n+\n+\n+    public static void main(String... args) throws ParseException {\n+\n+        parseCommandLineOptions(createCommandLineOptions(), args);\n+        anonymizeStatistics();\n+    }\n+\n+    private static Options createCommandLineOptions() {\n+\n+        Options options = new Options();\n+        options.addOption(\n+                builder(HELP_OPTION)\n+                        .longOpt(\"help\")\n+                        .desc(\"Print the usage of the script\")\n+                        .hasArg(false)\n+                        .build()\n+        );\n+\n+        options.addOption(\n+                builder(SLEEP_OPTION)\n+                        .longOpt(\"sleep\")\n+                        .desc(\"Sleep a certain time given in milliseconds between each solr request\")\n+                        .hasArg(true)\n+                        .build()\n+        );\n+\n+        options.addOption(\n+            builder(BATCH_SIZE_OPTION)\n+                .longOpt(\"batch\")\n+                .desc(\"The amount of Solr records to be processed per batch (defaults to 100)\")\n+                .hasArg(true)\n+                .build()\n+        );\n+\n+        options.addOption(\n+            builder(THREADS_OPTION)\n+                .longOpt(\"threads\")\n+                .desc(\"The amount of threads used by the script (defaults to 2\")\n+                .hasArg(true)\n+                .build()\n+        );\n+\n+        return options;\n+    }\n+\n+    private static void parseCommandLineOptions(Options options, String... args) throws ParseException {\n+\n+        CommandLine commandLine = new DefaultParser().parse(options, args);\n+\n+        if (commandLine.hasOption(HELP_OPTION)) {\n+            printHelp(options);\n+            System.exit(-1);\n+        }\n+\n+        if (commandLine.hasOption(SLEEP_OPTION)) {\n+            sleep = parseInt(commandLine.getOptionValue(SLEEP_OPTION));\n+        }\n+\n+        if (commandLine.hasOption(BATCH_SIZE_OPTION)) {\n+            batchSize = parseInt(commandLine.getOptionValue(BATCH_SIZE_OPTION));\n+        }\n+\n+        if (commandLine.hasOption(THREADS_OPTION)) {\n+            threads = parseInt(commandLine.getOptionValue(THREADS_OPTION));\n+        }\n+    }\n+\n+    private static void printHelp(Options options) {\n+        new HelpFormatter().printHelp(\"dsrun \" + AnonymizeStatistics.class.getCanonicalName(), options);\n+    }\n+\n+    private static void printInfo(String info) {\n+        System.out.println(info);\n+        log.info(getHeader(context, action, info));\n+    }\n+\n+    private static void printWarning(String warning) {\n+        System.out.println(warning);\n+        log.warn(getHeader(context, action, warning));\n+    }\n+\n+    private static void printError(Exception error) {\n+        error.printStackTrace();\n+        log.error(getHeader(context, action, error.getMessage()), error);\n+    }\n+\n+\n+    /**\n+     * Anonymize the relevant solr documents, returned by the getDocuments method.\n+     */\n+    private static void anonymizeStatistics() {\n+        try {\n+            long updated = 0;\n+            long total = getDocuments().getResults().getNumFound();\n+            printInfo(total + \" documents to update\");\n+\n+            // The documents will be processed in seperate threads.\n+            ExecutorService executorService = Executors.newFixedThreadPool(threads);\n+\n+            QueryResponse documents;\n+            do {\n+                documents = getDocuments();\n+\n+                // list of the processing callables to execute\n+                Collection<DoProcessing> callables = new ArrayList<>();\n+\n+                for (SolrDocument document : documents.getResults()) {\n+                    updated++;\n+                    callables.add(new DoProcessing(document, updated));\n+                }\n+\n+                // execute the processing callables\n+                executorService.invokeAll(callables);\n+\n+                // Commit the solr core\n+                solrLoggerService.commit();\n+\n+                System.out.println(\"processed \" + updated + \" records\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 209}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDU5MTIyOnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/StatisticsRestRepositoryIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMToxMDoyOFrOHwBuiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMToxMDoyOFrOHwBuiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEyMTk5Mg==", "bodyText": "This is a good test method overall...but it's very difficult to tell here that the IP address is actually anonymized.  Could you add a comment here to note that the IP was anonymized to end in 255?  or you could use a variable for the first 3 parts of the IP address to show only the ending changes.\nIt literally took me 5 mins to realize that this IP is anonymized.  I originally started writing a comment here to ask why this isn't anonymized at all. :)\nSo, I think these tests are good enough to prove things are working. They just could use a few inline comments (or use of variables) to better describe how the anonymization is occurring, so that they are easier for others to maintain & understand.", "url": "https://github.com/DSpace/DSpace/pull/2692#discussion_r520121992", "createdAt": "2020-11-09T21:10:28Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/StatisticsRestRepositoryIT.java", "diffHunk": "@@ -1206,6 +1225,181 @@ public void usageReportsSearch_Bitstream_Visited() throws Exception {\n                     TOTAL_DOWNLOADS_REPORT_ID, Arrays.asList(expectedPointTotalVisits)))));\n     }\n \n+    @Test\n+    public void testAnonymizeStatistics() throws Exception {\n+\n+        // bitstream document which should not be anonymized\n+        addSolrDocument(asList(\n+            Pair.of(\"id\", \"bitstream_view_recent\"),\n+            Pair.of(\"type\", BITSTREAM),\n+            Pair.of(\"ip\", \"75.133.248.54\"),\n+            Pair.of(\"dns\", \"dns_1\"),\n+            Pair.of(\"time\", getTimeNDaysAgo(5))\n+        ));\n+\n+        // item document which should not be anonymized\n+        addSolrDocument(asList(\n+            Pair.of(\"id\", \"item_view_recent\"),\n+            Pair.of(\"type\", ITEM),\n+            Pair.of(\"ip\", \"195.11.13.244\"),\n+            Pair.of(\"dns\", \"dns_2\"),\n+            Pair.of(\"time\", getTimeNDaysAgo(20))\n+        ));\n+\n+        // collection document which should not be anonymized\n+        addSolrDocument(asList(\n+            Pair.of(\"id\", \"collection_view_recent\"),\n+            Pair.of(\"type\", COLLECTION),\n+            Pair.of(\"ip\", \"16f4:0586:3148:3a8a:f307:e13e:2614:21a2\"),\n+            Pair.of(\"dns\", \"dns_3\"),\n+            Pair.of(\"time\", getTimeNDaysAgo(50))\n+        ));\n+\n+        // community document which should not be anonymized\n+        addSolrDocument(asList(\n+            Pair.of(\"id\", \"community_view_recent\"),\n+            Pair.of(\"type\", COMMUNITY),\n+            Pair.of(\"ip\", \"5b02:f3ed:635f:98b1:d2c5:f292:90d9:3982\"),\n+            Pair.of(\"dns\", \"dns_4\"),\n+            Pair.of(\"time\", getTimeNDaysAgo(89))\n+        ));\n+\n+        // bitstream document which should be anonymized\n+        addSolrDocument(asList(\n+            Pair.of(\"id\", \"bitstream_view_old\"),\n+            Pair.of(\"type\", BITSTREAM),\n+            Pair.of(\"ip\", \"75.133.248.54\"),\n+            Pair.of(\"dns\", \"dns_1\"),\n+            Pair.of(\"time\", getTimeNDaysAgo(90))\n+        ));\n+\n+        // item document which should be anonymized\n+        addSolrDocument(asList(\n+            Pair.of(\"id\", \"item_view_old\"),\n+            Pair.of(\"type\", ITEM),\n+            Pair.of(\"ip\", \"195.11.13.244\"),\n+            Pair.of(\"dns\", \"dns_2\"),\n+            Pair.of(\"time\", getTimeNDaysAgo(130))\n+        ));\n+\n+        // collection document which should be anonymized\n+        addSolrDocument(asList(\n+            Pair.of(\"id\", \"collection_view_old\"),\n+            Pair.of(\"type\", COLLECTION),\n+            Pair.of(\"ip\", \"16f4:0586:3148:3a8a:f307:e13e:2614:21a2\"),\n+            Pair.of(\"dns\", \"dns_3\"),\n+            Pair.of(\"time\", getTimeNDaysAgo(200))\n+        ));\n+\n+        // community document which should be anonymized\n+        addSolrDocument(asList(\n+            Pair.of(\"id\", \"community_view_old\"),\n+            Pair.of(\"type\", COMMUNITY),\n+            Pair.of(\"ip\", \"5b02:f3ed:635f:98b1:d2c5:f292:90d9:3982\"),\n+            Pair.of(\"dns\", \"dns_4\"),\n+            Pair.of(\"time\", getTimeNDaysAgo(500))\n+        ));\n+\n+        solrStatisticsCore.getSolr().commit();\n+\n+        runDSpaceScript(\"anonymize-statistics\");\n+\n+        assertEquals(\n+            \"75.133.248.54\",\n+            getSolrDocumentById(\"bitstream_view_recent\").getFieldValue(\"ip\")\n+        );\n+        assertEquals(\n+            \"dns_1\",\n+            getSolrDocumentById(\"bitstream_view_recent\").getFieldValue(\"dns\")\n+        );\n+\n+        assertEquals(\n+            \"195.11.13.244\",\n+            getSolrDocumentById(\"item_view_recent\").getFieldValue(\"ip\")\n+        );\n+        assertEquals(\n+            \"dns_2\",\n+            getSolrDocumentById(\"item_view_recent\").getFieldValue(\"dns\")\n+        );\n+\n+        assertEquals(\n+            \"16f4:0586:3148:3a8a:f307:e13e:2614:21a2\",\n+            getSolrDocumentById(\"collection_view_recent\").getFieldValue(\"ip\")\n+        );\n+        assertEquals(\n+            \"dns_3\",\n+            getSolrDocumentById(\"collection_view_recent\").getFieldValue(\"dns\")\n+        );\n+\n+        assertEquals(\n+            \"5b02:f3ed:635f:98b1:d2c5:f292:90d9:3982\",\n+            getSolrDocumentById(\"community_view_recent\").getFieldValue(\"ip\")\n+        );\n+        assertEquals(\n+            \"dns_4\",\n+            getSolrDocumentById(\"community_view_recent\").getFieldValue(\"dns\")\n+        );\n+\n+        assertEquals(\n+            \"75.133.248.255\",\n+            getSolrDocumentById(\"bitstream_view_old\").getFieldValue(\"ip\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 182}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1680, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}