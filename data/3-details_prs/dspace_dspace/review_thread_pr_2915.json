{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyNTkwNjcw", "number": 2915, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTozNTo1OVrOEWQtHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTo0MzoyOVrOEWQ3MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzc3ODIxOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/test/java/org/dspace/app/csv/CSVMetadataImportReferenceIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTozNTo1OVrOG9efVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTozNTo1OVrOG9efVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzExNTg2Mw==", "bodyText": "We should be using Builder classes in this setup() method to create all new content.  That would mean that we can completely remove the destroy() class (as Builders cleanup after themselves).\nIt looks like the old code in this setup() used Builders, but you've replaced/removed that code.  Please revert back to using Builders again to create the Community, Collection (see above) and all Entities (see below).\nIf you rebase on main, the Builder classes are now available in dspace-api.", "url": "https://github.com/DSpace/DSpace/pull/2915#discussion_r467115863", "createdAt": "2020-08-07T15:35:59Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/test/java/org/dspace/app/csv/CSVMetadataImportReferenceIT.java", "diffHunk": "@@ -19,54 +19,132 @@\n import java.util.List;\n import java.util.UUID;\n \n+import org.dspace.AbstractIntegrationTest;\n import org.dspace.app.bulkedit.MetadataImportException;\n import org.dspace.app.bulkedit.MetadataImportInvalidHeadingException;\n-import org.dspace.app.rest.test.AbstractEntityIntegrationTest;\n-import org.dspace.builder.CollectionBuilder;\n-import org.dspace.builder.CommunityBuilder;\n-import org.dspace.builder.ItemBuilder;\n+import org.dspace.app.scripts.handler.impl.TestDSpaceRunnableHandler;\n+import org.dspace.authorize.AuthorizeException;\n import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.EntityType;\n import org.dspace.content.Item;\n import org.dspace.content.MetadataField;\n import org.dspace.content.MetadataValue;\n import org.dspace.content.Relationship;\n+import org.dspace.content.WorkspaceItem;\n import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.dspace.content.service.EntityTypeService;\n+import org.dspace.content.service.InstallItemService;\n import org.dspace.content.service.ItemService;\n import org.dspace.content.service.MetadataFieldService;\n import org.dspace.content.service.MetadataValueService;\n import org.dspace.content.service.RelationshipService;\n+import org.dspace.content.service.RelationshipTypeService;\n+import org.dspace.content.service.WorkspaceItemService;\n+import org.dspace.scripts.DSpaceRunnable;\n+import org.dspace.scripts.configuration.ScriptConfiguration;\n+import org.dspace.scripts.factory.ScriptServiceFactory;\n+import org.dspace.scripts.service.ScriptService;\n+import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n \n /**\n  * Created by: Andrew Wood\n  * Date: 26 Jul 2019\n  */\n-public class CSVMetadataImportReferenceIT extends AbstractEntityIntegrationTest {\n+public class CSVMetadataImportReferenceIT extends AbstractIntegrationTest {\n \n     //Common collection to utilize for test\n     private Collection col1;\n \n-    @Autowired\n-    private RelationshipService relationshipService;\n+    private RelationshipService relationshipService = ContentServiceFactory.getInstance().getRelationshipService();\n+    private ItemService itemService = ContentServiceFactory.getInstance().getItemService();\n+    private CollectionService collectionService = ContentServiceFactory.getInstance().getCollectionService();\n+    private CommunityService communityService = ContentServiceFactory.getInstance().getCommunityService();\n+    private WorkspaceItemService workspaceItemService = ContentServiceFactory.getInstance().getWorkspaceItemService();\n+    private InstallItemService installItemService = ContentServiceFactory.getInstance().getInstallItemService();\n+    private EntityTypeService entityTypeService = ContentServiceFactory.getInstance().getEntityTypeService();\n+    private RelationshipTypeService relationshipTypeService = ContentServiceFactory.getInstance()\n+                                                                                   .getRelationshipTypeService();\n \n-    @Autowired\n-    private ItemService itemService;\n+\n+    Community parentCommunity;\n \n     /**\n      * Setup testing enviorment\n      */\n     @Before\n-    public void setup() {\n+    public void setup() throws SQLException, AuthorizeException {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = communityService.create(null, context);\n+        communityService.addMetadata(context, parentCommunity, \"dc\", \"title\", null, null, \"Parent Community\");\n+\n+        col1 = collectionService.create(context, parentCommunity);\n+        collectionService.addMetadata(context, col1, \"dc\", \"title\", null, null, \"Collection 1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "362064f76f516c289f4c80eb7509a5f3e7cf8b67"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzc3OTY0OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/test/java/org/dspace/app/csv/CSVMetadataImportReferenceIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTozNjoyMVrOG9egOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTozNjoyMVrOG9egOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzExNjA5MQ==", "bodyText": "Once you are using Builders, this entire destroy() method can be removed.", "url": "https://github.com/DSpace/DSpace/pull/2915#discussion_r467116091", "createdAt": "2020-08-07T15:36:21Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/test/java/org/dspace/app/csv/CSVMetadataImportReferenceIT.java", "diffHunk": "@@ -19,54 +19,132 @@\n import java.util.List;\n import java.util.UUID;\n \n+import org.dspace.AbstractIntegrationTest;\n import org.dspace.app.bulkedit.MetadataImportException;\n import org.dspace.app.bulkedit.MetadataImportInvalidHeadingException;\n-import org.dspace.app.rest.test.AbstractEntityIntegrationTest;\n-import org.dspace.builder.CollectionBuilder;\n-import org.dspace.builder.CommunityBuilder;\n-import org.dspace.builder.ItemBuilder;\n+import org.dspace.app.scripts.handler.impl.TestDSpaceRunnableHandler;\n+import org.dspace.authorize.AuthorizeException;\n import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.EntityType;\n import org.dspace.content.Item;\n import org.dspace.content.MetadataField;\n import org.dspace.content.MetadataValue;\n import org.dspace.content.Relationship;\n+import org.dspace.content.WorkspaceItem;\n import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.dspace.content.service.EntityTypeService;\n+import org.dspace.content.service.InstallItemService;\n import org.dspace.content.service.ItemService;\n import org.dspace.content.service.MetadataFieldService;\n import org.dspace.content.service.MetadataValueService;\n import org.dspace.content.service.RelationshipService;\n+import org.dspace.content.service.RelationshipTypeService;\n+import org.dspace.content.service.WorkspaceItemService;\n+import org.dspace.scripts.DSpaceRunnable;\n+import org.dspace.scripts.configuration.ScriptConfiguration;\n+import org.dspace.scripts.factory.ScriptServiceFactory;\n+import org.dspace.scripts.service.ScriptService;\n+import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n \n /**\n  * Created by: Andrew Wood\n  * Date: 26 Jul 2019\n  */\n-public class CSVMetadataImportReferenceIT extends AbstractEntityIntegrationTest {\n+public class CSVMetadataImportReferenceIT extends AbstractIntegrationTest {\n \n     //Common collection to utilize for test\n     private Collection col1;\n \n-    @Autowired\n-    private RelationshipService relationshipService;\n+    private RelationshipService relationshipService = ContentServiceFactory.getInstance().getRelationshipService();\n+    private ItemService itemService = ContentServiceFactory.getInstance().getItemService();\n+    private CollectionService collectionService = ContentServiceFactory.getInstance().getCollectionService();\n+    private CommunityService communityService = ContentServiceFactory.getInstance().getCommunityService();\n+    private WorkspaceItemService workspaceItemService = ContentServiceFactory.getInstance().getWorkspaceItemService();\n+    private InstallItemService installItemService = ContentServiceFactory.getInstance().getInstallItemService();\n+    private EntityTypeService entityTypeService = ContentServiceFactory.getInstance().getEntityTypeService();\n+    private RelationshipTypeService relationshipTypeService = ContentServiceFactory.getInstance()\n+                                                                                   .getRelationshipTypeService();\n \n-    @Autowired\n-    private ItemService itemService;\n+\n+    Community parentCommunity;\n \n     /**\n      * Setup testing enviorment\n      */\n     @Before\n-    public void setup() {\n+    public void setup() throws SQLException, AuthorizeException {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = communityService.create(null, context);\n+        communityService.addMetadata(context, parentCommunity, \"dc\", \"title\", null, null, \"Parent Community\");\n+\n+        col1 = collectionService.create(context, parentCommunity);\n+        collectionService.addMetadata(context, col1, \"dc\", \"title\", null, null, \"Collection 1\");\n+\n+        if (entityTypeService.findAll(context).size() > 0) {\n+            //Don't initialize the setup more than once\n+            return;\n+        }\n+\n         context.turnOffAuthorisationSystem();\n-        parentCommunity = CommunityBuilder.createCommunity(context)\n-                                          .withName(\"Parent Community\")\n-                                          .build();\n-        col1 = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        EntityType publicationEntityType = entityTypeService.create(context, \"Publication\");\n+        EntityType personEntityType = entityTypeService.create(context, \"Person\");\n+        EntityType orgUnitType = entityTypeService.create(context, \"OrgUnit\");\n+        EntityType projectType = entityTypeService.create(context, \"Project\");\n+        relationshipTypeService\n+            .create(context, publicationEntityType, personEntityType, \"isAuthorOfPublication\", \"isPublicationOfAuthor\",\n+                    null, null, null, null);\n+        relationshipTypeService\n+            .create(context, publicationEntityType, projectType, \"isProjectOfPublication\", \"isPublicationOfProject\", 0,\n+                    null, 0, null, false, true);\n+\n+        context.restoreAuthSystemState();\n+\n         context.restoreAuthSystemState();\n     }\n \n+    @After\n+    @Override\n+    public void destroy() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "362064f76f516c289f4c80eb7509a5f3e7cf8b67"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzc4MzU0OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/test/java/org/dspace/app/csv/CSVMetadataImportReferenceIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTozNzozMVrOG9eipg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTozNzozMVrOG9eipg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzExNjcxMA==", "bodyText": "Again, remove this new code and revert to using the ItemBuilder class.  We require Builders.", "url": "https://github.com/DSpace/DSpace/pull/2915#discussion_r467116710", "createdAt": "2020-08-07T15:37:31Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/test/java/org/dspace/app/csv/CSVMetadataImportReferenceIT.java", "diffHunk": "@@ -175,12 +253,13 @@ public void testMultiRowNameRef() throws Exception {\n     @Test\n     public void testSingleUUIDReference() throws Exception {\n         context.turnOffAuthorisationSystem();\n-        Item person = ItemBuilder.createItem(context, col1)\n-                                 .withRelationshipType(\"Person\")\n-                                 .build();\n+        WorkspaceItem workspaceItem = workspaceItemService.create(context, col1, false);\n+        Item person = installItemService.installItem(context, workspaceItem);\n+        itemService.addMetadata(context, person, \"relationship\", \"type\", null, null, \"Person\");\n+        itemService.update(context, person);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "362064f76f516c289f4c80eb7509a5f3e7cf8b67"}, "originalPosition": 224}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzc4NzI1OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/test/java/org/dspace/app/csv/CSVMetadataImportReferenceIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTozODozNFrOG9ek6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTozODozNFrOG9ek6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzExNzI4OA==", "bodyText": "Same here, revert to using Builders again", "url": "https://github.com/DSpace/DSpace/pull/2915#discussion_r467117288", "createdAt": "2020-08-07T15:38:34Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/test/java/org/dspace/app/csv/CSVMetadataImportReferenceIT.java", "diffHunk": "@@ -192,12 +271,14 @@ public void testSingleUUIDReference() throws Exception {\n     @Test\n     public void testMultiUUIDReference() throws Exception {\n         context.turnOffAuthorisationSystem();\n-        Item person = ItemBuilder.createItem(context, col1)\n-                                 .withRelationshipType(\"Person\")\n-                                 .build();\n-        Item person2 = ItemBuilder.createItem(context, col1)\n-                                  .withRelationshipType(\"Person\")\n-                                  .build();\n+        WorkspaceItem workspaceItem = workspaceItemService.create(context, col1, false);\n+        Item person = installItemService.installItem(context, workspaceItem);\n+        itemService.addMetadata(context, person, \"relationship\", \"type\", null, null, \"Person\");\n+        itemService.update(context, person);\n+        WorkspaceItem workspaceItem2 = workspaceItemService.create(context, col1, false);\n+        Item person2 = installItemService.installItem(context, workspaceItem2);\n+        itemService.addMetadata(context, person2, \"relationship\", \"type\", null, null, \"Person\");\n+        itemService.update(context, person2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "362064f76f516c289f4c80eb7509a5f3e7cf8b67"}, "originalPosition": 249}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzc4ODE0OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/test/java/org/dspace/app/csv/CSVMetadataImportReferenceIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTozODo1MlrOG9eliw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTozODo1MlrOG9eliw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzExNzQ1MQ==", "bodyText": "Same here, revert to using Builders again", "url": "https://github.com/DSpace/DSpace/pull/2915#discussion_r467117451", "createdAt": "2020-08-07T15:38:52Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/test/java/org/dspace/app/csv/CSVMetadataImportReferenceIT.java", "diffHunk": "@@ -214,14 +295,16 @@ public void testMultiUUIDReference() throws Exception {\n     @Test\n     public void testMultiRefArchivedCsv() throws Exception {\n         context.turnOffAuthorisationSystem();\n-        Item person = ItemBuilder.createItem(context, col1)\n-                                 .withTitle(\"Person\")\n-                                 .withRelationshipType(\"Person\")\n-                                 .build();\n+        WorkspaceItem workspaceItem = workspaceItemService.create(context, col1, false);\n+        Item person = installItemService.installItem(context, workspaceItem);\n+        itemService.addMetadata(context, person, \"relationship\", \"type\", null, null, \"Person\");\n+        itemService.addMetadata(context, person, \"dc\", \"title\", null, null, \"Person\");\n+        itemService.update(context, person);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "362064f76f516c289f4c80eb7509a5f3e7cf8b67"}, "originalPosition": 265}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzc4ODQ2OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/test/java/org/dspace/app/csv/CSVMetadataImportReferenceIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTozODo1OVrOG9eluw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTozODo1OVrOG9eluw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzExNzQ5OQ==", "bodyText": "Same here, revert to using Builders again", "url": "https://github.com/DSpace/DSpace/pull/2915#discussion_r467117499", "createdAt": "2020-08-07T15:38:59Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/test/java/org/dspace/app/csv/CSVMetadataImportReferenceIT.java", "diffHunk": "@@ -236,18 +319,21 @@ public void testMultiRefArchivedCsv() throws Exception {\n     @Test\n     public void testMultiMixedRefArchivedCsv() throws Exception {\n         context.turnOffAuthorisationSystem();\n-        Item person = ItemBuilder.createItem(context, col1)\n-                                 .withTitle(\"Person\")\n-                                 .withRelationshipType(\"Person\")\n-                                 .build();\n-        Item person2 = ItemBuilder.createItem(context, col1)\n-                                  .withTitle(\"Person2\")\n-                                  .withRelationshipType(\"Person\")\n-                                  .build();\n+        WorkspaceItem workspaceItem = workspaceItemService.create(context, col1, false);\n+        Item person = installItemService.installItem(context, workspaceItem);\n+        itemService.addMetadata(context, person, \"relationship\", \"type\", null, null, \"Person\");\n+        itemService.addMetadata(context, person, \"dc\", \"title\", null, null, \"Person\");\n+        itemService.update(context, person);\n+        WorkspaceItem workspaceItem2 = workspaceItemService.create(context, col1, false);\n+        Item person2 = installItemService.installItem(context, workspaceItem2);\n+        itemService.addMetadata(context, person2, \"relationship\", \"type\", null, null, \"Person\");\n+        itemService.addMetadata(context, person2, \"dc\", \"title\", null, null, \"Person2\");\n+        itemService.update(context, person2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "362064f76f516c289f4c80eb7509a5f3e7cf8b67"}, "originalPosition": 297}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzc4ODYxOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/test/java/org/dspace/app/csv/CSVMetadataImportReferenceIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTozOTowM1rOG9el3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTozOTowM1rOG9el3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzExNzUzNA==", "bodyText": "Same here, revert to using Builders again.  I'll stop repeating this message now.  Essentially, MOST of your changes to this IT class can now be reverted. You can use Builders here as the Builder classes are now available in dspace-api.", "url": "https://github.com/DSpace/DSpace/pull/2915#discussion_r467117534", "createdAt": "2020-08-07T15:39:03Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/test/java/org/dspace/app/csv/CSVMetadataImportReferenceIT.java", "diffHunk": "@@ -300,14 +386,17 @@ public void testNonUniqueRowName() throws Exception {\n     @Test(expected = MetadataImportException.class)\n     public void testNonUniqueMDRefInDb() throws Exception {\n         context.turnOffAuthorisationSystem();\n-        ItemBuilder.createItem(context, col1)\n-                   .withRelationshipType(\"Person\")\n-                   .withIdentifierOther(\"1\")\n-                   .build();\n-        ItemBuilder.createItem(context, col1)\n-                   .withRelationshipType(\"Person\")\n-                   .withIdentifierOther(\"1\")\n-                   .build();\n+        WorkspaceItem workspaceItem = workspaceItemService.create(context, col1, false);\n+        Item person = installItemService.installItem(context, workspaceItem);\n+        itemService.addMetadata(context, person, \"relationship\", \"type\", null, null, \"Person\");\n+        itemService.addMetadata(context, person, \"dc\", \"identifier\", \"other\", null, \"1\");\n+        itemService.update(context, person);\n+        WorkspaceItem workspaceItem2 = workspaceItemService.create(context, col1, false);\n+        Item person2 = installItemService.installItem(context, workspaceItem2);\n+        itemService.addMetadata(context, person2, \"relationship\", \"type\", null, null, \"Person\");\n+        itemService.addMetadata(context, person2, \"dc\", \"identifier\", \"other\", null, \"1\");\n+        itemService.update(context, person2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "362064f76f516c289f4c80eb7509a5f3e7cf8b67"}, "originalPosition": 339}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzgwNDAxOnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/csv/CsvImportIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTo0MzoyOVrOG9evVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODozMjoxMlrOG_XUrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzExOTk1Nw==", "bodyText": "We may want to move this test to dspace-api, as it looks like it's testing the command-line script can still use -e.  It's a good test, but it doesn't belong in the dspace-server-webapp, as the dspace-server-webapp is NOT allowed to use -e.  So, I think we should have a test in this class that proves the REST endpoint cannot use -e but still succeeds without it.", "url": "https://github.com/DSpace/DSpace/pull/2915#discussion_r467119957", "createdAt": "2020-08-07T15:43:29Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/csv/CsvImportIT.java", "diffHunk": "@@ -222,22 +240,101 @@ private Item validateSpecificItemRelationCreationCsvImportMultiple(Collection co\n     }\n \n     private void performImportScript(String[] csv) throws Exception {\n-        String filename = \"test.csv\";\n-        BufferedWriter out = new BufferedWriter(\n-            new OutputStreamWriter(\n-                new FileOutputStream(filename), \"UTF-8\"));\n-        for (String csvLine : csv) {\n-            out.write(csvLine + \"\\n\");\n+        InputStream inputStream = new ByteArrayInputStream(String.join(System.lineSeparator(),\n+                                                                       Arrays.asList(csv))\n+                                                                 .getBytes(StandardCharsets.UTF_8));\n+\n+        MockMultipartFile bitstreamFile = new MockMultipartFile(\"file\",\n+                                                                \"test.csv\", MediaType.TEXT_PLAIN_VALUE,\n+                                                                inputStream);\n+\n+        AtomicReference<Integer> idRef = new AtomicReference<>();\n+\n+        LinkedList<DSpaceCommandLineParameter> parameters = new LinkedList<>();\n+        parameters.add(new DSpaceCommandLineParameter(\"-f\", \"test.csv\"));\n+        parameters.add(new DSpaceCommandLineParameter(\"-s\", \"\"));\n+\n+        List<ParameterValueRest> list = parameters.stream()\n+                                                  .map(dSpaceCommandLineParameter -> dSpaceRunnableParameterConverter\n+                                                      .convert(dSpaceCommandLineParameter, Projection.DEFAULT))\n+                                                  .collect(Collectors.toList());\n+\n+        try {\n+            String token = getAuthToken(admin.getEmail(), password);\n+\n+            getClient(token)\n+                .perform(fileUpload(\"/api/system/scripts/metadata-import/processes\").file(bitstreamFile)\n+                                                                                    .param(\"properties\",\n+                                                                                           new Gson().toJson(list)))\n+                .andExpect(status().isAccepted())\n+                .andDo(result -> idRef\n+                    .set(read(result.getResponse().getContentAsString(), \"$.processId\")));\n+            String t = \"\";\n+        } finally {\n+            ProcessBuilder.deleteProcess(idRef.get());\n         }\n-        out.flush();\n-        out.close();\n-        out = null;\n+    }\n+\n+    @Test\n+    public void createRelationshipsWithCsvImportWithSpecifiedEPersonParameterTest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "362064f76f516c289f4c80eb7509a5f3e7cf8b67"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA5NTU5Nw==", "bodyText": "@tim-atmire There might be a bit confusion about what this test does. This test checks that if you provide the \"-e\" option to the metadata-import script from the REST API that the script rejects this.\nTo make it a bit more clear, we made the following alterations:\n\nWe renamed the method\nWe don't just check that the item wasn't imported, but also check that the process has failed due to the invalid option.", "url": "https://github.com/DSpace/DSpace/pull/2915#discussion_r469095597", "createdAt": "2020-08-12T08:32:12Z", "author": {"login": "KevinVdV"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/csv/CsvImportIT.java", "diffHunk": "@@ -222,22 +240,101 @@ private Item validateSpecificItemRelationCreationCsvImportMultiple(Collection co\n     }\n \n     private void performImportScript(String[] csv) throws Exception {\n-        String filename = \"test.csv\";\n-        BufferedWriter out = new BufferedWriter(\n-            new OutputStreamWriter(\n-                new FileOutputStream(filename), \"UTF-8\"));\n-        for (String csvLine : csv) {\n-            out.write(csvLine + \"\\n\");\n+        InputStream inputStream = new ByteArrayInputStream(String.join(System.lineSeparator(),\n+                                                                       Arrays.asList(csv))\n+                                                                 .getBytes(StandardCharsets.UTF_8));\n+\n+        MockMultipartFile bitstreamFile = new MockMultipartFile(\"file\",\n+                                                                \"test.csv\", MediaType.TEXT_PLAIN_VALUE,\n+                                                                inputStream);\n+\n+        AtomicReference<Integer> idRef = new AtomicReference<>();\n+\n+        LinkedList<DSpaceCommandLineParameter> parameters = new LinkedList<>();\n+        parameters.add(new DSpaceCommandLineParameter(\"-f\", \"test.csv\"));\n+        parameters.add(new DSpaceCommandLineParameter(\"-s\", \"\"));\n+\n+        List<ParameterValueRest> list = parameters.stream()\n+                                                  .map(dSpaceCommandLineParameter -> dSpaceRunnableParameterConverter\n+                                                      .convert(dSpaceCommandLineParameter, Projection.DEFAULT))\n+                                                  .collect(Collectors.toList());\n+\n+        try {\n+            String token = getAuthToken(admin.getEmail(), password);\n+\n+            getClient(token)\n+                .perform(fileUpload(\"/api/system/scripts/metadata-import/processes\").file(bitstreamFile)\n+                                                                                    .param(\"properties\",\n+                                                                                           new Gson().toJson(list)))\n+                .andExpect(status().isAccepted())\n+                .andDo(result -> idRef\n+                    .set(read(result.getResponse().getContentAsString(), \"$.processId\")));\n+            String t = \"\";\n+        } finally {\n+            ProcessBuilder.deleteProcess(idRef.get());\n         }\n-        out.flush();\n-        out.close();\n-        out = null;\n+    }\n+\n+    @Test\n+    public void createRelationshipsWithCsvImportWithSpecifiedEPersonParameterTest() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzExOTk1Nw=="}, "originalCommit": {"oid": "362064f76f516c289f4c80eb7509a5f3e7cf8b67"}, "originalPosition": 144}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1383, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}