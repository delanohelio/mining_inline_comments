{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzODc0NTY2", "number": 3005, "title": "Features endpoint: Edit Collection Permissions", "bodyText": "References\n\nFixes #2944\n\nDescription\nWe've added REST Authorization Features:\n\ncanManageAdminGroup\ncanManageSubmitterGroup\ncanManageTemplateItem\ncanManageWorkflowGroup\n\nThese all describe whether or not the current user can manage the respective group for the Collection\nInstructions for Reviewers\nList of changes in this PR:\n\nAdded the four above-mentioned features for the Collection objects\nProvided tests for these new features\n\nHow to test this PR:\n\nNavigate to the {dspace.url}/server/api/authz/authorizations/search/object?uri={dspace.url}/server/api/core/collections/{collectionID}&embed=feature whilst being logged in as admin and verify that you can see the four above-mentioned features\nRepeat this for a normal EPerson, you won't see the features\nRepeat this for a collection admin EPerson, you'll see the features\n\nChecklist\n\n My PR is small in size (e.g. less than 1,000 lines of code, not including comments & integration tests). Exceptions may be made if previously agreed upon.\n My PR passes Checkstyle validation based on the Code Style Guide.\n My PR includes Javadoc for all new (or modified) public methods and classes. It also includes Javadoc for large or complex private methods.\n My PR passes all tests and includes new/updated Unit or Integration Tests based on the Code Testing Guide.\n If my PR includes new, third-party dependencies (in any pom.xml), I've made sure their licenses align with the DSpace BSD License based on the Licensing of Contributions documentation.\n If my PR modifies the REST API, I've linked to the REST Contract page (or open PR) related to this change.", "createdAt": "2020-10-15T06:53:44Z", "url": "https://github.com/DSpace/DSpace/pull/3005", "merged": true, "mergeCommit": {"oid": "481d69619c1102d824803c5dbd9bd3fa68398ea6"}, "closed": true, "closedAt": "2020-10-29T21:33:35Z", "author": {"login": "Raf-atmire"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdNSRtSgH2gAyNTAzODc0NTY2OjRmYjRjMTI5YTk1MDY5MDZlNGM2MmY2NGFjNmIwOTEyODU4MzQyMTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWXINQgFqTUxNjk2MTQ2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4fb4c129a9506906e4c62f64ac6b091285834210", "author": {"user": {"login": "peter-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/4fb4c129a9506906e4c62f64ac6b091285834210", "committedDate": "2020-09-28T11:55:53Z", "message": "73167: Edit Collection Permissions in REST Feature Implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "367ce35b4a32125d069b608b4ca7a0093ea21d71", "author": {"user": {"login": "peter-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/367ce35b4a32125d069b608b4ca7a0093ea21d71", "committedDate": "2020-10-01T16:54:03Z", "message": "73173: Edit Collection Permissions in REST Feature Implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e8eb3b3ec94c34fa3a5d6a058e6fdee6eecfe33", "author": {"user": {"login": "peter-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/3e8eb3b3ec94c34fa3a5d6a058e6fdee6eecfe33", "committedDate": "2020-10-05T11:52:59Z", "message": "73168: Edit Collection Permissions in REST Feature Integration Tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45fe8eec077038df13a7d6dd395edcc22b4af92a", "author": {"user": {"login": "peter-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/45fe8eec077038df13a7d6dd395edcc22b4af92a", "committedDate": "2020-10-09T14:58:38Z", "message": "73168: Edit Collection Permissions in REST Feature Integration Tests - feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6295540e47f196cfc3e5c83e24a6ee5c50cfdd25", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/6295540e47f196cfc3e5c83e24a6ee5c50cfdd25", "committedDate": "2020-10-12T08:51:08Z", "message": "Small cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1ee2556f300c6db24ab1028c96a385d7a704d0c", "author": {"user": {"login": "peter-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/d1ee2556f300c6db24ab1028c96a385d7a704d0c", "committedDate": "2020-10-12T11:48:23Z", "message": "73178: Edit Collection Permissions in REST Feature Integration Tests\n\n- add ManageWorkflowGroupFeature, ManageSubmitterGroupFeature, ManageAdminGroupFeature"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bddd4c4f9ccd5cd6b800dc63ee256d7fb85061be", "author": {"user": {"login": "peter-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/bddd4c4f9ccd5cd6b800dc63ee256d7fb85061be", "committedDate": "2020-10-14T13:35:26Z", "message": "73178: Edit Collection Permissions in REST Feature Integration Tests - feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2OTYxNDY4", "url": "https://github.com/DSpace/DSpace/pull/3005#pullrequestreview-516961468", "createdAt": "2020-10-26T16:32:36Z", "commit": {"oid": "bddd4c4f9ccd5cd6b800dc63ee256d7fb85061be"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjozMjozNlrOHoYDSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjozMjozNlrOHoYDSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA5OTE0Nw==", "bodyText": "As I was reviewing this PR, I realized that obviously Admin groups are also supported for Communities (e.g. in DSpace 6.x Communities support an Administrators group).\nEither we should update this PR to ensure this same canManageAdminGroup check supports Communities, or we should do that in a follow-up PR.  This modification will initially result in some test failures, as I see you have ITs which check that canManageAdminGroup currently cannot be used on Communities.", "url": "https://github.com/DSpace/DSpace/pull/3005#discussion_r512099147", "createdAt": "2020-10-26T16:32:36Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/authorization/impl/ManageAdminGroupFeature.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.authorization.impl;\n+\n+import java.sql.SQLException;\n+\n+import org.dspace.app.rest.authorization.AuthorizationFeature;\n+import org.dspace.app.rest.authorization.AuthorizationFeatureDocumentation;\n+import org.dspace.app.rest.model.BaseObjectRest;\n+import org.dspace.app.rest.model.CollectionRest;\n+import org.dspace.app.rest.utils.Utils;\n+import org.dspace.app.util.AuthorizeUtil;\n+import org.dspace.content.Collection;\n+import org.dspace.core.Context;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * The manage admin group feature. It can be used to verify if a collection admin group can be created, deleted,\n+ * viewed or edited.\n+ *\n+ * Authorization is granted if the current user has ADMIN permissions on the given collection and the configuration\n+ * allows the collection admin to manage admin groups, OR the current user has ADMIN permissions on the given\n+ * collection's owning community and the configuration allows the community admin to manage admin groups.\n+ */\n+@Component\n+@AuthorizationFeatureDocumentation(name = ManageAdminGroupFeature.NAME,\n+    description = \"It can be used to verify if the collection admin group can be created, deleted,\" +\n+        \" viewed or edited.\")\n+public class ManageAdminGroupFeature implements AuthorizationFeature {\n+\n+    public final static String NAME = \"canManageAdminGroup\";\n+\n+    @Autowired\n+    private Utils utils;\n+\n+    @Override\n+    public boolean isAuthorized(Context context, BaseObjectRest object) throws SQLException {\n+        if (object instanceof CollectionRest) {\n+            try {\n+                AuthorizeUtil.authorizeManageAdminGroup(context,\n+                    (Collection)utils.getDSpaceAPIObjectFromRest(context, object));\n+                return true;\n+            } catch (Exception e) {\n+                return false;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public String[] getSupportedTypes() {\n+        return new String[]{\n+            CollectionRest.CATEGORY + \".\" + CollectionRest.NAME", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bddd4c4f9ccd5cd6b800dc63ee256d7fb85061be"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1352, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}