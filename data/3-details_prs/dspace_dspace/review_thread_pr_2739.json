{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwMDIwNzYx", "number": 2739, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMTo0MDo1MFrODwLQVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODoyMjoyN1rOD3hk2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODQyNjQ2OnYy", "diffSide": "RIGHT", "path": "dspace-jspui/src/main/webapp/sherpa/css/sherpa.css", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMTo0MDo1MFrOGDB_wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMDo0MjowMFrOGDt0OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgzMTYxNw==", "bodyText": "Change to \"auto\" or alternatively\noverflow-x: hidden;\noverflow-y: auto: ?\nI find visible and disabled scrollbars ugly", "url": "https://github.com/DSpace/DSpace/pull/2739#discussion_r405831617", "createdAt": "2020-04-08T21:40:50Z", "author": {"login": "J4bbi"}, "path": "dspace-jspui/src/main/webapp/sherpa/css/sherpa.css", "diffHunk": "@@ -25,16 +25,35 @@ div.policy div p img {margin: 10px;display: inline-block;}\n .whiteRomeoPublisher .header, .whiteRomeoPublisher .header a {background-color: white; color: black;}\n .grayRomeoPublisher .header, .grayRomeoPublisher .header a {background-color: grey; color:white;}\n \n-.sherpaBox img {\n+#sherpaBox {\n+\tmax-height: 50em;\n+\toverflow: scroll;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dc76cb380f37270f0c3e9ca845989407acf97e6"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU0OTU2MA==", "bodyText": "Thanks, I've changed the overflow to auto", "url": "https://github.com/DSpace/DSpace/pull/2739#discussion_r406549560", "createdAt": "2020-04-10T00:42:00Z", "author": {"login": "kshepherd"}, "path": "dspace-jspui/src/main/webapp/sherpa/css/sherpa.css", "diffHunk": "@@ -25,16 +25,35 @@ div.policy div p img {margin: 10px;display: inline-block;}\n .whiteRomeoPublisher .header, .whiteRomeoPublisher .header a {background-color: white; color: black;}\n .grayRomeoPublisher .header, .grayRomeoPublisher .header a {background-color: grey; color:white;}\n \n-.sherpaBox img {\n+#sherpaBox {\n+\tmax-height: 50em;\n+\toverflow: scroll;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgzMTYxNw=="}, "originalCommit": {"oid": "1dc76cb380f37270f0c3e9ca845989407acf97e6"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODQ0MTUwOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/resources/Messages.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMTo0NjoyNFrOGDCJBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMDo0MzoxMVrOGDt1Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgzMzk4OQ==", "bodyText": "There is a jsp.sherpa.moreresults indicating that more than one ISSN gets looked up", "url": "https://github.com/DSpace/DSpace/pull/2739#discussion_r405833989", "createdAt": "2020-04-08T21:46:24Z", "author": {"login": "J4bbi"}, "path": "dspace-api/src/main/resources/Messages.properties", "diffHunk": "@@ -901,17 +901,17 @@ jsp.search.filter.original_bundle_filenames                      = Filename\n jsp.search.filter.original_bundle_descriptions                   = File description\n jsp.sherpa.title = SHERPA/RoMEO Publisher Policy Database\n jsp.sherpa.loading = <p>Fetching policy information from the SHERPA/RoMEO database</p><img alt=\"loading\" src=\"{0}/sherpa/image/ajax-loader-big.gif\" />\n-jsp.sherpa.heading = <p class=\"sherpaDisclaimer\"><a href=\"http://www.sherpa.ac.uk/romeo.php\" target=\"_blank\"><img align=\"left\" src=\"{0}/sherpa/image/romeosmall.gif\" width=\"100\" height=\"54\" alt=\"SHERPA/RoMEO Database\" border=\"0\"></a> All SHERPA/RoMEO information is correct to the best of our knowledge but should not be relied upon for legal advice. SHERPA cannot be held responsible for the re-use of RoMEO data, or for alternative interpretations which are derived from this information.</p>\n-jsp.sherpa.error = <p class=\"sherpaError\">Sorry, we have had trouble querying the SHERPA/RoMEO Database. No data are availables, try later or check directly the <a href=\"http://www.sherpa.ac.uk/romeo.php\" target=\"_blank\">SHERPA/RoMEO WebSite</a>.</p>\n-jsp.sherpa.noresult = <p class=\"sherpaNoResult\">Sorry, there are not data in the <a href=\"http://www.sherpa.ac.uk/romeo.php\" target=\"_blank\">SHERPA/RoMEO Database</a> for the ISSNs that you have entered.</p>\n-jsp.sherpa.oneresult = <p>The <a href=\"http://www.sherpa.ac.uk/romeo.php\" target=\"_blank\">SHERPA/RoMEO</a> Database provide the following data for the journal that you have entered.</p>\n+jsp.sherpa.heading = <p class=\"sherpaDisclaimer\"><a href=\"https://v2.sherpa.ac.uk/romeo/\" target=\"_blank\"><img align=\"left\" src=\"{0}/sherpa/image/romeosmall.gif\" width=\"100\" height=\"54\" alt=\"SHERPA/RoMEO Database\" border=\"0\"></a> All SHERPA/RoMEO information is correct to the best of our knowledge but should not be relied upon for legal advice. SHERPA cannot be held responsible for the re-use of RoMEO data, or for alternative interpretations which are derived from this information.</p>\n+jsp.sherpa.error = <p class=\"sherpaError\">Sorry, we have had trouble querying the SHERPA/RoMEO Database. No data is available, try later or check directly at the <a href=\"https://v2.sherpa.ac.uk/romeo/\" target=\"_blank\">SHERPA/RoMEO WebSite</a>.</p>\n+jsp.sherpa.noresult = <p class=\"sherpaNoResult\">Sorry, there is no data in the <a href=\"http://www.sherpa.ac.uk/romeo.php\" target=\"_blank\">SHERPA/RoMEO Database</a> for the ISSNs that you have entered.</p>\n+jsp.sherpa.oneresult = <p>The <a href=\"https://v2.sherpa.ac.uk/romeo/\" target=\"_blank\">SHERPA/RoMEO</a> database provides the following data for the journal that you have entered.</p>\n jsp.sherpa.moreresults = <p>The ISSNs that you have entered match with multiple journals, please review them. You can find the publisher policy for these journals below.</p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dc76cb380f37270f0c3e9ca845989407acf97e6"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU0OTgzMQ==", "bodyText": "I have changed the JSPUI handling so that each ISSN is now search separately, as with XMLUI. Additional results will be displayed below (since we are scrolling overflow, this is generally OK), as well as adding messages to indicate when there are multiple results, and/or when at least one ISSN returned an error or invalid response", "url": "https://github.com/DSpace/DSpace/pull/2739#discussion_r406549831", "createdAt": "2020-04-10T00:43:11Z", "author": {"login": "kshepherd"}, "path": "dspace-api/src/main/resources/Messages.properties", "diffHunk": "@@ -901,17 +901,17 @@ jsp.search.filter.original_bundle_filenames                      = Filename\n jsp.search.filter.original_bundle_descriptions                   = File description\n jsp.sherpa.title = SHERPA/RoMEO Publisher Policy Database\n jsp.sherpa.loading = <p>Fetching policy information from the SHERPA/RoMEO database</p><img alt=\"loading\" src=\"{0}/sherpa/image/ajax-loader-big.gif\" />\n-jsp.sherpa.heading = <p class=\"sherpaDisclaimer\"><a href=\"http://www.sherpa.ac.uk/romeo.php\" target=\"_blank\"><img align=\"left\" src=\"{0}/sherpa/image/romeosmall.gif\" width=\"100\" height=\"54\" alt=\"SHERPA/RoMEO Database\" border=\"0\"></a> All SHERPA/RoMEO information is correct to the best of our knowledge but should not be relied upon for legal advice. SHERPA cannot be held responsible for the re-use of RoMEO data, or for alternative interpretations which are derived from this information.</p>\n-jsp.sherpa.error = <p class=\"sherpaError\">Sorry, we have had trouble querying the SHERPA/RoMEO Database. No data are availables, try later or check directly the <a href=\"http://www.sherpa.ac.uk/romeo.php\" target=\"_blank\">SHERPA/RoMEO WebSite</a>.</p>\n-jsp.sherpa.noresult = <p class=\"sherpaNoResult\">Sorry, there are not data in the <a href=\"http://www.sherpa.ac.uk/romeo.php\" target=\"_blank\">SHERPA/RoMEO Database</a> for the ISSNs that you have entered.</p>\n-jsp.sherpa.oneresult = <p>The <a href=\"http://www.sherpa.ac.uk/romeo.php\" target=\"_blank\">SHERPA/RoMEO</a> Database provide the following data for the journal that you have entered.</p>\n+jsp.sherpa.heading = <p class=\"sherpaDisclaimer\"><a href=\"https://v2.sherpa.ac.uk/romeo/\" target=\"_blank\"><img align=\"left\" src=\"{0}/sherpa/image/romeosmall.gif\" width=\"100\" height=\"54\" alt=\"SHERPA/RoMEO Database\" border=\"0\"></a> All SHERPA/RoMEO information is correct to the best of our knowledge but should not be relied upon for legal advice. SHERPA cannot be held responsible for the re-use of RoMEO data, or for alternative interpretations which are derived from this information.</p>\n+jsp.sherpa.error = <p class=\"sherpaError\">Sorry, we have had trouble querying the SHERPA/RoMEO Database. No data is available, try later or check directly at the <a href=\"https://v2.sherpa.ac.uk/romeo/\" target=\"_blank\">SHERPA/RoMEO WebSite</a>.</p>\n+jsp.sherpa.noresult = <p class=\"sherpaNoResult\">Sorry, there is no data in the <a href=\"http://www.sherpa.ac.uk/romeo.php\" target=\"_blank\">SHERPA/RoMEO Database</a> for the ISSNs that you have entered.</p>\n+jsp.sherpa.oneresult = <p>The <a href=\"https://v2.sherpa.ac.uk/romeo/\" target=\"_blank\">SHERPA/RoMEO</a> database provides the following data for the journal that you have entered.</p>\n jsp.sherpa.moreresults = <p>The ISSNs that you have entered match with multiple journals, please review them. You can find the publisher policy for these journals below.</p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgzMzk4OQ=="}, "originalCommit": {"oid": "1dc76cb380f37270f0c3e9ca845989407acf97e6"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzAzMzYwOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/app/sherpa/v2/SHERPAResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTo1MDoyNFrOGFG7sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwMjozNDozM1rOGHjAzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAwOTY1MQ==", "bodyText": "The \"InputStreamReader\" should be closed.", "url": "https://github.com/DSpace/DSpace/pull/2739#discussion_r408009651", "createdAt": "2020-04-14T09:50:24Z", "author": {"login": "KevinVdV"}, "path": "dspace-api/src/main/java/org/dspace/app/sherpa/v2/SHERPAResponse.java", "diffHunk": "@@ -0,0 +1,471 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.sherpa.v2;\n+\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import org.apache.log4j.Logger;\n+import org.dspace.core.I18nUtil;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.json.JSONTokener;\n+\n+/**\n+ * Model class for the SHERPAv2 API (JSON) response\n+ * The structure and approached used is quite different to the simple v1 API used previously\n+ * \n+ * @author Kim Shepherd\n+ * \n+ */\n+public class SHERPAResponse\n+{\n+    private boolean error;\n+    private String message;\n+    private String license;\n+    private String licenseURL;\n+    private String disclaimer;\n+    private SHERPASystemMetadata metadata;\n+    private List<SHERPAJournal> journals;\n+\n+\n+    // Internal Sherpa ID\n+    private int id;\n+\n+    // SHERPA URI (the human page version of this API response)\n+\n+    private String uri;\n+\n+    // Journal / publisher URL\n+    private String journalUrl;\n+\n+    public enum SHERPAFormat {\n+        XML, JSON\n+    };\n+\n+    private static Logger log = Logger.getLogger(SHERPAResponse.class);\n+\n+    public SHERPAResponse(InputStream inputStream) {\n+        this(inputStream, SHERPAFormat.XML);\n+    }\n+\n+    public SHERPAResponse(InputStream input, SHERPAFormat format) {\n+        if (format == SHERPAFormat.JSON) {\n+            parseJSON(input);\n+        }\n+    }\n+\n+    /**\n+     * Parse the SHERPA v2 API JSON and construct Romeo policy data for display\n+     * @param jsonData\n+     */\n+    private void parseJSON(InputStream jsonData) {\n+        JSONTokener jsonTokener = new JSONTokener(new InputStreamReader(jsonData));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4edbc2a1bc4966f832385ea80336e2eeb523115"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDU2Njg2Mw==", "bodyText": "Thanks, I have done this in a finally block (and the main methods now throw IOException)", "url": "https://github.com/DSpace/DSpace/pull/2739#discussion_r410566863", "createdAt": "2020-04-18T02:34:33Z", "author": {"login": "kshepherd"}, "path": "dspace-api/src/main/java/org/dspace/app/sherpa/v2/SHERPAResponse.java", "diffHunk": "@@ -0,0 +1,471 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.sherpa.v2;\n+\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import org.apache.log4j.Logger;\n+import org.dspace.core.I18nUtil;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.json.JSONTokener;\n+\n+/**\n+ * Model class for the SHERPAv2 API (JSON) response\n+ * The structure and approached used is quite different to the simple v1 API used previously\n+ * \n+ * @author Kim Shepherd\n+ * \n+ */\n+public class SHERPAResponse\n+{\n+    private boolean error;\n+    private String message;\n+    private String license;\n+    private String licenseURL;\n+    private String disclaimer;\n+    private SHERPASystemMetadata metadata;\n+    private List<SHERPAJournal> journals;\n+\n+\n+    // Internal Sherpa ID\n+    private int id;\n+\n+    // SHERPA URI (the human page version of this API response)\n+\n+    private String uri;\n+\n+    // Journal / publisher URL\n+    private String journalUrl;\n+\n+    public enum SHERPAFormat {\n+        XML, JSON\n+    };\n+\n+    private static Logger log = Logger.getLogger(SHERPAResponse.class);\n+\n+    public SHERPAResponse(InputStream inputStream) {\n+        this(inputStream, SHERPAFormat.XML);\n+    }\n+\n+    public SHERPAResponse(InputStream input, SHERPAFormat format) {\n+        if (format == SHERPAFormat.JSON) {\n+            parseJSON(input);\n+        }\n+    }\n+\n+    /**\n+     * Parse the SHERPA v2 API JSON and construct Romeo policy data for display\n+     * @param jsonData\n+     */\n+    private void parseJSON(InputStream jsonData) {\n+        JSONTokener jsonTokener = new JSONTokener(new InputStreamReader(jsonData));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAwOTY1MQ=="}, "originalCommit": {"oid": "b4edbc2a1bc4966f832385ea80336e2eeb523115"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzAzNjc4OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/app/sherpa/SHERPAService.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTo1MToyMlrOGFG9yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMzo1NzozNFrOGNBdGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxMDE4NQ==", "bodyText": "The \"responseBody.getContent()\" returns an inputStream, this one should be closed.", "url": "https://github.com/DSpace/DSpace/pull/2739#discussion_r408010185", "createdAt": "2020-04-14T09:51:22Z", "author": {"login": "KevinVdV"}, "path": "dspace-api/src/main/java/org/dspace/app/sherpa/SHERPAService.java", "diffHunk": "@@ -89,7 +104,7 @@ public SHERPAResponse searchByJournalISSN(String query)\n                 HttpEntity responseBody = response.getEntity();\n \n                 if (null != responseBody)\n-                    sherpaResponse = new SHERPAResponse(responseBody.getContent());\n+                    sherpaResponse = new SHERPAResponse(responseBody.getContent(), SHERPAResponse.SHERPAFormat.JSON);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4edbc2a1bc4966f832385ea80336e2eeb523115"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDU2NjkxMA==", "bodyText": "Thanks, I have done this in a finally block (and the main methods now throw IOException)", "url": "https://github.com/DSpace/DSpace/pull/2739#discussion_r410566910", "createdAt": "2020-04-18T02:34:38Z", "author": {"login": "kshepherd"}, "path": "dspace-api/src/main/java/org/dspace/app/sherpa/SHERPAService.java", "diffHunk": "@@ -89,7 +104,7 @@ public SHERPAResponse searchByJournalISSN(String query)\n                 HttpEntity responseBody = response.getEntity();\n \n                 if (null != responseBody)\n-                    sherpaResponse = new SHERPAResponse(responseBody.getContent());\n+                    sherpaResponse = new SHERPAResponse(responseBody.getContent(), SHERPAResponse.SHERPAFormat.JSON);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxMDE4NQ=="}, "originalCommit": {"oid": "b4edbc2a1bc4966f832385ea80336e2eeb523115"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcwMzMzOQ==", "bodyText": "@kshepherd Did you forget to commit the fix here ? Because this class wasn't altered recently.", "url": "https://github.com/DSpace/DSpace/pull/2739#discussion_r415703339", "createdAt": "2020-04-27T10:40:18Z", "author": {"login": "KevinVdV"}, "path": "dspace-api/src/main/java/org/dspace/app/sherpa/SHERPAService.java", "diffHunk": "@@ -89,7 +104,7 @@ public SHERPAResponse searchByJournalISSN(String query)\n                 HttpEntity responseBody = response.getEntity();\n \n                 if (null != responseBody)\n-                    sherpaResponse = new SHERPAResponse(responseBody.getContent());\n+                    sherpaResponse = new SHERPAResponse(responseBody.getContent(), SHERPAResponse.SHERPAFormat.JSON);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxMDE4NQ=="}, "originalCommit": {"oid": "b4edbc2a1bc4966f832385ea80336e2eeb523115"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjMwODUwNg==", "bodyText": "Thanks, I've pushed a change now", "url": "https://github.com/DSpace/DSpace/pull/2739#discussion_r416308506", "createdAt": "2020-04-28T03:57:34Z", "author": {"login": "kshepherd"}, "path": "dspace-api/src/main/java/org/dspace/app/sherpa/SHERPAService.java", "diffHunk": "@@ -89,7 +104,7 @@ public SHERPAResponse searchByJournalISSN(String query)\n                 HttpEntity responseBody = response.getEntity();\n \n                 if (null != responseBody)\n-                    sherpaResponse = new SHERPAResponse(responseBody.getContent());\n+                    sherpaResponse = new SHERPAResponse(responseBody.getContent(), SHERPAResponse.SHERPAFormat.JSON);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxMDE4NQ=="}, "originalCommit": {"oid": "b4edbc2a1bc4966f832385ea80336e2eeb523115"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzA2ODI3OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/app/sherpa/v2/SHERPAResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTo1OToyMFrOGFHRSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwMjozNDo0NFrOGHjBKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxNTE3Ng==", "bodyText": "This variable is parsed here, but isn't used anywhere. Maybe we should create a getter for this, it will make things easier if we ever which to use it.", "url": "https://github.com/DSpace/DSpace/pull/2739#discussion_r408015176", "createdAt": "2020-04-14T09:59:20Z", "author": {"login": "KevinVdV"}, "path": "dspace-api/src/main/java/org/dspace/app/sherpa/v2/SHERPAResponse.java", "diffHunk": "@@ -0,0 +1,471 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.sherpa.v2;\n+\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import org.apache.log4j.Logger;\n+import org.dspace.core.I18nUtil;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.json.JSONTokener;\n+\n+/**\n+ * Model class for the SHERPAv2 API (JSON) response\n+ * The structure and approached used is quite different to the simple v1 API used previously\n+ * \n+ * @author Kim Shepherd\n+ * \n+ */\n+public class SHERPAResponse\n+{\n+    private boolean error;\n+    private String message;\n+    private String license;\n+    private String licenseURL;\n+    private String disclaimer;\n+    private SHERPASystemMetadata metadata;\n+    private List<SHERPAJournal> journals;\n+\n+\n+    // Internal Sherpa ID\n+    private int id;\n+\n+    // SHERPA URI (the human page version of this API response)\n+\n+    private String uri;\n+\n+    // Journal / publisher URL\n+    private String journalUrl;\n+\n+    public enum SHERPAFormat {\n+        XML, JSON\n+    };\n+\n+    private static Logger log = Logger.getLogger(SHERPAResponse.class);\n+\n+    public SHERPAResponse(InputStream inputStream) {\n+        this(inputStream, SHERPAFormat.XML);\n+    }\n+\n+    public SHERPAResponse(InputStream input, SHERPAFormat format) {\n+        if (format == SHERPAFormat.JSON) {\n+            parseJSON(input);\n+        }\n+    }\n+\n+    /**\n+     * Parse the SHERPA v2 API JSON and construct Romeo policy data for display\n+     * @param jsonData\n+     */\n+    private void parseJSON(InputStream jsonData) {\n+        JSONTokener jsonTokener = new JSONTokener(new InputStreamReader(jsonData));\n+        JSONObject httpResponse;\n+        try {\n+            httpResponse = new JSONObject(jsonTokener);\n+            if (httpResponse.has(\"items\")) {\n+                JSONArray items = httpResponse.getJSONArray(\"items\");\n+                // items array is search results, *not* journals or publishers - they are listed for each item\n+                // - however, we only ever want one result since we're passing an \"equals ISSN\" query\n+                if (items.length() > 0) {\n+                    metadata = new SHERPASystemMetadata();\n+                    this.journals = new LinkedList<>();\n+\n+                    for (int itemIndex = 0; itemIndex < items.length(); itemIndex++) {\n+                        List<SHERPAPublisher> sherpaPublishers = new LinkedList<>();\n+                        List<SHERPAPublisherPolicy> policies = new ArrayList<>();\n+                        SHERPAPublisher sherpaPublisher = new SHERPAPublisher();\n+                        SHERPAJournal sherpaJournal = new SHERPAJournal();\n+\n+                        JSONObject item = items.getJSONObject(0);\n+\n+                        if (item.has(\"system_metadata\")) {\n+                            JSONObject systemMetadata = item.getJSONObject(\"system_metadata\");\n+                            if (systemMetadata.has(\"uri\")) {\n+                                this.uri = systemMetadata.getString(\"uri\");\n+                                metadata.setUri(this.uri);\n+                            } else {\n+                                log.error(\"SHERPA URI missing for API response item\");\n+                            }\n+                            if (systemMetadata.has(\"id\")) {\n+                                this.id = systemMetadata.getInt(\"id\");\n+                                metadata.setId(this.id);\n+                            } else {\n+                                log.error(\"SHERPA internal ID missing for API response item\");\n+                            }\n+                            // Get date created and added - DSpace expects this in the publisher object, though\n+                            if (systemMetadata.has(\"date_created\")) {\n+                                metadata.setDateCreated(systemMetadata.getString(\"date_created\"));\n+                            }\n+                            if (systemMetadata.has(\"date_modified\")) {\n+                                metadata.setDateModified(systemMetadata.getString(\"date_modified\"));\n+                            }\n+                            // Is this item publicly visible?\n+                            if (systemMetadata.has(\"publicly_visible\")) {\n+                                metadata.setPubliclyVisible (\"yes\".equals(systemMetadata\n+                                    .getString(\"publicly_visible\")));\n+                            }\n+                            // Is this item listed in the DOAJ?\n+                            if (systemMetadata.has(\"listed_in_doaj\")) {\n+                                metadata.setPubliclyVisible (\"yes\".equals(systemMetadata\n+                                    .getString(\"listed_in_doaj\")));\n+                            }\n+                        }\n+                        if (item.has(\"url\")) {\n+                            this.journalUrl = item.getString(\"url\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4edbc2a1bc4966f832385ea80336e2eeb523115"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDU2Njk1Mw==", "bodyText": "Removed", "url": "https://github.com/DSpace/DSpace/pull/2739#discussion_r410566953", "createdAt": "2020-04-18T02:34:44Z", "author": {"login": "kshepherd"}, "path": "dspace-api/src/main/java/org/dspace/app/sherpa/v2/SHERPAResponse.java", "diffHunk": "@@ -0,0 +1,471 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.sherpa.v2;\n+\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import org.apache.log4j.Logger;\n+import org.dspace.core.I18nUtil;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.json.JSONTokener;\n+\n+/**\n+ * Model class for the SHERPAv2 API (JSON) response\n+ * The structure and approached used is quite different to the simple v1 API used previously\n+ * \n+ * @author Kim Shepherd\n+ * \n+ */\n+public class SHERPAResponse\n+{\n+    private boolean error;\n+    private String message;\n+    private String license;\n+    private String licenseURL;\n+    private String disclaimer;\n+    private SHERPASystemMetadata metadata;\n+    private List<SHERPAJournal> journals;\n+\n+\n+    // Internal Sherpa ID\n+    private int id;\n+\n+    // SHERPA URI (the human page version of this API response)\n+\n+    private String uri;\n+\n+    // Journal / publisher URL\n+    private String journalUrl;\n+\n+    public enum SHERPAFormat {\n+        XML, JSON\n+    };\n+\n+    private static Logger log = Logger.getLogger(SHERPAResponse.class);\n+\n+    public SHERPAResponse(InputStream inputStream) {\n+        this(inputStream, SHERPAFormat.XML);\n+    }\n+\n+    public SHERPAResponse(InputStream input, SHERPAFormat format) {\n+        if (format == SHERPAFormat.JSON) {\n+            parseJSON(input);\n+        }\n+    }\n+\n+    /**\n+     * Parse the SHERPA v2 API JSON and construct Romeo policy data for display\n+     * @param jsonData\n+     */\n+    private void parseJSON(InputStream jsonData) {\n+        JSONTokener jsonTokener = new JSONTokener(new InputStreamReader(jsonData));\n+        JSONObject httpResponse;\n+        try {\n+            httpResponse = new JSONObject(jsonTokener);\n+            if (httpResponse.has(\"items\")) {\n+                JSONArray items = httpResponse.getJSONArray(\"items\");\n+                // items array is search results, *not* journals or publishers - they are listed for each item\n+                // - however, we only ever want one result since we're passing an \"equals ISSN\" query\n+                if (items.length() > 0) {\n+                    metadata = new SHERPASystemMetadata();\n+                    this.journals = new LinkedList<>();\n+\n+                    for (int itemIndex = 0; itemIndex < items.length(); itemIndex++) {\n+                        List<SHERPAPublisher> sherpaPublishers = new LinkedList<>();\n+                        List<SHERPAPublisherPolicy> policies = new ArrayList<>();\n+                        SHERPAPublisher sherpaPublisher = new SHERPAPublisher();\n+                        SHERPAJournal sherpaJournal = new SHERPAJournal();\n+\n+                        JSONObject item = items.getJSONObject(0);\n+\n+                        if (item.has(\"system_metadata\")) {\n+                            JSONObject systemMetadata = item.getJSONObject(\"system_metadata\");\n+                            if (systemMetadata.has(\"uri\")) {\n+                                this.uri = systemMetadata.getString(\"uri\");\n+                                metadata.setUri(this.uri);\n+                            } else {\n+                                log.error(\"SHERPA URI missing for API response item\");\n+                            }\n+                            if (systemMetadata.has(\"id\")) {\n+                                this.id = systemMetadata.getInt(\"id\");\n+                                metadata.setId(this.id);\n+                            } else {\n+                                log.error(\"SHERPA internal ID missing for API response item\");\n+                            }\n+                            // Get date created and added - DSpace expects this in the publisher object, though\n+                            if (systemMetadata.has(\"date_created\")) {\n+                                metadata.setDateCreated(systemMetadata.getString(\"date_created\"));\n+                            }\n+                            if (systemMetadata.has(\"date_modified\")) {\n+                                metadata.setDateModified(systemMetadata.getString(\"date_modified\"));\n+                            }\n+                            // Is this item publicly visible?\n+                            if (systemMetadata.has(\"publicly_visible\")) {\n+                                metadata.setPubliclyVisible (\"yes\".equals(systemMetadata\n+                                    .getString(\"publicly_visible\")));\n+                            }\n+                            // Is this item listed in the DOAJ?\n+                            if (systemMetadata.has(\"listed_in_doaj\")) {\n+                                metadata.setPubliclyVisible (\"yes\".equals(systemMetadata\n+                                    .getString(\"listed_in_doaj\")));\n+                            }\n+                        }\n+                        if (item.has(\"url\")) {\n+                            this.journalUrl = item.getString(\"url\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxNTE3Ng=="}, "originalCommit": {"oid": "b4edbc2a1bc4966f832385ea80336e2eeb523115"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzI0NTE1OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/app/sherpa/v2/SHERPAPublisher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMDo0NzoyNlrOGFI9Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwMjozNDo1MlrOGHjBaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA0Mjg1MA==", "bodyText": "Maybe we should leave this variable out of here, we aren't using it in the code & Sherpa Romeo themselves aren't offering it up anymore.", "url": "https://github.com/DSpace/DSpace/pull/2739#discussion_r408042850", "createdAt": "2020-04-14T10:47:26Z", "author": {"login": "KevinVdV"}, "path": "dspace-api/src/main/java/org/dspace/app/sherpa/v2/SHERPAPublisher.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.sherpa.v2;\n+\n+public class SHERPAPublisher {\n+    private String name;\n+    private String relationshipType;\n+    private String country;\n+    private String uri;\n+    private int publicationCount;\n+\n+    // this is not technically in the same place in SHERPA data model but it makes more sense to apply it here\n+    // is it is treated as a 'special case' - just for printing links to paid OA access policies\n+    private String paidAccessDescription;\n+    private String paidAccessUrl;\n+\n+    // This is deprecated - we should not rely on 'SHERPA ROMeO colour' anymore and it is a bit dangerous\n+    // to try and calculated it ourselves, now that it is no longer supplied\n+    private String romeoColour;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4edbc2a1bc4966f832385ea80336e2eeb523115"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDU2NzAxNw==", "bodyText": "Removed", "url": "https://github.com/DSpace/DSpace/pull/2739#discussion_r410567017", "createdAt": "2020-04-18T02:34:52Z", "author": {"login": "kshepherd"}, "path": "dspace-api/src/main/java/org/dspace/app/sherpa/v2/SHERPAPublisher.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.sherpa.v2;\n+\n+public class SHERPAPublisher {\n+    private String name;\n+    private String relationshipType;\n+    private String country;\n+    private String uri;\n+    private int publicationCount;\n+\n+    // this is not technically in the same place in SHERPA data model but it makes more sense to apply it here\n+    // is it is treated as a 'special case' - just for printing links to paid OA access policies\n+    private String paidAccessDescription;\n+    private String paidAccessUrl;\n+\n+    // This is deprecated - we should not rely on 'SHERPA ROMeO colour' anymore and it is a bit dangerous\n+    // to try and calculated it ourselves, now that it is no longer supplied\n+    private String romeoColour;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA0Mjg1MA=="}, "originalCommit": {"oid": "b4edbc2a1bc4966f832385ea80336e2eeb523115"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzI3MzM3OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/app/sherpa/v2/SHERPAResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMDo1NTo0OVrOGFJO5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwMjozNjowNVrOGHjDOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA0NzMzNA==", "bodyText": "Can we split up this method into smaller parts ? This method is really big & when we split it up it should be easier to navigate to where certain sections are parsed (if we ever want to make changes). The javadoc for these smaller methods could then also display an example of the JSON it is parsing.", "url": "https://github.com/DSpace/DSpace/pull/2739#discussion_r408047334", "createdAt": "2020-04-14T10:55:49Z", "author": {"login": "KevinVdV"}, "path": "dspace-api/src/main/java/org/dspace/app/sherpa/v2/SHERPAResponse.java", "diffHunk": "@@ -0,0 +1,471 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.sherpa.v2;\n+\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import org.apache.log4j.Logger;\n+import org.dspace.core.I18nUtil;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.json.JSONTokener;\n+\n+/**\n+ * Model class for the SHERPAv2 API (JSON) response\n+ * The structure and approached used is quite different to the simple v1 API used previously\n+ * \n+ * @author Kim Shepherd\n+ * \n+ */\n+public class SHERPAResponse\n+{\n+    private boolean error;\n+    private String message;\n+    private String license;\n+    private String licenseURL;\n+    private String disclaimer;\n+    private SHERPASystemMetadata metadata;\n+    private List<SHERPAJournal> journals;\n+\n+\n+    // Internal Sherpa ID\n+    private int id;\n+\n+    // SHERPA URI (the human page version of this API response)\n+\n+    private String uri;\n+\n+    // Journal / publisher URL\n+    private String journalUrl;\n+\n+    public enum SHERPAFormat {\n+        XML, JSON\n+    };\n+\n+    private static Logger log = Logger.getLogger(SHERPAResponse.class);\n+\n+    public SHERPAResponse(InputStream inputStream) {\n+        this(inputStream, SHERPAFormat.XML);\n+    }\n+\n+    public SHERPAResponse(InputStream input, SHERPAFormat format) {\n+        if (format == SHERPAFormat.JSON) {\n+            parseJSON(input);\n+        }\n+    }\n+\n+    /**\n+     * Parse the SHERPA v2 API JSON and construct Romeo policy data for display\n+     * @param jsonData\n+     */\n+    private void parseJSON(InputStream jsonData) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4edbc2a1bc4966f832385ea80336e2eeb523115"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDU2NzQ4MA==", "bodyText": "I've split this method into parts, so there are now separate methods for parsing PublisherPolicy, PermittedVersion, Publisher, Journal, and SystemMetadata. I have had to slightly rework some other logic and models to handle the change in scope, but it is working the same and hopefully is easier to follow. I also added javadoc annotation for each method.", "url": "https://github.com/DSpace/DSpace/pull/2739#discussion_r410567480", "createdAt": "2020-04-18T02:36:05Z", "author": {"login": "kshepherd"}, "path": "dspace-api/src/main/java/org/dspace/app/sherpa/v2/SHERPAResponse.java", "diffHunk": "@@ -0,0 +1,471 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.sherpa.v2;\n+\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import org.apache.log4j.Logger;\n+import org.dspace.core.I18nUtil;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.json.JSONTokener;\n+\n+/**\n+ * Model class for the SHERPAv2 API (JSON) response\n+ * The structure and approached used is quite different to the simple v1 API used previously\n+ * \n+ * @author Kim Shepherd\n+ * \n+ */\n+public class SHERPAResponse\n+{\n+    private boolean error;\n+    private String message;\n+    private String license;\n+    private String licenseURL;\n+    private String disclaimer;\n+    private SHERPASystemMetadata metadata;\n+    private List<SHERPAJournal> journals;\n+\n+\n+    // Internal Sherpa ID\n+    private int id;\n+\n+    // SHERPA URI (the human page version of this API response)\n+\n+    private String uri;\n+\n+    // Journal / publisher URL\n+    private String journalUrl;\n+\n+    public enum SHERPAFormat {\n+        XML, JSON\n+    };\n+\n+    private static Logger log = Logger.getLogger(SHERPAResponse.class);\n+\n+    public SHERPAResponse(InputStream inputStream) {\n+        this(inputStream, SHERPAFormat.XML);\n+    }\n+\n+    public SHERPAResponse(InputStream input, SHERPAFormat format) {\n+        if (format == SHERPAFormat.JSON) {\n+            parseJSON(input);\n+        }\n+    }\n+\n+    /**\n+     * Parse the SHERPA v2 API JSON and construct Romeo policy data for display\n+     * @param jsonData\n+     */\n+    private void parseJSON(InputStream jsonData) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA0NzMzNA=="}, "originalCommit": {"oid": "b4edbc2a1bc4966f832385ea80336e2eeb523115"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzI3ODEzOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/app/sherpa/v2/SHERPAResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMDo1NzoyMFrOGFJR9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwMjozNjoxNVrOGHjDbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA0ODExOA==", "bodyText": "What is the purpose of this section ? These variables aren't coming from our Sherpa response & are just retrieved from the messages.properties while the actual getters of these aren't used.", "url": "https://github.com/DSpace/DSpace/pull/2739#discussion_r408048118", "createdAt": "2020-04-14T10:57:20Z", "author": {"login": "KevinVdV"}, "path": "dspace-api/src/main/java/org/dspace/app/sherpa/v2/SHERPAResponse.java", "diffHunk": "@@ -0,0 +1,471 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.sherpa.v2;\n+\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import org.apache.log4j.Logger;\n+import org.dspace.core.I18nUtil;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.json.JSONTokener;\n+\n+/**\n+ * Model class for the SHERPAv2 API (JSON) response\n+ * The structure and approached used is quite different to the simple v1 API used previously\n+ * \n+ * @author Kim Shepherd\n+ * \n+ */\n+public class SHERPAResponse\n+{\n+    private boolean error;\n+    private String message;\n+    private String license;\n+    private String licenseURL;\n+    private String disclaimer;\n+    private SHERPASystemMetadata metadata;\n+    private List<SHERPAJournal> journals;\n+\n+\n+    // Internal Sherpa ID\n+    private int id;\n+\n+    // SHERPA URI (the human page version of this API response)\n+\n+    private String uri;\n+\n+    // Journal / publisher URL\n+    private String journalUrl;\n+\n+    public enum SHERPAFormat {\n+        XML, JSON\n+    };\n+\n+    private static Logger log = Logger.getLogger(SHERPAResponse.class);\n+\n+    public SHERPAResponse(InputStream inputStream) {\n+        this(inputStream, SHERPAFormat.XML);\n+    }\n+\n+    public SHERPAResponse(InputStream input, SHERPAFormat format) {\n+        if (format == SHERPAFormat.JSON) {\n+            parseJSON(input);\n+        }\n+    }\n+\n+    /**\n+     * Parse the SHERPA v2 API JSON and construct Romeo policy data for display\n+     * @param jsonData\n+     */\n+    private void parseJSON(InputStream jsonData) {\n+        JSONTokener jsonTokener = new JSONTokener(new InputStreamReader(jsonData));\n+        JSONObject httpResponse;\n+        try {\n+            httpResponse = new JSONObject(jsonTokener);\n+            if (httpResponse.has(\"items\")) {\n+                JSONArray items = httpResponse.getJSONArray(\"items\");\n+                // items array is search results, *not* journals or publishers - they are listed for each item\n+                // - however, we only ever want one result since we're passing an \"equals ISSN\" query\n+                if (items.length() > 0) {\n+                    metadata = new SHERPASystemMetadata();\n+                    this.journals = new LinkedList<>();\n+\n+                    for (int itemIndex = 0; itemIndex < items.length(); itemIndex++) {\n+                        List<SHERPAPublisher> sherpaPublishers = new LinkedList<>();\n+                        List<SHERPAPublisherPolicy> policies = new ArrayList<>();\n+                        SHERPAPublisher sherpaPublisher = new SHERPAPublisher();\n+                        SHERPAJournal sherpaJournal = new SHERPAJournal();\n+\n+                        JSONObject item = items.getJSONObject(0);\n+\n+                        if (item.has(\"system_metadata\")) {\n+                            JSONObject systemMetadata = item.getJSONObject(\"system_metadata\");\n+                            if (systemMetadata.has(\"uri\")) {\n+                                this.uri = systemMetadata.getString(\"uri\");\n+                                metadata.setUri(this.uri);\n+                            } else {\n+                                log.error(\"SHERPA URI missing for API response item\");\n+                            }\n+                            if (systemMetadata.has(\"id\")) {\n+                                this.id = systemMetadata.getInt(\"id\");\n+                                metadata.setId(this.id);\n+                            } else {\n+                                log.error(\"SHERPA internal ID missing for API response item\");\n+                            }\n+                            // Get date created and added - DSpace expects this in the publisher object, though\n+                            if (systemMetadata.has(\"date_created\")) {\n+                                metadata.setDateCreated(systemMetadata.getString(\"date_created\"));\n+                            }\n+                            if (systemMetadata.has(\"date_modified\")) {\n+                                metadata.setDateModified(systemMetadata.getString(\"date_modified\"));\n+                            }\n+                            // Is this item publicly visible?\n+                            if (systemMetadata.has(\"publicly_visible\")) {\n+                                metadata.setPubliclyVisible (\"yes\".equals(systemMetadata\n+                                    .getString(\"publicly_visible\")));\n+                            }\n+                            // Is this item listed in the DOAJ?\n+                            if (systemMetadata.has(\"listed_in_doaj\")) {\n+                                metadata.setPubliclyVisible (\"yes\".equals(systemMetadata\n+                                    .getString(\"listed_in_doaj\")));\n+                            }\n+                        }\n+                        if (item.has(\"url\")) {\n+                            this.journalUrl = item.getString(\"url\");\n+                        }\n+\n+                        boolean inDOAJ = false;\n+                        if (item.has(\"listed_in_doaj\")) {\n+                            inDOAJ = (\"yes\".equals(item.getString(\"listed_in_doaj\")));\n+                        }\n+\n+                        // Parse \"publisher policy\"\n+                        // note - most of the information that was previously under 'publisher' is now under here\n+                        if (item.has(\"publisher_policy\")) {\n+\n+                            // Parse main publisher policies node\n+                            JSONArray publisherPolicies = item.getJSONArray(\"publisher_policy\");\n+                            for (int i = 0; i < publisherPolicies.length(); i++) {\n+\n+                                JSONObject policy = publisherPolicies.getJSONObject(i);\n+\n+                                // Make my new PublisherPolicy object\n+                                SHERPAPublisherPolicy sherpaPublisherPolicy = new SHERPAPublisherPolicy();\n+\n+                                String moniker = null;\n+                                if (policy.has(\"internal_moniker\")) {\n+                                    moniker = policy.getString(\"internal_moniker\");\n+                                    sherpaPublisherPolicy.setInternalMoniker(moniker);\n+                                }\n+                                log.debug(\"Parsing publisher_policy number \" + i + \" (\" + moniker + \")\");\n+\n+                                // This seems to be usually policy(ies) for the journal proper\n+                                // and then an \"Open access option\" which contains some of the info\n+                                // that the 'paidaccess' node in the old API used to contain\n+                                // Look for: internal_moniker = \"Open access option\"\n+                                // Check if this is OA options (Paid Access) or not\n+                                if (\"Open access option\".equalsIgnoreCase(moniker)) {\n+                                    log.debug(\"This is the Open access options policy - a special case\");\n+                                    if (policy.has(\"urls\")) {\n+                                        JSONArray urls = policy.getJSONArray(\"urls\");\n+                                        for (int u = 0; u < urls.length(); u++) {\n+                                            JSONObject url = urls.getJSONObject(u);\n+                                            if (url.has(\"description\") &&\n+                                                \"Open Access\".equalsIgnoreCase(url.getString(\"description\"))) {\n+                                                log.debug(\"Found OA paid access url: \" + url.getString(\"url\"));\n+                                                sherpaPublisher.setPaidAccessDescription(url.getString(\"description\"));\n+                                                sherpaPublisher.setPaidAccessUrl(url.getString(\"url\"));\n+                                                break;\n+                                            }\n+                                        }\n+                                    }\n+                                    // Continue the loop here - this \"policy\" is a bit different and we\n+                                    // don't want to overwrite the other conditions, etc.\n+                                    continue;\n+                                }\n+\n+                                // URLs (used to be Copyright Links)\n+                                if (policy.has(\"urls\")) {\n+                                    JSONArray urls = policy.getJSONArray(\"urls\");\n+                                    Map<String, String> copyrightLinks = new TreeMap<>();\n+                                    for (int u = 0; u < urls.length(); u++) {\n+                                        JSONObject url = urls.getJSONObject(u);\n+                                        if (url.has(\"description\") && url.has(\"url\")) {\n+                                            log.debug(\"Setting copyright URL: \" + url.getString(\"url\"));\n+                                            copyrightLinks.put(url.getString(\"url\"), url.getString(\"description\"));\n+                                        }\n+                                    }\n+                                    sherpaPublisherPolicy.setUrls(copyrightLinks);\n+                                }\n+\n+                                // Permitted OA options\n+                                int submittedOption = 0;\n+                                int acceptedOption = 0;\n+                                int publishedOption = 0;\n+                                int currentOption = 0;\n+                                if (policy.has(\"permitted_oa\")) {\n+                                    List<String> allowed = new ArrayList<>();\n+                                    JSONArray permittedOA = policy.getJSONArray(\"permitted_oa\");\n+                                    List<SHERPAPermittedVersion> permittedVersions = new ArrayList<>();\n+                                    for (int p = 0; p < permittedOA.length(); p++) {\n+                                        JSONObject permitted = permittedOA.getJSONObject(p);\n+                                        // New PermittedVersion object\n+                                        SHERPAPermittedVersion permittedVersion = new SHERPAPermittedVersion();\n+                                        // Get the article version, which is ultimately used for the ticks / crosses\n+                                        // in the UI display. My assumptions around translation:\n+                                        // submitted = preprint\n+                                        // accepted = postprint\n+                                        // published = pdfversion\n+                                        String articleVersion = \"unknown\";\n+                                        String versionLabel = \"Unknown\";\n+\n+                                        if (permitted.has(\"article_version\")) {\n+                                            JSONArray versions = permitted.getJSONArray(\"article_version\");\n+                                            articleVersion = versions.getString(0);\n+                                            allowed.add(articleVersion);\n+                                            permittedVersion.setArticleVersion(articleVersion);\n+                                            log.debug(\"Added allowed version: \" + articleVersion + \" to list\");\n+                                        }\n+\n+                                        if (\"submitted\".equals(articleVersion)) {\n+                                            versionLabel = I18nUtil.getMessage(\"jsp.sherpa.submitted-version-label\");\n+                                            submittedOption++;\n+                                            currentOption = submittedOption;\n+                                        } else if(\"accepted\".equals(articleVersion)) {\n+                                            versionLabel = I18nUtil.getMessage(\"jsp.sherpa.accepted-version-label\");\n+                                            acceptedOption++;\n+                                            currentOption = acceptedOption;\n+                                        } else if(\"published\".equals(articleVersion)) {\n+                                            versionLabel = I18nUtil.getMessage(\"jsp.sherpa.published-version-label\");\n+                                            publishedOption++;\n+                                            currentOption = publishedOption;\n+                                        }\n+\n+                                        // These are now child arrays, in old API they were explicit like\n+                                        // \"preprint restrictions\", etc., and just contained text rather than data\n+                                        if (permitted.has(\"conditions\")) {\n+                                            List<String> conditionList = new ArrayList<>();\n+                                            JSONArray conditions = permitted.getJSONArray(\"conditions\");\n+                                            for (int c = 0; c < conditions.length(); c++) {\n+                                                conditionList.add(conditions.getString(c).trim());\n+                                            }\n+                                            permittedVersion.setConditions(conditionList);\n+                                        }\n+\n+                                        permittedVersion.setArticleVersion(versionLabel);\n+                                        permittedVersion.setOption(currentOption);\n+\n+                                        // Any prerequisites for this option (eg required by funder)\n+                                        List<String> prerequisites = new ArrayList<>();\n+                                        if (permitted.has(\"prerequisites\")) {\n+                                            JSONObject prereqs = permitted.getJSONObject(\"prerequisites\");\n+                                            if (prereqs.has(\"prerequisites_phrases\")) {\n+                                                JSONArray phrases = prereqs.getJSONArray(\"prerequisites_phrases\");\n+                                                for (int pp = 0; pp < phrases.length(); pp++) {\n+                                                    JSONObject phrase = phrases.getJSONObject(pp);\n+                                                    if (phrase.has(\"phrase\")) {\n+                                                        prerequisites.add(phrase.getString(\"phrase\").trim());\n+                                                    }\n+                                                }\n+                                            }\n+                                        }\n+                                        permittedVersion.setPrerequisites(prerequisites);\n+\n+                                        // A rough attempt at guessing colour based on the doc in the DSpace page\n+                                        // SHERPA have confirmed we shouldn't really use this anymore\n+                                        if (allowed.contains(\"submitted\") &&\n+                                            (allowed.contains(\"accepted\") || allowed.contains(\"published\"))) {\n+                                            sherpaPublisher.setRomeoColour(\"green\");\n+                                        } else if (allowed.contains(\"accepted\") || allowed.contains(\"published\")) {\n+                                            sherpaPublisher.setRomeoColour(\"blue\");\n+                                        } else if (allowed.contains(\"submitted\")) {\n+                                            sherpaPublisher.setRomeoColour(\"yellow\");\n+                                        } else if (inDOAJ) {\n+                                            sherpaPublisher.setRomeoColour(\"gray\");\n+                                        } else {\n+                                            sherpaPublisher.setRomeoColour(\"white\");\n+                                        }\n+\n+                                        // Populate the old indicators\n+                                        if (allowed.contains(\"submitted\")) {\n+                                            sherpaPublisherPolicy.setPreArchiving(\"can\");\n+                                        }\n+                                        if (allowed.contains(\"accepted\")) {\n+                                            sherpaPublisherPolicy.setPostArchiving(\"can\");\n+                                        }\n+                                        if (allowed.contains(\"published\")) {\n+                                            sherpaPublisherPolicy.setPubArchiving(\"can\");\n+                                        }\n+\n+                                        // Locations where this version / option may be archived\n+                                        List<String> sherpaLocations = new ArrayList<>();\n+                                        if (permitted.has(\"location\")) {\n+                                            JSONObject locations = permitted.getJSONObject(\"location\");\n+                                            if (locations.has(\"location_phrases\")) {\n+                                                JSONArray locationPhrases = locations.getJSONArray(\"location_phrases\");\n+                                                if (locationPhrases.length() > 0) {\n+                                                    for (int l = 0; l < locationPhrases.length(); l++) {\n+                                                        JSONObject locationPhrase = locationPhrases.getJSONObject(l);\n+                                                        if (locationPhrase.has(\"phrase\")) {\n+                                                            sherpaLocations.add(locationPhrase.getString(\"phrase\").trim());\n+                                                        }\n+                                                    }\n+                                                }\n+                                            }\n+                                        }\n+                                        permittedVersion.setLocations(sherpaLocations);\n+\n+                                        List<String> sherpaLicenses = new ArrayList<>();\n+                                        // required licences\n+                                        if (permitted.has(\"license\")) {\n+                                            JSONArray licences = permitted.getJSONArray(\"license\");\n+                                            for (int l = 0; l < licences.length(); l++) {\n+                                                JSONObject licence = licences.getJSONObject(l);\n+                                                if (licence.has(\"license_phrases\")) {\n+                                                    JSONArray phrases = licence.getJSONArray(\"license_phrases\");\n+                                                    for (int ll = 0; ll < phrases.length(); ll++) {\n+                                                        JSONObject phrase = phrases.getJSONObject(ll);\n+                                                        if (phrase.has(\"phrase\")) {\n+                                                            sherpaLicenses.add(phrase.getString(\"phrase\").trim());\n+                                                        }\n+                                                    }\n+                                                }\n+                                            }\n+                                        }\n+                                        permittedVersion.setLicenses(sherpaLicenses);\n+                                        permittedVersions.add(permittedVersion);\n+                                    }\n+                                    sherpaPublisherPolicy.setPermittedVersions(permittedVersions);\n+                                }\n+                                policies.add(sherpaPublisherPolicy);\n+                            }\n+\n+                            // set publisher name - note we're still in the if (publisher policy) block\n+                            // since this info is sort of combined, now.\n+                            // So I'll also just look for first publisher here, it's only for the name anyway\n+                            // (I imagine multiple is just for older owners/ name variants?)\n+                            if (item.has(\"publishers\")) {\n+                                JSONArray publishers = item.getJSONArray(\"publishers\");\n+                                if (publishers.length() > 0) {\n+                                    JSONObject publisherElement = publishers.getJSONObject(0);\n+                                    if (publisherElement.has(\"publisher\")) {\n+                                        JSONObject publisher = publisherElement.getJSONObject(\"publisher\");\n+                                        if (publisher.has(\"name\")) {\n+                                            JSONArray publisherNames = publisher.getJSONArray(\"name\");\n+                                            if (publisherNames.length() > 0) {\n+                                                JSONObject publisherName = publisherNames.getJSONObject(0);\n+                                                if (publisherName.has(\"name\")) {\n+                                                    sherpaPublisher.setName(publisherName.getString(\"name\").trim());\n+                                                }\n+                                            }\n+                                        }\n+                                    }\n+                                }\n+                            }\n+\n+                            // set title\n+                            if (item.has(\"title\")) {\n+                                JSONArray titles = item.getJSONArray(\"title\");\n+                                if (titles.length() > 0) {\n+                                    List<String> titleList = new ArrayList<>();\n+                                    for (int t = 0; t < titles.length(); t++) {\n+                                        JSONObject title = titles.getJSONObject(t);\n+                                        if (title.has(\"title\")) {\n+                                            titleList.add(title.getString(\"title\").trim());\n+                                        }\n+                                    }\n+                                    sherpaJournal.setTitles(titleList);\n+                                    if (titleList.size() > 0) {\n+                                        // Faking this a bit based on what I'd seen - not in the API v2 data\n+                                        sherpaJournal.setRomeoPub(sherpaPublisher.getName() + \": \"\n+                                            + titleList.get(0));\n+                                        sherpaJournal.setZetoPub(sherpaPublisher.getName() + \": \"\n+                                            + titleList.get(0));\n+                                    }\n+                                }\n+                            }\n+\n+                            // Journal URL\n+                            if (item.has(\"url\")) {\n+                                sherpaJournal.setUrl(item.getString(\"url\"));\n+                            }\n+\n+                            // set ISSNs\n+                            if (item.has(\"issns\")) {\n+                                JSONArray issns = item.getJSONArray(\"issns\");\n+                                // just get first - DSpace data model only allows for one\n+                                List<String> issnList = new ArrayList<>();\n+                                for (int ii = 0; ii < issns.length(); ii++) {\n+                                    JSONObject issn = issns.getJSONObject(ii);\n+                                    issnList.add(issn.getString(\"issn\").trim());\n+                                }\n+                                sherpaJournal.setIssns(issnList);\n+                            }\n+                        }\n+\n+                        sherpaPublishers.add(sherpaPublisher);\n+                        sherpaJournal.setPublisher(sherpaPublisher);\n+                        sherpaJournal.setPublishers(sherpaPublishers);\n+                        sherpaJournal.setPolicies(policies);\n+                        this.journals.add(sherpaJournal);\n+                    }\n+\n+                    String licenceText = I18nUtil.getMessage(\"jsp.sherpa.license-default\");\n+                    String disclaimerText = I18nUtil.getMessage(\"jsp.sherpa.disclaimer\");\n+                    String licenceUrl = I18nUtil.getMessage(\"jsp.sherpa.license-url\");\n+                    this.license = licenceText;\n+                    this.licenseURL = licenceUrl;\n+                    this.disclaimer = disclaimerText;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4edbc2a1bc4966f832385ea80336e2eeb523115"}, "originalPosition": 411}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDU2NzUzMw==", "bodyText": "Removed", "url": "https://github.com/DSpace/DSpace/pull/2739#discussion_r410567533", "createdAt": "2020-04-18T02:36:15Z", "author": {"login": "kshepherd"}, "path": "dspace-api/src/main/java/org/dspace/app/sherpa/v2/SHERPAResponse.java", "diffHunk": "@@ -0,0 +1,471 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.sherpa.v2;\n+\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import org.apache.log4j.Logger;\n+import org.dspace.core.I18nUtil;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.json.JSONTokener;\n+\n+/**\n+ * Model class for the SHERPAv2 API (JSON) response\n+ * The structure and approached used is quite different to the simple v1 API used previously\n+ * \n+ * @author Kim Shepherd\n+ * \n+ */\n+public class SHERPAResponse\n+{\n+    private boolean error;\n+    private String message;\n+    private String license;\n+    private String licenseURL;\n+    private String disclaimer;\n+    private SHERPASystemMetadata metadata;\n+    private List<SHERPAJournal> journals;\n+\n+\n+    // Internal Sherpa ID\n+    private int id;\n+\n+    // SHERPA URI (the human page version of this API response)\n+\n+    private String uri;\n+\n+    // Journal / publisher URL\n+    private String journalUrl;\n+\n+    public enum SHERPAFormat {\n+        XML, JSON\n+    };\n+\n+    private static Logger log = Logger.getLogger(SHERPAResponse.class);\n+\n+    public SHERPAResponse(InputStream inputStream) {\n+        this(inputStream, SHERPAFormat.XML);\n+    }\n+\n+    public SHERPAResponse(InputStream input, SHERPAFormat format) {\n+        if (format == SHERPAFormat.JSON) {\n+            parseJSON(input);\n+        }\n+    }\n+\n+    /**\n+     * Parse the SHERPA v2 API JSON and construct Romeo policy data for display\n+     * @param jsonData\n+     */\n+    private void parseJSON(InputStream jsonData) {\n+        JSONTokener jsonTokener = new JSONTokener(new InputStreamReader(jsonData));\n+        JSONObject httpResponse;\n+        try {\n+            httpResponse = new JSONObject(jsonTokener);\n+            if (httpResponse.has(\"items\")) {\n+                JSONArray items = httpResponse.getJSONArray(\"items\");\n+                // items array is search results, *not* journals or publishers - they are listed for each item\n+                // - however, we only ever want one result since we're passing an \"equals ISSN\" query\n+                if (items.length() > 0) {\n+                    metadata = new SHERPASystemMetadata();\n+                    this.journals = new LinkedList<>();\n+\n+                    for (int itemIndex = 0; itemIndex < items.length(); itemIndex++) {\n+                        List<SHERPAPublisher> sherpaPublishers = new LinkedList<>();\n+                        List<SHERPAPublisherPolicy> policies = new ArrayList<>();\n+                        SHERPAPublisher sherpaPublisher = new SHERPAPublisher();\n+                        SHERPAJournal sherpaJournal = new SHERPAJournal();\n+\n+                        JSONObject item = items.getJSONObject(0);\n+\n+                        if (item.has(\"system_metadata\")) {\n+                            JSONObject systemMetadata = item.getJSONObject(\"system_metadata\");\n+                            if (systemMetadata.has(\"uri\")) {\n+                                this.uri = systemMetadata.getString(\"uri\");\n+                                metadata.setUri(this.uri);\n+                            } else {\n+                                log.error(\"SHERPA URI missing for API response item\");\n+                            }\n+                            if (systemMetadata.has(\"id\")) {\n+                                this.id = systemMetadata.getInt(\"id\");\n+                                metadata.setId(this.id);\n+                            } else {\n+                                log.error(\"SHERPA internal ID missing for API response item\");\n+                            }\n+                            // Get date created and added - DSpace expects this in the publisher object, though\n+                            if (systemMetadata.has(\"date_created\")) {\n+                                metadata.setDateCreated(systemMetadata.getString(\"date_created\"));\n+                            }\n+                            if (systemMetadata.has(\"date_modified\")) {\n+                                metadata.setDateModified(systemMetadata.getString(\"date_modified\"));\n+                            }\n+                            // Is this item publicly visible?\n+                            if (systemMetadata.has(\"publicly_visible\")) {\n+                                metadata.setPubliclyVisible (\"yes\".equals(systemMetadata\n+                                    .getString(\"publicly_visible\")));\n+                            }\n+                            // Is this item listed in the DOAJ?\n+                            if (systemMetadata.has(\"listed_in_doaj\")) {\n+                                metadata.setPubliclyVisible (\"yes\".equals(systemMetadata\n+                                    .getString(\"listed_in_doaj\")));\n+                            }\n+                        }\n+                        if (item.has(\"url\")) {\n+                            this.journalUrl = item.getString(\"url\");\n+                        }\n+\n+                        boolean inDOAJ = false;\n+                        if (item.has(\"listed_in_doaj\")) {\n+                            inDOAJ = (\"yes\".equals(item.getString(\"listed_in_doaj\")));\n+                        }\n+\n+                        // Parse \"publisher policy\"\n+                        // note - most of the information that was previously under 'publisher' is now under here\n+                        if (item.has(\"publisher_policy\")) {\n+\n+                            // Parse main publisher policies node\n+                            JSONArray publisherPolicies = item.getJSONArray(\"publisher_policy\");\n+                            for (int i = 0; i < publisherPolicies.length(); i++) {\n+\n+                                JSONObject policy = publisherPolicies.getJSONObject(i);\n+\n+                                // Make my new PublisherPolicy object\n+                                SHERPAPublisherPolicy sherpaPublisherPolicy = new SHERPAPublisherPolicy();\n+\n+                                String moniker = null;\n+                                if (policy.has(\"internal_moniker\")) {\n+                                    moniker = policy.getString(\"internal_moniker\");\n+                                    sherpaPublisherPolicy.setInternalMoniker(moniker);\n+                                }\n+                                log.debug(\"Parsing publisher_policy number \" + i + \" (\" + moniker + \")\");\n+\n+                                // This seems to be usually policy(ies) for the journal proper\n+                                // and then an \"Open access option\" which contains some of the info\n+                                // that the 'paidaccess' node in the old API used to contain\n+                                // Look for: internal_moniker = \"Open access option\"\n+                                // Check if this is OA options (Paid Access) or not\n+                                if (\"Open access option\".equalsIgnoreCase(moniker)) {\n+                                    log.debug(\"This is the Open access options policy - a special case\");\n+                                    if (policy.has(\"urls\")) {\n+                                        JSONArray urls = policy.getJSONArray(\"urls\");\n+                                        for (int u = 0; u < urls.length(); u++) {\n+                                            JSONObject url = urls.getJSONObject(u);\n+                                            if (url.has(\"description\") &&\n+                                                \"Open Access\".equalsIgnoreCase(url.getString(\"description\"))) {\n+                                                log.debug(\"Found OA paid access url: \" + url.getString(\"url\"));\n+                                                sherpaPublisher.setPaidAccessDescription(url.getString(\"description\"));\n+                                                sherpaPublisher.setPaidAccessUrl(url.getString(\"url\"));\n+                                                break;\n+                                            }\n+                                        }\n+                                    }\n+                                    // Continue the loop here - this \"policy\" is a bit different and we\n+                                    // don't want to overwrite the other conditions, etc.\n+                                    continue;\n+                                }\n+\n+                                // URLs (used to be Copyright Links)\n+                                if (policy.has(\"urls\")) {\n+                                    JSONArray urls = policy.getJSONArray(\"urls\");\n+                                    Map<String, String> copyrightLinks = new TreeMap<>();\n+                                    for (int u = 0; u < urls.length(); u++) {\n+                                        JSONObject url = urls.getJSONObject(u);\n+                                        if (url.has(\"description\") && url.has(\"url\")) {\n+                                            log.debug(\"Setting copyright URL: \" + url.getString(\"url\"));\n+                                            copyrightLinks.put(url.getString(\"url\"), url.getString(\"description\"));\n+                                        }\n+                                    }\n+                                    sherpaPublisherPolicy.setUrls(copyrightLinks);\n+                                }\n+\n+                                // Permitted OA options\n+                                int submittedOption = 0;\n+                                int acceptedOption = 0;\n+                                int publishedOption = 0;\n+                                int currentOption = 0;\n+                                if (policy.has(\"permitted_oa\")) {\n+                                    List<String> allowed = new ArrayList<>();\n+                                    JSONArray permittedOA = policy.getJSONArray(\"permitted_oa\");\n+                                    List<SHERPAPermittedVersion> permittedVersions = new ArrayList<>();\n+                                    for (int p = 0; p < permittedOA.length(); p++) {\n+                                        JSONObject permitted = permittedOA.getJSONObject(p);\n+                                        // New PermittedVersion object\n+                                        SHERPAPermittedVersion permittedVersion = new SHERPAPermittedVersion();\n+                                        // Get the article version, which is ultimately used for the ticks / crosses\n+                                        // in the UI display. My assumptions around translation:\n+                                        // submitted = preprint\n+                                        // accepted = postprint\n+                                        // published = pdfversion\n+                                        String articleVersion = \"unknown\";\n+                                        String versionLabel = \"Unknown\";\n+\n+                                        if (permitted.has(\"article_version\")) {\n+                                            JSONArray versions = permitted.getJSONArray(\"article_version\");\n+                                            articleVersion = versions.getString(0);\n+                                            allowed.add(articleVersion);\n+                                            permittedVersion.setArticleVersion(articleVersion);\n+                                            log.debug(\"Added allowed version: \" + articleVersion + \" to list\");\n+                                        }\n+\n+                                        if (\"submitted\".equals(articleVersion)) {\n+                                            versionLabel = I18nUtil.getMessage(\"jsp.sherpa.submitted-version-label\");\n+                                            submittedOption++;\n+                                            currentOption = submittedOption;\n+                                        } else if(\"accepted\".equals(articleVersion)) {\n+                                            versionLabel = I18nUtil.getMessage(\"jsp.sherpa.accepted-version-label\");\n+                                            acceptedOption++;\n+                                            currentOption = acceptedOption;\n+                                        } else if(\"published\".equals(articleVersion)) {\n+                                            versionLabel = I18nUtil.getMessage(\"jsp.sherpa.published-version-label\");\n+                                            publishedOption++;\n+                                            currentOption = publishedOption;\n+                                        }\n+\n+                                        // These are now child arrays, in old API they were explicit like\n+                                        // \"preprint restrictions\", etc., and just contained text rather than data\n+                                        if (permitted.has(\"conditions\")) {\n+                                            List<String> conditionList = new ArrayList<>();\n+                                            JSONArray conditions = permitted.getJSONArray(\"conditions\");\n+                                            for (int c = 0; c < conditions.length(); c++) {\n+                                                conditionList.add(conditions.getString(c).trim());\n+                                            }\n+                                            permittedVersion.setConditions(conditionList);\n+                                        }\n+\n+                                        permittedVersion.setArticleVersion(versionLabel);\n+                                        permittedVersion.setOption(currentOption);\n+\n+                                        // Any prerequisites for this option (eg required by funder)\n+                                        List<String> prerequisites = new ArrayList<>();\n+                                        if (permitted.has(\"prerequisites\")) {\n+                                            JSONObject prereqs = permitted.getJSONObject(\"prerequisites\");\n+                                            if (prereqs.has(\"prerequisites_phrases\")) {\n+                                                JSONArray phrases = prereqs.getJSONArray(\"prerequisites_phrases\");\n+                                                for (int pp = 0; pp < phrases.length(); pp++) {\n+                                                    JSONObject phrase = phrases.getJSONObject(pp);\n+                                                    if (phrase.has(\"phrase\")) {\n+                                                        prerequisites.add(phrase.getString(\"phrase\").trim());\n+                                                    }\n+                                                }\n+                                            }\n+                                        }\n+                                        permittedVersion.setPrerequisites(prerequisites);\n+\n+                                        // A rough attempt at guessing colour based on the doc in the DSpace page\n+                                        // SHERPA have confirmed we shouldn't really use this anymore\n+                                        if (allowed.contains(\"submitted\") &&\n+                                            (allowed.contains(\"accepted\") || allowed.contains(\"published\"))) {\n+                                            sherpaPublisher.setRomeoColour(\"green\");\n+                                        } else if (allowed.contains(\"accepted\") || allowed.contains(\"published\")) {\n+                                            sherpaPublisher.setRomeoColour(\"blue\");\n+                                        } else if (allowed.contains(\"submitted\")) {\n+                                            sherpaPublisher.setRomeoColour(\"yellow\");\n+                                        } else if (inDOAJ) {\n+                                            sherpaPublisher.setRomeoColour(\"gray\");\n+                                        } else {\n+                                            sherpaPublisher.setRomeoColour(\"white\");\n+                                        }\n+\n+                                        // Populate the old indicators\n+                                        if (allowed.contains(\"submitted\")) {\n+                                            sherpaPublisherPolicy.setPreArchiving(\"can\");\n+                                        }\n+                                        if (allowed.contains(\"accepted\")) {\n+                                            sherpaPublisherPolicy.setPostArchiving(\"can\");\n+                                        }\n+                                        if (allowed.contains(\"published\")) {\n+                                            sherpaPublisherPolicy.setPubArchiving(\"can\");\n+                                        }\n+\n+                                        // Locations where this version / option may be archived\n+                                        List<String> sherpaLocations = new ArrayList<>();\n+                                        if (permitted.has(\"location\")) {\n+                                            JSONObject locations = permitted.getJSONObject(\"location\");\n+                                            if (locations.has(\"location_phrases\")) {\n+                                                JSONArray locationPhrases = locations.getJSONArray(\"location_phrases\");\n+                                                if (locationPhrases.length() > 0) {\n+                                                    for (int l = 0; l < locationPhrases.length(); l++) {\n+                                                        JSONObject locationPhrase = locationPhrases.getJSONObject(l);\n+                                                        if (locationPhrase.has(\"phrase\")) {\n+                                                            sherpaLocations.add(locationPhrase.getString(\"phrase\").trim());\n+                                                        }\n+                                                    }\n+                                                }\n+                                            }\n+                                        }\n+                                        permittedVersion.setLocations(sherpaLocations);\n+\n+                                        List<String> sherpaLicenses = new ArrayList<>();\n+                                        // required licences\n+                                        if (permitted.has(\"license\")) {\n+                                            JSONArray licences = permitted.getJSONArray(\"license\");\n+                                            for (int l = 0; l < licences.length(); l++) {\n+                                                JSONObject licence = licences.getJSONObject(l);\n+                                                if (licence.has(\"license_phrases\")) {\n+                                                    JSONArray phrases = licence.getJSONArray(\"license_phrases\");\n+                                                    for (int ll = 0; ll < phrases.length(); ll++) {\n+                                                        JSONObject phrase = phrases.getJSONObject(ll);\n+                                                        if (phrase.has(\"phrase\")) {\n+                                                            sherpaLicenses.add(phrase.getString(\"phrase\").trim());\n+                                                        }\n+                                                    }\n+                                                }\n+                                            }\n+                                        }\n+                                        permittedVersion.setLicenses(sherpaLicenses);\n+                                        permittedVersions.add(permittedVersion);\n+                                    }\n+                                    sherpaPublisherPolicy.setPermittedVersions(permittedVersions);\n+                                }\n+                                policies.add(sherpaPublisherPolicy);\n+                            }\n+\n+                            // set publisher name - note we're still in the if (publisher policy) block\n+                            // since this info is sort of combined, now.\n+                            // So I'll also just look for first publisher here, it's only for the name anyway\n+                            // (I imagine multiple is just for older owners/ name variants?)\n+                            if (item.has(\"publishers\")) {\n+                                JSONArray publishers = item.getJSONArray(\"publishers\");\n+                                if (publishers.length() > 0) {\n+                                    JSONObject publisherElement = publishers.getJSONObject(0);\n+                                    if (publisherElement.has(\"publisher\")) {\n+                                        JSONObject publisher = publisherElement.getJSONObject(\"publisher\");\n+                                        if (publisher.has(\"name\")) {\n+                                            JSONArray publisherNames = publisher.getJSONArray(\"name\");\n+                                            if (publisherNames.length() > 0) {\n+                                                JSONObject publisherName = publisherNames.getJSONObject(0);\n+                                                if (publisherName.has(\"name\")) {\n+                                                    sherpaPublisher.setName(publisherName.getString(\"name\").trim());\n+                                                }\n+                                            }\n+                                        }\n+                                    }\n+                                }\n+                            }\n+\n+                            // set title\n+                            if (item.has(\"title\")) {\n+                                JSONArray titles = item.getJSONArray(\"title\");\n+                                if (titles.length() > 0) {\n+                                    List<String> titleList = new ArrayList<>();\n+                                    for (int t = 0; t < titles.length(); t++) {\n+                                        JSONObject title = titles.getJSONObject(t);\n+                                        if (title.has(\"title\")) {\n+                                            titleList.add(title.getString(\"title\").trim());\n+                                        }\n+                                    }\n+                                    sherpaJournal.setTitles(titleList);\n+                                    if (titleList.size() > 0) {\n+                                        // Faking this a bit based on what I'd seen - not in the API v2 data\n+                                        sherpaJournal.setRomeoPub(sherpaPublisher.getName() + \": \"\n+                                            + titleList.get(0));\n+                                        sherpaJournal.setZetoPub(sherpaPublisher.getName() + \": \"\n+                                            + titleList.get(0));\n+                                    }\n+                                }\n+                            }\n+\n+                            // Journal URL\n+                            if (item.has(\"url\")) {\n+                                sherpaJournal.setUrl(item.getString(\"url\"));\n+                            }\n+\n+                            // set ISSNs\n+                            if (item.has(\"issns\")) {\n+                                JSONArray issns = item.getJSONArray(\"issns\");\n+                                // just get first - DSpace data model only allows for one\n+                                List<String> issnList = new ArrayList<>();\n+                                for (int ii = 0; ii < issns.length(); ii++) {\n+                                    JSONObject issn = issns.getJSONObject(ii);\n+                                    issnList.add(issn.getString(\"issn\").trim());\n+                                }\n+                                sherpaJournal.setIssns(issnList);\n+                            }\n+                        }\n+\n+                        sherpaPublishers.add(sherpaPublisher);\n+                        sherpaJournal.setPublisher(sherpaPublisher);\n+                        sherpaJournal.setPublishers(sherpaPublishers);\n+                        sherpaJournal.setPolicies(policies);\n+                        this.journals.add(sherpaJournal);\n+                    }\n+\n+                    String licenceText = I18nUtil.getMessage(\"jsp.sherpa.license-default\");\n+                    String disclaimerText = I18nUtil.getMessage(\"jsp.sherpa.disclaimer\");\n+                    String licenceUrl = I18nUtil.getMessage(\"jsp.sherpa.license-url\");\n+                    this.license = licenceText;\n+                    this.licenseURL = licenceUrl;\n+                    this.disclaimer = disclaimerText;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA0ODExOA=="}, "originalCommit": {"oid": "b4edbc2a1bc4966f832385ea80336e2eeb523115"}, "originalPosition": 411}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTQ4Mzc5OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/app/sherpa/SHERPAService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODoyMjoyN1rOGN0iKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMjoyMjo0NlrOGOTLyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0NTM4NA==", "bodyText": "Can we place this content.close() in a finally ? If for whatever reason the parsing fails the inputStream won't be closed. After this change I approve of this PR !\nPs: We should also remember to port this PR to the latest DSpace 7 master.", "url": "https://github.com/DSpace/DSpace/pull/2739#discussion_r417145384", "createdAt": "2020-04-29T08:22:27Z", "author": {"login": "KevinVdV"}, "path": "dspace-api/src/main/java/org/dspace/app/sherpa/SHERPAService.java", "diffHunk": "@@ -103,10 +106,14 @@ public SHERPAResponse searchByJournalISSN(String query)\n \n                 HttpEntity responseBody = response.getEntity();\n \n-                if (null != responseBody)\n-                    sherpaResponse = new SHERPAResponse(responseBody.getContent(), SHERPAResponse.SHERPAFormat.JSON);\n-                else\n+                if (null != responseBody) {\n+                    InputStream content = responseBody.getContent();\n+                    sherpaResponse = new SHERPAResponse(content, SHERPAResponse.SHERPAFormat.JSON);\n+                    content.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23c26a44f34c42677c44b7a337ed5742e155f697"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY0NzU2Mw==", "bodyText": "Good point, I did that in my other implementation, I'm not sure why this one was different.\nI have rewritten this small section for a try/catch/finally block, and in the same commit I updated the class to conform to DSpace 7 code style for easier porting.", "url": "https://github.com/DSpace/DSpace/pull/2739#discussion_r417647563", "createdAt": "2020-04-29T22:22:46Z", "author": {"login": "kshepherd"}, "path": "dspace-api/src/main/java/org/dspace/app/sherpa/SHERPAService.java", "diffHunk": "@@ -103,10 +106,14 @@ public SHERPAResponse searchByJournalISSN(String query)\n \n                 HttpEntity responseBody = response.getEntity();\n \n-                if (null != responseBody)\n-                    sherpaResponse = new SHERPAResponse(responseBody.getContent(), SHERPAResponse.SHERPAFormat.JSON);\n-                else\n+                if (null != responseBody) {\n+                    InputStream content = responseBody.getContent();\n+                    sherpaResponse = new SHERPAResponse(content, SHERPAResponse.SHERPAFormat.JSON);\n+                    content.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0NTM4NA=="}, "originalCommit": {"oid": "23c26a44f34c42677c44b7a337ed5742e155f697"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1487, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}