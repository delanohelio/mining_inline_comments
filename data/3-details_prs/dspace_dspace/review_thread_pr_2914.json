{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyMTgyODc1", "number": 2914, "reviewThreads": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzowNTo1M1rOEWSiQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzoxNDozM1rOEbC1_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODA3ODExOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/importer/external/ris/service/RisImportMetadataSourceServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzowNTo1M1rOG9hXXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzowNTo1M1rOG9hXXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2Mjk3Mg==", "bodyText": "Minor spelling typo.  This should be named aggregateData.  As this is an important private method, I'd like to see some JavaDocs (or a basic comment) to describe what this method is doing to \"aggregate\" the data.", "url": "https://github.com/DSpace/DSpace/pull/2914#discussion_r467162972", "createdAt": "2020-08-07T17:05:53Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/importer/external/ris/service/RisImportMetadataSourceServiceImpl.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.importer.external.ris.service;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.annotation.Resource;\n+\n+import org.dspace.importer.external.exception.FileSourceException;\n+import org.dspace.importer.external.service.components.AbstractPlainMetadataSource;\n+import org.dspace.importer.external.service.components.dto.PlainMetadataKeyValueItem;\n+import org.dspace.importer.external.service.components.dto.PlainMetadataSourceDto;\n+\n+/**\n+ * Implements a metadata importer for RIS files\n+ * Implementations insprider by BTE DataLoader {@link https://github.com/EKT/Biblio-Transformation-Engine/blob/master/bte-io/src/main/java/gr/ekt/bteio/loaders/RISDataLoader.java}\n+ * \n+ * @author Pasquale Cavallo (pasquale.cavallo at 4science dot it)\n+ */\n+public class RisImportMetadataSourceServiceImpl extends AbstractPlainMetadataSource {\n+\n+    @Override\n+    public String getImportSource() {\n+        return \"RISMetadataSource\";\n+    }\n+\n+    protected List<PlainMetadataSourceDto> readData(InputStream inputStream) throws FileSourceException {\n+        return aggreageteData(inputStream);\n+    }\n+\n+    private List<PlainMetadataSourceDto> aggreageteData(InputStream inputStream) throws FileSourceException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "493ab0f496724c6000d17736a564f4be8824e9bb"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODA4MzkzOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/importer/external/ris/service/RisImportMetadataSourceServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzowNzo0OVrOG9ha6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzowNzo0OVrOG9ha6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2Mzg4Mw==", "bodyText": "Same here, this is an important method & I'd like to see JavaDocs to describe it (as it will make it easier to maintain or debug in the future)", "url": "https://github.com/DSpace/DSpace/pull/2914#discussion_r467163883", "createdAt": "2020-08-07T17:07:49Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/importer/external/ris/service/RisImportMetadataSourceServiceImpl.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.importer.external.ris.service;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.annotation.Resource;\n+\n+import org.dspace.importer.external.exception.FileSourceException;\n+import org.dspace.importer.external.service.components.AbstractPlainMetadataSource;\n+import org.dspace.importer.external.service.components.dto.PlainMetadataKeyValueItem;\n+import org.dspace.importer.external.service.components.dto.PlainMetadataSourceDto;\n+\n+/**\n+ * Implements a metadata importer for RIS files\n+ * Implementations insprider by BTE DataLoader {@link https://github.com/EKT/Biblio-Transformation-Engine/blob/master/bte-io/src/main/java/gr/ekt/bteio/loaders/RISDataLoader.java}\n+ * \n+ * @author Pasquale Cavallo (pasquale.cavallo at 4science dot it)\n+ */\n+public class RisImportMetadataSourceServiceImpl extends AbstractPlainMetadataSource {\n+\n+    @Override\n+    public String getImportSource() {\n+        return \"RISMetadataSource\";\n+    }\n+\n+    protected List<PlainMetadataSourceDto> readData(InputStream inputStream) throws FileSourceException {\n+        return aggreageteData(inputStream);\n+    }\n+\n+    private List<PlainMetadataSourceDto> aggreageteData(InputStream inputStream) throws FileSourceException {\n+        List<PlainMetadataSourceDto> metadata = new ArrayList<>();\n+        List<PlainMetadataKeyValueItem> notAggregatedItems = notAggregatedData(inputStream);\n+        List<PlainMetadataKeyValueItem> aggregatedTmpList = null;\n+        Iterator<PlainMetadataKeyValueItem> itr = notAggregatedItems.iterator();\n+        while (itr.hasNext()) {\n+            PlainMetadataKeyValueItem item = itr.next();\n+            if (\"TY\".equals(item.getKey())) {\n+                if (aggregatedTmpList != null) {\n+                    PlainMetadataSourceDto dto = new PlainMetadataSourceDto();\n+                    dto.setMetadata(new ArrayList<>(aggregatedTmpList));\n+                    metadata.add(dto);\n+                }\n+                aggregatedTmpList = new ArrayList<>();\n+                aggregatedTmpList.add(item);\n+            } else {\n+                if (aggregatedTmpList != null) {\n+                    aggregatedTmpList.add(item);\n+                    // save last iteration metadata\n+                    if (!itr.hasNext()) {\n+                        PlainMetadataSourceDto dto = new PlainMetadataSourceDto();\n+                        dto.setMetadata(new ArrayList<>(aggregatedTmpList));\n+                        metadata.add(dto);\n+                    }\n+                }\n+            }\n+        }\n+        return metadata;\n+    }\n+\n+    private List<PlainMetadataKeyValueItem> notAggregatedData(InputStream inputStream) throws FileSourceException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "493ab0f496724c6000d17736a564f4be8824e9bb"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODA4NjQwOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/importer/external/endnote/service/EndnoteImportMetadataSourceServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzowODozN1rOG9hcZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzowODozN1rOG9hcZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2NDI2MA==", "bodyText": "Can we describe this method in JavaDocs.  I know it's a private method, but it's very important to this class so it'd be good to document it.", "url": "https://github.com/DSpace/DSpace/pull/2914#discussion_r467164260", "createdAt": "2020-08-07T17:08:37Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/importer/external/endnote/service/EndnoteImportMetadataSourceServiceImpl.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.importer.external.endnote.service;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.dspace.importer.external.exception.FileSourceException;\n+import org.dspace.importer.external.metadatamapping.MetadataFieldConfig;\n+import org.dspace.importer.external.metadatamapping.contributor.MetadataContributor;\n+import org.dspace.importer.external.service.components.AbstractPlainMetadataSource;\n+import org.dspace.importer.external.service.components.dto.PlainMetadataKeyValueItem;\n+import org.dspace.importer.external.service.components.dto.PlainMetadataSourceDto;\n+\n+/**\n+ * Implements a metadata importer for Endnote files\n+ *\n+ * @author Pasquale Cavallo (pasquale.cavallo at 4science dot it)\n+ */\n+public class EndnoteImportMetadataSourceServiceImpl extends AbstractPlainMetadataSource {\n+\n+    @Override\n+    public String getImportSource() {\n+        return \"EndnoteMetadataSource\";\n+    }\n+\n+    @Override\n+    protected List<PlainMetadataSourceDto> readData(InputStream fileInpuStream) throws FileSourceException {\n+        List<PlainMetadataSourceDto> list = new ArrayList<>();\n+        try {\n+            int lineForDebug = 3;\n+            List<PlainMetadataKeyValueItem> tokenized = tokenize(fileInpuStream);\n+            List<PlainMetadataKeyValueItem> tmpList = new ArrayList<>();\n+            for (PlainMetadataKeyValueItem item : tokenized) {\n+                if (item.getKey() == null || item.getKey().isEmpty()) {\n+                    throw new FileSourceException(\"Null or empty key expected on line \"\n+                    + lineForDebug + \". Keys cannot be null nor empty\");\n+                }\n+                if (\"EF\".equals(item.getKey())) {\n+                    break;\n+                }\n+                if (\"ER\".equals(item.getKey())) {\n+                    PlainMetadataSourceDto dto = new PlainMetadataSourceDto();\n+                    dto.setMetadata(new ArrayList<>(tmpList));\n+                    list.add(dto);\n+                    tmpList = new ArrayList<>();\n+                } else {\n+                    if (item.getValue() == null || item.getValue().isEmpty()) {\n+                        throw new FileSourceException(\"Null or empty value expected on line \"\n+                        + lineForDebug + \". Value expected\");\n+                    }\n+                    tmpList.add(item);\n+                }\n+                lineForDebug++;\n+            }\n+        } catch (Exception e) {\n+            throw new FileSourceException(\"Error reading file\");\n+        }\n+        return list;\n+    }\n+\n+\n+    private List<PlainMetadataKeyValueItem> tokenize(InputStream fileInpuStream)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "493ab0f496724c6000d17736a564f4be8824e9bb"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODA4ODk5OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/importer/external/csv/service/CharacterSeparatedImportMetadataSourceServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzowOToyNlrOG9hd8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzowOToyNlrOG9hd8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2NDY1OA==", "bodyText": "Please describe this method with JavaDocs, as it's overriding readData to do specific processes for character separated files.  Therefore, we should document what it's doing here.", "url": "https://github.com/DSpace/DSpace/pull/2914#discussion_r467164658", "createdAt": "2020-08-07T17:09:26Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/importer/external/csv/service/CharacterSeparatedImportMetadataSourceServiceImpl.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.importer.external.csv.service;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import au.com.bytecode.opencsv.CSVReader;\n+import org.dspace.importer.external.exception.FileSourceException;\n+import org.dspace.importer.external.metadatamapping.MetadataFieldConfig;\n+import org.dspace.importer.external.metadatamapping.contributor.MetadataContributor;\n+import org.dspace.importer.external.service.components.AbstractPlainMetadataSource;\n+import org.dspace.importer.external.service.components.MetadataSource;\n+import org.dspace.importer.external.service.components.dto.PlainMetadataKeyValueItem;\n+import org.dspace.importer.external.service.components.dto.PlainMetadataSourceDto;\n+\n+\n+/**\n+ * This class is an implementation of {@link MetadataSource} which extends {@link AbstractPlainMetadataSource}\n+ * in order to parse \"character separated\" files like csv, tsv, etc using the Live Import framework.\n+ * \n+ * @author Pasquale Cavallo\n+ *\n+ */\n+public class CharacterSeparatedImportMetadataSourceServiceImpl extends AbstractPlainMetadataSource {\n+\n+    private char separator = ',';\n+\n+    private char escapeCharacter = '\"';\n+\n+    private Integer skipLines = 1;\n+\n+    private String importSource = \"CsvMetadataSource\";\n+\n+    /**\n+     * Set the number of lines to skip at the start of the file. This method is suitable,\n+     * for example, to skip file headers.\n+     * \n+     * @param skipLines number of the line at the start of the file to skip.\n+     */\n+    public void setSkipLines(Integer skipLines) {\n+        this.skipLines = skipLines;\n+    }\n+\n+    /**\n+     * \n+     * @return the number of the lines to skip\n+     */\n+    public Integer getSkipLines() {\n+        return skipLines;\n+    }\n+\n+    /**\n+     * Method to inject the separator\n+     * This must be the ASCII integer\n+     * related to the char.\n+     * In example, 9 for tab, 44 for comma\n+     */\n+    public void setSeparator(int separator) {\n+        this.separator = (char)separator;\n+    }\n+\n+    @Override\n+    public String getImportSource() {\n+        return importSource;\n+    }\n+\n+    /**\n+     * Method to set the name of the source\n+     */\n+    public void setImportSource(String importSource) {\n+        this.importSource = importSource;\n+    }\n+\n+    /**\n+     * Method to inject the escape character. This must be the ASCII integer\n+     * related to the char.\n+     * In example, 9 for tab, 44 for comma\n+     * \n+     */\n+    public void setEscapeCharacter(int escapeCharacter) {\n+        this.escapeCharacter = (char)escapeCharacter;\n+    }\n+\n+    @Override\n+    protected List<PlainMetadataSourceDto> readData(InputStream inputStream) throws FileSourceException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "493ab0f496724c6000d17736a564f4be8824e9bb"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODEwNzA1OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzoxNDo1M1rOG9hokw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjo1NToxMFrOHE0cAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2NzM3OQ==", "bodyText": "Comment is incorrect here. This isn't a \"bulk create\". There's another incorrect comment on line 977 and 1005 just below this as well.  Please make sure your comments in tests are accurate, otherwise it can be confusing to debug later on.\nThere's a number of these same incorrect comments throughout this entire IT file.  So, you may want to search for \"bulk create\" and replace all those comments that are inaccurate.", "url": "https://github.com/DSpace/DSpace/pull/2914#discussion_r467167379", "createdAt": "2020-08-07T17:14:53Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java", "diffHunk": "@@ -907,42 +907,660 @@ public void createMultipleWorkspaceItemFromFileTest() throws Exception {\n                         is(\"My Article\")))\n                 .andExpect(\n                         jsonPath(\"$._embedded.workspaceitems[0]._embedded.collection.id\", is(col1.getID().toString())))\n-                .andExpect(jsonPath(\"$._embedded.workspaceitems[1].sections.traditionalpageone['dc.title'][0].value\",\n-                        is(\"My Article 2\")))\n-                .andExpect(\n-                        jsonPath(\"$._embedded.workspaceitems[1]._embedded.collection.id\", is(col1.getID().toString())))\n-                .andExpect(jsonPath(\"$._embedded.workspaceitems[2].sections.traditionalpageone['dc.title'][0].value\",\n-                        is(\"My Article 3\")))\n-                .andExpect(\n-                        jsonPath(\"$._embedded.workspaceitems[2]._embedded.collection.id\", is(col1.getID().toString())))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[0]\"\n+                     + \".metadata['dc.source'][0].value\",\n+                        is(\"/local/path/bibtex-test.bib\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[0]\"\n+                     + \".metadata['dc.title'][0].value\",\n+                        is(\"bibtex-test.bib\")))\n                 .andExpect(\n-                        jsonPath(\"$._embedded.workspaceitems[*]._embedded.upload\").doesNotExist())\n+                        jsonPath(\"$._embedded.workspaceitems[*]._embedded.upload\").doesNotExist());\n         ;\n \n         // bulk create workspaceitems explicitly in the col2\n         getClient(authToken).perform(fileUpload(\"/api/submission/workspaceitems\")\n                     .file(bibtexFile)\n-                    .param(\"collection\", col2.getID().toString()))\n+                    .param(\"owningCollection\", col2.getID().toString()))\n                 .andExpect(status().isOk())\n                 .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.traditionalpageone['dc.title'][0].value\",\n                         is(\"My Article\")))\n                 .andExpect(\n                         jsonPath(\"$._embedded.workspaceitems[0]._embedded.collection.id\", is(col2.getID().toString())))\n-                .andExpect(jsonPath(\"$._embedded.workspaceitems[1].sections.traditionalpageone['dc.title'][0].value\",\n-                        is(\"My Article 2\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[0]\"\n+                     + \".metadata['dc.source'][0].value\",\n+                        is(\"/local/path/bibtex-test.bib\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload\"\n+                     + \".files[0].metadata['dc.title'][0].value\",\n+                        is(\"bibtex-test.bib\")))\n                 .andExpect(\n-                        jsonPath(\"$._embedded.workspaceitems[1]._embedded.collection.id\", is(col2.getID().toString())))\n-                .andExpect(jsonPath(\"$._embedded.workspaceitems[2].sections.traditionalpageone['dc.title'][0].value\",\n-                        is(\"My Article 3\")))\n+                        jsonPath(\"$._embedded.workspaceitems[*]._embedded.upload\").doesNotExist());\n+\n+        bibtex.close();\n+    }\n+\n+    @Test\n+    /**\n+     * Test the creation of workspaceitems POSTing to the resource collection endpoint a csv file\n+     *\n+     * @throws Exception\n+     */\n+    public void createSingleWorkspaceItemFromCSVWithOneEntryTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        //** GIVEN **\n+        //1. A community-collection structure with one parent community with sub-community and two collections.\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+        Collection col2 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 2\")\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+\n+        InputStream csv = getClass().getResourceAsStream(\"csv-test.csv\");\n+        final MockMultipartFile csvFile = new MockMultipartFile(\"file\", \"/local/path/csv-test.csv\",\n+            \"text/csv\", csv);\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+        // bulk create workspaceitems in the default collection (col1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "493ab0f496724c6000d17736a564f4be8824e9bb"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxNTQ5MQ==", "bodyText": "This feedback is not addressed (though it is minor).  Essentially, this entire IT file has a large number of comments that all start with // bulk create   From what I can tell, all of those comments are inaccurate/incorrect, as we are never bulk creating content via live import...we are only creating one WorkspaceItem at a time.   So, it'd be good to either correct all these comments in this IT (there's at least 10 of them) or remove them all.", "url": "https://github.com/DSpace/DSpace/pull/2914#discussion_r474815491", "createdAt": "2020-08-21T16:55:10Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java", "diffHunk": "@@ -907,42 +907,660 @@ public void createMultipleWorkspaceItemFromFileTest() throws Exception {\n                         is(\"My Article\")))\n                 .andExpect(\n                         jsonPath(\"$._embedded.workspaceitems[0]._embedded.collection.id\", is(col1.getID().toString())))\n-                .andExpect(jsonPath(\"$._embedded.workspaceitems[1].sections.traditionalpageone['dc.title'][0].value\",\n-                        is(\"My Article 2\")))\n-                .andExpect(\n-                        jsonPath(\"$._embedded.workspaceitems[1]._embedded.collection.id\", is(col1.getID().toString())))\n-                .andExpect(jsonPath(\"$._embedded.workspaceitems[2].sections.traditionalpageone['dc.title'][0].value\",\n-                        is(\"My Article 3\")))\n-                .andExpect(\n-                        jsonPath(\"$._embedded.workspaceitems[2]._embedded.collection.id\", is(col1.getID().toString())))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[0]\"\n+                     + \".metadata['dc.source'][0].value\",\n+                        is(\"/local/path/bibtex-test.bib\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[0]\"\n+                     + \".metadata['dc.title'][0].value\",\n+                        is(\"bibtex-test.bib\")))\n                 .andExpect(\n-                        jsonPath(\"$._embedded.workspaceitems[*]._embedded.upload\").doesNotExist())\n+                        jsonPath(\"$._embedded.workspaceitems[*]._embedded.upload\").doesNotExist());\n         ;\n \n         // bulk create workspaceitems explicitly in the col2\n         getClient(authToken).perform(fileUpload(\"/api/submission/workspaceitems\")\n                     .file(bibtexFile)\n-                    .param(\"collection\", col2.getID().toString()))\n+                    .param(\"owningCollection\", col2.getID().toString()))\n                 .andExpect(status().isOk())\n                 .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.traditionalpageone['dc.title'][0].value\",\n                         is(\"My Article\")))\n                 .andExpect(\n                         jsonPath(\"$._embedded.workspaceitems[0]._embedded.collection.id\", is(col2.getID().toString())))\n-                .andExpect(jsonPath(\"$._embedded.workspaceitems[1].sections.traditionalpageone['dc.title'][0].value\",\n-                        is(\"My Article 2\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[0]\"\n+                     + \".metadata['dc.source'][0].value\",\n+                        is(\"/local/path/bibtex-test.bib\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload\"\n+                     + \".files[0].metadata['dc.title'][0].value\",\n+                        is(\"bibtex-test.bib\")))\n                 .andExpect(\n-                        jsonPath(\"$._embedded.workspaceitems[1]._embedded.collection.id\", is(col2.getID().toString())))\n-                .andExpect(jsonPath(\"$._embedded.workspaceitems[2].sections.traditionalpageone['dc.title'][0].value\",\n-                        is(\"My Article 3\")))\n+                        jsonPath(\"$._embedded.workspaceitems[*]._embedded.upload\").doesNotExist());\n+\n+        bibtex.close();\n+    }\n+\n+    @Test\n+    /**\n+     * Test the creation of workspaceitems POSTing to the resource collection endpoint a csv file\n+     *\n+     * @throws Exception\n+     */\n+    public void createSingleWorkspaceItemFromCSVWithOneEntryTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        //** GIVEN **\n+        //1. A community-collection structure with one parent community with sub-community and two collections.\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+        Collection col2 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 2\")\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+\n+        InputStream csv = getClass().getResourceAsStream(\"csv-test.csv\");\n+        final MockMultipartFile csvFile = new MockMultipartFile(\"file\", \"/local/path/csv-test.csv\",\n+            \"text/csv\", csv);\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+        // bulk create workspaceitems in the default collection (col1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2NzM3OQ=="}, "originalCommit": {"oid": "493ab0f496724c6000d17736a564f4be8824e9bb"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODEyMDc4OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzoxOTozN1rOG9hxSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNzoxOTozN1rOG9hxSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE2OTYxMA==", "bodyText": "For all of these fileUpload tests (in this entire IT class), is there a way to cleanup (i.e. delete) the WorkspaceItems you are creating?  It seems like we might be accidentally creating a lot of content here that should be cleaned up after creation.  Maybe we can capture the newly created ID of the WorkspaceItem and use the WorkspaceItemBuilder to delete it?", "url": "https://github.com/DSpace/DSpace/pull/2914#discussion_r467169610", "createdAt": "2020-08-07T17:19:37Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java", "diffHunk": "@@ -907,42 +907,660 @@ public void createMultipleWorkspaceItemFromFileTest() throws Exception {\n                         is(\"My Article\")))\n                 .andExpect(\n                         jsonPath(\"$._embedded.workspaceitems[0]._embedded.collection.id\", is(col1.getID().toString())))\n-                .andExpect(jsonPath(\"$._embedded.workspaceitems[1].sections.traditionalpageone['dc.title'][0].value\",\n-                        is(\"My Article 2\")))\n-                .andExpect(\n-                        jsonPath(\"$._embedded.workspaceitems[1]._embedded.collection.id\", is(col1.getID().toString())))\n-                .andExpect(jsonPath(\"$._embedded.workspaceitems[2].sections.traditionalpageone['dc.title'][0].value\",\n-                        is(\"My Article 3\")))\n-                .andExpect(\n-                        jsonPath(\"$._embedded.workspaceitems[2]._embedded.collection.id\", is(col1.getID().toString())))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[0]\"\n+                     + \".metadata['dc.source'][0].value\",\n+                        is(\"/local/path/bibtex-test.bib\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[0]\"\n+                     + \".metadata['dc.title'][0].value\",\n+                        is(\"bibtex-test.bib\")))\n                 .andExpect(\n-                        jsonPath(\"$._embedded.workspaceitems[*]._embedded.upload\").doesNotExist())\n+                        jsonPath(\"$._embedded.workspaceitems[*]._embedded.upload\").doesNotExist());\n         ;\n \n         // bulk create workspaceitems explicitly in the col2\n         getClient(authToken).perform(fileUpload(\"/api/submission/workspaceitems\")\n                     .file(bibtexFile)\n-                    .param(\"collection\", col2.getID().toString()))\n+                    .param(\"owningCollection\", col2.getID().toString()))\n                 .andExpect(status().isOk())\n                 .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.traditionalpageone['dc.title'][0].value\",\n                         is(\"My Article\")))\n                 .andExpect(\n                         jsonPath(\"$._embedded.workspaceitems[0]._embedded.collection.id\", is(col2.getID().toString())))\n-                .andExpect(jsonPath(\"$._embedded.workspaceitems[1].sections.traditionalpageone['dc.title'][0].value\",\n-                        is(\"My Article 2\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload.files[0]\"\n+                     + \".metadata['dc.source'][0].value\",\n+                        is(\"/local/path/bibtex-test.bib\")))\n+                .andExpect(jsonPath(\"$._embedded.workspaceitems[0].sections.upload\"\n+                     + \".files[0].metadata['dc.title'][0].value\",\n+                        is(\"bibtex-test.bib\")))\n                 .andExpect(\n-                        jsonPath(\"$._embedded.workspaceitems[1]._embedded.collection.id\", is(col2.getID().toString())))\n-                .andExpect(jsonPath(\"$._embedded.workspaceitems[2].sections.traditionalpageone['dc.title'][0].value\",\n-                        is(\"My Article 3\")))\n+                        jsonPath(\"$._embedded.workspaceitems[*]._embedded.upload\").doesNotExist());\n+\n+        bibtex.close();\n+    }\n+\n+    @Test\n+    /**\n+     * Test the creation of workspaceitems POSTing to the resource collection endpoint a csv file\n+     *\n+     * @throws Exception\n+     */\n+    public void createSingleWorkspaceItemFromCSVWithOneEntryTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        //** GIVEN **\n+        //1. A community-collection structure with one parent community with sub-community and two collections.\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+        Collection col2 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 2\")\n+                                           .withSubmitterGroup(eperson)\n+                                           .build();\n+\n+        InputStream csv = getClass().getResourceAsStream(\"csv-test.csv\");\n+        final MockMultipartFile csvFile = new MockMultipartFile(\"file\", \"/local/path/csv-test.csv\",\n+            \"text/csv\", csv);\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+        // bulk create workspaceitems in the default collection (col1)\n+        getClient(authToken).perform(fileUpload(\"/api/submission/workspaceitems\")\n+                    .file(csvFile))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "493ab0f496724c6000d17736a564f4be8824e9bb"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjA1MTcwOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/importer/external/endnote/service/EndnoteImportMetadataSourceServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoxNjoyMFrOG_gy0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwOTozODoxM1rOHAD8Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1MDc2OA==", "bodyText": "Could this variable be a leftover from bugfixing, doesn't seem to do anything.", "url": "https://github.com/DSpace/DSpace/pull/2914#discussion_r469250768", "createdAt": "2020-08-12T13:16:20Z", "author": {"login": "KevinVdV"}, "path": "dspace-api/src/main/java/org/dspace/importer/external/endnote/service/EndnoteImportMetadataSourceServiceImpl.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.importer.external.endnote.service;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.dspace.importer.external.exception.FileSourceException;\n+import org.dspace.importer.external.metadatamapping.MetadataFieldConfig;\n+import org.dspace.importer.external.metadatamapping.contributor.MetadataContributor;\n+import org.dspace.importer.external.service.components.AbstractPlainMetadataSource;\n+import org.dspace.importer.external.service.components.dto.PlainMetadataKeyValueItem;\n+import org.dspace.importer.external.service.components.dto.PlainMetadataSourceDto;\n+\n+/**\n+ * Implements a metadata importer for Endnote files\n+ *\n+ * @author Pasquale Cavallo (pasquale.cavallo at 4science dot it)\n+ */\n+public class EndnoteImportMetadataSourceServiceImpl extends AbstractPlainMetadataSource {\n+\n+    @Override\n+    public String getImportSource() {\n+        return \"EndnoteMetadataSource\";\n+    }\n+\n+    @Override\n+    protected List<PlainMetadataSourceDto> readData(InputStream fileInpuStream) throws FileSourceException {\n+        List<PlainMetadataSourceDto> list = new ArrayList<>();\n+        try {\n+            int lineForDebug = 3;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57ae7ee7f0a47ced61b63125814ef7d266f2a707"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgyNjYyNw==", "bodyText": "It is used by logger on rows 48 and 61, tracks the row number where the error occurs", "url": "https://github.com/DSpace/DSpace/pull/2914#discussion_r469826627", "createdAt": "2020-08-13T09:38:13Z", "author": {"login": "pasqualecvl"}, "path": "dspace-api/src/main/java/org/dspace/importer/external/endnote/service/EndnoteImportMetadataSourceServiceImpl.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.importer.external.endnote.service;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.dspace.importer.external.exception.FileSourceException;\n+import org.dspace.importer.external.metadatamapping.MetadataFieldConfig;\n+import org.dspace.importer.external.metadatamapping.contributor.MetadataContributor;\n+import org.dspace.importer.external.service.components.AbstractPlainMetadataSource;\n+import org.dspace.importer.external.service.components.dto.PlainMetadataKeyValueItem;\n+import org.dspace.importer.external.service.components.dto.PlainMetadataSourceDto;\n+\n+/**\n+ * Implements a metadata importer for Endnote files\n+ *\n+ * @author Pasquale Cavallo (pasquale.cavallo at 4science dot it)\n+ */\n+public class EndnoteImportMetadataSourceServiceImpl extends AbstractPlainMetadataSource {\n+\n+    @Override\n+    public String getImportSource() {\n+        return \"EndnoteMetadataSource\";\n+    }\n+\n+    @Override\n+    protected List<PlainMetadataSourceDto> readData(InputStream fileInpuStream) throws FileSourceException {\n+        List<PlainMetadataSourceDto> list = new ArrayList<>();\n+        try {\n+            int lineForDebug = 3;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1MDc2OA=="}, "originalCommit": {"oid": "57ae7ee7f0a47ced61b63125814ef7d266f2a707"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjA1NTQzOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/importer/external/endnote/service/EndnoteImportMetadataSourceServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoxNzoyM1rOG_g1TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoxNzoyM1rOG_g1TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1MTQwNA==", "bodyText": "Can this exception include the exception as well, same as for: CharacterSeparatedImportMetadataSourceServiceImpl", "url": "https://github.com/DSpace/DSpace/pull/2914#discussion_r469251404", "createdAt": "2020-08-12T13:17:23Z", "author": {"login": "KevinVdV"}, "path": "dspace-api/src/main/java/org/dspace/importer/external/endnote/service/EndnoteImportMetadataSourceServiceImpl.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.importer.external.endnote.service;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.dspace.importer.external.exception.FileSourceException;\n+import org.dspace.importer.external.metadatamapping.MetadataFieldConfig;\n+import org.dspace.importer.external.metadatamapping.contributor.MetadataContributor;\n+import org.dspace.importer.external.service.components.AbstractPlainMetadataSource;\n+import org.dspace.importer.external.service.components.dto.PlainMetadataKeyValueItem;\n+import org.dspace.importer.external.service.components.dto.PlainMetadataSourceDto;\n+\n+/**\n+ * Implements a metadata importer for Endnote files\n+ *\n+ * @author Pasquale Cavallo (pasquale.cavallo at 4science dot it)\n+ */\n+public class EndnoteImportMetadataSourceServiceImpl extends AbstractPlainMetadataSource {\n+\n+    @Override\n+    public String getImportSource() {\n+        return \"EndnoteMetadataSource\";\n+    }\n+\n+    @Override\n+    protected List<PlainMetadataSourceDto> readData(InputStream fileInpuStream) throws FileSourceException {\n+        List<PlainMetadataSourceDto> list = new ArrayList<>();\n+        try {\n+            int lineForDebug = 3;\n+            List<PlainMetadataKeyValueItem> tokenized = tokenize(fileInpuStream);\n+            List<PlainMetadataKeyValueItem> tmpList = new ArrayList<>();\n+            for (PlainMetadataKeyValueItem item : tokenized) {\n+                if (item.getKey() == null || item.getKey().isEmpty()) {\n+                    throw new FileSourceException(\"Null or empty key expected on line \"\n+                    + lineForDebug + \". Keys cannot be null nor empty\");\n+                }\n+                if (\"EF\".equals(item.getKey())) {\n+                    break;\n+                }\n+                if (\"ER\".equals(item.getKey())) {\n+                    PlainMetadataSourceDto dto = new PlainMetadataSourceDto();\n+                    dto.setMetadata(new ArrayList<>(tmpList));\n+                    list.add(dto);\n+                    tmpList = new ArrayList<>();\n+                } else {\n+                    if (item.getValue() == null || item.getValue().isEmpty()) {\n+                        throw new FileSourceException(\"Null or empty value expected on line \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57ae7ee7f0a47ced61b63125814ef7d266f2a707"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjA2MDEyOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/importer/external/endnote/service/EndnoteImportMetadataSourceServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoxODoyOVrOG_g4IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMDoyNToxN1rOHAFinw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1MjEyOA==", "bodyText": "InputStreamReader & BufferedReader aren't closed.", "url": "https://github.com/DSpace/DSpace/pull/2914#discussion_r469252128", "createdAt": "2020-08-12T13:18:29Z", "author": {"login": "KevinVdV"}, "path": "dspace-api/src/main/java/org/dspace/importer/external/endnote/service/EndnoteImportMetadataSourceServiceImpl.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.importer.external.endnote.service;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.dspace.importer.external.exception.FileSourceException;\n+import org.dspace.importer.external.metadatamapping.MetadataFieldConfig;\n+import org.dspace.importer.external.metadatamapping.contributor.MetadataContributor;\n+import org.dspace.importer.external.service.components.AbstractPlainMetadataSource;\n+import org.dspace.importer.external.service.components.dto.PlainMetadataKeyValueItem;\n+import org.dspace.importer.external.service.components.dto.PlainMetadataSourceDto;\n+\n+/**\n+ * Implements a metadata importer for Endnote files\n+ *\n+ * @author Pasquale Cavallo (pasquale.cavallo at 4science dot it)\n+ */\n+public class EndnoteImportMetadataSourceServiceImpl extends AbstractPlainMetadataSource {\n+\n+    @Override\n+    public String getImportSource() {\n+        return \"EndnoteMetadataSource\";\n+    }\n+\n+    @Override\n+    protected List<PlainMetadataSourceDto> readData(InputStream fileInpuStream) throws FileSourceException {\n+        List<PlainMetadataSourceDto> list = new ArrayList<>();\n+        try {\n+            int lineForDebug = 3;\n+            List<PlainMetadataKeyValueItem> tokenized = tokenize(fileInpuStream);\n+            List<PlainMetadataKeyValueItem> tmpList = new ArrayList<>();\n+            for (PlainMetadataKeyValueItem item : tokenized) {\n+                if (item.getKey() == null || item.getKey().isEmpty()) {\n+                    throw new FileSourceException(\"Null or empty key expected on line \"\n+                    + lineForDebug + \". Keys cannot be null nor empty\");\n+                }\n+                if (\"EF\".equals(item.getKey())) {\n+                    break;\n+                }\n+                if (\"ER\".equals(item.getKey())) {\n+                    PlainMetadataSourceDto dto = new PlainMetadataSourceDto();\n+                    dto.setMetadata(new ArrayList<>(tmpList));\n+                    list.add(dto);\n+                    tmpList = new ArrayList<>();\n+                } else {\n+                    if (item.getValue() == null || item.getValue().isEmpty()) {\n+                        throw new FileSourceException(\"Null or empty value expected on line \"\n+                        + lineForDebug + \". Value expected\");\n+                    }\n+                    tmpList.add(item);\n+                }\n+                lineForDebug++;\n+            }\n+        } catch (Exception e) {\n+            throw new FileSourceException(\"Error reading file\");\n+        }\n+        return list;\n+    }\n+\n+\n+    private List<PlainMetadataKeyValueItem> tokenize(InputStream fileInpuStream)\n+        throws IOException, FileSourceException {\n+        BufferedReader reader = new BufferedReader(new InputStreamReader(fileInpuStream));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57ae7ee7f0a47ced61b63125814ef7d266f2a707"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg1MjgzMQ==", "bodyText": "Those resources will be closed by closing the InputStream in the try-with-resources at ImportService:312", "url": "https://github.com/DSpace/DSpace/pull/2914#discussion_r469852831", "createdAt": "2020-08-13T10:25:17Z", "author": {"login": "pasqualecvl"}, "path": "dspace-api/src/main/java/org/dspace/importer/external/endnote/service/EndnoteImportMetadataSourceServiceImpl.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.importer.external.endnote.service;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.dspace.importer.external.exception.FileSourceException;\n+import org.dspace.importer.external.metadatamapping.MetadataFieldConfig;\n+import org.dspace.importer.external.metadatamapping.contributor.MetadataContributor;\n+import org.dspace.importer.external.service.components.AbstractPlainMetadataSource;\n+import org.dspace.importer.external.service.components.dto.PlainMetadataKeyValueItem;\n+import org.dspace.importer.external.service.components.dto.PlainMetadataSourceDto;\n+\n+/**\n+ * Implements a metadata importer for Endnote files\n+ *\n+ * @author Pasquale Cavallo (pasquale.cavallo at 4science dot it)\n+ */\n+public class EndnoteImportMetadataSourceServiceImpl extends AbstractPlainMetadataSource {\n+\n+    @Override\n+    public String getImportSource() {\n+        return \"EndnoteMetadataSource\";\n+    }\n+\n+    @Override\n+    protected List<PlainMetadataSourceDto> readData(InputStream fileInpuStream) throws FileSourceException {\n+        List<PlainMetadataSourceDto> list = new ArrayList<>();\n+        try {\n+            int lineForDebug = 3;\n+            List<PlainMetadataKeyValueItem> tokenized = tokenize(fileInpuStream);\n+            List<PlainMetadataKeyValueItem> tmpList = new ArrayList<>();\n+            for (PlainMetadataKeyValueItem item : tokenized) {\n+                if (item.getKey() == null || item.getKey().isEmpty()) {\n+                    throw new FileSourceException(\"Null or empty key expected on line \"\n+                    + lineForDebug + \". Keys cannot be null nor empty\");\n+                }\n+                if (\"EF\".equals(item.getKey())) {\n+                    break;\n+                }\n+                if (\"ER\".equals(item.getKey())) {\n+                    PlainMetadataSourceDto dto = new PlainMetadataSourceDto();\n+                    dto.setMetadata(new ArrayList<>(tmpList));\n+                    list.add(dto);\n+                    tmpList = new ArrayList<>();\n+                } else {\n+                    if (item.getValue() == null || item.getValue().isEmpty()) {\n+                        throw new FileSourceException(\"Null or empty value expected on line \"\n+                        + lineForDebug + \". Value expected\");\n+                    }\n+                    tmpList.add(item);\n+                }\n+                lineForDebug++;\n+            }\n+        } catch (Exception e) {\n+            throw new FileSourceException(\"Error reading file\");\n+        }\n+        return list;\n+    }\n+\n+\n+    private List<PlainMetadataKeyValueItem> tokenize(InputStream fileInpuStream)\n+        throws IOException, FileSourceException {\n+        BufferedReader reader = new BufferedReader(new InputStreamReader(fileInpuStream));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1MjEyOA=="}, "originalCommit": {"oid": "57ae7ee7f0a47ced61b63125814ef7d266f2a707"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjA4NDIzOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/importer/external/ris/service/RisImportMetadataSourceServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoyMzo0MFrOG_hGTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoyMzo0MFrOG_hGTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1NTc1Nw==", "bodyText": "Missing @OverRide annotation.", "url": "https://github.com/DSpace/DSpace/pull/2914#discussion_r469255757", "createdAt": "2020-08-12T13:23:40Z", "author": {"login": "KevinVdV"}, "path": "dspace-api/src/main/java/org/dspace/importer/external/ris/service/RisImportMetadataSourceServiceImpl.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.importer.external.ris.service;\n+\n+import java.io.BufferedReader;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.annotation.Resource;\n+\n+import org.dspace.importer.external.exception.FileSourceException;\n+import org.dspace.importer.external.service.components.AbstractPlainMetadataSource;\n+import org.dspace.importer.external.service.components.dto.PlainMetadataKeyValueItem;\n+import org.dspace.importer.external.service.components.dto.PlainMetadataSourceDto;\n+\n+/**\n+ * Implements a metadata importer for RIS files\n+ * Implementations insprider by BTE DataLoader {@link https://github.com/EKT/Biblio-Transformation-Engine/blob/master/bte-io/src/main/java/gr/ekt/bteio/loaders/RISDataLoader.java}\n+ * \n+ * @author Pasquale Cavallo (pasquale.cavallo at 4science dot it)\n+ */\n+public class RisImportMetadataSourceServiceImpl extends AbstractPlainMetadataSource {\n+\n+    @Override\n+    public String getImportSource() {\n+        return \"RISMetadataSource\";\n+    }\n+\n+    protected List<PlainMetadataSourceDto> readData(InputStream inputStream) throws FileSourceException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57ae7ee7f0a47ced61b63125814ef7d266f2a707"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjE5NDUzOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/importer/external/csv/service/CharacterSeparatedImportMetadataSourceServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzo0ODo1NlrOG_iJzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzo0ODo1NlrOG_iJzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI3MzAzOQ==", "bodyText": "Could you add some javadocs AND/OR split this up the code below into smaller methods with readable names. I find it hard to understand what the code is doing here in order to process the file.", "url": "https://github.com/DSpace/DSpace/pull/2914#discussion_r469273039", "createdAt": "2020-08-12T13:48:56Z", "author": {"login": "KevinVdV"}, "path": "dspace-api/src/main/java/org/dspace/importer/external/csv/service/CharacterSeparatedImportMetadataSourceServiceImpl.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.importer.external.csv.service;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import au.com.bytecode.opencsv.CSVReader;\n+import org.dspace.importer.external.exception.FileSourceException;\n+import org.dspace.importer.external.metadatamapping.MetadataFieldConfig;\n+import org.dspace.importer.external.metadatamapping.contributor.MetadataContributor;\n+import org.dspace.importer.external.service.components.AbstractPlainMetadataSource;\n+import org.dspace.importer.external.service.components.MetadataSource;\n+import org.dspace.importer.external.service.components.dto.PlainMetadataKeyValueItem;\n+import org.dspace.importer.external.service.components.dto.PlainMetadataSourceDto;\n+\n+\n+/**\n+ * This class is an implementation of {@link MetadataSource} which extends {@link AbstractPlainMetadataSource}\n+ * in order to parse \"character separated\" files like csv, tsv, etc using the Live Import framework.\n+ * \n+ * @author Pasquale Cavallo\n+ *\n+ */\n+public class CharacterSeparatedImportMetadataSourceServiceImpl extends AbstractPlainMetadataSource {\n+\n+    private char separator = ',';\n+\n+    private char escapeCharacter = '\"';\n+\n+    private Integer skipLines = 1;\n+\n+    private String importSource = \"CsvMetadataSource\";\n+\n+    /**\n+     * Set the number of lines to skip at the start of the file. This method is suitable,\n+     * for example, to skip file headers.\n+     * \n+     * @param skipLines number of the line at the start of the file to skip.\n+     */\n+    public void setSkipLines(Integer skipLines) {\n+        this.skipLines = skipLines;\n+    }\n+\n+    /**\n+     * \n+     * @return the number of the lines to skip\n+     */\n+    public Integer getSkipLines() {\n+        return skipLines;\n+    }\n+\n+    /**\n+     * Method to inject the separator\n+     * This must be the ASCII integer\n+     * related to the char.\n+     * In example, 9 for tab, 44 for comma\n+     */\n+    public void setSeparator(int separator) {\n+        this.separator = (char)separator;\n+    }\n+\n+    @Override\n+    public String getImportSource() {\n+        return importSource;\n+    }\n+\n+    /**\n+     * Method to set the name of the source\n+     */\n+    public void setImportSource(String importSource) {\n+        this.importSource = importSource;\n+    }\n+\n+    /**\n+     * Method to inject the escape character. This must be the ASCII integer\n+     * related to the char.\n+     * In example, 9 for tab, 44 for comma\n+     * \n+     */\n+    public void setEscapeCharacter(int escapeCharacter) {\n+        this.escapeCharacter = (char)escapeCharacter;\n+    }\n+\n+    @Override\n+    protected List<PlainMetadataSourceDto> readData(InputStream inputStream) throws FileSourceException {\n+        List<PlainMetadataSourceDto> plainMetadataList = new ArrayList<>();\n+        try (CSVReader csvReader = new CSVReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57ae7ee7f0a47ced61b63125814ef7d266f2a707"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjE5NjExOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/importer/external/endnote/service/EndnoteImportMetadataSourceServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzo0OToxOFrOG_iKuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzo0OToxOFrOG_iKuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI3MzI3Mg==", "bodyText": "Could you add some javadocs AND/OR split this up the code below into smaller methods with readable names. I find it hard to understand what the code is doing here in order to process the file.", "url": "https://github.com/DSpace/DSpace/pull/2914#discussion_r469273272", "createdAt": "2020-08-12T13:49:18Z", "author": {"login": "KevinVdV"}, "path": "dspace-api/src/main/java/org/dspace/importer/external/endnote/service/EndnoteImportMetadataSourceServiceImpl.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.importer.external.endnote.service;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.dspace.importer.external.exception.FileSourceException;\n+import org.dspace.importer.external.metadatamapping.MetadataFieldConfig;\n+import org.dspace.importer.external.metadatamapping.contributor.MetadataContributor;\n+import org.dspace.importer.external.service.components.AbstractPlainMetadataSource;\n+import org.dspace.importer.external.service.components.dto.PlainMetadataKeyValueItem;\n+import org.dspace.importer.external.service.components.dto.PlainMetadataSourceDto;\n+\n+/**\n+ * Implements a metadata importer for Endnote files\n+ *\n+ * @author Pasquale Cavallo (pasquale.cavallo at 4science dot it)\n+ */\n+public class EndnoteImportMetadataSourceServiceImpl extends AbstractPlainMetadataSource {\n+\n+    @Override\n+    public String getImportSource() {\n+        return \"EndnoteMetadataSource\";\n+    }\n+\n+    @Override\n+    protected List<PlainMetadataSourceDto> readData(InputStream fileInpuStream) throws FileSourceException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57ae7ee7f0a47ced61b63125814ef7d266f2a707"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjE5ODAzOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/importer/external/endnote/service/EndnoteImportMetadataSourceServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzo0OTozOFrOG_iL2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzo0OTozOFrOG_iL2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI3MzU2Mw==", "bodyText": "Could you add some javadocs AND/OR split this up the code below into smaller methods with readable names. I find it hard to understand what the code is doing here in order to process the file.", "url": "https://github.com/DSpace/DSpace/pull/2914#discussion_r469273563", "createdAt": "2020-08-12T13:49:38Z", "author": {"login": "KevinVdV"}, "path": "dspace-api/src/main/java/org/dspace/importer/external/endnote/service/EndnoteImportMetadataSourceServiceImpl.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.importer.external.endnote.service;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.dspace.importer.external.exception.FileSourceException;\n+import org.dspace.importer.external.metadatamapping.MetadataFieldConfig;\n+import org.dspace.importer.external.metadatamapping.contributor.MetadataContributor;\n+import org.dspace.importer.external.service.components.AbstractPlainMetadataSource;\n+import org.dspace.importer.external.service.components.dto.PlainMetadataKeyValueItem;\n+import org.dspace.importer.external.service.components.dto.PlainMetadataSourceDto;\n+\n+/**\n+ * Implements a metadata importer for Endnote files\n+ *\n+ * @author Pasquale Cavallo (pasquale.cavallo at 4science dot it)\n+ */\n+public class EndnoteImportMetadataSourceServiceImpl extends AbstractPlainMetadataSource {\n+\n+    @Override\n+    public String getImportSource() {\n+        return \"EndnoteMetadataSource\";\n+    }\n+\n+    @Override\n+    protected List<PlainMetadataSourceDto> readData(InputStream fileInpuStream) throws FileSourceException {\n+        List<PlainMetadataSourceDto> list = new ArrayList<>();\n+        try {\n+            int lineForDebug = 3;\n+            List<PlainMetadataKeyValueItem> tokenized = tokenize(fileInpuStream);\n+            List<PlainMetadataKeyValueItem> tmpList = new ArrayList<>();\n+            for (PlainMetadataKeyValueItem item : tokenized) {\n+                if (item.getKey() == null || item.getKey().isEmpty()) {\n+                    throw new FileSourceException(\"Null or empty key expected on line \"\n+                    + lineForDebug + \". Keys cannot be null nor empty\");\n+                }\n+                if (\"EF\".equals(item.getKey())) {\n+                    break;\n+                }\n+                if (\"ER\".equals(item.getKey())) {\n+                    PlainMetadataSourceDto dto = new PlainMetadataSourceDto();\n+                    dto.setMetadata(new ArrayList<>(tmpList));\n+                    list.add(dto);\n+                    tmpList = new ArrayList<>();\n+                } else {\n+                    if (item.getValue() == null || item.getValue().isEmpty()) {\n+                        throw new FileSourceException(\"Null or empty value expected on line \"\n+                        + lineForDebug + \". Value expected\");\n+                    }\n+                    tmpList.add(item);\n+                }\n+                lineForDebug++;\n+            }\n+        } catch (Exception e) {\n+            throw new FileSourceException(\"Error reading file\");\n+        }\n+        return list;\n+    }\n+\n+\n+    private List<PlainMetadataKeyValueItem> tokenize(InputStream fileInpuStream)\n+        throws IOException, FileSourceException {\n+        BufferedReader reader = new BufferedReader(new InputStreamReader(fileInpuStream));\n+        String line;\n+        line = reader.readLine();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57ae7ee7f0a47ced61b63125814ef7d266f2a707"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjIyNzc5OnYy", "diffSide": "RIGHT", "path": "dspace/config/spring/api/characterseparated-integration.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzo1NjowN1rOG_iemA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzo1NjowN1rOG_iemA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI3ODM2MA==", "bodyText": "Why use 44, can't we use , ?", "url": "https://github.com/DSpace/DSpace/pull/2914#discussion_r469278360", "createdAt": "2020-08-12T13:56:07Z", "author": {"login": "KevinVdV"}, "path": "dspace/config/spring/api/characterseparated-integration.xml", "diffHunk": "@@ -0,0 +1,84 @@\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xmlns:context=\"http://www.springframework.org/schema/context\"\n+       xmlns:util=\"http://www.springframework.org/schema/util\"\n+       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\n+           http://www.springframework.org/schema/context\n+           http://www.springframework.org/schema/context/spring-context-2.5.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd\"\n+       default-autowire-candidates=\"*Service,*DAO,javax.sql.DataSource\">\n+\n+    <context:annotation-config/>\n+    <!-- allows us to use spring annotations in beans -->\n+\n+    <util:map id=\"csvMetadataFieldMap\" key-type=\"org.dspace.importer.external.metadatamapping.MetadataFieldConfig\"\n+              value-type=\"org.dspace.importer.external.metadatamapping.contributor.MetadataContributor\">\n+        <description>Defines which metadatum is mapped on which metadatum. Note that while the key must be unique it\n+            only matters here for postprocessing of the value. The mapped MetadatumContributor has full control over\n+            what metadatafield is generated.\n+        </description>\n+        <entry key-ref=\"dcTitle\" value-ref=\"charSepTitleContrib\" />\n+        <entry key-ref=\"dcAuthors\" value-ref=\"charSepAuthorsContrib\" />\n+        <entry key-ref=\"dcIssued\" value-ref=\"charSepDateContrib\" />\n+\t\t<entry key-ref=\"dcJournal\" value-ref=\"charSepJournalContrib\" />\n+\t\t<entry key-ref=\"dcAbstract\" value-ref=\"charSepAbstractContrib\" />    \n+\t\t<entry key-ref=\"dcJissn\" value-ref=\"charSepJissnContrib\" />    \n+\t\t<entry key-ref=\"dcSubtype\" value-ref=\"charSepTypeContrib\" />    \n+    </util:map>\n+\n+    <util:map id=\"tsvMetadataFieldMap\" key-type=\"org.dspace.importer.external.metadatamapping.MetadataFieldConfig\"\n+              value-type=\"org.dspace.importer.external.metadatamapping.contributor.MetadataContributor\">\n+        <description>Defines which metadatum is mapped on which metadatum. Note that while the key must be unique it\n+            only matters here for postprocessing of the value. The mapped MetadatumContributor has full control over\n+            what metadatafield is generated.\n+        </description>\n+        <entry key-ref=\"dcTitle\" value-ref=\"charSepTitleContrib\" />\n+        <entry key-ref=\"dcAuthors\" value-ref=\"charSepAuthorsContrib\" />\n+        <entry key-ref=\"dcIssued\" value-ref=\"charSepDateContrib\" />\n+\t\t<entry key-ref=\"dcJournal\" value-ref=\"charSepJournalContrib\" />\n+\t\t<entry key-ref=\"dcAbstract\" value-ref=\"charSepAbstractContrib\" />    \n+\t\t<entry key-ref=\"dcJissn\" value-ref=\"charSepJissnContrib\" />    \n+\t\t<entry key-ref=\"dcSubtype\" value-ref=\"charSepTypeContrib\" />    \n+    </util:map>\n+\n+\n+    <bean id=\"charSepTitleContrib\" class=\"org.dspace.importer.external.metadatamapping.contributor.SimpleMetadataContributor\">\n+        <property name=\"field\" ref=\"dcTitle\"/>\n+        <property name=\"key\" value=\"0\" />\n+    </bean>\n+\n+    <bean id=\"charSepAuthorsContrib\" class=\"org.dspace.importer.external.metadatamapping.contributor.EnhancedSimpleMetadataContributor\">\n+        <property name=\"field\" ref=\"dcAuthors\"/>\n+        <property name=\"key\" value=\"1\" />\n+        <!-- List of author must be: Author 1, author 2, author 3\n+        if author name contains comma, is important to escape its in this way: Author 1, \\\"Author 2, something\\\", Author 3  -->\n+        <property name=\"delimiter\" value=\"44\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57ae7ee7f0a47ced61b63125814ef7d266f2a707"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjIzNDMzOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/importer/external/metadatamapping/contributor/EnhancedSimpleMetadataContributor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzo1NzozMlrOG_iisQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMDoyNDo1NFrOHAFh4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI3OTQwOQ==", "bodyText": "What is the purpose of this variable ? I assume that when this bean is configured to be used that you want to use the enhance logic, if you don't want to use it one can configure the \"SimpleMetadataContributor\" class in the xml bean setup.", "url": "https://github.com/DSpace/DSpace/pull/2914#discussion_r469279409", "createdAt": "2020-08-12T13:57:32Z", "author": {"login": "KevinVdV"}, "path": "dspace-api/src/main/java/org/dspace/importer/external/metadatamapping/contributor/EnhancedSimpleMetadataContributor.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.importer.external.metadatamapping.contributor;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.util.Collection;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import au.com.bytecode.opencsv.CSVReader;\n+import org.dspace.importer.external.metadatamapping.MetadatumDTO;\n+import org.dspace.importer.external.service.components.dto.PlainMetadataKeyValueItem;\n+import org.dspace.importer.external.service.components.dto.PlainMetadataSourceDto;\n+\n+\n+/**\n+ * This class implements functionalities to handle common situation regarding plain metadata.\n+ * In some scenario, like csv or tsv, the format don't allow lists.\n+ * We can use this MetadataContribut to parse a given plain metadata and split it into\n+ * related list, based on the delimiter. No escape character is present.\n+ * Default values are comma (,) for delimiter, and double quote (\") for escape character\n+ * \n+ * @author Pasquale Cavallo (pasquale.cavallo at 4science dot it)\n+ *\n+ */\n+public class EnhancedSimpleMetadataContributor extends SimpleMetadataContributor {\n+\n+    private char delimiter = ',';\n+\n+    private char escape = '\"';\n+\n+    private boolean useEnhancer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57ae7ee7f0a47ced61b63125814ef7d266f2a707"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg1MjY0MQ==", "bodyText": "I introduced this variable to have a quick way to disable the enhancer. But you're right, doesn't make so much sense. I'll remove this.", "url": "https://github.com/DSpace/DSpace/pull/2914#discussion_r469852641", "createdAt": "2020-08-13T10:24:54Z", "author": {"login": "pasqualecvl"}, "path": "dspace-api/src/main/java/org/dspace/importer/external/metadatamapping/contributor/EnhancedSimpleMetadataContributor.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.importer.external.metadatamapping.contributor;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.util.Collection;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import au.com.bytecode.opencsv.CSVReader;\n+import org.dspace.importer.external.metadatamapping.MetadatumDTO;\n+import org.dspace.importer.external.service.components.dto.PlainMetadataKeyValueItem;\n+import org.dspace.importer.external.service.components.dto.PlainMetadataSourceDto;\n+\n+\n+/**\n+ * This class implements functionalities to handle common situation regarding plain metadata.\n+ * In some scenario, like csv or tsv, the format don't allow lists.\n+ * We can use this MetadataContribut to parse a given plain metadata and split it into\n+ * related list, based on the delimiter. No escape character is present.\n+ * Default values are comma (,) for delimiter, and double quote (\") for escape character\n+ * \n+ * @author Pasquale Cavallo (pasquale.cavallo at 4science dot it)\n+ *\n+ */\n+public class EnhancedSimpleMetadataContributor extends SimpleMetadataContributor {\n+\n+    private char delimiter = ',';\n+\n+    private char escape = '\"';\n+\n+    private boolean useEnhancer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI3OTQwOQ=="}, "originalCommit": {"oid": "57ae7ee7f0a47ced61b63125814ef7d266f2a707"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjI0NTA5OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/importer/external/metadatamapping/contributor/EnhancedSimpleMetadataContributor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDowMDowMVrOG_ipyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMDozMzo0MlrOHAFzAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI4MTIyNQ==", "bodyText": "Am I correct in understanding that the \"value\" variable here represent a single column in a csv and that we just want to split this column into multiple values based on a splitter. If so why use a CSVReader, StringReader ? Can't we just use StringUtils.split() ? (Less object creation & overhead)", "url": "https://github.com/DSpace/DSpace/pull/2914#discussion_r469281225", "createdAt": "2020-08-12T14:00:01Z", "author": {"login": "KevinVdV"}, "path": "dspace-api/src/main/java/org/dspace/importer/external/metadatamapping/contributor/EnhancedSimpleMetadataContributor.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.importer.external.metadatamapping.contributor;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.util.Collection;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import au.com.bytecode.opencsv.CSVReader;\n+import org.dspace.importer.external.metadatamapping.MetadatumDTO;\n+import org.dspace.importer.external.service.components.dto.PlainMetadataKeyValueItem;\n+import org.dspace.importer.external.service.components.dto.PlainMetadataSourceDto;\n+\n+\n+/**\n+ * This class implements functionalities to handle common situation regarding plain metadata.\n+ * In some scenario, like csv or tsv, the format don't allow lists.\n+ * We can use this MetadataContribut to parse a given plain metadata and split it into\n+ * related list, based on the delimiter. No escape character is present.\n+ * Default values are comma (,) for delimiter, and double quote (\") for escape character\n+ * \n+ * @author Pasquale Cavallo (pasquale.cavallo at 4science dot it)\n+ *\n+ */\n+public class EnhancedSimpleMetadataContributor extends SimpleMetadataContributor {\n+\n+    private char delimiter = ',';\n+\n+    private char escape = '\"';\n+\n+    private boolean useEnhancer;\n+\n+    /**\n+     * This method could be used to set the delimiter used during parse\n+     * If no delimiter is set, comma will be used\n+     */\n+    public void setDelimiter(int delimiter) {\n+        this.delimiter = (char)delimiter;\n+    }\n+\n+    /**\n+     * This method could be used to get the delimiter used in this class\n+     */\n+    public char getDelimiter() {\n+        return delimiter;\n+    }\n+\n+    /**\n+     * Method to inject the escape character.\n+     * This must be the ASCII integer\n+     * related to the char.\n+     * In example, 9 for tab, 44 for comma\n+     * If no escape is set, double quote will be used\n+     */\n+    public void setEscape(int escape) {\n+        this.escape = (char)escape;\n+    }\n+\n+    /**\n+     * Method to get the escape character.\n+     * \n+     */\n+    public char getEscape() {\n+        return escape;\n+    }\n+\n+    /**\n+     * Method to set up the enhancer. If set to false, enhancing will be not used\n+     * In this case, the metadata value will\n+     * As default, it is valued as false\n+     * \n+     */\n+    public void setUseEnhancer(boolean useEnhancer) {\n+        this.useEnhancer = useEnhancer;\n+    }\n+\n+    /**\n+     * \n+     * @return true if the enhancer is set up, false otherwise.\n+     */\n+    public boolean isUseEnhancer() {\n+        return useEnhancer;\n+    }\n+\n+    @Override\n+    public Collection<MetadatumDTO> contributeMetadata(PlainMetadataSourceDto t) {\n+        Collection<MetadatumDTO> values = null;\n+        if (!useEnhancer) {\n+            values = super.contributeMetadata(t);\n+        } else {\n+            values = new LinkedList<>();\n+            for (PlainMetadataKeyValueItem metadatum : t.getMetadata()) {\n+                if (getKey().equals(metadatum.getKey())) {\n+                    String[] splitted = splitToRecord(metadatum.getValue());\n+                    for (String value : splitted) {\n+                        MetadatumDTO dcValue = new MetadatumDTO();\n+                        dcValue.setValue(value);\n+                        dcValue.setElement(getField().getElement());\n+                        dcValue.setQualifier(getField().getQualifier());\n+                        dcValue.setSchema(getField().getSchema());\n+                        values.add(dcValue);\n+                    }\n+                }\n+            }\n+        }\n+        return values;\n+    }\n+\n+    private String[] splitToRecord(String value) {\n+        List<String[]> rows;\n+        try (CSVReader csvReader = new CSVReader(new StringReader(value),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57ae7ee7f0a47ced61b63125814ef7d266f2a707"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg1NzAyNw==", "bodyText": "Yes you're right. The problem with split() method  is that it doesn't have escape. For example, using CSVReader, we could support a list of authors with a record in CSV looks like \"\\\"Surname, Name\\\",\\\"Surname2, Name2\\\"\". (in this case, escape value is double quote, and the value for this reader is \"Surname, Name\", \"Surname2, Name2\".", "url": "https://github.com/DSpace/DSpace/pull/2914#discussion_r469857027", "createdAt": "2020-08-13T10:33:42Z", "author": {"login": "pasqualecvl"}, "path": "dspace-api/src/main/java/org/dspace/importer/external/metadatamapping/contributor/EnhancedSimpleMetadataContributor.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.importer.external.metadatamapping.contributor;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.util.Collection;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import au.com.bytecode.opencsv.CSVReader;\n+import org.dspace.importer.external.metadatamapping.MetadatumDTO;\n+import org.dspace.importer.external.service.components.dto.PlainMetadataKeyValueItem;\n+import org.dspace.importer.external.service.components.dto.PlainMetadataSourceDto;\n+\n+\n+/**\n+ * This class implements functionalities to handle common situation regarding plain metadata.\n+ * In some scenario, like csv or tsv, the format don't allow lists.\n+ * We can use this MetadataContribut to parse a given plain metadata and split it into\n+ * related list, based on the delimiter. No escape character is present.\n+ * Default values are comma (,) for delimiter, and double quote (\") for escape character\n+ * \n+ * @author Pasquale Cavallo (pasquale.cavallo at 4science dot it)\n+ *\n+ */\n+public class EnhancedSimpleMetadataContributor extends SimpleMetadataContributor {\n+\n+    private char delimiter = ',';\n+\n+    private char escape = '\"';\n+\n+    private boolean useEnhancer;\n+\n+    /**\n+     * This method could be used to set the delimiter used during parse\n+     * If no delimiter is set, comma will be used\n+     */\n+    public void setDelimiter(int delimiter) {\n+        this.delimiter = (char)delimiter;\n+    }\n+\n+    /**\n+     * This method could be used to get the delimiter used in this class\n+     */\n+    public char getDelimiter() {\n+        return delimiter;\n+    }\n+\n+    /**\n+     * Method to inject the escape character.\n+     * This must be the ASCII integer\n+     * related to the char.\n+     * In example, 9 for tab, 44 for comma\n+     * If no escape is set, double quote will be used\n+     */\n+    public void setEscape(int escape) {\n+        this.escape = (char)escape;\n+    }\n+\n+    /**\n+     * Method to get the escape character.\n+     * \n+     */\n+    public char getEscape() {\n+        return escape;\n+    }\n+\n+    /**\n+     * Method to set up the enhancer. If set to false, enhancing will be not used\n+     * In this case, the metadata value will\n+     * As default, it is valued as false\n+     * \n+     */\n+    public void setUseEnhancer(boolean useEnhancer) {\n+        this.useEnhancer = useEnhancer;\n+    }\n+\n+    /**\n+     * \n+     * @return true if the enhancer is set up, false otherwise.\n+     */\n+    public boolean isUseEnhancer() {\n+        return useEnhancer;\n+    }\n+\n+    @Override\n+    public Collection<MetadatumDTO> contributeMetadata(PlainMetadataSourceDto t) {\n+        Collection<MetadatumDTO> values = null;\n+        if (!useEnhancer) {\n+            values = super.contributeMetadata(t);\n+        } else {\n+            values = new LinkedList<>();\n+            for (PlainMetadataKeyValueItem metadatum : t.getMetadata()) {\n+                if (getKey().equals(metadatum.getKey())) {\n+                    String[] splitted = splitToRecord(metadatum.getValue());\n+                    for (String value : splitted) {\n+                        MetadatumDTO dcValue = new MetadatumDTO();\n+                        dcValue.setValue(value);\n+                        dcValue.setElement(getField().getElement());\n+                        dcValue.setQualifier(getField().getQualifier());\n+                        dcValue.setSchema(getField().getSchema());\n+                        values.add(dcValue);\n+                    }\n+                }\n+            }\n+        }\n+        return values;\n+    }\n+\n+    private String[] splitToRecord(String value) {\n+        List<String[]> rows;\n+        try (CSVReader csvReader = new CSVReader(new StringReader(value),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI4MTIyNQ=="}, "originalCommit": {"oid": "57ae7ee7f0a47ced61b63125814ef7d266f2a707"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjU4NzA2OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/resources/spring/spring-dspace-addon-import-services.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNToxNToxM1rOG_mAKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNToxNToxM1rOG_mAKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMzNjEwNA==", "bodyText": "Scope singleton is the default, you can leave out the initial scope declaration.", "url": "https://github.com/DSpace/DSpace/pull/2914#discussion_r469336104", "createdAt": "2020-08-12T15:15:13Z", "author": {"login": "KevinVdV"}, "path": "dspace-api/src/main/resources/spring/spring-dspace-addon-import-services.xml", "diffHunk": "@@ -53,6 +56,15 @@\n           class=\"org.dspace.importer.external.pubmed.metadatamapping.PubmedFieldMapping\">\n     </bean>\n \n+    <bean id=\"RisImportService\"\n+          class=\"org.dspace.importer.external.ris.service.RisImportMetadataSourceServiceImpl\" scope=\"singleton\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57ae7ee7f0a47ced61b63125814ef7d266f2a707"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjU4OTgyOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/resources/spring/spring-dspace-addon-import-services.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNToxNTo1MVrOG_mB9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNToxNTo1MVrOG_mB9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMzNjU2NA==", "bodyText": "On this bean & all of the below, spring has guidelines where the bean identifiers should start with a lower case letter.", "url": "https://github.com/DSpace/DSpace/pull/2914#discussion_r469336564", "createdAt": "2020-08-12T15:15:51Z", "author": {"login": "KevinVdV"}, "path": "dspace-api/src/main/resources/spring/spring-dspace-addon-import-services.xml", "diffHunk": "@@ -23,8 +23,11 @@\n           lazy-init=\"false\" autowire=\"byType\" destroy-method=\"destroy\">\n         <property name=\"importSources\">\n             <list>\n-                <ref bean=\"PubmedImportService\"></ref>\n-                <ref bean=\"BibtexImportService\"></ref>\n+                <ref bean=\"PubmedImportService\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57ae7ee7f0a47ced61b63125814ef7d266f2a707"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjU5MDQwOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/resources/spring/spring-dspace-addon-import-services.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNToxNTo1OVrOG_mCUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNToxNTo1OVrOG_mCUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMzNjY1OQ==", "bodyText": "Scope singleton is the default, you can leave out the initial scope declaration.", "url": "https://github.com/DSpace/DSpace/pull/2914#discussion_r469336659", "createdAt": "2020-08-12T15:15:59Z", "author": {"login": "KevinVdV"}, "path": "dspace-api/src/main/resources/spring/spring-dspace-addon-import-services.xml", "diffHunk": "@@ -63,6 +75,42 @@\n           </property>\n     </bean>\n \n+    <bean id=\"CsvImportService\"\n+          class=\"org.dspace.importer.external.csv.service.CharacterSeparatedImportMetadataSourceServiceImpl\" scope=\"singleton\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57ae7ee7f0a47ced61b63125814ef7d266f2a707"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjU5MTEzOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/resources/spring/spring-dspace-addon-import-services.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNToxNjowN1rOG_mCxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNToxNjowN1rOG_mCxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMzNjc3Mg==", "bodyText": "Scope singleton is the default, you can leave out the initial scope declaration.", "url": "https://github.com/DSpace/DSpace/pull/2914#discussion_r469336772", "createdAt": "2020-08-12T15:16:07Z", "author": {"login": "KevinVdV"}, "path": "dspace-api/src/main/resources/spring/spring-dspace-addon-import-services.xml", "diffHunk": "@@ -63,6 +75,42 @@\n           </property>\n     </bean>\n \n+    <bean id=\"CsvImportService\"\n+          class=\"org.dspace.importer.external.csv.service.CharacterSeparatedImportMetadataSourceServiceImpl\" scope=\"singleton\">\n+          <property name=\"metadataFieldMap\" ref=\"csvMetadataFieldMap\"></property>\n+          <property name=\"skipLines\" value=\"1\" />\n+          <property name=\"supportedExtensions\">\n+               <list>\n+                     <value>csv</value>\n+               </list>\n+          </property>\n+    </bean>\n+\n+    <bean id=\"TsvImportService\"\n+          class=\"org.dspace.importer.external.csv.service.CharacterSeparatedImportMetadataSourceServiceImpl\" scope=\"singleton\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57ae7ee7f0a47ced61b63125814ef7d266f2a707"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjU5NDQ4OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/resources/spring/spring-dspace-addon-import-services.xml", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNToxNjo1MVrOG_mEyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzoxNDozMVrOHEAKrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMzNzI5MA==", "bodyText": "Why use a number of separator, can we not enter a \\t here ? 9 is a bit unreadable.", "url": "https://github.com/DSpace/DSpace/pull/2914#discussion_r469337290", "createdAt": "2020-08-12T15:16:51Z", "author": {"login": "KevinVdV"}, "path": "dspace-api/src/main/resources/spring/spring-dspace-addon-import-services.xml", "diffHunk": "@@ -63,6 +75,42 @@\n           </property>\n     </bean>\n \n+    <bean id=\"CsvImportService\"\n+          class=\"org.dspace.importer.external.csv.service.CharacterSeparatedImportMetadataSourceServiceImpl\" scope=\"singleton\">\n+          <property name=\"metadataFieldMap\" ref=\"csvMetadataFieldMap\"></property>\n+          <property name=\"skipLines\" value=\"1\" />\n+          <property name=\"supportedExtensions\">\n+               <list>\n+                     <value>csv</value>\n+               </list>\n+          </property>\n+    </bean>\n+\n+    <bean id=\"TsvImportService\"\n+          class=\"org.dspace.importer.external.csv.service.CharacterSeparatedImportMetadataSourceServiceImpl\" scope=\"singleton\">\n+          <property name=\"importSource\" value=\"TsvMetadataSource\" />\n+          <property name=\"separator\" value=\"9\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57ae7ee7f0a47ced61b63125814ef7d266f2a707"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM2MjQ3MQ==", "bodyText": "Personally don't find / know any way to inject char in Spring's beans using the xml config. That's because Spring use them as String by default and there isn't any valid wrapper for char, nor a way to create it. A solution could be create a map of allowed strings and translate the one in input into its ascii value. Something like [\"!\" -> 1], [\"#\" -> 3] and so on", "url": "https://github.com/DSpace/DSpace/pull/2914#discussion_r469362471", "createdAt": "2020-08-12T15:49:20Z", "author": {"login": "pasqualecvl"}, "path": "dspace-api/src/main/resources/spring/spring-dspace-addon-import-services.xml", "diffHunk": "@@ -63,6 +75,42 @@\n           </property>\n     </bean>\n \n+    <bean id=\"CsvImportService\"\n+          class=\"org.dspace.importer.external.csv.service.CharacterSeparatedImportMetadataSourceServiceImpl\" scope=\"singleton\">\n+          <property name=\"metadataFieldMap\" ref=\"csvMetadataFieldMap\"></property>\n+          <property name=\"skipLines\" value=\"1\" />\n+          <property name=\"supportedExtensions\">\n+               <list>\n+                     <value>csv</value>\n+               </list>\n+          </property>\n+    </bean>\n+\n+    <bean id=\"TsvImportService\"\n+          class=\"org.dspace.importer.external.csv.service.CharacterSeparatedImportMetadataSourceServiceImpl\" scope=\"singleton\">\n+          <property name=\"importSource\" value=\"TsvMetadataSource\" />\n+          <property name=\"separator\" value=\"9\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMzNzI5MA=="}, "originalCommit": {"oid": "57ae7ee7f0a47ced61b63125814ef7d266f2a707"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQzODQ4Nw==", "bodyText": "There does seem to be a String -> Character converter in the default conversion factory:  https://stackoverflow.com/a/42041652/2916377", "url": "https://github.com/DSpace/DSpace/pull/2914#discussion_r469438487", "createdAt": "2020-08-12T17:54:12Z", "author": {"login": "mwoodiupui"}, "path": "dspace-api/src/main/resources/spring/spring-dspace-addon-import-services.xml", "diffHunk": "@@ -63,6 +75,42 @@\n           </property>\n     </bean>\n \n+    <bean id=\"CsvImportService\"\n+          class=\"org.dspace.importer.external.csv.service.CharacterSeparatedImportMetadataSourceServiceImpl\" scope=\"singleton\">\n+          <property name=\"metadataFieldMap\" ref=\"csvMetadataFieldMap\"></property>\n+          <property name=\"skipLines\" value=\"1\" />\n+          <property name=\"supportedExtensions\">\n+               <list>\n+                     <value>csv</value>\n+               </list>\n+          </property>\n+    </bean>\n+\n+    <bean id=\"TsvImportService\"\n+          class=\"org.dspace.importer.external.csv.service.CharacterSeparatedImportMetadataSourceServiceImpl\" scope=\"singleton\">\n+          <property name=\"importSource\" value=\"TsvMetadataSource\" />\n+          <property name=\"separator\" value=\"9\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMzNzI5MA=="}, "originalCommit": {"oid": "57ae7ee7f0a47ced61b63125814ef7d266f2a707"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkzNTc0Mg==", "bodyText": "It doesn't do the trick because just operate on a single character, doesn't work with, for example, tab writes as \"\\t\".\nhttps://github.com/spring-projects/spring-framework/blob/master/spring-core/src/main/java/org/springframework/core/convert/support/StringToCharacterConverter.java", "url": "https://github.com/DSpace/DSpace/pull/2914#discussion_r469935742", "createdAt": "2020-08-13T13:05:25Z", "author": {"login": "pasqualecvl"}, "path": "dspace-api/src/main/resources/spring/spring-dspace-addon-import-services.xml", "diffHunk": "@@ -63,6 +75,42 @@\n           </property>\n     </bean>\n \n+    <bean id=\"CsvImportService\"\n+          class=\"org.dspace.importer.external.csv.service.CharacterSeparatedImportMetadataSourceServiceImpl\" scope=\"singleton\">\n+          <property name=\"metadataFieldMap\" ref=\"csvMetadataFieldMap\"></property>\n+          <property name=\"skipLines\" value=\"1\" />\n+          <property name=\"supportedExtensions\">\n+               <list>\n+                     <value>csv</value>\n+               </list>\n+          </property>\n+    </bean>\n+\n+    <bean id=\"TsvImportService\"\n+          class=\"org.dspace.importer.external.csv.service.CharacterSeparatedImportMetadataSourceServiceImpl\" scope=\"singleton\">\n+          <property name=\"importSource\" value=\"TsvMetadataSource\" />\n+          <property name=\"separator\" value=\"9\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMzNzI5MA=="}, "originalCommit": {"oid": "57ae7ee7f0a47ced61b63125814ef7d266f2a707"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAwNDQ5NA==", "bodyText": "What a surprising deficiency.  We could build our own converter that understands normal Java string escapes.", "url": "https://github.com/DSpace/DSpace/pull/2914#discussion_r470004494", "createdAt": "2020-08-13T14:42:21Z", "author": {"login": "mwoodiupui"}, "path": "dspace-api/src/main/resources/spring/spring-dspace-addon-import-services.xml", "diffHunk": "@@ -63,6 +75,42 @@\n           </property>\n     </bean>\n \n+    <bean id=\"CsvImportService\"\n+          class=\"org.dspace.importer.external.csv.service.CharacterSeparatedImportMetadataSourceServiceImpl\" scope=\"singleton\">\n+          <property name=\"metadataFieldMap\" ref=\"csvMetadataFieldMap\"></property>\n+          <property name=\"skipLines\" value=\"1\" />\n+          <property name=\"supportedExtensions\">\n+               <list>\n+                     <value>csv</value>\n+               </list>\n+          </property>\n+    </bean>\n+\n+    <bean id=\"TsvImportService\"\n+          class=\"org.dspace.importer.external.csv.service.CharacterSeparatedImportMetadataSourceServiceImpl\" scope=\"singleton\">\n+          <property name=\"importSource\" value=\"TsvMetadataSource\" />\n+          <property name=\"separator\" value=\"9\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMzNzI5MA=="}, "originalCommit": {"oid": "57ae7ee7f0a47ced61b63125814ef7d266f2a707"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAyOTIyMA==", "bodyText": "We could, but I think the only way to make that is to switch over a list of cases. Something like:\nif (string.length() == 1){  \n   return normalCharConverter(character);  \n} else {  \n   return mapOfStringToChar.get(character);  \n}\n\nwhere mapOfStringToChar looks like:\n[   \n   { \"\\t\", 9 },  \n   { \"\\n\", 10},  \n   ...  \n]", "url": "https://github.com/DSpace/DSpace/pull/2914#discussion_r470029220", "createdAt": "2020-08-13T15:16:32Z", "author": {"login": "pasqualecvl"}, "path": "dspace-api/src/main/resources/spring/spring-dspace-addon-import-services.xml", "diffHunk": "@@ -63,6 +75,42 @@\n           </property>\n     </bean>\n \n+    <bean id=\"CsvImportService\"\n+          class=\"org.dspace.importer.external.csv.service.CharacterSeparatedImportMetadataSourceServiceImpl\" scope=\"singleton\">\n+          <property name=\"metadataFieldMap\" ref=\"csvMetadataFieldMap\"></property>\n+          <property name=\"skipLines\" value=\"1\" />\n+          <property name=\"supportedExtensions\">\n+               <list>\n+                     <value>csv</value>\n+               </list>\n+          </property>\n+    </bean>\n+\n+    <bean id=\"TsvImportService\"\n+          class=\"org.dspace.importer.external.csv.service.CharacterSeparatedImportMetadataSourceServiceImpl\" scope=\"singleton\">\n+          <property name=\"importSource\" value=\"TsvMetadataSource\" />\n+          <property name=\"separator\" value=\"9\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMzNzI5MA=="}, "originalCommit": {"oid": "57ae7ee7f0a47ced61b63125814ef7d266f2a707"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA2NTMyMA==", "bodyText": "https://commons.apache.org/proper/commons-lang/javadocs/api-2.6/org/apache/commons/lang/StringEscapeUtils.html#unescapeJava(java.lang.String)", "url": "https://github.com/DSpace/DSpace/pull/2914#discussion_r470065320", "createdAt": "2020-08-13T16:10:48Z", "author": {"login": "mwoodiupui"}, "path": "dspace-api/src/main/resources/spring/spring-dspace-addon-import-services.xml", "diffHunk": "@@ -63,6 +75,42 @@\n           </property>\n     </bean>\n \n+    <bean id=\"CsvImportService\"\n+          class=\"org.dspace.importer.external.csv.service.CharacterSeparatedImportMetadataSourceServiceImpl\" scope=\"singleton\">\n+          <property name=\"metadataFieldMap\" ref=\"csvMetadataFieldMap\"></property>\n+          <property name=\"skipLines\" value=\"1\" />\n+          <property name=\"supportedExtensions\">\n+               <list>\n+                     <value>csv</value>\n+               </list>\n+          </property>\n+    </bean>\n+\n+    <bean id=\"TsvImportService\"\n+          class=\"org.dspace.importer.external.csv.service.CharacterSeparatedImportMetadataSourceServiceImpl\" scope=\"singleton\">\n+          <property name=\"importSource\" value=\"TsvMetadataSource\" />\n+          <property name=\"separator\" value=\"9\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMzNzI5MA=="}, "originalCommit": {"oid": "57ae7ee7f0a47ced61b63125814ef7d266f2a707"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk1OTA4Nw==", "bodyText": "We checked the previous implementation BTE implementation and we found that it was configured using unicode escape number, i.e \\u0009 that is indeed much clear. We have applied the same solution.", "url": "https://github.com/DSpace/DSpace/pull/2914#discussion_r473959087", "createdAt": "2020-08-20T13:14:31Z", "author": {"login": "pasqualecvl"}, "path": "dspace-api/src/main/resources/spring/spring-dspace-addon-import-services.xml", "diffHunk": "@@ -63,6 +75,42 @@\n           </property>\n     </bean>\n \n+    <bean id=\"CsvImportService\"\n+          class=\"org.dspace.importer.external.csv.service.CharacterSeparatedImportMetadataSourceServiceImpl\" scope=\"singleton\">\n+          <property name=\"metadataFieldMap\" ref=\"csvMetadataFieldMap\"></property>\n+          <property name=\"skipLines\" value=\"1\" />\n+          <property name=\"supportedExtensions\">\n+               <list>\n+                     <value>csv</value>\n+               </list>\n+          </property>\n+    </bean>\n+\n+    <bean id=\"TsvImportService\"\n+          class=\"org.dspace.importer.external.csv.service.CharacterSeparatedImportMetadataSourceServiceImpl\" scope=\"singleton\">\n+          <property name=\"importSource\" value=\"TsvMetadataSource\" />\n+          <property name=\"separator\" value=\"9\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMzNzI5MA=="}, "originalCommit": {"oid": "57ae7ee7f0a47ced61b63125814ef7d266f2a707"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjU5ODkxOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/resources/spring/spring-dspace-addon-import-services.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNToxNzo1NlrOG_mHlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNToxNzo1NlrOG_mHlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMzODAwNQ==", "bodyText": "Scope singleton is the default, you can leave out the initial scope declaration.", "url": "https://github.com/DSpace/DSpace/pull/2914#discussion_r469338005", "createdAt": "2020-08-12T15:17:56Z", "author": {"login": "KevinVdV"}, "path": "dspace-api/src/main/resources/spring/spring-dspace-addon-import-services.xml", "diffHunk": "@@ -63,6 +75,42 @@\n           </property>\n     </bean>\n \n+    <bean id=\"CsvImportService\"\n+          class=\"org.dspace.importer.external.csv.service.CharacterSeparatedImportMetadataSourceServiceImpl\" scope=\"singleton\">\n+          <property name=\"metadataFieldMap\" ref=\"csvMetadataFieldMap\"></property>\n+          <property name=\"skipLines\" value=\"1\" />\n+          <property name=\"supportedExtensions\">\n+               <list>\n+                     <value>csv</value>\n+               </list>\n+          </property>\n+    </bean>\n+\n+    <bean id=\"TsvImportService\"\n+          class=\"org.dspace.importer.external.csv.service.CharacterSeparatedImportMetadataSourceServiceImpl\" scope=\"singleton\">\n+          <property name=\"importSource\" value=\"TsvMetadataSource\" />\n+          <property name=\"separator\" value=\"9\" />\n+          <property name=\"skipLines\" value=\"1\" />\n+          <property name=\"metadataFieldMap\" ref=\"tsvMetadataFieldMap\" />\n+          <property name=\"supportedExtensions\">\n+               <list>\n+                     <value>tsv</value>\n+               </list>\n+          </property>\n+    </bean>\n+\n+    <bean id=\"EndnoteImportService\"\n+          class=\"org.dspace.importer.external.endnote.service.EndnoteImportMetadataSourceServiceImpl\" scope=\"singleton\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57ae7ee7f0a47ced61b63125814ef7d266f2a707"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzkzNTk5OnYy", "diffSide": "RIGHT", "path": "dspace/config/spring/api/ris-integration.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzoxNDozM1rOHE1AdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzoxNDozM1rOHE1AdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyNDgyMA==", "bodyText": "I'm finding a number of RIS files have \"TI\" (capital t, capital i) for the title, including the ris-test.ris you use in tests. We may wish to add a mapping for TI as well, as when I upload an RIS file with a \"TI\" field, then the Title does not get parsed.", "url": "https://github.com/DSpace/DSpace/pull/2914#discussion_r474824820", "createdAt": "2020-08-21T17:14:33Z", "author": {"login": "tdonohue"}, "path": "dspace/config/spring/api/ris-integration.xml", "diffHunk": "@@ -0,0 +1,65 @@\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xmlns:context=\"http://www.springframework.org/schema/context\"\n+       xmlns:util=\"http://www.springframework.org/schema/util\"\n+       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\n+           http://www.springframework.org/schema/context\n+           http://www.springframework.org/schema/context/spring-context-2.5.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd\"\n+       default-autowire-candidates=\"*Service,*DAO,javax.sql.DataSource\">\n+\n+    <context:annotation-config/>\n+    <!-- allows us to use spring annotations in beans -->\n+\n+    <util:map id=\"risMetadataFieldMap\" key-type=\"org.dspace.importer.external.metadatamapping.MetadataFieldConfig\"\n+              value-type=\"org.dspace.importer.external.metadatamapping.contributor.MetadataContributor\">\n+        <description>Defines which metadatum is mapped on which metadatum. Note that while the key must be unique it\n+            only matters here for postprocessing of the value. The mapped MetadatumContributor has full control over\n+            what metadatafield is generated.\n+        </description>\n+        <entry key-ref=\"dcTitle\" value-ref=\"risTitleContrib\" />\n+        <entry key-ref=\"dcAuthors\" value-ref=\"risAuthorContrib\" />\n+        <entry key-ref=\"dcJournal\" value-ref=\"risSourceContrib\" />\n+\t\t<entry key-ref=\"dcIssued\" value-ref=\"risDateContrib\" />\n+\t\t<entry key-ref=\"dcJissn\" value-ref=\"risISSNContrib\" />    \n+\t\t<entry key-ref=\"dcSubtype\" value-ref=\"risTypeContrib\" />    \n+\t\t<entry key-ref=\"dcAbstract\" value-ref=\"risAbstractContrib\" />    \n+    </util:map>\n+\n+    <bean id=\"risTitleContrib\" class=\"org.dspace.importer.external.metadatamapping.contributor.SimpleMetadataContributor\">\n+        <property name=\"field\" ref=\"dcTitle\"/>\n+        <property name=\"key\" value=\"T1\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55901fe1b9f8a8208f540f7ec14d1f8854dc15b5"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1380, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}