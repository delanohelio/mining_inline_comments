{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5Mjg5ODU4", "number": 2931, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMTo1OToyOFrOEf9RZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMjoxMjo1MlrOEf9kKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxOTQ1MTg5OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ProcessRestRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMTo1OToyOFrOHMjSFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMTo1OToyOFrOHMjSFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyMzAyOQ==", "bodyText": "although this works, I would avoid searching on a null eperson UUID, and move this in the if block below", "url": "https://github.com/DSpace/DSpace/pull/2931#discussion_r482923029", "createdAt": "2020-09-03T11:59:28Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ProcessRestRepository.java", "diffHunk": "@@ -135,6 +150,104 @@ protected void delete(Context context, Integer integer)\n         }\n     }\n \n+    /**\n+     * Search method that will take Parameters and return a list of {@link ProcessRest} objects\n+     * based on the {@link Process} objects that were in the databank that adhere to these params\n+     * @param ePersonUuid   The UUID for the EPerson that started the Process\n+     * @param scriptName    The name of the Script for which the Process belongs to\n+     * @param processStatusString   The status of the Process\n+     * @param pageable      The pageable\n+     * @return              A page of {@link ProcessRest} objects adhering to the params\n+     * @throws SQLException If something goes wrong\n+     */\n+    @SearchRestMethod(name = \"byProperty\")\n+    @PreAuthorize(\"hasAuthority('ADMIN')\")\n+    public Page<ProcessRest> findProcessesByProperty(@Parameter(value = \"userId\") UUID ePersonUuid,\n+                                                     @Parameter(value = \"scriptName\") String scriptName,\n+                                                     @Parameter(value = \"processStatus\") String processStatusString,\n+                                                     Pageable pageable)\n+        throws SQLException {\n+        if (StringUtils.isBlank(scriptName) && ePersonUuid == null && StringUtils.isBlank(processStatusString)) {\n+            throw new DSpaceBadRequestException(\"Either a name, user UUID or ProcessStatus should be provided\");\n+        }\n+\n+        Context context = obtainContext();\n+        EPerson ePerson = epersonService.find(context, ePersonUuid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4389fa33c6f8257b1874c6ed4731aa98c80d676c"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxOTQ1NDk0OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ProcessRestRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMjowMDoxOFrOHMjT6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOToxNzoxNlrOHOUNrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyMzQ5Nw==", "bodyText": "what will happen if it's not a valid status, is there an IT for this use case?", "url": "https://github.com/DSpace/DSpace/pull/2931#discussion_r482923497", "createdAt": "2020-09-03T12:00:18Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ProcessRestRepository.java", "diffHunk": "@@ -135,6 +150,104 @@ protected void delete(Context context, Integer integer)\n         }\n     }\n \n+    /**\n+     * Search method that will take Parameters and return a list of {@link ProcessRest} objects\n+     * based on the {@link Process} objects that were in the databank that adhere to these params\n+     * @param ePersonUuid   The UUID for the EPerson that started the Process\n+     * @param scriptName    The name of the Script for which the Process belongs to\n+     * @param processStatusString   The status of the Process\n+     * @param pageable      The pageable\n+     * @return              A page of {@link ProcessRest} objects adhering to the params\n+     * @throws SQLException If something goes wrong\n+     */\n+    @SearchRestMethod(name = \"byProperty\")\n+    @PreAuthorize(\"hasAuthority('ADMIN')\")\n+    public Page<ProcessRest> findProcessesByProperty(@Parameter(value = \"userId\") UUID ePersonUuid,\n+                                                     @Parameter(value = \"scriptName\") String scriptName,\n+                                                     @Parameter(value = \"processStatus\") String processStatusString,\n+                                                     Pageable pageable)\n+        throws SQLException {\n+        if (StringUtils.isBlank(scriptName) && ePersonUuid == null && StringUtils.isBlank(processStatusString)) {\n+            throw new DSpaceBadRequestException(\"Either a name, user UUID or ProcessStatus should be provided\");\n+        }\n+\n+        Context context = obtainContext();\n+        EPerson ePerson = epersonService.find(context, ePersonUuid);\n+        if (ePersonUuid != null && ePerson == null) {\n+            throw new DSpaceBadRequestException(\"No EPerson with the given UUID is found\");\n+        }\n+\n+        ProcessStatus processStatus = StringUtils.isBlank(processStatusString) ? null :\n+            ProcessStatus.valueOf(processStatusString);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4389fa33c6f8257b1874c6ed4731aa98c80d676c"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc3MzI5Mw==", "bodyText": "If an invalid status is given, the valueOf call will throw an exception which will in turn be parsed to a BadRequest status code given by the REST api. I've added a test to verify this here: 13b59f9#diff-5c0eb5afe2a696f9d1a29faffc28ccc2R586", "url": "https://github.com/DSpace/DSpace/pull/2931#discussion_r484773293", "createdAt": "2020-09-08T09:17:16Z", "author": {"login": "Raf-atmire"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ProcessRestRepository.java", "diffHunk": "@@ -135,6 +150,104 @@ protected void delete(Context context, Integer integer)\n         }\n     }\n \n+    /**\n+     * Search method that will take Parameters and return a list of {@link ProcessRest} objects\n+     * based on the {@link Process} objects that were in the databank that adhere to these params\n+     * @param ePersonUuid   The UUID for the EPerson that started the Process\n+     * @param scriptName    The name of the Script for which the Process belongs to\n+     * @param processStatusString   The status of the Process\n+     * @param pageable      The pageable\n+     * @return              A page of {@link ProcessRest} objects adhering to the params\n+     * @throws SQLException If something goes wrong\n+     */\n+    @SearchRestMethod(name = \"byProperty\")\n+    @PreAuthorize(\"hasAuthority('ADMIN')\")\n+    public Page<ProcessRest> findProcessesByProperty(@Parameter(value = \"userId\") UUID ePersonUuid,\n+                                                     @Parameter(value = \"scriptName\") String scriptName,\n+                                                     @Parameter(value = \"processStatus\") String processStatusString,\n+                                                     Pageable pageable)\n+        throws SQLException {\n+        if (StringUtils.isBlank(scriptName) && ePersonUuid == null && StringUtils.isBlank(processStatusString)) {\n+            throw new DSpaceBadRequestException(\"Either a name, user UUID or ProcessStatus should be provided\");\n+        }\n+\n+        Context context = obtainContext();\n+        EPerson ePerson = epersonService.find(context, ePersonUuid);\n+        if (ePersonUuid != null && ePerson == null) {\n+            throw new DSpaceBadRequestException(\"No EPerson with the given UUID is found\");\n+        }\n+\n+        ProcessStatus processStatus = StringUtils.isBlank(processStatusString) ? null :\n+            ProcessStatus.valueOf(processStatusString);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyMzQ5Nw=="}, "originalCommit": {"oid": "4389fa33c6f8257b1874c6ed4731aa98c80d676c"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxOTQ1OTg4OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ProcessRestRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMjowMTo0MFrOHMjW1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMTozNjowMlrOHPDHJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyNDI0Nw==", "bodyText": "why do you need to explicitly restrict to these values?\nIs this because I mentioned them in the contract, because I simply copied it from https://github.com/DSpace/Rest7Contract/blob/main/processes-endpoint.md#execution-details", "url": "https://github.com/DSpace/DSpace/pull/2931#discussion_r482924247", "createdAt": "2020-09-03T12:01:40Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ProcessRestRepository.java", "diffHunk": "@@ -135,6 +150,104 @@ protected void delete(Context context, Integer integer)\n         }\n     }\n \n+    /**\n+     * Search method that will take Parameters and return a list of {@link ProcessRest} objects\n+     * based on the {@link Process} objects that were in the databank that adhere to these params\n+     * @param ePersonUuid   The UUID for the EPerson that started the Process\n+     * @param scriptName    The name of the Script for which the Process belongs to\n+     * @param processStatusString   The status of the Process\n+     * @param pageable      The pageable\n+     * @return              A page of {@link ProcessRest} objects adhering to the params\n+     * @throws SQLException If something goes wrong\n+     */\n+    @SearchRestMethod(name = \"byProperty\")\n+    @PreAuthorize(\"hasAuthority('ADMIN')\")\n+    public Page<ProcessRest> findProcessesByProperty(@Parameter(value = \"userId\") UUID ePersonUuid,\n+                                                     @Parameter(value = \"scriptName\") String scriptName,\n+                                                     @Parameter(value = \"processStatus\") String processStatusString,\n+                                                     Pageable pageable)\n+        throws SQLException {\n+        if (StringUtils.isBlank(scriptName) && ePersonUuid == null && StringUtils.isBlank(processStatusString)) {\n+            throw new DSpaceBadRequestException(\"Either a name, user UUID or ProcessStatus should be provided\");\n+        }\n+\n+        Context context = obtainContext();\n+        EPerson ePerson = epersonService.find(context, ePersonUuid);\n+        if (ePersonUuid != null && ePerson == null) {\n+            throw new DSpaceBadRequestException(\"No EPerson with the given UUID is found\");\n+        }\n+\n+        ProcessStatus processStatus = StringUtils.isBlank(processStatusString) ? null :\n+            ProcessStatus.valueOf(processStatusString);\n+        if (processStatus != null && processStatus != ProcessStatus.RUNNING && processStatus != ProcessStatus.COMPLETED", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4389fa33c6f8257b1874c6ed4731aa98c80d676c"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU0MTY2OA==", "bodyText": "This explicit check has been removed. Since the actual code still retrieves the status using the existing enums this check is being done inherently through that piece of code.\nWhen a status is being searched that does not exist, an IllegalArgumentException is thrown", "url": "https://github.com/DSpace/DSpace/pull/2931#discussion_r485541668", "createdAt": "2020-09-09T11:36:02Z", "author": {"login": "jonas-atmire"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ProcessRestRepository.java", "diffHunk": "@@ -135,6 +150,104 @@ protected void delete(Context context, Integer integer)\n         }\n     }\n \n+    /**\n+     * Search method that will take Parameters and return a list of {@link ProcessRest} objects\n+     * based on the {@link Process} objects that were in the databank that adhere to these params\n+     * @param ePersonUuid   The UUID for the EPerson that started the Process\n+     * @param scriptName    The name of the Script for which the Process belongs to\n+     * @param processStatusString   The status of the Process\n+     * @param pageable      The pageable\n+     * @return              A page of {@link ProcessRest} objects adhering to the params\n+     * @throws SQLException If something goes wrong\n+     */\n+    @SearchRestMethod(name = \"byProperty\")\n+    @PreAuthorize(\"hasAuthority('ADMIN')\")\n+    public Page<ProcessRest> findProcessesByProperty(@Parameter(value = \"userId\") UUID ePersonUuid,\n+                                                     @Parameter(value = \"scriptName\") String scriptName,\n+                                                     @Parameter(value = \"processStatus\") String processStatusString,\n+                                                     Pageable pageable)\n+        throws SQLException {\n+        if (StringUtils.isBlank(scriptName) && ePersonUuid == null && StringUtils.isBlank(processStatusString)) {\n+            throw new DSpaceBadRequestException(\"Either a name, user UUID or ProcessStatus should be provided\");\n+        }\n+\n+        Context context = obtainContext();\n+        EPerson ePerson = epersonService.find(context, ePersonUuid);\n+        if (ePersonUuid != null && ePerson == null) {\n+            throw new DSpaceBadRequestException(\"No EPerson with the given UUID is found\");\n+        }\n+\n+        ProcessStatus processStatus = StringUtils.isBlank(processStatusString) ? null :\n+            ProcessStatus.valueOf(processStatusString);\n+        if (processStatus != null && processStatus != ProcessStatus.RUNNING && processStatus != ProcessStatus.COMPLETED", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyNDI0Nw=="}, "originalCommit": {"oid": "4389fa33c6f8257b1874c6ed4731aa98c80d676c"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxOTQ4MDE1OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/ProcessRestRepositoryIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMjowNzozOVrOHMjjaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMjowNzozOVrOHMjjaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyNzQ2Nw==", "bodyText": "can you also add a test with the other user ID (can be in the same method)\nOtherwise you're only testing for the current user (the user from the token)", "url": "https://github.com/DSpace/DSpace/pull/2931#discussion_r482927467", "createdAt": "2020-09-03T12:07:39Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/ProcessRestRepositoryIT.java", "diffHunk": "@@ -322,6 +324,447 @@ public void getProcessFilesTypesRandomProcessId() throws Exception {\n \n     }\n \n+    @Test\n+    public void searchProcessTestForbidden() throws Exception {\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void searchProcessTestUnauthorized() throws Exception {\n+\n+        getClient().perform(get(\"/api/system/processes/search/byProperty\"))\n+                        .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUser() throws Exception {\n+        Process newProcess = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess4 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess5 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess6 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess7 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters).build();\n+        Process newProcess8 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters).build();\n+        Process newProcess9 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters).build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4389fa33c6f8257b1874c6ed4731aa98c80d676c"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxOTQ5NzM4OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/ProcessRestRepositoryIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMjoxMjoyMVrOHMjt8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMjoxMjoyMVrOHMjt8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkzMDE2Mg==", "bodyText": "With the name searchProcessTestByUserSortedOnDefault, I did expect no sort parameters. Did I misinterpret the goal of this method?", "url": "https://github.com/DSpace/DSpace/pull/2931#discussion_r482930162", "createdAt": "2020-09-03T12:12:21Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/ProcessRestRepositoryIT.java", "diffHunk": "@@ -322,6 +324,447 @@ public void getProcessFilesTypesRandomProcessId() throws Exception {\n \n     }\n \n+    @Test\n+    public void searchProcessTestForbidden() throws Exception {\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void searchProcessTestUnauthorized() throws Exception {\n+\n+        getClient().perform(get(\"/api/system/processes/search/byProperty\"))\n+                        .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUser() throws Exception {\n+        Process newProcess = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess4 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess5 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess6 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess7 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters).build();\n+        Process newProcess8 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters).build();\n+        Process newProcess9 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters).build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                .param(\"userId\", admin.getID().toString()))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", containsInAnyOrder(\n+                            ProcessMatcher.matchProcess(process.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        process.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess7.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess7.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess8.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess8.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess9.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess9.getID(), parameters, ProcessStatus.SCHEDULED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 4))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByProcessStatus() throws Exception {\n+        Process newProcess = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess4 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess5 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess6 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess7 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+        Process newProcess8 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters).build();\n+        Process newProcess9 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"processStatus\", \"FAILED\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", containsInAnyOrder(\n+                            ProcessMatcher.matchProcess(newProcess7.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess7.getID(), parameters, ProcessStatus.FAILED),\n+                            ProcessMatcher.matchProcess(newProcess9.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess9.getID(), parameters, ProcessStatus.FAILED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 2))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByScriptName() throws Exception {\n+        Process newProcess = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess4 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess5 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess6 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess7 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+        Process newProcess8 = ProcessBuilder.createProcess(context, admin, \"another-mock-script\", parameters).build();\n+        Process newProcess9 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"scriptName\", \"another-mock-script\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", containsInAnyOrder(\n+                            ProcessMatcher.matchProcess(newProcess8.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess8.getID(), parameters, ProcessStatus.SCHEDULED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 1))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByScriptNameAndUserId() throws Exception {\n+        Process newProcess = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess4 = ProcessBuilder.createProcess(context, eperson, \"another-mock-script\", parameters).build();\n+        Process newProcess5 = ProcessBuilder.createProcess(context, eperson, \"another-mock-script\", parameters).build();\n+        Process newProcess6 = ProcessBuilder.createProcess(context, eperson, \"another-mock-script\", parameters).build();\n+        Process newProcess7 = ProcessBuilder.createProcess(context, admin, \"another-mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+        Process newProcess8 = ProcessBuilder.createProcess(context, admin, \"another-mock-script\", parameters).build();\n+        Process newProcess9 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"scriptName\", \"another-mock-script\")\n+                                     .param(\"userId\", admin.getID().toString()))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", containsInAnyOrder(\n+                            ProcessMatcher.matchProcess(newProcess7.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess7.getID(), parameters, ProcessStatus.FAILED),\n+                            ProcessMatcher.matchProcess(newProcess8.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess8.getID(), parameters, ProcessStatus.SCHEDULED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 2))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserIdAndProcessStatus() throws Exception {\n+        Process newProcess = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+        Process newProcess4 = ProcessBuilder.createProcess(context, eperson, \"another-mock-script\", parameters).build();\n+        Process newProcess5 = ProcessBuilder.createProcess(context, eperson, \"another-mock-script\", parameters).build();\n+        Process newProcess6 = ProcessBuilder.createProcess(context, eperson, \"another-mock-script\", parameters).build();\n+        Process newProcess7 = ProcessBuilder.createProcess(context, admin, \"another-mock-script\", parameters).build();\n+        Process newProcess8 = ProcessBuilder.createProcess(context, admin, \"another-mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+        Process newProcess9 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"processStatus\", \"FAILED\")\n+                                     .param(\"userId\", admin.getID().toString()))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", containsInAnyOrder(\n+                            ProcessMatcher.matchProcess(newProcess9.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess9.getID(), parameters, ProcessStatus.FAILED),\n+                            ProcessMatcher.matchProcess(newProcess8.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess8.getID(), parameters, ProcessStatus.FAILED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 2))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserIdAndProcessStatusAndScriptName() throws Exception {\n+        Process newProcess = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+        Process newProcess4 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess5 = ProcessBuilder.createProcess(context, eperson, \"another-mock-script\", parameters).build();\n+        Process newProcess6 = ProcessBuilder.createProcess(context, eperson, \"another-mock-script\", parameters).build();\n+        Process newProcess7 = ProcessBuilder.createProcess(context, admin, \"another-mock-script\", parameters).build();\n+        Process newProcess8 = ProcessBuilder.createProcess(context, admin, \"another-mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+        Process newProcess9 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters).build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"processStatus\", \"FAILED\")\n+                                     .param(\"userId\", eperson.getID().toString())\n+                                     .param(\"scriptName\", \"mock-script\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", containsInAnyOrder(\n+                            ProcessMatcher.matchProcess(\"mock-script\",\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess1.getID(), parameters, ProcessStatus.FAILED),\n+                            ProcessMatcher.matchProcess(\"mock-script\",\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess3.getID(), parameters, ProcessStatus.FAILED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 2))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestNoParametersBadRequest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\"))\n+                        .andExpect(status().isBadRequest());\n+    }\n+\n+    @Test\n+    public void searchProcessTestInvalidProcessStatusParamBadRequest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"processStatus\", \"SCHEDULED\"))\n+                        .andExpect(status().isBadRequest());\n+    }\n+\n+    @Test\n+    public void searchProcessTestInvalidEPersonUuid() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"userId\", UUID.randomUUID().toString()))\n+                        .andExpect(status().isBadRequest());\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserSortedOnStartTimeAsc() throws Exception {\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"10/01/1990\", \"20/01/1990\").build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"11/01/1990\", \"19/01/1990\").build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"12/01/1990\", \"18/01/1990\").build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"userId\", eperson.getID().toString())\n+                                    .param(\"sort\", \"startTime,asc\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", contains(\n+                            ProcessMatcher.matchProcess(newProcess1.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess1.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess2.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess2.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess3.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess3.getID(), parameters, ProcessStatus.SCHEDULED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 3))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserSortedOnStartTimeDesc() throws Exception {\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"10/01/1990\", \"20/01/1990\").build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"11/01/1990\", \"19/01/1990\").build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"12/01/1990\", \"18/01/1990\").build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"userId\", eperson.getID().toString())\n+                                     .param(\"sort\", \"startTime,desc\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", contains(\n+                            ProcessMatcher.matchProcess(newProcess3.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess3.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess2.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess2.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess1.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess1.getID(), parameters, ProcessStatus.SCHEDULED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 3))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserSortedOnEndTimeAsc() throws Exception {\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"10/01/1990\", \"20/01/1990\").build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"11/01/1990\", \"19/01/1990\").build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"12/01/1990\", \"18/01/1990\").build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"userId\", eperson.getID().toString())\n+                                     .param(\"sort\", \"endTime,asc\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", contains(\n+                            ProcessMatcher.matchProcess(newProcess3.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess3.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess2.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess2.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess1.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess1.getID(), parameters, ProcessStatus.SCHEDULED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 3))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserSortedOnEndTimeDesc() throws Exception {\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"10/01/1990\", \"20/01/1990\").build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"11/01/1990\", \"19/01/1990\").build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"12/01/1990\", \"18/01/1990\").build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"userId\", eperson.getID().toString())\n+                                     .param(\"sort\", \"endTime,desc\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", contains(\n+                            ProcessMatcher.matchProcess(newProcess1.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess1.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess2.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess2.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess3.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess3.getID(), parameters, ProcessStatus.SCHEDULED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 3))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserSortedOnMultipleBadRequest() throws Exception {\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"10/01/1990\", \"20/01/1990\").build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"11/01/1990\", \"19/01/1990\").build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"12/01/1990\", \"18/01/1990\").build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"userId\", eperson.getID().toString())\n+                                     .param(\"sort\", \"endTime,desc\")\n+                                     .param(\"sort\", \"startTime,desc\"))\n+                        .andExpect(status().isBadRequest());\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserSortedOnDefault() throws Exception {\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"10/01/1990\", \"20/01/1990\").build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"11/01/1990\", \"19/01/1990\").build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"12/01/1990\", \"18/01/1990\").build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"userId\", eperson.getID().toString())\n+                                     .param(\"sort\", \"startTime,desc\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4389fa33c6f8257b1874c6ed4731aa98c80d676c"}, "originalPosition": 414}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxOTQ5OTk1OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/ProcessRestRepositoryIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMjoxMjo1MlrOHMjvlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOToxNzo1OFrOHOUPLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkzMDU4MA==", "bodyText": "isn't an invalid search option supposed to throw an exception?", "url": "https://github.com/DSpace/DSpace/pull/2931#discussion_r482930580", "createdAt": "2020-09-03T12:12:52Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/ProcessRestRepositoryIT.java", "diffHunk": "@@ -322,6 +324,447 @@ public void getProcessFilesTypesRandomProcessId() throws Exception {\n \n     }\n \n+    @Test\n+    public void searchProcessTestForbidden() throws Exception {\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void searchProcessTestUnauthorized() throws Exception {\n+\n+        getClient().perform(get(\"/api/system/processes/search/byProperty\"))\n+                        .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUser() throws Exception {\n+        Process newProcess = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess4 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess5 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess6 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess7 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters).build();\n+        Process newProcess8 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters).build();\n+        Process newProcess9 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters).build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                .param(\"userId\", admin.getID().toString()))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", containsInAnyOrder(\n+                            ProcessMatcher.matchProcess(process.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        process.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess7.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess7.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess8.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess8.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess9.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess9.getID(), parameters, ProcessStatus.SCHEDULED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 4))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByProcessStatus() throws Exception {\n+        Process newProcess = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess4 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess5 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess6 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess7 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+        Process newProcess8 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters).build();\n+        Process newProcess9 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"processStatus\", \"FAILED\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", containsInAnyOrder(\n+                            ProcessMatcher.matchProcess(newProcess7.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess7.getID(), parameters, ProcessStatus.FAILED),\n+                            ProcessMatcher.matchProcess(newProcess9.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess9.getID(), parameters, ProcessStatus.FAILED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 2))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByScriptName() throws Exception {\n+        Process newProcess = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess4 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess5 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess6 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess7 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+        Process newProcess8 = ProcessBuilder.createProcess(context, admin, \"another-mock-script\", parameters).build();\n+        Process newProcess9 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"scriptName\", \"another-mock-script\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", containsInAnyOrder(\n+                            ProcessMatcher.matchProcess(newProcess8.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess8.getID(), parameters, ProcessStatus.SCHEDULED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 1))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByScriptNameAndUserId() throws Exception {\n+        Process newProcess = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess4 = ProcessBuilder.createProcess(context, eperson, \"another-mock-script\", parameters).build();\n+        Process newProcess5 = ProcessBuilder.createProcess(context, eperson, \"another-mock-script\", parameters).build();\n+        Process newProcess6 = ProcessBuilder.createProcess(context, eperson, \"another-mock-script\", parameters).build();\n+        Process newProcess7 = ProcessBuilder.createProcess(context, admin, \"another-mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+        Process newProcess8 = ProcessBuilder.createProcess(context, admin, \"another-mock-script\", parameters).build();\n+        Process newProcess9 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"scriptName\", \"another-mock-script\")\n+                                     .param(\"userId\", admin.getID().toString()))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", containsInAnyOrder(\n+                            ProcessMatcher.matchProcess(newProcess7.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess7.getID(), parameters, ProcessStatus.FAILED),\n+                            ProcessMatcher.matchProcess(newProcess8.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess8.getID(), parameters, ProcessStatus.SCHEDULED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 2))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserIdAndProcessStatus() throws Exception {\n+        Process newProcess = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+        Process newProcess4 = ProcessBuilder.createProcess(context, eperson, \"another-mock-script\", parameters).build();\n+        Process newProcess5 = ProcessBuilder.createProcess(context, eperson, \"another-mock-script\", parameters).build();\n+        Process newProcess6 = ProcessBuilder.createProcess(context, eperson, \"another-mock-script\", parameters).build();\n+        Process newProcess7 = ProcessBuilder.createProcess(context, admin, \"another-mock-script\", parameters).build();\n+        Process newProcess8 = ProcessBuilder.createProcess(context, admin, \"another-mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+        Process newProcess9 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"processStatus\", \"FAILED\")\n+                                     .param(\"userId\", admin.getID().toString()))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", containsInAnyOrder(\n+                            ProcessMatcher.matchProcess(newProcess9.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess9.getID(), parameters, ProcessStatus.FAILED),\n+                            ProcessMatcher.matchProcess(newProcess8.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess8.getID(), parameters, ProcessStatus.FAILED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 2))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserIdAndProcessStatusAndScriptName() throws Exception {\n+        Process newProcess = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+        Process newProcess4 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess5 = ProcessBuilder.createProcess(context, eperson, \"another-mock-script\", parameters).build();\n+        Process newProcess6 = ProcessBuilder.createProcess(context, eperson, \"another-mock-script\", parameters).build();\n+        Process newProcess7 = ProcessBuilder.createProcess(context, admin, \"another-mock-script\", parameters).build();\n+        Process newProcess8 = ProcessBuilder.createProcess(context, admin, \"another-mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+        Process newProcess9 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters).build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"processStatus\", \"FAILED\")\n+                                     .param(\"userId\", eperson.getID().toString())\n+                                     .param(\"scriptName\", \"mock-script\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", containsInAnyOrder(\n+                            ProcessMatcher.matchProcess(\"mock-script\",\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess1.getID(), parameters, ProcessStatus.FAILED),\n+                            ProcessMatcher.matchProcess(\"mock-script\",\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess3.getID(), parameters, ProcessStatus.FAILED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 2))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestNoParametersBadRequest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\"))\n+                        .andExpect(status().isBadRequest());\n+    }\n+\n+    @Test\n+    public void searchProcessTestInvalidProcessStatusParamBadRequest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"processStatus\", \"SCHEDULED\"))\n+                        .andExpect(status().isBadRequest());\n+    }\n+\n+    @Test\n+    public void searchProcessTestInvalidEPersonUuid() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"userId\", UUID.randomUUID().toString()))\n+                        .andExpect(status().isBadRequest());\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserSortedOnStartTimeAsc() throws Exception {\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"10/01/1990\", \"20/01/1990\").build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"11/01/1990\", \"19/01/1990\").build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"12/01/1990\", \"18/01/1990\").build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"userId\", eperson.getID().toString())\n+                                    .param(\"sort\", \"startTime,asc\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", contains(\n+                            ProcessMatcher.matchProcess(newProcess1.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess1.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess2.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess2.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess3.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess3.getID(), parameters, ProcessStatus.SCHEDULED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 3))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserSortedOnStartTimeDesc() throws Exception {\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"10/01/1990\", \"20/01/1990\").build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"11/01/1990\", \"19/01/1990\").build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"12/01/1990\", \"18/01/1990\").build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"userId\", eperson.getID().toString())\n+                                     .param(\"sort\", \"startTime,desc\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", contains(\n+                            ProcessMatcher.matchProcess(newProcess3.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess3.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess2.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess2.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess1.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess1.getID(), parameters, ProcessStatus.SCHEDULED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 3))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserSortedOnEndTimeAsc() throws Exception {\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"10/01/1990\", \"20/01/1990\").build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"11/01/1990\", \"19/01/1990\").build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"12/01/1990\", \"18/01/1990\").build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"userId\", eperson.getID().toString())\n+                                     .param(\"sort\", \"endTime,asc\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", contains(\n+                            ProcessMatcher.matchProcess(newProcess3.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess3.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess2.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess2.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess1.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess1.getID(), parameters, ProcessStatus.SCHEDULED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 3))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserSortedOnEndTimeDesc() throws Exception {\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"10/01/1990\", \"20/01/1990\").build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"11/01/1990\", \"19/01/1990\").build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"12/01/1990\", \"18/01/1990\").build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"userId\", eperson.getID().toString())\n+                                     .param(\"sort\", \"endTime,desc\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", contains(\n+                            ProcessMatcher.matchProcess(newProcess1.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess1.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess2.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess2.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess3.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess3.getID(), parameters, ProcessStatus.SCHEDULED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 3))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserSortedOnMultipleBadRequest() throws Exception {\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"10/01/1990\", \"20/01/1990\").build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"11/01/1990\", \"19/01/1990\").build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"12/01/1990\", \"18/01/1990\").build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"userId\", eperson.getID().toString())\n+                                     .param(\"sort\", \"endTime,desc\")\n+                                     .param(\"sort\", \"startTime,desc\"))\n+                        .andExpect(status().isBadRequest());\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserSortedOnDefault() throws Exception {\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"10/01/1990\", \"20/01/1990\").build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"11/01/1990\", \"19/01/1990\").build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"12/01/1990\", \"18/01/1990\").build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"userId\", eperson.getID().toString())\n+                                     .param(\"sort\", \"startTime,desc\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", contains(\n+                            ProcessMatcher.matchProcess(newProcess3.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess3.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess2.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess2.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess1.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess1.getID(), parameters, ProcessStatus.SCHEDULED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 3))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserSortedOnNonExistingIsSortedAsDefault() throws Exception {\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"10/01/1990\", \"20/01/1990\").build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"11/01/1990\", \"19/01/1990\").build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"12/01/1990\", \"18/01/1990\").build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"userId\", eperson.getID().toString())\n+                                     .param(\"sort\", \"eaz,desc\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4389fa33c6f8257b1874c6ed4731aa98c80d676c"}, "originalPosition": 444}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc3MzY3Nw==", "bodyText": "I've indeed altered this to throw an exception instead in the tests: 13b59f9#diff-5c0eb5afe2a696f9d1a29faffc28ccc2R782", "url": "https://github.com/DSpace/DSpace/pull/2931#discussion_r484773677", "createdAt": "2020-09-08T09:17:58Z", "author": {"login": "Raf-atmire"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/ProcessRestRepositoryIT.java", "diffHunk": "@@ -322,6 +324,447 @@ public void getProcessFilesTypesRandomProcessId() throws Exception {\n \n     }\n \n+    @Test\n+    public void searchProcessTestForbidden() throws Exception {\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\"))\n+                        .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void searchProcessTestUnauthorized() throws Exception {\n+\n+        getClient().perform(get(\"/api/system/processes/search/byProperty\"))\n+                        .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUser() throws Exception {\n+        Process newProcess = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess4 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess5 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess6 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess7 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters).build();\n+        Process newProcess8 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters).build();\n+        Process newProcess9 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters).build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                .param(\"userId\", admin.getID().toString()))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", containsInAnyOrder(\n+                            ProcessMatcher.matchProcess(process.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        process.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess7.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess7.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess8.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess8.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess9.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess9.getID(), parameters, ProcessStatus.SCHEDULED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 4))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByProcessStatus() throws Exception {\n+        Process newProcess = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess4 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess5 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess6 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess7 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+        Process newProcess8 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters).build();\n+        Process newProcess9 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"processStatus\", \"FAILED\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", containsInAnyOrder(\n+                            ProcessMatcher.matchProcess(newProcess7.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess7.getID(), parameters, ProcessStatus.FAILED),\n+                            ProcessMatcher.matchProcess(newProcess9.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess9.getID(), parameters, ProcessStatus.FAILED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 2))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByScriptName() throws Exception {\n+        Process newProcess = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess4 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess5 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess6 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess7 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+        Process newProcess8 = ProcessBuilder.createProcess(context, admin, \"another-mock-script\", parameters).build();\n+        Process newProcess9 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"scriptName\", \"another-mock-script\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", containsInAnyOrder(\n+                            ProcessMatcher.matchProcess(newProcess8.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess8.getID(), parameters, ProcessStatus.SCHEDULED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 1))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByScriptNameAndUserId() throws Exception {\n+        Process newProcess = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess4 = ProcessBuilder.createProcess(context, eperson, \"another-mock-script\", parameters).build();\n+        Process newProcess5 = ProcessBuilder.createProcess(context, eperson, \"another-mock-script\", parameters).build();\n+        Process newProcess6 = ProcessBuilder.createProcess(context, eperson, \"another-mock-script\", parameters).build();\n+        Process newProcess7 = ProcessBuilder.createProcess(context, admin, \"another-mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+        Process newProcess8 = ProcessBuilder.createProcess(context, admin, \"another-mock-script\", parameters).build();\n+        Process newProcess9 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"scriptName\", \"another-mock-script\")\n+                                     .param(\"userId\", admin.getID().toString()))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", containsInAnyOrder(\n+                            ProcessMatcher.matchProcess(newProcess7.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess7.getID(), parameters, ProcessStatus.FAILED),\n+                            ProcessMatcher.matchProcess(newProcess8.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess8.getID(), parameters, ProcessStatus.SCHEDULED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 2))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserIdAndProcessStatus() throws Exception {\n+        Process newProcess = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+        Process newProcess4 = ProcessBuilder.createProcess(context, eperson, \"another-mock-script\", parameters).build();\n+        Process newProcess5 = ProcessBuilder.createProcess(context, eperson, \"another-mock-script\", parameters).build();\n+        Process newProcess6 = ProcessBuilder.createProcess(context, eperson, \"another-mock-script\", parameters).build();\n+        Process newProcess7 = ProcessBuilder.createProcess(context, admin, \"another-mock-script\", parameters).build();\n+        Process newProcess8 = ProcessBuilder.createProcess(context, admin, \"another-mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+        Process newProcess9 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"processStatus\", \"FAILED\")\n+                                     .param(\"userId\", admin.getID().toString()))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", containsInAnyOrder(\n+                            ProcessMatcher.matchProcess(newProcess9.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess9.getID(), parameters, ProcessStatus.FAILED),\n+                            ProcessMatcher.matchProcess(newProcess8.getName(),\n+                                                        String.valueOf(admin.getID().toString()),\n+                                                        newProcess8.getID(), parameters, ProcessStatus.FAILED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 2))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserIdAndProcessStatusAndScriptName() throws Exception {\n+        Process newProcess = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+        Process newProcess4 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters).build();\n+        Process newProcess5 = ProcessBuilder.createProcess(context, eperson, \"another-mock-script\", parameters).build();\n+        Process newProcess6 = ProcessBuilder.createProcess(context, eperson, \"another-mock-script\", parameters).build();\n+        Process newProcess7 = ProcessBuilder.createProcess(context, admin, \"another-mock-script\", parameters).build();\n+        Process newProcess8 = ProcessBuilder.createProcess(context, admin, \"another-mock-script\", parameters)\n+                                            .withProcessStatus(ProcessStatus.FAILED).build();\n+        Process newProcess9 = ProcessBuilder.createProcess(context, admin, \"mock-script\", parameters).build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"processStatus\", \"FAILED\")\n+                                     .param(\"userId\", eperson.getID().toString())\n+                                     .param(\"scriptName\", \"mock-script\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", containsInAnyOrder(\n+                            ProcessMatcher.matchProcess(\"mock-script\",\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess1.getID(), parameters, ProcessStatus.FAILED),\n+                            ProcessMatcher.matchProcess(\"mock-script\",\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess3.getID(), parameters, ProcessStatus.FAILED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 2))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestNoParametersBadRequest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\"))\n+                        .andExpect(status().isBadRequest());\n+    }\n+\n+    @Test\n+    public void searchProcessTestInvalidProcessStatusParamBadRequest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"processStatus\", \"SCHEDULED\"))\n+                        .andExpect(status().isBadRequest());\n+    }\n+\n+    @Test\n+    public void searchProcessTestInvalidEPersonUuid() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"userId\", UUID.randomUUID().toString()))\n+                        .andExpect(status().isBadRequest());\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserSortedOnStartTimeAsc() throws Exception {\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"10/01/1990\", \"20/01/1990\").build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"11/01/1990\", \"19/01/1990\").build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"12/01/1990\", \"18/01/1990\").build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"userId\", eperson.getID().toString())\n+                                    .param(\"sort\", \"startTime,asc\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", contains(\n+                            ProcessMatcher.matchProcess(newProcess1.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess1.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess2.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess2.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess3.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess3.getID(), parameters, ProcessStatus.SCHEDULED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 3))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserSortedOnStartTimeDesc() throws Exception {\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"10/01/1990\", \"20/01/1990\").build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"11/01/1990\", \"19/01/1990\").build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"12/01/1990\", \"18/01/1990\").build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"userId\", eperson.getID().toString())\n+                                     .param(\"sort\", \"startTime,desc\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", contains(\n+                            ProcessMatcher.matchProcess(newProcess3.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess3.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess2.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess2.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess1.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess1.getID(), parameters, ProcessStatus.SCHEDULED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 3))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserSortedOnEndTimeAsc() throws Exception {\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"10/01/1990\", \"20/01/1990\").build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"11/01/1990\", \"19/01/1990\").build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"12/01/1990\", \"18/01/1990\").build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"userId\", eperson.getID().toString())\n+                                     .param(\"sort\", \"endTime,asc\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", contains(\n+                            ProcessMatcher.matchProcess(newProcess3.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess3.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess2.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess2.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess1.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess1.getID(), parameters, ProcessStatus.SCHEDULED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 3))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserSortedOnEndTimeDesc() throws Exception {\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"10/01/1990\", \"20/01/1990\").build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"11/01/1990\", \"19/01/1990\").build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"12/01/1990\", \"18/01/1990\").build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"userId\", eperson.getID().toString())\n+                                     .param(\"sort\", \"endTime,desc\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", contains(\n+                            ProcessMatcher.matchProcess(newProcess1.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess1.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess2.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess2.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess3.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess3.getID(), parameters, ProcessStatus.SCHEDULED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 3))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserSortedOnMultipleBadRequest() throws Exception {\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"10/01/1990\", \"20/01/1990\").build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"11/01/1990\", \"19/01/1990\").build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"12/01/1990\", \"18/01/1990\").build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"userId\", eperson.getID().toString())\n+                                     .param(\"sort\", \"endTime,desc\")\n+                                     .param(\"sort\", \"startTime,desc\"))\n+                        .andExpect(status().isBadRequest());\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserSortedOnDefault() throws Exception {\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"10/01/1990\", \"20/01/1990\").build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"11/01/1990\", \"19/01/1990\").build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"12/01/1990\", \"18/01/1990\").build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"userId\", eperson.getID().toString())\n+                                     .param(\"sort\", \"startTime,desc\"))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.processes\", contains(\n+                            ProcessMatcher.matchProcess(newProcess3.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess3.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess2.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess2.getID(), parameters, ProcessStatus.SCHEDULED),\n+                            ProcessMatcher.matchProcess(newProcess1.getName(),\n+                                                        String.valueOf(eperson.getID().toString()),\n+                                                        newProcess1.getID(), parameters, ProcessStatus.SCHEDULED)\n+                        )))\n+                        .andExpect(jsonPath(\"$.page\", is(\n+                            PageMatcher.pageEntryWithTotalPagesAndElements(0, 20, 1, 3))));\n+    }\n+\n+    @Test\n+    public void searchProcessTestByUserSortedOnNonExistingIsSortedAsDefault() throws Exception {\n+        Process newProcess1 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"10/01/1990\", \"20/01/1990\").build();\n+        Process newProcess2 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"11/01/1990\", \"19/01/1990\").build();\n+        Process newProcess3 = ProcessBuilder.createProcess(context, eperson, \"mock-script\", parameters)\n+                                            .withStartAndEndTime(\"12/01/1990\", \"18/01/1990\").build();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/system/processes/search/byProperty\")\n+                                     .param(\"userId\", eperson.getID().toString())\n+                                     .param(\"sort\", \"eaz,desc\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkzMDU4MA=="}, "originalCommit": {"oid": "4389fa33c6f8257b1874c6ed4731aa98c80d676c"}, "originalPosition": 444}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1399, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}