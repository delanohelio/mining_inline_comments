{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2MzY1NDYw", "number": 2651, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNTozMzo1MlrODbQ9iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODoyNzo1OFrODlJ47A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5OTE2MDQxOnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/AuthenticationRestController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNTozMzo1MlrOFipiZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNTozMzo1MlrOFipiZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg3NjQ1Mg==", "bodyText": "Can you add inline comments explaining this is required for Angular to display the authentication options", "url": "https://github.com/DSpace/DSpace/pull/2651#discussion_r371876452", "createdAt": "2020-01-28T15:33:52Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/AuthenticationRestController.java", "diffHunk": "@@ -86,6 +92,12 @@ public AuthenticationStatusResource status(HttpServletRequest request) throws SQ\n         }\n \n         AuthenticationStatusRest authenticationStatusRest = new AuthenticationStatusRest(ePersonRest);\n+        if (!authenticationStatusRest.isAuthenticated()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c63b88141c70e998ee2c2c58521b5e952d693426"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5OTE4MDAwOnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/security/jwt/JWTTokenRestAuthenticationServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNTozODozMVrOFipuXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNTozODozMVrOFipuXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg3OTUxNw==", "bodyText": "Can you add inline info explaining we need authentication cookies because Shibboleth can't use the authentication headers due to the redirects", "url": "https://github.com/DSpace/DSpace/pull/2651#discussion_r371879517", "createdAt": "2020-01-28T15:38:31Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/security/jwt/JWTTokenRestAuthenticationServiceImpl.java", "diffHunk": "@@ -140,18 +155,40 @@ public String getWwwAuthenticateHeaderValue(final HttpServletRequest request, fi\n         return wwwAuthenticate.toString();\n     }\n \n-    private void addTokenToResponse(final HttpServletResponse response, final String token) throws IOException {\n+    private void addTokenToResponse(final HttpServletResponse response, final String token, final Boolean addCookie)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c63b88141c70e998ee2c2c58521b5e952d693426"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5OTIzNzgwOnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/security/jwt/JWTTokenRestAuthenticationServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNTo1MTo1M1rOFiqSlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNTo1MTo1M1rOFiqSlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg4ODc4OA==", "bodyText": "Please add setSecure. If necessary it can be explicitly configured to bypass setSecure for local development. But the default should enable setSecure", "url": "https://github.com/DSpace/DSpace/pull/2651#discussion_r371888788", "createdAt": "2020-01-28T15:51:53Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/security/jwt/JWTTokenRestAuthenticationServiceImpl.java", "diffHunk": "@@ -140,18 +155,40 @@ public String getWwwAuthenticateHeaderValue(final HttpServletRequest request, fi\n         return wwwAuthenticate.toString();\n     }\n \n-    private void addTokenToResponse(final HttpServletResponse response, final String token) throws IOException {\n+    private void addTokenToResponse(final HttpServletResponse response, final String token, final Boolean addCookie)\n+            throws IOException {\n+        if (addCookie) {\n+            Cookie cookie = new Cookie(AUTHORIZATION_COOKIE, token);\n+            cookie.setHttpOnly(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c63b88141c70e998ee2c2c58521b5e952d693426"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNDY4NDYxOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNDoyMzoyNVrOFmcxsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjoyMjo1MVrOFplp7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg2MTY4Mw==", "bodyText": "Please note that this property it's about to be changed to: dspace.server.url", "url": "https://github.com/DSpace/DSpace/pull/2651#discussion_r375861683", "createdAt": "2020-02-06T14:23:25Z", "author": {"login": "paulo-graca"}, "path": "dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java", "diffHunk": "@@ -509,19 +510,17 @@ public String loginPageURL(Context context, HttpServletRequest request, HttpServ\n             int port = request.getServerPort();\n             String contextPath = request.getContextPath();\n \n-            String returnURL = request.getHeader(\"Referer\");\n-            if (returnURL == null) {\n-                if (request.isSecure() || forceHTTPS) {\n-                    returnURL = \"https://\";\n-                } else {\n-                    returnURL = \"http://\";\n-                }\n-                returnURL += host;\n-                if (!(port == 443 || port == 80)) {\n-                    returnURL += \":\" + port;\n-                }\n+            String redirectUrl = null;\n+            if (request.getHeader(\"Referer\") != null && StringUtils.isNotBlank(request.getHeader(\"Referer\"))) {\n+                redirectUrl = request.getHeader(\"Referer\");\n+            } else if (request.getHeader(\"X-Requested-With\") != null\n+                    && StringUtils.isNotBlank(request.getHeader(\"X-Requested-With\"))) {\n+                redirectUrl = request.getHeader(\"X-Requested-With\");\n             }\n \n+            String returnURL = ConfigurationManager.getProperty(\"dspace.baseUrl\") + \"/api/authn/shibboleth\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc439d34719421c2003f761693a7220a573556df"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1Mjg3OQ==", "bodyText": "Yes, this config now needs to be updated to dspace.server.url, as #2657 was merged.  This also should use configurationService.getProperty() instead of the ConfigurationManager", "url": "https://github.com/DSpace/DSpace/pull/2651#discussion_r379152879", "createdAt": "2020-02-13T22:22:51Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java", "diffHunk": "@@ -509,19 +510,17 @@ public String loginPageURL(Context context, HttpServletRequest request, HttpServ\n             int port = request.getServerPort();\n             String contextPath = request.getContextPath();\n \n-            String returnURL = request.getHeader(\"Referer\");\n-            if (returnURL == null) {\n-                if (request.isSecure() || forceHTTPS) {\n-                    returnURL = \"https://\";\n-                } else {\n-                    returnURL = \"http://\";\n-                }\n-                returnURL += host;\n-                if (!(port == 443 || port == 80)) {\n-                    returnURL += \":\" + port;\n-                }\n+            String redirectUrl = null;\n+            if (request.getHeader(\"Referer\") != null && StringUtils.isNotBlank(request.getHeader(\"Referer\"))) {\n+                redirectUrl = request.getHeader(\"Referer\");\n+            } else if (request.getHeader(\"X-Requested-With\") != null\n+                    && StringUtils.isNotBlank(request.getHeader(\"X-Requested-With\"))) {\n+                redirectUrl = request.getHeader(\"X-Requested-With\");\n             }\n \n+            String returnURL = ConfigurationManager.getProperty(\"dspace.baseUrl\") + \"/api/authn/shibboleth\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg2MTY4Mw=="}, "originalCommit": {"oid": "cc439d34719421c2003f761693a7220a573556df"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNDczODc2OnYy", "diffSide": "RIGHT", "path": "dspace/config/modules/authentication-shibboleth.cfg", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNDozODoxNlrOFmdTwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMDoyMTowOVrOFrin9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg3MDQwMQ==", "bodyText": "Please note that this property it's about to be changed to: dspace.server.url", "url": "https://github.com/DSpace/DSpace/pull/2651#discussion_r375870401", "createdAt": "2020-02-06T14:38:16Z", "author": {"login": "paulo-graca"}, "path": "dspace/config/modules/authentication-shibboleth.cfg", "diffHunk": "@@ -38,7 +38,7 @@\n authentication-shibboleth.lazysession = true\n \n # The url to start a shibboleth session (only for lazy sessions)\n-authentication-shibboleth.lazysession.loginurl = /Shibboleth.sso/Login\n+authentication-shibboleth.lazysession.loginurl = ${dspace.baseUrl}/Shibboleth.sso/Login", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc439d34719421c2003f761693a7220a573556df"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI4MDAxOQ==", "bodyText": "We have to be careful which property is used here. It should not redirect to /server/Shibboleth.sso/Login (which it currently does in my installation)\nI'd recommend to revisit this once #2657 is merged because there's a risk the URL is invalid", "url": "https://github.com/DSpace/DSpace/pull/2651#discussion_r376280019", "createdAt": "2020-02-07T09:02:26Z", "author": {"login": "benbosman"}, "path": "dspace/config/modules/authentication-shibboleth.cfg", "diffHunk": "@@ -38,7 +38,7 @@\n authentication-shibboleth.lazysession = true\n \n # The url to start a shibboleth session (only for lazy sessions)\n-authentication-shibboleth.lazysession.loginurl = /Shibboleth.sso/Login\n+authentication-shibboleth.lazysession.loginurl = ${dspace.baseUrl}/Shibboleth.sso/Login", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg3MDQwMQ=="}, "originalCommit": {"oid": "cc439d34719421c2003f761693a7220a573556df"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1NjUyNw==", "bodyText": "@atarix83 : I'm unclear why this change is needed.  If we leave this setting as it was (authentication-shibboleth.lazysession.loginurl = /Shibboleth.sso/Login), that should cause the redirect to be to the servlet container root path.  That means if you were running DSpace REST API at http://localhost:8080/server/ then the path \"/Shibbboleth.sso/Login\" should cause the redirect to be to http://localhost:8080/Shibboleth.sso/Login.\nI believe that's how this setting worked in DSpace 6 and it also is how relative paths are described to work in HttpServletResponse.sendRedirect(): https://tomcat.apache.org/tomcat-8.5-doc/servletapi/javax/servlet/http/HttpServletResponse.html?is-external=true#sendRedirect(java.lang.String)  (This is the method that ultimately gets called with this relative URL)\nSo, I guess I'm asking why we need to turn this configuration into an absolute/full URL, as it worked previously as a relative URL?", "url": "https://github.com/DSpace/DSpace/pull/2651#discussion_r379156527", "createdAt": "2020-02-13T22:31:30Z", "author": {"login": "tdonohue"}, "path": "dspace/config/modules/authentication-shibboleth.cfg", "diffHunk": "@@ -38,7 +38,7 @@\n authentication-shibboleth.lazysession = true\n \n # The url to start a shibboleth session (only for lazy sessions)\n-authentication-shibboleth.lazysession.loginurl = /Shibboleth.sso/Login\n+authentication-shibboleth.lazysession.loginurl = ${dspace.baseUrl}/Shibboleth.sso/Login", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg3MDQwMQ=="}, "originalCommit": {"oid": "cc439d34719421c2003f761693a7220a573556df"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIwMDM3Mg==", "bodyText": "In DSpace 7, the difference is that the hostname of REST and Angular may differ\nWhen logging in from the Angular UI, Angular should link to https://dspace7-rest/Shibboleth.sso/Login (not https://dspace7-rest/server/Shibboleth.sso/Login nor https://dspace7-angular/Shibboleth.sso/Login)\nAt this point in time, this would requiring taking ${dspace.server.url}, stripping the context path off, and adding /Shibboleth.sso/Login to it. That makes it hard to configure", "url": "https://github.com/DSpace/DSpace/pull/2651#discussion_r381200372", "createdAt": "2020-02-19T10:21:09Z", "author": {"login": "benbosman"}, "path": "dspace/config/modules/authentication-shibboleth.cfg", "diffHunk": "@@ -38,7 +38,7 @@\n authentication-shibboleth.lazysession = true\n \n # The url to start a shibboleth session (only for lazy sessions)\n-authentication-shibboleth.lazysession.loginurl = /Shibboleth.sso/Login\n+authentication-shibboleth.lazysession.loginurl = ${dspace.baseUrl}/Shibboleth.sso/Login", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg3MDQwMQ=="}, "originalCommit": {"oid": "cc439d34719421c2003f761693a7220a573556df"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTg5ODQ1OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjozNzowN1rOFpmAjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjozNzowN1rOFpmAjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1ODY3MA==", "bodyText": "Just a note here. You shouldn't need to import the ConfigurationManager, as this class already has access to the ConfigurationService.  The ConfigurationManager is deprecated in favor of the ConfigurationService.  So, you should remove this import and just use configurationService instead.", "url": "https://github.com/DSpace/DSpace/pull/2651#discussion_r379158670", "createdAt": "2020-02-13T22:37:07Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java", "diffHunk": "@@ -33,6 +33,7 @@\n import org.dspace.content.factory.ContentServiceFactory;\n import org.dspace.content.service.MetadataFieldService;\n import org.dspace.content.service.MetadataSchemaService;\n+import org.dspace.core.ConfigurationManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c65bb086ef6777b27bf8b4a112ccfefca7e14ecb"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTkwMjYwOnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/ShibbolethRestController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjozODo1NVrOFpmDLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjozODo1NVrOFpmDLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE1OTM0Mw==", "bodyText": "This configuration needs updating as well to be dspace.ui.url.  Also, you should use ConfigurationService (which can be @Autowired like other services)", "url": "https://github.com/DSpace/DSpace/pull/2651#discussion_r379159343", "createdAt": "2020-02-13T22:38:55Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/ShibbolethRestController.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.dspace.app.rest.model.AuthnRest;\n+import org.dspace.core.ConfigurationManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.hateoas.Link;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+/**\n+ * Rest controller that handles redirect after shibboleth authentication succeded\n+ *\n+ * @author Andrea Bollini (andrea dot bollini at 4science dot it)\n+ * @author Giuseppe Digilio (giuseppe dot digilio at 4science dot it)\n+ */\n+@RequestMapping(value = \"/api/\" + AuthnRest.CATEGORY + \"/shibboleth\")\n+@RestController\n+public class ShibbolethRestController implements InitializingBean {\n+\n+    private static final Logger log = LoggerFactory.getLogger(ShibbolethRestController.class);\n+\n+    @Autowired\n+    DiscoverableEndpointsService discoverableEndpointsService;\n+\n+    @Override\n+    public void afterPropertiesSet() {\n+        discoverableEndpointsService\n+            .register(this, Arrays.asList(new Link(\"/api/\" + AuthnRest.CATEGORY, \"shibboleth\")));\n+    }\n+\n+    @RequestMapping(method = RequestMethod.GET)\n+    public void shibboleth(HttpServletResponse response,\n+            @RequestParam(name = \"redirectUrl\", required = false) String redirectUrl) throws IOException {\n+        if (redirectUrl == null) {\n+            redirectUrl = ConfigurationManager.getProperty(\"dspace.url\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c65bb086ef6777b27bf8b4a112ccfefca7e14ecb"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NzYzOTE0OnYy", "diffSide": "RIGHT", "path": "dspace/config/modules/authentication-shibboleth.cfg", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMzoyNjoyOVrOFp2dlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMDoxMjowMVrOFriUJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQyODI0NA==", "bodyText": "A logout configuration can be added to specify the path\nauthentication-shibboleth.lazysession.logouturl = ${dspace.baseUrl}/Shibboleth.sso/Logout", "url": "https://github.com/DSpace/DSpace/pull/2651#discussion_r379428244", "createdAt": "2020-02-14T13:26:29Z", "author": {"login": "paulo-graca"}, "path": "dspace/config/modules/authentication-shibboleth.cfg", "diffHunk": "@@ -38,7 +38,7 @@\n authentication-shibboleth.lazysession = true\n \n # The url to start a shibboleth session (only for lazy sessions)\n-authentication-shibboleth.lazysession.loginurl = /Shibboleth.sso/Login\n+authentication-shibboleth.lazysession.loginurl = ${dspace.baseUrl}/Shibboleth.sso/Login", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c65bb086ef6777b27bf8b4a112ccfefca7e14ecb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE5NTMwMA==", "bodyText": "If it's not specified, it would be a local-only logout.\nThis will leave at least system administrators with the choice on how to setup their DSpace (based on policies)\nThis would be a redirect", "url": "https://github.com/DSpace/DSpace/pull/2651#discussion_r381195300", "createdAt": "2020-02-19T10:12:01Z", "author": {"login": "benbosman"}, "path": "dspace/config/modules/authentication-shibboleth.cfg", "diffHunk": "@@ -38,7 +38,7 @@\n authentication-shibboleth.lazysession = true\n \n # The url to start a shibboleth session (only for lazy sessions)\n-authentication-shibboleth.lazysession.loginurl = /Shibboleth.sso/Login\n+authentication-shibboleth.lazysession.loginurl = ${dspace.baseUrl}/Shibboleth.sso/Login", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQyODI0NA=="}, "originalCommit": {"oid": "c65bb086ef6777b27bf8b4a112ccfefca7e14ecb"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzA2NzU3OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/security/CustomLogoutHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNDoxOTozM1rOFqmCZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNDoxOTozM1rOFqmCZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIwNzcxOQ==", "bodyText": "A verification can be used to identify if the current session is a shibboleth session and then call the configured logout parameter", "url": "https://github.com/DSpace/DSpace/pull/2651#discussion_r380207719", "createdAt": "2020-02-17T14:19:33Z", "author": {"login": "paulo-graca"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/security/CustomLogoutHandler.java", "diffHunk": "@@ -45,7 +45,7 @@ public void logout(HttpServletRequest httpServletRequest, HttpServletResponse ht\n                        Authentication authentication) {\n         try {\n             Context context = ContextUtil.obtainContext(httpServletRequest);\n-            restAuthenticationService.invalidateAuthenticationData(httpServletRequest, context);\n+            restAuthenticationService.invalidateAuthenticationData(httpServletRequest, httpServletResponse, context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c65bb086ef6777b27bf8b4a112ccfefca7e14ecb"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjgzOTc0OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODoyMjoxMlrOFx4a6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODo0MjoxMFrOF2OpZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0ODkzNw==", "bodyText": "A small comment.  You don't need to do all this string parsing of shibURL, as the ConfigurationService is much \"smarter\" than the old ConfigurationManager.  The string will already be trimmed.  Additionally, the if just before this is unneeded, as you can pass in a default value if it's unspecified.  So, both the if and the trim() can be removed in favor of just calling\nString shibURL = configurationService.getProperty(\"authentication-shibboleth.lazysession.loginurl\", \"/Shibboleth.sso/Login\");", "url": "https://github.com/DSpace/DSpace/pull/2651#discussion_r387848937", "createdAt": "2020-03-04T18:22:12Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java", "diffHunk": "@@ -1258,6 +1246,28 @@ protected String findSingleAttribute(HttpServletRequest request, String name) {\n         return valueList;\n     }\n \n+    private String getShibURL(HttpServletRequest request) {\n+        String shibURL = configurationService.getProperty(\"authentication-shibboleth.lazysession.loginurl\");\n+        boolean forceHTTPS =\n+                configurationService.getBooleanProperty(\"authentication-shibboleth.lazysession.secure\",true);\n+\n+        // Shibboleth authentication initiator\n+        if (shibURL == null || shibURL.length() == 0) {\n+            shibURL = \"/Shibboleth.sso/Login\";\n+        }\n+        shibURL = shibURL.trim();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a49bf4b3430eab3c695afeeb2f941809e1ce8e16"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQwNzM5Nw==", "bodyText": "done", "url": "https://github.com/DSpace/DSpace/pull/2651#discussion_r392407397", "createdAt": "2020-03-13T18:42:10Z", "author": {"login": "atarix83"}, "path": "dspace-api/src/main/java/org/dspace/authenticate/ShibAuthentication.java", "diffHunk": "@@ -1258,6 +1246,28 @@ protected String findSingleAttribute(HttpServletRequest request, String name) {\n         return valueList;\n     }\n \n+    private String getShibURL(HttpServletRequest request) {\n+        String shibURL = configurationService.getProperty(\"authentication-shibboleth.lazysession.loginurl\");\n+        boolean forceHTTPS =\n+                configurationService.getBooleanProperty(\"authentication-shibboleth.lazysession.secure\",true);\n+\n+        // Shibboleth authentication initiator\n+        if (shibURL == null || shibURL.length() == 0) {\n+            shibURL = \"/Shibboleth.sso/Login\";\n+        }\n+        shibURL = shibURL.trim();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0ODkzNw=="}, "originalCommit": {"oid": "a49bf4b3430eab3c695afeeb2f941809e1ce8e16"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjg1OTMyOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/test/java/org/dspace/core/UtilsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODoyNzo1OFrOFx4nJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxODo0Mjo1MFrOF2OqhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg1MjA3MA==", "bodyText": "@atarix83  What would happen if the Base URL includes a port number?  While it's less frequently seen, I have seen sites that run their DSpace on port 8080, for example.  It looks to me like Utils.getBaseUrl() would fail if the port is not either 80 (HTTP) or 443 (HTTPS)", "url": "https://github.com/DSpace/DSpace/pull/2651#discussion_r387852070", "createdAt": "2020-03-04T18:27:58Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/test/java/org/dspace/core/UtilsTest.java", "diffHunk": "@@ -22,6 +22,27 @@\n  */\n public class UtilsTest extends AbstractUnitTest {\n \n+    /**\n+     * Test of getBaseUrl method, of class Utils\n+     */\n+    @Test\n+    public void testGetBaseUrl() {\n+        assertEquals(\"Test remove /server\", \"http://dspace.org\",\n+                     Utils.getBaseUrl(\"http://dspace.org/server\"));\n+\n+        assertEquals(\"Test remove /server/api/core/items\", \"https://dspace.org\",\n+                     Utils.getBaseUrl(\"https://dspace.org/server/api/core/items\"));\n+\n+        assertEquals(\"Test remove trailing slash\", \"https://dspace.org\",\n+                     Utils.getBaseUrl(\"https://dspace.org/\"));\n+\n+        assertEquals(\"Test keep url\", \"https://demo.dspace.org\",\n+                     Utils.getBaseUrl(\"https://demo.dspace.org\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a49bf4b3430eab3c695afeeb2f941809e1ce8e16"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQwNzY4NA==", "bodyText": "added compatibility with url that contains port", "url": "https://github.com/DSpace/DSpace/pull/2651#discussion_r392407684", "createdAt": "2020-03-13T18:42:50Z", "author": {"login": "atarix83"}, "path": "dspace-api/src/test/java/org/dspace/core/UtilsTest.java", "diffHunk": "@@ -22,6 +22,27 @@\n  */\n public class UtilsTest extends AbstractUnitTest {\n \n+    /**\n+     * Test of getBaseUrl method, of class Utils\n+     */\n+    @Test\n+    public void testGetBaseUrl() {\n+        assertEquals(\"Test remove /server\", \"http://dspace.org\",\n+                     Utils.getBaseUrl(\"http://dspace.org/server\"));\n+\n+        assertEquals(\"Test remove /server/api/core/items\", \"https://dspace.org\",\n+                     Utils.getBaseUrl(\"https://dspace.org/server/api/core/items\"));\n+\n+        assertEquals(\"Test remove trailing slash\", \"https://dspace.org\",\n+                     Utils.getBaseUrl(\"https://dspace.org/\"));\n+\n+        assertEquals(\"Test keep url\", \"https://demo.dspace.org\",\n+                     Utils.getBaseUrl(\"https://demo.dspace.org\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg1MjA3MA=="}, "originalCommit": {"oid": "a49bf4b3430eab3c695afeeb2f941809e1ce8e16"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1610, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}