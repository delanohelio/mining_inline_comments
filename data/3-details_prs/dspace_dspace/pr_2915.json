{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyNTkwNjcw", "number": 2915, "title": "[Issue: 2822] Metadata import email parameter changes", "bodyText": "References\n\nFixes GitHub issue\n\nDescription\nThis PR will remove the \"email\" option from the REST metadata-import script. The email parameter is still available (& mandatory) for the CLI implementation of this script. The REST implementation of the metadata-import script will use the currently logged in user to execute the script.\nInstructions for Reviewers\nRetrieve the configuration of the REST metadata-import script, the email option should not be available here. In the CLI the option will be present & will be mandatory.\nChecklist\nThis checklist provides a reminder of what we are going to look for when reviewing your PR. You need not complete this checklist prior to creating your PR (draft PRs are always welcome). If you are unsure about an item in the checklist, don't hesitate to ask. We're here to help!\n\n My PR is small in size (e.g. less than 1,000 lines of code, not including comments & integration tests). Exceptions may be made if previously agreed upon.\n My PR passes Checkstyle validation based on the Code Style Guide.\n My PR includes Javadoc for all new (or modified) public methods and classes. It also includes Javadoc for large or complex private methods.\n My PR passes all tests and includes new/updated Unit or Integration Tests based on the Code Testing Guide.\n If my PR includes new, third-party dependencies (in any pom.xml), I've made sure their licenses align with the DSpace BSD License based on the Licensing of Contributions documentation.\n If my PR modifies the REST API, I've linked to the REST Contract page (or open PR) related to this change.", "createdAt": "2020-08-04T07:43:26Z", "url": "https://github.com/DSpace/DSpace/pull/2915", "merged": true, "mergeCommit": {"oid": "0cfd4855acf5a2f8e6c961a185c5ec3958aa1d6f"}, "closed": true, "closedAt": "2020-08-20T21:37:56Z", "author": {"login": "Atmire-github"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5XHyIgH2gAyNDYyNTkwNjcwOmJiZGM0N2ZiYmYxZjQ1OGEzMzExOTAwZTEyYTczMzhhODZkNTZhM2Y=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdA3M2bgFqTQ3MjAwMjk1OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bbdc47fbbf1f458a3311900e12a7338a86d56a3f", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/bbdc47fbbf1f458a3311900e12a7338a86d56a3f", "committedDate": "2020-07-28T14:16:05Z", "message": "[Task 72215] removed the eperson flag from the REST metadata import script whilst leaving cli unaltered"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8df7e572b53550103c2969f6e4f64d83dfd85338", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/8df7e572b53550103c2969f6e4f64d83dfd85338", "committedDate": "2020-07-29T07:05:13Z", "message": "[Task 72215] small bugfix in MetadataImport scripts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f384deca7863240d095dfb4ad473c035302b21a", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/8f384deca7863240d095dfb4ad473c035302b21a", "committedDate": "2020-07-30T13:58:54Z", "message": "[Task 72215] made sure that the script rest calls in tests are single threaded and fixed CsvImportIT tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd63d6216e88ee3299f5872ff489a672510ee39c", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/fd63d6216e88ee3299f5872ff489a672510ee39c", "committedDate": "2020-07-31T09:39:22Z", "message": "[Task 72215] moved CSVMetadataImportreferenceIT to the dspace-api module and fixed tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ea393570969737e7c7ee5ca97177086055d0c1a", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/7ea393570969737e7c7ee5ca97177086055d0c1a", "committedDate": "2020-07-31T09:42:45Z", "message": "[Task 72215] minor cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f3c8f65199504cdfc1b1eaa743797e543c5b143", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/9f3c8f65199504cdfc1b1eaa743797e543c5b143", "committedDate": "2020-08-06T09:09:48Z", "message": "Merge remote-tracking branch 'dspace/main' into w2p-72215_metadataimport-email-parameter\n\nConflicts:\n\tdspace-api/src/test/java/org/dspace/app/bulkedit/MetadataImportTest.java\n\tdspace-api/src/test/java/org/dspace/app/csv/CSVMetadataImportReferenceIT.java\n\tdspace-server-webapp/src/test/java/org/dspace/app/rest/csv/CsvImportIT.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "362064f76f516c289f4c80eb7509a5f3e7cf8b67", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/362064f76f516c289f4c80eb7509a5f3e7cf8b67", "committedDate": "2020-08-06T09:10:00Z", "message": "[Task 72215] fixing issues after merge"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNDA5OTYx", "url": "https://github.com/DSpace/DSpace/pull/2915#pullrequestreview-463409961", "createdAt": "2020-08-07T15:35:59Z", "commit": {"oid": "362064f76f516c289f4c80eb7509a5f3e7cf8b67"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTozNTo1OVrOG9efVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTo0MzoyOVrOG9evVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzExNTg2Mw==", "bodyText": "We should be using Builder classes in this setup() method to create all new content.  That would mean that we can completely remove the destroy() class (as Builders cleanup after themselves).\nIt looks like the old code in this setup() used Builders, but you've replaced/removed that code.  Please revert back to using Builders again to create the Community, Collection (see above) and all Entities (see below).\nIf you rebase on main, the Builder classes are now available in dspace-api.", "url": "https://github.com/DSpace/DSpace/pull/2915#discussion_r467115863", "createdAt": "2020-08-07T15:35:59Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/test/java/org/dspace/app/csv/CSVMetadataImportReferenceIT.java", "diffHunk": "@@ -19,54 +19,132 @@\n import java.util.List;\n import java.util.UUID;\n \n+import org.dspace.AbstractIntegrationTest;\n import org.dspace.app.bulkedit.MetadataImportException;\n import org.dspace.app.bulkedit.MetadataImportInvalidHeadingException;\n-import org.dspace.app.rest.test.AbstractEntityIntegrationTest;\n-import org.dspace.builder.CollectionBuilder;\n-import org.dspace.builder.CommunityBuilder;\n-import org.dspace.builder.ItemBuilder;\n+import org.dspace.app.scripts.handler.impl.TestDSpaceRunnableHandler;\n+import org.dspace.authorize.AuthorizeException;\n import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.EntityType;\n import org.dspace.content.Item;\n import org.dspace.content.MetadataField;\n import org.dspace.content.MetadataValue;\n import org.dspace.content.Relationship;\n+import org.dspace.content.WorkspaceItem;\n import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.dspace.content.service.EntityTypeService;\n+import org.dspace.content.service.InstallItemService;\n import org.dspace.content.service.ItemService;\n import org.dspace.content.service.MetadataFieldService;\n import org.dspace.content.service.MetadataValueService;\n import org.dspace.content.service.RelationshipService;\n+import org.dspace.content.service.RelationshipTypeService;\n+import org.dspace.content.service.WorkspaceItemService;\n+import org.dspace.scripts.DSpaceRunnable;\n+import org.dspace.scripts.configuration.ScriptConfiguration;\n+import org.dspace.scripts.factory.ScriptServiceFactory;\n+import org.dspace.scripts.service.ScriptService;\n+import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n \n /**\n  * Created by: Andrew Wood\n  * Date: 26 Jul 2019\n  */\n-public class CSVMetadataImportReferenceIT extends AbstractEntityIntegrationTest {\n+public class CSVMetadataImportReferenceIT extends AbstractIntegrationTest {\n \n     //Common collection to utilize for test\n     private Collection col1;\n \n-    @Autowired\n-    private RelationshipService relationshipService;\n+    private RelationshipService relationshipService = ContentServiceFactory.getInstance().getRelationshipService();\n+    private ItemService itemService = ContentServiceFactory.getInstance().getItemService();\n+    private CollectionService collectionService = ContentServiceFactory.getInstance().getCollectionService();\n+    private CommunityService communityService = ContentServiceFactory.getInstance().getCommunityService();\n+    private WorkspaceItemService workspaceItemService = ContentServiceFactory.getInstance().getWorkspaceItemService();\n+    private InstallItemService installItemService = ContentServiceFactory.getInstance().getInstallItemService();\n+    private EntityTypeService entityTypeService = ContentServiceFactory.getInstance().getEntityTypeService();\n+    private RelationshipTypeService relationshipTypeService = ContentServiceFactory.getInstance()\n+                                                                                   .getRelationshipTypeService();\n \n-    @Autowired\n-    private ItemService itemService;\n+\n+    Community parentCommunity;\n \n     /**\n      * Setup testing enviorment\n      */\n     @Before\n-    public void setup() {\n+    public void setup() throws SQLException, AuthorizeException {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = communityService.create(null, context);\n+        communityService.addMetadata(context, parentCommunity, \"dc\", \"title\", null, null, \"Parent Community\");\n+\n+        col1 = collectionService.create(context, parentCommunity);\n+        collectionService.addMetadata(context, col1, \"dc\", \"title\", null, null, \"Collection 1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "362064f76f516c289f4c80eb7509a5f3e7cf8b67"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzExNjA5MQ==", "bodyText": "Once you are using Builders, this entire destroy() method can be removed.", "url": "https://github.com/DSpace/DSpace/pull/2915#discussion_r467116091", "createdAt": "2020-08-07T15:36:21Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/test/java/org/dspace/app/csv/CSVMetadataImportReferenceIT.java", "diffHunk": "@@ -19,54 +19,132 @@\n import java.util.List;\n import java.util.UUID;\n \n+import org.dspace.AbstractIntegrationTest;\n import org.dspace.app.bulkedit.MetadataImportException;\n import org.dspace.app.bulkedit.MetadataImportInvalidHeadingException;\n-import org.dspace.app.rest.test.AbstractEntityIntegrationTest;\n-import org.dspace.builder.CollectionBuilder;\n-import org.dspace.builder.CommunityBuilder;\n-import org.dspace.builder.ItemBuilder;\n+import org.dspace.app.scripts.handler.impl.TestDSpaceRunnableHandler;\n+import org.dspace.authorize.AuthorizeException;\n import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.EntityType;\n import org.dspace.content.Item;\n import org.dspace.content.MetadataField;\n import org.dspace.content.MetadataValue;\n import org.dspace.content.Relationship;\n+import org.dspace.content.WorkspaceItem;\n import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.dspace.content.service.EntityTypeService;\n+import org.dspace.content.service.InstallItemService;\n import org.dspace.content.service.ItemService;\n import org.dspace.content.service.MetadataFieldService;\n import org.dspace.content.service.MetadataValueService;\n import org.dspace.content.service.RelationshipService;\n+import org.dspace.content.service.RelationshipTypeService;\n+import org.dspace.content.service.WorkspaceItemService;\n+import org.dspace.scripts.DSpaceRunnable;\n+import org.dspace.scripts.configuration.ScriptConfiguration;\n+import org.dspace.scripts.factory.ScriptServiceFactory;\n+import org.dspace.scripts.service.ScriptService;\n+import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n-import org.springframework.beans.factory.annotation.Autowired;\n \n /**\n  * Created by: Andrew Wood\n  * Date: 26 Jul 2019\n  */\n-public class CSVMetadataImportReferenceIT extends AbstractEntityIntegrationTest {\n+public class CSVMetadataImportReferenceIT extends AbstractIntegrationTest {\n \n     //Common collection to utilize for test\n     private Collection col1;\n \n-    @Autowired\n-    private RelationshipService relationshipService;\n+    private RelationshipService relationshipService = ContentServiceFactory.getInstance().getRelationshipService();\n+    private ItemService itemService = ContentServiceFactory.getInstance().getItemService();\n+    private CollectionService collectionService = ContentServiceFactory.getInstance().getCollectionService();\n+    private CommunityService communityService = ContentServiceFactory.getInstance().getCommunityService();\n+    private WorkspaceItemService workspaceItemService = ContentServiceFactory.getInstance().getWorkspaceItemService();\n+    private InstallItemService installItemService = ContentServiceFactory.getInstance().getInstallItemService();\n+    private EntityTypeService entityTypeService = ContentServiceFactory.getInstance().getEntityTypeService();\n+    private RelationshipTypeService relationshipTypeService = ContentServiceFactory.getInstance()\n+                                                                                   .getRelationshipTypeService();\n \n-    @Autowired\n-    private ItemService itemService;\n+\n+    Community parentCommunity;\n \n     /**\n      * Setup testing enviorment\n      */\n     @Before\n-    public void setup() {\n+    public void setup() throws SQLException, AuthorizeException {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = communityService.create(null, context);\n+        communityService.addMetadata(context, parentCommunity, \"dc\", \"title\", null, null, \"Parent Community\");\n+\n+        col1 = collectionService.create(context, parentCommunity);\n+        collectionService.addMetadata(context, col1, \"dc\", \"title\", null, null, \"Collection 1\");\n+\n+        if (entityTypeService.findAll(context).size() > 0) {\n+            //Don't initialize the setup more than once\n+            return;\n+        }\n+\n         context.turnOffAuthorisationSystem();\n-        parentCommunity = CommunityBuilder.createCommunity(context)\n-                                          .withName(\"Parent Community\")\n-                                          .build();\n-        col1 = CollectionBuilder.createCollection(context, parentCommunity).withName(\"Collection 1\").build();\n+\n+        EntityType publicationEntityType = entityTypeService.create(context, \"Publication\");\n+        EntityType personEntityType = entityTypeService.create(context, \"Person\");\n+        EntityType orgUnitType = entityTypeService.create(context, \"OrgUnit\");\n+        EntityType projectType = entityTypeService.create(context, \"Project\");\n+        relationshipTypeService\n+            .create(context, publicationEntityType, personEntityType, \"isAuthorOfPublication\", \"isPublicationOfAuthor\",\n+                    null, null, null, null);\n+        relationshipTypeService\n+            .create(context, publicationEntityType, projectType, \"isProjectOfPublication\", \"isPublicationOfProject\", 0,\n+                    null, 0, null, false, true);\n+\n+        context.restoreAuthSystemState();\n+\n         context.restoreAuthSystemState();\n     }\n \n+    @After\n+    @Override\n+    public void destroy() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "362064f76f516c289f4c80eb7509a5f3e7cf8b67"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzExNjcxMA==", "bodyText": "Again, remove this new code and revert to using the ItemBuilder class.  We require Builders.", "url": "https://github.com/DSpace/DSpace/pull/2915#discussion_r467116710", "createdAt": "2020-08-07T15:37:31Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/test/java/org/dspace/app/csv/CSVMetadataImportReferenceIT.java", "diffHunk": "@@ -175,12 +253,13 @@ public void testMultiRowNameRef() throws Exception {\n     @Test\n     public void testSingleUUIDReference() throws Exception {\n         context.turnOffAuthorisationSystem();\n-        Item person = ItemBuilder.createItem(context, col1)\n-                                 .withRelationshipType(\"Person\")\n-                                 .build();\n+        WorkspaceItem workspaceItem = workspaceItemService.create(context, col1, false);\n+        Item person = installItemService.installItem(context, workspaceItem);\n+        itemService.addMetadata(context, person, \"relationship\", \"type\", null, null, \"Person\");\n+        itemService.update(context, person);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "362064f76f516c289f4c80eb7509a5f3e7cf8b67"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzExNzI4OA==", "bodyText": "Same here, revert to using Builders again", "url": "https://github.com/DSpace/DSpace/pull/2915#discussion_r467117288", "createdAt": "2020-08-07T15:38:34Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/test/java/org/dspace/app/csv/CSVMetadataImportReferenceIT.java", "diffHunk": "@@ -192,12 +271,14 @@ public void testSingleUUIDReference() throws Exception {\n     @Test\n     public void testMultiUUIDReference() throws Exception {\n         context.turnOffAuthorisationSystem();\n-        Item person = ItemBuilder.createItem(context, col1)\n-                                 .withRelationshipType(\"Person\")\n-                                 .build();\n-        Item person2 = ItemBuilder.createItem(context, col1)\n-                                  .withRelationshipType(\"Person\")\n-                                  .build();\n+        WorkspaceItem workspaceItem = workspaceItemService.create(context, col1, false);\n+        Item person = installItemService.installItem(context, workspaceItem);\n+        itemService.addMetadata(context, person, \"relationship\", \"type\", null, null, \"Person\");\n+        itemService.update(context, person);\n+        WorkspaceItem workspaceItem2 = workspaceItemService.create(context, col1, false);\n+        Item person2 = installItemService.installItem(context, workspaceItem2);\n+        itemService.addMetadata(context, person2, \"relationship\", \"type\", null, null, \"Person\");\n+        itemService.update(context, person2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "362064f76f516c289f4c80eb7509a5f3e7cf8b67"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzExNzQ1MQ==", "bodyText": "Same here, revert to using Builders again", "url": "https://github.com/DSpace/DSpace/pull/2915#discussion_r467117451", "createdAt": "2020-08-07T15:38:52Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/test/java/org/dspace/app/csv/CSVMetadataImportReferenceIT.java", "diffHunk": "@@ -214,14 +295,16 @@ public void testMultiUUIDReference() throws Exception {\n     @Test\n     public void testMultiRefArchivedCsv() throws Exception {\n         context.turnOffAuthorisationSystem();\n-        Item person = ItemBuilder.createItem(context, col1)\n-                                 .withTitle(\"Person\")\n-                                 .withRelationshipType(\"Person\")\n-                                 .build();\n+        WorkspaceItem workspaceItem = workspaceItemService.create(context, col1, false);\n+        Item person = installItemService.installItem(context, workspaceItem);\n+        itemService.addMetadata(context, person, \"relationship\", \"type\", null, null, \"Person\");\n+        itemService.addMetadata(context, person, \"dc\", \"title\", null, null, \"Person\");\n+        itemService.update(context, person);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "362064f76f516c289f4c80eb7509a5f3e7cf8b67"}, "originalPosition": 265}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzExNzQ5OQ==", "bodyText": "Same here, revert to using Builders again", "url": "https://github.com/DSpace/DSpace/pull/2915#discussion_r467117499", "createdAt": "2020-08-07T15:38:59Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/test/java/org/dspace/app/csv/CSVMetadataImportReferenceIT.java", "diffHunk": "@@ -236,18 +319,21 @@ public void testMultiRefArchivedCsv() throws Exception {\n     @Test\n     public void testMultiMixedRefArchivedCsv() throws Exception {\n         context.turnOffAuthorisationSystem();\n-        Item person = ItemBuilder.createItem(context, col1)\n-                                 .withTitle(\"Person\")\n-                                 .withRelationshipType(\"Person\")\n-                                 .build();\n-        Item person2 = ItemBuilder.createItem(context, col1)\n-                                  .withTitle(\"Person2\")\n-                                  .withRelationshipType(\"Person\")\n-                                  .build();\n+        WorkspaceItem workspaceItem = workspaceItemService.create(context, col1, false);\n+        Item person = installItemService.installItem(context, workspaceItem);\n+        itemService.addMetadata(context, person, \"relationship\", \"type\", null, null, \"Person\");\n+        itemService.addMetadata(context, person, \"dc\", \"title\", null, null, \"Person\");\n+        itemService.update(context, person);\n+        WorkspaceItem workspaceItem2 = workspaceItemService.create(context, col1, false);\n+        Item person2 = installItemService.installItem(context, workspaceItem2);\n+        itemService.addMetadata(context, person2, \"relationship\", \"type\", null, null, \"Person\");\n+        itemService.addMetadata(context, person2, \"dc\", \"title\", null, null, \"Person2\");\n+        itemService.update(context, person2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "362064f76f516c289f4c80eb7509a5f3e7cf8b67"}, "originalPosition": 297}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzExNzUzNA==", "bodyText": "Same here, revert to using Builders again.  I'll stop repeating this message now.  Essentially, MOST of your changes to this IT class can now be reverted. You can use Builders here as the Builder classes are now available in dspace-api.", "url": "https://github.com/DSpace/DSpace/pull/2915#discussion_r467117534", "createdAt": "2020-08-07T15:39:03Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/test/java/org/dspace/app/csv/CSVMetadataImportReferenceIT.java", "diffHunk": "@@ -300,14 +386,17 @@ public void testNonUniqueRowName() throws Exception {\n     @Test(expected = MetadataImportException.class)\n     public void testNonUniqueMDRefInDb() throws Exception {\n         context.turnOffAuthorisationSystem();\n-        ItemBuilder.createItem(context, col1)\n-                   .withRelationshipType(\"Person\")\n-                   .withIdentifierOther(\"1\")\n-                   .build();\n-        ItemBuilder.createItem(context, col1)\n-                   .withRelationshipType(\"Person\")\n-                   .withIdentifierOther(\"1\")\n-                   .build();\n+        WorkspaceItem workspaceItem = workspaceItemService.create(context, col1, false);\n+        Item person = installItemService.installItem(context, workspaceItem);\n+        itemService.addMetadata(context, person, \"relationship\", \"type\", null, null, \"Person\");\n+        itemService.addMetadata(context, person, \"dc\", \"identifier\", \"other\", null, \"1\");\n+        itemService.update(context, person);\n+        WorkspaceItem workspaceItem2 = workspaceItemService.create(context, col1, false);\n+        Item person2 = installItemService.installItem(context, workspaceItem2);\n+        itemService.addMetadata(context, person2, \"relationship\", \"type\", null, null, \"Person\");\n+        itemService.addMetadata(context, person2, \"dc\", \"identifier\", \"other\", null, \"1\");\n+        itemService.update(context, person2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "362064f76f516c289f4c80eb7509a5f3e7cf8b67"}, "originalPosition": 339}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzExOTk1Nw==", "bodyText": "We may want to move this test to dspace-api, as it looks like it's testing the command-line script can still use -e.  It's a good test, but it doesn't belong in the dspace-server-webapp, as the dspace-server-webapp is NOT allowed to use -e.  So, I think we should have a test in this class that proves the REST endpoint cannot use -e but still succeeds without it.", "url": "https://github.com/DSpace/DSpace/pull/2915#discussion_r467119957", "createdAt": "2020-08-07T15:43:29Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/csv/CsvImportIT.java", "diffHunk": "@@ -222,22 +240,101 @@ private Item validateSpecificItemRelationCreationCsvImportMultiple(Collection co\n     }\n \n     private void performImportScript(String[] csv) throws Exception {\n-        String filename = \"test.csv\";\n-        BufferedWriter out = new BufferedWriter(\n-            new OutputStreamWriter(\n-                new FileOutputStream(filename), \"UTF-8\"));\n-        for (String csvLine : csv) {\n-            out.write(csvLine + \"\\n\");\n+        InputStream inputStream = new ByteArrayInputStream(String.join(System.lineSeparator(),\n+                                                                       Arrays.asList(csv))\n+                                                                 .getBytes(StandardCharsets.UTF_8));\n+\n+        MockMultipartFile bitstreamFile = new MockMultipartFile(\"file\",\n+                                                                \"test.csv\", MediaType.TEXT_PLAIN_VALUE,\n+                                                                inputStream);\n+\n+        AtomicReference<Integer> idRef = new AtomicReference<>();\n+\n+        LinkedList<DSpaceCommandLineParameter> parameters = new LinkedList<>();\n+        parameters.add(new DSpaceCommandLineParameter(\"-f\", \"test.csv\"));\n+        parameters.add(new DSpaceCommandLineParameter(\"-s\", \"\"));\n+\n+        List<ParameterValueRest> list = parameters.stream()\n+                                                  .map(dSpaceCommandLineParameter -> dSpaceRunnableParameterConverter\n+                                                      .convert(dSpaceCommandLineParameter, Projection.DEFAULT))\n+                                                  .collect(Collectors.toList());\n+\n+        try {\n+            String token = getAuthToken(admin.getEmail(), password);\n+\n+            getClient(token)\n+                .perform(fileUpload(\"/api/system/scripts/metadata-import/processes\").file(bitstreamFile)\n+                                                                                    .param(\"properties\",\n+                                                                                           new Gson().toJson(list)))\n+                .andExpect(status().isAccepted())\n+                .andDo(result -> idRef\n+                    .set(read(result.getResponse().getContentAsString(), \"$.processId\")));\n+            String t = \"\";\n+        } finally {\n+            ProcessBuilder.deleteProcess(idRef.get());\n         }\n-        out.flush();\n-        out.close();\n-        out = null;\n+    }\n+\n+    @Test\n+    public void createRelationshipsWithCsvImportWithSpecifiedEPersonParameterTest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "362064f76f516c289f4c80eb7509a5f3e7cf8b67"}, "originalPosition": 144}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ee989c692095b22070451faf19e1dbe633c33cb", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/5ee989c692095b22070451faf19e1dbe633c33cb", "committedDate": "2020-08-11T11:57:56Z", "message": "Merge remote-tracking branch 'dspace/main' into w2p-72215_metadataimport-email-parameter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41b862cdd52685ae8c116d7e9b9512a0fc5684c2", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/41b862cdd52685ae8c116d7e9b9512a0fc5684c2", "committedDate": "2020-08-11T13:53:39Z", "message": "[Task 72487] addressed feedback regarding builders in CSVMetadataImportReferenceIT and cleared up CsvImportIT to be more descriptive"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyMDAyOTU4", "url": "https://github.com/DSpace/DSpace/pull/2915#pullrequestreview-472002958", "createdAt": "2020-08-20T21:36:03Z", "commit": {"oid": "41b862cdd52685ae8c116d7e9b9512a0fc5684c2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1300, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}