{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwODU2Nzkw", "number": 2934, "title": "Scripts and processes - Script output", "bodyText": "References\nAdd references/links to any related issues or PRs. These may include:\n\nRelated to REST Contract -> Pertaining to the \"output\" link -> \"/api/system/processes/5/output\"\nFixes GitHub issue, the output of the script can afterwards be used for additional testing etc\nRelated to discussion from PR\n\nDescription\nFor both the Angular team, as well as for the writing of certain REST tests, we want to be able to see the output of a script that has been started from the scripts and processes.\nInstructions for Reviewers\nThis code stores the output in the assetstore (attached to the process), but only after the script completed or failed\nIn the meantime, while the script is running, the output is temporarily kept as a temporary file.\nThe output would be made available as a straight bitstream so that angular can parse it to the output format.\nPlease note that there are still some hibernate related problems that are currently failing the tests. (Work in progress)\nThe problem with hibernate here is most likely due to the order of deletion of the bitstreams.\nAnother weird thing that is going on that, when running the test manually, the tests do not seem to fail consistently 'similar' all the time (So the tests are still failing, but in a different way)\nChecklist\nThis checklist provides a reminder of what we are going to look for when reviewing your PR. You need not complete this checklist prior to creating your PR (draft PRs are always welcome). If you are unsure about an item in the checklist, don't hesitate to ask. We're here to help!\n\n My PR is small in size (e.g. less than 1,000 lines of code, not including comments & integration tests). Exceptions may be made if previously agreed upon.\n My PR passes Checkstyle validation based on the Code Style Guide.\n My PR includes Javadoc for all new (or modified) public methods and classes. It also includes Javadoc for large or complex private methods.\n My PR passes all tests and includes new/updated Unit or Integration Tests based on the Code Testing Guide.\n If my PR includes new, third-party dependencies (in any pom.xml), I've made sure their licenses align with the DSpace BSD License based on the Licensing of Contributions documentation.\n If my PR modifies the REST API, I've linked to the REST Contract page (or open PR) related to this change.", "createdAt": "2020-08-20T11:52:16Z", "url": "https://github.com/DSpace/DSpace/pull/2934", "merged": true, "mergeCommit": {"oid": "e24f924654754fcbc09c47c387ba95f7c8ad868a"}, "closed": true, "closedAt": "2020-09-11T17:57:18Z", "author": {"login": "jonas-atmire"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-wJZxAH2gAyNDcwODU2NzkwOjI2OTM1ZjlkMjM1Mzk2Nzc4MGRjMzI4YzJmNGRjYTg0YmUzN2FhMDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHOmWiAFqTQ4NTE4NDM1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "26935f9d2353967780dc328c2f4dca84be37aa07", "author": {"user": {"login": "YanaDePauw", "name": "Yana De Pauw"}}, "url": "https://github.com/DSpace/DSpace/commit/26935f9d2353967780dc328c2f4dca84be37aa07", "committedDate": "2020-08-14T08:15:06Z", "message": "intermittent commit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd22cfe7dac4ffedafe7e1d5daf043db035755c5", "author": {"user": {"login": "YanaDePauw", "name": "Yana De Pauw"}}, "url": "https://github.com/DSpace/DSpace/commit/fd22cfe7dac4ffedafe7e1d5daf043db035755c5", "committedDate": "2020-08-14T08:58:30Z", "message": "managed context"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb79a859e086180d971b6162b158308059dd2a02", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/eb79a859e086180d971b6162b158308059dd2a02", "committedDate": "2020-08-14T09:11:38Z", "message": "[Task 72494] added Context.Mode.MANAGED to all contexts in the RestDSpaceRunnableHandler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df06b330fd6d7128ab850bbfa29456c7f07e34ff", "author": {"user": {"login": "YanaDePauw", "name": "Yana De Pauw"}}, "url": "https://github.com/DSpace/DSpace/commit/df06b330fd6d7128ab850bbfa29456c7f07e34ff", "committedDate": "2020-08-14T11:54:10Z", "message": "72494: Scripts and processes: Export script output"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c8270f1c3b8149c5802b20f410c57b53c2f2f39", "author": {"user": {"login": "YanaDePauw", "name": "Yana De Pauw"}}, "url": "https://github.com/DSpace/DSpace/commit/7c8270f1c3b8149c5802b20f410c57b53c2f2f39", "committedDate": "2020-08-18T13:46:55Z", "message": "Revert \"[Task 72494] added Context.Mode.MANAGED to all contexts in the RestDSpaceRunnableHandler\"\n\nThis reverts commit eb79a859e086180d971b6162b158308059dd2a02."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f995007511aef5f60af9bbe455619d10d5098875", "author": {"user": {"login": "YanaDePauw", "name": "Yana De Pauw"}}, "url": "https://github.com/DSpace/DSpace/commit/f995007511aef5f60af9bbe455619d10d5098875", "committedDate": "2020-08-18T13:51:56Z", "message": "Revert \"managed context\"\n\nThis reverts commit fd22cfe7dac4ffedafe7e1d5daf043db035755c5."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f4015e291722881bba1c70812b466fd688a8cf9", "author": {"user": {"login": "YanaDePauw", "name": "Yana De Pauw"}}, "url": "https://github.com/DSpace/DSpace/commit/3f4015e291722881bba1c70812b466fd688a8cf9", "committedDate": "2020-08-18T13:53:36Z", "message": "72494: Scripts and processes: Export script output"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1947b48a4bafaed8581508437934cf7f56a50d48", "author": {"user": {"login": "jonas-atmire", "name": "Jonas Van Goolen"}}, "url": "https://github.com/DSpace/DSpace/commit/1947b48a4bafaed8581508437934cf7f56a50d48", "committedDate": "2020-08-19T07:09:26Z", "message": "Fixing checkstyle warnings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d32c32e4ab025cd2a767c7e31c1a8d840cff91f4", "author": {"user": {"login": "jonas-atmire", "name": "Jonas Van Goolen"}}, "url": "https://github.com/DSpace/DSpace/commit/d32c32e4ab025cd2a767c7e31c1a8d840cff91f4", "committedDate": "2020-08-21T08:34:59Z", "message": "Additional checkstyle fixes + part of LGTM fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80d64e73ec810239b71c1809ddc7444c5dbf9c81", "author": {"user": {"login": "YanaDePauw", "name": "Yana De Pauw"}}, "url": "https://github.com/DSpace/DSpace/commit/80d64e73ec810239b71c1809ddc7444c5dbf9c81", "committedDate": "2020-08-28T11:07:26Z", "message": "72494: Fix issue with task executor being used in tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "959109a6a1f29bb372ee61acc82370ecadfa629b", "author": {"user": {"login": "YanaDePauw", "name": "Yana De Pauw"}}, "url": "https://github.com/DSpace/DSpace/commit/959109a6a1f29bb372ee61acc82370ecadfa629b", "committedDate": "2020-08-28T15:03:23Z", "message": "Merge remote-tracking branch 'upstream/main' into w2p-72494_Export-script-output"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMDgxNzgy", "url": "https://github.com/DSpace/DSpace/pull/2934#pullrequestreview-480081782", "createdAt": "2020-09-01T20:14:25Z", "commit": {"oid": "959109a6a1f29bb372ee61acc82370ecadfa629b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoxNDoyNVrOHLGl9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoyODozNlrOHLHC9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQwNDQwNw==", "bodyText": "Is this System.out really needed?  It seems like something we should remove as it's not used in tests.", "url": "https://github.com/DSpace/DSpace/pull/2934#discussion_r481404407", "createdAt": "2020-09-01T20:14:25Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/test/java/org/dspace/eperson/GroupTest.java", "diffHunk": "@@ -171,7 +171,7 @@ public void findByName() throws SQLException {\n     public void findAll() throws SQLException {\n         List<Group> groups = groupService.findAll(context, null);\n         assertThat(\"findAll 1\", groups, notNullValue());\n-        System.out.println(\"TEST GROUP OUTPUT \" + groups);\n+        System.out.println(\"TEST GROUP OUTPUT_TYPE \" + groups);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "959109a6a1f29bb372ee61acc82370ecadfa629b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQwNDc4Ng==", "bodyText": "Please add JavaDocs at the top of this new Class to describe it", "url": "https://github.com/DSpace/DSpace/pull/2934#discussion_r481404786", "createdAt": "2020-09-01T20:15:05Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ProcessOutputLinkRepository.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.sql.SQLException;\n+import javax.annotation.Nullable;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.dspace.app.rest.model.BitstreamRest;\n+import org.dspace.app.rest.model.ProcessRest;\n+import org.dspace.app.rest.projection.Projection;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Bitstream;\n+import org.dspace.core.Context;\n+import org.dspace.scripts.Process;\n+import org.dspace.scripts.service.ProcessService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+@Component(ProcessRest.CATEGORY + \".\" + ProcessRest.NAME + \".\" + ProcessRest.OUTPUT)\n+public class ProcessOutputLinkRepository extends AbstractDSpaceRestRepository implements LinkRestRepository {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "959109a6a1f29bb372ee61acc82370ecadfa629b"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQwNTI0Nw==", "bodyText": "The above JavaDocs are somehow double-commented (and misaligned).  You can remove all the // on each line to line them back up.", "url": "https://github.com/DSpace/DSpace/pull/2934#discussion_r481405247", "createdAt": "2020-09-01T20:15:48Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ProcessOutputLinkRepository.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.sql.SQLException;\n+import javax.annotation.Nullable;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.dspace.app.rest.model.BitstreamRest;\n+import org.dspace.app.rest.model.ProcessRest;\n+import org.dspace.app.rest.projection.Projection;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Bitstream;\n+import org.dspace.core.Context;\n+import org.dspace.scripts.Process;\n+import org.dspace.scripts.service.ProcessService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+@Component(ProcessRest.CATEGORY + \".\" + ProcessRest.NAME + \".\" + ProcessRest.OUTPUT)\n+public class ProcessOutputLinkRepository extends AbstractDSpaceRestRepository implements LinkRestRepository {\n+\n+    @Autowired\n+    private ProcessService processService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    //    /**\n+//     * This method will retrieve the list of {@link ProcessLog} objects from the {@link Process} as defined through\n+//     the\n+//     * given ID in the rest call and it'll wrap this in a {@link ProcessOutputRest} object to return these\n+//     * @param request           The current request\n+//     * @param processId         The given processId for the {@link Process}\n+//     * @param optionalPageable  Pageable if applicable\n+//     * @param projection        The current projection\n+//     * @return                  The {@link ProcessOutputRest} containing the list of all {@link ProcessLog} for the\n+//     *                          given {@link Process}\n+//     * @throws SQLException         If something goes wrong\n+//     * @throws AuthorizeException   If something goes wrong\n+//     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "959109a6a1f29bb372ee61acc82370ecadfa629b"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQwNjAxOA==", "bodyText": "New methods both need JavaDocs added", "url": "https://github.com/DSpace/DSpace/pull/2934#discussion_r481406018", "createdAt": "2020-09-01T20:17:17Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/scripts/service/ProcessService.java", "diffHunk": "@@ -189,4 +190,7 @@ public void appendFile(Context context, Process process, InputStream is, String\n      */\n     public List<String> getFileTypesForProcessBitstreams(Context context, Process process);\n \n+    void appendLog(int processId, String scriptName, String output, ProcessLogLevel processLogLevel) throws IOException;\n+    void createLogBitstream(Context context, Process process)\n+             throws IOException, SQLException, AuthorizeException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "959109a6a1f29bb372ee61acc82370ecadfa629b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQwNjM1Ng==", "bodyText": "Missing an @Override", "url": "https://github.com/DSpace/DSpace/pull/2934#discussion_r481406356", "createdAt": "2020-09-01T20:17:59Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/scripts/ProcessServiceImpl.java", "diffHunk": "@@ -245,4 +255,45 @@ public int countTotal(Context context) throws SQLException {\n         return new ArrayList<>(fileTypesSet);\n     }\n \n+    @Override\n+    public void appendLog(int processId, String scriptName, String output, ProcessLogLevel processLogLevel)\n+            throws IOException {\n+        File tmpDir = FileUtils.getTempDirectory();\n+        File tempFile = new File(tmpDir, scriptName + processId + \".log\");\n+        FileWriter out = new FileWriter(tempFile, true);\n+        try {\n+            try (BufferedWriter writer = new BufferedWriter(out)) {\n+                writer.append(formatLogLine(processId, scriptName, output, processLogLevel));\n+                writer.newLine();\n+            }\n+        } finally {\n+            out.close();\n+        }\n+    }\n+\n+    public void createLogBitstream(Context context, Process process)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "959109a6a1f29bb372ee61acc82370ecadfa629b"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQwODEzMg==", "bodyText": "This method accidentally removed the finally clause.  It should be added back in to ensure that the Context is aborted whenever an error occurs.", "url": "https://github.com/DSpace/DSpace/pull/2934#discussion_r481408132", "createdAt": "2020-09-01T20:21:26Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/scripts/handler/impl/RestDSpaceRunnableHandler.java", "diffHunk": "@@ -96,14 +103,18 @@ public void handleCompletion() {\n         try {\n             Process process = processService.find(context, processId);\n             processService.complete(context, process);\n-            context.complete();\n             logInfo(\"The script has completed\");\n+\n+            addLogBitstreamToProcess(context);\n+\n+            context.complete();\n         } catch (SQLException e) {\n             log.error(\"RestDSpaceRunnableHandler with process: \" + processId + \" could not be completed\", e);\n-        } finally {\n-            if (context.isValid()) {\n-                context.abort();\n-            }\n+        } catch (IOException | AuthorizeException e) {\n+            log.error(\"RestDSpaceRunnableHandler with process: \" + processId + \" could not be completed due to an \" +\n+                              \"error with the logging bitstream\", e);\n+        } catch (Exception e) {\n+            log.error(e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "959109a6a1f29bb372ee61acc82370ecadfa629b"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQwOTA4NQ==", "bodyText": "Why is this entire test commented out?", "url": "https://github.com/DSpace/DSpace/pull/2934#discussion_r481409085", "createdAt": "2020-09-01T20:23:18Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/ProcessRestRepositoryIT.java", "diffHunk": "@@ -322,6 +322,50 @@ public void getProcessFilesTypesRandomProcessId() throws Exception {\n \n     }\n \n+//    @Test\n+//    public void getProcessOutput() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "959109a6a1f29bb372ee61acc82370ecadfa629b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQxMTgzMA==", "bodyText": "Could you add a comment to explain why this is set to 5?\nI'm also curious why the production version of dspaceRunnableThreadExecutor is of type ThreadPoolTaskExecutor, while all the tests use SyncTaskExecutor.  Shouldn't the tests use the same type of TaskExecutor as the main code?  If not, I think we should add an inline comment to describe the reason for the difference (it's not obvious to me).", "url": "https://github.com/DSpace/DSpace/pull/2934#discussion_r481411830", "createdAt": "2020-09-01T20:28:36Z", "author": {"login": "tdonohue"}, "path": "dspace/config/spring/api/scripts.xml", "diffHunk": "@@ -4,6 +4,10 @@\n     xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n            http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\">\n \n+    <bean id=\"dspaceRunnableThreadExecutor\" class=\"org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor\">\n+        <property name=\"corePoolSize\" value=\"5\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "959109a6a1f29bb372ee61acc82370ecadfa629b"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f537eadcc3909dc730d200bf6aa4903901e5a6c9", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/f537eadcc3909dc730d200bf6aa4903901e5a6c9", "committedDate": "2020-09-08T07:13:57Z", "message": "[Task 73019] applied feedback to the export script output"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7484e476949734446503f101eace33ddda802eab", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/7484e476949734446503f101eace33ddda802eab", "committedDate": "2020-09-08T07:29:52Z", "message": "Merge remote-tracking branch 'dspace/main' into w2p-72494_Export-script-output"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NTAzNTEw", "url": "https://github.com/DSpace/DSpace/pull/2934#pullrequestreview-484503510", "createdAt": "2020-09-08T21:25:14Z", "commit": {"oid": "7484e476949734446503f101eace33ddda802eab"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1MTg0MzUw", "url": "https://github.com/DSpace/DSpace/pull/2934#pullrequestreview-485184350", "createdAt": "2020-09-09T16:15:16Z", "commit": {"oid": "7484e476949734446503f101eace33ddda802eab"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1327, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}