{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0MTYyMzgw", "number": 3009, "title": "Refactor/remove custom MultipartFileSender to use Spring Boot Range requests", "bodyText": "References\n\nFixes #2983\nFixes DSpace/dspace-angular#827\n\nDescription\nThe custom MultipartFileSender was completely bypassing Spring Security & Spring automated tools.\nThis PR makes sure that we lean more towards the 'default' usages of the previously mentioned Spring Boot etc.\nInstructions for Reviewers\nPlease add a more detailed description of the changes made by your PR. At a minimum, providing a bulleted list of changes in your PR is helpful to reviewers.\nList of changes in this PR:\n\nMultipartFileSender is renamed to HttpHeadersInitializer to more correctly reflect the functionality/usage\nHttpHeadersInitializer been 'changed' to now only initialise the HTTPHeaders, apart from trying to handle a whole bunch of code itself (So that we can rely on the spring framework to handle the MultiPart file sending)\n\nThe HTTPHeaders will be used in the ResponseEntity given by any methods that need to reply with a downloaded file\n\n\nThe SitemapRestController is altered to adhere to the guidelines of returning a ResponseEntity as well\nthe BitstreamRestController returns a new ResponseEntity for the bitstream resource to properly handle the multipart file sending\n\nTesting steps using REST\n\nSetup the related REST code\nTrigger a script that keeps output in a file\nTrigger a GET call to that particular output bitstream (With an origin header)\nCheck that the header \"Access-Control-Allow-Origin:\" is returned as expected\n\nTesting steps using Angular\n\nSetup the related REST code\nSetup the following Angular PR\nMake sure to trigger a script that keeps output in a file.\nTry to download that particular output bitstream\nThe bitstream should be properly 'downloaded', no CORS error should be logged, and the information of the logs should be shown in the UI\n\nChecklist\nThis checklist provides a reminder of what we are going to look for when reviewing your PR. You need not complete this checklist prior to creating your PR (draft PRs are always welcome). If you are unsure about an item in the checklist, don't hesitate to ask. We're here to help!\n\n My PR is small in size (e.g. less than 1,000 lines of code, not including comments & integration tests). Exceptions may be made if previously agreed upon.\n My PR passes Checkstyle validation based on the Code Style Guide.\n My PR includes Javadoc for all new (or modified) public methods and classes. It also includes Javadoc for large or complex private methods.\n My PR passes all tests and includes new/updated Unit or Integration Tests based on the Code Testing Guide.\n If my PR includes new, third-party dependencies (in any pom.xml), I've made sure their licenses align with the DSpace BSD License based on the Licensing of Contributions documentation.\n If my PR modifies the REST API, I've linked to the REST Contract page (or open PR) related to this change.", "createdAt": "2020-10-15T14:48:02Z", "url": "https://github.com/DSpace/DSpace/pull/3009", "merged": true, "mergeCommit": {"oid": "d166d97f7c84e97fd55ea6452c11915c8de7ebf7"}, "closed": true, "closedAt": "2020-11-20T21:10:05Z", "author": {"login": "jonas-atmire"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdS0ZwUAH2gAyNTA0MTYyMzgwOjg2N2FlYzRjZDEwZjJhM2VmNzUxOTNkZDI4YTQyZDIyNjQ1YWI4NDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABded97RgFqTUzNTc3Nzg0Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "867aec4cd10f2a3ef75193dd28a42d22645ab845", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/867aec4cd10f2a3ef75193dd28a42d22645ab845", "committedDate": "2020-10-15T16:31:04Z", "message": "Refactor/remove custom MultipartFileSender to use Spring Boot Range requests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "867aec4cd10f2a3ef75193dd28a42d22645ab845", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/867aec4cd10f2a3ef75193dd28a42d22645ab845", "committedDate": "2020-10-15T16:31:04Z", "message": "Refactor/remove custom MultipartFileSender to use Spring Boot Range requests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNzMwODc1", "url": "https://github.com/DSpace/DSpace/pull/3009#pullrequestreview-523730875", "createdAt": "2020-11-04T20:59:51Z", "commit": {"oid": "867aec4cd10f2a3ef75193dd28a42d22645ab845"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMDo1OTo1MVrOHtpg2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMTowNjoyNlrOHtptgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyODEyMw==", "bodyText": "Please add JavaDocs to this new Class", "url": "https://github.com/DSpace/DSpace/pull/3009#discussion_r517628123", "createdAt": "2020-11-04T20:59:51Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/utils/BitstreamResource.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.utils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.UUID;\n+\n+import org.springframework.core.io.AbstractResource;\n+\n+public class BitstreamResource extends AbstractResource {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "867aec4cd10f2a3ef75193dd28a42d22645ab845"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyODcyNw==", "bodyText": "Please update these JavaDocs to better describe this new HttpHeadersInitializer.  These old JavaDocs are incorrect & accidentally carried over from the old class.", "url": "https://github.com/DSpace/DSpace/pull/3009#discussion_r517628727", "createdAt": "2020-11-04T21:01:02Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/utils/HttpHeadersInitializer.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.utils;\n+\n+import static java.util.Objects.isNull;\n+import static java.util.Objects.nonNull;\n+\n+import java.io.BufferedInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.tomcat.util.http.FastHttpDateFormat;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpHeaders;\n+\n+/**\n+ * Utility class to send an input stream with Range header and ETag support.\n+ * Based on https://github.com/davinkevin/Podcast-Server/blob/v1.0.0/src/main/java/lan/dk/podcastserver/service\n+ * /MultiPartFileSenderService.java", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "867aec4cd10f2a3ef75193dd28a42d22645ab845"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyOTE5MA==", "bodyText": "Please remove this TODO & add JavaDocs to this method (as this is one of the primary methods in this class).", "url": "https://github.com/DSpace/DSpace/pull/3009#discussion_r517629190", "createdAt": "2020-11-04T21:02:01Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/utils/HttpHeadersInitializer.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.utils;\n+\n+import static java.util.Objects.isNull;\n+import static java.util.Objects.nonNull;\n+\n+import java.io.BufferedInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.tomcat.util.http.FastHttpDateFormat;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpHeaders;\n+\n+/**\n+ * Utility class to send an input stream with Range header and ETag support.\n+ * Based on https://github.com/davinkevin/Podcast-Server/blob/v1.0.0/src/main/java/lan/dk/podcastserver/service\n+ * /MultiPartFileSenderService.java\n+ *\n+ * @author Tom Desair (tom dot desair at atmire dot com)\n+ * @author Frederic Van Reet (frederic dot vanreet at atmire dot com)\n+ */\n+public class HttpHeadersInitializer {\n+\n+    protected final Logger log = LoggerFactory.getLogger(this.getClass());\n+\n+    private static final String METHOD_HEAD = \"HEAD\";\n+    private static final String MULTIPART_BOUNDARY = \"MULTIPART_BYTERANGES\";\n+    private static final String CONTENT_TYPE_MULTITYPE_WITH_BOUNDARY = \"multipart/byteranges; boundary=\" +\n+        MULTIPART_BOUNDARY;\n+    public static final String CONTENT_DISPOSITION_INLINE = \"inline\";\n+    public static final String CONTENT_DISPOSITION_ATTACHMENT = \"attachment\";\n+    private static final String IF_NONE_MATCH = \"If-None-Match\";\n+    private static final String IF_MODIFIED_SINCE = \"If-Modified-Since\";\n+    private static final String ETAG = \"ETag\";\n+    private static final String IF_MATCH = \"If-Match\";\n+    private static final String IF_UNMODIFIED_SINCE = \"If-Unmodified-Since\";\n+    private static final String CONTENT_TYPE = \"Content-Type\";\n+    private static final String ACCEPT_RANGES = \"Accept-Ranges\";\n+    private static final String BYTES = \"bytes\";\n+    private static final String LAST_MODIFIED = \"Last-Modified\";\n+    private static final String EXPIRES = \"Expires\";\n+    private static final String APPLICATION_OCTET_STREAM = \"application/octet-stream\";\n+    private static final String IMAGE = \"image\";\n+    private static final String ACCEPT = \"Accept\";\n+    private static final String CONTENT_DISPOSITION = \"Content-Disposition\";\n+    private static final String CONTENT_DISPOSITION_FORMAT = \"%s;filename=\\\"%s\\\"\";\n+    private static final String CACHE_CONTROL = \"Cache-Control\";\n+\n+    private int bufferSize = 1000000;\n+\n+    private static final long DEFAULT_EXPIRE_TIME = 60L * 60L * 1000L;\n+\n+    //no-cache so request is always performed for logging\n+    private static final String CACHE_CONTROL_SETTING = \"private,no-cache\";\n+\n+    private BufferedInputStream inputStream;\n+    private HttpServletRequest request;\n+    private HttpServletResponse response;\n+    private String contentType;\n+    private String disposition;\n+    private long lastModified;\n+    private long length;\n+    private String fileName;\n+    private String checksum;\n+\n+    public HttpHeadersInitializer(final InputStream inputStream) {\n+        //Convert to BufferedInputStream so we can re-read the stream\n+        this.inputStream = new BufferedInputStream(inputStream);\n+    }\n+\n+\n+    public static HttpHeadersInitializer fromInputStream(InputStream inputStream) {\n+        return new HttpHeadersInitializer(inputStream);\n+    }\n+\n+    public HttpHeadersInitializer with(HttpServletRequest httpRequest) {\n+        request = httpRequest;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer with(HttpServletResponse httpResponse) {\n+        response = httpResponse;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer withLength(long length) {\n+        this.length = length;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer withFileName(String fileName) {\n+        this.fileName = fileName;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer withChecksum(String checksum) {\n+        this.checksum = checksum;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer withMimetype(String mimetype) {\n+        this.contentType = mimetype;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer withLastModified(long lastModified) {\n+        this.lastModified = lastModified;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer withBufferSize(int bufferSize) {\n+        if (bufferSize > 0) {\n+            this.bufferSize = bufferSize;\n+        }\n+        return this;\n+    }\n+    public HttpHeadersInitializer withDisposition(String contentDisposition) {\n+        this.disposition = contentDisposition;\n+        return this;\n+    }\n+\n+    //TODO rename to initialiseHeaders\n+    public HttpHeaders initialiseHeaders() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "867aec4cd10f2a3ef75193dd28a42d22645ab845"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYzMDY2NQ==", "bodyText": "Should this have a new issue ticket?  It sounds like you are recommending upgrading to Spring v5.2.9?  While we don't need to do that in this PR, we could take this opportunity to recommend an upgrade to Spring & Spring Boot if there's a good reason to do so.", "url": "https://github.com/DSpace/DSpace/pull/3009#discussion_r517630665", "createdAt": "2020-11-04T21:05:02Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/utils/HttpHeadersInitializer.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.utils;\n+\n+import static java.util.Objects.isNull;\n+import static java.util.Objects.nonNull;\n+\n+import java.io.BufferedInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.tomcat.util.http.FastHttpDateFormat;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpHeaders;\n+\n+/**\n+ * Utility class to send an input stream with Range header and ETag support.\n+ * Based on https://github.com/davinkevin/Podcast-Server/blob/v1.0.0/src/main/java/lan/dk/podcastserver/service\n+ * /MultiPartFileSenderService.java\n+ *\n+ * @author Tom Desair (tom dot desair at atmire dot com)\n+ * @author Frederic Van Reet (frederic dot vanreet at atmire dot com)\n+ */\n+public class HttpHeadersInitializer {\n+\n+    protected final Logger log = LoggerFactory.getLogger(this.getClass());\n+\n+    private static final String METHOD_HEAD = \"HEAD\";\n+    private static final String MULTIPART_BOUNDARY = \"MULTIPART_BYTERANGES\";\n+    private static final String CONTENT_TYPE_MULTITYPE_WITH_BOUNDARY = \"multipart/byteranges; boundary=\" +\n+        MULTIPART_BOUNDARY;\n+    public static final String CONTENT_DISPOSITION_INLINE = \"inline\";\n+    public static final String CONTENT_DISPOSITION_ATTACHMENT = \"attachment\";\n+    private static final String IF_NONE_MATCH = \"If-None-Match\";\n+    private static final String IF_MODIFIED_SINCE = \"If-Modified-Since\";\n+    private static final String ETAG = \"ETag\";\n+    private static final String IF_MATCH = \"If-Match\";\n+    private static final String IF_UNMODIFIED_SINCE = \"If-Unmodified-Since\";\n+    private static final String CONTENT_TYPE = \"Content-Type\";\n+    private static final String ACCEPT_RANGES = \"Accept-Ranges\";\n+    private static final String BYTES = \"bytes\";\n+    private static final String LAST_MODIFIED = \"Last-Modified\";\n+    private static final String EXPIRES = \"Expires\";\n+    private static final String APPLICATION_OCTET_STREAM = \"application/octet-stream\";\n+    private static final String IMAGE = \"image\";\n+    private static final String ACCEPT = \"Accept\";\n+    private static final String CONTENT_DISPOSITION = \"Content-Disposition\";\n+    private static final String CONTENT_DISPOSITION_FORMAT = \"%s;filename=\\\"%s\\\"\";\n+    private static final String CACHE_CONTROL = \"Cache-Control\";\n+\n+    private int bufferSize = 1000000;\n+\n+    private static final long DEFAULT_EXPIRE_TIME = 60L * 60L * 1000L;\n+\n+    //no-cache so request is always performed for logging\n+    private static final String CACHE_CONTROL_SETTING = \"private,no-cache\";\n+\n+    private BufferedInputStream inputStream;\n+    private HttpServletRequest request;\n+    private HttpServletResponse response;\n+    private String contentType;\n+    private String disposition;\n+    private long lastModified;\n+    private long length;\n+    private String fileName;\n+    private String checksum;\n+\n+    public HttpHeadersInitializer(final InputStream inputStream) {\n+        //Convert to BufferedInputStream so we can re-read the stream\n+        this.inputStream = new BufferedInputStream(inputStream);\n+    }\n+\n+\n+    public static HttpHeadersInitializer fromInputStream(InputStream inputStream) {\n+        return new HttpHeadersInitializer(inputStream);\n+    }\n+\n+    public HttpHeadersInitializer with(HttpServletRequest httpRequest) {\n+        request = httpRequest;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer with(HttpServletResponse httpResponse) {\n+        response = httpResponse;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer withLength(long length) {\n+        this.length = length;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer withFileName(String fileName) {\n+        this.fileName = fileName;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer withChecksum(String checksum) {\n+        this.checksum = checksum;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer withMimetype(String mimetype) {\n+        this.contentType = mimetype;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer withLastModified(long lastModified) {\n+        this.lastModified = lastModified;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer withBufferSize(int bufferSize) {\n+        if (bufferSize > 0) {\n+            this.bufferSize = bufferSize;\n+        }\n+        return this;\n+    }\n+    public HttpHeadersInitializer withDisposition(String contentDisposition) {\n+        this.disposition = contentDisposition;\n+        return this;\n+    }\n+\n+    //TODO rename to initialiseHeaders\n+    public HttpHeaders initialiseHeaders() throws IOException {\n+\n+        HttpHeaders httpHeaders = new HttpHeaders();\n+        // Validate and process range -------------------------------------------------------------\n+\n+        log.debug(\"Content-Type : {}\", contentType);\n+        // Initialize response.\n+        //TODO response.reset => Can be re-instated if we bump to 5.2.9", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "867aec4cd10f2a3ef75193dd28a42d22645ab845"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYzMTM2Mg==", "bodyText": "Please add JavaDocs to this public method.  (I realize this method was copied over from the old class, but this is a good opportunity to describe it better with JavaDocs, if possible)", "url": "https://github.com/DSpace/DSpace/pull/3009#discussion_r517631362", "createdAt": "2020-11-04T21:06:26Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/utils/HttpHeadersInitializer.java", "diffHunk": "@@ -0,0 +1,263 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.utils;\n+\n+import static java.util.Objects.isNull;\n+import static java.util.Objects.nonNull;\n+\n+import java.io.BufferedInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.tomcat.util.http.FastHttpDateFormat;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpHeaders;\n+\n+/**\n+ * Utility class to send an input stream with Range header and ETag support.\n+ * Based on https://github.com/davinkevin/Podcast-Server/blob/v1.0.0/src/main/java/lan/dk/podcastserver/service\n+ * /MultiPartFileSenderService.java\n+ *\n+ * @author Tom Desair (tom dot desair at atmire dot com)\n+ * @author Frederic Van Reet (frederic dot vanreet at atmire dot com)\n+ */\n+public class HttpHeadersInitializer {\n+\n+    protected final Logger log = LoggerFactory.getLogger(this.getClass());\n+\n+    private static final String METHOD_HEAD = \"HEAD\";\n+    private static final String MULTIPART_BOUNDARY = \"MULTIPART_BYTERANGES\";\n+    private static final String CONTENT_TYPE_MULTITYPE_WITH_BOUNDARY = \"multipart/byteranges; boundary=\" +\n+        MULTIPART_BOUNDARY;\n+    public static final String CONTENT_DISPOSITION_INLINE = \"inline\";\n+    public static final String CONTENT_DISPOSITION_ATTACHMENT = \"attachment\";\n+    private static final String IF_NONE_MATCH = \"If-None-Match\";\n+    private static final String IF_MODIFIED_SINCE = \"If-Modified-Since\";\n+    private static final String ETAG = \"ETag\";\n+    private static final String IF_MATCH = \"If-Match\";\n+    private static final String IF_UNMODIFIED_SINCE = \"If-Unmodified-Since\";\n+    private static final String CONTENT_TYPE = \"Content-Type\";\n+    private static final String ACCEPT_RANGES = \"Accept-Ranges\";\n+    private static final String BYTES = \"bytes\";\n+    private static final String LAST_MODIFIED = \"Last-Modified\";\n+    private static final String EXPIRES = \"Expires\";\n+    private static final String APPLICATION_OCTET_STREAM = \"application/octet-stream\";\n+    private static final String IMAGE = \"image\";\n+    private static final String ACCEPT = \"Accept\";\n+    private static final String CONTENT_DISPOSITION = \"Content-Disposition\";\n+    private static final String CONTENT_DISPOSITION_FORMAT = \"%s;filename=\\\"%s\\\"\";\n+    private static final String CACHE_CONTROL = \"Cache-Control\";\n+\n+    private int bufferSize = 1000000;\n+\n+    private static final long DEFAULT_EXPIRE_TIME = 60L * 60L * 1000L;\n+\n+    //no-cache so request is always performed for logging\n+    private static final String CACHE_CONTROL_SETTING = \"private,no-cache\";\n+\n+    private BufferedInputStream inputStream;\n+    private HttpServletRequest request;\n+    private HttpServletResponse response;\n+    private String contentType;\n+    private String disposition;\n+    private long lastModified;\n+    private long length;\n+    private String fileName;\n+    private String checksum;\n+\n+    public HttpHeadersInitializer(final InputStream inputStream) {\n+        //Convert to BufferedInputStream so we can re-read the stream\n+        this.inputStream = new BufferedInputStream(inputStream);\n+    }\n+\n+\n+    public static HttpHeadersInitializer fromInputStream(InputStream inputStream) {\n+        return new HttpHeadersInitializer(inputStream);\n+    }\n+\n+    public HttpHeadersInitializer with(HttpServletRequest httpRequest) {\n+        request = httpRequest;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer with(HttpServletResponse httpResponse) {\n+        response = httpResponse;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer withLength(long length) {\n+        this.length = length;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer withFileName(String fileName) {\n+        this.fileName = fileName;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer withChecksum(String checksum) {\n+        this.checksum = checksum;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer withMimetype(String mimetype) {\n+        this.contentType = mimetype;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer withLastModified(long lastModified) {\n+        this.lastModified = lastModified;\n+        return this;\n+    }\n+\n+    public HttpHeadersInitializer withBufferSize(int bufferSize) {\n+        if (bufferSize > 0) {\n+            this.bufferSize = bufferSize;\n+        }\n+        return this;\n+    }\n+    public HttpHeadersInitializer withDisposition(String contentDisposition) {\n+        this.disposition = contentDisposition;\n+        return this;\n+    }\n+\n+    //TODO rename to initialiseHeaders\n+    public HttpHeaders initialiseHeaders() throws IOException {\n+\n+        HttpHeaders httpHeaders = new HttpHeaders();\n+        // Validate and process range -------------------------------------------------------------\n+\n+        log.debug(\"Content-Type : {}\", contentType);\n+        // Initialize response.\n+        //TODO response.reset => Can be re-instated if we bump to 5.2.9\n+        response.setBufferSize(bufferSize);\n+        if (contentType != null) {\n+            httpHeaders.put(CONTENT_TYPE, Collections.singletonList(contentType));\n+        }\n+        httpHeaders.put(ACCEPT_RANGES, Collections.singletonList(BYTES));\n+        if (checksum != null) {\n+            httpHeaders.put(ETAG, Collections.singletonList(checksum));\n+        }\n+        httpHeaders.put(LAST_MODIFIED, Collections.singletonList(FastHttpDateFormat.formatDate(lastModified)));\n+        httpHeaders.put(EXPIRES, Collections.singletonList(FastHttpDateFormat.formatDate(\n+            System.currentTimeMillis() + DEFAULT_EXPIRE_TIME)));\n+\n+        //No-cache so that we can log every download\n+        httpHeaders.put(CACHE_CONTROL, Collections.singletonList(CACHE_CONTROL_SETTING));\n+\n+        if (isNullOrEmpty(disposition)) {\n+            if (contentType == null) {\n+                contentType = APPLICATION_OCTET_STREAM;\n+            } else if (!contentType.startsWith(IMAGE)) {\n+                String accept = request.getHeader(ACCEPT);\n+                disposition = accept != null && accepts(accept,\n+                                                        contentType) ? CONTENT_DISPOSITION_INLINE :\n+                    CONTENT_DISPOSITION_ATTACHMENT;\n+            }\n+\n+        }\n+\n+        httpHeaders.put(CONTENT_DISPOSITION, Collections.singletonList(String.format(CONTENT_DISPOSITION_FORMAT,\n+                                                                                     disposition, fileName)));\n+        log.debug(\"Content-Disposition : {}\", disposition);\n+\n+        // Content phase\n+        if (METHOD_HEAD.equals(request.getMethod())) {\n+            log.debug(\"HEAD request - skipping content\");\n+            return null;\n+        }\n+\n+        return httpHeaders;\n+\n+    }\n+\n+    public boolean isValid() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "867aec4cd10f2a3ef75193dd28a42d22645ab845"}, "originalPosition": 185}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4fe9e667453a1edf7acff713b50da7a6aeb59eb", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/c4fe9e667453a1edf7acff713b50da7a6aeb59eb", "committedDate": "2020-11-06T15:39:31Z", "message": "[Task 73179] added javadocs and cleaned up where necessary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6dd048c68eb9029b4de3d8335e39a4837eda139e", "author": {"user": {"login": "jonas-atmire", "name": "Jonas Van Goolen"}}, "url": "https://github.com/DSpace/DSpace/commit/6dd048c68eb9029b4de3d8335e39a4837eda139e", "committedDate": "2020-11-18T09:08:12Z", "message": "Re-enabling of response.reset() method -> https://github.com/DSpace/DSpace/pull/3009#discussion_r525254104"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50703a0771751c7818f6367234f41fccf34a3aac", "author": {"user": {"login": "jonas-atmire", "name": "Jonas Van Goolen"}}, "url": "https://github.com/DSpace/DSpace/commit/50703a0771751c7818f6367234f41fccf34a3aac", "committedDate": "2020-11-19T07:01:42Z", "message": "Reverting previous commit + clarification comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1Nzc3ODQy", "url": "https://github.com/DSpace/DSpace/pull/3009#pullrequestreview-535777842", "createdAt": "2020-11-20T21:09:51Z", "commit": {"oid": "50703a0771751c7818f6367234f41fccf34a3aac"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1354, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}