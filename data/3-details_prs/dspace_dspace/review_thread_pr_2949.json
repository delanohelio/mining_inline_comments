{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3MjY5NTk2", "number": 2949, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzoxMDo0NVrOElwuhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzoxMDo0NVrOElwuhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDMxMTEwOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/storage/rdbms/migration/V5_7_2017_05_05__DS_3431_Add_Policies_for_BasicWorkflow.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzoxMDo0NVrOHVal6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMToxMjoyNVrOHVimRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxNzgzMw==", "bodyText": "I'm puzzled as to why we use ClassPathResource instead of just passing a path to a method which reads from the path into a String.  I haven't found any other use of ClassPathResource in this patch than to hold a path.", "url": "https://github.com/DSpace/DSpace/pull/2949#discussion_r492217833", "createdAt": "2020-09-21T17:10:45Z", "author": {"login": "mwoodiupui"}, "path": "dspace-api/src/main/java/org/dspace/storage/rdbms/migration/V5_7_2017_05_05__DS_3431_Add_Policies_for_BasicWorkflow.java", "diffHunk": "@@ -7,45 +7,42 @@\n  */\n package org.dspace.storage.rdbms.migration;\n \n-import java.sql.Connection;\n-\n-import org.dspace.core.Constants;\n import org.dspace.storage.rdbms.DatabaseUtils;\n-import org.flywaydb.core.api.migration.MigrationChecksumProvider;\n-import org.flywaydb.core.api.migration.jdbc.JdbcMigration;\n-import org.flywaydb.core.internal.util.scanner.classpath.ClassPathResource;\n+import org.flywaydb.core.api.migration.BaseJavaMigration;\n+import org.flywaydb.core.api.migration.Context;\n+import org.springframework.core.io.ClassPathResource;\n \n public class V5_7_2017_05_05__DS_3431_Add_Policies_for_BasicWorkflow\n-    implements JdbcMigration, MigrationChecksumProvider {\n+    extends BaseJavaMigration {\n \n     // Size of migration script run\n     Integer migration_file_size = -1;\n \n \n     @Override\n-    public void migrate(Connection connection) throws Exception {\n+    public void migrate(Context context) throws Exception {\n         // Based on type of DB, get path to SQL migration script\n-        String dbtype = DatabaseUtils.getDbType(connection);\n+        String dbtype = DatabaseUtils.getDbType(context.getConnection());\n \n         String dataMigrateSQL;\n         String sqlMigrationPath = \"org/dspace/storage/rdbms/sqlmigration/workflow/\" + dbtype + \"/\";\n         // Now, check if the XMLWorkflow table (cwf_workflowitem) already exists in this database\n         // If XMLWorkflow Table does NOT exist in this database, then lets do the migration!\n         // If XMLWorkflow Table ALREADY exists, then this migration is a noop, we assume you manually ran the sql\n         // scripts\n-        if (DatabaseUtils.tableExists(connection, \"cwf_workflowitem\")) {\n+        if (DatabaseUtils.tableExists(context.getConnection(), \"cwf_workflowitem\")) {\n             return;\n         } else {\n             //Migrate the basic workflow\n             // Get the contents of our data migration script, based on path & DB type\n-            dataMigrateSQL = new ClassPathResource(sqlMigrationPath + \"basicWorkflow\" + \"/V5.7_2017.05.05__DS-3431.sql\",\n-                                                   getClass().getClassLoader())\n-                .loadAsString(Constants.DEFAULT_ENCODING);\n+            dataMigrateSQL = MigrationUtils.resourceToString(\n+                new ClassPathResource(sqlMigrationPath + \"basicWorkflow\" + \"/V5.7_2017.05.05__DS-3431.sql\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3Nzk5MA==", "bodyText": "@mwoodiupui : I'm not sure if I understand your comment?  Are you saying that MigrationUtils.resourceToString() should be changed to just take in a resource path?  I guess that's reasonable... I had simply done it this way so that I could use Resource.getInputStream() to easily read the resource....though, I guess I could have refactored all this to use the ClassLoader instead...e.g. using something like ClassLoader.getResourceAsStream(String path).\nIt doesn't much change what the code does here, as it's essentially the same.  But, if I understand your comment, you are right that it might simplify things to refactor out the usage of ClassPathResource altogether.  Is that what you are referring to?", "url": "https://github.com/DSpace/DSpace/pull/2949#discussion_r492277990", "createdAt": "2020-09-21T18:56:03Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/storage/rdbms/migration/V5_7_2017_05_05__DS_3431_Add_Policies_for_BasicWorkflow.java", "diffHunk": "@@ -7,45 +7,42 @@\n  */\n package org.dspace.storage.rdbms.migration;\n \n-import java.sql.Connection;\n-\n-import org.dspace.core.Constants;\n import org.dspace.storage.rdbms.DatabaseUtils;\n-import org.flywaydb.core.api.migration.MigrationChecksumProvider;\n-import org.flywaydb.core.api.migration.jdbc.JdbcMigration;\n-import org.flywaydb.core.internal.util.scanner.classpath.ClassPathResource;\n+import org.flywaydb.core.api.migration.BaseJavaMigration;\n+import org.flywaydb.core.api.migration.Context;\n+import org.springframework.core.io.ClassPathResource;\n \n public class V5_7_2017_05_05__DS_3431_Add_Policies_for_BasicWorkflow\n-    implements JdbcMigration, MigrationChecksumProvider {\n+    extends BaseJavaMigration {\n \n     // Size of migration script run\n     Integer migration_file_size = -1;\n \n \n     @Override\n-    public void migrate(Connection connection) throws Exception {\n+    public void migrate(Context context) throws Exception {\n         // Based on type of DB, get path to SQL migration script\n-        String dbtype = DatabaseUtils.getDbType(connection);\n+        String dbtype = DatabaseUtils.getDbType(context.getConnection());\n \n         String dataMigrateSQL;\n         String sqlMigrationPath = \"org/dspace/storage/rdbms/sqlmigration/workflow/\" + dbtype + \"/\";\n         // Now, check if the XMLWorkflow table (cwf_workflowitem) already exists in this database\n         // If XMLWorkflow Table does NOT exist in this database, then lets do the migration!\n         // If XMLWorkflow Table ALREADY exists, then this migration is a noop, we assume you manually ran the sql\n         // scripts\n-        if (DatabaseUtils.tableExists(connection, \"cwf_workflowitem\")) {\n+        if (DatabaseUtils.tableExists(context.getConnection(), \"cwf_workflowitem\")) {\n             return;\n         } else {\n             //Migrate the basic workflow\n             // Get the contents of our data migration script, based on path & DB type\n-            dataMigrateSQL = new ClassPathResource(sqlMigrationPath + \"basicWorkflow\" + \"/V5.7_2017.05.05__DS-3431.sql\",\n-                                                   getClass().getClassLoader())\n-                .loadAsString(Constants.DEFAULT_ENCODING);\n+            dataMigrateSQL = MigrationUtils.resourceToString(\n+                new ClassPathResource(sqlMigrationPath + \"basicWorkflow\" + \"/V5.7_2017.05.05__DS-3431.sql\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxNzgzMw=="}, "originalCommit": null, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM0ODk5OA==", "bodyText": "Yes.  ClassPathResource can do a number of things, but the only thing it is doing for us is holding a reference to a String.  We may as well pass the String reference to resourceToString directly, instead of wrapping it in another object.  I wouldn't refuse to approve this patch as-is just because of this, though.", "url": "https://github.com/DSpace/DSpace/pull/2949#discussion_r492348998", "createdAt": "2020-09-21T21:12:25Z", "author": {"login": "mwoodiupui"}, "path": "dspace-api/src/main/java/org/dspace/storage/rdbms/migration/V5_7_2017_05_05__DS_3431_Add_Policies_for_BasicWorkflow.java", "diffHunk": "@@ -7,45 +7,42 @@\n  */\n package org.dspace.storage.rdbms.migration;\n \n-import java.sql.Connection;\n-\n-import org.dspace.core.Constants;\n import org.dspace.storage.rdbms.DatabaseUtils;\n-import org.flywaydb.core.api.migration.MigrationChecksumProvider;\n-import org.flywaydb.core.api.migration.jdbc.JdbcMigration;\n-import org.flywaydb.core.internal.util.scanner.classpath.ClassPathResource;\n+import org.flywaydb.core.api.migration.BaseJavaMigration;\n+import org.flywaydb.core.api.migration.Context;\n+import org.springframework.core.io.ClassPathResource;\n \n public class V5_7_2017_05_05__DS_3431_Add_Policies_for_BasicWorkflow\n-    implements JdbcMigration, MigrationChecksumProvider {\n+    extends BaseJavaMigration {\n \n     // Size of migration script run\n     Integer migration_file_size = -1;\n \n \n     @Override\n-    public void migrate(Connection connection) throws Exception {\n+    public void migrate(Context context) throws Exception {\n         // Based on type of DB, get path to SQL migration script\n-        String dbtype = DatabaseUtils.getDbType(connection);\n+        String dbtype = DatabaseUtils.getDbType(context.getConnection());\n \n         String dataMigrateSQL;\n         String sqlMigrationPath = \"org/dspace/storage/rdbms/sqlmigration/workflow/\" + dbtype + \"/\";\n         // Now, check if the XMLWorkflow table (cwf_workflowitem) already exists in this database\n         // If XMLWorkflow Table does NOT exist in this database, then lets do the migration!\n         // If XMLWorkflow Table ALREADY exists, then this migration is a noop, we assume you manually ran the sql\n         // scripts\n-        if (DatabaseUtils.tableExists(connection, \"cwf_workflowitem\")) {\n+        if (DatabaseUtils.tableExists(context.getConnection(), \"cwf_workflowitem\")) {\n             return;\n         } else {\n             //Migrate the basic workflow\n             // Get the contents of our data migration script, based on path & DB type\n-            dataMigrateSQL = new ClassPathResource(sqlMigrationPath + \"basicWorkflow\" + \"/V5.7_2017.05.05__DS-3431.sql\",\n-                                                   getClass().getClassLoader())\n-                .loadAsString(Constants.DEFAULT_ENCODING);\n+            dataMigrateSQL = MigrationUtils.resourceToString(\n+                new ClassPathResource(sqlMigrationPath + \"basicWorkflow\" + \"/V5.7_2017.05.05__DS-3431.sql\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxNzgzMw=="}, "originalCommit": null, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1410, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}