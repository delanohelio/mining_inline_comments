{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4Njk2ODI4", "number": 2688, "title": "DS-4124: Add ITs to prove access restricted Bitstreams cannot be accessed anonymously", "bodyText": "See https://jira.lyrasis.org/browse/DS-4124\nPlease note that this PR is build on top of #2687", "createdAt": "2020-02-23T11:48:57Z", "url": "https://github.com/DSpace/DSpace/pull/2688", "merged": true, "mergeCommit": {"oid": "d0ced1d94f68037c8e50c3f9942a2337f99396c1"}, "closed": true, "closedAt": "2020-03-04T18:52:18Z", "author": {"login": "Micheleboychuk"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcFz-abAH2gAyMzc4Njk2ODI4OmZhZDA4YWRjYjhkYjg4YzhhZjdiY2Q3OWQ3NzU5MjBmYTU1NWQ1ZGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKbkD6gFqTM2OTAzNDIwOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fad08adcb8db88c8af7bcd79d775920fa555d5dd", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/fad08adcb8db88c8af7bcd79d775920fa555d5dd", "committedDate": "2020-02-19T10:29:02Z", "message": "added IT to prove access restricted Items cannot be accessed anonymously"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40ee6e54f74bf65e3d158717a8829d42c4ab952c", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/40ee6e54f74bf65e3d158717a8829d42c4ab952c", "committedDate": "2020-02-19T10:33:45Z", "message": "turn on check to verify admin of collection/community"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a0a5078de99516b939e9afc426f7f6f09e38174", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/9a0a5078de99516b939e9afc426f7f6f09e38174", "committedDate": "2020-02-20T15:01:22Z", "message": "refactor tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1daa462741dd841abfef8b6b583c1a529fab9993", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/1daa462741dd841abfef8b6b583c1a529fab9993", "committedDate": "2020-02-20T16:15:57Z", "message": "IT to prove access restricted Bitstreams cannot be accessed anonymously"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MjUyOTY1", "url": "https://github.com/DSpace/DSpace/pull/2688#pullrequestreview-364252965", "createdAt": "2020-02-25T15:50:58Z", "commit": {"oid": "1daa462741dd841abfef8b6b583c1a529fab9993"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNTo1MDo1OFrOFuLe7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNTo1NjoyMlrOFuLtgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk2Njk1OQ==", "bodyText": "Can we move this context.restoreAuthSystemState() and everything after this outside of the try clause?  I think the try only needs to be around the BitstreamBuilder, unless I'm misunderstanding something?", "url": "https://github.com/DSpace/DSpace/pull/2688#discussion_r383966959", "createdAt": "2020-02-25T15:50:58Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/BitstreamRestControllerIT.java", "diffHunk": "@@ -349,6 +351,170 @@ public void testEmbargoedBitstream() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void embargoedBitstreamForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, parentCommunity)\n+                .withName(\"Collection 1\")\n+                .build();\n+\n+        // a public item with an embargoed bitstream\n+        String bitstreamContent = \"Embargoed!\";\n+\n+        try (InputStream is = IOUtils.toInputStream(bitstreamContent, CharEncoding.UTF_8)) {\n+\n+            Item publicItem1 = ItemBuilder.createItem(context, col1)\n+                                          .withTitle(\"Public item 1\")\n+                                          .withIssueDate(\"2017-10-17\")\n+                                          .withAuthor(\"Smith, Donald\")\n+                                          .build();\n+\n+            Bitstream bitstream = BitstreamBuilder\n+                .createBitstream(context, publicItem1, is)\n+                .withName(\"Test Embargoed Bitstream\")\n+                .withDescription(\"This bitstream is embargoed\")\n+                .withMimeType(\"text/plain\")\n+                .withEmbargoPeriod(\"3 months\")\n+                .build();\n+\n+            context.restoreAuthSystemState();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1daa462741dd841abfef8b6b583c1a529fab9993"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk2NzU2NQ==", "bodyText": "Again, here, I think the try can be closed after the BitstreamBuilder. Everything else can move outside of the try clause. Look at how you did this in embargoedBitstreamAccessGrantByAdminsTest()", "url": "https://github.com/DSpace/DSpace/pull/2688#discussion_r383967565", "createdAt": "2020-02-25T15:51:53Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/BitstreamRestControllerIT.java", "diffHunk": "@@ -349,6 +351,170 @@ public void testEmbargoedBitstream() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void embargoedBitstreamForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, parentCommunity)\n+                .withName(\"Collection 1\")\n+                .build();\n+\n+        // a public item with an embargoed bitstream\n+        String bitstreamContent = \"Embargoed!\";\n+\n+        try (InputStream is = IOUtils.toInputStream(bitstreamContent, CharEncoding.UTF_8)) {\n+\n+            Item publicItem1 = ItemBuilder.createItem(context, col1)\n+                                          .withTitle(\"Public item 1\")\n+                                          .withIssueDate(\"2017-10-17\")\n+                                          .withAuthor(\"Smith, Donald\")\n+                                          .build();\n+\n+            Bitstream bitstream = BitstreamBuilder\n+                .createBitstream(context, publicItem1, is)\n+                .withName(\"Test Embargoed Bitstream\")\n+                .withDescription(\"This bitstream is embargoed\")\n+                .withMimeType(\"text/plain\")\n+                .withEmbargoPeriod(\"3 months\")\n+                .build();\n+\n+            context.restoreAuthSystemState();\n+\n+            String authToken = getAuthToken(eperson.getEmail(), password);\n+            getClient(authToken).perform(get(\"/api/core/bitstreams/\" + bitstream.getID() + \"/content\"))\n+                       .andExpect(status().isForbidden());\n+\n+            // An forbidden request should not log statistics\n+            checkNumberOfStatsRecords(bitstream, 0);\n+       }\n+    }\n+\n+    @Test\n+    public void expiredEmbargoedBitstreamTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, parentCommunity)\n+                .withName(\"Collection 1\")\n+                .build();\n+\n+        String bitstreamContent = \"Embargoed!\";\n+\n+        try (InputStream is = IOUtils.toInputStream(bitstreamContent, CharEncoding.UTF_8)) {\n+\n+            Item publicItem1 = ItemBuilder.createItem(context, col1)\n+                    .withTitle(\"Public item 1\")\n+                    .withIssueDate(\"2015-10-17\")\n+                    .withAuthor(\"Smith, Donald\")\n+                    .build();\n+\n+            Bitstream bitstream = BitstreamBuilder\n+                .createBitstream(context, publicItem1, is)\n+                .withName(\"Test Embargoed Bitstream\")\n+                .withDescription(\"This bitstream is embargoed\")\n+                .withMimeType(\"text/plain\")\n+                .withEmbargoPeriod(\"-3 months\")\n+                .build();\n+\n+            context.restoreAuthSystemState();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1daa462741dd841abfef8b6b583c1a529fab9993"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk2Nzk4Mg==", "bodyText": "Please add a similar test for an unauthenticated user.", "url": "https://github.com/DSpace/DSpace/pull/2688#discussion_r383967982", "createdAt": "2020-02-25T15:52:31Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/BitstreamRestControllerIT.java", "diffHunk": "@@ -349,6 +351,170 @@ public void testEmbargoedBitstream() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void embargoedBitstreamForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, parentCommunity)\n+                .withName(\"Collection 1\")\n+                .build();\n+\n+        // a public item with an embargoed bitstream\n+        String bitstreamContent = \"Embargoed!\";\n+\n+        try (InputStream is = IOUtils.toInputStream(bitstreamContent, CharEncoding.UTF_8)) {\n+\n+            Item publicItem1 = ItemBuilder.createItem(context, col1)\n+                                          .withTitle(\"Public item 1\")\n+                                          .withIssueDate(\"2017-10-17\")\n+                                          .withAuthor(\"Smith, Donald\")\n+                                          .build();\n+\n+            Bitstream bitstream = BitstreamBuilder\n+                .createBitstream(context, publicItem1, is)\n+                .withName(\"Test Embargoed Bitstream\")\n+                .withDescription(\"This bitstream is embargoed\")\n+                .withMimeType(\"text/plain\")\n+                .withEmbargoPeriod(\"3 months\")\n+                .build();\n+\n+            context.restoreAuthSystemState();\n+\n+            String authToken = getAuthToken(eperson.getEmail(), password);\n+            getClient(authToken).perform(get(\"/api/core/bitstreams/\" + bitstream.getID() + \"/content\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1daa462741dd841abfef8b6b583c1a529fab9993"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk2ODg1Nw==", "bodyText": "Please add a similar Forbidden test for a Community Admin of a (new) Community which is not a parent Community of collection1.", "url": "https://github.com/DSpace/DSpace/pull/2688#discussion_r383968857", "createdAt": "2020-02-25T15:53:48Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/BitstreamRestControllerIT.java", "diffHunk": "@@ -349,6 +351,170 @@ public void testEmbargoedBitstream() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void embargoedBitstreamForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, parentCommunity)\n+                .withName(\"Collection 1\")\n+                .build();\n+\n+        // a public item with an embargoed bitstream\n+        String bitstreamContent = \"Embargoed!\";\n+\n+        try (InputStream is = IOUtils.toInputStream(bitstreamContent, CharEncoding.UTF_8)) {\n+\n+            Item publicItem1 = ItemBuilder.createItem(context, col1)\n+                                          .withTitle(\"Public item 1\")\n+                                          .withIssueDate(\"2017-10-17\")\n+                                          .withAuthor(\"Smith, Donald\")\n+                                          .build();\n+\n+            Bitstream bitstream = BitstreamBuilder\n+                .createBitstream(context, publicItem1, is)\n+                .withName(\"Test Embargoed Bitstream\")\n+                .withDescription(\"This bitstream is embargoed\")\n+                .withMimeType(\"text/plain\")\n+                .withEmbargoPeriod(\"3 months\")\n+                .build();\n+\n+            context.restoreAuthSystemState();\n+\n+            String authToken = getAuthToken(eperson.getEmail(), password);\n+            getClient(authToken).perform(get(\"/api/core/bitstreams/\" + bitstream.getID() + \"/content\"))\n+                       .andExpect(status().isForbidden());\n+\n+            // An forbidden request should not log statistics\n+            checkNumberOfStatsRecords(bitstream, 0);\n+       }\n+    }\n+\n+    @Test\n+    public void expiredEmbargoedBitstreamTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, parentCommunity)\n+                .withName(\"Collection 1\")\n+                .build();\n+\n+        String bitstreamContent = \"Embargoed!\";\n+\n+        try (InputStream is = IOUtils.toInputStream(bitstreamContent, CharEncoding.UTF_8)) {\n+\n+            Item publicItem1 = ItemBuilder.createItem(context, col1)\n+                    .withTitle(\"Public item 1\")\n+                    .withIssueDate(\"2015-10-17\")\n+                    .withAuthor(\"Smith, Donald\")\n+                    .build();\n+\n+            Bitstream bitstream = BitstreamBuilder\n+                .createBitstream(context, publicItem1, is)\n+                .withName(\"Test Embargoed Bitstream\")\n+                .withDescription(\"This bitstream is embargoed\")\n+                .withMimeType(\"text/plain\")\n+                .withEmbargoPeriod(\"-3 months\")\n+                .build();\n+\n+            context.restoreAuthSystemState();\n+\n+            // all  are allowed access to item with embargoed expired\n+\n+            String authToken = getAuthToken(eperson.getEmail(), password);\n+            getClient(authToken).perform(get(\"/api/core/bitstreams/\" + bitstream.getID() + \"/content\"))\n+                       .andExpect(status().isOk());\n+\n+            getClient().perform(get(\"/api/core/bitstreams/\" + bitstream.getID() + \"/content\"))\n+                       .andExpect(status().isOk());\n+\n+            checkNumberOfStatsRecords(bitstream, 2);\n+       }\n+    }\n+\n+    @Test\n+    public void embargoedBitstreamAccessGrantByAdminsTest() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminParentCommunity = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"adminCommunity@mail.com\")\n+                .withPassword(\"qwerty02\")\n+                .build();\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                   .withName(\"Parent Community\")\n+                   .withAdminGroup(adminParentCommunity)\n+                   .build();\n+\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                   .withName(\"Sub Community\")\n+                   .build();\n+\n+        EPerson adminCollection1 = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"adminCollection1@mail.com\")\n+                .withPassword(\"qwerty03\")\n+                .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                   .withName(\"Collection 1\")\n+                   .withAdminGroup(adminCollection1)\n+                   .build();\n+\n+        EPerson adminCollection2 = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"adminCol2@mail.com\")\n+                .withPassword(\"qwerty01\")\n+                .build();\n+        Collection col2 = CollectionBuilder.createCollection(context, child1)\n+                   .withName(\"Collection 2\")\n+                   .withAdminGroup(adminCollection2)\n+                   .build();\n+\n+\n+        String bitstreamContent = \"Embargoed!\";\n+        Bitstream bitstream = null;\n+        try (InputStream is = IOUtils.toInputStream(bitstreamContent, CharEncoding.UTF_8)) {\n+\n+            Item item = ItemBuilder.createItem(context, col1)\n+                    .withTitle(\"Test\")\n+                    .withIssueDate(\"2018-10-18\")\n+                    .withAuthor(\"Smith, Donald\")\n+                    .withSubject(\"ExtraEntry\")\n+                    .build();\n+\n+            bitstream = BitstreamBuilder.createBitstream(context, item, is)\n+                    .withName(\"Bitstream\")\n+                    .withDescription(\"Description\")\n+                    .withMimeType(\"text/plain\")\n+                    .withEmbargoPeriod(\"2 week\")\n+                    .build();\n+        }\n+        context.restoreAuthSystemState();\n+\n+        // parent community's admin user is allowed access to embargoed item\n+        String tokenAdminParentCommunity = getAuthToken(adminParentCommunity.getEmail(), \"qwerty02\");\n+        getClient(tokenAdminParentCommunity).perform(get(\"/api/core/bitstreams/\" + bitstream.getID() + \"/content\"))\n+                   .andExpect(status().isOk());\n+\n+        // collection1's admin user is allowed access to embargoed item\n+        String tokenAdminCollection1 = getAuthToken(adminCollection1.getEmail(), \"qwerty03\");\n+        getClient(tokenAdminCollection1).perform(get(\"/api/core/bitstreams/\" + bitstream.getID() + \"/content\"))\n+                   .andExpect(status().isOk());\n+\n+        checkNumberOfStatsRecords(bitstream, 2);\n+\n+        // admin of second collection is NOT allowed access to embargoed item  of first collection\n+        String tokenAdminCollection2 = getAuthToken(adminCollection2.getEmail(), \"qwerty01\");\n+        getClient(tokenAdminCollection2).perform(get(\"/api/core/bitstreams/\" + bitstream.getID() + \"/content\"))\n+                   .andExpect(status().isForbidden());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1daa462741dd841abfef8b6b583c1a529fab9993"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk2OTQyMw==", "bodyText": "Again, I think you can close the try clause here.  Also, you are missing a context.restoreAuthSystemState(); in this test.", "url": "https://github.com/DSpace/DSpace/pull/2688#discussion_r383969423", "createdAt": "2020-02-25T15:54:36Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/BitstreamRestControllerIT.java", "diffHunk": "@@ -396,6 +562,141 @@ public void testPrivateBitstream() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void restrictedGroupBitstreamForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson eperson2 = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"eperson2@mail.com\")\n+                .withPassword(\"qwerty02\")\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, parentCommunity)\n+                .withName(\"Collection 1\")\n+                .build();\n+\n+        Group restrictedGroup = GroupBuilder.createGroup(context)\n+                .withName(\"Restricted Group\")\n+                .addMember(eperson)\n+                .build();\n+\n+        String bitstreamContent = \"Private!\";\n+        try (InputStream is = IOUtils.toInputStream(bitstreamContent, CharEncoding.UTF_8)) {\n+\n+            Item item = ItemBuilder.createItem(context, col1)\n+                    .withTitle(\"item 1\")\n+                    .withIssueDate(\"2013-01-17\")\n+                    .withAuthor(\"Doe, John\")\n+                    .build();\n+            Bitstream bitstream = BitstreamBuilder\n+                .createBitstream(context, item, is)\n+                .withName(\"Test Embargoed Bitstream\")\n+                .withDescription(\"This bitstream is embargoed\")\n+                .withMimeType(\"text/plain\")\n+                .withReaderGroup(restrictedGroup)\n+                .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1daa462741dd841abfef8b6b583c1a529fab9993"}, "originalPosition": 227}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk3MDIxMw==", "bodyText": "Again, I think you can close the try clause here. Also, you are missing a context.restoreAuthSystemState(); in this test too.", "url": "https://github.com/DSpace/DSpace/pull/2688#discussion_r383970213", "createdAt": "2020-02-25T15:55:40Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/BitstreamRestControllerIT.java", "diffHunk": "@@ -396,6 +562,141 @@ public void testPrivateBitstream() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void restrictedGroupBitstreamForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson eperson2 = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"eperson2@mail.com\")\n+                .withPassword(\"qwerty02\")\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, parentCommunity)\n+                .withName(\"Collection 1\")\n+                .build();\n+\n+        Group restrictedGroup = GroupBuilder.createGroup(context)\n+                .withName(\"Restricted Group\")\n+                .addMember(eperson)\n+                .build();\n+\n+        String bitstreamContent = \"Private!\";\n+        try (InputStream is = IOUtils.toInputStream(bitstreamContent, CharEncoding.UTF_8)) {\n+\n+            Item item = ItemBuilder.createItem(context, col1)\n+                    .withTitle(\"item 1\")\n+                    .withIssueDate(\"2013-01-17\")\n+                    .withAuthor(\"Doe, John\")\n+                    .build();\n+            Bitstream bitstream = BitstreamBuilder\n+                .createBitstream(context, item, is)\n+                .withName(\"Test Embargoed Bitstream\")\n+                .withDescription(\"This bitstream is embargoed\")\n+                .withMimeType(\"text/plain\")\n+                .withReaderGroup(restrictedGroup)\n+                .build();\n+\n+\n+            // download the bitstream\n+            // eperson that belong to restricted group is allowed access to the item\n+            String authToken = getAuthToken(eperson.getEmail(), password);\n+            getClient(authToken).perform(get(\"/api/core/bitstreams/\" + bitstream.getID() + \"/content\"))\n+                                .andExpect(status().isOk());\n+\n+            checkNumberOfStatsRecords(bitstream, 1);\n+\n+            String tokenEPerson2 = getAuthToken(eperson2.getEmail(), \"qwerty02\");\n+            getClient(tokenEPerson2).perform(get(\"/api/core/bitstreams/\" + bitstream.getID() + \"/content\"))\n+                                .andExpect(status().isForbidden());\n+\n+            // Anonymous users CANNOT access/download Bitstreams that are restricted\n+            getClient().perform(get(\"/api/core/bitstreams/\" + bitstream.getID() + \"/content\"))\n+                                .andExpect(status().isUnauthorized());\n+\n+            checkNumberOfStatsRecords(bitstream, 1);\n+        }\n+    }\n+\n+    @Test\n+    public void restrictedGroupBitstreamAccessGrantByAdminsTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminParentCommunity = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"adminCommunity@mail.com\")\n+                .withPassword(\"qwerty00\")\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .withAdminGroup(adminParentCommunity)\n+                .build();\n+\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"admin1@mail.com\")\n+                .withPassword(\"qwerty01\")\n+                .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, parentCommunity)\n+                .withName(\"Collection 1\")\n+                .withAdminGroup(adminCol1)\n+                .build();\n+\n+        EPerson adminCol2 = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"admin2@mail.com\")\n+                .withPassword(\"qwerty02\")\n+                .build();\n+        Collection col2 = CollectionBuilder.createCollection(context, parentCommunity)\n+                .withName(\"Collection 2\")\n+                .withAdminGroup(adminCol2)\n+                .build();\n+\n+        Group restrictedGroup = GroupBuilder.createGroup(context)\n+                .withName(\"Restricted Group\")\n+                .addMember(eperson)\n+                .build();\n+\n+        String bitstreamContent = \"Private!\";\n+        try (InputStream is = IOUtils.toInputStream(bitstreamContent, CharEncoding.UTF_8)) {\n+\n+            Item item = ItemBuilder.createItem(context, col1)\n+                    .withTitle(\"item\")\n+                    .withIssueDate(\"2018-10-17\")\n+                    .withAuthor(\"Doe, John\")\n+                    .build();\n+            Bitstream bitstream = BitstreamBuilder\n+                .createBitstream(context, item, is)\n+                .withName(\"Test Embargoed Bitstream\")\n+                .withDescription(\"This bitstream is embargoed\")\n+                .withMimeType(\"text/plain\")\n+                .withReaderGroup(restrictedGroup)\n+                .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1daa462741dd841abfef8b6b583c1a529fab9993"}, "originalPosition": 301}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk3MDY4OQ==", "bodyText": "It'd be good to again add a second Community that is not a parent of collection1, and ensure that Community's Admin is also Forbidden.", "url": "https://github.com/DSpace/DSpace/pull/2688#discussion_r383970689", "createdAt": "2020-02-25T15:56:22Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/BitstreamRestControllerIT.java", "diffHunk": "@@ -396,6 +562,141 @@ public void testPrivateBitstream() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void restrictedGroupBitstreamForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson eperson2 = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"eperson2@mail.com\")\n+                .withPassword(\"qwerty02\")\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, parentCommunity)\n+                .withName(\"Collection 1\")\n+                .build();\n+\n+        Group restrictedGroup = GroupBuilder.createGroup(context)\n+                .withName(\"Restricted Group\")\n+                .addMember(eperson)\n+                .build();\n+\n+        String bitstreamContent = \"Private!\";\n+        try (InputStream is = IOUtils.toInputStream(bitstreamContent, CharEncoding.UTF_8)) {\n+\n+            Item item = ItemBuilder.createItem(context, col1)\n+                    .withTitle(\"item 1\")\n+                    .withIssueDate(\"2013-01-17\")\n+                    .withAuthor(\"Doe, John\")\n+                    .build();\n+            Bitstream bitstream = BitstreamBuilder\n+                .createBitstream(context, item, is)\n+                .withName(\"Test Embargoed Bitstream\")\n+                .withDescription(\"This bitstream is embargoed\")\n+                .withMimeType(\"text/plain\")\n+                .withReaderGroup(restrictedGroup)\n+                .build();\n+\n+\n+            // download the bitstream\n+            // eperson that belong to restricted group is allowed access to the item\n+            String authToken = getAuthToken(eperson.getEmail(), password);\n+            getClient(authToken).perform(get(\"/api/core/bitstreams/\" + bitstream.getID() + \"/content\"))\n+                                .andExpect(status().isOk());\n+\n+            checkNumberOfStatsRecords(bitstream, 1);\n+\n+            String tokenEPerson2 = getAuthToken(eperson2.getEmail(), \"qwerty02\");\n+            getClient(tokenEPerson2).perform(get(\"/api/core/bitstreams/\" + bitstream.getID() + \"/content\"))\n+                                .andExpect(status().isForbidden());\n+\n+            // Anonymous users CANNOT access/download Bitstreams that are restricted\n+            getClient().perform(get(\"/api/core/bitstreams/\" + bitstream.getID() + \"/content\"))\n+                                .andExpect(status().isUnauthorized());\n+\n+            checkNumberOfStatsRecords(bitstream, 1);\n+        }\n+    }\n+\n+    @Test\n+    public void restrictedGroupBitstreamAccessGrantByAdminsTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson adminParentCommunity = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"adminCommunity@mail.com\")\n+                .withPassword(\"qwerty00\")\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .withAdminGroup(adminParentCommunity)\n+                .build();\n+\n+        EPerson adminCol1 = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"admin1@mail.com\")\n+                .withPassword(\"qwerty01\")\n+                .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, parentCommunity)\n+                .withName(\"Collection 1\")\n+                .withAdminGroup(adminCol1)\n+                .build();\n+\n+        EPerson adminCol2 = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"admin2@mail.com\")\n+                .withPassword(\"qwerty02\")\n+                .build();\n+        Collection col2 = CollectionBuilder.createCollection(context, parentCommunity)\n+                .withName(\"Collection 2\")\n+                .withAdminGroup(adminCol2)\n+                .build();\n+\n+        Group restrictedGroup = GroupBuilder.createGroup(context)\n+                .withName(\"Restricted Group\")\n+                .addMember(eperson)\n+                .build();\n+\n+        String bitstreamContent = \"Private!\";\n+        try (InputStream is = IOUtils.toInputStream(bitstreamContent, CharEncoding.UTF_8)) {\n+\n+            Item item = ItemBuilder.createItem(context, col1)\n+                    .withTitle(\"item\")\n+                    .withIssueDate(\"2018-10-17\")\n+                    .withAuthor(\"Doe, John\")\n+                    .build();\n+            Bitstream bitstream = BitstreamBuilder\n+                .createBitstream(context, item, is)\n+                .withName(\"Test Embargoed Bitstream\")\n+                .withDescription(\"This bitstream is embargoed\")\n+                .withMimeType(\"text/plain\")\n+                .withReaderGroup(restrictedGroup)\n+                .build();\n+\n+\n+            // download the bitstream\n+            // parent community's admin user is allowed access to the item belong restricted group\n+            String tokenAdminParentCommuity = getAuthToken(adminParentCommunity.getEmail(), \"qwerty00\");\n+            getClient(tokenAdminParentCommuity).perform(get(\"/api/core/bitstreams/\" + bitstream.getID() + \"/content\"))\n+                                .andExpect(status().isOk());\n+\n+            // collection1's admin user is allowed access to the item belong restricted group\n+            String tokenAdminCol1 = getAuthToken(adminCol1.getEmail(), \"qwerty01\");\n+            getClient(tokenAdminCol1).perform(get(\"/api/core/bitstreams/\" + bitstream.getID() + \"/content\"))\n+                                .andExpect(status().isOk());\n+\n+            checkNumberOfStatsRecords(bitstream, 2);\n+\n+            // collection2's admin user is NOT allowed access to the item belong collection1\n+            String tokenAdminCol2 = getAuthToken(adminCol2.getEmail(), \"qwerty02\");\n+            getClient(tokenAdminCol2).perform(get(\"/api/core/bitstreams/\" + bitstream.getID() + \"/content\"))\n+                                .andExpect(status().isForbidden());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1daa462741dd841abfef8b6b583c1a529fab9993"}, "originalPosition": 320}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90688555b8a09cb8b44b86583988a00b89673be4", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/90688555b8a09cb8b44b86583988a00b89673be4", "committedDate": "2020-02-28T17:03:18Z", "message": "code cleanup - community feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac61bd0cac8d376624adf8887ffcf9e60d01fd5f", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/ac61bd0cac8d376624adf8887ffcf9e60d01fd5f", "committedDate": "2020-03-02T09:08:18Z", "message": "Merge branch 'master' of https://github.com/DSpace/DSpace into ITtoProveAccessRestrictedItem-DS-4123\n\n# Conflicts:\n#\tdspace-server-webapp/src/test/java/org/dspace/app/rest/builder/CommunityBuilder.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7a9d9262e6b9b20e527dc33b9538a7a40b67685", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/f7a9d9262e6b9b20e527dc33b9538a7a40b67685", "committedDate": "2020-03-02T13:59:18Z", "message": "code cleanup - community feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ac981f8778f212fb056ca8b42f83f90a1a3fc75", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/5ac981f8778f212fb056ca8b42f83f90a1a3fc75", "committedDate": "2020-03-02T14:00:41Z", "message": "Merge branch 'ITtoProveAccessRestrictedItem-DS-4123' of https://github.com/Micheleboychuk/DSpace into ITforBitstream-DS-4124"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MDM0MjA4", "url": "https://github.com/DSpace/DSpace/pull/2688#pullrequestreview-369034208", "createdAt": "2020-03-04T18:52:09Z", "commit": {"oid": "5ac981f8778f212fb056ca8b42f83f90a1a3fc75"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1625, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}