{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1NDcyODM4", "number": 2674, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNjozNTozOVrODf8ujw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMTo0ODoxMVrODgBvrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0ODI3NDA3OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/test/java/org/dspace/core/ContextTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNjozNTozOVrOFp8mQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNjozNTozOVrOFp8mQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUyODc2OA==", "bodyText": "NOTE for reviewers: This is the test that will fail on current master.  Anytime context.commit() is called, context.isValid() will return false until a new database transaction is started in that same Context.", "url": "https://github.com/DSpace/DSpace/pull/2674#discussion_r379528768", "createdAt": "2020-02-14T16:35:39Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/test/java/org/dspace/core/ContextTest.java", "diffHunk": "@@ -255,6 +261,60 @@ public void testComplete2() throws SQLException {\n         cleanupContext(instance);\n     }\n \n+    /**\n+     * Test of commit method, of class Context.\n+     */\n+    @Test\n+    public void testCommit() throws SQLException, AuthorizeException, IOException {\n+        // To test commit() we need a new Context object\n+        Context instance = new Context();\n+\n+        // By default, we should have a new DB connection, so let's make sure it is there\n+        assertThat(\"HibernateDBConnection should exist\", instance.getDBConnection(), notNullValue());\n+        assertTrue(\"Context should be valid\", instance.isValid());\n+        assertTrue(\"Transaction should be open\", instance.isTransactionAlive());\n+\n+        // Allow full Admin perms (in new context)\n+        when(authorizeServiceSpy.isAdmin(instance)).thenReturn(true);\n+\n+        // Create a new EPerson (to be committed)\n+        String createdEmail = \"myfakeemail@gmail.com\";\n+        EPerson newUser = ePersonService.create(instance);\n+        newUser.setFirstName(instance, \"Tim\");\n+        newUser.setLastName(instance, \"Smith\");\n+        newUser.setEmail(createdEmail);\n+        newUser.setCanLogIn(true);\n+        newUser.setLanguage(instance, I18nUtil.getDefaultLocale().getLanguage());\n+\n+        // Now, call commit()\n+        instance.commit();\n+\n+        // We expect our DB connection to still exist\n+        assertThat(\"HibernateDBConnection should still be open\", instance.getDBConnection(), notNullValue());\n+        // We expect the Context to be valid\n+        assertTrue(\"Context should still be valid\", instance.isValid());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5fe08c15802b136764a6b375a327b27b4876a53"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0OTA3MzIxOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/test/java/org/dspace/core/ContextTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMTozOTowN1rOFqEZ-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMjo1ODowMVrOFr6xdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY1NjY5OQ==", "bodyText": "Small point:  I'm always leery of testing with real email domains, even if the localpart \"should be fake\".  myfakeemail@example.com should be guaranteed undeliverable, since that domain is reserved.", "url": "https://github.com/DSpace/DSpace/pull/2674#discussion_r379656699", "createdAt": "2020-02-14T21:39:07Z", "author": {"login": "mwoodiupui"}, "path": "dspace-api/src/test/java/org/dspace/core/ContextTest.java", "diffHunk": "@@ -255,6 +261,60 @@ public void testComplete2() throws SQLException {\n         cleanupContext(instance);\n     }\n \n+    /**\n+     * Test of commit method, of class Context.\n+     */\n+    @Test\n+    public void testCommit() throws SQLException, AuthorizeException, IOException {\n+        // To test commit() we need a new Context object\n+        Context instance = new Context();\n+\n+        // By default, we should have a new DB connection, so let's make sure it is there\n+        assertThat(\"HibernateDBConnection should exist\", instance.getDBConnection(), notNullValue());\n+        assertTrue(\"Context should be valid\", instance.isValid());\n+        assertTrue(\"Transaction should be open\", instance.isTransactionAlive());\n+\n+        // Allow full Admin perms (in new context)\n+        when(authorizeServiceSpy.isAdmin(instance)).thenReturn(true);\n+\n+        // Create a new EPerson (to be committed)\n+        String createdEmail = \"myfakeemail@gmail.com\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5fe08c15802b136764a6b375a327b27b4876a53"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU5NjAyMA==", "bodyText": "@mwoodiupui : Good point.  I've corrected this mistake (it was in two places in the same test) in this commit: 8083165", "url": "https://github.com/DSpace/DSpace/pull/2674#discussion_r381596020", "createdAt": "2020-02-19T22:58:01Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/test/java/org/dspace/core/ContextTest.java", "diffHunk": "@@ -255,6 +261,60 @@ public void testComplete2() throws SQLException {\n         cleanupContext(instance);\n     }\n \n+    /**\n+     * Test of commit method, of class Context.\n+     */\n+    @Test\n+    public void testCommit() throws SQLException, AuthorizeException, IOException {\n+        // To test commit() we need a new Context object\n+        Context instance = new Context();\n+\n+        // By default, we should have a new DB connection, so let's make sure it is there\n+        assertThat(\"HibernateDBConnection should exist\", instance.getDBConnection(), notNullValue());\n+        assertTrue(\"Context should be valid\", instance.isValid());\n+        assertTrue(\"Transaction should be open\", instance.isTransactionAlive());\n+\n+        // Allow full Admin perms (in new context)\n+        when(authorizeServiceSpy.isAdmin(instance)).thenReturn(true);\n+\n+        // Create a new EPerson (to be committed)\n+        String createdEmail = \"myfakeemail@gmail.com\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY1NjY5OQ=="}, "originalCommit": {"oid": "a5fe08c15802b136764a6b375a327b27b4876a53"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0OTA5NjEzOnYy", "diffSide": "LEFT", "path": "dspace-api/src/main/java/org/dspace/core/Context.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMTo0ODoxMVrOFqEn9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMjo1OTo1NFrOFr60jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2MDI3OQ==", "bodyText": "Could be logged at DEBUG level.  Not a big deal.", "url": "https://github.com/DSpace/DSpace/pull/2674#discussion_r379660279", "createdAt": "2020-02-14T21:48:11Z", "author": {"login": "mwoodiupui"}, "path": "dspace-api/src/main/java/org/dspace/core/Context.java", "diffHunk": "@@ -571,32 +591,32 @@ public boolean isReadOnly() {\n         return mode != null && mode == Mode.READ_ONLY;\n     }\n \n+    /**\n+     * Add a group's UUID to the list of special groups cached in Context\n+     * @param groupID UUID of group\n+     */\n     public void setSpecialGroup(UUID groupID) {\n         specialGroups.add(groupID);\n-\n-        // System.out.println(\"Added \" + groupID);\n     }\n \n     /**\n-     * test if member of special group\n+     * Test if a group is a special group\n      *\n      * @param groupID ID of special group to test\n      * @return true if member\n      */\n     public boolean inSpecialGroup(UUID groupID) {\n         if (specialGroups.contains(groupID)) {\n-            // System.out.println(\"Contains \" + groupID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5fe08c15802b136764a6b375a327b27b4876a53"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU5NjgxNQ==", "bodyText": "I'm going to just leave this as removed. I agree it could have been solved differently via log.debug. But, as it was already commented out for some time, I don't know how useful it is anymore.  If someone finds a use for it, it's easy to add in later.", "url": "https://github.com/DSpace/DSpace/pull/2674#discussion_r381596815", "createdAt": "2020-02-19T22:59:54Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/core/Context.java", "diffHunk": "@@ -571,32 +591,32 @@ public boolean isReadOnly() {\n         return mode != null && mode == Mode.READ_ONLY;\n     }\n \n+    /**\n+     * Add a group's UUID to the list of special groups cached in Context\n+     * @param groupID UUID of group\n+     */\n     public void setSpecialGroup(UUID groupID) {\n         specialGroups.add(groupID);\n-\n-        // System.out.println(\"Added \" + groupID);\n     }\n \n     /**\n-     * test if member of special group\n+     * Test if a group is a special group\n      *\n      * @param groupID ID of special group to test\n      * @return true if member\n      */\n     public boolean inSpecialGroup(UUID groupID) {\n         if (specialGroups.contains(groupID)) {\n-            // System.out.println(\"Contains \" + groupID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2MDI3OQ=="}, "originalCommit": {"oid": "a5fe08c15802b136764a6b375a327b27b4876a53"}, "originalPosition": 171}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1647, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}