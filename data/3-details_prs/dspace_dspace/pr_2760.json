{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2MTcyNzkz", "number": 2760, "title": "DS-4042 Fix implementation and add integration test for wrong patch request to the submission endpoint", "bodyText": "References\nhttps://jira.lyrasis.org/browse/DS-4042\nDescription\nIn this PR we have added checks over the section and matadata on which you want to run a patch request. In addition we have added the tests to demonstrate the consequences\nChecklist\nThis checklist provides a reminder of what we are going to look for when reviewing your PR. You need not complete this checklist prior to creating your PR (draft PRs are always welcome). If you are unsure about an item in the checklist, don't hesitate to ask. We're here to help!\n\n My PR is small in size (e.g. less than 1,000 lines of code, not including comments & integration tests). Exceptions may be made if previously agreed upon.\n My PR passes Checkstyle validation based on the Code Style Guide\n My PR includes Javadoc for all new (or modified) public methods and classes. It also includes Javadoc for large or complex private methods.\n My PR passes all tests and includes new/updated Unit or Integration Tests for any bug fixes, improvements or new features. A few reminders about what constitutes good tests:\n\nInclude tests for different user types, including: (1) Anonymous user, (2) Logged in user (non-admin), and (3) Administrator.\nInclude tests for known error scenarios and error codes (e.g. 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found, etc)\nFor bug fixes, include a test that reproduces the bug and proves it is fixed. For clarity, it may be useful to provide the test in a separate commit from the bug fix.\n\n\nN/A If my PR includes new, third-party dependencies (in any pom.xml), I've made sure their licenses align with the DSpace BSD License based on the Licensing of Contributions documentation.\nN/A If my PR modifies the REST API, I've linked to the REST Contract page (or open PR) related to this change.", "createdAt": "2020-05-11T15:19:08Z", "url": "https://github.com/DSpace/DSpace/pull/2760", "merged": true, "mergeCommit": {"oid": "a8c3965c0cff4b58719a3ccd89b13a68799287d9"}, "closed": true, "closedAt": "2020-06-25T18:23:11Z", "author": {"login": "Micheleboychuk"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABccu_EcgH2gAyNDE2MTcyNzkzOjkxZDcwZDg1Y2VjNTg1Y2FlMjk5YWFjOTcyZDJmMWM3MTgxOTU3YmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuy3QCAFqTQzNzc0ODEyNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "91d70d85cec585cae299aac972d2f1c7181957bf", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/91d70d85cec585cae299aac972d2f1c7181957bf", "committedDate": "2020-04-30T15:40:29Z", "message": "added ITs to prove that patch request with wrong path or metadata must return 422"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "676648568dd07360b29489210fc2df659833db52", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/676648568dd07360b29489210fc2df659833db52", "committedDate": "2020-04-30T16:58:52Z", "message": "fix return http status for wrong patch request to the submission"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ef11e491962dc5dbf2281752b13ca67ef9a923d", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/6ef11e491962dc5dbf2281752b13ca67ef9a923d", "committedDate": "2020-05-04T07:18:22Z", "message": "added the missing parameter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "741357ece7ed121b421c6f8ab24442e1210badfe", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/741357ece7ed121b421c6f8ab24442e1210badfe", "committedDate": "2020-05-05T07:47:03Z", "message": "Merge branch 'master' into DS-4042_ITs_WrongPatchRequest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fbc15486d14a0584c64dc51ce7e635d920f8289", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/6fbc15486d14a0584c64dc51ce7e635d920f8289", "committedDate": "2020-05-11T12:52:02Z", "message": "dc.source metadata is not present in the upload section, so we con not apply patch remove request"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b7e7cd14e79c074ae6e739b609070388d28f83e", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/7b7e7cd14e79c074ae6e739b609070388d28f83e", "committedDate": "2020-05-14T08:44:14Z", "message": "added IT for patch request on metadata with qualdrop_value"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a1982656a0dc418e2903fc44eab7b2034e390e4", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/3a1982656a0dc418e2903fc44eab7b2034e390e4", "committedDate": "2020-05-14T08:48:15Z", "message": "this method should also check metadata with qualdrop_value"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyOTcwOTYx", "url": "https://github.com/DSpace/DSpace/pull/2760#pullrequestreview-412970961", "createdAt": "2020-05-15T21:11:56Z", "commit": {"oid": "3a1982656a0dc418e2903fc44eab7b2034e390e4"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMToxMTo1N1rOGWT-zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMToyNDowN1rOGWURAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA0OTIyOQ==", "bodyText": "This entire if took me a moment to understand. I think we should add a comment here to describe why \"qualdrop_value\" has to be treated separately.  It might say something like:\n// If this is a \"qualdrop_value\" field, then the full field name is the field + dropdown qualifier", "url": "https://github.com/DSpace/DSpace/pull/2760#discussion_r426049229", "createdAt": "2020-05-15T21:11:57Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/app/util/DCInputSet.java", "diffHunk": "@@ -107,9 +108,20 @@ public boolean isFieldPresent(String fieldName) {\n         for (int i = 0; i < inputs.length; i++) {\n             for (int j = 0; j < inputs[i].length; j++) {\n                 DCInput field = inputs[i][j];\n-                String fullName = field.getFieldName();\n-                if (fullName.equals(fieldName)) {\n-                    return true;\n+                if (field.getInputType().equals(\"qualdrop_value\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a1982656a0dc418e2903fc44eab7b2034e390e4"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1MDA4OA==", "bodyText": "I think this error should say:  \"The field \" + split[0] + \" is not present in section \"", "url": "https://github.com/DSpace/DSpace/pull/2760#discussion_r426050088", "createdAt": "2020-05-15T21:14:13Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/submit/step/DescribeStep.java", "diffHunk": "@@ -110,13 +111,19 @@ private void readField(InProgressSubmission obj, SubmissionStepConfig config, Da\n     }\n \n     @Override\n-    public void doPatchProcessing(Context context, Request currentRequest, InProgressSubmission source, Operation op)\n-        throws Exception {\n+    public void doPatchProcessing(Context context, Request currentRequest, InProgressSubmission source, Operation op,\n+                                  SubmissionStepConfig stepConf) throws Exception {\n \n         PatchOperation<MetadataValueRest> patchOperation = new PatchOperationFactory()\n-            .instanceOf(DESCRIBE_STEP_METADATA_OPERATION_ENTRY, op.getOp());\n-        patchOperation.perform(context, currentRequest, source, op);\n-\n+                        .instanceOf(DESCRIBE_STEP_METADATA_OPERATION_ENTRY, op.getOp());\n+        DCInputSet inputConfig = inputReader.getInputsByFormName(stepConf.getId());\n+        String[] split = patchOperation.getAbsolutePath(op.getPath()).split(\"/\");\n+        if (inputConfig.isFieldPresent(split[0])) {\n+            patchOperation.perform(context, currentRequest, source, op);\n+        } else {\n+            throw new UnprocessableEntityException(\"The attribute \" + split[0] + \" does not present in section \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a1982656a0dc418e2903fc44eab7b2034e390e4"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1MTQwNw==", "bodyText": "If I understand correctly, I think this should likely say \"The path\" + op.getPath() + \" cannot be patched\"", "url": "https://github.com/DSpace/DSpace/pull/2760#discussion_r426051407", "createdAt": "2020-05-15T21:17:30Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/submit/step/LicenseStep.java", "diffHunk": "@@ -50,15 +51,17 @@ public DataLicense getData(SubmissionService submissionService, InProgressSubmis\n     }\n \n     @Override\n-    public void doPatchProcessing(Context context, Request currentRequest, InProgressSubmission source, Operation op)\n-        throws Exception {\n+    public void doPatchProcessing(Context context, Request currentRequest, InProgressSubmission source, Operation op,\n+                                  SubmissionStepConfig stepConf) throws Exception {\n \n         if (op.getPath().endsWith(LICENSE_STEP_OPERATION_ENTRY)) {\n \n             PatchOperation<String> patchOperation = new PatchOperationFactory()\n                 .instanceOf(LICENSE_STEP_OPERATION_ENTRY, op.getOp());\n             patchOperation.perform(context, currentRequest, source, op);\n \n+        } else {\n+            throw new UnprocessableEntityException(\"This path : \" + op.getPath() + \" can not to be replaced\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a1982656a0dc418e2903fc44eab7b2034e390e4"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1MTY0Nw==", "bodyText": "Again, likely should say: \"The field \" + metadata + \" is not present in section \"", "url": "https://github.com/DSpace/DSpace/pull/2760#discussion_r426051647", "createdAt": "2020-05-15T21:18:09Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/submit/step/UploadStep.java", "diffHunk": "@@ -87,8 +98,28 @@ public void doPatchProcessing(Context context, Request currentRequest, InProgres\n             }\n         }\n         PatchOperation<?> patchOperation = new PatchOperationFactory().instanceOf(instance, op.getOp());\n-        patchOperation.perform(context, currentRequest, source, op);\n+        if (instance.equals(AbstractRestProcessingStep.UPLOAD_STEP_METADATA_OPERATION_ENTRY)) {\n+            DCInputSet inputConfig = inputReader.getInputsByFormName(UploadStep.UPLOAD_STEP_METADATA_SECTION);\n+            String[] split = patchOperation.getAbsolutePath(op.getPath()).split(\"/\");\n+            String metadata = findMetadata(split);\n+            if (inputConfig.isFieldPresent(metadata)) {\n+                patchOperation.perform(context, currentRequest, source, op);\n+            } else {\n+                throw new UnprocessableEntityException(\"The attribute \" + metadata + \" does not present in section \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a1982656a0dc418e2903fc44eab7b2034e390e4"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1MjQ2Nw==", "bodyText": "I'm confused by this method.  Why is it only returning metadata fields in the \"dc\" schema?  I think this needs code comments or JavaDocs to explain why this is needed.", "url": "https://github.com/DSpace/DSpace/pull/2760#discussion_r426052467", "createdAt": "2020-05-15T21:20:09Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/submit/step/UploadStep.java", "diffHunk": "@@ -87,8 +98,28 @@ public void doPatchProcessing(Context context, Request currentRequest, InProgres\n             }\n         }\n         PatchOperation<?> patchOperation = new PatchOperationFactory().instanceOf(instance, op.getOp());\n-        patchOperation.perform(context, currentRequest, source, op);\n+        if (instance.equals(AbstractRestProcessingStep.UPLOAD_STEP_METADATA_OPERATION_ENTRY)) {\n+            DCInputSet inputConfig = inputReader.getInputsByFormName(UploadStep.UPLOAD_STEP_METADATA_SECTION);\n+            String[] split = patchOperation.getAbsolutePath(op.getPath()).split(\"/\");\n+            String metadata = findMetadata(split);\n+            if (inputConfig.isFieldPresent(metadata)) {\n+                patchOperation.perform(context, currentRequest, source, op);\n+            } else {\n+                throw new UnprocessableEntityException(\"The attribute \" + metadata + \" does not present in section \"\n+                                                                        + UploadStep.UPLOAD_STEP_METADATA_SECTION);\n+            }\n+        } else {\n+            patchOperation.perform(context, currentRequest, source, op);\n+        }\n+    }\n \n+    private String findMetadata(String[] metadata) {\n+        for (String s : metadata) {\n+            if (s.contains(\"dc.\")) {\n+                return s;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a1982656a0dc418e2903fc44eab7b2034e390e4"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA1Mzg4OQ==", "bodyText": "Is there a reason we switched this test to no longer remove dc.source and instead just verify it exists?  Just curious why we switched this test.", "url": "https://github.com/DSpace/DSpace/pull/2760#discussion_r426053889", "createdAt": "2020-05-15T21:24:07Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java", "diffHunk": "@@ -2444,7 +2452,8 @@ public void patchUploadTest() throws Exception {\n         // check that changes persist\n         getClient(authToken).perform(get(\"/api/submission/workspaceitems/\" + witem.getID()))\n             .andExpect(status().isOk())\n-            .andExpect(jsonPath(\"$.sections.upload.files[0].metadata['dc.source']\").doesNotExist())\n+            .andExpect(jsonPath(\"$.sections.upload.files[0].metadata['dc.source'][0].value\",\n+                    is(\"/local/path/simple-article.pdf\")))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a1982656a0dc418e2903fc44eab7b2034e390e4"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f33bfac1958d9195674244d038f13af91fd37a71", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/f33bfac1958d9195674244d038f13af91fd37a71", "committedDate": "2020-05-20T10:54:08Z", "message": "added ITs for upload patch request"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "212985bed68611f7818cba689755af69fbc4c8a7", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/212985bed68611f7818cba689755af69fbc4c8a7", "committedDate": "2020-05-20T11:02:08Z", "message": "refactoring doPatchProcessing of UploadStep"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98f2447cbb938e08ae3b805443747b8ef10555cb", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/98f2447cbb938e08ae3b805443747b8ef10555cb", "committedDate": "2020-05-20T11:13:36Z", "message": "Implement community feedbacks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab0aec46984d15b466a19cc582f9a1468a79817e", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/ab0aec46984d15b466a19cc582f9a1468a79817e", "committedDate": "2020-05-20T13:30:53Z", "message": "move bean to the right file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9404e24c4e8d8f4774e7eb0b667deee47351bb3b", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/9404e24c4e8d8f4774e7eb0b667deee47351bb3b", "committedDate": "2020-05-20T13:51:12Z", "message": "fix: wrong calling toString"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccfbbfce9957cd15a2cdde5a281ee49b908026c0", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/ccfbbfce9957cd15a2cdde5a281ee49b908026c0", "committedDate": "2020-05-20T13:55:13Z", "message": "added IT patchDeleteSection"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76ff785b076cbb10e38892c7a60f885520534e9d", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/76ff785b076cbb10e38892c7a60f885520534e9d", "committedDate": "2020-05-20T14:02:32Z", "message": "added implementation for delete section"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bda1fb815b4615ca383608f7aeaeba706e18ced6", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/bda1fb815b4615ca383608f7aeaeba706e18ced6", "committedDate": "2020-05-22T12:56:25Z", "message": "Merge branch 'master' into DS-4042_ITs_WrongPatchRequest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMTA2NDky", "url": "https://github.com/DSpace/DSpace/pull/2760#pullrequestreview-421106492", "createdAt": "2020-05-29T16:28:47Z", "commit": {"oid": "bda1fb815b4615ca383608f7aeaeba706e18ced6"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjoyODo0N1rOGcjxvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjozNDo1NVrOGcj-DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU5OTQ4NQ==", "bodyText": "I'd appreciate an example or explanation in either the JavaDocs or in an inline comment to explain why we are looking for >=4 \"parts\" to the path.  It's not clear within this class what the path structure is expected to look like.  Also, there are no Unit Tests here to show the expected path structure, and which ones should validate and which should throw exceptions.", "url": "https://github.com/DSpace/DSpace/pull/2760#discussion_r432599485", "createdAt": "2020-05-29T16:28:47Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/utils/BitstreamMetadataValuePathUtils.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.utils;\n+\n+import org.dspace.app.rest.exception.UnprocessableEntityException;\n+import org.dspace.app.rest.submit.step.UploadStep;\n+import org.dspace.app.util.DCInputSet;\n+import org.dspace.app.util.DCInputsReader;\n+import org.dspace.app.util.DCInputsReaderException;\n+\n+/**\n+ * Utils class offering methods to validate patch operations for bitstream metadata in the submission\n+ * \n+ * @author Mykhaylo Boychuk (mykhaylo.boychuk at 4science.it)\n+ */\n+public class BitstreamMetadataValuePathUtils {\n+\n+    private DCInputsReader inputReader;\n+\n+    BitstreamMetadataValuePathUtils() throws DCInputsReaderException {\n+        inputReader = new DCInputsReader();\n+    }\n+\n+    /**\n+     * Method to verify that the path included in the patch operation is supported\n+     * by the submission configuration of the upload section\n+     * \n+     * @param absolutePath the path in the json patch operation\n+     * @throws DCInputsReaderException      if an error occurs reading the\n+     *                                      submission configuration\n+     * @throws UnprocessableEntityException if the path is invalid\n+     */\n+    public void validate(String absolutePath) throws DCInputsReaderException {\n+        String[] split = absolutePath.split(\"/\");\n+        DCInputSet inputConfig = inputReader.getInputsByFormName(UploadStep.UPLOAD_STEP_METADATA_SECTION);\n+        if (split.length >= 4) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bda1fb815b4615ca383608f7aeaeba706e18ced6"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYwMjYzNg==", "bodyText": "Could we add a test before this patch to verify that the dc.subject and dc.description.abstract both exist by default?  Otherwise, it's possible this test could succeed if they never existed in the first place (I know they do exist, but we should have a test to prove it).", "url": "https://github.com/DSpace/DSpace/pull/2760#discussion_r432602636", "createdAt": "2020-05-29T16:34:55Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java", "diffHunk": "@@ -3196,4 +3205,507 @@ public void findByItemUuidUnAuthenticatedTest() throws Exception {\n                         .andExpect(status().isUnauthorized());\n     }\n \n+    @Test\n+    public void patchAddMetadataOnSectionNotExistentTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                         .withName(\"Parent Community\")\n+                         .build();\n+\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                          .withName(\"Sub Community\")\n+                          .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                         .withName(\"Collection 1\")\n+                         .build();\n+\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                             .withIssueDate(\"2019-04-25\")\n+                             .withSubject(\"ExtraEntry\")\n+                             .build();\n+\n+        //disable file upload mandatory\n+        configurationService.setProperty(\"webui.submit.upload.required\", false);\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+\n+        List<Operation> addTitle = new ArrayList<Operation>();\n+        List<Map<String, String>> values = new ArrayList<Map<String, String>>();\n+        Map<String, String> value = new HashMap<String, String>();\n+        value.put(\"value\", \"New Title\");\n+        values.add(value);\n+        addTitle.add(new AddOperation(\"/sections/not-existing-section/dc.title\", values));\n+\n+        String patchBody = getPatchContent(addTitle);\n+        getClient(authToken).perform(patch(\"/api/submission/workspaceitems/\" + witem.getID())\n+                 .content(patchBody)\n+                 .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                 .andExpect(status().isUnprocessableEntity());\n+    }\n+\n+    @Test\n+    public void patchAddMetadataWrongAttributeTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                         .withName(\"Parent Community\")\n+                         .build();\n+\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                          .withName(\"Sub Community\")\n+                          .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                         .withName(\"Collection 1\")\n+                         .build();\n+\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                             .withIssueDate(\"2019-04-25\")\n+                             .withSubject(\"ExtraEntry\")\n+                             .build();\n+\n+        //disable file upload mandatory\n+        configurationService.setProperty(\"webui.submit.upload.required\", false);\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+\n+        List<Operation> addTitle = new ArrayList<Operation>();\n+        List<Map<String, String>> values = new ArrayList<Map<String, String>>();\n+        Map<String, String> value = new HashMap<String, String>();\n+        value.put(\"value\", \"New Title\");\n+        values.add(value);\n+        addTitle.add(new AddOperation(\"/sections/traditionalpageone/dc.not.existing\", values));\n+\n+        String patchBody = getPatchContent(addTitle);\n+        getClient(authToken).perform(patch(\"/api/submission/workspaceitems/\" + witem.getID())\n+                 .content(patchBody)\n+                 .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                 .andExpect(status().isUnprocessableEntity());\n+    }\n+\n+    @Test\n+    // try to add Title on tradiotionalpagetwo, but attribute title is placed on tradiotionalpageone\n+    public void patchAddTitleOnSectionThatNotContainAttributeTitleTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                         .withName(\"Parent Community\")\n+                         .build();\n+\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                          .withName(\"Sub Community\")\n+                          .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                         .withName(\"Collection 1\")\n+                         .build();\n+\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                             .withIssueDate(\"2019-11-21\")\n+                             .withSubject(\"ExtraEntry\")\n+                             .build();\n+\n+        //disable file upload mandatory\n+        configurationService.setProperty(\"webui.submit.upload.required\", false);\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+\n+        List<Operation> addTitle = new ArrayList<Operation>();\n+        List<Map<String, String>> values = new ArrayList<Map<String, String>>();\n+        Map<String, String> value = new HashMap<String, String>();\n+        value.put(\"value\", \"New Title\");\n+        values.add(value);\n+        addTitle.add(new AddOperation(\"/sections/traditionalpagetwo/dc.title\", values));\n+\n+        String patchBody = getPatchContent(addTitle);\n+        getClient(authToken).perform(patch(\"/api/submission/workspaceitems/\" + witem.getID())\n+                 .content(patchBody)\n+                 .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                 .andExpect(status().isUnprocessableEntity());\n+    }\n+\n+    @Test\n+    public void patchAcceptLicenseWrontPathTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                         .withName(\"Parent Community\")\n+                         .build();\n+\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                          .withName(\"Sub Community\")\n+                          .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                         .withName(\"Collection 1\")\n+                         .build();\n+\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                             .withTitle(\"Example Title\")\n+                             .withIssueDate(\"2019-11-21\")\n+                             .withSubject(\"ExtraEntry\")\n+                             .build();\n+\n+        //disable file upload mandatory\n+        configurationService.setProperty(\"webui.submit.upload.required\", false);\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+\n+        List<Operation> replaceGrant = new ArrayList<Operation>();\n+        replaceGrant.add(new ReplaceOperation(\"/sections/license/not-existing\", true));\n+\n+        String patchBody = getPatchContent(replaceGrant);\n+        getClient(authToken).perform(patch(\"/api/submission/workspaceitems/\" + witem.getID())\n+                 .content(patchBody)\n+                 .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                 .andExpect(status().isUnprocessableEntity());\n+    }\n+\n+    @Test\n+    public void patchAcceptLicenseTryToChangeLicenseUrlTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                         .withName(\"Parent Community\")\n+                         .build();\n+\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                          .withName(\"Sub Community\")\n+                          .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                         .withName(\"Collection 1\")\n+                         .build();\n+\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                             .withTitle(\"Example Title\")\n+                             .withIssueDate(\"2019-11-21\")\n+                             .withSubject(\"ExtraEntry\")\n+                             .build();\n+\n+        //disable file upload mandatory\n+        configurationService.setProperty(\"webui.submit.upload.required\", false);\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+\n+        List<Operation> replaceGrant = new ArrayList<Operation>();\n+        replaceGrant.add(new ReplaceOperation(\"/sections/license/granted\", true));\n+\n+        String patchBody = getPatchContent(replaceGrant);\n+        getClient(authToken).perform(patch(\"/api/submission/workspaceitems/\" + witem.getID())\n+                 .content(patchBody)\n+                 .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                 .andExpect(status().isOk());\n+\n+        List<Operation> replaceLicenseUrl = new ArrayList<Operation>();\n+        replaceLicenseUrl.add(new ReplaceOperation(\"/sections/license/url\", \"not.existing\"));\n+\n+        patchBody = getPatchContent(replaceLicenseUrl);\n+        getClient(authToken).perform(patch(\"/api/submission/workspaceitems/\" + witem.getID())\n+                 .content(patchBody)\n+                 .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                 .andExpect(status().isUnprocessableEntity());\n+    }\n+\n+    @Test\n+    public void patchAcceptLicenseTryToChangeDateAccepteLicenseTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                         .withName(\"Parent Community\")\n+                         .build();\n+\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                          .withName(\"Sub Community\")\n+                          .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                         .withName(\"Collection 1\")\n+                         .build();\n+\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                             .withTitle(\"Example Title\")\n+                             .withIssueDate(\"2019-11-21\")\n+                             .withSubject(\"ExtraEntry\")\n+                             .build();\n+\n+        //disable file upload mandatory\n+        configurationService.setProperty(\"webui.submit.upload.required\", false);\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+\n+        List<Operation> replaceGrant = new ArrayList<Operation>();\n+        replaceGrant.add(new ReplaceOperation(\"/sections/license/granted\", true));\n+\n+        String patchBody = getPatchContent(replaceGrant);\n+        getClient(authToken).perform(patch(\"/api/submission/workspaceitems/\" + witem.getID())\n+                 .content(patchBody)\n+                 .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                 .andExpect(status().isOk());\n+\n+        List<Operation> replaceLicenseUrl = new ArrayList<Operation>();\n+        replaceLicenseUrl.add(new ReplaceOperation(\"/sections/license/acceptanceDate\", \"2020-02-14\"));\n+\n+        patchBody = getPatchContent(replaceLicenseUrl);\n+        getClient(authToken).perform(patch(\"/api/submission/workspaceitems/\" + witem.getID())\n+                 .content(patchBody)\n+                 .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                 .andExpect(status().isUnprocessableEntity());\n+    }\n+\n+    @Test\n+    public void patchUploadMetadatoNotExistTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .build();\n+\n+        InputStream pdf = getClass().getResourceAsStream(\"simple-article.pdf\");\n+\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                 .withTitle(\"Test WorkspaceItem\")\n+                 .withIssueDate(\"2019-10-25\")\n+                 .withFulltext(\"simple-article.pdf\", \"/local/path/simple-article.pdf\", pdf)\n+                 .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+\n+        List<Operation> addOpts = new ArrayList<Operation>();\n+        Map<String, String> value = new HashMap<String, String>();\n+        value.put(\"value\", \"some text\");\n+        addOpts.add(new AddOperation(\"/sections/upload/files/0/metadata/dc.not.existing\", value));\n+\n+        String patchBody = getPatchContent(addOpts);\n+        getClient(authToken).perform(patch(\"/api/submission/workspaceitems/\" + witem.getID())\n+                            .content(patchBody)\n+                            .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                            .andExpect(status().isUnprocessableEntity());\n+    }\n+\n+    @Test\n+    public void patchUploadWrongPathTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .build();\n+\n+        InputStream pdf = getClass().getResourceAsStream(\"simple-article.pdf\");\n+\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                .withTitle(\"Test WorkspaceItem\")\n+                .withIssueDate(\"2017-10-17\")\n+                .withFulltext(\"simple-article.pdf\", \"/local/path/simple-article.pdf\", pdf)\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+\n+        List<Operation> addOpts = new ArrayList<Operation>();\n+        Map<String, String> value = new HashMap<String, String>();\n+        value.put(\"value\", \"2020-01-25\");\n+        addOpts.add(new AddOperation(\"/sections/upload/files/0/metadata/dc.date.issued\", value));\n+\n+        String patchBody = getPatchContent(addOpts);\n+        getClient(authToken).perform(patch(\"/api/submission/workspaceitems/\" + witem.getID())\n+                            .content(patchBody)\n+                            .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                            .andExpect(status().isUnprocessableEntity());\n+    }\n+\n+    @Test\n+    public void patchUploadMissingFieldTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .build();\n+\n+        InputStream pdf = getClass().getResourceAsStream(\"simple-article.pdf\");\n+\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                .withTitle(\"Test WorkspaceItem\")\n+                .withIssueDate(\"2017-10-17\")\n+                .withFulltext(\"simple-article.pdf\", \"/local/path/simple-article.pdf\", pdf)\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+\n+        List<Operation> addOpts = new ArrayList<Operation>();\n+        Map<String, String> value = new HashMap<String, String>();\n+        value.put(\"value\", \"test text\");\n+\n+        addOpts.add(new AddOperation(\"/sections/upload/files/0/metadata\", value));\n+\n+        String patchBody = getPatchContent(addOpts);\n+        getClient(authToken).perform(patch(\"/api/submission/workspaceitems/\" + witem.getID())\n+                .content(patchBody)\n+                .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                            .andExpect(status().isUnprocessableEntity());\n+    }\n+\n+    @Test\n+    public void patchUploadNotExistingPropertyTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .build();\n+\n+        InputStream pdf = getClass().getResourceAsStream(\"simple-article.pdf\");\n+\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                .withTitle(\"Test WorkspaceItem\")\n+                .withIssueDate(\"2017-10-17\")\n+                .withFulltext(\"simple-article.pdf\", \"/local/path/simple-article.pdf\", pdf)\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+\n+        List<Operation> addOpts = new ArrayList<Operation>();\n+        Map<String, String> value = new HashMap<String, String>();\n+        value.put(\"value\", \"test text\");\n+\n+        addOpts.add(new AddOperation(\"/sections/upload/files/0/not-existing-property/dc.title\", value));\n+\n+        String patchBody = getPatchContent(addOpts);\n+        getClient(authToken).perform(patch(\"/api/submission/workspaceitems/\" + witem.getID())\n+                .content(patchBody)\n+                .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                            .andExpect(status().isUnprocessableEntity());\n+    }\n+\n+    @Test\n+    public void patchUploadWithWrongPathTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .build();\n+\n+        InputStream pdf = getClass().getResourceAsStream(\"simple-article.pdf\");\n+\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                .withTitle(\"Test WorkspaceItem\")\n+                .withIssueDate(\"2017-10-17\")\n+                .withFulltext(\"simple-article.pdf\", \"/local/path/simple-article.pdf\", pdf)\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+\n+        List<Operation> addOpts = new ArrayList<Operation>();\n+        Map<String, String> value = new HashMap<String, String>();\n+        value.put(\"value\", \"test text\");\n+\n+        addOpts.add(new AddOperation(\"/sections/upload/files/0\", value));\n+\n+        String patchBody = getPatchContent(addOpts);\n+        getClient(authToken).perform(patch(\"/api/submission/workspaceitems/\" + witem.getID())\n+                .content(patchBody)\n+                .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                            .andExpect(status().isUnprocessableEntity());\n+\n+        addOpts.add(new AddOperation(\"/sections/upload/files\", value));\n+        patchBody = getPatchContent(addOpts);\n+\n+        getClient(authToken).perform(patch(\"/api/submission/workspaceitems/\" + witem.getID())\n+                .content(patchBody)\n+                .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                            .andExpect(status().isUnprocessableEntity());\n+    }\n+\n+    @Test\n+    public void patchDeleteSectionTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .build();\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                             .withTitle(\"Test WorkspaceItem\")\n+                             .withIssueDate(\"2020-01-21\")\n+                             .withSubject(\"Subject 1\")\n+                             .withSubject(\"Subject 2\")\n+                             .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        List<Operation> operations = new ArrayList<Operation>();\n+        operations.add(new RemoveOperation(\"/sections/traditionalpagetwo\"));\n+        String patchBody = getPatchContent(operations);\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(authToken).perform(patch(\"/api/submission/workspaceitems/\" + witem.getID())\n+                 .content(patchBody)\n+                 .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                 .andExpect(status().isOk())\n+                 .andExpect(jsonPath(\"$.sections.traditionalpagetwo['dc.subject']\").doesNotExist())\n+                 .andExpect(jsonPath(\"$.sections.traditionalpagetwo['dc.description.abstract']\").doesNotExist());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bda1fb815b4615ca383608f7aeaeba706e18ced6"}, "originalPosition": 577}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a338526583e21d10058e5a75edda81f1c4681196", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/a338526583e21d10058e5a75edda81f1c4681196", "committedDate": "2020-06-03T13:39:42Z", "message": "Implement community feedbacks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MzYwNDkx", "url": "https://github.com/DSpace/DSpace/pull/2760#pullrequestreview-425360491", "createdAt": "2020-06-05T14:38:01Z", "commit": {"oid": "a338526583e21d10058e5a75edda81f1c4681196"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NDA1MjY3", "url": "https://github.com/DSpace/DSpace/pull/2760#pullrequestreview-426405267", "createdAt": "2020-06-08T16:21:21Z", "commit": {"oid": "a338526583e21d10058e5a75edda81f1c4681196"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjoyMToyMVrOGgmIsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjozNjozMFrOGgmuDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgzMjQzNA==", "bodyText": "Please log a more useful message here than e.getMessage(), e.g. the message in the line below", "url": "https://github.com/DSpace/DSpace/pull/2760#discussion_r436832434", "createdAt": "2020-06-08T16:21:21Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/WorkspaceItemRestRepository.java", "diffHunk": "@@ -326,12 +330,19 @@ private void evaluatePatch(Context context, HttpServletRequest request, Workspac\n                             \" Therefore it cannot be used by the Configurable Submission as the <processing-class>!\");\n                     }\n \n+                } catch (UnprocessableEntityException e) {\n+                    log.error(e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a338526583e21d10058e5a75edda81f1c4681196"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgzNjUzMQ==", "bodyText": "this is not verified for remove. Does this imply the user can e.g. remove the item template, even if that metadata field is not adjustable in the form?\nCan you add an IT to prove the user can't remove a field not in the form?", "url": "https://github.com/DSpace/DSpace/pull/2760#discussion_r436836531", "createdAt": "2020-06-08T16:27:41Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/submit/step/DescribeStep.java", "diffHunk": "@@ -110,13 +113,56 @@ private void readField(InProgressSubmission obj, SubmissionStepConfig config, Da\n     }\n \n     @Override\n-    public void doPatchProcessing(Context context, Request currentRequest, InProgressSubmission source, Operation op)\n-        throws Exception {\n-\n-        PatchOperation<MetadataValueRest> patchOperation = new PatchOperationFactory()\n-            .instanceOf(DESCRIBE_STEP_METADATA_OPERATION_ENTRY, op.getOp());\n-        patchOperation.perform(context, currentRequest, source, op);\n-\n+    public void doPatchProcessing(Context context, Request currentRequest, InProgressSubmission source, Operation op,\n+                                  SubmissionStepConfig stepConf) throws Exception {\n+\n+        String[] pathParts = op.getPath().substring(1).split(\"/\");\n+        DCInputSet inputConfig = inputReader.getInputsByFormName(stepConf.getId());\n+        if (\"remove\".equals(op.getOp()) && pathParts.length < 3) {\n+            // manage delete all step fields\n+            String[] path = op.getPath().substring(1).split(\"/\", 3);\n+            String configId = path[1];\n+            List<String> fieldsName = getInputFieldsName(inputConfig, configId);\n+            for (String fieldName : fieldsName) {\n+                String fieldPath = op.getPath() + \"/\" + fieldName;\n+                Operation fieldRemoveOp = new RemoveOperation(fieldPath);\n+                PatchOperation<MetadataValueRest> patchOperation = new PatchOperationFactory()\n+                     .instanceOf(DESCRIBE_STEP_METADATA_OPERATION_ENTRY, fieldRemoveOp.getOp());\n+                patchOperation.perform(context, currentRequest, source, fieldRemoveOp);\n+            }\n+        } else {\n+            PatchOperation<MetadataValueRest> patchOperation = new PatchOperationFactory()\n+                        .instanceOf(DESCRIBE_STEP_METADATA_OPERATION_ENTRY, op.getOp());\n+            String[] split = patchOperation.getAbsolutePath(op.getPath()).split(\"/\");\n+            if (inputConfig.isFieldPresent(split[0])) {\n+                patchOperation.perform(context, currentRequest, source, op);\n+            } else {\n+                throw new UnprocessableEntityException(\"The field \" + split[0] + \" is not present in section \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a338526583e21d10058e5a75edda81f1c4681196"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgzOTQ1Mw==", "bodyText": "Can you also verify the dc.title is not created?", "url": "https://github.com/DSpace/DSpace/pull/2760#discussion_r436839453", "createdAt": "2020-06-08T16:32:17Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java", "diffHunk": "@@ -3196,4 +3205,513 @@ public void findByItemUuidUnAuthenticatedTest() throws Exception {\n                         .andExpect(status().isUnauthorized());\n     }\n \n+    @Test\n+    public void patchAddMetadataOnSectionNotExistentTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                         .withName(\"Parent Community\")\n+                         .build();\n+\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                          .withName(\"Sub Community\")\n+                          .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                         .withName(\"Collection 1\")\n+                         .build();\n+\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                             .withIssueDate(\"2019-04-25\")\n+                             .withSubject(\"ExtraEntry\")\n+                             .build();\n+\n+        //disable file upload mandatory\n+        configurationService.setProperty(\"webui.submit.upload.required\", false);\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+\n+        List<Operation> addTitle = new ArrayList<Operation>();\n+        List<Map<String, String>> values = new ArrayList<Map<String, String>>();\n+        Map<String, String> value = new HashMap<String, String>();\n+        value.put(\"value\", \"New Title\");\n+        values.add(value);\n+        addTitle.add(new AddOperation(\"/sections/not-existing-section/dc.title\", values));\n+\n+        String patchBody = getPatchContent(addTitle);\n+        getClient(authToken).perform(patch(\"/api/submission/workspaceitems/\" + witem.getID())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a338526583e21d10058e5a75edda81f1c4681196"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgzOTgwMA==", "bodyText": "Can you also verify the dc.title is not created?", "url": "https://github.com/DSpace/DSpace/pull/2760#discussion_r436839800", "createdAt": "2020-06-08T16:32:52Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java", "diffHunk": "@@ -3196,4 +3205,513 @@ public void findByItemUuidUnAuthenticatedTest() throws Exception {\n                         .andExpect(status().isUnauthorized());\n     }\n \n+    @Test\n+    public void patchAddMetadataOnSectionNotExistentTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                         .withName(\"Parent Community\")\n+                         .build();\n+\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                          .withName(\"Sub Community\")\n+                          .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                         .withName(\"Collection 1\")\n+                         .build();\n+\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                             .withIssueDate(\"2019-04-25\")\n+                             .withSubject(\"ExtraEntry\")\n+                             .build();\n+\n+        //disable file upload mandatory\n+        configurationService.setProperty(\"webui.submit.upload.required\", false);\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+\n+        List<Operation> addTitle = new ArrayList<Operation>();\n+        List<Map<String, String>> values = new ArrayList<Map<String, String>>();\n+        Map<String, String> value = new HashMap<String, String>();\n+        value.put(\"value\", \"New Title\");\n+        values.add(value);\n+        addTitle.add(new AddOperation(\"/sections/not-existing-section/dc.title\", values));\n+\n+        String patchBody = getPatchContent(addTitle);\n+        getClient(authToken).perform(patch(\"/api/submission/workspaceitems/\" + witem.getID())\n+                 .content(patchBody)\n+                 .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                 .andExpect(status().isUnprocessableEntity());\n+    }\n+\n+    @Test\n+    public void patchAddMetadataWrongAttributeTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                         .withName(\"Parent Community\")\n+                         .build();\n+\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                          .withName(\"Sub Community\")\n+                          .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                         .withName(\"Collection 1\")\n+                         .build();\n+\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                             .withIssueDate(\"2019-04-25\")\n+                             .withSubject(\"ExtraEntry\")\n+                             .build();\n+\n+        //disable file upload mandatory\n+        configurationService.setProperty(\"webui.submit.upload.required\", false);\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+\n+        List<Operation> addTitle = new ArrayList<Operation>();\n+        List<Map<String, String>> values = new ArrayList<Map<String, String>>();\n+        Map<String, String> value = new HashMap<String, String>();\n+        value.put(\"value\", \"New Title\");\n+        values.add(value);\n+        addTitle.add(new AddOperation(\"/sections/traditionalpageone/dc.not.existing\", values));\n+\n+        String patchBody = getPatchContent(addTitle);\n+        getClient(authToken).perform(patch(\"/api/submission/workspaceitems/\" + witem.getID())\n+                 .content(patchBody)\n+                 .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                 .andExpect(status().isUnprocessableEntity());\n+    }\n+\n+    @Test\n+    // try to add Title on tradiotionalpagetwo, but attribute title is placed on tradiotionalpageone\n+    public void patchAddTitleOnSectionThatNotContainAttributeTitleTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                         .withName(\"Parent Community\")\n+                         .build();\n+\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                          .withName(\"Sub Community\")\n+                          .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                         .withName(\"Collection 1\")\n+                         .build();\n+\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                             .withIssueDate(\"2019-11-21\")\n+                             .withSubject(\"ExtraEntry\")\n+                             .build();\n+\n+        //disable file upload mandatory\n+        configurationService.setProperty(\"webui.submit.upload.required\", false);\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+\n+        List<Operation> addTitle = new ArrayList<Operation>();\n+        List<Map<String, String>> values = new ArrayList<Map<String, String>>();\n+        Map<String, String> value = new HashMap<String, String>();\n+        value.put(\"value\", \"New Title\");\n+        values.add(value);\n+        addTitle.add(new AddOperation(\"/sections/traditionalpagetwo/dc.title\", values));\n+\n+        String patchBody = getPatchContent(addTitle);\n+        getClient(authToken).perform(patch(\"/api/submission/workspaceitems/\" + witem.getID())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a338526583e21d10058e5a75edda81f1c4681196"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg0MTg0Mg==", "bodyText": "is this just a metadata field not configured for this bitstream?", "url": "https://github.com/DSpace/DSpace/pull/2760#discussion_r436841842", "createdAt": "2020-06-08T16:36:15Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java", "diffHunk": "@@ -3196,4 +3205,513 @@ public void findByItemUuidUnAuthenticatedTest() throws Exception {\n                         .andExpect(status().isUnauthorized());\n     }\n \n+    @Test\n+    public void patchAddMetadataOnSectionNotExistentTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                         .withName(\"Parent Community\")\n+                         .build();\n+\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                          .withName(\"Sub Community\")\n+                          .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                         .withName(\"Collection 1\")\n+                         .build();\n+\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                             .withIssueDate(\"2019-04-25\")\n+                             .withSubject(\"ExtraEntry\")\n+                             .build();\n+\n+        //disable file upload mandatory\n+        configurationService.setProperty(\"webui.submit.upload.required\", false);\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+\n+        List<Operation> addTitle = new ArrayList<Operation>();\n+        List<Map<String, String>> values = new ArrayList<Map<String, String>>();\n+        Map<String, String> value = new HashMap<String, String>();\n+        value.put(\"value\", \"New Title\");\n+        values.add(value);\n+        addTitle.add(new AddOperation(\"/sections/not-existing-section/dc.title\", values));\n+\n+        String patchBody = getPatchContent(addTitle);\n+        getClient(authToken).perform(patch(\"/api/submission/workspaceitems/\" + witem.getID())\n+                 .content(patchBody)\n+                 .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                 .andExpect(status().isUnprocessableEntity());\n+    }\n+\n+    @Test\n+    public void patchAddMetadataWrongAttributeTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                         .withName(\"Parent Community\")\n+                         .build();\n+\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                          .withName(\"Sub Community\")\n+                          .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                         .withName(\"Collection 1\")\n+                         .build();\n+\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                             .withIssueDate(\"2019-04-25\")\n+                             .withSubject(\"ExtraEntry\")\n+                             .build();\n+\n+        //disable file upload mandatory\n+        configurationService.setProperty(\"webui.submit.upload.required\", false);\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+\n+        List<Operation> addTitle = new ArrayList<Operation>();\n+        List<Map<String, String>> values = new ArrayList<Map<String, String>>();\n+        Map<String, String> value = new HashMap<String, String>();\n+        value.put(\"value\", \"New Title\");\n+        values.add(value);\n+        addTitle.add(new AddOperation(\"/sections/traditionalpageone/dc.not.existing\", values));\n+\n+        String patchBody = getPatchContent(addTitle);\n+        getClient(authToken).perform(patch(\"/api/submission/workspaceitems/\" + witem.getID())\n+                 .content(patchBody)\n+                 .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                 .andExpect(status().isUnprocessableEntity());\n+    }\n+\n+    @Test\n+    // try to add Title on tradiotionalpagetwo, but attribute title is placed on tradiotionalpageone\n+    public void patchAddTitleOnSectionThatNotContainAttributeTitleTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                         .withName(\"Parent Community\")\n+                         .build();\n+\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                          .withName(\"Sub Community\")\n+                          .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                         .withName(\"Collection 1\")\n+                         .build();\n+\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                             .withIssueDate(\"2019-11-21\")\n+                             .withSubject(\"ExtraEntry\")\n+                             .build();\n+\n+        //disable file upload mandatory\n+        configurationService.setProperty(\"webui.submit.upload.required\", false);\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+\n+        List<Operation> addTitle = new ArrayList<Operation>();\n+        List<Map<String, String>> values = new ArrayList<Map<String, String>>();\n+        Map<String, String> value = new HashMap<String, String>();\n+        value.put(\"value\", \"New Title\");\n+        values.add(value);\n+        addTitle.add(new AddOperation(\"/sections/traditionalpagetwo/dc.title\", values));\n+\n+        String patchBody = getPatchContent(addTitle);\n+        getClient(authToken).perform(patch(\"/api/submission/workspaceitems/\" + witem.getID())\n+                 .content(patchBody)\n+                 .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                 .andExpect(status().isUnprocessableEntity());\n+    }\n+\n+    @Test\n+    public void patchAcceptLicenseWrontPathTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                         .withName(\"Parent Community\")\n+                         .build();\n+\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                          .withName(\"Sub Community\")\n+                          .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                         .withName(\"Collection 1\")\n+                         .build();\n+\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                             .withTitle(\"Example Title\")\n+                             .withIssueDate(\"2019-11-21\")\n+                             .withSubject(\"ExtraEntry\")\n+                             .build();\n+\n+        //disable file upload mandatory\n+        configurationService.setProperty(\"webui.submit.upload.required\", false);\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+\n+        List<Operation> replaceGrant = new ArrayList<Operation>();\n+        replaceGrant.add(new ReplaceOperation(\"/sections/license/not-existing\", true));\n+\n+        String patchBody = getPatchContent(replaceGrant);\n+        getClient(authToken).perform(patch(\"/api/submission/workspaceitems/\" + witem.getID())\n+                 .content(patchBody)\n+                 .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                 .andExpect(status().isUnprocessableEntity());\n+    }\n+\n+    @Test\n+    public void patchAcceptLicenseTryToChangeLicenseUrlTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                         .withName(\"Parent Community\")\n+                         .build();\n+\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                          .withName(\"Sub Community\")\n+                          .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                         .withName(\"Collection 1\")\n+                         .build();\n+\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                             .withTitle(\"Example Title\")\n+                             .withIssueDate(\"2019-11-21\")\n+                             .withSubject(\"ExtraEntry\")\n+                             .build();\n+\n+        //disable file upload mandatory\n+        configurationService.setProperty(\"webui.submit.upload.required\", false);\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+\n+        List<Operation> replaceGrant = new ArrayList<Operation>();\n+        replaceGrant.add(new ReplaceOperation(\"/sections/license/granted\", true));\n+\n+        String patchBody = getPatchContent(replaceGrant);\n+        getClient(authToken).perform(patch(\"/api/submission/workspaceitems/\" + witem.getID())\n+                 .content(patchBody)\n+                 .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                 .andExpect(status().isOk());\n+\n+        List<Operation> replaceLicenseUrl = new ArrayList<Operation>();\n+        replaceLicenseUrl.add(new ReplaceOperation(\"/sections/license/url\", \"not.existing\"));\n+\n+        patchBody = getPatchContent(replaceLicenseUrl);\n+        getClient(authToken).perform(patch(\"/api/submission/workspaceitems/\" + witem.getID())\n+                 .content(patchBody)\n+                 .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                 .andExpect(status().isUnprocessableEntity());\n+    }\n+\n+    @Test\n+    public void patchAcceptLicenseTryToChangeDateAccepteLicenseTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                         .withName(\"Parent Community\")\n+                         .build();\n+\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                          .withName(\"Sub Community\")\n+                          .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                         .withName(\"Collection 1\")\n+                         .build();\n+\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                             .withTitle(\"Example Title\")\n+                             .withIssueDate(\"2019-11-21\")\n+                             .withSubject(\"ExtraEntry\")\n+                             .build();\n+\n+        //disable file upload mandatory\n+        configurationService.setProperty(\"webui.submit.upload.required\", false);\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+\n+        List<Operation> replaceGrant = new ArrayList<Operation>();\n+        replaceGrant.add(new ReplaceOperation(\"/sections/license/granted\", true));\n+\n+        String patchBody = getPatchContent(replaceGrant);\n+        getClient(authToken).perform(patch(\"/api/submission/workspaceitems/\" + witem.getID())\n+                 .content(patchBody)\n+                 .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                 .andExpect(status().isOk());\n+\n+        List<Operation> replaceLicenseUrl = new ArrayList<Operation>();\n+        replaceLicenseUrl.add(new ReplaceOperation(\"/sections/license/acceptanceDate\", \"2020-02-14\"));\n+\n+        patchBody = getPatchContent(replaceLicenseUrl);\n+        getClient(authToken).perform(patch(\"/api/submission/workspaceitems/\" + witem.getID())\n+                 .content(patchBody)\n+                 .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                 .andExpect(status().isUnprocessableEntity());\n+    }\n+\n+    @Test\n+    public void patchUploadMetadatoNotExistTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .build();\n+\n+        InputStream pdf = getClass().getResourceAsStream(\"simple-article.pdf\");\n+\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                 .withTitle(\"Test WorkspaceItem\")\n+                 .withIssueDate(\"2019-10-25\")\n+                 .withFulltext(\"simple-article.pdf\", \"/local/path/simple-article.pdf\", pdf)\n+                 .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+\n+        List<Operation> addOpts = new ArrayList<Operation>();\n+        Map<String, String> value = new HashMap<String, String>();\n+        value.put(\"value\", \"some text\");\n+        addOpts.add(new AddOperation(\"/sections/upload/files/0/metadata/dc.not.existing\", value));\n+\n+        String patchBody = getPatchContent(addOpts);\n+        getClient(authToken).perform(patch(\"/api/submission/workspaceitems/\" + witem.getID())\n+                            .content(patchBody)\n+                            .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                            .andExpect(status().isUnprocessableEntity());\n+    }\n+\n+    @Test\n+    public void patchUploadWrongPathTest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a338526583e21d10058e5a75edda81f1c4681196"}, "originalPosition": 383}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg0MTk5Ng==", "bodyText": "Can you also verify the dc.date.issued is not created?", "url": "https://github.com/DSpace/DSpace/pull/2760#discussion_r436841996", "createdAt": "2020-06-08T16:36:30Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java", "diffHunk": "@@ -3196,4 +3205,513 @@ public void findByItemUuidUnAuthenticatedTest() throws Exception {\n                         .andExpect(status().isUnauthorized());\n     }\n \n+    @Test\n+    public void patchAddMetadataOnSectionNotExistentTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                         .withName(\"Parent Community\")\n+                         .build();\n+\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                          .withName(\"Sub Community\")\n+                          .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                         .withName(\"Collection 1\")\n+                         .build();\n+\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                             .withIssueDate(\"2019-04-25\")\n+                             .withSubject(\"ExtraEntry\")\n+                             .build();\n+\n+        //disable file upload mandatory\n+        configurationService.setProperty(\"webui.submit.upload.required\", false);\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+\n+        List<Operation> addTitle = new ArrayList<Operation>();\n+        List<Map<String, String>> values = new ArrayList<Map<String, String>>();\n+        Map<String, String> value = new HashMap<String, String>();\n+        value.put(\"value\", \"New Title\");\n+        values.add(value);\n+        addTitle.add(new AddOperation(\"/sections/not-existing-section/dc.title\", values));\n+\n+        String patchBody = getPatchContent(addTitle);\n+        getClient(authToken).perform(patch(\"/api/submission/workspaceitems/\" + witem.getID())\n+                 .content(patchBody)\n+                 .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                 .andExpect(status().isUnprocessableEntity());\n+    }\n+\n+    @Test\n+    public void patchAddMetadataWrongAttributeTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                         .withName(\"Parent Community\")\n+                         .build();\n+\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                          .withName(\"Sub Community\")\n+                          .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                         .withName(\"Collection 1\")\n+                         .build();\n+\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                             .withIssueDate(\"2019-04-25\")\n+                             .withSubject(\"ExtraEntry\")\n+                             .build();\n+\n+        //disable file upload mandatory\n+        configurationService.setProperty(\"webui.submit.upload.required\", false);\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+\n+        List<Operation> addTitle = new ArrayList<Operation>();\n+        List<Map<String, String>> values = new ArrayList<Map<String, String>>();\n+        Map<String, String> value = new HashMap<String, String>();\n+        value.put(\"value\", \"New Title\");\n+        values.add(value);\n+        addTitle.add(new AddOperation(\"/sections/traditionalpageone/dc.not.existing\", values));\n+\n+        String patchBody = getPatchContent(addTitle);\n+        getClient(authToken).perform(patch(\"/api/submission/workspaceitems/\" + witem.getID())\n+                 .content(patchBody)\n+                 .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                 .andExpect(status().isUnprocessableEntity());\n+    }\n+\n+    @Test\n+    // try to add Title on tradiotionalpagetwo, but attribute title is placed on tradiotionalpageone\n+    public void patchAddTitleOnSectionThatNotContainAttributeTitleTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                         .withName(\"Parent Community\")\n+                         .build();\n+\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                          .withName(\"Sub Community\")\n+                          .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                         .withName(\"Collection 1\")\n+                         .build();\n+\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                             .withIssueDate(\"2019-11-21\")\n+                             .withSubject(\"ExtraEntry\")\n+                             .build();\n+\n+        //disable file upload mandatory\n+        configurationService.setProperty(\"webui.submit.upload.required\", false);\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+\n+        List<Operation> addTitle = new ArrayList<Operation>();\n+        List<Map<String, String>> values = new ArrayList<Map<String, String>>();\n+        Map<String, String> value = new HashMap<String, String>();\n+        value.put(\"value\", \"New Title\");\n+        values.add(value);\n+        addTitle.add(new AddOperation(\"/sections/traditionalpagetwo/dc.title\", values));\n+\n+        String patchBody = getPatchContent(addTitle);\n+        getClient(authToken).perform(patch(\"/api/submission/workspaceitems/\" + witem.getID())\n+                 .content(patchBody)\n+                 .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                 .andExpect(status().isUnprocessableEntity());\n+    }\n+\n+    @Test\n+    public void patchAcceptLicenseWrontPathTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                         .withName(\"Parent Community\")\n+                         .build();\n+\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                          .withName(\"Sub Community\")\n+                          .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                         .withName(\"Collection 1\")\n+                         .build();\n+\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                             .withTitle(\"Example Title\")\n+                             .withIssueDate(\"2019-11-21\")\n+                             .withSubject(\"ExtraEntry\")\n+                             .build();\n+\n+        //disable file upload mandatory\n+        configurationService.setProperty(\"webui.submit.upload.required\", false);\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+\n+        List<Operation> replaceGrant = new ArrayList<Operation>();\n+        replaceGrant.add(new ReplaceOperation(\"/sections/license/not-existing\", true));\n+\n+        String patchBody = getPatchContent(replaceGrant);\n+        getClient(authToken).perform(patch(\"/api/submission/workspaceitems/\" + witem.getID())\n+                 .content(patchBody)\n+                 .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                 .andExpect(status().isUnprocessableEntity());\n+    }\n+\n+    @Test\n+    public void patchAcceptLicenseTryToChangeLicenseUrlTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                         .withName(\"Parent Community\")\n+                         .build();\n+\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                          .withName(\"Sub Community\")\n+                          .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                         .withName(\"Collection 1\")\n+                         .build();\n+\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                             .withTitle(\"Example Title\")\n+                             .withIssueDate(\"2019-11-21\")\n+                             .withSubject(\"ExtraEntry\")\n+                             .build();\n+\n+        //disable file upload mandatory\n+        configurationService.setProperty(\"webui.submit.upload.required\", false);\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+\n+        List<Operation> replaceGrant = new ArrayList<Operation>();\n+        replaceGrant.add(new ReplaceOperation(\"/sections/license/granted\", true));\n+\n+        String patchBody = getPatchContent(replaceGrant);\n+        getClient(authToken).perform(patch(\"/api/submission/workspaceitems/\" + witem.getID())\n+                 .content(patchBody)\n+                 .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                 .andExpect(status().isOk());\n+\n+        List<Operation> replaceLicenseUrl = new ArrayList<Operation>();\n+        replaceLicenseUrl.add(new ReplaceOperation(\"/sections/license/url\", \"not.existing\"));\n+\n+        patchBody = getPatchContent(replaceLicenseUrl);\n+        getClient(authToken).perform(patch(\"/api/submission/workspaceitems/\" + witem.getID())\n+                 .content(patchBody)\n+                 .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                 .andExpect(status().isUnprocessableEntity());\n+    }\n+\n+    @Test\n+    public void patchAcceptLicenseTryToChangeDateAccepteLicenseTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                         .withName(\"Parent Community\")\n+                         .build();\n+\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                          .withName(\"Sub Community\")\n+                          .build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                         .withName(\"Collection 1\")\n+                         .build();\n+\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                             .withTitle(\"Example Title\")\n+                             .withIssueDate(\"2019-11-21\")\n+                             .withSubject(\"ExtraEntry\")\n+                             .build();\n+\n+        //disable file upload mandatory\n+        configurationService.setProperty(\"webui.submit.upload.required\", false);\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+\n+        List<Operation> replaceGrant = new ArrayList<Operation>();\n+        replaceGrant.add(new ReplaceOperation(\"/sections/license/granted\", true));\n+\n+        String patchBody = getPatchContent(replaceGrant);\n+        getClient(authToken).perform(patch(\"/api/submission/workspaceitems/\" + witem.getID())\n+                 .content(patchBody)\n+                 .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                 .andExpect(status().isOk());\n+\n+        List<Operation> replaceLicenseUrl = new ArrayList<Operation>();\n+        replaceLicenseUrl.add(new ReplaceOperation(\"/sections/license/acceptanceDate\", \"2020-02-14\"));\n+\n+        patchBody = getPatchContent(replaceLicenseUrl);\n+        getClient(authToken).perform(patch(\"/api/submission/workspaceitems/\" + witem.getID())\n+                 .content(patchBody)\n+                 .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                 .andExpect(status().isUnprocessableEntity());\n+    }\n+\n+    @Test\n+    public void patchUploadMetadatoNotExistTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .build();\n+\n+        InputStream pdf = getClass().getResourceAsStream(\"simple-article.pdf\");\n+\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                 .withTitle(\"Test WorkspaceItem\")\n+                 .withIssueDate(\"2019-10-25\")\n+                 .withFulltext(\"simple-article.pdf\", \"/local/path/simple-article.pdf\", pdf)\n+                 .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+\n+        List<Operation> addOpts = new ArrayList<Operation>();\n+        Map<String, String> value = new HashMap<String, String>();\n+        value.put(\"value\", \"some text\");\n+        addOpts.add(new AddOperation(\"/sections/upload/files/0/metadata/dc.not.existing\", value));\n+\n+        String patchBody = getPatchContent(addOpts);\n+        getClient(authToken).perform(patch(\"/api/submission/workspaceitems/\" + witem.getID())\n+                            .content(patchBody)\n+                            .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                            .andExpect(status().isUnprocessableEntity());\n+    }\n+\n+    @Test\n+    public void patchUploadWrongPathTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        Community child1 = CommunityBuilder.createSubCommunity(context, parentCommunity)\n+                                           .withName(\"Sub Community\")\n+                                           .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, child1)\n+                                           .withName(\"Collection 1\")\n+                                           .build();\n+\n+        InputStream pdf = getClass().getResourceAsStream(\"simple-article.pdf\");\n+\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                .withTitle(\"Test WorkspaceItem\")\n+                .withIssueDate(\"2017-10-17\")\n+                .withFulltext(\"simple-article.pdf\", \"/local/path/simple-article.pdf\", pdf)\n+                .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String authToken = getAuthToken(eperson.getEmail(), password);\n+\n+        List<Operation> addOpts = new ArrayList<Operation>();\n+        Map<String, String> value = new HashMap<String, String>();\n+        value.put(\"value\", \"2020-01-25\");\n+        addOpts.add(new AddOperation(\"/sections/upload/files/0/metadata/dc.date.issued\", value));\n+\n+        String patchBody = getPatchContent(addOpts);\n+        getClient(authToken).perform(patch(\"/api/submission/workspaceitems/\" + witem.getID())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a338526583e21d10058e5a75edda81f1c4681196"}, "originalPosition": 414}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa15d658178601ed121f527395edc7b22a9bda07", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/aa15d658178601ed121f527395edc7b22a9bda07", "committedDate": "2020-06-11T08:47:37Z", "message": "Implement community feedbacks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ff01ae963a4bb765b3464600c005b4aa51d15c0", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/4ff01ae963a4bb765b3464600c005b4aa51d15c0", "committedDate": "2020-06-11T23:07:08Z", "message": "added test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzMjUwMDA4", "url": "https://github.com/DSpace/DSpace/pull/2760#pullrequestreview-433250008", "createdAt": "2020-06-18T12:51:45Z", "commit": {"oid": "4ff01ae963a4bb765b3464600c005b4aa51d15c0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMjo1MTo0NVrOGlt3Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMjo1MTo0NVrOGlt3Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIwMTg2Ng==", "bodyText": "When trying to test this PR, I got spring issues with this auto-wiring", "url": "https://github.com/DSpace/DSpace/pull/2760#discussion_r442201866", "createdAt": "2020-06-18T12:51:45Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/submit/factory/impl/BitstreamMetadataValueMovePatchOperation.java", "diffHunk": "@@ -35,12 +36,17 @@\n     @Autowired\n     ItemService itemService;\n \n+    @Autowired\n+    BitstreamMetadataValuePathUtils bitstreamMetadataValuePathUtils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ff01ae963a4bb765b3464600c005b4aa51d15c0"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MTUzNjYy", "url": "https://github.com/DSpace/DSpace/pull/2760#pullrequestreview-435153662", "createdAt": "2020-06-22T17:58:15Z", "commit": {"oid": "4ff01ae963a4bb765b3464600c005b4aa51d15c0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzo1ODoxNVrOGnLTbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzo1ODoxNVrOGnLTbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzczMjg0NA==", "bodyText": "@abollini : Per @benbosman 's notes about bean loading issues, this line seems unnecessary to me.  If you look closely, all other *Utils classes in the dspace-server-webapp are just annotated with @Component instead of trying to load them via an XML spring config.  See for example (these are just two examples, but there are 10+ Utils classes in this webapp):\n\nhttps://github.com/DSpace/DSpace/blob/master/dspace-server-webapp/src/main/java/org/dspace/app/rest/utils/DSpaceObjectUtils.java#L26\nhttps://github.com/DSpace/DSpace/blob/master/dspace-server-webapp/src/main/java/org/dspace/app/rest/utils/AuthorityUtils.java#L25\n\nSo, I suspect you should do similar here.  Remove this line from the XML config & annotate the Utils with @Component", "url": "https://github.com/DSpace/DSpace/pull/2760#discussion_r443732844", "createdAt": "2020-06-22T17:58:15Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/resources/spring/spring-dspace-core-services.xml", "diffHunk": "@@ -108,4 +108,5 @@\n         </property>\n     </bean>\n \n+    <bean class=\"org.dspace.app.rest.utils.BitstreamMetadataValuePathUtils\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ff01ae963a4bb765b3464600c005b4aa51d15c0"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e49e5877e53dce056ec1b4022a5e026dc70f6a1", "author": {"user": {"login": "abollini", "name": "Andrea Bollini"}}, "url": "https://github.com/DSpace/DSpace/commit/1e49e5877e53dce056ec1b4022a5e026dc70f6a1", "committedDate": "2020-06-25T10:33:37Z", "message": "Fix injection to avoid issue with docker/double references"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06f9eb521c98fad98c5c7a6e1f4d31226e6c49e4", "author": {"user": {"login": "abollini", "name": "Andrea Bollini"}}, "url": "https://github.com/DSpace/DSpace/commit/06f9eb521c98fad98c5c7a6e1f4d31226e6c49e4", "committedDate": "2020-06-25T12:02:00Z", "message": "Fix checkstyle issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "361610c73a73e608509d9710ed5087d3f83f09be", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/361610c73a73e608509d9710ed5087d3f83f09be", "committedDate": "2020-06-25T16:46:59Z", "message": "Merge branch 'master' into DS-4042_ITs_WrongPatchRequest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21e96f937c77bba576db67bb19fd93acabb8399a", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/21e96f937c77bba576db67bb19fd93acabb8399a", "committedDate": "2020-06-25T17:09:25Z", "message": "added missing parameter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NzQ4MTI0", "url": "https://github.com/DSpace/DSpace/pull/2760#pullrequestreview-437748124", "createdAt": "2020-06-25T18:22:12Z", "commit": {"oid": "21e96f937c77bba576db67bb19fd93acabb8399a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1454, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}