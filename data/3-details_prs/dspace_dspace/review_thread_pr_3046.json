{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4MzMwNjQy", "number": 3046, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMjoyNDo1MVrOE5uxTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDowODoyMFrOE7OOVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4OTcwNTc1OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/storage/rdbms/migration/V7_0_2020_10_31__CollectionCommunity_Metadata_Handle.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMjoyNDo1MVrOH0Xu7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDo0NjozOVrOH1nx4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY3Njg0NA==", "bodyText": "Have we fully tested this SQL_INSERT on Postgres and Oracle?  I'm a little nervous about hardcoding this SQL as a string in Java, simply because it means we cannot easily customize it for Postgres vs Oracle as necessary.\nNormally, the process is to provide separate *.sql files under dspace-api/src/main/resources/org/dspace/storage/rdbms/sqlmigration/[db-type]/, rather than hardcoding SQL into Java.\nIf this has not been tested on Oracle, I'd prefer we replace this logic with SQL files, even though I realize that'd require having two INSERT statements in each file (one for community & one for collection)", "url": "https://github.com/DSpace/DSpace/pull/3046#discussion_r524676844", "createdAt": "2020-11-16T22:24:51Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/storage/rdbms/migration/V7_0_2020_10_31__CollectionCommunity_Metadata_Handle.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.storage.rdbms.migration;\n+\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+\n+import org.dspace.handle.service.HandleService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.flywaydb.core.api.migration.BaseJavaMigration;\n+import org.flywaydb.core.api.migration.Context;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.PreparedStatementSetter;\n+import org.springframework.jdbc.datasource.SingleConnectionDataSource;\n+\n+/**\n+ * Insert a 'dc.idendifier.uri' metadata record for each Community and Collection in the database.\n+ * The value is calculated concatenating the canonicalPrefix extracted from the configuration\n+ * (default is \"http://hdl.handle.net/) and the object's handle suffix stored inside the handle table.\n+ *\n+ * @author Alessandro Martelli (alessandro.martelli at 4science.it)\n+ */\n+public class V7_0_2020_10_31__CollectionCommunity_Metadata_Handle extends BaseJavaMigration {\n+    // Size of migration script run\n+    protected Integer migration_file_size = -1;\n+\n+    @Override\n+    public void migrate(Context context) throws Exception {\n+\n+        HandleService handleService = DSpaceServicesFactory\n+                .getInstance().getServiceManager().getServicesByType(HandleService.class).get(0);\n+\n+        final String prefix = handleService.getCanonicalPrefix();\n+\n+        final String SQL_INSERT = \"insert into metadatavalue \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e279cb3e0532c80c670b02352344eb6721ea905a"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk2Njg0OA==", "bodyText": "We discussed a lot about it with @abollini. We option for a fully java based script since we have to make aware the database of the prefix value from configuration. This means we will still need a Java based script to properly initialize sql. Having said that in my opinion there is no problem in moving the sql part into separate files (and replicating it twice each).", "url": "https://github.com/DSpace/DSpace/pull/3046#discussion_r524966848", "createdAt": "2020-11-17T08:27:24Z", "author": {"login": "alemarte"}, "path": "dspace-api/src/main/java/org/dspace/storage/rdbms/migration/V7_0_2020_10_31__CollectionCommunity_Metadata_Handle.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.storage.rdbms.migration;\n+\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+\n+import org.dspace.handle.service.HandleService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.flywaydb.core.api.migration.BaseJavaMigration;\n+import org.flywaydb.core.api.migration.Context;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.PreparedStatementSetter;\n+import org.springframework.jdbc.datasource.SingleConnectionDataSource;\n+\n+/**\n+ * Insert a 'dc.idendifier.uri' metadata record for each Community and Collection in the database.\n+ * The value is calculated concatenating the canonicalPrefix extracted from the configuration\n+ * (default is \"http://hdl.handle.net/) and the object's handle suffix stored inside the handle table.\n+ *\n+ * @author Alessandro Martelli (alessandro.martelli at 4science.it)\n+ */\n+public class V7_0_2020_10_31__CollectionCommunity_Metadata_Handle extends BaseJavaMigration {\n+    // Size of migration script run\n+    protected Integer migration_file_size = -1;\n+\n+    @Override\n+    public void migrate(Context context) throws Exception {\n+\n+        HandleService handleService = DSpaceServicesFactory\n+                .getInstance().getServiceManager().getServicesByType(HandleService.class).get(0);\n+\n+        final String prefix = handleService.getCanonicalPrefix();\n+\n+        final String SQL_INSERT = \"insert into metadatavalue \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY3Njg0NA=="}, "originalCommit": {"oid": "e279cb3e0532c80c670b02352344eb6721ea905a"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI0MjMwNw==", "bodyText": "@alemarte : To clarify, my concern here is that hardcoding SQL into Java means that the SQL must work on all database types.  So, again, I'm wondering if this SQL has been tested on Oracle?  If we can prove it works for both Postgres & Oracle, then this approach is OK.  Otherwise, we must refactor this to use SQL scripts that are database type specific, as that allows us to customize the SQL per database type.\nI'm a little nervous that this hardcoded SQL may not be cross-database compatible (as it's quite complex), but I hope I'm wrong.  In any case, I'd appreciate it if you could test this on Oracle to ensure it'll work there as well.  If so, then it's fine as-is.  If not, then we need to figure out a different solution that allows the Oracle SQL and Postgres SQL to be different.   One option might be to move to SQL files and use Flyway Placeholders (https://flywaydb.org/documentation/configuration/placeholder) in the SQL to represent the prefix -- but I'm not sure how easy that'd be, as we've not had to use placeholders yet in any other migration.", "url": "https://github.com/DSpace/DSpace/pull/3046#discussion_r525242307", "createdAt": "2020-11-17T15:24:33Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/storage/rdbms/migration/V7_0_2020_10_31__CollectionCommunity_Metadata_Handle.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.storage.rdbms.migration;\n+\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+\n+import org.dspace.handle.service.HandleService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.flywaydb.core.api.migration.BaseJavaMigration;\n+import org.flywaydb.core.api.migration.Context;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.PreparedStatementSetter;\n+import org.springframework.jdbc.datasource.SingleConnectionDataSource;\n+\n+/**\n+ * Insert a 'dc.idendifier.uri' metadata record for each Community and Collection in the database.\n+ * The value is calculated concatenating the canonicalPrefix extracted from the configuration\n+ * (default is \"http://hdl.handle.net/) and the object's handle suffix stored inside the handle table.\n+ *\n+ * @author Alessandro Martelli (alessandro.martelli at 4science.it)\n+ */\n+public class V7_0_2020_10_31__CollectionCommunity_Metadata_Handle extends BaseJavaMigration {\n+    // Size of migration script run\n+    protected Integer migration_file_size = -1;\n+\n+    @Override\n+    public void migrate(Context context) throws Exception {\n+\n+        HandleService handleService = DSpaceServicesFactory\n+                .getInstance().getServiceManager().getServicesByType(HandleService.class).get(0);\n+\n+        final String prefix = handleService.getCanonicalPrefix();\n+\n+        final String SQL_INSERT = \"insert into metadatavalue \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY3Njg0NA=="}, "originalCommit": {"oid": "e279cb3e0532c80c670b02352344eb6721ea905a"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk4ODMyMQ==", "bodyText": "@tdonohue I understand your concerns, unfortunately I can't say it works 100% on oracle. I've moved the insert parts into separate files.\nNow, the hard coded queries are listed below:\n\nCREATE TABLE tmp_handleprefix (handleprefix text NOT NULL);\nINSERT INTO tmp_handleprefix (handleprefix) VALUES (?)\n\nPlaceholders can't be used easily since we have no access to the Flyway instance within the migration script.", "url": "https://github.com/DSpace/DSpace/pull/3046#discussion_r525988321", "createdAt": "2020-11-18T10:46:39Z", "author": {"login": "alemarte"}, "path": "dspace-api/src/main/java/org/dspace/storage/rdbms/migration/V7_0_2020_10_31__CollectionCommunity_Metadata_Handle.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.storage.rdbms.migration;\n+\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+\n+import org.dspace.handle.service.HandleService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.flywaydb.core.api.migration.BaseJavaMigration;\n+import org.flywaydb.core.api.migration.Context;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.PreparedStatementSetter;\n+import org.springframework.jdbc.datasource.SingleConnectionDataSource;\n+\n+/**\n+ * Insert a 'dc.idendifier.uri' metadata record for each Community and Collection in the database.\n+ * The value is calculated concatenating the canonicalPrefix extracted from the configuration\n+ * (default is \"http://hdl.handle.net/) and the object's handle suffix stored inside the handle table.\n+ *\n+ * @author Alessandro Martelli (alessandro.martelli at 4science.it)\n+ */\n+public class V7_0_2020_10_31__CollectionCommunity_Metadata_Handle extends BaseJavaMigration {\n+    // Size of migration script run\n+    protected Integer migration_file_size = -1;\n+\n+    @Override\n+    public void migrate(Context context) throws Exception {\n+\n+        HandleService handleService = DSpaceServicesFactory\n+                .getInstance().getServiceManager().getServicesByType(HandleService.class).get(0);\n+\n+        final String prefix = handleService.getCanonicalPrefix();\n+\n+        final String SQL_INSERT = \"insert into metadatavalue \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY3Njg0NA=="}, "originalCommit": {"oid": "e279cb3e0532c80c670b02352344eb6721ea905a"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4OTcxODY5OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/test/java/org/dspace/content/CollectionTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMjoyNzowMFrOH0X3iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzowOTo1MVrOH14ReA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY3OTA1MQ==", "bodyText": "You can remove this logic, as there's no need to reset Configuration values.  They automatically reset after every test.  So, the try/finally can be removed & the getProperty at the top.   Just call setProperty to change the value, and it'll reset automatically.", "url": "https://github.com/DSpace/DSpace/pull/3046#discussion_r524679051", "createdAt": "2020-11-16T22:27:00Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/test/java/org/dspace/content/CollectionTest.java", "diffHunk": "@@ -180,6 +191,10 @@ public void testCreateWithValidHandle() throws Exception {\n         // check that collection was created, and that its handle was set to proper value\n         assertThat(\"testCreateWithValidHandle 0\", created, notNullValue());\n         assertThat(\"testCreateWithValidHandle 1\", created.getHandle(), equalTo(\"987654321/100\"));\n+\n+        } finally {\n+            configurationService.setProperty(\"handle.additional.prefixes\", handleAdditionalPrefixes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e279cb3e0532c80c670b02352344eb6721ea905a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk5NDk2MA==", "bodyText": "At a first glance, I haven't found anything like a configuration reset. This maybe happens only for IntegrationTests?", "url": "https://github.com/DSpace/DSpace/pull/3046#discussion_r525994960", "createdAt": "2020-11-18T10:57:00Z", "author": {"login": "alemarte"}, "path": "dspace-api/src/test/java/org/dspace/content/CollectionTest.java", "diffHunk": "@@ -180,6 +191,10 @@ public void testCreateWithValidHandle() throws Exception {\n         // check that collection was created, and that its handle was set to proper value\n         assertThat(\"testCreateWithValidHandle 0\", created, notNullValue());\n         assertThat(\"testCreateWithValidHandle 1\", created.getHandle(), equalTo(\"987654321/100\"));\n+\n+        } finally {\n+            configurationService.setProperty(\"handle.additional.prefixes\", handleAdditionalPrefixes);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY3OTA1MQ=="}, "originalCommit": {"oid": "e279cb3e0532c80c670b02352344eb6721ea905a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI1ODU1Mg==", "bodyText": "@alemarte : My mistake. You are correct, it seems this configuration reload is only currently enabled for Integration Tests here: https://github.com/DSpace/DSpace/blob/main/dspace-api/src/test/java/org/dspace/AbstractIntegrationTestWithDatabase.java#L192-L193\nSo, you are correct that this code is unfortunately necessary until we add similar logic to the AbstractUnitTest.destroy() method here: https://github.com/DSpace/DSpace/blob/main/dspace-api/src/test/java/org/dspace/AbstractUnitTest.java#L145\nIf you are willing, we could add that code to AbstractUnitTest.destroy() now.  However, if you'd rather keep this PR as-is, I'm OK with this moving forward and we can do a future refactor to remove this logic once AbstractUnitTest properly resets configurations to their defaults.", "url": "https://github.com/DSpace/DSpace/pull/3046#discussion_r526258552", "createdAt": "2020-11-18T17:09:51Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/test/java/org/dspace/content/CollectionTest.java", "diffHunk": "@@ -180,6 +191,10 @@ public void testCreateWithValidHandle() throws Exception {\n         // check that collection was created, and that its handle was set to proper value\n         assertThat(\"testCreateWithValidHandle 0\", created, notNullValue());\n         assertThat(\"testCreateWithValidHandle 1\", created.getHandle(), equalTo(\"987654321/100\"));\n+\n+        } finally {\n+            configurationService.setProperty(\"handle.additional.prefixes\", handleAdditionalPrefixes);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY3OTA1MQ=="}, "originalCommit": {"oid": "e279cb3e0532c80c670b02352344eb6721ea905a"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4OTcyMTA3OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/test/java/org/dspace/content/CommunityTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMjoyNzoyNFrOH0X5Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMjoyNzoyNFrOH0X5Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY3OTQ3MQ==", "bodyText": "Again, remove this logic...configs reset automatically", "url": "https://github.com/DSpace/DSpace/pull/3046#discussion_r524679471", "createdAt": "2020-11-16T22:27:24Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/test/java/org/dspace/content/CommunityTest.java", "diffHunk": "@@ -214,6 +227,10 @@ public void testCreateWithValidHandle() throws Exception {\n         // check that community was created, and that its handle was set to proper value\n         assertThat(\"testCreateWithValidHandle 0\", created, notNullValue());\n         assertThat(\"testCreateWithValidHandle 1\", created.getHandle(), equalTo(\"987654321/100c\"));\n+\n+        } finally {\n+            configurationService.setProperty(\"handle.additional.prefixes\", handleAdditionalPrefixes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e279cb3e0532c80c670b02352344eb6721ea905a"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTMyODg3OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/storage/rdbms/migration/V7_0_2020_10_31__CollectionCommunity_Metadata_Handle.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDowMzoxOVrOH2vgag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDowMzoxOVrOH2vgag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE2MzQ5OA==", "bodyText": "@alemarte : Sorry, but I have to admit, I'm not a fan of this new logic to create a temp table to store the configured handle prefix.  I understand the reasoning behind it, but this approach seems more complex than necessary (and I'm also worried about fragility...if something errors out here, I'm worried some sites could end up with an unused tmp_handleprefix table sitting around).\nInstead of trying to save the configuration into the database layer, it seems much easier to just use String variable substitution.  Afterall, you are reading the SQL migration script into a String (see dataMigrateSQL on line 63).   Therefore, why not do something like this:\n// Get SQL script (based on DB type)\nString dataMigrateSQL = MigrationUtils.getResourceAsString(sqlMigrationPath + \"V7.0_2020.10.31__CollectionCommunity_Metadata_Handle.sql\");\n\n// Replace ${handle.canonical.prefix} variable in SQL script with value from Configuration\nMap<String, String> valuesMap = new HashMap<>();\nvaluesMap.put(\"handle.canonical.prefix\", handleService.getCanonicalPrefix());\nStringSubstitutor sub = new StringSubstitutor(valuesMap);\ndataMigrateSQL = sub.replace(dataMigrateSQL);\n\n// Run the resulting script\nDatabaseUtils.executeSql(context.getConnection(), dataMigrateSQL);\n\nTo me, this would be a lot cleaner & easier for other developers to understand.  It'd only require that you add a ${handle.canonical.prefix} placeholder into the SQL scripts where it is necessary.  I'll also note that this same idea has already been used in our FlywayUpgradeUtils class, which uses  similar placeholder variables in the upgradeToFlyway4x.sql script.\nApologies that I didn't suggest this approach sooner, but I had forgotten it until I analyzed your new code.", "url": "https://github.com/DSpace/DSpace/pull/3046#discussion_r527163498", "createdAt": "2020-11-19T20:03:19Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/storage/rdbms/migration/V7_0_2020_10_31__CollectionCommunity_Metadata_Handle.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.storage.rdbms.migration;\n+\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+\n+import org.dspace.handle.service.HandleService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.dspace.storage.rdbms.DatabaseUtils;\n+import org.flywaydb.core.api.migration.BaseJavaMigration;\n+import org.flywaydb.core.api.migration.Context;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.PreparedStatementSetter;\n+import org.springframework.jdbc.datasource.SingleConnectionDataSource;\n+\n+/**\n+ * Insert a 'dc.idendifier.uri' metadata record for each Community and Collection in the database.\n+ * The value is calculated concatenating the canonicalPrefix extracted from the configuration\n+ * (default is \"http://hdl.handle.net/) and the object's handle suffix stored inside the handle table.\n+ *\n+ * @author Alessandro Martelli (alessandro.martelli at 4science.it)\n+ */\n+public class V7_0_2020_10_31__CollectionCommunity_Metadata_Handle extends BaseJavaMigration {\n+    // Size of migration script run\n+    protected Integer migration_file_size = -1;\n+\n+    @Override\n+    public void migrate(Context context) throws Exception {\n+\n+        HandleService handleService = DSpaceServicesFactory\n+                .getInstance().getServiceManager().getServicesByType(HandleService.class).get(0);\n+\n+        final String prefix = handleService.getCanonicalPrefix();\n+\n+        // Step 1 Preparation (creation of the tmp_handleprefix containing one record with the prefix)\n+        String createTmpTable = \"CREATE TABLE tmp_handleprefix (handleprefix text NOT NULL);\";\n+        DatabaseUtils.executeSql(context.getConnection(), createTmpTable);\n+\n+        // Step 2 Preparation (insertion of the prefix value into tmp_handleprefix)\n+        String insertPrefixSql = \"INSERT INTO tmp_handleprefix (handleprefix) VALUES (?)\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b69a2b29830c2f00a3dc6b8cd8bdca0faf4892"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTM0NDg3OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/resources/org/dspace/storage/rdbms/sqlmigration/metadata/h2/V7.0_2020.10.31__CollectionCommunity_Metadata_Handle.sql", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDowODoyMFrOH2vqtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOTo0Nzo0MFrOH4F0DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE2NjEzMw==", "bodyText": "If you go with the approach I suggested above, I think this line (and the same line in the other INSERT statement) would just become:\nconcat(\"${handle.canonical.prefix}\", h.handle) as text_value,\n\nObviously, you can also remove other references to the T2 table in this script (namely the cross join below)", "url": "https://github.com/DSpace/DSpace/pull/3046#discussion_r527166133", "createdAt": "2020-11-19T20:08:20Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/resources/org/dspace/storage/rdbms/sqlmigration/metadata/h2/V7.0_2020.10.31__CollectionCommunity_Metadata_Handle.sql", "diffHunk": "@@ -0,0 +1,99 @@\n+--\n+-- The contents of this file are subject to the license and copyright\n+-- detailed in the LICENSE and NOTICE files at the root of the source\n+-- tree and available online at\n+--\n+-- http://www.dspace.org/license/\n+--\n+\n+-- ===============================================================\n+-- WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING\n+--\n+-- DO NOT MANUALLY RUN THIS DATABASE MIGRATION. IT WILL BE EXECUTED\n+-- AUTOMATICALLY (IF NEEDED) BY \"FLYWAY\" WHEN YOU STARTUP DSPACE.\n+-- http://flywaydb.org/\n+-- ===============================================================\n+\n+-------------------------------------------------------------\n+-- This will create COMMUNITY handle metadata\n+-------------------------------------------------------------\n+\n+insert into metadatavalue (metadata_field_id, text_value, text_lang, place, authority, confidence, dspace_object_id) \n+  select distinct \n+  \tT1.metadata_field_id as metadata_field_id, \n+  \tconcat(T2.handleprefix, h.handle) as text_value, ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b69a2b29830c2f00a3dc6b8cd8bdca0faf4892"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU3NzU0OQ==", "bodyText": "@tdonohue  I followed the mentioned steps, It works. I only had to change double quotes with single quote since both postgres and h2 were failing (double quotes was interpreted as a column name).", "url": "https://github.com/DSpace/DSpace/pull/3046#discussion_r528577549", "createdAt": "2020-11-23T09:47:40Z", "author": {"login": "alemarte"}, "path": "dspace-api/src/main/resources/org/dspace/storage/rdbms/sqlmigration/metadata/h2/V7.0_2020.10.31__CollectionCommunity_Metadata_Handle.sql", "diffHunk": "@@ -0,0 +1,99 @@\n+--\n+-- The contents of this file are subject to the license and copyright\n+-- detailed in the LICENSE and NOTICE files at the root of the source\n+-- tree and available online at\n+--\n+-- http://www.dspace.org/license/\n+--\n+\n+-- ===============================================================\n+-- WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING\n+--\n+-- DO NOT MANUALLY RUN THIS DATABASE MIGRATION. IT WILL BE EXECUTED\n+-- AUTOMATICALLY (IF NEEDED) BY \"FLYWAY\" WHEN YOU STARTUP DSPACE.\n+-- http://flywaydb.org/\n+-- ===============================================================\n+\n+-------------------------------------------------------------\n+-- This will create COMMUNITY handle metadata\n+-------------------------------------------------------------\n+\n+insert into metadatavalue (metadata_field_id, text_value, text_lang, place, authority, confidence, dspace_object_id) \n+  select distinct \n+  \tT1.metadata_field_id as metadata_field_id, \n+  \tconcat(T2.handleprefix, h.handle) as text_value, ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE2NjEzMw=="}, "originalCommit": {"oid": "65b69a2b29830c2f00a3dc6b8cd8bdca0faf4892"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1451, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}