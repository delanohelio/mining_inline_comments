{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMjM5NjY0", "number": 2792, "title": "Refactoring authority framework, value pairs and controlled vocabulary", "bodyText": "References\nWiki page with the preliminary discussion:  https://wiki.lyrasis.org/display/DSPACE/4Science+proposal+to+improve+authority+support+in+DSpace7\nRest Contract PR DSpace/RestContract#128\nAngular PR: DSpace/dspace-angular#751\nDescription\nThis PR restores the previous way of DSpace to store metadata when values are retrieved from valuepairs and controlled vocabularies (without the authority ID in the metadatavalue).\nNevertheless, value-pairs and controlled vocabularies are managed using the same infrastructure previously used for Authority Control, for these reasons we agree to rename all these features under the common name of controlled vocabularies.\nFinally, this PR also fix a couple of outstanding issues that were noted on the previous implementation\nhttps://jira.lyrasis.org/browse/DS-4350\nhttps://jira.lyrasis.org/browse/DS-4371\nhttps://jira.lyrasis.org/browse/DS-4408\nthis also replace the previous PR #2743 adding the necessary features to support the visualization of the hierarchical vocabularies\nInstructions for Reviewers\nITs have been added to cover the new VocabularyEntryDetails endpoint and the refactoring related to the link repositories.\nOther than reviewing the code by inspection and checking the ITs it could be useful to verify the correct exposition of the default submission definitions where the value-pairs must be exposed as common_types vocabulary. It is also possible to enalbe the srsc controlled vocabulary to verify that it meet the example in the REST Contract\nChecklist\n\n My PR is small in size (e.g. less than 1,000 lines of code, not including comments & integration tests). Exceptions may be made if previously agreed upon.\n My PR passes Checkstyle validation based on the Code Style Guide.\n My PR includes Javadoc for all new (or modified) public methods and classes. It also includes Javadoc for large or complex private methods.\n My PR passes all tests and includes new/updated Unit or Integration Tests based on the Code Testing Guide.\n[N/A] If my PR includes new, third-party dependencies (in any pom.xml), I've made sure their licenses align with the DSpace BSD License based on the Licensing of Contributions documentation.\n If my PR modifies the REST API, I've linked to the REST Contract page (or open PR) related to this change.", "createdAt": "2020-06-25T20:25:19Z", "url": "https://github.com/DSpace/DSpace/pull/2792", "merged": true, "mergeCommit": {"oid": "4340b502933ab9fe9cc74eb060f76f15b40a3a6a"}, "closed": true, "closedAt": "2020-09-11T14:41:50Z", "author": {"login": "abollini"}, "timelineItems": {"totalCount": 75, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcp6_ZXgH2gAyNDQwMjM5NjY0OmUzOWMyYTg1ODI4MWVkOTUzMGM5ZGM0NGM3OWZjZmIyZTE1MDRhYTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHwF7AgFqTQ4NjUzMTI3Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e39c2a858281ed9530c9dc44c79fcfb2e1504aa6", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/e39c2a858281ed9530c9dc44c79fcfb2e1504aa6", "committedDate": "2020-06-10T15:00:43Z", "message": "added ITs for Controlled Vocabularies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f6775a1223cf82cb7f34b5ab2e0883b9429e286", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/5f6775a1223cf82cb7f34b5ab2e0883b9429e286", "committedDate": "2020-06-10T19:30:10Z", "message": "added ITs for Vocabulary Entries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1765d2a161f6440d54f3f2ed808ec274e9d8c84c", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/1765d2a161f6440d54f3f2ed808ec274e9d8c84c", "committedDate": "2020-06-15T09:53:50Z", "message": "added tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d794c1cdf0512ac45f1e9c5a5618646fee6d8c80", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/d794c1cdf0512ac45f1e9c5a5618646fee6d8c80", "committedDate": "2020-06-16T16:22:56Z", "message": "update tests of Vocabulary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8afa698e041b67134c9d92dba46bdf05b8aea80a", "author": {"user": {"login": "abollini", "name": "Andrea Bollini"}}, "url": "https://github.com/DSpace/DSpace/commit/8afa698e041b67134c9d92dba46bdf05b8aea80a", "committedDate": "2020-06-16T16:35:04Z", "message": "Initial refactoring for vocabularies (Draft)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17c383364542672efaaa1d631bd13f29ef7dc5bd", "author": {"user": {"login": "abollini", "name": "Andrea Bollini"}}, "url": "https://github.com/DSpace/DSpace/commit/17c383364542672efaaa1d631bd13f29ef7dc5bd", "committedDate": "2020-06-17T08:45:34Z", "message": "Refactoring for vocabularies, second part (Draft)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc2f68655f7af2c657e3dc669b7f586d93f0304a", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/dc2f68655f7af2c657e3dc669b7f586d93f0304a", "committedDate": "2020-06-17T09:47:50Z", "message": "Merge branch 'CST-3088' into draft_vocabulary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9849d6c41e00257e3721043661934f020ec5fac9", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/9849d6c41e00257e3721043661934f020ec5fac9", "committedDate": "2020-06-17T12:19:54Z", "message": "fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4784d34066d32c1f75ce1afebfc36d6681118e16", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/4784d34066d32c1f75ce1afebfc36d6681118e16", "committedDate": "2020-06-17T16:22:13Z", "message": "renamed classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7ce794eab7ee7a658e9fb99734f9fd1705283ed", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/d7ce794eab7ee7a658e9fb99734f9fd1705283ed", "committedDate": "2020-06-18T08:14:56Z", "message": "fix creation of the internal maps of authorities"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e8b2f87b66f61b66c12ec41e11caa6a5a19ca5c", "author": {"user": {"login": "abollini", "name": "Andrea Bollini"}}, "url": "https://github.com/DSpace/DSpace/commit/3e8b2f87b66f61b66c12ec41e11caa6a5a19ca5c", "committedDate": "2020-06-18T10:28:48Z", "message": "Remove invalid test, cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be6f7f3bfd2edc3cd1513b075ab444a4fdae6f99", "author": {"user": {"login": "abollini", "name": "Andrea Bollini"}}, "url": "https://github.com/DSpace/DSpace/commit/be6f7f3bfd2edc3cd1513b075ab444a4fdae6f99", "committedDate": "2020-06-18T10:38:12Z", "message": "Update default to reflect the rest contract\n\nthe visualization is now responsability of the angular UI so it is better by default present a clean label as the hierarchy is still visible in the otherInformation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec3df2e523bed760fab64005ed879f147170e6c7", "author": {"user": {"login": "abollini", "name": "Andrea Bollini"}}, "url": "https://github.com/DSpace/DSpace/commit/ec3df2e523bed760fab64005ed879f147170e6c7", "committedDate": "2020-06-18T10:42:59Z", "message": "Fix test setup, update response code according to the contract"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94581761b91f703129d50803e5d0ec8c2991d031", "author": {"user": {"login": "abollini", "name": "Andrea Bollini"}}, "url": "https://github.com/DSpace/DSpace/commit/94581761b91f703129d50803e5d0ec8c2991d031", "committedDate": "2020-06-18T10:55:40Z", "message": "Fix typos"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae60714f7d4035019f4581d39baa365333586d28", "author": {"user": {"login": "abollini", "name": "Andrea Bollini"}}, "url": "https://github.com/DSpace/DSpace/commit/ae60714f7d4035019f4581d39baa365333586d28", "committedDate": "2020-06-18T10:55:58Z", "message": "Align test with the contract"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f44b28a8f5855dcf89f0815544be03e73e228456", "author": {"user": {"login": "abollini", "name": "Andrea Bollini"}}, "url": "https://github.com/DSpace/DSpace/commit/f44b28a8f5855dcf89f0815544be03e73e228456", "committedDate": "2020-06-18T10:56:23Z", "message": "Implement check for mandatory parameters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d38dfdb31fe92592f34f7a91c29c5a79737a784c", "author": {"user": {"login": "abollini", "name": "Andrea Bollini"}}, "url": "https://github.com/DSpace/DSpace/commit/d38dfdb31fe92592f34f7a91c29c5a79737a784c", "committedDate": "2020-06-18T10:56:44Z", "message": "Add support for : in string identifier"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61c346089e14429b8208ddc7c9a3a38eef94c972", "author": {"user": {"login": "abollini", "name": "Andrea Bollini"}}, "url": "https://github.com/DSpace/DSpace/commit/61c346089e14429b8208ddc7c9a3a38eef94c972", "committedDate": "2020-06-18T10:58:28Z", "message": "Cleanup authority service implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9abbc505b635120e25d6827063fc1b938fb2243", "author": {"user": {"login": "abollini", "name": "Andrea Bollini"}}, "url": "https://github.com/DSpace/DSpace/commit/e9abbc505b635120e25d6827063fc1b938fb2243", "committedDate": "2020-06-18T10:59:02Z", "message": "Add initial implementation for VocabularyEntryDetails repository"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53765394803768fd5639323a30401d2d502da9fb", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/53765394803768fd5639323a30401d2d502da9fb", "committedDate": "2020-06-18T20:07:04Z", "message": "missing filling list of metadata"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1114903645deee131620eca0c95368560266dad4", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/1114903645deee131620eca0c95368560266dad4", "committedDate": "2020-06-18T20:07:43Z", "message": "refactored tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea9d5da7644f73e66a2f1dadfb304879949c13f0", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/ea9d5da7644f73e66a2f1dadfb304879949c13f0", "committedDate": "2020-06-19T07:35:24Z", "message": "implemented search method byMetadataAndCollection"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa2769036a6253fbd6802549edc0172da8d0ea78", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/fa2769036a6253fbd6802549edc0172da8d0ea78", "committedDate": "2020-06-19T14:36:43Z", "message": "refactored search method byMetadataAndCollection"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52dfbfd95821546b2915b55b08af73f1ee9be55d", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/52dfbfd95821546b2915b55b08af73f1ee9be55d", "committedDate": "2020-06-19T14:40:35Z", "message": "added VocabularyEntryResource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd842fd806a55a71a6966cdb9625b7aefca628dc", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/cd842fd806a55a71a6966cdb9625b7aefca628dc", "committedDate": "2020-06-19T14:42:10Z", "message": "refactored RestResourceController"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "056a0fbdae16f8e385255359d828336c460ec0d6", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/056a0fbdae16f8e385255359d828336c460ec0d6", "committedDate": "2020-06-19T14:44:26Z", "message": "VocabularyEntryRest must implement RestModel"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9f00672943f611b8bf909d3a3a26c495eb7aa19", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/f9f00672943f611b8bf909d3a3a26c495eb7aa19", "committedDate": "2020-06-19T16:45:37Z", "message": "fix bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de49227b076a65720bb3b09c1e1ca3cd0f3e643d", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/de49227b076a65720bb3b09c1e1ca3cd0f3e643d", "committedDate": "2020-06-19T16:46:22Z", "message": "fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e473f1170bb2007691a4bad885fbcc4365df6181", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/e473f1170bb2007691a4bad885fbcc4365df6181", "committedDate": "2020-06-19T16:47:04Z", "message": "added test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efb4f6a1be9fbbb566a82c336e42bdc29a9d65f6", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/efb4f6a1be9fbbb566a82c336e42bdc29a9d65f6", "committedDate": "2020-06-22T10:00:49Z", "message": "renamed embedded link in tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73e0bd8759b69aa11bf54b6a4d3efe0a4ca17149", "author": {"user": {"login": "abollini", "name": "Andrea Bollini"}}, "url": "https://github.com/DSpace/DSpace/commit/73e0bd8759b69aa11bf54b6a4d3efe0a4ca17149", "committedDate": "2020-06-22T10:15:00Z", "message": "Avoid to expose the authority where not needed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c2ed0c0d917612eb54e251be077dcf8059724c7", "author": {"user": {"login": "abollini", "name": "Andrea Bollini"}}, "url": "https://github.com/DSpace/DSpace/commit/6c2ed0c0d917612eb54e251be077dcf8059724c7", "committedDate": "2020-06-22T10:15:35Z", "message": "Merge branch 'draft_vocabulary' of https://github.com/4Science/DSpace into draft_vocabulary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de8def4418357b82b0425cdaf142bed48425f107", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/de8def4418357b82b0425cdaf142bed48425f107", "committedDate": "2020-06-22T12:44:41Z", "message": "refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64a29b1b6050c94d50fc7676085ae82033ba437b", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/64a29b1b6050c94d50fc7676085ae82033ba437b", "committedDate": "2020-06-22T12:45:44Z", "message": "update tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c4985e1cf2634f775bd4cbf8551c46b439703b6", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/0c4985e1cf2634f775bd4cbf8551c46b439703b6", "committedDate": "2020-06-23T12:59:15Z", "message": "added implementations for getChoicesByParent and getTopChoices"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed5ea81241386b5abf10356857960486d7c5e24f", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/ed5ea81241386b5abf10356857960486d7c5e24f", "committedDate": "2020-06-23T20:45:54Z", "message": "added implementations for link child and parent repositories"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b940e3d41a59bbf181b227942425d68367bc4ff2", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/b940e3d41a59bbf181b227942425d68367bc4ff2", "committedDate": "2020-06-23T20:48:54Z", "message": "implemented search method top"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c5dc56193910ed3cfdaae85cf4391046128f515", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/8c5dc56193910ed3cfdaae85cf4391046128f515", "committedDate": "2020-06-23T20:50:55Z", "message": "updated tests of VocabularyEntryDetails"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13727fb49aee07e838a1b0951be38b598689af89", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/13727fb49aee07e838a1b0951be38b598689af89", "committedDate": "2020-06-24T10:36:34Z", "message": "Added management of the parametr exact"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f39ce1cf54944ccbe7eae5aca4661f70669e7657", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/f39ce1cf54944ccbe7eae5aca4661f70669e7657", "committedDate": "2020-06-24T10:37:09Z", "message": "Added ITs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c69168b27def235ed3451f34423d187f98e37361", "author": {"user": {"login": "abollini", "name": "Andrea Bollini"}}, "url": "https://github.com/DSpace/DSpace/commit/c69168b27def235ed3451f34423d187f98e37361", "committedDate": "2020-06-24T22:06:00Z", "message": "Fix test and final cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b923e0cb53cb344b8e8e3e7738c0b458c2b4e2b", "author": {"user": {"login": "abollini", "name": "Andrea Bollini"}}, "url": "https://github.com/DSpace/DSpace/commit/6b923e0cb53cb344b8e8e3e7738c0b458c2b4e2b", "committedDate": "2020-06-25T07:23:34Z", "message": "Fix test - DSpaceControlledVocabulary now honor the pagination"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82aae2395f22ca3d7631664ff4d14e56b77f5d8c", "author": {"user": {"login": "abollini", "name": "Andrea Bollini"}}, "url": "https://github.com/DSpace/DSpace/commit/82aae2395f22ca3d7631664ff4d14e56b77f5d8c", "committedDate": "2020-06-25T11:33:06Z", "message": "Remove unnecessary change in the MetadataAuthorityService"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76181a682919be046a4540a1c9ffe18d1a53dcbc", "author": {"user": {"login": "abollini", "name": "Andrea Bollini"}}, "url": "https://github.com/DSpace/DSpace/commit/76181a682919be046a4540a1c9ffe18d1a53dcbc", "committedDate": "2020-06-25T15:37:24Z", "message": "Restore test for authority as was before - no authorities for value pairs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42dd930060cfaad1dc742c8b9821fa4453e523da", "author": {"user": {"login": "abollini", "name": "Andrea Bollini"}}, "url": "https://github.com/DSpace/DSpace/commit/42dd930060cfaad1dc742c8b9821fa4453e523da", "committedDate": "2020-06-25T15:47:17Z", "message": "Rename authority in controlledVocabulary, add related IT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8234f2004cfdd0fce7c496b8718379bb67f71ab", "author": {"user": {"login": "abollini", "name": "Andrea Bollini"}}, "url": "https://github.com/DSpace/DSpace/commit/a8234f2004cfdd0fce7c496b8718379bb67f71ab", "committedDate": "2020-06-25T17:25:27Z", "message": "Fix vocabulary related links test in the root endpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba150b1ec7e33e9a2c1cf38b94927f016ff03862", "author": {"user": {"login": "abollini", "name": "Andrea Bollini"}}, "url": "https://github.com/DSpace/DSpace/commit/ba150b1ec7e33e9a2c1cf38b94927f016ff03862", "committedDate": "2020-06-25T17:26:52Z", "message": "Fix cleanup testenv"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "322b56b42275c0fdc2cdd7809ee653acab4392d7", "author": {"user": {"login": "abollini", "name": "Andrea Bollini"}}, "url": "https://github.com/DSpace/DSpace/commit/322b56b42275c0fdc2cdd7809ee653acab4392d7", "committedDate": "2020-06-25T18:14:01Z", "message": "Expose the vocabularyName to the submission form definition"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NjE3Mzkw", "url": "https://github.com/DSpace/DSpace/pull/2792#pullrequestreview-438617390", "createdAt": "2020-06-26T21:56:01Z", "commit": {"oid": "322b56b42275c0fdc2cdd7809ee653acab4392d7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMTo1NjowMVrOGpvzXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMTo1NjowMVrOGpvzXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQyNzk5OQ==", "bodyText": "@abollini : I'm curious about this change to make a ChoiceAuthority directly mapped to a SubmissionConfig (which is a Collection-specific submission configuration).  This seems to be the point in which we now must require a collection param in order to lookup the entries in a vocabulary.  This change is new as current master has the ChoiceAuthority only mapped to a metadata field, which would remove the requirement on a collection param.\nEssentially, I'm not sure I understand why we need to make collection required now -- it seems like this is new code whose purpose is unclear to me.", "url": "https://github.com/DSpace/DSpace/pull/2792#discussion_r446427999", "createdAt": "2020-06-26T21:56:01Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/content/authority/ChoiceAuthorityServiceImpl.java", "diffHunk": "@@ -249,68 +301,89 @@ private void loadChoiceAuthorityConfigurations() {\n                     \"Skipping invalid configuration for \" + key + \" because named plugin not found: \" + authorityName);\n                 continue;\n             }\n-            if (!authorities.containsKey(authorityName)) {\n-                controller.put(fkey, ma);\n-                authorities.put(authorityName, fkey);\n+\n+            controller.put(fkey, ma);\n+            List<String> fkeys;\n+            if (authorities.containsKey(authorityName)) {\n+                fkeys = authorities.get(authorityName);\n             } else {\n-                log.warn(\n-                    \"Skipping invalid configuration for \" + key + \" because plugin is alredy in use: \" +\n-                        authorityName + \" used by \" + authorities\n-                        .get(authorityName));\n-                continue;\n+                fkeys = new ArrayList<String>();\n             }\n-\n+            fkeys.add(fkey);\n+            authorities.put(authorityName, fkeys);\n             log.debug(\"Choice Control: For field=\" + fkey + \", Plugin=\" + ma);\n         }\n         autoRegisterChoiceAuthorityFromInputReader();\n     }\n \n     private void autoRegisterChoiceAuthorityFromInputReader() {\n         try {\n+            List<SubmissionConfig> submissionConfigs = itemSubmissionConfigReader\n+                    .getAllSubmissionConfigs(Integer.MAX_VALUE, 0);\n             DCInputsReader dcInputsReader = new DCInputsReader();\n-            for (DCInputSet dcinputSet : dcInputsReader.getAllInputs(Integer.MAX_VALUE, 0)) {\n-                DCInput[][] dcinputs = dcinputSet.getFields();\n-                for (DCInput[] dcrows : dcinputs) {\n-                    for (DCInput dcinput : dcrows) {\n-                        if (StringUtils.isNotBlank(dcinput.getPairsType())\n-                            || StringUtils.isNotBlank(dcinput.getVocabulary())) {\n-                            String authorityName = dcinput.getPairsType();\n-                            if (StringUtils.isBlank(authorityName)) {\n-                                authorityName = dcinput.getVocabulary();\n-                            }\n-                            if (!StringUtils.equals(dcinput.getInputType(), \"qualdrop_value\")) {\n-                                String fieldKey = makeFieldKey(dcinput.getSchema(), dcinput.getElement(),\n-                                                               dcinput.getQualifier());\n-                                ChoiceAuthority ca = controller.get(authorityName);\n-                                if (ca == null) {\n-                                    InputFormSelfRegisterWrapperAuthority ifa = new\n-                                        InputFormSelfRegisterWrapperAuthority();\n-                                    if (controller.containsKey(fieldKey)) {\n-                                        ifa = (InputFormSelfRegisterWrapperAuthority) controller.get(fieldKey);\n+\n+            for (SubmissionConfig subCfg : submissionConfigs) {\n+                String submissionName = subCfg.getSubmissionName();\n+                List<DCInputSet> inputsBySubmissionName = dcInputsReader.getInputsBySubmissionName(submissionName);\n+                for (DCInputSet dcinputSet : inputsBySubmissionName) {\n+                    DCInput[][] dcinputs = dcinputSet.getFields();\n+                    for (DCInput[] dcrows : dcinputs) {\n+                        for (DCInput dcinput : dcrows) {\n+                            if (StringUtils.isNotBlank(dcinput.getPairsType())\n+                                || StringUtils.isNotBlank(dcinput.getVocabulary())) {\n+                                String authorityName = dcinput.getPairsType();\n+                                if (StringUtils.isBlank(authorityName)) {\n+                                    authorityName = dcinput.getVocabulary();\n+                                }\n+                                if (!StringUtils.equals(dcinput.getInputType(), \"qualdrop_value\")) {\n+                                    String fieldKey = makeFieldKey(dcinput.getSchema(), dcinput.getElement(),\n+                                                                   dcinput.getQualifier());\n+                                    ChoiceAuthority ca = controller.get(authorityName);\n+                                    if (ca == null) {\n+                                        ca = (ChoiceAuthority) pluginService\n+                                            .getNamedPlugin(ChoiceAuthority.class, authorityName);\n+                                        if (ca == null) {\n+                                            throw new IllegalStateException(\"Invalid configuration for \" + fieldKey\n+                                                    + \" in submission definition \" + submissionName\n+                                                    + \", form definition \" + dcinputSet.getFormName()\n+                                                    + \" no named plugin found: \" + authorityName);\n+                                        }\n                                     }\n \n-                                    ChoiceAuthority ma = (ChoiceAuthority) pluginService\n-                                        .getNamedPlugin(ChoiceAuthority.class, authorityName);\n-                                    if (ma == null) {\n-                                        log.warn(\"Skipping invalid configuration for \" + fieldKey\n-                                                     + \" because named plugin not found: \" + authorityName);\n-                                        continue;\n+                                    Map<String, ChoiceAuthority> definition2authority;\n+                                    if (controllerFormDefinitions.containsKey(fieldKey)) {\n+                                        definition2authority = controllerFormDefinitions.get(fieldKey);\n+                                    } else {\n+                                        definition2authority = new HashMap<String, ChoiceAuthority>();\n+                                    }\n+                                    definition2authority.put(submissionName, ca);\n+                                    controllerFormDefinitions.put(fieldKey, definition2authority);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "322b56b42275c0fdc2cdd7809ee653acab4392d7"}, "originalPosition": 341}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff1b40d85998ebe6e2ec671dddcff0c20d228c7b", "author": {"user": {"login": "abollini", "name": "Andrea Bollini"}}, "url": "https://github.com/DSpace/DSpace/commit/ff1b40d85998ebe6e2ec671dddcff0c20d228c7b", "committedDate": "2020-06-29T14:18:05Z", "message": "remove unused attributes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfe8954a6b5f31e03482e1cb4878b7a1c79f0361", "author": {"user": {"login": "abollini", "name": "Andrea Bollini"}}, "url": "https://github.com/DSpace/DSpace/commit/cfe8954a6b5f31e03482e1cb4878b7a1c79f0361", "committedDate": "2020-06-29T14:18:16Z", "message": "Merge branch 'master' of https://github.com/DSpace/DSpace into draft_vocabulary"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5ODM1NDM5", "url": "https://github.com/DSpace/DSpace/pull/2792#pullrequestreview-439835439", "createdAt": "2020-06-30T09:25:59Z", "commit": {"oid": "cfe8954a6b5f31e03482e1cb4878b7a1c79f0361"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOToyNjowMFrOGqz3pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOTozMDoyM1rOGq0CcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU0MzIwNA==", "bodyText": "Can you add detail about what a non-selectable value is", "url": "https://github.com/DSpace/DSpace/pull/2792#discussion_r447543204", "createdAt": "2020-06-30T09:26:00Z", "author": {"login": "benbosman"}, "path": "dspace-api/src/main/java/org/dspace/content/authority/Choice.java", "diffHunk": "@@ -33,6 +33,11 @@\n      */\n     public String value = null;\n \n+    /**\n+     * A boolean representing if choice entry value can selected", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfe8954a6b5f31e03482e1cb4878b7a1c79f0361"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU0NTk2OA==", "bodyText": "This is missing JavaDocs", "url": "https://github.com/DSpace/DSpace/pull/2792#discussion_r447545968", "createdAt": "2020-06-30T09:30:23Z", "author": {"login": "benbosman"}, "path": "dspace-api/src/main/java/org/dspace/content/authority/ChoiceAuthority.java", "diffHunk": "@@ -67,12 +70,27 @@\n      * This may get called many times while populating a Web page so it should\n      * be implemented as efficiently as possible.\n      *\n-     * @param field  being matched for\n      * @param key    authority key known to this authority.\n      * @param locale explicit localization key if available, or null\n      * @return descriptive label - should always return something, never null.\n      */\n-    public String getLabel(String field, String key, String locale);\n+    public String getLabel(String key, String locale);\n+\n+    /**\n+     * Get the canonical value to store for a key in the authority. Can be localized\n+     * given the implicit or explicit locale specification.\n+     *\n+     * @param key    authority key known to this authority.\n+     * @param locale explicit localization key if available, or null\n+     * @return value to store - should always return something, never null.\n+     */\n+    default String getValue(String key, String locale) {\n+        return getLabel(key, locale);\n+    }\n+\n+    default Map<String, String> getExtra(String key, String locale) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfe8954a6b5f31e03482e1cb4878b7a1c79f0361"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMjU1ODU5", "url": "https://github.com/DSpace/DSpace/pull/2792#pullrequestreview-440255859", "createdAt": "2020-06-30T17:54:04Z", "commit": {"oid": "cfe8954a6b5f31e03482e1cb4878b7a1c79f0361"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzo1NDowNFrOGrIDOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODowODo0NlrOGrIlAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg3Mzg1MQ==", "bodyText": "Please add JavaDocs to explain preload level", "url": "https://github.com/DSpace/DSpace/pull/2792#discussion_r447873851", "createdAt": "2020-06-30T17:54:04Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/content/authority/ChoiceAuthority.java", "diffHunk": "@@ -82,16 +100,16 @@ default boolean isScrollable() {\n         return false;\n     }\n \n-    default boolean hasIdentifier() {\n-        return true;\n+    default Integer getPreloadLevel() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfe8954a6b5f31e03482e1cb4878b7a1c79f0361"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg3Mzk3MQ==", "bodyText": "Please add Javadocs here too", "url": "https://github.com/DSpace/DSpace/pull/2792#discussion_r447873971", "createdAt": "2020-06-30T17:54:15Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/content/authority/ChoiceAuthority.java", "diffHunk": "@@ -82,16 +100,16 @@ default boolean isScrollable() {\n         return false;\n     }\n \n-    default boolean hasIdentifier() {\n-        return true;\n+    default Integer getPreloadLevel() {\n+        return isHierarchical() ? 0 : null;\n     }\n \n-    default public Choice getChoice(String fieldKey, String authKey, String locale) {\n+    default public Choice getChoice(String authKey, String locale) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfe8954a6b5f31e03482e1cb4878b7a1c79f0361"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg3NzM5Mw==", "bodyText": "Could we add a description to this JavaDocs?  I'm not sure I know what a \"Parent Choice\" is....maybe the parent in the hierarchy?", "url": "https://github.com/DSpace/DSpace/pull/2792#discussion_r447877393", "createdAt": "2020-06-30T17:59:52Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/content/authority/service/ChoiceAuthorityService.java", "diffHunk": "@@ -173,4 +172,47 @@ public Choices getBestMatch(String fieldKey, String query, Collection collection\n      */\n     public void clearCache();\n \n+    /**\n+     * Should we store the authority key (if any) for such field key and collection?\n+     * \n+     * @param fieldKey   single string identifying metadata field\n+     * @param collection Collection owner of Item or where the item is submitted to\n+     * @return true if the configuration allows to store the authority value\n+     */\n+    public boolean storeAuthority(String fieldKey, Collection collection);\n+\n+    /**\n+     * Wrapper that calls getChoicesByParent method of the plugin.\n+     *\n+     * @param authorityName authority name\n+     * @param parentId      parent Id\n+     * @param start         choice at which to start, 0 is first.\n+     * @param limit         maximum number of choices to return, 0 for no limit.\n+     * @param locale        explicit localization key if available, or null\n+     * @return a Choices object (never null).\n+     * @see org.dspace.content.authority.ChoiceAuthority#getChoicesByParent(java.lang.String, java.lang.String,\n+     *  int, int, java.lang.String)\n+     */\n+    public Choices getChoicesByParent(String authorityName, String parentId, int start, int limit, String locale);\n+\n+    /**\n+     * Wrapper that calls getTopChoices method of the plugin.\n+     *\n+     * @param authorityName authority name\n+     * @param start         choice at which to start, 0 is first.\n+     * @param limit         maximum number of choices to return, 0 for no limit.\n+     * @param locale        explicit localization key if available, or null\n+     * @return a Choices object (never null).\n+     * @see org.dspace.content.authority.ChoiceAuthority#getTopChoices(java.lang.String, int, int, java.lang.String)\n+     */\n+    public Choices getTopChoices(String authorityName, int start, int limit, String locale);\n+\n+    /**\n+     *\n+     * @param authorityName authority name\n+     * @param vocabularyId  child id\n+     * @param locale        explicit localization key if available, or null\n+     * @return the parent Choice object if any\n+     */\n+    public Choice getParentChoice(String authorityName, String vocabularyId, String locale);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfe8954a6b5f31e03482e1cb4878b7a1c79f0361"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg3OTIwMA==", "bodyText": "Please add JavaDocs here too", "url": "https://github.com/DSpace/DSpace/pull/2792#discussion_r447879200", "createdAt": "2020-06-30T18:02:55Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/content/authority/HierarchicalAuthority.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.content.authority;\n+\n+/**\n+ * Plugin interface that supplies an authority control mechanism for\n+ * one metadata field.\n+ *\n+ * @author Larry Stone\n+ * @see ChoiceAuthority\n+ */\n+public interface HierarchicalAuthority extends ChoiceAuthority {\n+\n+    /**\n+     * Get all values from the authority that match the preferred value.\n+     * Note that the offering was entered by the user and may contain\n+     * mixed/incorrect case, whitespace, etc so the plugin should be careful\n+     * to clean up user data before making comparisons.\n+     *\n+     * Value of a \"Name\" field will be in canonical DSpace person name format,\n+     * which is \"Lastname, Firstname(s)\", e.g. \"Smith, John Q.\".\n+     *\n+     * Some authorities with a small set of values may simply return the whole\n+     * set for any sample value, although it's a good idea to set the\n+     * defaultSelected index in the Choices instance to the choice, if any,\n+     * that matches the value.\n+     *\n+     * @param authorityName  authority name\n+     * @param start          choice at which to start, 0 is first.\n+     * @param limit          maximum number of choices to return, 0 for no limit.\n+     * @param locale         explicit localization key if available, or null\n+     * @return a Choices object (never null).\n+     */\n+    public Choices getTopChoices(String authorityName, int start, int limit, String locale);\n+\n+    /**\n+     * Get all values from the authority that match the preferred value.\n+     * Note that the offering was entered by the user and may contain\n+     * mixed/incorrect case, whitespace, etc so the plugin should be careful\n+     * to clean up user data before making comparisons.\n+     *\n+     * Value of a \"Name\" field will be in canonical DSpace person name format,\n+     * which is \"Lastname, Firstname(s)\", e.g. \"Smith, John Q.\".\n+     *\n+     * Some authorities with a small set of values may simply return the whole\n+     * set for any sample value, although it's a good idea to set the\n+     * defaultSelected index in the Choices instance to the choice, if any,\n+     * that matches the value.\n+     *\n+     * @param authorityName  authority name\n+     * @param parentId       user's value to match\n+     * @param start          choice at which to start, 0 is first.\n+     * @param limit          maximum number of choices to return, 0 for no limit.\n+     * @param locale         explicit localization key if available, or null\n+     * @return a Choices object (never null).\n+     */\n+    public Choices getChoicesByParent(String authorityName, String parentId, int start, int limit, String locale);\n+\n+    /**\n+     *\n+     * @param authorityName  authority name\n+     * @param vocabularyId   user's value to match\n+     * @param locale         explicit localization key if available, or null\n+     * @return a Choice object\n+     */\n+    public Choice getParentChoice(String authorityName, String vocabularyId, String locale);\n+\n+    public Integer getPreloadLevel();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfe8954a6b5f31e03482e1cb4878b7a1c79f0361"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg3OTY4NA==", "bodyText": "Can you add a description to these JavaDocs.  I realize this is likely just returning the parent choice of the given entry, but it'd be nice to add that to the description.", "url": "https://github.com/DSpace/DSpace/pull/2792#discussion_r447879684", "createdAt": "2020-06-30T18:03:45Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/content/authority/HierarchicalAuthority.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.content.authority;\n+\n+/**\n+ * Plugin interface that supplies an authority control mechanism for\n+ * one metadata field.\n+ *\n+ * @author Larry Stone\n+ * @see ChoiceAuthority\n+ */\n+public interface HierarchicalAuthority extends ChoiceAuthority {\n+\n+    /**\n+     * Get all values from the authority that match the preferred value.\n+     * Note that the offering was entered by the user and may contain\n+     * mixed/incorrect case, whitespace, etc so the plugin should be careful\n+     * to clean up user data before making comparisons.\n+     *\n+     * Value of a \"Name\" field will be in canonical DSpace person name format,\n+     * which is \"Lastname, Firstname(s)\", e.g. \"Smith, John Q.\".\n+     *\n+     * Some authorities with a small set of values may simply return the whole\n+     * set for any sample value, although it's a good idea to set the\n+     * defaultSelected index in the Choices instance to the choice, if any,\n+     * that matches the value.\n+     *\n+     * @param authorityName  authority name\n+     * @param start          choice at which to start, 0 is first.\n+     * @param limit          maximum number of choices to return, 0 for no limit.\n+     * @param locale         explicit localization key if available, or null\n+     * @return a Choices object (never null).\n+     */\n+    public Choices getTopChoices(String authorityName, int start, int limit, String locale);\n+\n+    /**\n+     * Get all values from the authority that match the preferred value.\n+     * Note that the offering was entered by the user and may contain\n+     * mixed/incorrect case, whitespace, etc so the plugin should be careful\n+     * to clean up user data before making comparisons.\n+     *\n+     * Value of a \"Name\" field will be in canonical DSpace person name format,\n+     * which is \"Lastname, Firstname(s)\", e.g. \"Smith, John Q.\".\n+     *\n+     * Some authorities with a small set of values may simply return the whole\n+     * set for any sample value, although it's a good idea to set the\n+     * defaultSelected index in the Choices instance to the choice, if any,\n+     * that matches the value.\n+     *\n+     * @param authorityName  authority name\n+     * @param parentId       user's value to match\n+     * @param start          choice at which to start, 0 is first.\n+     * @param limit          maximum number of choices to return, 0 for no limit.\n+     * @param locale         explicit localization key if available, or null\n+     * @return a Choices object (never null).\n+     */\n+    public Choices getChoicesByParent(String authorityName, String parentId, int start, int limit, String locale);\n+\n+    /**\n+     *\n+     * @param authorityName  authority name\n+     * @param vocabularyId   user's value to match\n+     * @param locale         explicit localization key if available, or null\n+     * @return a Choice object\n+     */\n+    public Choice getParentChoice(String authorityName, String vocabularyId, String locale);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfe8954a6b5f31e03482e1cb4878b7a1c79f0361"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg4MDA0OA==", "bodyText": "Again, please add a description to this JavaDocs", "url": "https://github.com/DSpace/DSpace/pull/2792#discussion_r447880048", "createdAt": "2020-06-30T18:04:23Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/content/authority/service/ChoiceAuthorityService.java", "diffHunk": "@@ -173,4 +172,47 @@ public Choices getBestMatch(String fieldKey, String query, Collection collection\n      */\n     public void clearCache();\n \n+    /**\n+     * Should we store the authority key (if any) for such field key and collection?\n+     * \n+     * @param fieldKey   single string identifying metadata field\n+     * @param collection Collection owner of Item or where the item is submitted to\n+     * @return true if the configuration allows to store the authority value\n+     */\n+    public boolean storeAuthority(String fieldKey, Collection collection);\n+\n+    /**\n+     * Wrapper that calls getChoicesByParent method of the plugin.\n+     *\n+     * @param authorityName authority name\n+     * @param parentId      parent Id\n+     * @param start         choice at which to start, 0 is first.\n+     * @param limit         maximum number of choices to return, 0 for no limit.\n+     * @param locale        explicit localization key if available, or null\n+     * @return a Choices object (never null).\n+     * @see org.dspace.content.authority.ChoiceAuthority#getChoicesByParent(java.lang.String, java.lang.String,\n+     *  int, int, java.lang.String)\n+     */\n+    public Choices getChoicesByParent(String authorityName, String parentId, int start, int limit, String locale);\n+\n+    /**\n+     * Wrapper that calls getTopChoices method of the plugin.\n+     *\n+     * @param authorityName authority name\n+     * @param start         choice at which to start, 0 is first.\n+     * @param limit         maximum number of choices to return, 0 for no limit.\n+     * @param locale        explicit localization key if available, or null\n+     * @return a Choices object (never null).\n+     * @see org.dspace.content.authority.ChoiceAuthority#getTopChoices(java.lang.String, int, int, java.lang.String)\n+     */\n+    public Choices getTopChoices(String authorityName, int start, int limit, String locale);\n+\n+    /**\n+     *\n+     * @param authorityName authority name\n+     * @param vocabularyId  child id\n+     * @param locale        explicit localization key if available, or null\n+     * @return the parent Choice object if any\n+     */\n+    public Choice getParentChoice(String authorityName, String vocabularyId, String locale);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfe8954a6b5f31e03482e1cb4878b7a1c79f0361"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg4MjQ5Nw==", "bodyText": "Please add JavaDocs to this new method", "url": "https://github.com/DSpace/DSpace/pull/2792#discussion_r447882497", "createdAt": "2020-06-30T18:08:46Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/utils/AuthorityUtils.java", "diffHunk": "@@ -62,9 +64,33 @@ public String getPresentation(String schema, String element, String qualifier) {\n      * @param projection the name of the projection to use, or {@code null}.\n      * @return\n      */\n-    public AuthorityEntryRest convertEntry(Choice choice, String authorityName, Projection projection) {\n-        AuthorityEntryRest entry = converter.toRest(choice, projection);\n-        entry.setAuthorityName(authorityName);\n+    public VocabularyEntryDetailsRest convertEntryDetails(Choice choice, String authorityName,\n+           boolean isHierarchical, Projection projection) {\n+        if (choice == null) {\n+            return null;\n+        }\n+        VocabularyEntryDetailsRest entry = converter.toRest(choice, projection);\n+        entry.setVocabularyName(authorityName);\n+        entry.setId(authorityName + \":\" + entry.getId());\n+        entry.setInHierarchicalVocabulary(isHierarchical);\n+        return entry;\n+    }\n+\n+    public VocabularyEntryRest convertEntry(Choice choice, String authorityName, boolean storeAuthority,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfe8954a6b5f31e03482e1cb4878b7a1c79f0361"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6333fdc499e73c23da778a51edac27d00be4ccda", "author": {"user": {"login": "abollini", "name": "Andrea Bollini"}}, "url": "https://github.com/DSpace/DSpace/commit/6333fdc499e73c23da778a51edac27d00be4ccda", "committedDate": "2020-06-30T19:43:57Z", "message": "Add test to check links in the vocabulary entry details and relative fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4c98b4742309511eb96b2ed844a928508ba7dc0", "author": {"user": {"login": "atarix83", "name": "Giuseppe"}}, "url": "https://github.com/DSpace/DSpace/commit/e4c98b4742309511eb96b2ed844a928508ba7dc0", "committedDate": "2020-07-01T19:34:09Z", "message": "Fixed issue with DSpaceControlledVocabulary getBestMatch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a0844429a8704826e4bd7d2c2454120b5765d9a", "author": {"user": {"login": "abollini", "name": "Andrea Bollini"}}, "url": "https://github.com/DSpace/DSpace/commit/5a0844429a8704826e4bd7d2c2454120b5765d9a", "committedDate": "2020-07-01T21:12:34Z", "message": "Add missing javadocs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18bc3e1fcba23d00c3d113e7eb085d12f59d40ad", "author": {"user": {"login": "abollini", "name": "Andrea Bollini"}}, "url": "https://github.com/DSpace/DSpace/commit/18bc3e1fcba23d00c3d113e7eb085d12f59d40ad", "committedDate": "2020-07-02T17:54:37Z", "message": "Refactor the ChoiceAuthority to remove the unnecessary dependency from the field and collection"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "675c975d2940fe48c15c71044b108668c5a86ea1", "author": {"user": {"login": "abollini", "name": "Andrea Bollini"}}, "url": "https://github.com/DSpace/DSpace/commit/675c975d2940fe48c15c71044b108668c5a86ea1", "committedDate": "2020-07-02T19:11:56Z", "message": "Use a more explicit name for the storeAuthorityInMetadata method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0f1991200150232e708cfbdeaf6ff9cc8d89c82", "author": {"user": {"login": "abollini", "name": "Andrea Bollini"}}, "url": "https://github.com/DSpace/DSpace/commit/e0f1991200150232e708cfbdeaf6ff9cc8d89c82", "committedDate": "2020-07-09T11:28:14Z", "message": "Merge pull request #157 from 4Science/vocabulary_withoutparams\n\nRefactor the ChoiceAuthority to remove the unnecessary dependency from the field and collection"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MDI5MTYy", "url": "https://github.com/DSpace/DSpace/pull/2792#pullrequestreview-448029162", "createdAt": "2020-07-14T11:42:39Z", "commit": {"oid": "cfe8954a6b5f31e03482e1cb4878b7a1c79f0361"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMTo0MjozOVrOGxQAgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDowNjo0MFrOGxVTBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDI5NTY4Mg==", "bodyText": "A public constructor needs JavaDocs", "url": "https://github.com/DSpace/DSpace/pull/2792#discussion_r454295682", "createdAt": "2020-07-14T11:42:39Z", "author": {"login": "benbosman"}, "path": "dspace-api/src/main/java/org/dspace/content/authority/Choice.java", "diffHunk": "@@ -50,4 +55,11 @@ public Choice(String authority, String label, String value, Map<String, String>\n         this.value = value;\n         this.extras = extras;\n     }\n+\n+    public Choice(String authority, String label, String value, boolean selectable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfe8954a6b5f31e03482e1cb4878b7a1c79f0361"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDMwMzM1NQ==", "bodyText": "Can you add a message, otherwise the stack trace is lost", "url": "https://github.com/DSpace/DSpace/pull/2792#discussion_r454303355", "createdAt": "2020-07-14T11:58:22Z", "author": {"login": "benbosman"}, "path": "dspace-api/src/main/java/org/dspace/content/authority/ChoiceAuthorityServiceImpl.java", "diffHunk": "@@ -249,68 +301,89 @@ private void loadChoiceAuthorityConfigurations() {\n                     \"Skipping invalid configuration for \" + key + \" because named plugin not found: \" + authorityName);\n                 continue;\n             }\n-            if (!authorities.containsKey(authorityName)) {\n-                controller.put(fkey, ma);\n-                authorities.put(authorityName, fkey);\n+\n+            controller.put(fkey, ma);\n+            List<String> fkeys;\n+            if (authorities.containsKey(authorityName)) {\n+                fkeys = authorities.get(authorityName);\n             } else {\n-                log.warn(\n-                    \"Skipping invalid configuration for \" + key + \" because plugin is alredy in use: \" +\n-                        authorityName + \" used by \" + authorities\n-                        .get(authorityName));\n-                continue;\n+                fkeys = new ArrayList<String>();\n             }\n-\n+            fkeys.add(fkey);\n+            authorities.put(authorityName, fkeys);\n             log.debug(\"Choice Control: For field=\" + fkey + \", Plugin=\" + ma);\n         }\n         autoRegisterChoiceAuthorityFromInputReader();\n     }\n \n     private void autoRegisterChoiceAuthorityFromInputReader() {\n         try {\n+            List<SubmissionConfig> submissionConfigs = itemSubmissionConfigReader\n+                    .getAllSubmissionConfigs(Integer.MAX_VALUE, 0);\n             DCInputsReader dcInputsReader = new DCInputsReader();\n-            for (DCInputSet dcinputSet : dcInputsReader.getAllInputs(Integer.MAX_VALUE, 0)) {\n-                DCInput[][] dcinputs = dcinputSet.getFields();\n-                for (DCInput[] dcrows : dcinputs) {\n-                    for (DCInput dcinput : dcrows) {\n-                        if (StringUtils.isNotBlank(dcinput.getPairsType())\n-                            || StringUtils.isNotBlank(dcinput.getVocabulary())) {\n-                            String authorityName = dcinput.getPairsType();\n-                            if (StringUtils.isBlank(authorityName)) {\n-                                authorityName = dcinput.getVocabulary();\n-                            }\n-                            if (!StringUtils.equals(dcinput.getInputType(), \"qualdrop_value\")) {\n-                                String fieldKey = makeFieldKey(dcinput.getSchema(), dcinput.getElement(),\n-                                                               dcinput.getQualifier());\n-                                ChoiceAuthority ca = controller.get(authorityName);\n-                                if (ca == null) {\n-                                    InputFormSelfRegisterWrapperAuthority ifa = new\n-                                        InputFormSelfRegisterWrapperAuthority();\n-                                    if (controller.containsKey(fieldKey)) {\n-                                        ifa = (InputFormSelfRegisterWrapperAuthority) controller.get(fieldKey);\n+\n+            for (SubmissionConfig subCfg : submissionConfigs) {\n+                String submissionName = subCfg.getSubmissionName();\n+                List<DCInputSet> inputsBySubmissionName = dcInputsReader.getInputsBySubmissionName(submissionName);\n+                for (DCInputSet dcinputSet : inputsBySubmissionName) {\n+                    DCInput[][] dcinputs = dcinputSet.getFields();\n+                    for (DCInput[] dcrows : dcinputs) {\n+                        for (DCInput dcinput : dcrows) {\n+                            if (StringUtils.isNotBlank(dcinput.getPairsType())\n+                                || StringUtils.isNotBlank(dcinput.getVocabulary())) {\n+                                String authorityName = dcinput.getPairsType();\n+                                if (StringUtils.isBlank(authorityName)) {\n+                                    authorityName = dcinput.getVocabulary();\n+                                }\n+                                if (!StringUtils.equals(dcinput.getInputType(), \"qualdrop_value\")) {\n+                                    String fieldKey = makeFieldKey(dcinput.getSchema(), dcinput.getElement(),\n+                                                                   dcinput.getQualifier());\n+                                    ChoiceAuthority ca = controller.get(authorityName);\n+                                    if (ca == null) {\n+                                        ca = (ChoiceAuthority) pluginService\n+                                            .getNamedPlugin(ChoiceAuthority.class, authorityName);\n+                                        if (ca == null) {\n+                                            throw new IllegalStateException(\"Invalid configuration for \" + fieldKey\n+                                                    + \" in submission definition \" + submissionName\n+                                                    + \", form definition \" + dcinputSet.getFormName()\n+                                                    + \" no named plugin found: \" + authorityName);\n+                                        }\n                                     }\n \n-                                    ChoiceAuthority ma = (ChoiceAuthority) pluginService\n-                                        .getNamedPlugin(ChoiceAuthority.class, authorityName);\n-                                    if (ma == null) {\n-                                        log.warn(\"Skipping invalid configuration for \" + fieldKey\n-                                                     + \" because named plugin not found: \" + authorityName);\n-                                        continue;\n+                                    Map<String, ChoiceAuthority> definition2authority;\n+                                    if (controllerFormDefinitions.containsKey(fieldKey)) {\n+                                        definition2authority = controllerFormDefinitions.get(fieldKey);\n+                                    } else {\n+                                        definition2authority = new HashMap<String, ChoiceAuthority>();\n+                                    }\n+                                    definition2authority.put(submissionName, ca);\n+                                    controllerFormDefinitions.put(fieldKey, definition2authority);\n+\n+                                    Map<String, List<String>> authorityName2definitions;\n+                                    if (authoritiesFormDefinitions.containsKey(authorityName)) {\n+                                        authorityName2definitions = authoritiesFormDefinitions.get(authorityName);\n+                                    } else {\n+                                        authorityName2definitions = new HashMap<String, List<String>>();\n                                     }\n-                                    ifa.getDelegates().put(dcinputSet.getFormName(), ma);\n-                                    controller.put(fieldKey, ifa);\n-                                }\n \n-                                if (!authorities.containsKey(authorityName)) {\n-                                    authorities.put(authorityName, fieldKey);\n+                                    List<String> fields;\n+                                    if (authorityName2definitions.containsKey(submissionName)) {\n+                                        fields = authorityName2definitions.get(submissionName);\n+                                    } else {\n+                                        fields = new ArrayList<String>();\n+                                    }\n+                                    fields.add(fieldKey);\n+                                    authorityName2definitions.put(submissionName, fields);\n+                                    authoritiesFormDefinitions.put(authorityName, authorityName2definitions);\n                                 }\n-\n                             }\n                         }\n                     }\n                 }\n             }\n         } catch (DCInputsReaderException e) {\n-            throw new IllegalStateException(e.getMessage(), e);\n+            // the system is in an illegal state as the submission definition is not valid\n+            throw new IllegalStateException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfe8954a6b5f31e03482e1cb4878b7a1c79f0361"}, "originalPosition": 374}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDMwNTQwMw==", "bodyText": "This method is implemented in a way that makes it hard to read\nCan you split it in sub methods (with a meaningful name) and add some inline comments", "url": "https://github.com/DSpace/DSpace/pull/2792#discussion_r454305403", "createdAt": "2020-07-14T12:02:19Z", "author": {"login": "benbosman"}, "path": "dspace-api/src/main/java/org/dspace/content/authority/ChoiceAuthorityServiceImpl.java", "diffHunk": "@@ -249,68 +301,89 @@ private void loadChoiceAuthorityConfigurations() {\n                     \"Skipping invalid configuration for \" + key + \" because named plugin not found: \" + authorityName);\n                 continue;\n             }\n-            if (!authorities.containsKey(authorityName)) {\n-                controller.put(fkey, ma);\n-                authorities.put(authorityName, fkey);\n+\n+            controller.put(fkey, ma);\n+            List<String> fkeys;\n+            if (authorities.containsKey(authorityName)) {\n+                fkeys = authorities.get(authorityName);\n             } else {\n-                log.warn(\n-                    \"Skipping invalid configuration for \" + key + \" because plugin is alredy in use: \" +\n-                        authorityName + \" used by \" + authorities\n-                        .get(authorityName));\n-                continue;\n+                fkeys = new ArrayList<String>();\n             }\n-\n+            fkeys.add(fkey);\n+            authorities.put(authorityName, fkeys);\n             log.debug(\"Choice Control: For field=\" + fkey + \", Plugin=\" + ma);\n         }\n         autoRegisterChoiceAuthorityFromInputReader();\n     }\n \n     private void autoRegisterChoiceAuthorityFromInputReader() {\n         try {\n+            List<SubmissionConfig> submissionConfigs = itemSubmissionConfigReader", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfe8954a6b5f31e03482e1cb4878b7a1c79f0361"}, "originalPosition": 277}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM1Mjk5MA==", "bodyText": "When using &embed=children this is failing", "url": "https://github.com/DSpace/DSpace/pull/2792#discussion_r454352990", "createdAt": "2020-07-14T13:24:26Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/VocabularyEntryDetailsChildrenLinkRepository.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.dspace.app.rest.exception.LinkNotFoundException;\n+import org.dspace.app.rest.model.VocabularyEntryDetailsRest;\n+import org.dspace.app.rest.model.VocabularyRest;\n+import org.dspace.app.rest.projection.Projection;\n+import org.dspace.app.rest.utils.AuthorityUtils;\n+import org.dspace.content.authority.Choice;\n+import org.dspace.content.authority.ChoiceAuthority;\n+import org.dspace.content.authority.Choices;\n+import org.dspace.content.authority.service.ChoiceAuthorityService;\n+import org.dspace.core.Context;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageImpl;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Link repository to expose the parent of a vocabulary entry details in an hierarchical vocabulary\n+ *\n+ * @author Mykhaylo Boychuk (4Science.it)\n+ */\n+@Component(VocabularyRest.CATEGORY + \".\" + VocabularyEntryDetailsRest.NAME + \".\" + VocabularyEntryDetailsRest.CHILDREN)\n+public class VocabularyEntryDetailsChildrenLinkRepository extends AbstractDSpaceRestRepository\n+    implements LinkRestRepository {\n+\n+    @Autowired\n+    private ChoiceAuthorityService choiceAuthorityService;\n+\n+    @Autowired\n+    private AuthorityUtils authorityUtils;\n+\n+    @PreAuthorize(\"hasAuthority('AUTHENTICATED')\")\n+    public Page<VocabularyEntryDetailsRest> getChildren(@Nullable HttpServletRequest request, String name,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfe8954a6b5f31e03482e1cb4878b7a1c79f0361"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM1NzkxOQ==", "bodyText": "Can you add a link to /server/api/submission/vocabularyEntryDetails/search in the main endpoint. /server/api/submission/vocabularyEntryDetails is not supported", "url": "https://github.com/DSpace/DSpace/pull/2792#discussion_r454357919", "createdAt": "2020-07-14T13:31:53Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/VocabularyEntryDetailsRestRepository.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.dspace.app.rest.Parameter;\n+import org.dspace.app.rest.SearchRestMethod;\n+import org.dspace.app.rest.exception.LinkNotFoundException;\n+import org.dspace.app.rest.exception.RepositoryMethodNotImplementedException;\n+import org.dspace.app.rest.model.ResourcePolicyRest;\n+import org.dspace.app.rest.model.VocabularyEntryDetailsRest;\n+import org.dspace.app.rest.model.VocabularyRest;\n+import org.dspace.app.rest.utils.AuthorityUtils;\n+import org.dspace.content.authority.Choice;\n+import org.dspace.content.authority.ChoiceAuthority;\n+import org.dspace.content.authority.Choices;\n+import org.dspace.content.authority.service.ChoiceAuthorityService;\n+import org.dspace.core.Context;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageImpl;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Controller for exposition of vocabularies entry details for the submission\n+ *\n+ * @author Andrea Bollini (andrea.bollini at 4science.it)\n+ */\n+@Component(VocabularyRest.CATEGORY + \".\" + VocabularyEntryDetailsRest.NAME)\n+public class VocabularyEntryDetailsRestRepository extends DSpaceRestRepository<VocabularyEntryDetailsRest, String> {\n+\n+    @Autowired\n+    private ChoiceAuthorityService cas;\n+\n+    @Autowired\n+    private AuthorityUtils authorityUtils;\n+\n+    @PreAuthorize(\"hasAuthority('AUTHENTICATED')\")\n+    @Override\n+    public Page<VocabularyEntryDetailsRest> findAll(Context context, Pageable pageable) {\n+        throw new RepositoryMethodNotImplementedException(ResourcePolicyRest.NAME, \"findAll\");\n+    }\n+\n+    @PreAuthorize(\"hasAuthority('AUTHENTICATED')\")\n+    @Override\n+    public VocabularyEntryDetailsRest findOne(Context context, String name) {\n+        String[] parts = StringUtils.split(name, \":\", 2);\n+        if (parts.length != 2) {\n+            return null;\n+        }\n+        String vocabularyName = parts[0];\n+        String vocabularyId = parts[1];\n+        ChoiceAuthority source = cas.getChoiceAuthorityByAuthorityName(vocabularyName);\n+        Choice choice = source.getChoice(vocabularyId, context.getCurrentLocale().toString());\n+        return authorityUtils.convertEntryDetails(choice, vocabularyName, source.isHierarchical(),\n+                utils.obtainProjection());\n+    }\n+\n+    @SearchRestMethod(name = \"top\")\n+    @PreAuthorize(\"hasAuthority('AUTHENTICATED')\")\n+    public Page<VocabularyEntryDetailsRest> findAllTop(@Parameter(value = \"vocabulary\", required = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfe8954a6b5f31e03482e1cb4878b7a1c79f0361"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM1ODM4MA==", "bodyText": "Also, when testing this feature, I noticed the top elements have parents. That doesn't sound logical to me", "url": "https://github.com/DSpace/DSpace/pull/2792#discussion_r454358380", "createdAt": "2020-07-14T13:32:37Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/VocabularyEntryDetailsRestRepository.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.dspace.app.rest.Parameter;\n+import org.dspace.app.rest.SearchRestMethod;\n+import org.dspace.app.rest.exception.LinkNotFoundException;\n+import org.dspace.app.rest.exception.RepositoryMethodNotImplementedException;\n+import org.dspace.app.rest.model.ResourcePolicyRest;\n+import org.dspace.app.rest.model.VocabularyEntryDetailsRest;\n+import org.dspace.app.rest.model.VocabularyRest;\n+import org.dspace.app.rest.utils.AuthorityUtils;\n+import org.dspace.content.authority.Choice;\n+import org.dspace.content.authority.ChoiceAuthority;\n+import org.dspace.content.authority.Choices;\n+import org.dspace.content.authority.service.ChoiceAuthorityService;\n+import org.dspace.core.Context;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageImpl;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Controller for exposition of vocabularies entry details for the submission\n+ *\n+ * @author Andrea Bollini (andrea.bollini at 4science.it)\n+ */\n+@Component(VocabularyRest.CATEGORY + \".\" + VocabularyEntryDetailsRest.NAME)\n+public class VocabularyEntryDetailsRestRepository extends DSpaceRestRepository<VocabularyEntryDetailsRest, String> {\n+\n+    @Autowired\n+    private ChoiceAuthorityService cas;\n+\n+    @Autowired\n+    private AuthorityUtils authorityUtils;\n+\n+    @PreAuthorize(\"hasAuthority('AUTHENTICATED')\")\n+    @Override\n+    public Page<VocabularyEntryDetailsRest> findAll(Context context, Pageable pageable) {\n+        throw new RepositoryMethodNotImplementedException(ResourcePolicyRest.NAME, \"findAll\");\n+    }\n+\n+    @PreAuthorize(\"hasAuthority('AUTHENTICATED')\")\n+    @Override\n+    public VocabularyEntryDetailsRest findOne(Context context, String name) {\n+        String[] parts = StringUtils.split(name, \":\", 2);\n+        if (parts.length != 2) {\n+            return null;\n+        }\n+        String vocabularyName = parts[0];\n+        String vocabularyId = parts[1];\n+        ChoiceAuthority source = cas.getChoiceAuthorityByAuthorityName(vocabularyName);\n+        Choice choice = source.getChoice(vocabularyId, context.getCurrentLocale().toString());\n+        return authorityUtils.convertEntryDetails(choice, vocabularyName, source.isHierarchical(),\n+                utils.obtainProjection());\n+    }\n+\n+    @SearchRestMethod(name = \"top\")\n+    @PreAuthorize(\"hasAuthority('AUTHENTICATED')\")\n+    public Page<VocabularyEntryDetailsRest> findAllTop(@Parameter(value = \"vocabulary\", required = true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM1NzkxOQ=="}, "originalCommit": {"oid": "cfe8954a6b5f31e03482e1cb4878b7a1c79f0361"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM2MTc1Mw==", "bodyText": "Is this supposed to say they're mutually exclusive?", "url": "https://github.com/DSpace/DSpace/pull/2792#discussion_r454361753", "createdAt": "2020-07-14T13:37:46Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/VocabularyEntryLinkRepository.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import javax.annotation.Nullable;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.dspace.app.rest.exception.UnprocessableEntityException;\n+import org.dspace.app.rest.model.VocabularyEntryRest;\n+import org.dspace.app.rest.model.VocabularyRest;\n+import org.dspace.app.rest.projection.Projection;\n+import org.dspace.app.rest.utils.AuthorityUtils;\n+import org.dspace.content.Collection;\n+import org.dspace.content.authority.Choice;\n+import org.dspace.content.authority.Choices;\n+import org.dspace.content.authority.service.ChoiceAuthorityService;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Context;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageImpl;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Controller for exposition of authority services\n+ *\n+ * @author Luigi Andrea Pascarelli (luigiandrea.pascarelli at 4science.it)\n+ */\n+@Component(VocabularyRest.CATEGORY + \".\" + VocabularyRest.NAME + \".\" + VocabularyRest.ENTRIES)\n+public class VocabularyEntryLinkRepository extends AbstractDSpaceRestRepository\n+    implements LinkRestRepository {\n+\n+    @Autowired\n+    private ChoiceAuthorityService cas;\n+\n+    @Autowired\n+    private CollectionService cs;\n+\n+    @Autowired\n+    private AuthorityUtils authorityUtils;\n+\n+    @PreAuthorize(\"hasAuthority('AUTHENTICATED')\")\n+    public Page<VocabularyEntryRest> filter(@Nullable HttpServletRequest request, String name,\n+                                          @Nullable Pageable optionalPageable, Projection projection) {\n+        Context context = obtainContext();\n+        String exact = request == null ? null : request.getParameter(\"exact\");\n+        String filter = request == null ? null : request.getParameter(\"filter\");\n+        String entryID = request == null ? null : request.getParameter(\"entryID\");\n+        String metadata = request == null ? null : request.getParameter(\"metadata\");\n+        String uuidCollect\u00econ = request == null ? null : request.getParameter(\"collection\");\n+\n+        if (StringUtils.isEmpty(metadata) || StringUtils.isEmpty(uuidCollect\u00econ)) {\n+            throw new IllegalArgumentException(\"the metadata and collection parameters are both required\");\n+        }\n+\n+        if (StringUtils.isNotBlank(filter) && StringUtils.isNotBlank(entryID)) {\n+            throw new IllegalArgumentException(\"required only one of the parameters: filter or entryID\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfe8954a6b5f31e03482e1cb4878b7a1c79f0361"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM2OTcwMg==", "bodyText": "Can you also add a test for an actual authority control, e.g. the solr authority control", "url": "https://github.com/DSpace/DSpace/pull/2792#discussion_r454369702", "createdAt": "2020-07-14T13:48:55Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/SubmissionFormsControllerIT.java", "diffHunk": "@@ -139,6 +139,32 @@ public void findTraditionalPageOneWithNewlyCreatedAccountTest() throws Exception\n                                         \"col-sm-8\",\"dc.publisher\"))));\n     }\n \n+    @Test\n+    public void findFieldWithValuePairsConfig() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfe8954a6b5f31e03482e1cb4878b7a1c79f0361"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM4MjM0Mg==", "bodyText": "If the name contains a /, it seems this is not correctly escaped in the links to this endpoint (e.g. the entry-id in /api/submission/vocabularyEntryDetails/<:vocabulary-name>:<:entry-id> contains the /)", "url": "https://github.com/DSpace/DSpace/pull/2792#discussion_r454382342", "createdAt": "2020-07-14T14:06:40Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/VocabularyEntryDetailsRestRepository.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.dspace.app.rest.Parameter;\n+import org.dspace.app.rest.SearchRestMethod;\n+import org.dspace.app.rest.exception.LinkNotFoundException;\n+import org.dspace.app.rest.exception.RepositoryMethodNotImplementedException;\n+import org.dspace.app.rest.model.ResourcePolicyRest;\n+import org.dspace.app.rest.model.VocabularyEntryDetailsRest;\n+import org.dspace.app.rest.model.VocabularyRest;\n+import org.dspace.app.rest.utils.AuthorityUtils;\n+import org.dspace.content.authority.Choice;\n+import org.dspace.content.authority.ChoiceAuthority;\n+import org.dspace.content.authority.Choices;\n+import org.dspace.content.authority.service.ChoiceAuthorityService;\n+import org.dspace.core.Context;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageImpl;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Controller for exposition of vocabularies entry details for the submission\n+ *\n+ * @author Andrea Bollini (andrea.bollini at 4science.it)\n+ */\n+@Component(VocabularyRest.CATEGORY + \".\" + VocabularyEntryDetailsRest.NAME)\n+public class VocabularyEntryDetailsRestRepository extends DSpaceRestRepository<VocabularyEntryDetailsRest, String> {\n+\n+    @Autowired\n+    private ChoiceAuthorityService cas;\n+\n+    @Autowired\n+    private AuthorityUtils authorityUtils;\n+\n+    @PreAuthorize(\"hasAuthority('AUTHENTICATED')\")\n+    @Override\n+    public Page<VocabularyEntryDetailsRest> findAll(Context context, Pageable pageable) {\n+        throw new RepositoryMethodNotImplementedException(ResourcePolicyRest.NAME, \"findAll\");\n+    }\n+\n+    @PreAuthorize(\"hasAuthority('AUTHENTICATED')\")\n+    @Override\n+    public VocabularyEntryDetailsRest findOne(Context context, String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfe8954a6b5f31e03482e1cb4878b7a1c79f0361"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fd328855a69c711ea48cecaff7c911788dc15ff", "author": {"user": {"login": "abollini", "name": "Andrea Bollini"}}, "url": "https://github.com/DSpace/DSpace/commit/8fd328855a69c711ea48cecaff7c911788dc15ff", "committedDate": "2020-07-17T15:07:20Z", "message": "code cleanup and fix for project in vocabulary entry details"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07ffb5fbad49f724472c3b25cc3cf9cf1b0abb6e", "author": {"user": {"login": "abollini", "name": "Andrea Bollini"}}, "url": "https://github.com/DSpace/DSpace/commit/07ffb5fbad49f724472c3b25cc3cf9cf1b0abb6e", "committedDate": "2020-07-17T17:39:18Z", "message": "Merge branch 'main' of https://github.com/DSpace/DSpace into draft_vocabulary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9863b1c6d53bc3002a3d246bcf40339853a2af4b", "author": {"user": {"login": "abollini", "name": "Andrea Bollini"}}, "url": "https://github.com/DSpace/DSpace/commit/9863b1c6d53bc3002a3d246bcf40339853a2af4b", "committedDate": "2020-07-18T14:07:04Z", "message": "Add link to the vocabularyEntryDetails search methods from the root"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "769dd064d09fb90fe491dab8a397a040bc6ada4f", "author": {"user": {"login": "abollini", "name": "Andrea Bollini"}}, "url": "https://github.com/DSpace/DSpace/commit/769dd064d09fb90fe491dab8a397a040bc6ada4f", "committedDate": "2020-07-18T15:30:20Z", "message": "Add support and test for locales on vocabularies"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "769dd064d09fb90fe491dab8a397a040bc6ada4f", "author": {"user": {"login": "abollini", "name": "Andrea Bollini"}}, "url": "https://github.com/DSpace/DSpace/commit/769dd064d09fb90fe491dab8a397a040bc6ada4f", "committedDate": "2020-07-18T15:30:20Z", "message": "Add support and test for locales on vocabularies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b232def06ed59b9a7c2fcedb077dd1c7def12461", "author": {"user": {"login": "abollini", "name": "Andrea Bollini"}}, "url": "https://github.com/DSpace/DSpace/commit/b232def06ed59b9a7c2fcedb077dd1c7def12461", "committedDate": "2020-07-18T16:26:43Z", "message": "Keep the message rethrowing the exception"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxODc1NjEz", "url": "https://github.com/DSpace/DSpace/pull/2792#pullrequestreview-451875613", "createdAt": "2020-07-20T18:57:46Z", "commit": {"oid": "b232def06ed59b9a7c2fcedb077dd1c7def12461"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NDE2MDQy", "url": "https://github.com/DSpace/DSpace/pull/2792#pullrequestreview-457416042", "createdAt": "2020-07-29T11:03:37Z", "commit": {"oid": "b232def06ed59b9a7c2fcedb077dd1c7def12461"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMTowMzozN1rOG4zeLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMTowMzozN1rOG4zeLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIxNjc0OQ==", "bodyText": "This variable name sounds quite confusing. It seems to be a map from the submission name to the fields (and the authorityName is not the same as the submission name)", "url": "https://github.com/DSpace/DSpace/pull/2792#discussion_r462216749", "createdAt": "2020-07-29T11:03:37Z", "author": {"login": "benbosman"}, "path": "dspace-api/src/main/java/org/dspace/content/authority/ChoiceAuthorityServiceImpl.java", "diffHunk": "@@ -316,75 +319,110 @@ private void loadChoiceAuthorityConfigurations() {\n         autoRegisterChoiceAuthorityFromInputReader();\n     }\n \n+    /**\n+     * This method will register all the authorities that are required due to the\n+     * submission forms configuration. This includes authorities for value pairs and\n+     * xml vocabularies\n+     */\n     private void autoRegisterChoiceAuthorityFromInputReader() {\n         try {\n             List<SubmissionConfig> submissionConfigs = itemSubmissionConfigReader\n                     .getAllSubmissionConfigs(Integer.MAX_VALUE, 0);\n             DCInputsReader dcInputsReader = new DCInputsReader();\n \n+            // loop over all the defined item submission configuration\n             for (SubmissionConfig subCfg : submissionConfigs) {\n                 String submissionName = subCfg.getSubmissionName();\n                 List<DCInputSet> inputsBySubmissionName = dcInputsReader.getInputsBySubmissionName(submissionName);\n+                // loop over the submission forms configuration eventually associated with the submission panel\n                 for (DCInputSet dcinputSet : inputsBySubmissionName) {\n                     DCInput[][] dcinputs = dcinputSet.getFields();\n                     for (DCInput[] dcrows : dcinputs) {\n                         for (DCInput dcinput : dcrows) {\n+                            // for each input in the form check if it is associated with a real value pairs\n+                            // or an xml vocabulary\n+                            String authorityName = null;\n                             if (StringUtils.isNotBlank(dcinput.getPairsType())\n-                                || StringUtils.isNotBlank(dcinput.getVocabulary())) {\n-                                String authorityName = dcinput.getPairsType();\n-                                if (StringUtils.isBlank(authorityName)) {\n-                                    authorityName = dcinput.getVocabulary();\n-                                }\n-                                if (!StringUtils.equals(dcinput.getInputType(), \"qualdrop_value\")) {\n-                                    String fieldKey = makeFieldKey(dcinput.getSchema(), dcinput.getElement(),\n-                                                                   dcinput.getQualifier());\n-                                    ChoiceAuthority ca = controller.get(authorityName);\n-                                    if (ca == null) {\n-                                        ca = (ChoiceAuthority) pluginService\n-                                            .getNamedPlugin(ChoiceAuthority.class, authorityName);\n-                                        if (ca == null) {\n-                                            throw new IllegalStateException(\"Invalid configuration for \" + fieldKey\n-                                                    + \" in submission definition \" + submissionName\n-                                                    + \", form definition \" + dcinputSet.getFormName()\n-                                                    + \" no named plugin found: \" + authorityName);\n-                                        }\n-                                    }\n-\n-                                    Map<String, ChoiceAuthority> definition2authority;\n-                                    if (controllerFormDefinitions.containsKey(fieldKey)) {\n-                                        definition2authority = controllerFormDefinitions.get(fieldKey);\n-                                    } else {\n-                                        definition2authority = new HashMap<String, ChoiceAuthority>();\n-                                    }\n-                                    definition2authority.put(submissionName, ca);\n-                                    controllerFormDefinitions.put(fieldKey, definition2authority);\n-\n-                                    Map<String, List<String>> authorityName2definitions;\n-                                    if (authoritiesFormDefinitions.containsKey(authorityName)) {\n-                                        authorityName2definitions = authoritiesFormDefinitions.get(authorityName);\n-                                    } else {\n-                                        authorityName2definitions = new HashMap<String, List<String>>();\n-                                    }\n+                                    && !StringUtils.equals(dcinput.getInputType(), \"qualdrop_value\")) {\n+                                authorityName = dcinput.getPairsType();\n+                            } else if (StringUtils.isNotBlank(dcinput.getVocabulary())) {\n+                                authorityName = dcinput.getVocabulary();\n+                            }\n \n-                                    List<String> fields;\n-                                    if (authorityName2definitions.containsKey(submissionName)) {\n-                                        fields = authorityName2definitions.get(submissionName);\n-                                    } else {\n-                                        fields = new ArrayList<String>();\n+                            // do we have an authority?\n+                            if (StringUtils.isNotBlank(authorityName)) {\n+                                String fieldKey = makeFieldKey(dcinput.getSchema(), dcinput.getElement(),\n+                                                               dcinput.getQualifier());\n+                                ChoiceAuthority ca = controller.get(authorityName);\n+                                if (ca == null) {\n+                                    ca = (ChoiceAuthority) pluginService\n+                                        .getNamedPlugin(ChoiceAuthority.class, authorityName);\n+                                    if (ca == null) {\n+                                        throw new IllegalStateException(\"Invalid configuration for \" + fieldKey\n+                                                + \" in submission definition \" + submissionName\n+                                                + \", form definition \" + dcinputSet.getFormName()\n+                                                + \" no named plugin found: \" + authorityName);\n                                     }\n-                                    fields.add(fieldKey);\n-                                    authorityName2definitions.put(submissionName, fields);\n-                                    authoritiesFormDefinitions.put(authorityName, authorityName2definitions);\n                                 }\n+\n+                                addAuthorityToFormCacheMap(submissionName, fieldKey, ca);\n+                                addFormDetailsToAuthorityCacheMap(submissionName, authorityName, fieldKey);\n                             }\n                         }\n                     }\n                 }\n             }\n         } catch (DCInputsReaderException e) {\n             // the system is in an illegal state as the submission definition is not valid\n-            throw new IllegalStateException(e);\n+            throw new IllegalStateException(\"Error reading the item submission configuration: \" + e.getMessage(),\n+                    e);\n+        }\n+    }\n+\n+    /**\n+     * Add the form/field to the cache map keeping track of which form/field are\n+     * associated with the specific authority name\n+     * \n+     * @param submissionName the form definition name\n+     * @param authorityName  the name of the authority plugin\n+     * @param fieldKey       the field key that use the authority\n+     */\n+    private void addFormDetailsToAuthorityCacheMap(String submissionName, String authorityName, String fieldKey) {\n+        Map<String, List<String>> authorityName2definitions;\n+        if (authoritiesFormDefinitions.containsKey(authorityName)) {\n+            authorityName2definitions = authoritiesFormDefinitions.get(authorityName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b232def06ed59b9a7c2fcedb077dd1c7def12461"}, "originalPosition": 138}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NDYzMzMy", "url": "https://github.com/DSpace/DSpace/pull/2792#pullrequestreview-457463332", "createdAt": "2020-07-29T12:17:55Z", "commit": {"oid": "b232def06ed59b9a7c2fcedb077dd1c7def12461"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjoxNzo1NlrOG41wYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMjoxNzo1NlrOG41wYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI1NDE3Ng==", "bodyText": "Can you add JavaDocs explaining what values and labels are now?\nIf values is a map, it's not clear what the keys and values of the map are (and similar for labels)", "url": "https://github.com/DSpace/DSpace/pull/2792#discussion_r462254176", "createdAt": "2020-07-29T12:17:56Z", "author": {"login": "benbosman"}, "path": "dspace-api/src/main/java/org/dspace/content/authority/DCInputAuthority.java", "diffHunk": "@@ -44,10 +50,10 @@\n public class DCInputAuthority extends SelfNamedPlugin implements ChoiceAuthority {\n     private static Logger log = org.apache.logging.log4j.LogManager.getLogger(DCInputAuthority.class);\n \n-    private String values[] = null;\n-    private String labels[] = null;\n+    private Map<String, String[]> values = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b232def06ed59b9a7c2fcedb077dd1c7def12461"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NDkzMzcy", "url": "https://github.com/DSpace/DSpace/pull/2792#pullrequestreview-457493372", "createdAt": "2020-07-29T12:57:35Z", "commit": {"oid": "b232def06ed59b9a7c2fcedb077dd1c7def12461"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd6982bb150ac87455b7ae4cb48cc61f36a3ef57", "author": {"user": {"login": "abollini", "name": "Andrea Bollini"}}, "url": "https://github.com/DSpace/DSpace/commit/bd6982bb150ac87455b7ae4cb48cc61f36a3ef57", "committedDate": "2020-07-30T15:53:39Z", "message": "Describe the structure of the map fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed58d44329c67b1810851d9795364c7acbc00d0b", "author": {"user": {"login": "abollini", "name": "Andrea Bollini"}}, "url": "https://github.com/DSpace/DSpace/commit/ed58d44329c67b1810851d9795364c7acbc00d0b", "committedDate": "2020-07-30T16:02:53Z", "message": "Use a more meaningful variable name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e30cbe0eb517550f5e453c9cd2631d091a7459f", "author": {"user": {"login": "ddinuzzo", "name": "Danilo Di Nuzzo"}}, "url": "https://github.com/DSpace/DSpace/commit/5e30cbe0eb517550f5e453c9cd2631d091a7459f", "committedDate": "2020-08-06T08:20:30Z", "message": "Merge branch 'main' into draft_vocabulary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70c861a9e9e88b6a852f04d1ed85022c6bb25bf7", "author": {"user": {"login": "ddinuzzo", "name": "Danilo Di Nuzzo"}}, "url": "https://github.com/DSpace/DSpace/commit/70c861a9e9e88b6a852f04d1ed85022c6bb25bf7", "committedDate": "2020-08-06T08:33:43Z", "message": "fix builder import"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2NTMxMjc3", "url": "https://github.com/DSpace/DSpace/pull/2792#pullrequestreview-486531277", "createdAt": "2020-09-11T07:16:37Z", "commit": {"oid": "70c861a9e9e88b6a852f04d1ed85022c6bb25bf7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1513, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}