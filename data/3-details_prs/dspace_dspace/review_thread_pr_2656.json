{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4NDcwOTU5", "number": 2656, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTo0MzoxN1rODeEEaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTo0OToyN1rODeENCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODUwNTM5OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/model/hateoas/TemplateItemResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTo0MzoxN1rOFnBSMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTo0MzoxN1rOFnBSMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ1OTgyNQ==", "bodyText": "The JavaDocs here are slightly wrong.  This wasn't created by Andrea, and this is the TemplateItem REST HAL Resource", "url": "https://github.com/DSpace/DSpace/pull/2656#discussion_r376459825", "createdAt": "2020-02-07T15:43:17Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/model/hateoas/TemplateItemResource.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.model.hateoas;\n+\n+import org.dspace.app.rest.model.TemplateItemRest;\n+import org.dspace.app.rest.model.hateoas.annotations.RelNameDSpaceResource;\n+import org.dspace.app.rest.utils.Utils;\n+\n+/**\n+ * Item Rest HAL Resource. The HAL Resource wraps the REST Resource\n+ * adding support for the links and embedded resources\n+ *\n+ * @author Andrea Bollini (andrea.bollini at 4science.it)\n+ */\n+@RelNameDSpaceResource(TemplateItemRest.NAME)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8b5139de49c456336467b958ed03fc7ec65f87b"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODUwODI1OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/model/wrapper/TemplateItem.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTo0NDoxNVrOFnBUJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTo0NDoxNVrOFnBUJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2MDMyNA==", "bodyText": "This Class is missing JavaDocs. It should describe what a \"TemplateItem\" is by saying something like \"Represents a Collection's Item Template\"", "url": "https://github.com/DSpace/DSpace/pull/2656#discussion_r376460324", "createdAt": "2020-02-07T15:44:15Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/model/wrapper/TemplateItem.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.model.wrapper;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import org.dspace.content.Collection;\n+import org.dspace.content.Item;\n+import org.dspace.content.MetadataValue;\n+\n+public class TemplateItem {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8b5139de49c456336467b958ed03fc7ec65f87b"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODUxMDk0OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CollectionRestRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTo0NDo1NVrOFnBVug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTo0NDo1NVrOFnBVug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2MDczMA==", "bodyText": "Small change here. Should say \"The created TemplateItem\"", "url": "https://github.com/DSpace/DSpace/pull/2656#discussion_r376460730", "createdAt": "2020-02-07T15:44:55Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CollectionRestRepository.java", "diffHunk": "@@ -257,48 +260,46 @@ public BitstreamRest setLogo(Context context, Collection collection, MultipartFi\n      * @param context\n      * @param collection    The collection for which to make the item\n      * @param inputItemRest The new item\n-     * @return              The created item\n+     * @return The created item", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8b5139de49c456336467b958ed03fc7ec65f87b"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODUxOTY0OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ItemRestRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTo0NzoyMVrOFnBbLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTo0NzoyMVrOFnBbLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2MjEyNw==", "bodyText": "I'd recommend updating this error message slightly to return the ID (as it's more useful to reference the problematic object).  So, something like \"The ID \" + id + \" resolved to a template item\"", "url": "https://github.com/DSpace/DSpace/pull/2656#discussion_r376462127", "createdAt": "2020-02-07T15:47:21Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ItemRestRepository.java", "diffHunk": "@@ -138,14 +140,31 @@ public ItemRest findOne(Context context, UUID id) {\n     @PreAuthorize(\"hasPermission(#id, 'ITEM', #patch)\")\n     protected void patch(Context context, HttpServletRequest request, String apiCategory, String model, UUID id,\n                          Patch patch) throws AuthorizeException, SQLException {\n-        patchDSpaceObject(apiCategory, model, id, patch);\n+\n+        Item item = itemService.find(obtainContext(), id);\n+        if (item == null) {\n+            throw new ResourceNotFoundException(apiCategory + \".\" + model + \" with id: \" + id + \" not found\");\n+        }\n+        if (item.getTemplateItemOf() != null) {\n+            throw new DSpaceBadRequestException(\"The given ID resolved to a template item\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8b5139de49c456336467b958ed03fc7ec65f87b"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODUyMTQ5OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/TemplateItemRestRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTo0Nzo0N1rOFnBcNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTo0Nzo0N1rOFnBcNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2MjM5MA==", "bodyText": "Class needs JavaDocs", "url": "https://github.com/DSpace/DSpace/pull/2656#discussion_r376462390", "createdAt": "2020-02-07T15:47:47Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/TemplateItemRestRepository.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.io.IOException;\n+import java.sql.SQLException;\n+import java.util.UUID;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.converter.JsonPatchConverter;\n+import org.dspace.app.rest.model.ItemRest;\n+import org.dspace.app.rest.model.TemplateItemRest;\n+import org.dspace.app.rest.model.patch.Patch;\n+import org.dspace.app.rest.model.wrapper.TemplateItem;\n+import org.dspace.app.rest.projection.Projection;\n+import org.dspace.app.rest.repository.patch.ItemPatch;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Item;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.core.Context;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.stereotype.Component;\n+\n+@Component(TemplateItemRest.CATEGORY + \".\" + TemplateItemRest.NAME)\n+public class TemplateItemRestRepository extends DSpaceRestRepository<TemplateItemRest, UUID> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8b5139de49c456336467b958ed03fc7ec65f87b"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODUyMjM5OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/TemplateItemRestRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTo0ODowMlrOFnBczA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTo0ODowMlrOFnBczA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2MjU0MA==", "bodyText": "Missing an @Override", "url": "https://github.com/DSpace/DSpace/pull/2656#discussion_r376462540", "createdAt": "2020-02-07T15:48:02Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/TemplateItemRestRepository.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.io.IOException;\n+import java.sql.SQLException;\n+import java.util.UUID;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.converter.JsonPatchConverter;\n+import org.dspace.app.rest.model.ItemRest;\n+import org.dspace.app.rest.model.TemplateItemRest;\n+import org.dspace.app.rest.model.patch.Patch;\n+import org.dspace.app.rest.model.wrapper.TemplateItem;\n+import org.dspace.app.rest.projection.Projection;\n+import org.dspace.app.rest.repository.patch.ItemPatch;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Item;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.core.Context;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.stereotype.Component;\n+\n+@Component(TemplateItemRest.CATEGORY + \".\" + TemplateItemRest.NAME)\n+public class TemplateItemRestRepository extends DSpaceRestRepository<TemplateItemRest, UUID> {\n+\n+    @Autowired\n+    private ItemService itemService;\n+\n+    @Autowired\n+    private ItemRestRepository itemRestRepository;\n+\n+    @Autowired\n+    private ItemPatch itemPatch;\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    public TemplateItemRest findOne(Context context, UUID uuid) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8b5139de49c456336467b958ed03fc7ec65f87b"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODUyMzM1OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/TemplateItemRestRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTo0ODoyMFrOFnBdaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTo0ODoyMFrOFnBdaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2MjY5OQ==", "bodyText": "Again, missing @Override", "url": "https://github.com/DSpace/DSpace/pull/2656#discussion_r376462699", "createdAt": "2020-02-07T15:48:20Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/TemplateItemRestRepository.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.io.IOException;\n+import java.sql.SQLException;\n+import java.util.UUID;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.converter.JsonPatchConverter;\n+import org.dspace.app.rest.model.ItemRest;\n+import org.dspace.app.rest.model.TemplateItemRest;\n+import org.dspace.app.rest.model.patch.Patch;\n+import org.dspace.app.rest.model.wrapper.TemplateItem;\n+import org.dspace.app.rest.projection.Projection;\n+import org.dspace.app.rest.repository.patch.ItemPatch;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Item;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.core.Context;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.stereotype.Component;\n+\n+@Component(TemplateItemRest.CATEGORY + \".\" + TemplateItemRest.NAME)\n+public class TemplateItemRestRepository extends DSpaceRestRepository<TemplateItemRest, UUID> {\n+\n+    @Autowired\n+    private ItemService itemService;\n+\n+    @Autowired\n+    private ItemRestRepository itemRestRepository;\n+\n+    @Autowired\n+    private ItemPatch itemPatch;\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    public TemplateItemRest findOne(Context context, UUID uuid) {\n+        Item item = null;\n+        try {\n+            item = itemService.find(context, uuid);\n+        } catch (SQLException e) {\n+            throw new RuntimeException(e.getMessage(), e);\n+        }\n+        if (item == null) {\n+            return null;\n+        }\n+\n+        try {\n+            return converter.toRest(new TemplateItem(item), Projection.DEFAULT);\n+        } catch (IllegalArgumentException e) {\n+            throw new ResourceNotFoundException(\"The item with id \" + item.getID() + \" is not a template item\");\n+        }\n+    }\n+\n+    public Page<TemplateItemRest> findAll(Context context, Pageable pageable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8b5139de49c456336467b958ed03fc7ec65f87b"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODUyNzQ3OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/TemplateItemRestRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTo0OToyN1rOFnBf_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTo0OToyN1rOFnBf_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2MzM1OQ==", "bodyText": "Again, needs @Override", "url": "https://github.com/DSpace/DSpace/pull/2656#discussion_r376463359", "createdAt": "2020-02-07T15:49:27Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/TemplateItemRestRepository.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.io.IOException;\n+import java.sql.SQLException;\n+import java.util.UUID;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.converter.JsonPatchConverter;\n+import org.dspace.app.rest.model.ItemRest;\n+import org.dspace.app.rest.model.TemplateItemRest;\n+import org.dspace.app.rest.model.patch.Patch;\n+import org.dspace.app.rest.model.wrapper.TemplateItem;\n+import org.dspace.app.rest.projection.Projection;\n+import org.dspace.app.rest.repository.patch.ItemPatch;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Item;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.core.Context;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.stereotype.Component;\n+\n+@Component(TemplateItemRest.CATEGORY + \".\" + TemplateItemRest.NAME)\n+public class TemplateItemRestRepository extends DSpaceRestRepository<TemplateItemRest, UUID> {\n+\n+    @Autowired\n+    private ItemService itemService;\n+\n+    @Autowired\n+    private ItemRestRepository itemRestRepository;\n+\n+    @Autowired\n+    private ItemPatch itemPatch;\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    public TemplateItemRest findOne(Context context, UUID uuid) {\n+        Item item = null;\n+        try {\n+            item = itemService.find(context, uuid);\n+        } catch (SQLException e) {\n+            throw new RuntimeException(e.getMessage(), e);\n+        }\n+        if (item == null) {\n+            return null;\n+        }\n+\n+        try {\n+            return converter.toRest(new TemplateItem(item), Projection.DEFAULT);\n+        } catch (IllegalArgumentException e) {\n+            throw new ResourceNotFoundException(\"The item with id \" + item.getID() + \" is not a template item\");\n+        }\n+    }\n+\n+    public Page<TemplateItemRest> findAll(Context context, Pageable pageable) {\n+        return null;\n+    }\n+\n+    public Class<TemplateItemRest> getDomainClass() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8b5139de49c456336467b958ed03fc7ec65f87b"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1613, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}