{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyNzk0NzU1", "number": 2771, "title": "DS-4504 Performance issues with finding Collections a user can submit to", "bodyText": "References\nhttps://jira.lyrasis.org/browse/DS-4504\nrestContract: DSpace/RestContract#127\nDescription\nIn this PR has been\n\ncreated SolrServiceIndexCollectionSubmittersPlugin to add information in the solr document\nrelated to a collection about which epersons/groups  have ADD permissions on it\nUpdated methods findAuthorizedByCommunity and findAuthorized to use solr query\ncreated some IT to proof that the implementation is robust and work properly also with\ncommunity and collection admins and with a deeper hierarchy\nsmall updates to restContract\n\nChecklist\nThis checklist provides a reminder of what we are going to look for when reviewing your PR. You need not complete this checklist prior to creating your PR (draft PRs are always welcome). If you are unsure about an item in the checklist, don't hesitate to ask. We're here to help!\n\n My PR is small in size (e.g. less than 1,000 lines of code, not including comments & integration tests). Exceptions may be made if previously agreed upon.\n My PR passes Checkstyle validation based on the Code Style Guide\n My PR includes Javadoc for all new (or modified) public methods and classes. It also includes Javadoc for large or complex private methods.\n My PR passes all tests and includes new/updated Unit or Integration Tests for any bug fixes, improvements or new features. A few reminders about what constitutes good tests:\n\nInclude tests for different user types, including: (1) Anonymous user, (2) Logged in user (non-admin), and (3) Administrator.\nInclude tests for known error scenarios and error codes (e.g. 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found, etc)\nFor bug fixes, include a test that reproduces the bug and proves it is fixed. For clarity, it may be useful to provide the test in a separate commit from the bug fix.\n\n\nN/A If my PR includes new, third-party dependencies (in any pom.xml), I've made sure their licenses align with the DSpace BSD License based on the Licensing of Contributions documentation.\nN/A If my PR modifies the REST API, I've linked to the REST Contract page (or open PR) related to this change.", "createdAt": "2020-05-25T15:04:56Z", "url": "https://github.com/DSpace/DSpace/pull/2771", "merged": true, "mergeCommit": {"oid": "69df9b0ec2e92b321c587219738fab4d267d6d56"}, "closed": true, "closedAt": "2020-06-19T16:09:33Z", "author": {"login": "Micheleboychuk"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcj4T8dAH2gAyNDIyNzk0NzU1OjY2OTkyY2ZlMTlmZjA0MjM3ZGVkNTRhZGU2NWY3Y2I0MDVhYTI1OGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsuSS7AFqTQzMzg3NjAwOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "66992cfe19ff04237ded54ade65f7cb405aa258b", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/66992cfe19ff04237ded54ade65f7cb405aa258b", "committedDate": "2020-05-22T20:29:54Z", "message": "added solr plugin to index collection submitters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5139bb881d466cb989f6bebd163d3ef5df202f4e", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/5139bb881d466cb989f6bebd163d3ef5df202f4e", "committedDate": "2020-05-22T20:41:56Z", "message": "updated findAuthorizedByCommunity and findAuthorized with Solr query"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22a34ff3683460704dfc1512247fd37f2afe975a", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/22a34ff3683460704dfc1512247fd37f2afe975a", "committedDate": "2020-05-25T12:36:04Z", "message": "added ITs for methods findAuthorizedByCommunity and findAuthorized"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41b91ea5b1857657704d2943957e47b6e96a513e", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/41b91ea5b1857657704d2943957e47b6e96a513e", "committedDate": "2020-05-25T14:21:34Z", "message": "Merge branch 'master' into DS-4504_UpdatePerformanceFindingCollections"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMTQxOTE0", "url": "https://github.com/DSpace/DSpace/pull/2771#pullrequestreview-421141914", "createdAt": "2020-05-29T17:16:38Z", "commit": {"oid": "41b91ea5b1857657704d2943957e47b6e96a513e"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzoxNjozOVrOGclcIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzoyMjo1NFrOGclovQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyNjcyMA==", "bodyText": "This entire method seems like we may want to consider moving it into the dspace-api.  It's a bit odd to me to have a RestRepository class building detailed Solr queries, which makes me wonder if we need to consider moving this into the CollectionIndexFactoryImpl or somewhere similar (and then just calling that new method from this RestRepository class)?", "url": "https://github.com/DSpace/DSpace/pull/2771#discussion_r432626720", "createdAt": "2020-05-29T17:16:39Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CollectionRestRepository.java", "diffHunk": "@@ -174,19 +178,70 @@ public CollectionRest findOne(Context context, UUID id) {\n                     CommunityRest.CATEGORY + \".\" + CommunityRest.NAME + \" with id: \" + communityUuid\n                         + \" not found\");\n             }\n-            List<Collection> collections = cs.findAuthorized(context, com, Constants.ADD);\n-            return converter.toRestPage(collections, pageable, utils.obtainProjection());\n-        } catch (SQLException e) {\n+            List<Collection> collections = new LinkedList<Collection>();\n+            DiscoverResult resp = discoverAuthorizedCollections(pageable, q, context, com);\n+            long tot = resp.getTotalSearchResults();\n+            for (IndexableObject solrCollections : resp.getIndexableObjects()) {\n+                Collection c = ((IndexableCollection) solrCollections).getIndexedObject();\n+                collections.add(c);\n+            }\n+            return converter.toRestPage(collections, pageable, tot , utils.obtainProjection());\n+        } catch (SQLException | SearchServiceException e) {\n             throw new RuntimeException(e.getMessage(), e);\n         }\n     }\n \n+    private DiscoverResult discoverAuthorizedCollections(Pageable pageable, String q, Context context, Community com)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41b91ea5b1857657704d2943957e47b6e96a513e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyOTk0OQ==", "bodyText": "We may want to add a comment here to explain the difference between \"submit\" and the existing \"submitter\" index (as it may be confusing in the future).  Obviously this index is to track which group(s) have submit permissions, while \"submitter\" seems to be who submitted an item.  They are similarly named, so we should add a comment here to describe them.", "url": "https://github.com/DSpace/DSpace/pull/2771#discussion_r432629949", "createdAt": "2020-05-29T17:22:54Z", "author": {"login": "tdonohue"}, "path": "dspace/solr/search/conf/schema.xml", "diffHunk": "@@ -259,6 +259,8 @@\n     <field name=\"taskfor\" type=\"string\" indexed=\"true\" stored=\"true\" omitNorms=\"true\" multiValued=\"true\" docValues=\"true\" />\n    \n     <field name=\"has_content_in_original_bundle\" type=\"string\" indexed=\"true\" stored=\"true\" omitNorms=\"true\" multiValued=\"true\" docValues=\"true\" />\n+\n+    <field name=\"submit\" type=\"string\" indexed=\"true\" stored=\"true\" omitNorms=\"true\" multiValued=\"true\" docValues=\"true\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41b91ea5b1857657704d2943957e47b6e96a513e"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzNTg3OTc3", "url": "https://github.com/DSpace/DSpace/pull/2771#pullrequestreview-423587977", "createdAt": "2020-06-03T14:05:12Z", "commit": {"oid": "41b91ea5b1857657704d2943957e47b6e96a513e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDowNToxMlrOGeddDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDowNToxMlrOGeddDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU5MzAzNw==", "bodyText": "What is the use case for this new \"query\" parameter ? Because it isn't in the rest contract: https://github.com/DSpace/Rest7Contract/blob/733d81061f1dbcd3049ed0d80130746418a4b3a1/collections.md#findauthorizedbycommunity", "url": "https://github.com/DSpace/DSpace/pull/2771#discussion_r434593037", "createdAt": "2020-06-03T14:05:12Z", "author": {"login": "KevinVdV"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CollectionRestRepository.java", "diffHunk": "@@ -165,7 +168,8 @@ public CollectionRest findOne(Context context, UUID id) {\n \n     @SearchRestMethod(name = \"findAuthorizedByCommunity\")\n     public Page<CollectionRest> findAuthorizedByCommunity(\n-        @Parameter(value = \"uuid\", required = true) UUID communityUuid, Pageable pageable) {\n+        @Parameter(value = \"uuid\", required = true) UUID communityUuid, Pageable pageable,\n+        @Parameter(value = \"query\") String q) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41b91ea5b1857657704d2943957e47b6e96a513e"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26f6a7d0d879221845b5bac7f79f8c5bf5f107f4", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/26f6a7d0d879221845b5bac7f79f8c5bf5f107f4", "committedDate": "2020-06-05T15:13:37Z", "message": "Implement community feedbacks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MDQ4MjAz", "url": "https://github.com/DSpace/DSpace/pull/2771#pullrequestreview-427048203", "createdAt": "2020-06-09T11:34:12Z", "commit": {"oid": "26f6a7d0d879221845b5bac7f79f8c5bf5f107f4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMTozNDoxMlrOGhFE0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMTozOToxN1rOGhFPXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMzOTM0NA==", "bodyText": "This StringBuilder object is created here, but isn't used until the resultSolrQuery() method. Can you move the creation of the variable to the resultSolrQuery() method.", "url": "https://github.com/DSpace/DSpace/pull/2771#discussion_r437339344", "createdAt": "2020-06-09T11:34:12Z", "author": {"login": "KevinVdV"}, "path": "dspace-api/src/main/java/org/dspace/content/CollectionServiceImpl.java", "diffHunk": "@@ -907,4 +919,66 @@ public Group createDefaultReadGroup(Context context, Collection collection, Stri\n         return role;\n     }\n \n+    @Override\n+    public List<Collection> findAuthorizedCollectionsInSOLR(String q, Context context, Community community,\n+        int offset, int limit) throws SQLException, SearchServiceException {\n+\n+        List<Collection> collections = new ArrayList<Collection>();\n+        StringBuilder query = new StringBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26f6a7d0d879221845b5bac7f79f8c5bf5f107f4"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMzOTQ2MA==", "bodyText": "Same as above, move the variable to the resultSolrQuery() method.", "url": "https://github.com/DSpace/DSpace/pull/2771#discussion_r437339460", "createdAt": "2020-06-09T11:34:28Z", "author": {"login": "KevinVdV"}, "path": "dspace-api/src/main/java/org/dspace/content/CollectionServiceImpl.java", "diffHunk": "@@ -907,4 +919,66 @@ public Group createDefaultReadGroup(Context context, Collection collection, Stri\n         return role;\n     }\n \n+    @Override\n+    public List<Collection> findAuthorizedCollectionsInSOLR(String q, Context context, Community community,\n+        int offset, int limit) throws SQLException, SearchServiceException {\n+\n+        List<Collection> collections = new ArrayList<Collection>();\n+        StringBuilder query = new StringBuilder();\n+        DiscoverQuery discoverQuery = new DiscoverQuery();\n+        discoverQuery.setDSpaceObjectFilter(IndexableCollection.TYPE);\n+        discoverQuery.setStart(offset);\n+        discoverQuery.setMaxResults(limit);\n+        DiscoverResult resp = resultSolrQuery(context, query, discoverQuery,community, q);\n+        for (IndexableObject solrCollections : resp.getIndexableObjects()) {\n+            Collection c = ((IndexableCollection) solrCollections).getIndexedObject();\n+            collections.add(c);\n+        }\n+        return collections;\n+    }\n+\n+    @Override\n+    public int countAuthorizedCollectionsInSOLR(String q, Context context, Community community)\n+        throws SQLException, SearchServiceException {\n+\n+        StringBuilder query = new StringBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26f6a7d0d879221845b5bac7f79f8c5bf5f107f4"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM0MDI4Mg==", "bodyText": "As we only need the total results for this one can you call on:\ndiscoverQuery.setMaxResults(0);\nBecause the default here is 10 & we don't need to retrieve these objects from the database if we need the total count.", "url": "https://github.com/DSpace/DSpace/pull/2771#discussion_r437340282", "createdAt": "2020-06-09T11:36:00Z", "author": {"login": "KevinVdV"}, "path": "dspace-api/src/main/java/org/dspace/content/CollectionServiceImpl.java", "diffHunk": "@@ -907,4 +919,66 @@ public Group createDefaultReadGroup(Context context, Collection collection, Stri\n         return role;\n     }\n \n+    @Override\n+    public List<Collection> findAuthorizedCollectionsInSOLR(String q, Context context, Community community,\n+        int offset, int limit) throws SQLException, SearchServiceException {\n+\n+        List<Collection> collections = new ArrayList<Collection>();\n+        StringBuilder query = new StringBuilder();\n+        DiscoverQuery discoverQuery = new DiscoverQuery();\n+        discoverQuery.setDSpaceObjectFilter(IndexableCollection.TYPE);\n+        discoverQuery.setStart(offset);\n+        discoverQuery.setMaxResults(limit);\n+        DiscoverResult resp = resultSolrQuery(context, query, discoverQuery,community, q);\n+        for (IndexableObject solrCollections : resp.getIndexableObjects()) {\n+            Collection c = ((IndexableCollection) solrCollections).getIndexedObject();\n+            collections.add(c);\n+        }\n+        return collections;\n+    }\n+\n+    @Override\n+    public int countAuthorizedCollectionsInSOLR(String q, Context context, Community community)\n+        throws SQLException, SearchServiceException {\n+\n+        StringBuilder query = new StringBuilder();\n+        DiscoverQuery discoverQuery = new DiscoverQuery();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26f6a7d0d879221845b5bac7f79f8c5bf5f107f4"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM0MTIwOQ==", "bodyText": "Can we rename the method name here ? This method is used specifically to retrieve authorized collections a user can submit in.", "url": "https://github.com/DSpace/DSpace/pull/2771#discussion_r437341209", "createdAt": "2020-06-09T11:37:42Z", "author": {"login": "KevinVdV"}, "path": "dspace-api/src/main/java/org/dspace/content/CollectionServiceImpl.java", "diffHunk": "@@ -907,4 +919,66 @@ public Group createDefaultReadGroup(Context context, Collection collection, Stri\n         return role;\n     }\n \n+    @Override\n+    public List<Collection> findAuthorizedCollectionsInSOLR(String q, Context context, Community community,\n+        int offset, int limit) throws SQLException, SearchServiceException {\n+\n+        List<Collection> collections = new ArrayList<Collection>();\n+        StringBuilder query = new StringBuilder();\n+        DiscoverQuery discoverQuery = new DiscoverQuery();\n+        discoverQuery.setDSpaceObjectFilter(IndexableCollection.TYPE);\n+        discoverQuery.setStart(offset);\n+        discoverQuery.setMaxResults(limit);\n+        DiscoverResult resp = resultSolrQuery(context, query, discoverQuery,community, q);\n+        for (IndexableObject solrCollections : resp.getIndexableObjects()) {\n+            Collection c = ((IndexableCollection) solrCollections).getIndexedObject();\n+            collections.add(c);\n+        }\n+        return collections;\n+    }\n+\n+    @Override\n+    public int countAuthorizedCollectionsInSOLR(String q, Context context, Community community)\n+        throws SQLException, SearchServiceException {\n+\n+        StringBuilder query = new StringBuilder();\n+        DiscoverQuery discoverQuery = new DiscoverQuery();\n+        discoverQuery.setDSpaceObjectFilter(IndexableCollection.TYPE);\n+        DiscoverResult resp = resultSolrQuery(context, query, discoverQuery,community,q);\n+        return (int)resp.getTotalSearchResults();\n+    }\n+\n+    private DiscoverResult resultSolrQuery(Context context, StringBuilder query, DiscoverQuery discoverQuery,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26f6a7d0d879221845b5bac7f79f8c5bf5f107f4"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM0MjA0NQ==", "bodyText": "Can we leave out the call to the anonymousGroup group here ? Anonymous will never be granted submit rights (as you always need a logged in user), so this database call is not needed.", "url": "https://github.com/DSpace/DSpace/pull/2771#discussion_r437342045", "createdAt": "2020-06-09T11:39:17Z", "author": {"login": "KevinVdV"}, "path": "dspace-api/src/main/java/org/dspace/content/CollectionServiceImpl.java", "diffHunk": "@@ -907,4 +919,66 @@ public Group createDefaultReadGroup(Context context, Collection collection, Stri\n         return role;\n     }\n \n+    @Override\n+    public List<Collection> findAuthorizedCollectionsInSOLR(String q, Context context, Community community,\n+        int offset, int limit) throws SQLException, SearchServiceException {\n+\n+        List<Collection> collections = new ArrayList<Collection>();\n+        StringBuilder query = new StringBuilder();\n+        DiscoverQuery discoverQuery = new DiscoverQuery();\n+        discoverQuery.setDSpaceObjectFilter(IndexableCollection.TYPE);\n+        discoverQuery.setStart(offset);\n+        discoverQuery.setMaxResults(limit);\n+        DiscoverResult resp = resultSolrQuery(context, query, discoverQuery,community, q);\n+        for (IndexableObject solrCollections : resp.getIndexableObjects()) {\n+            Collection c = ((IndexableCollection) solrCollections).getIndexedObject();\n+            collections.add(c);\n+        }\n+        return collections;\n+    }\n+\n+    @Override\n+    public int countAuthorizedCollectionsInSOLR(String q, Context context, Community community)\n+        throws SQLException, SearchServiceException {\n+\n+        StringBuilder query = new StringBuilder();\n+        DiscoverQuery discoverQuery = new DiscoverQuery();\n+        discoverQuery.setDSpaceObjectFilter(IndexableCollection.TYPE);\n+        DiscoverResult resp = resultSolrQuery(context, query, discoverQuery,community,q);\n+        return (int)resp.getTotalSearchResults();\n+    }\n+\n+    private DiscoverResult resultSolrQuery(Context context, StringBuilder query, DiscoverQuery discoverQuery,\n+                                   Community community, String q) throws SQLException, SearchServiceException {\n+\n+        EPerson currentUser = context.getCurrentUser();\n+        if (!authorizeService.isAdmin(context)) {\n+            Group anonymousGroup = groupService.findByName(context, Group.ANONYMOUS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26f6a7d0d879221845b5bac7f79f8c5bf5f107f4"}, "originalPosition": 76}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9d698dcd1d11503742ef4f91e85eee71c73bc87", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/d9d698dcd1d11503742ef4f91e85eee71c73bc87", "committedDate": "2020-06-11T17:19:02Z", "message": "Implement community feedbacks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwOTM3MjA3", "url": "https://github.com/DSpace/DSpace/pull/2771#pullrequestreview-430937207", "createdAt": "2020-06-15T19:38:08Z", "commit": {"oid": "d9d698dcd1d11503742ef4f91e85eee71c73bc87"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxOTozODowOFrOGkADNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMDowMDowM1rOGkAuoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQwMjc0MQ==", "bodyText": "This method needs renaming.  It doesn't work for any authorization type (e.g. it cannot check for READ permissions).  It's specific to Submit permissions only.   I also don't like adding \"InSOLR\" on the end as it's unnecessary.\nI'd recommend naming this something like findCollectionsWithSubmit() as that better states we are returning collection the current user has submit privileges within.  Also, this needs better JavaDocs to describe the method.  It should say something like \"Returns Collections for which the current user has 'submit' privileges.  NOTE: for better performance, this method retrieves its results from an index (cache) and does not query the database directly.  This means that results may be stale or outdated until DS-4524 is resolved\"\nUPDATE: Also, could we add a basic test for this new method to CollectionTest?  That'd also provide some proof that the Solr Plugin is working as expected.", "url": "https://github.com/DSpace/DSpace/pull/2771#discussion_r440402741", "createdAt": "2020-06-15T19:38:08Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/content/service/CollectionService.java", "diffHunk": "@@ -354,4 +356,34 @@ public void canEdit(Context context, Collection collection, boolean useInheritan\n      */\n     Group createDefaultReadGroup(Context context, Collection collection, String typeOfGroupString, int defaultRead)\n         throws SQLException, AuthorizeException;\n+\n+    /**\n+     * \n+     * @param q                limit the returned collection to those with metadata values matching the query terms.\n+     *                         The terms are used to make also a prefix query on SOLR so it can be used to implement\n+     *                         an autosuggest feature over the collection name\n+     * @param context          DSpace Context\n+     * @param community        parent community\n+     * @param offset           the position of the first result to return\n+     * @param limit            paging limit\n+     * @return                 discovery search result objects\n+     * @throws SQLException              if something goes wrong\n+     * @throws SearchServiceException    if search error\n+     */\n+    public List<Collection> findAuthorizedCollectionsInSOLR(String q, Context context, Community community,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9d698dcd1d11503742ef4f91e85eee71c73bc87"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQwMzYzMg==", "bodyText": "Again, should be renamed to something like countCollectionsWithSubmit(). JavaDocs should also be added to describe the method. Something like: \"Counts the number of Collection for which the current user has 'submit' privileges. NOTE: for better performance, this method retrieves its results from an index (cache) and does not query the database directly. This means that results may be stale or outdated until DS-4524 is resolved.\"", "url": "https://github.com/DSpace/DSpace/pull/2771#discussion_r440403632", "createdAt": "2020-06-15T19:39:53Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/content/service/CollectionService.java", "diffHunk": "@@ -354,4 +356,34 @@ public void canEdit(Context context, Collection collection, boolean useInheritan\n      */\n     Group createDefaultReadGroup(Context context, Collection collection, String typeOfGroupString, int defaultRead)\n         throws SQLException, AuthorizeException;\n+\n+    /**\n+     * \n+     * @param q                limit the returned collection to those with metadata values matching the query terms.\n+     *                         The terms are used to make also a prefix query on SOLR so it can be used to implement\n+     *                         an autosuggest feature over the collection name\n+     * @param context          DSpace Context\n+     * @param community        parent community\n+     * @param offset           the position of the first result to return\n+     * @param limit            paging limit\n+     * @return                 discovery search result objects\n+     * @throws SQLException              if something goes wrong\n+     * @throws SearchServiceException    if search error\n+     */\n+    public List<Collection> findAuthorizedCollectionsInSOLR(String q, Context context, Community community,\n+        int offset, int limit) throws SQLException, SearchServiceException;\n+\n+    /**\n+     * \n+     * @param q                limit the returned collection to those with metadata values matching the query terms.\n+     *                         The terms are used to make also a prefix query on SOLR so it can be used to implement\n+     *                         an autosuggest feature over the collection name\n+     * @param context          DSpace Context\n+     * @param community        parent community\n+     * @return                 total collections found\n+     * @throws SQLException              if something goes wrong\n+     * @throws SearchServiceException    if search error\n+     */\n+    public int countAuthorizedCollectionsInSOLR(String q, Context context, Community community)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9d698dcd1d11503742ef4f91e85eee71c73bc87"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQwNTAyNg==", "bodyText": "For consistency, this method should be renamed to retrieveCollectionsWithSubmit().  Can we add JavaDocs here as well, as this is a complex method.   Should say something like \"Finds all Indexed Collections where the current user has submit rights. If the user is an Admin, this is all Indexed Collections.  Otherwise, it includes those collections where an indexed \"submit\" policy lists either the eperson or one of the eperson's groups\"", "url": "https://github.com/DSpace/DSpace/pull/2771#discussion_r440405026", "createdAt": "2020-06-15T19:42:28Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/content/CollectionServiceImpl.java", "diffHunk": "@@ -907,4 +919,62 @@ public Group createDefaultReadGroup(Context context, Collection collection, Stri\n         return role;\n     }\n \n+    @Override\n+    public List<Collection> findAuthorizedCollectionsInSOLR(String q, Context context, Community community,\n+        int offset, int limit) throws SQLException, SearchServiceException {\n+\n+        List<Collection> collections = new ArrayList<Collection>();\n+        DiscoverQuery discoverQuery = new DiscoverQuery();\n+        discoverQuery.setDSpaceObjectFilter(IndexableCollection.TYPE);\n+        discoverQuery.setStart(offset);\n+        discoverQuery.setMaxResults(limit);\n+        DiscoverResult resp = retrieveAuthorizedCollections(context, discoverQuery,community, q);\n+        for (IndexableObject solrCollections : resp.getIndexableObjects()) {\n+            Collection c = ((IndexableCollection) solrCollections).getIndexedObject();\n+            collections.add(c);\n+        }\n+        return collections;\n+    }\n+\n+    @Override\n+    public int countAuthorizedCollectionsInSOLR(String q, Context context, Community community)\n+        throws SQLException, SearchServiceException {\n+\n+        DiscoverQuery discoverQuery = new DiscoverQuery();\n+        discoverQuery.setMaxResults(0);\n+        discoverQuery.setDSpaceObjectFilter(IndexableCollection.TYPE);\n+        DiscoverResult resp = retrieveAuthorizedCollections(context, discoverQuery,community,q);\n+        return (int)resp.getTotalSearchResults();\n+    }\n+\n+    private DiscoverResult retrieveAuthorizedCollections(Context context, DiscoverQuery discoverQuery,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9d698dcd1d11503742ef4f91e85eee71c73bc87"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQwNzIyOQ==", "bodyText": "Yes, I agree we need an updated REST Contract here to document the query param.  Additionally, the JavaDocs should be updated for this method to describe the param.", "url": "https://github.com/DSpace/DSpace/pull/2771#discussion_r440407229", "createdAt": "2020-06-15T19:46:43Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CollectionRestRepository.java", "diffHunk": "@@ -165,7 +168,8 @@ public CollectionRest findOne(Context context, UUID id) {\n \n     @SearchRestMethod(name = \"findAuthorizedByCommunity\")\n     public Page<CollectionRest> findAuthorizedByCommunity(\n-        @Parameter(value = \"uuid\", required = true) UUID communityUuid, Pageable pageable) {\n+        @Parameter(value = \"uuid\", required = true) UUID communityUuid, Pageable pageable,\n+        @Parameter(value = \"query\") String q) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU5MzAzNw=="}, "originalCommit": {"oid": "41b91ea5b1857657704d2943957e47b6e96a513e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxMzg1Nw==", "bodyText": "I'm just now realizing this @SearchRestMethod seems mis-named as well.  We are not finding all Collections you are authorized to Read or edit or similar.  This is very specific to collections you can submit to.  Shouldn't this be called findSubmitAuthorized  or findAuthorizedForSubmit?", "url": "https://github.com/DSpace/DSpace/pull/2771#discussion_r440413857", "createdAt": "2020-06-15T20:00:03Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CollectionRestRepository.java", "diffHunk": "@@ -174,19 +175,26 @@ public CollectionRest findOne(Context context, UUID id) {\n                     CommunityRest.CATEGORY + \".\" + CommunityRest.NAME + \" with id: \" + communityUuid\n                         + \" not found\");\n             }\n-            List<Collection> collections = cs.findAuthorized(context, com, Constants.ADD);\n-            return converter.toRestPage(collections, pageable, utils.obtainProjection());\n-        } catch (SQLException e) {\n+            List<Collection> collections = cs.findAuthorizedCollectionsInSOLR(q, context, com,\n+                                              Math.toIntExact(pageable.getOffset()),\n+                                              Math.toIntExact(pageable.getOffset() + pageable.getPageSize()));\n+            int tot = cs.countAuthorizedCollectionsInSOLR(q, context, com);\n+            return converter.toRestPage(collections, pageable, tot , utils.obtainProjection());\n+        } catch (SQLException | SearchServiceException e) {\n             throw new RuntimeException(e.getMessage(), e);\n         }\n     }\n \n     @SearchRestMethod(name = \"findAuthorized\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9d698dcd1d11503742ef4f91e85eee71c73bc87"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eef6868a2f158ec927c49234dc22892b9b7fb9c8", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/eef6868a2f158ec927c49234dc22892b9b7fb9c8", "committedDate": "2020-06-16T09:09:32Z", "message": "renamed methods"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNTQzNDQx", "url": "https://github.com/DSpace/DSpace/pull/2771#pullrequestreview-432543441", "createdAt": "2020-06-17T15:53:37Z", "commit": {"oid": "eef6868a2f158ec927c49234dc22892b9b7fb9c8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzODc2MDA5", "url": "https://github.com/DSpace/DSpace/pull/2771#pullrequestreview-433876009", "createdAt": "2020-06-19T07:54:22Z", "commit": {"oid": "eef6868a2f158ec927c49234dc22892b9b7fb9c8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1479, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}