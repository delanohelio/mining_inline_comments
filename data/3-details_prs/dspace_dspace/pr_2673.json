{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1MzExOTk1", "number": 2673, "title": "[DS-3532] Breadcrumbs in header", "bodyText": "This PR provides support for breadcrumbs in header based on DSpace/RestContract#100\nIt exposes links to the parent community", "createdAt": "2020-02-14T10:17:28Z", "url": "https://github.com/DSpace/DSpace/pull/2673", "merged": true, "mergeCommit": {"oid": "880ed67732fcaf7358547185d0bb77befa2703ee"}, "closed": true, "closedAt": "2020-02-28T16:36:03Z", "author": {"login": "benbosman"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcCAWaugH2gAyMzc1MzExOTk1OjBmYWVhYWJkZWZhOWYxNTdlNDA3MjQ2NmZjOGJhNGRjMGM3ZjQ3ZWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIxwOdAFqTM2NjQ4NTc3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0faeaabdefa9f157e4072466fc8ba4dc0c7f47ec", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/0faeaabdefa9f157e4072466fc8ba4dc0c7f47ec", "committedDate": "2020-02-07T14:38:25Z", "message": "[Task 68607] added links to the parentCommunity for collections and communities on their respective endpoints"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea509448a99bfa69d90c0a48b5b3a1893394713b", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/ea509448a99bfa69d90c0a48b5b3a1893394713b", "committedDate": "2020-02-10T13:32:16Z", "message": "[Task 68608] test setup for parent community IT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa07bc27d02a362dec813f229642796deca6ccf3", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/fa07bc27d02a362dec813f229642796deca6ccf3", "committedDate": "2020-02-11T11:44:37Z", "message": "Merge branch 'DS-3533_Projections-Continued' into w2p-68607_add-link-to-parent-community"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2241b591f7cec8a7c7702c925238889d60f4fe6e", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/2241b591f7cec8a7c7702c925238889d60f4fe6e", "committedDate": "2020-02-11T15:10:42Z", "message": "[Task 68608] added ITs for the parent communities and owning collections"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc1744c3223be02aec94483ffce73cd924b49354", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/fc1744c3223be02aec94483ffce73cd924b49354", "committedDate": "2020-02-13T14:42:28Z", "message": "Merge branch 'DS-3533_Projections-Continued' into w2p-68607_add-link-to-parent-community"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61400e1145c7d188402adc5e2231edb867156859", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/61400e1145c7d188402adc5e2231edb867156859", "committedDate": "2020-02-13T15:17:22Z", "message": "Added parentCommunity to test matchers for collections and communities"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6447176f02a43210dd8f5044c18cd398c76c15a6", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/6447176f02a43210dd8f5044c18cd398c76c15a6", "committedDate": "2020-02-14T08:27:21Z", "message": "Fixed headers and checkstyle for parentCommunity link functionality"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNDU4MTg4", "url": "https://github.com/DSpace/DSpace/pull/2673#pullrequestreview-361458188", "createdAt": "2020-02-19T21:41:31Z", "commit": {"oid": "6447176f02a43210dd8f5044c18cd398c76c15a6"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMTo0MTozMVrOFr4pTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMTo0Mzo1MFrOFr4tww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU2MTE2NA==", "bodyText": "Please add JavaDocs", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r381561164", "createdAt": "2020-02-19T21:41:31Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CollectionParentCommunityLinkRepository.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import javax.annotation.Nullable;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.dspace.app.rest.model.CollectionRest;\n+import org.dspace.app.rest.model.CommunityRest;\n+import org.dspace.app.rest.projection.Projection;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Context;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.stereotype.Component;\n+\n+@Component(CollectionRest.CATEGORY + \".\" + CollectionRest.NAME + \".\" + CollectionRest.PARENT_COMMUNITY)\n+public class CollectionParentCommunityLinkRepository extends AbstractDSpaceRestRepository", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6447176f02a43210dd8f5044c18cd398c76c15a6"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU2MTM4NA==", "bodyText": "Same here, JavaDocs for this method please", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r381561384", "createdAt": "2020-02-19T21:42:00Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CollectionParentCommunityLinkRepository.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import javax.annotation.Nullable;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.dspace.app.rest.model.CollectionRest;\n+import org.dspace.app.rest.model.CommunityRest;\n+import org.dspace.app.rest.projection.Projection;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.core.Context;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.stereotype.Component;\n+\n+@Component(CollectionRest.CATEGORY + \".\" + CollectionRest.NAME + \".\" + CollectionRest.PARENT_COMMUNITY)\n+public class CollectionParentCommunityLinkRepository extends AbstractDSpaceRestRepository\n+    implements LinkRestRepository {\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    public CommunityRest getParentCommunity(@Nullable HttpServletRequest httpServletRequest,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6447176f02a43210dd8f5044c18cd398c76c15a6"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU2MjMwNw==", "bodyText": "Again, Javadocs needed for this Class and for the getParentCommunity method below.", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r381562307", "createdAt": "2020-02-19T21:43:50Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CommunityParentCommunityLinkRepository.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+import javax.annotation.Nullable;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.dspace.app.rest.model.CommunityRest;\n+import org.dspace.app.rest.projection.Projection;\n+import org.dspace.content.Community;\n+import org.dspace.content.service.CommunityService;\n+import org.dspace.core.Context;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.stereotype.Component;\n+\n+@Component(CommunityRest.CATEGORY + \".\" + CommunityRest.NAME + \".\" + CommunityRest.PARENT_COMMUNITY)\n+public class CommunityParentCommunityLinkRepository extends AbstractDSpaceRestRepository", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6447176f02a43210dd8f5044c18cd398c76c15a6"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMDE4Mjc0", "url": "https://github.com/DSpace/DSpace/pull/2673#pullrequestreview-362018274", "createdAt": "2020-02-20T15:53:03Z", "commit": {"oid": "6447176f02a43210dd8f5044c18cd398c76c15a6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNTo1MzowM1rOFsY6nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNjoyNTowM1rOFsaKOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA4OTg4Nw==", "bodyText": "why are we parsing the json instead than use the existing Matcher? this also apply to all the other tests", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r382089887", "createdAt": "2020-02-20T15:53:03Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java", "diffHunk": "@@ -0,0 +1,311 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.junit.Assert.assertThat;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.builder.ItemBuilder;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+public class CommunityCollectionParentIT extends AbstractControllerIntegrationTest {\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private CommunityService communityService;\n+\n+    Community communityA;\n+    Community communityB;\n+    Community communityAA;\n+    Community communityAB;\n+\n+    Collection col1;\n+    Collection col2;\n+    Collection col3;\n+\n+    Item itemX;\n+    Item itemY;\n+    Item itemZ;\n+\n+\n+    @Before\n+    public void setup() throws SQLException, AuthorizeException {\n+        //We turn off the authorization system in order to create the structure as defined below\n+        context.turnOffAuthorisationSystem();\n+        //** GIVEN **\n+        //1. A community-collection structure with one parent community with sub-community and one collection.\n+        communityA = CommunityBuilder.createCommunity(context)\n+                                     .withName(\"Parent CommunityA\")\n+                                     .build();\n+        communityB = CommunityBuilder.createCommunity(context)\n+                                     .withName(\"Parent CommunityB\")\n+                                     .build();\n+        communityAA = CommunityBuilder.createSubCommunity(context, communityA)\n+                                      .withName(\"Sub Community\")\n+                                      .build();\n+        communityAB = CommunityBuilder.createSubCommunity(context, communityA)\n+                                      .withName(\"Sub Community Two\")\n+                                      .build();\n+        col1 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 1\").build();\n+        col2 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 2\").build();\n+        col3 = CollectionBuilder.createCollection(context, communityAB).withName(\"Collection 3\").build();\n+        communityService.addCollection(context, communityAB, col2);\n+\n+\n+        itemX = ItemBuilder.createItem(context, col1)\n+                           .withTitle(\"Public item 1\")\n+                           .withIssueDate(\"2017-10-17\")\n+                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                           .withSubject(\"ExtraEntry\")\n+                           .build();\n+\n+        itemY = ItemBuilder.createItem(context, col1)\n+                           .withTitle(\"Public item 1\")\n+                           .withIssueDate(\"2017-10-17\")\n+                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                           .withSubject(\"ExtraEntry\")\n+                           .build();\n+        collectionService.addItem(context, col2, itemY);\n+        itemZ = ItemBuilder.createItem(context, col2)\n+                           .withTitle(\"Public item 1\")\n+                           .withIssueDate(\"2017-10-17\")\n+                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                           .withSubject(\"ExtraEntry\")\n+                           .build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void itemXOwningCollectionTest() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        String token = getAuthToken(admin.getEmail(), password);\n+        MvcResult mvcResult = getClient(token).perform(get(\"/api/core/items/\" + itemX.getID() + \"/owningCollection\"))\n+                                              .andReturn();\n+\n+        String content = mvcResult.getResponse().getContentAsString();\n+        Map<String, Object> map = mapper.readValue(content, Map.class);\n+        String collectionUuidString = String.valueOf(map.get(\"uuid\"));\n+        String collectionName = String.valueOf(map.get(\"name\"));\n+\n+        mvcResult = getClient(token).perform(get(\"/api/core/collections/\" + col1.getID())).andReturn();\n+        content = mvcResult.getResponse().getContentAsString();\n+        map = mapper.readValue(content, Map.class);\n+        String actualCollectionName = String.valueOf(map.get(\"name\"));\n+\n+        assertThat(collectionName, equalTo(actualCollectionName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6447176f02a43210dd8f5044c18cd398c76c15a6"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEwODQxMQ==", "bodyText": "I don't see any value in adding a more test for AB as this is the same test data category than AA", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r382108411", "createdAt": "2020-02-20T16:22:06Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java", "diffHunk": "@@ -0,0 +1,311 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.junit.Assert.assertThat;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.builder.ItemBuilder;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+public class CommunityCollectionParentIT extends AbstractControllerIntegrationTest {\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private CommunityService communityService;\n+\n+    Community communityA;\n+    Community communityB;\n+    Community communityAA;\n+    Community communityAB;\n+\n+    Collection col1;\n+    Collection col2;\n+    Collection col3;\n+\n+    Item itemX;\n+    Item itemY;\n+    Item itemZ;\n+\n+\n+    @Before\n+    public void setup() throws SQLException, AuthorizeException {\n+        //We turn off the authorization system in order to create the structure as defined below\n+        context.turnOffAuthorisationSystem();\n+        //** GIVEN **\n+        //1. A community-collection structure with one parent community with sub-community and one collection.\n+        communityA = CommunityBuilder.createCommunity(context)\n+                                     .withName(\"Parent CommunityA\")\n+                                     .build();\n+        communityB = CommunityBuilder.createCommunity(context)\n+                                     .withName(\"Parent CommunityB\")\n+                                     .build();\n+        communityAA = CommunityBuilder.createSubCommunity(context, communityA)\n+                                      .withName(\"Sub Community\")\n+                                      .build();\n+        communityAB = CommunityBuilder.createSubCommunity(context, communityA)\n+                                      .withName(\"Sub Community Two\")\n+                                      .build();\n+        col1 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 1\").build();\n+        col2 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 2\").build();\n+        col3 = CollectionBuilder.createCollection(context, communityAB).withName(\"Collection 3\").build();\n+        communityService.addCollection(context, communityAB, col2);\n+\n+\n+        itemX = ItemBuilder.createItem(context, col1)\n+                           .withTitle(\"Public item 1\")\n+                           .withIssueDate(\"2017-10-17\")\n+                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                           .withSubject(\"ExtraEntry\")\n+                           .build();\n+\n+        itemY = ItemBuilder.createItem(context, col1)\n+                           .withTitle(\"Public item 1\")\n+                           .withIssueDate(\"2017-10-17\")\n+                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                           .withSubject(\"ExtraEntry\")\n+                           .build();\n+        collectionService.addItem(context, col2, itemY);\n+        itemZ = ItemBuilder.createItem(context, col2)\n+                           .withTitle(\"Public item 1\")\n+                           .withIssueDate(\"2017-10-17\")\n+                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                           .withSubject(\"ExtraEntry\")\n+                           .build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void itemXOwningCollectionTest() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        String token = getAuthToken(admin.getEmail(), password);\n+        MvcResult mvcResult = getClient(token).perform(get(\"/api/core/items/\" + itemX.getID() + \"/owningCollection\"))\n+                                              .andReturn();\n+\n+        String content = mvcResult.getResponse().getContentAsString();\n+        Map<String, Object> map = mapper.readValue(content, Map.class);\n+        String collectionUuidString = String.valueOf(map.get(\"uuid\"));\n+        String collectionName = String.valueOf(map.get(\"name\"));\n+\n+        mvcResult = getClient(token).perform(get(\"/api/core/collections/\" + col1.getID())).andReturn();\n+        content = mvcResult.getResponse().getContentAsString();\n+        map = mapper.readValue(content, Map.class);\n+        String actualCollectionName = String.valueOf(map.get(\"name\"));\n+\n+        assertThat(collectionName, equalTo(actualCollectionName));\n+        assertThat(collectionUuidString, equalTo(String.valueOf(col1.getID())));\n+        assertThat(collectionUuidString, not(String.valueOf(col2.getID())));\n+\n+    }\n+\n+    @Test\n+    public void itemYOwningCollectionTest() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        String token = getAuthToken(admin.getEmail(), password);\n+        MvcResult mvcResult = getClient(token).perform(get(\"/api/core/items/\" + itemY.getID() + \"/owningCollection\"))\n+                                              .andReturn();\n+\n+        String content = mvcResult.getResponse().getContentAsString();\n+        Map<String, Object> map = mapper.readValue(content, Map.class);\n+        String collectionUuidString = String.valueOf(map.get(\"uuid\"));\n+        String collectionName = String.valueOf(map.get(\"name\"));\n+\n+        mvcResult = getClient(token).perform(get(\"/api/core/collections/\" + col1.getID())).andReturn();\n+        content = mvcResult.getResponse().getContentAsString();\n+        map = mapper.readValue(content, Map.class);\n+        String actualCollectionName = String.valueOf(map.get(\"name\"));\n+\n+        assertThat(collectionName, equalTo(actualCollectionName));\n+        assertThat(collectionUuidString, equalTo(String.valueOf(col1.getID())));\n+        assertThat(collectionUuidString, not(String.valueOf(col2.getID())));\n+\n+    }\n+\n+    @Test\n+    public void itemZOwningCollectionTest() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        String token = getAuthToken(admin.getEmail(), password);\n+        MvcResult mvcResult = getClient(token).perform(get(\"/api/core/items/\" + itemZ.getID() + \"/owningCollection\"))\n+                                              .andReturn();\n+\n+        String content = mvcResult.getResponse().getContentAsString();\n+        Map<String, Object> map = mapper.readValue(content, Map.class);\n+        String collectionUuidString = String.valueOf(map.get(\"uuid\"));\n+        String collectionName = String.valueOf(map.get(\"name\"));\n+\n+        mvcResult = getClient(token).perform(get(\"/api/core/collections/\" + col2.getID())).andReturn();\n+        content = mvcResult.getResponse().getContentAsString();\n+        map = mapper.readValue(content, Map.class);\n+        String actualCollectionName = String.valueOf(map.get(\"name\"));\n+\n+        assertThat(collectionName, equalTo(actualCollectionName));\n+        assertThat(collectionUuidString, equalTo(String.valueOf(col2.getID())));\n+        assertThat(collectionUuidString, not(String.valueOf(col1.getID())));\n+\n+    }\n+\n+    @Test\n+    public void col1ParentCommunityTest() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        String token = getAuthToken(admin.getEmail(), password);\n+        MvcResult mvcResult = getClient(token)\n+            .perform(get(\"/api/core/collections/\" + col1.getID() + \"/parentCommunity\")).andReturn();\n+\n+        String content = mvcResult.getResponse().getContentAsString();\n+        Map<String, Object> map = mapper.readValue(content, Map.class);\n+        String communityUuidString = String.valueOf(map.get(\"uuid\"));\n+        String communityName = String.valueOf(map.get(\"name\"));\n+\n+        mvcResult = getClient(token).perform(get(\"/api/core/communities/\" + communityAA.getID())).andReturn();\n+        content = mvcResult.getResponse().getContentAsString();\n+        map = mapper.readValue(content, Map.class);\n+        String actualCommunityName = String.valueOf(map.get(\"name\"));\n+\n+        assertThat(communityName, equalTo(actualCommunityName));\n+        assertThat(communityUuidString, equalTo(String.valueOf(communityAA.getID())));\n+        assertThat(communityUuidString, not(String.valueOf(communityA.getID())));\n+        assertThat(communityUuidString, not(String.valueOf(communityAB.getID())));\n+\n+    }\n+\n+    @Test\n+    public void col2ParentCommunityTest() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        String token = getAuthToken(admin.getEmail(), password);\n+        MvcResult mvcResult = getClient(token)\n+            .perform(get(\"/api/core/collections/\" + col2.getID() + \"/parentCommunity\")).andReturn();\n+\n+        String content = mvcResult.getResponse().getContentAsString();\n+        Map<String, Object> map = mapper.readValue(content, Map.class);\n+        String communityUuidString = String.valueOf(map.get(\"uuid\"));\n+        String communityName = String.valueOf(map.get(\"name\"));\n+\n+        mvcResult = getClient(token).perform(get(\"/api/core/communities/\" + communityAA.getID())).andReturn();\n+        content = mvcResult.getResponse().getContentAsString();\n+        map = mapper.readValue(content, Map.class);\n+        String actualCommunityName = String.valueOf(map.get(\"name\"));\n+\n+        assertThat(communityName, equalTo(actualCommunityName));\n+        assertThat(communityUuidString, equalTo(String.valueOf(communityAA.getID())));\n+        assertThat(communityUuidString, not(String.valueOf(communityA.getID())));\n+        assertThat(communityUuidString, not(String.valueOf(communityAB.getID())));\n+\n+    }\n+\n+    @Test\n+    public void col3ParentCommunityTest() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        String token = getAuthToken(admin.getEmail(), password);\n+        MvcResult mvcResult = getClient(token)\n+            .perform(get(\"/api/core/collections/\" + col3.getID() + \"/parentCommunity\")).andReturn();\n+\n+        String content = mvcResult.getResponse().getContentAsString();\n+        Map<String, Object> map = mapper.readValue(content, Map.class);\n+        String communityUuidString = String.valueOf(map.get(\"uuid\"));\n+        String communityName = String.valueOf(map.get(\"name\"));\n+\n+        mvcResult = getClient(token).perform(get(\"/api/core/communities/\" + communityAB.getID())).andReturn();\n+        content = mvcResult.getResponse().getContentAsString();\n+        map = mapper.readValue(content, Map.class);\n+        String actualCommunityName = String.valueOf(map.get(\"name\"));\n+\n+        assertThat(communityName, equalTo(actualCommunityName));\n+        assertThat(communityUuidString, equalTo(String.valueOf(communityAB.getID())));\n+        assertThat(communityUuidString, not(String.valueOf(communityA.getID())));\n+        assertThat(communityUuidString, not(String.valueOf(communityAA.getID())));\n+\n+    }\n+\n+    @Test\n+    public void comAAParentCommunityTest() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        String token = getAuthToken(admin.getEmail(), password);\n+        MvcResult mvcResult = getClient(token)\n+            .perform(get(\"/api/core/communities/\" + communityAA.getID() + \"/parentCommunity\")).andReturn();\n+\n+        String content = mvcResult.getResponse().getContentAsString();\n+        Map<String, Object> map = mapper.readValue(content, Map.class);\n+        String communityUuidString = String.valueOf(map.get(\"uuid\"));\n+        String communityName = String.valueOf(map.get(\"name\"));\n+\n+        mvcResult = getClient(token).perform(get(\"/api/core/communities/\" + communityA.getID())).andReturn();\n+        content = mvcResult.getResponse().getContentAsString();\n+        map = mapper.readValue(content, Map.class);\n+        String actualCommunityName = String.valueOf(map.get(\"name\"));\n+\n+        assertThat(communityName, equalTo(actualCommunityName));\n+        assertThat(communityUuidString, equalTo(String.valueOf(communityA.getID())));\n+        assertThat(communityUuidString, not(String.valueOf(communityB.getID())));\n+\n+    }\n+\n+\n+    @Test\n+    public void comABParentCommunityTest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6447176f02a43210dd8f5044c18cd398c76c15a6"}, "originalPosition": 278}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjExMDI2NQ==", "bodyText": "we can avoid to retrieve this value from the REST, the findOne endpoint has already test in the specific IT class. Doing it again here will only slow our test", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r382110265", "createdAt": "2020-02-20T16:25:03Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java", "diffHunk": "@@ -0,0 +1,311 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.junit.Assert.assertThat;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.builder.ItemBuilder;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.web.servlet.MvcResult;\n+\n+public class CommunityCollectionParentIT extends AbstractControllerIntegrationTest {\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private CommunityService communityService;\n+\n+    Community communityA;\n+    Community communityB;\n+    Community communityAA;\n+    Community communityAB;\n+\n+    Collection col1;\n+    Collection col2;\n+    Collection col3;\n+\n+    Item itemX;\n+    Item itemY;\n+    Item itemZ;\n+\n+\n+    @Before\n+    public void setup() throws SQLException, AuthorizeException {\n+        //We turn off the authorization system in order to create the structure as defined below\n+        context.turnOffAuthorisationSystem();\n+        //** GIVEN **\n+        //1. A community-collection structure with one parent community with sub-community and one collection.\n+        communityA = CommunityBuilder.createCommunity(context)\n+                                     .withName(\"Parent CommunityA\")\n+                                     .build();\n+        communityB = CommunityBuilder.createCommunity(context)\n+                                     .withName(\"Parent CommunityB\")\n+                                     .build();\n+        communityAA = CommunityBuilder.createSubCommunity(context, communityA)\n+                                      .withName(\"Sub Community\")\n+                                      .build();\n+        communityAB = CommunityBuilder.createSubCommunity(context, communityA)\n+                                      .withName(\"Sub Community Two\")\n+                                      .build();\n+        col1 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 1\").build();\n+        col2 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 2\").build();\n+        col3 = CollectionBuilder.createCollection(context, communityAB).withName(\"Collection 3\").build();\n+        communityService.addCollection(context, communityAB, col2);\n+\n+\n+        itemX = ItemBuilder.createItem(context, col1)\n+                           .withTitle(\"Public item 1\")\n+                           .withIssueDate(\"2017-10-17\")\n+                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                           .withSubject(\"ExtraEntry\")\n+                           .build();\n+\n+        itemY = ItemBuilder.createItem(context, col1)\n+                           .withTitle(\"Public item 1\")\n+                           .withIssueDate(\"2017-10-17\")\n+                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                           .withSubject(\"ExtraEntry\")\n+                           .build();\n+        collectionService.addItem(context, col2, itemY);\n+        itemZ = ItemBuilder.createItem(context, col2)\n+                           .withTitle(\"Public item 1\")\n+                           .withIssueDate(\"2017-10-17\")\n+                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                           .withSubject(\"ExtraEntry\")\n+                           .build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void itemXOwningCollectionTest() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        String token = getAuthToken(admin.getEmail(), password);\n+        MvcResult mvcResult = getClient(token).perform(get(\"/api/core/items/\" + itemX.getID() + \"/owningCollection\"))\n+                                              .andReturn();\n+\n+        String content = mvcResult.getResponse().getContentAsString();\n+        Map<String, Object> map = mapper.readValue(content, Map.class);\n+        String collectionUuidString = String.valueOf(map.get(\"uuid\"));\n+        String collectionName = String.valueOf(map.get(\"name\"));\n+\n+        mvcResult = getClient(token).perform(get(\"/api/core/collections/\" + col1.getID())).andReturn();\n+        content = mvcResult.getResponse().getContentAsString();\n+        map = mapper.readValue(content, Map.class);\n+        String actualCollectionName = String.valueOf(map.get(\"name\"));\n+\n+        assertThat(collectionName, equalTo(actualCollectionName));\n+        assertThat(collectionUuidString, equalTo(String.valueOf(col1.getID())));\n+        assertThat(collectionUuidString, not(String.valueOf(col2.getID())));\n+\n+    }\n+\n+    @Test\n+    public void itemYOwningCollectionTest() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        String token = getAuthToken(admin.getEmail(), password);\n+        MvcResult mvcResult = getClient(token).perform(get(\"/api/core/items/\" + itemY.getID() + \"/owningCollection\"))\n+                                              .andReturn();\n+\n+        String content = mvcResult.getResponse().getContentAsString();\n+        Map<String, Object> map = mapper.readValue(content, Map.class);\n+        String collectionUuidString = String.valueOf(map.get(\"uuid\"));\n+        String collectionName = String.valueOf(map.get(\"name\"));\n+\n+        mvcResult = getClient(token).perform(get(\"/api/core/collections/\" + col1.getID())).andReturn();\n+        content = mvcResult.getResponse().getContentAsString();\n+        map = mapper.readValue(content, Map.class);\n+        String actualCollectionName = String.valueOf(map.get(\"name\"));\n+\n+        assertThat(collectionName, equalTo(actualCollectionName));\n+        assertThat(collectionUuidString, equalTo(String.valueOf(col1.getID())));\n+        assertThat(collectionUuidString, not(String.valueOf(col2.getID())));\n+\n+    }\n+\n+    @Test\n+    public void itemZOwningCollectionTest() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        String token = getAuthToken(admin.getEmail(), password);\n+        MvcResult mvcResult = getClient(token).perform(get(\"/api/core/items/\" + itemZ.getID() + \"/owningCollection\"))\n+                                              .andReturn();\n+\n+        String content = mvcResult.getResponse().getContentAsString();\n+        Map<String, Object> map = mapper.readValue(content, Map.class);\n+        String collectionUuidString = String.valueOf(map.get(\"uuid\"));\n+        String collectionName = String.valueOf(map.get(\"name\"));\n+\n+        mvcResult = getClient(token).perform(get(\"/api/core/collections/\" + col2.getID())).andReturn();\n+        content = mvcResult.getResponse().getContentAsString();\n+        map = mapper.readValue(content, Map.class);\n+        String actualCollectionName = String.valueOf(map.get(\"name\"));\n+\n+        assertThat(collectionName, equalTo(actualCollectionName));\n+        assertThat(collectionUuidString, equalTo(String.valueOf(col2.getID())));\n+        assertThat(collectionUuidString, not(String.valueOf(col1.getID())));\n+\n+    }\n+\n+    @Test\n+    public void col1ParentCommunityTest() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        String token = getAuthToken(admin.getEmail(), password);\n+        MvcResult mvcResult = getClient(token)\n+            .perform(get(\"/api/core/collections/\" + col1.getID() + \"/parentCommunity\")).andReturn();\n+\n+        String content = mvcResult.getResponse().getContentAsString();\n+        Map<String, Object> map = mapper.readValue(content, Map.class);\n+        String communityUuidString = String.valueOf(map.get(\"uuid\"));\n+        String communityName = String.valueOf(map.get(\"name\"));\n+\n+        mvcResult = getClient(token).perform(get(\"/api/core/communities/\" + communityAA.getID())).andReturn();\n+        content = mvcResult.getResponse().getContentAsString();\n+        map = mapper.readValue(content, Map.class);\n+        String actualCommunityName = String.valueOf(map.get(\"name\"));\n+\n+        assertThat(communityName, equalTo(actualCommunityName));\n+        assertThat(communityUuidString, equalTo(String.valueOf(communityAA.getID())));\n+        assertThat(communityUuidString, not(String.valueOf(communityA.getID())));\n+        assertThat(communityUuidString, not(String.valueOf(communityAB.getID())));\n+\n+    }\n+\n+    @Test\n+    public void col2ParentCommunityTest() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        String token = getAuthToken(admin.getEmail(), password);\n+        MvcResult mvcResult = getClient(token)\n+            .perform(get(\"/api/core/collections/\" + col2.getID() + \"/parentCommunity\")).andReturn();\n+\n+        String content = mvcResult.getResponse().getContentAsString();\n+        Map<String, Object> map = mapper.readValue(content, Map.class);\n+        String communityUuidString = String.valueOf(map.get(\"uuid\"));\n+        String communityName = String.valueOf(map.get(\"name\"));\n+\n+        mvcResult = getClient(token).perform(get(\"/api/core/communities/\" + communityAA.getID())).andReturn();\n+        content = mvcResult.getResponse().getContentAsString();\n+        map = mapper.readValue(content, Map.class);\n+        String actualCommunityName = String.valueOf(map.get(\"name\"));\n+\n+        assertThat(communityName, equalTo(actualCommunityName));\n+        assertThat(communityUuidString, equalTo(String.valueOf(communityAA.getID())));\n+        assertThat(communityUuidString, not(String.valueOf(communityA.getID())));\n+        assertThat(communityUuidString, not(String.valueOf(communityAB.getID())));\n+\n+    }\n+\n+    @Test\n+    public void col3ParentCommunityTest() throws Exception {\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        String token = getAuthToken(admin.getEmail(), password);\n+        MvcResult mvcResult = getClient(token)\n+            .perform(get(\"/api/core/collections/\" + col3.getID() + \"/parentCommunity\")).andReturn();\n+\n+        String content = mvcResult.getResponse().getContentAsString();\n+        Map<String, Object> map = mapper.readValue(content, Map.class);\n+        String communityUuidString = String.valueOf(map.get(\"uuid\"));\n+        String communityName = String.valueOf(map.get(\"name\"));\n+\n+        mvcResult = getClient(token).perform(get(\"/api/core/communities/\" + communityAB.getID())).andReturn();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6447176f02a43210dd8f5044c18cd398c76c15a6"}, "originalPosition": 240}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d79deb6e1ed9409c8a77a3b390489e335a957dbd", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/d79deb6e1ed9409c8a77a3b390489e335a957dbd", "committedDate": "2020-02-21T07:58:38Z", "message": "[DS-3532] added javadoc to the linkRestRepositories for ParentCommunity Linking"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1d7edafbe88f46e23f088bdc01538a1f3fc5f37", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/c1d7edafbe88f46e23f088bdc01538a1f3fc5f37", "committedDate": "2020-02-25T10:18:08Z", "message": "[Task 68945] processed feedback on breadcrumbs ITs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9636221917c2c47c8cd38642e42878ee6e9ef93", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/b9636221917c2c47c8cd38642e42878ee6e9ef93", "committedDate": "2020-02-25T10:19:25Z", "message": "Merge remote-tracking branch 'dspace/master' into w2p-68607_add-link-to-parent-community"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06f5199ec7e5bd36b84349e2ac22ad286356c613", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/06f5199ec7e5bd36b84349e2ac22ad286356c613", "committedDate": "2020-02-25T10:38:16Z", "message": "Re-adding javadoc to the CollectionParentCommunityLinkRepository"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MTkwMDA2", "url": "https://github.com/DSpace/DSpace/pull/2673#pullrequestreview-364190006", "createdAt": "2020-02-25T14:38:28Z", "commit": {"oid": "06f5199ec7e5bd36b84349e2ac22ad286356c613"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNDozODoyOFrOFuIgaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNDo1MDowOVrOFuI-iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkxODE4Nw==", "bodyText": "we should find a better name for this IT class as it also include test related to items. Should be TraverseCommunityCollectionItemParent ? mabye a sentence as javadoc explaining that could be also useful", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r383918187", "createdAt": "2020-02-25T14:38:28Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.builder.ItemBuilder;\n+import org.dspace.app.rest.matcher.CollectionMatcher;\n+import org.dspace.app.rest.matcher.CommunityMatcher;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.hamcrest.Matchers;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CommunityCollectionParentIT extends AbstractControllerIntegrationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06f5199ec7e5bd36b84349e2ac22ad286356c613"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkxOTY4OQ==", "bodyText": "can we use the same name convention used for the community to make easier follow the hierarchy? colAA1, colAA2, colAB1", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r383919689", "createdAt": "2020-02-25T14:40:52Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.builder.ItemBuilder;\n+import org.dspace.app.rest.matcher.CollectionMatcher;\n+import org.dspace.app.rest.matcher.CommunityMatcher;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.hamcrest.Matchers;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CommunityCollectionParentIT extends AbstractControllerIntegrationTest {\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private CommunityService communityService;\n+\n+    Community communityA;\n+    Community communityB;\n+    Community communityAA;\n+    Community communityAB;\n+\n+    Collection col1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06f5199ec7e5bd36b84349e2ac22ad286356c613"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkyMDQxNQ==", "bodyText": "as above, maybe itemAA, itemAAmappedInAB, itemAB", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r383920415", "createdAt": "2020-02-25T14:41:58Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.builder.ItemBuilder;\n+import org.dspace.app.rest.matcher.CollectionMatcher;\n+import org.dspace.app.rest.matcher.CommunityMatcher;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.hamcrest.Matchers;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CommunityCollectionParentIT extends AbstractControllerIntegrationTest {\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private CommunityService communityService;\n+\n+    Community communityA;\n+    Community communityB;\n+    Community communityAA;\n+    Community communityAB;\n+\n+    Collection col1;\n+    Collection col2;\n+    Collection col3;\n+\n+    Item itemX;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06f5199ec7e5bd36b84349e2ac22ad286356c613"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkyMTE1Nw==", "bodyText": "my suggestion is to remove this test as it is functionally equivalent to col1ParentCommunityTest", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r383921157", "createdAt": "2020-02-25T14:43:06Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.builder.ItemBuilder;\n+import org.dspace.app.rest.matcher.CollectionMatcher;\n+import org.dspace.app.rest.matcher.CommunityMatcher;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.hamcrest.Matchers;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CommunityCollectionParentIT extends AbstractControllerIntegrationTest {\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private CommunityService communityService;\n+\n+    Community communityA;\n+    Community communityB;\n+    Community communityAA;\n+    Community communityAB;\n+\n+    Collection col1;\n+    Collection col2;\n+    Collection col3;\n+\n+    Item itemX;\n+    Item itemY;\n+    Item itemZ;\n+\n+\n+    @Before\n+    public void setup() throws SQLException, AuthorizeException {\n+        //We turn off the authorization system in order to create the structure as defined below\n+        context.turnOffAuthorisationSystem();\n+        //** GIVEN **\n+        //1. A community-collection structure with one parent community with sub-community and one collection.\n+        communityA = CommunityBuilder.createCommunity(context)\n+                                     .withName(\"Parent CommunityA\")\n+                                     .build();\n+        communityB = CommunityBuilder.createCommunity(context)\n+                                     .withName(\"Parent CommunityB\")\n+                                     .build();\n+        communityAA = CommunityBuilder.createSubCommunity(context, communityA)\n+                                      .withName(\"Sub Community\")\n+                                      .build();\n+        communityAB = CommunityBuilder.createSubCommunity(context, communityA)\n+                                      .withName(\"Sub Community Two\")\n+                                      .build();\n+        col1 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 1\").build();\n+        col2 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 2\").build();\n+        col3 = CollectionBuilder.createCollection(context, communityAB).withName(\"Collection 3\").build();\n+        communityService.addCollection(context, communityAB, col2);\n+\n+\n+        itemX = ItemBuilder.createItem(context, col1)\n+                           .withTitle(\"Public item 1\")\n+                           .withIssueDate(\"2017-10-17\")\n+                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                           .withSubject(\"ExtraEntry\")\n+                           .build();\n+\n+        itemY = ItemBuilder.createItem(context, col1)\n+                           .withTitle(\"Public item 1\")\n+                           .withIssueDate(\"2017-10-17\")\n+                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                           .withSubject(\"ExtraEntry\")\n+                           .build();\n+        collectionService.addItem(context, col2, itemY);\n+        itemZ = ItemBuilder.createItem(context, col2)\n+                           .withTitle(\"Public item 1\")\n+                           .withIssueDate(\"2017-10-17\")\n+                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                           .withSubject(\"ExtraEntry\")\n+                           .build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void itemXOwningCollectionTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/items/\" + itemX.getID() + \"/owningCollection\"))\n+                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(col1.getName(), col1.getID(),\n+                                                                                           col1.getHandle()))))\n+                        .andExpect(jsonPath(\"$\", Matchers\n+                            .not(is(CollectionMatcher\n+                                        .matchCollectionEntry(col2.getName(), col2.getID(), col2.getHandle())))));\n+\n+    }\n+\n+    @Test\n+    public void itemYOwningCollectionTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/items/\" + itemY.getID() + \"/owningCollection\"))\n+                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(col1.getName(), col1.getID(),\n+                                                                                           col1.getHandle()))))\n+                        .andExpect(jsonPath(\"$\", Matchers\n+                            .not(is(CollectionMatcher\n+                                        .matchCollectionEntry(col2.getName(), col2.getID(), col2.getHandle())))));\n+    }\n+\n+    @Test\n+    public void itemZOwningCollectionTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/items/\" + itemZ.getID() + \"/owningCollection\"))\n+                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(col2.getName(), col2.getID(),\n+                                                                                           col2.getHandle()))))\n+                        .andExpect(jsonPath(\"$\", Matchers\n+                            .not(is(CollectionMatcher\n+                                        .matchCollectionEntry(col1.getName(), col1.getID(), col1.getHandle())))));\n+\n+    }\n+\n+    @Test\n+    public void col1ParentCommunityTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + col1.getID() + \"/parentCommunity\"))\n+                        .andExpect(jsonPath(\"$\", is(CommunityMatcher\n+                                                        .matchCommunityEntry(communityAA.getName(), communityAA.getID(),\n+                                                                             communityAA.getHandle()))))\n+                        .andExpect(jsonPath(\"$\", not(is(CommunityMatcher.matchCommunityEntry(communityA.getName(),\n+                                                                                             communityA.getID(),\n+                                                                                             communityA.getHandle())))))\n+                        .andExpect(jsonPath(\"$\", not(is(CommunityMatcher.matchCommunityEntry(communityAB.getName(),\n+                                                                                             communityAB.getID(),\n+                                                                                             communityAB\n+                                                                                                 .getHandle())))));\n+\n+    }\n+\n+    @Test\n+    public void col2ParentCommunityTest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06f5199ec7e5bd36b84349e2ac22ad286356c613"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkyMTM3Nw==", "bodyText": "my suggestion is to remove this test as it is functionally equivalent to col1ParentCommunityTest", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r383921377", "createdAt": "2020-02-25T14:43:26Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.builder.ItemBuilder;\n+import org.dspace.app.rest.matcher.CollectionMatcher;\n+import org.dspace.app.rest.matcher.CommunityMatcher;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.hamcrest.Matchers;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CommunityCollectionParentIT extends AbstractControllerIntegrationTest {\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private CommunityService communityService;\n+\n+    Community communityA;\n+    Community communityB;\n+    Community communityAA;\n+    Community communityAB;\n+\n+    Collection col1;\n+    Collection col2;\n+    Collection col3;\n+\n+    Item itemX;\n+    Item itemY;\n+    Item itemZ;\n+\n+\n+    @Before\n+    public void setup() throws SQLException, AuthorizeException {\n+        //We turn off the authorization system in order to create the structure as defined below\n+        context.turnOffAuthorisationSystem();\n+        //** GIVEN **\n+        //1. A community-collection structure with one parent community with sub-community and one collection.\n+        communityA = CommunityBuilder.createCommunity(context)\n+                                     .withName(\"Parent CommunityA\")\n+                                     .build();\n+        communityB = CommunityBuilder.createCommunity(context)\n+                                     .withName(\"Parent CommunityB\")\n+                                     .build();\n+        communityAA = CommunityBuilder.createSubCommunity(context, communityA)\n+                                      .withName(\"Sub Community\")\n+                                      .build();\n+        communityAB = CommunityBuilder.createSubCommunity(context, communityA)\n+                                      .withName(\"Sub Community Two\")\n+                                      .build();\n+        col1 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 1\").build();\n+        col2 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 2\").build();\n+        col3 = CollectionBuilder.createCollection(context, communityAB).withName(\"Collection 3\").build();\n+        communityService.addCollection(context, communityAB, col2);\n+\n+\n+        itemX = ItemBuilder.createItem(context, col1)\n+                           .withTitle(\"Public item 1\")\n+                           .withIssueDate(\"2017-10-17\")\n+                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                           .withSubject(\"ExtraEntry\")\n+                           .build();\n+\n+        itemY = ItemBuilder.createItem(context, col1)\n+                           .withTitle(\"Public item 1\")\n+                           .withIssueDate(\"2017-10-17\")\n+                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                           .withSubject(\"ExtraEntry\")\n+                           .build();\n+        collectionService.addItem(context, col2, itemY);\n+        itemZ = ItemBuilder.createItem(context, col2)\n+                           .withTitle(\"Public item 1\")\n+                           .withIssueDate(\"2017-10-17\")\n+                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                           .withSubject(\"ExtraEntry\")\n+                           .build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void itemXOwningCollectionTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/items/\" + itemX.getID() + \"/owningCollection\"))\n+                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(col1.getName(), col1.getID(),\n+                                                                                           col1.getHandle()))))\n+                        .andExpect(jsonPath(\"$\", Matchers\n+                            .not(is(CollectionMatcher\n+                                        .matchCollectionEntry(col2.getName(), col2.getID(), col2.getHandle())))));\n+\n+    }\n+\n+    @Test\n+    public void itemYOwningCollectionTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/items/\" + itemY.getID() + \"/owningCollection\"))\n+                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(col1.getName(), col1.getID(),\n+                                                                                           col1.getHandle()))))\n+                        .andExpect(jsonPath(\"$\", Matchers\n+                            .not(is(CollectionMatcher\n+                                        .matchCollectionEntry(col2.getName(), col2.getID(), col2.getHandle())))));\n+    }\n+\n+    @Test\n+    public void itemZOwningCollectionTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/items/\" + itemZ.getID() + \"/owningCollection\"))\n+                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(col2.getName(), col2.getID(),\n+                                                                                           col2.getHandle()))))\n+                        .andExpect(jsonPath(\"$\", Matchers\n+                            .not(is(CollectionMatcher\n+                                        .matchCollectionEntry(col1.getName(), col1.getID(), col1.getHandle())))));\n+\n+    }\n+\n+    @Test\n+    public void col1ParentCommunityTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + col1.getID() + \"/parentCommunity\"))\n+                        .andExpect(jsonPath(\"$\", is(CommunityMatcher\n+                                                        .matchCommunityEntry(communityAA.getName(), communityAA.getID(),\n+                                                                             communityAA.getHandle()))))\n+                        .andExpect(jsonPath(\"$\", not(is(CommunityMatcher.matchCommunityEntry(communityA.getName(),\n+                                                                                             communityA.getID(),\n+                                                                                             communityA.getHandle())))))\n+                        .andExpect(jsonPath(\"$\", not(is(CommunityMatcher.matchCommunityEntry(communityAB.getName(),\n+                                                                                             communityAB.getID(),\n+                                                                                             communityAB\n+                                                                                                 .getHandle())))));\n+\n+    }\n+\n+    @Test\n+    public void col2ParentCommunityTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token)\n+            .perform(get(\"/api/core/collections/\" + col2.getID() + \"/parentCommunity\"))\n+            .andExpect(jsonPath(\"$\", is(CommunityMatcher.matchCommunityEntry(communityAA.getName(), communityAA.getID(),\n+                                                                             communityAA.getHandle()))))\n+            .andExpect(jsonPath(\"$\", not(is(CommunityMatcher\n+                                                .matchCommunityEntry(communityA.getName(), communityA.getID(),\n+                                                                     communityA.getHandle())))))\n+            .andExpect(jsonPath(\"$\", not(is(CommunityMatcher\n+                                                .matchCommunityEntry(communityAB.getName(), communityAB.getID(),\n+                                                                     communityAB.getHandle())))));\n+\n+    }\n+\n+    @Test\n+    public void col3ParentCommunityTest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06f5199ec7e5bd36b84349e2ac22ad286356c613"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkyMzU1Nw==", "bodyText": "we need all the test related to the security and wrong scenarios.\nThe specified item, collection, community\n\ndon't exist, don't make sense (i.e. it is not an uuid) -> (404)\nare not visibile (401, 403)\nthe starting object is visible but the parent is not visible (401, 403)", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r383923557", "createdAt": "2020-02-25T14:46:37Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionParentIT.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.builder.ItemBuilder;\n+import org.dspace.app.rest.matcher.CollectionMatcher;\n+import org.dspace.app.rest.matcher.CommunityMatcher;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.hamcrest.Matchers;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CommunityCollectionParentIT extends AbstractControllerIntegrationTest {\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private CommunityService communityService;\n+\n+    Community communityA;\n+    Community communityB;\n+    Community communityAA;\n+    Community communityAB;\n+\n+    Collection col1;\n+    Collection col2;\n+    Collection col3;\n+\n+    Item itemX;\n+    Item itemY;\n+    Item itemZ;\n+\n+\n+    @Before\n+    public void setup() throws SQLException, AuthorizeException {\n+        //We turn off the authorization system in order to create the structure as defined below\n+        context.turnOffAuthorisationSystem();\n+        //** GIVEN **\n+        //1. A community-collection structure with one parent community with sub-community and one collection.\n+        communityA = CommunityBuilder.createCommunity(context)\n+                                     .withName(\"Parent CommunityA\")\n+                                     .build();\n+        communityB = CommunityBuilder.createCommunity(context)\n+                                     .withName(\"Parent CommunityB\")\n+                                     .build();\n+        communityAA = CommunityBuilder.createSubCommunity(context, communityA)\n+                                      .withName(\"Sub Community\")\n+                                      .build();\n+        communityAB = CommunityBuilder.createSubCommunity(context, communityA)\n+                                      .withName(\"Sub Community Two\")\n+                                      .build();\n+        col1 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 1\").build();\n+        col2 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 2\").build();\n+        col3 = CollectionBuilder.createCollection(context, communityAB).withName(\"Collection 3\").build();\n+        communityService.addCollection(context, communityAB, col2);\n+\n+\n+        itemX = ItemBuilder.createItem(context, col1)\n+                           .withTitle(\"Public item 1\")\n+                           .withIssueDate(\"2017-10-17\")\n+                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                           .withSubject(\"ExtraEntry\")\n+                           .build();\n+\n+        itemY = ItemBuilder.createItem(context, col1)\n+                           .withTitle(\"Public item 1\")\n+                           .withIssueDate(\"2017-10-17\")\n+                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                           .withSubject(\"ExtraEntry\")\n+                           .build();\n+        collectionService.addItem(context, col2, itemY);\n+        itemZ = ItemBuilder.createItem(context, col2)\n+                           .withTitle(\"Public item 1\")\n+                           .withIssueDate(\"2017-10-17\")\n+                           .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                           .withSubject(\"ExtraEntry\")\n+                           .build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void itemXOwningCollectionTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/items/\" + itemX.getID() + \"/owningCollection\"))\n+                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(col1.getName(), col1.getID(),\n+                                                                                           col1.getHandle()))))\n+                        .andExpect(jsonPath(\"$\", Matchers\n+                            .not(is(CollectionMatcher\n+                                        .matchCollectionEntry(col2.getName(), col2.getID(), col2.getHandle())))));\n+\n+    }\n+\n+    @Test\n+    public void itemYOwningCollectionTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/items/\" + itemY.getID() + \"/owningCollection\"))\n+                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(col1.getName(), col1.getID(),\n+                                                                                           col1.getHandle()))))\n+                        .andExpect(jsonPath(\"$\", Matchers\n+                            .not(is(CollectionMatcher\n+                                        .matchCollectionEntry(col2.getName(), col2.getID(), col2.getHandle())))));\n+    }\n+\n+    @Test\n+    public void itemZOwningCollectionTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/items/\" + itemZ.getID() + \"/owningCollection\"))\n+                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(col2.getName(), col2.getID(),\n+                                                                                           col2.getHandle()))))\n+                        .andExpect(jsonPath(\"$\", Matchers\n+                            .not(is(CollectionMatcher\n+                                        .matchCollectionEntry(col1.getName(), col1.getID(), col1.getHandle())))));\n+\n+    }\n+\n+    @Test\n+    public void col1ParentCommunityTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + col1.getID() + \"/parentCommunity\"))\n+                        .andExpect(jsonPath(\"$\", is(CommunityMatcher\n+                                                        .matchCommunityEntry(communityAA.getName(), communityAA.getID(),\n+                                                                             communityAA.getHandle()))))\n+                        .andExpect(jsonPath(\"$\", not(is(CommunityMatcher.matchCommunityEntry(communityA.getName(),\n+                                                                                             communityA.getID(),\n+                                                                                             communityA.getHandle())))))\n+                        .andExpect(jsonPath(\"$\", not(is(CommunityMatcher.matchCommunityEntry(communityAB.getName(),\n+                                                                                             communityAB.getID(),\n+                                                                                             communityAB\n+                                                                                                 .getHandle())))));\n+\n+    }\n+\n+    @Test\n+    public void col2ParentCommunityTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token)\n+            .perform(get(\"/api/core/collections/\" + col2.getID() + \"/parentCommunity\"))\n+            .andExpect(jsonPath(\"$\", is(CommunityMatcher.matchCommunityEntry(communityAA.getName(), communityAA.getID(),\n+                                                                             communityAA.getHandle()))))\n+            .andExpect(jsonPath(\"$\", not(is(CommunityMatcher\n+                                                .matchCommunityEntry(communityA.getName(), communityA.getID(),\n+                                                                     communityA.getHandle())))))\n+            .andExpect(jsonPath(\"$\", not(is(CommunityMatcher\n+                                                .matchCommunityEntry(communityAB.getName(), communityAB.getID(),\n+                                                                     communityAB.getHandle())))));\n+\n+    }\n+\n+    @Test\n+    public void col3ParentCommunityTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token)\n+            .perform(get(\"/api/core/collections/\" + col3.getID() + \"/parentCommunity\"))\n+            .andExpect(jsonPath(\"$\", is(CommunityMatcher.matchCommunityEntry(communityAB.getName(), communityAB.getID(),\n+                                                                             communityAB.getHandle()))))\n+            .andExpect(jsonPath(\"$\", not(is(CommunityMatcher\n+                                                .matchCommunityEntry(communityA.getName(), communityA.getID(),\n+                                                                     communityA.getHandle())))))\n+            .andExpect(jsonPath(\"$\", not(is(CommunityMatcher\n+                                                .matchCommunityEntry(communityAA.getName(), communityAA.getID(),\n+                                                                     communityAA.getHandle())))));\n+\n+    }\n+\n+    @Test\n+    public void comAAParentCommunityTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token)\n+            .perform(get(\"/api/core/communities/\" + communityAA.getID() + \"/parentCommunity\"))\n+            .andExpect(jsonPath(\"$\", Matchers\n+                .is(CommunityMatcher.matchCommunityEntry(communityA.getID(), communityA.getHandle()))))\n+            .andExpect(jsonPath(\"$\", Matchers\n+                .not(Matchers.is(CommunityMatcher.matchCommunityEntry(communityB.getID(), communityB.getHandle())))));\n+\n+    }\n+\n+    @Test\n+    public void comAParentCommunityTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/communities/\" + communityA.getID() + \"/parentCommunity\"))\n+                        .andExpect(status().isNoContent());\n+\n+\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06f5199ec7e5bd36b84349e2ac22ad286356c613"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkyNTQ5Ng==", "bodyText": "please don't reduce the scope of the matcher as this would have the effect to reduce the usefulness of the existing tests. Instead, if a new match method that exclude embedded is required overload the method", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r383925496", "createdAt": "2020-02-25T14:49:33Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/matcher/CollectionMatcher.java", "diffHunk": "@@ -31,8 +31,7 @@ private CollectionMatcher() {\n     public static Matcher<? super Object> matchCollectionEntry(String name, UUID uuid, String handle, Bitstream logo) {\n         return allOf(\n                 matchProperties(name, uuid, handle),\n-                matchLinks(uuid),\n-                matchLogo(logo)\n+                matchLinks(uuid)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06f5199ec7e5bd36b84349e2ac22ad286356c613"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkyNTc3OQ==", "bodyText": "again better overload the method than reduce the checks", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r383925779", "createdAt": "2020-02-25T14:49:58Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/matcher/CommunityMatcher.java", "diffHunk": "@@ -31,8 +31,6 @@ private CommunityMatcher() { }\n                 hasJsonPath(\"$.uuid\", is(uuid.toString())),\n                 hasJsonPath(\"$.handle\", is(handle)),\n                 hasJsonPath(\"$.type\", is(\"community\")),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06f5199ec7e5bd36b84349e2ac22ad286356c613"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkyNTg5OQ==", "bodyText": "again better overload the method than reduce the checks", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r383925899", "createdAt": "2020-02-25T14:50:09Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/matcher/CommunityMatcher.java", "diffHunk": "@@ -55,8 +53,6 @@ private CommunityMatcher() { }\n     public static Matcher<? super Object> matchCommunityEntry(String name, UUID uuid, String handle) {\n         return allOf(\n             matchProperties(name, uuid, handle),\n-            hasJsonPath(\"$._embedded.collections\", Matchers.not(Matchers.empty())),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06f5199ec7e5bd36b84349e2ac22ad286356c613"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abf82a3f465464a7b52a9dc107406351709464c5", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/abf82a3f465464a7b52a9dc107406351709464c5", "committedDate": "2020-02-27T14:01:21Z", "message": "[Task 69130] applied feedback to the breadcrumbs functionality"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NzkxMjQ3", "url": "https://github.com/DSpace/DSpace/pull/2673#pullrequestreview-365791247", "createdAt": "2020-02-27T16:11:54Z", "commit": {"oid": "abf82a3f465464a7b52a9dc107406351709464c5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNjoxMTo1NFrOFvXZkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNjoxMTo1NFrOFvXZkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIxMDc2OQ==", "bodyText": "we need a bug issue for that", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r385210769", "createdAt": "2020-02-27T16:11:54Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionItemParentIT.java", "diffHunk": "@@ -0,0 +1,374 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.builder.ItemBuilder;\n+import org.dspace.app.rest.matcher.CollectionMatcher;\n+import org.dspace.app.rest.matcher.CommunityMatcher;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.hamcrest.Matchers;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CommunityCollectionItemParentIT extends AbstractControllerIntegrationTest {\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private CommunityService communityService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    Community communityA;\n+    Community communityB;\n+    Community communityAA;\n+    Community communityAB;\n+\n+    Collection colAA1;\n+    Collection colAA2;\n+    Collection colAB1;\n+\n+    Item itemAA1;\n+    Item itemAA1MappedInAA2;\n+    Item itemAA2;\n+\n+\n+    @Before\n+    public void setup() throws SQLException, AuthorizeException {\n+        //We turn off the authorization system in order to create the structure as defined below\n+        context.turnOffAuthorisationSystem();\n+        //** GIVEN **\n+        //1. A community-collection structure with one parent community with sub-community and one collection.\n+        communityA = CommunityBuilder.createCommunity(context)\n+                                     .withName(\"Parent CommunityA\")\n+                                     .build();\n+        communityB = CommunityBuilder.createCommunity(context)\n+                                     .withName(\"Parent CommunityB\")\n+                                     .build();\n+        communityAA = CommunityBuilder.createSubCommunity(context, communityA)\n+                                      .withName(\"Sub Community\")\n+                                      .build();\n+        communityAB = CommunityBuilder.createSubCommunity(context, communityA)\n+                                      .withName(\"Sub Community Two\")\n+                                      .build();\n+        colAA1 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 1\").build();\n+        colAA2 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 2\").build();\n+        colAB1 = CollectionBuilder.createCollection(context, communityAB).withName(\"Collection 3\").build();\n+        communityService.addCollection(context, communityAB, colAA2);\n+\n+\n+        itemAA1 = ItemBuilder.createItem(context, colAA1)\n+                             .withTitle(\"Public item 1\")\n+                             .withIssueDate(\"2017-10-17\")\n+                             .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                             .withSubject(\"ExtraEntry\")\n+                             .build();\n+\n+        itemAA1MappedInAA2 = ItemBuilder.createItem(context, colAA1)\n+                                        .withTitle(\"Public item 1\")\n+                                        .withIssueDate(\"2017-10-17\")\n+                                        .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                                        .withSubject(\"ExtraEntry\")\n+                                        .build();\n+        collectionService.addItem(context, colAA2, itemAA1MappedInAA2);\n+        itemAA2 = ItemBuilder.createItem(context, colAA2)\n+                             .withTitle(\"Public item 1\")\n+                             .withIssueDate(\"2017-10-17\")\n+                             .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                             .withSubject(\"ExtraEntry\")\n+                             .build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void itemXOwningCollectionTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/items/\" + itemAA1.getID() + \"/owningCollection\"))\n+                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(colAA1.getName(),\n+                                                                                           colAA1.getID(),\n+                                                                                           colAA1.getHandle()))))\n+                        .andExpect(jsonPath(\"$\", Matchers\n+                            .not(is(CollectionMatcher\n+                                        .matchCollectionEntry(colAA2.getName(), colAA2.getID(), colAA2.getHandle())))));\n+\n+    }\n+\n+    @Test\n+    public void itemYOwningCollectionTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/items/\" + itemAA1MappedInAA2.getID() + \"/owningCollection\"))\n+                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(colAA1.getName(),\n+                                                                                           colAA1.getID(),\n+                                                                                           colAA1.getHandle()))))\n+                        .andExpect(jsonPath(\"$\", Matchers\n+                            .not(is(CollectionMatcher\n+                                        .matchCollectionEntry(colAA2.getName(), colAA2.getID(), colAA2.getHandle())))));\n+    }\n+\n+    @Test\n+    public void itemZOwningCollectionTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/items/\" + itemAA2.getID() + \"/owningCollection\"))\n+                        .andExpect(jsonPath(\"$\", is(CollectionMatcher.matchCollectionEntry(colAA2.getName(),\n+                                                                                           colAA2.getID(),\n+                                                                                           colAA2.getHandle()))))\n+                        .andExpect(jsonPath(\"$\", Matchers\n+                            .not(is(CollectionMatcher\n+                                        .matchCollectionEntry(colAA1.getName(), colAA1.getID(), colAA1.getHandle())))));\n+\n+    }\n+\n+    @Test\n+    public void col1ParentCommunityTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + colAA1.getID() + \"/parentCommunity\"))\n+                        .andExpect(jsonPath(\"$\", is(CommunityMatcher\n+                                                        .matchCommunityEntry(communityAA.getName(), communityAA.getID(),\n+                                                                             communityAA.getHandle()))))\n+                        .andExpect(jsonPath(\"$\", not(is(CommunityMatcher.matchCommunityEntry(communityA.getName(),\n+                                                                                             communityA.getID(),\n+                                                                                             communityA.getHandle())))))\n+                        .andExpect(jsonPath(\"$\", not(is(CommunityMatcher.matchCommunityEntry(communityAB.getName(),\n+                                                                                             communityAB.getID(),\n+                                                                                             communityAB\n+                                                                                                 .getHandle())))));\n+\n+    }\n+\n+    @Test\n+    public void comAAParentCommunityTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token)\n+            .perform(get(\"/api/core/communities/\" + communityAA.getID() + \"/parentCommunity\"))\n+            .andExpect(jsonPath(\"$\", Matchers\n+                .is(CommunityMatcher.matchCommunityEntry(communityA.getID(), communityA.getHandle()))))\n+            .andExpect(jsonPath(\"$\", Matchers\n+                .not(Matchers.is(CommunityMatcher.matchCommunityEntry(communityB.getID(), communityB.getHandle())))));\n+\n+    }\n+\n+    @Test\n+    public void comAParentCommunityTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/communities/\" + communityA.getID() + \"/parentCommunity\"))\n+                        .andExpect(status().isNoContent());\n+\n+\n+    }\n+\n+    @Test\n+    public void parentCommunityWrongUUIDTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/communities/\" + UUID.randomUUID() + \"/parentCommunity\"))\n+                        .andExpect(status().isNotFound());\n+\n+\n+    }\n+\n+    @Test\n+    public void parentCommunityPrivateCommunityUnAuthorizedTest() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        authorizeService.removeAllPolicies(context, communityAA);\n+        context.restoreAuthSystemState();\n+        getClient().perform(get(\"/api/core/communities/\" + communityAA.getID() + \"/parentCommunity\"))\n+            .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    //Enable this test when this security level has been supported\n+    @Ignore\n+    @Test\n+    public void parentCommunityPrivateParentCommunityUnAuthorizedTest() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        authorizeService.removeAllPolicies(context, communityA);\n+        context.restoreAuthSystemState();\n+        getClient().perform(get(\"/api/core/communities/\" + communityAA.getID() + \"/parentCommunity\"))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    @Test\n+    public void parentCommunityPrivateCommunityForbiddenTest() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        authorizeService.removeAllPolicies(context, communityAA);\n+        context.restoreAuthSystemState();\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/communities/\" + communityAA.getID() + \"/parentCommunity\"))\n+                   .andExpect(status().isForbidden());\n+\n+    }\n+\n+    //Enable this test when this security level has been supported\n+    @Ignore\n+    @Test\n+    public void parentCommunityPrivateParentCommunityForbiddenTest() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        authorizeService.removeAllPolicies(context, communityA);\n+        context.restoreAuthSystemState();\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/communities/\" + communityAA.getID() + \"/parentCommunity\"))\n+                        .andExpect(status().isForbidden());\n+\n+    }\n+\n+    @Test\n+    public void parentCommunityForCollectionWrongUUIDTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+        getClient(token).perform(get(\"/api/core/collections/\" + UUID.randomUUID() + \"/parentCommunity\"))\n+                        .andExpect(status().isNotFound());\n+\n+\n+    }\n+\n+    @Test\n+    public void parentCommunityForCollectionPrivateCollectionUnAuthorizedTest() throws Exception {\n+\n+        context.turnOffAuthorisationSystem();\n+        authorizeService.removeAllPolicies(context, colAA1);\n+        context.restoreAuthSystemState();\n+        getClient().perform(get(\"/api/core/collections/\" + colAA1.getID() + \"/parentCommunity\"))\n+                   .andExpect(status().isUnauthorized());\n+\n+    }\n+\n+    //Enable this test when this security level has been supported", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abf82a3f465464a7b52a9dc107406351709464c5"}, "originalPosition": 274}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NzkzMjc4", "url": "https://github.com/DSpace/DSpace/pull/2673#pullrequestreview-365793278", "createdAt": "2020-02-27T16:14:11Z", "commit": {"oid": "abf82a3f465464a7b52a9dc107406351709464c5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNjoxNDoxMVrOFvXfgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNjoxNDoxMVrOFvXfgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIxMjI5MA==", "bodyText": "can you rename the test methods according to the refactored name of the items variable?", "url": "https://github.com/DSpace/DSpace/pull/2673#discussion_r385212290", "createdAt": "2020-02-27T16:14:11Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityCollectionItemParentIT.java", "diffHunk": "@@ -0,0 +1,374 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.sql.SQLException;\n+import java.util.UUID;\n+\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.builder.ItemBuilder;\n+import org.dspace.app.rest.matcher.CollectionMatcher;\n+import org.dspace.app.rest.matcher.CommunityMatcher;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.Item;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.hamcrest.Matchers;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class CommunityCollectionItemParentIT extends AbstractControllerIntegrationTest {\n+\n+    @Autowired\n+    private CollectionService collectionService;\n+\n+    @Autowired\n+    private CommunityService communityService;\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    Community communityA;\n+    Community communityB;\n+    Community communityAA;\n+    Community communityAB;\n+\n+    Collection colAA1;\n+    Collection colAA2;\n+    Collection colAB1;\n+\n+    Item itemAA1;\n+    Item itemAA1MappedInAA2;\n+    Item itemAA2;\n+\n+\n+    @Before\n+    public void setup() throws SQLException, AuthorizeException {\n+        //We turn off the authorization system in order to create the structure as defined below\n+        context.turnOffAuthorisationSystem();\n+        //** GIVEN **\n+        //1. A community-collection structure with one parent community with sub-community and one collection.\n+        communityA = CommunityBuilder.createCommunity(context)\n+                                     .withName(\"Parent CommunityA\")\n+                                     .build();\n+        communityB = CommunityBuilder.createCommunity(context)\n+                                     .withName(\"Parent CommunityB\")\n+                                     .build();\n+        communityAA = CommunityBuilder.createSubCommunity(context, communityA)\n+                                      .withName(\"Sub Community\")\n+                                      .build();\n+        communityAB = CommunityBuilder.createSubCommunity(context, communityA)\n+                                      .withName(\"Sub Community Two\")\n+                                      .build();\n+        colAA1 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 1\").build();\n+        colAA2 = CollectionBuilder.createCollection(context, communityAA).withName(\"Collection 2\").build();\n+        colAB1 = CollectionBuilder.createCollection(context, communityAB).withName(\"Collection 3\").build();\n+        communityService.addCollection(context, communityAB, colAA2);\n+\n+\n+        itemAA1 = ItemBuilder.createItem(context, colAA1)\n+                             .withTitle(\"Public item 1\")\n+                             .withIssueDate(\"2017-10-17\")\n+                             .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                             .withSubject(\"ExtraEntry\")\n+                             .build();\n+\n+        itemAA1MappedInAA2 = ItemBuilder.createItem(context, colAA1)\n+                                        .withTitle(\"Public item 1\")\n+                                        .withIssueDate(\"2017-10-17\")\n+                                        .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                                        .withSubject(\"ExtraEntry\")\n+                                        .build();\n+        collectionService.addItem(context, colAA2, itemAA1MappedInAA2);\n+        itemAA2 = ItemBuilder.createItem(context, colAA2)\n+                             .withTitle(\"Public item 1\")\n+                             .withIssueDate(\"2017-10-17\")\n+                             .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                             .withSubject(\"ExtraEntry\")\n+                             .build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void itemXOwningCollectionTest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abf82a3f465464a7b52a9dc107406351709464c5"}, "originalPosition": 112}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1Nzk4ODI2", "url": "https://github.com/DSpace/DSpace/pull/2673#pullrequestreview-365798826", "createdAt": "2020-02-27T16:20:39Z", "commit": {"oid": "abf82a3f465464a7b52a9dc107406351709464c5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1ODIwMDIx", "url": "https://github.com/DSpace/DSpace/pull/2673#pullrequestreview-365820021", "createdAt": "2020-02-27T16:45:18Z", "commit": {"oid": "abf82a3f465464a7b52a9dc107406351709464c5"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a54bfab4015afe1b3075eaff692dbb0c4facc3b", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/2a54bfab4015afe1b3075eaff692dbb0c4facc3b", "committedDate": "2020-02-28T13:34:32Z", "message": "[Task 69156] applied feedback to the breadcrumbs tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccf8aa905c4551485f660bdfa149c75f57e6984a", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/ccf8aa905c4551485f660bdfa149c75f57e6984a", "committedDate": "2020-02-28T14:12:04Z", "message": "Merge remote-tracking branch 'dspace/master' into w2p-68607_add-link-to-parent-community\n\nConflicts:\n\tdspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NDg1Nzcw", "url": "https://github.com/DSpace/DSpace/pull/2673#pullrequestreview-366485770", "createdAt": "2020-02-28T15:35:30Z", "commit": {"oid": "ccf8aa905c4551485f660bdfa149c75f57e6984a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1604, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}