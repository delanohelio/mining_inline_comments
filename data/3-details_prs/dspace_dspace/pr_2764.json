{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwNjgwNDU2", "number": 2764, "title": "CC License support", "bodyText": "References\n\nLink to REST Contract\n\nDescription\nThis contains:\n\nAccessing the list of CC licenses based on the cc.license.classfilter configuration\nRepresenting the list of CC licenses and the fields (questions) per license\nAttaching the CC license (with answers to the questions) to the workspace item\nVerifying which CC license has been attached to the workspace item\n\nInstructions for Reviewers\nIf you want to review on your local machine, make sure to comment out the \"cclicense\" step on 2 places in the item-submission.xml.\nChecklist\nThis checklist provides a reminder of what we are going to look for when reviewing your PR. You need not complete this checklist prior to creating your PR (draft PRs are always welcome). If you are unsure about an item in the checklist, don't hesitate to ask. We're here to help!\n\n My PR is small in size (e.g. less than 1,000 lines of code, not including comments & integration tests). Exceptions may be made if previously agreed upon.\n My PR passes Checkstyle validation based on the Code Style Guide\n My PR includes Javadoc for all new (or modified) public methods and classes. It also includes Javadoc for large or complex private methods.\n My PR passes all tests and includes new/updated Unit or Integration Tests for any bug fixes, improvements or new features. A few reminders about what constitutes good tests:\n\nInclude tests for different user types, including: (1) Anonymous user, (2) Logged in user (non-admin), and (3) Administrator.\nInclude tests for known error scenarios and error codes (e.g. 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found, etc)\nFor bug fixes, include a test that reproduces the bug and proves it is fixed. For clarity, it may be useful to provide the test in a separate commit from the bug fix.\n\n\n If my PR includes new, third-party dependencies (in any pom.xml), I've made sure their licenses align with the DSpace BSD License based on the Licensing of Contributions documentation.\n If my PR modifies the REST API, I've linked to the REST Contract page (or open PR) related to this change.", "createdAt": "2020-05-20T11:12:01Z", "url": "https://github.com/DSpace/DSpace/pull/2764", "merged": true, "mergeCommit": {"oid": "b3ec83d3a5b6f602b5c966a2fa607d33fc6ffa29"}, "closed": true, "closedAt": "2020-06-25T15:36:47Z", "author": {"login": "KevinVdV"}, "timelineItems": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVntVBAH2gAyNDIwNjgwNDU2OjZlMDM5NmU2YWQzM2NlZGJlODFhZGRkZjBlMTQ2ODg3YWJhZWE0ZDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuqxLyAH2gAyNDIwNjgwNDU2OjhjYWRkMTA1NDY4MTMyNjExZjQyYzIzZjk0YjgxM2FkMWIyMmU5MGM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6e0396e6ad33cedbe81adddf0e146887abaea4d9", "author": {"user": {"login": "YanaDePauw", "name": "Yana De Pauw"}}, "url": "https://github.com/DSpace/DSpace/commit/6e0396e6ad33cedbe81adddf0e146887abaea4d9", "committedDate": "2020-04-08T13:14:18Z", "message": "70213: Initial findAll endpoint & backend"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18c8efd95106f02ec12fe6edc9fb2abaf3735a0e", "author": {"user": {"login": "YanaDePauw", "name": "Yana De Pauw"}}, "url": "https://github.com/DSpace/DSpace/commit/18c8efd95106f02ec12fe6edc9fb2abaf3735a0e", "committedDate": "2020-04-09T12:26:39Z", "message": "70332: Implement feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f51a12d0106281d32885e1006d91f0c48110de05", "author": {"user": {"login": "YanaDePauw", "name": "Yana De Pauw"}}, "url": "https://github.com/DSpace/DSpace/commit/f51a12d0106281d32885e1006d91f0c48110de05", "committedDate": "2020-04-10T08:27:32Z", "message": "70334: CC license (REST): Initial fineOne endpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "794ee9fb9fc723c787709a35ba172ce522ca133c", "author": {"user": {"login": "YanaDePauw", "name": "Yana De Pauw"}}, "url": "https://github.com/DSpace/DSpace/commit/794ee9fb9fc723c787709a35ba172ce522ca133c", "committedDate": "2020-04-14T13:59:21Z", "message": "70337: Search CC License"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b30f9d9338b9008e47442bf43e28f9313d58bdaa", "author": {"user": {"login": "YanaDePauw", "name": "Yana De Pauw"}}, "url": "https://github.com/DSpace/DSpace/commit/b30f9d9338b9008e47442bf43e28f9313d58bdaa", "committedDate": "2020-04-16T14:51:02Z", "message": "70403: CC license (REST): New submission section"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5800bef325d38876b383fad6941a273e38069c4c", "author": {"user": {"login": "YanaDePauw", "name": "Yana De Pauw"}}, "url": "https://github.com/DSpace/DSpace/commit/5800bef325d38876b383fad6941a273e38069c4c", "committedDate": "2020-04-17T11:13:40Z", "message": "70403: Add javadocs, undo line adjustments, LicenseMetadataValue changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0920de7b21e7f5ccb6d88ae2128e6b533e0910bd", "author": {"user": {"login": "YanaDePauw", "name": "Yana De Pauw"}}, "url": "https://github.com/DSpace/DSpace/commit/0920de7b21e7f5ccb6d88ae2128e6b533e0910bd", "committedDate": "2020-04-20T10:57:49Z", "message": "70404: CC license (REST): Patch submission (Add)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09c0f62561795f3fefd22cac929d1cc9e6036f21", "author": {"user": {"login": "YanaDePauw", "name": "Yana De Pauw"}}, "url": "https://github.com/DSpace/DSpace/commit/09c0f62561795f3fefd22cac929d1cc9e6036f21", "committedDate": "2020-04-22T12:39:53Z", "message": "70505: Patch submission (Add): Bugfixing & tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a27b64c88f98732b3c4db7b62567ef6078f82ba5", "author": {"user": {"login": "YanaDePauw", "name": "Yana De Pauw"}}, "url": "https://github.com/DSpace/DSpace/commit/a27b64c88f98732b3c4db7b62567ef6078f82ba5", "committedDate": "2020-04-22T16:00:43Z", "message": "70506: CC license (REST): Patch submission (Remove)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36264cca50439249f97b7a3ebbdc3459f8c07f8a", "author": {"user": {"login": "KevinVdV", "name": "Kevin Van de Velde"}}, "url": "https://github.com/DSpace/DSpace/commit/36264cca50439249f97b7a3ebbdc3459f8c07f8a", "committedDate": "2020-04-23T12:57:54Z", "message": "Submission CreativeCommons license rest evaluator plugin addition so that it plays nicely with the access restrictions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b271ae662130405aa7b24c5a0cb6dbcec25aba68", "author": {"user": {"login": "YanaDePauw", "name": "Yana De Pauw"}}, "url": "https://github.com/DSpace/DSpace/commit/b271ae662130405aa7b24c5a0cb6dbcec25aba68", "committedDate": "2020-04-28T15:17:48Z", "message": "70338: Cleanup CC license code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e0b22ad6ca165a16fc608f8d424c66d2b69100d", "author": {"user": {"login": "YanaDePauw", "name": "Yana De Pauw"}}, "url": "https://github.com/DSpace/DSpace/commit/8e0b22ad6ca165a16fc608f8d424c66d2b69100d", "committedDate": "2020-04-29T09:17:17Z", "message": "70415: jurisdiction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5bbc72eceb1fcf3b323007dfb57affe32109524", "author": {"user": {"login": "YanaDePauw", "name": "Yana De Pauw"}}, "url": "https://github.com/DSpace/DSpace/commit/b5bbc72eceb1fcf3b323007dfb57affe32109524", "committedDate": "2020-05-08T10:57:07Z", "message": "70815: Angular feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfa83b75993edd7d428c6e5d25aa49586b754394", "author": {"user": {"login": "KevinVdV", "name": "Kevin Van de Velde"}}, "url": "https://github.com/DSpace/DSpace/commit/bfa83b75993edd7d428c6e5d25aa49586b754394", "committedDate": "2020-05-20T11:09:33Z", "message": "Disabling the CC License step in the default configuration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffce2e4299595055ba4d0d5e8b0d9e7719c02de8", "author": {"user": {"login": "YanaDePauw", "name": "Yana De Pauw"}}, "url": "https://github.com/DSpace/DSpace/commit/ffce2e4299595055ba4d0d5e8b0d9e7719c02de8", "committedDate": "2020-05-27T11:25:56Z", "message": "70815: Angular feedback - add self link"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df01297539dd6dd0d8e81dacb96eb25b75c58a74", "author": {"user": {"login": "KevinVdV", "name": "Kevin Van de Velde"}}, "url": "https://github.com/DSpace/DSpace/commit/df01297539dd6dd0d8e81dacb96eb25b75c58a74", "committedDate": "2020-05-27T15:11:52Z", "message": "Submission CC license: Adding overrides & removing unused class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c921d316f2ebb925127b9e73bf6b0ce553826db", "author": {"user": {"login": "YanaDePauw", "name": "Yana De Pauw"}}, "url": "https://github.com/DSpace/DSpace/commit/1c921d316f2ebb925127b9e73bf6b0ce553826db", "committedDate": "2020-05-28T15:02:49Z", "message": "Merge remote-tracking branch 'upstream/master' into w2p-70213_CC-license"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "614ad3d054e09046112caec89fd6bb68b3ffacee", "author": {"user": {"login": "YanaDePauw", "name": "Yana De Pauw"}}, "url": "https://github.com/DSpace/DSpace/commit/614ad3d054e09046112caec89fd6bb68b3ffacee", "committedDate": "2020-05-29T09:51:26Z", "message": "71199: Fix PR issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72ac35025054b6f2ea4da4ca15c7e877ba4506c7", "author": {"user": {"login": "YanaDePauw", "name": "Yana De Pauw"}}, "url": "https://github.com/DSpace/DSpace/commit/72ac35025054b6f2ea4da4ca15c7e877ba4506c7", "committedDate": "2020-05-29T11:19:20Z", "message": "Remove unused import"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMTE4NDY1", "url": "https://github.com/DSpace/DSpace/pull/2764#pullrequestreview-421118465", "createdAt": "2020-05-29T16:46:16Z", "commit": {"oid": "72ac35025054b6f2ea4da4ca15c7e877ba4506c7"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjo0NjoxNlrOGckUkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzowOTo0NFrOGclOxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYwODQwMA==", "bodyText": "I think we may want to require authorization here. It's not possible to submit an Item in DSpace without first authenticating, so this likely should be @PreAuthorize(\"hasAuthority('AUTHENTICATED')\")  (Also this would avoid a DSpace site being used to \"spam\" the CC License API if someone used this endpoint unauthenticated.)\nAlso, looking at this more closely, as this is a /search endpoint, I think we can move it to the SubmissionCCLicenseRestRepository class in a method annotated with @SearchRestMethod", "url": "https://github.com/DSpace/DSpace/pull/2764#discussion_r432608400", "createdAt": "2020-05-29T16:46:16Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/SubmissionCCLicenseSearchController.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.servlet.ServletRequest;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.dspace.app.rest.converter.ConverterService;\n+import org.dspace.app.rest.exception.DSpaceBadRequestException;\n+import org.dspace.app.rest.model.SubmissionCCLicenseRest;\n+import org.dspace.app.rest.model.SubmissionCCLicenseUrlRest;\n+import org.dspace.app.rest.model.hateoas.SubmissionCCLicenseUrlResource;\n+import org.dspace.app.rest.utils.Utils;\n+import org.dspace.license.service.CreativeCommonsService;\n+import org.dspace.services.RequestService;\n+import org.dspace.utils.DSpace;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+/**\n+ * This controller is responsible for searching the CC License URI\n+ */\n+@RestController\n+@RequestMapping(\"/api/\" + SubmissionCCLicenseRest.CATEGORY + \"/\" + SubmissionCCLicenseRest.PLURAL + \"/search\" +\n+        \"/rightsByQuestions\")\n+@PreAuthorize(\"permitAll()\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72ac35025054b6f2ea4da4ca15c7e877ba4506c7"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYwOTc0OQ==", "bodyText": "Shouldn't we be checking here to validate that at least one answer is provided in this request (and throw an error if no answers are provided)?  Is it possible to send a request with zero answers?\nI'd just like to avoid, as much as possible, sending invalid requests to the CC License API, as that could result in DSpace sites getting blocked if this REST endpoint is somehow able to be misused.", "url": "https://github.com/DSpace/DSpace/pull/2764#discussion_r432609749", "createdAt": "2020-05-29T16:48:41Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/SubmissionCCLicenseSearchController.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.servlet.ServletRequest;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.dspace.app.rest.converter.ConverterService;\n+import org.dspace.app.rest.exception.DSpaceBadRequestException;\n+import org.dspace.app.rest.model.SubmissionCCLicenseRest;\n+import org.dspace.app.rest.model.SubmissionCCLicenseUrlRest;\n+import org.dspace.app.rest.model.hateoas.SubmissionCCLicenseUrlResource;\n+import org.dspace.app.rest.utils.Utils;\n+import org.dspace.license.service.CreativeCommonsService;\n+import org.dspace.services.RequestService;\n+import org.dspace.utils.DSpace;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+/**\n+ * This controller is responsible for searching the CC License URI\n+ */\n+@RestController\n+@RequestMapping(\"/api/\" + SubmissionCCLicenseRest.CATEGORY + \"/\" + SubmissionCCLicenseRest.PLURAL + \"/search\" +\n+        \"/rightsByQuestions\")\n+@PreAuthorize(\"permitAll()\")\n+public class SubmissionCCLicenseSearchController {\n+\n+    @Autowired\n+    protected Utils utils;\n+\n+    @Autowired\n+    protected CreativeCommonsService creativeCommonsService;\n+\n+    @Autowired\n+    protected ConverterService converter;\n+\n+    protected RequestService requestService = new DSpace().getRequestService();\n+\n+    /**\n+     * Retrieves the CC License URI based on the license ID and answers in the field questions, provided as parameters\n+     * to this request\n+     *\n+     * @return the CC License URI as a SubmissionCCLicenseUrlResource\n+     */\n+    @RequestMapping(method = RequestMethod.GET)\n+    public SubmissionCCLicenseUrlResource findByRightsByQuestions() {\n+        ServletRequest servletRequest = requestService.getCurrentRequest()\n+                                                      .getServletRequest();\n+        Map<String, String[]> requestParameterMap = servletRequest\n+                .getParameterMap();\n+        Map<String, String> parameterMap = new HashMap<>();\n+        String licenseId = servletRequest.getParameter(\"license\");\n+        if (StringUtils.isBlank(licenseId)) {\n+            throw new DSpaceBadRequestException(\n+                    \"A \\\"license\\\" parameter needs to be provided.\");\n+        }\n+        for (String parameter : requestParameterMap.keySet()) {\n+            if (StringUtils.startsWith(parameter, \"answer_\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72ac35025054b6f2ea4da4ca15c7e877ba4506c7"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYxNDQyNw==", "bodyText": "I'm not sure I understand where/how this resource is used. I'm not seeing any examples of a \"submissioncclicenseUrl\" resource in the original Contract at DSpace/RestContract#110  Could we update the contract to describe this or provide examples of this?", "url": "https://github.com/DSpace/DSpace/pull/2764#discussion_r432614427", "createdAt": "2020-05-29T16:56:40Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/model/hateoas/SubmissionCCLicenseUrlResource.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.model.hateoas;\n+\n+import org.dspace.app.rest.model.SubmissionCCLicenseUrlRest;\n+import org.dspace.app.rest.model.hateoas.annotations.RelNameDSpaceResource;\n+import org.dspace.app.rest.utils.Utils;\n+\n+/**\n+ * SubmissionCCLicenseUrl HAL Resource. This resource adds the data from the REST object together with embedded objects\n+ * and a set of links if applicable\n+ */\n+@RelNameDSpaceResource(SubmissionCCLicenseUrlRest.NAME)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72ac35025054b6f2ea4da4ca15c7e877ba4506c7"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYxNTEwMg==", "bodyText": "Again, I don't think these should be permitAll.  I think we should limit to authenticated users if possible. We don't want to spam the CC API.", "url": "https://github.com/DSpace/DSpace/pull/2764#discussion_r432615102", "createdAt": "2020-05-29T16:57:17Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/SubmissionCCLicenseRestRepository.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.util.List;\n+\n+import org.dspace.app.rest.model.SubmissionCCLicenseRest;\n+import org.dspace.core.Context;\n+import org.dspace.license.CCLicense;\n+import org.dspace.license.service.CreativeCommonsService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * This is the repository that is responsible to manage CCLicense Rest objects\n+ */\n+@Component(SubmissionCCLicenseRest.CATEGORY + \".\" + SubmissionCCLicenseRest.NAME)\n+public class SubmissionCCLicenseRestRepository extends DSpaceRestRepository<SubmissionCCLicenseRest, String> {\n+\n+    @Autowired\n+    protected CreativeCommonsService creativeCommonsService;\n+\n+    @Override\n+    @PreAuthorize(\"permitAll()\")\n+    public SubmissionCCLicenseRest findOne(final Context context, final String licenseId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72ac35025054b6f2ea4da4ca15c7e877ba4506c7"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYxNTMwNw==", "bodyText": "Same here, should require authentication.", "url": "https://github.com/DSpace/DSpace/pull/2764#discussion_r432615307", "createdAt": "2020-05-29T16:57:30Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/SubmissionCCLicenseRestRepository.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.repository;\n+\n+import java.util.List;\n+\n+import org.dspace.app.rest.model.SubmissionCCLicenseRest;\n+import org.dspace.core.Context;\n+import org.dspace.license.CCLicense;\n+import org.dspace.license.service.CreativeCommonsService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * This is the repository that is responsible to manage CCLicense Rest objects\n+ */\n+@Component(SubmissionCCLicenseRest.CATEGORY + \".\" + SubmissionCCLicenseRest.NAME)\n+public class SubmissionCCLicenseRestRepository extends DSpaceRestRepository<SubmissionCCLicenseRest, String> {\n+\n+    @Autowired\n+    protected CreativeCommonsService creativeCommonsService;\n+\n+    @Override\n+    @PreAuthorize(\"permitAll()\")\n+    public SubmissionCCLicenseRest findOne(final Context context, final String licenseId) {\n+        CCLicense ccLicense = creativeCommonsService.findOne(licenseId);\n+        if (ccLicense == null) {\n+            throw new ResourceNotFoundException(\"No CC license could be found for ID: \" + licenseId );\n+        }\n+        return converter.toRest(ccLicense, utils.obtainProjection());\n+    }\n+\n+    @Override\n+    @PreAuthorize(\"permitAll()\")\n+    public Page<SubmissionCCLicenseRest> findAll(final Context context, final Pageable pageable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72ac35025054b6f2ea4da4ca15c7e877ba4506c7"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYxOTM4Nw==", "bodyText": "Please rebase on the latest master as this file already exists on master.  So, I suspect a rebase will remove a lot of the changes here and make your PR smaller.", "url": "https://github.com/DSpace/DSpace/pull/2764#discussion_r432619387", "createdAt": "2020-05-29T17:03:49Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/data/dspaceFolder/config/item-submission.xml", "diffHunk": "@@ -0,0 +1,282 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n+<!DOCTYPE item-submission SYSTEM \"item-submission.dtd\">\n+\n+<!-- Configurable Submission configuration file -->\n+\n+<!-- This XML configuration file allows you to configure the ordering -->\n+<!-- and number of the steps that occur in the Item Submission Process. -->\n+<item-submission>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72ac35025054b6f2ea4da4ca15c7e877ba4506c7"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyMDI3OQ==", "bodyText": "Could we add a second test here to verify what happens if you attempt to Remove a non-existing license?", "url": "https://github.com/DSpace/DSpace/pull/2764#discussion_r432620279", "createdAt": "2020-05-29T17:05:30Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CCLicenseRemovePatchOperationIT.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.matchers.JsonPathMatchers.hasJsonPath;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.patch;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.ws.rs.core.MediaType;\n+\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.builder.WorkspaceItemBuilder;\n+import org.dspace.app.rest.model.patch.AddOperation;\n+import org.dspace.app.rest.model.patch.Operation;\n+import org.dspace.app.rest.model.patch.RemoveOperation;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.WorkspaceItem;\n+import org.junit.Test;\n+\n+/**\n+ * Class to test the methods from the CCLicenseRemovePatchOperation\n+ * Since the CC Licenses are obtained from the CC License API, a mock service has been implemented\n+ * This mock service will return a fixed set of CC Licenses using a similar structure to the ones obtained from the\n+ * CC License API.\n+ * Refer to {@link org.dspace.license.MockCCLicenseConnectorServiceImpl} for more information\n+ */\n+public class CCLicenseRemovePatchOperationIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Test\n+    public void patchRemoveSubmissionCCLicense() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        Community community = CommunityBuilder.createCommunity(context)\n+                                              .withName(\"Community\")\n+                                              .build();\n+\n+        Collection collection = CollectionBuilder.createCollection(context, community)\n+                                                 .withName(\"Collection\")\n+                                                 .build();\n+\n+        WorkspaceItem workspaceItem = WorkspaceItemBuilder.createWorkspaceItem(context, collection)\n+                                                          .withTitle(\"Workspace Item\")\n+                                                          .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String adminToken = getAuthToken(admin.getEmail(), password);\n+\n+        // First add a license and verify it is added\n+        List<Operation> ops = new ArrayList<Operation>();\n+        AddOperation addOperation = new AddOperation(\"/sections/cclicense/uri\",\n+                                                     \"http://creativecommons.org/licenses/by-nc-sa/4.0/\");\n+\n+        ops.add(addOperation);\n+        String patchBody = getPatchContent(ops);\n+\n+\n+        getClient(adminToken).perform(patch(\"/api/submission/workspaceitems/\" + workspaceItem.getID())\n+                                              .content(patchBody)\n+                                              .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                             .andExpect(status().isOk())\n+                             .andExpect(jsonPath(\"$.sections.cclicense\", allOf(\n+                                     hasJsonPath(\"$.uri\", is(\"http://creativecommons.org/licenses/by-nc-sa/4.0/\")),\n+                                     hasJsonPath(\"$.rights\",\n+                                                 is(\"Attribution-NonCommercial-ShareAlike 4.0 International\")),\n+                                     hasJsonPath(\"$.file.name\", is(\"license_rdf\"))\n+                             )));\n+\n+\n+        // Remove the license again and verify it is removed\n+\n+        List<Operation> removeOps = new ArrayList<Operation>();\n+        RemoveOperation removeOperation = new RemoveOperation(\"/sections/cclicense/uri\");\n+\n+        removeOps.add(removeOperation);\n+        String removePatch = getPatchContent(removeOps);\n+\n+\n+        getClient(adminToken).perform(patch(\"/api/submission/workspaceitems/\" + workspaceItem.getID())\n+                                              .content(removePatch)\n+                                              .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                             .andExpect(status().isOk())\n+                             .andExpect(jsonPath(\"$.sections\", not(hasJsonPath(\"cclicense\"))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72ac35025054b6f2ea4da4ca15c7e877ba4506c7"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyMTkxMw==", "bodyText": "As noted above, I think we should likely require authentication on these endpoints.  So, we should enhance all the tests in this file to check that the endpoints return errors if unauthenticated.", "url": "https://github.com/DSpace/DSpace/pull/2764#discussion_r432621913", "createdAt": "2020-05-29T17:07:37Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/SubmissionCCLicenseRestRepositoryIT.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.dspace.app.rest.matcher.SubmissionCCLicenseMatcher;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.hamcrest.Matchers;\n+import org.junit.Test;\n+\n+/**\n+ * Class to the methods from the SubmissionCCLicenseRestRepository\n+ * Since the CC Licenses are obtained from the CC License API, a mock service has been implemented\n+ * This mock service will return a fixed set of CC Licenses using a similar structure to the ones obtained from the\n+ * CC License API.\n+ * Refer to {@link org.dspace.license.MockCCLicenseConnectorServiceImpl} for more information\n+ */\n+public class SubmissionCCLicenseRestRepositoryIT extends AbstractControllerIntegrationTest {\n+\n+\n+    /**\n+     * Test the findAll method form the SubmissionCCLicenseRestRepository\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void findAllTest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72ac35025054b6f2ea4da4ca15c7e877ba4506c7"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyMzMwMA==", "bodyText": "Above I had asked about whether we need to validate at least one answer is provided.  Could we better describe this use case where we can search licenses without giving any answers?  Is this to lookup the types of answers allowed?  If so, we should enhance this test to check the response includes info on the types of answers alllowed.", "url": "https://github.com/DSpace/DSpace/pull/2764#discussion_r432623300", "createdAt": "2020-05-29T17:09:44Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/SubmissionCCLicenseSearchControllerIT.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.junit.Test;\n+\n+/**\n+ * Class to the methods from the SubmissionCCLicenseSearchController\n+ * Since the CC Licenses and the corresponding URIs are obtained from the CC License API, a mock service has been\n+ * implemented.\n+ * This mock service will return a fixed set of CC Licenses using a similar structure to the ones obtained from the\n+ * CC License API.\n+ * Refer to {@link org.dspace.license.MockCCLicenseConnectorServiceImpl} for more information\n+ */\n+public class SubmissionCCLicenseSearchControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Test\n+    public void searchRightsByQuestionsTest() throws Exception {\n+        getClient().perform(get(\n+                \"/api/config/submissioncclicenses/search/rightsByQuestions?license=license2&answer_license2-field0\" +\n+                        \"=license2-field0-enum1\"))\n+                   .andExpect(status().isOk())\n+                   .andExpect(jsonPath(\"$.url\", is(\"mock-license-uri\")))\n+                   .andExpect(jsonPath(\"$.type\", is(\"submissioncclicenseUrl\")))\n+                   .andExpect(jsonPath(\"$._links.self.href\",\n+                                       is(\"http://localhost/api/config/submissioncclicenses/search/rightsByQuestions\" +\n+                                                  \"?license=license2\" +\n+                                                  \"&answer_license2-field0=license2-field0-enum1\")));\n+    }\n+\n+    @Test\n+    public void searchRightsByQuestionsTestLicenseWithoutFields() throws Exception {\n+        getClient().perform(get(\"/api/config/submissioncclicenses/search/rightsByQuestions?license=license3\"))\n+                   .andExpect(status().isOk())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72ac35025054b6f2ea4da4ca15c7e877ba4506c7"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad316f0d5eadd972a7e66dceb59fbf86c417aaa1", "author": {"user": {"login": "YanaDePauw", "name": "Yana De Pauw"}}, "url": "https://github.com/DSpace/DSpace/commit/ad316f0d5eadd972a7e66dceb59fbf86c417aaa1", "committedDate": "2020-06-04T12:36:45Z", "message": "Merge remote-tracking branch 'upstream/master' into w2p-70213_CC-license"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "099caaf86f2c0f7eb3d6f9402a75021549fb5f82", "author": {"user": {"login": "YanaDePauw", "name": "Yana De Pauw"}}, "url": "https://github.com/DSpace/DSpace/commit/099caaf86f2c0f7eb3d6f9402a75021549fb5f82", "committedDate": "2020-06-04T14:38:37Z", "message": "71266: Community feedback #1"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MTYxMzIz", "url": "https://github.com/DSpace/DSpace/pull/2764#pullrequestreview-429161323", "createdAt": "2020-06-11T18:01:01Z", "commit": {"oid": "099caaf86f2c0f7eb3d6f9402a75021549fb5f82"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODowMTowMlrOGio1zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxOToyNzo0NFrOGirmHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3MzkwMA==", "bodyText": "This test doesn't seem to be correct. It is named \"patchRemoveSubmissionCCLicenseNonExisting()\", but it seems like when it removes a non-existing license it responds with a 200 OK?  Shouldn't this return an error response (as it's not valid to remove a license that doesn't exist).", "url": "https://github.com/DSpace/DSpace/pull/2764#discussion_r438973900", "createdAt": "2020-06-11T18:01:02Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/CCLicenseRemovePatchOperationIT.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static com.jayway.jsonpath.matchers.JsonPathMatchers.hasJsonPath;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.patch;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.ws.rs.core.MediaType;\n+\n+import org.dspace.app.rest.builder.CollectionBuilder;\n+import org.dspace.app.rest.builder.CommunityBuilder;\n+import org.dspace.app.rest.builder.WorkspaceItemBuilder;\n+import org.dspace.app.rest.model.patch.AddOperation;\n+import org.dspace.app.rest.model.patch.Operation;\n+import org.dspace.app.rest.model.patch.RemoveOperation;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.WorkspaceItem;\n+import org.junit.Test;\n+\n+/**\n+ * Class to test the methods from the CCLicenseRemovePatchOperation\n+ * Since the CC Licenses are obtained from the CC License API, a mock service has been implemented\n+ * This mock service will return a fixed set of CC Licenses using a similar structure to the ones obtained from the\n+ * CC License API.\n+ * Refer to {@link org.dspace.license.MockCCLicenseConnectorServiceImpl} for more information\n+ */\n+public class CCLicenseRemovePatchOperationIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Test\n+    public void patchRemoveSubmissionCCLicense() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        Community community = CommunityBuilder.createCommunity(context)\n+                                              .withName(\"Community\")\n+                                              .build();\n+\n+        Collection collection = CollectionBuilder.createCollection(context, community)\n+                                                 .withName(\"Collection\")\n+                                                 .build();\n+\n+        WorkspaceItem workspaceItem = WorkspaceItemBuilder.createWorkspaceItem(context, collection)\n+                                                          .withTitle(\"Workspace Item\")\n+                                                          .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String epersonToken = getAuthToken(eperson.getEmail(), password);\n+\n+        // First add a license and verify it is added\n+        List<Operation> ops = new ArrayList<Operation>();\n+        AddOperation addOperation = new AddOperation(\"/sections/cclicense/uri\",\n+                                                     \"http://creativecommons.org/licenses/by-nc-sa/4.0/\");\n+\n+        ops.add(addOperation);\n+        String patchBody = getPatchContent(ops);\n+\n+\n+        getClient(epersonToken).perform(patch(\"/api/submission/workspaceitems/\" + workspaceItem.getID())\n+                                              .content(patchBody)\n+                                              .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                             .andExpect(status().isOk())\n+                             .andExpect(jsonPath(\"$.sections.cclicense\", allOf(\n+                                     hasJsonPath(\"$.uri\", is(\"http://creativecommons.org/licenses/by-nc-sa/4.0/\")),\n+                                     hasJsonPath(\"$.rights\",\n+                                                 is(\"Attribution-NonCommercial-ShareAlike 4.0 International\")),\n+                                     hasJsonPath(\"$.file.name\", is(\"license_rdf\"))\n+                             )));\n+\n+\n+        // Remove the license again and verify it is removed\n+\n+        List<Operation> removeOps = new ArrayList<Operation>();\n+        RemoveOperation removeOperation = new RemoveOperation(\"/sections/cclicense/uri\");\n+\n+        removeOps.add(removeOperation);\n+        String removePatch = getPatchContent(removeOps);\n+\n+\n+        getClient(epersonToken).perform(patch(\"/api/submission/workspaceitems/\" + workspaceItem.getID())\n+                                              .content(removePatch)\n+                                              .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                             .andExpect(status().isOk())\n+                             .andExpect(jsonPath(\"$.sections\", not(hasJsonPath(\"cclicense\"))));\n+    }\n+\n+\n+    @Test\n+    public void patchRemoveSubmissionCCLicenseNonExisting() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        Community community = CommunityBuilder.createCommunity(context)\n+                                              .withName(\"Community\")\n+                                              .build();\n+\n+        Collection collection = CollectionBuilder.createCollection(context, community)\n+                                                 .withName(\"Collection\")\n+                                                 .build();\n+\n+        WorkspaceItem workspaceItem = WorkspaceItemBuilder.createWorkspaceItem(context, collection)\n+                                                          .withTitle(\"Workspace Item\")\n+                                                          .build();\n+\n+        context.restoreAuthSystemState();\n+\n+        String epersonToken = getAuthToken(eperson.getEmail(), password);\n+\n+\n+        List<Operation> removeOps = new ArrayList<Operation>();\n+        RemoveOperation removeOperation = new RemoveOperation(\"/sections/cclicense/uri\");\n+\n+        removeOps.add(removeOperation);\n+        String removePatch = getPatchContent(removeOps);\n+\n+\n+        getClient(epersonToken).perform(patch(\"/api/submission/workspaceitems/\" + workspaceItem.getID())\n+                                                .content(removePatch)\n+                                                .contentType(MediaType.APPLICATION_JSON_PATCH_JSON))\n+                               .andExpect(status().isOk())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "099caaf86f2c0f7eb3d6f9402a75021549fb5f82"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3NzE1MA==", "bodyText": "I think this can be resolved by simply adding an inline comment above the for loop that says something like:\n// loop through parameters to find answer parameters, adding them to the parameterMap.  Zero or more answers may exist, as some CC licenses do not require answers", "url": "https://github.com/DSpace/DSpace/pull/2764#discussion_r438977150", "createdAt": "2020-06-11T18:06:50Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/SubmissionCCLicenseSearchController.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.servlet.ServletRequest;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.dspace.app.rest.converter.ConverterService;\n+import org.dspace.app.rest.exception.DSpaceBadRequestException;\n+import org.dspace.app.rest.model.SubmissionCCLicenseRest;\n+import org.dspace.app.rest.model.SubmissionCCLicenseUrlRest;\n+import org.dspace.app.rest.model.hateoas.SubmissionCCLicenseUrlResource;\n+import org.dspace.app.rest.utils.Utils;\n+import org.dspace.license.service.CreativeCommonsService;\n+import org.dspace.services.RequestService;\n+import org.dspace.utils.DSpace;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+/**\n+ * This controller is responsible for searching the CC License URI\n+ */\n+@RestController\n+@RequestMapping(\"/api/\" + SubmissionCCLicenseRest.CATEGORY + \"/\" + SubmissionCCLicenseRest.PLURAL + \"/search\" +\n+        \"/rightsByQuestions\")\n+@PreAuthorize(\"permitAll()\")\n+public class SubmissionCCLicenseSearchController {\n+\n+    @Autowired\n+    protected Utils utils;\n+\n+    @Autowired\n+    protected CreativeCommonsService creativeCommonsService;\n+\n+    @Autowired\n+    protected ConverterService converter;\n+\n+    protected RequestService requestService = new DSpace().getRequestService();\n+\n+    /**\n+     * Retrieves the CC License URI based on the license ID and answers in the field questions, provided as parameters\n+     * to this request\n+     *\n+     * @return the CC License URI as a SubmissionCCLicenseUrlResource\n+     */\n+    @RequestMapping(method = RequestMethod.GET)\n+    public SubmissionCCLicenseUrlResource findByRightsByQuestions() {\n+        ServletRequest servletRequest = requestService.getCurrentRequest()\n+                                                      .getServletRequest();\n+        Map<String, String[]> requestParameterMap = servletRequest\n+                .getParameterMap();\n+        Map<String, String> parameterMap = new HashMap<>();\n+        String licenseId = servletRequest.getParameter(\"license\");\n+        if (StringUtils.isBlank(licenseId)) {\n+            throw new DSpaceBadRequestException(\n+                    \"A \\\"license\\\" parameter needs to be provided.\");\n+        }\n+        for (String parameter : requestParameterMap.keySet()) {\n+            if (StringUtils.startsWith(parameter, \"answer_\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYwOTc0OQ=="}, "originalCommit": {"oid": "72ac35025054b6f2ea4da4ca15c7e877ba4506c7"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk3Nzk0NQ==", "bodyText": "This can be resolved by adding the inline comment I suggested to findByRightsByQuestions() to clarify that some licenses do not require answer fields.", "url": "https://github.com/DSpace/DSpace/pull/2764#discussion_r438977945", "createdAt": "2020-06-11T18:08:18Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/SubmissionCCLicenseSearchControllerIT.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.junit.Test;\n+\n+/**\n+ * Class to the methods from the SubmissionCCLicenseSearchController\n+ * Since the CC Licenses and the corresponding URIs are obtained from the CC License API, a mock service has been\n+ * implemented.\n+ * This mock service will return a fixed set of CC Licenses using a similar structure to the ones obtained from the\n+ * CC License API.\n+ * Refer to {@link org.dspace.license.MockCCLicenseConnectorServiceImpl} for more information\n+ */\n+public class SubmissionCCLicenseSearchControllerIT extends AbstractControllerIntegrationTest {\n+\n+\n+    @Test\n+    public void searchRightsByQuestionsTest() throws Exception {\n+        getClient().perform(get(\n+                \"/api/config/submissioncclicenses/search/rightsByQuestions?license=license2&answer_license2-field0\" +\n+                        \"=license2-field0-enum1\"))\n+                   .andExpect(status().isOk())\n+                   .andExpect(jsonPath(\"$.url\", is(\"mock-license-uri\")))\n+                   .andExpect(jsonPath(\"$.type\", is(\"submissioncclicenseUrl\")))\n+                   .andExpect(jsonPath(\"$._links.self.href\",\n+                                       is(\"http://localhost/api/config/submissioncclicenses/search/rightsByQuestions\" +\n+                                                  \"?license=license2\" +\n+                                                  \"&answer_license2-field0=license2-field0-enum1\")));\n+    }\n+\n+    @Test\n+    public void searchRightsByQuestionsTestLicenseWithoutFields() throws Exception {\n+        getClient().perform(get(\"/api/config/submissioncclicenses/search/rightsByQuestions?license=license3\"))\n+                   .andExpect(status().isOk())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYyMzMwMA=="}, "originalCommit": {"oid": "72ac35025054b6f2ea4da4ca15c7e877ba4506c7"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAxOTAzOA==", "bodyText": "@KevinVdV .  This should be in a separate repository SubmissionCCLicenseUrlRestRepository.  You are correct, we shouldn't ever have one Repository return different objects/resources.\nIt's also worth noting, this Controller is incorrectly designed as-is for another reason you just pointed out. The Controller is wrongly using the /api/configuration/submissioncclicense resource path to represent a different resource.  So, in REST, a resource path should always represent the same type of object, and I'm now realizing from your comments that we have this incorrect behavior:\n\n/api/config/submissioncclicense root path represents a SubmissionCCLicenseResource object\nHowever, we're wrongly setting up the subpath /api/config/submissioncclicense/search/rightsByQuestions to represent a different, similar object called SubmissionCCLicenseUrlResource.\n\nSince these are different resources, they must be using different paths.  That means our Contract needs updating to have two related paths:\n\n/api/config/submissioncclicense - which already exists\n/api/config/submissioncclicenseurl/search/rightsByQuestions (or some similar path) which returns a URL resource when searching via questions. This would require updating this new contract PR: DSpace/RestContract#129\n\nIt'd be important to document in the Contract how these two types of resources are used together. It looks like the expectation here is to use /submissioncclicense to get a list of license options, then pass one license ID (with optional answers) to /submissioncclicenseurl to get the final URI.  If that's accurate, we should document that in the REST Contract to describe how clients are expected to interact with these endpoints.\n(As a sidenote, if there's a way to instead refactor the code into a single resource, then we can keep all the paths as-is.  The only design flaw here is that we have one resource path that seems to represent/respond with two different resources, depending on the usage.  A single path in our REST API should only ever respond with one resource type, as noted in the README examples/section on HTTP verbs/responses)", "url": "https://github.com/DSpace/DSpace/pull/2764#discussion_r439019038", "createdAt": "2020-06-11T19:27:44Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/SubmissionCCLicenseSearchController.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.servlet.ServletRequest;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.dspace.app.rest.converter.ConverterService;\n+import org.dspace.app.rest.exception.DSpaceBadRequestException;\n+import org.dspace.app.rest.model.SubmissionCCLicenseRest;\n+import org.dspace.app.rest.model.SubmissionCCLicenseUrlRest;\n+import org.dspace.app.rest.model.hateoas.SubmissionCCLicenseUrlResource;\n+import org.dspace.app.rest.utils.Utils;\n+import org.dspace.license.service.CreativeCommonsService;\n+import org.dspace.services.RequestService;\n+import org.dspace.utils.DSpace;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+/**\n+ * This controller is responsible for searching the CC License URI\n+ */\n+@RestController\n+@RequestMapping(\"/api/\" + SubmissionCCLicenseRest.CATEGORY + \"/\" + SubmissionCCLicenseRest.PLURAL + \"/search\" +\n+        \"/rightsByQuestions\")\n+@PreAuthorize(\"permitAll()\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYwODQwMA=="}, "originalCommit": {"oid": "72ac35025054b6f2ea4da4ca15c7e877ba4506c7"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MjI0MDUw", "url": "https://github.com/DSpace/DSpace/pull/2764#pullrequestreview-429224050", "createdAt": "2020-06-11T19:34:10Z", "commit": {"oid": "099caaf86f2c0f7eb3d6f9402a75021549fb5f82"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08abaf8b039a5c9a152ae296b1e1961a2af6d983", "author": {"user": {"login": "YanaDePauw", "name": "Yana De Pauw"}}, "url": "https://github.com/DSpace/DSpace/commit/08abaf8b039a5c9a152ae296b1e1961a2af6d983", "committedDate": "2020-06-19T12:05:14Z", "message": "71440: Implement feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95110d2b5a202aadba7395e2f598be7bbceb82db", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/95110d2b5a202aadba7395e2f598be7bbceb82db", "committedDate": "2020-06-23T12:23:50Z", "message": "[Task 71440] changed the ModelObject for SubmissionCCLicenseUrlRest from String to SubmissionCCLicenseUrl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f9a690f5fbb86ba728b39bf9117eed8aa160121", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/3f9a690f5fbb86ba728b39bf9117eed8aa160121", "committedDate": "2020-06-23T12:23:59Z", "message": "Merge remote-tracking branch 'dspace/master' into w2p-70213_CC-license"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f9fe26549fc8d0dd17059b4f6d84bff6451badf", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/9f9fe26549fc8d0dd17059b4f6d84bff6451badf", "committedDate": "2020-06-23T13:09:45Z", "message": "[Task 71440] fixed checkstyle and added preAuthorize to the SubmissionCCLicenseUrlRepository"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b6f19f6beb1f54b727b1a3d83c69b7179a55972", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/2b6f19f6beb1f54b727b1a3d83c69b7179a55972", "committedDate": "2020-06-24T09:14:40Z", "message": "[Task 71440] added javadocs to SubmissionCCLicenseUrl"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODQ3Nzg2", "url": "https://github.com/DSpace/DSpace/pull/2764#pullrequestreview-436847786", "createdAt": "2020-06-24T17:13:34Z", "commit": {"oid": "2b6f19f6beb1f54b727b1a3d83c69b7179a55972"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzoxMzozNFrOGobjbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzoxMzozNFrOGobjbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA0NzY2MA==", "bodyText": "You may want to check with @artlowel , but because this endpoint only supports a search method it may not be easily \"discoverable\" to Angular.  See this bug https://jira.lyrasis.org/browse/DS-4495 which was resolved in #2766.\nHowever, this is easily fixed, if we need to make the search path discoverable.  You'd just want to update this class to implements InitializingBean and add an afterPropertiesSet() that looks similar to this: https://github.com/DSpace/DSpace/blob/master/dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ClaimedTaskRestRepository.java#L200-L205\nEssentially, the goal here is to provide a secondary link directly to the /search subpath, so that the HAL Browser knows of it & also so the Angular UI can easily find it / be aware of it.", "url": "https://github.com/DSpace/DSpace/pull/2764#discussion_r445047660", "createdAt": "2020-06-24T17:13:34Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/SubmissionCCLicenseUrlRepository.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.servlet.ServletRequest;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.dspace.app.rest.converter.ConverterService;\n+import org.dspace.app.rest.exception.DSpaceBadRequestException;\n+import org.dspace.app.rest.exception.RepositoryMethodNotImplementedException;\n+import org.dspace.app.rest.model.SubmissionCCLicenseUrlRest;\n+import org.dspace.app.rest.model.wrapper.SubmissionCCLicenseUrl;\n+import org.dspace.app.rest.repository.DSpaceRestRepository;\n+import org.dspace.app.rest.utils.Utils;\n+import org.dspace.core.Context;\n+import org.dspace.license.service.CreativeCommonsService;\n+import org.dspace.services.RequestService;\n+import org.dspace.utils.DSpace;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.rest.webmvc.ResourceNotFoundException;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * This Repository is responsible for handling the CC License URIs.\n+ * It only supports a search method", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b6f19f6beb1f54b727b1a3d83c69b7179a55972"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2OTEzMDc4", "url": "https://github.com/DSpace/DSpace/pull/2764#pullrequestreview-436913078", "createdAt": "2020-06-24T18:44:30Z", "commit": {"oid": "2b6f19f6beb1f54b727b1a3d83c69b7179a55972"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ca6064c88af564865e837aaf40970aaa4048a77", "author": {"user": {"login": "KevinVdV", "name": "Kevin Van de Velde"}}, "url": "https://github.com/DSpace/DSpace/commit/8ca6064c88af564865e837aaf40970aaa4048a77", "committedDate": "2020-06-25T08:16:46Z", "message": "[CC License] Adding search link to HAL output"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cadd105468132611f42c23f94b813ad1b22e90c", "author": {"user": {"login": "KevinVdV", "name": "Kevin Van de Velde"}}, "url": "https://github.com/DSpace/DSpace/commit/8cadd105468132611f42c23f94b813ad1b22e90c", "committedDate": "2020-06-25T08:56:20Z", "message": "[CC License] Fixing checkstyle issues"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1466, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}