{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3MjY5NTk2", "number": 2949, "title": "Upgrade to Flyway v6.5.5. Update code based on Flyway API changes", "bodyText": "References\n\nFixes #2948\n\nDescription\nThis PR updates us to Flyway v6.5.5 (the latest version of https://flywaydb.org/) from v4.0.3\nA large amount of code refactoring was necessary, as the Flyway Java API has changed significantly between v4 and v6.  However, all code changes were in the dspace-api layer in the org.dspace.storage.rdbms package.\nA few key points:\n\nThe DatabaseUtils class no longer needs to cache the Flyway object.  Caching was able to be removed based on the updated v6 Flyway API\nAll Callback classes were simplified. They now only require 3 methods: supports(), canHandleInTransaction() and handle().\nFlyway removed/hid some classes from its API which were duplicative of Spring core classes. So, in some areas, I was able to replace old Flyway versions of classes with Spring ones.\nNEW A new FlywayUpgradeUtils class was added to help with DSpace 5.x to 7.x upgrades. This was needed because DSpace 5.x used Flyway 3.x, which cannot be upgraded directly to Flyway 6.x (cause of major database-level changes in Flyway 4.x, see flyway/flyway#2126).  The FlywayUpgradeUtils class checks for this scenario, and runs a SQL script to update the database structure to be compatible with Flyway 4.x (which can be upgraded directly to Flyway 6.x)\nNOTE: Flyway has its own Context object now in their v6 API.  So, in reviewing code, be aware that most of the Context objects in this PR are Flyway's Context and not DSpace's Context\n\nInstructions for Reviewers\n\nCode should be relatively easy to review. It's often the same general changes over and over again in many of the org.dspace.storage.rdbms.* classes.\nAll existing tests pass, which proves the code works...as our Unit & Integration tests both use Flyway to initialize the test database in H2.\nFlywayUpgradeUtils was added to solve this previously reported issue.\nYou can install this PR locally and verify that your local backend (on either Postgres or Oracle) also still works as expected.\n\nChecklist\n\n My PR is small in size (e.g. less than 1,000 lines of code, not including comments & integration tests). Exceptions may be made if previously agreed upon.\n My PR passes Checkstyle validation based on the Code Style Guide.\n My PR includes Javadoc for all new (or modified) public methods and classes. It also includes Javadoc for large or complex private methods.\n My PR passes all tests and includes new/updated Unit or Integration Tests based on the Code Testing Guide.\n If my PR includes new, third-party dependencies (in any pom.xml), I've made sure their licenses align with the DSpace BSD License based on the Licensing of Contributions documentation.\n If my PR modifies the REST API, I've linked to the REST Contract page (or open PR) related to this change.", "createdAt": "2020-09-01T18:54:16Z", "url": "https://github.com/DSpace/DSpace/pull/2949", "merged": true, "mergeCommit": {"oid": "6cb4b7e74a8803cd14d5403919cfd559192f8b3a"}, "closed": true, "closedAt": "2020-10-02T14:17:08Z", "author": {"login": "tdonohue"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHclT4AFqTQ4NTcwNDMyNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOX9iAAFqTUwMDcxODg0OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NzA0MzI2", "url": "https://github.com/DSpace/DSpace/pull/2949#pullrequestreview-485704326", "createdAt": "2020-09-10T08:32:48Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNjI0OTk0", "url": "https://github.com/DSpace/DSpace/pull/2949#pullrequestreview-490624994", "createdAt": "2020-09-17T13:59:13Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNDI1MDI3", "url": "https://github.com/DSpace/DSpace/pull/2949#pullrequestreview-491425027", "createdAt": "2020-09-18T12:37:41Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyODE4NzA4", "url": "https://github.com/DSpace/DSpace/pull/2949#pullrequestreview-492818708", "createdAt": "2020-09-21T17:10:45Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzoxMDo0NVrOHVal6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzoxMDo0NVrOHVal6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxNzgzMw==", "bodyText": "I'm puzzled as to why we use ClassPathResource instead of just passing a path to a method which reads from the path into a String.  I haven't found any other use of ClassPathResource in this patch than to hold a path.", "url": "https://github.com/DSpace/DSpace/pull/2949#discussion_r492217833", "createdAt": "2020-09-21T17:10:45Z", "author": {"login": "mwoodiupui"}, "path": "dspace-api/src/main/java/org/dspace/storage/rdbms/migration/V5_7_2017_05_05__DS_3431_Add_Policies_for_BasicWorkflow.java", "diffHunk": "@@ -7,45 +7,42 @@\n  */\n package org.dspace.storage.rdbms.migration;\n \n-import java.sql.Connection;\n-\n-import org.dspace.core.Constants;\n import org.dspace.storage.rdbms.DatabaseUtils;\n-import org.flywaydb.core.api.migration.MigrationChecksumProvider;\n-import org.flywaydb.core.api.migration.jdbc.JdbcMigration;\n-import org.flywaydb.core.internal.util.scanner.classpath.ClassPathResource;\n+import org.flywaydb.core.api.migration.BaseJavaMigration;\n+import org.flywaydb.core.api.migration.Context;\n+import org.springframework.core.io.ClassPathResource;\n \n public class V5_7_2017_05_05__DS_3431_Add_Policies_for_BasicWorkflow\n-    implements JdbcMigration, MigrationChecksumProvider {\n+    extends BaseJavaMigration {\n \n     // Size of migration script run\n     Integer migration_file_size = -1;\n \n \n     @Override\n-    public void migrate(Connection connection) throws Exception {\n+    public void migrate(Context context) throws Exception {\n         // Based on type of DB, get path to SQL migration script\n-        String dbtype = DatabaseUtils.getDbType(connection);\n+        String dbtype = DatabaseUtils.getDbType(context.getConnection());\n \n         String dataMigrateSQL;\n         String sqlMigrationPath = \"org/dspace/storage/rdbms/sqlmigration/workflow/\" + dbtype + \"/\";\n         // Now, check if the XMLWorkflow table (cwf_workflowitem) already exists in this database\n         // If XMLWorkflow Table does NOT exist in this database, then lets do the migration!\n         // If XMLWorkflow Table ALREADY exists, then this migration is a noop, we assume you manually ran the sql\n         // scripts\n-        if (DatabaseUtils.tableExists(connection, \"cwf_workflowitem\")) {\n+        if (DatabaseUtils.tableExists(context.getConnection(), \"cwf_workflowitem\")) {\n             return;\n         } else {\n             //Migrate the basic workflow\n             // Get the contents of our data migration script, based on path & DB type\n-            dataMigrateSQL = new ClassPathResource(sqlMigrationPath + \"basicWorkflow\" + \"/V5.7_2017.05.05__DS-3431.sql\",\n-                                                   getClass().getClassLoader())\n-                .loadAsString(Constants.DEFAULT_ENCODING);\n+            dataMigrateSQL = MigrationUtils.resourceToString(\n+                new ClassPathResource(sqlMigrationPath + \"basicWorkflow\" + \"/V5.7_2017.05.05__DS-3431.sql\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2cfa09c01d839ad7a1f6920fe7a6ab6f86297f2", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/a2cfa09c01d839ad7a1f6920fe7a6ab6f86297f2", "committedDate": "2020-09-24T17:23:53Z", "message": "Upgrade to Flyway v6.5.5. Update code based on Flyway API changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae7ef8577bb49bcc1074a174fcd0c5c4ece4150f", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/ae7ef8577bb49bcc1074a174fcd0c5c4ece4150f", "committedDate": "2020-09-24T17:23:53Z", "message": "Minor fixes. Flyway migration paths now prefer slashes to dots.  Add Flyway version to 'info' command."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d137ce179f4f5d07e8ac014dab52f2f26473fd94", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/d137ce179f4f5d07e8ac014dab52f2f26473fd94", "committedDate": "2020-09-24T17:23:53Z", "message": "Add support for upgrading database directly from DSpace 5.x to 7.x"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6379c0646141dc2909c19edc646c715ed2172693", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/6379c0646141dc2909c19edc646c715ed2172693", "committedDate": "2020-09-24T17:23:53Z", "message": "Minor change to Context. Add synchronized to ensure database upgrade only triggered once"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b36849d110b1f048e71857dc9f3bf67105ff0f40", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/b36849d110b1f048e71857dc9f3bf67105ff0f40", "committedDate": "2020-09-24T17:23:53Z", "message": "Ignore license header in new Flyway upgrade scripts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71bdd8341b71c19d3a880934ba286adc420b339b", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/71bdd8341b71c19d3a880934ba286adc420b339b", "committedDate": "2020-09-24T17:23:54Z", "message": "Ensure Flyway database table also checked by main() method.  Removed some invalid comments too"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "569169a85219cbde9226827328609b3dc2ab0676", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/569169a85219cbde9226827328609b3dc2ab0676", "committedDate": "2020-09-24T18:31:33Z", "message": "Per feedback, refactor MigrationUtils.resourceToString into getResourceAsString. Remove usage of ClassPathResource"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "569169a85219cbde9226827328609b3dc2ab0676", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/569169a85219cbde9226827328609b3dc2ab0676", "committedDate": "2020-09-24T18:31:33Z", "message": "Per feedback, refactor MigrationUtils.resourceToString into getResourceAsString. Remove usage of ClassPathResource"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzE4ODQ4", "url": "https://github.com/DSpace/DSpace/pull/2949#pullrequestreview-500718848", "createdAt": "2020-10-01T21:07:12Z", "commit": {"oid": "569169a85219cbde9226827328609b3dc2ab0676"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1332, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}