{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzNDA5Nzc5", "number": 3004, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMTozODoxNFrOEzAu-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxOTo0OToyM1rOFNYrCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTI0ODU3OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/content/RelationshipServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMTozODoxNFrOHp-eAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMTozODoxNFrOHp-eAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc3NzE1NA==", "bodyText": "I'm a little confused by the logic in these methods as there's no inline comments or JavaDocs.  If we already know that this item is the \"RightItem\", then why do we need to check if it's actually the left item (when would isLeft ever be \"true\")?\nI'm assuming I'm misunderstanding this code, but I wanted to point out that it's not clear to me.  I would appreciate more inline comments, as I don't understand the logic in this method", "url": "https://github.com/DSpace/DSpace/pull/3004#discussion_r513777154", "createdAt": "2020-10-28T21:38:14Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/content/RelationshipServiceImpl.java", "diffHunk": "@@ -346,6 +357,119 @@ public void delete(Context context, Relationship relationship, boolean copyToLef\n         }\n     }\n \n+\n+    /**\n+     * Utility method to ensure discovery is updated for the 2 items\n+     * This method is used when creating, modifying or deleting a relationship\n+     * The virtual metadata of the 2 items may need to be updated, so they should be re-indexed\n+     *\n+     * @param context           The relevant DSpace context\n+     * @param relationship      The relationship which has been created, updated or deleted\n+     * @throws SQLException     If something goes wrong\n+     */\n+    private void updateItemsInRelationship(Context context, Relationship relationship) throws SQLException {\n+        // Since this call is performed after creating, updating or deleting the relationships, the permissions have\n+        // already been verified. The following updateItem calls can however call the\n+        // ItemService.update() functions which would fail if the user doesn't have permission on both items.\n+        // Since we allow this edits to happen under these circumstances, we need to turn off the\n+        // authorization system here so that this failure doesn't happen when the items need to be update\n+        context.turnOffAuthorisationSystem();\n+        try {\n+            int max = configurationService.getIntProperty(\"relationship.update.relateditems.max\", 5);\n+            List<Item> itemsToUpdate = new LinkedList<>();\n+            itemsToUpdate.add(relationship.getLeftItem());\n+            itemsToUpdate.add(relationship.getRightItem());\n+\n+            itemsToUpdate = getRelatedItemsForLeftItem(context, relationship.getLeftItem(),\n+                                                       relationship, itemsToUpdate, max);\n+            itemsToUpdate = getRelatedItemsForRightItem(context, relationship.getRightItem(),\n+                                                        relationship, itemsToUpdate, max);\n+\n+            for (Item item : itemsToUpdate) {\n+                if (!item.isMetadataModified()) {\n+                    updateItem(context, item);\n+                }\n+            }\n+\n+        } catch (AuthorizeException e) {\n+            log.error(\"Authorization Exception while authorization has been disabled\", e);\n+        }\n+        context.restoreAuthSystemState();\n+    }\n+\n+    private List<Item> getRelatedItemsForRightItem(Context context, Item item, Relationship relationship,\n+                                                   List<Item> itemsToUpdate, int max)\n+        throws SQLException {\n+        if (itemsToUpdate.size() >= max) {\n+            return itemsToUpdate;\n+        }\n+        List<RelationshipType> relationshipTypes = new LinkedList<>();\n+        EntityType leftType = relationship.getRelationshipType().getLeftType();\n+        String entityTypeStringFromMetadata = relationshipMetadataService.getEntityTypeStringFromMetadata(item);\n+        EntityType actualEntityType = entityTypeService.findByEntityType(context, entityTypeStringFromMetadata);\n+        boolean isLeft = false;\n+        if (StringUtils.equalsIgnoreCase(leftType.getLabel(),\n+                                         entityTypeStringFromMetadata)) {\n+            relationshipTypes = relationshipTypeService.findByEntityType(context, actualEntityType, false);\n+        } else {\n+            isLeft = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9895049a99ce80ec4aa4c01c4ef45f6e8012d9a1"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTI1MjkwOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/content/RelationshipServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMTozOTo0MFrOHp-gkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMTozOTo0MFrOHp-gkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc3NzgxMQ==", "bodyText": "Same here...the logic is still confusing.  We already know this item is the \"LeftItem\", so when would this else ever be triggered?  Why again do we need the isLeft variable, if we know it should always be true?", "url": "https://github.com/DSpace/DSpace/pull/3004#discussion_r513777811", "createdAt": "2020-10-28T21:39:40Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/content/RelationshipServiceImpl.java", "diffHunk": "@@ -346,6 +357,119 @@ public void delete(Context context, Relationship relationship, boolean copyToLef\n         }\n     }\n \n+\n+    /**\n+     * Utility method to ensure discovery is updated for the 2 items\n+     * This method is used when creating, modifying or deleting a relationship\n+     * The virtual metadata of the 2 items may need to be updated, so they should be re-indexed\n+     *\n+     * @param context           The relevant DSpace context\n+     * @param relationship      The relationship which has been created, updated or deleted\n+     * @throws SQLException     If something goes wrong\n+     */\n+    private void updateItemsInRelationship(Context context, Relationship relationship) throws SQLException {\n+        // Since this call is performed after creating, updating or deleting the relationships, the permissions have\n+        // already been verified. The following updateItem calls can however call the\n+        // ItemService.update() functions which would fail if the user doesn't have permission on both items.\n+        // Since we allow this edits to happen under these circumstances, we need to turn off the\n+        // authorization system here so that this failure doesn't happen when the items need to be update\n+        context.turnOffAuthorisationSystem();\n+        try {\n+            int max = configurationService.getIntProperty(\"relationship.update.relateditems.max\", 5);\n+            List<Item> itemsToUpdate = new LinkedList<>();\n+            itemsToUpdate.add(relationship.getLeftItem());\n+            itemsToUpdate.add(relationship.getRightItem());\n+\n+            itemsToUpdate = getRelatedItemsForLeftItem(context, relationship.getLeftItem(),\n+                                                       relationship, itemsToUpdate, max);\n+            itemsToUpdate = getRelatedItemsForRightItem(context, relationship.getRightItem(),\n+                                                        relationship, itemsToUpdate, max);\n+\n+            for (Item item : itemsToUpdate) {\n+                if (!item.isMetadataModified()) {\n+                    updateItem(context, item);\n+                }\n+            }\n+\n+        } catch (AuthorizeException e) {\n+            log.error(\"Authorization Exception while authorization has been disabled\", e);\n+        }\n+        context.restoreAuthSystemState();\n+    }\n+\n+    private List<Item> getRelatedItemsForRightItem(Context context, Item item, Relationship relationship,\n+                                                   List<Item> itemsToUpdate, int max)\n+        throws SQLException {\n+        if (itemsToUpdate.size() >= max) {\n+            return itemsToUpdate;\n+        }\n+        List<RelationshipType> relationshipTypes = new LinkedList<>();\n+        EntityType leftType = relationship.getRelationshipType().getLeftType();\n+        String entityTypeStringFromMetadata = relationshipMetadataService.getEntityTypeStringFromMetadata(item);\n+        EntityType actualEntityType = entityTypeService.findByEntityType(context, entityTypeStringFromMetadata);\n+        boolean isLeft = false;\n+        if (StringUtils.equalsIgnoreCase(leftType.getLabel(),\n+                                         entityTypeStringFromMetadata)) {\n+            relationshipTypes = relationshipTypeService.findByEntityType(context, actualEntityType, false);\n+        } else {\n+            isLeft = true;\n+            relationshipTypes = relationshipTypeService.findByEntityType(context, actualEntityType, true);\n+        }\n+        for (RelationshipType relationshipType : relationshipTypes) {\n+            if (virtualMetadataPopulator.getMap().containsKey(relationshipType.getRightwardType())) {\n+                List<Relationship> list = findByItemAndRelationshipType(context, item, relationshipType, isLeft);\n+                for (Relationship foundRelationship : list) {\n+                    if (isLeft) {\n+                        itemsToUpdate.add(foundRelationship.getRightItem());\n+                        return getRelatedItemsForRightItem(context, foundRelationship.getRightItem(), foundRelationship,\n+                                                           itemsToUpdate, max);\n+                    } else {\n+                        itemsToUpdate.add(foundRelationship.getLeftItem());\n+                        return getRelatedItemsForLeftItem(context, foundRelationship.getLeftItem(), foundRelationship,\n+                                                          itemsToUpdate, max);\n+                    }\n+                }\n+            }\n+        }\n+        return itemsToUpdate;\n+    }\n+\n+    private List<Item> getRelatedItemsForLeftItem(Context context, Item item, Relationship relationship,\n+                                                  List<Item> itemsToUpdate, int max)\n+        throws SQLException {\n+        if (itemsToUpdate.size() >= max) {\n+            return itemsToUpdate;\n+        }\n+        List<RelationshipType> relationshipTypes = new LinkedList<>();\n+        EntityType rightType = relationship.getRelationshipType().getRightType();\n+        String entityTypeStringFromMetadata = relationshipMetadataService.getEntityTypeStringFromMetadata(item);\n+        EntityType actualEntityType = entityTypeService.findByEntityType(context, entityTypeStringFromMetadata);\n+        boolean isLeft = false;\n+        if (StringUtils.equalsIgnoreCase(rightType.getLabel(),\n+                                         relationshipMetadataService.getEntityTypeStringFromMetadata(item))) {\n+            isLeft = true;\n+            relationshipTypes = relationshipTypeService.findByEntityType(context, actualEntityType, true);\n+        } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9895049a99ce80ec4aa4c01c4ef45f6e8012d9a1"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjczNTQzOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/content/RelationshipServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOTozMzoxM1rOHr8icA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOTozMzoxM1rOHr8icA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg0MjY3Mg==", "bodyText": "Why to attribute to itemsToUpdate a different value again?", "url": "https://github.com/DSpace/DSpace/pull/3004#discussion_r515842672", "createdAt": "2020-11-02T09:33:13Z", "author": {"login": "paulo-graca"}, "path": "dspace-api/src/main/java/org/dspace/content/RelationshipServiceImpl.java", "diffHunk": "@@ -346,6 +357,119 @@ public void delete(Context context, Relationship relationship, boolean copyToLef\n         }\n     }\n \n+\n+    /**\n+     * Utility method to ensure discovery is updated for the 2 items\n+     * This method is used when creating, modifying or deleting a relationship\n+     * The virtual metadata of the 2 items may need to be updated, so they should be re-indexed\n+     *\n+     * @param context           The relevant DSpace context\n+     * @param relationship      The relationship which has been created, updated or deleted\n+     * @throws SQLException     If something goes wrong\n+     */\n+    private void updateItemsInRelationship(Context context, Relationship relationship) throws SQLException {\n+        // Since this call is performed after creating, updating or deleting the relationships, the permissions have\n+        // already been verified. The following updateItem calls can however call the\n+        // ItemService.update() functions which would fail if the user doesn't have permission on both items.\n+        // Since we allow this edits to happen under these circumstances, we need to turn off the\n+        // authorization system here so that this failure doesn't happen when the items need to be update\n+        context.turnOffAuthorisationSystem();\n+        try {\n+            int max = configurationService.getIntProperty(\"relationship.update.relateditems.max\", 5);\n+            List<Item> itemsToUpdate = new LinkedList<>();\n+            itemsToUpdate.add(relationship.getLeftItem());\n+            itemsToUpdate.add(relationship.getRightItem());\n+\n+            itemsToUpdate = getRelatedItemsForLeftItem(context, relationship.getLeftItem(),\n+                                                       relationship, itemsToUpdate, max);\n+            itemsToUpdate = getRelatedItemsForRightItem(context, relationship.getRightItem(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9895049a99ce80ec4aa4c01c4ef45f6e8012d9a1"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NTQ0ODAxOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/content/RelationshipServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxODowODoxMVrOIRhSvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxMDoxMjo0NlrOISoYow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI0MjE3Mg==", "bodyText": "Ideally, this statement should be placed in a finally section in order to ensure it is also run if an error occurs.", "url": "https://github.com/DSpace/DSpace/pull/3004#discussion_r555242172", "createdAt": "2021-01-11T18:08:11Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/content/RelationshipServiceImpl.java", "diffHunk": "@@ -347,6 +358,130 @@ public void delete(Context context, Relationship relationship, boolean copyToLef\n         }\n     }\n \n+\n+    /**\n+     * Utility method to ensure discovery is updated for the 2 items\n+     * This method is used when creating, modifying or deleting a relationship\n+     * The virtual metadata of the 2 items may need to be updated, so they should be re-indexed\n+     *\n+     * @param context           The relevant DSpace context\n+     * @param relationship      The relationship which has been created, updated or deleted\n+     * @throws SQLException     If something goes wrong\n+     */\n+    private void updateItemsInRelationship(Context context, Relationship relationship) throws SQLException {\n+        // Since this call is performed after creating, updating or deleting the relationships, the permissions have\n+        // already been verified. The following updateItem calls can however call the\n+        // ItemService.update() functions which would fail if the user doesn't have permission on both items.\n+        // Since we allow this edits to happen under these circumstances, we need to turn off the\n+        // authorization system here so that this failure doesn't happen when the items need to be update\n+        context.turnOffAuthorisationSystem();\n+        try {\n+            // Set a limit on the total amount of items to update at once during a relationship change\n+            int max = configurationService.getIntProperty(\"relationship.update.relateditems.max\", 20);\n+            // Set a limit on the total depth of relationships to traverse during a relationship change\n+            int maxDepth = configurationService.getIntProperty(\"relationship.update.relateditems.maxdepth\", 5);\n+            // This is the list containing all items which will have changes to their virtual metadata\n+            List<Item> itemsToUpdate = new LinkedList<>();\n+            itemsToUpdate.add(relationship.getLeftItem());\n+            itemsToUpdate.add(relationship.getRightItem());\n+\n+            if (containsVirtualMetadata(relationship.getRelationshipType().getLeftwardType())) {\n+                findModifiedDiscoveryItemsForCurrentItem(context, relationship.getLeftItem(),\n+                                           itemsToUpdate, max, 0, maxDepth);\n+            }\n+            if (containsVirtualMetadata(relationship.getRelationshipType().getRightwardType())) {\n+                findModifiedDiscoveryItemsForCurrentItem(context, relationship.getRightItem(),\n+                                            itemsToUpdate, max, 0, maxDepth);\n+            }\n+\n+            for (Item item : itemsToUpdate) {\n+                if (!item.isMetadataModified()) {\n+                    updateItem(context, item);\n+                }\n+            }\n+\n+        } catch (AuthorizeException e) {\n+            log.error(\"Authorization Exception while authorization has been disabled\", e);\n+        }\n+        context.restoreAuthSystemState();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54a844e033ef69d51e1e2a9b4d6c0a5e5b3855cb"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQwNjk0Nw==", "bodyText": "This has been moved", "url": "https://github.com/DSpace/DSpace/pull/3004#discussion_r556406947", "createdAt": "2021-01-13T10:12:46Z", "author": {"login": "benbosman"}, "path": "dspace-api/src/main/java/org/dspace/content/RelationshipServiceImpl.java", "diffHunk": "@@ -347,6 +358,130 @@ public void delete(Context context, Relationship relationship, boolean copyToLef\n         }\n     }\n \n+\n+    /**\n+     * Utility method to ensure discovery is updated for the 2 items\n+     * This method is used when creating, modifying or deleting a relationship\n+     * The virtual metadata of the 2 items may need to be updated, so they should be re-indexed\n+     *\n+     * @param context           The relevant DSpace context\n+     * @param relationship      The relationship which has been created, updated or deleted\n+     * @throws SQLException     If something goes wrong\n+     */\n+    private void updateItemsInRelationship(Context context, Relationship relationship) throws SQLException {\n+        // Since this call is performed after creating, updating or deleting the relationships, the permissions have\n+        // already been verified. The following updateItem calls can however call the\n+        // ItemService.update() functions which would fail if the user doesn't have permission on both items.\n+        // Since we allow this edits to happen under these circumstances, we need to turn off the\n+        // authorization system here so that this failure doesn't happen when the items need to be update\n+        context.turnOffAuthorisationSystem();\n+        try {\n+            // Set a limit on the total amount of items to update at once during a relationship change\n+            int max = configurationService.getIntProperty(\"relationship.update.relateditems.max\", 20);\n+            // Set a limit on the total depth of relationships to traverse during a relationship change\n+            int maxDepth = configurationService.getIntProperty(\"relationship.update.relateditems.maxdepth\", 5);\n+            // This is the list containing all items which will have changes to their virtual metadata\n+            List<Item> itemsToUpdate = new LinkedList<>();\n+            itemsToUpdate.add(relationship.getLeftItem());\n+            itemsToUpdate.add(relationship.getRightItem());\n+\n+            if (containsVirtualMetadata(relationship.getRelationshipType().getLeftwardType())) {\n+                findModifiedDiscoveryItemsForCurrentItem(context, relationship.getLeftItem(),\n+                                           itemsToUpdate, max, 0, maxDepth);\n+            }\n+            if (containsVirtualMetadata(relationship.getRelationshipType().getRightwardType())) {\n+                findModifiedDiscoveryItemsForCurrentItem(context, relationship.getRightItem(),\n+                                            itemsToUpdate, max, 0, maxDepth);\n+            }\n+\n+            for (Item item : itemsToUpdate) {\n+                if (!item.isMetadataModified()) {\n+                    updateItem(context, item);\n+                }\n+            }\n+\n+        } catch (AuthorizeException e) {\n+            log.error(\"Authorization Exception while authorization has been disabled\", e);\n+        }\n+        context.restoreAuthSystemState();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI0MjE3Mg=="}, "originalCommit": {"oid": "54a844e033ef69d51e1e2a9b4d6c0a5e5b3855cb"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NTc1NTQzOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/content/RelationshipServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxOTozNjowM1rOIRkP7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxMDoxMzoyNFrOISoaJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI5MDYwNw==", "bodyText": "These two configs probably should be added to a config file (maybe a new relationships.cfg?) so that they may be described.  It looks (to me) like these settings need clarification, as both the max and the maxdepth seem to define how many items are updated via each of the left and right item relationships (and the both seem to exclude the immediate left & right item)...\nSo, if I'm understanding correctly:\n\nmax defines the maximum number of items to be updated for both the left and right items in the relationship.  So, a value of 20 means a max of 20 on the left side and a max of 20 on the right side (so a max of 40 total).\nmaxdepth is similar except specific to the depth...so a value of 5 means that a maximum of 5 levels deep will be scanned for updates on both the left side and the right side.", "url": "https://github.com/DSpace/DSpace/pull/3004#discussion_r555290607", "createdAt": "2021-01-11T19:36:03Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/content/RelationshipServiceImpl.java", "diffHunk": "@@ -347,6 +358,130 @@ public void delete(Context context, Relationship relationship, boolean copyToLef\n         }\n     }\n \n+\n+    /**\n+     * Utility method to ensure discovery is updated for the 2 items\n+     * This method is used when creating, modifying or deleting a relationship\n+     * The virtual metadata of the 2 items may need to be updated, so they should be re-indexed\n+     *\n+     * @param context           The relevant DSpace context\n+     * @param relationship      The relationship which has been created, updated or deleted\n+     * @throws SQLException     If something goes wrong\n+     */\n+    private void updateItemsInRelationship(Context context, Relationship relationship) throws SQLException {\n+        // Since this call is performed after creating, updating or deleting the relationships, the permissions have\n+        // already been verified. The following updateItem calls can however call the\n+        // ItemService.update() functions which would fail if the user doesn't have permission on both items.\n+        // Since we allow this edits to happen under these circumstances, we need to turn off the\n+        // authorization system here so that this failure doesn't happen when the items need to be update\n+        context.turnOffAuthorisationSystem();\n+        try {\n+            // Set a limit on the total amount of items to update at once during a relationship change\n+            int max = configurationService.getIntProperty(\"relationship.update.relateditems.max\", 20);\n+            // Set a limit on the total depth of relationships to traverse during a relationship change\n+            int maxDepth = configurationService.getIntProperty(\"relationship.update.relateditems.maxdepth\", 5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54a844e033ef69d51e1e2a9b4d6c0a5e5b3855cb"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQwNzMzMw==", "bodyText": "the config has been created, the max is not separate for left and right, so it deviates a bit from your description", "url": "https://github.com/DSpace/DSpace/pull/3004#discussion_r556407333", "createdAt": "2021-01-13T10:13:24Z", "author": {"login": "benbosman"}, "path": "dspace-api/src/main/java/org/dspace/content/RelationshipServiceImpl.java", "diffHunk": "@@ -347,6 +358,130 @@ public void delete(Context context, Relationship relationship, boolean copyToLef\n         }\n     }\n \n+\n+    /**\n+     * Utility method to ensure discovery is updated for the 2 items\n+     * This method is used when creating, modifying or deleting a relationship\n+     * The virtual metadata of the 2 items may need to be updated, so they should be re-indexed\n+     *\n+     * @param context           The relevant DSpace context\n+     * @param relationship      The relationship which has been created, updated or deleted\n+     * @throws SQLException     If something goes wrong\n+     */\n+    private void updateItemsInRelationship(Context context, Relationship relationship) throws SQLException {\n+        // Since this call is performed after creating, updating or deleting the relationships, the permissions have\n+        // already been verified. The following updateItem calls can however call the\n+        // ItemService.update() functions which would fail if the user doesn't have permission on both items.\n+        // Since we allow this edits to happen under these circumstances, we need to turn off the\n+        // authorization system here so that this failure doesn't happen when the items need to be update\n+        context.turnOffAuthorisationSystem();\n+        try {\n+            // Set a limit on the total amount of items to update at once during a relationship change\n+            int max = configurationService.getIntProperty(\"relationship.update.relateditems.max\", 20);\n+            // Set a limit on the total depth of relationships to traverse during a relationship change\n+            int maxDepth = configurationService.getIntProperty(\"relationship.update.relateditems.maxdepth\", 5);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI5MDYwNw=="}, "originalCommit": {"oid": "54a844e033ef69d51e1e2a9b4d6c0a5e5b3855cb"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NTgwMDQxOnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/RelationshipRestRepositoryIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxOTo0OToyM1rOIRkrvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxMDoxNToxOFrOISofOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI5NzcyNA==", "bodyText": "Shouldn't we also verify that every object in between the publication and the journal also contains the virtual metadata journal.title?  That might be a more complete test that your recursion is working properly. As, I believe both Journal Volume & Journal Issues should also have journal.title...correct?", "url": "https://github.com/DSpace/DSpace/pull/3004#discussion_r555297724", "createdAt": "2021-01-11T19:49:23Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/RelationshipRestRepositoryIT.java", "diffHunk": "@@ -2673,4 +2684,118 @@ public void orgUnitLeftMaxCardinalityTest() throws Exception {\n             RelationshipBuilder.deleteRelationship(idRef.get());\n         }\n     }\n+    @Test\n+    public void testVirtualMdInRESTAndSolrDoc() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        // Create entity types if needed\n+        EntityType journalEntityType = entityTypeService.findByEntityType(context, \"Journal\");\n+        if (journalEntityType == null) {\n+            journalEntityType = EntityTypeBuilder.createEntityTypeBuilder(context, \"Journal\").build();\n+        }\n+        EntityType journalVolumeEntityType = entityTypeService.findByEntityType(context, \"JournalVolume\");\n+        if (journalVolumeEntityType == null) {\n+            journalVolumeEntityType = EntityTypeBuilder.createEntityTypeBuilder(context, \"JournalVolume\").build();\n+        }\n+        EntityType journalIssueEntityType = entityTypeService.findByEntityType(context, \"JournalIssue\");\n+        if (journalIssueEntityType == null) {\n+            journalIssueEntityType = EntityTypeBuilder.createEntityTypeBuilder(context, \"JournalIssue\").build();\n+        }\n+        EntityType publicationEntityType = entityTypeService.findByEntityType(context, \"Publication\");\n+        if (publicationEntityType == null) {\n+            publicationEntityType = EntityTypeBuilder.createEntityTypeBuilder(context, \"Publication\").build();\n+        }\n+\n+        // Create relationship types if needed\n+        RelationshipType isPublicationOfJournalIssue = relationshipTypeService\n+            .findbyTypesAndTypeName(context, journalIssueEntityType, publicationEntityType,\n+                \"isPublicationOfJournalIssue\", \"isJournalIssueOfPublication\");\n+        if (isPublicationOfJournalIssue == null) {\n+            isPublicationOfJournalIssue = RelationshipTypeBuilder.createRelationshipTypeBuilder(context,\n+                journalIssueEntityType, publicationEntityType, \"isPublicationOfJournalIssue\",\n+                \"isJournalIssueOfPublication\", null, null, null, null).build();\n+        }\n+        RelationshipType isIssueOfJournalVolume = relationshipTypeService\n+            .findbyTypesAndTypeName(context, journalVolumeEntityType, journalIssueEntityType,\n+                \"isIssueOfJournalVolume\", \"isJournalVolumeOfIssue\");\n+        if (isIssueOfJournalVolume == null) {\n+            isIssueOfJournalVolume = RelationshipTypeBuilder.createRelationshipTypeBuilder(context,\n+                journalVolumeEntityType, journalIssueEntityType, \"isIssueOfJournalVolume\",\n+                \"isJournalVolumeOfIssue\", null, null, null, null).build();\n+        } else {\n+            // Otherwise error in destroy methods when removing Journal Issue-Journal Volume relationship\n+            // since the rightMinCardinality constraint would be violated upon deletion\n+            isIssueOfJournalVolume.setRightMinCardinality(0);\n+        }\n+        RelationshipType isVolumeOfJournal = relationshipTypeService\n+            .findbyTypesAndTypeName(context, journalEntityType, journalVolumeEntityType,\n+                \"isVolumeOfJournal\", \"isJournalOfVolume\");\n+        if (isVolumeOfJournal == null) {\n+            isVolumeOfJournal = RelationshipTypeBuilder.createRelationshipTypeBuilder(context,\n+                journalEntityType, journalVolumeEntityType, \"isVolumeOfJournal\", \"isJournalOfVolume\",\n+                null, null, null, null).build();\n+        } else {\n+            // Otherwise error in destroy methods when removing Journal Volume - Journal relationship\n+            // since the rightMinCardinality constraint would be violated upon deletion\n+            isVolumeOfJournal.setRightMinCardinality(0);\n+        }\n+\n+        // Create virtual metadata fields if needed\n+        MetadataSchema journalSchema = metadataSchemaService.find(context, \"journal\");\n+        if (journalSchema == null) {\n+            journalSchema = metadataSchemaService.create(context, \"journal\", \"journal\");\n+        }\n+        MetadataField journalTitleField = metadataFieldService.findByString(context, \"journal.title\", '.');\n+        if (journalTitleField == null) {\n+            journalTitleField = metadataFieldService.create(context, journalSchema, \"title\", null, \"Journal Title\");\n+        }\n+\n+        // Create entity items\n+        Item journal =\n+            ItemBuilder.createItem(context, col1).withRelationshipType(\"Journal\").withTitle(\"Journal\").build();\n+        Item journalVolume =\n+            ItemBuilder.createItem(context, col1).withRelationshipType(\"JournalVolume\").withTitle(\"JournalVolume\")\n+                       .build();\n+        Item journalIssue =\n+            ItemBuilder.createItem(context, col1).withRelationshipType(\"JournalIssue\").withTitle(\"JournalIssue\")\n+                       .build();\n+        Item publication =\n+            ItemBuilder.createItem(context, col1).withRelationshipType(\"Publication\").withTitle(\"Publication\").build();\n+\n+        // Link Publication-Journal Issue\n+        RelationshipBuilder.createRelationshipBuilder(context, journalIssue, publication, isPublicationOfJournalIssue)\n+                           .build();\n+        // Link Journal Issue-Journal Volume\n+        RelationshipBuilder.createRelationshipBuilder(context, journalVolume, journalIssue, isIssueOfJournalVolume)\n+                           .build();\n+        mockSolrSearchCore.getSolr().commit(false, false);\n+\n+        // Verify Publication item via REST does not contain virtual md journal.title\n+        getClient().perform(get(\"/api/core/items/\" + publication.getID()))\n+                   .andExpect(status().isOk())\n+                   .andExpect(jsonPath(\"$.metadata.journal.title\").doesNotExist());\n+\n+        // Verify Publication item via Solr does not contain virtual md journal.title\n+        SolrQuery solrQuery = new SolrQuery();\n+        solrQuery.setQuery(\"search.resourceid:\" + publication.getID());\n+        QueryResponse queryResponse = mockSolrSearchCore.getSolr().query(solrQuery);\n+        assertThat(queryResponse.getResults().size(), equalTo(1));\n+        assertTrue(queryResponse.getResults().get(0).getFieldValues(\"journal.title\") == null);\n+\n+        // Link Journal Volume - Journal\n+        RelationshipBuilder.createRelationshipBuilder(context, journal, journalVolume, isVolumeOfJournal).build();\n+        mockSolrSearchCore.getSolr().commit(false, false);\n+\n+        // Verify Publication item via REST does contain virtual md journal.title\n+        getClient().perform(get(\"/api/core/items/\" + publication.getID()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54a844e033ef69d51e1e2a9b4d6c0a5e5b3855cb"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQwODYzNA==", "bodyText": "This has been included, and it revealed the JournalVolume metadata was not indexed correctly when creating the relationship. This has been fixed as well", "url": "https://github.com/DSpace/DSpace/pull/3004#discussion_r556408634", "createdAt": "2021-01-13T10:15:18Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/RelationshipRestRepositoryIT.java", "diffHunk": "@@ -2673,4 +2684,118 @@ public void orgUnitLeftMaxCardinalityTest() throws Exception {\n             RelationshipBuilder.deleteRelationship(idRef.get());\n         }\n     }\n+    @Test\n+    public void testVirtualMdInRESTAndSolrDoc() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        // Create entity types if needed\n+        EntityType journalEntityType = entityTypeService.findByEntityType(context, \"Journal\");\n+        if (journalEntityType == null) {\n+            journalEntityType = EntityTypeBuilder.createEntityTypeBuilder(context, \"Journal\").build();\n+        }\n+        EntityType journalVolumeEntityType = entityTypeService.findByEntityType(context, \"JournalVolume\");\n+        if (journalVolumeEntityType == null) {\n+            journalVolumeEntityType = EntityTypeBuilder.createEntityTypeBuilder(context, \"JournalVolume\").build();\n+        }\n+        EntityType journalIssueEntityType = entityTypeService.findByEntityType(context, \"JournalIssue\");\n+        if (journalIssueEntityType == null) {\n+            journalIssueEntityType = EntityTypeBuilder.createEntityTypeBuilder(context, \"JournalIssue\").build();\n+        }\n+        EntityType publicationEntityType = entityTypeService.findByEntityType(context, \"Publication\");\n+        if (publicationEntityType == null) {\n+            publicationEntityType = EntityTypeBuilder.createEntityTypeBuilder(context, \"Publication\").build();\n+        }\n+\n+        // Create relationship types if needed\n+        RelationshipType isPublicationOfJournalIssue = relationshipTypeService\n+            .findbyTypesAndTypeName(context, journalIssueEntityType, publicationEntityType,\n+                \"isPublicationOfJournalIssue\", \"isJournalIssueOfPublication\");\n+        if (isPublicationOfJournalIssue == null) {\n+            isPublicationOfJournalIssue = RelationshipTypeBuilder.createRelationshipTypeBuilder(context,\n+                journalIssueEntityType, publicationEntityType, \"isPublicationOfJournalIssue\",\n+                \"isJournalIssueOfPublication\", null, null, null, null).build();\n+        }\n+        RelationshipType isIssueOfJournalVolume = relationshipTypeService\n+            .findbyTypesAndTypeName(context, journalVolumeEntityType, journalIssueEntityType,\n+                \"isIssueOfJournalVolume\", \"isJournalVolumeOfIssue\");\n+        if (isIssueOfJournalVolume == null) {\n+            isIssueOfJournalVolume = RelationshipTypeBuilder.createRelationshipTypeBuilder(context,\n+                journalVolumeEntityType, journalIssueEntityType, \"isIssueOfJournalVolume\",\n+                \"isJournalVolumeOfIssue\", null, null, null, null).build();\n+        } else {\n+            // Otherwise error in destroy methods when removing Journal Issue-Journal Volume relationship\n+            // since the rightMinCardinality constraint would be violated upon deletion\n+            isIssueOfJournalVolume.setRightMinCardinality(0);\n+        }\n+        RelationshipType isVolumeOfJournal = relationshipTypeService\n+            .findbyTypesAndTypeName(context, journalEntityType, journalVolumeEntityType,\n+                \"isVolumeOfJournal\", \"isJournalOfVolume\");\n+        if (isVolumeOfJournal == null) {\n+            isVolumeOfJournal = RelationshipTypeBuilder.createRelationshipTypeBuilder(context,\n+                journalEntityType, journalVolumeEntityType, \"isVolumeOfJournal\", \"isJournalOfVolume\",\n+                null, null, null, null).build();\n+        } else {\n+            // Otherwise error in destroy methods when removing Journal Volume - Journal relationship\n+            // since the rightMinCardinality constraint would be violated upon deletion\n+            isVolumeOfJournal.setRightMinCardinality(0);\n+        }\n+\n+        // Create virtual metadata fields if needed\n+        MetadataSchema journalSchema = metadataSchemaService.find(context, \"journal\");\n+        if (journalSchema == null) {\n+            journalSchema = metadataSchemaService.create(context, \"journal\", \"journal\");\n+        }\n+        MetadataField journalTitleField = metadataFieldService.findByString(context, \"journal.title\", '.');\n+        if (journalTitleField == null) {\n+            journalTitleField = metadataFieldService.create(context, journalSchema, \"title\", null, \"Journal Title\");\n+        }\n+\n+        // Create entity items\n+        Item journal =\n+            ItemBuilder.createItem(context, col1).withRelationshipType(\"Journal\").withTitle(\"Journal\").build();\n+        Item journalVolume =\n+            ItemBuilder.createItem(context, col1).withRelationshipType(\"JournalVolume\").withTitle(\"JournalVolume\")\n+                       .build();\n+        Item journalIssue =\n+            ItemBuilder.createItem(context, col1).withRelationshipType(\"JournalIssue\").withTitle(\"JournalIssue\")\n+                       .build();\n+        Item publication =\n+            ItemBuilder.createItem(context, col1).withRelationshipType(\"Publication\").withTitle(\"Publication\").build();\n+\n+        // Link Publication-Journal Issue\n+        RelationshipBuilder.createRelationshipBuilder(context, journalIssue, publication, isPublicationOfJournalIssue)\n+                           .build();\n+        // Link Journal Issue-Journal Volume\n+        RelationshipBuilder.createRelationshipBuilder(context, journalVolume, journalIssue, isIssueOfJournalVolume)\n+                           .build();\n+        mockSolrSearchCore.getSolr().commit(false, false);\n+\n+        // Verify Publication item via REST does not contain virtual md journal.title\n+        getClient().perform(get(\"/api/core/items/\" + publication.getID()))\n+                   .andExpect(status().isOk())\n+                   .andExpect(jsonPath(\"$.metadata.journal.title\").doesNotExist());\n+\n+        // Verify Publication item via Solr does not contain virtual md journal.title\n+        SolrQuery solrQuery = new SolrQuery();\n+        solrQuery.setQuery(\"search.resourceid:\" + publication.getID());\n+        QueryResponse queryResponse = mockSolrSearchCore.getSolr().query(solrQuery);\n+        assertThat(queryResponse.getResults().size(), equalTo(1));\n+        assertTrue(queryResponse.getResults().get(0).getFieldValues(\"journal.title\") == null);\n+\n+        // Link Journal Volume - Journal\n+        RelationshipBuilder.createRelationshipBuilder(context, journal, journalVolume, isVolumeOfJournal).build();\n+        mockSolrSearchCore.getSolr().commit(false, false);\n+\n+        // Verify Publication item via REST does contain virtual md journal.title\n+        getClient().perform(get(\"/api/core/items/\" + publication.getID()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI5NzcyNA=="}, "originalCommit": {"oid": "54a844e033ef69d51e1e2a9b4d6c0a5e5b3855cb"}, "originalPosition": 166}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1423, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}