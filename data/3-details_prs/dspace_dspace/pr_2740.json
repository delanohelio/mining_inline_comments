{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwMTY2Mzcw", "number": 2740, "title": "Assume login feature", "bodyText": "References\nAdd references/links to any related tickets or PRs. These may include:\n\nLink to REST Contract\n\nDescription\nRest api implementation for the assume login feature. Included are the actual \"login as\" implementation by making use of the \"X-On-Behalf-Of\" header & code to support \"loginOnBehalfOf\" on the \"features\" feature.\nInstructions for Reviewers\nPlease add a more detailed description of the changes made by your PR. At a minimum, providing a bulleted list of changes in your PR is helpful to reviewers.\nList of changes in this PR:\n\nStatelessAuthenticationFilter: contains the code for the actual \"login as\"\nLoginOnBehalfOfFeature: contains the code for the feature\n\nChecklist\nThis checklist provides a reminder of what we are going to look for when reviewing your PR. You need not complete this checklist prior to creating your PR (draft PRs are always welcome). If you are unsure about an item in the checklist, don't hesitate to ask. We're here to help!\n\n My PR is small in size (e.g. less than 1,000 lines of code, not including comments & integration tests). Exceptions may be made if previously agreed upon.\n My PR passes Checkstyle validation based on the Code Style Guide\n My PR includes Javadoc for all new (or modified) public methods and classes. It also includes Javadoc for large or complex private methods.\n My PR passes all tests and includes new/updated Unit or Integration Tests for any bug fixes, improvements or new features. A few reminders about what constitutes good tests:\n\nInclude tests for different user types, including: (1) Anonymous user, (2) Logged in user (non-admin), and (3) Administrator.\nInclude tests for known error scenarios and error codes (e.g. 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found, etc)\nFor bug fixes, include a test that reproduces the bug and proves it is fixed. For clarity, it may be useful to provide the test in a separate commit from the bug fix.\n\n\n If my PR includes new, third-party dependencies (in any pom.xml), I've made sure their licenses align with the DSpace BSD License based on the Licensing of Contributions documentation.\n If my PR modifies the REST API, I've linked to the REST Contract page (or open PR) related to this change.", "createdAt": "2020-04-07T10:02:36Z", "url": "https://github.com/DSpace/DSpace/pull/2740", "merged": true, "mergeCommit": {"oid": "aaa5f09a68d8f1fcb21896a16f24720884c014da"}, "closed": true, "closedAt": "2020-05-11T14:39:36Z", "author": {"login": "KevinVdV"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTDgQ8AH2gAyNDAwMTY2MzcwOjQ2OThlYmNkYmM4N2ZkYzkyMDFmNDk0YzVkYjczZTlmNGNkYTRhNWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcgQtMNAFqTQwOTIzNjQxMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4698ebcdbc87fdc9201f494c5db73e9f4cda4a5c", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/4698ebcdbc87fdc9201f494c5db73e9f4cda4a5c", "committedDate": "2020-03-31T13:55:36Z", "message": "[Task 70131] added support for the login as feature and added simple test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c12d83fb76092b2ac031ae0fcc45935eb9d3fa32", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/c12d83fb76092b2ac031ae0fcc45935eb9d3fa32", "committedDate": "2020-04-01T11:37:55Z", "message": "[Task 70131] intermediate fixes error handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91242285bca96412b8d8e9f670c68071621fd973", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/91242285bca96412b8d8e9f670c68071621fd973", "committedDate": "2020-04-01T14:20:26Z", "message": "[Task 70131] cleanup and futher implement login as feature"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f6e1e067b36fd3db904c81e7707d6b49d88d962", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/1f6e1e067b36fd3db904c81e7707d6b49d88d962", "committedDate": "2020-04-02T13:31:13Z", "message": "[Task 70140] implemented loginOnBehalfOfFeature and tests, cleaned up unneeded code in StatelessAuthenticationFilter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3389a2c857c37d4010e22fa97ccab4c625b6d558", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/3389a2c857c37d4010e22fa97ccab4c625b6d558", "committedDate": "2020-04-03T10:59:32Z", "message": "[Task 70178] applied feedback to the LoginAs feature"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb1a90b7dced44615776db3971b0cb596261e567", "author": {"user": {"login": "KevinVdV", "name": "Kevin Van de Velde"}}, "url": "https://github.com/DSpace/DSpace/commit/fb1a90b7dced44615776db3971b0cb596261e567", "committedDate": "2020-04-07T09:18:31Z", "message": "Removing enter in a file that we didn't need to modify"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "153786cac5978edf24d1e314d4c175c6dd55f070", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/153786cac5978edf24d1e314d4c175c6dd55f070", "committedDate": "2020-04-14T12:41:54Z", "message": "[Task 70131] added X-On-Behalf-Of to allowedHeaders"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMDYxNDY1", "url": "https://github.com/DSpace/DSpace/pull/2740#pullrequestreview-393061465", "createdAt": "2020-04-14T15:48:29Z", "commit": {"oid": "153786cac5978edf24d1e314d4c175c6dd55f070"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNTo0ODozMFrOGFVNgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjoxMzo1MVrOGFWVow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI0MzU4Ng==", "bodyText": "I suggest to support also EPersonRest object as we will need a way to inform the UI that the loginAs can or cannot be used on a specific user (You cannot assume the login of another admin in the current version)", "url": "https://github.com/DSpace/DSpace/pull/2740#discussion_r408243586", "createdAt": "2020-04-14T15:48:30Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/authorization/impl/LoginOnBehalfOfFeature.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.authorization.impl;\n+\n+import java.sql.SQLException;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.dspace.app.rest.authorization.AuthorizationFeature;\n+import org.dspace.app.rest.authorization.AuthorizationFeatureDocumentation;\n+import org.dspace.app.rest.model.BaseObjectRest;\n+import org.dspace.app.rest.model.SiteRest;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.core.Context;\n+import org.dspace.services.ConfigurationService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * The LoginOnBehalfOf feature. It can be used by Administrators when the webui.user.assumelogin property is set to true\n+ * to allow the admin to login as another user\n+ */\n+@Component\n+@AuthorizationFeatureDocumentation(name = LoginOnBehalfOfFeature.NAME,\n+    description = \"It can be used by administrators to login on behalf of a different user\")\n+public class LoginOnBehalfOfFeature implements AuthorizationFeature {\n+\n+    public static final String NAME = \"loginOnBehalfOf\";\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private ConfigurationService configurationService;\n+\n+    @Override\n+    public boolean isAuthorized(Context context, BaseObjectRest object) throws SQLException {\n+        if (!StringUtils.equals(object.getType(), SiteRest.NAME)) {\n+            return false;\n+        }\n+        if (!authorizeService.isAdmin(context)) {\n+            return false;\n+        }\n+        if (!configurationService.getBooleanProperty(\"webui.user.assumelogin\")) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public String[] getSupportedTypes() {\n+        return new String[] { SiteRest.CATEGORY + \".\" + SiteRest.NAME };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "153786cac5978edf24d1e314d4c175c6dd55f070"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI0NjQ2MA==", "bodyText": "please move this test in a dedicated class. This class should contains only general tests to validate the authorization framework and not specific features. See for instance https://github.com/DSpace/DSpace/blob/0039b309d11e3d55a2a92699b25458fe9bfc4740/dspace-server-webapp/src/test/java/org/dspace/app/rest/authorization/WithdrawFeatureRestIT.java", "url": "https://github.com/DSpace/DSpace/pull/2740#discussion_r408246460", "createdAt": "2020-04-14T15:52:20Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/AuthorizationRestRepositoryIT.java", "diffHunk": "@@ -1325,4 +1341,113 @@ private String getAuthorizationID(String epersonUuid, String featureName, String\n                 + id.toString();\n     }\n \n+    @Test\n+    public void loginOnBehalfOfTest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "153786cac5978edf24d1e314d4c175c6dd55f070"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI0ODUyOQ==", "bodyText": "I would suggest to check for an empty list here instead than exclude the authorization object", "url": "https://github.com/DSpace/DSpace/pull/2740#discussion_r408248529", "createdAt": "2020-04-14T15:55:03Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/AuthorizationRestRepositoryIT.java", "diffHunk": "@@ -1325,4 +1341,113 @@ private String getAuthorizationID(String epersonUuid, String featureName, String\n                 + id.toString();\n     }\n \n+    @Test\n+    public void loginOnBehalfOfTest() throws Exception {\n+        Site site = siteService.findSite(context);\n+        SiteRest siteRest = siteConverter.convert(site, Projection.DEFAULT);\n+        String siteUri = utils.linkToSingleResource(siteRest, \"self\").getHref();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        configurationService.setProperty(\"org.dspace.app.rest.authorization.AlwaysThrowExceptionFeature.turnoff\", true);\n+        configurationService.setProperty(\"webui.user.assumelogin\", true);\n+\n+        Authorization loginOnBehalfOfAuthorization = new Authorization(admin, loginOnBehalfOf, siteRest);\n+        getClient(token).perform(get(\"/api/authz/authorizations/search/object\")\n+                                .param(\"uri\", siteUri)\n+                                .param(\"eperson\", String.valueOf(admin.getID()))\n+                                .param(\"feature\", loginOnBehalfOf.getName()))\n+                    .andExpect(status().isOk())\n+                    .andExpect(jsonPath(\"$._embedded.authorizations\", Matchers.hasItem(\n+                        AuthorizationMatcher.matchAuthorization(loginOnBehalfOfAuthorization))));\n+    }\n+\n+    @Test\n+    public void loginOnBehalfNonSiteObjectOfTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        context.restoreAuthSystemState();\n+\n+        CommunityRest communityRest = communityConverter.convert(parentCommunity, Projection.DEFAULT);\n+        String communityUri = utils.linkToSingleResource(communityRest, \"self\").getHref();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        configurationService.setProperty(\"org.dspace.app.rest.authorization.AlwaysThrowExceptionFeature.turnoff\", true);\n+        configurationService.setProperty(\"webui.user.assumelogin\", true);\n+\n+        Authorization loginOnBehalfOfAuthorization = new Authorization(admin, loginOnBehalfOf, communityRest);\n+        getClient(token).perform(get(\"/api/authz/authorizations/search/object\")\n+                                     .param(\"uri\", communityUri)\n+                                     .param(\"eperson\", String.valueOf(admin.getID()))\n+                                     .param(\"feature\", loginOnBehalfOf.getName()))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.authorizations\", Matchers.not(Matchers.hasItem(\n+                            AuthorizationMatcher.matchAuthorization(loginOnBehalfOfAuthorization)))));\n+    }\n+\n+    @Test\n+    public void loginOnBehalfOfNonAdminUserNotFoundTest() throws Exception {\n+        Site site = siteService.findSite(context);\n+        SiteRest siteRest = siteConverter.convert(site, Projection.DEFAULT);\n+        String siteUri = utils.linkToSingleResource(siteRest, \"self\").getHref();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        configurationService.setProperty(\"org.dspace.app.rest.authorization.AlwaysThrowExceptionFeature.turnoff\", true);\n+        configurationService.setProperty(\"webui.user.assumelogin\", true);\n+\n+        Authorization loginOnBehalfOfAuthorization = new Authorization(eperson, loginOnBehalfOf, siteRest);\n+        getClient(token).perform(get(\"/api/authz/authorizations/search/object\")\n+                                     .param(\"uri\", siteUri)\n+                                     .param(\"eperson\", String.valueOf(eperson.getID()))\n+                                     .param(\"feature\", loginOnBehalfOf.getName()))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.authorizations\", Matchers.not(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "153786cac5978edf24d1e314d4c175c6dd55f070"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1MDY5MA==", "bodyText": "we should have test to verify that we cannot loginas another admin", "url": "https://github.com/DSpace/DSpace/pull/2740#discussion_r408250690", "createdAt": "2020-04-14T15:58:01Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/AuthorizationRestRepositoryIT.java", "diffHunk": "@@ -1325,4 +1341,113 @@ private String getAuthorizationID(String epersonUuid, String featureName, String\n                 + id.toString();\n     }\n \n+    @Test\n+    public void loginOnBehalfOfTest() throws Exception {\n+        Site site = siteService.findSite(context);\n+        SiteRest siteRest = siteConverter.convert(site, Projection.DEFAULT);\n+        String siteUri = utils.linkToSingleResource(siteRest, \"self\").getHref();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        configurationService.setProperty(\"org.dspace.app.rest.authorization.AlwaysThrowExceptionFeature.turnoff\", true);\n+        configurationService.setProperty(\"webui.user.assumelogin\", true);\n+\n+        Authorization loginOnBehalfOfAuthorization = new Authorization(admin, loginOnBehalfOf, siteRest);\n+        getClient(token).perform(get(\"/api/authz/authorizations/search/object\")\n+                                .param(\"uri\", siteUri)\n+                                .param(\"eperson\", String.valueOf(admin.getID()))\n+                                .param(\"feature\", loginOnBehalfOf.getName()))\n+                    .andExpect(status().isOk())\n+                    .andExpect(jsonPath(\"$._embedded.authorizations\", Matchers.hasItem(\n+                        AuthorizationMatcher.matchAuthorization(loginOnBehalfOfAuthorization))));\n+    }\n+\n+    @Test\n+    public void loginOnBehalfNonSiteObjectOfTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+        context.restoreAuthSystemState();\n+\n+        CommunityRest communityRest = communityConverter.convert(parentCommunity, Projection.DEFAULT);\n+        String communityUri = utils.linkToSingleResource(communityRest, \"self\").getHref();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        configurationService.setProperty(\"org.dspace.app.rest.authorization.AlwaysThrowExceptionFeature.turnoff\", true);\n+        configurationService.setProperty(\"webui.user.assumelogin\", true);\n+\n+        Authorization loginOnBehalfOfAuthorization = new Authorization(admin, loginOnBehalfOf, communityRest);\n+        getClient(token).perform(get(\"/api/authz/authorizations/search/object\")\n+                                     .param(\"uri\", communityUri)\n+                                     .param(\"eperson\", String.valueOf(admin.getID()))\n+                                     .param(\"feature\", loginOnBehalfOf.getName()))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.authorizations\", Matchers.not(Matchers.hasItem(\n+                            AuthorizationMatcher.matchAuthorization(loginOnBehalfOfAuthorization)))));\n+    }\n+\n+    @Test\n+    public void loginOnBehalfOfNonAdminUserNotFoundTest() throws Exception {\n+        Site site = siteService.findSite(context);\n+        SiteRest siteRest = siteConverter.convert(site, Projection.DEFAULT);\n+        String siteUri = utils.linkToSingleResource(siteRest, \"self\").getHref();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        configurationService.setProperty(\"org.dspace.app.rest.authorization.AlwaysThrowExceptionFeature.turnoff\", true);\n+        configurationService.setProperty(\"webui.user.assumelogin\", true);\n+\n+        Authorization loginOnBehalfOfAuthorization = new Authorization(eperson, loginOnBehalfOf, siteRest);\n+        getClient(token).perform(get(\"/api/authz/authorizations/search/object\")\n+                                     .param(\"uri\", siteUri)\n+                                     .param(\"eperson\", String.valueOf(eperson.getID()))\n+                                     .param(\"feature\", loginOnBehalfOf.getName()))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.authorizations\", Matchers.not(\n+                            Matchers.hasItem(AuthorizationMatcher.matchAuthorization(loginOnBehalfOfAuthorization)))));\n+    }\n+\n+    @Test\n+    public void loginOnBehalfOfNonAdminUserAssumeLoginPropertyFalseNotFoundTest() throws Exception {\n+        Site site = siteService.findSite(context);\n+        SiteRest siteRest = siteConverter.convert(site, Projection.DEFAULT);\n+        String siteUri = utils.linkToSingleResource(siteRest, \"self\").getHref();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        configurationService.setProperty(\"org.dspace.app.rest.authorization.AlwaysThrowExceptionFeature.turnoff\", true);\n+        configurationService.setProperty(\"webui.user.assumelogin\", false);\n+\n+        Authorization loginOnBehalfOfAuthorization = new Authorization(eperson, loginOnBehalfOf, siteRest);\n+        getClient(token).perform(get(\"/api/authz/authorizations/search/object\")\n+                                     .param(\"uri\", siteUri)\n+                                     .param(\"eperson\", String.valueOf(eperson.getID()))\n+                                     .param(\"feature\", loginOnBehalfOf.getName()))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.authorizations\", Matchers.not(\n+                            Matchers.hasItem(AuthorizationMatcher.matchAuthorization(loginOnBehalfOfAuthorization)))));\n+    }\n+\n+    @Test\n+    public void loginOnBehalfOfAssumeLoginPropertyFalseNotFoundTest() throws Exception {\n+        Site site = siteService.findSite(context);\n+        SiteRest siteRest = siteConverter.convert(site, Projection.DEFAULT);\n+        String siteUri = utils.linkToSingleResource(siteRest, \"self\").getHref();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        configurationService.setProperty(\"org.dspace.app.rest.authorization.AlwaysThrowExceptionFeature.turnoff\", true);\n+        configurationService.setProperty(\"webui.user.assumelogin\", false);\n+\n+        Authorization loginOnBehalfOfAuthorization = new Authorization(admin, loginOnBehalfOf, siteRest);\n+        getClient(token).perform(get(\"/api/authz/authorizations/search/object\")\n+                                     .param(\"uri\", siteUri)\n+                                     .param(\"eperson\", String.valueOf(admin.getID()))\n+                                     .param(\"feature\", loginOnBehalfOf.getName()))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.authorizations\", Matchers.not(\n+                            Matchers.hasItem(AuthorizationMatcher.matchAuthorization(loginOnBehalfOfAuthorization)))));\n+    }\n }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "153786cac5978edf24d1e314d4c175c6dd55f070"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1NzQyMQ==", "bodyText": "this cannot be an instance attribute otherwise there are issue when multiple login request are processed at the same time", "url": "https://github.com/DSpace/DSpace/pull/2740#discussion_r408257421", "createdAt": "2020-04-14T16:07:22Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/security/StatelessAuthenticationFilter.java", "diffHunk": "@@ -37,12 +46,22 @@\n \n     private static final Logger log = LoggerFactory.getLogger(StatelessAuthenticationFilter.class);\n \n+    private static final String ON_BEHALF_OF_REQUEST_PARAM = \"X-On-Behalf-Of\";\n+\n     private RestAuthenticationService restAuthenticationService;\n \n     private EPersonRestAuthenticationProvider authenticationProvider;\n \n     private RequestService requestService;\n \n+    private AuthorizeService authorizeService = AuthorizeServiceFactory.getInstance().getAuthorizeService();\n+\n+    private EPersonService ePersonService = EPersonServiceFactory.getInstance().getEPersonService();\n+\n+    private ConfigurationService configurationService = DSpaceServicesFactory.getInstance().getConfigurationService();\n+\n+    private boolean inErrorOnBehalfOf = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "153786cac5978edf24d1e314d4c175c6dd55f070"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1ODIwMQ==", "bodyText": "it is not really needed, we can simplify the code here", "url": "https://github.com/DSpace/DSpace/pull/2740#discussion_r408258201", "createdAt": "2020-04-14T16:08:24Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/LoginAsEPersonIT.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.UUID;\n+\n+import org.dspace.app.rest.builder.EPersonBuilder;\n+import org.dspace.app.rest.matcher.EPersonMatcher;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.eperson.EPerson;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.services.ConfigurationService;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class LoginAsEPersonIT extends AbstractControllerIntegrationTest {\n+\n+    @Autowired\n+    private ConfigurationService configurationService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "153786cac5978edf24d1e314d4c175c6dd55f070"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1ODUyMA==", "bodyText": "the turnOff is not really needed", "url": "https://github.com/DSpace/DSpace/pull/2740#discussion_r408258520", "createdAt": "2020-04-14T16:08:52Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/LoginAsEPersonIT.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.UUID;\n+\n+import org.dspace.app.rest.builder.EPersonBuilder;\n+import org.dspace.app.rest.matcher.EPersonMatcher;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.eperson.EPerson;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.services.ConfigurationService;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class LoginAsEPersonIT extends AbstractControllerIntegrationTest {\n+\n+    @Autowired\n+    private ConfigurationService configurationService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"webui.user.assumelogin\", true);\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void loggedInUserRetrievalTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/authn/status\")\n+                                    .param(\"projection\", \"full\"))\n+                    .andExpect(status().isOk())\n+                    .andExpect(jsonPath(\"$._embedded.eperson\", EPersonMatcher.matchEPersonOnEmail(admin.getEmail())));\n+\n+\n+    }\n+    @Test\n+    public void loggedInAsOtherUserRetrievalTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/authn/status\")\n+                                    .param(\"projection\", \"full\")\n+                                    .header(\"X-On-Behalf-Of\", eperson.getID()))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.eperson\",\n+                                            EPersonMatcher.matchEPersonOnEmail(eperson.getEmail())));\n+\n+\n+    }\n+\n+    @Test\n+    public void loggedInAsOtherUserNotAUuidInHeaderBadRequestRetrievalTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/authn/status\")\n+                                     .param(\"projection\", \"full\")\n+                                     .header(\"X-On-Behalf-Of\", \"not-a-uuid\"))\n+                        .andExpect(status().isBadRequest());\n+\n+\n+    }\n+\n+    @Test\n+    public void loggedInAsOtherUserWrongUuidInHeaderBadRequestRetrievalTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/authn/status\")\n+                                     .param(\"projection\", \"full\")\n+                                     .header(\"X-On-Behalf-Of\", UUID.randomUUID()))\n+                        .andExpect(status().isBadRequest());\n+\n+\n+    }\n+\n+    @Test\n+    public void loggedInAsOtherUserNoPermissionForbiddenRetrievalTest() throws Exception {\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/authn/status\")\n+                                     .param(\"projection\", \"full\")\n+                                     .header(\"X-On-Behalf-Of\", eperson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+\n+    }\n+\n+\n+    @Test\n+    public void loggedInUserPropertyFalseTest() throws Exception {\n+        context.turnOffAuthorisationSystem();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "153786cac5978edf24d1e314d4c175c6dd55f070"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1OTQ1NA==", "bodyText": "I would suggest to don't revert the configuration manually here the change as this is already done in a Before method (just to avoid in future confusion in other developers)", "url": "https://github.com/DSpace/DSpace/pull/2740#discussion_r408259454", "createdAt": "2020-04-14T16:10:11Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/LoginAsEPersonIT.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.UUID;\n+\n+import org.dspace.app.rest.builder.EPersonBuilder;\n+import org.dspace.app.rest.matcher.EPersonMatcher;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.eperson.EPerson;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.services.ConfigurationService;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class LoginAsEPersonIT extends AbstractControllerIntegrationTest {\n+\n+    @Autowired\n+    private ConfigurationService configurationService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"webui.user.assumelogin\", true);\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void loggedInUserRetrievalTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/authn/status\")\n+                                    .param(\"projection\", \"full\"))\n+                    .andExpect(status().isOk())\n+                    .andExpect(jsonPath(\"$._embedded.eperson\", EPersonMatcher.matchEPersonOnEmail(admin.getEmail())));\n+\n+\n+    }\n+    @Test\n+    public void loggedInAsOtherUserRetrievalTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/authn/status\")\n+                                    .param(\"projection\", \"full\")\n+                                    .header(\"X-On-Behalf-Of\", eperson.getID()))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.eperson\",\n+                                            EPersonMatcher.matchEPersonOnEmail(eperson.getEmail())));\n+\n+\n+    }\n+\n+    @Test\n+    public void loggedInAsOtherUserNotAUuidInHeaderBadRequestRetrievalTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/authn/status\")\n+                                     .param(\"projection\", \"full\")\n+                                     .header(\"X-On-Behalf-Of\", \"not-a-uuid\"))\n+                        .andExpect(status().isBadRequest());\n+\n+\n+    }\n+\n+    @Test\n+    public void loggedInAsOtherUserWrongUuidInHeaderBadRequestRetrievalTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/authn/status\")\n+                                     .param(\"projection\", \"full\")\n+                                     .header(\"X-On-Behalf-Of\", UUID.randomUUID()))\n+                        .andExpect(status().isBadRequest());\n+\n+\n+    }\n+\n+    @Test\n+    public void loggedInAsOtherUserNoPermissionForbiddenRetrievalTest() throws Exception {\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/authn/status\")\n+                                     .param(\"projection\", \"full\")\n+                                     .header(\"X-On-Behalf-Of\", eperson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+\n+    }\n+\n+\n+    @Test\n+    public void loggedInUserPropertyFalseTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"webui.user.assumelogin\", false);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/authn/status\")\n+                                     .header(\"X-On-Behalf-Of\", eperson.getID()))\n+                        .andExpect(status().isBadRequest());\n+\n+        context.turnOffAuthorisationSystem();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "153786cac5978edf24d1e314d4c175c6dd55f070"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2MjA1MQ==", "bodyText": "I would like to have an additional test using the loginAs feature in some core functionalities like\n\nworkspaceitems (to check that the item created with the loginAs are owned by the impersonated user or that the user can search for his items)\ntasks are claimed according to the loginas\nactions reserved to an admin are prevent to the loginAs (for instance trying to delete an archived item after loginas a normal user)", "url": "https://github.com/DSpace/DSpace/pull/2740#discussion_r408262051", "createdAt": "2020-04-14T16:13:51Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/LoginAsEPersonIT.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import java.util.UUID;\n+\n+import org.dspace.app.rest.builder.EPersonBuilder;\n+import org.dspace.app.rest.matcher.EPersonMatcher;\n+import org.dspace.app.rest.test.AbstractControllerIntegrationTest;\n+import org.dspace.eperson.EPerson;\n+import org.dspace.eperson.Group;\n+import org.dspace.eperson.service.GroupService;\n+import org.dspace.services.ConfigurationService;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class LoginAsEPersonIT extends AbstractControllerIntegrationTest {\n+\n+    @Autowired\n+    private ConfigurationService configurationService;\n+\n+    @Autowired\n+    private GroupService groupService;\n+\n+    @Before\n+    public void setup() {\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"webui.user.assumelogin\", true);\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void loggedInUserRetrievalTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/authn/status\")\n+                                    .param(\"projection\", \"full\"))\n+                    .andExpect(status().isOk())\n+                    .andExpect(jsonPath(\"$._embedded.eperson\", EPersonMatcher.matchEPersonOnEmail(admin.getEmail())));\n+\n+\n+    }\n+    @Test\n+    public void loggedInAsOtherUserRetrievalTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/authn/status\")\n+                                    .param(\"projection\", \"full\")\n+                                    .header(\"X-On-Behalf-Of\", eperson.getID()))\n+                        .andExpect(status().isOk())\n+                        .andExpect(jsonPath(\"$._embedded.eperson\",\n+                                            EPersonMatcher.matchEPersonOnEmail(eperson.getEmail())));\n+\n+\n+    }\n+\n+    @Test\n+    public void loggedInAsOtherUserNotAUuidInHeaderBadRequestRetrievalTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/authn/status\")\n+                                     .param(\"projection\", \"full\")\n+                                     .header(\"X-On-Behalf-Of\", \"not-a-uuid\"))\n+                        .andExpect(status().isBadRequest());\n+\n+\n+    }\n+\n+    @Test\n+    public void loggedInAsOtherUserWrongUuidInHeaderBadRequestRetrievalTest() throws Exception {\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/authn/status\")\n+                                     .param(\"projection\", \"full\")\n+                                     .header(\"X-On-Behalf-Of\", UUID.randomUUID()))\n+                        .andExpect(status().isBadRequest());\n+\n+\n+    }\n+\n+    @Test\n+    public void loggedInAsOtherUserNoPermissionForbiddenRetrievalTest() throws Exception {\n+\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/authn/status\")\n+                                     .param(\"projection\", \"full\")\n+                                     .header(\"X-On-Behalf-Of\", eperson.getID()))\n+                        .andExpect(status().isForbidden());\n+\n+\n+    }\n+\n+\n+    @Test\n+    public void loggedInUserPropertyFalseTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"webui.user.assumelogin\", false);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/authn/status\")\n+                                     .header(\"X-On-Behalf-Of\", eperson.getID()))\n+                        .andExpect(status().isBadRequest());\n+\n+        context.turnOffAuthorisationSystem();\n+        configurationService.setProperty(\"webui.user.assumelogin\", true);\n+        context.restoreAuthSystemState();\n+    }\n+\n+\n+    @Test\n+    public void loggedInUserOtherAdminTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson testEperson = EPersonBuilder.createEPerson(context).withEmail(\"loginasuseradmin@test.com\").build();\n+\n+\n+        Group adminGroup = groupService.findByName(context, Group.ADMIN);\n+        groupService.addMember(context, adminGroup, testEperson);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(admin.getEmail(), password);\n+\n+        getClient(token).perform(get(\"/api/authn/status\")\n+                                     .header(\"X-On-Behalf-Of\", testEperson.getID()))\n+                        .andExpect(status().isBadRequest());\n+\n+\n+\n+\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "153786cac5978edf24d1e314d4c175c6dd55f070"}, "originalPosition": 149}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MTM2Mjc1", "url": "https://github.com/DSpace/DSpace/pull/2740#pullrequestreview-394136275", "createdAt": "2020-04-15T21:08:15Z", "commit": {"oid": "153786cac5978edf24d1e314d4c175c6dd55f070"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMTowODoxNVrOGGLmxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMTowODoxNVrOGGLmxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEzNDc5MQ==", "bodyText": "This isErrorOnBehalfOf flag is really odd to me & doesn't seem to be necessary.  It seems like you should be able to refactor this code to no longer use it....ideally you should return immediately after any call to response.sendError() (to avoid anything else trying to add to the response).  So, maybe this method could be refactored to simply check for the header here, and call getOnBehalfOfAuthentication.  If that method throws an error, catch it and call sendError().  Otherwise, proceed as normal.", "url": "https://github.com/DSpace/DSpace/pull/2740#discussion_r409134791", "createdAt": "2020-04-15T21:08:15Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/security/StatelessAuthenticationFilter.java", "diffHunk": "@@ -58,16 +77,19 @@ protected void doFilterInternal(HttpServletRequest req,\n                                     HttpServletResponse res,\n                                     FilterChain chain) throws IOException, ServletException {\n \n-        Authentication authentication = getAuthentication(req);\n+        inErrorOnBehalfOf = false;\n+        Authentication authentication = getAuthentication(req, res);\n         if (authentication != null) {\n             SecurityContextHolder.getContext().setAuthentication(authentication);\n             restAuthenticationService.invalidateAuthenticationCookie(res);\n         }\n-\n+        if (inErrorOnBehalfOf) {\n+            return;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "153786cac5978edf24d1e314d4c175c6dd55f070"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf61ae987e09c275146aa86c88b1e075d2241213", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/cf61ae987e09c275146aa86c88b1e075d2241213", "committedDate": "2020-04-22T07:11:28Z", "message": "[Task 70478] applied feedback to the login as eperson functionality and tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c28c6550148f98f3144bc90126908f502286a55", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/3c28c6550148f98f3144bc90126908f502286a55", "committedDate": "2020-04-22T10:56:42Z", "message": "[Task 70478] applied feedback to the login as feature"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MDM0OTIy", "url": "https://github.com/DSpace/DSpace/pull/2740#pullrequestreview-399034922", "createdAt": "2020-04-23T12:10:21Z", "commit": {"oid": "3c28c6550148f98f3144bc90126908f502286a55"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1MzQ5NDMy", "url": "https://github.com/DSpace/DSpace/pull/2740#pullrequestreview-405349432", "createdAt": "2020-05-04T21:09:39Z", "commit": {"oid": "3c28c6550148f98f3144bc90126908f502286a55"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMTowOTozOVrOGQSTaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMToyNjo0MVrOGQS03g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTczMDI4MA==", "bodyText": "Could we add some comments to this method. It's not well described currently.  It looks like it's covering some scenarios that are not described in the class JavaDocs.  Namely, it looks like you have LoginOnBehalfOf  rights if:\n\nFeature is enabled, you request it on a Site and you are an admin  (I'm not sure what Site LoginOnBehalfOf means...does this mean you can have this right on every user?  What about other users that are also Admins?)\nOr, Feature is enabled, you request it on an EPerson and you are NOT that EPerson and that EPerson is NOT and Admin.\n\nAm I reading the code correctly?  The logic here is a bit hard to read, so it'd be good to describe in a comment. or two.", "url": "https://github.com/DSpace/DSpace/pull/2740#discussion_r419730280", "createdAt": "2020-05-04T21:09:39Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/authorization/impl/LoginOnBehalfOfFeature.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.authorization.impl;\n+\n+import java.sql.SQLException;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.dspace.app.rest.authorization.AuthorizationFeature;\n+import org.dspace.app.rest.authorization.AuthorizationFeatureDocumentation;\n+import org.dspace.app.rest.model.BaseObjectRest;\n+import org.dspace.app.rest.model.EPersonRest;\n+import org.dspace.app.rest.model.SiteRest;\n+import org.dspace.authorize.service.AuthorizeService;\n+import org.dspace.core.Context;\n+import org.dspace.eperson.EPerson;\n+import org.dspace.eperson.service.EPersonService;\n+import org.dspace.services.ConfigurationService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * The LoginOnBehalfOf feature. It can be used by Administrators when the webui.user.assumelogin property is set to true\n+ * to allow the admin to login as another user\n+ */\n+@Component\n+@AuthorizationFeatureDocumentation(name = LoginOnBehalfOfFeature.NAME,\n+    description = \"It can be used by administrators to login on behalf of a different user\")\n+public class LoginOnBehalfOfFeature implements AuthorizationFeature {\n+\n+    public static final String NAME = \"loginOnBehalfOf\";\n+\n+    @Autowired\n+    private AuthorizeService authorizeService;\n+\n+    @Autowired\n+    private ConfigurationService configurationService;\n+\n+    @Autowired\n+    private EPersonService ePersonService;\n+\n+    @Override\n+    public boolean isAuthorized(Context context, BaseObjectRest object) throws SQLException {\n+        if (!StringUtils.equals(object.getType(), SiteRest.NAME) &&\n+            !StringUtils.equals(object.getType(), EPersonRest.NAME)) {\n+            return false;\n+        }\n+        if (!authorizeService.isAdmin(context)) {\n+            return false;\n+        }\n+        if (!configurationService.getBooleanProperty(\"webui.user.assumelogin\")) {\n+            return false;\n+        }\n+        if (StringUtils.equals(object.getType(), EPersonRest.NAME)) {\n+            EPersonRest ePersonRest = (EPersonRest) object;\n+            EPerson currentUser = context.getCurrentUser();\n+            if (StringUtils.equalsIgnoreCase(currentUser.getEmail(), ePersonRest.getEmail())) {\n+                return false;\n+            }\n+\n+            EPerson ePerson = ePersonService.findByEmail(context, ePersonRest.getEmail());\n+            if (authorizeService.isAdmin(context, ePerson)) {\n+                return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c28c6550148f98f3144bc90126908f502286a55"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTczNzE1OA==", "bodyText": "This entire Pair logic seems really odd to me.  Why not just have getAuthentication() return either Authentication or null?  If an error needs to occur, then getAuthentication() should throw an exception, which then can be caught in this method and turned into a response.sendError().\nI don't see a scenario where you'd ever want to return both an Authentication and an error (which is what this Pair logic seems to imply could occur).  So, there's no need to have this Pair, as either you have an Authentication, it's null, or you throw an error.  Those can all be handled just via normal error handling scenarios.", "url": "https://github.com/DSpace/DSpace/pull/2740#discussion_r419737158", "createdAt": "2020-05-04T21:23:25Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/security/StatelessAuthenticationFilter.java", "diffHunk": "@@ -58,16 +76,34 @@ protected void doFilterInternal(HttpServletRequest req,\n                                     HttpServletResponse res,\n                                     FilterChain chain) throws IOException, ServletException {\n \n-        Authentication authentication = getAuthentication(req);\n+        Pair<Authentication, Boolean> pair = getAuthentication(req, res);\n+        Authentication authentication = pair.getLeft();\n         if (authentication != null) {\n             SecurityContextHolder.getContext().setAuthentication(authentication);\n             restAuthenticationService.invalidateAuthenticationCookie(res);\n         }\n-\n+        if (pair.getRight()) {\n+            return;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c28c6550148f98f3144bc90126908f502286a55"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTczODg0Ng==", "bodyText": "This also seems a bit odd to me.  Why would you not return an error when an error occurred?  This seems to be essentially a no-op if a SQLException happens (or am I missing something)?", "url": "https://github.com/DSpace/DSpace/pull/2740#discussion_r419738846", "createdAt": "2020-05-04T21:26:41Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/security/StatelessAuthenticationFilter.java", "diffHunk": "@@ -81,15 +117,69 @@ private Authentication getAuthentication(HttpServletRequest request) {\n \n                 //Get the Spring authorities for this eperson\n                 List<GrantedAuthority> authorities = authenticationProvider.getGrantedAuthorities(context, eperson);\n+                String onBehalfOfParameterValue = request.getHeader(ON_BEHALF_OF_REQUEST_PARAM);\n+                if (onBehalfOfParameterValue != null) {\n+                    if (configurationService.getBooleanProperty(\"webui.user.assumelogin\")) {\n+                        return getOnBehalfOfAuthentication(context, onBehalfOfParameterValue, res);\n+                    } else {\n+                        res.sendError(HttpServletResponse.SC_BAD_REQUEST, \"The login as feature is not allowed\" +\n+                            \" due to the current configuration\");\n+                        return Pair.of(null, true);\n+                    }\n+                }\n \n                 //Return the Spring authentication object\n-                return new DSpaceAuthentication(eperson.getEmail(), authorities);\n+                return Pair.of(new DSpaceAuthentication(eperson.getEmail(), authorities), false);\n             } else {\n-                return null;\n+                return Pair.of(null, false);\n+            }\n+        } else {\n+            if (request.getHeader(ON_BEHALF_OF_REQUEST_PARAM) != null) {\n+                res.sendError(HttpServletResponse.SC_UNAUTHORIZED, \"Only admins are allowed to use the\" +\n+                    \" login as feature\");\n+                return Pair.of(null, true);\n             }\n         }\n \n-        return null;\n+        return Pair.of(null, false);\n+    }\n+\n+    private Pair<Authentication, Boolean> getOnBehalfOfAuthentication(Context context, String onBehalfOfParameterValue,\n+                                                       HttpServletResponse res) throws IOException {\n+\n+        try {\n+            if (!authorizeService.isAdmin(context)) {\n+                res.sendError(HttpServletResponse.SC_FORBIDDEN, \"Only admins are allowed to use the\" +\n+                    \" login as feature\");\n+                return Pair.of(null, true);\n+            }\n+            UUID epersonUuid = UUIDUtils.fromString(onBehalfOfParameterValue);\n+            if (epersonUuid == null) {\n+                res.sendError(HttpServletResponse.SC_BAD_REQUEST, \"The given UUID in the X-On-Behalf-Of header \" +\n+                    \"was not a proper UUID\");\n+                return Pair.of(null, true);\n+            }\n+            EPerson onBehalfOfEPerson = ePersonService.find(context, epersonUuid);\n+            if (onBehalfOfEPerson == null) {\n+                res.sendError(HttpServletResponse.SC_BAD_REQUEST, \"The given UUID in the X-On-Behalf-Of header \" +\n+                    \"was not a proper EPerson UUID\");\n+                return Pair.of(null, true);\n+            }\n+            if (!authorizeService.isAdmin(context, onBehalfOfEPerson)) {\n+                requestService.setCurrentUserId(epersonUuid);\n+                context.switchContextUser(onBehalfOfEPerson);\n+                return Pair.of(new DSpaceAuthentication(onBehalfOfEPerson.getEmail(),\n+                                authenticationProvider.getGrantedAuthorities(context, onBehalfOfEPerson)), false);\n+            } else {\n+                res.sendError(HttpServletResponse.SC_BAD_REQUEST, \"You're unable to use the login as feature to log \" +\n+                    \"in as another admin\");\n+                return Pair.of(null, true);\n+            }\n+\n+        } catch (SQLException e) {\n+            log.error(e.getMessage(), e);\n+            return Pair.of(null, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c28c6550148f98f3144bc90126908f502286a55"}, "originalPosition": 154}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb6c5ccccc8e280d81345387c966dd5c8512370f", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/cb6c5ccccc8e280d81345387c966dd5c8512370f", "committedDate": "2020-05-07T07:31:17Z", "message": "[Task 70763] applied community feedback to the LoginOnBehalfOf feature"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NTA5MjYw", "url": "https://github.com/DSpace/DSpace/pull/2740#pullrequestreview-407509260", "createdAt": "2020-05-07T14:09:01Z", "commit": {"oid": "cb6c5ccccc8e280d81345387c966dd5c8512370f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNDowOTowMlrOGSAXHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNDowOTowMlrOGSAXHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzMzQ2OA==", "bodyText": "the change in this class can be removed now that the test are moved to a dedicated class", "url": "https://github.com/DSpace/DSpace/pull/2740#discussion_r421533468", "createdAt": "2020-05-07T14:09:02Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/AuthorizationRestRepositoryIT.java", "diffHunk": "@@ -125,6 +130,7 @@ public void setUp() throws Exception {\n         trueForLoggedUsers = authorizationFeatureService.find(TrueForLoggedUsersFeature.NAME);\n         trueForTestUsers = authorizationFeatureService.find(TrueForTestUsersFeature.NAME);\n         trueForUsersInGroupTest = authorizationFeatureService.find(TrueForUsersInGroupTestFeature.NAME);\n+        loginOnBehalfOf = authorizationFeatureService.find(LoginOnBehalfOfFeature.NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb6c5ccccc8e280d81345387c966dd5c8512370f"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ece341e7ba7409e4973a22f9ac21f16f3231b422", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/ece341e7ba7409e4973a22f9ac21f16f3231b422", "committedDate": "2020-05-08T08:21:31Z", "message": "Removed unused AuthorizationFeature variable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4Mjk1NjYw", "url": "https://github.com/DSpace/DSpace/pull/2740#pullrequestreview-408295660", "createdAt": "2020-05-08T14:52:05Z", "commit": {"oid": "ece341e7ba7409e4973a22f9ac21f16f3231b422"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNDo1MjowNVrOGSoXaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNDo1MjowNVrOGSoXaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE4ODkwNw==", "bodyText": "These JavaDocs are now incorrect as they describe how the method worked prior to the refactor. The Pair was removed.  @KevinVdV could we get these updated quickly?  This is the last thing I see that needs updating before we can merge.", "url": "https://github.com/DSpace/DSpace/pull/2740#discussion_r422188907", "createdAt": "2020-05-08T14:52:05Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/security/StatelessAuthenticationFilter.java", "diffHunk": "@@ -58,16 +77,45 @@ protected void doFilterInternal(HttpServletRequest req,\n                                     HttpServletResponse res,\n                                     FilterChain chain) throws IOException, ServletException {\n \n-        Authentication authentication = getAuthentication(req);\n+        Authentication authentication = null;\n+        try {\n+            authentication = getAuthentication(req, res);\n+        } catch (AuthorizeException e) {\n+            res.sendError(HttpServletResponse.SC_UNAUTHORIZED, e.getMessage());\n+            log.error(e.getMessage(), e);\n+            return;\n+        } catch (IllegalArgumentException | SQLException e) {\n+            res.sendError(HttpServletResponse.SC_BAD_REQUEST, e.getMessage());\n+            log.error(e.getMessage(), e);\n+            return;\n+        } catch (AccessDeniedException e) {\n+            res.sendError(HttpServletResponse.SC_FORBIDDEN, e.getMessage());\n+            log.error(e.getMessage(), e);\n+            return;\n+        }\n         if (authentication != null) {\n             SecurityContextHolder.getContext().setAuthentication(authentication);\n             restAuthenticationService.invalidateAuthenticationCookie(res);\n         }\n-\n         chain.doFilter(req, res);\n     }\n \n-    private Authentication getAuthentication(HttpServletRequest request) {\n+    /**\n+     * This method will return a Pair instance with an Authentication object as the left side of the pair and a Boolean\n+     * for the right side of the pair which will indicate whether there was an error in the OnBehalfOf parsing or not\n+     * The Authentication object will be attempted to be for the eperson with the uuid in the parameter. Incase\n+     * this is able to be done properly, we'll be giving a pair back with the EPerson Authentication in the left side\n+     * and a false boolean as the right side.\n+     * If the Authentication object returned is not null, we'll be logged in as this EPerson given through from the\n+     * request. If the Boolean is true, we'll stop the execution and show a BadRequest error\n+     * @param request       The current request\n+     * @param res           The current response\n+     * @return              A Pair instance with the Authentication object on the left side and the boolean\n+     *                      indicating errors on the right side\n+     * @throws IOException  If something goes wrong\n+     */\n+    private Authentication getAuthentication(HttpServletRequest request, HttpServletResponse res)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ece341e7ba7409e4973a22f9ac21f16f3231b422"}, "originalPosition": 95}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NzM3NDAz", "url": "https://github.com/DSpace/DSpace/pull/2740#pullrequestreview-408737403", "createdAt": "2020-05-10T11:53:29Z", "commit": {"oid": "ece341e7ba7409e4973a22f9ac21f16f3231b422"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7cbe8c90ae70aa4096f0dc2e67c676366d391d8", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/d7cbe8c90ae70aa4096f0dc2e67c676366d391d8", "committedDate": "2020-05-11T06:33:39Z", "message": "Updated javadoc on StatelessAuthenticationFilter#getAuthentication"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5MjM2NDEw", "url": "https://github.com/DSpace/DSpace/pull/2740#pullrequestreview-409236410", "createdAt": "2020-05-11T14:39:30Z", "commit": {"oid": "d7cbe8c90ae70aa4096f0dc2e67c676366d391d8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1421, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}