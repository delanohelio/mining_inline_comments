{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1NDcyODM4", "number": 2674, "title": "[DS-4434] Fix Context.commit() and Context.isValid() behavior. Add more tests", "bodyText": "Fix for https://jira.lyrasis.org/browse/DS-4434\nThis PR refactors the Context object slightly to ensure proper behavior of the commit(), complete() and abort() methods. It enhances the comments & tests to prove these methods all behave as described.  Namely, the behaviors are as such:\n\ncomplete() and abort() should both invalidate a Context & close the current Hibernate Transaction & Session (database connection). These mostly behaved as expected, though minor refactors were made.\ncommit() should simply close the current Hibernate Transaction, but keep the same Hibernate Session & also keep the Context valid.  The misbehavior of commit() was noted in the DS-4434 ticket, and proven by a new test in this PR (see my inline comment below).\n\nI've also enhanced the comments in HibernateDBConnection and added tests for methods in that class to prove their behavior.\nThese changes to Context & HibernateDBConnection work for all existing tests except for the RelationshipTypeBuilder, which was improperly reusing a globally shared Context to cleanup test context (unlike any other Builder class).  This Builder was fixed to use its own Context.\nMore eyes on this PR are obviously welcome as these are core classes in the DSpace backend.  This is ready for review.\n(I have not tested this on DSpace 6.x, but I expect the same flaw exists there as well. This area of the code has not changed significantly between 6.x and 7.x)", "createdAt": "2020-02-14T16:33:49Z", "url": "https://github.com/DSpace/DSpace/pull/2674", "merged": true, "mergeCommit": {"oid": "81ae8b1738141dddd44a52aafa16f9d85f41ca9c"}, "closed": true, "closedAt": "2020-02-20T16:28:11Z", "author": {"login": "tdonohue"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcEQ0exgH2gAyMzc1NDcyODM4OjZhMTQ2OTliZDEzMWYzNTVjMDQ2MjJlYTRjZGNhMGI3Yzc1ZDdmYzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcF-qxQAH2gAyMzc1NDcyODM4OjgwODMxNjU5OWU1ZTg1YWMwNzQ4YzBiMGNiYzljNmYzZTU5OTBkNDA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6a14699bd131f355c04622ea4cdca0b7c75d7fc7", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/6a14699bd131f355c04622ea4cdca0b7c75d7fc7", "committedDate": "2020-02-14T14:57:35Z", "message": "Add more Tests for Context. Bug fixes based on that. Enhance javadocs in HibernateDBConnection"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f879a2086b7f5ae727e82b577d155d8f209dbf7", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/7f879a2086b7f5ae727e82b577d155d8f209dbf7", "committedDate": "2020-02-14T14:57:36Z", "message": "Add tests for HibernateDBConnection. Fix failing ContexTest methods. Bug fixes found via Tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73f8dc100e936507abc3bf8b72e673ee27bafadd", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/73f8dc100e936507abc3bf8b72e673ee27bafadd", "committedDate": "2020-02-14T14:57:36Z", "message": "Do not reuse global Context for cleanup actions...it may already be closed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5fe08c15802b136764a6b375a327b27b4876a53", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/a5fe08c15802b136764a6b375a327b27b4876a53", "committedDate": "2020-02-14T15:39:04Z", "message": "Minor spelling/grammar fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MDY4ODM2", "url": "https://github.com/DSpace/DSpace/pull/2674#pullrequestreview-359068836", "createdAt": "2020-02-14T16:35:39Z", "commit": {"oid": "a5fe08c15802b136764a6b375a327b27b4876a53"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNjozNTozOVrOFp8mQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNjozNTozOVrOFp8mQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUyODc2OA==", "bodyText": "NOTE for reviewers: This is the test that will fail on current master.  Anytime context.commit() is called, context.isValid() will return false until a new database transaction is started in that same Context.", "url": "https://github.com/DSpace/DSpace/pull/2674#discussion_r379528768", "createdAt": "2020-02-14T16:35:39Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/test/java/org/dspace/core/ContextTest.java", "diffHunk": "@@ -255,6 +261,60 @@ public void testComplete2() throws SQLException {\n         cleanupContext(instance);\n     }\n \n+    /**\n+     * Test of commit method, of class Context.\n+     */\n+    @Test\n+    public void testCommit() throws SQLException, AuthorizeException, IOException {\n+        // To test commit() we need a new Context object\n+        Context instance = new Context();\n+\n+        // By default, we should have a new DB connection, so let's make sure it is there\n+        assertThat(\"HibernateDBConnection should exist\", instance.getDBConnection(), notNullValue());\n+        assertTrue(\"Context should be valid\", instance.isValid());\n+        assertTrue(\"Transaction should be open\", instance.isTransactionAlive());\n+\n+        // Allow full Admin perms (in new context)\n+        when(authorizeServiceSpy.isAdmin(instance)).thenReturn(true);\n+\n+        // Create a new EPerson (to be committed)\n+        String createdEmail = \"myfakeemail@gmail.com\";\n+        EPerson newUser = ePersonService.create(instance);\n+        newUser.setFirstName(instance, \"Tim\");\n+        newUser.setLastName(instance, \"Smith\");\n+        newUser.setEmail(createdEmail);\n+        newUser.setCanLogIn(true);\n+        newUser.setLanguage(instance, I18nUtil.getDefaultLocale().getLanguage());\n+\n+        // Now, call commit()\n+        instance.commit();\n+\n+        // We expect our DB connection to still exist\n+        assertThat(\"HibernateDBConnection should still be open\", instance.getDBConnection(), notNullValue());\n+        // We expect the Context to be valid\n+        assertTrue(\"Context should still be valid\", instance.isValid());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5fe08c15802b136764a6b375a327b27b4876a53"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjM0NDUz", "url": "https://github.com/DSpace/DSpace/pull/2674#pullrequestreview-359234453", "createdAt": "2020-02-14T21:39:07Z", "commit": {"oid": "a5fe08c15802b136764a6b375a327b27b4876a53"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMTozOTowN1rOFqEZ-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMTozOTowN1rOFqEZ-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY1NjY5OQ==", "bodyText": "Small point:  I'm always leery of testing with real email domains, even if the localpart \"should be fake\".  myfakeemail@example.com should be guaranteed undeliverable, since that domain is reserved.", "url": "https://github.com/DSpace/DSpace/pull/2674#discussion_r379656699", "createdAt": "2020-02-14T21:39:07Z", "author": {"login": "mwoodiupui"}, "path": "dspace-api/src/test/java/org/dspace/core/ContextTest.java", "diffHunk": "@@ -255,6 +261,60 @@ public void testComplete2() throws SQLException {\n         cleanupContext(instance);\n     }\n \n+    /**\n+     * Test of commit method, of class Context.\n+     */\n+    @Test\n+    public void testCommit() throws SQLException, AuthorizeException, IOException {\n+        // To test commit() we need a new Context object\n+        Context instance = new Context();\n+\n+        // By default, we should have a new DB connection, so let's make sure it is there\n+        assertThat(\"HibernateDBConnection should exist\", instance.getDBConnection(), notNullValue());\n+        assertTrue(\"Context should be valid\", instance.isValid());\n+        assertTrue(\"Transaction should be open\", instance.isTransactionAlive());\n+\n+        // Allow full Admin perms (in new context)\n+        when(authorizeServiceSpy.isAdmin(instance)).thenReturn(true);\n+\n+        // Create a new EPerson (to be committed)\n+        String createdEmail = \"myfakeemail@gmail.com\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5fe08c15802b136764a6b375a327b27b4876a53"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjM4ODY3", "url": "https://github.com/DSpace/DSpace/pull/2674#pullrequestreview-359238867", "createdAt": "2020-02-14T21:48:11Z", "commit": {"oid": "a5fe08c15802b136764a6b375a327b27b4876a53"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMTo0ODoxMVrOFqEn9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQyMTo0ODoxMVrOFqEn9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY2MDI3OQ==", "bodyText": "Could be logged at DEBUG level.  Not a big deal.", "url": "https://github.com/DSpace/DSpace/pull/2674#discussion_r379660279", "createdAt": "2020-02-14T21:48:11Z", "author": {"login": "mwoodiupui"}, "path": "dspace-api/src/main/java/org/dspace/core/Context.java", "diffHunk": "@@ -571,32 +591,32 @@ public boolean isReadOnly() {\n         return mode != null && mode == Mode.READ_ONLY;\n     }\n \n+    /**\n+     * Add a group's UUID to the list of special groups cached in Context\n+     * @param groupID UUID of group\n+     */\n     public void setSpecialGroup(UUID groupID) {\n         specialGroups.add(groupID);\n-\n-        // System.out.println(\"Added \" + groupID);\n     }\n \n     /**\n-     * test if member of special group\n+     * Test if a group is a special group\n      *\n      * @param groupID ID of special group to test\n      * @return true if member\n      */\n     public boolean inSpecialGroup(UUID groupID) {\n         if (specialGroups.contains(groupID)) {\n-            // System.out.println(\"Contains \" + groupID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5fe08c15802b136764a6b375a327b27b4876a53"}, "originalPosition": 171}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MjQyMjcy", "url": "https://github.com/DSpace/DSpace/pull/2674#pullrequestreview-359242272", "createdAt": "2020-02-14T21:55:57Z", "commit": {"oid": "a5fe08c15802b136764a6b375a327b27b4876a53"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "808316599e5e85ac0748c0b0cbc9c6f3e5990d40", "author": {"user": {"login": "tdonohue", "name": "Tim Donohue"}}, "url": "https://github.com/DSpace/DSpace/commit/808316599e5e85ac0748c0b0cbc9c6f3e5990d40", "committedDate": "2020-02-19T22:56:32Z", "message": "Minor test correction. Use example.com for test emails as its guarranteed undeliverable"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1607, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}