{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MDM4NDI2", "number": 2675, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxOTo1NDo0NFrODl7IoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMDoyMTo1NlrODnA98Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDkyNzY4OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/RestResourceController.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxOTo1NDo0NFrOFzFl-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMDo0MTo0M1rOF1_Cew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTExMzMzOQ==", "bodyText": "Tiny thing, this could just be throw new RuntimeException(e);  Since you are not providing a more descriptive error message, there's no reason for the e.getMessage() here.", "url": "https://github.com/DSpace/DSpace/pull/2675#discussion_r389113339", "createdAt": "2020-03-06T19:54:44Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/RestResourceController.java", "diffHunk": "@@ -584,9 +585,10 @@ public ResourceSupport findRel(HttpServletRequest request, HttpServletResponse r\n         RestAddressableModel modelObject = null;\n         try {\n             modelObject = repository.upload(request, apiCategory, model, id, uploadfile);\n-        } catch (Exception e) {\n-            log.error(e.getMessage(), e);\n-            return ControllerUtils.toEmptyResponse(HttpStatus.INTERNAL_SERVER_ERROR);\n+        } catch (SQLException | IOException e) {\n+            throw new RuntimeException(e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b838ce4a6e00db203b8d8a67ba294916d5fe25dd"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY1ODgxOQ==", "bodyText": "Honestly, I'm not 100% sure here. We usually re-throw exception in this way and you will see that broadly on the source code. According to the javadoc the single constructor will call this one with a little different \"message\", instead than getMessage the toString of the cause will be called.", "url": "https://github.com/DSpace/DSpace/pull/2675#discussion_r391658819", "createdAt": "2020-03-12T14:27:40Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/RestResourceController.java", "diffHunk": "@@ -584,9 +585,10 @@ public ResourceSupport findRel(HttpServletRequest request, HttpServletResponse r\n         RestAddressableModel modelObject = null;\n         try {\n             modelObject = repository.upload(request, apiCategory, model, id, uploadfile);\n-        } catch (Exception e) {\n-            log.error(e.getMessage(), e);\n-            return ControllerUtils.toEmptyResponse(HttpStatus.INTERNAL_SERVER_ERROR);\n+        } catch (SQLException | IOException e) {\n+            throw new RuntimeException(e.getMessage(), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTExMzMzOQ=="}, "originalCommit": {"oid": "b838ce4a6e00db203b8d8a67ba294916d5fe25dd"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg0NDcwNQ==", "bodyText": "@abollini : The reason I don't like e.getMessage() alone is twofold: (1) it can be null, and (2) it may not always be as informative as e.toString() (toString contains both the message and the classname).   As noted in the JavaDocs of RuntimeException(Throwable cause):\n\nConstructs a new runtime exception with the specified cause and a detail message of (cause==null ? null : cause.toString()) (which typically contains the class and detail message of cause). This constructor is useful for runtime exceptions that are little more than wrappers for other throwables.\n\nSo, if all you want to do is wrap an exception in a RuntimeException, you really should be using throw new RuntimeException(e);  (you are correct, we have a lot of code that doesn't do this right now, but should be updated someday).  However, if you want to provide more contextual information around the error, this could be updated to say something like:\nthrow new RuntimeException(\"Error \" + e.getMessage() + \" uploading file to \" + model + \" with ID= \" +id, e);", "url": "https://github.com/DSpace/DSpace/pull/2675#discussion_r391844705", "createdAt": "2020-03-12T19:30:14Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/RestResourceController.java", "diffHunk": "@@ -584,9 +585,10 @@ public ResourceSupport findRel(HttpServletRequest request, HttpServletResponse r\n         RestAddressableModel modelObject = null;\n         try {\n             modelObject = repository.upload(request, apiCategory, model, id, uploadfile);\n-        } catch (Exception e) {\n-            log.error(e.getMessage(), e);\n-            return ControllerUtils.toEmptyResponse(HttpStatus.INTERNAL_SERVER_ERROR);\n+        } catch (SQLException | IOException e) {\n+            throw new RuntimeException(e.getMessage(), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTExMzMzOQ=="}, "originalCommit": {"oid": "b838ce4a6e00db203b8d8a67ba294916d5fe25dd"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE1MTY3NQ==", "bodyText": "@tdonohue oh yes it makes sense. Thanks to take the time to explain the motivation we will try to stick to this rule at least for all the new code and when touched update existing code as wel", "url": "https://github.com/DSpace/DSpace/pull/2675#discussion_r392151675", "createdAt": "2020-03-13T10:41:43Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/RestResourceController.java", "diffHunk": "@@ -584,9 +585,10 @@ public ResourceSupport findRel(HttpServletRequest request, HttpServletResponse r\n         RestAddressableModel modelObject = null;\n         try {\n             modelObject = repository.upload(request, apiCategory, model, id, uploadfile);\n-        } catch (Exception e) {\n-            log.error(e.getMessage(), e);\n-            return ControllerUtils.toEmptyResponse(HttpStatus.INTERNAL_SERVER_ERROR);\n+        } catch (SQLException | IOException e) {\n+            throw new RuntimeException(e.getMessage(), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTExMzMzOQ=="}, "originalCommit": {"oid": "b838ce4a6e00db203b8d8a67ba294916d5fe25dd"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDkzNTgwOnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/security/WorkspaceItemRestPermissionEvaluatorPlugin.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxOTo1Nzo0N1rOFzFrFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxOTozMzozOVrOF1sZ0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTExNDY0NA==", "bodyText": "I'd like more information in this comment, as it's a bit vague to me.  Are we giving permission in order to specifically throw a 404 Not Found status code? Or are there other status codes possible here?  If it's just a 404 (which I expect it is), it'd be good to note that in this comment.", "url": "https://github.com/DSpace/DSpace/pull/2675#discussion_r389114644", "createdAt": "2020-03-06T19:57:47Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/security/WorkspaceItemRestPermissionEvaluatorPlugin.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.security;\n+\n+import java.io.Serializable;\n+\n+import java.sql.SQLException;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.dspace.app.rest.model.WorkspaceItemRest;\n+import org.dspace.app.rest.utils.ContextUtil;\n+import org.dspace.content.WorkspaceItem;\n+import org.dspace.content.service.WorkspaceItemService;\n+import org.dspace.core.Context;\n+import org.dspace.eperson.EPerson;\n+import org.dspace.eperson.service.EPersonService;\n+import org.dspace.services.RequestService;\n+import org.dspace.services.model.Request;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * {@link RestPermissionEvaluatorPlugin} class that evaluate READ, WRITE and DELETE permissions over a WorkspaceItem\n+ * \n+ * @author Mykhaylo Boychuk (mykhaylo.boychuk at 4science.it)\n+ */\n+@Component\n+public class WorkspaceItemRestPermissionEvaluatorPlugin extends RestObjectPermissionEvaluatorPlugin {\n+\n+    private static final Logger log = LoggerFactory.getLogger(WorkspaceItemRestPermissionEvaluatorPlugin.class);\n+\n+    @Autowired\n+    private RequestService requestService;\n+\n+    @Autowired\n+    private EPersonService ePersonService;\n+\n+    @Autowired\n+    WorkspaceItemService wis;\n+\n+    @Override\n+    public boolean hasDSpacePermission(Authentication authentication, Serializable targetId, String targetType,\n+            DSpaceRestPermission permission) {\n+\n+        DSpaceRestPermission restPermission = DSpaceRestPermission.convert(permission);\n+        if (!DSpaceRestPermission.READ.equals(restPermission)\n+                && !DSpaceRestPermission.WRITE.equals(restPermission)\n+                && !DSpaceRestPermission.DELETE.equals(restPermission)) {\n+            return false;\n+        }\n+        if (!StringUtils.equalsIgnoreCase(targetType, WorkspaceItemRest.NAME)) {\n+            return false;\n+        }\n+\n+        Request request = requestService.getCurrentRequest();\n+        Context context = ContextUtil.obtainContext(request.getServletRequest());\n+\n+        EPerson ePerson = null;\n+        WorkspaceItem witem = null;\n+        try {\n+            ePerson = ePersonService.findByEmail(context, (String) authentication.getPrincipal());\n+            Integer dsoId = Integer.parseInt(targetId.toString());\n+\n+            // anonymous user\n+            if (ePerson == null) {\n+                return false;\n+            }\n+\n+            witem = wis.find(context, dsoId);\n+\n+             // If the dso is null then we give permission so we can throw another status\n+            // code instead", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b838ce4a6e00db203b8d8a67ba294916d5fe25dd"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY2MzA2MQ==", "bodyText": "there is not definitive answer to that as the permission checks are run also during embedding or by other methods that reuse the repository methods (findOne, etc.). The original use case was the one that you not, 404 Not Found\nPlease note that this phrase is used also in other permission evaluator plugins. Should we add here throw another status code instead**, such as the 404 not found**?", "url": "https://github.com/DSpace/DSpace/pull/2675#discussion_r391663061", "createdAt": "2020-03-12T14:33:33Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/security/WorkspaceItemRestPermissionEvaluatorPlugin.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.security;\n+\n+import java.io.Serializable;\n+\n+import java.sql.SQLException;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.dspace.app.rest.model.WorkspaceItemRest;\n+import org.dspace.app.rest.utils.ContextUtil;\n+import org.dspace.content.WorkspaceItem;\n+import org.dspace.content.service.WorkspaceItemService;\n+import org.dspace.core.Context;\n+import org.dspace.eperson.EPerson;\n+import org.dspace.eperson.service.EPersonService;\n+import org.dspace.services.RequestService;\n+import org.dspace.services.model.Request;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * {@link RestPermissionEvaluatorPlugin} class that evaluate READ, WRITE and DELETE permissions over a WorkspaceItem\n+ * \n+ * @author Mykhaylo Boychuk (mykhaylo.boychuk at 4science.it)\n+ */\n+@Component\n+public class WorkspaceItemRestPermissionEvaluatorPlugin extends RestObjectPermissionEvaluatorPlugin {\n+\n+    private static final Logger log = LoggerFactory.getLogger(WorkspaceItemRestPermissionEvaluatorPlugin.class);\n+\n+    @Autowired\n+    private RequestService requestService;\n+\n+    @Autowired\n+    private EPersonService ePersonService;\n+\n+    @Autowired\n+    WorkspaceItemService wis;\n+\n+    @Override\n+    public boolean hasDSpacePermission(Authentication authentication, Serializable targetId, String targetType,\n+            DSpaceRestPermission permission) {\n+\n+        DSpaceRestPermission restPermission = DSpaceRestPermission.convert(permission);\n+        if (!DSpaceRestPermission.READ.equals(restPermission)\n+                && !DSpaceRestPermission.WRITE.equals(restPermission)\n+                && !DSpaceRestPermission.DELETE.equals(restPermission)) {\n+            return false;\n+        }\n+        if (!StringUtils.equalsIgnoreCase(targetType, WorkspaceItemRest.NAME)) {\n+            return false;\n+        }\n+\n+        Request request = requestService.getCurrentRequest();\n+        Context context = ContextUtil.obtainContext(request.getServletRequest());\n+\n+        EPerson ePerson = null;\n+        WorkspaceItem witem = null;\n+        try {\n+            ePerson = ePersonService.findByEmail(context, (String) authentication.getPrincipal());\n+            Integer dsoId = Integer.parseInt(targetId.toString());\n+\n+            // anonymous user\n+            if (ePerson == null) {\n+                return false;\n+            }\n+\n+            witem = wis.find(context, dsoId);\n+\n+             // If the dso is null then we give permission so we can throw another status\n+            // code instead", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTExNDY0NA=="}, "originalCommit": {"oid": "b838ce4a6e00db203b8d8a67ba294916d5fe25dd"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg0NjM1Mg==", "bodyText": "Ok, this is fine I guess. I do now see that other PermissionEvaluatorPlugin classes contain the same comment.", "url": "https://github.com/DSpace/DSpace/pull/2675#discussion_r391846352", "createdAt": "2020-03-12T19:33:39Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/security/WorkspaceItemRestPermissionEvaluatorPlugin.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.security;\n+\n+import java.io.Serializable;\n+\n+import java.sql.SQLException;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.dspace.app.rest.model.WorkspaceItemRest;\n+import org.dspace.app.rest.utils.ContextUtil;\n+import org.dspace.content.WorkspaceItem;\n+import org.dspace.content.service.WorkspaceItemService;\n+import org.dspace.core.Context;\n+import org.dspace.eperson.EPerson;\n+import org.dspace.eperson.service.EPersonService;\n+import org.dspace.services.RequestService;\n+import org.dspace.services.model.Request;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * {@link RestPermissionEvaluatorPlugin} class that evaluate READ, WRITE and DELETE permissions over a WorkspaceItem\n+ * \n+ * @author Mykhaylo Boychuk (mykhaylo.boychuk at 4science.it)\n+ */\n+@Component\n+public class WorkspaceItemRestPermissionEvaluatorPlugin extends RestObjectPermissionEvaluatorPlugin {\n+\n+    private static final Logger log = LoggerFactory.getLogger(WorkspaceItemRestPermissionEvaluatorPlugin.class);\n+\n+    @Autowired\n+    private RequestService requestService;\n+\n+    @Autowired\n+    private EPersonService ePersonService;\n+\n+    @Autowired\n+    WorkspaceItemService wis;\n+\n+    @Override\n+    public boolean hasDSpacePermission(Authentication authentication, Serializable targetId, String targetType,\n+            DSpaceRestPermission permission) {\n+\n+        DSpaceRestPermission restPermission = DSpaceRestPermission.convert(permission);\n+        if (!DSpaceRestPermission.READ.equals(restPermission)\n+                && !DSpaceRestPermission.WRITE.equals(restPermission)\n+                && !DSpaceRestPermission.DELETE.equals(restPermission)) {\n+            return false;\n+        }\n+        if (!StringUtils.equalsIgnoreCase(targetType, WorkspaceItemRest.NAME)) {\n+            return false;\n+        }\n+\n+        Request request = requestService.getCurrentRequest();\n+        Context context = ContextUtil.obtainContext(request.getServletRequest());\n+\n+        EPerson ePerson = null;\n+        WorkspaceItem witem = null;\n+        try {\n+            ePerson = ePersonService.findByEmail(context, (String) authentication.getPrincipal());\n+            Integer dsoId = Integer.parseInt(targetId.toString());\n+\n+            // anonymous user\n+            if (ePerson == null) {\n+                return false;\n+            }\n+\n+            witem = wis.find(context, dsoId);\n+\n+             // If the dso is null then we give permission so we can throw another status\n+            // code instead", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTExNDY0NA=="}, "originalCommit": {"oid": "b838ce4a6e00db203b8d8a67ba294916d5fe25dd"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDk0Nzc5OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDowMTo1OFrOFzFyfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxOTozNzo0MVrOF1sg1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTExNjU0Mw==", "bodyText": "I think this should be a delete() request, not a get(), as you are testing deletion in this method.\nAlso, we should also be verifying that a Submitter (in this case submitter1) can delete their own WorkspaceItems.", "url": "https://github.com/DSpace/DSpace/pull/2675#discussion_r389116543", "createdAt": "2020-03-06T20:01:58Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java", "diffHunk": "@@ -347,25 +491,110 @@ public void deleteOneTest() throws Exception {\n                     .withMimeType(\"text/plain\").build();\n         }\n \n-        String token = getAuthToken(admin.getEmail(), password);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n \n         //Delete the workspaceitem\n         getClient(token).perform(delete(\"/api/submission/workspaceitems/\" + witem.getID()))\n                     .andExpect(status().is(204));\n \n         //Trying to get deleted item should fail with 404\n-        getClient().perform(get(\"/api/submission/workspaceitems/\" + witem.getID()))\n+        getClient(token).perform(get(\"/api/submission/workspaceitems/\" + witem.getID()))\n                    .andExpect(status().is(404));\n \n         //Trying to get deleted workspaceitem's item should fail with 404\n-        getClient().perform(get(\"/api/core/items/\" + item.getID()))\n+        getClient(token).perform(get(\"/api/core/items/\" + item.getID()))\n                    .andExpect(status().is(404));\n \n         //Trying to get deleted workspaceitem's bitstream should fail with 404\n-        getClient().perform(get(\"/api/core/biststreams/\" + bitstream.getID()))\n+        getClient(token).perform(get(\"/api/core/biststreams/\" + bitstream.getID()))\n                    .andExpect(status().is(404));\n     }\n \n+    @Test\n+    public void deleteOneUnAuthenticatedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, parentCommunity)\n+                .withName(\"Collection 1\")\n+                .build();\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                .withTitle(\"Workspace Item 1\")\n+                .withIssueDate(\"2019-01-01\")\n+                .build();\n+\n+        Item item = witem.getItem();\n+\n+        //Add a bitstream to the item\n+        String bitstreamContent = \"ThisIsSomeDummyText\";\n+        Bitstream bitstream = null;\n+        try (InputStream is = IOUtils.toInputStream(bitstreamContent, CharEncoding.UTF_8)) {\n+            bitstream = BitstreamBuilder\n+                    .createBitstream(context, item, is)\n+                    .withName(\"Bitstream1\")\n+                    .withMimeType(\"text/plain\").build();\n+        }\n+\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/submission/workspaceitems/\" + witem.getID()))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteOneForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson submitter1 = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"submitter1@example.com\")\n+                .withPassword(\"qwerty01\")\n+                .build();\n+        EPerson submitter2 = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"submitter2@example.com\")\n+                .withPassword(\"qwerty02\")\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, parentCommunity)\n+                .withName(\"Collection 1\")\n+                .withSubmitterGroup(submitter1)\n+                .build();\n+\n+        context.setCurrentUser(submitter1);\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                .withTitle(\"Workspace Item 1\")\n+                .withIssueDate(\"2020-01-01\")\n+                .build();\n+\n+        Item item = witem.getItem();\n+\n+        //Add a bitstream to the item\n+        String bitstreamContent = \"ThisIsSomeDummyText\";\n+        Bitstream bitstream = null;\n+        try (InputStream is = IOUtils.toInputStream(bitstreamContent, CharEncoding.UTF_8)) {\n+            bitstream = BitstreamBuilder\n+                    .createBitstream(context, item, is)\n+                    .withName(\"Bitstream1\")\n+                    .withMimeType(\"text/plain\").build();\n+        }\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenSubmitter2 = getAuthToken(submitter2.getEmail(), \"qwerty02\");\n+        getClient(tokenSubmitter2).perform(delete(\"/api/submission/workspaceitems/\" + witem.getID()))\n+                                  .andExpect(status().isForbidden());\n+\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+        getClient(authToken).perform(get(\"/api/submission/workspaceitems/\" + witem.getID()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b838ce4a6e00db203b8d8a67ba294916d5fe25dd"}, "originalPosition": 331}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY2NDkyMA==", "bodyText": "it is intentional, the delete operation is checked two rows above. This get is an extra security check to verify that regardless to the status returned to the client the server has really NOT deleted the workspaceitem", "url": "https://github.com/DSpace/DSpace/pull/2675#discussion_r391664920", "createdAt": "2020-03-12T14:36:12Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java", "diffHunk": "@@ -347,25 +491,110 @@ public void deleteOneTest() throws Exception {\n                     .withMimeType(\"text/plain\").build();\n         }\n \n-        String token = getAuthToken(admin.getEmail(), password);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n \n         //Delete the workspaceitem\n         getClient(token).perform(delete(\"/api/submission/workspaceitems/\" + witem.getID()))\n                     .andExpect(status().is(204));\n \n         //Trying to get deleted item should fail with 404\n-        getClient().perform(get(\"/api/submission/workspaceitems/\" + witem.getID()))\n+        getClient(token).perform(get(\"/api/submission/workspaceitems/\" + witem.getID()))\n                    .andExpect(status().is(404));\n \n         //Trying to get deleted workspaceitem's item should fail with 404\n-        getClient().perform(get(\"/api/core/items/\" + item.getID()))\n+        getClient(token).perform(get(\"/api/core/items/\" + item.getID()))\n                    .andExpect(status().is(404));\n \n         //Trying to get deleted workspaceitem's bitstream should fail with 404\n-        getClient().perform(get(\"/api/core/biststreams/\" + bitstream.getID()))\n+        getClient(token).perform(get(\"/api/core/biststreams/\" + bitstream.getID()))\n                    .andExpect(status().is(404));\n     }\n \n+    @Test\n+    public void deleteOneUnAuthenticatedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, parentCommunity)\n+                .withName(\"Collection 1\")\n+                .build();\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                .withTitle(\"Workspace Item 1\")\n+                .withIssueDate(\"2019-01-01\")\n+                .build();\n+\n+        Item item = witem.getItem();\n+\n+        //Add a bitstream to the item\n+        String bitstreamContent = \"ThisIsSomeDummyText\";\n+        Bitstream bitstream = null;\n+        try (InputStream is = IOUtils.toInputStream(bitstreamContent, CharEncoding.UTF_8)) {\n+            bitstream = BitstreamBuilder\n+                    .createBitstream(context, item, is)\n+                    .withName(\"Bitstream1\")\n+                    .withMimeType(\"text/plain\").build();\n+        }\n+\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/submission/workspaceitems/\" + witem.getID()))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteOneForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson submitter1 = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"submitter1@example.com\")\n+                .withPassword(\"qwerty01\")\n+                .build();\n+        EPerson submitter2 = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"submitter2@example.com\")\n+                .withPassword(\"qwerty02\")\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, parentCommunity)\n+                .withName(\"Collection 1\")\n+                .withSubmitterGroup(submitter1)\n+                .build();\n+\n+        context.setCurrentUser(submitter1);\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                .withTitle(\"Workspace Item 1\")\n+                .withIssueDate(\"2020-01-01\")\n+                .build();\n+\n+        Item item = witem.getItem();\n+\n+        //Add a bitstream to the item\n+        String bitstreamContent = \"ThisIsSomeDummyText\";\n+        Bitstream bitstream = null;\n+        try (InputStream is = IOUtils.toInputStream(bitstreamContent, CharEncoding.UTF_8)) {\n+            bitstream = BitstreamBuilder\n+                    .createBitstream(context, item, is)\n+                    .withName(\"Bitstream1\")\n+                    .withMimeType(\"text/plain\").build();\n+        }\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenSubmitter2 = getAuthToken(submitter2.getEmail(), \"qwerty02\");\n+        getClient(tokenSubmitter2).perform(delete(\"/api/submission/workspaceitems/\" + witem.getID()))\n+                                  .andExpect(status().isForbidden());\n+\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+        getClient(authToken).perform(get(\"/api/submission/workspaceitems/\" + witem.getID()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTExNjU0Mw=="}, "originalCommit": {"oid": "b838ce4a6e00db203b8d8a67ba294916d5fe25dd"}, "originalPosition": 331}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg0ODE1MA==", "bodyText": "@abollini : Oh, you are right, I misread this code.  the get() is correct here.\nI also see now that I overlooked that we already have a test to verify that a submitter can delete their own WorkspaceItem (deleteOneTest()).  So, I'll resolve this conversation/comment.", "url": "https://github.com/DSpace/DSpace/pull/2675#discussion_r391848150", "createdAt": "2020-03-12T19:37:41Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java", "diffHunk": "@@ -347,25 +491,110 @@ public void deleteOneTest() throws Exception {\n                     .withMimeType(\"text/plain\").build();\n         }\n \n-        String token = getAuthToken(admin.getEmail(), password);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n \n         //Delete the workspaceitem\n         getClient(token).perform(delete(\"/api/submission/workspaceitems/\" + witem.getID()))\n                     .andExpect(status().is(204));\n \n         //Trying to get deleted item should fail with 404\n-        getClient().perform(get(\"/api/submission/workspaceitems/\" + witem.getID()))\n+        getClient(token).perform(get(\"/api/submission/workspaceitems/\" + witem.getID()))\n                    .andExpect(status().is(404));\n \n         //Trying to get deleted workspaceitem's item should fail with 404\n-        getClient().perform(get(\"/api/core/items/\" + item.getID()))\n+        getClient(token).perform(get(\"/api/core/items/\" + item.getID()))\n                    .andExpect(status().is(404));\n \n         //Trying to get deleted workspaceitem's bitstream should fail with 404\n-        getClient().perform(get(\"/api/core/biststreams/\" + bitstream.getID()))\n+        getClient(token).perform(get(\"/api/core/biststreams/\" + bitstream.getID()))\n                    .andExpect(status().is(404));\n     }\n \n+    @Test\n+    public void deleteOneUnAuthenticatedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, parentCommunity)\n+                .withName(\"Collection 1\")\n+                .build();\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                .withTitle(\"Workspace Item 1\")\n+                .withIssueDate(\"2019-01-01\")\n+                .build();\n+\n+        Item item = witem.getItem();\n+\n+        //Add a bitstream to the item\n+        String bitstreamContent = \"ThisIsSomeDummyText\";\n+        Bitstream bitstream = null;\n+        try (InputStream is = IOUtils.toInputStream(bitstreamContent, CharEncoding.UTF_8)) {\n+            bitstream = BitstreamBuilder\n+                    .createBitstream(context, item, is)\n+                    .withName(\"Bitstream1\")\n+                    .withMimeType(\"text/plain\").build();\n+        }\n+\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/submission/workspaceitems/\" + witem.getID()))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteOneForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson submitter1 = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"submitter1@example.com\")\n+                .withPassword(\"qwerty01\")\n+                .build();\n+        EPerson submitter2 = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"submitter2@example.com\")\n+                .withPassword(\"qwerty02\")\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, parentCommunity)\n+                .withName(\"Collection 1\")\n+                .withSubmitterGroup(submitter1)\n+                .build();\n+\n+        context.setCurrentUser(submitter1);\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                .withTitle(\"Workspace Item 1\")\n+                .withIssueDate(\"2020-01-01\")\n+                .build();\n+\n+        Item item = witem.getItem();\n+\n+        //Add a bitstream to the item\n+        String bitstreamContent = \"ThisIsSomeDummyText\";\n+        Bitstream bitstream = null;\n+        try (InputStream is = IOUtils.toInputStream(bitstreamContent, CharEncoding.UTF_8)) {\n+            bitstream = BitstreamBuilder\n+                    .createBitstream(context, item, is)\n+                    .withName(\"Bitstream1\")\n+                    .withMimeType(\"text/plain\").build();\n+        }\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenSubmitter2 = getAuthToken(submitter2.getEmail(), \"qwerty02\");\n+        getClient(tokenSubmitter2).perform(delete(\"/api/submission/workspaceitems/\" + witem.getID()))\n+                                  .andExpect(status().isForbidden());\n+\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+        getClient(authToken).perform(get(\"/api/submission/workspaceitems/\" + witem.getID()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTExNjU0Mw=="}, "originalCommit": {"oid": "b838ce4a6e00db203b8d8a67ba294916d5fe25dd"}, "originalPosition": 331}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDk2MDc0OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDowNjozNFrOFzF6dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDowNjozNFrOFzF6dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTExODU4MQ==", "bodyText": "Tiny improvement to suggest. Can we actually have submitter2 be the Submitter of a second WorkspaceItem in this test?  That would better verify that the submitter of one WorkspaceItem doesn't have rights to remove another submitter's WorkspaceItem.  Currently, this test seems to just be testing something slightly different -- that someone with authentication rights cannot delete another person's WorkspaceItem.", "url": "https://github.com/DSpace/DSpace/pull/2675#discussion_r389118581", "createdAt": "2020-03-06T20:06:34Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java", "diffHunk": "@@ -347,25 +491,110 @@ public void deleteOneTest() throws Exception {\n                     .withMimeType(\"text/plain\").build();\n         }\n \n-        String token = getAuthToken(admin.getEmail(), password);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n \n         //Delete the workspaceitem\n         getClient(token).perform(delete(\"/api/submission/workspaceitems/\" + witem.getID()))\n                     .andExpect(status().is(204));\n \n         //Trying to get deleted item should fail with 404\n-        getClient().perform(get(\"/api/submission/workspaceitems/\" + witem.getID()))\n+        getClient(token).perform(get(\"/api/submission/workspaceitems/\" + witem.getID()))\n                    .andExpect(status().is(404));\n \n         //Trying to get deleted workspaceitem's item should fail with 404\n-        getClient().perform(get(\"/api/core/items/\" + item.getID()))\n+        getClient(token).perform(get(\"/api/core/items/\" + item.getID()))\n                    .andExpect(status().is(404));\n \n         //Trying to get deleted workspaceitem's bitstream should fail with 404\n-        getClient().perform(get(\"/api/core/biststreams/\" + bitstream.getID()))\n+        getClient(token).perform(get(\"/api/core/biststreams/\" + bitstream.getID()))\n                    .andExpect(status().is(404));\n     }\n \n+    @Test\n+    public void deleteOneUnAuthenticatedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, parentCommunity)\n+                .withName(\"Collection 1\")\n+                .build();\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                .withTitle(\"Workspace Item 1\")\n+                .withIssueDate(\"2019-01-01\")\n+                .build();\n+\n+        Item item = witem.getItem();\n+\n+        //Add a bitstream to the item\n+        String bitstreamContent = \"ThisIsSomeDummyText\";\n+        Bitstream bitstream = null;\n+        try (InputStream is = IOUtils.toInputStream(bitstreamContent, CharEncoding.UTF_8)) {\n+            bitstream = BitstreamBuilder\n+                    .createBitstream(context, item, is)\n+                    .withName(\"Bitstream1\")\n+                    .withMimeType(\"text/plain\").build();\n+        }\n+\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/submission/workspaceitems/\" + witem.getID()))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteOneForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson submitter1 = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"submitter1@example.com\")\n+                .withPassword(\"qwerty01\")\n+                .build();\n+        EPerson submitter2 = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"submitter2@example.com\")\n+                .withPassword(\"qwerty02\")\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, parentCommunity)\n+                .withName(\"Collection 1\")\n+                .withSubmitterGroup(submitter1)\n+                .build();\n+\n+        context.setCurrentUser(submitter1);\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                .withTitle(\"Workspace Item 1\")\n+                .withIssueDate(\"2020-01-01\")\n+                .build();\n+\n+        Item item = witem.getItem();\n+\n+        //Add a bitstream to the item\n+        String bitstreamContent = \"ThisIsSomeDummyText\";\n+        Bitstream bitstream = null;\n+        try (InputStream is = IOUtils.toInputStream(bitstreamContent, CharEncoding.UTF_8)) {\n+            bitstream = BitstreamBuilder\n+                    .createBitstream(context, item, is)\n+                    .withName(\"Bitstream1\")\n+                    .withMimeType(\"text/plain\").build();\n+        }\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenSubmitter2 = getAuthToken(submitter2.getEmail(), \"qwerty02\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b838ce4a6e00db203b8d8a67ba294916d5fe25dd"}, "originalPosition": 326}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjM0MzcyOnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/security/WorkspaceItemRestPermissionEvaluatorPlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMDoxNDo0MlrOF0wpkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNDoyOToxOFrOF1hBoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2NzM0Nw==", "bodyText": "Why is this not based on context.getCurrentUser()?", "url": "https://github.com/DSpace/DSpace/pull/2675#discussion_r390867347", "createdAt": "2020-03-11T10:14:42Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/security/WorkspaceItemRestPermissionEvaluatorPlugin.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.security;\n+\n+import java.io.Serializable;\n+\n+import java.sql.SQLException;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.dspace.app.rest.model.WorkspaceItemRest;\n+import org.dspace.app.rest.utils.ContextUtil;\n+import org.dspace.content.WorkspaceItem;\n+import org.dspace.content.service.WorkspaceItemService;\n+import org.dspace.core.Context;\n+import org.dspace.eperson.EPerson;\n+import org.dspace.eperson.service.EPersonService;\n+import org.dspace.services.RequestService;\n+import org.dspace.services.model.Request;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * {@link RestPermissionEvaluatorPlugin} class that evaluate READ, WRITE and DELETE permissions over a WorkspaceItem\n+ * \n+ * @author Mykhaylo Boychuk (mykhaylo.boychuk at 4science.it)\n+ */\n+@Component\n+public class WorkspaceItemRestPermissionEvaluatorPlugin extends RestObjectPermissionEvaluatorPlugin {\n+\n+    private static final Logger log = LoggerFactory.getLogger(WorkspaceItemRestPermissionEvaluatorPlugin.class);\n+\n+    @Autowired\n+    private RequestService requestService;\n+\n+    @Autowired\n+    private EPersonService ePersonService;\n+\n+    @Autowired\n+    WorkspaceItemService wis;\n+\n+    @Override\n+    public boolean hasDSpacePermission(Authentication authentication, Serializable targetId, String targetType,\n+            DSpaceRestPermission permission) {\n+\n+        DSpaceRestPermission restPermission = DSpaceRestPermission.convert(permission);\n+        if (!DSpaceRestPermission.READ.equals(restPermission)\n+                && !DSpaceRestPermission.WRITE.equals(restPermission)\n+                && !DSpaceRestPermission.DELETE.equals(restPermission)) {\n+            return false;\n+        }\n+        if (!StringUtils.equalsIgnoreCase(targetType, WorkspaceItemRest.NAME)) {\n+            return false;\n+        }\n+\n+        Request request = requestService.getCurrentRequest();\n+        Context context = ContextUtil.obtainContext(request.getServletRequest());\n+\n+        EPerson ePerson = null;\n+        WorkspaceItem witem = null;\n+        try {\n+            ePerson = ePersonService.findByEmail(context, (String) authentication.getPrincipal());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b838ce4a6e00db203b8d8a67ba294916d5fe25dd"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY1OTkzNg==", "bodyText": "no reason indeed, it should be changed", "url": "https://github.com/DSpace/DSpace/pull/2675#discussion_r391659936", "createdAt": "2020-03-12T14:29:18Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/security/WorkspaceItemRestPermissionEvaluatorPlugin.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.security;\n+\n+import java.io.Serializable;\n+\n+import java.sql.SQLException;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.dspace.app.rest.model.WorkspaceItemRest;\n+import org.dspace.app.rest.utils.ContextUtil;\n+import org.dspace.content.WorkspaceItem;\n+import org.dspace.content.service.WorkspaceItemService;\n+import org.dspace.core.Context;\n+import org.dspace.eperson.EPerson;\n+import org.dspace.eperson.service.EPersonService;\n+import org.dspace.services.RequestService;\n+import org.dspace.services.model.Request;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * {@link RestPermissionEvaluatorPlugin} class that evaluate READ, WRITE and DELETE permissions over a WorkspaceItem\n+ * \n+ * @author Mykhaylo Boychuk (mykhaylo.boychuk at 4science.it)\n+ */\n+@Component\n+public class WorkspaceItemRestPermissionEvaluatorPlugin extends RestObjectPermissionEvaluatorPlugin {\n+\n+    private static final Logger log = LoggerFactory.getLogger(WorkspaceItemRestPermissionEvaluatorPlugin.class);\n+\n+    @Autowired\n+    private RequestService requestService;\n+\n+    @Autowired\n+    private EPersonService ePersonService;\n+\n+    @Autowired\n+    WorkspaceItemService wis;\n+\n+    @Override\n+    public boolean hasDSpacePermission(Authentication authentication, Serializable targetId, String targetType,\n+            DSpaceRestPermission permission) {\n+\n+        DSpaceRestPermission restPermission = DSpaceRestPermission.convert(permission);\n+        if (!DSpaceRestPermission.READ.equals(restPermission)\n+                && !DSpaceRestPermission.WRITE.equals(restPermission)\n+                && !DSpaceRestPermission.DELETE.equals(restPermission)) {\n+            return false;\n+        }\n+        if (!StringUtils.equalsIgnoreCase(targetType, WorkspaceItemRest.NAME)) {\n+            return false;\n+        }\n+\n+        Request request = requestService.getCurrentRequest();\n+        Context context = ContextUtil.obtainContext(request.getServletRequest());\n+\n+        EPerson ePerson = null;\n+        WorkspaceItem witem = null;\n+        try {\n+            ePerson = ePersonService.findByEmail(context, (String) authentication.getPrincipal());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2NzM0Nw=="}, "originalCommit": {"oid": "b838ce4a6e00db203b8d8a67ba294916d5fe25dd"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjM2OTEzOnYy", "diffSide": "LEFT", "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMDoyMTo1NlrOF0w5Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODozODoxNFrOF3SWcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg3MTM0Nw==", "bodyText": "Are you still verifying the findBySubmitter method also works for admins to search for an other submitter (since that test seems to be removed here)", "url": "https://github.com/DSpace/DSpace/pull/2675#discussion_r390871347", "createdAt": "2020-03-11T10:21:56Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java", "diffHunk": "@@ -417,11 +648,9 @@ public void findBySubmitterTest() throws Exception {\n                                       .withIssueDate(\"2016-02-13\")\n                                       .build();\n \n-        // use our admin to retrieve all the workspace by submitter\n-        String token = getAuthToken(admin.getEmail(), password);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b838ce4a6e00db203b8d8a67ba294916d5fe25dd"}, "originalPosition": 355}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUxNjY1OA==", "bodyText": "done, see 5d98bcd#diff-38ba2da3dd74a1027593bbd62d684626R729", "url": "https://github.com/DSpace/DSpace/pull/2675#discussion_r393516658", "createdAt": "2020-03-17T08:38:14Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java", "diffHunk": "@@ -417,11 +648,9 @@ public void findBySubmitterTest() throws Exception {\n                                       .withIssueDate(\"2016-02-13\")\n                                       .build();\n \n-        // use our admin to retrieve all the workspace by submitter\n-        String token = getAuthToken(admin.getEmail(), password);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg3MTM0Nw=="}, "originalCommit": {"oid": "b838ce4a6e00db203b8d8a67ba294916d5fe25dd"}, "originalPosition": 355}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1650, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}