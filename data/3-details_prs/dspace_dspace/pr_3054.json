{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzMDc4ODI3", "number": 3054, "title": "Update claimedtasks and pooltasks to support reloading of workflow actions on individual WorkflowItems", "bodyText": "References\nFixes #3043\nRest Contract: DSpace/RestContract#151\nDescription\nTwo endpoints have been modified in this PR.\nThe first one is ClaimedTask where three methods have been added,\nfindAllByItem, findByItem and creatAndRetund.\nIn the second one is PoolTask findAllByItem, findByItem have been added, and the action method has been removed as its functionality has been moved to the new creatAndRetund method of ClaimedTask\nChecklist\nThis checklist provides a reminder of what we are going to look for when reviewing your PR. You need not complete this checklist prior to creating your PR (draft PRs are always welcome). If you are unsure about an item in the checklist, don't hesitate to ask. We're here to help!\n\n My PR is small in size (e.g. less than 1,000 lines of code, not including comments & integration tests). Exceptions may be made if previously agreed upon.\n My PR passes Checkstyle validation based on the Code Style Guide.\n My PR includes Javadoc for all new (or modified) public methods and classes. It also includes Javadoc for large or complex private methods.\n My PR passes all tests and includes new/updated Unit or Integration Tests based on the Code Testing Guide.\n If my PR includes new, third-party dependencies (in any pom.xml), I've made sure their licenses align with the DSpace BSD License based on the Licensing of Contributions documentation.\n If my PR modifies the REST API, I've linked to the REST Contract page (or open PR) related to this change.", "createdAt": "2020-11-18T10:25:40Z", "url": "https://github.com/DSpace/DSpace/pull/3054", "merged": true, "mergeCommit": {"oid": "1ddd052a4031d450ac359cfc1784719dd3cad536"}, "closed": true, "closedAt": "2021-03-10T15:11:02Z", "author": {"login": "Micheleboychuk"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdiAFptAFqTU0MjI2ODE5NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABeBEfDVgH2gAyNTIzMDc4ODI3OjVmYzYzZGMxNDBjNjVlZWVhOGE2NjQ3NTFiNmEyMWU0ZGQ0MmY0MDc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMjY4MTk1", "url": "https://github.com/DSpace/DSpace/pull/3054#pullrequestreview-542268195", "createdAt": "2020-12-01T20:26:23Z", "commit": null, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMDoyNjoyM1rOH8-cAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMDoyNzoyOVrOH8-ebQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY5OTU4Ng==", "bodyText": "This should have a  @PreAuthorize(\"hasAuthority('AUTHENTICATED')\") to verify that only logged in users can access this endpoint.  If you add this annotation, you can remove the check below for a currentUser, as it's no longer necessary.", "url": "https://github.com/DSpace/DSpace/pull/3054#discussion_r533699586", "createdAt": "2020-12-01T20:26:23Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ClaimedTaskRestRepository.java", "diffHunk": "@@ -125,6 +135,59 @@ public ClaimedTaskRest findOne(Context context, Integer id) {\n         }\n     }\n \n+    @PreAuthorize(\"hasAuthority('ADMIN')\")\n+    @SearchRestMethod(name = \"findAllByItem\")\n+    public Page<ClaimedTaskRest> findAllByItem(@Parameter(value = \"uuid\", required = true) UUID itemUUID,\n+           Pageable pageable) {\n+        List<ClaimedTask> tasks = null;\n+        try {\n+            Context context = obtainContext();\n+            Item item = itemService.find(context, itemUUID);\n+            if (item == null) {\n+                return null;\n+            }\n+            XmlWorkflowItem xmlWFI = xmlWorkflowItemService.findByItem(context, item);\n+            if (xmlWFI == null) {\n+                return null;\n+            } else {\n+                tasks = claimedTaskService.findByWorkflowItem(context, xmlWFI);\n+            }\n+            return converter.toRestPage(tasks, pageable, utils.obtainProjection());\n+        } catch (SQLException e) {\n+            throw new RuntimeException(e.getMessage(), e);\n+        }\n+    }\n+\n+    @SearchRestMethod(name = \"findByItem\")\n+    public ClaimedTaskRest findByItem(@Parameter(value = \"uuid\", required = true) UUID itemUUID) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcwMDIwNQ==", "bodyText": "Again, this should have @PreAuthorize(\"hasAuthority('AUTHENTICATED')\"), and you should remove the check for a currentUser as it's no longer needed", "url": "https://github.com/DSpace/DSpace/pull/3054#discussion_r533700205", "createdAt": "2020-12-01T20:27:29Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/PoolTaskRestRepository.java", "diffHunk": "@@ -161,4 +132,57 @@ public void afterPropertiesSet() throws Exception {\n                 new Link(\"/api/\" + PoolTaskRest.CATEGORY + \"/\" + PoolTaskRest.NAME + \"/search\",\n                         PoolTaskRest.NAME + \"-search\")));\n     }\n+\n+    @PreAuthorize(\"hasAuthority('ADMIN')\")\n+    @SearchRestMethod(name = \"findAllByItem\")\n+    public Page<PoolTaskRest> findAllByItem(@Parameter(value = \"uuid\", required = true) UUID itemUUID,\n+           Pageable pageable) {\n+        List<PoolTask> poolTasks = null;\n+        try {\n+            Context context = obtainContext();\n+            Item item = itemService.find(context, itemUUID);\n+            if (item == null) {\n+                return null;\n+            }\n+            XmlWorkflowItem xmlWorkflowItem = xmlWorkflowItemService.findByItem(context, item);\n+            if (xmlWorkflowItem == null) {\n+                return null;\n+            } else {\n+                poolTasks = poolTaskService.find(context, xmlWorkflowItem);\n+            }\n+            return converter.toRestPage(poolTasks, pageable, utils.obtainProjection());\n+        } catch (SQLException e) {\n+            throw new RuntimeException(e.getMessage(), e);\n+        }\n+    }\n+\n+    @SearchRestMethod(name = \"findByItem\")\n+    public PoolTaskRest findByItem(@Parameter(value = \"uuid\", required = true) UUID itemUUID) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 112}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff436491fb1df139112b27874987660efb434f18", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/ff436491fb1df139112b27874987660efb434f18", "committedDate": "2020-12-06T11:11:09Z", "message": "implemented new methods as createAndReturn for claimedTask and search methods for ClaimedTask and PoolTask"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86a6819dd802e00aa0e83d374f38d88eb1431734", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/86a6819dd802e00aa0e83d374f38d88eb1431734", "committedDate": "2020-12-06T11:12:55Z", "message": "fixed tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "170ea73144b16c2518235e13aad4a815646ad579", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/170ea73144b16c2518235e13aad4a815646ad579", "committedDate": "2020-12-06T11:14:33Z", "message": "fix failed test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6e0712c49fcab44fc2715d495434583dad12606", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/f6e0712c49fcab44fc2715d495434583dad12606", "committedDate": "2020-12-06T11:15:05Z", "message": "added ITs to prove the functionality of search methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da9efdff6c7b6b5602ddf81bf1d345af96019716", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/da9efdff6c7b6b5602ddf81bf1d345af96019716", "committedDate": "2020-12-06T11:15:32Z", "message": "fixed search method of Pooltask endpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10ac8c91cbe33bef798baec3cacccf12f134d52a", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/10ac8c91cbe33bef798baec3cacccf12f134d52a", "committedDate": "2020-12-06T11:16:20Z", "message": "fixed search method of ClaimedTask endpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9299e0039f1587479bd0aba818fea2a08553368", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/d9299e0039f1587479bd0aba818fea2a08553368", "committedDate": "2020-12-06T11:16:38Z", "message": "added missing test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8f5ca27893e17af145799eae2a119938b02da27", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/c8f5ca27893e17af145799eae2a119938b02da27", "committedDate": "2020-12-06T11:17:03Z", "message": "refactored test, removing the double check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40ec8d70766a079ca7922f47e6c86ae077dd346d", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/40ec8d70766a079ca7922f47e6c86ae077dd346d", "committedDate": "2020-12-06T11:17:26Z", "message": "changed type, from Integer to int"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87e454a8153b4eb53fbfb36bb1469dc16c7ef7d0", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/87e454a8153b4eb53fbfb36bb1469dc16c7ef7d0", "committedDate": "2020-12-06T11:21:04Z", "message": "Implement community feedbacks"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "87e454a8153b4eb53fbfb36bb1469dc16c7ef7d0", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/87e454a8153b4eb53fbfb36bb1469dc16c7ef7d0", "committedDate": "2020-12-06T11:21:04Z", "message": "Implement community feedbacks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NjM1ODc2", "url": "https://github.com/DSpace/DSpace/pull/3054#pullrequestreview-549635876", "createdAt": "2020-12-10T21:57:00Z", "commit": {"oid": "87e454a8153b4eb53fbfb36bb1469dc16c7ef7d0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5OTY0MTA4", "url": "https://github.com/DSpace/DSpace/pull/3054#pullrequestreview-549964108", "createdAt": "2020-12-11T10:10:50Z", "commit": {"oid": "87e454a8153b4eb53fbfb36bb1469dc16c7ef7d0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMDoxMDo1MFrOIDx-Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMDoyNToyN1rOIDyhDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgzNTM1NA==", "bodyText": "Both an incorrect item and no claim tasks for the items result in a 404, the incorrect item should most likely be a 429\nSame applies for the other searches below", "url": "https://github.com/DSpace/DSpace/pull/3054#discussion_r540835354", "createdAt": "2020-12-11T10:10:50Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ClaimedTaskRestRepository.java", "diffHunk": "@@ -125,6 +135,54 @@ public ClaimedTaskRest findOne(Context context, Integer id) {\n         }\n     }\n \n+    @PreAuthorize(\"hasAuthority('ADMIN')\")\n+    @SearchRestMethod(name = \"findAllByItem\")\n+    public Page<ClaimedTaskRest> findAllByItem(@Parameter(value = \"uuid\", required = true) UUID itemUUID,\n+           Pageable pageable) {\n+        List<ClaimedTask> tasks = null;\n+        try {\n+            Context context = obtainContext();\n+            Item item = itemService.find(context, itemUUID);\n+            if (item == null) {\n+                return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87e454a8153b4eb53fbfb36bb1469dc16c7ef7d0"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgzNjU1MA==", "bodyText": "Small typing error", "url": "https://github.com/DSpace/DSpace/pull/3054#discussion_r540836550", "createdAt": "2020-12-11T10:12:43Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ClaimedTaskRestRepository.java", "diffHunk": "@@ -197,6 +255,33 @@ protected void delete(Context context, Integer id) {\n         throw new RepositoryMethodNotImplementedException(ClaimedTaskRest.NAME, \"findAll\");\n     }\n \n+    @Override\n+    protected ClaimedTaskRest createAndReturn(Context context, List<String> list)\n+            throws AuthorizeException, SQLException, RepositoryMethodNotImplementedException {\n+        HttpServletRequest request = getRequestService().getCurrentRequest().getHttpServletRequest();\n+        ClaimedTask claimedTask = null;\n+        try {\n+            PoolTask task = uriListHandlerService.handle(context, request, list, PoolTask.class);\n+            if (task == null) {\n+                throw\n+                    new ResourceNotFoundException(\"No PoolTask record found, the uri-list does not contait a resource\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87e454a8153b4eb53fbfb36bb1469dc16c7ef7d0"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg0MTI5OQ==", "bodyText": "Shouldn't this be a 429?", "url": "https://github.com/DSpace/DSpace/pull/3054#discussion_r540841299", "createdAt": "2020-12-11T10:20:24Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/TaskRestRepositoriesIT.java", "diffHunk": "@@ -723,9 +728,10 @@ public void claimTaskForbiddenTest() throws Exception {\n     @Test\n     public void claimTaskNotExistingTest() throws Exception {\n         String adminToken = getAuthToken(admin.getEmail(), password);\n-        getClient(adminToken).perform(post(\"/api/workflow/pooltasks/\" + Integer.MAX_VALUE)\n-            .contentType(MediaType.APPLICATION_FORM_URLENCODED))\n-            .andExpect(status().isNotFound());\n+        getClient(adminToken).perform(post(\"/api/workflow/claimedtasks\")\n+                             .contentType(MediaType.parseMediaType(RestMediaTypes.TEXT_URI_LIST_VALUE))\n+                             .content(\"/api/workflow/pooltasks/\" + Integer.MAX_VALUE))\n+                             .andExpect(status().isNotFound());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87e454a8153b4eb53fbfb36bb1469dc16c7ef7d0"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg0NDMwMw==", "bodyText": "It seems there are no tests for:\n\nsearching with a UUID not in the workflow (an archived item)\nsearching with a UUID in the workflow, without pooled tasks\n\nThis seems to be missing for the other search methods as well", "url": "https://github.com/DSpace/DSpace/pull/3054#discussion_r540844303", "createdAt": "2020-12-11T10:25:27Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/TaskRestRepositoriesIT.java", "diffHunk": "@@ -3092,4 +2943,855 @@ public void claimedTaskTest_Upload_EditMetadataOptionAllowed() throws Exception\n         bibtex.close();\n     }\n \n+    @Test\n+    public void findAllPooltasksByItemTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+\n+        EPerson reviewer1 = EPersonBuilder.createEPerson(context)\n+                                          .withEmail(\"reviewer1@example.com\")\n+                                          .withPassword(password).build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, parentCommunity)\n+                                           .withName(\"Collection 1\")\n+                                           .withWorkflowGroup(1, reviewer1, admin).build();\n+\n+        // create a normal user to use as submitter\n+        EPerson submitter = EPersonBuilder.createEPerson(context)\n+                                          .withEmail(\"submitter@example.com\")\n+                                          .withPassword(password).build();\n+\n+        context.setCurrentUser(submitter);\n+\n+        PoolTask poolTask = PoolTaskBuilder.createPoolTask(context, col1, reviewer1)\n+                .withTitle(\"Workflow Item 1\")\n+                .withIssueDate(\"2017-10-17\")\n+                .withAuthor(\"Smith, Donald\").withAuthor(\"Doe, John\")\n+                .withSubject(\"ExtraEntry\")\n+                .build();\n+\n+        Item item1 = poolTask.getWorkflowItem().getItem();\n+\n+        PoolTask poolTask2 = PoolTaskBuilder.createPoolTask(context, col1, reviewer1)\n+                .withTitle(\"Workflow Item 2\")\n+                .withIssueDate(\"2020-01-19\")\n+                .withAuthor(\"Tommaso, Donald\").withAuthor(\"Shon, John\")\n+                .withSubject(\"ExtraEntry\").build();\n+\n+        Item item2 = poolTask2.getWorkflowItem().getItem();\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenAdmin = getAuthToken(admin.getEmail(), password);\n+        getClient(tokenAdmin).perform(get(\"/api/workflow/pooltasks/search/findAllByItem\")\n+               .param(\"uuid\", item1.getID().toString()))\n+               .andExpect(status().isOk())\n+               .andExpect(jsonPath(\"$._embedded.pooltasks\", Matchers.containsInAnyOrder(\n+                Matchers.allOf(\n+                Matchers.is(PoolTaskMatcher.matchPoolTask(null, \"reviewstep\")), hasJsonPath(\"$._embedded.workflowitem\",\n+                Matchers.is(WorkflowItemMatcher.matchItemWithTitleAndDateIssuedAndSubject(\n+                            poolTask.getWorkflowItem(), \"Workflow Item 1\", \"2017-10-17\", \"ExtraEntry\")))\n+                ))))\n+               .andExpect(jsonPath(\"$._links.self.href\", Matchers.containsString(\"/api/workflow/pooltasks\")))\n+               .andExpect(jsonPath(\"$.page.totalElements\", is(1)));\n+\n+        getClient(tokenAdmin).perform(get(\"/api/workflow/pooltasks/search/findAllByItem\")\n+                .param(\"uuid\", item2.getID().toString()))\n+                .andExpect(status().isOk())\n+                .andExpect(jsonPath(\"$._embedded.pooltasks\", Matchers.containsInAnyOrder(\n+                 Matchers.allOf(\n+                 Matchers.is(PoolTaskMatcher.matchPoolTask(null, \"reviewstep\")), hasJsonPath(\"$._embedded.workflowitem\",\n+                 Matchers.is(WorkflowItemMatcher.matchItemWithTitleAndDateIssuedAndSubject(\n+                             poolTask2.getWorkflowItem(), \"Workflow Item 2\", \"2020-01-19\", \"ExtraEntry\")))\n+                 ))))\n+                .andExpect(jsonPath(\"$._links.self.href\", Matchers.containsString(\"/api/workflow/pooltasks\")))\n+                .andExpect(jsonPath(\"$.page.totalElements\", is(1)));\n+    }\n+\n+    @Test\n+    public void findAllPooltasksByItemUnauthorizedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+\n+        EPerson reviewer1 = EPersonBuilder.createEPerson(context)\n+                                          .withEmail(\"reviewer1@example.com\")\n+                                          .withPassword(password).build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, parentCommunity)\n+                                           .withName(\"Collection 1\")\n+                                           .withWorkflowGroup(1, reviewer1, admin).build();\n+\n+        // create a normal user to use as submitter\n+        EPerson submitter = EPersonBuilder.createEPerson(context)\n+                                          .withEmail(\"submitter@example.com\")\n+                                          .withPassword(password).build();\n+\n+        context.setCurrentUser(submitter);\n+\n+        PoolTask poolTask = PoolTaskBuilder.createPoolTask(context, col1, reviewer1)\n+                                           .withTitle(\"Workflow Item 1\")\n+                                           .withIssueDate(\"2017-10-17\")\n+                                           .withAuthor(\"Smith, Donald\")\n+                                           .withAuthor(\"Doe, John\")\n+                                           .withSubject(\"ExtraEntry\").build();\n+\n+        Item item1 = poolTask.getWorkflowItem().getItem();\n+\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(get(\"/api/workflow/pooltasks/search/findAllByItem\")\n+                   .param(\"uuid\", item1.getID().toString()))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void findAllPooltasksByItemForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                                          .withName(\"Parent Community\")\n+                                          .build();\n+\n+        EPerson reviewer1 = EPersonBuilder.createEPerson(context)\n+                                          .withEmail(\"reviewer1@example.com\")\n+                                          .withPassword(password).build();\n+\n+        Collection col1 = CollectionBuilder.createCollection(context, parentCommunity)\n+                                           .withName(\"Collection 1\")\n+                                           .withWorkflowGroup(1, reviewer1, admin).build();\n+\n+        // create a normal user to use as submitter\n+        EPerson submitter = EPersonBuilder.createEPerson(context)\n+                                          .withEmail(\"submitter@example.com\")\n+                                          .withPassword(password).build();\n+\n+        context.setCurrentUser(submitter);\n+\n+        PoolTask poolTask = PoolTaskBuilder.createPoolTask(context, col1, reviewer1)\n+                                           .withTitle(\"Workflow Item 1\")\n+                                           .withIssueDate(\"2017-10-17\")\n+                                           .withAuthor(\"Smith, Donald\")\n+                                           .withAuthor(\"Doe, John\")\n+                                           .withSubject(\"ExtraEntry\").build();\n+\n+        Item item1 = poolTask.getWorkflowItem().getItem();\n+\n+        context.restoreAuthSystemState();\n+\n+        // Only Admin has access to this end point\n+\n+        String tokenSubmitter = getAuthToken(submitter.getEmail(), password);\n+        getClient(tokenSubmitter).perform(get(\"/api/workflow/pooltasks/search/findAllByItem\")\n+                                 .param(\"uuid\", item1.getID().toString()))\n+                                 .andExpect(status().isForbidden());\n+\n+        String tokenReviewer1 = getAuthToken(reviewer1.getEmail(), password);\n+        getClient(tokenReviewer1).perform(get(\"/api/workflow/pooltasks/search/findAllByItem\")\n+                                 .param(\"uuid\", item1.getID().toString()))\n+                                 .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void findAllPooltasksByItemWrongUuidTest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87e454a8153b4eb53fbfb36bb1469dc16c7ef7d0"}, "originalPosition": 617}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd44faa3fc320a70f7edc66b87f6a0fb81ae794d", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/fd44faa3fc320a70f7edc66b87f6a0fb81ae794d", "committedDate": "2020-12-15T10:37:18Z", "message": "Implement community feedbacks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b5130c5a41d96ccf485b44a6a4d844b124261d3", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/3b5130c5a41d96ccf485b44a6a4d844b124261d3", "committedDate": "2020-12-15T10:39:39Z", "message": "added new tests and fixed old"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxMTcwMzQ2", "url": "https://github.com/DSpace/DSpace/pull/3054#pullrequestreview-561170346", "createdAt": "2021-01-04T16:37:36Z", "commit": {"oid": "3b5130c5a41d96ccf485b44a6a4d844b124261d3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyNDEyMzcw", "url": "https://github.com/DSpace/DSpace/pull/3054#pullrequestreview-562412370", "createdAt": "2021-01-06T08:46:47Z", "commit": {"oid": "3b5130c5a41d96ccf485b44a6a4d844b124261d3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODo0Njo0N1rOIO2VWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODo1MDowM1rOIO2a8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MTE3Ng==", "bodyText": "Small typing error:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    \"No PoolTask record found, the uri-list does not contait a resource\");\n          \n          \n            \n                                    \"No PoolTask record found, the uri-list does not contain a resource\");", "url": "https://github.com/DSpace/DSpace/pull/3054#discussion_r552441176", "createdAt": "2021-01-06T08:46:47Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ClaimedTaskRestRepository.java", "diffHunk": "@@ -263,8 +263,8 @@ protected ClaimedTaskRest createAndReturn(Context context, List<String> list)\n         try {\n             PoolTask task = uriListHandlerService.handle(context, request, list, PoolTask.class);\n             if (task == null) {\n-                throw\n-                    new ResourceNotFoundException(\"No PoolTask record found, the uri-list does not contait a resource\");\n+                throw new UnprocessableEntityException(\n+                        \"No PoolTask record found, the uri-list does not contait a resource\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b5130c5a41d96ccf485b44a6a4d844b124261d3"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MTkyOQ==", "bodyText": "Is there an IT for an existing item which is not in the workflow?\nI can see a test for findByItem, but not for this admin endpoint", "url": "https://github.com/DSpace/DSpace/pull/3054#discussion_r552441929", "createdAt": "2021-01-06T08:48:37Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/ClaimedTaskRestRepository.java", "diffHunk": "@@ -125,6 +135,54 @@ public ClaimedTaskRest findOne(Context context, Integer id) {\n         }\n     }\n \n+    @PreAuthorize(\"hasAuthority('ADMIN')\")\n+    @SearchRestMethod(name = \"findAllByItem\")\n+    public Page<ClaimedTaskRest> findAllByItem(@Parameter(value = \"uuid\", required = true) UUID itemUUID,\n+           Pageable pageable) {\n+        List<ClaimedTask> tasks = null;\n+        try {\n+            Context context = obtainContext();\n+            Item item = itemService.find(context, itemUUID);\n+            if (item == null) {\n+                throw new UnprocessableEntityException(\"There is no Item with uuid provided, uuid:\" + itemUUID);\n+            }\n+            XmlWorkflowItem xmlWFI = xmlWorkflowItemService.findByItem(context, item);\n+            if (xmlWFI == null) {\n+                return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b5130c5a41d96ccf485b44a6a4d844b124261d3"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MjQ1NQ==", "bodyText": "Is there an IT for an existing item which is not in the workflow?\nI can see a test for findByItem, but not for this admin endpoint", "url": "https://github.com/DSpace/DSpace/pull/3054#discussion_r552442455", "createdAt": "2021-01-06T08:49:41Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/PoolTaskRestRepository.java", "diffHunk": "@@ -161,4 +133,52 @@ public void afterPropertiesSet() throws Exception {\n                 new Link(\"/api/\" + PoolTaskRest.CATEGORY + \"/\" + PoolTaskRest.NAME + \"/search\",\n                         PoolTaskRest.NAME + \"-search\")));\n     }\n+\n+    @PreAuthorize(\"hasAuthority('ADMIN')\")\n+    @SearchRestMethod(name = \"findAllByItem\")\n+    public Page<PoolTaskRest> findAllByItem(@Parameter(value = \"uuid\", required = true) UUID itemUUID,\n+           Pageable pageable) {\n+        List<PoolTask> poolTasks = null;\n+        try {\n+            Context context = obtainContext();\n+            Item item = itemService.find(context, itemUUID);\n+            if (item == null) {\n+                throw new UnprocessableEntityException(\"There is no Item with uuid provided, uuid:\" + itemUUID);\n+            }\n+            XmlWorkflowItem xmlWorkflowItem = xmlWorkflowItemService.findByItem(context, item);\n+            if (xmlWorkflowItem == null) {\n+                return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b5130c5a41d96ccf485b44a6a4d844b124261d3"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQ0MjYxMQ==", "bodyText": "Is there an IT for an existing item which is not in the workflow?\nI can see a test for this method with an XmlWorkflowItem, but no pool task for the current user (the next return null). But I don't see a test for an archived item", "url": "https://github.com/DSpace/DSpace/pull/3054#discussion_r552442611", "createdAt": "2021-01-06T08:50:03Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/PoolTaskRestRepository.java", "diffHunk": "@@ -161,4 +133,52 @@ public void afterPropertiesSet() throws Exception {\n                 new Link(\"/api/\" + PoolTaskRest.CATEGORY + \"/\" + PoolTaskRest.NAME + \"/search\",\n                         PoolTaskRest.NAME + \"-search\")));\n     }\n+\n+    @PreAuthorize(\"hasAuthority('ADMIN')\")\n+    @SearchRestMethod(name = \"findAllByItem\")\n+    public Page<PoolTaskRest> findAllByItem(@Parameter(value = \"uuid\", required = true) UUID itemUUID,\n+           Pageable pageable) {\n+        List<PoolTask> poolTasks = null;\n+        try {\n+            Context context = obtainContext();\n+            Item item = itemService.find(context, itemUUID);\n+            if (item == null) {\n+                throw new UnprocessableEntityException(\"There is no Item with uuid provided, uuid:\" + itemUUID);\n+            }\n+            XmlWorkflowItem xmlWorkflowItem = xmlWorkflowItemService.findByItem(context, item);\n+            if (xmlWorkflowItem == null) {\n+                return null;\n+            } else {\n+                poolTasks = poolTaskService.find(context, xmlWorkflowItem);\n+            }\n+            return converter.toRestPage(poolTasks, pageable, utils.obtainProjection());\n+        } catch (SQLException e) {\n+            throw new RuntimeException(e.getMessage(), e);\n+        }\n+    }\n+\n+    @SearchRestMethod(name = \"findByItem\")\n+    @PreAuthorize(\"hasAuthority('AUTHENTICATED')\")\n+    public PoolTaskRest findByItem(@Parameter(value = \"uuid\", required = true) UUID itemUUID) {\n+        PoolTask poolTask = null;\n+        try {\n+            Context context = obtainContext();\n+            Item item = itemService.find(context, itemUUID);\n+            if (item == null) {\n+                throw new UnprocessableEntityException(\"There is no Item with uuid provided, uuid:\" + itemUUID);\n+            }\n+            XmlWorkflowItem xmlWorkflowItem = xmlWorkflowItemService.findByItem(context, item);\n+            if (xmlWorkflowItem == null) {\n+                return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b5130c5a41d96ccf485b44a6a4d844b124261d3"}, "originalPosition": 120}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfa8b0348bd8d5d824102b8a7b75c6bc0a86e2a4", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/cfa8b0348bd8d5d824102b8a7b75c6bc0a86e2a4", "committedDate": "2021-01-18T14:14:07Z", "message": "added tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "cfa8b0348bd8d5d824102b8a7b75c6bc0a86e2a4", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/cfa8b0348bd8d5d824102b8a7b75c6bc0a86e2a4", "committedDate": "2021-01-18T14:14:07Z", "message": "added tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcxMTA3MTA1", "url": "https://github.com/DSpace/DSpace/pull/3054#pullrequestreview-571107105", "createdAt": "2021-01-19T10:31:34Z", "commit": {"oid": "cfa8b0348bd8d5d824102b8a7b75c6bc0a86e2a4"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fc63dc140c65eeea8a664751b6a21e4dd42f407", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/5fc63dc140c65eeea8a664751b6a21e4dd42f407", "committedDate": "2021-03-08T09:15:51Z", "message": "Merge branch 'main' into CST-3539_rebased"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1391, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}