{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1NzE5NTE1", "number": 2707, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTowODoyN1rODnoKpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzowNTozOFrODoz13A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODc5MTQxOnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/discovery/SolrServiceCommunityCollectionItemFilterPlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMTowODoyN1rOF1vWjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMToxMDoyMlrOF6rWHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg5NDY2OA==", "bodyText": "Please add JavaDocs to describe the purpose of this plugin.  It likely should say something like \"Indexes the UUID of the parent object for any Community, Collection and Item.\"\nI'd also recommend renaming this plugin to be SolrServiceParentObjectIndexingPlugin, as the would better describe its purpose.  It's not really filtering Communities, Collections or Items.  Instead it's indexing the parent object for these DSOs.", "url": "https://github.com/DSpace/DSpace/pull/2707#discussion_r391894668", "createdAt": "2020-03-12T21:08:27Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/discovery/SolrServiceCommunityCollectionItemFilterPlugin.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.discovery;\n+\n+import java.sql.SQLException;\n+\n+import org.apache.solr.common.SolrInputDocument;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.DSpaceObject;\n+import org.dspace.content.Item;\n+import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.core.Context;\n+import org.dspace.discovery.indexobject.IndexableDSpaceObject;\n+\n+public class SolrServiceCommunityCollectionItemFilterPlugin implements SolrServiceIndexPlugin {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc6a24ea6c77e2cb4584f92c139cec81e6934c"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA3MTkwMA==", "bodyText": "done here 9ce5c58#diff-9f487ddbf8c05ea7008d57b478507f1d", "url": "https://github.com/DSpace/DSpace/pull/2707#discussion_r397071900", "createdAt": "2020-03-24T11:10:22Z", "author": {"login": "abollini"}, "path": "dspace-api/src/main/java/org/dspace/discovery/SolrServiceCommunityCollectionItemFilterPlugin.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.discovery;\n+\n+import java.sql.SQLException;\n+\n+import org.apache.solr.common.SolrInputDocument;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.DSpaceObject;\n+import org.dspace.content.Item;\n+import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.core.Context;\n+import org.dspace.discovery.indexobject.IndexableDSpaceObject;\n+\n+public class SolrServiceCommunityCollectionItemFilterPlugin implements SolrServiceIndexPlugin {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg5NDY2OA=="}, "originalCommit": {"oid": "87bc6a24ea6c77e2cb4584f92c139cec81e6934c"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODgzMjY4OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CollectionRestRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMToyMjo1M1rOF1vvrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMToxMToxMlrOF6rX-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkwMTEwMw==", "bodyText": "Could we add an inline comment here to describe the query we are running?  If I understand this correctly, we're looking for all Collections that the current user has access to?", "url": "https://github.com/DSpace/DSpace/pull/2707#discussion_r391901103", "createdAt": "2020-03-12T21:22:53Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CollectionRestRepository.java", "diffHunk": "@@ -93,11 +108,26 @@ public CollectionRest findOne(Context context, UUID id) {\n     @Override\n     public Page<CollectionRest> findAll(Context context, Pageable pageable) {\n         try {\n-            long total = cs.countTotal(context);\n-            List<Collection> collections = cs.findAll(context, pageable.getPageSize(),\n-                Math.toIntExact(pageable.getOffset()));\n-            return converter.toRestPage(collections, pageable, total, utils.obtainProjection());\n-        } catch (SQLException e) {\n+            if (authorizeService.isAdmin(context)) {\n+                long total = cs.countTotal(context);\n+                List<Collection> collections = cs.findAll(context, pageable.getPageSize(),\n+                    Math.toIntExact(pageable.getOffset()));\n+                return converter.toRestPage(collections, pageable, total, utils.obtainProjection());\n+            } else {\n+                List<Collection> collections = new LinkedList<Collection>();\n+                DiscoverQuery discoverQuery = new DiscoverQuery();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc6a24ea6c77e2cb4584f92c139cec81e6934c"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA3MjM3OQ==", "bodyText": "done here 9ce5c58#diff-c7c44609573d540f6f0c0efa196ed6ffR118", "url": "https://github.com/DSpace/DSpace/pull/2707#discussion_r397072379", "createdAt": "2020-03-24T11:11:12Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CollectionRestRepository.java", "diffHunk": "@@ -93,11 +108,26 @@ public CollectionRest findOne(Context context, UUID id) {\n     @Override\n     public Page<CollectionRest> findAll(Context context, Pageable pageable) {\n         try {\n-            long total = cs.countTotal(context);\n-            List<Collection> collections = cs.findAll(context, pageable.getPageSize(),\n-                Math.toIntExact(pageable.getOffset()));\n-            return converter.toRestPage(collections, pageable, total, utils.obtainProjection());\n-        } catch (SQLException e) {\n+            if (authorizeService.isAdmin(context)) {\n+                long total = cs.countTotal(context);\n+                List<Collection> collections = cs.findAll(context, pageable.getPageSize(),\n+                    Math.toIntExact(pageable.getOffset()));\n+                return converter.toRestPage(collections, pageable, total, utils.obtainProjection());\n+            } else {\n+                List<Collection> collections = new LinkedList<Collection>();\n+                DiscoverQuery discoverQuery = new DiscoverQuery();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkwMTEwMw=="}, "originalCommit": {"oid": "87bc6a24ea6c77e2cb4584f92c139cec81e6934c"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODgzOTI3OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CommunityCollectionLinkRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMToyMzo1N1rOF1vy8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMToyMjozMFrOF6rwig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkwMTkzOA==", "bodyText": "Again, it'd be useful to add an inline comment to describe the query we are building.  This looks to be searching for all Collections  (that the user has access to) under a specific Community?", "url": "https://github.com/DSpace/DSpace/pull/2707#discussion_r391901938", "createdAt": "2020-03-12T21:23:57Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CommunityCollectionLinkRepository.java", "diffHunk": "@@ -48,10 +60,25 @@\n             if (community == null) {\n                 throw new ResourceNotFoundException(\"No such community: \" + communityId);\n             }\n-            List<Collection> collections = community.getCollections();\n-            return converter.toRestPage(utils.getPage(collections, optionalPageable), projection);\n-        } catch (SQLException e) {\n-            throw new RuntimeException(e);\n+            Pageable pageable = utils.getPageable(optionalPageable);\n+            List<Collection> collections = new LinkedList<Collection>();\n+            IndexObjectFactoryFactory indexObjectFactory = IndexObjectFactoryFactory.getInstance();\n+            IndexableObject scopeObject = indexObjectFactory.getIndexableObjects(context, community).get(0);\n+            DiscoverQuery discoverQuery = new DiscoverQuery();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc6a24ea6c77e2cb4584f92c139cec81e6934c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA3ODY2Ng==", "bodyText": "done here 94706cf#diff-c90f703886a8245f9a9e23f499cfca90R66", "url": "https://github.com/DSpace/DSpace/pull/2707#discussion_r397078666", "createdAt": "2020-03-24T11:22:30Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CommunityCollectionLinkRepository.java", "diffHunk": "@@ -48,10 +60,25 @@\n             if (community == null) {\n                 throw new ResourceNotFoundException(\"No such community: \" + communityId);\n             }\n-            List<Collection> collections = community.getCollections();\n-            return converter.toRestPage(utils.getPage(collections, optionalPageable), projection);\n-        } catch (SQLException e) {\n-            throw new RuntimeException(e);\n+            Pageable pageable = utils.getPageable(optionalPageable);\n+            List<Collection> collections = new LinkedList<Collection>();\n+            IndexObjectFactoryFactory indexObjectFactory = IndexObjectFactoryFactory.getInstance();\n+            IndexableObject scopeObject = indexObjectFactory.getIndexableObjects(context, community).get(0);\n+            DiscoverQuery discoverQuery = new DiscoverQuery();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkwMTkzOA=="}, "originalCommit": {"oid": "87bc6a24ea6c77e2cb4584f92c139cec81e6934c"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODg0MTY0OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CommunityRestRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMToyNDoyOVrOF1v0iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMToxMTozMVrOF6rYug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkwMjM0NA==", "bodyText": "Same here, a comment to describe the query.  This looks to be searching for all Communities which the current user has access to.", "url": "https://github.com/DSpace/DSpace/pull/2707#discussion_r391902344", "createdAt": "2020-03-12T21:24:29Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CommunityRestRepository.java", "diffHunk": "@@ -147,11 +160,26 @@ public CommunityRest findOne(Context context, UUID id) {\n     @Override\n     public Page<CommunityRest> findAll(Context context, Pageable pageable) {\n         try {\n-            long total = cs.countTotal(context);\n-            List<Community> communities = cs.findAll(context, pageable.getPageSize(),\n+            if (authorizeService.isAdmin(context)) {\n+                long total = cs.countTotal(context);\n+                List<Community> communities = cs.findAll(context, pageable.getPageSize(),\n                     Math.toIntExact(pageable.getOffset()));\n-            return converter.toRestPage(communities, pageable, total, utils.obtainProjection());\n-        } catch (SQLException e) {\n+                return converter.toRestPage(communities, pageable, total, utils.obtainProjection());\n+            } else {\n+                List<Community> communities = new LinkedList<Community>();\n+                DiscoverQuery discoverQuery = new DiscoverQuery();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc6a24ea6c77e2cb4584f92c139cec81e6934c"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA3MjU3MA==", "bodyText": "done here 9ce5c58#diff-38aef90b55ad47e2a09766c3dedbf89dR169", "url": "https://github.com/DSpace/DSpace/pull/2707#discussion_r397072570", "createdAt": "2020-03-24T11:11:31Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CommunityRestRepository.java", "diffHunk": "@@ -147,11 +160,26 @@ public CommunityRest findOne(Context context, UUID id) {\n     @Override\n     public Page<CommunityRest> findAll(Context context, Pageable pageable) {\n         try {\n-            long total = cs.countTotal(context);\n-            List<Community> communities = cs.findAll(context, pageable.getPageSize(),\n+            if (authorizeService.isAdmin(context)) {\n+                long total = cs.countTotal(context);\n+                List<Community> communities = cs.findAll(context, pageable.getPageSize(),\n                     Math.toIntExact(pageable.getOffset()));\n-            return converter.toRestPage(communities, pageable, total, utils.obtainProjection());\n-        } catch (SQLException e) {\n+                return converter.toRestPage(communities, pageable, total, utils.obtainProjection());\n+            } else {\n+                List<Community> communities = new LinkedList<Community>();\n+                DiscoverQuery discoverQuery = new DiscoverQuery();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkwMjM0NA=="}, "originalCommit": {"oid": "87bc6a24ea6c77e2cb4584f92c139cec81e6934c"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyODg1OTk0OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CommunitySubcommunityLinkRepository.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMToyNzozNlrOF1v-KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMToxNzowOFrOF6rkuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkwNDgwOA==", "bodyText": "Same here, please add a comment to describe the query.  This looks to be searching for all Subcommunities which the current user has access to under a given Community.\nUPDATE: Is part of this query missing?  I'm not seeing the location.parent filter here to ensure we are filtering to subcommunities under one community.  In other words, I'd expect this query to be similar to the one in CommunityCollectionLinkRepository", "url": "https://github.com/DSpace/DSpace/pull/2707#discussion_r391904808", "createdAt": "2020-03-12T21:27:36Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CommunitySubcommunityLinkRepository.java", "diffHunk": "@@ -46,10 +58,24 @@\n             if (community == null) {\n                 throw new ResourceNotFoundException(\"No such community: \" + communityId);\n             }\n-            List<Community> subcommunities = community.getSubcommunities();\n-            return converter.toRestPage(utils.getPage(subcommunities, optionalPageable), projection);\n-        } catch (SQLException e) {\n-            throw new RuntimeException(e);\n+            Pageable pageable = utils.getPageable(optionalPageable);\n+            List<Community> publicSubcommunities = new LinkedList<Community>();\n+            IndexObjectFactoryFactory indexObjectFactory = IndexObjectFactoryFactory.getInstance();\n+            IndexableObject scopeObject = indexObjectFactory.getIndexableObjects(context, community).get(0);\n+            DiscoverQuery discoverQuery = new DiscoverQuery();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc6a24ea6c77e2cb4584f92c139cec81e6934c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA3MTIzNg==", "bodyText": "@tdonohue you are right... investigating on that we have discovered that a proper test for the findAllSubCommunities normal scenario (i.e. all public resources) is missing or better the one that already exists is not related to what we expect, see \n  \n    \n      DSpace/dspace-server-webapp/src/test/java/org/dspace/app/rest/CommunityRestRepositoryIT.java\n    \n    \n         Line 733\n      in\n      880ed67\n    \n    \n    \n    \n\n        \n          \n           getClient().perform(get(\"/api/core/communities/search/subCommunities\") \n        \n    \n  \n\n\nAs you can see here it test a search method NOT the subcommunities path. We are going to add the missing test to demostrate the bug the you have found and proof the resolution but we are worrying about this search method, should we retain it? it is obviously a duplicate of the subcommunities path and actually it runs some duplicated code that need to be cleanup as well.\nIf we want to retain such search method\nhttps://github.com/DSpace/Rest7Contract/blob/master/communities.md#subcommunities-1\nof course we should add IT also for it about the security scenarios.", "url": "https://github.com/DSpace/DSpace/pull/2707#discussion_r393071236", "createdAt": "2020-03-16T14:34:36Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CommunitySubcommunityLinkRepository.java", "diffHunk": "@@ -46,10 +58,24 @@\n             if (community == null) {\n                 throw new ResourceNotFoundException(\"No such community: \" + communityId);\n             }\n-            List<Community> subcommunities = community.getSubcommunities();\n-            return converter.toRestPage(utils.getPage(subcommunities, optionalPageable), projection);\n-        } catch (SQLException e) {\n-            throw new RuntimeException(e);\n+            Pageable pageable = utils.getPageable(optionalPageable);\n+            List<Community> publicSubcommunities = new LinkedList<Community>();\n+            IndexObjectFactoryFactory indexObjectFactory = IndexObjectFactoryFactory.getInstance();\n+            IndexableObject scopeObject = indexObjectFactory.getIndexableObjects(context, community).get(0);\n+            DiscoverQuery discoverQuery = new DiscoverQuery();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkwNDgwOA=="}, "originalCommit": {"oid": "87bc6a24ea6c77e2cb4584f92c139cec81e6934c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA5NTgyNA==", "bodyText": "@abollini : I suspect that the subCommunities search was added simply because this location.parent filter didn't exist (so it was an early attempt at a subcommunities endpoint).  However, I agree that, assuming we feel the location.parent filter is the better direction, we should likely remove the subCommunities search endpoint and just use /api/core/communities/[uuid]/subcommunities as the replacement.\nWe also should keep in mind that this change also might require minor modifications to the Angular UI, if it is using the subCommunities search endpoint.", "url": "https://github.com/DSpace/DSpace/pull/2707#discussion_r393095824", "createdAt": "2020-03-16T15:08:37Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CommunitySubcommunityLinkRepository.java", "diffHunk": "@@ -46,10 +58,24 @@\n             if (community == null) {\n                 throw new ResourceNotFoundException(\"No such community: \" + communityId);\n             }\n-            List<Community> subcommunities = community.getSubcommunities();\n-            return converter.toRestPage(utils.getPage(subcommunities, optionalPageable), projection);\n-        } catch (SQLException e) {\n-            throw new RuntimeException(e);\n+            Pageable pageable = utils.getPageable(optionalPageable);\n+            List<Community> publicSubcommunities = new LinkedList<Community>();\n+            IndexObjectFactoryFactory indexObjectFactory = IndexObjectFactoryFactory.getInstance();\n+            IndexableObject scopeObject = indexObjectFactory.getIndexableObjects(context, community).get(0);\n+            DiscoverQuery discoverQuery = new DiscoverQuery();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkwNDgwOA=="}, "originalCommit": {"oid": "87bc6a24ea6c77e2cb4584f92c139cec81e6934c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUxNzIyMA==", "bodyText": "@tdonohue @abollini\non angular side is only used the community's subcommunities link, the core/communities/search/subCommunities method is not used", "url": "https://github.com/DSpace/DSpace/pull/2707#discussion_r393517220", "createdAt": "2020-03-17T08:39:19Z", "author": {"login": "atarix83"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CommunitySubcommunityLinkRepository.java", "diffHunk": "@@ -46,10 +58,24 @@\n             if (community == null) {\n                 throw new ResourceNotFoundException(\"No such community: \" + communityId);\n             }\n-            List<Community> subcommunities = community.getSubcommunities();\n-            return converter.toRestPage(utils.getPage(subcommunities, optionalPageable), projection);\n-        } catch (SQLException e) {\n-            throw new RuntimeException(e);\n+            Pageable pageable = utils.getPageable(optionalPageable);\n+            List<Community> publicSubcommunities = new LinkedList<Community>();\n+            IndexObjectFactoryFactory indexObjectFactory = IndexObjectFactoryFactory.getInstance();\n+            IndexableObject scopeObject = indexObjectFactory.getIndexableObjects(context, community).get(0);\n+            DiscoverQuery discoverQuery = new DiscoverQuery();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkwNDgwOA=="}, "originalCommit": {"oid": "87bc6a24ea6c77e2cb4584f92c139cec81e6934c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzOTc4MA==", "bodyText": "From the REST contract I also don't see any reasons why both endpoints exist, but there's little info on either endpoint.\nIs it possible that one endpoint only returns direct children and the other endpoint also returns indirect children?", "url": "https://github.com/DSpace/DSpace/pull/2707#discussion_r393839780", "createdAt": "2020-03-17T17:14:04Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CommunitySubcommunityLinkRepository.java", "diffHunk": "@@ -46,10 +58,24 @@\n             if (community == null) {\n                 throw new ResourceNotFoundException(\"No such community: \" + communityId);\n             }\n-            List<Community> subcommunities = community.getSubcommunities();\n-            return converter.toRestPage(utils.getPage(subcommunities, optionalPageable), projection);\n-        } catch (SQLException e) {\n-            throw new RuntimeException(e);\n+            Pageable pageable = utils.getPageable(optionalPageable);\n+            List<Community> publicSubcommunities = new LinkedList<Community>();\n+            IndexObjectFactoryFactory indexObjectFactory = IndexObjectFactoryFactory.getInstance();\n+            IndexableObject scopeObject = indexObjectFactory.getIndexableObjects(context, community).get(0);\n+            DiscoverQuery discoverQuery = new DiscoverQuery();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkwNDgwOA=="}, "originalCommit": {"oid": "87bc6a24ea6c77e2cb4584f92c139cec81e6934c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEwMDk2Mg==", "bodyText": "we checked, both implementation were returning only direct children. So we have removed the search method", "url": "https://github.com/DSpace/DSpace/pull/2707#discussion_r395100962", "createdAt": "2020-03-19T15:11:29Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CommunitySubcommunityLinkRepository.java", "diffHunk": "@@ -46,10 +58,24 @@\n             if (community == null) {\n                 throw new ResourceNotFoundException(\"No such community: \" + communityId);\n             }\n-            List<Community> subcommunities = community.getSubcommunities();\n-            return converter.toRestPage(utils.getPage(subcommunities, optionalPageable), projection);\n-        } catch (SQLException e) {\n-            throw new RuntimeException(e);\n+            Pageable pageable = utils.getPageable(optionalPageable);\n+            List<Community> publicSubcommunities = new LinkedList<Community>();\n+            IndexObjectFactoryFactory indexObjectFactory = IndexObjectFactoryFactory.getInstance();\n+            IndexableObject scopeObject = indexObjectFactory.getIndexableObjects(context, community).get(0);\n+            DiscoverQuery discoverQuery = new DiscoverQuery();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkwNDgwOA=="}, "originalCommit": {"oid": "87bc6a24ea6c77e2cb4584f92c139cec81e6934c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA3NTY0MA==", "bodyText": "the search method has been removed see 9ce5c58#diff-38aef90b55ad47e2a09766c3dedbf89dL202\nand the test fixed to use the right endpoint\n9ce5c58#diff-6622e3784efcad38a85da05b7dff958fR922\nthat has shown the issue caught by @tdonohue  here 9ce5c58#diff-61a40e01c781a6ddea21860116a7679fR68", "url": "https://github.com/DSpace/DSpace/pull/2707#discussion_r397075640", "createdAt": "2020-03-24T11:17:08Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CommunitySubcommunityLinkRepository.java", "diffHunk": "@@ -46,10 +58,24 @@\n             if (community == null) {\n                 throw new ResourceNotFoundException(\"No such community: \" + communityId);\n             }\n-            List<Community> subcommunities = community.getSubcommunities();\n-            return converter.toRestPage(utils.getPage(subcommunities, optionalPageable), projection);\n-        } catch (SQLException e) {\n-            throw new RuntimeException(e);\n+            Pageable pageable = utils.getPageable(optionalPageable);\n+            List<Community> publicSubcommunities = new LinkedList<Community>();\n+            IndexObjectFactoryFactory indexObjectFactory = IndexObjectFactoryFactory.getInstance();\n+            IndexableObject scopeObject = indexObjectFactory.getIndexableObjects(context, community).get(0);\n+            DiscoverQuery discoverQuery = new DiscoverQuery();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTkwNDgwOA=="}, "originalCommit": {"oid": "87bc6a24ea6c77e2cb4584f92c139cec81e6934c"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTE4MDg5OnYy", "diffSide": "RIGHT", "path": "dspace-api/src/main/java/org/dspace/discovery/SolrServiceResourceRestrictionPlugin.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzowMzoxN1rOF3lp8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMTozNToyOVrOF6sMOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzMjk0Ng==", "bodyText": "This implementation implies that if you create a community ADMIN group after the community contains items, those items will need to be re-indexed.\nI don't think that's a problem, as long as it's well-documented", "url": "https://github.com/DSpace/DSpace/pull/2707#discussion_r393832946", "createdAt": "2020-03-17T17:03:17Z", "author": {"login": "benbosman"}, "path": "dspace-api/src/main/java/org/dspace/discovery/SolrServiceResourceRestrictionPlugin.java", "diffHunk": "@@ -77,6 +82,29 @@ public void additionalIndex(Context context, IndexableObject idxObj, SolrInputDo\n                     //remove the policy from the cache to save memory\n                     context.uncacheEntity(resourcePolicy);\n                 }\n+                 // also index ADMIN policies as ADMIN permissions provides READ access", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ce5c586269ebdde32e87d1d7591be15734f7dd3"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0MTU3OQ==", "bodyText": "You are right. We can easily note that in the rest contract for the subCommunities path we will open a PR for that. I also available, if you feel appropriate, to put on this page (rephrasing is welcome)\nhttps://wiki.lyrasis.org/display/DSDOC7x/Configuration+Reference#ConfigurationReference-DelegationAdministration:AuthorizationSystemConfiguration\nthis warning note once that the PR is merged.\n\"Please note that, to provide good performance, the REST API uses information flatten and stored in SOLR at the time of item indexing that could become stale when new delegation are enabled (i.e. a community or collection admin group are created). In such case you are advised to reindex your items. This doesn't apply when your delegation are already inplace and you only change the members of an admin group, these changes are immediately visible without any need to reindex.\"", "url": "https://github.com/DSpace/DSpace/pull/2707#discussion_r395141579", "createdAt": "2020-03-19T16:06:06Z", "author": {"login": "abollini"}, "path": "dspace-api/src/main/java/org/dspace/discovery/SolrServiceResourceRestrictionPlugin.java", "diffHunk": "@@ -77,6 +82,29 @@ public void additionalIndex(Context context, IndexableObject idxObj, SolrInputDo\n                     //remove the policy from the cache to save memory\n                     context.uncacheEntity(resourcePolicy);\n                 }\n+                 // also index ADMIN policies as ADMIN permissions provides READ access", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzMjk0Ng=="}, "originalCommit": {"oid": "9ce5c586269ebdde32e87d1d7591be15734f7dd3"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4NTc1Mw==", "bodyText": "I have create a PR to add these information in the rest contract DSpace/RestContract#116", "url": "https://github.com/DSpace/DSpace/pull/2707#discussion_r397085753", "createdAt": "2020-03-24T11:35:29Z", "author": {"login": "abollini"}, "path": "dspace-api/src/main/java/org/dspace/discovery/SolrServiceResourceRestrictionPlugin.java", "diffHunk": "@@ -77,6 +82,29 @@ public void additionalIndex(Context context, IndexableObject idxObj, SolrInputDo\n                     //remove the policy from the cache to save memory\n                     context.uncacheEntity(resourcePolicy);\n                 }\n+                 // also index ADMIN policies as ADMIN permissions provides READ access", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzMjk0Ng=="}, "originalCommit": {"oid": "9ce5c586269ebdde32e87d1d7591be15734f7dd3"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTE5MDA0OnYy", "diffSide": "RIGHT", "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CollectionRestRepository.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzowNTozOFrOF3lvyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNToxMzoxMVrOF4zINw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNDQ0Mg==", "bodyText": "I can see no discovery configuration is included here. If a local institution changes the default discovery behavior to exclude comm/coll from the discovery search results, will this functionality stop working?\n(the same applies for the other searches in this PR)", "url": "https://github.com/DSpace/DSpace/pull/2707#discussion_r393834442", "createdAt": "2020-03-17T17:05:38Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CollectionRestRepository.java", "diffHunk": "@@ -93,11 +108,28 @@ public CollectionRest findOne(Context context, UUID id) {\n     @Override\n     public Page<CollectionRest> findAll(Context context, Pageable pageable) {\n         try {\n-            long total = cs.countTotal(context);\n-            List<Collection> collections = cs.findAll(context, pageable.getPageSize(),\n-                Math.toIntExact(pageable.getOffset()));\n-            return converter.toRestPage(collections, pageable, total, utils.obtainProjection());\n-        } catch (SQLException e) {\n+            if (authorizeService.isAdmin(context)) {\n+                long total = cs.countTotal(context);\n+                List<Collection> collections = cs.findAll(context, pageable.getPageSize(),\n+                    Math.toIntExact(pageable.getOffset()));\n+                return converter.toRestPage(collections, pageable, total, utils.obtainProjection());\n+            } else {\n+                List<Collection> collections = new LinkedList<Collection>();\n+                // search for all the collections and let the SOLR security plugins to limit\n+                // what is returned to what the user can see\n+                DiscoverQuery discoverQuery = new DiscoverQuery();\n+                discoverQuery.setDSpaceObjectFilter(IndexableCollection.TYPE);\n+                discoverQuery.setStart(Math.toIntExact(pageable.getOffset()));\n+                discoverQuery.setMaxResults(pageable.getPageSize());\n+                DiscoverResult resp = searchService.search(context, discoverQuery);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ce5c586269ebdde32e87d1d7591be15734f7dd3"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEwMjI2Mw==", "bodyText": "no, it will work anyway because it doesn't use a discovery configuration but build from scratch a discover query. It only use the new field intorduced via the plugin (similar to how the other security filters work)", "url": "https://github.com/DSpace/DSpace/pull/2707#discussion_r395102263", "createdAt": "2020-03-19T15:13:11Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/repository/CollectionRestRepository.java", "diffHunk": "@@ -93,11 +108,28 @@ public CollectionRest findOne(Context context, UUID id) {\n     @Override\n     public Page<CollectionRest> findAll(Context context, Pageable pageable) {\n         try {\n-            long total = cs.countTotal(context);\n-            List<Collection> collections = cs.findAll(context, pageable.getPageSize(),\n-                Math.toIntExact(pageable.getOffset()));\n-            return converter.toRestPage(collections, pageable, total, utils.obtainProjection());\n-        } catch (SQLException e) {\n+            if (authorizeService.isAdmin(context)) {\n+                long total = cs.countTotal(context);\n+                List<Collection> collections = cs.findAll(context, pageable.getPageSize(),\n+                    Math.toIntExact(pageable.getOffset()));\n+                return converter.toRestPage(collections, pageable, total, utils.obtainProjection());\n+            } else {\n+                List<Collection> collections = new LinkedList<Collection>();\n+                // search for all the collections and let the SOLR security plugins to limit\n+                // what is returned to what the user can see\n+                DiscoverQuery discoverQuery = new DiscoverQuery();\n+                discoverQuery.setDSpaceObjectFilter(IndexableCollection.TYPE);\n+                discoverQuery.setStart(Math.toIntExact(pageable.getOffset()));\n+                discoverQuery.setMaxResults(pageable.getPageSize());\n+                DiscoverResult resp = searchService.search(context, discoverQuery);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzNDQ0Mg=="}, "originalCommit": {"oid": "9ce5c586269ebdde32e87d1d7591be15734f7dd3"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1692, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}