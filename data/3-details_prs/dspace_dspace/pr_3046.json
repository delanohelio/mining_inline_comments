{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4MzMwNjQy", "number": 3046, "title": "Metadata identifier for Communities and Collections", "bodyText": "References\n\nFixes #887\n\nDescription\nAs for items, when we create a new Community or Collection, the handle is saved as a metadata value (dc.identifier.uri) fetching the correct prefix from the configuration.\nInstructions for Reviewers\nTests to prove the metadata value insertion after creation of top community, sub community and collection have been implemented. We prove also that the same logic is not applied to other dso object (Tested for eperson).\nList of changes in this PR:\n\nThe handle metadata creation for communities and collection has been deferred after the object creation due to permission errors. In particular the community parents structure must be evaluated before creating the metadata value.\nPreviously during the Community and Collection creation the passed rest metadata used to override any existing metadata values for the created object. A merge method as been added to prevent the new handle metadata to be immediately erased. See here and here\nThe common code for top community and sub community creation code in CommunityRestRespository have been factorized to avoid code duplication.\nFor DOIIdentifierProvider and EZIDIdentifierProvider the process is skipped for DSpaceObjects different from Item.\nHandleIdentifierProvider and VersionHandleIdentifierProvider have been generalized and the process is skipped for DspaceObjects different from Item, Collection or Community.\nSeveral unit tests of CollectionTest and CommunityTest have been fixed doubling the mocked methods of the AuthorizeService. This is mainly due to some code duplication on the service side.\nA flyway script takes care to populate the dc.identifier.uri metadata for any existing community and collection. Since we needed to retrieve the handlePrefix from the configuration, a java based migration has been implemented, and the value is passed to the query via prepared statement for security reason.\n\nChecklist\n\n My PR is small in size (e.g. less than 1,000 lines of code, not including comments & integration tests). Exceptions may be made if previously agreed upon.\n My PR passes Checkstyle validation based on the Code Style Guide.\n My PR includes Javadoc for all new (or modified) public methods and classes. It also includes Javadoc for large or complex private methods.\n My PR passes all tests and includes new/updated Unit or Integration Tests based on the Code Testing Guide.\n If my PR includes new, third-party dependencies (in any pom.xml), I've made sure their licenses align with the DSpace BSD License based on the Licensing of Contributions documentation.\n If my PR modifies the REST API, I've linked to the REST Contract page (or open PR) related to this change.", "createdAt": "2020-11-10T08:58:58Z", "url": "https://github.com/DSpace/DSpace/pull/3046", "merged": true, "mergeCommit": {"oid": "6b7b5ad8d8028690d092a89dca56e6df8c5dbdc7"}, "closed": true, "closedAt": "2020-11-23T15:21:27Z", "author": {"login": "alemarte"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWqrJzgH2gAyNTE4MzMwNjQyOjFlNTQ0ODRlZjUwMzIyYzkzYWVmOWVjNDczZjdiZmE4OTg0MGVlODI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdfWwXxAFqTUzNjU3MzE2NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1e54484ef50322c93aef9ec473f7bfa89840ee82", "author": {"user": {"login": "alemarte", "name": "alemarte"}}, "url": "https://github.com/DSpace/DSpace/commit/1e54484ef50322c93aef9ec473f7bfa89840ee82", "committedDate": "2020-10-27T15:26:43Z", "message": "[CSTPER-221] Integration Test\n\nThe creation of communities (toplevel and subcommunities) and the\ncreation of collections implies population of dc.identifier.uri\nmetatada.\nWe also prove that the logic doesn't affect the creation of other types\nof entities (eperson)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36e6a44000d0a04fc4f91c11baa7bf3960f7a4b6", "author": {"user": {"login": "alemarte", "name": "alemarte"}}, "url": "https://github.com/DSpace/DSpace/commit/36e6a44000d0a04fc4f91c11baa7bf3960f7a4b6", "committedDate": "2020-10-27T15:31:15Z", "message": "[CSTPER-221] CommunityRestRepository common code refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b27d2ba3224c498673f2b3194e03a1f1446cf2dd", "author": {"user": {"login": "alemarte", "name": "alemarte"}}, "url": "https://github.com/DSpace/DSpace/commit/b27d2ba3224c498673f2b3194e03a1f1446cf2dd", "committedDate": "2020-10-27T15:39:26Z", "message": "[CSTPER-221] Handle Providers enhanced for Communities and Collections"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2daad0b98cbb094f520b7f593868d28f1c7b2897", "author": {"user": {"login": "alemarte", "name": "alemarte"}}, "url": "https://github.com/DSpace/DSpace/commit/2daad0b98cbb094f520b7f593868d28f1c7b2897", "committedDate": "2020-10-27T15:47:05Z", "message": "[CSTPER-221] DOI Collection/Community exclusion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8b7a78578be51bbb9bd51b92d083a5d7693cdb7", "author": {"user": {"login": "alemarte", "name": "alemarte"}}, "url": "https://github.com/DSpace/DSpace/commit/d8b7a78578be51bbb9bd51b92d083a5d7693cdb7", "committedDate": "2020-10-27T15:58:29Z", "message": "[CSTPER-221] RestMetadata applied without deleting existing ones."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5968c9ce2a748df54308fe180d0d903462e671be", "author": {"user": {"login": "alemarte", "name": "alemarte"}}, "url": "https://github.com/DSpace/DSpace/commit/5968c9ce2a748df54308fe180d0d903462e671be", "committedDate": "2020-10-29T15:44:37Z", "message": "[CSTPER-221] Tests refined"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e959d70cc71db248905454b8460692969c9ccdfc", "author": {"user": {"login": "alemarte", "name": "alemarte"}}, "url": "https://github.com/DSpace/DSpace/commit/e959d70cc71db248905454b8460692969c9ccdfc", "committedDate": "2020-10-29T15:50:44Z", "message": "[CSTPER-221] Reverted modifications to the register method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3c3d30c6c32f32070a1b2c1e7084354c1fd9ef4", "author": {"user": {"login": "alemarte", "name": "alemarte"}}, "url": "https://github.com/DSpace/DSpace/commit/d3c3d30c6c32f32070a1b2c1e7084354c1fd9ef4", "committedDate": "2020-10-29T16:28:40Z", "message": "[CSTPER-221] Versioned handle populate metadata cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b33cd12ddf8391f0de4d809d763432b62b3233bc", "author": {"user": {"login": "alemarte", "name": "alemarte"}}, "url": "https://github.com/DSpace/DSpace/commit/b33cd12ddf8391f0de4d809d763432b62b3233bc", "committedDate": "2020-10-29T16:29:05Z", "message": "[CSTPER-221] EZIDIdentifierProvider exclusions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ebab9836183339f95253bf10ce51350682ad9f5d", "author": {"user": {"login": "alemarte", "name": "alemarte"}}, "url": "https://github.com/DSpace/DSpace/commit/ebab9836183339f95253bf10ce51350682ad9f5d", "committedDate": "2020-10-29T17:51:45Z", "message": "[CSTPER-221] Validation check and MetadataConverter merge facility"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28273ce292dacb2631e35c81b8668bba646d61ba", "author": {"user": {"login": "alemarte", "name": "alemarte"}}, "url": "https://github.com/DSpace/DSpace/commit/28273ce292dacb2631e35c81b8668bba646d61ba", "committedDate": "2020-10-29T17:57:42Z", "message": "[CSTPER-221] EZIDIdentifierProvider exclusions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b878b0a7e0edd8f78918943d1e06f03893f2e16d", "author": {"user": {"login": "alemarte", "name": "alemarte"}}, "url": "https://github.com/DSpace/DSpace/commit/b878b0a7e0edd8f78918943d1e06f03893f2e16d", "committedDate": "2020-10-30T17:41:04Z", "message": "[CSTPER-221] Minor changes and cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed01db639265d0d6d3ff58c261889c6bc9e0058c", "author": {"user": {"login": "alemarte", "name": "alemarte"}}, "url": "https://github.com/DSpace/DSpace/commit/ed01db639265d0d6d3ff58c261889c6bc9e0058c", "committedDate": "2020-11-06T14:55:10Z", "message": "[CSTPER-221] MetadataConverter fixed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc08f36a9497b78c9f1a5541a30534fd41f1f589", "author": {"user": {"login": "alemarte", "name": "alemarte"}}, "url": "https://github.com/DSpace/DSpace/commit/dc08f36a9497b78c9f1a5541a30534fd41f1f589", "committedDate": "2020-11-09T10:48:22Z", "message": "[CSTPER-221] Fixed Authorization denied during subCommunity creation\n\nWe need to persist the newCommunity before adding the handle metadata\nvalue. The failing test was\n* CommunityRestRepositoryIT.createSubCommunityAuthorizedTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "572a74afbab428a8cd0283ae799e06407707492f", "author": {"user": {"login": "alemarte", "name": "alemarte"}}, "url": "https://github.com/DSpace/DSpace/commit/572a74afbab428a8cd0283ae799e06407707492f", "committedDate": "2020-11-09T10:52:10Z", "message": "[CSTPER-221] Script Flyway to populate handle metadata\n\nFor existing Collection/Community"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c84608e81f993f0ef805310e21e0dedda3e13d57", "author": {"user": {"login": "alemarte", "name": "alemarte"}}, "url": "https://github.com/DSpace/DSpace/commit/c84608e81f993f0ef805310e21e0dedda3e13d57", "committedDate": "2020-11-09T16:06:29Z", "message": "[CSTPER-221] Collection handle generation after creation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0b5cf90751e6fb7e1884ecb00d57713be0303f2", "author": {"user": {"login": "alemarte", "name": "alemarte"}}, "url": "https://github.com/DSpace/DSpace/commit/a0b5cf90751e6fb7e1884ecb00d57713be0303f2", "committedDate": "2020-11-09T16:13:22Z", "message": "[CSTPER-221] Fixed Unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e279cb3e0532c80c670b02352344eb6721ea905a", "author": {"user": {"login": "alemarte", "name": "alemarte"}}, "url": "https://github.com/DSpace/DSpace/commit/e279cb3e0532c80c670b02352344eb6721ea905a", "committedDate": "2020-11-11T08:28:47Z", "message": "[CSTPER-221] Script Flyway to populate handle metadata\n\nFixed Javadoc."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxODM3Mzc4", "url": "https://github.com/DSpace/DSpace/pull/3046#pullrequestreview-531837378", "createdAt": "2020-11-16T22:24:51Z", "commit": {"oid": "e279cb3e0532c80c670b02352344eb6721ea905a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMjoyNDo1MVrOH0Xu7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMjoyNzoyNFrOH0X5Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY3Njg0NA==", "bodyText": "Have we fully tested this SQL_INSERT on Postgres and Oracle?  I'm a little nervous about hardcoding this SQL as a string in Java, simply because it means we cannot easily customize it for Postgres vs Oracle as necessary.\nNormally, the process is to provide separate *.sql files under dspace-api/src/main/resources/org/dspace/storage/rdbms/sqlmigration/[db-type]/, rather than hardcoding SQL into Java.\nIf this has not been tested on Oracle, I'd prefer we replace this logic with SQL files, even though I realize that'd require having two INSERT statements in each file (one for community & one for collection)", "url": "https://github.com/DSpace/DSpace/pull/3046#discussion_r524676844", "createdAt": "2020-11-16T22:24:51Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/storage/rdbms/migration/V7_0_2020_10_31__CollectionCommunity_Metadata_Handle.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.storage.rdbms.migration;\n+\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+\n+import org.dspace.handle.service.HandleService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.flywaydb.core.api.migration.BaseJavaMigration;\n+import org.flywaydb.core.api.migration.Context;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.PreparedStatementSetter;\n+import org.springframework.jdbc.datasource.SingleConnectionDataSource;\n+\n+/**\n+ * Insert a 'dc.idendifier.uri' metadata record for each Community and Collection in the database.\n+ * The value is calculated concatenating the canonicalPrefix extracted from the configuration\n+ * (default is \"http://hdl.handle.net/) and the object's handle suffix stored inside the handle table.\n+ *\n+ * @author Alessandro Martelli (alessandro.martelli at 4science.it)\n+ */\n+public class V7_0_2020_10_31__CollectionCommunity_Metadata_Handle extends BaseJavaMigration {\n+    // Size of migration script run\n+    protected Integer migration_file_size = -1;\n+\n+    @Override\n+    public void migrate(Context context) throws Exception {\n+\n+        HandleService handleService = DSpaceServicesFactory\n+                .getInstance().getServiceManager().getServicesByType(HandleService.class).get(0);\n+\n+        final String prefix = handleService.getCanonicalPrefix();\n+\n+        final String SQL_INSERT = \"insert into metadatavalue \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e279cb3e0532c80c670b02352344eb6721ea905a"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY3OTA1MQ==", "bodyText": "You can remove this logic, as there's no need to reset Configuration values.  They automatically reset after every test.  So, the try/finally can be removed & the getProperty at the top.   Just call setProperty to change the value, and it'll reset automatically.", "url": "https://github.com/DSpace/DSpace/pull/3046#discussion_r524679051", "createdAt": "2020-11-16T22:27:00Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/test/java/org/dspace/content/CollectionTest.java", "diffHunk": "@@ -180,6 +191,10 @@ public void testCreateWithValidHandle() throws Exception {\n         // check that collection was created, and that its handle was set to proper value\n         assertThat(\"testCreateWithValidHandle 0\", created, notNullValue());\n         assertThat(\"testCreateWithValidHandle 1\", created.getHandle(), equalTo(\"987654321/100\"));\n+\n+        } finally {\n+            configurationService.setProperty(\"handle.additional.prefixes\", handleAdditionalPrefixes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e279cb3e0532c80c670b02352344eb6721ea905a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDY3OTQ3MQ==", "bodyText": "Again, remove this logic...configs reset automatically", "url": "https://github.com/DSpace/DSpace/pull/3046#discussion_r524679471", "createdAt": "2020-11-16T22:27:24Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/test/java/org/dspace/content/CommunityTest.java", "diffHunk": "@@ -214,6 +227,10 @@ public void testCreateWithValidHandle() throws Exception {\n         // check that community was created, and that its handle was set to proper value\n         assertThat(\"testCreateWithValidHandle 0\", created, notNullValue());\n         assertThat(\"testCreateWithValidHandle 1\", created.getHandle(), equalTo(\"987654321/100c\"));\n+\n+        } finally {\n+            configurationService.setProperty(\"handle.additional.prefixes\", handleAdditionalPrefixes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e279cb3e0532c80c670b02352344eb6721ea905a"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65b69a2b29830c2f00a3dc6b8cd8bdca0faf4892", "author": {"user": {"login": "alemarte", "name": "alemarte"}}, "url": "https://github.com/DSpace/DSpace/commit/65b69a2b29830c2f00a3dc6b8cd8bdca0faf4892", "committedDate": "2020-11-18T09:52:27Z", "message": "[CSTPER-221] Script Flyway to populate handle metadata\n\nMoved to sql files."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0ODA1NjI0", "url": "https://github.com/DSpace/DSpace/pull/3046#pullrequestreview-534805624", "createdAt": "2020-11-19T20:03:19Z", "commit": {"oid": "65b69a2b29830c2f00a3dc6b8cd8bdca0faf4892"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDowMzoxOVrOH2vgag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDowODoyMFrOH2vqtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE2MzQ5OA==", "bodyText": "@alemarte : Sorry, but I have to admit, I'm not a fan of this new logic to create a temp table to store the configured handle prefix.  I understand the reasoning behind it, but this approach seems more complex than necessary (and I'm also worried about fragility...if something errors out here, I'm worried some sites could end up with an unused tmp_handleprefix table sitting around).\nInstead of trying to save the configuration into the database layer, it seems much easier to just use String variable substitution.  Afterall, you are reading the SQL migration script into a String (see dataMigrateSQL on line 63).   Therefore, why not do something like this:\n// Get SQL script (based on DB type)\nString dataMigrateSQL = MigrationUtils.getResourceAsString(sqlMigrationPath + \"V7.0_2020.10.31__CollectionCommunity_Metadata_Handle.sql\");\n\n// Replace ${handle.canonical.prefix} variable in SQL script with value from Configuration\nMap<String, String> valuesMap = new HashMap<>();\nvaluesMap.put(\"handle.canonical.prefix\", handleService.getCanonicalPrefix());\nStringSubstitutor sub = new StringSubstitutor(valuesMap);\ndataMigrateSQL = sub.replace(dataMigrateSQL);\n\n// Run the resulting script\nDatabaseUtils.executeSql(context.getConnection(), dataMigrateSQL);\n\nTo me, this would be a lot cleaner & easier for other developers to understand.  It'd only require that you add a ${handle.canonical.prefix} placeholder into the SQL scripts where it is necessary.  I'll also note that this same idea has already been used in our FlywayUpgradeUtils class, which uses  similar placeholder variables in the upgradeToFlyway4x.sql script.\nApologies that I didn't suggest this approach sooner, but I had forgotten it until I analyzed your new code.", "url": "https://github.com/DSpace/DSpace/pull/3046#discussion_r527163498", "createdAt": "2020-11-19T20:03:19Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/storage/rdbms/migration/V7_0_2020_10_31__CollectionCommunity_Metadata_Handle.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.storage.rdbms.migration;\n+\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+\n+import org.dspace.handle.service.HandleService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.dspace.storage.rdbms.DatabaseUtils;\n+import org.flywaydb.core.api.migration.BaseJavaMigration;\n+import org.flywaydb.core.api.migration.Context;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.PreparedStatementSetter;\n+import org.springframework.jdbc.datasource.SingleConnectionDataSource;\n+\n+/**\n+ * Insert a 'dc.idendifier.uri' metadata record for each Community and Collection in the database.\n+ * The value is calculated concatenating the canonicalPrefix extracted from the configuration\n+ * (default is \"http://hdl.handle.net/) and the object's handle suffix stored inside the handle table.\n+ *\n+ * @author Alessandro Martelli (alessandro.martelli at 4science.it)\n+ */\n+public class V7_0_2020_10_31__CollectionCommunity_Metadata_Handle extends BaseJavaMigration {\n+    // Size of migration script run\n+    protected Integer migration_file_size = -1;\n+\n+    @Override\n+    public void migrate(Context context) throws Exception {\n+\n+        HandleService handleService = DSpaceServicesFactory\n+                .getInstance().getServiceManager().getServicesByType(HandleService.class).get(0);\n+\n+        final String prefix = handleService.getCanonicalPrefix();\n+\n+        // Step 1 Preparation (creation of the tmp_handleprefix containing one record with the prefix)\n+        String createTmpTable = \"CREATE TABLE tmp_handleprefix (handleprefix text NOT NULL);\";\n+        DatabaseUtils.executeSql(context.getConnection(), createTmpTable);\n+\n+        // Step 2 Preparation (insertion of the prefix value into tmp_handleprefix)\n+        String insertPrefixSql = \"INSERT INTO tmp_handleprefix (handleprefix) VALUES (?)\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b69a2b29830c2f00a3dc6b8cd8bdca0faf4892"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE2NjEzMw==", "bodyText": "If you go with the approach I suggested above, I think this line (and the same line in the other INSERT statement) would just become:\nconcat(\"${handle.canonical.prefix}\", h.handle) as text_value,\n\nObviously, you can also remove other references to the T2 table in this script (namely the cross join below)", "url": "https://github.com/DSpace/DSpace/pull/3046#discussion_r527166133", "createdAt": "2020-11-19T20:08:20Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/resources/org/dspace/storage/rdbms/sqlmigration/metadata/h2/V7.0_2020.10.31__CollectionCommunity_Metadata_Handle.sql", "diffHunk": "@@ -0,0 +1,99 @@\n+--\n+-- The contents of this file are subject to the license and copyright\n+-- detailed in the LICENSE and NOTICE files at the root of the source\n+-- tree and available online at\n+--\n+-- http://www.dspace.org/license/\n+--\n+\n+-- ===============================================================\n+-- WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING\n+--\n+-- DO NOT MANUALLY RUN THIS DATABASE MIGRATION. IT WILL BE EXECUTED\n+-- AUTOMATICALLY (IF NEEDED) BY \"FLYWAY\" WHEN YOU STARTUP DSPACE.\n+-- http://flywaydb.org/\n+-- ===============================================================\n+\n+-------------------------------------------------------------\n+-- This will create COMMUNITY handle metadata\n+-------------------------------------------------------------\n+\n+insert into metadatavalue (metadata_field_id, text_value, text_lang, place, authority, confidence, dspace_object_id) \n+  select distinct \n+  \tT1.metadata_field_id as metadata_field_id, \n+  \tconcat(T2.handleprefix, h.handle) as text_value, ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b69a2b29830c2f00a3dc6b8cd8bdca0faf4892"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "639b63635bb76fb66a76e5989b4fe8e2b026d7f0", "author": {"user": {"login": "alemarte", "name": "alemarte"}}, "url": "https://github.com/DSpace/DSpace/commit/639b63635bb76fb66a76e5989b4fe8e2b026d7f0", "committedDate": "2020-11-23T08:52:59Z", "message": "[CSTPER-221] Script Flyway to populate handle metadata\n\nSql placeholders replacement."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2NTczMTY0", "url": "https://github.com/DSpace/DSpace/pull/3046#pullrequestreview-536573164", "createdAt": "2020-11-23T15:19:38Z", "commit": {"oid": "639b63635bb76fb66a76e5989b4fe8e2b026d7f0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1380, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}