{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3MDE0OTQz", "number": 2783, "title": "Authorization for Downloads of restricted Bitstreams: Short lived token endpoint", "bodyText": "References\nAdd references/links to any related tickets or PRs. These may include:\n\nLink to REST Contract\n\nDescription\nThis PR adds support for short lived token generation. The JWTTokenHandler class used to generate our session tokens has been split up into 2 parts:\n\nSessionJWTTokenHandler\nShortLivedJWTTokenHandler\n\nThe difference being when that they have different configuration properties. If you have existing configuration that differs from the default ones you will need to look at the authentication.cfg file changes to see the new properties. Furthermore the \"expiration\" configuration property has been changed to use milliseconds instead of minutes.\nInstructions for Reviewers\nIf you want to test this PR locally alter the jwt.shortLived.token.expiration in the local.cfg & put it to something like 30 seconds (as 2 seconds is very short if you want to test this).\nTo test this pr:\n\nRequest a short lived token\nProvide the token to a private bitstream using the \"token\" parameter\nWait until the configured time expires & try to download the file again, it should fail now\n\nChecklist\nThis checklist provides a reminder of what we are going to look for when reviewing your PR. You need not complete this checklist prior to creating your PR (draft PRs are always welcome). If you are unsure about an item in the checklist, don't hesitate to ask. We're here to help!\n\n My PR is small in size (e.g. less than 1,000 lines of code, not including comments & integration tests). Exceptions may be made if previously agreed upon.\n My PR passes Checkstyle validation based on the Code Style Guide.\n My PR includes Javadoc for all new (or modified) public methods and classes. It also includes Javadoc for large or complex private methods.\n My PR passes all tests and includes new/updated Unit or Integration Tests based on the Code Testing Guide.\n If my PR includes new, third-party dependencies (in any pom.xml), I've made sure their licenses align with the DSpace BSD License based on the Licensing of Contributions documentation.\n If my PR modifies the REST API, I've linked to the REST Contract page (or open PR) related to this change.", "createdAt": "2020-06-19T10:13:56Z", "url": "https://github.com/DSpace/DSpace/pull/2783", "merged": true, "mergeCommit": {"oid": "338bb2296f5eb766a2eff83d61f83a0676232d92"}, "closed": true, "closedAt": "2020-07-01T20:39:22Z", "author": {"login": "KevinVdV"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcqhjlPAH2gAyNDM3MDE0OTQzOjQ4YTg2Mzk5MDIzZmE2YzFhZmE0ZjUzODIzNDZlYzZlY2NmOTliOWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwwZx_gFqTQ0MTE4MDY5OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "48a86399023fa6c1afa4f5382346ec6eccf99b9a", "author": {"user": {"login": "peter-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/48a86399023fa6c1afa4f5382346ec6eccf99b9a", "committedDate": "2020-06-12T11:56:38Z", "message": "71342: Authorization for Downloads of restricted Bitstreams #1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7ef7d3c5ec75c75b4cb5575e47c464c9539d666", "author": {"user": {"login": "peter-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/e7ef7d3c5ec75c75b4cb5575e47c464c9539d666", "committedDate": "2020-06-17T14:23:54Z", "message": "71343: Authorization for Downloads of restricted Bitstreams #2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4b56750fd95146dae01f322ac8ae174b5a106d4", "author": {"user": {"login": "peter-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/b4b56750fd95146dae01f322ac8ae174b5a106d4", "committedDate": "2020-06-19T08:25:17Z", "message": "71410: Authorization for Downloads of restricted Bitstreams\n\n- Internal feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c91e5acf05be11a60b8fa62d99b49099afbaf91", "author": {"user": {"login": "KevinVdV", "name": "Kevin Van de Velde"}}, "url": "https://github.com/DSpace/DSpace/commit/6c91e5acf05be11a60b8fa62d99b49099afbaf91", "committedDate": "2020-06-19T10:03:42Z", "message": "Authorization for file downloads: Small comment changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1Nzk4MTE5", "url": "https://github.com/DSpace/DSpace/pull/2783#pullrequestreview-435798119", "createdAt": "2020-06-23T13:45:47Z", "commit": {"oid": "6c91e5acf05be11a60b8fa62d99b49099afbaf91"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzo0NTo0OFrOGnp_-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDowNDoxNVrOGnq2ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIzNTc3MQ==", "bodyText": "can we name the method shortLivedToken ?", "url": "https://github.com/DSpace/DSpace/pull/2783#discussion_r444235771", "createdAt": "2020-06-23T13:45:48Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/AuthenticationRestController.java", "diffHunk": "@@ -118,6 +122,30 @@ public ResponseEntity login(HttpServletRequest request, @RequestParam(name = \"us\n                                     \"valid.\");\n     }\n \n+    /**\n+     * This method will generate a short lived token to be used for bitstream downloads among other things.\n+     *\n+     * curl -v -X POST https://{dspace-server.url}/api/authn/shortlivedtokens -H \"Authorization: Bearer eyJhbG...COdbo\"\n+     *\n+     * Example:\n+     * <pre>\n+     * {@code\n+     * curl -v -X POST https://{dspace-server.url}/api/authn/shortlivedtokens -H \"Authorization: Bearer eyJhbG...COdbo\"\n+     * }\n+     * </pre>\n+     * @param request The StandardMultipartHttpServletRequest\n+     * @return        The created short lived token\n+     */\n+    @PreAuthorize(\"hasAuthority('AUTHENTICATED')\")\n+    @RequestMapping(value = \"/shortlivedtokens\", method = RequestMethod.POST)\n+    public AuthenticationTokenResource shortLivedLogin(HttpServletRequest request) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c91e5acf05be11a60b8fa62d99b49099afbaf91"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIzOTUxNg==", "bodyText": "can we create an AUTHENTICATION constant in the RestModel to reuse here as it is now shared with the AuthnRest?", "url": "https://github.com/DSpace/DSpace/pull/2783#discussion_r444239516", "createdAt": "2020-06-23T13:50:44Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/model/AuthenticationTokenRest.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.model;\n+\n+import org.dspace.app.rest.RestResourceController;\n+\n+/**\n+ * The authentication token REST HAL Resource. The HAL Resource wraps the REST Resource\n+ * adding support for the links and embedded resources\n+ */\n+public class AuthenticationTokenRest extends RestAddressableModel {\n+    public static final String NAME = \"shortlivedtoken\";\n+    public static final String CATEGORY = \"authn\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c91e5acf05be11a60b8fa62d99b49099afbaf91"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0MzczOQ==", "bodyText": "I would prefer to avoid the term session, what about LoginJWTTokenHandler ?", "url": "https://github.com/DSpace/DSpace/pull/2783#discussion_r444243739", "createdAt": "2020-06-23T13:56:09Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/security/jwt/JWTTokenRestAuthenticationServiceImpl.java", "diffHunk": "@@ -47,9 +48,13 @@\n     private static final String AUTHORIZATION_COOKIE = \"Authorization-cookie\";\n     private static final String AUTHORIZATION_HEADER = \"Authorization\";\n     private static final String AUTHORIZATION_TYPE = \"Bearer\";\n+    private static final String AUTHORIZATION_TOKEN_PARAMETER = \"token\";\n \n     @Autowired\n-    private JWTTokenHandler jwtTokenHandler;\n+    private SessionJWTTokenHandler sessionJWTTokenHandler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c91e5acf05be11a60b8fa62d99b49099afbaf91"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0NDI5OQ==", "bodyText": "as above, I would prefer to avoid the term session as it can be confusing for developers", "url": "https://github.com/DSpace/DSpace/pull/2783#discussion_r444244299", "createdAt": "2020-06-23T13:56:50Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/security/jwt/JWTTokenRestAuthenticationServiceImpl.java", "diffHunk": "@@ -166,7 +201,7 @@ private void addTokenToResponse(final HttpServletResponse response, final String\n         response.setHeader(AUTHORIZATION_HEADER, String.format(\"%s %s\", AUTHORIZATION_TYPE, token));\n     }\n \n-    private String getToken(HttpServletRequest request) {\n+    private String getSessionToken(HttpServletRequest request) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c91e5acf05be11a60b8fa62d99b49099afbaf91"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0NjM2Mg==", "bodyText": "can we verify that the login token still use it owns settings? i.e. it will be not expired after 1ms", "url": "https://github.com/DSpace/DSpace/pull/2783#discussion_r444246362", "createdAt": "2020-06-23T13:59:35Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/AuthenticationRestControllerIT.java", "diffHunk": "@@ -757,4 +775,105 @@ public void testPasswordAuthenticationDoesNotWorkWithShibOnly() throws Exception\n             .andExpect(status().isUnauthorized());\n \n     }\n+\n+    @Test\n+    public void testShortLivedToken() throws Exception {\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/authn/shortlivedtokens\"))\n+            .andExpect(jsonPath(\"$.token\", notNullValue()))\n+            .andExpect(jsonPath(\"$.type\", is(\"shortlivedtoken\")))\n+            .andExpect(jsonPath(\"$._links.self.href\", Matchers.containsString(\"/api/authn/shortlivedtokens\")));\n+    }\n+\n+    @Test\n+    public void testShortLivedTokenNotAuthenticated() throws Exception {\n+        getClient().perform(post(\"/api/authn/shortlivedtokens\"))\n+            .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void testShortLivedTokenToDowloadBitstream() throws Exception {\n+        Bitstream bitstream = createPrivateBitstream();\n+        String shortLivedToken = getShortLivedToken(eperson);\n+\n+        getClient().perform(get(\"/api/core/bitstreams/\" + bitstream.getID() + \"/content?token=\" + shortLivedToken))\n+            .andExpect(status().isOk());\n+    }\n+\n+    @Test\n+    public void testSessionTokenToDowloadBitstream() throws Exception {\n+        Bitstream bitstream = createPrivateBitstream();\n+\n+        String sessionToken = getAuthToken(eperson.getEmail(), password);\n+        getClient().perform(get(\"/api/core/bitstreams/\" + bitstream.getID() + \"/content?token=\" + sessionToken))\n+            .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void testExpiredShortLivedTokenToDowloadBitstream() throws Exception {\n+        Bitstream bitstream = createPrivateBitstream();\n+        configurationService.setProperty(\"jwt.shortLived.token.expiration\", \"1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c91e5acf05be11a60b8fa62d99b49099afbaf91"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0OTc4Ng==", "bodyText": "can you add a test to verify that a valid short lived token provided for the user A that is not allowed to download the bitstream will be not sufficient for the download? i.e. I like to have a test to proof that is not sufficient to have a generic valid short lived token to download a restricted content", "url": "https://github.com/DSpace/DSpace/pull/2783#discussion_r444249786", "createdAt": "2020-06-23T14:04:15Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/AuthenticationRestControllerIT.java", "diffHunk": "@@ -757,4 +775,105 @@ public void testPasswordAuthenticationDoesNotWorkWithShibOnly() throws Exception\n             .andExpect(status().isUnauthorized());\n \n     }\n+\n+    @Test\n+    public void testShortLivedToken() throws Exception {\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/authn/shortlivedtokens\"))\n+            .andExpect(jsonPath(\"$.token\", notNullValue()))\n+            .andExpect(jsonPath(\"$.type\", is(\"shortlivedtoken\")))\n+            .andExpect(jsonPath(\"$._links.self.href\", Matchers.containsString(\"/api/authn/shortlivedtokens\")));\n+    }\n+\n+    @Test\n+    public void testShortLivedTokenNotAuthenticated() throws Exception {\n+        getClient().perform(post(\"/api/authn/shortlivedtokens\"))\n+            .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void testShortLivedTokenToDowloadBitstream() throws Exception {\n+        Bitstream bitstream = createPrivateBitstream();\n+        String shortLivedToken = getShortLivedToken(eperson);\n+\n+        getClient().perform(get(\"/api/core/bitstreams/\" + bitstream.getID() + \"/content?token=\" + shortLivedToken))\n+            .andExpect(status().isOk());\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c91e5acf05be11a60b8fa62d99b49099afbaf91"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a88ef51b37338cd2f7ca28f3db54ee35cc54517", "author": {"user": {"login": "peter-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/6a88ef51b37338cd2f7ca28f3db54ee35cc54517", "committedDate": "2020-06-23T16:08:39Z", "message": "71410: Authorization for Downloads of restricted Bitstreams\n\n- Don't update ePerson session salt when requesting a short lived token"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f77864cea295b834fed3b244b965440679d5f1d", "author": {"user": {"login": "peter-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/9f77864cea295b834fed3b244b965440679d5f1d", "committedDate": "2020-06-25T07:15:30Z", "message": "71410: Authorization for Downloads of restricted Bitstreams\n\n- Add test that the ePerson session salt isn't updated when requesting a short lived token"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46e760791ab66cdffa2c9cf57fed7bd25149652c", "author": {"user": {"login": "peter-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/46e760791ab66cdffa2c9cf57fed7bd25149652c", "committedDate": "2020-06-25T08:16:57Z", "message": "Merge remote-tracking branch 'community/master' into w2p-71342_Authorization-for-Downloads-of-restricted-Bitstreams-1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27e733c1e8c557284bb756f32bc09c6a937bc4ee", "author": {"user": {"login": "peter-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/27e733c1e8c557284bb756f32bc09c6a937bc4ee", "committedDate": "2020-06-26T12:20:06Z", "message": "71410: Authorization for Downloads of restricted Bitstreams\n\n- Add test that the ePerson session salt isn't updated when requesting a short lived token"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5MjM1MDYy", "url": "https://github.com/DSpace/DSpace/pull/2783#pullrequestreview-439235062", "createdAt": "2020-06-29T15:03:02Z", "commit": {"oid": "27e733c1e8c557284bb756f32bc09c6a937bc4ee"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NTMwMzI1", "url": "https://github.com/DSpace/DSpace/pull/2783#pullrequestreview-439530325", "createdAt": "2020-06-29T22:00:20Z", "commit": {"oid": "27e733c1e8c557284bb756f32bc09c6a937bc4ee"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMjowMDoyMFrOGqjudg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMjowMDo0MVrOGqju_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI3ODcxMA==", "bodyText": "this feedback seems to be not yet processed, can you double check please?", "url": "https://github.com/DSpace/DSpace/pull/2783#discussion_r447278710", "createdAt": "2020-06-29T22:00:20Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/AuthenticationRestControllerIT.java", "diffHunk": "@@ -757,4 +775,105 @@ public void testPasswordAuthenticationDoesNotWorkWithShibOnly() throws Exception\n             .andExpect(status().isUnauthorized());\n \n     }\n+\n+    @Test\n+    public void testShortLivedToken() throws Exception {\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/authn/shortlivedtokens\"))\n+            .andExpect(jsonPath(\"$.token\", notNullValue()))\n+            .andExpect(jsonPath(\"$.type\", is(\"shortlivedtoken\")))\n+            .andExpect(jsonPath(\"$._links.self.href\", Matchers.containsString(\"/api/authn/shortlivedtokens\")));\n+    }\n+\n+    @Test\n+    public void testShortLivedTokenNotAuthenticated() throws Exception {\n+        getClient().perform(post(\"/api/authn/shortlivedtokens\"))\n+            .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void testShortLivedTokenToDowloadBitstream() throws Exception {\n+        Bitstream bitstream = createPrivateBitstream();\n+        String shortLivedToken = getShortLivedToken(eperson);\n+\n+        getClient().perform(get(\"/api/core/bitstreams/\" + bitstream.getID() + \"/content?token=\" + shortLivedToken))\n+            .andExpect(status().isOk());\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0OTc4Ng=="}, "originalCommit": {"oid": "6c91e5acf05be11a60b8fa62d99b49099afbaf91"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI3ODg0NA==", "bodyText": "this feedback seems to be not yet processed, can you double check please?", "url": "https://github.com/DSpace/DSpace/pull/2783#discussion_r447278844", "createdAt": "2020-06-29T22:00:41Z", "author": {"login": "abollini"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/AuthenticationRestControllerIT.java", "diffHunk": "@@ -757,4 +775,105 @@ public void testPasswordAuthenticationDoesNotWorkWithShibOnly() throws Exception\n             .andExpect(status().isUnauthorized());\n \n     }\n+\n+    @Test\n+    public void testShortLivedToken() throws Exception {\n+        String token = getAuthToken(eperson.getEmail(), password);\n+        getClient(token).perform(post(\"/api/authn/shortlivedtokens\"))\n+            .andExpect(jsonPath(\"$.token\", notNullValue()))\n+            .andExpect(jsonPath(\"$.type\", is(\"shortlivedtoken\")))\n+            .andExpect(jsonPath(\"$._links.self.href\", Matchers.containsString(\"/api/authn/shortlivedtokens\")));\n+    }\n+\n+    @Test\n+    public void testShortLivedTokenNotAuthenticated() throws Exception {\n+        getClient().perform(post(\"/api/authn/shortlivedtokens\"))\n+            .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void testShortLivedTokenToDowloadBitstream() throws Exception {\n+        Bitstream bitstream = createPrivateBitstream();\n+        String shortLivedToken = getShortLivedToken(eperson);\n+\n+        getClient().perform(get(\"/api/core/bitstreams/\" + bitstream.getID() + \"/content?token=\" + shortLivedToken))\n+            .andExpect(status().isOk());\n+    }\n+\n+    @Test\n+    public void testSessionTokenToDowloadBitstream() throws Exception {\n+        Bitstream bitstream = createPrivateBitstream();\n+\n+        String sessionToken = getAuthToken(eperson.getEmail(), password);\n+        getClient().perform(get(\"/api/core/bitstreams/\" + bitstream.getID() + \"/content?token=\" + sessionToken))\n+            .andExpect(status().isForbidden());\n+    }\n+\n+    @Test\n+    public void testExpiredShortLivedTokenToDowloadBitstream() throws Exception {\n+        Bitstream bitstream = createPrivateBitstream();\n+        configurationService.setProperty(\"jwt.shortLived.token.expiration\", \"1\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0NjM2Mg=="}, "originalCommit": {"oid": "6c91e5acf05be11a60b8fa62d99b49099afbaf91"}, "originalPosition": 87}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d364ac63837985f1b2162ac5e7e7cb6662cf3efd", "author": {"user": {"login": "peter-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/d364ac63837985f1b2162ac5e7e7cb6662cf3efd", "committedDate": "2020-06-30T16:20:06Z", "message": "71654: Authorization for Downloads of restricted Bitstreams\n\n- Short lived tokens can't be used to login, or generate other tokens"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9257dad12c97d1aa3daaf9beca35bed76ba98b0", "author": {"user": {"login": "peter-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/f9257dad12c97d1aa3daaf9beca35bed76ba98b0", "committedDate": "2020-07-01T08:35:41Z", "message": "Merge branch 'w2p-71342_Authorization-for-Downloads-of-restricted-Bitstreams-1' into w2p-71672_Rename-token-parameter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be89cc815975530e06489af79b0a4b6962f7bfd9", "author": {"user": {"login": "peter-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/be89cc815975530e06489af79b0a4b6962f7bfd9", "committedDate": "2020-07-01T08:59:18Z", "message": "71672: Authorization for Downloads of restricted Bitstreams\n\n- Rename url parameter \"token\" to \"authentication-token\""}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9044daf50eb1b4044b6b4d80ce12b32e0a399712", "author": {"user": {"login": "peter-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/9044daf50eb1b4044b6b4d80ce12b32e0a399712", "committedDate": "2020-07-01T09:50:57Z", "message": "71672: Authorization for Downloads of restricted Bitstreams\n\n- Fix checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMDA3MTQ0", "url": "https://github.com/DSpace/DSpace/pull/2783#pullrequestreview-441007144", "createdAt": "2020-07-01T16:05:02Z", "commit": {"oid": "9044daf50eb1b4044b6b4d80ce12b32e0a399712"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMTgwNjk4", "url": "https://github.com/DSpace/DSpace/pull/2783#pullrequestreview-441180698", "createdAt": "2020-07-01T20:38:04Z", "commit": {"oid": "9044daf50eb1b4044b6b4d80ce12b32e0a399712"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1497, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}