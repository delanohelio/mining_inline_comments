{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MDM4NDI2", "number": 2675, "title": "DS-4043 Revisit security layer of submission", "bodyText": "This PR is build on top of\n#2665\nso it should be processed after than the previous one is merged. Early reviews are welcome.", "createdAt": "2020-02-17T09:47:38Z", "url": "https://github.com/DSpace/DSpace/pull/2675", "merged": true, "mergeCommit": {"oid": "6b418d6abc7e8fc72fdbd2dc613a8010ff1efe22"}, "closed": true, "closedAt": "2020-03-17T14:08:55Z", "author": {"login": "Micheleboychuk"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcFJEeMAH2gAyMzc2MDM4NDI2OjVhNWFlNmQ0MDE1N2I2ODZmMzc2MWMyOTc2NjExNDZlMTM1NDY3OTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOgdpbAFqTM3NTkyMzU1Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5a5ae6d40157b686f3761c297661146e13546795", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/5a5ae6d40157b686f3761c297661146e13546795", "committedDate": "2020-02-17T08:29:44Z", "message": "added unit tests for the security layer of the submission"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00c9bcea90bae7024625bc555aacc059c7e50965", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/00c9bcea90bae7024625bc555aacc059c7e50965", "committedDate": "2020-02-17T08:39:41Z", "message": "implemented permissionEvaluatorPlugin for workspaceitem"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67b564af7ef1ddef993bc7d51f1aa120ef26921e", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/67b564af7ef1ddef993bc7d51f1aa120ef26921e", "committedDate": "2020-02-17T08:43:50Z", "message": "fixed exception for upload method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ce509133d5389791e6e134d31ceea48d24880fc", "author": {"user": {"login": "abollini", "name": "Andrea Bollini"}}, "url": "https://github.com/DSpace/DSpace/commit/4ce509133d5389791e6e134d31ceea48d24880fc", "committedDate": "2020-02-19T21:18:30Z", "message": "Merge remote-tracking branch 'origin/master' into revisitSecurityLayerOfSubmission-DS-4043"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edf5e5723318a8292faa92eb054df73347712014", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/edf5e5723318a8292faa92eb054df73347712014", "committedDate": "2020-02-20T17:51:52Z", "message": "Fix double check in IT the findBySubmitter must be used"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a19f24bebaea389ccb21f766bc5787005f3bff70", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/a19f24bebaea389ccb21f766bc5787005f3bff70", "committedDate": "2020-03-02T15:43:10Z", "message": "Merge branch 'resourcepolicy-DS-4418' of https://github.com/Micheleboychuk/DSpace into revisitSecurityLayerOfSubmission-DS-4043\n\n# Conflicts:\n#\tdspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e42382b4ab987e87a44a812ddd5d4717944dd6fe", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/e42382b4ab987e87a44a812ddd5d4717944dd6fe", "committedDate": "2020-03-02T16:00:51Z", "message": "Merge branch 'revisitSecurityLayerOfSubmission-DS-4043' of https://github.com/Micheleboychuk/DSpace into revisitSecurityLayerOfSubmission-DS-4043\n\n# Conflicts:\n#\tdspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fdb728672f346ba48bb5b3293c7eca60d40e3b6", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/1fdb728672f346ba48bb5b3293c7eca60d40e3b6", "committedDate": "2020-03-05T09:52:23Z", "message": "Merge branch 'master' of https://github.com/DSpace/DSpace into revisitSecurityLayerOfSubmission-DS-4043"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b838ce4a6e00db203b8d8a67ba294916d5fe25dd", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/b838ce4a6e00db203b8d8a67ba294916d5fe25dd", "committedDate": "2020-03-05T10:18:58Z", "message": "DS-4043 Revisit security layer of submission"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e42382b4ab987e87a44a812ddd5d4717944dd6fe", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/e42382b4ab987e87a44a812ddd5d4717944dd6fe", "committedDate": "2020-03-02T16:00:51Z", "message": "Merge branch 'revisitSecurityLayerOfSubmission-DS-4043' of https://github.com/Micheleboychuk/DSpace into revisitSecurityLayerOfSubmission-DS-4043\n\n# Conflicts:\n#\tdspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java"}, "afterCommit": {"oid": "b838ce4a6e00db203b8d8a67ba294916d5fe25dd", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/b838ce4a6e00db203b8d8a67ba294916d5fe25dd", "committedDate": "2020-03-05T10:18:58Z", "message": "DS-4043 Revisit security layer of submission"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNTg3ODc1", "url": "https://github.com/DSpace/DSpace/pull/2675#pullrequestreview-370587875", "createdAt": "2020-03-06T19:54:44Z", "commit": {"oid": "b838ce4a6e00db203b8d8a67ba294916d5fe25dd"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxOTo1NDo0NFrOFzFl-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDowNjozNFrOFzF6dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTExMzMzOQ==", "bodyText": "Tiny thing, this could just be throw new RuntimeException(e);  Since you are not providing a more descriptive error message, there's no reason for the e.getMessage() here.", "url": "https://github.com/DSpace/DSpace/pull/2675#discussion_r389113339", "createdAt": "2020-03-06T19:54:44Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/RestResourceController.java", "diffHunk": "@@ -584,9 +585,10 @@ public ResourceSupport findRel(HttpServletRequest request, HttpServletResponse r\n         RestAddressableModel modelObject = null;\n         try {\n             modelObject = repository.upload(request, apiCategory, model, id, uploadfile);\n-        } catch (Exception e) {\n-            log.error(e.getMessage(), e);\n-            return ControllerUtils.toEmptyResponse(HttpStatus.INTERNAL_SERVER_ERROR);\n+        } catch (SQLException | IOException e) {\n+            throw new RuntimeException(e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b838ce4a6e00db203b8d8a67ba294916d5fe25dd"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTExNDY0NA==", "bodyText": "I'd like more information in this comment, as it's a bit vague to me.  Are we giving permission in order to specifically throw a 404 Not Found status code? Or are there other status codes possible here?  If it's just a 404 (which I expect it is), it'd be good to note that in this comment.", "url": "https://github.com/DSpace/DSpace/pull/2675#discussion_r389114644", "createdAt": "2020-03-06T19:57:47Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/security/WorkspaceItemRestPermissionEvaluatorPlugin.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.security;\n+\n+import java.io.Serializable;\n+\n+import java.sql.SQLException;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.dspace.app.rest.model.WorkspaceItemRest;\n+import org.dspace.app.rest.utils.ContextUtil;\n+import org.dspace.content.WorkspaceItem;\n+import org.dspace.content.service.WorkspaceItemService;\n+import org.dspace.core.Context;\n+import org.dspace.eperson.EPerson;\n+import org.dspace.eperson.service.EPersonService;\n+import org.dspace.services.RequestService;\n+import org.dspace.services.model.Request;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * {@link RestPermissionEvaluatorPlugin} class that evaluate READ, WRITE and DELETE permissions over a WorkspaceItem\n+ * \n+ * @author Mykhaylo Boychuk (mykhaylo.boychuk at 4science.it)\n+ */\n+@Component\n+public class WorkspaceItemRestPermissionEvaluatorPlugin extends RestObjectPermissionEvaluatorPlugin {\n+\n+    private static final Logger log = LoggerFactory.getLogger(WorkspaceItemRestPermissionEvaluatorPlugin.class);\n+\n+    @Autowired\n+    private RequestService requestService;\n+\n+    @Autowired\n+    private EPersonService ePersonService;\n+\n+    @Autowired\n+    WorkspaceItemService wis;\n+\n+    @Override\n+    public boolean hasDSpacePermission(Authentication authentication, Serializable targetId, String targetType,\n+            DSpaceRestPermission permission) {\n+\n+        DSpaceRestPermission restPermission = DSpaceRestPermission.convert(permission);\n+        if (!DSpaceRestPermission.READ.equals(restPermission)\n+                && !DSpaceRestPermission.WRITE.equals(restPermission)\n+                && !DSpaceRestPermission.DELETE.equals(restPermission)) {\n+            return false;\n+        }\n+        if (!StringUtils.equalsIgnoreCase(targetType, WorkspaceItemRest.NAME)) {\n+            return false;\n+        }\n+\n+        Request request = requestService.getCurrentRequest();\n+        Context context = ContextUtil.obtainContext(request.getServletRequest());\n+\n+        EPerson ePerson = null;\n+        WorkspaceItem witem = null;\n+        try {\n+            ePerson = ePersonService.findByEmail(context, (String) authentication.getPrincipal());\n+            Integer dsoId = Integer.parseInt(targetId.toString());\n+\n+            // anonymous user\n+            if (ePerson == null) {\n+                return false;\n+            }\n+\n+            witem = wis.find(context, dsoId);\n+\n+             // If the dso is null then we give permission so we can throw another status\n+            // code instead", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b838ce4a6e00db203b8d8a67ba294916d5fe25dd"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTExNjU0Mw==", "bodyText": "I think this should be a delete() request, not a get(), as you are testing deletion in this method.\nAlso, we should also be verifying that a Submitter (in this case submitter1) can delete their own WorkspaceItems.", "url": "https://github.com/DSpace/DSpace/pull/2675#discussion_r389116543", "createdAt": "2020-03-06T20:01:58Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java", "diffHunk": "@@ -347,25 +491,110 @@ public void deleteOneTest() throws Exception {\n                     .withMimeType(\"text/plain\").build();\n         }\n \n-        String token = getAuthToken(admin.getEmail(), password);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n \n         //Delete the workspaceitem\n         getClient(token).perform(delete(\"/api/submission/workspaceitems/\" + witem.getID()))\n                     .andExpect(status().is(204));\n \n         //Trying to get deleted item should fail with 404\n-        getClient().perform(get(\"/api/submission/workspaceitems/\" + witem.getID()))\n+        getClient(token).perform(get(\"/api/submission/workspaceitems/\" + witem.getID()))\n                    .andExpect(status().is(404));\n \n         //Trying to get deleted workspaceitem's item should fail with 404\n-        getClient().perform(get(\"/api/core/items/\" + item.getID()))\n+        getClient(token).perform(get(\"/api/core/items/\" + item.getID()))\n                    .andExpect(status().is(404));\n \n         //Trying to get deleted workspaceitem's bitstream should fail with 404\n-        getClient().perform(get(\"/api/core/biststreams/\" + bitstream.getID()))\n+        getClient(token).perform(get(\"/api/core/biststreams/\" + bitstream.getID()))\n                    .andExpect(status().is(404));\n     }\n \n+    @Test\n+    public void deleteOneUnAuthenticatedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, parentCommunity)\n+                .withName(\"Collection 1\")\n+                .build();\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                .withTitle(\"Workspace Item 1\")\n+                .withIssueDate(\"2019-01-01\")\n+                .build();\n+\n+        Item item = witem.getItem();\n+\n+        //Add a bitstream to the item\n+        String bitstreamContent = \"ThisIsSomeDummyText\";\n+        Bitstream bitstream = null;\n+        try (InputStream is = IOUtils.toInputStream(bitstreamContent, CharEncoding.UTF_8)) {\n+            bitstream = BitstreamBuilder\n+                    .createBitstream(context, item, is)\n+                    .withName(\"Bitstream1\")\n+                    .withMimeType(\"text/plain\").build();\n+        }\n+\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/submission/workspaceitems/\" + witem.getID()))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteOneForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson submitter1 = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"submitter1@example.com\")\n+                .withPassword(\"qwerty01\")\n+                .build();\n+        EPerson submitter2 = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"submitter2@example.com\")\n+                .withPassword(\"qwerty02\")\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, parentCommunity)\n+                .withName(\"Collection 1\")\n+                .withSubmitterGroup(submitter1)\n+                .build();\n+\n+        context.setCurrentUser(submitter1);\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                .withTitle(\"Workspace Item 1\")\n+                .withIssueDate(\"2020-01-01\")\n+                .build();\n+\n+        Item item = witem.getItem();\n+\n+        //Add a bitstream to the item\n+        String bitstreamContent = \"ThisIsSomeDummyText\";\n+        Bitstream bitstream = null;\n+        try (InputStream is = IOUtils.toInputStream(bitstreamContent, CharEncoding.UTF_8)) {\n+            bitstream = BitstreamBuilder\n+                    .createBitstream(context, item, is)\n+                    .withName(\"Bitstream1\")\n+                    .withMimeType(\"text/plain\").build();\n+        }\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenSubmitter2 = getAuthToken(submitter2.getEmail(), \"qwerty02\");\n+        getClient(tokenSubmitter2).perform(delete(\"/api/submission/workspaceitems/\" + witem.getID()))\n+                                  .andExpect(status().isForbidden());\n+\n+        String authToken = getAuthToken(admin.getEmail(), password);\n+        getClient(authToken).perform(get(\"/api/submission/workspaceitems/\" + witem.getID()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b838ce4a6e00db203b8d8a67ba294916d5fe25dd"}, "originalPosition": 331}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTExODU4MQ==", "bodyText": "Tiny improvement to suggest. Can we actually have submitter2 be the Submitter of a second WorkspaceItem in this test?  That would better verify that the submitter of one WorkspaceItem doesn't have rights to remove another submitter's WorkspaceItem.  Currently, this test seems to just be testing something slightly different -- that someone with authentication rights cannot delete another person's WorkspaceItem.", "url": "https://github.com/DSpace/DSpace/pull/2675#discussion_r389118581", "createdAt": "2020-03-06T20:06:34Z", "author": {"login": "tdonohue"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java", "diffHunk": "@@ -347,25 +491,110 @@ public void deleteOneTest() throws Exception {\n                     .withMimeType(\"text/plain\").build();\n         }\n \n-        String token = getAuthToken(admin.getEmail(), password);\n+        context.restoreAuthSystemState();\n+\n+        String token = getAuthToken(eperson.getEmail(), password);\n \n         //Delete the workspaceitem\n         getClient(token).perform(delete(\"/api/submission/workspaceitems/\" + witem.getID()))\n                     .andExpect(status().is(204));\n \n         //Trying to get deleted item should fail with 404\n-        getClient().perform(get(\"/api/submission/workspaceitems/\" + witem.getID()))\n+        getClient(token).perform(get(\"/api/submission/workspaceitems/\" + witem.getID()))\n                    .andExpect(status().is(404));\n \n         //Trying to get deleted workspaceitem's item should fail with 404\n-        getClient().perform(get(\"/api/core/items/\" + item.getID()))\n+        getClient(token).perform(get(\"/api/core/items/\" + item.getID()))\n                    .andExpect(status().is(404));\n \n         //Trying to get deleted workspaceitem's bitstream should fail with 404\n-        getClient().perform(get(\"/api/core/biststreams/\" + bitstream.getID()))\n+        getClient(token).perform(get(\"/api/core/biststreams/\" + bitstream.getID()))\n                    .andExpect(status().is(404));\n     }\n \n+    @Test\n+    public void deleteOneUnAuthenticatedTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, parentCommunity)\n+                .withName(\"Collection 1\")\n+                .build();\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                .withTitle(\"Workspace Item 1\")\n+                .withIssueDate(\"2019-01-01\")\n+                .build();\n+\n+        Item item = witem.getItem();\n+\n+        //Add a bitstream to the item\n+        String bitstreamContent = \"ThisIsSomeDummyText\";\n+        Bitstream bitstream = null;\n+        try (InputStream is = IOUtils.toInputStream(bitstreamContent, CharEncoding.UTF_8)) {\n+            bitstream = BitstreamBuilder\n+                    .createBitstream(context, item, is)\n+                    .withName(\"Bitstream1\")\n+                    .withMimeType(\"text/plain\").build();\n+        }\n+\n+        context.restoreAuthSystemState();\n+\n+        getClient().perform(delete(\"/api/submission/workspaceitems/\" + witem.getID()))\n+                   .andExpect(status().isUnauthorized());\n+    }\n+\n+    @Test\n+    public void deleteOneForbiddenTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+\n+        EPerson submitter1 = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"submitter1@example.com\")\n+                .withPassword(\"qwerty01\")\n+                .build();\n+        EPerson submitter2 = EPersonBuilder.createEPerson(context)\n+                .withEmail(\"submitter2@example.com\")\n+                .withPassword(\"qwerty02\")\n+                .build();\n+\n+        parentCommunity = CommunityBuilder.createCommunity(context)\n+                .withName(\"Parent Community\")\n+                .build();\n+        Collection col1 = CollectionBuilder.createCollection(context, parentCommunity)\n+                .withName(\"Collection 1\")\n+                .withSubmitterGroup(submitter1)\n+                .build();\n+\n+        context.setCurrentUser(submitter1);\n+        WorkspaceItem witem = WorkspaceItemBuilder.createWorkspaceItem(context, col1)\n+                .withTitle(\"Workspace Item 1\")\n+                .withIssueDate(\"2020-01-01\")\n+                .build();\n+\n+        Item item = witem.getItem();\n+\n+        //Add a bitstream to the item\n+        String bitstreamContent = \"ThisIsSomeDummyText\";\n+        Bitstream bitstream = null;\n+        try (InputStream is = IOUtils.toInputStream(bitstreamContent, CharEncoding.UTF_8)) {\n+            bitstream = BitstreamBuilder\n+                    .createBitstream(context, item, is)\n+                    .withName(\"Bitstream1\")\n+                    .withMimeType(\"text/plain\").build();\n+        }\n+\n+        context.restoreAuthSystemState();\n+\n+        String tokenSubmitter2 = getAuthToken(submitter2.getEmail(), \"qwerty02\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b838ce4a6e00db203b8d8a67ba294916d5fe25dd"}, "originalPosition": 326}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyNjI1NDU0", "url": "https://github.com/DSpace/DSpace/pull/2675#pullrequestreview-372625454", "createdAt": "2020-03-11T10:14:42Z", "commit": {"oid": "b838ce4a6e00db203b8d8a67ba294916d5fe25dd"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMDoxNDo0MlrOF0wpkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMDoyMTo1NlrOF0w5Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2NzM0Nw==", "bodyText": "Why is this not based on context.getCurrentUser()?", "url": "https://github.com/DSpace/DSpace/pull/2675#discussion_r390867347", "createdAt": "2020-03-11T10:14:42Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/main/java/org/dspace/app/rest/security/WorkspaceItemRestPermissionEvaluatorPlugin.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.app.rest.security;\n+\n+import java.io.Serializable;\n+\n+import java.sql.SQLException;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.dspace.app.rest.model.WorkspaceItemRest;\n+import org.dspace.app.rest.utils.ContextUtil;\n+import org.dspace.content.WorkspaceItem;\n+import org.dspace.content.service.WorkspaceItemService;\n+import org.dspace.core.Context;\n+import org.dspace.eperson.EPerson;\n+import org.dspace.eperson.service.EPersonService;\n+import org.dspace.services.RequestService;\n+import org.dspace.services.model.Request;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * {@link RestPermissionEvaluatorPlugin} class that evaluate READ, WRITE and DELETE permissions over a WorkspaceItem\n+ * \n+ * @author Mykhaylo Boychuk (mykhaylo.boychuk at 4science.it)\n+ */\n+@Component\n+public class WorkspaceItemRestPermissionEvaluatorPlugin extends RestObjectPermissionEvaluatorPlugin {\n+\n+    private static final Logger log = LoggerFactory.getLogger(WorkspaceItemRestPermissionEvaluatorPlugin.class);\n+\n+    @Autowired\n+    private RequestService requestService;\n+\n+    @Autowired\n+    private EPersonService ePersonService;\n+\n+    @Autowired\n+    WorkspaceItemService wis;\n+\n+    @Override\n+    public boolean hasDSpacePermission(Authentication authentication, Serializable targetId, String targetType,\n+            DSpaceRestPermission permission) {\n+\n+        DSpaceRestPermission restPermission = DSpaceRestPermission.convert(permission);\n+        if (!DSpaceRestPermission.READ.equals(restPermission)\n+                && !DSpaceRestPermission.WRITE.equals(restPermission)\n+                && !DSpaceRestPermission.DELETE.equals(restPermission)) {\n+            return false;\n+        }\n+        if (!StringUtils.equalsIgnoreCase(targetType, WorkspaceItemRest.NAME)) {\n+            return false;\n+        }\n+\n+        Request request = requestService.getCurrentRequest();\n+        Context context = ContextUtil.obtainContext(request.getServletRequest());\n+\n+        EPerson ePerson = null;\n+        WorkspaceItem witem = null;\n+        try {\n+            ePerson = ePersonService.findByEmail(context, (String) authentication.getPrincipal());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b838ce4a6e00db203b8d8a67ba294916d5fe25dd"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg3MTM0Nw==", "bodyText": "Are you still verifying the findBySubmitter method also works for admins to search for an other submitter (since that test seems to be removed here)", "url": "https://github.com/DSpace/DSpace/pull/2675#discussion_r390871347", "createdAt": "2020-03-11T10:21:56Z", "author": {"login": "benbosman"}, "path": "dspace-server-webapp/src/test/java/org/dspace/app/rest/WorkspaceItemRestRepositoryIT.java", "diffHunk": "@@ -417,11 +648,9 @@ public void findBySubmitterTest() throws Exception {\n                                       .withIssueDate(\"2016-02-13\")\n                                       .build();\n \n-        // use our admin to retrieve all the workspace by submitter\n-        String token = getAuthToken(admin.getEmail(), password);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b838ce4a6e00db203b8d8a67ba294916d5fe25dd"}, "originalPosition": 355}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37d5b13dd5573473e6af156c7cae1869d88bad23", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/37d5b13dd5573473e6af156c7cae1869d88bad23", "committedDate": "2020-03-11T13:46:28Z", "message": "Merge branch 'revisitSecurityLayerOfSubmission-DS-4043' of https://github.com/Micheleboychuk/DSpace into revisitSecurityLayerOfSubmission-DS-4043"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46e532218c6889484cbfef6845fc3041c85c5e2c", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/46e532218c6889484cbfef6845fc3041c85c5e2c", "committedDate": "2020-03-12T16:45:50Z", "message": "Merge branch 'master' into revisitSecurityLayerOfSubmission-DS-4043"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d98bcd9110365c5f91c646fe9a4d8de3eb3cb37", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/5d98bcd9110365c5f91c646fe9a4d8de3eb3cb37", "committedDate": "2020-03-12T21:21:17Z", "message": "Implement community feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "676558ad89eb05ffbc82bfb12579df61070f52b7", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/676558ad89eb05ffbc82bfb12579df61070f52b7", "committedDate": "2020-03-13T22:05:05Z", "message": "fixed output message of RuntimeException"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bdd0a3daeb7de6686eda2409ecded53a0baa789", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/8bdd0a3daeb7de6686eda2409ecded53a0baa789", "committedDate": "2020-03-13T23:45:35Z", "message": "Merge branch 'master' into revisitSecurityLayerOfSubmission-DS-4043"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a6246038b768a2cc213befde7f1db38205fc794", "author": {"user": {"login": "Micheleboychuk", "name": "Mykhaylo Boychuk"}}, "url": "https://github.com/DSpace/DSpace/commit/8a6246038b768a2cc213befde7f1db38205fc794", "committedDate": "2020-03-16T14:59:47Z", "message": "fix typo, use the normal user token"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MzgwMjA5", "url": "https://github.com/DSpace/DSpace/pull/2675#pullrequestreview-375380209", "createdAt": "2020-03-16T16:27:54Z", "commit": {"oid": "8a6246038b768a2cc213befde7f1db38205fc794"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1OTIzNTU3", "url": "https://github.com/DSpace/DSpace/pull/2675#pullrequestreview-375923557", "createdAt": "2020-03-17T10:50:22Z", "commit": {"oid": "8a6246038b768a2cc213befde7f1db38205fc794"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1610, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}