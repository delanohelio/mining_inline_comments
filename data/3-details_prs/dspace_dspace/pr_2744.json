{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxOTM1MDc5", "number": 2744, "title": "[DS-4443] delete solr record on workspaceitem deletion", "bodyText": "References\n\nLink to JIRA ticket(s)\n\nDescription\nThis PR contains a fix so that (workspace)items are properly deleted. We created a test for this, but this test is currently failing in the travis only (works in Intellij).\nThis is the first test in the dspace-api that makes use of the discovery, so we probably missed something. If somebody with more experience in the test framework can take a look at this, that would be great.\nChecklist\n\n My PR is small in size (e.g. less than 1,000 lines of code, not including comments & integration tests). Exceptions may be made if previously agreed upon.\n My PR passes Checkstyle validation based on the Code Style Guide\n My PR includes Javadoc for all new (or modified) public methods and classes. It also includes Javadoc for large or complex private methods.\n My PR passes all tests and includes new/updated Unit or Integration Tests for any bug fixes, improvements or new features. A few reminders about what constitutes good tests:\n\nInclude tests for different user types, including: (1) Anonymous user, (2) Logged in user (non-admin), and (3) Administrator.\nInclude tests for known error scenarios and error codes (e.g. 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found, etc)\nFor bug fixes, include a test that reproduces the bug and proves it is fixed. For clarity, it may be useful to provide the test in a separate commit from the bug fix.", "createdAt": "2020-04-10T14:39:32Z", "url": "https://github.com/DSpace/DSpace/pull/2744", "merged": true, "mergeCommit": {"oid": "0978aa6ca047d23a6ad4b8495ebcf19f2dd9c1c8"}, "closed": true, "closedAt": "2021-01-29T20:21:18Z", "author": {"login": "KevinVdV"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcT9PqzAH2gAyNDAxOTM1MDc5OmQ1ZDFlZGZmYjQ3Njc4NDM5OWM4NWM0ODFhN2U4NzRlMjg3N2FiNTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd0SnpzAFqTU3NzUxODc0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d5d1edffb476784399c85c481a7e874e2877ab58", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/d5d1edffb476784399c85c481a7e874e2877ab58", "committedDate": "2020-04-03T09:11:58Z", "message": "[DS-4443] fixed the solr record deletion after workspaceitem removal and added a test for it"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "935a2df27e0691825346f63b76d50f031b702b78", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/935a2df27e0691825346f63b76d50f031b702b78", "committedDate": "2020-04-06T07:09:59Z", "message": "[DS-4443] moved test to dspace-api. Succeeds in a single run, fails in full test run"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5638c631d7143e88a68a3703c9ad80553f3fd936", "author": {"user": {"login": "KevinVdV", "name": "Kevin Van de Velde"}}, "url": "https://github.com/DSpace/DSpace/commit/5638c631d7143e88a68a3703c9ad80553f3fd936", "committedDate": "2020-04-10T13:50:59Z", "message": "Undoing some changes that aren't needed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNDU1ODEw", "url": "https://github.com/DSpace/DSpace/pull/2744#pullrequestreview-392455810", "createdAt": "2020-04-13T21:33:31Z", "commit": {"oid": "5638c631d7143e88a68a3703c9ad80553f3fd936"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMTozMzozMlrOGE2JKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMTozNDoxNFrOGE2KsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzczNDU3MQ==", "bodyText": "@KevinVdV : here's the main line where Travis CI is throwing the error.  Unfortunately, all we know is this ends up being \"false\".  Could we change this assert to provide us more information?  It probably should instead say something like:\nassertEquals(1, indexableObjects.size());\nThat would at least let us know if IndexableObjects is zero initially (in which case Solr isn't starting up correctly) or maybe it's some number >1 (in which case either your query is too broad, or Solr isn't cleaning up data between tests & we have data leakage across tests again).", "url": "https://github.com/DSpace/DSpace/pull/2744#discussion_r407734571", "createdAt": "2020-04-13T21:33:32Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/test/java/org/dspace/discovery/DiscoveryTest.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.discovery;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.sql.SQLException;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.Logger;\n+import org.dspace.AbstractIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.WorkspaceItem;\n+import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.dspace.content.service.InstallItemService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.content.service.WorkspaceItemService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * This class will aim to test Discovery related use cases\n+ */\n+public class DiscoveryTest extends AbstractIntegrationTest {\n+\n+    private static final Logger log = org.apache.logging.log4j.LogManager.getLogger(DiscoveryTest.class);\n+\n+    protected CommunityService communityService = ContentServiceFactory.getInstance().getCommunityService();\n+    protected CollectionService collectionService = ContentServiceFactory.getInstance().getCollectionService();\n+    protected ItemService itemService = ContentServiceFactory.getInstance().getItemService();\n+    protected InstallItemService installItemService = ContentServiceFactory.getInstance().getInstallItemService();\n+    protected WorkspaceItemService workspaceItemService = ContentServiceFactory.getInstance().getWorkspaceItemService();\n+    protected IndexingService indexingService = DSpaceServicesFactory.getInstance().getServiceManager()\n+                                                                     .getServiceByName(IndexingService.class.getName(),\n+                                                                                       IndexingService.class);\n+    protected SearchService searchService = SearchUtils.getSearchService();\n+\n+\n+    WorkspaceItem leftIs;\n+    WorkspaceItem rightIs;\n+\n+    /**\n+     * This method will be run before every test as per @Before. It will\n+     * initialize resources required for the tests.\n+     *\n+     * Other methods can be annotated with @Before here or in subclasses\n+     * but no execution order is guaranteed\n+     */\n+    @Before\n+    @Override\n+    public void init() {\n+        super.init();\n+        try {\n+            context.turnOffAuthorisationSystem();\n+            Community community = communityService.create(null, context);\n+\n+            Collection col = collectionService.create(context, community);\n+            leftIs = workspaceItemService.create(context, col, false);\n+            rightIs = workspaceItemService.create(context, col, false);\n+\n+            itemService.addMetadata(context, leftIs.getItem(), \"dc\", \"description\", \"abstract\", null, \"headache\");\n+            itemService.addMetadata(context, rightIs.getItem(), \"dc\", \"description\", \"abstract\", null, \"headache\");\n+\n+            workspaceItemService.update(context, leftIs);\n+            workspaceItemService.update(context, rightIs);\n+\n+            indexingService.commit();\n+\n+            context.restoreAuthSystemState();\n+            context.dispatchEvents();\n+        } catch (AuthorizeException ex) {\n+            log.error(\"Authorization Error in init\", ex);\n+            fail(\"Authorization Error in init: \" + ex.getMessage());\n+        } catch (SQLException ex) {\n+            log.error(\"SQL Error in init\", ex);\n+            fail(\"SQL Error in init: \" + ex.getMessage());\n+        } catch (Exception ex) {\n+            log.error(\"Error in init\", ex);\n+            fail(\"Error in init: \" + ex.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * This method will be run after every test as per @After. It will\n+     * clean resources initialized by the @Before methods.\n+     *\n+     * Other methods can be annotated with @After here or in subclasses\n+     * but no execution order is guaranteed\n+     */\n+    @After\n+    @Override\n+    public void destroy() {\n+        context.abort();\n+        super.destroy();\n+    }\n+\n+    @Test\n+    public void deleteWorkspaceItemSolrRecordAfterDeletionFromDbTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        DiscoverQuery discoverQuery = new DiscoverQuery();\n+        discoverQuery.setQuery(\"*:*\");\n+        discoverQuery.addFilterQueries(\"search.resourceid:\" + leftIs.getID());\n+        DiscoverResult discoverResult = searchService.search(context, discoverQuery);\n+        List<IndexableObject> indexableObjects = discoverResult.getIndexableObjects();\n+        assertTrue(indexableObjects.size() == 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5638c631d7143e88a68a3703c9ad80553f3fd936"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzczNDk2MA==", "bodyText": "I'd recommend also changing this to an assertEquals statement...as if it is ever not zero, we'd want information around what it's value actually is.", "url": "https://github.com/DSpace/DSpace/pull/2744#discussion_r407734960", "createdAt": "2020-04-13T21:34:14Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/test/java/org/dspace/discovery/DiscoveryTest.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.discovery;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.sql.SQLException;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.Logger;\n+import org.dspace.AbstractIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.WorkspaceItem;\n+import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.dspace.content.service.InstallItemService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.content.service.WorkspaceItemService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * This class will aim to test Discovery related use cases\n+ */\n+public class DiscoveryTest extends AbstractIntegrationTest {\n+\n+    private static final Logger log = org.apache.logging.log4j.LogManager.getLogger(DiscoveryTest.class);\n+\n+    protected CommunityService communityService = ContentServiceFactory.getInstance().getCommunityService();\n+    protected CollectionService collectionService = ContentServiceFactory.getInstance().getCollectionService();\n+    protected ItemService itemService = ContentServiceFactory.getInstance().getItemService();\n+    protected InstallItemService installItemService = ContentServiceFactory.getInstance().getInstallItemService();\n+    protected WorkspaceItemService workspaceItemService = ContentServiceFactory.getInstance().getWorkspaceItemService();\n+    protected IndexingService indexingService = DSpaceServicesFactory.getInstance().getServiceManager()\n+                                                                     .getServiceByName(IndexingService.class.getName(),\n+                                                                                       IndexingService.class);\n+    protected SearchService searchService = SearchUtils.getSearchService();\n+\n+\n+    WorkspaceItem leftIs;\n+    WorkspaceItem rightIs;\n+\n+    /**\n+     * This method will be run before every test as per @Before. It will\n+     * initialize resources required for the tests.\n+     *\n+     * Other methods can be annotated with @Before here or in subclasses\n+     * but no execution order is guaranteed\n+     */\n+    @Before\n+    @Override\n+    public void init() {\n+        super.init();\n+        try {\n+            context.turnOffAuthorisationSystem();\n+            Community community = communityService.create(null, context);\n+\n+            Collection col = collectionService.create(context, community);\n+            leftIs = workspaceItemService.create(context, col, false);\n+            rightIs = workspaceItemService.create(context, col, false);\n+\n+            itemService.addMetadata(context, leftIs.getItem(), \"dc\", \"description\", \"abstract\", null, \"headache\");\n+            itemService.addMetadata(context, rightIs.getItem(), \"dc\", \"description\", \"abstract\", null, \"headache\");\n+\n+            workspaceItemService.update(context, leftIs);\n+            workspaceItemService.update(context, rightIs);\n+\n+            indexingService.commit();\n+\n+            context.restoreAuthSystemState();\n+            context.dispatchEvents();\n+        } catch (AuthorizeException ex) {\n+            log.error(\"Authorization Error in init\", ex);\n+            fail(\"Authorization Error in init: \" + ex.getMessage());\n+        } catch (SQLException ex) {\n+            log.error(\"SQL Error in init\", ex);\n+            fail(\"SQL Error in init: \" + ex.getMessage());\n+        } catch (Exception ex) {\n+            log.error(\"Error in init\", ex);\n+            fail(\"Error in init: \" + ex.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * This method will be run after every test as per @After. It will\n+     * clean resources initialized by the @Before methods.\n+     *\n+     * Other methods can be annotated with @After here or in subclasses\n+     * but no execution order is guaranteed\n+     */\n+    @After\n+    @Override\n+    public void destroy() {\n+        context.abort();\n+        super.destroy();\n+    }\n+\n+    @Test\n+    public void deleteWorkspaceItemSolrRecordAfterDeletionFromDbTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        DiscoverQuery discoverQuery = new DiscoverQuery();\n+        discoverQuery.setQuery(\"*:*\");\n+        discoverQuery.addFilterQueries(\"search.resourceid:\" + leftIs.getID());\n+        DiscoverResult discoverResult = searchService.search(context, discoverQuery);\n+        List<IndexableObject> indexableObjects = discoverResult.getIndexableObjects();\n+        assertTrue(indexableObjects.size() == 1);\n+        workspaceItemService.deleteAll(context, leftIs);\n+        discoverResult = searchService.search(context, discoverQuery);\n+        indexableObjects = discoverResult.getIndexableObjects();\n+        assertTrue(indexableObjects.size() == 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5638c631d7143e88a68a3703c9ad80553f3fd936"}, "originalPosition": 121}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNDY2ODM0", "url": "https://github.com/DSpace/DSpace/pull/2744#pullrequestreview-392466834", "createdAt": "2020-04-13T21:54:21Z", "commit": {"oid": "5638c631d7143e88a68a3703c9ad80553f3fd936"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMTo1NDoyMVrOGE2tVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMTo1NDoyMVrOGE2tVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0MzgzMA==", "bodyText": "One other thing I just realized.  As this is an IntegrationTest, it should have IT in the name...otherwise, it will be run alongside unit tests instead of Integration Tests.  So, this should be renamed something like DiscoveryIT or ITDiscovery.\nAlso, in the destroy() method you should be manually cleaning up any objects created in the init() method.\nFor examples, see other test classes that specify extends AbstractIntegrationTest", "url": "https://github.com/DSpace/DSpace/pull/2744#discussion_r407743830", "createdAt": "2020-04-13T21:54:21Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/test/java/org/dspace/discovery/DiscoveryTest.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.discovery;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.sql.SQLException;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.Logger;\n+import org.dspace.AbstractIntegrationTest;\n+import org.dspace.authorize.AuthorizeException;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.WorkspaceItem;\n+import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.content.service.CollectionService;\n+import org.dspace.content.service.CommunityService;\n+import org.dspace.content.service.InstallItemService;\n+import org.dspace.content.service.ItemService;\n+import org.dspace.content.service.WorkspaceItemService;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * This class will aim to test Discovery related use cases\n+ */\n+public class DiscoveryTest extends AbstractIntegrationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5638c631d7143e88a68a3703c9ad80553f3fd936"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4913c5a9e9379dde2473709389e6bfd3be05ae7d", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/4913c5a9e9379dde2473709389e6bfd3be05ae7d", "committedDate": "2020-04-27T08:33:46Z", "message": "[DS-4443] changed asserts to equals and fixed test run"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "247b965dd4fa0144fb8d9b78bc5871a788fed609", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/247b965dd4fa0144fb8d9b78bc5871a788fed609", "committedDate": "2020-04-29T12:46:59Z", "message": "Reorder structure of DiscoveryIT#init method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2347e39712476f1bbb28272bf19684b550693b3", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/e2347e39712476f1bbb28272bf19684b550693b3", "committedDate": "2020-05-07T10:03:34Z", "message": "Fixed the solr tests in dspace-api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ff63a9a59b9c1046d1d376eb47b0f656936c7ce", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/2ff63a9a59b9c1046d1d376eb47b0f656936c7ce", "committedDate": "2020-05-08T13:53:01Z", "message": "Testing Travis execution to find errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a8fe67858ed1d1bd7390912b5ee3fa925be8637", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/2a8fe67858ed1d1bd7390912b5ee3fa925be8637", "committedDate": "2020-05-12T11:24:56Z", "message": "Trying Travis Tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccca5ded9fc7500517d1bfec87d2628beba4a719", "author": {"user": {"login": "KevinVdV", "name": "Kevin Van de Velde"}}, "url": "https://github.com/DSpace/DSpace/commit/ccca5ded9fc7500517d1bfec87d2628beba4a719", "committedDate": "2020-08-14T14:14:26Z", "message": "Merge remote-tracking branch 'upstream/main' into DS-4443_delete-solr-record-on-workspaceitem-deletion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3413b1e2bcefe97318d6ec448988a9fb32d9c26", "author": {"user": {"login": "KevinVdV", "name": "Kevin Van de Velde"}}, "url": "https://github.com/DSpace/DSpace/commit/b3413b1e2bcefe97318d6ec448988a9fb32d9c26", "committedDate": "2020-08-14T14:45:47Z", "message": "Attempt to get the tests to work for the deletion of workspaceitems"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53685eb101cf9472d2d9e926e139d82bf3cdbf32", "author": {"user": {"login": "KevinVdV", "name": "Kevin Van de Velde"}}, "url": "https://github.com/DSpace/DSpace/commit/53685eb101cf9472d2d9e926e139d82bf3cdbf32", "committedDate": "2020-10-09T07:02:21Z", "message": "Merge branch 'master' into DS-4443_delete-solr-record-on-workspaceitem-deletion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a70e9ebf5b1b2ea621f1b75abee5f33f7fbc01f9", "author": {"user": {"login": "KevinVdV", "name": "Kevin Van de Velde"}}, "url": "https://github.com/DSpace/DSpace/commit/a70e9ebf5b1b2ea621f1b75abee5f33f7fbc01f9", "committedDate": "2020-10-21T12:02:00Z", "message": "Enabling discovery consumer in the unit tests for the api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc644e7c3f137c73e450c18e0645bf7e89b59cb3", "author": {"user": {"login": "KevinVdV", "name": "Kevin Van de Velde"}}, "url": "https://github.com/DSpace/DSpace/commit/cc644e7c3f137c73e450c18e0645bf7e89b59cb3", "committedDate": "2020-10-21T13:50:44Z", "message": "Removing unused imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2466731028f0f9e990ff1618c045a1d21e3da023", "author": {"user": {"login": "Raf-atmire", "name": null}}, "url": "https://github.com/DSpace/DSpace/commit/2466731028f0f9e990ff1618c045a1d21e3da023", "committedDate": "2020-11-03T15:38:30Z", "message": "Rewrote the test class using builders"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNjcxNzU0", "url": "https://github.com/DSpace/DSpace/pull/2744#pullrequestreview-523671754", "createdAt": "2020-11-04T19:29:48Z", "commit": {"oid": "2466731028f0f9e990ff1618c045a1d21e3da023"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxOToyOTo0OFrOHtmq9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxOTo0Nzo1OVrOHtnQhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU4MTU1Nw==", "bodyText": "The parentheses around indexableFactoryType can be removed on this line.", "url": "https://github.com/DSpace/DSpace/pull/2744#discussion_r517581557", "createdAt": "2020-11-04T19:29:48Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/main/java/org/dspace/discovery/indexobject/factory/IndexObjectFactoryFactory.java", "diffHunk": "@@ -68,7 +68,7 @@ public IndexFactory getIndexableObjectFactory(String indexableObjectUniqueString\n      */\n     public IndexFactory getIndexFactoryByType(String indexableFactoryType) {\n         for (IndexFactory indexableObjectFactory : getIndexFactories()) {\n-            if (indexableObjectFactory.getType().equals(indexableFactoryType)) {\n+            if (StringUtils.equalsIgnoreCase(indexableObjectFactory.getType(), (indexableFactoryType))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2466731028f0f9e990ff1618c045a1d21e3da023"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU4NjgyMA==", "bodyText": "Tiny change.  We should only be turning off/on authorization around the deleteAll() call in this test.  Otherwise, the search() calls in this test are running with a Context that has authorization turned off...and that can impact the behavior of those searches.\nSo, please move this & the restoreAuthSystemState() call to be surrounding the deleteAll() call.", "url": "https://github.com/DSpace/DSpace/pull/2744#discussion_r517586820", "createdAt": "2020-11-04T19:39:59Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/test/java/org/dspace/discovery/DiscoveryIT.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.discovery;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.List;\n+\n+import org.dspace.AbstractIntegrationTestWithDatabase;\n+import org.dspace.builder.CollectionBuilder;\n+import org.dspace.builder.CommunityBuilder;\n+import org.dspace.builder.WorkspaceItemBuilder;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.WorkspaceItem;\n+import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.content.service.WorkspaceItemService;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * This class will aim to test Discovery related use cases\n+ */\n+public class DiscoveryIT extends AbstractIntegrationTestWithDatabase {\n+\n+    protected WorkspaceItemService workspaceItemService = ContentServiceFactory.getInstance().getWorkspaceItemService();\n+    protected SearchService searchService = SearchUtils.getSearchService();\n+\n+\n+    Community community;\n+    Collection col;\n+\n+    WorkspaceItem leftIs;\n+    WorkspaceItem rightIs;\n+\n+    /**\n+     * This method will be run before every test as per @Before. It will\n+     * initialize resources required for the tests.\n+     *\n+     * Other methods can be annotated with @Before here or in subclasses\n+     * but no execution order is guaranteed\n+     */\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        context.turnOffAuthorisationSystem();\n+        community = CommunityBuilder.createCommunity(context).withName(\"Parent Community\").build();\n+\n+        col = CollectionBuilder.createCollection(context, community).build();\n+\n+        leftIs = WorkspaceItemBuilder.createWorkspaceItem(context, col).withAbstract(\"headache\").build();\n+        rightIs = WorkspaceItemBuilder.createWorkspaceItem(context, col).withAbstract(\"headache\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void deleteWorkspaceItemSolrRecordAfterDeletionFromDbTest() throws Exception {\n+        context.turnOffAuthorisationSystem();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2466731028f0f9e990ff1618c045a1d21e3da023"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU5MTE3NA==", "bodyText": "All the changes to AbstractUnitTest appear to not be necessary now that you switched DiscoveryIT to extend AbstractIntegrationTestWithDatabase (which has Solr enabled by default).  I tested locally reverting these changes to AbstractUnitTest and DiscoveryIT still succeeds.\nTherefore, I'd recommend we remove these changes, as technically Solr should be disabled for Unit Tests (which don't need it).  It's only supposed to be enabled for Integration Tests.", "url": "https://github.com/DSpace/DSpace/pull/2744#discussion_r517591174", "createdAt": "2020-11-04T19:47:59Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/test/java/org/dspace/AbstractUnitTest.java", "diffHunk": "@@ -122,9 +119,6 @@ public void init() {\n \n             context.restoreAuthSystemState();\n \n-            // Ensure all tests run with Solr indexing disabled\n-            disableSolrIndexing();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2466731028f0f9e990ff1618c045a1d21e3da023"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNzA0MTAw", "url": "https://github.com/DSpace/DSpace/pull/2744#pullrequestreview-523704100", "createdAt": "2020-11-04T20:18:25Z", "commit": {"oid": "2466731028f0f9e990ff1618c045a1d21e3da023"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMDoxODoyNVrOHtoOWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMDoyMjoxN1rOHtoV0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYwNzAwMA==", "bodyText": "this is not used in the test, the leftIs name should be replaced with a more meaningful item", "url": "https://github.com/DSpace/DSpace/pull/2744#discussion_r517607000", "createdAt": "2020-11-04T20:18:25Z", "author": {"login": "abollini"}, "path": "dspace-api/src/test/java/org/dspace/discovery/DiscoveryIT.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.discovery;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.List;\n+\n+import org.dspace.AbstractIntegrationTestWithDatabase;\n+import org.dspace.builder.CollectionBuilder;\n+import org.dspace.builder.CommunityBuilder;\n+import org.dspace.builder.WorkspaceItemBuilder;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.WorkspaceItem;\n+import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.content.service.WorkspaceItemService;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * This class will aim to test Discovery related use cases\n+ */\n+public class DiscoveryIT extends AbstractIntegrationTestWithDatabase {\n+\n+    protected WorkspaceItemService workspaceItemService = ContentServiceFactory.getInstance().getWorkspaceItemService();\n+    protected SearchService searchService = SearchUtils.getSearchService();\n+\n+\n+    Community community;\n+    Collection col;\n+\n+    WorkspaceItem leftIs;\n+    WorkspaceItem rightIs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2466731028f0f9e990ff1618c045a1d21e3da023"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYwNzc0MA==", "bodyText": "I suggest to remove the setup method here, it doesn't add any real value and make reading/understanding of the test a bit more complicated", "url": "https://github.com/DSpace/DSpace/pull/2744#discussion_r517607740", "createdAt": "2020-11-04T20:19:54Z", "author": {"login": "abollini"}, "path": "dspace-api/src/test/java/org/dspace/discovery/DiscoveryIT.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.discovery;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.List;\n+\n+import org.dspace.AbstractIntegrationTestWithDatabase;\n+import org.dspace.builder.CollectionBuilder;\n+import org.dspace.builder.CommunityBuilder;\n+import org.dspace.builder.WorkspaceItemBuilder;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.WorkspaceItem;\n+import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.content.service.WorkspaceItemService;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * This class will aim to test Discovery related use cases\n+ */\n+public class DiscoveryIT extends AbstractIntegrationTestWithDatabase {\n+\n+    protected WorkspaceItemService workspaceItemService = ContentServiceFactory.getInstance().getWorkspaceItemService();\n+    protected SearchService searchService = SearchUtils.getSearchService();\n+\n+\n+    Community community;\n+    Collection col;\n+\n+    WorkspaceItem leftIs;\n+    WorkspaceItem rightIs;\n+\n+    /**\n+     * This method will be run before every test as per @Before. It will\n+     * initialize resources required for the tests.\n+     *\n+     * Other methods can be annotated with @Before here or in subclasses\n+     * but no execution order is guaranteed\n+     */\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        context.turnOffAuthorisationSystem();\n+        community = CommunityBuilder.createCommunity(context).withName(\"Parent Community\").build();\n+\n+        col = CollectionBuilder.createCollection(context, community).build();\n+\n+        leftIs = WorkspaceItemBuilder.createWorkspaceItem(context, col).withAbstract(\"headache\").build();\n+        rightIs = WorkspaceItemBuilder.createWorkspaceItem(context, col).withAbstract(\"headache\").build();\n+\n+        context.restoreAuthSystemState();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2466731028f0f9e990ff1618c045a1d21e3da023"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYwODcyMA==", "bodyText": "please add assertEquals(1, discoverResult.getTotalSearchResults());", "url": "https://github.com/DSpace/DSpace/pull/2744#discussion_r517608720", "createdAt": "2020-11-04T20:21:59Z", "author": {"login": "abollini"}, "path": "dspace-api/src/test/java/org/dspace/discovery/DiscoveryIT.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.discovery;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.List;\n+\n+import org.dspace.AbstractIntegrationTestWithDatabase;\n+import org.dspace.builder.CollectionBuilder;\n+import org.dspace.builder.CommunityBuilder;\n+import org.dspace.builder.WorkspaceItemBuilder;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.WorkspaceItem;\n+import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.content.service.WorkspaceItemService;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * This class will aim to test Discovery related use cases\n+ */\n+public class DiscoveryIT extends AbstractIntegrationTestWithDatabase {\n+\n+    protected WorkspaceItemService workspaceItemService = ContentServiceFactory.getInstance().getWorkspaceItemService();\n+    protected SearchService searchService = SearchUtils.getSearchService();\n+\n+\n+    Community community;\n+    Collection col;\n+\n+    WorkspaceItem leftIs;\n+    WorkspaceItem rightIs;\n+\n+    /**\n+     * This method will be run before every test as per @Before. It will\n+     * initialize resources required for the tests.\n+     *\n+     * Other methods can be annotated with @Before here or in subclasses\n+     * but no execution order is guaranteed\n+     */\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        context.turnOffAuthorisationSystem();\n+        community = CommunityBuilder.createCommunity(context).withName(\"Parent Community\").build();\n+\n+        col = CollectionBuilder.createCollection(context, community).build();\n+\n+        leftIs = WorkspaceItemBuilder.createWorkspaceItem(context, col).withAbstract(\"headache\").build();\n+        rightIs = WorkspaceItemBuilder.createWorkspaceItem(context, col).withAbstract(\"headache\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void deleteWorkspaceItemSolrRecordAfterDeletionFromDbTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        DiscoverQuery discoverQuery = new DiscoverQuery();\n+        discoverQuery.setQuery(\"*:*\");\n+        discoverQuery.addFilterQueries(\"search.resourceid:\" + leftIs.getID());\n+        DiscoverResult discoverResult = searchService.search(context, discoverQuery);\n+        List<IndexableObject> indexableObjects = discoverResult.getIndexableObjects();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2466731028f0f9e990ff1618c045a1d21e3da023"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYwODkxMw==", "bodyText": "please add assertEquals(0, discoverResult.getTotalSearchResults()); as the indexable objects could be an empty list also in  the case that the workspaceitem is still present in the index but not founded in the database. Indeed, doing that will led the test to fails as you need to dispatch the events to get the search updated, add\ncontext.dispatchEvents();\njust after the workspaceItemService.deleteAll(context, leftIs);", "url": "https://github.com/DSpace/DSpace/pull/2744#discussion_r517608913", "createdAt": "2020-11-04T20:22:17Z", "author": {"login": "abollini"}, "path": "dspace-api/src/test/java/org/dspace/discovery/DiscoveryIT.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.discovery;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.List;\n+\n+import org.dspace.AbstractIntegrationTestWithDatabase;\n+import org.dspace.builder.CollectionBuilder;\n+import org.dspace.builder.CommunityBuilder;\n+import org.dspace.builder.WorkspaceItemBuilder;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.WorkspaceItem;\n+import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.content.service.WorkspaceItemService;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * This class will aim to test Discovery related use cases\n+ */\n+public class DiscoveryIT extends AbstractIntegrationTestWithDatabase {\n+\n+    protected WorkspaceItemService workspaceItemService = ContentServiceFactory.getInstance().getWorkspaceItemService();\n+    protected SearchService searchService = SearchUtils.getSearchService();\n+\n+\n+    Community community;\n+    Collection col;\n+\n+    WorkspaceItem leftIs;\n+    WorkspaceItem rightIs;\n+\n+    /**\n+     * This method will be run before every test as per @Before. It will\n+     * initialize resources required for the tests.\n+     *\n+     * Other methods can be annotated with @Before here or in subclasses\n+     * but no execution order is guaranteed\n+     */\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        context.turnOffAuthorisationSystem();\n+        community = CommunityBuilder.createCommunity(context).withName(\"Parent Community\").build();\n+\n+        col = CollectionBuilder.createCollection(context, community).build();\n+\n+        leftIs = WorkspaceItemBuilder.createWorkspaceItem(context, col).withAbstract(\"headache\").build();\n+        rightIs = WorkspaceItemBuilder.createWorkspaceItem(context, col).withAbstract(\"headache\").build();\n+\n+        context.restoreAuthSystemState();\n+    }\n+\n+    @Test\n+    public void deleteWorkspaceItemSolrRecordAfterDeletionFromDbTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        DiscoverQuery discoverQuery = new DiscoverQuery();\n+        discoverQuery.setQuery(\"*:*\");\n+        discoverQuery.addFilterQueries(\"search.resourceid:\" + leftIs.getID());\n+        DiscoverResult discoverResult = searchService.search(context, discoverQuery);\n+        List<IndexableObject> indexableObjects = discoverResult.getIndexableObjects();\n+        assertEquals(1, indexableObjects.size());\n+        workspaceItemService.deleteAll(context, leftIs);\n+        discoverResult = searchService.search(context, discoverQuery);\n+        indexableObjects = discoverResult.getIndexableObjects();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2466731028f0f9e990ff1618c045a1d21e3da023"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cd404b6a75a68c0aec2b4ef51654714f5757162", "author": {"user": {"login": "YanaDePauw", "name": "Yana De Pauw"}}, "url": "https://github.com/DSpace/DSpace/commit/8cd404b6a75a68c0aec2b4ef51654714f5757162", "committedDate": "2020-12-17T09:46:47Z", "message": "75323: Delete solr record on workspaceitem deletion: Test feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0NjE3NDQ4", "url": "https://github.com/DSpace/DSpace/pull/2744#pullrequestreview-554617448", "createdAt": "2020-12-17T13:47:14Z", "commit": {"oid": "8cd404b6a75a68c0aec2b4ef51654714f5757162"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0Nzg1ODI5", "url": "https://github.com/DSpace/DSpace/pull/2744#pullrequestreview-554785829", "createdAt": "2020-12-17T16:42:52Z", "commit": {"oid": "8cd404b6a75a68c0aec2b4ef51654714f5757162"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNjo0Mjo1MlrOIH-kWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNjo0Mjo1MlrOIH-kWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIzNjA1OQ==", "bodyText": "@KevinVdV : I agree with @abollini 's suggestion here.  We must revert these changes to AbstractUnitTest, but if they cause issues with the tests added here, we can temporarily disable the new tests (we already know they work) until we can figure out which other UnitTests are improperly adding content into Solr.", "url": "https://github.com/DSpace/DSpace/pull/2744#discussion_r545236059", "createdAt": "2020-12-17T16:42:52Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/test/java/org/dspace/AbstractUnitTest.java", "diffHunk": "@@ -122,9 +119,6 @@ public void init() {\n \n             context.restoreAuthSystemState();\n \n-            // Ensure all tests run with Solr indexing disabled\n-            disableSolrIndexing();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU5MTE3NA=="}, "originalCommit": {"oid": "2466731028f0f9e990ff1618c045a1d21e3da023"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d487e36c17929d61aa9b403c31322ffafe623d7", "author": {"user": {"login": "YanaDePauw", "name": "Yana De Pauw"}}, "url": "https://github.com/DSpace/DSpace/commit/9d487e36c17929d61aa9b403c31322ffafe623d7", "committedDate": "2020-12-21T09:46:10Z", "message": "Merge remote-tracking branch 'upstream/main' into DS-4443_delete-solr-record-on-workspaceitem-deletion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9fe4ae1d1af94fe9ffdbd2a0511b93d042f8d8a", "author": {"user": {"login": "YanaDePauw", "name": "Yana De Pauw"}}, "url": "https://github.com/DSpace/DSpace/commit/a9fe4ae1d1af94fe9ffdbd2a0511b93d042f8d8a", "committedDate": "2021-01-13T14:24:32Z", "message": "75409: Delete solr record on workspaceitem deletion: Test feedback V2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31fc4cb023250087df63d4434d680eb31b595018", "author": {"user": {"login": "KevinVdV", "name": "Kevin Van de Velde"}}, "url": "https://github.com/DSpace/DSpace/commit/31fc4cb023250087df63d4434d680eb31b595018", "committedDate": "2021-01-14T12:35:05Z", "message": "Fixing the tests & the style issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcyMzA5OTkw", "url": "https://github.com/DSpace/DSpace/pull/2744#pullrequestreview-572309990", "createdAt": "2021-01-20T14:59:53Z", "commit": {"oid": "31fc4cb023250087df63d4434d680eb31b595018"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxNDo1OTo1M1rOIXCaRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxNTowMToyOVrOIXCjaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAyNzY1NA==", "bodyText": "Could we rename this method to be more descriptive, instead of just adding an n to the end of the name?  This one seems to be more about deleting the WorkflowItem (not the WorkspaceItem), so it might be better named deleteWorkflowItemSolrRecordAFterDeletionfromDbTest()", "url": "https://github.com/DSpace/DSpace/pull/2744#discussion_r561027654", "createdAt": "2021-01-20T14:59:53Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/test/java/org/dspace/discovery/DiscoveryIT.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.discovery;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.List;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.dspace.AbstractIntegrationTestWithDatabase;\n+import org.dspace.builder.CollectionBuilder;\n+import org.dspace.builder.CommunityBuilder;\n+import org.dspace.builder.ItemBuilder;\n+import org.dspace.builder.WorkspaceItemBuilder;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.WorkspaceItem;\n+import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.content.service.WorkspaceItemService;\n+import org.dspace.discovery.indexobject.IndexableClaimedTask;\n+import org.dspace.discovery.indexobject.IndexablePoolTask;\n+import org.dspace.eperson.EPerson;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.dspace.xmlworkflow.factory.XmlWorkflowServiceFactory;\n+import org.dspace.xmlworkflow.service.WorkflowRequirementsService;\n+import org.dspace.xmlworkflow.service.XmlWorkflowService;\n+import org.dspace.xmlworkflow.state.Workflow;\n+import org.dspace.xmlworkflow.storedcomponents.ClaimedTask;\n+import org.dspace.xmlworkflow.storedcomponents.XmlWorkflowItem;\n+import org.dspace.xmlworkflow.storedcomponents.service.ClaimedTaskService;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+\n+/**\n+ * This class will aim to test Discovery related use cases\n+ */\n+public class DiscoveryIT extends AbstractIntegrationTestWithDatabase {\n+\n+    protected WorkspaceItemService workspaceItemService = ContentServiceFactory.getInstance().getWorkspaceItemService();\n+    protected SearchService searchService = SearchUtils.getSearchService();\n+\n+    XmlWorkflowService workflowService = XmlWorkflowServiceFactory.getInstance().getXmlWorkflowService();\n+\n+    WorkflowRequirementsService workflowRequirementsService = XmlWorkflowServiceFactory.getInstance().\n+            getWorkflowRequirementsService();\n+\n+    ClaimedTaskService claimedTaskService = XmlWorkflowServiceFactory.getInstance().getClaimedTaskService();\n+\n+    IndexingService indexer = DSpaceServicesFactory.getInstance().getServiceManager()\n+                                                   .getServiceByName(IndexingService.class.getName(),\n+                                                                     IndexingService.class);\n+\n+\n+    @Ignore\n+    @Test\n+    public void deleteWorkspaceItemSolrRecordAfterDeletionFromDbTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Community community = CommunityBuilder.createCommunity(context)\n+                                              .withName(\"Parent Community\")\n+                                              .build();\n+        Collection col = CollectionBuilder.createCollection(context, community)\n+                                          .build();\n+        WorkspaceItem workspaceItem = WorkspaceItemBuilder.createWorkspaceItem(context, col)\n+                                                          .withAbstract(\"headache\")\n+                                                          .build();\n+        context.restoreAuthSystemState();\n+\n+        DiscoverQuery discoverQuery = new DiscoverQuery();\n+        discoverQuery.setQuery(\"*:*\");\n+        discoverQuery.addFilterQueries(\"search.resourceid:\" + workspaceItem.getID());\n+        DiscoverResult discoverResult = searchService.search(context, discoverQuery);\n+        List<IndexableObject> indexableObjects = discoverResult.getIndexableObjects();\n+        assertEquals(1, indexableObjects.size());\n+        assertEquals(1, discoverResult.getTotalSearchResults());\n+\n+        context.turnOffAuthorisationSystem();\n+        workspaceItemService.deleteAll(context, workspaceItem);\n+        context.dispatchEvents();\n+        context.restoreAuthSystemState();\n+\n+        discoverResult = searchService.search(context, discoverQuery);\n+        indexableObjects = discoverResult.getIndexableObjects();\n+        assertEquals(0, indexableObjects.size());\n+        assertEquals(0, discoverResult.getTotalSearchResults());\n+    }\n+\n+    @Ignore\n+    @Test\n+    public void deleteWorkspaceItemSolrRecordAfterDeletionFromDbTestn() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31fc4cb023250087df63d4434d680eb31b595018"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTAyOTk5Mg==", "bodyText": "It doesn't appear that we are testing that everything is (in fact) deleted.  It looks like we are just testing that the deletion succeeds.  Am I misunderstanding the purpose of this test?  If so, perhaps we can add more inline comments here to describe what this test is proving.\nIt's also unclear (to me) why we keep creating new Items in this test via the ItemBuilder (see lines 152 and 141).... so, it may be good to add inline comments here in general, as it's unclear why adding additional Items is necessary to test the number of Pooled or Claimed Tasks in the Workflow.", "url": "https://github.com/DSpace/DSpace/pull/2744#discussion_r561029992", "createdAt": "2021-01-20T15:01:29Z", "author": {"login": "tdonohue"}, "path": "dspace-api/src/test/java/org/dspace/discovery/DiscoveryIT.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/**\n+ * The contents of this file are subject to the license and copyright\n+ * detailed in the LICENSE and NOTICE files at the root of the source\n+ * tree and available online at\n+ *\n+ * http://www.dspace.org/license/\n+ */\n+package org.dspace.discovery;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.List;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.dspace.AbstractIntegrationTestWithDatabase;\n+import org.dspace.builder.CollectionBuilder;\n+import org.dspace.builder.CommunityBuilder;\n+import org.dspace.builder.ItemBuilder;\n+import org.dspace.builder.WorkspaceItemBuilder;\n+import org.dspace.content.Collection;\n+import org.dspace.content.Community;\n+import org.dspace.content.WorkspaceItem;\n+import org.dspace.content.factory.ContentServiceFactory;\n+import org.dspace.content.service.WorkspaceItemService;\n+import org.dspace.discovery.indexobject.IndexableClaimedTask;\n+import org.dspace.discovery.indexobject.IndexablePoolTask;\n+import org.dspace.eperson.EPerson;\n+import org.dspace.services.factory.DSpaceServicesFactory;\n+import org.dspace.xmlworkflow.factory.XmlWorkflowServiceFactory;\n+import org.dspace.xmlworkflow.service.WorkflowRequirementsService;\n+import org.dspace.xmlworkflow.service.XmlWorkflowService;\n+import org.dspace.xmlworkflow.state.Workflow;\n+import org.dspace.xmlworkflow.storedcomponents.ClaimedTask;\n+import org.dspace.xmlworkflow.storedcomponents.XmlWorkflowItem;\n+import org.dspace.xmlworkflow.storedcomponents.service.ClaimedTaskService;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+\n+/**\n+ * This class will aim to test Discovery related use cases\n+ */\n+public class DiscoveryIT extends AbstractIntegrationTestWithDatabase {\n+\n+    protected WorkspaceItemService workspaceItemService = ContentServiceFactory.getInstance().getWorkspaceItemService();\n+    protected SearchService searchService = SearchUtils.getSearchService();\n+\n+    XmlWorkflowService workflowService = XmlWorkflowServiceFactory.getInstance().getXmlWorkflowService();\n+\n+    WorkflowRequirementsService workflowRequirementsService = XmlWorkflowServiceFactory.getInstance().\n+            getWorkflowRequirementsService();\n+\n+    ClaimedTaskService claimedTaskService = XmlWorkflowServiceFactory.getInstance().getClaimedTaskService();\n+\n+    IndexingService indexer = DSpaceServicesFactory.getInstance().getServiceManager()\n+                                                   .getServiceByName(IndexingService.class.getName(),\n+                                                                     IndexingService.class);\n+\n+\n+    @Ignore\n+    @Test\n+    public void deleteWorkspaceItemSolrRecordAfterDeletionFromDbTest() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Community community = CommunityBuilder.createCommunity(context)\n+                                              .withName(\"Parent Community\")\n+                                              .build();\n+        Collection col = CollectionBuilder.createCollection(context, community)\n+                                          .build();\n+        WorkspaceItem workspaceItem = WorkspaceItemBuilder.createWorkspaceItem(context, col)\n+                                                          .withAbstract(\"headache\")\n+                                                          .build();\n+        context.restoreAuthSystemState();\n+\n+        DiscoverQuery discoverQuery = new DiscoverQuery();\n+        discoverQuery.setQuery(\"*:*\");\n+        discoverQuery.addFilterQueries(\"search.resourceid:\" + workspaceItem.getID());\n+        DiscoverResult discoverResult = searchService.search(context, discoverQuery);\n+        List<IndexableObject> indexableObjects = discoverResult.getIndexableObjects();\n+        assertEquals(1, indexableObjects.size());\n+        assertEquals(1, discoverResult.getTotalSearchResults());\n+\n+        context.turnOffAuthorisationSystem();\n+        workspaceItemService.deleteAll(context, workspaceItem);\n+        context.dispatchEvents();\n+        context.restoreAuthSystemState();\n+\n+        discoverResult = searchService.search(context, discoverQuery);\n+        indexableObjects = discoverResult.getIndexableObjects();\n+        assertEquals(0, indexableObjects.size());\n+        assertEquals(0, discoverResult.getTotalSearchResults());\n+    }\n+\n+    @Ignore\n+    @Test\n+    public void deleteWorkspaceItemSolrRecordAfterDeletionFromDbTestn() throws Exception {\n+        context.turnOffAuthorisationSystem();\n+        Community community = CommunityBuilder.createCommunity(context)\n+                                              .withName(\"Parent Community\")\n+                                              .build();\n+        Collection collection = CollectionBuilder.createCollection(context, community)\n+                                                 .withWorkflowGroup(1, admin)\n+                                                 .build();\n+\n+        WorkspaceItem wsi = WorkspaceItemBuilder.createWorkspaceItem(context, collection)\n+                                                .withTitle(\"Test item\")\n+                                                .withIssueDate(\"2019-03-06\")\n+                                                .withSubject(\"ExtraEntry\")\n+                                                .build();\n+\n+        ItemBuilder.createItem(context, collection).build();\n+\n+\n+\n+        Workflow workflow = XmlWorkflowServiceFactory.getInstance().getWorkflowFactory().getWorkflow(collection);\n+\n+        ItemBuilder.createItem(context, collection).build();\n+\n+        context.restoreAuthSystemState();\n+\n+        MockHttpServletRequest httpServletRequest = new MockHttpServletRequest();\n+        httpServletRequest.setParameter(\"submit_approve\", \"submit_approve\");\n+\n+        XmlWorkflowItem workflowItem = workflowService.startWithoutNotify(context, wsi);\n+        context.dispatchEvents();\n+        indexer.commit();\n+\n+        assertSearchQuery(IndexablePoolTask.TYPE, 1);\n+\n+        context.turnOffAuthorisationSystem();\n+        ItemBuilder.createItem(context, collection).build();\n+        context.restoreAuthSystemState();\n+\n+        executeWorkflowAction(httpServletRequest, admin, workflow, workflowItem,\n+                \"reviewstep\", \"claimaction\");\n+\n+\n+        context.dispatchEvents();\n+        indexer.commit();\n+\n+        context.turnOffAuthorisationSystem();\n+        ItemBuilder.createItem(context, collection).build();\n+        context.restoreAuthSystemState();\n+\n+        assertSearchQuery(IndexablePoolTask.TYPE, 0);\n+        assertSearchQuery(IndexableClaimedTask.TYPE, 1);\n+\n+        returnToPool(admin, workflowItem);\n+        context.dispatchEvents();\n+        indexer.commit();\n+\n+        context.turnOffAuthorisationSystem();\n+        ItemBuilder.createItem(context, collection).build();\n+        context.restoreAuthSystemState();\n+\n+        assertSearchQuery(IndexablePoolTask.TYPE, 1);\n+        assertSearchQuery(IndexableClaimedTask.TYPE, 0);\n+\n+        workflowService.deleteWorkflowByWorkflowItem(context, workflowItem, admin);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31fc4cb023250087df63d4434d680eb31b595018"}, "originalPosition": 158}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc3NTE4NzQx", "url": "https://github.com/DSpace/DSpace/pull/2744#pullrequestreview-577518741", "createdAt": "2021-01-27T16:22:54Z", "commit": {"oid": "31fc4cb023250087df63d4434d680eb31b595018"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1429, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}