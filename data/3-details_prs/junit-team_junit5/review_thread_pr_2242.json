{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5MTIyNzYw", "number": 2242, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMzoyMjozOFrODvIANw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMzoyMjozOFrODvIANw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNzQwNzkxOnYy", "diffSide": "RIGHT", "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineDiscoveryOrchestrator.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMzoyMjozOFrOGBXb-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMTozMjowMFrOGB_RPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA4NTc1Mg==", "bodyText": "@marcphilipp Oops, looks like the code was not formatted properly.", "url": "https://github.com/junit-team/junit5/pull/2242#discussion_r404085752", "createdAt": "2020-04-06T13:22:38Z", "author": {"login": "jbduncan"}, "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineDiscoveryOrchestrator.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.core;\n+\n+import static java.util.stream.Collectors.joining;\n+import static org.apiguardian.api.API.Status.INTERNAL;\n+import static org.junit.platform.engine.Filter.composeFilters;\n+\n+import java.util.LinkedHashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.commons.JUnitException;\n+import org.junit.platform.commons.logging.Logger;\n+import org.junit.platform.commons.logging.LoggerFactory;\n+import org.junit.platform.commons.util.BlacklistedExceptions;\n+import org.junit.platform.engine.Filter;\n+import org.junit.platform.engine.FilterResult;\n+import org.junit.platform.engine.TestDescriptor;\n+import org.junit.platform.engine.TestEngine;\n+import org.junit.platform.engine.UniqueId;\n+import org.junit.platform.launcher.EngineDiscoveryResult;\n+import org.junit.platform.launcher.LauncherDiscoveryListener;\n+import org.junit.platform.launcher.LauncherDiscoveryRequest;\n+import org.junit.platform.launcher.PostDiscoveryFilter;\n+\n+/**\n+ * @since 1.7\n+ */\n+@API(status = INTERNAL, since = \"1.7\", consumers = \"testkit\")\n+public class EngineDiscoveryOrchestrator {\n+\n+\tprivate static final Logger logger = LoggerFactory.getLogger(EngineDiscoveryOrchestrator.class);\n+\n+\tprivate final EngineDiscoveryResultValidator discoveryResultValidator = new EngineDiscoveryResultValidator();\n+\tprivate final Iterable<TestEngine> testEngines;\n+\n+\tpublic EngineDiscoveryOrchestrator(Iterable<TestEngine> testEngines) {\n+\t\tthis.testEngines = testEngines;\n+\t}\n+\n+\tpublic LauncherDiscoveryResult discover(LauncherDiscoveryRequest request, String phase) {\n+\t\tMap<TestEngine, TestDescriptor> testEngineDescriptors = new LinkedHashMap<>();\n+\n+\t\tfor (TestEngine testEngine : this.testEngines) {\n+\t\t\t// @formatter:off\n+            boolean engineIsExcluded = request.getEngineFilters().stream()\n+                    .map(engineFilter -> engineFilter.apply(testEngine))\n+                    .anyMatch(FilterResult::excluded);\n+            // @formatter:on", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2d28430bacdfdcd4536f7f838d608b79617a3ef"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDczNTQ4Nw==", "bodyText": "Thanks, I hate it when IDEA does that. \ud83d\ude2c", "url": "https://github.com/junit-team/junit5/pull/2242#discussion_r404735487", "createdAt": "2020-04-07T11:26:45Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineDiscoveryOrchestrator.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.core;\n+\n+import static java.util.stream.Collectors.joining;\n+import static org.apiguardian.api.API.Status.INTERNAL;\n+import static org.junit.platform.engine.Filter.composeFilters;\n+\n+import java.util.LinkedHashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.commons.JUnitException;\n+import org.junit.platform.commons.logging.Logger;\n+import org.junit.platform.commons.logging.LoggerFactory;\n+import org.junit.platform.commons.util.BlacklistedExceptions;\n+import org.junit.platform.engine.Filter;\n+import org.junit.platform.engine.FilterResult;\n+import org.junit.platform.engine.TestDescriptor;\n+import org.junit.platform.engine.TestEngine;\n+import org.junit.platform.engine.UniqueId;\n+import org.junit.platform.launcher.EngineDiscoveryResult;\n+import org.junit.platform.launcher.LauncherDiscoveryListener;\n+import org.junit.platform.launcher.LauncherDiscoveryRequest;\n+import org.junit.platform.launcher.PostDiscoveryFilter;\n+\n+/**\n+ * @since 1.7\n+ */\n+@API(status = INTERNAL, since = \"1.7\", consumers = \"testkit\")\n+public class EngineDiscoveryOrchestrator {\n+\n+\tprivate static final Logger logger = LoggerFactory.getLogger(EngineDiscoveryOrchestrator.class);\n+\n+\tprivate final EngineDiscoveryResultValidator discoveryResultValidator = new EngineDiscoveryResultValidator();\n+\tprivate final Iterable<TestEngine> testEngines;\n+\n+\tpublic EngineDiscoveryOrchestrator(Iterable<TestEngine> testEngines) {\n+\t\tthis.testEngines = testEngines;\n+\t}\n+\n+\tpublic LauncherDiscoveryResult discover(LauncherDiscoveryRequest request, String phase) {\n+\t\tMap<TestEngine, TestDescriptor> testEngineDescriptors = new LinkedHashMap<>();\n+\n+\t\tfor (TestEngine testEngine : this.testEngines) {\n+\t\t\t// @formatter:off\n+            boolean engineIsExcluded = request.getEngineFilters().stream()\n+                    .map(engineFilter -> engineFilter.apply(testEngine))\n+                    .anyMatch(FilterResult::excluded);\n+            // @formatter:on", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA4NTc1Mg=="}, "originalCommit": {"oid": "d2d28430bacdfdcd4536f7f838d608b79617a3ef"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDczNjcyNQ==", "bodyText": "I hate // @formatter:on/off commented out directives too. \ud83d\ude01", "url": "https://github.com/junit-team/junit5/pull/2242#discussion_r404736725", "createdAt": "2020-04-07T11:29:02Z", "author": {"login": "sormuras"}, "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineDiscoveryOrchestrator.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.core;\n+\n+import static java.util.stream.Collectors.joining;\n+import static org.apiguardian.api.API.Status.INTERNAL;\n+import static org.junit.platform.engine.Filter.composeFilters;\n+\n+import java.util.LinkedHashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.commons.JUnitException;\n+import org.junit.platform.commons.logging.Logger;\n+import org.junit.platform.commons.logging.LoggerFactory;\n+import org.junit.platform.commons.util.BlacklistedExceptions;\n+import org.junit.platform.engine.Filter;\n+import org.junit.platform.engine.FilterResult;\n+import org.junit.platform.engine.TestDescriptor;\n+import org.junit.platform.engine.TestEngine;\n+import org.junit.platform.engine.UniqueId;\n+import org.junit.platform.launcher.EngineDiscoveryResult;\n+import org.junit.platform.launcher.LauncherDiscoveryListener;\n+import org.junit.platform.launcher.LauncherDiscoveryRequest;\n+import org.junit.platform.launcher.PostDiscoveryFilter;\n+\n+/**\n+ * @since 1.7\n+ */\n+@API(status = INTERNAL, since = \"1.7\", consumers = \"testkit\")\n+public class EngineDiscoveryOrchestrator {\n+\n+\tprivate static final Logger logger = LoggerFactory.getLogger(EngineDiscoveryOrchestrator.class);\n+\n+\tprivate final EngineDiscoveryResultValidator discoveryResultValidator = new EngineDiscoveryResultValidator();\n+\tprivate final Iterable<TestEngine> testEngines;\n+\n+\tpublic EngineDiscoveryOrchestrator(Iterable<TestEngine> testEngines) {\n+\t\tthis.testEngines = testEngines;\n+\t}\n+\n+\tpublic LauncherDiscoveryResult discover(LauncherDiscoveryRequest request, String phase) {\n+\t\tMap<TestEngine, TestDescriptor> testEngineDescriptors = new LinkedHashMap<>();\n+\n+\t\tfor (TestEngine testEngine : this.testEngines) {\n+\t\t\t// @formatter:off\n+            boolean engineIsExcluded = request.getEngineFilters().stream()\n+                    .map(engineFilter -> engineFilter.apply(testEngine))\n+                    .anyMatch(FilterResult::excluded);\n+            // @formatter:on", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA4NTc1Mg=="}, "originalCommit": {"oid": "d2d28430bacdfdcd4536f7f838d608b79617a3ef"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDczNzMzNg==", "bodyText": "Me too. :)", "url": "https://github.com/junit-team/junit5/pull/2242#discussion_r404737336", "createdAt": "2020-04-07T11:30:12Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineDiscoveryOrchestrator.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.core;\n+\n+import static java.util.stream.Collectors.joining;\n+import static org.apiguardian.api.API.Status.INTERNAL;\n+import static org.junit.platform.engine.Filter.composeFilters;\n+\n+import java.util.LinkedHashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.commons.JUnitException;\n+import org.junit.platform.commons.logging.Logger;\n+import org.junit.platform.commons.logging.LoggerFactory;\n+import org.junit.platform.commons.util.BlacklistedExceptions;\n+import org.junit.platform.engine.Filter;\n+import org.junit.platform.engine.FilterResult;\n+import org.junit.platform.engine.TestDescriptor;\n+import org.junit.platform.engine.TestEngine;\n+import org.junit.platform.engine.UniqueId;\n+import org.junit.platform.launcher.EngineDiscoveryResult;\n+import org.junit.platform.launcher.LauncherDiscoveryListener;\n+import org.junit.platform.launcher.LauncherDiscoveryRequest;\n+import org.junit.platform.launcher.PostDiscoveryFilter;\n+\n+/**\n+ * @since 1.7\n+ */\n+@API(status = INTERNAL, since = \"1.7\", consumers = \"testkit\")\n+public class EngineDiscoveryOrchestrator {\n+\n+\tprivate static final Logger logger = LoggerFactory.getLogger(EngineDiscoveryOrchestrator.class);\n+\n+\tprivate final EngineDiscoveryResultValidator discoveryResultValidator = new EngineDiscoveryResultValidator();\n+\tprivate final Iterable<TestEngine> testEngines;\n+\n+\tpublic EngineDiscoveryOrchestrator(Iterable<TestEngine> testEngines) {\n+\t\tthis.testEngines = testEngines;\n+\t}\n+\n+\tpublic LauncherDiscoveryResult discover(LauncherDiscoveryRequest request, String phase) {\n+\t\tMap<TestEngine, TestDescriptor> testEngineDescriptors = new LinkedHashMap<>();\n+\n+\t\tfor (TestEngine testEngine : this.testEngines) {\n+\t\t\t// @formatter:off\n+            boolean engineIsExcluded = request.getEngineFilters().stream()\n+                    .map(engineFilter -> engineFilter.apply(testEngine))\n+                    .anyMatch(FilterResult::excluded);\n+            // @formatter:on", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA4NTc1Mg=="}, "originalCommit": {"oid": "d2d28430bacdfdcd4536f7f838d608b79617a3ef"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDczODM2NA==", "bodyText": "When is 2021?!", "url": "https://github.com/junit-team/junit5/pull/2242#discussion_r404738364", "createdAt": "2020-04-07T11:32:00Z", "author": {"login": "sormuras"}, "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineDiscoveryOrchestrator.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.core;\n+\n+import static java.util.stream.Collectors.joining;\n+import static org.apiguardian.api.API.Status.INTERNAL;\n+import static org.junit.platform.engine.Filter.composeFilters;\n+\n+import java.util.LinkedHashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.commons.JUnitException;\n+import org.junit.platform.commons.logging.Logger;\n+import org.junit.platform.commons.logging.LoggerFactory;\n+import org.junit.platform.commons.util.BlacklistedExceptions;\n+import org.junit.platform.engine.Filter;\n+import org.junit.platform.engine.FilterResult;\n+import org.junit.platform.engine.TestDescriptor;\n+import org.junit.platform.engine.TestEngine;\n+import org.junit.platform.engine.UniqueId;\n+import org.junit.platform.launcher.EngineDiscoveryResult;\n+import org.junit.platform.launcher.LauncherDiscoveryListener;\n+import org.junit.platform.launcher.LauncherDiscoveryRequest;\n+import org.junit.platform.launcher.PostDiscoveryFilter;\n+\n+/**\n+ * @since 1.7\n+ */\n+@API(status = INTERNAL, since = \"1.7\", consumers = \"testkit\")\n+public class EngineDiscoveryOrchestrator {\n+\n+\tprivate static final Logger logger = LoggerFactory.getLogger(EngineDiscoveryOrchestrator.class);\n+\n+\tprivate final EngineDiscoveryResultValidator discoveryResultValidator = new EngineDiscoveryResultValidator();\n+\tprivate final Iterable<TestEngine> testEngines;\n+\n+\tpublic EngineDiscoveryOrchestrator(Iterable<TestEngine> testEngines) {\n+\t\tthis.testEngines = testEngines;\n+\t}\n+\n+\tpublic LauncherDiscoveryResult discover(LauncherDiscoveryRequest request, String phase) {\n+\t\tMap<TestEngine, TestDescriptor> testEngineDescriptors = new LinkedHashMap<>();\n+\n+\t\tfor (TestEngine testEngine : this.testEngines) {\n+\t\t\t// @formatter:off\n+            boolean engineIsExcluded = request.getEngineFilters().stream()\n+                    .map(engineFilter -> engineFilter.apply(testEngine))\n+                    .anyMatch(FilterResult::excluded);\n+            // @formatter:on", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA4NTc1Mg=="}, "originalCommit": {"oid": "d2d28430bacdfdcd4536f7f838d608b79617a3ef"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3999, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}