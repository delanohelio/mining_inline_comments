{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4NTU3MjY1", "number": 2365, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODowNzo1NlrOETXi3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzoxMzozNVrOETjqMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NzQ0MTU2OnYy", "diffSide": "RIGHT", "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODowNzo1NlrOG5EJVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMToxNjo0NlrOG5KhSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4OTk0Mw==", "bodyText": "There's no need to do this, Thread already does this if no group is specified explicitly.", "url": "https://github.com/junit-team/junit5/pull/2365#discussion_r462489943", "createdAt": "2020-07-29T18:07:56Z", "author": {"login": "marcphilipp"}, "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java", "diffHunk": "@@ -180,4 +182,30 @@ static void assertTimeoutPreemptively(Duration timeout, Executable executable, S\n \t\t}\n \t}\n \n+\t/**\n+\t * The thread factory used for preemptive timeout.\n+\t *\n+\t * This factory is the same with {@link Executors#defaultThreadFactory()} but provides more meaningful thread names,\n+\t * helpful for debugging purposes.\n+\t *\n+\t */\n+\tprivate static class TimeoutThreadFactory implements ThreadFactory {\n+\t\tprivate static final AtomicInteger threadNumber = new AtomicInteger(1);\n+\t\tprivate final ThreadGroup group;\n+\n+\t\tTimeoutThreadFactory() {\n+\t\t\tSecurityManager s = System.getSecurityManager();\n+\t\t\tgroup = (s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12ddf80ed1c7ba6fd35c47c4f35548ddaa771a05"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU5NDM3Nw==", "bodyText": "I think it makes sense if the factory is about to create many threads but given that at the moment we have a factory per thread it can be removed.", "url": "https://github.com/junit-team/junit5/pull/2365#discussion_r462594377", "createdAt": "2020-07-29T21:16:46Z", "author": {"login": "zabetak"}, "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java", "diffHunk": "@@ -180,4 +182,30 @@ static void assertTimeoutPreemptively(Duration timeout, Executable executable, S\n \t\t}\n \t}\n \n+\t/**\n+\t * The thread factory used for preemptive timeout.\n+\t *\n+\t * This factory is the same with {@link Executors#defaultThreadFactory()} but provides more meaningful thread names,\n+\t * helpful for debugging purposes.\n+\t *\n+\t */\n+\tprivate static class TimeoutThreadFactory implements ThreadFactory {\n+\t\tprivate static final AtomicInteger threadNumber = new AtomicInteger(1);\n+\t\tprivate final ThreadGroup group;\n+\n+\t\tTimeoutThreadFactory() {\n+\t\t\tSecurityManager s = System.getSecurityManager();\n+\t\t\tgroup = (s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4OTk0Mw=="}, "originalCommit": {"oid": "12ddf80ed1c7ba6fd35c47c4f35548ddaa771a05"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NzQ0MjcyOnYy", "diffSide": "RIGHT", "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODowODoyMlrOG5EKFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNjo0MzowOVrOG6PBRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5MDEzNQ==", "bodyText": "I don't think we need these two ifs as we shut down the executor afterwards.", "url": "https://github.com/junit-team/junit5/pull/2365#discussion_r462490135", "createdAt": "2020-07-29T18:08:22Z", "author": {"login": "marcphilipp"}, "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java", "diffHunk": "@@ -180,4 +182,30 @@ static void assertTimeoutPreemptively(Duration timeout, Executable executable, S\n \t\t}\n \t}\n \n+\t/**\n+\t * The thread factory used for preemptive timeout.\n+\t *\n+\t * This factory is the same with {@link Executors#defaultThreadFactory()} but provides more meaningful thread names,\n+\t * helpful for debugging purposes.\n+\t *\n+\t */\n+\tprivate static class TimeoutThreadFactory implements ThreadFactory {\n+\t\tprivate static final AtomicInteger threadNumber = new AtomicInteger(1);\n+\t\tprivate final ThreadGroup group;\n+\n+\t\tTimeoutThreadFactory() {\n+\t\t\tSecurityManager s = System.getSecurityManager();\n+\t\t\tgroup = (s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();\n+\t\t}\n+\n+\t\tpublic Thread newThread(Runnable r) {\n+\t\t\tThread t = new Thread(group, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);\n+\t\t\tif (t.isDaemon())\n+\t\t\t\tt.setDaemon(false);\n+\t\t\tif (t.getPriority() != Thread.NORM_PRIORITY)\n+\t\t\t\tt.setPriority(Thread.NORM_PRIORITY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12ddf80ed1c7ba6fd35c47c4f35548ddaa771a05"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYxNTg2Nw==", "bodyText": "I don't think it matters if we shutdown the executor or not. Even after shutdown the thread is not guaranteed to terminate so being a daemon or not matters.\nMoreover, in a setting where there many threads competing for CPU if these ones have low/high priority it might have an impact.", "url": "https://github.com/junit-team/junit5/pull/2365#discussion_r462615867", "createdAt": "2020-07-29T22:02:36Z", "author": {"login": "zabetak"}, "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java", "diffHunk": "@@ -180,4 +182,30 @@ static void assertTimeoutPreemptively(Duration timeout, Executable executable, S\n \t\t}\n \t}\n \n+\t/**\n+\t * The thread factory used for preemptive timeout.\n+\t *\n+\t * This factory is the same with {@link Executors#defaultThreadFactory()} but provides more meaningful thread names,\n+\t * helpful for debugging purposes.\n+\t *\n+\t */\n+\tprivate static class TimeoutThreadFactory implements ThreadFactory {\n+\t\tprivate static final AtomicInteger threadNumber = new AtomicInteger(1);\n+\t\tprivate final ThreadGroup group;\n+\n+\t\tTimeoutThreadFactory() {\n+\t\t\tSecurityManager s = System.getSecurityManager();\n+\t\t\tgroup = (s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();\n+\t\t}\n+\n+\t\tpublic Thread newThread(Runnable r) {\n+\t\t\tThread t = new Thread(group, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);\n+\t\t\tif (t.isDaemon())\n+\t\t\t\tt.setDaemon(false);\n+\t\t\tif (t.getPriority() != Thread.NORM_PRIORITY)\n+\t\t\t\tt.setPriority(Thread.NORM_PRIORITY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5MDEzNQ=="}, "originalCommit": {"oid": "12ddf80ed1c7ba6fd35c47c4f35548ddaa771a05"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc5NjQ4Nw==", "bodyText": "Even after shutdown the thread is not guaranteed to terminate so being a daemon or not matters.\n\nDo you mean we should make it a daemon thread to avoid it from preventing the VM to shut down?", "url": "https://github.com/junit-team/junit5/pull/2365#discussion_r462796487", "createdAt": "2020-07-30T07:16:19Z", "author": {"login": "marcphilipp"}, "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java", "diffHunk": "@@ -180,4 +182,30 @@ static void assertTimeoutPreemptively(Duration timeout, Executable executable, S\n \t\t}\n \t}\n \n+\t/**\n+\t * The thread factory used for preemptive timeout.\n+\t *\n+\t * This factory is the same with {@link Executors#defaultThreadFactory()} but provides more meaningful thread names,\n+\t * helpful for debugging purposes.\n+\t *\n+\t */\n+\tprivate static class TimeoutThreadFactory implements ThreadFactory {\n+\t\tprivate static final AtomicInteger threadNumber = new AtomicInteger(1);\n+\t\tprivate final ThreadGroup group;\n+\n+\t\tTimeoutThreadFactory() {\n+\t\t\tSecurityManager s = System.getSecurityManager();\n+\t\t\tgroup = (s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();\n+\t\t}\n+\n+\t\tpublic Thread newThread(Runnable r) {\n+\t\t\tThread t = new Thread(group, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);\n+\t\t\tif (t.isDaemon())\n+\t\t\t\tt.setDaemon(false);\n+\t\t\tif (t.getPriority() != Thread.NORM_PRIORITY)\n+\t\t\t\tt.setPriority(Thread.NORM_PRIORITY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5MDEzNQ=="}, "originalCommit": {"oid": "12ddf80ed1c7ba6fd35c47c4f35548ddaa771a05"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcxNjY3Nw==", "bodyText": "Basically, I am saying that we should decide if we want daemon or non daemon threads. If we don't specify it then we rely on the status of the parent thread. In this case, I could prefer non-daemon threads.", "url": "https://github.com/junit-team/junit5/pull/2365#discussion_r463716677", "createdAt": "2020-07-31T16:43:09Z", "author": {"login": "zabetak"}, "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java", "diffHunk": "@@ -180,4 +182,30 @@ static void assertTimeoutPreemptively(Duration timeout, Executable executable, S\n \t\t}\n \t}\n \n+\t/**\n+\t * The thread factory used for preemptive timeout.\n+\t *\n+\t * This factory is the same with {@link Executors#defaultThreadFactory()} but provides more meaningful thread names,\n+\t * helpful for debugging purposes.\n+\t *\n+\t */\n+\tprivate static class TimeoutThreadFactory implements ThreadFactory {\n+\t\tprivate static final AtomicInteger threadNumber = new AtomicInteger(1);\n+\t\tprivate final ThreadGroup group;\n+\n+\t\tTimeoutThreadFactory() {\n+\t\t\tSecurityManager s = System.getSecurityManager();\n+\t\t\tgroup = (s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();\n+\t\t}\n+\n+\t\tpublic Thread newThread(Runnable r) {\n+\t\t\tThread t = new Thread(group, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);\n+\t\t\tif (t.isDaemon())\n+\t\t\t\tt.setDaemon(false);\n+\t\t\tif (t.getPriority() != Thread.NORM_PRIORITY)\n+\t\t\t\tt.setPriority(Thread.NORM_PRIORITY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5MDEzNQ=="}, "originalCommit": {"oid": "12ddf80ed1c7ba6fd35c47c4f35548ddaa771a05"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTQyNjQzOnYy", "diffSide": "RIGHT", "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzoxMzozNVrOG5Wv1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzoxMzozNVrOG5Wv1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc5NDcwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\treturn new Thread(null, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);\n          \n          \n            \n            \t\t\treturn new Thread(r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement());", "url": "https://github.com/junit-team/junit5/pull/2365#discussion_r462794708", "createdAt": "2020-07-30T07:13:35Z", "author": {"login": "marcphilipp"}, "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java", "diffHunk": "@@ -180,4 +182,17 @@ static void assertTimeoutPreemptively(Duration timeout, Executable executable, S\n \t\t}\n \t}\n \n+\t/**\n+\t * The thread factory used for preemptive timeout.\n+\t *\n+\t * The factory creates threads with meaningful names, helpful for debugging purposes.\n+\t */\n+\tprivate static class TimeoutThreadFactory implements ThreadFactory {\n+\t\tprivate static final AtomicInteger threadNumber = new AtomicInteger(1);\n+\n+\t\tpublic Thread newThread(Runnable r) {\n+\t\t\treturn new Thread(null, r, \"junit-timeout-thread-\" + threadNumber.getAndIncrement(), 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87920a39547d9a662d6e941883f139c46206f8ec"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4071, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}