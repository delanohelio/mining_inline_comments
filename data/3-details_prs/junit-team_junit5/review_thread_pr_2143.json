{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5MjQ0NzI5", "number": 2143, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQxNTowMDo0NVrODV2M3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQxNTowMjoyN1rODV2NLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjM0NzE3OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/kotlin/osgi-conventions.gradle.kts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQxNTowMDo0NVrOFaRxfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQxNTowMDo0NVrOFaRxfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA5ODQ5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t# This tells bnd to ignore classes it files in `META-INF/versions/`\n          \n          \n            \n            \t\t\t# This tells bnd to ignore classes it finds in `META-INF/versions/`", "url": "https://github.com/junit-team/junit5/pull/2143#discussion_r363098494", "createdAt": "2020-01-05T15:00:45Z", "author": {"login": "sbrannen"}, "path": "buildSrc/src/main/kotlin/osgi-conventions.gradle.kts", "diffHunk": "@@ -0,0 +1,114 @@\n+import aQute.bnd.gradle.BundleTaskConvention\n+import aQute.bnd.gradle.FileSetRepositoryConvention\n+import aQute.bnd.gradle.Resolve\n+\n+plugins {\n+\t`java-library`\n+}\n+\n+// This task enhances `jar` and `shadowJar` tasks with the bnd\n+// `BundleTaskConvention` convention which allows for generating OSGi\n+// metadata into the jar\n+tasks.withType<Jar>().matching {\n+\ttask: Jar -> task.name == \"jar\" || task.name == \"shadowJar\"\n+}.configureEach {\n+\tval btc = BundleTaskConvention(this)\n+\n+\t// These are bnd instructions necessary for generating OSGi metadata.\n+\t// We've generalized these so that they are widely applicable limiting\n+\t// module configurations to special cases.\n+\tbtc.setBnd(\"\"\"\n+\t\t\t# These are the general rules for package imports.\n+\t\t\tImport-Package: \\\n+\t\t\t\t!org.apiguardian.api,\\\n+\t\t\t\torg.junit.platform.commons.logging;status=INTERNAL,\\\n+\t\t\t\tkotlin.*;resolution:=\"optional\",\\\n+\t\t\t\t*\n+\n+\t\t\t# This tells bnd not to complain if a module doesn't actually import\n+\t\t\t# the kotlin packages, but enough modules do to make it a default.\n+\t\t\t-fixupmessages.kotlin.import: \"Unused Import-Package instructions: \\\\[kotlin.*\\\\]\";is:=ignore\n+\n+\t\t\t# This tells bnd to ignore classes it files in `META-INF/versions/`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f07c3ac7ad74b3a9e8628dfe0fb93a0eee170f6b"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjM0NzQ2OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/kotlin/osgi-conventions.gradle.kts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQxNTowMToyNlrOFaRxqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQxNTowMToyNlrOFaRxqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA5ODUzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Bnd's Resolve task uses a properties file for it's configuration. This\n          \n          \n            \n            // Bnd's Resolve task uses a properties file for its configuration. This", "url": "https://github.com/junit-team/junit5/pull/2143#discussion_r363098539", "createdAt": "2020-01-05T15:01:26Z", "author": {"login": "sbrannen"}, "path": "buildSrc/src/main/kotlin/osgi-conventions.gradle.kts", "diffHunk": "@@ -0,0 +1,114 @@\n+import aQute.bnd.gradle.BundleTaskConvention\n+import aQute.bnd.gradle.FileSetRepositoryConvention\n+import aQute.bnd.gradle.Resolve\n+\n+plugins {\n+\t`java-library`\n+}\n+\n+// This task enhances `jar` and `shadowJar` tasks with the bnd\n+// `BundleTaskConvention` convention which allows for generating OSGi\n+// metadata into the jar\n+tasks.withType<Jar>().matching {\n+\ttask: Jar -> task.name == \"jar\" || task.name == \"shadowJar\"\n+}.configureEach {\n+\tval btc = BundleTaskConvention(this)\n+\n+\t// These are bnd instructions necessary for generating OSGi metadata.\n+\t// We've generalized these so that they are widely applicable limiting\n+\t// module configurations to special cases.\n+\tbtc.setBnd(\"\"\"\n+\t\t\t# These are the general rules for package imports.\n+\t\t\tImport-Package: \\\n+\t\t\t\t!org.apiguardian.api,\\\n+\t\t\t\torg.junit.platform.commons.logging;status=INTERNAL,\\\n+\t\t\t\tkotlin.*;resolution:=\"optional\",\\\n+\t\t\t\t*\n+\n+\t\t\t# This tells bnd not to complain if a module doesn't actually import\n+\t\t\t# the kotlin packages, but enough modules do to make it a default.\n+\t\t\t-fixupmessages.kotlin.import: \"Unused Import-Package instructions: \\\\[kotlin.*\\\\]\";is:=ignore\n+\n+\t\t\t# This tells bnd to ignore classes it files in `META-INF/versions/`\n+\t\t\t# because bnd doesn't yet support multi-release jars.\n+\t\t\t-fixupmessages.wrong.dir: \"Classes found in the wrong directory: \\\\{META-INF/versions/...\";is:=ignore\n+\n+\t\t\t# Don't scan for Class.forName package imports.\n+\t\t\t# See https://bnd.bndtools.org/instructions/noclassforname.html\n+\t\t\t-noclassforname: true\n+\n+\t\t\t# Don't add all the extra headers bnd normally adds.\n+\t\t\t# See https://bnd.bndtools.org/instructions/noextraheaders.html\n+\t\t\t-noextraheaders: true\n+\n+\t\t\t# Don't add the Private-Package header.\n+\t\t\t# See https://bnd.bndtools.org/instructions/removeheaders.html\n+\t\t\t-removeheaders: Private-Package\n+\n+\t\t\t# Add the custom buildSrc/src/main/kotlin/APIGuardianAnnotations.kt\n+\t\t\t# plugin to bnd\n+\t\t\t-plugin.apiguardian.annotations: ${APIGuardianAnnotations::class.qualifiedName}\n+\n+\t\t\t# Instruct the APIGuardianAnnotations how to operate.\n+\t\t\t# See https://bnd.bndtools.org/instructions/export-apiguardian.html\n+\t\t\t-export-apiguardian: *;version=${project.version}\n+\t\t\"\"\")\n+\n+\t// Add the convention to the jar task\n+\tconvention.plugins[\"bundle\"] = btc\n+\n+\tdoLast {\n+\t\t// Do the actual work putting OSGi stuff in the jar.\n+\t\tbtc.buildBundle()\n+\t}\n+}\n+\n+val osgiPropertiesFile = file(\"$buildDir/verifyOSGiProperties.bndrun\")\n+\n+// Bnd's Resolve task uses a properties file for it's configuration. This", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f07c3ac7ad74b3a9e8628dfe0fb93a0eee170f6b"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjM0NzY0OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/kotlin/osgi-conventions.gradle.kts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQxNTowMTo0NVrOFaRxxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQxNTowMTo0NVrOFaRxxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA5ODU2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // that it's metadata is valid. If the metadata is invalid this task will\n          \n          \n            \n            // that its metadata is valid. If the metadata is invalid this task will", "url": "https://github.com/junit-team/junit5/pull/2143#discussion_r363098565", "createdAt": "2020-01-05T15:01:45Z", "author": {"login": "sbrannen"}, "path": "buildSrc/src/main/kotlin/osgi-conventions.gradle.kts", "diffHunk": "@@ -0,0 +1,114 @@\n+import aQute.bnd.gradle.BundleTaskConvention\n+import aQute.bnd.gradle.FileSetRepositoryConvention\n+import aQute.bnd.gradle.Resolve\n+\n+plugins {\n+\t`java-library`\n+}\n+\n+// This task enhances `jar` and `shadowJar` tasks with the bnd\n+// `BundleTaskConvention` convention which allows for generating OSGi\n+// metadata into the jar\n+tasks.withType<Jar>().matching {\n+\ttask: Jar -> task.name == \"jar\" || task.name == \"shadowJar\"\n+}.configureEach {\n+\tval btc = BundleTaskConvention(this)\n+\n+\t// These are bnd instructions necessary for generating OSGi metadata.\n+\t// We've generalized these so that they are widely applicable limiting\n+\t// module configurations to special cases.\n+\tbtc.setBnd(\"\"\"\n+\t\t\t# These are the general rules for package imports.\n+\t\t\tImport-Package: \\\n+\t\t\t\t!org.apiguardian.api,\\\n+\t\t\t\torg.junit.platform.commons.logging;status=INTERNAL,\\\n+\t\t\t\tkotlin.*;resolution:=\"optional\",\\\n+\t\t\t\t*\n+\n+\t\t\t# This tells bnd not to complain if a module doesn't actually import\n+\t\t\t# the kotlin packages, but enough modules do to make it a default.\n+\t\t\t-fixupmessages.kotlin.import: \"Unused Import-Package instructions: \\\\[kotlin.*\\\\]\";is:=ignore\n+\n+\t\t\t# This tells bnd to ignore classes it files in `META-INF/versions/`\n+\t\t\t# because bnd doesn't yet support multi-release jars.\n+\t\t\t-fixupmessages.wrong.dir: \"Classes found in the wrong directory: \\\\{META-INF/versions/...\";is:=ignore\n+\n+\t\t\t# Don't scan for Class.forName package imports.\n+\t\t\t# See https://bnd.bndtools.org/instructions/noclassforname.html\n+\t\t\t-noclassforname: true\n+\n+\t\t\t# Don't add all the extra headers bnd normally adds.\n+\t\t\t# See https://bnd.bndtools.org/instructions/noextraheaders.html\n+\t\t\t-noextraheaders: true\n+\n+\t\t\t# Don't add the Private-Package header.\n+\t\t\t# See https://bnd.bndtools.org/instructions/removeheaders.html\n+\t\t\t-removeheaders: Private-Package\n+\n+\t\t\t# Add the custom buildSrc/src/main/kotlin/APIGuardianAnnotations.kt\n+\t\t\t# plugin to bnd\n+\t\t\t-plugin.apiguardian.annotations: ${APIGuardianAnnotations::class.qualifiedName}\n+\n+\t\t\t# Instruct the APIGuardianAnnotations how to operate.\n+\t\t\t# See https://bnd.bndtools.org/instructions/export-apiguardian.html\n+\t\t\t-export-apiguardian: *;version=${project.version}\n+\t\t\"\"\")\n+\n+\t// Add the convention to the jar task\n+\tconvention.plugins[\"bundle\"] = btc\n+\n+\tdoLast {\n+\t\t// Do the actual work putting OSGi stuff in the jar.\n+\t\tbtc.buildBundle()\n+\t}\n+}\n+\n+val osgiPropertiesFile = file(\"$buildDir/verifyOSGiProperties.bndrun\")\n+\n+// Bnd's Resolve task uses a properties file for it's configuration. This\n+// task writes out the properties necessary for it to verify the OSGi\n+// metadata.\n+val osgiProperties by tasks.registering(WriteProperties::class) {\n+\toutputFile = osgiPropertiesFile\n+\tproperty(\"-standalone\", true)\n+\tproperty(\"-runee\", \"JavaSE-${Versions.jvmTarget}\")\n+\tproperty(\"-runrequires\", \"osgi.identity;filter:='(osgi.identity=${project.name})'\")\n+\tproperty(\"-runsystempackages\", \"jdk.internal.misc,sun.misc\")\n+}\n+\n+val osgiVerification by configurations.creating {\n+\textendsFrom(configurations.runtimeClasspath.get())\n+}\n+\n+// Bnd's Resolve task is what verifies that a jar can be used in OSGi and\n+// that it's metadata is valid. If the metadata is invalid this task will", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f07c3ac7ad74b3a9e8628dfe0fb93a0eee170f6b"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjM0Nzk2OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/kotlin/osgi-conventions.gradle.kts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQxNTowMjoyN1rOFaRx-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQxNTowMjoyN1rOFaRx-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA5ODYxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // afterEvaluate.\n          \n          \n            \n            // after evaluation.", "url": "https://github.com/junit-team/junit5/pull/2143#discussion_r363098616", "createdAt": "2020-01-05T15:02:27Z", "author": {"login": "sbrannen"}, "path": "buildSrc/src/main/kotlin/osgi-conventions.gradle.kts", "diffHunk": "@@ -0,0 +1,114 @@\n+import aQute.bnd.gradle.BundleTaskConvention\n+import aQute.bnd.gradle.FileSetRepositoryConvention\n+import aQute.bnd.gradle.Resolve\n+\n+plugins {\n+\t`java-library`\n+}\n+\n+// This task enhances `jar` and `shadowJar` tasks with the bnd\n+// `BundleTaskConvention` convention which allows for generating OSGi\n+// metadata into the jar\n+tasks.withType<Jar>().matching {\n+\ttask: Jar -> task.name == \"jar\" || task.name == \"shadowJar\"\n+}.configureEach {\n+\tval btc = BundleTaskConvention(this)\n+\n+\t// These are bnd instructions necessary for generating OSGi metadata.\n+\t// We've generalized these so that they are widely applicable limiting\n+\t// module configurations to special cases.\n+\tbtc.setBnd(\"\"\"\n+\t\t\t# These are the general rules for package imports.\n+\t\t\tImport-Package: \\\n+\t\t\t\t!org.apiguardian.api,\\\n+\t\t\t\torg.junit.platform.commons.logging;status=INTERNAL,\\\n+\t\t\t\tkotlin.*;resolution:=\"optional\",\\\n+\t\t\t\t*\n+\n+\t\t\t# This tells bnd not to complain if a module doesn't actually import\n+\t\t\t# the kotlin packages, but enough modules do to make it a default.\n+\t\t\t-fixupmessages.kotlin.import: \"Unused Import-Package instructions: \\\\[kotlin.*\\\\]\";is:=ignore\n+\n+\t\t\t# This tells bnd to ignore classes it files in `META-INF/versions/`\n+\t\t\t# because bnd doesn't yet support multi-release jars.\n+\t\t\t-fixupmessages.wrong.dir: \"Classes found in the wrong directory: \\\\{META-INF/versions/...\";is:=ignore\n+\n+\t\t\t# Don't scan for Class.forName package imports.\n+\t\t\t# See https://bnd.bndtools.org/instructions/noclassforname.html\n+\t\t\t-noclassforname: true\n+\n+\t\t\t# Don't add all the extra headers bnd normally adds.\n+\t\t\t# See https://bnd.bndtools.org/instructions/noextraheaders.html\n+\t\t\t-noextraheaders: true\n+\n+\t\t\t# Don't add the Private-Package header.\n+\t\t\t# See https://bnd.bndtools.org/instructions/removeheaders.html\n+\t\t\t-removeheaders: Private-Package\n+\n+\t\t\t# Add the custom buildSrc/src/main/kotlin/APIGuardianAnnotations.kt\n+\t\t\t# plugin to bnd\n+\t\t\t-plugin.apiguardian.annotations: ${APIGuardianAnnotations::class.qualifiedName}\n+\n+\t\t\t# Instruct the APIGuardianAnnotations how to operate.\n+\t\t\t# See https://bnd.bndtools.org/instructions/export-apiguardian.html\n+\t\t\t-export-apiguardian: *;version=${project.version}\n+\t\t\"\"\")\n+\n+\t// Add the convention to the jar task\n+\tconvention.plugins[\"bundle\"] = btc\n+\n+\tdoLast {\n+\t\t// Do the actual work putting OSGi stuff in the jar.\n+\t\tbtc.buildBundle()\n+\t}\n+}\n+\n+val osgiPropertiesFile = file(\"$buildDir/verifyOSGiProperties.bndrun\")\n+\n+// Bnd's Resolve task uses a properties file for it's configuration. This\n+// task writes out the properties necessary for it to verify the OSGi\n+// metadata.\n+val osgiProperties by tasks.registering(WriteProperties::class) {\n+\toutputFile = osgiPropertiesFile\n+\tproperty(\"-standalone\", true)\n+\tproperty(\"-runee\", \"JavaSE-${Versions.jvmTarget}\")\n+\tproperty(\"-runrequires\", \"osgi.identity;filter:='(osgi.identity=${project.name})'\")\n+\tproperty(\"-runsystempackages\", \"jdk.internal.misc,sun.misc\")\n+}\n+\n+val osgiVerification by configurations.creating {\n+\textendsFrom(configurations.runtimeClasspath.get())\n+}\n+\n+// Bnd's Resolve task is what verifies that a jar can be used in OSGi and\n+// that it's metadata is valid. If the metadata is invalid this task will\n+// fail.\n+val verifyOSGi by tasks.registering(Resolve::class) {\n+\tdependsOn(osgiProperties)\n+\tsetBndrun(osgiPropertiesFile)\n+\tisReportOptional = false\n+\twithConvention(FileSetRepositoryConvention::class) {\n+\n+\t\t// By default bnd will use jars found in:\n+\t\t// 1. project.sourceSets.main.runtimeClasspath\n+\t\t// 2. project.configurations.archives.artifacts.files\n+\t\t// to validate the metadata.\n+\t\t// This adds jars defined in `osgiVerification` also so that bnd\n+\t\t// can use them to validate the metadata without causing those to\n+\t\t// end up in the dependencies of those projects.\n+\t\tbundles(osgiVerification)\n+\t}\n+}\n+\n+tasks.check {\n+\tdependsOn(verifyOSGi)\n+}\n+\n+// The ${project.description}, for some odd reason, is only available\n+// afterEvaluate.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f07c3ac7ad74b3a9e8628dfe0fb93a0eee170f6b"}, "originalPosition": 108}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4115, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}