{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4NjM2Njk0", "number": 2238, "title": "Allow using DynamicTestExecutor with custom listener", "bodyText": "Add Node.DynamicTestExecutor#execute(TestDescriptor, EngineExecutionListener) for engines that wish to pass a custom\nEngineExecutionListener and cancel or wait for the execution of a\nsubmitted test via the returned Future.\nAdd EngineExecutionListener.NOOP and change all declared methods to\nhave empty default implementations.\n\nResolves #2188.\n\nDefinition of Done\n\n There are no TODOs left in the code\n Method preconditions are checked and documented in the method's Javadoc\n Coding conventions (e.g. for logging) have been followed\n Change is covered by automated tests including corner cases, errors, and exception handling\n Public API has Javadoc and @API annotations\n Change is documented in the User Guide and Release Notes\n All continuous integration builds pass", "createdAt": "2020-04-04T16:35:46Z", "url": "https://github.com/junit-team/junit5/pull/2238", "merged": true, "mergeCommit": {"oid": "5c64fceacb596a182a25853f7fcaeaefe23abfa7"}, "closed": true, "closedAt": "2020-04-19T07:00:29Z", "author": {"login": "marcphilipp"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcUYLDrAH2gAyMzk4NjM2Njk0OjFiMDQyNjJjZTI0ODg5ZTMyOTg0NWI5N2I1MmUwMzM4YmQ4YjE0ZTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcUkniSAH2gAyMzk4NjM2Njk0OmMzYWE3NjQ4ZGUxY2MzODcwM2RiMWU0OWRhYjU3MzhhYjE3MzcxYzg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1b04262ce24889e329845b97b52e0338bd8b14e2", "author": {"user": {"login": "marcphilipp", "name": "Marc Philipp"}}, "url": "https://github.com/junit-team/junit5/commit/1b04262ce24889e329845b97b52e0338bd8b14e2", "committedDate": "2020-04-04T16:34:22Z", "message": "Allow using DynamicTestExecutor with custom listener\n\n- Add `Node.DynamicTestExecutor#execute(TestDescriptor,\n  EngineExecutionListener)` for engines that wish to pass a custom\n  `EngineExecutionListener` and cancel or wait for the execution of a\n  submitted test via the returned `Future`.\n- Add `EngineExecutionListener.NOOP` and change all declared methods to\n  have empty default implementations.\n\nResolves #2188."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01c3b14db7c13aaf21ebbe61c416dec60a1081aa", "author": {"user": {"login": "marcphilipp", "name": "Marc Philipp"}}, "url": "https://github.com/junit-team/junit5/commit/01c3b14db7c13aaf21ebbe61c416dec60a1081aa", "committedDate": "2020-04-04T16:40:56Z", "message": "Document and check preconditions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6abce4f10f549c7e6d2ba03d8d80efa866475936", "author": {"user": {"login": "marcphilipp", "name": "Marc Philipp"}}, "url": "https://github.com/junit-team/junit5/commit/6abce4f10f549c7e6d2ba03d8d80efa866475936", "committedDate": "2020-04-04T16:45:53Z", "message": "Fix flakiness"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3Nzg3ODYy", "url": "https://github.com/junit-team/junit5/pull/2238#pullrequestreview-387787862", "createdAt": "2020-04-05T07:04:09Z", "commit": {"oid": "6abce4f10f549c7e6d2ba03d8d80efa866475936"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwNzowNDowOVrOGA9asg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwNzowNDowOVrOGA9asg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY1OTQ0Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertTrue(interrupted.get(), \"child was interrupted\");\n          \n          \n            \n            \t\tassertTrue(interrupted.get(), \"dynamic node was interrupted\");", "url": "https://github.com/junit-team/junit5/pull/2238#discussion_r403659442", "createdAt": "2020-04-05T07:04:09Z", "author": {"login": "marcphilipp"}, "path": "platform-tests/src/test/java/org/junit/platform/engine/support/hierarchical/HierarchicalTestExecutorTests.java", "diffHunk": "@@ -516,10 +529,78 @@ void executesDynamicTestDescriptorsUsingContainerAndTestType() throws Exception\n \t\t\tFAILED, SUCCESSFUL, SUCCESSFUL);\n \t}\n \n-\tprivate Answer<Object> registerAndExecute(TestDescriptor dynamicChild) {\n+\t@Test\n+\tvoid executesDynamicTestDescriptorsWithCustomListener() {\n+\n+\t\tUniqueId leafUniqueId = UniqueId.root(\"leaf\", \"child leaf\");\n+\t\tMyLeaf child = spy(new MyLeaf(leafUniqueId));\n+\t\tMyLeaf dynamicTestDescriptor = spy(new MyLeaf(leafUniqueId.append(\"dynamic\", \"child\")));\n+\t\troot.addChild(child);\n+\n+\t\tEngineExecutionListener anotherListener = mock(EngineExecutionListener.class);\n+\t\twhen(child.execute(any(), any())).thenAnswer(\n+\t\t\tuseDynamicTestExecutor(executor -> executor.execute(dynamicTestDescriptor, anotherListener)));\n+\n+\t\texecutor.execute();\n+\n+\t\tInOrder inOrder = inOrder(listener, anotherListener, root, child, dynamicTestDescriptor);\n+\t\tinOrder.verify(anotherListener).dynamicTestRegistered(dynamicTestDescriptor);\n+\t\tinOrder.verify(anotherListener).executionStarted(dynamicTestDescriptor);\n+\t\tinOrder.verify(dynamicTestDescriptor).execute(eq(rootContext), any());\n+\t\tinOrder.verify(dynamicTestDescriptor).nodeFinished(rootContext, dynamicTestDescriptor, successful());\n+\t\tinOrder.verify(anotherListener).executionFinished(dynamicTestDescriptor, successful());\n+\t}\n+\n+\t@Test\n+\tvoid canAbortExecutionOfDynamicChild() throws Exception {\n+\n+\t\tUniqueId leafUniqueId = UniqueId.root(\"leaf\", \"child leaf\");\n+\t\tMyLeaf child = spy(new MyLeaf(leafUniqueId));\n+\t\tMyLeaf dynamicTestDescriptor = spy(new MyLeaf(leafUniqueId.append(\"dynamic\", \"child\")));\n+\t\troot.addChild(child);\n+\n+\t\tvar startedLatch = new CountDownLatch(1);\n+\t\tvar interrupted = new CompletableFuture<Boolean>();\n+\n+\t\twhen(child.execute(any(), any())).thenAnswer(useDynamicTestExecutor(executor -> {\n+\t\t\tFuture<?> future = executor.execute(dynamicTestDescriptor, EngineExecutionListener.NOOP);\n+\t\t\tstartedLatch.await();\n+\t\t\tfuture.cancel(true);\n+\t\t\texecutor.awaitFinished();\n+\t\t}));\n+\t\twhen(dynamicTestDescriptor.execute(any(), any())).thenAnswer(invocation -> {\n+\t\t\tstartedLatch.countDown();\n+\t\t\ttry {\n+\t\t\t\tnew CountDownLatch(1).await(); // block until interrupted\n+\t\t\t\tinterrupted.complete(false);\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\tcatch (InterruptedException e) {\n+\t\t\t\tinterrupted.complete(true);\n+\t\t\t\tthrow e;\n+\t\t\t}\n+\t\t});\n+\n+\t\tConfigurationParameters parameters = ConfigurationParametersFactoryForTests.create(Map.of(//\n+\t\t\tDefaultParallelExecutionConfigurationStrategy.CONFIG_STRATEGY_PROPERTY_NAME, \"fixed\", //\n+\t\t\tDefaultParallelExecutionConfigurationStrategy.CONFIG_FIXED_PARALLELISM_PROPERTY_NAME, \"2\"));\n+\n+\t\ttry (var executorService = new ForkJoinPoolHierarchicalTestExecutorService(parameters)) {\n+\t\t\tcreateExecutor(executorService).execute().get();\n+\t\t}\n+\n+\t\tverify(listener).executionFinished(child, successful());\n+\t\tassertTrue(interrupted.get(), \"child was interrupted\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6abce4f10f549c7e6d2ba03d8d80efa866475936"}, "originalPosition": 146}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3aa7648de1cc38703db1e49dab5738ab17371c8", "author": {"user": {"login": "marcphilipp", "name": "Marc Philipp"}}, "url": "https://github.com/junit-team/junit5/commit/c3aa7648de1cc38703db1e49dab5738ab17371c8", "committedDate": "2020-04-05T07:04:20Z", "message": "Clarify assertion message"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3505, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}