{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MjkxMDEz", "number": 2271, "reviewThreads": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDo1MjoxMlrOD10FZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxOTo0MzoyOVrOECS-Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NzU0NDcxOnYy", "diffSide": "RIGHT", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDo1MjoxMlrOGLbesg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDo1MjoxMlrOGLbesg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYzNzc0Ng==", "bodyText": "Set a @name annotation. My recommendation would be org.junit.Test", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414637746", "createdAt": "2020-04-24T14:52:12Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.end();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();\n+\t\tevent.begin();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tevent.end();\n+\t\tevent.result = result.getStatus().toString();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\t@Description(\"Test Plan Execution\")\n+\tstatic class TestPlanExecutionEvent extends Event {\n+\t\t@Label(\"Does test plan contain tests?\")\n+\t\tboolean containsTests;\n+\t\t@Label(\"UniqueIds of the root containers\")\n+\t\tString roots;\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\tstatic abstract class TestEvent extends Event {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NzU0NjI5OnYy", "diffSide": "RIGHT", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDo1MjozM1rOGLbfsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDo1MjozM1rOGLbfsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYzODAwMg==", "bodyText": "Should be \"Unique Id\"", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414638002", "createdAt": "2020-04-24T14:52:33Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.end();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();\n+\t\tevent.begin();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tevent.end();\n+\t\tevent.result = result.getStatus().toString();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\t@Description(\"Test Plan Execution\")\n+\tstatic class TestPlanExecutionEvent extends Event {\n+\t\t@Label(\"Does test plan contain tests?\")\n+\t\tboolean containsTests;\n+\t\t@Label(\"UniqueIds of the root containers\")\n+\t\tString roots;\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\tstatic abstract class TestEvent extends Event {\n+\t\t@Label(\"UniqueId\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NzU1MjIzOnYy", "diffSide": "RIGHT", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDo1Mzo0M1rOGLbjQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDo1Mzo0M1rOGLbjQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYzODkxMw==", "bodyText": "Set a @Label. My recommendation would be \"Test\".", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414638913", "createdAt": "2020-04-24T14:53:43Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.end();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();\n+\t\tevent.begin();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tevent.end();\n+\t\tevent.result = result.getStatus().toString();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\t@Description(\"Test Plan Execution\")\n+\tstatic class TestPlanExecutionEvent extends Event {\n+\t\t@Label(\"Does test plan contain tests?\")\n+\t\tboolean containsTests;\n+\t\t@Label(\"UniqueIds of the root containers\")\n+\t\tString roots;\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\tstatic abstract class TestEvent extends Event {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NzU2MTg0OnYy", "diffSide": "RIGHT", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDo1NTo0MlrOGLbpIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDo1NTo0MlrOGLbpIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0MDQxOA==", "bodyText": "Should be Label, not Description", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414640418", "createdAt": "2020-04-24T14:55:42Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.end();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();\n+\t\tevent.begin();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tevent.end();\n+\t\tevent.result = result.getStatus().toString();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\t@Description(\"Test Plan Execution\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NzU2NDUzOnYy", "diffSide": "RIGHT", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDo1NjoxMlrOGLbqsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDo1NjoxMlrOGLbqsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0MDgxOQ==", "bodyText": "A better label would be \"Contains Tests\"", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414640819", "createdAt": "2020-04-24T14:56:12Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.end();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();\n+\t\tevent.begin();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tevent.end();\n+\t\tevent.result = result.getStatus().toString();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\t@Description(\"Test Plan Execution\")\n+\tstatic class TestPlanExecutionEvent extends Event {\n+\t\t@Label(\"Does test plan contain tests?\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NzU2OTA5OnYy", "diffSide": "RIGHT", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDo1NzowNVrOGLbtiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDo1NzowNVrOGLbtiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0MTU0NA==", "bodyText": "A better label would be \"Root Containers Ids\"", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414641544", "createdAt": "2020-04-24T14:57:05Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.end();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();\n+\t\tevent.begin();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tevent.end();\n+\t\tevent.result = result.getStatus().toString();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\t@Description(\"Test Plan Execution\")\n+\tstatic class TestPlanExecutionEvent extends Event {\n+\t\t@Label(\"Does test plan contain tests?\")\n+\t\tboolean containsTests;\n+\t\t@Label(\"UniqueIds of the root containers\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NzU3MTEyOnYy", "diffSide": "RIGHT", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDo1NzoyOFrOGLburw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDo1NzoyOFrOGLburw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0MTgzOQ==", "bodyText": "A better fields name would be \"rootContainerIds\"", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414641839", "createdAt": "2020-04-24T14:57:28Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.end();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();\n+\t\tevent.begin();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tevent.end();\n+\t\tevent.result = result.getStatus().toString();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\t@Description(\"Test Plan Execution\")\n+\tstatic class TestPlanExecutionEvent extends Event {\n+\t\t@Label(\"Does test plan contain tests?\")\n+\t\tboolean containsTests;\n+\t\t@Label(\"UniqueIds of the root containers\")\n+\t\tString roots;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NzU3MjQxOnYy", "diffSide": "RIGHT", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDo1Nzo0MlrOGLbveA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDo1Nzo0MlrOGLbveA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0MjA0MA==", "bodyText": "\"Unique Id\"", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414642040", "createdAt": "2020-04-24T14:57:42Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.end();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();\n+\t\tevent.begin();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tevent.end();\n+\t\tevent.result = result.getStatus().toString();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\t@Description(\"Test Plan Execution\")\n+\tstatic class TestPlanExecutionEvent extends Event {\n+\t\t@Label(\"Does test plan contain tests?\")\n+\t\tboolean containsTests;\n+\t\t@Label(\"UniqueIds of the root containers\")\n+\t\tString roots;\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\tstatic abstract class TestEvent extends Event {\n+\t\t@Label(\"UniqueId\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NzU3ODYzOnYy", "diffSide": "RIGHT", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDo1ODo1NVrOGLbzLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNjo0MToxOFrOGLgHUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0Mjk4OQ==", "bodyText": "Why not use a volatile?", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414642989", "createdAt": "2020-04-24T14:58:55Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcxMzY4Mg==", "bodyText": "I like the similarity to the map declared next to it: an atomic reference is a single-entry map", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414713682", "createdAt": "2020-04-24T16:41:18Z", "author": {"login": "sormuras"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0Mjk4OQ=="}, "originalCommit": {"oid": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NzU5NTM1OnYy", "diffSide": "RIGHT", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNTowMjowNFrOGLb81Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNjo1NDowMlrOGLgmFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0NTQ2MQ==", "bodyText": "If this is a path, consider using \"/\" as a separator, i.e. \"id1 / id2 / id3\". Tabs may result in different number of spaces, or may not work at all, if visualized in a GUI.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414645461", "createdAt": "2020-04-24T15:02:04Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcxNTU0OQ==", "bodyText": "The format defined by UniqueId uses / as an element separator char -- so, that's already taken. See details at:\n\n  \n    \n      junit5/junit-platform-engine/src/main/java/org/junit/platform/engine/UniqueIdFormat.java\n    \n    \n         Line 42\n      in\n      1978513\n    \n    \n    \n    \n\n        \n          \n           private static final UniqueIdFormat defaultFormat = new UniqueIdFormat('[', ':', ']', '/'); \n        \n    \n  \n\n\nUsing tab \\t is not a good choice either. Guess, we need to define a human-visible, URI-encodeable unique-id separator char.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414715549", "createdAt": "2020-04-24T16:44:21Z", "author": {"login": "sormuras"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0NTQ2MQ=="}, "originalCommit": {"oid": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcyMTU1OA==", "bodyText": "Using # for the time being.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414721558", "createdAt": "2020-04-24T16:54:02Z", "author": {"login": "sormuras"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0NTQ2MQ=="}, "originalCommit": {"oid": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NzYwMTYzOnYy", "diffSide": "RIGHT", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNTowMzoxOFrOGLcAlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNTowMzoxOFrOGLcAlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0NjQyMQ==", "bodyText": "No need to call end(). It is implicit in commit()", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414646421", "createdAt": "2020-04-24T15:03:18Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.end();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NzYwNDgyOnYy", "diffSide": "RIGHT", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNTowNDowM1rOGLcCmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNTowNDowM1rOGLcCmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0NjkzNg==", "bodyText": "Should be label", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414646936", "createdAt": "2020-04-24T15:04:03Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.end();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();\n+\t\tevent.begin();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tevent.end();\n+\t\tevent.result = result.getStatus().toString();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\t@Description(\"Test Plan Execution\")\n+\tstatic class TestPlanExecutionEvent extends Event {\n+\t\t@Label(\"Does test plan contain tests?\")\n+\t\tboolean containsTests;\n+\t\t@Label(\"UniqueIds of the root containers\")\n+\t\tString roots;\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\tstatic abstract class TestEvent extends Event {\n+\t\t@Label(\"UniqueId\")\n+\t\tString uniqueId;\n+\t\t@Label(\"Display Name\")\n+\t\tString displayName;\n+\t}\n+\n+\t@Description(\"Dynamic Test Registration\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NzYwNzc3OnYy", "diffSide": "RIGHT", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNTowNDozOVrOGLcEcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwNTo0MDo0MlrOGLw0Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0NzQxMQ==", "bodyText": "Missing Category and Name(\"org.junit.DynamicTestRegistration\")", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414647411", "createdAt": "2020-04-24T15:04:39Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.end();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();\n+\t\tevent.begin();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tevent.end();\n+\t\tevent.result = result.getStatus().toString();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\t@Description(\"Test Plan Execution\")\n+\tstatic class TestPlanExecutionEvent extends Event {\n+\t\t@Label(\"Does test plan contain tests?\")\n+\t\tboolean containsTests;\n+\t\t@Label(\"UniqueIds of the root containers\")\n+\t\tString roots;\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\tstatic abstract class TestEvent extends Event {\n+\t\t@Label(\"UniqueId\")\n+\t\tString uniqueId;\n+\t\t@Label(\"Display Name\")\n+\t\tString displayName;\n+\t}\n+\n+\t@Description(\"Dynamic Test Registration\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcyMDEwMg==", "bodyText": "Is @Category not inherited?", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414720102", "createdAt": "2020-04-24T16:51:44Z", "author": {"login": "sormuras"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.end();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();\n+\t\tevent.begin();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tevent.end();\n+\t\tevent.result = result.getStatus().toString();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\t@Description(\"Test Plan Execution\")\n+\tstatic class TestPlanExecutionEvent extends Event {\n+\t\t@Label(\"Does test plan contain tests?\")\n+\t\tboolean containsTests;\n+\t\t@Label(\"UniqueIds of the root containers\")\n+\t\tString roots;\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\tstatic abstract class TestEvent extends Event {\n+\t\t@Label(\"UniqueId\")\n+\t\tString uniqueId;\n+\t\t@Label(\"Display Name\")\n+\t\tString displayName;\n+\t}\n+\n+\t@Description(\"Dynamic Test Registration\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0NzQxMQ=="}, "originalCommit": {"oid": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk4NzM1OQ==", "bodyText": "It is inherited.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414987359", "createdAt": "2020-04-25T05:40:42Z", "author": {"login": "sormuras"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.end();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();\n+\t\tevent.begin();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tevent.end();\n+\t\tevent.result = result.getStatus().toString();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\t@Description(\"Test Plan Execution\")\n+\tstatic class TestPlanExecutionEvent extends Event {\n+\t\t@Label(\"Does test plan contain tests?\")\n+\t\tboolean containsTests;\n+\t\t@Label(\"UniqueIds of the root containers\")\n+\t\tString roots;\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\tstatic abstract class TestEvent extends Event {\n+\t\t@Label(\"UniqueId\")\n+\t\tString uniqueId;\n+\t\t@Label(\"Display Name\")\n+\t\tString displayName;\n+\t}\n+\n+\t@Description(\"Dynamic Test Registration\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0NzQxMQ=="}, "originalCommit": {"oid": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NzYxMjk1OnYy", "diffSide": "RIGHT", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNTowNTo0OVrOGLcHqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNTowNTo0OVrOGLcHqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0ODIzMw==", "bodyText": "Set the fields before timing starts with begin()", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414648233", "createdAt": "2020-04-24T15:05:49Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.end();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();\n+\t\tevent.begin();\n+\t\tevent.uniqueId = test.getUniqueId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NzYxOTQ0OnYy", "diffSide": "RIGHT", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNTowNjo1OFrOGLcLYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMDozMDoxMFrOGLzpkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0OTE4NQ==", "bodyText": "Why not assign field directly, i.e. testExecutionEventMap = new ConcurrentHashMap<>()?", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414649185", "createdAt": "2020-04-24T15:06:58Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcwOTY5Ng==", "bodyText": "I like field declarations to be separated from their assignment.\nThe constructor is a good place to do that work, which isn't much here, yet. But you never know.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414709696", "createdAt": "2020-04-24T16:35:03Z", "author": {"login": "sormuras"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0OTE4NQ=="}, "originalCommit": {"oid": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk5MDIwNw==", "bodyText": "Why assign a field directly? Performance?", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414990207", "createdAt": "2020-04-25T05:58:22Z", "author": {"login": "sormuras"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0OTE4NQ=="}, "originalCommit": {"oid": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAzMzc0NA==", "bodyText": "Less code.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r415033744", "createdAt": "2020-04-25T10:30:10Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0OTE4NQ=="}, "originalCommit": {"oid": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODM2ODEwOnYy", "diffSide": "RIGHT", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODowMzozMFrOGLjL1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNzozMDo1M1rOGNGkfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc2Mzk4OQ==", "bodyText": "\u2753 Does JFR support explicit nesting of events?", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414763989", "createdAt": "2020-04-24T18:03:30Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+import jdk.jfr.Name;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.rootContainerIds = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(\n+\t\t\tCollectors.joining(\"#\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74a383cec2c8ef83a68b717452ff2a0f149b7ee6"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc3NjA1OQ==", "bodyText": "Yes, but it is usually good to avoid from a visualization point of view.\nThis image from JMC shows what happens in the JVM (thread sleep, lock contention etc) using events from JFR. A JUnit test event would be visualized on separate lane next to the JVM event so you can see what made a test slow, i.e a call to Thread.sleep().\nNested events are painted on top of each other, so it can be hard to see. Preferably only the actual test (the leaf nodes) should be represented by the Test event. If you want to have information about test containers/groups, it would be better to separate them into their own events, or perhaps leave them out completely.\nhttps://docs.oracle.com/javase/10/troubleshoot/img/jfr-eventgraph.png", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414776059", "createdAt": "2020-04-24T18:24:06Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+import jdk.jfr.Name;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.rootContainerIds = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(\n+\t\t\tCollectors.joining(\"#\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc2Mzk4OQ=="}, "originalCommit": {"oid": "74a383cec2c8ef83a68b717452ff2a0f149b7ee6"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk4ODY2OA==", "bodyText": "[...] If you want to have information about test containers/groups, it would be better to separate them into their own events, or perhaps leave them out completely.\n\nGood idea.\nCandidates to be left out:\n\nTest Plan\nDynamic Test Registration\nTest Container\n\nThey don't contribute much to a better understanding what happened in a test run. Also, the recorded \"Unique Id\" field already contains the hierarchical information of a test and its parents.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414988668", "createdAt": "2020-04-25T05:48:37Z", "author": {"login": "sormuras"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+import jdk.jfr.Name;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.rootContainerIds = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(\n+\t\t\tCollectors.joining(\"#\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc2Mzk4OQ=="}, "originalCommit": {"oid": "74a383cec2c8ef83a68b717452ff2a0f149b7ee6"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0MTUwNQ==", "bodyText": "I would leave them out for now. It will reduce the noise. If there is a need later on, they can be added.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r415041505", "createdAt": "2020-04-25T11:17:27Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+import jdk.jfr.Name;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.rootContainerIds = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(\n+\t\t\tCollectors.joining(\"#\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc2Mzk4OQ=="}, "originalCommit": {"oid": "74a383cec2c8ef83a68b717452ff2a0f149b7ee6"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM5MjMxNg==", "bodyText": "Reduced the scope to \"Test Plan\" and \"Test\" (w/o containers) events for the time being.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r416392316", "createdAt": "2020-04-28T07:30:53Z", "author": {"login": "sormuras"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+import jdk.jfr.Name;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.rootContainerIds = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(\n+\t\t\tCollectors.joining(\"#\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc2Mzk4OQ=="}, "originalCommit": {"oid": "74a383cec2c8ef83a68b717452ff2a0f149b7ee6"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3ODM3MDEzOnYy", "diffSide": "RIGHT", "path": "junit-platform-launcher/src/module/org.junit.platform.launcher/module-info.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODowNDowNVrOGLjNEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwNTo1NDoxNVrOGLw8zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc2NDMwNQ==", "bodyText": "This should be declared in META-INF/services so it works on the classpath as well, shouldn't it?", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414764305", "createdAt": "2020-04-24T18:04:05Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-launcher/src/module/org.junit.platform.launcher/module-info.java", "diffHunk": "@@ -30,4 +31,7 @@\n \n \tuses org.junit.platform.engine.TestEngine;\n \tuses org.junit.platform.launcher.TestExecutionListener;\n+\n+\tprovides org.junit.platform.launcher.TestExecutionListener\n+\t\t\twith org.junit.platform.launcher.listeners.FlightRecordingListener;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74a383cec2c8ef83a68b717452ff2a0f149b7ee6"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk4OTUxOA==", "bodyText": "Just wanted to start small: ModularUserGuideTests\nStill, I think, we should register this listener by default, i.e. programmatically. Hard-coded into the constructor of: TestExecutionListenerRegistry", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414989518", "createdAt": "2020-04-25T05:54:15Z", "author": {"login": "sormuras"}, "path": "junit-platform-launcher/src/module/org.junit.platform.launcher/module-info.java", "diffHunk": "@@ -30,4 +31,7 @@\n \n \tuses org.junit.platform.engine.TestEngine;\n \tuses org.junit.platform.launcher.TestExecutionListener;\n+\n+\tprovides org.junit.platform.launcher.TestExecutionListener\n+\t\t\twith org.junit.platform.launcher.listeners.FlightRecordingListener;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc2NDMwNQ=="}, "originalCommit": {"oid": "74a383cec2c8ef83a68b717452ff2a0f149b7ee6"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDUwNDQ4OnYy", "diffSide": "RIGHT", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMTowNzozM1rOGL0Blw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNzowNjo1OVrOGNFxMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAzOTg5NQ==", "bodyText": "@category(\"JUnit\"", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r415039895", "createdAt": "2020-04-25T11:07:33Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -112,27 +120,38 @@ public void executionFinished(TestIdentifier test, TestExecutionResult result) {\n \t@Name(\"org.junit.Test\")\n \t@Label(\"Test\")\n \tstatic abstract class TestEvent extends Event {\n-\n \t\t@Label(\"Unique Id\")\n \t\tString uniqueId;\n-\n \t\t@Label(\"Display Name\")\n \t\tString displayName;\n \t}\n \n \t@Name(\"org.junit.DynamicTestRegistration\")\n+\t@Label(\"Dynamic Test Registration\")\n \tstatic class DynamicTestEvent extends TestEvent {\n \t}\n \n \t@Name(\"org.junit.SkippedTest\")\n+\t@Label(\"Skipped Test\")\n \tstatic class SkippedTestEvent extends TestEvent {\n \t\t@Label(\"Reason\")\n \t\tString reason;\n \t}\n \n \t@Name(\"org.junit.TestExecution\")\n+\t@Label(\"Test\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7dc07b655eed11f532e983f6c178b1b02bb457b"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0MzEyNQ==", "bodyText": "To make it explicit? As @Category is already inherited from the super class.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r415043125", "createdAt": "2020-04-25T11:27:57Z", "author": {"login": "sormuras"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -112,27 +120,38 @@ public void executionFinished(TestIdentifier test, TestExecutionResult result) {\n \t@Name(\"org.junit.Test\")\n \t@Label(\"Test\")\n \tstatic abstract class TestEvent extends Event {\n-\n \t\t@Label(\"Unique Id\")\n \t\tString uniqueId;\n-\n \t\t@Label(\"Display Name\")\n \t\tString displayName;\n \t}\n \n \t@Name(\"org.junit.DynamicTestRegistration\")\n+\t@Label(\"Dynamic Test Registration\")\n \tstatic class DynamicTestEvent extends TestEvent {\n \t}\n \n \t@Name(\"org.junit.SkippedTest\")\n+\t@Label(\"Skipped Test\")\n \tstatic class SkippedTestEvent extends TestEvent {\n \t\t@Label(\"Reason\")\n \t\tString reason;\n \t}\n \n \t@Name(\"org.junit.TestExecution\")\n+\t@Label(\"Test\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAzOTg5NQ=="}, "originalCommit": {"oid": "c7dc07b655eed11f532e983f6c178b1b02bb457b"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0NDMzMw==", "bodyText": "Sorry. I missed that. I'm not used to GitHub, is there a way I can see the files in their latest state without comments (on the web)?", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r415044333", "createdAt": "2020-04-25T11:35:18Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -112,27 +120,38 @@ public void executionFinished(TestIdentifier test, TestExecutionResult result) {\n \t@Name(\"org.junit.Test\")\n \t@Label(\"Test\")\n \tstatic abstract class TestEvent extends Event {\n-\n \t\t@Label(\"Unique Id\")\n \t\tString uniqueId;\n-\n \t\t@Label(\"Display Name\")\n \t\tString displayName;\n \t}\n \n \t@Name(\"org.junit.DynamicTestRegistration\")\n+\t@Label(\"Dynamic Test Registration\")\n \tstatic class DynamicTestEvent extends TestEvent {\n \t}\n \n \t@Name(\"org.junit.SkippedTest\")\n+\t@Label(\"Skipped Test\")\n \tstatic class SkippedTestEvent extends TestEvent {\n \t\t@Label(\"Reason\")\n \t\tString reason;\n \t}\n \n \t@Name(\"org.junit.TestExecution\")\n+\t@Label(\"Test\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAzOTg5NQ=="}, "originalCommit": {"oid": "c7dc07b655eed11f532e983f6c178b1b02bb457b"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0NTEyOQ==", "bodyText": "Thought there was a filter for that, but couldn't find it.\nTry \"View file...\" in this drop down menu:", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r415045129", "createdAt": "2020-04-25T11:39:51Z", "author": {"login": "sormuras"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -112,27 +120,38 @@ public void executionFinished(TestIdentifier test, TestExecutionResult result) {\n \t@Name(\"org.junit.Test\")\n \t@Label(\"Test\")\n \tstatic abstract class TestEvent extends Event {\n-\n \t\t@Label(\"Unique Id\")\n \t\tString uniqueId;\n-\n \t\t@Label(\"Display Name\")\n \t\tString displayName;\n \t}\n \n \t@Name(\"org.junit.DynamicTestRegistration\")\n+\t@Label(\"Dynamic Test Registration\")\n \tstatic class DynamicTestEvent extends TestEvent {\n \t}\n \n \t@Name(\"org.junit.SkippedTest\")\n+\t@Label(\"Skipped Test\")\n \tstatic class SkippedTestEvent extends TestEvent {\n \t\t@Label(\"Reason\")\n \t\tString reason;\n \t}\n \n \t@Name(\"org.junit.TestExecution\")\n+\t@Label(\"Test\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAzOTg5NQ=="}, "originalCommit": {"oid": "c7dc07b655eed11f532e983f6c178b1b02bb457b"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM3OTE4NQ==", "bodyText": "Thanks!", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r416379185", "createdAt": "2020-04-28T07:06:59Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -112,27 +120,38 @@ public void executionFinished(TestIdentifier test, TestExecutionResult result) {\n \t@Name(\"org.junit.Test\")\n \t@Label(\"Test\")\n \tstatic abstract class TestEvent extends Event {\n-\n \t\t@Label(\"Unique Id\")\n \t\tString uniqueId;\n-\n \t\t@Label(\"Display Name\")\n \t\tString displayName;\n \t}\n \n \t@Name(\"org.junit.DynamicTestRegistration\")\n+\t@Label(\"Dynamic Test Registration\")\n \tstatic class DynamicTestEvent extends TestEvent {\n \t}\n \n \t@Name(\"org.junit.SkippedTest\")\n+\t@Label(\"Skipped Test\")\n \tstatic class SkippedTestEvent extends TestEvent {\n \t\t@Label(\"Reason\")\n \t\tString reason;\n \t}\n \n \t@Name(\"org.junit.TestExecution\")\n+\t@Label(\"Test\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAzOTg5NQ=="}, "originalCommit": {"oid": "c7dc07b655eed11f532e983f6c178b1b02bb457b"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDUwNDcxOnYy", "diffSide": "RIGHT", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMTowNzo0OVrOGL0BtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMTowNzo0OVrOGL0BtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAzOTkyNQ==", "bodyText": "@category(\"JUnit\"", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r415039925", "createdAt": "2020-04-25T11:07:49Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -112,27 +120,38 @@ public void executionFinished(TestIdentifier test, TestExecutionResult result) {\n \t@Name(\"org.junit.Test\")\n \t@Label(\"Test\")\n \tstatic abstract class TestEvent extends Event {\n-\n \t\t@Label(\"Unique Id\")\n \t\tString uniqueId;\n-\n \t\t@Label(\"Display Name\")\n \t\tString displayName;\n \t}\n \n \t@Name(\"org.junit.DynamicTestRegistration\")\n+\t@Label(\"Dynamic Test Registration\")\n \tstatic class DynamicTestEvent extends TestEvent {\n \t}\n \n \t@Name(\"org.junit.SkippedTest\")\n+\t@Label(\"Skipped Test\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7dc07b655eed11f532e983f6c178b1b02bb457b"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDUwNzIxOnYy", "diffSide": "RIGHT", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMTowOTozNlrOGL0Czg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMTozMjo0NlrOGL0RMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0MDIwNg==", "bodyText": "I don't think stack traces are useful for these events as they would only point back into the test framework. Adding the annotation @stacktrace(false) will turn them off.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r415040206", "createdAt": "2020-04-25T11:09:36Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -112,27 +120,38 @@ public void executionFinished(TestIdentifier test, TestExecutionResult result) {\n \t@Name(\"org.junit.Test\")\n \t@Label(\"Test\")\n \tstatic abstract class TestEvent extends Event {\n-\n \t\t@Label(\"Unique Id\")\n \t\tString uniqueId;\n-\n \t\t@Label(\"Display Name\")\n \t\tString displayName;\n \t}\n \n \t@Name(\"org.junit.DynamicTestRegistration\")\n+\t@Label(\"Dynamic Test Registration\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7dc07b655eed11f532e983f6c178b1b02bb457b"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0Mzg5MQ==", "bodyText": "Good point -- really need to read https://docs.oracle.com/en/java/javase/14/jfapi/create-events.html more carefully. That entire event class might be dropped in the near future -- as it is not relevant for test result recording anyway.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r415043891", "createdAt": "2020-04-25T11:32:46Z", "author": {"login": "sormuras"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -112,27 +120,38 @@ public void executionFinished(TestIdentifier test, TestExecutionResult result) {\n \t@Name(\"org.junit.Test\")\n \t@Label(\"Test\")\n \tstatic abstract class TestEvent extends Event {\n-\n \t\t@Label(\"Unique Id\")\n \t\tString uniqueId;\n-\n \t\t@Label(\"Display Name\")\n \t\tString displayName;\n \t}\n \n \t@Name(\"org.junit.DynamicTestRegistration\")\n+\t@Label(\"Dynamic Test Registration\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0MDIwNg=="}, "originalCommit": {"oid": "c7dc07b655eed11f532e983f6c178b1b02bb457b"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDUyNjI4OnYy", "diffSide": "RIGHT", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMToyMjo1NVrOGL0LGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMTo0MzowN1rOGL0X7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0MjMyOA==", "bodyText": "How often is a report emitted, once per test? What would it typically contain? There may be other ways to structure the data, but I need more information.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r415042328", "createdAt": "2020-04-25T11:22:55Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -112,27 +120,38 @@ public void executionFinished(TestIdentifier test, TestExecutionResult result) {\n \t@Name(\"org.junit.Test\")\n \t@Label(\"Test\")\n \tstatic abstract class TestEvent extends Event {\n-\n \t\t@Label(\"Unique Id\")\n \t\tString uniqueId;\n-\n \t\t@Label(\"Display Name\")\n \t\tString displayName;\n \t}\n \n \t@Name(\"org.junit.DynamicTestRegistration\")\n+\t@Label(\"Dynamic Test Registration\")\n \tstatic class DynamicTestEvent extends TestEvent {\n \t}\n \n \t@Name(\"org.junit.SkippedTest\")\n+\t@Label(\"Skipped Test\")\n \tstatic class SkippedTestEvent extends TestEvent {\n \t\t@Label(\"Reason\")\n \t\tString reason;\n \t}\n \n \t@Name(\"org.junit.TestExecution\")\n+\t@Label(\"Test\")\n \tstatic class TestExecutionEvent extends TestEvent {\n \t\t@Label(\"Result\")\n \t\tString result;\n \t}\n+\n+\t@Category(\"JUnit\")\n+\t@Name(\"org.junit.ReportEntry\")\n+\t@Label(\"Report Entry\")\n+\tstatic class ReportEntryEvent extends Event {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7dc07b655eed11f532e983f6c178b1b02bb457b"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0NTQ2Mw==", "bodyText": "This is an event triggered by a user or an extension within the lifecycle of a test.\nHere's an example:\n\n  \n    \n      junit5/documentation/src/test/java/example/TestReporterDemo.java\n    \n    \n        Lines 25 to 42\n      in\n      1978513\n    \n    \n    \n    \n\n        \n          \n           @Test \n        \n\n        \n          \n           void reportSingleValue(TestReporter testReporter) { \n        \n\n        \n          \n           \ttestReporter.publishEntry(\"a status message\"); \n        \n\n        \n          \n           } \n        \n\n        \n          \n            \n        \n\n        \n          \n           @Test \n        \n\n        \n          \n           void reportKeyValuePair(TestReporter testReporter) { \n        \n\n        \n          \n           \ttestReporter.publishEntry(\"a key\", \"a value\"); \n        \n\n        \n          \n           } \n        \n\n        \n          \n            \n        \n\n        \n          \n           @Test \n        \n\n        \n          \n           void reportMultipleKeyValuePairs(TestReporter testReporter) { \n        \n\n        \n          \n           \tMap<String, String> values = new HashMap<>(); \n        \n\n        \n          \n           \tvalues.put(\"user name\", \"dk38\"); \n        \n\n        \n          \n           \tvalues.put(\"award year\", \"1974\"); \n        \n\n        \n          \n            \n        \n\n        \n          \n           \ttestReporter.publishEntry(values); \n        \n\n        \n          \n           }", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r415045463", "createdAt": "2020-04-25T11:42:00Z", "author": {"login": "sormuras"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -112,27 +120,38 @@ public void executionFinished(TestIdentifier test, TestExecutionResult result) {\n \t@Name(\"org.junit.Test\")\n \t@Label(\"Test\")\n \tstatic abstract class TestEvent extends Event {\n-\n \t\t@Label(\"Unique Id\")\n \t\tString uniqueId;\n-\n \t\t@Label(\"Display Name\")\n \t\tString displayName;\n \t}\n \n \t@Name(\"org.junit.DynamicTestRegistration\")\n+\t@Label(\"Dynamic Test Registration\")\n \tstatic class DynamicTestEvent extends TestEvent {\n \t}\n \n \t@Name(\"org.junit.SkippedTest\")\n+\t@Label(\"Skipped Test\")\n \tstatic class SkippedTestEvent extends TestEvent {\n \t\t@Label(\"Reason\")\n \t\tString reason;\n \t}\n \n \t@Name(\"org.junit.TestExecution\")\n+\t@Label(\"Test\")\n \tstatic class TestExecutionEvent extends TestEvent {\n \t\t@Label(\"Result\")\n \t\tString result;\n \t}\n+\n+\t@Category(\"JUnit\")\n+\t@Name(\"org.junit.ReportEntry\")\n+\t@Label(\"Report Entry\")\n+\tstatic class ReportEntryEvent extends Event {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0MjMyOA=="}, "originalCommit": {"oid": "c7dc07b655eed11f532e983f6c178b1b02bb457b"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0NTYxNQ==", "bodyText": "Here's the API documentation for TestReporter: https://junit.org/junit5/docs/current/api/org.junit.jupiter.api/org/junit/jupiter/api/TestReporter.html", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r415045615", "createdAt": "2020-04-25T11:43:07Z", "author": {"login": "sormuras"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -112,27 +120,38 @@ public void executionFinished(TestIdentifier test, TestExecutionResult result) {\n \t@Name(\"org.junit.Test\")\n \t@Label(\"Test\")\n \tstatic abstract class TestEvent extends Event {\n-\n \t\t@Label(\"Unique Id\")\n \t\tString uniqueId;\n-\n \t\t@Label(\"Display Name\")\n \t\tString displayName;\n \t}\n \n \t@Name(\"org.junit.DynamicTestRegistration\")\n+\t@Label(\"Dynamic Test Registration\")\n \tstatic class DynamicTestEvent extends TestEvent {\n \t}\n \n \t@Name(\"org.junit.SkippedTest\")\n+\t@Label(\"Skipped Test\")\n \tstatic class SkippedTestEvent extends TestEvent {\n \t\t@Label(\"Reason\")\n \t\tString reason;\n \t}\n \n \t@Name(\"org.junit.TestExecution\")\n+\t@Label(\"Test\")\n \tstatic class TestExecutionEvent extends TestEvent {\n \t\t@Label(\"Result\")\n \t\tString result;\n \t}\n+\n+\t@Category(\"JUnit\")\n+\t@Name(\"org.junit.ReportEntry\")\n+\t@Label(\"Report Entry\")\n+\tstatic class ReportEntryEvent extends Event {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0MjMyOA=="}, "originalCommit": {"oid": "c7dc07b655eed11f532e983f6c178b1b02bb457b"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MDQ3MDgzOnYy", "diffSide": "RIGHT", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNjo0NzozM1rOGNFJqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNzo0MDozOVrOGNG6SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM2OTA2NQ==", "bodyText": "A better fields name may be: exceptionMessage\nYou may want to complement with the class:\nexceptionClass = result.getThrowable();", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r416369065", "createdAt": "2020-04-28T06:47:33Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -76,74 +78,80 @@ public void executionSkipped(TestIdentifier test, String reason) {\n \tpublic void executionStarted(TestIdentifier test) {\n \t\tTestExecutionEvent event = new TestExecutionEvent();\n \t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n-\t\tevent.uniqueId = test.getUniqueId();\n-\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.initialize(test);\n \t\tevent.begin();\n \t}\n \n \t@Override\n \tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n-\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tif (test.isContainer() && result.getStatus().equals(TestExecutionResult.Status.SUCCESSFUL)) {\n+\t\t\treturn;\n+\t\t}\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId()); // TODO Remove?\n \t\tevent.end();\n+\t\tevent.reports = event.reportEntries == null ? null : event.reportEntries.toString();\n \t\tevent.result = result.getStatus().toString();\n+\t\tevent.throwable = result.getThrowable().map(Throwable::getMessage).orElse(null); // TODO Include stacktrace?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321d5e2913ee041525f84dea57144cc22e4323c0"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM5Nzg5Ng==", "bodyText": "Check. Will rename the existing field and extend the event class with field exceptionClass.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r416397896", "createdAt": "2020-04-28T07:40:39Z", "author": {"login": "sormuras"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -76,74 +78,80 @@ public void executionSkipped(TestIdentifier test, String reason) {\n \tpublic void executionStarted(TestIdentifier test) {\n \t\tTestExecutionEvent event = new TestExecutionEvent();\n \t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n-\t\tevent.uniqueId = test.getUniqueId();\n-\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.initialize(test);\n \t\tevent.begin();\n \t}\n \n \t@Override\n \tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n-\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tif (test.isContainer() && result.getStatus().equals(TestExecutionResult.Status.SUCCESSFUL)) {\n+\t\t\treturn;\n+\t\t}\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId()); // TODO Remove?\n \t\tevent.end();\n+\t\tevent.reports = event.reportEntries == null ? null : event.reportEntries.toString();\n \t\tevent.result = result.getStatus().toString();\n+\t\tevent.throwable = result.getThrowable().map(Throwable::getMessage).orElse(null); // TODO Include stacktrace?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM2OTA2NQ=="}, "originalCommit": {"oid": "321d5e2913ee041525f84dea57144cc22e4323c0"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MDUwODA2OnYy", "diffSide": "RIGHT", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNjo1ODowN1rOGNFe9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMjoxNjowMVrOGOmlfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM3NDUxOA==", "bodyText": "Ideally data in JFR should be normalized, similar to a relational database:\nabstract class TestEvent {\n@Testid\nlong testId\n}\nand then\nclass ReportEntryEvent {\n@Testid\nlong testId;\nString key;\nString value;\n}\nTo mark there is a relation between the event and the report:\n@MetadataDefinition\n@Label(\"Test Id\")\n@relational\n@retention(RetentionPolicy.RUNTIME)\n@target({ ElementType.FIELD })\npublic @interface @Testid {\n}\ntestId could be a counter, i.e 1, 2, 3 ..", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r416374518", "createdAt": "2020-04-28T06:58:07Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -76,74 +78,80 @@ public void executionSkipped(TestIdentifier test, String reason) {\n \tpublic void executionStarted(TestIdentifier test) {\n \t\tTestExecutionEvent event = new TestExecutionEvent();\n \t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n-\t\tevent.uniqueId = test.getUniqueId();\n-\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.initialize(test);\n \t\tevent.begin();\n \t}\n \n \t@Override\n \tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n-\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tif (test.isContainer() && result.getStatus().equals(TestExecutionResult.Status.SUCCESSFUL)) {\n+\t\t\treturn;\n+\t\t}\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId()); // TODO Remove?\n \t\tevent.end();\n+\t\tevent.reports = event.reportEntries == null ? null : event.reportEntries.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321d5e2913ee041525f84dea57144cc22e4323c0"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM5NzA0MQ==", "bodyText": "Understood.\n\nIs type String also a good choice for an ID? That's the one the JUnit Platform already provides.\nDo tools like JMC display those relations?\n\nI'll keep this normalization advice for later, as report entries are always strongly coupled to a test execution frame/event. And 99% or more of todays' tests don't publish any report entries anyway. Thus, the field is almost always null.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r416397041", "createdAt": "2020-04-28T07:39:04Z", "author": {"login": "sormuras"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -76,74 +78,80 @@ public void executionSkipped(TestIdentifier test, String reason) {\n \tpublic void executionStarted(TestIdentifier test) {\n \t\tTestExecutionEvent event = new TestExecutionEvent();\n \t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n-\t\tevent.uniqueId = test.getUniqueId();\n-\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.initialize(test);\n \t\tevent.begin();\n \t}\n \n \t@Override\n \tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n-\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tif (test.isContainer() && result.getStatus().equals(TestExecutionResult.Status.SUCCESSFUL)) {\n+\t\t\treturn;\n+\t\t}\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId()); // TODO Remove?\n \t\tevent.end();\n+\t\tevent.reports = event.reportEntries == null ? null : event.reportEntries.toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM3NDUxOA=="}, "originalCommit": {"oid": "321d5e2913ee041525f84dea57144cc22e4323c0"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ2ODY2Nw==", "bodyText": "String works as long it is unique (for a recording).", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r416468667", "createdAt": "2020-04-28T09:30:18Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -76,74 +78,80 @@ public void executionSkipped(TestIdentifier test, String reason) {\n \tpublic void executionStarted(TestIdentifier test) {\n \t\tTestExecutionEvent event = new TestExecutionEvent();\n \t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n-\t\tevent.uniqueId = test.getUniqueId();\n-\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.initialize(test);\n \t\tevent.begin();\n \t}\n \n \t@Override\n \tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n-\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tif (test.isContainer() && result.getStatus().equals(TestExecutionResult.Status.SUCCESSFUL)) {\n+\t\t\treturn;\n+\t\t}\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId()); // TODO Remove?\n \t\tevent.end();\n+\t\tevent.reports = event.reportEntries == null ? null : event.reportEntries.toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM3NDUxOA=="}, "originalCommit": {"oid": "321d5e2913ee041525f84dea57144cc22e4323c0"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ3MjA5NA==", "bodyText": "JMC will display all fields and is aware of relations. They can be used when creating custom tables, i.e group by testId.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r416472094", "createdAt": "2020-04-28T09:35:31Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -76,74 +78,80 @@ public void executionSkipped(TestIdentifier test, String reason) {\n \tpublic void executionStarted(TestIdentifier test) {\n \t\tTestExecutionEvent event = new TestExecutionEvent();\n \t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n-\t\tevent.uniqueId = test.getUniqueId();\n-\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.initialize(test);\n \t\tevent.begin();\n \t}\n \n \t@Override\n \tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n-\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tif (test.isContainer() && result.getStatus().equals(TestExecutionResult.Status.SUCCESSFUL)) {\n+\t\t\treturn;\n+\t\t}\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId()); // TODO Remove?\n \t\tevent.end();\n+\t\tevent.reports = event.reportEntries == null ? null : event.reportEntries.toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM3NDUxOA=="}, "originalCommit": {"oid": "321d5e2913ee041525f84dea57144cc22e4323c0"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk2NTQzOA==", "bodyText": "For long-running tests (like scenario/UI tests) it is better to have distinct report event fired while the test is still running.\nThus, I'll implement the suggested normalization.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r417965438", "createdAt": "2020-04-30T12:16:01Z", "author": {"login": "sormuras"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -76,74 +78,80 @@ public void executionSkipped(TestIdentifier test, String reason) {\n \tpublic void executionStarted(TestIdentifier test) {\n \t\tTestExecutionEvent event = new TestExecutionEvent();\n \t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n-\t\tevent.uniqueId = test.getUniqueId();\n-\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.initialize(test);\n \t\tevent.begin();\n \t}\n \n \t@Override\n \tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n-\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tif (test.isContainer() && result.getStatus().equals(TestExecutionResult.Status.SUCCESSFUL)) {\n+\t\t\treturn;\n+\t\t}\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId()); // TODO Remove?\n \t\tevent.end();\n+\t\tevent.reports = event.reportEntries == null ? null : event.reportEntries.toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM3NDUxOA=="}, "originalCommit": {"oid": "321d5e2913ee041525f84dea57144cc22e4323c0"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTExNzAwOnYy", "diffSide": "RIGHT", "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoxMzoxN1rOGOrOSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNzowODozMVrOGTPSXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0MTQxNg==", "bodyText": "Set a name for the annotation, i.e @name(\"org.junit.UniqueId\")", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r418041416", "createdAt": "2020-04-30T14:13:17Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+import jdk.jfr.MetadataDefinition;\n+import jdk.jfr.Name;\n+import jdk.jfr.Relational;\n+import jdk.jfr.StackTrace;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.reporting.ReportEntry;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent = new AtomicReference<>();\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap = new ConcurrentHashMap<>();\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.engineNames = plan.getRoots().stream().map(TestIdentifier::getDisplayName).collect(\n+\t\t\tCollectors.joining(\", \"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.initialize(test);\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();\n+\t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n+\t\tevent.initialize(test);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n+\t\tif (test.isContainer() && result.getStatus().equals(TestExecutionResult.Status.SUCCESSFUL)) {\n+\t\t\treturn;\n+\t\t}\n+\t\tOptional<Throwable> throwable = result.getThrowable();\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId()); // TODO Remove?\n+\t\tevent.end();\n+\t\tevent.result = result.getStatus().toString();\n+\t\tevent.exceptionClass = throwable.map(Throwable::getClass).orElse(null);\n+\t\tevent.exceptionMessage = throwable.map(Throwable::getMessage).orElse(null);\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void reportingEntryPublished(TestIdentifier test, ReportEntry reportEntry) {\n+\t\tfor (Map.Entry<String, String> entry : reportEntry.getKeyValuePairs().entrySet()) {\n+\t\t\tReportEntryEvent event = new ReportEntryEvent();\n+\t\t\tevent.uniqueId = test.getUniqueId();\n+\t\t\tevent.key = entry.getKey();\n+\t\t\tevent.value = entry.getValue();\n+\t\t\tevent.commit();\n+\t\t}\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\t@Label(\"Test Plan\")\n+\t@Name(\"org.junit.TestPlan\")\n+\t@StackTrace(false)\n+\tstatic class TestPlanExecutionEvent extends Event {\n+\t\t@Label(\"Contains Tests\")\n+\t\tboolean containsTests;\n+\t\t@Label(\"Engine Names\")\n+\t\tString engineNames;\n+\t}\n+\n+\t@MetadataDefinition\n+\t@Relational", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5d6267b409fe28f81f6b9af33b4c2ebad7b5044"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgyNjU5MQ==", "bodyText": "Sure.\nRemoved the name annotation from the metadata definition because it isn't inherited:\n@Target({ ElementType.TYPE, ElementType.FIELD, ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\n@MetadataDefinition\npublic @interface Name { ...", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r422826591", "createdAt": "2020-05-11T07:08:31Z", "author": {"login": "sormuras"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+import jdk.jfr.MetadataDefinition;\n+import jdk.jfr.Name;\n+import jdk.jfr.Relational;\n+import jdk.jfr.StackTrace;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.reporting.ReportEntry;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent = new AtomicReference<>();\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap = new ConcurrentHashMap<>();\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.engineNames = plan.getRoots().stream().map(TestIdentifier::getDisplayName).collect(\n+\t\t\tCollectors.joining(\", \"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.initialize(test);\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();\n+\t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n+\t\tevent.initialize(test);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n+\t\tif (test.isContainer() && result.getStatus().equals(TestExecutionResult.Status.SUCCESSFUL)) {\n+\t\t\treturn;\n+\t\t}\n+\t\tOptional<Throwable> throwable = result.getThrowable();\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId()); // TODO Remove?\n+\t\tevent.end();\n+\t\tevent.result = result.getStatus().toString();\n+\t\tevent.exceptionClass = throwable.map(Throwable::getClass).orElse(null);\n+\t\tevent.exceptionMessage = throwable.map(Throwable::getMessage).orElse(null);\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void reportingEntryPublished(TestIdentifier test, ReportEntry reportEntry) {\n+\t\tfor (Map.Entry<String, String> entry : reportEntry.getKeyValuePairs().entrySet()) {\n+\t\t\tReportEntryEvent event = new ReportEntryEvent();\n+\t\t\tevent.uniqueId = test.getUniqueId();\n+\t\t\tevent.key = entry.getKey();\n+\t\t\tevent.value = entry.getValue();\n+\t\t\tevent.commit();\n+\t\t}\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\t@Label(\"Test Plan\")\n+\t@Name(\"org.junit.TestPlan\")\n+\t@StackTrace(false)\n+\tstatic class TestPlanExecutionEvent extends Event {\n+\t\t@Label(\"Contains Tests\")\n+\t\tboolean containsTests;\n+\t\t@Label(\"Engine Names\")\n+\t\tString engineNames;\n+\t}\n+\n+\t@MetadataDefinition\n+\t@Relational", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0MTQxNg=="}, "originalCommit": {"oid": "d5d6267b409fe28f81f6b9af33b4c2ebad7b5044"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzE2MDUxOnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/kotlin/java-library-conventions.gradle.kts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDoxODo0OFrOGeeFYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDoxODo0OFrOGeeFYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwMzM2Mw==", "bodyText": "Gonna revert this. No longer needed, methinks.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r434603363", "createdAt": "2020-06-03T14:18:48Z", "author": {"login": "sormuras"}, "path": "buildSrc/src/main/kotlin/java-library-conventions.gradle.kts", "diffHunk": "@@ -145,7 +145,7 @@ val compileModule by tasks.registering(JavaCompile::class) {\n \tsource = fileTree(moduleSourceDir)\n \tdestinationDir = moduleOutputDir\n \tsourceCompatibility = \"9\"\n-\ttargetCompatibility = \"9\"\n+\ttargetCompatibility = \"11\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzE2MjUzOnYy", "diffSide": "RIGHT", "path": "documentation/documentation.gradle.kts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDoxOToxNlrOGeeGug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxOTo0NDozNlrOGeq2Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwMzcwNg==", "bodyText": "Because junit-platform-jfr targets Java 11 -- will be reverted when we turn it into a MR-JAR with base 8.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r434603706", "createdAt": "2020-06-03T14:19:16Z", "author": {"login": "sormuras"}, "path": "documentation/documentation.gradle.kts", "diffHunk": "@@ -18,7 +18,7 @@ modularProjects.forEach { evaluationDependsOn(it.path) }\n \n javaLibrary {\n \tmainJavaVersion = JavaVersion.VERSION_1_8\n-\ttestJavaVersion = JavaVersion.VERSION_1_8\n+\ttestJavaVersion = JavaVersion.VERSION_11", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgxMjQ3MA==", "bodyText": "Fixed via an extra configuration.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r434812470", "createdAt": "2020-06-03T19:44:36Z", "author": {"login": "marcphilipp"}, "path": "documentation/documentation.gradle.kts", "diffHunk": "@@ -18,7 +18,7 @@ modularProjects.forEach { evaluationDependsOn(it.path) }\n \n javaLibrary {\n \tmainJavaVersion = JavaVersion.VERSION_1_8\n-\ttestJavaVersion = JavaVersion.VERSION_1_8\n+\ttestJavaVersion = JavaVersion.VERSION_11", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwMzcwNg=="}, "originalCommit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzE3MTkyOnYy", "diffSide": "RIGHT", "path": "junit-platform-jfr/junit-platform-jfr.gradle.kts", "isResolved": true, "comments": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDoyMToxMVrOGeeMhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNTo1MzoyMFrOGs0CCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwNTE5MQ==", "bodyText": "When enabled, it yields:\nResolution failed. Capabilities satisfying the following requirements could not be found:\n    [<<INITIAL>>]\n      ? osgi.identity: (osgi.identity=junit-platform-jfr)\n          ? [junit-platform-jfr version=1.7.0.SNAPSHOT]\n              ? osgi.wiring.package: (&(osgi.wiring.package=jdk.jfr))", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r434605191", "createdAt": "2020-06-03T14:21:11Z", "author": {"login": "sormuras"}, "path": "junit-platform-jfr/junit-platform-jfr.gradle.kts", "diffHunk": "@@ -0,0 +1,23 @@\n+plugins {\n+\t`java-library-conventions`\n+}\n+\n+description = \"JUnit Platform Flight Recorder Support\"\n+\n+dependencies {\n+\tinternal(platform(project(\":dependencies\")))\n+\n+\tapi(platform(project(\":junit-bom\")))\n+\tapi(\"org.apiguardian:apiguardian-api\")\n+\tapi(project(\":junit-platform-launcher\"))\n+}\n+\n+javaLibrary {\n+\tmainJavaVersion = JavaVersion.VERSION_11\n+}\n+\n+tasks {\n+\tverifyOSGi {\n+\t\tenabled=false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgxMTAxNA==", "bodyText": "@rotty3000 @bjhargrave Do you know what's wrong here?", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r434811014", "createdAt": "2020-06-03T19:41:55Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-jfr/junit-platform-jfr.gradle.kts", "diffHunk": "@@ -0,0 +1,23 @@\n+plugins {\n+\t`java-library-conventions`\n+}\n+\n+description = \"JUnit Platform Flight Recorder Support\"\n+\n+dependencies {\n+\tinternal(platform(project(\":dependencies\")))\n+\n+\tapi(platform(project(\":junit-bom\")))\n+\tapi(\"org.apiguardian:apiguardian-api\")\n+\tapi(project(\":junit-platform-launcher\"))\n+}\n+\n+javaLibrary {\n+\tmainJavaVersion = JavaVersion.VERSION_11\n+}\n+\n+tasks {\n+\tverifyOSGi {\n+\t\tenabled=false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwNTE5MQ=="}, "originalCommit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzNTMwNw==", "bodyText": "It is detecting a reference to the package jdk.jfr in the artifact junit-platform-jfr. And no artifacts exist in the resolution check which export the package jdk.jfr.\nI will let @rotty3000 suggest a solution as he provided the initial verifyOSGi task.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r434835307", "createdAt": "2020-06-03T20:30:09Z", "author": {"login": "bjhargrave"}, "path": "junit-platform-jfr/junit-platform-jfr.gradle.kts", "diffHunk": "@@ -0,0 +1,23 @@\n+plugins {\n+\t`java-library-conventions`\n+}\n+\n+description = \"JUnit Platform Flight Recorder Support\"\n+\n+dependencies {\n+\tinternal(platform(project(\":dependencies\")))\n+\n+\tapi(platform(project(\":junit-bom\")))\n+\tapi(\"org.apiguardian:apiguardian-api\")\n+\tapi(project(\":junit-platform-launcher\"))\n+}\n+\n+javaLibrary {\n+\tmainJavaVersion = JavaVersion.VERSION_11\n+}\n+\n+tasks {\n+\tverifyOSGi {\n+\t\tenabled=false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwNTE5MQ=="}, "originalCommit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgyNDcwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tenabled=false\n          \n          \n            \n            \t\tenabled = false", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r435824708", "createdAt": "2020-06-05T10:10:17Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-jfr/junit-platform-jfr.gradle.kts", "diffHunk": "@@ -0,0 +1,23 @@\n+plugins {\n+\t`java-library-conventions`\n+}\n+\n+description = \"JUnit Platform Flight Recorder Support\"\n+\n+dependencies {\n+\tinternal(platform(project(\":dependencies\")))\n+\n+\tapi(platform(project(\":junit-bom\")))\n+\tapi(\"org.apiguardian:apiguardian-api\")\n+\tapi(project(\":junit-platform-launcher\"))\n+}\n+\n+javaLibrary {\n+\tmainJavaVersion = JavaVersion.VERSION_11\n+}\n+\n+tasks {\n+\tverifyOSGi {\n+\t\tenabled=false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwNTE5MQ=="}, "originalCommit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkyMDQxMw==", "bodyText": "I'm taking a look today.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r435920413", "createdAt": "2020-06-05T13:28:26Z", "author": {"login": "rotty3000"}, "path": "junit-platform-jfr/junit-platform-jfr.gradle.kts", "diffHunk": "@@ -0,0 +1,23 @@\n+plugins {\n+\t`java-library-conventions`\n+}\n+\n+description = \"JUnit Platform Flight Recorder Support\"\n+\n+dependencies {\n+\tinternal(platform(project(\":dependencies\")))\n+\n+\tapi(platform(project(\":junit-bom\")))\n+\tapi(\"org.apiguardian:apiguardian-api\")\n+\tapi(project(\":junit-platform-launcher\"))\n+}\n+\n+javaLibrary {\n+\tmainJavaVersion = JavaVersion.VERSION_11\n+}\n+\n+tasks {\n+\tverifyOSGi {\n+\t\tenabled=false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwNTE5MQ=="}, "originalCommit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk1MTkwNg==", "bodyText": "This may be due to Bnd not having the latest EE model properties which includes the new jdk.jfr package. We are just fixing that now in Bnd.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r435951906", "createdAt": "2020-06-05T14:16:01Z", "author": {"login": "bjhargrave"}, "path": "junit-platform-jfr/junit-platform-jfr.gradle.kts", "diffHunk": "@@ -0,0 +1,23 @@\n+plugins {\n+\t`java-library-conventions`\n+}\n+\n+description = \"JUnit Platform Flight Recorder Support\"\n+\n+dependencies {\n+\tinternal(platform(project(\":dependencies\")))\n+\n+\tapi(platform(project(\":junit-bom\")))\n+\tapi(\"org.apiguardian:apiguardian-api\")\n+\tapi(project(\":junit-platform-launcher\"))\n+}\n+\n+javaLibrary {\n+\tmainJavaVersion = JavaVersion.VERSION_11\n+}\n+\n+tasks {\n+\tverifyOSGi {\n+\t\tenabled=false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwNTE5MQ=="}, "originalCommit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk1ODEzNg==", "bodyText": "Sounds like a potential cause - as other modules defined here that also don't export any package are working w/o special configuration directives. I guess.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r435958136", "createdAt": "2020-06-05T14:25:56Z", "author": {"login": "sormuras"}, "path": "junit-platform-jfr/junit-platform-jfr.gradle.kts", "diffHunk": "@@ -0,0 +1,23 @@\n+plugins {\n+\t`java-library-conventions`\n+}\n+\n+description = \"JUnit Platform Flight Recorder Support\"\n+\n+dependencies {\n+\tinternal(platform(project(\":dependencies\")))\n+\n+\tapi(platform(project(\":junit-bom\")))\n+\tapi(\"org.apiguardian:apiguardian-api\")\n+\tapi(project(\":junit-platform-launcher\"))\n+}\n+\n+javaLibrary {\n+\tmainJavaVersion = JavaVersion.VERSION_11\n+}\n+\n+tasks {\n+\tverifyOSGi {\n+\t\tenabled=false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwNTE5MQ=="}, "originalCommit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAwMDYwNg==", "bodyText": "We will soon have a Bnd 5.1.1-SNAPSHOT build available that can be used to test if our fix solves this. I will let you know when it is available.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r436000606", "createdAt": "2020-06-05T15:34:13Z", "author": {"login": "bjhargrave"}, "path": "junit-platform-jfr/junit-platform-jfr.gradle.kts", "diffHunk": "@@ -0,0 +1,23 @@\n+plugins {\n+\t`java-library-conventions`\n+}\n+\n+description = \"JUnit Platform Flight Recorder Support\"\n+\n+dependencies {\n+\tinternal(platform(project(\":dependencies\")))\n+\n+\tapi(platform(project(\":junit-bom\")))\n+\tapi(\"org.apiguardian:apiguardian-api\")\n+\tapi(project(\":junit-platform-launcher\"))\n+}\n+\n+javaLibrary {\n+\tmainJavaVersion = JavaVersion.VERSION_11\n+}\n+\n+tasks {\n+\tverifyOSGi {\n+\t\tenabled=false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwNTE5MQ=="}, "originalCommit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAwMjgyOA==", "bodyText": "Great! Take your time and looking forward to test-drive that build.\nI might merge this PR soon -- with verifyOSGi disabled -- so, testing will happen on a new branch.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r436002828", "createdAt": "2020-06-05T15:37:07Z", "author": {"login": "sormuras"}, "path": "junit-platform-jfr/junit-platform-jfr.gradle.kts", "diffHunk": "@@ -0,0 +1,23 @@\n+plugins {\n+\t`java-library-conventions`\n+}\n+\n+description = \"JUnit Platform Flight Recorder Support\"\n+\n+dependencies {\n+\tinternal(platform(project(\":dependencies\")))\n+\n+\tapi(platform(project(\":junit-bom\")))\n+\tapi(\"org.apiguardian:apiguardian-api\")\n+\tapi(project(\":junit-platform-launcher\"))\n+}\n+\n+javaLibrary {\n+\tmainJavaVersion = JavaVersion.VERSION_11\n+}\n+\n+tasks {\n+\tverifyOSGi {\n+\t\tenabled=false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwNTE5MQ=="}, "originalCommit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEzMzAzMw==", "bodyText": "I've confirmed that the upcoming bnd 5.1.1 will address the issue here.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r436133033", "createdAt": "2020-06-05T19:53:03Z", "author": {"login": "rotty3000"}, "path": "junit-platform-jfr/junit-platform-jfr.gradle.kts", "diffHunk": "@@ -0,0 +1,23 @@\n+plugins {\n+\t`java-library-conventions`\n+}\n+\n+description = \"JUnit Platform Flight Recorder Support\"\n+\n+dependencies {\n+\tinternal(platform(project(\":dependencies\")))\n+\n+\tapi(platform(project(\":junit-bom\")))\n+\tapi(\"org.apiguardian:apiguardian-api\")\n+\tapi(project(\":junit-platform-launcher\"))\n+}\n+\n+javaLibrary {\n+\tmainJavaVersion = JavaVersion.VERSION_11\n+}\n+\n+tasks {\n+\tverifyOSGi {\n+\t\tenabled=false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwNTE5MQ=="}, "originalCommit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk1NzM0MQ==", "bodyText": "Via this commit? bndtools/bnd@7e295c9", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r437957341", "createdAt": "2020-06-10T08:38:02Z", "author": {"login": "sormuras"}, "path": "junit-platform-jfr/junit-platform-jfr.gradle.kts", "diffHunk": "@@ -0,0 +1,23 @@\n+plugins {\n+\t`java-library-conventions`\n+}\n+\n+description = \"JUnit Platform Flight Recorder Support\"\n+\n+dependencies {\n+\tinternal(platform(project(\":dependencies\")))\n+\n+\tapi(platform(project(\":junit-bom\")))\n+\tapi(\"org.apiguardian:apiguardian-api\")\n+\tapi(project(\":junit-platform-launcher\"))\n+}\n+\n+javaLibrary {\n+\tmainJavaVersion = JavaVersion.VERSION_11\n+}\n+\n+tasks {\n+\tverifyOSGi {\n+\t\tenabled=false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwNTE5MQ=="}, "originalCommit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA0OTI5MQ==", "bodyText": "For 5.1.1, it would technically be bndtools/bnd@95ab05c which is the above commit cherry-picked onto the next branch which is where 5.1.1 currently lives.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r438049291", "createdAt": "2020-06-10T11:22:54Z", "author": {"login": "bjhargrave"}, "path": "junit-platform-jfr/junit-platform-jfr.gradle.kts", "diffHunk": "@@ -0,0 +1,23 @@\n+plugins {\n+\t`java-library-conventions`\n+}\n+\n+description = \"JUnit Platform Flight Recorder Support\"\n+\n+dependencies {\n+\tinternal(platform(project(\":dependencies\")))\n+\n+\tapi(platform(project(\":junit-bom\")))\n+\tapi(\"org.apiguardian:apiguardian-api\")\n+\tapi(project(\":junit-platform-launcher\"))\n+}\n+\n+javaLibrary {\n+\tmainJavaVersion = JavaVersion.VERSION_11\n+}\n+\n+tasks {\n+\tverifyOSGi {\n+\t\tenabled=false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwNTE5MQ=="}, "originalCommit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMwNDE3Mg==", "bodyText": "@bjhargrave I got a notification that 5.1.1 has been released but it's not on Maven Central, yet. Why is that?", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r441304172", "createdAt": "2020-06-17T06:16:20Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-jfr/junit-platform-jfr.gradle.kts", "diffHunk": "@@ -0,0 +1,23 @@\n+plugins {\n+\t`java-library-conventions`\n+}\n+\n+description = \"JUnit Platform Flight Recorder Support\"\n+\n+dependencies {\n+\tinternal(platform(project(\":dependencies\")))\n+\n+\tapi(platform(project(\":junit-bom\")))\n+\tapi(\"org.apiguardian:apiguardian-api\")\n+\tapi(project(\":junit-platform-launcher\"))\n+}\n+\n+javaLibrary {\n+\tmainJavaVersion = JavaVersion.VERSION_11\n+}\n+\n+tasks {\n+\tverifyOSGi {\n+\t\tenabled=false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwNTE5MQ=="}, "originalCommit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY0Njg2MA==", "bodyText": "I made the build last night and released the staging repo this morning (EDT). So it should now be available on Maven Central now.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r441646860", "createdAt": "2020-06-17T15:45:52Z", "author": {"login": "bjhargrave"}, "path": "junit-platform-jfr/junit-platform-jfr.gradle.kts", "diffHunk": "@@ -0,0 +1,23 @@\n+plugins {\n+\t`java-library-conventions`\n+}\n+\n+description = \"JUnit Platform Flight Recorder Support\"\n+\n+dependencies {\n+\tinternal(platform(project(\":dependencies\")))\n+\n+\tapi(platform(project(\":junit-bom\")))\n+\tapi(\"org.apiguardian:apiguardian-api\")\n+\tapi(project(\":junit-platform-launcher\"))\n+}\n+\n+javaLibrary {\n+\tmainJavaVersion = JavaVersion.VERSION_11\n+}\n+\n+tasks {\n+\tverifyOSGi {\n+\t\tenabled=false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwNTE5MQ=="}, "originalCommit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY3MTE1MQ==", "bodyText": "Already indexed via https://search.maven.org/artifact/biz.aQute.bnd/biz.aQute.bnd/5.1.1/jar", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r441671151", "createdAt": "2020-06-17T16:24:31Z", "author": {"login": "sormuras"}, "path": "junit-platform-jfr/junit-platform-jfr.gradle.kts", "diffHunk": "@@ -0,0 +1,23 @@\n+plugins {\n+\t`java-library-conventions`\n+}\n+\n+description = \"JUnit Platform Flight Recorder Support\"\n+\n+dependencies {\n+\tinternal(platform(project(\":dependencies\")))\n+\n+\tapi(platform(project(\":junit-bom\")))\n+\tapi(\"org.apiguardian:apiguardian-api\")\n+\tapi(project(\":junit-platform-launcher\"))\n+}\n+\n+javaLibrary {\n+\tmainJavaVersion = JavaVersion.VERSION_11\n+}\n+\n+tasks {\n+\tverifyOSGi {\n+\t\tenabled=false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwNTE5MQ=="}, "originalCommit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcxNjQ3MQ==", "bodyText": "Thanks, I just upgraded master to 5.1.1. @sormuras Could you please rebase this branch to verify that the issue is now resolved?", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r441716471", "createdAt": "2020-06-17T17:39:35Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-jfr/junit-platform-jfr.gradle.kts", "diffHunk": "@@ -0,0 +1,23 @@\n+plugins {\n+\t`java-library-conventions`\n+}\n+\n+description = \"JUnit Platform Flight Recorder Support\"\n+\n+dependencies {\n+\tinternal(platform(project(\":dependencies\")))\n+\n+\tapi(platform(project(\":junit-bom\")))\n+\tapi(\"org.apiguardian:apiguardian-api\")\n+\tapi(project(\":junit-platform-launcher\"))\n+}\n+\n+javaLibrary {\n+\tmainJavaVersion = JavaVersion.VERSION_11\n+}\n+\n+tasks {\n+\tverifyOSGi {\n+\t\tenabled=false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwNTE5MQ=="}, "originalCommit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwMzcxMw==", "bodyText": "Rebase done and force-pushed.\nVerifying that it works with verifyOSGi enabled locally ... in progress.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r442003713", "createdAt": "2020-06-18T06:48:58Z", "author": {"login": "sormuras"}, "path": "junit-platform-jfr/junit-platform-jfr.gradle.kts", "diffHunk": "@@ -0,0 +1,23 @@\n+plugins {\n+\t`java-library-conventions`\n+}\n+\n+description = \"JUnit Platform Flight Recorder Support\"\n+\n+dependencies {\n+\tinternal(platform(project(\":dependencies\")))\n+\n+\tapi(platform(project(\":junit-bom\")))\n+\tapi(\"org.apiguardian:apiguardian-api\")\n+\tapi(project(\":junit-platform-launcher\"))\n+}\n+\n+javaLibrary {\n+\tmainJavaVersion = JavaVersion.VERSION_11\n+}\n+\n+tasks {\n+\tverifyOSGi {\n+\t\tenabled=false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwNTE5MQ=="}, "originalCommit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwNTc3MA==", "bodyText": "This still does not bode well\n> Task :junit-platform-jfr:verifyOSGi FAILED\nResolution failed. Capabilities satisfying the following requirements could not be found:\n    [<<INITIAL>>]\n      ? osgi.identity: (osgi.identity=junit-platform-jfr)\n          ? [junit-platform-jfr version=1.7.0.SNAPSHOT]\n              ? osgi.wiring.package: (osgi.wiring.package=jdk.jfr)\n\nExecution failed for task ':junit-platform-jfr:verifyOSGi'.\n> D:\\dev\\github\\junit-team\\junit5\\junit-platform-jfr\\build\\verifyOSGiProperties.bndrun resolution exception", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r442005770", "createdAt": "2020-06-18T06:53:11Z", "author": {"login": "sormuras"}, "path": "junit-platform-jfr/junit-platform-jfr.gradle.kts", "diffHunk": "@@ -0,0 +1,23 @@\n+plugins {\n+\t`java-library-conventions`\n+}\n+\n+description = \"JUnit Platform Flight Recorder Support\"\n+\n+dependencies {\n+\tinternal(platform(project(\":dependencies\")))\n+\n+\tapi(platform(project(\":junit-bom\")))\n+\tapi(\"org.apiguardian:apiguardian-api\")\n+\tapi(project(\":junit-platform-launcher\"))\n+}\n+\n+javaLibrary {\n+\tmainJavaVersion = JavaVersion.VERSION_11\n+}\n+\n+tasks {\n+\tverifyOSGi {\n+\t\tenabled=false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwNTE5MQ=="}, "originalCommit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI0MzI5MQ==", "bodyText": "So I've just tested and there is only one minor tweak required to get past this now :)\nin buildSrc/src/main/kotlin/osgi-conventions.gradle.kts\nplease make this small change:\n@@ -65,11 +65,13 @@ val osgiPropertiesFile = file(\"$buildDir/verifyOSGiProperties.bndrun\")\n // task writes out the properties necessary for it to verify the OSGi\n // metadata.\n val osgiProperties by tasks.registering(WriteProperties::class) {\n \toutputFile = osgiPropertiesFile\n \tproperty(\"-standalone\", true)\n-\tproperty(\"-runee\", \"JavaSE-${Versions.jvmTarget}\")\n+\tproject.extensions.getByType(JavaLibraryExtension::class.java).let { javaLibrary ->\n+\t\tproperty(\"-runee\", \"JavaSE-${javaLibrary.mainJavaVersion}\")\n+\t}\n \tproperty(\"-runrequires\", \"osgi.identity;filter:='(osgi.identity=${project.name})'\")\n \tproperty(\"-runsystempackages\", \"jdk.internal.misc,sun.misc\")\n }\n \n val osgiVerification by configurations.creating {\n\n\nthen finally:\n@@ -18,9 +18,6 @@ javaLibrary {\n \n tasks {\n \tcompileModule {\n \t\ttargetCompatibility = \"11\"\n \t}\n-\tverifyOSGi {\n-\t\tenabled = false\n-\t}\n }\n\n\nWith this all tests should now pass.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r442243291", "createdAt": "2020-06-18T13:53:29Z", "author": {"login": "rotty3000"}, "path": "junit-platform-jfr/junit-platform-jfr.gradle.kts", "diffHunk": "@@ -0,0 +1,23 @@\n+plugins {\n+\t`java-library-conventions`\n+}\n+\n+description = \"JUnit Platform Flight Recorder Support\"\n+\n+dependencies {\n+\tinternal(platform(project(\":dependencies\")))\n+\n+\tapi(platform(project(\":junit-bom\")))\n+\tapi(\"org.apiguardian:apiguardian-api\")\n+\tapi(project(\":junit-platform-launcher\"))\n+}\n+\n+javaLibrary {\n+\tmainJavaVersion = JavaVersion.VERSION_11\n+}\n+\n+tasks {\n+\tverifyOSGi {\n+\t\tenabled=false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwNTE5MQ=="}, "originalCommit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI0NTAyNQ==", "bodyText": "This issue is that the Java versioned used for the \"verify\" task should match the intended target for that code. Since each project seems to be able to adjust it's base Java level, we need to make verifyOSGi aware of that as well :) This small change fixes that instead of using a global preset version.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r442245025", "createdAt": "2020-06-18T13:55:46Z", "author": {"login": "rotty3000"}, "path": "junit-platform-jfr/junit-platform-jfr.gradle.kts", "diffHunk": "@@ -0,0 +1,23 @@\n+plugins {\n+\t`java-library-conventions`\n+}\n+\n+description = \"JUnit Platform Flight Recorder Support\"\n+\n+dependencies {\n+\tinternal(platform(project(\":dependencies\")))\n+\n+\tapi(platform(project(\":junit-bom\")))\n+\tapi(\"org.apiguardian:apiguardian-api\")\n+\tapi(project(\":junit-platform-launcher\"))\n+}\n+\n+javaLibrary {\n+\tmainJavaVersion = JavaVersion.VERSION_11\n+}\n+\n+tasks {\n+\tverifyOSGi {\n+\t\tenabled=false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwNTE5MQ=="}, "originalCommit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI2NDc2MQ==", "bodyText": "If you would like I can push this as a PR to master branch including the update to 5.1.1 and then you can rebase?", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r442264761", "createdAt": "2020-06-18T14:22:28Z", "author": {"login": "rotty3000"}, "path": "junit-platform-jfr/junit-platform-jfr.gradle.kts", "diffHunk": "@@ -0,0 +1,23 @@\n+plugins {\n+\t`java-library-conventions`\n+}\n+\n+description = \"JUnit Platform Flight Recorder Support\"\n+\n+dependencies {\n+\tinternal(platform(project(\":dependencies\")))\n+\n+\tapi(platform(project(\":junit-bom\")))\n+\tapi(\"org.apiguardian:apiguardian-api\")\n+\tapi(project(\":junit-platform-launcher\"))\n+}\n+\n+javaLibrary {\n+\tmainJavaVersion = JavaVersion.VERSION_11\n+}\n+\n+tasks {\n+\tverifyOSGi {\n+\t\tenabled=false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwNTE5MQ=="}, "originalCommit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMwNzc0Ng==", "bodyText": "@rotty3000 Thanks for looking into this and providing such detailed instructions! I think we can take it from here. \ud83d\udc4d\nThat makes total sense. I'm afraid the error message was not very helpful for a non-OSGi user such as me. Is there a way to make it more verbose in case we run into a similar issue in the future?", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r442307746", "createdAt": "2020-06-18T15:20:30Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-jfr/junit-platform-jfr.gradle.kts", "diffHunk": "@@ -0,0 +1,23 @@\n+plugins {\n+\t`java-library-conventions`\n+}\n+\n+description = \"JUnit Platform Flight Recorder Support\"\n+\n+dependencies {\n+\tinternal(platform(project(\":dependencies\")))\n+\n+\tapi(platform(project(\":junit-bom\")))\n+\tapi(\"org.apiguardian:apiguardian-api\")\n+\tapi(project(\":junit-platform-launcher\"))\n+}\n+\n+javaLibrary {\n+\tmainJavaVersion = JavaVersion.VERSION_11\n+}\n+\n+tasks {\n+\tverifyOSGi {\n+\t\tenabled=false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwNTE5MQ=="}, "originalCommit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMyMTQ4OQ==", "bodyText": "You're right that the error message was not informative. Who said \"Software is hard.\"\nBut to be very honest, there are very few projects I've seen in the wild which actually build artifacts targeting different versions of Java in a single build and also building for OSGi, so most times a global setting is more than enough. I had to dig into gradle/kotlin DSL to even figure out how to get the project specific java version :D So what you have here is bleeding edge Java Library + OSGi build spec. But the bnd team is trying very hard to make the whole thing less obtuse and esoteric. Thanks for putting up with us :)", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r442321489", "createdAt": "2020-06-18T15:40:27Z", "author": {"login": "rotty3000"}, "path": "junit-platform-jfr/junit-platform-jfr.gradle.kts", "diffHunk": "@@ -0,0 +1,23 @@\n+plugins {\n+\t`java-library-conventions`\n+}\n+\n+description = \"JUnit Platform Flight Recorder Support\"\n+\n+dependencies {\n+\tinternal(platform(project(\":dependencies\")))\n+\n+\tapi(platform(project(\":junit-bom\")))\n+\tapi(\"org.apiguardian:apiguardian-api\")\n+\tapi(project(\":junit-platform-launcher\"))\n+}\n+\n+javaLibrary {\n+\tmainJavaVersion = JavaVersion.VERSION_11\n+}\n+\n+tasks {\n+\tverifyOSGi {\n+\t\tenabled=false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwNTE5MQ=="}, "originalCommit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY0MzAxNw==", "bodyText": "Applied the \"small change\" as suggested, @rotty3000 -- and works locally. At least the OSGi verification check.\nNow that the integration tests are started, they revealed another quirk: https://bugs.openjdk.java.net/browse/JDK-8232092?focusedCommentId=14352730&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14352730 -- but that's another story.\nThanks for your support, Raymond!", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r449643017", "createdAt": "2020-07-03T15:53:20Z", "author": {"login": "sormuras"}, "path": "junit-platform-jfr/junit-platform-jfr.gradle.kts", "diffHunk": "@@ -0,0 +1,23 @@\n+plugins {\n+\t`java-library-conventions`\n+}\n+\n+description = \"JUnit Platform Flight Recorder Support\"\n+\n+dependencies {\n+\tinternal(platform(project(\":dependencies\")))\n+\n+\tapi(platform(project(\":junit-bom\")))\n+\tapi(\"org.apiguardian:apiguardian-api\")\n+\tapi(project(\":junit-platform-launcher\"))\n+}\n+\n+javaLibrary {\n+\tmainJavaVersion = JavaVersion.VERSION_11\n+}\n+\n+tasks {\n+\tverifyOSGi {\n+\t\tenabled=false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwNTE5MQ=="}, "originalCommit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzE3NTM4OnYy", "diffSide": "RIGHT", "path": "junit-platform-launcher/junit-platform-launcher.gradle.kts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDoyMTo1NlrOGeeOvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDoyMTo1NlrOGeeOvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwNTc1Nw==", "bodyText": "Gonna revert this. No longer needed, methinks.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r434605757", "createdAt": "2020-06-03T14:21:56Z", "author": {"login": "sormuras"}, "path": "junit-platform-launcher/junit-platform-launcher.gradle.kts", "diffHunk": "@@ -1,5 +1,7 @@\n plugins {\n \t`java-library-conventions`\n+\t`java-multi-release-sources`\n+\t`java-repackage-jars`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzE3NzYyOnYy", "diffSide": "RIGHT", "path": "src/checkstyle/suppressions.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDoyMjoyN1rOGeeQLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDoyMjoyN1rOGeeQLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwNjEyNg==", "bodyText": "Gonna revert this. No longer needed, methinks.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r434606126", "createdAt": "2020-06-03T14:22:27Z", "author": {"login": "sormuras"}, "path": "src/checkstyle/suppressions.xml", "diffHunk": "@@ -4,4 +4,6 @@\n \t\tfiles=\"junit-platform-commons[\\\\/]src[\\\\/]main[\\\\/]java9[\\\\/]org[\\\\/]junit[\\\\/]platform[\\\\/]commons[\\\\/]util[\\\\/]*\"/>\n \t<suppress checks=\"JavadocPackage\"\n \t\tfiles=\"junit-platform-console[\\\\/]src[\\\\/]main[\\\\/]java9[\\\\/]org[\\\\/]junit[\\\\/]platform[\\\\/]console[\\\\/]*\"/>\n+\t<suppress checks=\"JavadocPackage\"\n+\t\tfiles=\"junit-platform-launcher[\\\\/]src[\\\\/]main[\\\\/]java9[\\\\/]org[\\\\/]junit[\\\\/]platform[\\\\/]launcher[\\\\/]listeners[\\\\/]*\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzE4Mzc0OnYy", "diffSide": "RIGHT", "path": "platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/ModularUserGuideTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDoyMzozNlrOGeeT5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDoyMzozNlrOGeeT5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwNzA3Nw==", "bodyText": "Convert this into a real integration test.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r434607077", "createdAt": "2020-06-03T14:23:36Z", "author": {"login": "sormuras"}, "path": "platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/ModularUserGuideTests.java", "diffHunk": "@@ -108,6 +108,8 @@\n \t\tvar projectDir = Path.of(\"../documentation\");\n \t\tcommand.add(Path.of(System.getProperty(\"java.home\"), \"bin\", \"java\").toString());\n \n+\t\tcommand.add(\"-XX:StartFlightRecording:filename=\" + temp.resolve(\"user-guide.jfr\"));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODQzNDU4OnYy", "diffSide": "RIGHT", "path": "junit-platform-jfr/src/module/org.junit.platform.jfr/module-info.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxOTo0MzoyOVrOGeqz3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMjozMTozOVrOGezt6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgxMTg2OA==", "bodyText": "I don't see commons in the dependencies in the buildscript nor used in the source code. Can that be removed from here?", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r434811868", "createdAt": "2020-06-03T19:43:29Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-jfr/src/module/org.junit.platform.jfr/module-info.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+/**\n+ * Defines the JUnit Platform JAR API.\n+ *\n+ * @since 1.7\n+ */\n+module org.junit.platform.jfr {\n+\trequires jdk.jfr;\n+\trequires transitive org.apiguardian.api;\n+\trequires org.junit.platform.commons;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7e9c1e8cd9d9c91b27da97aabfce31d6bc4e18c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk1NzgwMg==", "bodyText": "Think so, yes.\nAlso the transitive modifiers are not needed here -- as no package is exported.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r434957802", "createdAt": "2020-06-04T02:31:39Z", "author": {"login": "sormuras"}, "path": "junit-platform-jfr/src/module/org.junit.platform.jfr/module-info.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+/**\n+ * Defines the JUnit Platform JAR API.\n+ *\n+ * @since 1.7\n+ */\n+module org.junit.platform.jfr {\n+\trequires jdk.jfr;\n+\trequires transitive org.apiguardian.api;\n+\trequires org.junit.platform.commons;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgxMTg2OA=="}, "originalCommit": {"oid": "a7e9c1e8cd9d9c91b27da97aabfce31d6bc4e18c"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4020, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}