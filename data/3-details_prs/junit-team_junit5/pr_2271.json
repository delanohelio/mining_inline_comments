{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MjkxMDEz", "number": 2271, "title": "Add Flight Recorder based execution listener", "bodyText": "Overview\nResolves #2272\n\nI hereby agree to the terms of the JUnit Contributor License Agreement.\n\nDefinition of Done\n\n There are no TODOs left in the code\n Method preconditions are checked and documented in the method's Javadoc\n Coding conventions (e.g. for logging) have been followed\n Change is covered by automated tests including corner cases, errors, and exception handling\n Public API has Javadoc and @API annotations\n Change is documented in the User Guide and Release Notes\n All continuous integration builds pass", "createdAt": "2020-04-24T02:16:53Z", "url": "https://github.com/junit-team/junit5/pull/2271", "merged": true, "mergeCommit": {"oid": "0819622b55b97628793b137970ee5cd01534fe88"}, "closed": true, "closedAt": "2020-07-12T11:00:57Z", "author": {"login": "sormuras"}, "timelineItems": {"totalCount": 50, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaoGQcgBqjMyNjc1NjkzOTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc0JBBEAFqTQ0Njg1OTg4MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3f43e05b4658d70d2e05c9ccc7d3316109559f59", "author": {"user": {"login": "sormuras", "name": "Christian Stein"}}, "url": "https://github.com/junit-team/junit5/commit/3f43e05b4658d70d2e05c9ccc7d3316109559f59", "committedDate": "2020-04-24T02:26:02Z", "message": "\"Fix\" build by commenting out tool run for the time being"}, "afterCommit": {"oid": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2", "author": {"user": {"login": "sormuras", "name": "Christian Stein"}}, "url": "https://github.com/junit-team/junit5/commit/95e2f94f6fc88dd345e2e406f3ef8407462ab7f2", "committedDate": "2020-04-24T02:31:00Z", "message": "\"Fix\" build by commenting out tool run for the time being"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMDE4MzU0", "url": "https://github.com/junit-team/junit5/pull/2271#pullrequestreview-400018354", "createdAt": "2020-04-24T14:52:11Z", "commit": {"oid": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2"}, "state": "COMMENTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNDo1MjoxMlrOGLbesg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNTowNjo1OFrOGLcLYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYzNzc0Ng==", "bodyText": "Set a @name annotation. My recommendation would be org.junit.Test", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414637746", "createdAt": "2020-04-24T14:52:12Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.end();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();\n+\t\tevent.begin();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tevent.end();\n+\t\tevent.result = result.getStatus().toString();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\t@Description(\"Test Plan Execution\")\n+\tstatic class TestPlanExecutionEvent extends Event {\n+\t\t@Label(\"Does test plan contain tests?\")\n+\t\tboolean containsTests;\n+\t\t@Label(\"UniqueIds of the root containers\")\n+\t\tString roots;\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\tstatic abstract class TestEvent extends Event {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYzODAwMg==", "bodyText": "Should be \"Unique Id\"", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414638002", "createdAt": "2020-04-24T14:52:33Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.end();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();\n+\t\tevent.begin();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tevent.end();\n+\t\tevent.result = result.getStatus().toString();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\t@Description(\"Test Plan Execution\")\n+\tstatic class TestPlanExecutionEvent extends Event {\n+\t\t@Label(\"Does test plan contain tests?\")\n+\t\tboolean containsTests;\n+\t\t@Label(\"UniqueIds of the root containers\")\n+\t\tString roots;\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\tstatic abstract class TestEvent extends Event {\n+\t\t@Label(\"UniqueId\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDYzODkxMw==", "bodyText": "Set a @Label. My recommendation would be \"Test\".", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414638913", "createdAt": "2020-04-24T14:53:43Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.end();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();\n+\t\tevent.begin();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tevent.end();\n+\t\tevent.result = result.getStatus().toString();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\t@Description(\"Test Plan Execution\")\n+\tstatic class TestPlanExecutionEvent extends Event {\n+\t\t@Label(\"Does test plan contain tests?\")\n+\t\tboolean containsTests;\n+\t\t@Label(\"UniqueIds of the root containers\")\n+\t\tString roots;\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\tstatic abstract class TestEvent extends Event {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0MDQxOA==", "bodyText": "Should be Label, not Description", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414640418", "createdAt": "2020-04-24T14:55:42Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.end();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();\n+\t\tevent.begin();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tevent.end();\n+\t\tevent.result = result.getStatus().toString();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\t@Description(\"Test Plan Execution\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0MDgxOQ==", "bodyText": "A better label would be \"Contains Tests\"", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414640819", "createdAt": "2020-04-24T14:56:12Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.end();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();\n+\t\tevent.begin();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tevent.end();\n+\t\tevent.result = result.getStatus().toString();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\t@Description(\"Test Plan Execution\")\n+\tstatic class TestPlanExecutionEvent extends Event {\n+\t\t@Label(\"Does test plan contain tests?\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0MTU0NA==", "bodyText": "A better label would be \"Root Containers Ids\"", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414641544", "createdAt": "2020-04-24T14:57:05Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.end();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();\n+\t\tevent.begin();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tevent.end();\n+\t\tevent.result = result.getStatus().toString();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\t@Description(\"Test Plan Execution\")\n+\tstatic class TestPlanExecutionEvent extends Event {\n+\t\t@Label(\"Does test plan contain tests?\")\n+\t\tboolean containsTests;\n+\t\t@Label(\"UniqueIds of the root containers\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0MTgzOQ==", "bodyText": "A better fields name would be \"rootContainerIds\"", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414641839", "createdAt": "2020-04-24T14:57:28Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.end();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();\n+\t\tevent.begin();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tevent.end();\n+\t\tevent.result = result.getStatus().toString();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\t@Description(\"Test Plan Execution\")\n+\tstatic class TestPlanExecutionEvent extends Event {\n+\t\t@Label(\"Does test plan contain tests?\")\n+\t\tboolean containsTests;\n+\t\t@Label(\"UniqueIds of the root containers\")\n+\t\tString roots;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0MjA0MA==", "bodyText": "\"Unique Id\"", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414642040", "createdAt": "2020-04-24T14:57:42Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.end();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();\n+\t\tevent.begin();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tevent.end();\n+\t\tevent.result = result.getStatus().toString();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\t@Description(\"Test Plan Execution\")\n+\tstatic class TestPlanExecutionEvent extends Event {\n+\t\t@Label(\"Does test plan contain tests?\")\n+\t\tboolean containsTests;\n+\t\t@Label(\"UniqueIds of the root containers\")\n+\t\tString roots;\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\tstatic abstract class TestEvent extends Event {\n+\t\t@Label(\"UniqueId\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0Mjk4OQ==", "bodyText": "Why not use a volatile?", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414642989", "createdAt": "2020-04-24T14:58:55Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0NTQ2MQ==", "bodyText": "If this is a path, consider using \"/\" as a separator, i.e. \"id1 / id2 / id3\". Tabs may result in different number of spaces, or may not work at all, if visualized in a GUI.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414645461", "createdAt": "2020-04-24T15:02:04Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0NjQyMQ==", "bodyText": "No need to call end(). It is implicit in commit()", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414646421", "createdAt": "2020-04-24T15:03:18Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.end();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0NjkzNg==", "bodyText": "Should be label", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414646936", "createdAt": "2020-04-24T15:04:03Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.end();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();\n+\t\tevent.begin();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tevent.end();\n+\t\tevent.result = result.getStatus().toString();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\t@Description(\"Test Plan Execution\")\n+\tstatic class TestPlanExecutionEvent extends Event {\n+\t\t@Label(\"Does test plan contain tests?\")\n+\t\tboolean containsTests;\n+\t\t@Label(\"UniqueIds of the root containers\")\n+\t\tString roots;\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\tstatic abstract class TestEvent extends Event {\n+\t\t@Label(\"UniqueId\")\n+\t\tString uniqueId;\n+\t\t@Label(\"Display Name\")\n+\t\tString displayName;\n+\t}\n+\n+\t@Description(\"Dynamic Test Registration\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0NzQxMQ==", "bodyText": "Missing Category and Name(\"org.junit.DynamicTestRegistration\")", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414647411", "createdAt": "2020-04-24T15:04:39Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.end();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();\n+\t\tevent.begin();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tevent.end();\n+\t\tevent.result = result.getStatus().toString();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\t@Description(\"Test Plan Execution\")\n+\tstatic class TestPlanExecutionEvent extends Event {\n+\t\t@Label(\"Does test plan contain tests?\")\n+\t\tboolean containsTests;\n+\t\t@Label(\"UniqueIds of the root containers\")\n+\t\tString roots;\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\tstatic abstract class TestEvent extends Event {\n+\t\t@Label(\"UniqueId\")\n+\t\tString uniqueId;\n+\t\t@Label(\"Display Name\")\n+\t\tString displayName;\n+\t}\n+\n+\t@Description(\"Dynamic Test Registration\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0ODIzMw==", "bodyText": "Set the fields before timing starts with begin()", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414648233", "createdAt": "2020-04-24T15:05:49Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.roots = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(Collectors.joining(\"\\t\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.end();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();\n+\t\tevent.begin();\n+\t\tevent.uniqueId = test.getUniqueId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY0OTE4NQ==", "bodyText": "Why not assign field directly, i.e. testExecutionEventMap = new ConcurrentHashMap<>()?", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414649185", "createdAt": "2020-04-24T15:06:58Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Description;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e2f94f6fc88dd345e2e406f3ef8407462ab7f2"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMTYyMjI4", "url": "https://github.com/junit-team/junit5/pull/2271#pullrequestreview-400162228", "createdAt": "2020-04-24T18:03:30Z", "commit": {"oid": "74a383cec2c8ef83a68b717452ff2a0f149b7ee6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODowMzozMFrOGLjL1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODowMzozMFrOGLjL1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc2Mzk4OQ==", "bodyText": "\u2753 Does JFR support explicit nesting of events?", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414763989", "createdAt": "2020-04-24T18:03:30Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+import jdk.jfr.Name;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.rootContainerIds = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(\n+\t\t\tCollectors.joining(\"#\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74a383cec2c8ef83a68b717452ff2a0f149b7ee6"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMTYyNjEz", "url": "https://github.com/junit-team/junit5/pull/2271#pullrequestreview-400162613", "createdAt": "2020-04-24T18:04:05Z", "commit": {"oid": "74a383cec2c8ef83a68b717452ff2a0f149b7ee6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODowNDowNVrOGLjNEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxODowNDowNVrOGLjNEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc2NDMwNQ==", "bodyText": "This should be declared in META-INF/services so it works on the classpath as well, shouldn't it?", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r414764305", "createdAt": "2020-04-24T18:04:05Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-launcher/src/module/org.junit.platform.launcher/module-info.java", "diffHunk": "@@ -30,4 +31,7 @@\n \n \tuses org.junit.platform.engine.TestEngine;\n \tuses org.junit.platform.launcher.TestExecutionListener;\n+\n+\tprovides org.junit.platform.launcher.TestExecutionListener\n+\t\t\twith org.junit.platform.launcher.listeners.FlightRecordingListener;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74a383cec2c8ef83a68b717452ff2a0f149b7ee6"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMzgzNDE5", "url": "https://github.com/junit-team/junit5/pull/2271#pullrequestreview-400383419", "createdAt": "2020-04-25T11:07:24Z", "commit": {"oid": "c7dc07b655eed11f532e983f6c178b1b02bb457b"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMTowNzozM1rOGL0Blw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMToyMjo1NVrOGL0LGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAzOTg5NQ==", "bodyText": "@category(\"JUnit\"", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r415039895", "createdAt": "2020-04-25T11:07:33Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -112,27 +120,38 @@ public void executionFinished(TestIdentifier test, TestExecutionResult result) {\n \t@Name(\"org.junit.Test\")\n \t@Label(\"Test\")\n \tstatic abstract class TestEvent extends Event {\n-\n \t\t@Label(\"Unique Id\")\n \t\tString uniqueId;\n-\n \t\t@Label(\"Display Name\")\n \t\tString displayName;\n \t}\n \n \t@Name(\"org.junit.DynamicTestRegistration\")\n+\t@Label(\"Dynamic Test Registration\")\n \tstatic class DynamicTestEvent extends TestEvent {\n \t}\n \n \t@Name(\"org.junit.SkippedTest\")\n+\t@Label(\"Skipped Test\")\n \tstatic class SkippedTestEvent extends TestEvent {\n \t\t@Label(\"Reason\")\n \t\tString reason;\n \t}\n \n \t@Name(\"org.junit.TestExecution\")\n+\t@Label(\"Test\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7dc07b655eed11f532e983f6c178b1b02bb457b"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAzOTkyNQ==", "bodyText": "@category(\"JUnit\"", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r415039925", "createdAt": "2020-04-25T11:07:49Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -112,27 +120,38 @@ public void executionFinished(TestIdentifier test, TestExecutionResult result) {\n \t@Name(\"org.junit.Test\")\n \t@Label(\"Test\")\n \tstatic abstract class TestEvent extends Event {\n-\n \t\t@Label(\"Unique Id\")\n \t\tString uniqueId;\n-\n \t\t@Label(\"Display Name\")\n \t\tString displayName;\n \t}\n \n \t@Name(\"org.junit.DynamicTestRegistration\")\n+\t@Label(\"Dynamic Test Registration\")\n \tstatic class DynamicTestEvent extends TestEvent {\n \t}\n \n \t@Name(\"org.junit.SkippedTest\")\n+\t@Label(\"Skipped Test\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7dc07b655eed11f532e983f6c178b1b02bb457b"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0MDIwNg==", "bodyText": "I don't think stack traces are useful for these events as they would only point back into the test framework. Adding the annotation @stacktrace(false) will turn them off.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r415040206", "createdAt": "2020-04-25T11:09:36Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -112,27 +120,38 @@ public void executionFinished(TestIdentifier test, TestExecutionResult result) {\n \t@Name(\"org.junit.Test\")\n \t@Label(\"Test\")\n \tstatic abstract class TestEvent extends Event {\n-\n \t\t@Label(\"Unique Id\")\n \t\tString uniqueId;\n-\n \t\t@Label(\"Display Name\")\n \t\tString displayName;\n \t}\n \n \t@Name(\"org.junit.DynamicTestRegistration\")\n+\t@Label(\"Dynamic Test Registration\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7dc07b655eed11f532e983f6c178b1b02bb457b"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0MTUwNQ==", "bodyText": "I would leave them out for now. It will reduce the noise. If there is a need later on, they can be added.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r415041505", "createdAt": "2020-04-25T11:17:27Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+import jdk.jfr.Name;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent;\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap;\n+\n+\tpublic FlightRecordingListener() {\n+\t\tthis.testPlanExecutionEvent = new AtomicReference<>();\n+\t\tthis.testExecutionEventMap = new ConcurrentHashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.rootContainerIds = plan.getRoots().stream().map(TestIdentifier::getUniqueId).collect(\n+\t\t\tCollectors.joining(\"#\"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void dynamicTestRegistered(TestIdentifier test) {\n+\t\tDynamicTestEvent event = new DynamicTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.uniqueId = test.getUniqueId();\n+\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc2Mzk4OQ=="}, "originalCommit": {"oid": "74a383cec2c8ef83a68b717452ff2a0f149b7ee6"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA0MjMyOA==", "bodyText": "How often is a report emitted, once per test? What would it typically contain? There may be other ways to structure the data, but I need more information.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r415042328", "createdAt": "2020-04-25T11:22:55Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -112,27 +120,38 @@ public void executionFinished(TestIdentifier test, TestExecutionResult result) {\n \t@Name(\"org.junit.Test\")\n \t@Label(\"Test\")\n \tstatic abstract class TestEvent extends Event {\n-\n \t\t@Label(\"Unique Id\")\n \t\tString uniqueId;\n-\n \t\t@Label(\"Display Name\")\n \t\tString displayName;\n \t}\n \n \t@Name(\"org.junit.DynamicTestRegistration\")\n+\t@Label(\"Dynamic Test Registration\")\n \tstatic class DynamicTestEvent extends TestEvent {\n \t}\n \n \t@Name(\"org.junit.SkippedTest\")\n+\t@Label(\"Skipped Test\")\n \tstatic class SkippedTestEvent extends TestEvent {\n \t\t@Label(\"Reason\")\n \t\tString reason;\n \t}\n \n \t@Name(\"org.junit.TestExecution\")\n+\t@Label(\"Test\")\n \tstatic class TestExecutionEvent extends TestEvent {\n \t\t@Label(\"Result\")\n \t\tString result;\n \t}\n+\n+\t@Category(\"JUnit\")\n+\t@Name(\"org.junit.ReportEntry\")\n+\t@Label(\"Report Entry\")\n+\tstatic class ReportEntryEvent extends Event {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7dc07b655eed11f532e983f6c178b1b02bb457b"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNTQxMTQx", "url": "https://github.com/junit-team/junit5/pull/2271#pullrequestreview-401541141", "createdAt": "2020-04-28T06:47:33Z", "commit": {"oid": "321d5e2913ee041525f84dea57144cc22e4323c0"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNjo0NzozM1rOGNFJqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNzowNjo1OVrOGNFxMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM2OTA2NQ==", "bodyText": "A better fields name may be: exceptionMessage\nYou may want to complement with the class:\nexceptionClass = result.getThrowable();", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r416369065", "createdAt": "2020-04-28T06:47:33Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -76,74 +78,80 @@ public void executionSkipped(TestIdentifier test, String reason) {\n \tpublic void executionStarted(TestIdentifier test) {\n \t\tTestExecutionEvent event = new TestExecutionEvent();\n \t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n-\t\tevent.uniqueId = test.getUniqueId();\n-\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.initialize(test);\n \t\tevent.begin();\n \t}\n \n \t@Override\n \tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n-\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tif (test.isContainer() && result.getStatus().equals(TestExecutionResult.Status.SUCCESSFUL)) {\n+\t\t\treturn;\n+\t\t}\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId()); // TODO Remove?\n \t\tevent.end();\n+\t\tevent.reports = event.reportEntries == null ? null : event.reportEntries.toString();\n \t\tevent.result = result.getStatus().toString();\n+\t\tevent.throwable = result.getThrowable().map(Throwable::getMessage).orElse(null); // TODO Include stacktrace?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321d5e2913ee041525f84dea57144cc22e4323c0"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM3NDUxOA==", "bodyText": "Ideally data in JFR should be normalized, similar to a relational database:\nabstract class TestEvent {\n@Testid\nlong testId\n}\nand then\nclass ReportEntryEvent {\n@Testid\nlong testId;\nString key;\nString value;\n}\nTo mark there is a relation between the event and the report:\n@MetadataDefinition\n@Label(\"Test Id\")\n@relational\n@retention(RetentionPolicy.RUNTIME)\n@target({ ElementType.FIELD })\npublic @interface @Testid {\n}\ntestId could be a counter, i.e 1, 2, 3 ..", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r416374518", "createdAt": "2020-04-28T06:58:07Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -76,74 +78,80 @@ public void executionSkipped(TestIdentifier test, String reason) {\n \tpublic void executionStarted(TestIdentifier test) {\n \t\tTestExecutionEvent event = new TestExecutionEvent();\n \t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n-\t\tevent.uniqueId = test.getUniqueId();\n-\t\tevent.displayName = test.getDisplayName();\n+\t\tevent.initialize(test);\n \t\tevent.begin();\n \t}\n \n \t@Override\n \tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n-\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId());\n+\t\tif (test.isContainer() && result.getStatus().equals(TestExecutionResult.Status.SUCCESSFUL)) {\n+\t\t\treturn;\n+\t\t}\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId()); // TODO Remove?\n \t\tevent.end();\n+\t\tevent.reports = event.reportEntries == null ? null : event.reportEntries.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321d5e2913ee041525f84dea57144cc22e4323c0"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM3OTE4NQ==", "bodyText": "Thanks!", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r416379185", "createdAt": "2020-04-28T07:06:59Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -112,27 +120,38 @@ public void executionFinished(TestIdentifier test, TestExecutionResult result) {\n \t@Name(\"org.junit.Test\")\n \t@Label(\"Test\")\n \tstatic abstract class TestEvent extends Event {\n-\n \t\t@Label(\"Unique Id\")\n \t\tString uniqueId;\n-\n \t\t@Label(\"Display Name\")\n \t\tString displayName;\n \t}\n \n \t@Name(\"org.junit.DynamicTestRegistration\")\n+\t@Label(\"Dynamic Test Registration\")\n \tstatic class DynamicTestEvent extends TestEvent {\n \t}\n \n \t@Name(\"org.junit.SkippedTest\")\n+\t@Label(\"Skipped Test\")\n \tstatic class SkippedTestEvent extends TestEvent {\n \t\t@Label(\"Reason\")\n \t\tString reason;\n \t}\n \n \t@Name(\"org.junit.TestExecution\")\n+\t@Label(\"Test\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTAzOTg5NQ=="}, "originalCommit": {"oid": "c7dc07b655eed11f532e983f6c178b1b02bb457b"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNTYwOTA0", "url": "https://github.com/junit-team/junit5/pull/2271#pullrequestreview-403560904", "createdAt": "2020-04-30T14:13:17Z", "commit": {"oid": "d5d6267b409fe28f81f6b9af33b4c2ebad7b5044"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoxMzoxN1rOGOrOSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoxMzoxN1rOGOrOSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0MTQxNg==", "bodyText": "Set a name for the annotation, i.e @name(\"org.junit.UniqueId\")", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r418041416", "createdAt": "2020-04-30T14:13:17Z", "author": {"login": "egahlin"}, "path": "junit-platform-launcher/src/main/java9/org/junit/platform/launcher/listeners/FlightRecordingListener.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.launcher.listeners;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+import jdk.jfr.Category;\n+import jdk.jfr.Event;\n+import jdk.jfr.Label;\n+import jdk.jfr.MetadataDefinition;\n+import jdk.jfr.Name;\n+import jdk.jfr.Relational;\n+import jdk.jfr.StackTrace;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.reporting.ReportEntry;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * A {@link TestExecutionListener} that generates Java Flight Recorder\n+ * events.\n+ *\n+ * @see <a href=\"https://openjdk.java.net/jeps/328\">JEP 328: Flight Recorder</a>\n+ * @since 1.7\n+ */\n+@API(status = EXPERIMENTAL, since = \"1.7\")\n+public class FlightRecordingListener implements TestExecutionListener {\n+\n+\tprivate final AtomicReference<TestPlanExecutionEvent> testPlanExecutionEvent = new AtomicReference<>();\n+\tprivate final Map<String, TestExecutionEvent> testExecutionEventMap = new ConcurrentHashMap<>();\n+\n+\t@Override\n+\tpublic void testPlanExecutionStarted(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = new TestPlanExecutionEvent();\n+\t\tevent.containsTests = plan.containsTests();\n+\t\tevent.engineNames = plan.getRoots().stream().map(TestIdentifier::getDisplayName).collect(\n+\t\t\tCollectors.joining(\", \"));\n+\t\ttestPlanExecutionEvent.set(event);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void testPlanExecutionFinished(TestPlan plan) {\n+\t\tTestPlanExecutionEvent event = testPlanExecutionEvent.get();\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionSkipped(TestIdentifier test, String reason) {\n+\t\tSkippedTestEvent event = new SkippedTestEvent();\n+\t\tevent.initialize(test);\n+\t\tevent.reason = reason;\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void executionStarted(TestIdentifier test) {\n+\t\tTestExecutionEvent event = new TestExecutionEvent();\n+\t\ttestExecutionEventMap.put(test.getUniqueId(), event);\n+\t\tevent.initialize(test);\n+\t\tevent.begin();\n+\t}\n+\n+\t@Override\n+\tpublic void executionFinished(TestIdentifier test, TestExecutionResult result) {\n+\t\tif (test.isContainer() && result.getStatus().equals(TestExecutionResult.Status.SUCCESSFUL)) {\n+\t\t\treturn;\n+\t\t}\n+\t\tOptional<Throwable> throwable = result.getThrowable();\n+\t\tTestExecutionEvent event = testExecutionEventMap.get(test.getUniqueId()); // TODO Remove?\n+\t\tevent.end();\n+\t\tevent.result = result.getStatus().toString();\n+\t\tevent.exceptionClass = throwable.map(Throwable::getClass).orElse(null);\n+\t\tevent.exceptionMessage = throwable.map(Throwable::getMessage).orElse(null);\n+\t\tevent.commit();\n+\t}\n+\n+\t@Override\n+\tpublic void reportingEntryPublished(TestIdentifier test, ReportEntry reportEntry) {\n+\t\tfor (Map.Entry<String, String> entry : reportEntry.getKeyValuePairs().entrySet()) {\n+\t\t\tReportEntryEvent event = new ReportEntryEvent();\n+\t\t\tevent.uniqueId = test.getUniqueId();\n+\t\t\tevent.key = entry.getKey();\n+\t\t\tevent.value = entry.getValue();\n+\t\t\tevent.commit();\n+\t\t}\n+\t}\n+\n+\t@Category(\"JUnit\")\n+\t@Label(\"Test Plan\")\n+\t@Name(\"org.junit.TestPlan\")\n+\t@StackTrace(false)\n+\tstatic class TestPlanExecutionEvent extends Event {\n+\t\t@Label(\"Contains Tests\")\n+\t\tboolean containsTests;\n+\t\t@Label(\"Engine Names\")\n+\t\tString engineNames;\n+\t}\n+\n+\t@MetadataDefinition\n+\t@Relational", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5d6267b409fe28f81f6b9af33b4c2ebad7b5044"}, "originalPosition": 122}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "404ea09ebe5626f4c4002118d3c0806a82beb5e3", "author": {"user": {"login": "sormuras", "name": "Christian Stein"}}, "url": "https://github.com/junit-team/junit5/commit/404ea09ebe5626f4c4002118d3c0806a82beb5e3", "committedDate": "2020-05-11T07:09:43Z", "message": "Attach label to UniqueId's metadata definition"}, "afterCommit": {"oid": "9c74ef0b286b799ca74e5b29b040a78174cad9b2", "author": {"user": {"login": "sormuras", "name": "Christian Stein"}}, "url": "https://github.com/junit-team/junit5/commit/9c74ef0b286b799ca74e5b29b040a78174cad9b2", "committedDate": "2020-05-11T07:37:29Z", "message": "Always register JFR-based event-firing listener\n\nCould be guarded by a launcher configuration flag to opt-out via:\n`LauncherConfig.builder().enableJavaFlightRecordingListener(false);`"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fd7f0aa692fac79d53f6f7184ce01b55531430ac", "author": {"user": {"login": "sormuras", "name": "Christian Stein"}}, "url": "https://github.com/junit-team/junit5/commit/fd7f0aa692fac79d53f6f7184ce01b55531430ac", "committedDate": "2020-05-11T08:57:14Z", "message": "Rely on module org.junit.platform.launcher's API\n\nRevert super-powered command-line options."}, "afterCommit": {"oid": "89cb158ca642be5a8451a1426a536a9de760031e", "author": {"user": {"login": "sormuras", "name": "Christian Stein"}}, "url": "https://github.com/junit-team/junit5/commit/89cb158ca642be5a8451a1426a536a9de760031e", "committedDate": "2020-06-02T15:10:50Z", "message": "Rely on module org.junit.platform.launcher's API\n\nRevert super-powered command-line options."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzNjAxNTYw", "url": "https://github.com/junit-team/junit5/pull/2271#pullrequestreview-423601560", "createdAt": "2020-06-03T14:18:47Z", "commit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDoxODo0OFrOGeeFYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDoxODo0OFrOGeeFYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwMzM2Mw==", "bodyText": "Gonna revert this. No longer needed, methinks.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r434603363", "createdAt": "2020-06-03T14:18:48Z", "author": {"login": "sormuras"}, "path": "buildSrc/src/main/kotlin/java-library-conventions.gradle.kts", "diffHunk": "@@ -145,7 +145,7 @@ val compileModule by tasks.registering(JavaCompile::class) {\n \tsource = fileTree(moduleSourceDir)\n \tdestinationDir = moduleOutputDir\n \tsourceCompatibility = \"9\"\n-\ttargetCompatibility = \"9\"\n+\ttargetCompatibility = \"11\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzNjAyMDI0", "url": "https://github.com/junit-team/junit5/pull/2271#pullrequestreview-423602024", "createdAt": "2020-06-03T14:19:15Z", "commit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDoxOToxNlrOGeeGug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDoxOToxNlrOGeeGug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwMzcwNg==", "bodyText": "Because junit-platform-jfr targets Java 11 -- will be reverted when we turn it into a MR-JAR with base 8.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r434603706", "createdAt": "2020-06-03T14:19:16Z", "author": {"login": "sormuras"}, "path": "documentation/documentation.gradle.kts", "diffHunk": "@@ -18,7 +18,7 @@ modularProjects.forEach { evaluationDependsOn(it.path) }\n \n javaLibrary {\n \tmainJavaVersion = JavaVersion.VERSION_1_8\n-\ttestJavaVersion = JavaVersion.VERSION_1_8\n+\ttestJavaVersion = JavaVersion.VERSION_11", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzNjAzOTE4", "url": "https://github.com/junit-team/junit5/pull/2271#pullrequestreview-423603918", "createdAt": "2020-06-03T14:21:11Z", "commit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDoyMToxMVrOGeeMhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDoyMToxMVrOGeeMhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwNTE5MQ==", "bodyText": "When enabled, it yields:\nResolution failed. Capabilities satisfying the following requirements could not be found:\n    [<<INITIAL>>]\n      ? osgi.identity: (osgi.identity=junit-platform-jfr)\n          ? [junit-platform-jfr version=1.7.0.SNAPSHOT]\n              ? osgi.wiring.package: (&(osgi.wiring.package=jdk.jfr))", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r434605191", "createdAt": "2020-06-03T14:21:11Z", "author": {"login": "sormuras"}, "path": "junit-platform-jfr/junit-platform-jfr.gradle.kts", "diffHunk": "@@ -0,0 +1,23 @@\n+plugins {\n+\t`java-library-conventions`\n+}\n+\n+description = \"JUnit Platform Flight Recorder Support\"\n+\n+dependencies {\n+\tinternal(platform(project(\":dependencies\")))\n+\n+\tapi(platform(project(\":junit-bom\")))\n+\tapi(\"org.apiguardian:apiguardian-api\")\n+\tapi(project(\":junit-platform-launcher\"))\n+}\n+\n+javaLibrary {\n+\tmainJavaVersion = JavaVersion.VERSION_11\n+}\n+\n+tasks {\n+\tverifyOSGi {\n+\t\tenabled=false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzNjA0NzA3", "url": "https://github.com/junit-team/junit5/pull/2271#pullrequestreview-423604707", "createdAt": "2020-06-03T14:21:56Z", "commit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDoyMTo1NlrOGeeOvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDoyMTo1NlrOGeeOvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwNTc1Nw==", "bodyText": "Gonna revert this. No longer needed, methinks.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r434605757", "createdAt": "2020-06-03T14:21:56Z", "author": {"login": "sormuras"}, "path": "junit-platform-launcher/junit-platform-launcher.gradle.kts", "diffHunk": "@@ -1,5 +1,7 @@\n plugins {\n \t`java-library-conventions`\n+\t`java-multi-release-sources`\n+\t`java-repackage-jars`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzNjA1MjA4", "url": "https://github.com/junit-team/junit5/pull/2271#pullrequestreview-423605208", "createdAt": "2020-06-03T14:22:27Z", "commit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDoyMjoyN1rOGeeQLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDoyMjoyN1rOGeeQLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwNjEyNg==", "bodyText": "Gonna revert this. No longer needed, methinks.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r434606126", "createdAt": "2020-06-03T14:22:27Z", "author": {"login": "sormuras"}, "path": "src/checkstyle/suppressions.xml", "diffHunk": "@@ -4,4 +4,6 @@\n \t\tfiles=\"junit-platform-commons[\\\\/]src[\\\\/]main[\\\\/]java9[\\\\/]org[\\\\/]junit[\\\\/]platform[\\\\/]commons[\\\\/]util[\\\\/]*\"/>\n \t<suppress checks=\"JavadocPackage\"\n \t\tfiles=\"junit-platform-console[\\\\/]src[\\\\/]main[\\\\/]java9[\\\\/]org[\\\\/]junit[\\\\/]platform[\\\\/]console[\\\\/]*\"/>\n+\t<suppress checks=\"JavadocPackage\"\n+\t\tfiles=\"junit-platform-launcher[\\\\/]src[\\\\/]main[\\\\/]java9[\\\\/]org[\\\\/]junit[\\\\/]platform[\\\\/]launcher[\\\\/]listeners[\\\\/]*\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzNjA2Mzc4", "url": "https://github.com/junit-team/junit5/pull/2271#pullrequestreview-423606378", "createdAt": "2020-06-03T14:23:36Z", "commit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDoyMzozNlrOGeeT5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDoyMzozNlrOGeeT5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwNzA3Nw==", "bodyText": "Convert this into a real integration test.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r434607077", "createdAt": "2020-06-03T14:23:36Z", "author": {"login": "sormuras"}, "path": "platform-tooling-support-tests/src/test/java/platform/tooling/support/tests/ModularUserGuideTests.java", "diffHunk": "@@ -108,6 +108,8 @@\n \t\tvar projectDir = Path.of(\"../documentation\");\n \t\tcommand.add(Path.of(System.getProperty(\"java.home\"), \"bin\", \"java\").toString());\n \n+\t\tcommand.add(\"-XX:StartFlightRecording:filename=\" + temp.resolve(\"user-guide.jfr\"));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzODc0Nzg3", "url": "https://github.com/junit-team/junit5/pull/2271#pullrequestreview-423874787", "createdAt": "2020-06-03T19:43:29Z", "commit": {"oid": "a7e9c1e8cd9d9c91b27da97aabfce31d6bc4e18c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxOTo0MzoyOVrOGeqz3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxOTo0NDozNlrOGeq2Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgxMTg2OA==", "bodyText": "I don't see commons in the dependencies in the buildscript nor used in the source code. Can that be removed from here?", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r434811868", "createdAt": "2020-06-03T19:43:29Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-jfr/src/module/org.junit.platform.jfr/module-info.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+/**\n+ * Defines the JUnit Platform JAR API.\n+ *\n+ * @since 1.7\n+ */\n+module org.junit.platform.jfr {\n+\trequires jdk.jfr;\n+\trequires transitive org.apiguardian.api;\n+\trequires org.junit.platform.commons;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7e9c1e8cd9d9c91b27da97aabfce31d6bc4e18c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgxMjQ3MA==", "bodyText": "Fixed via an extra configuration.", "url": "https://github.com/junit-team/junit5/pull/2271#discussion_r434812470", "createdAt": "2020-06-03T19:44:36Z", "author": {"login": "marcphilipp"}, "path": "documentation/documentation.gradle.kts", "diffHunk": "@@ -18,7 +18,7 @@ modularProjects.forEach { evaluationDependsOn(it.path) }\n \n javaLibrary {\n \tmainJavaVersion = JavaVersion.VERSION_1_8\n-\ttestJavaVersion = JavaVersion.VERSION_1_8\n+\ttestJavaVersion = JavaVersion.VERSION_11", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYwMzcwNg=="}, "originalCommit": {"oid": "9ac3472c3dc67666703300f7899c807558b4f85e"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "84e17ebb9abc2816f2b0aba4a08d6497c8784796", "author": {"user": {"login": "sormuras", "name": "Christian Stein"}}, "url": "https://github.com/junit-team/junit5/commit/84e17ebb9abc2816f2b0aba4a08d6497c8784796", "committedDate": "2020-06-05T14:24:07Z", "message": "Update junit-platform-jfr/junit-platform-jfr.gradle.kts\n\nCo-authored-by: Marc Philipp <mail@marcphilipp.de>"}, "afterCommit": {"oid": "2a35753fe4bc7826bdfc1d594f8b2c0b96e61848", "author": {"user": {"login": "sormuras", "name": "Christian Stein"}}, "url": "https://github.com/junit-team/junit5/commit/2a35753fe4bc7826bdfc1d594f8b2c0b96e61848", "committedDate": "2020-06-18T06:46:35Z", "message": "Update junit-platform-jfr/junit-platform-jfr.gradle.kts\n\nCo-authored-by: Marc Philipp <mail@marcphilipp.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b3f9898ad26458e8e91011623d12418b81dbb42c", "author": {"user": {"login": "sormuras", "name": "Christian Stein"}}, "url": "https://github.com/junit-team/junit5/commit/b3f9898ad26458e8e91011623d12418b81dbb42c", "committedDate": "2020-07-03T15:50:02Z", "message": "Apply small change as suggested by @rotty3000\n\nhttps://github.com/junit-team/junit5/pull/2271#discussion_r442243291"}, "afterCommit": {"oid": "8e404138e21b461e3c4aafb6ee361d940f28219d", "author": {"user": {"login": "sormuras", "name": "Christian Stein"}}, "url": "https://github.com/junit-team/junit5/commit/8e404138e21b461e3c4aafb6ee361d940f28219d", "committedDate": "2020-07-05T04:13:50Z", "message": "Apply small change as suggested by @rotty3000\n\nhttps://github.com/junit-team/junit5/pull/2271#discussion_r442243291"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9ff0df7cf1cc6111bc8fcd76f321d804c14f23e", "author": {"user": {"login": "sormuras", "name": "Christian Stein"}}, "url": "https://github.com/junit-team/junit5/commit/c9ff0df7cf1cc6111bc8fcd76f321d804c14f23e", "committedDate": "2020-07-10T10:06:37Z", "message": "Spike Flight Recorder based execution listener\n\nhttps://openjdk.java.net/jeps/328"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3eb11d75d40716588564182262fcb6826dbbbfdf", "author": {"user": {"login": "sormuras", "name": "Christian Stein"}}, "url": "https://github.com/junit-team/junit5/commit/3eb11d75d40716588564182262fcb6826dbbbfdf", "committedDate": "2020-07-10T10:06:37Z", "message": "\"Fix\" build by commenting out tool run for the time being"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0afbad6185248035ff1d58d92784083b40a46dae", "author": {"user": {"login": "sormuras", "name": "Christian Stein"}}, "url": "https://github.com/junit-team/junit5/commit/0afbad6185248035ff1d58d92784083b40a46dae", "committedDate": "2020-07-10T10:06:37Z", "message": "Apply changes suggested by @egahlin's first pass"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20e6d164eb874cd40cd9ffd7cb7251df0ab75c96", "author": {"user": {"login": "marcphilipp", "name": "Marc Philipp"}}, "url": "https://github.com/junit-team/junit5/commit/20e6d164eb874cd40cd9ffd7cb7251df0ab75c96", "committedDate": "2020-07-10T10:06:37Z", "message": "Fix compileMainRelease9Java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f94222262c1d0441c71e2c7737ec4ead956665d2", "author": {"user": {"login": "marcphilipp", "name": "Marc Philipp"}}, "url": "https://github.com/junit-team/junit5/commit/f94222262c1d0441c71e2c7737ec4ead956665d2", "committedDate": "2020-07-10T10:06:37Z", "message": "Fix Checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b3807dcb67197300c1b9a11a30515bbcdb9374f", "author": {"user": {"login": "marcphilipp", "name": "Marc Philipp"}}, "url": "https://github.com/junit-team/junit5/commit/9b3807dcb67197300c1b9a11a30515bbcdb9374f", "committedDate": "2020-07-10T10:06:37Z", "message": "Fix compileModule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ff15e378c3a991345aa14be1e2d72f0b202917c", "author": {"user": {"login": "sormuras", "name": "Christian Stein"}}, "url": "https://github.com/junit-team/junit5/commit/8ff15e378c3a991345aa14be1e2d72f0b202917c", "committedDate": "2020-07-10T10:06:37Z", "message": "Replace duplicated package-info with new suppression rule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "843d6a6385e36e5cd8b689716c492a2f60a47fd2", "author": {"user": {"login": "sormuras", "name": "Christian Stein"}}, "url": "https://github.com/junit-team/junit5/commit/843d6a6385e36e5cd8b689716c492a2f60a47fd2", "committedDate": "2020-07-10T10:06:37Z", "message": "Update expected module description"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd2e781c7aea5531f64fb3fe1a43ab357c86db6e", "author": {"user": {"login": "sormuras", "name": "Christian Stein"}}, "url": "https://github.com/junit-team/junit5/commit/bd2e781c7aea5531f64fb3fe1a43ab357c86db6e", "committedDate": "2020-07-10T10:06:37Z", "message": "Synchronize API of base type and versioned type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b0b01251c6da2d1f14cf3a6875b690137990306", "author": {"user": {"login": "sormuras", "name": "Christian Stein"}}, "url": "https://github.com/junit-team/junit5/commit/0b0b01251c6da2d1f14cf3a6875b690137990306", "committedDate": "2020-07-10T10:06:37Z", "message": "Inject versioned classes into JAR file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f78f595ab280877899e3750b66544cc67a924bf", "author": {"user": {"login": "sormuras", "name": "Christian Stein"}}, "url": "https://github.com/junit-team/junit5/commit/8f78f595ab280877899e3750b66544cc67a924bf", "committedDate": "2020-07-10T10:06:37Z", "message": "Weave module jdk.jfr into the module graph at launch time..."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efb988ab6ea834a4dc095595d5553e436f14e9ae", "author": {"user": {"login": "sormuras", "name": "Christian Stein"}}, "url": "https://github.com/junit-team/junit5/commit/efb988ab6ea834a4dc095595d5553e436f14e9ae", "committedDate": "2020-07-10T10:06:37Z", "message": "Include report entry events and improve labels"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2a8b01e83c3763abe17c44e61949389805b6abb", "author": {"user": {"login": "sormuras", "name": "Christian Stein"}}, "url": "https://github.com/junit-team/junit5/commit/e2a8b01e83c3763abe17c44e61949389805b6abb", "committedDate": "2020-07-10T10:06:37Z", "message": "Remove dynamic test registered override"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af9584a3f983477eed3af93ab0df8f4336c446fe", "author": {"user": {"login": "sormuras", "name": "Christian Stein"}}, "url": "https://github.com/junit-team/junit5/commit/af9584a3f983477eed3af93ab0df8f4336c446fe", "committedDate": "2020-07-10T10:06:37Z", "message": "Improve event declaration and handling\n\n- omit stack traces\n- merge dedicated report entry event into test event\n- include most interesting test identifier properties\n- leave out successful test container executions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a84048e487b4dcb99f5f9ba7e815eb553a8f0c19", "author": {"user": {"login": "sormuras", "name": "Christian Stein"}}, "url": "https://github.com/junit-team/junit5/commit/a84048e487b4dcb99f5f9ba7e815eb553a8f0c19", "committedDate": "2020-07-10T10:06:37Z", "message": "Apply more suggested changes\n\n- remove constructor, init fields directly\n- split throwable field into exceptionClass and exceptionMessage\n- fire dedicated event for each published report entry\n- normalize event relations via test's unique id"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3cf61a993ac865ce0e768683e9a9b0e6c70fc282", "author": {"user": {"login": "sormuras", "name": "Christian Stein"}}, "url": "https://github.com/junit-team/junit5/commit/3cf61a993ac865ce0e768683e9a9b0e6c70fc282", "committedDate": "2020-07-10T10:06:37Z", "message": "Add missing space in report entry event label"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9102c6854f786027379bdb32ed9d5e421f54d367", "author": {"user": {"login": "sormuras", "name": "Christian Stein"}}, "url": "https://github.com/junit-team/junit5/commit/9102c6854f786027379bdb32ed9d5e421f54d367", "committedDate": "2020-07-10T10:06:37Z", "message": "Attach label to UniqueId's metadata definition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "535f9e19e515470f4a34adad88c004a26b0f6622", "author": {"user": {"login": "sormuras", "name": "Christian Stein"}}, "url": "https://github.com/junit-team/junit5/commit/535f9e19e515470f4a34adad88c004a26b0f6622", "committedDate": "2020-07-10T10:06:37Z", "message": "Always register JFR-based event-firing listener\n\nCould be guarded by a launcher configuration flag to opt-out via:\n`LauncherConfig.builder().enableJavaFlightRecordingListener(false);`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "050dc4762fa3cb3244ae22d2e50e9243261e0646", "author": {"user": {"login": "sormuras", "name": "Christian Stein"}}, "url": "https://github.com/junit-team/junit5/commit/050dc4762fa3cb3244ae22d2e50e9243261e0646", "committedDate": "2020-07-10T10:06:37Z", "message": "Let module org.junit.platform.launcher read module jdk.jfr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bca93934c9592d4cc07b9e58b772e7db6823bd7", "author": {"user": {"login": "sormuras", "name": "Christian Stein"}}, "url": "https://github.com/junit-team/junit5/commit/5bca93934c9592d4cc07b9e58b772e7db6823bd7", "committedDate": "2020-07-10T10:06:38Z", "message": "Convince Gradle that module jdk.jfr is available since Java 9\n\nhttps://docs.oracle.com/javase/9/docs/api/jdk.jfr-summary.html"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b960812231c3262767170bd17a0b9c9e2bbe3a29", "author": {"user": {"login": "sormuras", "name": "Christian Stein"}}, "url": "https://github.com/junit-team/junit5/commit/b960812231c3262767170bd17a0b9c9e2bbe3a29", "committedDate": "2020-07-10T10:06:38Z", "message": "Rely on module org.junit.platform.launcher's API\n\nRevert super-powered command-line options."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8f17bdfc95590fff810515258f130875edca727", "author": {"user": {"login": "sormuras", "name": "Christian Stein"}}, "url": "https://github.com/junit-team/junit5/commit/c8f17bdfc95590fff810515258f130875edca727", "committedDate": "2020-07-10T10:06:38Z", "message": "Move JFR-related code into a dedicated module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fda351dd691993c995b093fe6d33393b0c5d914d", "author": {"user": {"login": "sormuras", "name": "Christian Stein"}}, "url": "https://github.com/junit-team/junit5/commit/fda351dd691993c995b093fe6d33393b0c5d914d", "committedDate": "2020-07-10T10:06:38Z", "message": "Cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fe311e4f7e1909c7bd5ded5cceab8825cfc8f58", "author": {"user": {"login": "marcphilipp", "name": "Marc Philipp"}}, "url": "https://github.com/junit-team/junit5/commit/4fe311e4f7e1909c7bd5ded5cceab8825cfc8f58", "committedDate": "2020-07-10T10:06:38Z", "message": "Pass classpath to scan to ApiReportGenerator via system property\n\nThis way documentation can use Java 8 again for its test source set."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "600f4836c59c7249e81a13a8cdacd51408b5b39e", "author": {"user": {"login": "sormuras", "name": "Christian Stein"}}, "url": "https://github.com/junit-team/junit5/commit/600f4836c59c7249e81a13a8cdacd51408b5b39e", "committedDate": "2020-07-10T10:06:38Z", "message": "Fine-tune module descriptor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d8180974de37822a079680932a6eb2dc45d54a2", "author": {"user": {"login": "sormuras", "name": "Christian Stein"}}, "url": "https://github.com/junit-team/junit5/commit/6d8180974de37822a079680932a6eb2dc45d54a2", "committedDate": "2020-07-10T10:06:38Z", "message": "Update junit-platform-jfr/junit-platform-jfr.gradle.kts\n\nCo-authored-by: Marc Philipp <mail@marcphilipp.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9d415bcf2b91a624b5255f71b7498cfd2405dcb", "author": {"user": {"login": "sormuras", "name": "Christian Stein"}}, "url": "https://github.com/junit-team/junit5/commit/c9d415bcf2b91a624b5255f71b7498cfd2405dcb", "committedDate": "2020-07-10T10:06:38Z", "message": "Include JFR-related module in Dependency Metadata listing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4018619b34c4ce0694c293e85733606d89961ee", "author": {"user": {"login": "sormuras", "name": "Christian Stein"}}, "url": "https://github.com/junit-team/junit5/commit/c4018619b34c4ce0694c293e85733606d89961ee", "committedDate": "2020-07-10T10:06:38Z", "message": "Apply small change as suggested by @rotty3000\n\nhttps://github.com/junit-team/junit5/pull/2271#discussion_r442243291"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8e404138e21b461e3c4aafb6ee361d940f28219d", "author": {"user": {"login": "sormuras", "name": "Christian Stein"}}, "url": "https://github.com/junit-team/junit5/commit/8e404138e21b461e3c4aafb6ee361d940f28219d", "committedDate": "2020-07-05T04:13:50Z", "message": "Apply small change as suggested by @rotty3000\n\nhttps://github.com/junit-team/junit5/pull/2271#discussion_r442243291"}, "afterCommit": {"oid": "c4018619b34c4ce0694c293e85733606d89961ee", "author": {"user": {"login": "sormuras", "name": "Christian Stein"}}, "url": "https://github.com/junit-team/junit5/commit/c4018619b34c4ce0694c293e85733606d89961ee", "committedDate": "2020-07-10T10:06:38Z", "message": "Apply small change as suggested by @rotty3000\n\nhttps://github.com/junit-team/junit5/pull/2271#discussion_r442243291"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "666d3ead3b3151bd60d7ef335292786ac99c994f", "author": {"user": {"login": "sormuras", "name": "Christian Stein"}}, "url": "https://github.com/junit-team/junit5/commit/666d3ead3b3151bd60d7ef335292786ac99c994f", "committedDate": "2020-07-10T10:35:27Z", "message": "Add module `org.junit.platform.jfr` to the release notes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23d29eb8e132d3e88ace8724eaac086ad122ed48", "author": {"user": {"login": "sormuras", "name": "Christian Stein"}}, "url": "https://github.com/junit-team/junit5/commit/23d29eb8e132d3e88ace8724eaac086ad122ed48", "committedDate": "2020-07-10T13:02:35Z", "message": "Add section \"Flight Recorder Support\" to the User Guide"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2ODU5ODgw", "url": "https://github.com/junit-team/junit5/pull/2271#pullrequestreview-446859880", "createdAt": "2020-07-12T09:00:24Z", "commit": {"oid": "23d29eb8e132d3e88ace8724eaac086ad122ed48"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3530, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}