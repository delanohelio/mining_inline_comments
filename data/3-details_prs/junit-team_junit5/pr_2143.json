{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5MjQ0NzI5", "number": 2143, "title": "Upgrade to junit:junit:4.13", "bodyText": "This changes junit-vintage-engine, junit-jupiter-migrationsupport, and junit-platform-runner to compile against 4.13 but adds extra test tasks that run it against 4.12. In the OSGi metadata, we now import the packages from junit:junit with @4.12 which means [4.12,5.0). That's done because there's no OSGi bundle for 4.13, yet. The published POM and Gradle Module Metadata require 4.13, though, to stop Maven to consume any potential future pre-release (e.g. 4.14-rc-1 or similar).\n\nOriginal description:\n\nUnfortunately, it doesn't work yet, due to an OSGi error:\n\nTask :junit-platform-runner:verifyOSGi FAILED\nResolution failed. Capabilities satisfying the following requirements could not be found:\n[<>]\n\u21d2 osgi.identity: (osgi.identity=junit-platform-runner)\n\u21d2 [junit-platform-runner version=1.6.0.SNAPSHOT]\n\u21d2 osgi.wiring.package: (&(osgi.wiring.package=org.junit.runner)(version>=4.13.0))\n\nMore details and stacktrace: https://scans.gradle.com/s/er4ytskvf5qqs/failure?openFailures=WzBd&openStackTraces=WzRd#top=0", "createdAt": "2020-01-04T20:24:39Z", "url": "https://github.com/junit-team/junit5/pull/2143", "merged": true, "mergeCommit": {"oid": "abb6fdcb12a71a395aefff8d76a4ee756bfaa7d4"}, "closed": true, "closedAt": "2020-01-06T09:16:34Z", "author": {"login": "marcphilipp"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb3XoDqAH2gAyMzU5MjQ0NzI5OmM2OTg0YzA4ZWE5YzliYTc2Yzc4YzU2OTA0OTE0NjQ0N2RlNTMwY2Y=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb3czqUAH2gAyMzU5MjQ0NzI5OmUzYTU3NDY5YWVjZDA1YTM4Njg1ZWQyODNkNzI3ZTgyYmFlMzk2NDg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c6984c08ea9c9ba76c78c569049146447de530cf", "author": {"user": {"login": "marcphilipp", "name": "Marc Philipp"}}, "url": "https://github.com/junit-team/junit5/commit/c6984c08ea9c9ba76c78c569049146447de530cf", "committedDate": "2020-01-05T13:32:20Z", "message": "Upgrade to junit:junit:4.13\n\n- Publish 4.13 as required version in POM/Gradle Module Metadata\n- Use [4.12,5.0) for package imports from OSGi"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6eb60b463c7c284e04ace98d05a68856b5c1582", "author": {"user": {"login": "marcphilipp", "name": "Marc Philipp"}}, "url": "https://github.com/junit-team/junit5/commit/c6eb60b463c7c284e04ace98d05a68856b5c1582", "committedDate": "2020-01-05T13:32:20Z", "message": "Move JUnitPlatformRunnerTests to junit-platform-runner project"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "69dae5593016ea943e225c78a0394afb10e4dc6f", "author": {"user": {"login": "marcphilipp", "name": "Marc Philipp"}}, "url": "https://github.com/junit-team/junit5/commit/69dae5593016ea943e225c78a0394afb10e4dc6f", "committedDate": "2020-01-05T13:06:29Z", "message": "fixup! Move JUnitPlatformRunnerTests to junit-platform-runner project"}, "afterCommit": {"oid": "bcb9bb9852e1edd84d880b35bd445d2529ece79e", "author": {"user": {"login": "marcphilipp", "name": "Marc Philipp"}}, "url": "https://github.com/junit-team/junit5/commit/bcb9bb9852e1edd84d880b35bd445d2529ece79e", "committedDate": "2020-01-05T13:32:21Z", "message": "Polish OSGi build checks\n\n- Run verifyOSGi later (as part of check)\n- Use custom osgiVerification configuration instead of\n  testRuntimeClasspath\n- Rename verifyOSGiProperties task to osgiProperties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfbf157e3bf31ff46711511a4b9b84882e473d81", "author": {"user": {"login": "marcphilipp", "name": "Marc Philipp"}}, "url": "https://github.com/junit-team/junit5/commit/bfbf157e3bf31ff46711511a4b9b84882e473d81", "committedDate": "2020-01-05T13:39:14Z", "message": "Test migration support and runner against 4.12 and 4.13"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c504df5a8f58baa13a3e919f0ea70c963e94301", "author": {"user": {"login": "marcphilipp", "name": "Marc Philipp"}}, "url": "https://github.com/junit-team/junit5/commit/3c504df5a8f58baa13a3e919f0ea70c963e94301", "committedDate": "2020-01-05T13:39:14Z", "message": "Extract OSGi setup into separate build script"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f07c3ac7ad74b3a9e8628dfe0fb93a0eee170f6b", "author": {"user": {"login": "marcphilipp", "name": "Marc Philipp"}}, "url": "https://github.com/junit-team/junit5/commit/f07c3ac7ad74b3a9e8628dfe0fb93a0eee170f6b", "committedDate": "2020-01-05T13:39:14Z", "message": "Polish OSGi build checks\n\n- Run verifyOSGi later (as part of check)\n- Use custom osgiVerification configuration instead of\n  testRuntimeClasspath\n- Rename verifyOSGiProperties task to osgiProperties"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bcb9bb9852e1edd84d880b35bd445d2529ece79e", "author": {"user": {"login": "marcphilipp", "name": "Marc Philipp"}}, "url": "https://github.com/junit-team/junit5/commit/bcb9bb9852e1edd84d880b35bd445d2529ece79e", "committedDate": "2020-01-05T13:32:21Z", "message": "Polish OSGi build checks\n\n- Run verifyOSGi later (as part of check)\n- Use custom osgiVerification configuration instead of\n  testRuntimeClasspath\n- Rename verifyOSGiProperties task to osgiProperties"}, "afterCommit": {"oid": "f07c3ac7ad74b3a9e8628dfe0fb93a0eee170f6b", "author": {"user": {"login": "marcphilipp", "name": "Marc Philipp"}}, "url": "https://github.com/junit-team/junit5/commit/f07c3ac7ad74b3a9e8628dfe0fb93a0eee170f6b", "committedDate": "2020-01-05T13:39:14Z", "message": "Polish OSGi build checks\n\n- Run verifyOSGi later (as part of check)\n- Use custom osgiVerification configuration instead of\n  testRuntimeClasspath\n- Rename verifyOSGiProperties task to osgiProperties"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4NDA0NzUy", "url": "https://github.com/junit-team/junit5/pull/2143#pullrequestreview-338404752", "createdAt": "2020-01-05T14:49:12Z", "commit": {"oid": "f07c3ac7ad74b3a9e8628dfe0fb93a0eee170f6b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4NDA1NDEx", "url": "https://github.com/junit-team/junit5/pull/2143#pullrequestreview-338405411", "createdAt": "2020-01-05T15:00:45Z", "commit": {"oid": "f07c3ac7ad74b3a9e8628dfe0fb93a0eee170f6b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQxNTowMDo0NVrOFaRxfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQxNTowMjoyN1rOFaRx-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA5ODQ5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t# This tells bnd to ignore classes it files in `META-INF/versions/`\n          \n          \n            \n            \t\t\t# This tells bnd to ignore classes it finds in `META-INF/versions/`", "url": "https://github.com/junit-team/junit5/pull/2143#discussion_r363098494", "createdAt": "2020-01-05T15:00:45Z", "author": {"login": "sbrannen"}, "path": "buildSrc/src/main/kotlin/osgi-conventions.gradle.kts", "diffHunk": "@@ -0,0 +1,114 @@\n+import aQute.bnd.gradle.BundleTaskConvention\n+import aQute.bnd.gradle.FileSetRepositoryConvention\n+import aQute.bnd.gradle.Resolve\n+\n+plugins {\n+\t`java-library`\n+}\n+\n+// This task enhances `jar` and `shadowJar` tasks with the bnd\n+// `BundleTaskConvention` convention which allows for generating OSGi\n+// metadata into the jar\n+tasks.withType<Jar>().matching {\n+\ttask: Jar -> task.name == \"jar\" || task.name == \"shadowJar\"\n+}.configureEach {\n+\tval btc = BundleTaskConvention(this)\n+\n+\t// These are bnd instructions necessary for generating OSGi metadata.\n+\t// We've generalized these so that they are widely applicable limiting\n+\t// module configurations to special cases.\n+\tbtc.setBnd(\"\"\"\n+\t\t\t# These are the general rules for package imports.\n+\t\t\tImport-Package: \\\n+\t\t\t\t!org.apiguardian.api,\\\n+\t\t\t\torg.junit.platform.commons.logging;status=INTERNAL,\\\n+\t\t\t\tkotlin.*;resolution:=\"optional\",\\\n+\t\t\t\t*\n+\n+\t\t\t# This tells bnd not to complain if a module doesn't actually import\n+\t\t\t# the kotlin packages, but enough modules do to make it a default.\n+\t\t\t-fixupmessages.kotlin.import: \"Unused Import-Package instructions: \\\\[kotlin.*\\\\]\";is:=ignore\n+\n+\t\t\t# This tells bnd to ignore classes it files in `META-INF/versions/`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f07c3ac7ad74b3a9e8628dfe0fb93a0eee170f6b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA5ODUzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Bnd's Resolve task uses a properties file for it's configuration. This\n          \n          \n            \n            // Bnd's Resolve task uses a properties file for its configuration. This", "url": "https://github.com/junit-team/junit5/pull/2143#discussion_r363098539", "createdAt": "2020-01-05T15:01:26Z", "author": {"login": "sbrannen"}, "path": "buildSrc/src/main/kotlin/osgi-conventions.gradle.kts", "diffHunk": "@@ -0,0 +1,114 @@\n+import aQute.bnd.gradle.BundleTaskConvention\n+import aQute.bnd.gradle.FileSetRepositoryConvention\n+import aQute.bnd.gradle.Resolve\n+\n+plugins {\n+\t`java-library`\n+}\n+\n+// This task enhances `jar` and `shadowJar` tasks with the bnd\n+// `BundleTaskConvention` convention which allows for generating OSGi\n+// metadata into the jar\n+tasks.withType<Jar>().matching {\n+\ttask: Jar -> task.name == \"jar\" || task.name == \"shadowJar\"\n+}.configureEach {\n+\tval btc = BundleTaskConvention(this)\n+\n+\t// These are bnd instructions necessary for generating OSGi metadata.\n+\t// We've generalized these so that they are widely applicable limiting\n+\t// module configurations to special cases.\n+\tbtc.setBnd(\"\"\"\n+\t\t\t# These are the general rules for package imports.\n+\t\t\tImport-Package: \\\n+\t\t\t\t!org.apiguardian.api,\\\n+\t\t\t\torg.junit.platform.commons.logging;status=INTERNAL,\\\n+\t\t\t\tkotlin.*;resolution:=\"optional\",\\\n+\t\t\t\t*\n+\n+\t\t\t# This tells bnd not to complain if a module doesn't actually import\n+\t\t\t# the kotlin packages, but enough modules do to make it a default.\n+\t\t\t-fixupmessages.kotlin.import: \"Unused Import-Package instructions: \\\\[kotlin.*\\\\]\";is:=ignore\n+\n+\t\t\t# This tells bnd to ignore classes it files in `META-INF/versions/`\n+\t\t\t# because bnd doesn't yet support multi-release jars.\n+\t\t\t-fixupmessages.wrong.dir: \"Classes found in the wrong directory: \\\\{META-INF/versions/...\";is:=ignore\n+\n+\t\t\t# Don't scan for Class.forName package imports.\n+\t\t\t# See https://bnd.bndtools.org/instructions/noclassforname.html\n+\t\t\t-noclassforname: true\n+\n+\t\t\t# Don't add all the extra headers bnd normally adds.\n+\t\t\t# See https://bnd.bndtools.org/instructions/noextraheaders.html\n+\t\t\t-noextraheaders: true\n+\n+\t\t\t# Don't add the Private-Package header.\n+\t\t\t# See https://bnd.bndtools.org/instructions/removeheaders.html\n+\t\t\t-removeheaders: Private-Package\n+\n+\t\t\t# Add the custom buildSrc/src/main/kotlin/APIGuardianAnnotations.kt\n+\t\t\t# plugin to bnd\n+\t\t\t-plugin.apiguardian.annotations: ${APIGuardianAnnotations::class.qualifiedName}\n+\n+\t\t\t# Instruct the APIGuardianAnnotations how to operate.\n+\t\t\t# See https://bnd.bndtools.org/instructions/export-apiguardian.html\n+\t\t\t-export-apiguardian: *;version=${project.version}\n+\t\t\"\"\")\n+\n+\t// Add the convention to the jar task\n+\tconvention.plugins[\"bundle\"] = btc\n+\n+\tdoLast {\n+\t\t// Do the actual work putting OSGi stuff in the jar.\n+\t\tbtc.buildBundle()\n+\t}\n+}\n+\n+val osgiPropertiesFile = file(\"$buildDir/verifyOSGiProperties.bndrun\")\n+\n+// Bnd's Resolve task uses a properties file for it's configuration. This", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f07c3ac7ad74b3a9e8628dfe0fb93a0eee170f6b"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA5ODU2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // that it's metadata is valid. If the metadata is invalid this task will\n          \n          \n            \n            // that its metadata is valid. If the metadata is invalid this task will", "url": "https://github.com/junit-team/junit5/pull/2143#discussion_r363098565", "createdAt": "2020-01-05T15:01:45Z", "author": {"login": "sbrannen"}, "path": "buildSrc/src/main/kotlin/osgi-conventions.gradle.kts", "diffHunk": "@@ -0,0 +1,114 @@\n+import aQute.bnd.gradle.BundleTaskConvention\n+import aQute.bnd.gradle.FileSetRepositoryConvention\n+import aQute.bnd.gradle.Resolve\n+\n+plugins {\n+\t`java-library`\n+}\n+\n+// This task enhances `jar` and `shadowJar` tasks with the bnd\n+// `BundleTaskConvention` convention which allows for generating OSGi\n+// metadata into the jar\n+tasks.withType<Jar>().matching {\n+\ttask: Jar -> task.name == \"jar\" || task.name == \"shadowJar\"\n+}.configureEach {\n+\tval btc = BundleTaskConvention(this)\n+\n+\t// These are bnd instructions necessary for generating OSGi metadata.\n+\t// We've generalized these so that they are widely applicable limiting\n+\t// module configurations to special cases.\n+\tbtc.setBnd(\"\"\"\n+\t\t\t# These are the general rules for package imports.\n+\t\t\tImport-Package: \\\n+\t\t\t\t!org.apiguardian.api,\\\n+\t\t\t\torg.junit.platform.commons.logging;status=INTERNAL,\\\n+\t\t\t\tkotlin.*;resolution:=\"optional\",\\\n+\t\t\t\t*\n+\n+\t\t\t# This tells bnd not to complain if a module doesn't actually import\n+\t\t\t# the kotlin packages, but enough modules do to make it a default.\n+\t\t\t-fixupmessages.kotlin.import: \"Unused Import-Package instructions: \\\\[kotlin.*\\\\]\";is:=ignore\n+\n+\t\t\t# This tells bnd to ignore classes it files in `META-INF/versions/`\n+\t\t\t# because bnd doesn't yet support multi-release jars.\n+\t\t\t-fixupmessages.wrong.dir: \"Classes found in the wrong directory: \\\\{META-INF/versions/...\";is:=ignore\n+\n+\t\t\t# Don't scan for Class.forName package imports.\n+\t\t\t# See https://bnd.bndtools.org/instructions/noclassforname.html\n+\t\t\t-noclassforname: true\n+\n+\t\t\t# Don't add all the extra headers bnd normally adds.\n+\t\t\t# See https://bnd.bndtools.org/instructions/noextraheaders.html\n+\t\t\t-noextraheaders: true\n+\n+\t\t\t# Don't add the Private-Package header.\n+\t\t\t# See https://bnd.bndtools.org/instructions/removeheaders.html\n+\t\t\t-removeheaders: Private-Package\n+\n+\t\t\t# Add the custom buildSrc/src/main/kotlin/APIGuardianAnnotations.kt\n+\t\t\t# plugin to bnd\n+\t\t\t-plugin.apiguardian.annotations: ${APIGuardianAnnotations::class.qualifiedName}\n+\n+\t\t\t# Instruct the APIGuardianAnnotations how to operate.\n+\t\t\t# See https://bnd.bndtools.org/instructions/export-apiguardian.html\n+\t\t\t-export-apiguardian: *;version=${project.version}\n+\t\t\"\"\")\n+\n+\t// Add the convention to the jar task\n+\tconvention.plugins[\"bundle\"] = btc\n+\n+\tdoLast {\n+\t\t// Do the actual work putting OSGi stuff in the jar.\n+\t\tbtc.buildBundle()\n+\t}\n+}\n+\n+val osgiPropertiesFile = file(\"$buildDir/verifyOSGiProperties.bndrun\")\n+\n+// Bnd's Resolve task uses a properties file for it's configuration. This\n+// task writes out the properties necessary for it to verify the OSGi\n+// metadata.\n+val osgiProperties by tasks.registering(WriteProperties::class) {\n+\toutputFile = osgiPropertiesFile\n+\tproperty(\"-standalone\", true)\n+\tproperty(\"-runee\", \"JavaSE-${Versions.jvmTarget}\")\n+\tproperty(\"-runrequires\", \"osgi.identity;filter:='(osgi.identity=${project.name})'\")\n+\tproperty(\"-runsystempackages\", \"jdk.internal.misc,sun.misc\")\n+}\n+\n+val osgiVerification by configurations.creating {\n+\textendsFrom(configurations.runtimeClasspath.get())\n+}\n+\n+// Bnd's Resolve task is what verifies that a jar can be used in OSGi and\n+// that it's metadata is valid. If the metadata is invalid this task will", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f07c3ac7ad74b3a9e8628dfe0fb93a0eee170f6b"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA5ODYxNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // afterEvaluate.\n          \n          \n            \n            // after evaluation.", "url": "https://github.com/junit-team/junit5/pull/2143#discussion_r363098616", "createdAt": "2020-01-05T15:02:27Z", "author": {"login": "sbrannen"}, "path": "buildSrc/src/main/kotlin/osgi-conventions.gradle.kts", "diffHunk": "@@ -0,0 +1,114 @@\n+import aQute.bnd.gradle.BundleTaskConvention\n+import aQute.bnd.gradle.FileSetRepositoryConvention\n+import aQute.bnd.gradle.Resolve\n+\n+plugins {\n+\t`java-library`\n+}\n+\n+// This task enhances `jar` and `shadowJar` tasks with the bnd\n+// `BundleTaskConvention` convention which allows for generating OSGi\n+// metadata into the jar\n+tasks.withType<Jar>().matching {\n+\ttask: Jar -> task.name == \"jar\" || task.name == \"shadowJar\"\n+}.configureEach {\n+\tval btc = BundleTaskConvention(this)\n+\n+\t// These are bnd instructions necessary for generating OSGi metadata.\n+\t// We've generalized these so that they are widely applicable limiting\n+\t// module configurations to special cases.\n+\tbtc.setBnd(\"\"\"\n+\t\t\t# These are the general rules for package imports.\n+\t\t\tImport-Package: \\\n+\t\t\t\t!org.apiguardian.api,\\\n+\t\t\t\torg.junit.platform.commons.logging;status=INTERNAL,\\\n+\t\t\t\tkotlin.*;resolution:=\"optional\",\\\n+\t\t\t\t*\n+\n+\t\t\t# This tells bnd not to complain if a module doesn't actually import\n+\t\t\t# the kotlin packages, but enough modules do to make it a default.\n+\t\t\t-fixupmessages.kotlin.import: \"Unused Import-Package instructions: \\\\[kotlin.*\\\\]\";is:=ignore\n+\n+\t\t\t# This tells bnd to ignore classes it files in `META-INF/versions/`\n+\t\t\t# because bnd doesn't yet support multi-release jars.\n+\t\t\t-fixupmessages.wrong.dir: \"Classes found in the wrong directory: \\\\{META-INF/versions/...\";is:=ignore\n+\n+\t\t\t# Don't scan for Class.forName package imports.\n+\t\t\t# See https://bnd.bndtools.org/instructions/noclassforname.html\n+\t\t\t-noclassforname: true\n+\n+\t\t\t# Don't add all the extra headers bnd normally adds.\n+\t\t\t# See https://bnd.bndtools.org/instructions/noextraheaders.html\n+\t\t\t-noextraheaders: true\n+\n+\t\t\t# Don't add the Private-Package header.\n+\t\t\t# See https://bnd.bndtools.org/instructions/removeheaders.html\n+\t\t\t-removeheaders: Private-Package\n+\n+\t\t\t# Add the custom buildSrc/src/main/kotlin/APIGuardianAnnotations.kt\n+\t\t\t# plugin to bnd\n+\t\t\t-plugin.apiguardian.annotations: ${APIGuardianAnnotations::class.qualifiedName}\n+\n+\t\t\t# Instruct the APIGuardianAnnotations how to operate.\n+\t\t\t# See https://bnd.bndtools.org/instructions/export-apiguardian.html\n+\t\t\t-export-apiguardian: *;version=${project.version}\n+\t\t\"\"\")\n+\n+\t// Add the convention to the jar task\n+\tconvention.plugins[\"bundle\"] = btc\n+\n+\tdoLast {\n+\t\t// Do the actual work putting OSGi stuff in the jar.\n+\t\tbtc.buildBundle()\n+\t}\n+}\n+\n+val osgiPropertiesFile = file(\"$buildDir/verifyOSGiProperties.bndrun\")\n+\n+// Bnd's Resolve task uses a properties file for it's configuration. This\n+// task writes out the properties necessary for it to verify the OSGi\n+// metadata.\n+val osgiProperties by tasks.registering(WriteProperties::class) {\n+\toutputFile = osgiPropertiesFile\n+\tproperty(\"-standalone\", true)\n+\tproperty(\"-runee\", \"JavaSE-${Versions.jvmTarget}\")\n+\tproperty(\"-runrequires\", \"osgi.identity;filter:='(osgi.identity=${project.name})'\")\n+\tproperty(\"-runsystempackages\", \"jdk.internal.misc,sun.misc\")\n+}\n+\n+val osgiVerification by configurations.creating {\n+\textendsFrom(configurations.runtimeClasspath.get())\n+}\n+\n+// Bnd's Resolve task is what verifies that a jar can be used in OSGi and\n+// that it's metadata is valid. If the metadata is invalid this task will\n+// fail.\n+val verifyOSGi by tasks.registering(Resolve::class) {\n+\tdependsOn(osgiProperties)\n+\tsetBndrun(osgiPropertiesFile)\n+\tisReportOptional = false\n+\twithConvention(FileSetRepositoryConvention::class) {\n+\n+\t\t// By default bnd will use jars found in:\n+\t\t// 1. project.sourceSets.main.runtimeClasspath\n+\t\t// 2. project.configurations.archives.artifacts.files\n+\t\t// to validate the metadata.\n+\t\t// This adds jars defined in `osgiVerification` also so that bnd\n+\t\t// can use them to validate the metadata without causing those to\n+\t\t// end up in the dependencies of those projects.\n+\t\tbundles(osgiVerification)\n+\t}\n+}\n+\n+tasks.check {\n+\tdependsOn(verifyOSGi)\n+}\n+\n+// The ${project.description}, for some odd reason, is only available\n+// afterEvaluate.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f07c3ac7ad74b3a9e8628dfe0fb93a0eee170f6b"}, "originalPosition": 108}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3a57469aecd05a38685ed283d727e82bae39648", "author": {"user": {"login": "marcphilipp", "name": "Marc Philipp"}}, "url": "https://github.com/junit-team/junit5/commit/e3a57469aecd05a38685ed283d727e82bae39648", "committedDate": "2020-01-05T19:34:32Z", "message": "Fix typos\n\nCo-Authored-By: Sam Brannen <sbrannen@pivotal.io>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3644, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}