{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyMDU1MjA0", "number": 2467, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNzo0NDoxM1rOEz5dKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQyMToxODoyMFrOE0FK_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODU0MTg2OnYy", "diffSide": "RIGHT", "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/DisabledCondition.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNzo0NDoxM1rOHrZ1rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNDo0MTowNVrOH6eJOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI3NDE1OA==", "bodyText": "Why not use flatMap here?", "url": "https://github.com/junit-team/junit5/pull/2467#discussion_r515274158", "createdAt": "2020-10-30T17:44:13Z", "author": {"login": "marcphilipp"}, "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/DisabledCondition.java", "diffHunk": "@@ -39,15 +39,16 @@\n \t */\n \t@Override\n \tpublic ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {\n-\t\tOptional<AnnotatedElement> element = context.getElement();\n-\t\tOptional<Disabled> disabled = findAnnotation(element, Disabled.class);\n-\t\tif (disabled.isPresent()) {\n-\t\t\tString reason = disabled.map(Disabled::value).filter(StringUtils::isNotBlank).orElseGet(\n-\t\t\t\t() -> element.get() + \" is @Disabled\");\n-\t\t\treturn ConditionEvaluationResult.disabled(reason);\n-\t\t}\n-\n-\t\treturn ENABLED;\n+\t\tAnnotatedElement element = context.getElement().orElse(null);\n+\t\t// @formatter:off\n+\t\treturn findAnnotation(element, Disabled.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83fb22c7aab91eb8954e792054956ba66b9afe0d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ3Njc0OA==", "bodyText": "Did you mean like this?\nreturn context.getElement()\n\t.flatMap(element ->\n\t\tfindAnnotation(element, Ignore.class)\n\t\t\t.map(annotation -> Optional.of(annotation)\n\t\t\t\t.map(Ignore::value)\n\t\t\t\t.filter(StringUtils::isNotBlank)\n\t\t\t\t.orElseGet(() -> element + \" is disabled via @org.junit.Ignore\"))\n\t\t\t.map(ConditionEvaluationResult::disabled))\n\t.orElse(ENABLED);\nThat's like callback hell to my mind", "url": "https://github.com/junit-team/junit5/pull/2467#discussion_r515476748", "createdAt": "2020-10-31T09:20:03Z", "author": {"login": "yorlov"}, "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/DisabledCondition.java", "diffHunk": "@@ -39,15 +39,16 @@\n \t */\n \t@Override\n \tpublic ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {\n-\t\tOptional<AnnotatedElement> element = context.getElement();\n-\t\tOptional<Disabled> disabled = findAnnotation(element, Disabled.class);\n-\t\tif (disabled.isPresent()) {\n-\t\t\tString reason = disabled.map(Disabled::value).filter(StringUtils::isNotBlank).orElseGet(\n-\t\t\t\t() -> element.get() + \" is @Disabled\");\n-\t\t\treturn ConditionEvaluationResult.disabled(reason);\n-\t\t}\n-\n-\t\treturn ENABLED;\n+\t\tAnnotatedElement element = context.getElement().orElse(null);\n+\t\t// @formatter:off\n+\t\treturn findAnnotation(element, Disabled.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI3NDE1OA=="}, "originalCommit": {"oid": "83fb22c7aab91eb8954e792054956ba66b9afe0d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY4NzQ0NQ==", "bodyText": "I guess the key question here is why don't you use .flatMap(...) instead of .map(annotation -> Optional.of(annotation)?", "url": "https://github.com/junit-team/junit5/pull/2467#discussion_r519687445", "createdAt": "2020-11-09T10:03:46Z", "author": {"login": "vlsi"}, "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/DisabledCondition.java", "diffHunk": "@@ -39,15 +39,16 @@\n \t */\n \t@Override\n \tpublic ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {\n-\t\tOptional<AnnotatedElement> element = context.getElement();\n-\t\tOptional<Disabled> disabled = findAnnotation(element, Disabled.class);\n-\t\tif (disabled.isPresent()) {\n-\t\t\tString reason = disabled.map(Disabled::value).filter(StringUtils::isNotBlank).orElseGet(\n-\t\t\t\t() -> element.get() + \" is @Disabled\");\n-\t\t\treturn ConditionEvaluationResult.disabled(reason);\n-\t\t}\n-\n-\t\treturn ENABLED;\n+\t\tAnnotatedElement element = context.getElement().orElse(null);\n+\t\t// @formatter:off\n+\t\treturn findAnnotation(element, Disabled.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI3NDE1OA=="}, "originalCommit": {"oid": "83fb22c7aab91eb8954e792054956ba66b9afe0d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3NjgzMQ==", "bodyText": "That's like callback hell to my mind\n\nTo make it easier to read, you could extract some methods \ud83d\ude09 (e.g. the part that gets the disabled reason out of the annotation)", "url": "https://github.com/junit-team/junit5/pull/2467#discussion_r521476831", "createdAt": "2020-11-11T16:24:44Z", "author": {"login": "juliette-derancourt"}, "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/DisabledCondition.java", "diffHunk": "@@ -39,15 +39,16 @@\n \t */\n \t@Override\n \tpublic ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {\n-\t\tOptional<AnnotatedElement> element = context.getElement();\n-\t\tOptional<Disabled> disabled = findAnnotation(element, Disabled.class);\n-\t\tif (disabled.isPresent()) {\n-\t\t\tString reason = disabled.map(Disabled::value).filter(StringUtils::isNotBlank).orElseGet(\n-\t\t\t\t() -> element.get() + \" is @Disabled\");\n-\t\t\treturn ConditionEvaluationResult.disabled(reason);\n-\t\t}\n-\n-\t\treturn ENABLED;\n+\t\tAnnotatedElement element = context.getElement().orElse(null);\n+\t\t// @formatter:off\n+\t\treturn findAnnotation(element, Disabled.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI3NDE1OA=="}, "originalCommit": {"oid": "83fb22c7aab91eb8954e792054956ba66b9afe0d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2ODQ4Mg==", "bodyText": "@yorlov So, what do you say? :)\nMaybe something like that would be a trade-off:\nConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {\n\treturn context.getElement()\n\t\t\t.flatMap(element -> findAnnotation(element, Disabled.class)\n\t\t\t\t\t.map(annotation -> getReason(element, annotation))\n\t\t\t\t\t.map(ConditionEvaluationResult::disabled))\n\t\t\t.orElse(ENABLED);\n}\n\nprivate String getReason(AnnotatedElement element, Disabled disabled) {\n\treturn Optional.of(disabled)\n\t\t\t.map(Disabled::value)\n\t\t\t.filter(StringUtils::isNotBlank)\n\t\t\t.orElseGet(() -> element + \" is @Disabled\");\n}", "url": "https://github.com/junit-team/junit5/pull/2467#discussion_r531068482", "createdAt": "2020-11-26T14:33:24Z", "author": {"login": "juliette-derancourt"}, "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/DisabledCondition.java", "diffHunk": "@@ -39,15 +39,16 @@\n \t */\n \t@Override\n \tpublic ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {\n-\t\tOptional<AnnotatedElement> element = context.getElement();\n-\t\tOptional<Disabled> disabled = findAnnotation(element, Disabled.class);\n-\t\tif (disabled.isPresent()) {\n-\t\t\tString reason = disabled.map(Disabled::value).filter(StringUtils::isNotBlank).orElseGet(\n-\t\t\t\t() -> element.get() + \" is @Disabled\");\n-\t\t\treturn ConditionEvaluationResult.disabled(reason);\n-\t\t}\n-\n-\t\treturn ENABLED;\n+\t\tAnnotatedElement element = context.getElement().orElse(null);\n+\t\t// @formatter:off\n+\t\treturn findAnnotation(element, Disabled.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI3NDE1OA=="}, "originalCommit": {"oid": "83fb22c7aab91eb8954e792054956ba66b9afe0d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA3MzMzNw==", "bodyText": "https://frameweb.com/article/this-japanese-house-was-entirely-built-without-a-single-nail\n...\n\"without a single if\" :)", "url": "https://github.com/junit-team/junit5/pull/2467#discussion_r531073337", "createdAt": "2020-11-26T14:41:05Z", "author": {"login": "vlsi"}, "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/DisabledCondition.java", "diffHunk": "@@ -39,15 +39,16 @@\n \t */\n \t@Override\n \tpublic ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {\n-\t\tOptional<AnnotatedElement> element = context.getElement();\n-\t\tOptional<Disabled> disabled = findAnnotation(element, Disabled.class);\n-\t\tif (disabled.isPresent()) {\n-\t\t\tString reason = disabled.map(Disabled::value).filter(StringUtils::isNotBlank).orElseGet(\n-\t\t\t\t() -> element.get() + \" is @Disabled\");\n-\t\t\treturn ConditionEvaluationResult.disabled(reason);\n-\t\t}\n-\n-\t\treturn ENABLED;\n+\t\tAnnotatedElement element = context.getElement().orElse(null);\n+\t\t// @formatter:off\n+\t\treturn findAnnotation(element, Disabled.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI3NDE1OA=="}, "originalCommit": {"oid": "83fb22c7aab91eb8954e792054956ba66b9afe0d"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMDQ2MTQwOnYy", "diffSide": "RIGHT", "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/DisabledCondition.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQyMToxODoyMFrOHrqG-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQyMTo0ODo1OFrOHrqScw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU0MDcyOA==", "bodyText": "Why the orElse?", "url": "https://github.com/junit-team/junit5/pull/2467#discussion_r515540728", "createdAt": "2020-10-31T21:18:20Z", "author": {"login": "juliette-derancourt"}, "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/DisabledCondition.java", "diffHunk": "@@ -39,15 +39,16 @@\n \t */\n \t@Override\n \tpublic ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {\n-\t\tOptional<AnnotatedElement> element = context.getElement();\n-\t\tOptional<Disabled> disabled = findAnnotation(element, Disabled.class);\n-\t\tif (disabled.isPresent()) {\n-\t\t\tString reason = disabled.map(Disabled::value).filter(StringUtils::isNotBlank).orElseGet(\n-\t\t\t\t() -> element.get() + \" is @Disabled\");\n-\t\t\treturn ConditionEvaluationResult.disabled(reason);\n-\t\t}\n-\n-\t\treturn ENABLED;\n+\t\tAnnotatedElement element = context.getElement().orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83fb22c7aab91eb8954e792054956ba66b9afe0d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU0MzY2Nw==", "bodyText": "Because\n.orElseGet(() -> element.get() + \" is @Disabled\"))\nlook ugly imho and IDE highlights element.get() as possible nullability problem", "url": "https://github.com/junit-team/junit5/pull/2467#discussion_r515543667", "createdAt": "2020-10-31T21:48:58Z", "author": {"login": "yorlov"}, "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/extension/DisabledCondition.java", "diffHunk": "@@ -39,15 +39,16 @@\n \t */\n \t@Override\n \tpublic ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {\n-\t\tOptional<AnnotatedElement> element = context.getElement();\n-\t\tOptional<Disabled> disabled = findAnnotation(element, Disabled.class);\n-\t\tif (disabled.isPresent()) {\n-\t\t\tString reason = disabled.map(Disabled::value).filter(StringUtils::isNotBlank).orElseGet(\n-\t\t\t\t() -> element.get() + \" is @Disabled\");\n-\t\t\treturn ConditionEvaluationResult.disabled(reason);\n-\t\t}\n-\n-\t\treturn ENABLED;\n+\t\tAnnotatedElement element = context.getElement().orElse(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTU0MDcyOA=="}, "originalCommit": {"oid": "83fb22c7aab91eb8954e792054956ba66b9afe0d"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4112, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}