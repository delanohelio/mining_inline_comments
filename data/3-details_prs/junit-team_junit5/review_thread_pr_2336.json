{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4MDc1ODk3", "number": 2336, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxOTo0MDoxNlrOEJzZmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxOTo1NToxOFrOEJzubA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzE0Nzc5OnYy", "diffSide": "RIGHT", "path": "documentation/src/docs/asciidoc/user-guide/writing-tests.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxOTo0MDoxNlrOGqfbqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxOTo0MDoxNlrOGqfbqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIwODM2MA==", "bodyText": "Since we're deprecating it, maybe we should push it to the end of the list?", "url": "https://github.com/junit-team/junit5/pull/2336#discussion_r447208360", "createdAt": "2020-06-29T19:40:16Z", "author": {"login": "juliette-derancourt"}, "path": "documentation/src/docs/asciidoc/user-guide/writing-tests.adoc", "diffHunk": "@@ -557,6 +557,8 @@ implementation. You can implement your own custom `MethodOrderer` or use one of\n following built-in `MethodOrderer` implementations.\n \n * `{Alphanumeric}`: sorts test methods _alphanumerically_ based on their names and formal", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78e025e88a6679ac37d8aa56f4bbc0d78b854bda"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzE1MzAzOnYy", "diffSide": "RIGHT", "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/MethodOrderer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxOTo0MTo0MVrOGqfexw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODowOToxOFrOGqw1mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIwOTE1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t@API(status = DEPRECATED, since = \"5.4\")\n          \n          \n            \n            \t@API(status = DEPRECATED, since = \"5.7\")", "url": "https://github.com/junit-team/junit5/pull/2336#discussion_r447209159", "createdAt": "2020-06-29T19:41:41Z", "author": {"login": "juliette-derancourt"}, "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/MethodOrderer.java", "diffHunk": "@@ -104,15 +105,35 @@\n \t\treturn Optional.of(ExecutionMode.SAME_THREAD);\n \t}\n \n+\t/**\n+\t * {@code MethodOrderer} that sorts methods alphanumerically based on their\n+\t * names using {@link String#compareTo(String)}.\n+\t *\n+\t * <p>If two methods have the same name, {@code String} representations of\n+\t * their formal parameter lists will be used as a fallback for comparing the\n+\t * methods.</p>\n+\t * <p> <b>This class has been deprecated in favor of {@code MethodOrderer.MethodName} and will be\n+\t * removed in 6.0</b></p>\n+\t *\n+\t * @since 5.4\n+\t * @deprecated Deprecated in favor of MethodOrderer.MethodName. Will be removed in 6.0\n+\t */\n+\t@API(status = DEPRECATED, since = \"5.4\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78e025e88a6679ac37d8aa56f4bbc0d78b854bda"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ5MzUzMQ==", "bodyText": "I misunderstood the API.since value to describe since when the API existed as is the since in javadoc. While this describes status changes.\nThanks for pointing it out!", "url": "https://github.com/junit-team/junit5/pull/2336#discussion_r447493531", "createdAt": "2020-06-30T08:09:18Z", "author": {"login": "gaganis"}, "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/MethodOrderer.java", "diffHunk": "@@ -104,15 +105,35 @@\n \t\treturn Optional.of(ExecutionMode.SAME_THREAD);\n \t}\n \n+\t/**\n+\t * {@code MethodOrderer} that sorts methods alphanumerically based on their\n+\t * names using {@link String#compareTo(String)}.\n+\t *\n+\t * <p>If two methods have the same name, {@code String} representations of\n+\t * their formal parameter lists will be used as a fallback for comparing the\n+\t * methods.</p>\n+\t * <p> <b>This class has been deprecated in favor of {@code MethodOrderer.MethodName} and will be\n+\t * removed in 6.0</b></p>\n+\t *\n+\t * @since 5.4\n+\t * @deprecated Deprecated in favor of MethodOrderer.MethodName. Will be removed in 6.0\n+\t */\n+\t@API(status = DEPRECATED, since = \"5.4\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIwOTE1OQ=="}, "originalCommit": {"oid": "78e025e88a6679ac37d8aa56f4bbc0d78b854bda"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzE2MjAwOnYy", "diffSide": "RIGHT", "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/MethodOrderer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxOTo0NDowOFrOGqfkMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxOTo0NDowOFrOGqfkMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIxMDU0Ng==", "bodyText": "Please use {@link MethodOrderer.MethodName} to point towards the new class.", "url": "https://github.com/junit-team/junit5/pull/2336#discussion_r447210546", "createdAt": "2020-06-29T19:44:08Z", "author": {"login": "juliette-derancourt"}, "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/MethodOrderer.java", "diffHunk": "@@ -104,15 +105,35 @@\n \t\treturn Optional.of(ExecutionMode.SAME_THREAD);\n \t}\n \n+\t/**\n+\t * {@code MethodOrderer} that sorts methods alphanumerically based on their\n+\t * names using {@link String#compareTo(String)}.\n+\t *\n+\t * <p>If two methods have the same name, {@code String} representations of\n+\t * their formal parameter lists will be used as a fallback for comparing the\n+\t * methods.</p>\n+\t * <p> <b>This class has been deprecated in favor of {@code MethodOrderer.MethodName} and will be\n+\t * removed in 6.0</b></p>\n+\t *\n+\t * @since 5.4\n+\t * @deprecated Deprecated in favor of MethodOrderer.MethodName. Will be removed in 6.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78e025e88a6679ac37d8aa56f4bbc0d78b854bda"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzE3Mjk5OnYy", "diffSide": "RIGHT", "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/MethodOrderer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxOTo0NzoxOVrOGqfq2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxOTo0NzoxOVrOGqfq2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIxMjI0OQ==", "bodyText": "JavaDoc should be wrapped at 80 characters.", "url": "https://github.com/junit-team/junit5/pull/2336#discussion_r447212249", "createdAt": "2020-06-29T19:47:19Z", "author": {"login": "juliette-derancourt"}, "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/MethodOrderer.java", "diffHunk": "@@ -104,15 +105,35 @@\n \t\treturn Optional.of(ExecutionMode.SAME_THREAD);\n \t}\n \n+\t/**\n+\t * {@code MethodOrderer} that sorts methods alphanumerically based on their\n+\t * names using {@link String#compareTo(String)}.\n+\t *\n+\t * <p>If two methods have the same name, {@code String} representations of\n+\t * their formal parameter lists will be used as a fallback for comparing the\n+\t * methods.</p>\n+\t * <p> <b>This class has been deprecated in favor of {@code MethodOrderer.MethodName} and will be", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78e025e88a6679ac37d8aa56f4bbc0d78b854bda"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzE3ODA0OnYy", "diffSide": "LEFT", "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/TestMethodOrder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxOTo0ODo1OFrOGqfuAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODo1OTozN1rOGqy22g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIxMzA1OA==", "bodyText": "Should we leave this one until we delete the orderer completely? Or remove it right away?", "url": "https://github.com/junit-team/junit5/pull/2336#discussion_r447213058", "createdAt": "2020-06-29T19:48:58Z", "author": {"login": "juliette-derancourt"}, "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/TestMethodOrder.java", "diffHunk": "@@ -72,7 +72,7 @@\n \t * The {@link MethodOrderer} to use.\n \t *\n \t * @see MethodOrderer\n-\t * @see MethodOrderer.Alphanumeric", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78e025e88a6679ac37d8aa56f4bbc0d78b854bda"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUyNjYxOA==", "bodyText": "I wanted where we mention it to have a comment about the deprecation. In this case with @see section a comment does not render nicely so I opted not to include it.", "url": "https://github.com/junit-team/junit5/pull/2336#discussion_r447526618", "createdAt": "2020-06-30T08:59:37Z", "author": {"login": "gaganis"}, "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/TestMethodOrder.java", "diffHunk": "@@ -72,7 +72,7 @@\n \t * The {@link MethodOrderer} to use.\n \t *\n \t * @see MethodOrderer\n-\t * @see MethodOrderer.Alphanumeric", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIxMzA1OA=="}, "originalCommit": {"oid": "78e025e88a6679ac37d8aa56f4bbc0d78b854bda"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzE4NjkxOnYy", "diffSide": "RIGHT", "path": "junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/OrderedMethodTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxOTo1MTozMVrOGqfzRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxOTo1MTozMVrOGqfzRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIxNDQwNg==", "bodyText": "CI likes it better indeed \ud83d\ude09", "url": "https://github.com/junit-team/junit5/pull/2336#discussion_r447214406", "createdAt": "2020-06-29T19:51:31Z", "author": {"login": "juliette-derancourt"}, "path": "junit-jupiter-engine/src/test/java/org/junit/jupiter/engine/extension/OrderedMethodTests.java", "diffHunk": "@@ -317,6 +340,59 @@ void c() {\n \n \t}\n \n+\t@TestMethodOrder(MethodName.class)\n+\tstatic class MethodNameTestCase extends BaseTestCase {\n+\n+\t\t@BeforeEach\n+\t\tvoid trackInvocations(TestInfo testInfo) {\n+\t\t\tvar method = testInfo.getTestMethod().get();\n+\t\t\tvar signature = String.format(\"%s(%s)\", method.getName(),\n+\t\t\t\tClassUtils.nullSafeToString(method.getParameterTypes()));\n+\n+\t\t\tcallSequence.add(signature);\n+\t\t\tthreadNames.add(Thread.currentThread().getName());\n+\t\t}\n+\n+\t\t@TestFactory\n+\t\tDynamicTest b() {\n+\t\t\treturn dynamicTest(\"dynamic\", () -> {\n+\t\t\t});\n+\t\t}\n+\n+\t\t@Test\n+\t\tvoid $() {\n+\t\t}\n+\n+\t\t@Test\n+\t\tvoid ___() {\n+\t\t}\n+\n+\t\t@Test\n+\t\tvoid AAA(TestReporter testReporter) {\n+\t\t}\n+\n+\t\t@Test\n+\t\tvoid AAA(TestInfo testInfo) {\n+\t\t}\n+\n+\t\t@Test\n+\t\tvoid ZZ_Top() {\n+\t\t}\n+\n+\t\t@Test\n+\t\tvoid a1() {\n+\t\t}\n+\n+\t\t@Test\n+\t\tvoid a2() {\n+\t\t}\n+\n+\t\t@RepeatedTest(1)\n+\t\tvoid zzz() {\n+\t\t}\n+\t}\n+\n+\t@SuppressWarnings(\"deprecation\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78e025e88a6679ac37d8aa56f4bbc0d78b854bda"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzIwMTA4OnYy", "diffSide": "RIGHT", "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/MethodOrderer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxOTo1NToxOFrOGqf7yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNToxMjozMFrOGwtCrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIxNjU4NA==", "bodyText": "I'm not sure about this one... Personally I'd prefer to leave it the way it is, to be 100% sure it will not break things for users. (It's probably unlikely but... we never know \ud83e\udd13)\nWhat do you think?", "url": "https://github.com/junit-team/junit5/pull/2336#discussion_r447216584", "createdAt": "2020-06-29T19:55:18Z", "author": {"login": "juliette-derancourt"}, "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/MethodOrderer.java", "diffHunk": "@@ -104,15 +105,35 @@\n \t\treturn Optional.of(ExecutionMode.SAME_THREAD);\n \t}\n \n+\t/**\n+\t * {@code MethodOrderer} that sorts methods alphanumerically based on their\n+\t * names using {@link String#compareTo(String)}.\n+\t *\n+\t * <p>If two methods have the same name, {@code String} representations of\n+\t * their formal parameter lists will be used as a fallback for comparing the\n+\t * methods.</p>\n+\t * <p> <b>This class has been deprecated in favor of {@code MethodOrderer.MethodName} and will be\n+\t * removed in 6.0</b></p>\n+\t *\n+\t * @since 5.4\n+\t * @deprecated Deprecated in favor of MethodOrderer.MethodName. Will be removed in 6.0\n+\t */\n+\t@API(status = DEPRECATED, since = \"5.4\")\n+\t@Deprecated\n+\tclass Alphanumeric extends MethodName {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78e025e88a6679ac37d8aa56f4bbc0d78b854bda"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUzMDg1NQ==", "bodyText": "leave it the way it is,\n\nYou mean to have it with a full implementation ie copy pasted? It didn't feel good to me to leave duplicated code so I thought of an alternative. The easiest option was this.\n@juliette-derancourt Do you have any concrete ideas on how this might break for users?", "url": "https://github.com/junit-team/junit5/pull/2336#discussion_r447530855", "createdAt": "2020-06-30T09:06:38Z", "author": {"login": "gaganis"}, "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/MethodOrderer.java", "diffHunk": "@@ -104,15 +105,35 @@\n \t\treturn Optional.of(ExecutionMode.SAME_THREAD);\n \t}\n \n+\t/**\n+\t * {@code MethodOrderer} that sorts methods alphanumerically based on their\n+\t * names using {@link String#compareTo(String)}.\n+\t *\n+\t * <p>If two methods have the same name, {@code String} representations of\n+\t * their formal parameter lists will be used as a fallback for comparing the\n+\t * methods.</p>\n+\t * <p> <b>This class has been deprecated in favor of {@code MethodOrderer.MethodName} and will be\n+\t * removed in 6.0</b></p>\n+\t *\n+\t * @since 5.4\n+\t * @deprecated Deprecated in favor of MethodOrderer.MethodName. Will be removed in 6.0\n+\t */\n+\t@API(status = DEPRECATED, since = \"5.4\")\n+\t@Deprecated\n+\tclass Alphanumeric extends MethodName {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIxNjU4NA=="}, "originalCommit": {"oid": "78e025e88a6679ac37d8aa56f4bbc0d78b854bda"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzcyMjc5Ng==", "bodyText": "I don't \ud83d\ude1c\nLet's go with this then.", "url": "https://github.com/junit-team/junit5/pull/2336#discussion_r453722796", "createdAt": "2020-07-13T15:12:30Z", "author": {"login": "juliette-derancourt"}, "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/MethodOrderer.java", "diffHunk": "@@ -104,15 +105,35 @@\n \t\treturn Optional.of(ExecutionMode.SAME_THREAD);\n \t}\n \n+\t/**\n+\t * {@code MethodOrderer} that sorts methods alphanumerically based on their\n+\t * names using {@link String#compareTo(String)}.\n+\t *\n+\t * <p>If two methods have the same name, {@code String} representations of\n+\t * their formal parameter lists will be used as a fallback for comparing the\n+\t * methods.</p>\n+\t * <p> <b>This class has been deprecated in favor of {@code MethodOrderer.MethodName} and will be\n+\t * removed in 6.0</b></p>\n+\t *\n+\t * @since 5.4\n+\t * @deprecated Deprecated in favor of MethodOrderer.MethodName. Will be removed in 6.0\n+\t */\n+\t@API(status = DEPRECATED, since = \"5.4\")\n+\t@Deprecated\n+\tclass Alphanumeric extends MethodName {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIxNjU4NA=="}, "originalCommit": {"oid": "78e025e88a6679ac37d8aa56f4bbc0d78b854bda"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4051, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}