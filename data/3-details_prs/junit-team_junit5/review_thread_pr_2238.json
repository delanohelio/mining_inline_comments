{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4NjM2Njk0", "number": 2238, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwNzowNDowOVrODu2G7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwNzowNDowOVrODu2G7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDQ3NTk2OnYy", "diffSide": "RIGHT", "path": "platform-tests/src/test/java/org/junit/platform/engine/support/hierarchical/HierarchicalTestExecutorTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwNzowNDowOVrOGA9asg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwNzowNDowOVrOGA9asg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY1OTQ0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertTrue(interrupted.get(), \"child was interrupted\");\n          \n          \n            \n            \t\tassertTrue(interrupted.get(), \"dynamic node was interrupted\");", "url": "https://github.com/junit-team/junit5/pull/2238#discussion_r403659442", "createdAt": "2020-04-05T07:04:09Z", "author": {"login": "marcphilipp"}, "path": "platform-tests/src/test/java/org/junit/platform/engine/support/hierarchical/HierarchicalTestExecutorTests.java", "diffHunk": "@@ -516,10 +529,78 @@ void executesDynamicTestDescriptorsUsingContainerAndTestType() throws Exception\n \t\t\tFAILED, SUCCESSFUL, SUCCESSFUL);\n \t}\n \n-\tprivate Answer<Object> registerAndExecute(TestDescriptor dynamicChild) {\n+\t@Test\n+\tvoid executesDynamicTestDescriptorsWithCustomListener() {\n+\n+\t\tUniqueId leafUniqueId = UniqueId.root(\"leaf\", \"child leaf\");\n+\t\tMyLeaf child = spy(new MyLeaf(leafUniqueId));\n+\t\tMyLeaf dynamicTestDescriptor = spy(new MyLeaf(leafUniqueId.append(\"dynamic\", \"child\")));\n+\t\troot.addChild(child);\n+\n+\t\tEngineExecutionListener anotherListener = mock(EngineExecutionListener.class);\n+\t\twhen(child.execute(any(), any())).thenAnswer(\n+\t\t\tuseDynamicTestExecutor(executor -> executor.execute(dynamicTestDescriptor, anotherListener)));\n+\n+\t\texecutor.execute();\n+\n+\t\tInOrder inOrder = inOrder(listener, anotherListener, root, child, dynamicTestDescriptor);\n+\t\tinOrder.verify(anotherListener).dynamicTestRegistered(dynamicTestDescriptor);\n+\t\tinOrder.verify(anotherListener).executionStarted(dynamicTestDescriptor);\n+\t\tinOrder.verify(dynamicTestDescriptor).execute(eq(rootContext), any());\n+\t\tinOrder.verify(dynamicTestDescriptor).nodeFinished(rootContext, dynamicTestDescriptor, successful());\n+\t\tinOrder.verify(anotherListener).executionFinished(dynamicTestDescriptor, successful());\n+\t}\n+\n+\t@Test\n+\tvoid canAbortExecutionOfDynamicChild() throws Exception {\n+\n+\t\tUniqueId leafUniqueId = UniqueId.root(\"leaf\", \"child leaf\");\n+\t\tMyLeaf child = spy(new MyLeaf(leafUniqueId));\n+\t\tMyLeaf dynamicTestDescriptor = spy(new MyLeaf(leafUniqueId.append(\"dynamic\", \"child\")));\n+\t\troot.addChild(child);\n+\n+\t\tvar startedLatch = new CountDownLatch(1);\n+\t\tvar interrupted = new CompletableFuture<Boolean>();\n+\n+\t\twhen(child.execute(any(), any())).thenAnswer(useDynamicTestExecutor(executor -> {\n+\t\t\tFuture<?> future = executor.execute(dynamicTestDescriptor, EngineExecutionListener.NOOP);\n+\t\t\tstartedLatch.await();\n+\t\t\tfuture.cancel(true);\n+\t\t\texecutor.awaitFinished();\n+\t\t}));\n+\t\twhen(dynamicTestDescriptor.execute(any(), any())).thenAnswer(invocation -> {\n+\t\t\tstartedLatch.countDown();\n+\t\t\ttry {\n+\t\t\t\tnew CountDownLatch(1).await(); // block until interrupted\n+\t\t\t\tinterrupted.complete(false);\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\tcatch (InterruptedException e) {\n+\t\t\t\tinterrupted.complete(true);\n+\t\t\t\tthrow e;\n+\t\t\t}\n+\t\t});\n+\n+\t\tConfigurationParameters parameters = ConfigurationParametersFactoryForTests.create(Map.of(//\n+\t\t\tDefaultParallelExecutionConfigurationStrategy.CONFIG_STRATEGY_PROPERTY_NAME, \"fixed\", //\n+\t\t\tDefaultParallelExecutionConfigurationStrategy.CONFIG_FIXED_PARALLELISM_PROPERTY_NAME, \"2\"));\n+\n+\t\ttry (var executorService = new ForkJoinPoolHierarchicalTestExecutorService(parameters)) {\n+\t\t\tcreateExecutor(executorService).execute().get();\n+\t\t}\n+\n+\t\tverify(listener).executionFinished(child, successful());\n+\t\tassertTrue(interrupted.get(), \"child was interrupted\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6abce4f10f549c7e6d2ba03d8d80efa866475936"}, "originalPosition": 146}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3993, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}