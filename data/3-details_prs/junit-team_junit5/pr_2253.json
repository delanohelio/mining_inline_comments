{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxOTUzMDc5", "number": 2253, "title": "Add FilePosition in FileSelector and ClasspathResourceSelector", "bodyText": "Overview\nFixes #2146.\n\nI hereby agree to the terms of the JUnit Contributor License Agreement.\n\nDefinition of Done\n\n There are no TODOs left in the code\n Method preconditions are checked and documented in the method's Javadoc\n Coding conventions (e.g. for logging) have been followed\n Change is covered by automated tests including corner cases, errors, and exception handling\n Public API has Javadoc and @API annotations\n Change is documented in the User Guide and Release Notes\n All continuous integration builds pass", "createdAt": "2020-04-10T15:26:40Z", "url": "https://github.com/junit-team/junit5/pull/2253", "merged": true, "mergeCommit": {"oid": "375792dd9f79860a0e99128feb0d92bf8102db30"}, "closed": true, "closedAt": "2020-05-22T21:06:07Z", "author": {"login": "timtebeek"}, "timelineItems": {"totalCount": 42, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcUoeptgH2gAyNDAxOTUzMDc5OjQ5Yjg2ODQwNDJiNDgwMmVmZTYyNzMwYTgyMzA3ODI5ODMyZDJiYmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABch8pgCgFqTQxMzA3OTQ2MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "49b8684042b4802efe62730a82307829832d2bbe", "author": {"user": {"login": "timtebeek", "name": "Tim te Beek"}}, "url": "https://github.com/junit-team/junit5/commit/49b8684042b4802efe62730a82307829832d2bbe", "committedDate": "2020-04-05T11:34:15Z", "message": "Support FilePosition in FileSelector & ClasspathResourceSelector\n\nIssue: junit-team/junit5#2146"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a65fb00b873c53a3e0dc2bea3f664b2be876c659", "author": {"user": {"login": "timtebeek", "name": "Tim te Beek"}}, "url": "https://github.com/junit-team/junit5/commit/a65fb00b873c53a3e0dc2bea3f664b2be876c659", "committedDate": "2020-04-05T11:38:30Z", "message": "Add JavaDoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d8fe26ce13373e7e4de048e68c17b8d3df12f80", "author": {"user": {"login": "timtebeek", "name": "Tim te Beek"}}, "url": "https://github.com/junit-team/junit5/commit/6d8fe26ce13373e7e4de048e68c17b8d3df12f80", "committedDate": "2020-04-05T11:42:34Z", "message": "Add constructor unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "612df8e8e56fd4ff411eba1e096963ba115dd239", "author": {"user": {"login": "timtebeek", "name": "Tim te Beek"}}, "url": "https://github.com/junit-team/junit5/commit/612df8e8e56fd4ff411eba1e096963ba115dd239", "committedDate": "2020-04-10T15:13:20Z", "message": "Move, duplicate & deprecate FilePosition as suggested"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71130a6e08e87abac1960e58cb61c7d8794f8f4e", "author": {"user": {"login": "timtebeek", "name": "Tim te Beek"}}, "url": "https://github.com/junit-team/junit5/commit/71130a6e08e87abac1960e58cb61c7d8794f8f4e", "committedDate": "2020-04-10T15:21:36Z", "message": "Move FilePositionTests and have it extend AbstractEqualsAndHashCodeTests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNTA2ODE4", "url": "https://github.com/junit-team/junit5/pull/2253#pullrequestreview-391506818", "createdAt": "2020-04-10T15:35:10Z", "commit": {"oid": "71130a6e08e87abac1960e58cb61c7d8794f8f4e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTozNToxMVrOGD91DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTozNToxMVrOGD91DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxMTkxNw==", "bodyText": "Wasn't particularly pleased about having to make these constructors protected for use from org.junit.platform.engine.support.descriptor.FilePosition constructors, but saw no way around it. Is there any way to discourage usage through @API annotations?", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r406811917", "createdAt": "2020-04-10T15:35:11Z", "author": {"login": "timtebeek"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/FilePosition.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.engine.discovery;\n+\n+import static org.apiguardian.api.API.Status.STABLE;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.commons.logging.Logger;\n+import org.junit.platform.commons.logging.LoggerFactory;\n+import org.junit.platform.commons.util.Preconditions;\n+import org.junit.platform.commons.util.StringUtils;\n+import org.junit.platform.commons.util.ToStringBuilder;\n+\n+/**\n+ * Position inside a file represented by {@linkplain #getLine line} and\n+ * {@linkplain #getColumn column} numbers.\n+ *\n+ * @since 1.0\n+ */\n+@API(status = STABLE, since = \"1.0\")\n+public class FilePosition implements Serializable {\n+\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\tprivate static final Logger logger = LoggerFactory.getLogger(FilePosition.class);\n+\n+\t/**\n+\t * Create a new {@code FilePosition} using the supplied {@code line} number\n+\t * and an undefined column number.\n+\t *\n+\t * @param line the line number; must be greater than zero\n+\t * @return a {@link FilePosition} with the given line number\n+\t */\n+\tpublic static FilePosition from(int line) {\n+\t\treturn new FilePosition(line);\n+\t}\n+\n+\t/**\n+\t * Create a new {@code FilePosition} using the supplied {@code line} and\n+\t * {@code column} numbers.\n+\t *\n+\t * @param line the line number; must be greater than zero\n+\t * @param column the column number; must be greater than zero\n+\t * @return a {@link FilePosition} with the given line and column numbers\n+\t */\n+\tpublic static FilePosition from(int line, int column) {\n+\t\treturn new FilePosition(line, column);\n+\t}\n+\n+\t/**\n+\t * Create an optional {@code FilePosition} by parsing the supplied\n+\t * {@code query} string.\n+\t *\n+\t * <p>Examples of valid {@code query} strings:\n+\t * <ul>\n+\t *     <li>{@code \"line=23\"}</li>\n+\t *     <li>{@code \"line=23&column=42\"}</li>\n+\t * </ul>\n+\t *\n+\t * @param query the query string; may be {@code null}\n+\t * @return an {@link Optional} containing a {@link FilePosition} with\n+\t * the parsed line and column numbers; never {@code null} but potentially\n+\t * empty\n+\t * @since 1.3\n+\t * @see #from(int)\n+\t * @see #from(int, int)\n+\t */\n+\tpublic static Optional<FilePosition> fromQuery(String query) {\n+\t\tFilePosition result = null;\n+\t\tInteger line = null;\n+\t\tInteger column = null;\n+\t\tif (StringUtils.isNotBlank(query)) {\n+\t\t\ttry {\n+\t\t\t\tfor (String pair : query.split(\"&\")) {\n+\t\t\t\t\tString[] data = pair.split(\"=\");\n+\t\t\t\t\tif (data.length == 2) {\n+\t\t\t\t\t\tString key = data[0];\n+\t\t\t\t\t\tif (line == null && \"line\".equals(key)) {\n+\t\t\t\t\t\t\tline = Integer.valueOf(data[1]);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\telse if (column == null && \"column\".equals(key)) {\n+\t\t\t\t\t\t\tcolumn = Integer.valueOf(data[1]);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\n+\t\t\t\t\t// Already found what we're looking for?\n+\t\t\t\t\tif (line != null && column != null) {\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch (IllegalArgumentException ex) {\n+\t\t\t\tlogger.debug(ex, () -> \"Failed to parse 'line' and/or 'column' from query string: \" + query);\n+\t\t\t\t// fall-through and continue\n+\t\t\t}\n+\n+\t\t\tif (line != null) {\n+\t\t\t\tresult = column == null ? new FilePosition(line) : new FilePosition(line, column);\n+\t\t\t}\n+\t\t}\n+\t\treturn Optional.ofNullable(result);\n+\t}\n+\n+\tprivate final int line;\n+\tprivate final Integer column;\n+\n+\tprotected FilePosition(int line) {\n+\t\tPreconditions.condition(line > 0, \"line number must be greater than zero\");\n+\t\tthis.line = line;\n+\t\tthis.column = null;\n+\t}\n+\n+\tprotected FilePosition(int line, int column) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71130a6e08e87abac1960e58cb61c7d8794f8f4e"}, "originalPosition": 125}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNTA3ODgy", "url": "https://github.com/junit-team/junit5/pull/2253#pullrequestreview-391507882", "createdAt": "2020-04-10T15:37:16Z", "commit": {"oid": "71130a6e08e87abac1960e58cb61c7d8794f8f4e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTozNzoxNlrOGD94eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTozNzoxNlrOGD94eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxMjc5Mw==", "bodyText": "AbstractTestSourceTests is only accessible from org.junit.platform.engine.support.descriptor, so I though it preferable to keep that that way. Should this method override and the functionality it covered be reproduced here? Or should I not yet have moved this tests class at this time?", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r406812793", "createdAt": "2020-04-10T15:37:16Z", "author": {"login": "timtebeek"}, "path": "platform-tests/src/test/java/org/junit/platform/engine/discovery/FilePositionTests.java", "diffHunk": "@@ -31,12 +32,7 @@\n  * @since 1.0\n  */\n @DisplayName(\"FilePosition unit tests\")\n-class FilePositionTests extends AbstractTestSourceTests {\n-\n-\t@Override\n-\tStream<FilePosition> createSerializableInstances() {\n-\t\treturn Stream.of(FilePosition.from(42, 99));\n-\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71130a6e08e87abac1960e58cb61c7d8794f8f4e"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c5ece181f2f509453738c1b5b4a6ba884154e52", "author": {"user": {"login": "timtebeek", "name": "Tim te Beek"}}, "url": "https://github.com/junit-team/junit5/commit/2c5ece181f2f509453738c1b5b4a6ba884154e52", "committedDate": "2020-04-10T15:40:59Z", "message": "Add FileSelector DiscoverySelectors with arguments for line and column"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95557dd1f62353e682b139ef982a35bc23661143", "author": {"user": {"login": "timtebeek", "name": "Tim te Beek"}}, "url": "https://github.com/junit-team/junit5/commit/95557dd1f62353e682b139ef982a35bc23661143", "committedDate": "2020-04-10T15:46:00Z", "message": "Cover selectFile and selectClasspathResource with file position"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNTEzMTEw", "url": "https://github.com/junit-team/junit5/pull/2253#pullrequestreview-391513110", "createdAt": "2020-04-10T15:47:23Z", "commit": {"oid": "95557dd1f62353e682b139ef982a35bc23661143"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTo0NzoyM1rOGD-JwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTo0NzoyM1rOGD-JwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxNzIxNw==", "bodyText": "Not entirely sure about the since argument here, and/or whether to declare this as STABLE already, given that we likely want to change the constructors from protected to private.", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r406817217", "createdAt": "2020-04-10T15:47:23Z", "author": {"login": "timtebeek"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/FilePosition.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.engine.discovery;\n+\n+import static org.apiguardian.api.API.Status.STABLE;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.commons.logging.Logger;\n+import org.junit.platform.commons.logging.LoggerFactory;\n+import org.junit.platform.commons.util.Preconditions;\n+import org.junit.platform.commons.util.StringUtils;\n+import org.junit.platform.commons.util.ToStringBuilder;\n+\n+/**\n+ * Position inside a file represented by {@linkplain #getLine line} and\n+ * {@linkplain #getColumn column} numbers.\n+ *\n+ * @since 1.0\n+ */\n+@API(status = STABLE, since = \"1.0\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95557dd1f62353e682b139ef982a35bc23661143"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12023350006711cf076a8215bc211d69ed2d66dc", "author": {"user": {"login": "timtebeek", "name": "Tim te Beek"}}, "url": "https://github.com/junit-team/junit5/commit/12023350006711cf076a8215bc211d69ed2d66dc", "committedDate": "2020-04-10T15:51:11Z", "message": "Add position in toString"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98a361a37490d160c6591934895a9ff015789641", "author": {"user": {"login": "timtebeek", "name": "Tim te Beek"}}, "url": "https://github.com/junit-team/junit5/commit/98a361a37490d160c6591934895a9ff015789641", "committedDate": "2020-04-10T16:38:17Z", "message": "Apply spotless"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNTUyNTc4", "url": "https://github.com/junit-team/junit5/pull/2253#pullrequestreview-391552578", "createdAt": "2020-04-10T17:06:35Z", "commit": {"oid": "98a361a37490d160c6591934895a9ff015789641"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzowNjozNVrOGEAMXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzowNjozNVrOGEAMXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1MDY1Mg==", "bodyText": "IDEs won't pick up on the @API annotation. Adding @Deprecated might be useful here.", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r406850652", "createdAt": "2020-04-10T17:06:35Z", "author": {"login": "mpkorstanje"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/FilePosition.java", "diffHunk": "@@ -10,32 +10,35 @@\n \n package org.junit.platform.engine.support.descriptor;\n \n-import static org.apiguardian.api.API.Status.STABLE;\n-\n-import java.io.Serializable;\n-import java.util.Objects;\n import java.util.Optional;\n \n import org.apiguardian.api.API;\n+import org.apiguardian.api.API.Status;\n import org.junit.platform.commons.logging.Logger;\n import org.junit.platform.commons.logging.LoggerFactory;\n-import org.junit.platform.commons.util.Preconditions;\n import org.junit.platform.commons.util.StringUtils;\n-import org.junit.platform.commons.util.ToStringBuilder;\n \n /**\n  * Position inside a file represented by {@linkplain #getLine line} and\n  * {@linkplain #getColumn column} numbers.\n  *\n  * @since 1.0\n  */\n-@API(status = STABLE, since = \"1.0\")\n-public class FilePosition implements Serializable {\n+@API(status = Status.DEPRECATED, since = \"5.7\")\n+public class FilePosition extends org.junit.platform.engine.discovery.FilePosition {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98a361a37490d160c6591934895a9ff015789641"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNTUzMjE1", "url": "https://github.com/junit-team/junit5/pull/2253#pullrequestreview-391553215", "createdAt": "2020-04-10T17:07:57Z", "commit": {"oid": "98a361a37490d160c6591934895a9ff015789641"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzowNzo1N1rOGEAOhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzowNzo1N1rOGEAOhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1MTIwNA==", "bodyText": "This may have to be incremented. Where are file positions deserialized to/from?", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r406851204", "createdAt": "2020-04-10T17:07:57Z", "author": {"login": "mpkorstanje"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/FilePosition.java", "diffHunk": "@@ -10,32 +10,35 @@\n \n package org.junit.platform.engine.support.descriptor;\n \n-import static org.apiguardian.api.API.Status.STABLE;\n-\n-import java.io.Serializable;\n-import java.util.Objects;\n import java.util.Optional;\n \n import org.apiguardian.api.API;\n+import org.apiguardian.api.API.Status;\n import org.junit.platform.commons.logging.Logger;\n import org.junit.platform.commons.logging.LoggerFactory;\n-import org.junit.platform.commons.util.Preconditions;\n import org.junit.platform.commons.util.StringUtils;\n-import org.junit.platform.commons.util.ToStringBuilder;\n \n /**\n  * Position inside a file represented by {@linkplain #getLine line} and\n  * {@linkplain #getColumn column} numbers.\n  *\n  * @since 1.0\n  */\n-@API(status = STABLE, since = \"1.0\")\n-public class FilePosition implements Serializable {\n+@API(status = Status.DEPRECATED, since = \"5.7\")\n+public class FilePosition extends org.junit.platform.engine.discovery.FilePosition {\n \n \tprivate static final long serialVersionUID = 1L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98a361a37490d160c6591934895a9ff015789641"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNTU0NTYy", "url": "https://github.com/junit-team/junit5/pull/2253#pullrequestreview-391554562", "createdAt": "2020-04-10T17:10:41Z", "commit": {"oid": "98a361a37490d160c6591934895a9ff015789641"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzoxMDo0MlrOGEAS8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzoxMDo0MlrOGEAS8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1MjMzNw==", "bodyText": "Returning the super class here will break existing callers.", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r406852337", "createdAt": "2020-04-10T17:10:42Z", "author": {"login": "mpkorstanje"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/FilePosition.java", "diffHunk": "@@ -77,7 +80,7 @@ public static FilePosition from(int line, int column) {\n \t * @see #from(int)\n \t * @see #from(int, int)\n \t */\n-\tpublic static Optional<FilePosition> fromQuery(String query) {\n+\tpublic static Optional<org.junit.platform.engine.discovery.FilePosition> fromQuery(String query) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98a361a37490d160c6591934895a9ff015789641"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNTYwNDAz", "url": "https://github.com/junit-team/junit5/pull/2253#pullrequestreview-391560403", "createdAt": "2020-04-10T17:22:36Z", "commit": {"oid": "98a361a37490d160c6591934895a9ff015789641"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzoyMjozNlrOGEAmMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzoyMjozNlrOGEAmMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1NzI2Nw==", "bodyText": "JUnit 5 seems to follow the pattern that nullable return values are always wrapped in an Optional. For example:\n\n  \n    \n      junit5/junit-platform-console/src/main/java/org/junit/platform/console/tasks/TreeNode.java\n    \n    \n        Lines 74 to 76\n      in\n      3f7fed6\n    \n    \n    \n    \n\n        \n          \n           Optional<String> reason() { \n        \n\n        \n          \n           \treturn Optional.ofNullable(reason); \n        \n\n        \n          \n           } \n        \n    \n  \n\n\n\n  \n    \n      junit5/junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/FilePosition.java\n    \n    \n        Lines 147 to 149\n      in\n      3f7fed6\n    \n    \n    \n    \n\n        \n          \n           public Optional<Integer> getColumn() { \n        \n\n        \n          \n           \treturn Optional.ofNullable(this.column); \n        \n\n        \n          \n           }", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r406857267", "createdAt": "2020-04-10T17:22:36Z", "author": {"login": "mpkorstanje"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/ClasspathResourceSelector.java", "diffHunk": "@@ -59,6 +65,14 @@ public String getClasspathResourceName() {\n \t\treturn this.classpathResourceName;\n \t}\n \n+\t/**\n+\t * Get the selected position within the classpath resource as a\n+\t * {@link FilePosition}.\n+\t */\n+\tpublic FilePosition getPosition() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98a361a37490d160c6591934895a9ff015789641"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNTczNTk3", "url": "https://github.com/junit-team/junit5/pull/2253#pullrequestreview-391573597", "createdAt": "2020-04-10T17:48:51Z", "commit": {"oid": "98a361a37490d160c6591934895a9ff015789641"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzo0ODo1MlrOGEBR2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODowMToxMVrOGEBliw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg2ODQ0Mg==", "bodyText": "\u2753 FilePosition supports a line-only position. I think we should support this here as well. Instead of adding another overload, I think we should take FilePosition as a parameter instead of one or two ints.", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r406868442", "createdAt": "2020-04-10T17:48:52Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/DiscoverySelectors.java", "diffHunk": "@@ -135,6 +135,52 @@ public static FileSelector selectFile(File file) {\n \t\t}\n \t}\n \n+\t/**\n+\t * Create a {@code FileSelector} for the supplied file path.\n+\t *\n+\t * <p>This method selects the file using the supplied path <em>as is</em>,\n+\t * without verifying if the file exists.\n+\t *\n+\t * @param path the path to the file to select; never {@code null} or blank\n+\t * @param line the line number; must be greater than zero\n+\t * @param column the column number; must be greater than zero\n+\t * @see FileSelector\n+\t * @see #selectFile(File, int, int)\n+\t * @see #selectDirectory(String)\n+\t * @see #selectDirectory(File)\n+\t */\n+\tpublic static FileSelector selectFile(String path, int line, int column) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98a361a37490d160c6591934895a9ff015789641"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg2OTA5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @API(status = Status.DEPRECATED, since = \"5.7\")\n          \n          \n            \n            @API(status = Status.DEPRECATED, since = \"1.7\")", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r406869094", "createdAt": "2020-04-10T17:50:25Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/FilePosition.java", "diffHunk": "@@ -10,32 +10,35 @@\n \n package org.junit.platform.engine.support.descriptor;\n \n-import static org.apiguardian.api.API.Status.STABLE;\n-\n-import java.io.Serializable;\n-import java.util.Objects;\n import java.util.Optional;\n \n import org.apiguardian.api.API;\n+import org.apiguardian.api.API.Status;\n import org.junit.platform.commons.logging.Logger;\n import org.junit.platform.commons.logging.LoggerFactory;\n-import org.junit.platform.commons.util.Preconditions;\n import org.junit.platform.commons.util.StringUtils;\n-import org.junit.platform.commons.util.ToStringBuilder;\n \n /**\n  * Position inside a file represented by {@linkplain #getLine line} and\n  * {@linkplain #getColumn column} numbers.\n  *\n  * @since 1.0\n  */\n-@API(status = STABLE, since = \"1.0\")\n-public class FilePosition implements Serializable {\n+@API(status = Status.DEPRECATED, since = \"5.7\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98a361a37490d160c6591934895a9ff015789641"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg3MDEzMA==", "bodyText": "It should be 1.7. Let's also add \"This class is not intended to be subclassed by clients\" to the Javadoc as well.", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r406870130", "createdAt": "2020-04-10T17:52:48Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/FilePosition.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.engine.discovery;\n+\n+import static org.apiguardian.api.API.Status.STABLE;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.commons.logging.Logger;\n+import org.junit.platform.commons.logging.LoggerFactory;\n+import org.junit.platform.commons.util.Preconditions;\n+import org.junit.platform.commons.util.StringUtils;\n+import org.junit.platform.commons.util.ToStringBuilder;\n+\n+/**\n+ * Position inside a file represented by {@linkplain #getLine line} and\n+ * {@linkplain #getColumn column} numbers.\n+ *\n+ * @since 1.0\n+ */\n+@API(status = STABLE, since = \"1.0\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxNzIxNw=="}, "originalCommit": {"oid": "95557dd1f62353e682b139ef982a35bc23661143"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg3MTk4OA==", "bodyText": "Serialization is already tested via FileSystemSourceTests so it's only the toString() method we're no longer testing. I think we can leave it as-is.", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r406871988", "createdAt": "2020-04-10T17:57:31Z", "author": {"login": "marcphilipp"}, "path": "platform-tests/src/test/java/org/junit/platform/engine/discovery/FilePositionTests.java", "diffHunk": "@@ -31,12 +32,7 @@\n  * @since 1.0\n  */\n @DisplayName(\"FilePosition unit tests\")\n-class FilePositionTests extends AbstractTestSourceTests {\n-\n-\t@Override\n-\tStream<FilePosition> createSerializableInstances() {\n-\t\treturn Stream.of(FilePosition.from(42, 99));\n-\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxMjc5Mw=="}, "originalCommit": {"oid": "71130a6e08e87abac1960e58cb61c7d8794f8f4e"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg3MzQ4Mw==", "bodyText": "We don't use the serialization ourselves. It's meant for third-party tools that send test events over JVM boundaries. Since we didn't change any fields, I think we should be fine.", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r406873483", "createdAt": "2020-04-10T18:01:11Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/FilePosition.java", "diffHunk": "@@ -10,32 +10,35 @@\n \n package org.junit.platform.engine.support.descriptor;\n \n-import static org.apiguardian.api.API.Status.STABLE;\n-\n-import java.io.Serializable;\n-import java.util.Objects;\n import java.util.Optional;\n \n import org.apiguardian.api.API;\n+import org.apiguardian.api.API.Status;\n import org.junit.platform.commons.logging.Logger;\n import org.junit.platform.commons.logging.LoggerFactory;\n-import org.junit.platform.commons.util.Preconditions;\n import org.junit.platform.commons.util.StringUtils;\n-import org.junit.platform.commons.util.ToStringBuilder;\n \n /**\n  * Position inside a file represented by {@linkplain #getLine line} and\n  * {@linkplain #getColumn column} numbers.\n  *\n  * @since 1.0\n  */\n-@API(status = STABLE, since = \"1.0\")\n-public class FilePosition implements Serializable {\n+@API(status = Status.DEPRECATED, since = \"5.7\")\n+public class FilePosition extends org.junit.platform.engine.discovery.FilePosition {\n \n \tprivate static final long serialVersionUID = 1L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1MTIwNA=="}, "originalCommit": {"oid": "98a361a37490d160c6591934895a9ff015789641"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8b14c1f35e30ba3925ee20144e410a9a14ac324", "author": {"user": {"login": "timtebeek", "name": "Tim te Beek"}}, "url": "https://github.com/junit-team/junit5/commit/f8b14c1f35e30ba3925ee20144e410a9a14ac324", "committedDate": "2020-04-10T18:54:26Z", "message": "Address review comments regarding FilePosition classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "092ff61bafab6a4c09dbfb7054103b07009fc967", "author": {"user": {"login": "timtebeek", "name": "Tim te Beek"}}, "url": "https://github.com/junit-team/junit5/commit/092ff61bafab6a4c09dbfb7054103b07009fc967", "committedDate": "2020-04-10T18:57:53Z", "message": "Optional return types for nullable position"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2520537402bf01ce55af294547a8c04ecfc65dda", "author": {"user": {"login": "timtebeek", "name": "Tim te Beek"}}, "url": "https://github.com/junit-team/junit5/commit/2520537402bf01ce55af294547a8c04ecfc65dda", "committedDate": "2020-04-10T19:05:21Z", "message": "Take FilePosition as argument in DiscoverySelectors as suggested"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb9cec7fe3213a4b99010e050b15455a56640db4", "author": {"user": {"login": "timtebeek", "name": "Tim te Beek"}}, "url": "https://github.com/junit-team/junit5/commit/fb9cec7fe3213a4b99010e050b15455a56640db4", "committedDate": "2020-04-10T19:10:27Z", "message": "Adapt tests to use FilePosition arguments and Optional return types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "decb66931b828437d53497fcf091ba3209f36774", "author": {"user": {"login": "timtebeek", "name": "Tim te Beek"}}, "url": "https://github.com/junit-team/junit5/commit/decb66931b828437d53497fcf091ba3209f36774", "committedDate": "2020-04-10T19:55:20Z", "message": "Adopt public static Optional<? extends FilePosition> fromQuery in parent"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNzUzMjcz", "url": "https://github.com/junit-team/junit5/pull/2253#pullrequestreview-391753273", "createdAt": "2020-04-11T10:00:32Z", "commit": {"oid": "decb66931b828437d53497fcf091ba3209f36774"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDowMDozMlrOGEMARA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDowMDozMlrOGEMARA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NDE2NA==", "bodyText": "This is a breaking change (same above). I'm afraid we'll have to leave the existing getPosition() method in place, deprecate it, and add a new getFilePosition method that returns an optional of the new type.", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r407044164", "createdAt": "2020-04-11T10:00:32Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/ClasspathResourceSource.java", "diffHunk": "@@ -21,6 +21,7 @@\n import org.junit.platform.commons.util.Preconditions;\n import org.junit.platform.commons.util.ToStringBuilder;\n import org.junit.platform.engine.TestSource;\n+import org.junit.platform.engine.discovery.FilePosition;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "decb66931b828437d53497fcf091ba3209f36774"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a768cf46290e40cc2cd17b2baee630667b2e3b2e", "author": {"user": {"login": "timtebeek", "name": "Tim te Beek"}}, "url": "https://github.com/junit-team/junit5/commit/a768cf46290e40cc2cd17b2baee630667b2e3b2e", "committedDate": "2020-04-11T10:52:52Z", "message": "Add alternative getFilePosition() and restore getPosition() return type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd3d8f7a41064a1daadad7b1da9f07b8d67f5170", "author": {"user": {"login": "timtebeek", "name": "Tim te Beek"}}, "url": "https://github.com/junit-team/junit5/commit/dd3d8f7a41064a1daadad7b1da9f07b8d67f5170", "committedDate": "2020-04-11T10:57:43Z", "message": "Deprecate FileSource/ClasspathResourceSource getPosition() methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f80fcb92f6b60b4400548f2723e0839e0fe145ea", "author": {"user": {"login": "timtebeek", "name": "Tim te Beek"}}, "url": "https://github.com/junit-team/junit5/commit/f80fcb92f6b60b4400548f2723e0839e0fe145ea", "committedDate": "2020-04-11T11:38:18Z", "message": "Also restore original arguments to Source from methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "147ea9d10ebc4b9e6fc9504d230b104c4bd9c70c", "author": {"user": {"login": "timtebeek", "name": "Tim te Beek"}}, "url": "https://github.com/junit-team/junit5/commit/147ea9d10ebc4b9e6fc9504d230b104c4bd9c70c", "committedDate": "2020-04-11T14:59:10Z", "message": "Restore original argument to ClassSource.from method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1OTg4NDk4", "url": "https://github.com/junit-team/junit5/pull/2253#pullrequestreview-395988498", "createdAt": "2020-04-19T07:57:11Z", "commit": {"oid": "147ea9d10ebc4b9e6fc9504d230b104c4bd9c70c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "528ea873830f7220c3ce6bc8fe8323f3ccd9f688", "author": {"user": {"login": "timtebeek", "name": "Tim te Beek"}}, "url": "https://github.com/junit-team/junit5/commit/528ea873830f7220c3ce6bc8fe8323f3ccd9f688", "committedDate": "2020-05-02T10:12:19Z", "message": "Merge branch 'master' of github.com:junit-team/junit5"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a14c1bdec327becba78b53aede94acca6031ec8", "author": {"user": {"login": "timtebeek", "name": "Tim te Beek"}}, "url": "https://github.com/junit-team/junit5/commit/0a14c1bdec327becba78b53aede94acca6031ec8", "committedDate": "2020-05-02T10:35:26Z", "message": "Revert changes to org.junit.platform.engine.support.descriptor package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5baa3904f107176d69894e5e54421ad666e0bf42", "author": {"user": {"login": "timtebeek", "name": "Tim te Beek"}}, "url": "https://github.com/junit-team/junit5/commit/5baa3904f107176d69894e5e54421ad666e0bf42", "committedDate": "2020-05-02T10:38:05Z", "message": "Create a copy of FilePosition without further modifier/generics changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e996f17be12157358c983a500b28709cf8cbb294", "author": {"user": {"login": "timtebeek", "name": "Tim te Beek"}}, "url": "https://github.com/junit-team/junit5/commit/e996f17be12157358c983a500b28709cf8cbb294", "committedDate": "2020-05-02T10:49:32Z", "message": "Make FilePosition fields in Selectors final"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28cbaeaa4754e089c4ff33d0cb7b769d5fc0d7e4", "author": {"user": {"login": "timtebeek", "name": "Tim te Beek"}}, "url": "https://github.com/junit-team/junit5/commit/28cbaeaa4754e089c4ff33d0cb7b769d5fc0d7e4", "committedDate": "2020-05-02T10:49:40Z", "message": "Update release notes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "296cddb2119a9a36a490170e9fa732d051edfad4", "author": {"user": {"login": "timtebeek", "name": "Tim te Beek"}}, "url": "https://github.com/junit-team/junit5/commit/296cddb2119a9a36a490170e9fa732d051edfad4", "committedDate": "2020-05-06T08:04:18Z", "message": "Merge branch 'master' into master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMDE4Mjg4", "url": "https://github.com/junit-team/junit5/pull/2253#pullrequestreview-413018288", "createdAt": "2020-05-15T23:32:42Z", "commit": {"oid": "296cddb2119a9a36a490170e9fa732d051edfad4"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzozMjo0M1rOGWWW6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzo1ODowOFrOGWWo6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4ODE2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @since 1.0\n          \n          \n            \n             * @since 1.7", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r426088169", "createdAt": "2020-05-15T23:32:43Z", "author": {"login": "juliette-derancourt"}, "path": "platform-tests/src/test/java/org/junit/platform/engine/discovery/FilePositionTests.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.engine.discovery;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.params.provider.Arguments.arguments;\n+\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.platform.AbstractEqualsAndHashCodeTests;\n+import org.junit.platform.commons.PreconditionViolationException;\n+\n+/**\n+ * Unit tests for {@link FilePosition}.\n+ *\n+ * @since 1.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "296cddb2119a9a36a490170e9fa732d051edfad4"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4ODIzNA==", "bodyText": "Maybe FileSelector selectFile(File) should delegate to this method now? Since the implementation is the same...\nSame thought for FileSelector selectFile(String) and ClasspathResourceSelector selectClasspathResource(String)", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r426088234", "createdAt": "2020-05-15T23:33:01Z", "author": {"login": "juliette-derancourt"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/DiscoverySelectors.java", "diffHunk": "@@ -135,6 +135,50 @@ public static FileSelector selectFile(File file) {\n \t\t}\n \t}\n \n+\t/**\n+\t * Create a {@code FileSelector} for the supplied file path.\n+\t *\n+\t * <p>This method selects the file using the supplied path <em>as is</em>,\n+\t * without verifying if the file exists.\n+\t *\n+\t * @param path the path to the file to select; never {@code null} or blank\n+\t * @param position the position inside the file; may be {@code null}\n+\t * @see FileSelector\n+\t * @see #selectFile(File, int, int)\n+\t * @see #selectDirectory(String)\n+\t * @see #selectDirectory(File)\n+\t */\n+\tpublic static FileSelector selectFile(String path, FilePosition position) {\n+\t\tPreconditions.notBlank(path, \"File path must not be null or blank\");\n+\t\treturn new FileSelector(path, position);\n+\t}\n+\n+\t/**\n+\t * Create a {@code FileSelector} for the supplied {@linkplain File file}.\n+\t *\n+\t * <p>This method selects the file in its {@linkplain File#getCanonicalPath()\n+\t * canonical} form and throws a {@link PreconditionViolationException} if the\n+\t * file does not exist.\n+\t *\n+\t * @param file the file to select; never {@code null}\n+\t * @param position the position inside the file; may be {@code null}\n+\t * @see FileSelector\n+\t * @see #selectFile(String, FilePosition)\n+\t * @see #selectDirectory(String)\n+\t * @see #selectDirectory(File)\n+\t */\n+\tpublic static FileSelector selectFile(File file, FilePosition position) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "296cddb2119a9a36a490170e9fa732d051edfad4"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4OTM5Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Support FilePosition in File and ClasspathResource discovery selectors.\n          \n          \n            \n            * Support `FilePosition` in `FileSelector` and `ClasspathResourceSelector`.", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r426089396", "createdAt": "2020-05-15T23:38:58Z", "author": {"login": "juliette-derancourt"}, "path": "documentation/src/docs/asciidoc/release-notes/release-notes-5.7.0-M2.adoc", "diffHunk": "@@ -34,7 +34,7 @@ on GitHub.\n * When using `ConsoleLauncher`, explicitly selected classes from `--select-class`\n   and `--select-method` are now always executed regardless of class name patterns\n   provided with `--include-classname` or the default class name pattern.\n-\n+* Support FilePosition in File and ClasspathResource discovery selectors.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "296cddb2119a9a36a490170e9fa732d051edfad4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5MTY1Nw==", "bodyText": "I think we could add some references to the others selectFile methods here (and on said methods)", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r426091657", "createdAt": "2020-05-15T23:51:18Z", "author": {"login": "juliette-derancourt"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/DiscoverySelectors.java", "diffHunk": "@@ -135,6 +135,50 @@ public static FileSelector selectFile(File file) {\n \t\t}\n \t}\n \n+\t/**\n+\t * Create a {@code FileSelector} for the supplied file path.\n+\t *\n+\t * <p>This method selects the file using the supplied path <em>as is</em>,\n+\t * without verifying if the file exists.\n+\t *\n+\t * @param path the path to the file to select; never {@code null} or blank\n+\t * @param position the position inside the file; may be {@code null}\n+\t * @see FileSelector\n+\t * @see #selectFile(File, int, int)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "296cddb2119a9a36a490170e9fa732d051edfad4"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5MjE1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * Get the selected position within the classpath resource as a\n          \n          \n            \n            \t * {@link FilePosition}.\n          \n          \n            \n            \t * Get the selected {@code FilePosition} within the classpath resource.", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r426092155", "createdAt": "2020-05-15T23:54:29Z", "author": {"login": "juliette-derancourt"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/ClasspathResourceSelector.java", "diffHunk": "@@ -59,6 +66,14 @@ public String getClasspathResourceName() {\n \t\treturn this.classpathResourceName;\n \t}\n \n+\t/**\n+\t * Get the selected position within the classpath resource as a\n+\t * {@link FilePosition}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "296cddb2119a9a36a490170e9fa732d051edfad4"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5MjM0MQ==", "bodyText": "Based on my previous comment in DiscoverySelectors, we could probably get rid of this constructor.", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r426092341", "createdAt": "2020-05-15T23:55:34Z", "author": {"login": "juliette-derancourt"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/FileSelector.java", "diffHunk": "@@ -41,9 +42,15 @@\n public class FileSelector implements DiscoverySelector {\n \n \tprivate final String path;\n+\tprivate final FilePosition position;\n \n \tFileSelector(String path) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "296cddb2119a9a36a490170e9fa732d051edfad4"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5Mjc3OQ==", "bodyText": "Maybe this case deserves a test of its own?", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r426092779", "createdAt": "2020-05-15T23:58:08Z", "author": {"login": "juliette-derancourt"}, "path": "platform-tests/src/test/java/org/junit/platform/engine/discovery/DiscoverySelectorsTests.java", "diffHunk": "@@ -92,6 +92,11 @@ void selectFileByName() {\n \t\tassertEquals(path, selector.getRawPath());\n \t\tassertEquals(new File(path), selector.getFile());\n \t\tassertEquals(Paths.get(path), selector.getPath());\n+\n+\t\t// with file position", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "296cddb2119a9a36a490170e9fa732d051edfad4"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "267ef71f99ff011e8ded3f5e90ca4b86dd2265d8", "author": {"user": {"login": "timtebeek", "name": "Tim te Beek"}}, "url": "https://github.com/junit-team/junit5/commit/267ef71f99ff011e8ded3f5e90ca4b86dd2265d8", "committedDate": "2020-05-16T07:15:46Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Juliette de Rancourt <derancourt.juliette@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40bc12a91008eef168706c35140273f5668f3ae2", "author": {"user": {"login": "timtebeek", "name": "Tim te Beek"}}, "url": "https://github.com/junit-team/junit5/commit/40bc12a91008eef168706c35140273f5668f3ae2", "committedDate": "2020-05-16T09:01:54Z", "message": "Delegate selectFile/selectClasspath methods to copy with FilePosition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50ba2252d2aec321531855e50675c4d0c9531b9f", "author": {"user": {"login": "timtebeek", "name": "Tim te Beek"}}, "url": "https://github.com/junit-team/junit5/commit/50ba2252d2aec321531855e50675c4d0c9531b9f", "committedDate": "2020-05-16T09:02:32Z", "message": "Remove constructors without FilePosition; Update tests to match"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19105584b860f46162b65e13dd3073250ed1f9fc", "author": {"user": {"login": "timtebeek", "name": "Tim te Beek"}}, "url": "https://github.com/junit-team/junit5/commit/19105584b860f46162b65e13dd3073250ed1f9fc", "committedDate": "2020-05-16T09:03:29Z", "message": "Separate tests for DiscoverySelectors with FilePosition argument"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMDk3NTYw", "url": "https://github.com/junit-team/junit5/pull/2253#pullrequestreview-413097560", "createdAt": "2020-05-16T18:18:12Z", "commit": {"oid": "19105584b860f46162b65e13dd3073250ed1f9fc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxODoxODoxMlrOGWb1QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxODoxODoxMlrOGWb1QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3Nzg1Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            \t\t// with file position\n          \n          \n            \n            \t\tselector = selectClasspathResource(\"A/B/C/spec.json\", FilePosition.from(12, 34));\n          \n          \n            \n            \t\tassertEquals(\"A/B/C/spec.json\", selector.getClasspathResourceName());\n          \n          \n            \n            \t\tassertEquals(FilePosition.from(12, 34), selector.getPosition().get());", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r426177857", "createdAt": "2020-05-16T18:18:12Z", "author": {"login": "timtebeek"}, "path": "platform-tests/src/test/java/org/junit/platform/engine/discovery/DiscoverySelectorsTests.java", "diffHunk": "@@ -153,6 +186,30 @@ void selectClasspathResources() {\n \t\t// standard use case\n \t\tselector = selectClasspathResource(\"A/B/C/spec.json\");\n \t\tassertEquals(\"A/B/C/spec.json\", selector.getClasspathResourceName());\n+\n+\t\t// with file position\n+\t\tselector = selectClasspathResource(\"A/B/C/spec.json\", FilePosition.from(12, 34));\n+\t\tassertEquals(\"A/B/C/spec.json\", selector.getClasspathResourceName());\n+\t\tassertEquals(FilePosition.from(12, 34), selector.getPosition().get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19105584b860f46162b65e13dd3073250ed1f9fc"}, "originalPosition": 55}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fbc96daa5bd7d561bfcaa02a3dce6adb68949a6", "author": {"user": {"login": "timtebeek", "name": "Tim te Beek"}}, "url": "https://github.com/junit-team/junit5/commit/2fbc96daa5bd7d561bfcaa02a3dce6adb68949a6", "committedDate": "2020-05-16T18:18:18Z", "message": "Update platform-tests/src/test/java/org/junit/platform/engine/discovery/DiscoverySelectorsTests.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMDc5NDYx", "url": "https://github.com/junit-team/junit5/pull/2253#pullrequestreview-413079461", "createdAt": "2020-05-16T14:09:14Z", "commit": {"oid": "19105584b860f46162b65e13dd3073250ed1f9fc"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxNDoxMzo1MlrOGWakRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxNDoxMzo1MlrOGWakRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1NzEyNQ==", "bodyText": "@junit-team/junit-lambda Should we mention in the Javadoc that this class is actually a copy of descriptor.FilePosition?", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r426157125", "createdAt": "2020-05-16T14:13:52Z", "author": {"login": "juliette-derancourt"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/FilePosition.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.engine.discovery;\n+\n+import static org.apiguardian.api.API.Status.STABLE;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.commons.logging.Logger;\n+import org.junit.platform.commons.logging.LoggerFactory;\n+import org.junit.platform.commons.util.Preconditions;\n+import org.junit.platform.commons.util.StringUtils;\n+import org.junit.platform.commons.util.ToStringBuilder;\n+\n+/**\n+ * Position inside a file represented by {@linkplain #getLine line} and\n+ * {@linkplain #getColumn column} numbers.\n+ *\n+ * @since 1.7\n+ */\n+@API(status = STABLE, since = \"1.7\")\n+public class FilePosition implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19105584b860f46162b65e13dd3073250ed1f9fc"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3518, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}