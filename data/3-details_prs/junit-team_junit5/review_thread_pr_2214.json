{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3OTQyNTY4", "number": 2214, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMDoyMToyMVrODn9k9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDowMTozN1rODtr37A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjI5OTQzOnYy", "diffSide": "RIGHT", "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/DisabledIf.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMDoyMToyMVrOF2RLhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMDozOToxM1rOF2R5hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ0ODkwMg==", "bodyText": "I believe you might have copied that from somewhere. \ud83d\ude09", "url": "https://github.com/junit-team/junit5/pull/2214#discussion_r392448902", "createdAt": "2020-03-13T20:21:21Z", "author": {"login": "marcphilipp"}, "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/DisabledIf.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.jupiter.api.condition;\n+\n+import static org.apiguardian.api.API.Status.STABLE;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.apiguardian.api.API;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+/**\n+ * {@code @DisabledIf} is used to signal that the annotated test class or\n+ * test method is <em>disabled</em> only if the provided condition\n+ * evaluates to {@code true}.\n+ *\n+ * <p>When applied at the class level, all test methods within that class\n+ * will be disabled on the same specified operating systems.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a0db885b3bc89b4432f74a2625fcc20e462afa"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ2MDY3Nw==", "bodyText": "Oopsie, you got me! \ud83d\ude01", "url": "https://github.com/junit-team/junit5/pull/2214#discussion_r392460677", "createdAt": "2020-03-13T20:39:13Z", "author": {"login": "juliette-derancourt"}, "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/DisabledIf.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.jupiter.api.condition;\n+\n+import static org.apiguardian.api.API.Status.STABLE;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.apiguardian.api.API;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+/**\n+ * {@code @DisabledIf} is used to signal that the annotated test class or\n+ * test method is <em>disabled</em> only if the provided condition\n+ * evaluates to {@code true}.\n+ *\n+ * <p>When applied at the class level, all test methods within that class\n+ * will be disabled on the same specified operating systems.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ0ODkwMg=="}, "originalCommit": {"oid": "08a0db885b3bc89b4432f74a2625fcc20e462afa"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjMwOTE2OnYy", "diffSide": "RIGHT", "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/MethodBasedCondition.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMDoyMzoyOFrOF2RQ8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMDozOToyMVrOF2R52A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ1MDI5MQ==", "bodyText": "I think this class can be package-private.", "url": "https://github.com/junit-team/junit5/pull/2214#discussion_r392450291", "createdAt": "2020-03-13T20:23:28Z", "author": {"login": "marcphilipp"}, "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/MethodBasedCondition.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.jupiter.api.condition;\n+\n+import static java.lang.String.format;\n+\n+import java.lang.reflect.Method;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.extension.ConditionEvaluationResult;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.platform.commons.JUnitException;\n+import org.junit.platform.commons.util.Preconditions;\n+import org.junit.platform.commons.util.ReflectionUtils;\n+\n+public abstract class MethodBasedCondition implements ExecutionCondition {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a0db885b3bc89b4432f74a2625fcc20e462afa"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ2MDc2MA==", "bodyText": "Indeed, it was even making the build fail ^^", "url": "https://github.com/junit-team/junit5/pull/2214#discussion_r392460760", "createdAt": "2020-03-13T20:39:21Z", "author": {"login": "juliette-derancourt"}, "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/MethodBasedCondition.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.jupiter.api.condition;\n+\n+import static java.lang.String.format;\n+\n+import java.lang.reflect.Method;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.extension.ConditionEvaluationResult;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.platform.commons.JUnitException;\n+import org.junit.platform.commons.util.Preconditions;\n+import org.junit.platform.commons.util.ReflectionUtils;\n+\n+public abstract class MethodBasedCondition implements ExecutionCondition {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ1MDI5MQ=="}, "originalCommit": {"oid": "08a0db885b3bc89b4432f74a2625fcc20e462afa"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjMyNTE0OnYy", "diffSide": "RIGHT", "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/MethodBasedCondition.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMDoyNjozM1rOF2RZjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMDo0NToyM1rOF2SIyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ1MjQ5Mw==", "bodyText": "Can we reuse this logic from MethodArgumentsProvider somehow?", "url": "https://github.com/junit-team/junit5/pull/2214#discussion_r392452493", "createdAt": "2020-03-13T20:26:33Z", "author": {"login": "marcphilipp"}, "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/MethodBasedCondition.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.jupiter.api.condition;\n+\n+import static java.lang.String.format;\n+\n+import java.lang.reflect.Method;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.extension.ConditionEvaluationResult;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.platform.commons.JUnitException;\n+import org.junit.platform.commons.util.Preconditions;\n+import org.junit.platform.commons.util.ReflectionUtils;\n+\n+public abstract class MethodBasedCondition implements ExecutionCondition {\n+\n+\tabstract Optional<String> getMethodName(ExtensionContext context);\n+\n+\tabstract ConditionEvaluationResult getDefaultResult();\n+\n+\tabstract ConditionEvaluationResult getResultBasedOnBoolean(boolean result);\n+\n+\t@Override\n+\tpublic ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {\n+\t\treturn getMethodName(context) //\n+\t\t\t\t.map(methodName -> getConditionMethod(methodName, context)) //\n+\t\t\t\t.map(method -> (boolean) evaluateCondition(method, context)) //\n+\t\t\t\t.map(this::getResultBasedOnBoolean).orElse(getDefaultResult());\n+\t}\n+\n+\tprivate Method getConditionMethod(String methodName, ExtensionContext context) {\n+\t\tif (methodName.contains(\"#\")) {\n+\t\t\treturn findMethodByFullyQualifiedName(methodName);\n+\t\t}\n+\t\treturn findMethod(context.getRequiredTestClass(), methodName);\n+\t}\n+\n+\tprivate Method findMethodByFullyQualifiedName(String fullyQualifiedMethodName) {\n+\t\tString[] methodParts = ReflectionUtils.parseFullyQualifiedMethodName(fullyQualifiedMethodName);\n+\t\tString className = methodParts[0];\n+\t\tString methodName = methodParts[1];\n+\t\tClass<?> clazz = ReflectionUtils.tryToLoadClass(className).getOrThrow(\n+\t\t\tcause -> new JUnitException(format(\"Could not load class [%s]\", className), cause));\n+\t\treturn findMethod(clazz, methodName);\n+\t}\n+\n+\tprivate Method findMethod(Class<?> clazz, String methodName) {\n+\t\treturn ReflectionUtils.findMethod(clazz, methodName) //\n+\t\t\t\t.orElseGet(() -> ReflectionUtils.findMethod(clazz, methodName, ExtensionContext.class) //\n+\t\t\t\t\t\t.orElseThrow(() -> new JUnitException(\n+\t\t\t\t\t\t\tformat(\"Could not find method [%s] in class [%s]\", methodName, clazz.getName()))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a0db885b3bc89b4432f74a2625fcc20e462afa"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ2MjY3MQ==", "bodyText": "Hmm I thought about that at first, but since the classes were in two different modules I put that aside for now. But I agree.\nWhere would you put the logic in common? In ReflectionUtils?", "url": "https://github.com/junit-team/junit5/pull/2214#discussion_r392462671", "createdAt": "2020-03-13T20:42:15Z", "author": {"login": "juliette-derancourt"}, "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/MethodBasedCondition.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.jupiter.api.condition;\n+\n+import static java.lang.String.format;\n+\n+import java.lang.reflect.Method;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.extension.ConditionEvaluationResult;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.platform.commons.JUnitException;\n+import org.junit.platform.commons.util.Preconditions;\n+import org.junit.platform.commons.util.ReflectionUtils;\n+\n+public abstract class MethodBasedCondition implements ExecutionCondition {\n+\n+\tabstract Optional<String> getMethodName(ExtensionContext context);\n+\n+\tabstract ConditionEvaluationResult getDefaultResult();\n+\n+\tabstract ConditionEvaluationResult getResultBasedOnBoolean(boolean result);\n+\n+\t@Override\n+\tpublic ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {\n+\t\treturn getMethodName(context) //\n+\t\t\t\t.map(methodName -> getConditionMethod(methodName, context)) //\n+\t\t\t\t.map(method -> (boolean) evaluateCondition(method, context)) //\n+\t\t\t\t.map(this::getResultBasedOnBoolean).orElse(getDefaultResult());\n+\t}\n+\n+\tprivate Method getConditionMethod(String methodName, ExtensionContext context) {\n+\t\tif (methodName.contains(\"#\")) {\n+\t\t\treturn findMethodByFullyQualifiedName(methodName);\n+\t\t}\n+\t\treturn findMethod(context.getRequiredTestClass(), methodName);\n+\t}\n+\n+\tprivate Method findMethodByFullyQualifiedName(String fullyQualifiedMethodName) {\n+\t\tString[] methodParts = ReflectionUtils.parseFullyQualifiedMethodName(fullyQualifiedMethodName);\n+\t\tString className = methodParts[0];\n+\t\tString methodName = methodParts[1];\n+\t\tClass<?> clazz = ReflectionUtils.tryToLoadClass(className).getOrThrow(\n+\t\t\tcause -> new JUnitException(format(\"Could not load class [%s]\", className), cause));\n+\t\treturn findMethod(clazz, methodName);\n+\t}\n+\n+\tprivate Method findMethod(Class<?> clazz, String methodName) {\n+\t\treturn ReflectionUtils.findMethod(clazz, methodName) //\n+\t\t\t\t.orElseGet(() -> ReflectionUtils.findMethod(clazz, methodName, ExtensionContext.class) //\n+\t\t\t\t\t\t.orElseThrow(() -> new JUnitException(\n+\t\t\t\t\t\t\tformat(\"Could not find method [%s] in class [%s]\", methodName, clazz.getName()))));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ1MjQ5Mw=="}, "originalCommit": {"oid": "08a0db885b3bc89b4432f74a2625fcc20e462afa"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ2NDU4Ng==", "bodyText": "Where would you put the logic in common? In ReflectionUtils?\n\nSounds like a good place. We may export that logic to external users later, if requested.", "url": "https://github.com/junit-team/junit5/pull/2214#discussion_r392464586", "createdAt": "2020-03-13T20:45:23Z", "author": {"login": "sormuras"}, "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/MethodBasedCondition.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.jupiter.api.condition;\n+\n+import static java.lang.String.format;\n+\n+import java.lang.reflect.Method;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.extension.ConditionEvaluationResult;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.platform.commons.JUnitException;\n+import org.junit.platform.commons.util.Preconditions;\n+import org.junit.platform.commons.util.ReflectionUtils;\n+\n+public abstract class MethodBasedCondition implements ExecutionCondition {\n+\n+\tabstract Optional<String> getMethodName(ExtensionContext context);\n+\n+\tabstract ConditionEvaluationResult getDefaultResult();\n+\n+\tabstract ConditionEvaluationResult getResultBasedOnBoolean(boolean result);\n+\n+\t@Override\n+\tpublic ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {\n+\t\treturn getMethodName(context) //\n+\t\t\t\t.map(methodName -> getConditionMethod(methodName, context)) //\n+\t\t\t\t.map(method -> (boolean) evaluateCondition(method, context)) //\n+\t\t\t\t.map(this::getResultBasedOnBoolean).orElse(getDefaultResult());\n+\t}\n+\n+\tprivate Method getConditionMethod(String methodName, ExtensionContext context) {\n+\t\tif (methodName.contains(\"#\")) {\n+\t\t\treturn findMethodByFullyQualifiedName(methodName);\n+\t\t}\n+\t\treturn findMethod(context.getRequiredTestClass(), methodName);\n+\t}\n+\n+\tprivate Method findMethodByFullyQualifiedName(String fullyQualifiedMethodName) {\n+\t\tString[] methodParts = ReflectionUtils.parseFullyQualifiedMethodName(fullyQualifiedMethodName);\n+\t\tString className = methodParts[0];\n+\t\tString methodName = methodParts[1];\n+\t\tClass<?> clazz = ReflectionUtils.tryToLoadClass(className).getOrThrow(\n+\t\t\tcause -> new JUnitException(format(\"Could not load class [%s]\", className), cause));\n+\t\treturn findMethod(clazz, methodName);\n+\t}\n+\n+\tprivate Method findMethod(Class<?> clazz, String methodName) {\n+\t\treturn ReflectionUtils.findMethod(clazz, methodName) //\n+\t\t\t\t.orElseGet(() -> ReflectionUtils.findMethod(clazz, methodName, ExtensionContext.class) //\n+\t\t\t\t\t\t.orElseThrow(() -> new JUnitException(\n+\t\t\t\t\t\t\tformat(\"Could not find method [%s] in class [%s]\", methodName, clazz.getName()))));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ1MjQ5Mw=="}, "originalCommit": {"oid": "08a0db885b3bc89b4432f74a2625fcc20e462afa"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzgyOTM3OnYy", "diffSide": "RIGHT", "path": "documentation/src/docs/asciidoc/user-guide/writing-tests.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxMDozNzozMFrOF9IhlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxMTo1MzozN1rOF9I7fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY0NzEyNA==", "bodyText": "These attributes need to be defined in documentation/src/docs/asciidoc/link-attributes.adoc.", "url": "https://github.com/junit-team/junit5/pull/2214#discussion_r399647124", "createdAt": "2020-03-28T10:37:30Z", "author": {"login": "marcphilipp"}, "path": "documentation/src/docs/asciidoc/user-guide/writing-tests.adoc", "diffHunk": "@@ -437,6 +437,21 @@ method. Specifically, these annotations will be found if they are directly prese\n indirectly present, or meta-present on a given element.\n ====\n \n+[[writing-tests-conditional-execution-custom]]\n+==== Custom Conditions\n+\n+A container or test may be enabled or disabled based on the boolean return of a static\n+method via the `{EnabledIf}` and `{DisabledIf}` annotations. The method is provided to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee1eef90569893d22858079cf33d42cd2e6d6ab7"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1Mzc1OA==", "bodyText": "Didn't noticed this file, thanks! \ud83d\udc4d", "url": "https://github.com/junit-team/junit5/pull/2214#discussion_r399653758", "createdAt": "2020-03-28T11:53:37Z", "author": {"login": "juliette-derancourt"}, "path": "documentation/src/docs/asciidoc/user-guide/writing-tests.adoc", "diffHunk": "@@ -437,6 +437,21 @@ method. Specifically, these annotations will be found if they are directly prese\n indirectly present, or meta-present on a given element.\n ====\n \n+[[writing-tests-conditional-execution-custom]]\n+==== Custom Conditions\n+\n+A container or test may be enabled or disabled based on the boolean return of a static\n+method via the `{EnabledIf}` and `{DisabledIf}` annotations. The method is provided to", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY0NzEyNA=="}, "originalCommit": {"oid": "ee1eef90569893d22858079cf33d42cd2e6d6ab7"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzgzMzg2OnYy", "diffSide": "RIGHT", "path": "documentation/src/docs/asciidoc/user-guide/writing-tests.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxMDo0Mzo0M1rOF9IjxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDowMDoxNlrOF_QeMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY0NzY4NQ==", "bodyText": "We should describe that the method does not have to be static in case @TestInstance(PER_CLASS) is used and add tests for this case.", "url": "https://github.com/junit-team/junit5/pull/2214#discussion_r399647685", "createdAt": "2020-03-28T10:43:43Z", "author": {"login": "marcphilipp"}, "path": "documentation/src/docs/asciidoc/user-guide/writing-tests.adoc", "diffHunk": "@@ -437,6 +437,21 @@ method. Specifically, these annotations will be found if they are directly prese\n indirectly present, or meta-present on a given element.\n ====\n \n+[[writing-tests-conditional-execution-custom]]\n+==== Custom Conditions\n+\n+A container or test may be enabled or disabled based on the boolean return of a static", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee1eef90569893d22858079cf33d42cd2e6d6ab7"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg3NDQ4Mw==", "bodyText": "Should I add a code sample to illustrate this and/or the usage of an external method?", "url": "https://github.com/junit-team/junit5/pull/2214#discussion_r401874483", "createdAt": "2020-04-01T20:00:16Z", "author": {"login": "juliette-derancourt"}, "path": "documentation/src/docs/asciidoc/user-guide/writing-tests.adoc", "diffHunk": "@@ -437,6 +437,21 @@ method. Specifically, these annotations will be found if they are directly prese\n indirectly present, or meta-present on a given element.\n ====\n \n+[[writing-tests-conditional-execution-custom]]\n+==== Custom Conditions\n+\n+A container or test may be enabled or disabled based on the boolean return of a static", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY0NzY4NQ=="}, "originalCommit": {"oid": "ee1eef90569893d22858079cf33d42cd2e6d6ab7"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzgzNTkxOnYy", "diffSide": "RIGHT", "path": "junit-platform-commons/src/main/java/org/junit/platform/commons/util/ReflectionUtils.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxMDo0NzoxMFrOF9IkxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxNTo1MTo1NlrOF9KWVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY0Nzk0MQ==", "bodyText": "This method needs Javadoc, including @since, and an @API annotation.", "url": "https://github.com/junit-team/junit5/pull/2214#discussion_r399647941", "createdAt": "2020-03-28T10:47:10Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-commons/src/main/java/org/junit/platform/commons/util/ReflectionUtils.java", "diffHunk": "@@ -1314,6 +1315,11 @@ public static boolean isMethodPresent(Class<?> clazz, Predicate<Method> predicat\n \t\treturn Optional.empty();\n \t}\n \n+\tpublic static Method getRequiredMethod(Class<?> clazz, String methodName, Class<?>... parameterTypes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee1eef90569893d22858079cf33d42cd2e6d6ab7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1MzgxMQ==", "bodyText": "Ah yes, this one slipped under my radar \ud83d\ude04", "url": "https://github.com/junit-team/junit5/pull/2214#discussion_r399653811", "createdAt": "2020-03-28T11:54:00Z", "author": {"login": "juliette-derancourt"}, "path": "junit-platform-commons/src/main/java/org/junit/platform/commons/util/ReflectionUtils.java", "diffHunk": "@@ -1314,6 +1315,11 @@ public static boolean isMethodPresent(Class<?> clazz, Predicate<Method> predicat\n \t\treturn Optional.empty();\n \t}\n \n+\tpublic static Method getRequiredMethod(Class<?> clazz, String methodName, Class<?>... parameterTypes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY0Nzk0MQ=="}, "originalCommit": {"oid": "ee1eef90569893d22858079cf33d42cd2e6d6ab7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1NDI1Mg==", "bodyText": "Would this make more sense to throw a NoSuchMethodException here instead of JUnitException? \ud83e\udd14", "url": "https://github.com/junit-team/junit5/pull/2214#discussion_r399654252", "createdAt": "2020-03-28T11:58:32Z", "author": {"login": "juliette-derancourt"}, "path": "junit-platform-commons/src/main/java/org/junit/platform/commons/util/ReflectionUtils.java", "diffHunk": "@@ -1314,6 +1315,11 @@ public static boolean isMethodPresent(Class<?> clazz, Predicate<Method> predicat\n \t\treturn Optional.empty();\n \t}\n \n+\tpublic static Method getRequiredMethod(Class<?> clazz, String methodName, Class<?>... parameterTypes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY0Nzk0MQ=="}, "originalCommit": {"oid": "ee1eef90569893d22858079cf33d42cd2e6d6ab7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY3NzAxNA==", "bodyText": "When we throw exceptions, we generally only use JUnitException or one of its subclasses to avoid confusion with exceptions thrown from tests. Thus, I'd keep it as is.", "url": "https://github.com/junit-team/junit5/pull/2214#discussion_r399677014", "createdAt": "2020-03-28T15:51:56Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-commons/src/main/java/org/junit/platform/commons/util/ReflectionUtils.java", "diffHunk": "@@ -1314,6 +1315,11 @@ public static boolean isMethodPresent(Class<?> clazz, Predicate<Method> predicat\n \t\treturn Optional.empty();\n \t}\n \n+\tpublic static Method getRequiredMethod(Class<?> clazz, String methodName, Class<?>... parameterTypes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY0Nzk0MQ=="}, "originalCommit": {"oid": "ee1eef90569893d22858079cf33d42cd2e6d6ab7"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjMxMzQwOnYy", "diffSide": "RIGHT", "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/MethodBasedCondition.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDowMTozN1rOF_QhCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjoxMDozM1rOF_oNww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg3NTIxMQ==", "bodyText": "@marcphilipp Am I wrong to assume that the testInstance will always be present in this case?\nIf so, is the presence of @TestInstance(Lifecycle.PER_CLASS) even required in the case of a non-static method?", "url": "https://github.com/junit-team/junit5/pull/2214#discussion_r401875211", "createdAt": "2020-04-01T20:01:37Z", "author": {"login": "juliette-derancourt"}, "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/MethodBasedCondition.java", "diffHunk": "@@ -66,7 +66,7 @@ private Object evaluateCondition(Method method, ExtensionContext context) {\n \t\tPreconditions.condition(areParametersSupported(method),\n \t\t\t() -> format(\"method [%s] should take either an ExtensionContext or no parameters\", method.getName()));\n \n-\t\tObject testInstance = context.getTestInstance().orElse(null);\n+\t\tObject testInstance = context.getRequiredTestInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7224428e7d0323fe11f8998a78298eda79221d9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2MzQ5MQ==", "bodyText": "I think we're missing integration test for applying the condition on the class level in which case the test instance would not be present.", "url": "https://github.com/junit-team/junit5/pull/2214#discussion_r402263491", "createdAt": "2020-04-02T12:10:33Z", "author": {"login": "marcphilipp"}, "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/condition/MethodBasedCondition.java", "diffHunk": "@@ -66,7 +66,7 @@ private Object evaluateCondition(Method method, ExtensionContext context) {\n \t\tPreconditions.condition(areParametersSupported(method),\n \t\t\t() -> format(\"method [%s] should take either an ExtensionContext or no parameters\", method.getName()));\n \n-\t\tObject testInstance = context.getTestInstance().orElse(null);\n+\t\tObject testInstance = context.getRequiredTestInstance();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg3NTIxMQ=="}, "originalCommit": {"oid": "f7224428e7d0323fe11f8998a78298eda79221d9"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3983, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}