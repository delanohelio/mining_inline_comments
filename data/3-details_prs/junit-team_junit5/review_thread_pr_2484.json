{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4OTYzNTkz", "number": 2484, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMToxOTo1NFrOFAwMoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMToxOTo1NFrOFAwMoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MzMzOTg1OnYy", "diffSide": "RIGHT", "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestInstancePreDestroyCallback.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMToxOTo1NFrOH_Mgww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMToxOTo1NFrOH_Mgww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAyNzMzMQ==", "bodyText": "Note to self: document in Javadoc", "url": "https://github.com/junit-team/junit5/pull/2484#discussion_r536027331", "createdAt": "2020-12-04T11:19:54Z", "author": {"login": "marcphilipp"}, "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/extension/TestInstancePreDestroyCallback.java", "diffHunk": "@@ -48,12 +57,59 @@\n public interface TestInstancePreDestroyCallback extends Extension {\n \n \t/**\n-\t * Callback for processing a test instance before it is destroyed.\n+\t * Callback for processing test instances before they are destroyed.\n+\t *\n+\t * <p>Contrary to {@link TestInstancePostProcessor#postProcessTestInstance}\n+\t * this method is only called once for each {@link ExtensionContext} even if\n+\t * there are multiple test instances about to be destroyed in case of\n+\t * {@link Nested @Nested} tests. Please use the provided\n+\t * {@link #preDestroyTestInstances(ExtensionContext, Consumer)} utility\n+\t * method to ensure that all test instances are handled.\n \t *\n \t * @param context the current extension context; never {@code null}\n \t * @see ExtensionContext#getTestInstance()\n \t * @see ExtensionContext#getRequiredTestInstance()\n+\t * @see ExtensionContext#getTestInstances()\n+\t * @see ExtensionContext#getRequiredTestInstances()\n+\t * @see #preDestroyTestInstances(ExtensionContext, Consumer)\n \t */\n \tvoid preDestroyTestInstance(ExtensionContext context) throws Exception;\n \n+\t/**\n+\t * Utility method for processing <em>all</em> test instances of an\n+\t * {@link ExtensionContext} that are not present in any of its parent\n+\t * contexts (which would happen in case {@link Lifecycle#PER_CLASS} was\n+\t * used).\n+\t *\n+\t * <p>This method is intended to be called from an implementation of\n+\t * {@link #preDestroyTestInstance(ExtensionContext)} like this:\n+\t *\n+\t * <pre>{@code\n+\t * class MyExtension implements TestInstancePreDestroyCallback {\n+\t *     @Override\n+\t *     public void preDestroyTestInstance(ExtensionContext context) {\n+\t *         TestInstancePreDestroyCallback.preDestroyTestInstances(context, testInstance -> {\n+\t *             // custom logic\n+\t *         });\n+\t *     }\n+\t * }\n+\t * }</pre>\n+\t *\n+\t * @param context the current extension context; never {@code null}\n+\t * @param callback the callback to be invoked for every test instance of the\n+\t * current extension context that is about to be destroyed; never\n+\t * {@code null}\n+\t * @since 5.7.1\n+\t */\n+\t@API(status = EXPERIMENTAL, since = \"5.7.1\")\n+\tstatic void preDestroyTestInstances(ExtensionContext context, Consumer<Object> callback) {\n+\t\tList<Object> destroyedInstances = new ArrayList<>(context.getRequiredTestInstances().getAllInstances());\n+\t\tfor (Optional<ExtensionContext> current = context.getParent(); current.isPresent(); current = current.get().getParent()) {\n+\t\t\tcurrent.get().getTestInstances().map(TestInstances::getAllInstances).ifPresent(\n+\t\t\t\tdestroyedInstances::removeAll);\n+\t\t}\n+\t\tCollections.reverse(destroyedInstances);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a39c5212b8bd59a2909a8aa5f56e997b355ad0e1"}, "originalPosition": 87}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3972, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}