{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwNjk4Nzcy", "number": 2217, "title": "Make JAR builds reproducible", "bodyText": "Overview\nThis PR makes the java bytecode generated by this project reproducible. This means that under identical builds condition (for example Java version), repeated builds should provide the same output byte-for-byte.\nIt achieves this by:\n\nsupporting SOURCE_DATE_EPOCH as a way of fixing build-time-specific metadata added to JARs\nusing Gradle's reproducible archives functionality to fix timestamps and file ordering within JARs\nre-archiving JARs that are non-deterministic because they use jar to rewrite their contents after build.\n\nConfirming the change\n#!/bin/bash -e\n\nrm -f checksums*\n\n# Fix build time\nexport SOURCE_DATE_EPOCH=$(date +%s)\n\n./gradlew clean build -x test --parallel --rerun-tasks\n\nfind . -name '*.jar' \\\n    | grep '/build/libs/' \\\n    | grep -v 'javadoc' \\\n    | sort \\\n    | xargs sha256sum > checksums-1.txt\n\n./gradlew clean build -x test --parallel --rerun-tasks\n\nfind . -name '*.jar' \\\n    | grep '/build/libs/' \\\n    | grep -v 'javadoc' \\\n    | sort \\\n    | xargs sha256sum > checksums-2.txt\n\ndiff checksums-{1,2}.txt\nThe diff should be empty, that is to say, both independent runs of the build should have generated byte-for-byte identical outputs.\nOmitting Javadocs\nThe javadocs outputs remain non-deterministic - despite the inclusion of noTimestamp(true) in the project's javadoc configuration, the comment header is still being generated. It looks like the javadoc mechanism in Gradle isn't honouring this flag.\nI wasn't able to solve this problem, but would be necessary to achieve full reproducibility.\n\nI hereby agree to the terms of the JUnit Contributor License Agreement. \u2705\n\nDefinition of Done\n\n There are no TODOs left in the code\n Method preconditions are checked and documented in the method's Javadoc\n Coding conventions (e.g. for logging) have been followed\n Change is covered by automated tests including corner cases, errors, and exception handling\n Public API has Javadoc and @API annotations\n Change is documented in the User Guide and Release Notes\n All continuous integration builds pass", "createdAt": "2020-03-18T22:33:36Z", "url": "https://github.com/junit-team/junit5/pull/2217", "merged": true, "mergeCommit": {"oid": "5631ebc8e18487aac80dbff141aeaf8475e4850a"}, "closed": true, "closedAt": "2020-04-03T12:01:09Z", "author": {"login": "mrwilson"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcPFRhygFqTM3NzQzNzIwNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcT_6YlAFqTM4NzIwMzEwOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3NDM3MjA2", "url": "https://github.com/junit-team/junit5/pull/2217#pullrequestreview-377437206", "createdAt": "2020-03-19T05:43:37Z", "commit": {"oid": "796fe27ae107abc672a8e38f6755676c1624c50d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4OTI0ODk2", "url": "https://github.com/junit-team/junit5/pull/2217#pullrequestreview-378924896", "createdAt": "2020-03-21T15:04:03Z", "commit": {"oid": "4c4c4a8bea6e1d8bf0f6123217a8272581d2d21d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNTowNDowNFrOF5p6cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxNTowNDo0NVrOF5p6pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5OTg1Nw==", "bodyText": "Do we need this here since we're not publishing any jars produced by buildSrc?", "url": "https://github.com/junit-team/junit5/pull/2217#discussion_r395999857", "createdAt": "2020-03-21T15:04:04Z", "author": {"login": "marcphilipp"}, "path": "buildSrc/build.gradle.kts", "diffHunk": "@@ -13,3 +13,10 @@ dependencies {\n \timplementation(\"biz.aQute.bnd:biz.aQute.bnd.gradle:5.0.0\")\n \timplementation(\"com.github.jengelman.gradle.plugins:shadow:5.2.0\")\n }\n+\n+allprojects {\n+\ttasks.withType<AbstractArchiveTask>().configureEach {\n+\t\tisPreserveFileTimestamps = false\n+\t\tisReproducibleFileOrder = true\n+\t}\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c4c4a8bea6e1d8bf0f6123217a8272581d2d21d"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk5OTkwOQ==", "bodyText": "I'd like to move this logic to buildSrc. Are you feeling up for it or shall I polish it myself?", "url": "https://github.com/junit-team/junit5/pull/2217#discussion_r395999909", "createdAt": "2020-03-21T15:04:45Z", "author": {"login": "marcphilipp"}, "path": "build.gradle.kts", "diffHunk": "@@ -145,6 +176,42 @@ subprojects {\n \t\t\t\t}\n \t\t\t\tjarTask.finalizedBy(extractJar)\n \t\t\t}\n+\n+\t\t\tif (project in listOf(project(\":junit-platform-commons\"), project(\":junit-platform-console\"))) {\n+\n+\t\t\t\tval jarTask = (tasks.findByName(\"shadowJar\") ?: tasks[\"jar\"]) as Jar\n+\n+\t\t\t\tjarTask.doLast {\n+\n+\t\t\t\t\tval newFile = createTempFile(\"rewrite-timestamp\")\n+\t\t\t\t\tval originalOutput = jarTask.archiveFile.get().getAsFile()\n+\n+\t\t\t\t\tnewFile.outputStream().use { os ->\n+\n+\t\t\t\t\t\tval newJarStream = JarOutputStream(os)\n+\t\t\t\t\t\tval oldJar = JarFile(originalOutput)\n+\n+\t\t\t\t\t\toldJar.entries()\n+\t\t\t\t\t\t\t\t.toList()\n+\t\t\t\t\t\t\t\t.distinctBy { it.name }\n+\t\t\t\t\t\t\t\t.sortedBy { it.name }\n+\t\t\t\t\t\t\t\t.forEach { entry ->\n+\t\t\t\t\t\t\t\t\tval copy = JarEntry(entry.name)\n+\n+\t\t\t\t\t\t\t\t\t// Use the same constant as the fixed timestamps in normal copy actions\n+\t\t\t\t\t\t\t\t\tcopy.time = ZipCopyAction.CONSTANT_TIME_FOR_ZIP_ENTRIES\n+\n+\t\t\t\t\t\t\t\t\tnewJarStream.putNextEntry(copy)\n+\n+\t\t\t\t\t\t\t\t\toldJar.getInputStream(entry).copyTo(newJarStream)\n+\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\tnewJarStream.finish()\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tnewFile.renameTo(originalOutput)\n+\t\t\t\t}\n+\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c4c4a8bea6e1d8bf0f6123217a8272581d2d21d"}, "originalPosition": 92}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09054769cd3f7d96f1e5b83d65d41b2d105f9853", "author": {"user": {"login": "mrwilson", "name": "Alex Wilson"}}, "url": "https://github.com/junit-team/junit5/commit/09054769cd3f7d96f1e5b83d65d41b2d105f9853", "committedDate": "2020-03-31T18:28:19Z", "message": "Enable junit5 to build reproducibly.\n\nThis change uses Gradle's reproducible archives feature (https://docs.gradle.org/current/userguide/working_with_files.html#sec:reproducible_archives) to consistently build the output JARs.\n\nAdditionally, the build now supports SOURCE_DATE_EPOCH to allow overriding of `buildTimeAndDate` as this introduces non-determinism into the build."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e75d37567521cb43665a058a73a17501e2e2d97e", "author": {"user": {"login": "mrwilson", "name": "Alex Wilson"}}, "url": "https://github.com/junit-team/junit5/commit/e75d37567521cb43665a058a73a17501e2e2d97e", "committedDate": "2020-03-31T18:28:47Z", "message": "Rewrite timestamps in special-case JARs to make them reproducible.\n\nThis uses the same fixed-time constant as is being used when `isPreserveFileTimestamps` is set to false."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MDU5OTA3", "url": "https://github.com/junit-team/junit5/pull/2217#pullrequestreview-386059907", "createdAt": "2020-04-02T01:49:22Z", "commit": {"oid": "21fc577a1baaf9037f357006c9e145460b19e509"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2MjM5MDMz", "url": "https://github.com/junit-team/junit5/pull/2217#pullrequestreview-386239033", "createdAt": "2020-04-02T09:08:19Z", "commit": {"oid": "21fc577a1baaf9037f357006c9e145460b19e509"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTowODoxOVrOF_iHBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwOTowODo1M1rOF_iIaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2MzQ2MQ==", "bodyText": "Please hard-wrap these lines at 90 chars (cf. https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#documentation).", "url": "https://github.com/junit-team/junit5/pull/2217#discussion_r402163461", "createdAt": "2020-04-02T09:08:19Z", "author": {"login": "marcphilipp"}, "path": "documentation/src/docs/asciidoc/user-guide/appendix.adoc", "diffHunk": "@@ -1,6 +1,13 @@\n [[appendix]]\n == Appendix\n \n+[[reproducible-builds]]\n+=== Reproducible Builds\n+\n+JUnit 5 aims for its non-javadoc JARs to be https://reproducible-builds.org/[reproducible] - under identical build conditions, such as Java version, repeated builds should provide the same output byte-for-byte.\n+\n+This means that anyone can reproduce the build conditions of the artifacts on Maven Central/Sonatype and produce the same output artifact locally, confirming that the artifacts in the repositories were actually generated from this source code.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21fc577a1baaf9037f357006c9e145460b19e509"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE2MzgxNw==", "bodyText": "I think we should add \"Starting with version 5.7, ...\".", "url": "https://github.com/junit-team/junit5/pull/2217#discussion_r402163817", "createdAt": "2020-04-02T09:08:53Z", "author": {"login": "marcphilipp"}, "path": "documentation/src/docs/asciidoc/user-guide/appendix.adoc", "diffHunk": "@@ -1,6 +1,13 @@\n [[appendix]]\n == Appendix\n \n+[[reproducible-builds]]\n+=== Reproducible Builds\n+\n+JUnit 5 aims for its non-javadoc JARs to be https://reproducible-builds.org/[reproducible] - under identical build conditions, such as Java version, repeated builds should provide the same output byte-for-byte.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21fc577a1baaf9037f357006c9e145460b19e509"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2Mzc5NjY4", "url": "https://github.com/junit-team/junit5/pull/2217#pullrequestreview-386379668", "createdAt": "2020-04-02T12:33:22Z", "commit": {"oid": "21fc577a1baaf9037f357006c9e145460b19e509"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjozMzoyMlrOF_pCKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjozNDoyNlrOF_pEyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3NjkwNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                ./gradlew clean assemble\n          \n          \n            \n                ./gradlew --no-build-cache clean assemble", "url": "https://github.com/junit-team/junit5/pull/2217#discussion_r402276906", "createdAt": "2020-04-02T12:33:22Z", "author": {"login": "marcphilipp"}, "path": "src/checkBuildReproducibility.sh", "diffHunk": "@@ -0,0 +1,23 @@\n+#!/bin/bash -e\n+\n+rm -rf checksums*\n+\n+export SOURCE_DATE_EPOCH=$(date +%s)\n+\n+function calculate_checksums() {\n+    OUTPUT=$1\n+\n+    ./gradlew clean assemble", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21fc577a1baaf9037f357006c9e145460b19e509"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3NzU3Nw==", "bodyText": "Let's move this to a dedicated workflow so it can run in parallel with the main workflow.", "url": "https://github.com/junit-team/junit5/pull/2217#discussion_r402277577", "createdAt": "2020-04-02T12:34:26Z", "author": {"login": "marcphilipp"}, "path": ".github/workflows/main.yml", "diffHunk": "@@ -94,6 +94,20 @@ jobs:\n       run: |\n         bash <(curl -s https://codecov.io/bash)\n \n+  check_build_reproducibility:\n+    name: 'Check build reproducibility'\n+    runs-on: ubuntu-latest\n+    steps:\n+    - uses: actions/checkout@v2\n+    - name: 'Set up JDK 11'\n+      uses: actions/setup-java@v1\n+      with:\n+        java-version: 11\n+    - name: Build and compare checksums\n+      shell: bash\n+      run: |\n+        ./src/checkBuildReproducibility.sh\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21fc577a1baaf9037f357006c9e145460b19e509"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6ac3a2dbf03cc45161bcac56fe5ed92a37c1367", "author": {"user": {"login": "mrwilson", "name": "Alex Wilson"}}, "url": "https://github.com/junit-team/junit5/commit/b6ac3a2dbf03cc45161bcac56fe5ed92a37c1367", "committedDate": "2020-04-02T17:24:08Z", "message": "Add small section on reproducibility in the Appendix."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4ad488ed233d1e80ae5abbf7dc1bf7829172a2f", "author": {"user": {"login": "mrwilson", "name": "Alex Wilson"}}, "url": "https://github.com/junit-team/junit5/commit/b4ad488ed233d1e80ae5abbf7dc1bf7829172a2f", "committedDate": "2020-04-02T17:24:15Z", "message": "Add Action to check whether build is still reproducible in CI"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MTkwNDkx", "url": "https://github.com/junit-team/junit5/pull/2217#pullrequestreview-387190491", "createdAt": "2020-04-03T11:58:29Z", "commit": {"oid": "b4ad488ed233d1e80ae5abbf7dc1bf7829172a2f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MjAzMTA5", "url": "https://github.com/junit-team/junit5/pull/2217#pullrequestreview-387203109", "createdAt": "2020-04-03T12:18:25Z", "commit": {"oid": "b4ad488ed233d1e80ae5abbf7dc1bf7829172a2f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMjoxODoyNlrOGAS99w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMjoxODoyNlrOGAS99w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk2Mzk1OQ==", "bodyText": "@mrwilson , this seems to specify the same constant value for all the jars. Is isPreserveFileTimestamps = false enough then? What is the purpose of rewriting the jar?", "url": "https://github.com/junit-team/junit5/pull/2217#discussion_r402963959", "createdAt": "2020-04-03T12:18:26Z", "author": {"login": "vlsi"}, "path": "buildSrc/src/main/kotlin/java-repackage-jars.gradle.kts", "diffHunk": "@@ -0,0 +1,42 @@\n+import java.util.Calendar\n+import java.util.GregorianCalendar\n+import java.util.jar.JarEntry\n+import java.util.jar.JarFile\n+import java.util.jar.JarOutputStream\n+import org.gradle.api.internal.file.archive.ZipCopyAction\n+\n+// This registers a `doLast` action to rewrite the timestamps of the project's output JAR\n+afterEvaluate {\n+\tval jarTask = (tasks.findByName(\"shadowJar\") ?: tasks[\"jar\"]) as Jar\n+\n+\tjarTask.doLast {\n+\n+\t\tval newFile = createTempFile(\"rewrite-timestamp\")\n+\t\tval originalOutput = jarTask.archiveFile.get().getAsFile()\n+\n+\t\tnewFile.outputStream().use { os ->\n+\n+\t\t\tval newJarStream = JarOutputStream(os)\n+\t\t\tval oldJar = JarFile(originalOutput)\n+\n+\t\t\toldJar.entries()\n+\t\t\t\t\t.toList()\n+\t\t\t\t\t.distinctBy { it.name }\n+\t\t\t\t\t.sortedBy { it.name }\n+\t\t\t\t\t.forEach { entry ->\n+\t\t\t\t\t\tval jarEntry = JarEntry(entry.name)\n+\n+\t\t\t\t\t\t// Use the same constant as the fixed timestamps in normal copy actions\n+\t\t\t\t\t\tjarEntry.time = ZipCopyAction.CONSTANT_TIME_FOR_ZIP_ENTRIES", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4ad488ed233d1e80ae5abbf7dc1bf7829172a2f"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3499, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}