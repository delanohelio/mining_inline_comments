{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxOTUzMDc5", "number": 2253, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTozNToxMVrODwx9Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxODoxODoxMlrOD9GxxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDc2Njc4OnYy", "diffSide": "RIGHT", "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/FilePosition.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTozNToxMVrOGD91DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTozNToxMVrOGD91DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxMTkxNw==", "bodyText": "Wasn't particularly pleased about having to make these constructors protected for use from org.junit.platform.engine.support.descriptor.FilePosition constructors, but saw no way around it. Is there any way to discourage usage through @API annotations?", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r406811917", "createdAt": "2020-04-10T15:35:11Z", "author": {"login": "timtebeek"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/FilePosition.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.engine.discovery;\n+\n+import static org.apiguardian.api.API.Status.STABLE;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.commons.logging.Logger;\n+import org.junit.platform.commons.logging.LoggerFactory;\n+import org.junit.platform.commons.util.Preconditions;\n+import org.junit.platform.commons.util.StringUtils;\n+import org.junit.platform.commons.util.ToStringBuilder;\n+\n+/**\n+ * Position inside a file represented by {@linkplain #getLine line} and\n+ * {@linkplain #getColumn column} numbers.\n+ *\n+ * @since 1.0\n+ */\n+@API(status = STABLE, since = \"1.0\")\n+public class FilePosition implements Serializable {\n+\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\tprivate static final Logger logger = LoggerFactory.getLogger(FilePosition.class);\n+\n+\t/**\n+\t * Create a new {@code FilePosition} using the supplied {@code line} number\n+\t * and an undefined column number.\n+\t *\n+\t * @param line the line number; must be greater than zero\n+\t * @return a {@link FilePosition} with the given line number\n+\t */\n+\tpublic static FilePosition from(int line) {\n+\t\treturn new FilePosition(line);\n+\t}\n+\n+\t/**\n+\t * Create a new {@code FilePosition} using the supplied {@code line} and\n+\t * {@code column} numbers.\n+\t *\n+\t * @param line the line number; must be greater than zero\n+\t * @param column the column number; must be greater than zero\n+\t * @return a {@link FilePosition} with the given line and column numbers\n+\t */\n+\tpublic static FilePosition from(int line, int column) {\n+\t\treturn new FilePosition(line, column);\n+\t}\n+\n+\t/**\n+\t * Create an optional {@code FilePosition} by parsing the supplied\n+\t * {@code query} string.\n+\t *\n+\t * <p>Examples of valid {@code query} strings:\n+\t * <ul>\n+\t *     <li>{@code \"line=23\"}</li>\n+\t *     <li>{@code \"line=23&column=42\"}</li>\n+\t * </ul>\n+\t *\n+\t * @param query the query string; may be {@code null}\n+\t * @return an {@link Optional} containing a {@link FilePosition} with\n+\t * the parsed line and column numbers; never {@code null} but potentially\n+\t * empty\n+\t * @since 1.3\n+\t * @see #from(int)\n+\t * @see #from(int, int)\n+\t */\n+\tpublic static Optional<FilePosition> fromQuery(String query) {\n+\t\tFilePosition result = null;\n+\t\tInteger line = null;\n+\t\tInteger column = null;\n+\t\tif (StringUtils.isNotBlank(query)) {\n+\t\t\ttry {\n+\t\t\t\tfor (String pair : query.split(\"&\")) {\n+\t\t\t\t\tString[] data = pair.split(\"=\");\n+\t\t\t\t\tif (data.length == 2) {\n+\t\t\t\t\t\tString key = data[0];\n+\t\t\t\t\t\tif (line == null && \"line\".equals(key)) {\n+\t\t\t\t\t\t\tline = Integer.valueOf(data[1]);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\telse if (column == null && \"column\".equals(key)) {\n+\t\t\t\t\t\t\tcolumn = Integer.valueOf(data[1]);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\n+\t\t\t\t\t// Already found what we're looking for?\n+\t\t\t\t\tif (line != null && column != null) {\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch (IllegalArgumentException ex) {\n+\t\t\t\tlogger.debug(ex, () -> \"Failed to parse 'line' and/or 'column' from query string: \" + query);\n+\t\t\t\t// fall-through and continue\n+\t\t\t}\n+\n+\t\t\tif (line != null) {\n+\t\t\t\tresult = column == null ? new FilePosition(line) : new FilePosition(line, column);\n+\t\t\t}\n+\t\t}\n+\t\treturn Optional.ofNullable(result);\n+\t}\n+\n+\tprivate final int line;\n+\tprivate final Integer column;\n+\n+\tprotected FilePosition(int line) {\n+\t\tPreconditions.condition(line > 0, \"line number must be greater than zero\");\n+\t\tthis.line = line;\n+\t\tthis.column = null;\n+\t}\n+\n+\tprotected FilePosition(int line, int column) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71130a6e08e87abac1960e58cb61c7d8794f8f4e"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDc3MjE1OnYy", "diffSide": "LEFT", "path": "platform-tests/src/test/java/org/junit/platform/engine/discovery/FilePositionTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTozNzoxNlrOGD94eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzo1NzozMVrOGEBftA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxMjc5Mw==", "bodyText": "AbstractTestSourceTests is only accessible from org.junit.platform.engine.support.descriptor, so I though it preferable to keep that that way. Should this method override and the functionality it covered be reproduced here? Or should I not yet have moved this tests class at this time?", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r406812793", "createdAt": "2020-04-10T15:37:16Z", "author": {"login": "timtebeek"}, "path": "platform-tests/src/test/java/org/junit/platform/engine/discovery/FilePositionTests.java", "diffHunk": "@@ -31,12 +32,7 @@\n  * @since 1.0\n  */\n @DisplayName(\"FilePosition unit tests\")\n-class FilePositionTests extends AbstractTestSourceTests {\n-\n-\t@Override\n-\tStream<FilePosition> createSerializableInstances() {\n-\t\treturn Stream.of(FilePosition.from(42, 99));\n-\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71130a6e08e87abac1960e58cb61c7d8794f8f4e"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg3MTk4OA==", "bodyText": "Serialization is already tested via FileSystemSourceTests so it's only the toString() method we're no longer testing. I think we can leave it as-is.", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r406871988", "createdAt": "2020-04-10T17:57:31Z", "author": {"login": "marcphilipp"}, "path": "platform-tests/src/test/java/org/junit/platform/engine/discovery/FilePositionTests.java", "diffHunk": "@@ -31,12 +32,7 @@\n  * @since 1.0\n  */\n @DisplayName(\"FilePosition unit tests\")\n-class FilePositionTests extends AbstractTestSourceTests {\n-\n-\t@Override\n-\tStream<FilePosition> createSerializableInstances() {\n-\t\treturn Stream.of(FilePosition.from(42, 99));\n-\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxMjc5Mw=="}, "originalCommit": {"oid": "71130a6e08e87abac1960e58cb61c7d8794f8f4e"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDgwMDMyOnYy", "diffSide": "RIGHT", "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/FilePosition.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTo0NzoyM1rOGD-JwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzo1Mjo0OFrOGEBYcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxNzIxNw==", "bodyText": "Not entirely sure about the since argument here, and/or whether to declare this as STABLE already, given that we likely want to change the constructors from protected to private.", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r406817217", "createdAt": "2020-04-10T15:47:23Z", "author": {"login": "timtebeek"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/FilePosition.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.engine.discovery;\n+\n+import static org.apiguardian.api.API.Status.STABLE;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.commons.logging.Logger;\n+import org.junit.platform.commons.logging.LoggerFactory;\n+import org.junit.platform.commons.util.Preconditions;\n+import org.junit.platform.commons.util.StringUtils;\n+import org.junit.platform.commons.util.ToStringBuilder;\n+\n+/**\n+ * Position inside a file represented by {@linkplain #getLine line} and\n+ * {@linkplain #getColumn column} numbers.\n+ *\n+ * @since 1.0\n+ */\n+@API(status = STABLE, since = \"1.0\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95557dd1f62353e682b139ef982a35bc23661143"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1MDA1Mw==", "bodyText": "You can also apply the annotation to specific methods to mark them as internal. The most specific annotation applies.", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r406850053", "createdAt": "2020-04-10T17:05:05Z", "author": {"login": "mpkorstanje"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/FilePosition.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.engine.discovery;\n+\n+import static org.apiguardian.api.API.Status.STABLE;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.commons.logging.Logger;\n+import org.junit.platform.commons.logging.LoggerFactory;\n+import org.junit.platform.commons.util.Preconditions;\n+import org.junit.platform.commons.util.StringUtils;\n+import org.junit.platform.commons.util.ToStringBuilder;\n+\n+/**\n+ * Position inside a file represented by {@linkplain #getLine line} and\n+ * {@linkplain #getColumn column} numbers.\n+ *\n+ * @since 1.0\n+ */\n+@API(status = STABLE, since = \"1.0\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxNzIxNw=="}, "originalCommit": {"oid": "95557dd1f62353e682b139ef982a35bc23661143"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg3MDEzMA==", "bodyText": "It should be 1.7. Let's also add \"This class is not intended to be subclassed by clients\" to the Javadoc as well.", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r406870130", "createdAt": "2020-04-10T17:52:48Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/FilePosition.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.engine.discovery;\n+\n+import static org.apiguardian.api.API.Status.STABLE;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.commons.logging.Logger;\n+import org.junit.platform.commons.logging.LoggerFactory;\n+import org.junit.platform.commons.util.Preconditions;\n+import org.junit.platform.commons.util.StringUtils;\n+import org.junit.platform.commons.util.ToStringBuilder;\n+\n+/**\n+ * Position inside a file represented by {@linkplain #getLine line} and\n+ * {@linkplain #getColumn column} numbers.\n+ *\n+ * @since 1.0\n+ */\n+@API(status = STABLE, since = \"1.0\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxNzIxNw=="}, "originalCommit": {"oid": "95557dd1f62353e682b139ef982a35bc23661143"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTAxNTM0OnYy", "diffSide": "RIGHT", "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/FilePosition.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzowNjozNVrOGEAMXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzowNjozNVrOGEAMXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1MDY1Mg==", "bodyText": "IDEs won't pick up on the @API annotation. Adding @Deprecated might be useful here.", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r406850652", "createdAt": "2020-04-10T17:06:35Z", "author": {"login": "mpkorstanje"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/FilePosition.java", "diffHunk": "@@ -10,32 +10,35 @@\n \n package org.junit.platform.engine.support.descriptor;\n \n-import static org.apiguardian.api.API.Status.STABLE;\n-\n-import java.io.Serializable;\n-import java.util.Objects;\n import java.util.Optional;\n \n import org.apiguardian.api.API;\n+import org.apiguardian.api.API.Status;\n import org.junit.platform.commons.logging.Logger;\n import org.junit.platform.commons.logging.LoggerFactory;\n-import org.junit.platform.commons.util.Preconditions;\n import org.junit.platform.commons.util.StringUtils;\n-import org.junit.platform.commons.util.ToStringBuilder;\n \n /**\n  * Position inside a file represented by {@linkplain #getLine line} and\n  * {@linkplain #getColumn column} numbers.\n  *\n  * @since 1.0\n  */\n-@API(status = STABLE, since = \"1.0\")\n-public class FilePosition implements Serializable {\n+@API(status = Status.DEPRECATED, since = \"5.7\")\n+public class FilePosition extends org.junit.platform.engine.discovery.FilePosition {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98a361a37490d160c6591934895a9ff015789641"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTAxODk2OnYy", "diffSide": "RIGHT", "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/FilePosition.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzowNzo1N1rOGEAOhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODowMToxMVrOGEBliw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1MTIwNA==", "bodyText": "This may have to be incremented. Where are file positions deserialized to/from?", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r406851204", "createdAt": "2020-04-10T17:07:57Z", "author": {"login": "mpkorstanje"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/FilePosition.java", "diffHunk": "@@ -10,32 +10,35 @@\n \n package org.junit.platform.engine.support.descriptor;\n \n-import static org.apiguardian.api.API.Status.STABLE;\n-\n-import java.io.Serializable;\n-import java.util.Objects;\n import java.util.Optional;\n \n import org.apiguardian.api.API;\n+import org.apiguardian.api.API.Status;\n import org.junit.platform.commons.logging.Logger;\n import org.junit.platform.commons.logging.LoggerFactory;\n-import org.junit.platform.commons.util.Preconditions;\n import org.junit.platform.commons.util.StringUtils;\n-import org.junit.platform.commons.util.ToStringBuilder;\n \n /**\n  * Position inside a file represented by {@linkplain #getLine line} and\n  * {@linkplain #getColumn column} numbers.\n  *\n  * @since 1.0\n  */\n-@API(status = STABLE, since = \"1.0\")\n-public class FilePosition implements Serializable {\n+@API(status = Status.DEPRECATED, since = \"5.7\")\n+public class FilePosition extends org.junit.platform.engine.discovery.FilePosition {\n \n \tprivate static final long serialVersionUID = 1L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98a361a37490d160c6591934895a9ff015789641"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg3MzQ4Mw==", "bodyText": "We don't use the serialization ourselves. It's meant for third-party tools that send test events over JVM boundaries. Since we didn't change any fields, I think we should be fine.", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r406873483", "createdAt": "2020-04-10T18:01:11Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/FilePosition.java", "diffHunk": "@@ -10,32 +10,35 @@\n \n package org.junit.platform.engine.support.descriptor;\n \n-import static org.apiguardian.api.API.Status.STABLE;\n-\n-import java.io.Serializable;\n-import java.util.Objects;\n import java.util.Optional;\n \n import org.apiguardian.api.API;\n+import org.apiguardian.api.API.Status;\n import org.junit.platform.commons.logging.Logger;\n import org.junit.platform.commons.logging.LoggerFactory;\n-import org.junit.platform.commons.util.Preconditions;\n import org.junit.platform.commons.util.StringUtils;\n-import org.junit.platform.commons.util.ToStringBuilder;\n \n /**\n  * Position inside a file represented by {@linkplain #getLine line} and\n  * {@linkplain #getColumn column} numbers.\n  *\n  * @since 1.0\n  */\n-@API(status = STABLE, since = \"1.0\")\n-public class FilePosition implements Serializable {\n+@API(status = Status.DEPRECATED, since = \"5.7\")\n+public class FilePosition extends org.junit.platform.engine.discovery.FilePosition {\n \n \tprivate static final long serialVersionUID = 1L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1MTIwNA=="}, "originalCommit": {"oid": "98a361a37490d160c6591934895a9ff015789641"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTAyNjIzOnYy", "diffSide": "RIGHT", "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/FilePosition.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzoxMDo0MlrOGEAS8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTo1NjoxMFrOGEEQpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1MjMzNw==", "bodyText": "Returning the super class here will break existing callers.", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r406852337", "createdAt": "2020-04-10T17:10:42Z", "author": {"login": "mpkorstanje"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/FilePosition.java", "diffHunk": "@@ -77,7 +80,7 @@ public static FilePosition from(int line, int column) {\n \t * @see #from(int)\n \t * @see #from(int, int)\n \t */\n-\tpublic static Optional<FilePosition> fromQuery(String query) {\n+\tpublic static Optional<org.junit.platform.engine.discovery.FilePosition> fromQuery(String query) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98a361a37490d160c6591934895a9ff015789641"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5NDQ4NQ==", "bodyText": "This is slightly embarrassing, but when I change it to FilePosition it refuses to compile:\n> Task :junit-platform-engine:compileJava FAILED\n/junit5/junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/FilePosition.java:85: error: fromQuery(String) in org.junit.platform.engine.support.descriptor.FilePosition cannot hide fromQuery(String) in org.junit.platform.engine.discovery.FilePosition\n        public static Optional<FilePosition> fromQuery(String query) {\n                                             ^\n  return type Optional<org.junit.platform.engine.support.descriptor.FilePosition> is not compatible with Optional<org.junit.platform.engine.discovery.FilePosition>\n1 error\n\nI fail to understand why this is only an issue for this static method and not the other two static from methods that take one or more int arguments. Any suggestions on what to do here?", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r406894485", "createdAt": "2020-04-10T18:53:04Z", "author": {"login": "timtebeek"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/FilePosition.java", "diffHunk": "@@ -77,7 +80,7 @@ public static FilePosition from(int line, int column) {\n \t * @see #from(int)\n \t * @see #from(int, int)\n \t */\n-\tpublic static Optional<FilePosition> fromQuery(String query) {\n+\tpublic static Optional<org.junit.platform.engine.discovery.FilePosition> fromQuery(String query) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1MjMzNw=="}, "originalCommit": {"oid": "98a361a37490d160c6591934895a9ff015789641"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNTc0NA==", "bodyText": "I've briefly explored using Optional<? extends FilePosition> in the superclass FilePosition, but that leaks out into usage of that method regrettably. :\\", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r406905744", "createdAt": "2020-04-10T19:23:16Z", "author": {"login": "timtebeek"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/FilePosition.java", "diffHunk": "@@ -77,7 +80,7 @@ public static FilePosition from(int line, int column) {\n \t * @see #from(int)\n \t * @see #from(int, int)\n \t */\n-\tpublic static Optional<FilePosition> fromQuery(String query) {\n+\tpublic static Optional<org.junit.platform.engine.discovery.FilePosition> fromQuery(String query) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1MjMzNw=="}, "originalCommit": {"oid": "98a361a37490d160c6591934895a9ff015789641"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMDQ0OQ==", "bodyText": "A method can hide a method in the parent class if it follows he Liskov Substitution Principle. So a subclass must return a more specific type then the parent class. For generics this inversed.\nSuppose it would be possible to do extend a class and return a more specialized generic:\nclass Parent {\n    public List<Number> funX() {\n        return new ArrayList<>();\n    }\n}\n\nclass Child extends Parent {\n    public List<Double> funX() {\n        return new SpecializedDoubleList<>();\n    }\n}\nThen by invoking funX on the parent type we could get a list that is only intended to contain Double values and add an Integer to it.\nParent p = new Child();\nList<Number> numbers = p.funX();\nnumbers.add(Integer.valueOf(1)); // error\nSo the problem is that generic type is too specific. It specifies both the elements that can be added to the list (as a consumer) as well as those that can be taken from it (as a producer). By changing the parent to extends Number we can specify that the list contains an unknown type of element, but if you were to taken elements from it, it would at-least extend Number.\nclass Parent {\n    public List<? extends Number> funX() {\n        return new ArrayList<>();\n    }\n}", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r406910449", "createdAt": "2020-04-10T19:36:35Z", "author": {"login": "mpkorstanje"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/FilePosition.java", "diffHunk": "@@ -77,7 +80,7 @@ public static FilePosition from(int line, int column) {\n \t * @see #from(int)\n \t * @see #from(int, int)\n \t */\n-\tpublic static Optional<FilePosition> fromQuery(String query) {\n+\tpublic static Optional<org.junit.platform.engine.discovery.FilePosition> fromQuery(String query) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1MjMzNw=="}, "originalCommit": {"oid": "98a361a37490d160c6591934895a9ff015789641"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMjczNA==", "bodyText": "I've briefly explored using Optional<? extends FilePosition> in the superclass FilePosition, but that leaks out into usage of that method regrettably. :\\\n\nIt isn't pretty but I think that is okay.\nIt is possible to assign List<Number> to List<? extends Number> so once the old FilePosition and the extends Number are removed it shouldn't break anything.", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r406912734", "createdAt": "2020-04-10T19:43:21Z", "author": {"login": "mpkorstanje"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/FilePosition.java", "diffHunk": "@@ -77,7 +80,7 @@ public static FilePosition from(int line, int column) {\n \t * @see #from(int)\n \t * @see #from(int, int)\n \t */\n-\tpublic static Optional<FilePosition> fromQuery(String query) {\n+\tpublic static Optional<org.junit.platform.engine.discovery.FilePosition> fromQuery(String query) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1MjMzNw=="}, "originalCommit": {"oid": "98a361a37490d160c6591934895a9ff015789641"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxNzI4NA==", "bodyText": "Applied in decb669 as mentioned above; probably best for @marcphilipp to have another close look :)", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r406917284", "createdAt": "2020-04-10T19:56:10Z", "author": {"login": "timtebeek"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/FilePosition.java", "diffHunk": "@@ -77,7 +80,7 @@ public static FilePosition from(int line, int column) {\n \t * @see #from(int)\n \t * @see #from(int, int)\n \t */\n-\tpublic static Optional<FilePosition> fromQuery(String query) {\n+\tpublic static Optional<org.junit.platform.engine.discovery.FilePosition> fromQuery(String query) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1MjMzNw=="}, "originalCommit": {"oid": "98a361a37490d160c6591934895a9ff015789641"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTA1NzgzOnYy", "diffSide": "RIGHT", "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/ClasspathResourceSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzoyMjozNlrOGEAmMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzoyMjozNlrOGEAmMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1NzI2Nw==", "bodyText": "JUnit 5 seems to follow the pattern that nullable return values are always wrapped in an Optional. For example:\n\n  \n    \n      junit5/junit-platform-console/src/main/java/org/junit/platform/console/tasks/TreeNode.java\n    \n    \n        Lines 74 to 76\n      in\n      3f7fed6\n    \n    \n    \n    \n\n        \n          \n           Optional<String> reason() { \n        \n\n        \n          \n           \treturn Optional.ofNullable(reason); \n        \n\n        \n          \n           } \n        \n    \n  \n\n\n\n  \n    \n      junit5/junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/FilePosition.java\n    \n    \n        Lines 147 to 149\n      in\n      3f7fed6\n    \n    \n    \n    \n\n        \n          \n           public Optional<Integer> getColumn() { \n        \n\n        \n          \n           \treturn Optional.ofNullable(this.column); \n        \n\n        \n          \n           }", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r406857267", "createdAt": "2020-04-10T17:22:36Z", "author": {"login": "mpkorstanje"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/ClasspathResourceSelector.java", "diffHunk": "@@ -59,6 +65,14 @@ public String getClasspathResourceName() {\n \t\treturn this.classpathResourceName;\n \t}\n \n+\t/**\n+\t * Get the selected position within the classpath resource as a\n+\t * {@link FilePosition}.\n+\t */\n+\tpublic FilePosition getPosition() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98a361a37490d160c6591934895a9ff015789641"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTEzMTE3OnYy", "diffSide": "RIGHT", "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/DiscoverySelectors.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzo0ODo1MlrOGEBR2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOToxMjo0OVrOGEDUXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg2ODQ0Mg==", "bodyText": "\u2753 FilePosition supports a line-only position. I think we should support this here as well. Instead of adding another overload, I think we should take FilePosition as a parameter instead of one or two ints.", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r406868442", "createdAt": "2020-04-10T17:48:52Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/DiscoverySelectors.java", "diffHunk": "@@ -135,6 +135,52 @@ public static FileSelector selectFile(File file) {\n \t\t}\n \t}\n \n+\t/**\n+\t * Create a {@code FileSelector} for the supplied file path.\n+\t *\n+\t * <p>This method selects the file using the supplied path <em>as is</em>,\n+\t * without verifying if the file exists.\n+\t *\n+\t * @param path the path to the file to select; never {@code null} or blank\n+\t * @param line the line number; must be greater than zero\n+\t * @param column the column number; must be greater than zero\n+\t * @see FileSelector\n+\t * @see #selectFile(File, int, int)\n+\t * @see #selectDirectory(String)\n+\t * @see #selectDirectory(File)\n+\t */\n+\tpublic static FileSelector selectFile(String path, int line, int column) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98a361a37490d160c6591934895a9ff015789641"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwMTg1NA==", "bodyText": "Had originally not wanted to go with selectFile(path, FilePosition.from(12, 34)) as to me it seemed slightly odd to ask the caller to invoke two methods to construct a selector. But I can perfectly live with the change as suggested, and have applied it already.", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r406901854", "createdAt": "2020-04-10T19:12:49Z", "author": {"login": "timtebeek"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/DiscoverySelectors.java", "diffHunk": "@@ -135,6 +135,52 @@ public static FileSelector selectFile(File file) {\n \t\t}\n \t}\n \n+\t/**\n+\t * Create a {@code FileSelector} for the supplied file path.\n+\t *\n+\t * <p>This method selects the file using the supplied path <em>as is</em>,\n+\t * without verifying if the file exists.\n+\t *\n+\t * @param path the path to the file to select; never {@code null} or blank\n+\t * @param line the line number; must be greater than zero\n+\t * @param column the column number; must be greater than zero\n+\t * @see FileSelector\n+\t * @see #selectFile(File, int, int)\n+\t * @see #selectDirectory(String)\n+\t * @see #selectDirectory(File)\n+\t */\n+\tpublic static FileSelector selectFile(String path, int line, int column) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg2ODQ0Mg=="}, "originalCommit": {"oid": "98a361a37490d160c6591934895a9ff015789641"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTEzNTM5OnYy", "diffSide": "RIGHT", "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/FilePosition.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzo1MDoyNVrOGEBUZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzo1MDoyNVrOGEBUZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg2OTA5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @API(status = Status.DEPRECATED, since = \"5.7\")\n          \n          \n            \n            @API(status = Status.DEPRECATED, since = \"1.7\")", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r406869094", "createdAt": "2020-04-10T17:50:25Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/FilePosition.java", "diffHunk": "@@ -10,32 +10,35 @@\n \n package org.junit.platform.engine.support.descriptor;\n \n-import static org.apiguardian.api.API.Status.STABLE;\n-\n-import java.io.Serializable;\n-import java.util.Objects;\n import java.util.Optional;\n \n import org.apiguardian.api.API;\n+import org.apiguardian.api.API.Status;\n import org.junit.platform.commons.logging.Logger;\n import org.junit.platform.commons.logging.LoggerFactory;\n-import org.junit.platform.commons.util.Preconditions;\n import org.junit.platform.commons.util.StringUtils;\n-import org.junit.platform.commons.util.ToStringBuilder;\n \n /**\n  * Position inside a file represented by {@linkplain #getLine line} and\n  * {@linkplain #getColumn column} numbers.\n  *\n  * @since 1.0\n  */\n-@API(status = STABLE, since = \"1.0\")\n-public class FilePosition implements Serializable {\n+@API(status = Status.DEPRECATED, since = \"5.7\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98a361a37490d160c6591934895a9ff015789641"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjM2MTA4OnYy", "diffSide": "RIGHT", "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/ClasspathResourceSource.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxMDowMDozMlrOGEMARA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNTowNTo1NVrOGEN11w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NDE2NA==", "bodyText": "This is a breaking change (same above). I'm afraid we'll have to leave the existing getPosition() method in place, deprecate it, and add a new getFilePosition method that returns an optional of the new type.", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r407044164", "createdAt": "2020-04-11T10:00:32Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/ClasspathResourceSource.java", "diffHunk": "@@ -21,6 +21,7 @@\n import org.junit.platform.commons.util.Preconditions;\n import org.junit.platform.commons.util.ToStringBuilder;\n import org.junit.platform.engine.TestSource;\n+import org.junit.platform.engine.discovery.FilePosition;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "decb66931b828437d53497fcf091ba3209f36774"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0OTM5Mw==", "bodyText": "Good that you caught that one! I've hopefully make the correct changes in a768cf4 ; Could you have a look if this was what you had intended?", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r407049393", "createdAt": "2020-04-11T10:54:46Z", "author": {"login": "timtebeek"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/ClasspathResourceSource.java", "diffHunk": "@@ -21,6 +21,7 @@\n import org.junit.platform.commons.util.Preconditions;\n import org.junit.platform.commons.util.ToStringBuilder;\n import org.junit.platform.engine.TestSource;\n+import org.junit.platform.engine.discovery.FilePosition;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NDE2NA=="}, "originalCommit": {"oid": "decb66931b828437d53497fcf091ba3209f36774"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0OTY0NQ==", "bodyText": "Also deprecated the old methods in: dd3d8f7", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r407049645", "createdAt": "2020-04-11T10:58:05Z", "author": {"login": "timtebeek"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/ClasspathResourceSource.java", "diffHunk": "@@ -21,6 +21,7 @@\n import org.junit.platform.commons.util.Preconditions;\n import org.junit.platform.commons.util.ToStringBuilder;\n import org.junit.platform.engine.TestSource;\n+import org.junit.platform.engine.discovery.FilePosition;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NDE2NA=="}, "originalCommit": {"oid": "decb66931b828437d53497fcf091ba3209f36774"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA1MDA5OQ==", "bodyText": "Thanks for the quick turnaround! I'm afraid there's more, though. The old factory methods in the Source classes need to be preserved and deprecated, too.", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r407050099", "createdAt": "2020-04-11T11:03:03Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/ClasspathResourceSource.java", "diffHunk": "@@ -21,6 +21,7 @@\n import org.junit.platform.commons.util.Preconditions;\n import org.junit.platform.commons.util.ToStringBuilder;\n import org.junit.platform.engine.TestSource;\n+import org.junit.platform.engine.discovery.FilePosition;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NDE2NA=="}, "originalCommit": {"oid": "decb66931b828437d53497fcf091ba3209f36774"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA1MzQwMA==", "bodyText": "Sure thing: f80fcb9", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r407053400", "createdAt": "2020-04-11T11:38:53Z", "author": {"login": "timtebeek"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/ClasspathResourceSource.java", "diffHunk": "@@ -21,6 +21,7 @@\n import org.junit.platform.commons.util.Preconditions;\n import org.junit.platform.commons.util.ToStringBuilder;\n import org.junit.platform.engine.TestSource;\n+import org.junit.platform.engine.discovery.FilePosition;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NDE2NA=="}, "originalCommit": {"oid": "decb66931b828437d53497fcf091ba3209f36774"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA1NTAwNg==", "bodyText": "Hmm; maybe I was too quick with my change; should this apply to ClassSource as well?", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r407055006", "createdAt": "2020-04-11T11:55:16Z", "author": {"login": "timtebeek"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/ClasspathResourceSource.java", "diffHunk": "@@ -21,6 +21,7 @@\n import org.junit.platform.commons.util.Preconditions;\n import org.junit.platform.commons.util.ToStringBuilder;\n import org.junit.platform.engine.TestSource;\n+import org.junit.platform.engine.discovery.FilePosition;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NDE2NA=="}, "originalCommit": {"oid": "decb66931b828437d53497fcf091ba3209f36774"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA3NDI2Mw==", "bodyText": "Figured ClassSource probably needed a restore as well, so covered in 147ea9d", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r407074263", "createdAt": "2020-04-11T15:05:55Z", "author": {"login": "timtebeek"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/descriptor/ClasspathResourceSource.java", "diffHunk": "@@ -21,6 +21,7 @@\n import org.junit.platform.commons.util.Preconditions;\n import org.junit.platform.commons.util.ToStringBuilder;\n import org.junit.platform.engine.TestSource;\n+import org.junit.platform.engine.discovery.FilePosition;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NDE2NA=="}, "originalCommit": {"oid": "decb66931b828437d53497fcf091ba3209f36774"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzMyNzAzOnYy", "diffSide": "RIGHT", "path": "platform-tests/src/test/java/org/junit/platform/engine/discovery/FilePositionTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzozMjo0M1rOGWWW6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzozMjo0M1rOGWWW6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4ODE2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @since 1.0\n          \n          \n            \n             * @since 1.7", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r426088169", "createdAt": "2020-05-15T23:32:43Z", "author": {"login": "juliette-derancourt"}, "path": "platform-tests/src/test/java/org/junit/platform/engine/discovery/FilePositionTests.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.engine.discovery;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.params.provider.Arguments.arguments;\n+\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.platform.AbstractEqualsAndHashCodeTests;\n+import org.junit.platform.commons.PreconditionViolationException;\n+\n+/**\n+ * Unit tests for {@link FilePosition}.\n+ *\n+ * @since 1.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "296cddb2119a9a36a490170e9fa732d051edfad4"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzMyNzQ4OnYy", "diffSide": "RIGHT", "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/DiscoverySelectors.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzozMzowMVrOGWWXKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzozMzowMVrOGWWXKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4ODIzNA==", "bodyText": "Maybe FileSelector selectFile(File) should delegate to this method now? Since the implementation is the same...\nSame thought for FileSelector selectFile(String) and ClasspathResourceSelector selectClasspathResource(String)", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r426088234", "createdAt": "2020-05-15T23:33:01Z", "author": {"login": "juliette-derancourt"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/DiscoverySelectors.java", "diffHunk": "@@ -135,6 +135,50 @@ public static FileSelector selectFile(File file) {\n \t\t}\n \t}\n \n+\t/**\n+\t * Create a {@code FileSelector} for the supplied file path.\n+\t *\n+\t * <p>This method selects the file using the supplied path <em>as is</em>,\n+\t * without verifying if the file exists.\n+\t *\n+\t * @param path the path to the file to select; never {@code null} or blank\n+\t * @param position the position inside the file; may be {@code null}\n+\t * @see FileSelector\n+\t * @see #selectFile(File, int, int)\n+\t * @see #selectDirectory(String)\n+\t * @see #selectDirectory(File)\n+\t */\n+\tpublic static FileSelector selectFile(String path, FilePosition position) {\n+\t\tPreconditions.notBlank(path, \"File path must not be null or blank\");\n+\t\treturn new FileSelector(path, position);\n+\t}\n+\n+\t/**\n+\t * Create a {@code FileSelector} for the supplied {@linkplain File file}.\n+\t *\n+\t * <p>This method selects the file in its {@linkplain File#getCanonicalPath()\n+\t * canonical} form and throws a {@link PreconditionViolationException} if the\n+\t * file does not exist.\n+\t *\n+\t * @param file the file to select; never {@code null}\n+\t * @param position the position inside the file; may be {@code null}\n+\t * @see FileSelector\n+\t * @see #selectFile(String, FilePosition)\n+\t * @see #selectDirectory(String)\n+\t * @see #selectDirectory(File)\n+\t */\n+\tpublic static FileSelector selectFile(File file, FilePosition position) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "296cddb2119a9a36a490170e9fa732d051edfad4"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzMzNTQxOnYy", "diffSide": "RIGHT", "path": "documentation/src/docs/asciidoc/release-notes/release-notes-5.7.0-M2.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzozODo1OFrOGWWbtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzozODo1OFrOGWWbtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4OTM5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Support FilePosition in File and ClasspathResource discovery selectors.\n          \n          \n            \n            * Support `FilePosition` in `FileSelector` and `ClasspathResourceSelector`.", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r426089396", "createdAt": "2020-05-15T23:38:58Z", "author": {"login": "juliette-derancourt"}, "path": "documentation/src/docs/asciidoc/release-notes/release-notes-5.7.0-M2.adoc", "diffHunk": "@@ -34,7 +34,7 @@ on GitHub.\n * When using `ConsoleLauncher`, explicitly selected classes from `--select-class`\n   and `--select-method` are now always executed regardless of class name patterns\n   provided with `--include-classname` or the default class name pattern.\n-\n+* Support FilePosition in File and ClasspathResource discovery selectors.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "296cddb2119a9a36a490170e9fa732d051edfad4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzM0OTk3OnYy", "diffSide": "RIGHT", "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/DiscoverySelectors.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzo1MToxOFrOGWWkiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwOToxNDo0NlrOGWZRjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5MTY1Nw==", "bodyText": "I think we could add some references to the others selectFile methods here (and on said methods)", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r426091657", "createdAt": "2020-05-15T23:51:18Z", "author": {"login": "juliette-derancourt"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/DiscoverySelectors.java", "diffHunk": "@@ -135,6 +135,50 @@ public static FileSelector selectFile(File file) {\n \t\t}\n \t}\n \n+\t/**\n+\t * Create a {@code FileSelector} for the supplied file path.\n+\t *\n+\t * <p>This method selects the file using the supplied path <em>as is</em>,\n+\t * without verifying if the file exists.\n+\t *\n+\t * @param path the path to the file to select; never {@code null} or blank\n+\t * @param position the position inside the file; may be {@code null}\n+\t * @see FileSelector\n+\t * @see #selectFile(File, int, int)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "296cddb2119a9a36a490170e9fa732d051edfad4"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEzNTk1MA==", "bodyText": "I've specifically added references to the methods that take one fewer/extra argument, or the same amount of arguments with a single argument of a different type. Hope that's what you intended as well! :)", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r426135950", "createdAt": "2020-05-16T09:14:46Z", "author": {"login": "timtebeek"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/DiscoverySelectors.java", "diffHunk": "@@ -135,6 +135,50 @@ public static FileSelector selectFile(File file) {\n \t\t}\n \t}\n \n+\t/**\n+\t * Create a {@code FileSelector} for the supplied file path.\n+\t *\n+\t * <p>This method selects the file using the supplied path <em>as is</em>,\n+\t * without verifying if the file exists.\n+\t *\n+\t * @param path the path to the file to select; never {@code null} or blank\n+\t * @param position the position inside the file; may be {@code null}\n+\t * @see FileSelector\n+\t * @see #selectFile(File, int, int)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5MTY1Nw=="}, "originalCommit": {"oid": "296cddb2119a9a36a490170e9fa732d051edfad4"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzM1MzIxOnYy", "diffSide": "RIGHT", "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/ClasspathResourceSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzo1NDoyOVrOGWWmew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzo1NDoyOVrOGWWmew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5MjE1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * Get the selected position within the classpath resource as a\n          \n          \n            \n            \t * {@link FilePosition}.\n          \n          \n            \n            \t * Get the selected {@code FilePosition} within the classpath resource.", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r426092155", "createdAt": "2020-05-15T23:54:29Z", "author": {"login": "juliette-derancourt"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/ClasspathResourceSelector.java", "diffHunk": "@@ -59,6 +66,14 @@ public String getClasspathResourceName() {\n \t\treturn this.classpathResourceName;\n \t}\n \n+\t/**\n+\t * Get the selected position within the classpath resource as a\n+\t * {@link FilePosition}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "296cddb2119a9a36a490170e9fa732d051edfad4"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzM1NDYwOnYy", "diffSide": "RIGHT", "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/FileSelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzo1NTozNFrOGWWnNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzo1NTozNFrOGWWnNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5MjM0MQ==", "bodyText": "Based on my previous comment in DiscoverySelectors, we could probably get rid of this constructor.", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r426092341", "createdAt": "2020-05-15T23:55:34Z", "author": {"login": "juliette-derancourt"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/FileSelector.java", "diffHunk": "@@ -41,9 +42,15 @@\n public class FileSelector implements DiscoverySelector {\n \n \tprivate final String path;\n+\tprivate final FilePosition position;\n \n \tFileSelector(String path) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "296cddb2119a9a36a490170e9fa732d051edfad4"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzM1NzYzOnYy", "diffSide": "RIGHT", "path": "platform-tests/src/test/java/org/junit/platform/engine/discovery/DiscoverySelectorsTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzo1ODowOFrOGWWo6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzo1ODowOFrOGWWo6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA5Mjc3OQ==", "bodyText": "Maybe this case deserves a test of its own?", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r426092779", "createdAt": "2020-05-15T23:58:08Z", "author": {"login": "juliette-derancourt"}, "path": "platform-tests/src/test/java/org/junit/platform/engine/discovery/DiscoverySelectorsTests.java", "diffHunk": "@@ -92,6 +92,11 @@ void selectFileByName() {\n \t\tassertEquals(path, selector.getRawPath());\n \t\tassertEquals(new File(path), selector.getFile());\n \t\tassertEquals(Paths.get(path), selector.getPath());\n+\n+\t\t// with file position", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "296cddb2119a9a36a490170e9fa732d051edfad4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mzg0ODkyOnYy", "diffSide": "RIGHT", "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/FilePosition.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxNDoxMzo1MlrOGWakRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxNDoxMzo1MlrOGWakRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE1NzEyNQ==", "bodyText": "@junit-team/junit-lambda Should we mention in the Javadoc that this class is actually a copy of descriptor.FilePosition?", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r426157125", "createdAt": "2020-05-16T14:13:52Z", "author": {"login": "juliette-derancourt"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/FilePosition.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.engine.discovery;\n+\n+import static org.apiguardian.api.API.Status.STABLE;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.commons.logging.Logger;\n+import org.junit.platform.commons.logging.LoggerFactory;\n+import org.junit.platform.commons.util.Preconditions;\n+import org.junit.platform.commons.util.StringUtils;\n+import org.junit.platform.commons.util.ToStringBuilder;\n+\n+/**\n+ * Position inside a file represented by {@linkplain #getLine line} and\n+ * {@linkplain #getColumn column} numbers.\n+ *\n+ * @since 1.7\n+ */\n+@API(status = STABLE, since = \"1.7\")\n+public class FilePosition implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19105584b860f46162b65e13dd3073250ed1f9fc"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDAwNzcyOnYy", "diffSide": "RIGHT", "path": "platform-tests/src/test/java/org/junit/platform/engine/discovery/DiscoverySelectorsTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxODoxODoxMlrOGWb1QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxODoxODoxMlrOGWb1QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3Nzg1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            \t\t// with file position\n          \n          \n            \n            \t\tselector = selectClasspathResource(\"A/B/C/spec.json\", FilePosition.from(12, 34));\n          \n          \n            \n            \t\tassertEquals(\"A/B/C/spec.json\", selector.getClasspathResourceName());\n          \n          \n            \n            \t\tassertEquals(FilePosition.from(12, 34), selector.getPosition().get());", "url": "https://github.com/junit-team/junit5/pull/2253#discussion_r426177857", "createdAt": "2020-05-16T18:18:12Z", "author": {"login": "timtebeek"}, "path": "platform-tests/src/test/java/org/junit/platform/engine/discovery/DiscoverySelectorsTests.java", "diffHunk": "@@ -153,6 +186,30 @@ void selectClasspathResources() {\n \t\t// standard use case\n \t\tselector = selectClasspathResource(\"A/B/C/spec.json\");\n \t\tassertEquals(\"A/B/C/spec.json\", selector.getClasspathResourceName());\n+\n+\t\t// with file position\n+\t\tselector = selectClasspathResource(\"A/B/C/spec.json\", FilePosition.from(12, 34));\n+\t\tassertEquals(\"A/B/C/spec.json\", selector.getClasspathResourceName());\n+\t\tassertEquals(FilePosition.from(12, 34), selector.getPosition().get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19105584b860f46162b65e13dd3073250ed1f9fc"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4006, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}