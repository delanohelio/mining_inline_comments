{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1NTc0OTg3", "number": 2292, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNToxNjo0M1rOD630IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNToxNzozOFrOD630Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDU4NDY0OnYy", "diffSide": "RIGHT", "path": "junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileArgumentsProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNToxNjo0M1rOGS7yoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNToxNjo0M1rOGS7yoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwNzE2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tPreconditions.notBlank(path, \"Classpath resource [\" + path + \"] must not be null or blank\");\n          \n          \n            \n            \t\t\tPreconditions.notBlank(path, () -> \"Classpath resource [\" + path + \"] must not be null or blank\");", "url": "https://github.com/junit-team/junit5/pull/2292#discussion_r422507169", "createdAt": "2020-05-09T15:16:43Z", "author": {"login": "sbrannen"}, "path": "junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileArgumentsProvider.java", "diffHunk": "@@ -160,4 +161,50 @@ private void advance() {\n \n \t}\n \n+\tprivate interface Source {\n+\n+\t\tInputStream open(ExtensionContext context);\n+\n+\t}\n+\n+\tinterface InputStreamProvider {\n+\n+\t\tInputStream openClasspathResource(Class<?> baseClass, String path);\n+\n+\t\tInputStream openFile(String path);\n+\n+\t\tdefault Source classpathResource(String path) {\n+\t\t\treturn context -> openClasspathResource(context.getRequiredTestClass(), path);\n+\t\t}\n+\n+\t\tdefault Source file(String path) {\n+\t\t\treturn context -> openFile(path);\n+\t\t}\n+\n+\t}\n+\n+\tprivate static class DefaultInputStreamProvider implements InputStreamProvider {\n+\n+\t\tprivate static final DefaultInputStreamProvider INSTANCE = new DefaultInputStreamProvider();\n+\n+\t\t@Override\n+\t\tpublic InputStream openClasspathResource(Class<?> baseClass, String path) {\n+\t\t\tPreconditions.notBlank(path, \"Classpath resource [\" + path + \"] must not be null or blank\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1c59c7d323e4b9335e730c15316a61c2d72c3a4"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDU4NDc5OnYy", "diffSide": "RIGHT", "path": "junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileArgumentsProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNToxNjo1NFrOGS7ysg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNToxNjo1NFrOGS7ysg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwNzE4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tPreconditions.notBlank(path, \"File [\" + path + \"] must not be null or blank\");\n          \n          \n            \n            \t\t\tPreconditions.notBlank(path, () -> \"File [\" + path + \"] must not be null or blank\");", "url": "https://github.com/junit-team/junit5/pull/2292#discussion_r422507186", "createdAt": "2020-05-09T15:16:54Z", "author": {"login": "sbrannen"}, "path": "junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileArgumentsProvider.java", "diffHunk": "@@ -160,4 +161,50 @@ private void advance() {\n \n \t}\n \n+\tprivate interface Source {\n+\n+\t\tInputStream open(ExtensionContext context);\n+\n+\t}\n+\n+\tinterface InputStreamProvider {\n+\n+\t\tInputStream openClasspathResource(Class<?> baseClass, String path);\n+\n+\t\tInputStream openFile(String path);\n+\n+\t\tdefault Source classpathResource(String path) {\n+\t\t\treturn context -> openClasspathResource(context.getRequiredTestClass(), path);\n+\t\t}\n+\n+\t\tdefault Source file(String path) {\n+\t\t\treturn context -> openFile(path);\n+\t\t}\n+\n+\t}\n+\n+\tprivate static class DefaultInputStreamProvider implements InputStreamProvider {\n+\n+\t\tprivate static final DefaultInputStreamProvider INSTANCE = new DefaultInputStreamProvider();\n+\n+\t\t@Override\n+\t\tpublic InputStream openClasspathResource(Class<?> baseClass, String path) {\n+\t\t\tPreconditions.notBlank(path, \"Classpath resource [\" + path + \"] must not be null or blank\");\n+\t\t\tInputStream inputStream = baseClass.getResourceAsStream(path);\n+\t\t\treturn Preconditions.notNull(inputStream, () -> \"Classpath resource [\" + path + \"] does not exist\");\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic InputStream openFile(String path) {\n+\t\t\tPreconditions.notBlank(path, \"File [\" + path + \"] must not be null or blank\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1c59c7d323e4b9335e730c15316a61c2d72c3a4"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDU4NTI3OnYy", "diffSide": "RIGHT", "path": "junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileArgumentsProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNToxNzozOFrOGS7y8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNDoxMToyMlrOGTEjjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwNzI1MA==", "bodyText": "Shouldn't this rather be a JUnitException (or subclass thereof)?", "url": "https://github.com/junit-team/junit5/pull/2292#discussion_r422507250", "createdAt": "2020-05-09T15:17:38Z", "author": {"login": "sbrannen"}, "path": "junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileArgumentsProvider.java", "diffHunk": "@@ -160,4 +161,50 @@ private void advance() {\n \n \t}\n \n+\tprivate interface Source {\n+\n+\t\tInputStream open(ExtensionContext context);\n+\n+\t}\n+\n+\tinterface InputStreamProvider {\n+\n+\t\tInputStream openClasspathResource(Class<?> baseClass, String path);\n+\n+\t\tInputStream openFile(String path);\n+\n+\t\tdefault Source classpathResource(String path) {\n+\t\t\treturn context -> openClasspathResource(context.getRequiredTestClass(), path);\n+\t\t}\n+\n+\t\tdefault Source file(String path) {\n+\t\t\treturn context -> openFile(path);\n+\t\t}\n+\n+\t}\n+\n+\tprivate static class DefaultInputStreamProvider implements InputStreamProvider {\n+\n+\t\tprivate static final DefaultInputStreamProvider INSTANCE = new DefaultInputStreamProvider();\n+\n+\t\t@Override\n+\t\tpublic InputStream openClasspathResource(Class<?> baseClass, String path) {\n+\t\t\tPreconditions.notBlank(path, \"Classpath resource [\" + path + \"] must not be null or blank\");\n+\t\t\tInputStream inputStream = baseClass.getResourceAsStream(path);\n+\t\t\treturn Preconditions.notNull(inputStream, () -> \"Classpath resource [\" + path + \"] does not exist\");\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic InputStream openFile(String path) {\n+\t\t\tPreconditions.notBlank(path, \"File [\" + path + \"] must not be null or blank\");\n+\t\t\ttry {\n+\t\t\t\treturn Files.newInputStream(Paths.get(path));\n+\t\t\t}\n+\t\t\tcatch (IOException e) {\n+\t\t\t\tthrow new UncheckedIOException(\"File [\" + path + \"] could not be read\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1c59c7d323e4b9335e730c15316a61c2d72c3a4"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY1MDc2Nw==", "bodyText": "You're right. I changed it.", "url": "https://github.com/junit-team/junit5/pull/2292#discussion_r422650767", "createdAt": "2020-05-10T14:11:22Z", "author": {"login": "marcphilipp"}, "path": "junit-jupiter-params/src/main/java/org/junit/jupiter/params/provider/CsvFileArgumentsProvider.java", "diffHunk": "@@ -160,4 +161,50 @@ private void advance() {\n \n \t}\n \n+\tprivate interface Source {\n+\n+\t\tInputStream open(ExtensionContext context);\n+\n+\t}\n+\n+\tinterface InputStreamProvider {\n+\n+\t\tInputStream openClasspathResource(Class<?> baseClass, String path);\n+\n+\t\tInputStream openFile(String path);\n+\n+\t\tdefault Source classpathResource(String path) {\n+\t\t\treturn context -> openClasspathResource(context.getRequiredTestClass(), path);\n+\t\t}\n+\n+\t\tdefault Source file(String path) {\n+\t\t\treturn context -> openFile(path);\n+\t\t}\n+\n+\t}\n+\n+\tprivate static class DefaultInputStreamProvider implements InputStreamProvider {\n+\n+\t\tprivate static final DefaultInputStreamProvider INSTANCE = new DefaultInputStreamProvider();\n+\n+\t\t@Override\n+\t\tpublic InputStream openClasspathResource(Class<?> baseClass, String path) {\n+\t\t\tPreconditions.notBlank(path, \"Classpath resource [\" + path + \"] must not be null or blank\");\n+\t\t\tInputStream inputStream = baseClass.getResourceAsStream(path);\n+\t\t\treturn Preconditions.notNull(inputStream, () -> \"Classpath resource [\" + path + \"] does not exist\");\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic InputStream openFile(String path) {\n+\t\t\tPreconditions.notBlank(path, \"File [\" + path + \"] must not be null or blank\");\n+\t\t\ttry {\n+\t\t\t\treturn Files.newInputStream(Paths.get(path));\n+\t\t\t}\n+\t\t\tcatch (IOException e) {\n+\t\t\t\tthrow new UncheckedIOException(\"File [\" + path + \"] could not be read\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwNzI1MA=="}, "originalCommit": {"oid": "d1c59c7d323e4b9335e730c15316a61c2d72c3a4"}, "originalPosition": 128}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4037, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}