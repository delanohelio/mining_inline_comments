{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1NDQ5NDQ2", "number": 2183, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxOToxMjo0NlrODf_WEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwNzozOTowOVrODglvkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0ODcwMjkwOnYy", "diffSide": "RIGHT", "path": "junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxOToxMjo0NlrOFqA33w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwOToyMjowM1rOFqOZEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5ODgxNQ==", "bodyText": "\u2753 Why a Supplier?", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r379598815", "createdAt": "2020-02-14T19:12:46Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.commons.util;\n+\n+import static org.apiguardian.api.API.Status.INTERNAL;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apiguardian.api.API;\n+\n+/**\n+ * Class-related predicate holder used by execution listener, execution condition predicates\n+ *\n+ * <h3>DISCLAIMER</h3>\n+ *\n+ * <p>These utilities are intended solely for usage within the JUnit framework\n+ * itself. <strong>Any usage by external parties is not supported.</strong>\n+ * Use at your own risk!\n+ *\n+ */\n+@API(status = INTERNAL, since = \"5.5\")\n+public class ClassNameFilterUtil {\n+\n+\tprivate ClassNameFilterUtil() {\n+\t\t/* no-op */\n+\t}\n+\tprivate static final Predicate<?> alwaysActivated = object -> true;\n+\tprivate static final Predicate<?> alwaysDeactivated = object -> false;\n+\n+\tpublic static final String DEACTIVATE_ALL_PATTERN = \"*\";\n+\tpublic static final String DEACTIVATE_CONDITIONS_PATTERN_PROPERTY_NAME = \"junit.jupiter.conditions.deactivate\";\n+\tpublic static final String DEACTIVATE_LISTENERS_PATTERN_PROPERTY_NAME = \"junit.platform.execution.listeners.deactivate\";\n+\n+\tpublic static Predicate<?> get(Supplier<Optional<String>> pattern) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f3f3a4bb5086a2bd5b58bc674eadea52a16cccb"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYyMTYyNA==", "bodyText": "Wanted to circumnavigate using an Optional as a method parameter along with trying to remove the dependency on Configuration parameter.\nUsing Optional as method parameters (or class members) isn't really ideal since they take only delegate a state of the variable while exposing a deceiving NPE potential on themselves.\nDo you suggest any other way?", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r379621624", "createdAt": "2020-02-14T20:06:25Z", "author": {"login": "nishantvas"}, "path": "junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.commons.util;\n+\n+import static org.apiguardian.api.API.Status.INTERNAL;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apiguardian.api.API;\n+\n+/**\n+ * Class-related predicate holder used by execution listener, execution condition predicates\n+ *\n+ * <h3>DISCLAIMER</h3>\n+ *\n+ * <p>These utilities are intended solely for usage within the JUnit framework\n+ * itself. <strong>Any usage by external parties is not supported.</strong>\n+ * Use at your own risk!\n+ *\n+ */\n+@API(status = INTERNAL, since = \"5.5\")\n+public class ClassNameFilterUtil {\n+\n+\tprivate ClassNameFilterUtil() {\n+\t\t/* no-op */\n+\t}\n+\tprivate static final Predicate<?> alwaysActivated = object -> true;\n+\tprivate static final Predicate<?> alwaysDeactivated = object -> false;\n+\n+\tpublic static final String DEACTIVATE_ALL_PATTERN = \"*\";\n+\tpublic static final String DEACTIVATE_CONDITIONS_PATTERN_PROPERTY_NAME = \"junit.jupiter.conditions.deactivate\";\n+\tpublic static final String DEACTIVATE_LISTENERS_PATTERN_PROPERTY_NAME = \"junit.platform.execution.listeners.deactivate\";\n+\n+\tpublic static Predicate<?> get(Supplier<Optional<String>> pattern) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5ODgxNQ=="}, "originalCommit": {"oid": "3f3f3a4bb5086a2bd5b58bc674eadea52a16cccb"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyMDMwNA==", "bodyText": "Can we just take a String and handle the Optional on the outside? If that ends up being too much duplication, I think Optional<String> would be better here and we don't have a general rule in this project (even though IntelliJ might disagree) against Optional as method parameter. A Supplier can be null, too. \ud83d\ude09", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r379820304", "createdAt": "2020-02-15T09:22:03Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.commons.util;\n+\n+import static org.apiguardian.api.API.Status.INTERNAL;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apiguardian.api.API;\n+\n+/**\n+ * Class-related predicate holder used by execution listener, execution condition predicates\n+ *\n+ * <h3>DISCLAIMER</h3>\n+ *\n+ * <p>These utilities are intended solely for usage within the JUnit framework\n+ * itself. <strong>Any usage by external parties is not supported.</strong>\n+ * Use at your own risk!\n+ *\n+ */\n+@API(status = INTERNAL, since = \"5.5\")\n+public class ClassNameFilterUtil {\n+\n+\tprivate ClassNameFilterUtil() {\n+\t\t/* no-op */\n+\t}\n+\tprivate static final Predicate<?> alwaysActivated = object -> true;\n+\tprivate static final Predicate<?> alwaysDeactivated = object -> false;\n+\n+\tpublic static final String DEACTIVATE_ALL_PATTERN = \"*\";\n+\tpublic static final String DEACTIVATE_CONDITIONS_PATTERN_PROPERTY_NAME = \"junit.jupiter.conditions.deactivate\";\n+\tpublic static final String DEACTIVATE_LISTENERS_PATTERN_PROPERTY_NAME = \"junit.platform.execution.listeners.deactivate\";\n+\n+\tpublic static Predicate<?> get(Supplier<Optional<String>> pattern) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5ODgxNQ=="}, "originalCommit": {"oid": "3f3f3a4bb5086a2bd5b58bc674eadea52a16cccb"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0ODcwNTM4OnYy", "diffSide": "RIGHT", "path": "junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxOToxMzo0MVrOFqA5ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxOToxMzo0MVrOFqA5ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5OTIwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @API(status = INTERNAL, since = \"5.5\")\n          \n          \n            \n            @API(status = INTERNAL, since = \"5.7\")", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r379599204", "createdAt": "2020-02-14T19:13:41Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.commons.util;\n+\n+import static org.apiguardian.api.API.Status.INTERNAL;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apiguardian.api.API;\n+\n+/**\n+ * Class-related predicate holder used by execution listener, execution condition predicates\n+ *\n+ * <h3>DISCLAIMER</h3>\n+ *\n+ * <p>These utilities are intended solely for usage within the JUnit framework\n+ * itself. <strong>Any usage by external parties is not supported.</strong>\n+ * Use at your own risk!\n+ *\n+ */\n+@API(status = INTERNAL, since = \"5.5\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f3f3a4bb5086a2bd5b58bc674eadea52a16cccb"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0ODcwNzA3OnYy", "diffSide": "RIGHT", "path": "junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxOToxNDoxN1rOFqA6ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMTozMTozM1rOFqhSVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5OTQ4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *\n          \n          \n            \n             *\n          \n          \n            \n             * @since 5.7", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r379599483", "createdAt": "2020-02-14T19:14:17Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.commons.util;\n+\n+import static org.apiguardian.api.API.Status.INTERNAL;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apiguardian.api.API;\n+\n+/**\n+ * Class-related predicate holder used by execution listener, execution condition predicates\n+ *\n+ * <h3>DISCLAIMER</h3>\n+ *\n+ * <p>These utilities are intended solely for usage within the JUnit framework\n+ * itself. <strong>Any usage by external parties is not supported.</strong>\n+ * Use at your own risk!\n+ *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f3f3a4bb5086a2bd5b58bc674eadea52a16cccb"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEyOTg3Nw==", "bodyText": "Updated", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r380129877", "createdAt": "2020-02-17T11:31:33Z", "author": {"login": "nishantvas"}, "path": "junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.commons.util;\n+\n+import static org.apiguardian.api.API.Status.INTERNAL;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apiguardian.api.API;\n+\n+/**\n+ * Class-related predicate holder used by execution listener, execution condition predicates\n+ *\n+ * <h3>DISCLAIMER</h3>\n+ *\n+ * <p>These utilities are intended solely for usage within the JUnit framework\n+ * itself. <strong>Any usage by external parties is not supported.</strong>\n+ * Use at your own risk!\n+ *", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5OTQ4Mw=="}, "originalCommit": {"oid": "3f3f3a4bb5086a2bd5b58bc674eadea52a16cccb"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0ODcxMTc3OnYy", "diffSide": "RIGHT", "path": "junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxOToxNTo1OVrOFqA9Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxOToxNTo1OVrOFqA9Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwMDIyNw==", "bodyText": "\u274c These two constants should be moved to junit-jupiter-engine and junit-platform-launcher, respectively.", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r379600227", "createdAt": "2020-02-14T19:15:59Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.commons.util;\n+\n+import static org.apiguardian.api.API.Status.INTERNAL;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apiguardian.api.API;\n+\n+/**\n+ * Class-related predicate holder used by execution listener, execution condition predicates\n+ *\n+ * <h3>DISCLAIMER</h3>\n+ *\n+ * <p>These utilities are intended solely for usage within the JUnit framework\n+ * itself. <strong>Any usage by external parties is not supported.</strong>\n+ * Use at your own risk!\n+ *\n+ */\n+@API(status = INTERNAL, since = \"5.5\")\n+public class ClassNameFilterUtil {\n+\n+\tprivate ClassNameFilterUtil() {\n+\t\t/* no-op */\n+\t}\n+\tprivate static final Predicate<?> alwaysActivated = object -> true;\n+\tprivate static final Predicate<?> alwaysDeactivated = object -> false;\n+\n+\tpublic static final String DEACTIVATE_ALL_PATTERN = \"*\";\n+\tpublic static final String DEACTIVATE_CONDITIONS_PATTERN_PROPERTY_NAME = \"junit.jupiter.conditions.deactivate\";\n+\tpublic static final String DEACTIVATE_LISTENERS_PATTERN_PROPERTY_NAME = \"junit.platform.execution.listeners.deactivate\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f3f3a4bb5086a2bd5b58bc674eadea52a16cccb"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0ODcxODI1OnYy", "diffSide": "RIGHT", "path": "junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxOToxODozNlrOFqBBog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQwOToyNDowMlrOFqOZuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwMTMxNA==", "bodyText": "\u274c Let's only support ,.", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r379601314", "createdAt": "2020-02-14T19:18:36Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.commons.util;\n+\n+import static org.apiguardian.api.API.Status.INTERNAL;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apiguardian.api.API;\n+\n+/**\n+ * Class-related predicate holder used by execution listener, execution condition predicates\n+ *\n+ * <h3>DISCLAIMER</h3>\n+ *\n+ * <p>These utilities are intended solely for usage within the JUnit framework\n+ * itself. <strong>Any usage by external parties is not supported.</strong>\n+ * Use at your own risk!\n+ *\n+ */\n+@API(status = INTERNAL, since = \"5.5\")\n+public class ClassNameFilterUtil {\n+\n+\tprivate ClassNameFilterUtil() {\n+\t\t/* no-op */\n+\t}\n+\tprivate static final Predicate<?> alwaysActivated = object -> true;\n+\tprivate static final Predicate<?> alwaysDeactivated = object -> false;\n+\n+\tpublic static final String DEACTIVATE_ALL_PATTERN = \"*\";\n+\tpublic static final String DEACTIVATE_CONDITIONS_PATTERN_PROPERTY_NAME = \"junit.jupiter.conditions.deactivate\";\n+\tpublic static final String DEACTIVATE_LISTENERS_PATTERN_PROPERTY_NAME = \"junit.platform.execution.listeners.deactivate\";\n+\n+\tpublic static Predicate<?> get(Supplier<Optional<String>> pattern) {\n+\t// @formatter:off\n+    return pattern.get()\n+        .filter(StringUtils::isNotBlank)\n+        .map(String::trim)\n+        .map(patternString -> {\n+          if (DEACTIVATE_ALL_PATTERN.equals(patternString)) {\n+            return alwaysDeactivated;\n+          }\n+          return matchesRegex(patternString);\n+        })\n+        .orElse(alwaysActivated);\n+    // @formatter:on\n+\t}\n+\n+\tprivate static Predicate<?> matchesRegex(String patternString) {\n+\t\tPattern pattern = Pattern.compile(convertToRegEx(patternString));\n+\t\treturn object -> !pattern.matcher(object.getClass().getName()).matches();\n+\t}\n+\n+\tprivate static String convertToRegEx(String pattern) {\n+\t\tpattern = Matcher.quoteReplacement(pattern);\n+\t\t// Splitting CSV Separated Pattens\n+\t\tpattern = Arrays.stream(pattern.split(\"[,;]\")).map(ClassNameFilterUtil::replaceRegExElements).collect(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f3f3a4bb5086a2bd5b58bc674eadea52a16cccb"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYyMjQ5NQ==", "bodyText": "In a dot separated class naming, wouldn't semi-colon be helpful for readability?", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r379622495", "createdAt": "2020-02-14T20:08:22Z", "author": {"login": "nishantvas"}, "path": "junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.commons.util;\n+\n+import static org.apiguardian.api.API.Status.INTERNAL;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apiguardian.api.API;\n+\n+/**\n+ * Class-related predicate holder used by execution listener, execution condition predicates\n+ *\n+ * <h3>DISCLAIMER</h3>\n+ *\n+ * <p>These utilities are intended solely for usage within the JUnit framework\n+ * itself. <strong>Any usage by external parties is not supported.</strong>\n+ * Use at your own risk!\n+ *\n+ */\n+@API(status = INTERNAL, since = \"5.5\")\n+public class ClassNameFilterUtil {\n+\n+\tprivate ClassNameFilterUtil() {\n+\t\t/* no-op */\n+\t}\n+\tprivate static final Predicate<?> alwaysActivated = object -> true;\n+\tprivate static final Predicate<?> alwaysDeactivated = object -> false;\n+\n+\tpublic static final String DEACTIVATE_ALL_PATTERN = \"*\";\n+\tpublic static final String DEACTIVATE_CONDITIONS_PATTERN_PROPERTY_NAME = \"junit.jupiter.conditions.deactivate\";\n+\tpublic static final String DEACTIVATE_LISTENERS_PATTERN_PROPERTY_NAME = \"junit.platform.execution.listeners.deactivate\";\n+\n+\tpublic static Predicate<?> get(Supplier<Optional<String>> pattern) {\n+\t// @formatter:off\n+    return pattern.get()\n+        .filter(StringUtils::isNotBlank)\n+        .map(String::trim)\n+        .map(patternString -> {\n+          if (DEACTIVATE_ALL_PATTERN.equals(patternString)) {\n+            return alwaysDeactivated;\n+          }\n+          return matchesRegex(patternString);\n+        })\n+        .orElse(alwaysActivated);\n+    // @formatter:on\n+\t}\n+\n+\tprivate static Predicate<?> matchesRegex(String patternString) {\n+\t\tPattern pattern = Pattern.compile(convertToRegEx(patternString));\n+\t\treturn object -> !pattern.matcher(object.getClass().getName()).matches();\n+\t}\n+\n+\tprivate static String convertToRegEx(String pattern) {\n+\t\tpattern = Matcher.quoteReplacement(pattern);\n+\t\t// Splitting CSV Separated Pattens\n+\t\tpattern = Arrays.stream(pattern.split(\"[,;]\")).map(ClassNameFilterUtil::replaceRegExElements).collect(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwMTMxNA=="}, "originalCommit": {"oid": "3f3f3a4bb5086a2bd5b58bc674eadea52a16cccb"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyMDQ3Mg==", "bodyText": "I think we should instead allow whitespace, i.e. trim each pattern.", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r379820472", "createdAt": "2020-02-15T09:24:02Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.commons.util;\n+\n+import static org.apiguardian.api.API.Status.INTERNAL;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apiguardian.api.API;\n+\n+/**\n+ * Class-related predicate holder used by execution listener, execution condition predicates\n+ *\n+ * <h3>DISCLAIMER</h3>\n+ *\n+ * <p>These utilities are intended solely for usage within the JUnit framework\n+ * itself. <strong>Any usage by external parties is not supported.</strong>\n+ * Use at your own risk!\n+ *\n+ */\n+@API(status = INTERNAL, since = \"5.5\")\n+public class ClassNameFilterUtil {\n+\n+\tprivate ClassNameFilterUtil() {\n+\t\t/* no-op */\n+\t}\n+\tprivate static final Predicate<?> alwaysActivated = object -> true;\n+\tprivate static final Predicate<?> alwaysDeactivated = object -> false;\n+\n+\tpublic static final String DEACTIVATE_ALL_PATTERN = \"*\";\n+\tpublic static final String DEACTIVATE_CONDITIONS_PATTERN_PROPERTY_NAME = \"junit.jupiter.conditions.deactivate\";\n+\tpublic static final String DEACTIVATE_LISTENERS_PATTERN_PROPERTY_NAME = \"junit.platform.execution.listeners.deactivate\";\n+\n+\tpublic static Predicate<?> get(Supplier<Optional<String>> pattern) {\n+\t// @formatter:off\n+    return pattern.get()\n+        .filter(StringUtils::isNotBlank)\n+        .map(String::trim)\n+        .map(patternString -> {\n+          if (DEACTIVATE_ALL_PATTERN.equals(patternString)) {\n+            return alwaysDeactivated;\n+          }\n+          return matchesRegex(patternString);\n+        })\n+        .orElse(alwaysActivated);\n+    // @formatter:on\n+\t}\n+\n+\tprivate static Predicate<?> matchesRegex(String patternString) {\n+\t\tPattern pattern = Pattern.compile(convertToRegEx(patternString));\n+\t\treturn object -> !pattern.matcher(object.getClass().getName()).matches();\n+\t}\n+\n+\tprivate static String convertToRegEx(String pattern) {\n+\t\tpattern = Matcher.quoteReplacement(pattern);\n+\t\t// Splitting CSV Separated Pattens\n+\t\tpattern = Arrays.stream(pattern.split(\"[,;]\")).map(ClassNameFilterUtil::replaceRegExElements).collect(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwMTMxNA=="}, "originalCommit": {"oid": "3f3f3a4bb5086a2bd5b58bc674eadea52a16cccb"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0ODcxOTkxOnYy", "diffSide": "RIGHT", "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/config/DefaultJupiterConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxOToxOToxMVrOFqBCog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxOToxOToxMVrOFqBCog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwMTU3MA==", "bodyText": "\u274c Please add tests for comma-separated patterns to ExecutionConditionTests.", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r379601570", "createdAt": "2020-02-14T19:19:11Z", "author": {"login": "marcphilipp"}, "path": "junit-jupiter-engine/src/main/java/org/junit/jupiter/engine/config/DefaultJupiterConfiguration.java", "diffHunk": "@@ -83,8 +84,8 @@ public Lifecycle getDefaultTestInstanceLifecycle() {\n \t@Override\n \t@SuppressWarnings(\"unchecked\")\n \tpublic Predicate<ExecutionCondition> getExecutionConditionFilter() {\n-\t\treturn (Predicate<ExecutionCondition>) new ClassNamePatternParameterConverter().get(configurationParameters,\n-\t\t\tDEACTIVATE_CONDITIONS_PATTERN_PROPERTY_NAME);\n+\t\treturn (Predicate<ExecutionCondition>) ClassNameFilterUtil.get(\n+\t\t\t() -> configurationParameters.get(DEACTIVATE_CONDITIONS_PATTERN_PROPERTY_NAME));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f3f3a4bb5086a2bd5b58bc674eadea52a16cccb"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0ODczMDcwOnYy", "diffSide": "RIGHT", "path": "platform-tests/src/test/java/org/junit/platform/launcher/core/LauncherFactoryTests.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxOToyMzoxMVrOFqBJXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxODoyNDo1M1rOFqs-fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwMzI5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tassertThat(unused).isEmpty();\n          \n          \n            \n            \t\tassertThat(listeners).filteredOn(UnusedTestExecutionListener.class::isInstance).isEmpty();", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r379603293", "createdAt": "2020-02-14T19:23:11Z", "author": {"login": "marcphilipp"}, "path": "platform-tests/src/test/java/org/junit/platform/launcher/core/LauncherFactoryTests.java", "diffHunk": "@@ -48,6 +50,25 @@ void noopTestExecutionListenerIsLoadedViaServiceApi() {\n \t\tassertThat(listener).isPresent();\n \t}\n \n+\t@Test\n+\tvoid unusedTestExecutionListenerIsNotLoadedViaServiceApi() {\n+\t\tDefaultLauncher launcher = (DefaultLauncher) LauncherFactory.create();\n+\t\tList<TestExecutionListener> listeners = launcher.getTestExecutionListenerRegistry().getTestExecutionListeners();\n+\n+\t\tOptional<TestExecutionListener> noop = listeners.stream().filter(\n+\t\t\tNoopTestExecutionListener.class::isInstance).findFirst();\n+\n+\t\tOptional<TestExecutionListener> unused = listeners.stream().filter(\n+\t\t\tUnusedTestExecutionListener.class::isInstance).findFirst();\n+\n+\t\tOptional<TestExecutionListener> anotherUnused = listeners.stream().filter(\n+\t\t\tAnotherUnusedTestExecutionListener.class::isInstance).findFirst();\n+\n+\t\tassertThat(unused).isEmpty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f3f3a4bb5086a2bd5b58bc674eadea52a16cccb"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA1Nzc2Nw==", "bodyText": "This seems to update the list itself and can only be used once after which it'll filter the list leaving it blank\n\nFilter the iterable under test keeping only elements matching the given {@link Predicate}.", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r380057767", "createdAt": "2020-02-17T09:09:07Z", "author": {"login": "nishantvas"}, "path": "platform-tests/src/test/java/org/junit/platform/launcher/core/LauncherFactoryTests.java", "diffHunk": "@@ -48,6 +50,25 @@ void noopTestExecutionListenerIsLoadedViaServiceApi() {\n \t\tassertThat(listener).isPresent();\n \t}\n \n+\t@Test\n+\tvoid unusedTestExecutionListenerIsNotLoadedViaServiceApi() {\n+\t\tDefaultLauncher launcher = (DefaultLauncher) LauncherFactory.create();\n+\t\tList<TestExecutionListener> listeners = launcher.getTestExecutionListenerRegistry().getTestExecutionListeners();\n+\n+\t\tOptional<TestExecutionListener> noop = listeners.stream().filter(\n+\t\t\tNoopTestExecutionListener.class::isInstance).findFirst();\n+\n+\t\tOptional<TestExecutionListener> unused = listeners.stream().filter(\n+\t\t\tUnusedTestExecutionListener.class::isInstance).findFirst();\n+\n+\t\tOptional<TestExecutionListener> anotherUnused = listeners.stream().filter(\n+\t\t\tAnotherUnusedTestExecutionListener.class::isInstance).findFirst();\n+\n+\t\tassertThat(unused).isEmpty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwMzI5Mw=="}, "originalCommit": {"oid": "3f3f3a4bb5086a2bd5b58bc674eadea52a16cccb"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMyMTQwNQ==", "bodyText": "That Javadoc is misleading, it does not modify the supplied list.", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r380321405", "createdAt": "2020-02-17T18:24:53Z", "author": {"login": "marcphilipp"}, "path": "platform-tests/src/test/java/org/junit/platform/launcher/core/LauncherFactoryTests.java", "diffHunk": "@@ -48,6 +50,25 @@ void noopTestExecutionListenerIsLoadedViaServiceApi() {\n \t\tassertThat(listener).isPresent();\n \t}\n \n+\t@Test\n+\tvoid unusedTestExecutionListenerIsNotLoadedViaServiceApi() {\n+\t\tDefaultLauncher launcher = (DefaultLauncher) LauncherFactory.create();\n+\t\tList<TestExecutionListener> listeners = launcher.getTestExecutionListenerRegistry().getTestExecutionListeners();\n+\n+\t\tOptional<TestExecutionListener> noop = listeners.stream().filter(\n+\t\t\tNoopTestExecutionListener.class::isInstance).findFirst();\n+\n+\t\tOptional<TestExecutionListener> unused = listeners.stream().filter(\n+\t\t\tUnusedTestExecutionListener.class::isInstance).findFirst();\n+\n+\t\tOptional<TestExecutionListener> anotherUnused = listeners.stream().filter(\n+\t\t\tAnotherUnusedTestExecutionListener.class::isInstance).findFirst();\n+\n+\t\tassertThat(unused).isEmpty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwMzI5Mw=="}, "originalCommit": {"oid": "3f3f3a4bb5086a2bd5b58bc674eadea52a16cccb"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0ODczMzk0OnYy", "diffSide": "RIGHT", "path": "junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxOToyNDoxOFrOFqBLRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMTozMDo1MVrOFqhRPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwMzc4MQ==", "bodyText": "\u2b55\ufe0f I think we should write a unit test for this class now. It should probably have existed earlier. \ud83d\ude09", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r379603781", "createdAt": "2020-02-14T19:24:18Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.commons.util;\n+\n+import static org.apiguardian.api.API.Status.INTERNAL;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apiguardian.api.API;\n+\n+/**\n+ * Class-related predicate holder used by execution listener, execution condition predicates\n+ *\n+ * <h3>DISCLAIMER</h3>\n+ *\n+ * <p>These utilities are intended solely for usage within the JUnit framework\n+ * itself. <strong>Any usage by external parties is not supported.</strong>\n+ * Use at your own risk!\n+ *\n+ */\n+@API(status = INTERNAL, since = \"5.5\")\n+public class ClassNameFilterUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f3f3a4bb5086a2bd5b58bc674eadea52a16cccb"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEyOTU5Nw==", "bodyText": "Added UnitTests for the class", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r380129597", "createdAt": "2020-02-17T11:30:51Z", "author": {"login": "nishantvas"}, "path": "junit-platform-commons/src/main/java/org/junit/platform/commons/util/ClassNameFilterUtil.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.commons.util;\n+\n+import static org.apiguardian.api.API.Status.INTERNAL;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apiguardian.api.API;\n+\n+/**\n+ * Class-related predicate holder used by execution listener, execution condition predicates\n+ *\n+ * <h3>DISCLAIMER</h3>\n+ *\n+ * <p>These utilities are intended solely for usage within the JUnit framework\n+ * itself. <strong>Any usage by external parties is not supported.</strong>\n+ * Use at your own risk!\n+ *\n+ */\n+@API(status = INTERNAL, since = \"5.5\")\n+public class ClassNameFilterUtil {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwMzc4MQ=="}, "originalCommit": {"oid": "3f3f3a4bb5086a2bd5b58bc674eadea52a16cccb"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzgxMzY4OnYy", "diffSide": "RIGHT", "path": "documentation/src/docs/asciidoc/user-guide/running-tests.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxODoyODo0M1rOFqtC3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxODoyODo0M1rOFqtC3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMyMjUyNQ==", "bodyText": "The warning should go into the launcher-api-listeners-custom-deactivation section.", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r380322525", "createdAt": "2020-02-17T18:28:43Z", "author": {"login": "marcphilipp"}, "path": "documentation/src/docs/asciidoc/user-guide/running-tests.adoc", "diffHunk": "@@ -728,6 +728,43 @@ precedence over those supplied via system properties and the configuration file.\n Similarly, configuration parameters supplied via system properties take precedence over\n those supplied via the configuration file.\n \n+[[running-tests-config-params-deactivation-pattern]]\n+===== Deactivation Pattern Matching Syntax\n+\n+The following deactivation pattern style can be used to deactivate following\n+\n+- <<extensions-conditions-deactivation>>\n+- <<launcher-api-listeners-custom-deactivation>>\n+\n+If the pattern _configuration parameter_ consists solely of an asterisk\n+(`+*+`), all elements will be deactivated. Otherwise, the pattern will be used to match\n+against _comma separated_ fully qualified class name (_FQCN_) of each registered condition. Any dot\n+(`.`) in the pattern will match against a dot (`.`) or a dollar sign (`$`) in the FQCN.\n+Any asterisk (`+*+`) will match against one or more characters in the FQCN. All other\n+characters in the pattern will be matched one-to-one against the FQCN.\n+\n+Examples:\n+\n+The following will deactivate any `ExecutionCondition` and `TestExecutionListener` when provided as\n+their individual deactivation property as depicted in scope previously.\n+\n+- `+*+`: deactivates all registered implementation.\n+- `+org.junit.*+`: deactivates all registered implementations under the `org.junit` base\n+   package and any of its subpackages.\n+- `+*.MyCustom+`: deactivates every registered implementation whose simple class name is\n+  exactly `MyCustom`.\n+- `+*System*+`: deactivates every registered implementation whose simple class name contains\n+  `System`.\n+- `+*System*+, +*Unit*+`: deactivates every registered implementation whose simple class name\n+   contains `System` or `Unit`.\n+- `org.example.MyCustomImpl`: deactivates the registered implementation whose FQCN is exactly\n+  `org.example.MyCustomImpl`.\n+- `org.example.MyCustomImpl, org.example.TheirCustomImpl`: deactivates both the registered\n+   implementations whose FQCN is exactly `org.example.MyCustomImpl` and `org.example.TheirCustomImpl`.\n+\n+WARNING: TestExecutionListeners registered explicitly via LauncherDiscoveryRequest will not be\n+deactivated, refer to <<launcher-api-listeners-custom-deactivation>>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c88906fe3067c24e8e3dcdc1fdd4a4027e401f58"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzgxNDY4OnYy", "diffSide": "RIGHT", "path": "documentation/src/docs/asciidoc/user-guide/running-tests.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxODoyOToxNlrOFqtDeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxODoyOToxNlrOFqtDeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMyMjY4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            against _comma separated_ fully qualified class name (_FQCN_) of each registered condition. Any dot\n          \n          \n            \n            against _comma separated_ fully qualified class name (_FQCN_) of each candidate class. Any dot", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r380322682", "createdAt": "2020-02-17T18:29:16Z", "author": {"login": "marcphilipp"}, "path": "documentation/src/docs/asciidoc/user-guide/running-tests.adoc", "diffHunk": "@@ -728,6 +728,43 @@ precedence over those supplied via system properties and the configuration file.\n Similarly, configuration parameters supplied via system properties take precedence over\n those supplied via the configuration file.\n \n+[[running-tests-config-params-deactivation-pattern]]\n+===== Deactivation Pattern Matching Syntax\n+\n+The following deactivation pattern style can be used to deactivate following\n+\n+- <<extensions-conditions-deactivation>>\n+- <<launcher-api-listeners-custom-deactivation>>\n+\n+If the pattern _configuration parameter_ consists solely of an asterisk\n+(`+*+`), all elements will be deactivated. Otherwise, the pattern will be used to match\n+against _comma separated_ fully qualified class name (_FQCN_) of each registered condition. Any dot", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c88906fe3067c24e8e3dcdc1fdd4a4027e401f58"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzgxNjg0OnYy", "diffSide": "RIGHT", "path": "documentation/src/docs/asciidoc/user-guide/running-tests.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxODozMDozNlrOFqtE6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxODozMDozNlrOFqtE6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMyMzA1MA==", "bodyText": "I would omit this paragraph.", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r380323050", "createdAt": "2020-02-17T18:30:36Z", "author": {"login": "marcphilipp"}, "path": "documentation/src/docs/asciidoc/user-guide/running-tests.adoc", "diffHunk": "@@ -728,6 +728,43 @@ precedence over those supplied via system properties and the configuration file.\n Similarly, configuration parameters supplied via system properties take precedence over\n those supplied via the configuration file.\n \n+[[running-tests-config-params-deactivation-pattern]]\n+===== Deactivation Pattern Matching Syntax\n+\n+The following deactivation pattern style can be used to deactivate following\n+\n+- <<extensions-conditions-deactivation>>\n+- <<launcher-api-listeners-custom-deactivation>>\n+\n+If the pattern _configuration parameter_ consists solely of an asterisk\n+(`+*+`), all elements will be deactivated. Otherwise, the pattern will be used to match\n+against _comma separated_ fully qualified class name (_FQCN_) of each registered condition. Any dot\n+(`.`) in the pattern will match against a dot (`.`) or a dollar sign (`$`) in the FQCN.\n+Any asterisk (`+*+`) will match against one or more characters in the FQCN. All other\n+characters in the pattern will be matched one-to-one against the FQCN.\n+\n+Examples:\n+\n+The following will deactivate any `ExecutionCondition` and `TestExecutionListener` when provided as\n+their individual deactivation property as depicted in scope previously.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c88906fe3067c24e8e3dcdc1fdd4a4027e401f58"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzgxNzQyOnYy", "diffSide": "RIGHT", "path": "documentation/src/docs/asciidoc/user-guide/running-tests.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxODozMDo1NVrOFqtFQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxODozMDo1NVrOFqtFQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMyMzEzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - `+*+`: deactivates all registered implementation.\n          \n          \n            \n            - `+*+`: matches all candidate classes.", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r380323138", "createdAt": "2020-02-17T18:30:55Z", "author": {"login": "marcphilipp"}, "path": "documentation/src/docs/asciidoc/user-guide/running-tests.adoc", "diffHunk": "@@ -728,6 +728,43 @@ precedence over those supplied via system properties and the configuration file.\n Similarly, configuration parameters supplied via system properties take precedence over\n those supplied via the configuration file.\n \n+[[running-tests-config-params-deactivation-pattern]]\n+===== Deactivation Pattern Matching Syntax\n+\n+The following deactivation pattern style can be used to deactivate following\n+\n+- <<extensions-conditions-deactivation>>\n+- <<launcher-api-listeners-custom-deactivation>>\n+\n+If the pattern _configuration parameter_ consists solely of an asterisk\n+(`+*+`), all elements will be deactivated. Otherwise, the pattern will be used to match\n+against _comma separated_ fully qualified class name (_FQCN_) of each registered condition. Any dot\n+(`.`) in the pattern will match against a dot (`.`) or a dollar sign (`$`) in the FQCN.\n+Any asterisk (`+*+`) will match against one or more characters in the FQCN. All other\n+characters in the pattern will be matched one-to-one against the FQCN.\n+\n+Examples:\n+\n+The following will deactivate any `ExecutionCondition` and `TestExecutionListener` when provided as\n+their individual deactivation property as depicted in scope previously.\n+\n+- `+*+`: deactivates all registered implementation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c88906fe3067c24e8e3dcdc1fdd4a4027e401f58"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzgxNzc5OnYy", "diffSide": "RIGHT", "path": "documentation/src/docs/asciidoc/user-guide/running-tests.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxODozMToxNFrOFqtFgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxODozMToxNFrOFqtFgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMyMzIwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - `+org.junit.*+`: deactivates all registered implementations under the `org.junit` base\n          \n          \n            \n            - `+org.junit.*+`: matches all candidate classes under the `org.junit` base\n          \n      \n    \n    \n  \n\netc. below", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r380323203", "createdAt": "2020-02-17T18:31:14Z", "author": {"login": "marcphilipp"}, "path": "documentation/src/docs/asciidoc/user-guide/running-tests.adoc", "diffHunk": "@@ -728,6 +728,43 @@ precedence over those supplied via system properties and the configuration file.\n Similarly, configuration parameters supplied via system properties take precedence over\n those supplied via the configuration file.\n \n+[[running-tests-config-params-deactivation-pattern]]\n+===== Deactivation Pattern Matching Syntax\n+\n+The following deactivation pattern style can be used to deactivate following\n+\n+- <<extensions-conditions-deactivation>>\n+- <<launcher-api-listeners-custom-deactivation>>\n+\n+If the pattern _configuration parameter_ consists solely of an asterisk\n+(`+*+`), all elements will be deactivated. Otherwise, the pattern will be used to match\n+against _comma separated_ fully qualified class name (_FQCN_) of each registered condition. Any dot\n+(`.`) in the pattern will match against a dot (`.`) or a dollar sign (`$`) in the FQCN.\n+Any asterisk (`+*+`) will match against one or more characters in the FQCN. All other\n+characters in the pattern will be matched one-to-one against the FQCN.\n+\n+Examples:\n+\n+The following will deactivate any `ExecutionCondition` and `TestExecutionListener` when provided as\n+their individual deactivation property as depicted in scope previously.\n+\n+- `+*+`: deactivates all registered implementation.\n+- `+org.junit.*+`: deactivates all registered implementations under the `org.junit` base", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c88906fe3067c24e8e3dcdc1fdd4a4027e401f58"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzgyMTY0OnYy", "diffSide": "RIGHT", "path": "documentation/src/docs/asciidoc/user-guide/running-tests.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxODozMzoxOFrOFqtHzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxODozMzoxOFrOFqtHzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMyMzc4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ===== Deactivation Pattern Matching Syntax\n          \n          \n            \n            ==== Deactivation Pattern Matching Syntax", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r380323789", "createdAt": "2020-02-17T18:33:18Z", "author": {"login": "marcphilipp"}, "path": "documentation/src/docs/asciidoc/user-guide/running-tests.adoc", "diffHunk": "@@ -728,6 +728,43 @@ precedence over those supplied via system properties and the configuration file.\n Similarly, configuration parameters supplied via system properties take precedence over\n those supplied via the configuration file.\n \n+[[running-tests-config-params-deactivation-pattern]]\n+===== Deactivation Pattern Matching Syntax", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c88906fe3067c24e8e3dcdc1fdd4a4027e401f58"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzgyNTY4OnYy", "diffSide": "RIGHT", "path": "platform-tests/src/test/java/org/junit/platform/commons/util/ClassNameFilterUtilTests.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxODozNToxOFrOFqtKHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxMDoyNzozOVrOFq9Cdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMyNDM4MQ==", "bodyText": "Sorry, this is probably a matter of taste but I'd rather see you reverting this formatting change.", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r380324381", "createdAt": "2020-02-17T18:35:18Z", "author": {"login": "marcphilipp"}, "path": "platform-tests/src/test/java/org/junit/platform/commons/util/ClassNameFilterUtilTests.java", "diffHunk": "@@ -41,103 +41,119 @@\n @TestInstance(Lifecycle.PER_CLASS)\n class ClassNameFilterUtilTests {\n \n+\t//@formatter:off", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fd50015337e3aa3d1d30cdb2eaf9842aa93a014"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM3NDM2NQ==", "bodyText": "Revert to keeping the formatter off to methods? Or remove from tests altogether?\nI'm perfectly fine with either", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r380374365", "createdAt": "2020-02-17T21:40:17Z", "author": {"login": "nishantvas"}, "path": "platform-tests/src/test/java/org/junit/platform/commons/util/ClassNameFilterUtilTests.java", "diffHunk": "@@ -41,103 +41,119 @@\n @TestInstance(Lifecycle.PER_CLASS)\n class ClassNameFilterUtilTests {\n \n+\t//@formatter:off", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMyNDM4MQ=="}, "originalCommit": {"oid": "2fd50015337e3aa3d1d30cdb2eaf9842aa93a014"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ5OTkwMw==", "bodyText": "Yes, please keep it's scope smaller. It should not extend beyond a method body.", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r380499903", "createdAt": "2020-02-18T07:38:24Z", "author": {"login": "marcphilipp"}, "path": "platform-tests/src/test/java/org/junit/platform/commons/util/ClassNameFilterUtilTests.java", "diffHunk": "@@ -41,103 +41,119 @@\n @TestInstance(Lifecycle.PER_CLASS)\n class ClassNameFilterUtilTests {\n \n+\t//@formatter:off", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMyNDM4MQ=="}, "originalCommit": {"oid": "2fd50015337e3aa3d1d30cdb2eaf9842aa93a014"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU4NDU2Nw==", "bodyText": "Makes sense... Will update", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r380584567", "createdAt": "2020-02-18T10:27:39Z", "author": {"login": "nishantvas"}, "path": "platform-tests/src/test/java/org/junit/platform/commons/util/ClassNameFilterUtilTests.java", "diffHunk": "@@ -41,103 +41,119 @@\n @TestInstance(Lifecycle.PER_CLASS)\n class ClassNameFilterUtilTests {\n \n+\t//@formatter:off", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMyNDM4MQ=="}, "originalCommit": {"oid": "2fd50015337e3aa3d1d30cdb2eaf9842aa93a014"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDk5NDA4OnYy", "diffSide": "RIGHT", "path": "platform-tests/src/test/java/org/junit/platform/commons/util/ClassNameFilterUtilTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwNzozOTowOVrOFq342g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxMDoyNzo1MlrOFq9C9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUwMDE4Ng==", "bodyText": "I'd rather use @ValueSource(strings = {}) for these tests.", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r380500186", "createdAt": "2020-02-18T07:39:09Z", "author": {"login": "marcphilipp"}, "path": "platform-tests/src/test/java/org/junit/platform/commons/util/ClassNameFilterUtilTests.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.commons.util;\n+\n+import static java.util.Arrays.asList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.params.provider.Arguments.arguments;\n+\n+import java.util.List;\n+import java.util.function.Predicate;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.api.TestInstance.Lifecycle;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.platform.commons.util.classes.AExecutionConditionClass;\n+import org.junit.platform.commons.util.classes.ATestExecutionListenerClass;\n+import org.junit.platform.commons.util.classes.AVanillaEmpty;\n+import org.junit.platform.commons.util.classes.BExecutionConditionClass;\n+import org.junit.platform.commons.util.classes.BTestExecutionListenerClass;\n+import org.junit.platform.commons.util.classes.BVanillaEmpty;\n+import org.junit.platform.launcher.TestExecutionListener;\n+\n+/**\n+ * Unit tests for {@link ClassNameFilterUtil}.\n+ *\n+ * @since 5.7\n+ */\n+@SuppressWarnings({ \"unchecked\", \"unused\" })\n+@TestInstance(Lifecycle.PER_CLASS)\n+class ClassNameFilterUtilTests {\n+\n+\t//@formatter:off\n+\tStream<Arguments> alwaysEnabledConditions() {\n+\t\treturn Stream.of(\n+\t\t\t\targuments(\"org.junit.jupiter.*\"),\n+\t\t\t\targuments(\"org.junit.platform.*.NonExistentClass\"),\n+\t\t\t\targuments(\"*.NonExistentClass*\"),\n+\t\t\t\targuments(\"*NonExistentClass*\"),\n+\t\t\t\targuments(\"AExecutionConditionClass, BExecutionConditionClass\"));\n+\t}\n+\n+\t@MethodSource", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fd50015337e3aa3d1d30cdb2eaf9842aa93a014"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU4NDY5Mg==", "bodyText": "Not sure why I didn't think of that.", "url": "https://github.com/junit-team/junit5/pull/2183#discussion_r380584692", "createdAt": "2020-02-18T10:27:52Z", "author": {"login": "nishantvas"}, "path": "platform-tests/src/test/java/org/junit/platform/commons/util/ClassNameFilterUtilTests.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.commons.util;\n+\n+import static java.util.Arrays.asList;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.params.provider.Arguments.arguments;\n+\n+import java.util.List;\n+import java.util.function.Predicate;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.api.TestInstance.Lifecycle;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.platform.commons.util.classes.AExecutionConditionClass;\n+import org.junit.platform.commons.util.classes.ATestExecutionListenerClass;\n+import org.junit.platform.commons.util.classes.AVanillaEmpty;\n+import org.junit.platform.commons.util.classes.BExecutionConditionClass;\n+import org.junit.platform.commons.util.classes.BTestExecutionListenerClass;\n+import org.junit.platform.commons.util.classes.BVanillaEmpty;\n+import org.junit.platform.launcher.TestExecutionListener;\n+\n+/**\n+ * Unit tests for {@link ClassNameFilterUtil}.\n+ *\n+ * @since 5.7\n+ */\n+@SuppressWarnings({ \"unchecked\", \"unused\" })\n+@TestInstance(Lifecycle.PER_CLASS)\n+class ClassNameFilterUtilTests {\n+\n+\t//@formatter:off\n+\tStream<Arguments> alwaysEnabledConditions() {\n+\t\treturn Stream.of(\n+\t\t\t\targuments(\"org.junit.jupiter.*\"),\n+\t\t\t\targuments(\"org.junit.platform.*.NonExistentClass\"),\n+\t\t\t\targuments(\"*.NonExistentClass*\"),\n+\t\t\t\targuments(\"*NonExistentClass*\"),\n+\t\t\t\targuments(\"AExecutionConditionClass, BExecutionConditionClass\"));\n+\t}\n+\n+\t@MethodSource", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUwMDE4Ng=="}, "originalCommit": {"oid": "2fd50015337e3aa3d1d30cdb2eaf9842aa93a014"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4127, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}