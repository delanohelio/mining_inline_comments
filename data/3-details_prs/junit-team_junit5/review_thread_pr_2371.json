{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYxODI4MjUw", "number": 2371, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQxODoyMDo1NlrOEUZ-Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDoxMTowNVrOEUjDmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5ODMyNTMxOnYy", "diffSide": "RIGHT", "path": "junit-jupiter-params/src/test/java/org/junit/jupiter/params/ParameterizedTestIntegrationTests.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQxODoyMDo1NlrOG6m4vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDo0NDoxOVrOG60zXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwNzcxMQ==", "bodyText": "So do we consider that \u2026 counts as a character? Personally, with a max length of two I'd naturally expect fo\u2026. But I may be the only one \ud83e\udd37\u200d\u2640\ufe0f", "url": "https://github.com/junit-team/junit5/pull/2371#discussion_r464107711", "createdAt": "2020-08-02T18:20:56Z", "author": {"login": "juliette-derancourt"}, "path": "junit-jupiter-params/src/test/java/org/junit/jupiter/params/ParameterizedTestIntegrationTests.java", "diffHunk": "@@ -219,6 +220,17 @@ void executesLifecycleMethods() {\n \t\t// @formatter:on\n \t}\n \n+\t@Test\n+\tvoid truncatesArgumentsThatExceedMaxLength() {\n+\t\tvar results = EngineTestKit.engine(new JupiterTestEngine()) //\n+\t\t\t\t.configurationParameter(ParameterizedTestExtension.ARGUMENT_MAX_LENGTH_KEY, \"2\") //\n+\t\t\t\t.selectors(selectMethod(TestCase.class, \"testWithCsvSource\", String.class.getName())) //\n+\t\t\t\t.execute();\n+\t\tresults.testEvents().assertThatEvents() //\n+\t\t\t\t.haveExactly(1, event(displayName(\"[1] argument=f\u2026\"), started())) //", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60f1a15049fdd78123ba4f85475a2cf3510113bc"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwOTM0OQ==", "bodyText": "TBH I was myself torn on this question. @junit-team/junit-lambda Thoughts?", "url": "https://github.com/junit-team/junit5/pull/2371#discussion_r464109349", "createdAt": "2020-08-02T18:35:58Z", "author": {"login": "marcphilipp"}, "path": "junit-jupiter-params/src/test/java/org/junit/jupiter/params/ParameterizedTestIntegrationTests.java", "diffHunk": "@@ -219,6 +220,17 @@ void executesLifecycleMethods() {\n \t\t// @formatter:on\n \t}\n \n+\t@Test\n+\tvoid truncatesArgumentsThatExceedMaxLength() {\n+\t\tvar results = EngineTestKit.engine(new JupiterTestEngine()) //\n+\t\t\t\t.configurationParameter(ParameterizedTestExtension.ARGUMENT_MAX_LENGTH_KEY, \"2\") //\n+\t\t\t\t.selectors(selectMethod(TestCase.class, \"testWithCsvSource\", String.class.getName())) //\n+\t\t\t\t.execute();\n+\t\tresults.testEvents().assertThatEvents() //\n+\t\t\t\t.haveExactly(1, event(displayName(\"[1] argument=f\u2026\"), started())) //", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwNzcxMQ=="}, "originalCommit": {"oid": "60f1a15049fdd78123ba4f85475a2cf3510113bc"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwNTEzOQ==", "bodyText": "If I specify a max char count, I expect to get back a string of the given max length. For max = 5 and ... it'd yield:\n   \"123\" = \"123\"\n  \"1234\" = \"1234\"\n \"12345\" = \"12345\"\n\"123456\" = \"12...\" // with 3x char `.`\n\"123456\" = \"1234\u2026\" // with 1x char `\u2026`", "url": "https://github.com/junit-team/junit5/pull/2371#discussion_r464205139", "createdAt": "2020-08-03T05:46:53Z", "author": {"login": "sormuras"}, "path": "junit-jupiter-params/src/test/java/org/junit/jupiter/params/ParameterizedTestIntegrationTests.java", "diffHunk": "@@ -219,6 +220,17 @@ void executesLifecycleMethods() {\n \t\t// @formatter:on\n \t}\n \n+\t@Test\n+\tvoid truncatesArgumentsThatExceedMaxLength() {\n+\t\tvar results = EngineTestKit.engine(new JupiterTestEngine()) //\n+\t\t\t\t.configurationParameter(ParameterizedTestExtension.ARGUMENT_MAX_LENGTH_KEY, \"2\") //\n+\t\t\t\t.selectors(selectMethod(TestCase.class, \"testWithCsvSource\", String.class.getName())) //\n+\t\t\t\t.execute();\n+\t\tresults.testEvents().assertThatEvents() //\n+\t\t\t\t.haveExactly(1, event(displayName(\"[1] argument=f\u2026\"), started())) //", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwNzcxMQ=="}, "originalCommit": {"oid": "60f1a15049fdd78123ba4f85475a2cf3510113bc"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwNTQ3MA==", "bodyText": "I'm using the Unicode ellipsis character \u2026 which is just one character so it would be 1234\u2026 for 123456 in your example.", "url": "https://github.com/junit-team/junit5/pull/2371#discussion_r464205470", "createdAt": "2020-08-03T05:48:19Z", "author": {"login": "marcphilipp"}, "path": "junit-jupiter-params/src/test/java/org/junit/jupiter/params/ParameterizedTestIntegrationTests.java", "diffHunk": "@@ -219,6 +220,17 @@ void executesLifecycleMethods() {\n \t\t// @formatter:on\n \t}\n \n+\t@Test\n+\tvoid truncatesArgumentsThatExceedMaxLength() {\n+\t\tvar results = EngineTestKit.engine(new JupiterTestEngine()) //\n+\t\t\t\t.configurationParameter(ParameterizedTestExtension.ARGUMENT_MAX_LENGTH_KEY, \"2\") //\n+\t\t\t\t.selectors(selectMethod(TestCase.class, \"testWithCsvSource\", String.class.getName())) //\n+\t\t\t\t.execute();\n+\t\tresults.testEvents().assertThatEvents() //\n+\t\t\t\t.haveExactly(1, event(displayName(\"[1] argument=f\u2026\"), started())) //", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwNzcxMQ=="}, "originalCommit": {"oid": "60f1a15049fdd78123ba4f85475a2cf3510113bc"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIxMTEyNQ==", "bodyText": "Ah, I see. Nice trick to retain two more characters from the source string. I'll update the example above accordingly. I bet, the standard Windows shell displays a ? instead of \u2026 though...\nGist: a given max char count should not be exceeded. It's max. Not max+n. ;-)", "url": "https://github.com/junit-team/junit5/pull/2371#discussion_r464211125", "createdAt": "2020-08-03T06:09:14Z", "author": {"login": "sormuras"}, "path": "junit-jupiter-params/src/test/java/org/junit/jupiter/params/ParameterizedTestIntegrationTests.java", "diffHunk": "@@ -219,6 +220,17 @@ void executesLifecycleMethods() {\n \t\t// @formatter:on\n \t}\n \n+\t@Test\n+\tvoid truncatesArgumentsThatExceedMaxLength() {\n+\t\tvar results = EngineTestKit.engine(new JupiterTestEngine()) //\n+\t\t\t\t.configurationParameter(ParameterizedTestExtension.ARGUMENT_MAX_LENGTH_KEY, \"2\") //\n+\t\t\t\t.selectors(selectMethod(TestCase.class, \"testWithCsvSource\", String.class.getName())) //\n+\t\t\t\t.execute();\n+\t\tresults.testEvents().assertThatEvents() //\n+\t\t\t\t.haveExactly(1, event(displayName(\"[1] argument=f\u2026\"), started())) //", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwNzcxMQ=="}, "originalCommit": {"oid": "60f1a15049fdd78123ba4f85475a2cf3510113bc"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMxNzc5Nw==", "bodyText": "Gist: a given max char count should not be exceeded. It's max. Not max+n.\n\nI agree with that.", "url": "https://github.com/junit-team/junit5/pull/2371#discussion_r464317797", "createdAt": "2020-08-03T10:04:28Z", "author": {"login": "sbrannen"}, "path": "junit-jupiter-params/src/test/java/org/junit/jupiter/params/ParameterizedTestIntegrationTests.java", "diffHunk": "@@ -219,6 +220,17 @@ void executesLifecycleMethods() {\n \t\t// @formatter:on\n \t}\n \n+\t@Test\n+\tvoid truncatesArgumentsThatExceedMaxLength() {\n+\t\tvar results = EngineTestKit.engine(new JupiterTestEngine()) //\n+\t\t\t\t.configurationParameter(ParameterizedTestExtension.ARGUMENT_MAX_LENGTH_KEY, \"2\") //\n+\t\t\t\t.selectors(selectMethod(TestCase.class, \"testWithCsvSource\", String.class.getName())) //\n+\t\t\t\t.execute();\n+\t\tresults.testEvents().assertThatEvents() //\n+\t\t\t\t.haveExactly(1, event(displayName(\"[1] argument=f\u2026\"), started())) //", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwNzcxMQ=="}, "originalCommit": {"oid": "60f1a15049fdd78123ba4f85475a2cf3510113bc"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMzNTcwOA==", "bodyText": "So be it \ud83d\ude04\nBut we should make that clear in the documentation then.", "url": "https://github.com/junit-team/junit5/pull/2371#discussion_r464335708", "createdAt": "2020-08-03T10:44:19Z", "author": {"login": "juliette-derancourt"}, "path": "junit-jupiter-params/src/test/java/org/junit/jupiter/params/ParameterizedTestIntegrationTests.java", "diffHunk": "@@ -219,6 +220,17 @@ void executesLifecycleMethods() {\n \t\t// @formatter:on\n \t}\n \n+\t@Test\n+\tvoid truncatesArgumentsThatExceedMaxLength() {\n+\t\tvar results = EngineTestKit.engine(new JupiterTestEngine()) //\n+\t\t\t\t.configurationParameter(ParameterizedTestExtension.ARGUMENT_MAX_LENGTH_KEY, \"2\") //\n+\t\t\t\t.selectors(selectMethod(TestCase.class, \"testWithCsvSource\", String.class.getName())) //\n+\t\t\t\t.execute();\n+\t\tresults.testEvents().assertThatEvents() //\n+\t\t\t\t.haveExactly(1, event(displayName(\"[1] argument=f\u2026\"), started())) //", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwNzcxMQ=="}, "originalCommit": {"oid": "60f1a15049fdd78123ba4f85475a2cf3510113bc"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5OTc5NjQ3OnYy", "diffSide": "RIGHT", "path": "documentation/src/docs/asciidoc/release-notes/release-notes-5.7.0-M2.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDowNToyM1rOG6zvVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDowNToyM1rOG6zvVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMxODI5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Arguments of in display names of parameterized test invocations are now truncated if\n          \n          \n            \n            * Arguments in display names of parameterized test invocations are now truncated if", "url": "https://github.com/junit-team/junit5/pull/2371#discussion_r464318292", "createdAt": "2020-08-03T10:05:23Z", "author": {"login": "sbrannen"}, "path": "documentation/src/docs/asciidoc/release-notes/release-notes-5.7.0-M2.adoc", "diffHunk": "@@ -107,6 +107,10 @@ on GitHub.\n   thread in the cause of the `AssertionFailedError`.\n * New `TypedArgumentConverter` for converting one specific type to another, therefore\n   reducing boilerplate type checks compared to implementing `ArgumentConverter` directly.\n+* Added `ExtensionContext.getConfigurationParameter(String, Function<String, T>)`\n+  convenience method for reading transformed configuration parameters from extensions.\n+* Arguments of in display names of parameterized test invocations are now truncated if", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60f1a15049fdd78123ba4f85475a2cf3510113bc"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5OTgwNjkyOnYy", "diffSide": "RIGHT", "path": "junit-jupiter-params/src/main/java/org/junit/jupiter/params/ParameterizedTestNameFormatter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDowOTowMFrOG6z1_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMzo0MzoyN1rOG66DRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMxOTk5OA==", "bodyText": "Maybe add a comment that the unicode character is an ellipsis.", "url": "https://github.com/junit-team/junit5/pull/2371#discussion_r464319998", "createdAt": "2020-08-03T10:09:00Z", "author": {"login": "sbrannen"}, "path": "junit-jupiter-params/src/main/java/org/junit/jupiter/params/ParameterizedTestNameFormatter.java", "diffHunk": "@@ -91,10 +94,17 @@ private String argumentsPattern(Object[] arguments) {\n \t\tObject[] result = Arrays.copyOf(arguments, Math.min(arguments.length, formats.length), Object[].class);\n \t\tfor (int i = 0; i < result.length; i++) {\n \t\t\tif (formats[i] == null) {\n-\t\t\t\tresult[i] = StringUtils.nullSafeToString(arguments[i]);\n+\t\t\t\tresult[i] = truncateIfExceedsMaxLength(StringUtils.nullSafeToString(arguments[i]));\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n \n+\tprivate String truncateIfExceedsMaxLength(String argument) {\n+\t\tif (argument.length() > argumentMaxLength) {\n+\t\t\treturn argument.substring(0, argumentMaxLength - 1) + \"\\u2026\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60f1a15049fdd78123ba4f85475a2cf3510113bc"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQyMTcwMw==", "bodyText": "Done in 4f4707e.", "url": "https://github.com/junit-team/junit5/pull/2371#discussion_r464421703", "createdAt": "2020-08-03T13:43:27Z", "author": {"login": "marcphilipp"}, "path": "junit-jupiter-params/src/main/java/org/junit/jupiter/params/ParameterizedTestNameFormatter.java", "diffHunk": "@@ -91,10 +94,17 @@ private String argumentsPattern(Object[] arguments) {\n \t\tObject[] result = Arrays.copyOf(arguments, Math.min(arguments.length, formats.length), Object[].class);\n \t\tfor (int i = 0; i < result.length; i++) {\n \t\t\tif (formats[i] == null) {\n-\t\t\t\tresult[i] = StringUtils.nullSafeToString(arguments[i]);\n+\t\t\t\tresult[i] = truncateIfExceedsMaxLength(StringUtils.nullSafeToString(arguments[i]));\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n \n+\tprivate String truncateIfExceedsMaxLength(String argument) {\n+\t\tif (argument.length() > argumentMaxLength) {\n+\t\t\treturn argument.substring(0, argumentMaxLength - 1) + \"\\u2026\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMxOTk5OA=="}, "originalCommit": {"oid": "60f1a15049fdd78123ba4f85475a2cf3510113bc"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5OTgxMzM2OnYy", "diffSide": "RIGHT", "path": "documentation/src/docs/asciidoc/user-guide/writing-tests.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDoxMTowNVrOG6z5vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMDoxMTowNVrOG6z5vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMyMDk1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            NOTE: When including arguments in display names, their string representation is truncated\n          \n          \n            \n            if it exceeds the configured maximum length. The limit is configurable via the\n          \n          \n            \n            NOTE: When including arguments in display names, their string representations are truncated\n          \n          \n            \n            if they exceed the configured maximum length. The limit is configurable via the", "url": "https://github.com/junit-team/junit5/pull/2371#discussion_r464320959", "createdAt": "2020-08-03T10:11:05Z", "author": {"login": "sbrannen"}, "path": "documentation/src/docs/asciidoc/user-guide/writing-tests.adoc", "diffHunk": "@@ -1563,6 +1563,11 @@ The following placeholders are supported within custom display names.\n | `{0}`, `{1}`, ...        | an individual argument\n |===\n \n+NOTE: When including arguments in display names, their string representation is truncated\n+if it exceeds the configured maximum length. The limit is configurable via the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60f1a15049fdd78123ba4f85475a2cf3510113bc"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4085, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}