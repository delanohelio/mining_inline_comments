{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5NDUyNzI1", "number": 2460, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjozNjoxOVrOE-vNjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMzo1MjoyMFrOFLSdKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjIwNjg0OnYy", "diffSide": "RIGHT", "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/TestPlan.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjozNjoxOVrOH8Dedw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzowNTowNFrOH8EyRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjczMzU1OQ==", "bodyText": "This has not changed, but how is this value of 16 chosen?", "url": "https://github.com/junit-team/junit5/pull/2460#discussion_r532733559", "createdAt": "2020-11-30T16:36:19Z", "author": {"login": "mmerdes"}, "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/TestPlan.java", "diffHunk": "@@ -101,11 +102,11 @@ protected TestPlan(boolean containsTests) {\n \t@API(status = DEPRECATED, since = \"1.4\")\n \tpublic void add(TestIdentifier testIdentifier) {\n \t\tPreconditions.notNull(testIdentifier, \"testIdentifier must not be null\");\n-\t\tallIdentifiers.put(testIdentifier.getUniqueId(), testIdentifier);\n-\t\tif (testIdentifier.getParentId().isPresent()) {\n-\t\t\tString parentId = testIdentifier.getParentId().get();\n+\t\tallIdentifiers.put(testIdentifier.getUniqueIdObject(), testIdentifier);\n+\t\tif (testIdentifier.getParentIdObject().isPresent()) {\n+\t\t\tUniqueId parentId = testIdentifier.getParentIdObject().get();\n \t\t\tSet<TestIdentifier> directChildren = children.computeIfAbsent(parentId,\n-\t\t\t\tkey -> Collections.synchronizedSet(new LinkedHashSet<>(16)));\n+\t\t\t\tkey -> synchronizedSet(new LinkedHashSet<>(16)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9743eb1808b3a991cfe672d9333d81b0f5fc1118"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc1NTAxNA==", "bodyText": "Probably just a wild guess that assumes most test classes have more than 8 children.", "url": "https://github.com/junit-team/junit5/pull/2460#discussion_r532755014", "createdAt": "2020-11-30T17:05:04Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/TestPlan.java", "diffHunk": "@@ -101,11 +102,11 @@ protected TestPlan(boolean containsTests) {\n \t@API(status = DEPRECATED, since = \"1.4\")\n \tpublic void add(TestIdentifier testIdentifier) {\n \t\tPreconditions.notNull(testIdentifier, \"testIdentifier must not be null\");\n-\t\tallIdentifiers.put(testIdentifier.getUniqueId(), testIdentifier);\n-\t\tif (testIdentifier.getParentId().isPresent()) {\n-\t\t\tString parentId = testIdentifier.getParentId().get();\n+\t\tallIdentifiers.put(testIdentifier.getUniqueIdObject(), testIdentifier);\n+\t\tif (testIdentifier.getParentIdObject().isPresent()) {\n+\t\t\tUniqueId parentId = testIdentifier.getParentIdObject().get();\n \t\t\tSet<TestIdentifier> directChildren = children.computeIfAbsent(parentId,\n-\t\t\t\tkey -> Collections.synchronizedSet(new LinkedHashSet<>(16)));\n+\t\t\t\tkey -> synchronizedSet(new LinkedHashSet<>(16)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjczMzU1OQ=="}, "originalCommit": {"oid": "9743eb1808b3a991cfe672d9333d81b0f5fc1118"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3Mzc3MTEzOnYy", "diffSide": "RIGHT", "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/NodeTestTask.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMzo0MTo0NVrOIOXocA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxODoyMTo1OVrOIQcd6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkzODE2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate interface DynamicTaskState {\n          \n          \n            \n            \t@FunctionalInterface\n          \n          \n            \n            \tprivate interface DynamicTaskState {", "url": "https://github.com/junit-team/junit5/pull/2460#discussion_r551938160", "createdAt": "2021-01-05T13:41:45Z", "author": {"login": "sbrannen"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/NodeTestTask.java", "diffHunk": "@@ -231,4 +245,20 @@ public void awaitFinished() throws InterruptedException {\n \t\t}\n \t}\n \n+\tprivate interface DynamicTaskState {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "266e8f7249e0d1182b5e50e355bf4ac1840d91e4"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM4MDAzNg==", "bodyText": "Do you feel strongly about this? This is only used internally here and not user facing so we don't have to guarantee it will stay a SAM type (pun intended).", "url": "https://github.com/junit-team/junit5/pull/2460#discussion_r553380036", "createdAt": "2021-01-07T14:58:46Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/NodeTestTask.java", "diffHunk": "@@ -231,4 +245,20 @@ public void awaitFinished() throws InterruptedException {\n \t\t}\n \t}\n \n+\tprivate interface DynamicTaskState {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkzODE2MA=="}, "originalCommit": {"oid": "266e8f7249e0d1182b5e50e355bf4ac1840d91e4"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg1MDE1Mg==", "bodyText": "Well, we use it as a functional interface at the moment. So I'm in favor of annotating it as such, for the sake of the reader/maintainers.\nSince it's not public, we could safely change our minds later if necessary.", "url": "https://github.com/junit-team/junit5/pull/2460#discussion_r553850152", "createdAt": "2021-01-08T10:00:53Z", "author": {"login": "sbrannen"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/NodeTestTask.java", "diffHunk": "@@ -231,4 +245,20 @@ public void awaitFinished() throws InterruptedException {\n \t\t}\n \t}\n \n+\tprivate interface DynamicTaskState {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkzODE2MA=="}, "originalCommit": {"oid": "266e8f7249e0d1182b5e50e355bf4ac1840d91e4"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDExNDUzOQ==", "bodyText": "Done in fad47fd.", "url": "https://github.com/junit-team/junit5/pull/2460#discussion_r554114539", "createdAt": "2021-01-08T18:21:59Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/NodeTestTask.java", "diffHunk": "@@ -231,4 +245,20 @@ public void awaitFinished() throws InterruptedException {\n \t\t}\n \t}\n \n+\tprivate interface DynamicTaskState {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkzODE2MA=="}, "originalCommit": {"oid": "266e8f7249e0d1182b5e50e355bf4ac1840d91e4"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3Mzc3NjM5OnYy", "diffSide": "RIGHT", "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/TestIdentifier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMzo0MzowMVrOIOXrfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMzo0MzowMVrOIOXrfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkzODk0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * class match the files that {@code TestIdentifier} had prior to 5.8.\n          \n          \n            \n            \t * class match the fields that {@code TestIdentifier} had prior to 5.8.", "url": "https://github.com/junit-team/junit5/pull/2460#discussion_r551938942", "createdAt": "2021-01-05T13:43:01Z", "author": {"login": "sbrannen"}, "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/TestIdentifier.java", "diffHunk": "@@ -216,4 +272,75 @@ public String toString() {\n \t\t// @formatter:on\n \t}\n \n+\tprivate void writeObject(ObjectOutputStream s) throws IOException {\n+\t\tSerializedForm serializedForm = new SerializedForm(this);\n+\t\tserializedForm.serialize(s);\n+\t}\n+\n+\tprivate void readObject(ObjectInputStream s) throws ClassNotFoundException, IOException {\n+\t\tSerializedForm serializedForm = SerializedForm.deserialize(s);\n+\t\tuniqueId = UniqueId.parse(serializedForm.uniqueId);\n+\t\tdisplayName = serializedForm.displayName;\n+\t\tsource = serializedForm.source;\n+\t\ttags = serializedForm.tags;\n+\t\ttype = serializedForm.type;\n+\t\tparentId = UniqueId.parse(serializedForm.parentId);\n+\t\tlegacyReportingName = serializedForm.legacyReportingName;\n+\t}\n+\n+\t/**\n+\t * Represents the serialized output of {@code TestIdentifier}. The fields on this\n+\t * class match the files that {@code TestIdentifier} had prior to 5.8.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "266e8f7249e0d1182b5e50e355bf4ac1840d91e4"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3Mzc3OTYzOnYy", "diffSide": "RIGHT", "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/TestIdentifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMzo0Mzo1NVrOIOXtcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxNTowMTo1MVrOIPvwsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkzOTQ0MQ==", "bodyText": "No need to make the constructor and methods public in this local class.", "url": "https://github.com/junit-team/junit5/pull/2460#discussion_r551939441", "createdAt": "2021-01-05T13:43:55Z", "author": {"login": "sbrannen"}, "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/TestIdentifier.java", "diffHunk": "@@ -216,4 +272,75 @@ public String toString() {\n \t\t// @formatter:on\n \t}\n \n+\tprivate void writeObject(ObjectOutputStream s) throws IOException {\n+\t\tSerializedForm serializedForm = new SerializedForm(this);\n+\t\tserializedForm.serialize(s);\n+\t}\n+\n+\tprivate void readObject(ObjectInputStream s) throws ClassNotFoundException, IOException {\n+\t\tSerializedForm serializedForm = SerializedForm.deserialize(s);\n+\t\tuniqueId = UniqueId.parse(serializedForm.uniqueId);\n+\t\tdisplayName = serializedForm.displayName;\n+\t\tsource = serializedForm.source;\n+\t\ttags = serializedForm.tags;\n+\t\ttype = serializedForm.type;\n+\t\tparentId = UniqueId.parse(serializedForm.parentId);\n+\t\tlegacyReportingName = serializedForm.legacyReportingName;\n+\t}\n+\n+\t/**\n+\t * Represents the serialized output of {@code TestIdentifier}. The fields on this\n+\t * class match the files that {@code TestIdentifier} had prior to 5.8.\n+\t */\n+\tprivate static class SerializedForm implements Serializable {\n+\n+\t\tprivate static final long serialVersionUID = 1L;\n+\n+\t\tprivate final String uniqueId;\n+\t\tprivate final String parentId;\n+\t\tprivate final String displayName;\n+\t\tprivate final String legacyReportingName;\n+\t\tprivate final TestSource source;\n+\t\tprivate final Set<TestTag> tags;\n+\t\tprivate final Type type;\n+\n+\t\tpublic SerializedForm(TestIdentifier testIdentifier) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "266e8f7249e0d1182b5e50e355bf4ac1840d91e4"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM4MjA2Nw==", "bodyText": "Done in ffbafa6.", "url": "https://github.com/junit-team/junit5/pull/2460#discussion_r553382067", "createdAt": "2021-01-07T15:01:51Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/TestIdentifier.java", "diffHunk": "@@ -216,4 +272,75 @@ public String toString() {\n \t\t// @formatter:on\n \t}\n \n+\tprivate void writeObject(ObjectOutputStream s) throws IOException {\n+\t\tSerializedForm serializedForm = new SerializedForm(this);\n+\t\tserializedForm.serialize(s);\n+\t}\n+\n+\tprivate void readObject(ObjectInputStream s) throws ClassNotFoundException, IOException {\n+\t\tSerializedForm serializedForm = SerializedForm.deserialize(s);\n+\t\tuniqueId = UniqueId.parse(serializedForm.uniqueId);\n+\t\tdisplayName = serializedForm.displayName;\n+\t\tsource = serializedForm.source;\n+\t\ttags = serializedForm.tags;\n+\t\ttype = serializedForm.type;\n+\t\tparentId = UniqueId.parse(serializedForm.parentId);\n+\t\tlegacyReportingName = serializedForm.legacyReportingName;\n+\t}\n+\n+\t/**\n+\t * Represents the serialized output of {@code TestIdentifier}. The fields on this\n+\t * class match the files that {@code TestIdentifier} had prior to 5.8.\n+\t */\n+\tprivate static class SerializedForm implements Serializable {\n+\n+\t\tprivate static final long serialVersionUID = 1L;\n+\n+\t\tprivate final String uniqueId;\n+\t\tprivate final String parentId;\n+\t\tprivate final String displayName;\n+\t\tprivate final String legacyReportingName;\n+\t\tprivate final TestSource source;\n+\t\tprivate final Set<TestTag> tags;\n+\t\tprivate final Type type;\n+\n+\t\tpublic SerializedForm(TestIdentifier testIdentifier) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkzOTQ0MQ=="}, "originalCommit": {"oid": "266e8f7249e0d1182b5e50e355bf4ac1840d91e4"}, "originalPosition": 210}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3Mzc4OTUxOnYy", "diffSide": "RIGHT", "path": "junit-vintage-engine/src/main/java/org/junit/vintage/engine/descriptor/DescriptionUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMzo0NjozMVrOIOXzPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxMTowNjo1MFrOIQOQzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk0MDkyNQ==", "bodyText": "I saw in the commit comment that this algorithm avoids the use of a RegEx if the display name looks right (or something to that effect).\nHow confident are you that this algorithm works well for custom JUnit 4 runners?", "url": "https://github.com/junit-team/junit5/pull/2460#discussion_r551940925", "createdAt": "2021-01-05T13:46:31Z", "author": {"login": "sbrannen"}, "path": "junit-vintage-engine/src/main/java/org/junit/vintage/engine/descriptor/DescriptionUtils.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.vintage.engine.descriptor;\n+\n+import org.apiguardian.api.API;\n+import org.junit.runner.Description;\n+\n+@API(status = API.Status.INTERNAL, since = \"5.8\")\n+public class DescriptionUtils {\n+\n+\tprivate DescriptionUtils() {\n+\t}\n+\n+\tpublic static String getMethodName(Description description) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "266e8f7249e0d1182b5e50e355bf4ac1840d91e4"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM3ODI0Mw==", "bodyText": "If the regex works for custom runners (it's hardcoded in Description), so should this custom algorithm.", "url": "https://github.com/junit-team/junit5/pull/2460#discussion_r553378243", "createdAt": "2021-01-07T14:56:02Z", "author": {"login": "marcphilipp"}, "path": "junit-vintage-engine/src/main/java/org/junit/vintage/engine/descriptor/DescriptionUtils.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.vintage.engine.descriptor;\n+\n+import org.apiguardian.api.API;\n+import org.junit.runner.Description;\n+\n+@API(status = API.Status.INTERNAL, since = \"5.8\")\n+public class DescriptionUtils {\n+\n+\tprivate DescriptionUtils() {\n+\t}\n+\n+\tpublic static String getMethodName(Description description) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk0MDkyNQ=="}, "originalCommit": {"oid": "266e8f7249e0d1182b5e50e355bf4ac1840d91e4"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg4MTgwNg==", "bodyText": "OK.", "url": "https://github.com/junit-team/junit5/pull/2460#discussion_r553881806", "createdAt": "2021-01-08T11:06:50Z", "author": {"login": "sbrannen"}, "path": "junit-vintage-engine/src/main/java/org/junit/vintage/engine/descriptor/DescriptionUtils.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.vintage.engine.descriptor;\n+\n+import org.apiguardian.api.API;\n+import org.junit.runner.Description;\n+\n+@API(status = API.Status.INTERNAL, since = \"5.8\")\n+public class DescriptionUtils {\n+\n+\tprivate DescriptionUtils() {\n+\t}\n+\n+\tpublic static String getMethodName(Description description) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk0MDkyNQ=="}, "originalCommit": {"oid": "266e8f7249e0d1182b5e50e355bf4ac1840d91e4"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3Mzc5NzI0OnYy", "diffSide": "RIGHT", "path": "junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/IsPotentialJUnit4TestClass.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMzo0ODozNVrOIOX3tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxMTowODoyN1rOIQOTqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk0MjA2OA==", "bodyText": "Did we decide on Ant-style pattern matching for wildcards in the consumers attribute?\nI honestly don't recall.", "url": "https://github.com/junit-team/junit5/pull/2460#discussion_r551942068", "createdAt": "2021-01-05T13:48:35Z", "author": {"login": "sbrannen"}, "path": "junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/IsPotentialJUnit4TestClass.java", "diffHunk": "@@ -10,16 +10,20 @@\n \n package org.junit.vintage.engine.discovery;\n \n+import static org.apiguardian.api.API.Status.INTERNAL;\n import static org.junit.platform.commons.util.ReflectionUtils.isAbstract;\n import static org.junit.platform.commons.util.ReflectionUtils.isInnerClass;\n import static org.junit.platform.commons.util.ReflectionUtils.isPublic;\n \n import java.util.function.Predicate;\n \n+import org.apiguardian.api.API;\n+\n /**\n  * @since 4.12\n  */\n-class IsPotentialJUnit4TestClass implements Predicate<Class<?>> {\n+@API(status = INTERNAL, since = \"5.8\", consumers = \"org.junit.vintage.**\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "266e8f7249e0d1182b5e50e355bf4ac1840d91e4"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM3ODY0MA==", "bodyText": "I don't think we made a decision but I figured this would at least be unambiguous.", "url": "https://github.com/junit-team/junit5/pull/2460#discussion_r553378640", "createdAt": "2021-01-07T14:56:37Z", "author": {"login": "marcphilipp"}, "path": "junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/IsPotentialJUnit4TestClass.java", "diffHunk": "@@ -10,16 +10,20 @@\n \n package org.junit.vintage.engine.discovery;\n \n+import static org.apiguardian.api.API.Status.INTERNAL;\n import static org.junit.platform.commons.util.ReflectionUtils.isAbstract;\n import static org.junit.platform.commons.util.ReflectionUtils.isInnerClass;\n import static org.junit.platform.commons.util.ReflectionUtils.isPublic;\n \n import java.util.function.Predicate;\n \n+import org.apiguardian.api.API;\n+\n /**\n  * @since 4.12\n  */\n-class IsPotentialJUnit4TestClass implements Predicate<Class<?>> {\n+@API(status = INTERNAL, since = \"5.8\", consumers = \"org.junit.vintage.**\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk0MjA2OA=="}, "originalCommit": {"oid": "266e8f7249e0d1182b5e50e355bf4ac1840d91e4"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg4MjUzNg==", "bodyText": "Fair enough. We can certainly leave it like for now and change it later if necessary based on tooling support or clearer specifications in API Guardian.", "url": "https://github.com/junit-team/junit5/pull/2460#discussion_r553882536", "createdAt": "2021-01-08T11:08:27Z", "author": {"login": "sbrannen"}, "path": "junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/IsPotentialJUnit4TestClass.java", "diffHunk": "@@ -10,16 +10,20 @@\n \n package org.junit.vintage.engine.discovery;\n \n+import static org.apiguardian.api.API.Status.INTERNAL;\n import static org.junit.platform.commons.util.ReflectionUtils.isAbstract;\n import static org.junit.platform.commons.util.ReflectionUtils.isInnerClass;\n import static org.junit.platform.commons.util.ReflectionUtils.isPublic;\n \n import java.util.function.Predicate;\n \n+import org.apiguardian.api.API;\n+\n /**\n  * @since 4.12\n  */\n-class IsPotentialJUnit4TestClass implements Predicate<Class<?>> {\n+@API(status = INTERNAL, since = \"5.8\", consumers = \"org.junit.vintage.**\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk0MjA2OA=="}, "originalCommit": {"oid": "266e8f7249e0d1182b5e50e355bf4ac1840d91e4"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MzgxMDMyOnYy", "diffSide": "RIGHT", "path": "junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/RunnerTestDescriptorPostProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMzo1MjoyMFrOIOX_bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxMTowNzoxNFrOIQORfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk0NDA0Nw==", "bodyText": "At a first glance, this looked a bit suspect, but I suppose that VintageTestDescriptor#getType() will never conceivably return Type.CONTAINER_AND_TEST (not even in a future release of Vintage) -- right?", "url": "https://github.com/junit-team/junit5/pull/2460#discussion_r551944047", "createdAt": "2021-01-05T13:52:20Z", "author": {"login": "sbrannen"}, "path": "junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/RunnerTestDescriptorPostProcessor.java", "diffHunk": "@@ -35,18 +35,17 @@\n \n \tprivate final UniqueIdReader uniqueIdReader = new UniqueIdReader();\n \tprivate final UniqueIdStringifier uniqueIdStringifier = new UniqueIdStringifier();\n-\tprivate final TestSourceProvider testSourceProvider;\n-\n-\tpublic RunnerTestDescriptorPostProcessor(TestSourceProvider testSourceProvider) {\n-\t\tthis.testSourceProvider = testSourceProvider;\n-\t}\n+\tprivate final TestSourceProvider testSourceProvider = new TestSourceProvider();\n \n \tvoid applyFiltersAndCreateDescendants(RunnerTestDescriptor runnerTestDescriptor) {\n \t\taddChildrenRecursively(runnerTestDescriptor);\n \t\trunnerTestDescriptor.applyFilters(this::addChildrenRecursively);\n \t}\n \n \tprivate void addChildrenRecursively(VintageTestDescriptor parent) {\n+\t\tif (parent.getDescription().isTest()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "266e8f7249e0d1182b5e50e355bf4ac1840d91e4"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM3OTA0Mg==", "bodyText": "No, and Description.isTest() returns true iff it doesn't have children which is what the rest of this method is about.", "url": "https://github.com/junit-team/junit5/pull/2460#discussion_r553379042", "createdAt": "2021-01-07T14:57:13Z", "author": {"login": "marcphilipp"}, "path": "junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/RunnerTestDescriptorPostProcessor.java", "diffHunk": "@@ -35,18 +35,17 @@\n \n \tprivate final UniqueIdReader uniqueIdReader = new UniqueIdReader();\n \tprivate final UniqueIdStringifier uniqueIdStringifier = new UniqueIdStringifier();\n-\tprivate final TestSourceProvider testSourceProvider;\n-\n-\tpublic RunnerTestDescriptorPostProcessor(TestSourceProvider testSourceProvider) {\n-\t\tthis.testSourceProvider = testSourceProvider;\n-\t}\n+\tprivate final TestSourceProvider testSourceProvider = new TestSourceProvider();\n \n \tvoid applyFiltersAndCreateDescendants(RunnerTestDescriptor runnerTestDescriptor) {\n \t\taddChildrenRecursively(runnerTestDescriptor);\n \t\trunnerTestDescriptor.applyFilters(this::addChildrenRecursively);\n \t}\n \n \tprivate void addChildrenRecursively(VintageTestDescriptor parent) {\n+\t\tif (parent.getDescription().isTest()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk0NDA0Nw=="}, "originalCommit": {"oid": "266e8f7249e0d1182b5e50e355bf4ac1840d91e4"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg4MTk4Mw==", "bodyText": "OK", "url": "https://github.com/junit-team/junit5/pull/2460#discussion_r553881983", "createdAt": "2021-01-08T11:07:14Z", "author": {"login": "sbrannen"}, "path": "junit-vintage-engine/src/main/java/org/junit/vintage/engine/discovery/RunnerTestDescriptorPostProcessor.java", "diffHunk": "@@ -35,18 +35,17 @@\n \n \tprivate final UniqueIdReader uniqueIdReader = new UniqueIdReader();\n \tprivate final UniqueIdStringifier uniqueIdStringifier = new UniqueIdStringifier();\n-\tprivate final TestSourceProvider testSourceProvider;\n-\n-\tpublic RunnerTestDescriptorPostProcessor(TestSourceProvider testSourceProvider) {\n-\t\tthis.testSourceProvider = testSourceProvider;\n-\t}\n+\tprivate final TestSourceProvider testSourceProvider = new TestSourceProvider();\n \n \tvoid applyFiltersAndCreateDescendants(RunnerTestDescriptor runnerTestDescriptor) {\n \t\taddChildrenRecursively(runnerTestDescriptor);\n \t\trunnerTestDescriptor.applyFilters(this::addChildrenRecursively);\n \t}\n \n \tprivate void addChildrenRecursively(VintageTestDescriptor parent) {\n+\t\tif (parent.getDescription().isTest()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk0NDA0Nw=="}, "originalCommit": {"oid": "266e8f7249e0d1182b5e50e355bf4ac1840d91e4"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4109, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}