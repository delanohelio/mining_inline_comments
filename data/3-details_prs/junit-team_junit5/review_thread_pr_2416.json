{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwNDA0MjA5", "number": 2416, "reviewThreads": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNTowNjoyMlrOFH0wVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QxODo0Njo0OFrOFXmuOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNzQ4Njk0OnYy", "diffSide": "RIGHT", "path": "junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteTestDescriptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxNTowNjoyMlrOIJbZUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QxOTo0OToyNlrOILt4Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc1Njk0Nw==", "bodyText": "Consider explicitly disabling the discovery of launcher-discovery listeners via SPI when introduced by #2457.", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r546756947", "createdAt": "2020-12-21T15:06:22Z", "author": {"login": "mpkorstanje"}, "path": "junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteTestDescriptor.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.suite.engine;\n+\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import org.junit.platform.commons.util.AnnotationUtils;\n+import org.junit.platform.commons.util.Preconditions;\n+import org.junit.platform.commons.util.StringUtils;\n+import org.junit.platform.engine.TestDescriptor;\n+import org.junit.platform.engine.UniqueId;\n+import org.junit.platform.engine.support.descriptor.AbstractTestDescriptor;\n+import org.junit.platform.engine.support.descriptor.ClassSource;\n+import org.junit.platform.launcher.Launcher;\n+import org.junit.platform.launcher.LauncherDiscoveryRequest;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+import org.junit.platform.launcher.core.LauncherConfig;\n+import org.junit.platform.launcher.core.LauncherFactory;\n+import org.junit.platform.suite.api.SuiteDisplayName;\n+\n+/**\n+ * {@link TestDescriptor} for tests based on the JUnit Platform Launcher API.\n+ *\n+ * <h3>Default Display Names</h3>\n+ *\n+ * <p>The default display name is the simple name of the class.\n+ *\n+ * @since 1.8\n+ * @see SuiteDisplayName\n+ */\n+final class SuiteTestDescriptor extends AbstractTestDescriptor {\n+\n+\tstatic final String SEGMENT_TYPE = \"suite\";\n+\n+\tprivate final SuiteLauncherDiscoveryRequestBuilder requestBuilder;\n+\n+\tprivate TestPlan testPlan;\n+\tprivate Launcher launcher;\n+\n+\tSuiteTestDescriptor(UniqueId id, Class<?> suiteClass, SuiteConfiguration configuration) {\n+\t\tsuper(id, getSuiteDisplayName(suiteClass), ClassSource.from(suiteClass));\n+\t\t// @formatter:off\n+\t\tUniqueId requestingSuiteId = requireNoCycles(configuration).parentSuiteId()\n+\t\t\t\t.map(parentId -> UniqueIdHelper.append(parentId, getUniqueId()))\n+\t\t\t\t.orElseGet(this::getUniqueId);\n+\t\t// @formatter:on\n+\t\tSuiteLauncherDiscoveryRequestBuilder requestBuilder = new SuiteLauncherDiscoveryRequestBuilder();\n+\t\tthis.requestBuilder = requestBuilder.configureRequestingSuiteId(requestingSuiteId);\n+\t}\n+\n+\tprivate SuiteConfiguration requireNoCycles(SuiteConfiguration configuration) {\n+\t\tconfiguration.parentSuiteId().ifPresent(parentSuiteId -> {\n+\t\t\tUniqueId fullSuiteId = UniqueIdHelper.append(parentSuiteId, getUniqueId());\n+\t\t\tSupplier<String> message = () -> String.format(\n+\t\t\t\t\"Configuration error: The suite configuration may not contain a cycle [%s]\", fullSuiteId);\n+\t\t\tPreconditions.condition(!UniqueIdHelper.containCycle(fullSuiteId, SEGMENT_TYPE), message);\n+\t\t});\n+\t\treturn configuration;\n+\t}\n+\n+\tUniqueId uniqueIdInSuite(TestIdentifier testDescriptor) {\n+\t\tPreconditions.notNull(testDescriptor, \"uniqueId most not be null\");\n+\t\tUniqueId uniqueIdInTestPlan = UniqueId.parse(testDescriptor.getUniqueId());\n+\t\tUniqueId uniqueIdInSuite = getUniqueId();\n+\t\treturn UniqueIdHelper.append(uniqueIdInSuite, uniqueIdInTestPlan);\n+\t}\n+\n+\tSuiteTestDescriptor addDiscoveryRequestFrom(Class<?> testClass) {\n+\t\tPreconditions.condition(testPlan == null, \"discovery request can not be modified after discovery\");\n+\t\trequestBuilder.addRequestFrom(testClass);\n+\t\treturn this;\n+\t}\n+\n+\tSuiteTestDescriptor addDiscoveryRequestFrom(UniqueId uniqueId) {\n+\t\tPreconditions.condition(testPlan == null, \"discovery request can not be modified after discovery\");\n+\t\trequestBuilder.addRequestFrom(uniqueId);\n+\t\treturn this;\n+\t}\n+\n+\tvoid discover() {\n+\t\tPreconditions.condition(testPlan == null, \"discovery can only happen once\");\n+\n+\t\tLauncherDiscoveryRequest request = requestBuilder.build();\n+\t\t// @formatter:off\n+\t\tLauncherConfig launcherConfig = LauncherConfig.builder()\n+\t\t\t\t.enableTestExecutionListenerAutoRegistration(false)\n+\t\t\t\t.enablePostDiscoveryFilterAutoRegistration(false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e024c150baec914fc601cd4de0cb8ec2e2439ec6"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1Njk1MA==", "bodyText": "We can keep this enabled. While we try to hide that a suite is discovering and executing tests using the junit platform internally, we don't need to hide that launcher discovery is started multiple times.", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r549156950", "createdAt": "2020-12-27T19:49:26Z", "author": {"login": "mpkorstanje"}, "path": "junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteTestDescriptor.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.suite.engine;\n+\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import org.junit.platform.commons.util.AnnotationUtils;\n+import org.junit.platform.commons.util.Preconditions;\n+import org.junit.platform.commons.util.StringUtils;\n+import org.junit.platform.engine.TestDescriptor;\n+import org.junit.platform.engine.UniqueId;\n+import org.junit.platform.engine.support.descriptor.AbstractTestDescriptor;\n+import org.junit.platform.engine.support.descriptor.ClassSource;\n+import org.junit.platform.launcher.Launcher;\n+import org.junit.platform.launcher.LauncherDiscoveryRequest;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+import org.junit.platform.launcher.core.LauncherConfig;\n+import org.junit.platform.launcher.core.LauncherFactory;\n+import org.junit.platform.suite.api.SuiteDisplayName;\n+\n+/**\n+ * {@link TestDescriptor} for tests based on the JUnit Platform Launcher API.\n+ *\n+ * <h3>Default Display Names</h3>\n+ *\n+ * <p>The default display name is the simple name of the class.\n+ *\n+ * @since 1.8\n+ * @see SuiteDisplayName\n+ */\n+final class SuiteTestDescriptor extends AbstractTestDescriptor {\n+\n+\tstatic final String SEGMENT_TYPE = \"suite\";\n+\n+\tprivate final SuiteLauncherDiscoveryRequestBuilder requestBuilder;\n+\n+\tprivate TestPlan testPlan;\n+\tprivate Launcher launcher;\n+\n+\tSuiteTestDescriptor(UniqueId id, Class<?> suiteClass, SuiteConfiguration configuration) {\n+\t\tsuper(id, getSuiteDisplayName(suiteClass), ClassSource.from(suiteClass));\n+\t\t// @formatter:off\n+\t\tUniqueId requestingSuiteId = requireNoCycles(configuration).parentSuiteId()\n+\t\t\t\t.map(parentId -> UniqueIdHelper.append(parentId, getUniqueId()))\n+\t\t\t\t.orElseGet(this::getUniqueId);\n+\t\t// @formatter:on\n+\t\tSuiteLauncherDiscoveryRequestBuilder requestBuilder = new SuiteLauncherDiscoveryRequestBuilder();\n+\t\tthis.requestBuilder = requestBuilder.configureRequestingSuiteId(requestingSuiteId);\n+\t}\n+\n+\tprivate SuiteConfiguration requireNoCycles(SuiteConfiguration configuration) {\n+\t\tconfiguration.parentSuiteId().ifPresent(parentSuiteId -> {\n+\t\t\tUniqueId fullSuiteId = UniqueIdHelper.append(parentSuiteId, getUniqueId());\n+\t\t\tSupplier<String> message = () -> String.format(\n+\t\t\t\t\"Configuration error: The suite configuration may not contain a cycle [%s]\", fullSuiteId);\n+\t\t\tPreconditions.condition(!UniqueIdHelper.containCycle(fullSuiteId, SEGMENT_TYPE), message);\n+\t\t});\n+\t\treturn configuration;\n+\t}\n+\n+\tUniqueId uniqueIdInSuite(TestIdentifier testDescriptor) {\n+\t\tPreconditions.notNull(testDescriptor, \"uniqueId most not be null\");\n+\t\tUniqueId uniqueIdInTestPlan = UniqueId.parse(testDescriptor.getUniqueId());\n+\t\tUniqueId uniqueIdInSuite = getUniqueId();\n+\t\treturn UniqueIdHelper.append(uniqueIdInSuite, uniqueIdInTestPlan);\n+\t}\n+\n+\tSuiteTestDescriptor addDiscoveryRequestFrom(Class<?> testClass) {\n+\t\tPreconditions.condition(testPlan == null, \"discovery request can not be modified after discovery\");\n+\t\trequestBuilder.addRequestFrom(testClass);\n+\t\treturn this;\n+\t}\n+\n+\tSuiteTestDescriptor addDiscoveryRequestFrom(UniqueId uniqueId) {\n+\t\tPreconditions.condition(testPlan == null, \"discovery request can not be modified after discovery\");\n+\t\trequestBuilder.addRequestFrom(uniqueId);\n+\t\treturn this;\n+\t}\n+\n+\tvoid discover() {\n+\t\tPreconditions.condition(testPlan == null, \"discovery can only happen once\");\n+\n+\t\tLauncherDiscoveryRequest request = requestBuilder.build();\n+\t\t// @formatter:off\n+\t\tLauncherConfig launcherConfig = LauncherConfig.builder()\n+\t\t\t\t.enableTestExecutionListenerAutoRegistration(false)\n+\t\t\t\t.enablePostDiscoveryFilterAutoRegistration(false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njc1Njk0Nw=="}, "originalCommit": {"oid": "e024c150baec914fc601cd4de0cb8ec2e2439ec6"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NjQ1NjgyOnYy", "diffSide": "RIGHT", "path": "junit-platform-suite/junit-platform-suite.gradle.kts", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQxNjo0OTo1NlrOINYN3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wM1QxMjo1ODo0MlrOINejVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDg5OTE2Ng==", "bodyText": "Shouldn't this be runtimeOnly?", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r550899166", "createdAt": "2021-01-02T16:49:56Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-suite/junit-platform-suite.gradle.kts", "diffHunk": "@@ -0,0 +1,13 @@\n+plugins {\n+\t`java-library-conventions`\n+}\n+\n+description = \"JUnit Platform Suite (Aggregator)\"\n+\n+dependencies {\n+\tinternal(platform(project(\":dependencies\")))\n+\n+\tapi(platform(project(\":junit-bom\")))\n+\tapi(project(\":junit-platform-suite-api\"))\n+\tapi(project(\":junit-platform-suite-engine\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b227adb3283af8b8b40ebab7b979cdd55608f1b2"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkxMjUyNA==", "bodyText": "When comparing to junit-jupiter you would expect so yes.\nHowever the junit-platform-suite module descriptor has a transitive dependency on opentest4j through junit-platform-suite-engine -> junit-platform-engine. When using runtimeOnly this dependency is not available to compile the module.\nUsing runtimeOnly does work for junit-jupiter because opentest4j is also available through junit-jupiter-api. However junit-platform-suite-api does not have a dependency on opentest4j.", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r550912524", "createdAt": "2021-01-02T19:25:00Z", "author": {"login": "mpkorstanje"}, "path": "junit-platform-suite/junit-platform-suite.gradle.kts", "diffHunk": "@@ -0,0 +1,13 @@\n+plugins {\n+\t`java-library-conventions`\n+}\n+\n+description = \"JUnit Platform Suite (Aggregator)\"\n+\n+dependencies {\n+\tinternal(platform(project(\":dependencies\")))\n+\n+\tapi(platform(project(\":junit-bom\")))\n+\tapi(project(\":junit-platform-suite-api\"))\n+\tapi(project(\":junit-platform-suite-engine\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDg5OTE2Ng=="}, "originalCommit": {"oid": "b227adb3283af8b8b40ebab7b979cdd55608f1b2"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkxOTUyNA==", "bodyText": "I see, but implementation should work, right?", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r550919524", "createdAt": "2021-01-02T20:45:23Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-suite/junit-platform-suite.gradle.kts", "diffHunk": "@@ -0,0 +1,13 @@\n+plugins {\n+\t`java-library-conventions`\n+}\n+\n+description = \"JUnit Platform Suite (Aggregator)\"\n+\n+dependencies {\n+\tinternal(platform(project(\":dependencies\")))\n+\n+\tapi(platform(project(\":junit-bom\")))\n+\tapi(project(\":junit-platform-suite-api\"))\n+\tapi(project(\":junit-platform-suite-engine\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDg5OTE2Ng=="}, "originalCommit": {"oid": "b227adb3283af8b8b40ebab7b979cdd55608f1b2"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAwMjk2NA==", "bodyText": "Seems to work. Though the documentation suggest that this is for dependencies which are purely internal and not meant to be exposed to consumers - which should happen. I'm guessing this only applies internally to a gradle project?", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r551002964", "createdAt": "2021-01-03T12:58:42Z", "author": {"login": "mpkorstanje"}, "path": "junit-platform-suite/junit-platform-suite.gradle.kts", "diffHunk": "@@ -0,0 +1,13 @@\n+plugins {\n+\t`java-library-conventions`\n+}\n+\n+description = \"JUnit Platform Suite (Aggregator)\"\n+\n+dependencies {\n+\tinternal(platform(project(\":dependencies\")))\n+\n+\tapi(platform(project(\":junit-bom\")))\n+\tapi(project(\":junit-platform-suite-api\"))\n+\tapi(project(\":junit-platform-suite-engine\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDg5OTE2Ng=="}, "originalCommit": {"oid": "b227adb3283af8b8b40ebab7b979cdd55608f1b2"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NjQ1NzI0OnYy", "diffSide": "RIGHT", "path": "junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteTestEngine.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQxNjo1MDo1MlrOINYOEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQxOTo0MDoyM1rOINZHmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDg5OTIxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\treturn Optional.of(\"org.junit.platform.suite\");\n          \n          \n            \n            \t\treturn Optional.of(\"org.junit.platform\");", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r550899219", "createdAt": "2021-01-02T16:50:52Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteTestEngine.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.suite.engine;\n+\n+import static org.apiguardian.api.API.Status.INTERNAL;\n+\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.EngineDiscoveryRequest;\n+import org.junit.platform.engine.EngineExecutionListener;\n+import org.junit.platform.engine.ExecutionRequest;\n+import org.junit.platform.engine.TestDescriptor;\n+import org.junit.platform.engine.TestEngine;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.UniqueId;\n+import org.junit.platform.launcher.Launcher;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * The JUnit Platform Suite {@link org.junit.platform.engine.TestEngine TestEngine}.\n+ *\n+ * @since 5.8\n+ */\n+@API(status = INTERNAL, since = \"5.8\")\n+public final class SuiteTestEngine implements TestEngine {\n+\n+\t@Override\n+\tpublic String getId() {\n+\t\treturn SuiteEngineDescriptor.ENGINE_ID;\n+\t}\n+\n+\t/**\n+\t * Returns {@code org.junit.platform.suite} as the group ID.\n+\t */\n+\t@Override\n+\tpublic Optional<String> getGroupId() {\n+\t\treturn Optional.of(\"org.junit.platform.suite\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b227adb3283af8b8b40ebab7b979cdd55608f1b2"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkxMzk0Ng==", "bodyText": "Fixed in f064ebb", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r550913946", "createdAt": "2021-01-02T19:40:23Z", "author": {"login": "mpkorstanje"}, "path": "junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteTestEngine.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.suite.engine;\n+\n+import static org.apiguardian.api.API.Status.INTERNAL;\n+\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+\n+import org.apiguardian.api.API;\n+import org.junit.platform.engine.EngineDiscoveryRequest;\n+import org.junit.platform.engine.EngineExecutionListener;\n+import org.junit.platform.engine.ExecutionRequest;\n+import org.junit.platform.engine.TestDescriptor;\n+import org.junit.platform.engine.TestEngine;\n+import org.junit.platform.engine.TestExecutionResult;\n+import org.junit.platform.engine.UniqueId;\n+import org.junit.platform.launcher.Launcher;\n+import org.junit.platform.launcher.TestExecutionListener;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * The JUnit Platform Suite {@link org.junit.platform.engine.TestEngine TestEngine}.\n+ *\n+ * @since 5.8\n+ */\n+@API(status = INTERNAL, since = \"5.8\")\n+public final class SuiteTestEngine implements TestEngine {\n+\n+\t@Override\n+\tpublic String getId() {\n+\t\treturn SuiteEngineDescriptor.ENGINE_ID;\n+\t}\n+\n+\t/**\n+\t * Returns {@code org.junit.platform.suite} as the group ID.\n+\t */\n+\t@Override\n+\tpublic Optional<String> getGroupId() {\n+\t\treturn Optional.of(\"org.junit.platform.suite\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDg5OTIxOQ=="}, "originalCommit": {"oid": "b227adb3283af8b8b40ebab7b979cdd55608f1b2"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NjQ1ODE4OnYy", "diffSide": "RIGHT", "path": "junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/ClassSelectorResolver.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQxNjo1Mjo0N1rOINYOhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wM1QxMTo0NDo0MVrOINeDZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDg5OTMzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t// Nested tests are never filtered out", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r550899332", "createdAt": "2021-01-02T16:52:47Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/ClassSelectorResolver.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.suite.engine;\n+\n+import static org.junit.platform.engine.support.discovery.SelectorResolver.Resolution.unresolved;\n+import static org.junit.platform.suite.engine.UniqueIdHelper.removePrefix;\n+import static org.junit.platform.suite.engine.UniqueIdHelper.uniqueIdOfSegment;\n+\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+\n+import org.junit.platform.commons.util.ReflectionUtils;\n+import org.junit.platform.engine.TestDescriptor;\n+import org.junit.platform.engine.UniqueId;\n+import org.junit.platform.engine.discovery.ClassSelector;\n+import org.junit.platform.engine.discovery.UniqueIdSelector;\n+import org.junit.platform.engine.support.discovery.SelectorResolver;\n+\n+final class ClassSelectorResolver implements SelectorResolver {\n+\n+\tprivate static final IsSuiteClass isSuiteClass = new IsSuiteClass();\n+\n+\tprivate final Predicate<String> classNameFilter;\n+\tprivate final SuiteConfiguration configuration;\n+\n+\tClassSelectorResolver(Predicate<String> classNameFilter, SuiteConfiguration configuration) {\n+\t\tthis.classNameFilter = classNameFilter;\n+\t\tthis.configuration = configuration;\n+\t}\n+\n+\t@Override\n+\tpublic Resolution resolve(ClassSelector selector, Context context) {\n+\t\tClass<?> testClass = selector.getJavaClass();\n+\t\tif (isSuiteClass.test(testClass)) {\n+\t\t\t// Nested tests are never filtered out", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b227adb3283af8b8b40ebab7b979cdd55608f1b2"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkxMzg3Mg==", "bodyText": "Fixed in f064ebb", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r550913872", "createdAt": "2021-01-02T19:39:28Z", "author": {"login": "mpkorstanje"}, "path": "junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/ClassSelectorResolver.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.suite.engine;\n+\n+import static org.junit.platform.engine.support.discovery.SelectorResolver.Resolution.unresolved;\n+import static org.junit.platform.suite.engine.UniqueIdHelper.removePrefix;\n+import static org.junit.platform.suite.engine.UniqueIdHelper.uniqueIdOfSegment;\n+\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+\n+import org.junit.platform.commons.util.ReflectionUtils;\n+import org.junit.platform.engine.TestDescriptor;\n+import org.junit.platform.engine.UniqueId;\n+import org.junit.platform.engine.discovery.ClassSelector;\n+import org.junit.platform.engine.discovery.UniqueIdSelector;\n+import org.junit.platform.engine.support.discovery.SelectorResolver;\n+\n+final class ClassSelectorResolver implements SelectorResolver {\n+\n+\tprivate static final IsSuiteClass isSuiteClass = new IsSuiteClass();\n+\n+\tprivate final Predicate<String> classNameFilter;\n+\tprivate final SuiteConfiguration configuration;\n+\n+\tClassSelectorResolver(Predicate<String> classNameFilter, SuiteConfiguration configuration) {\n+\t\tthis.classNameFilter = classNameFilter;\n+\t\tthis.configuration = configuration;\n+\t}\n+\n+\t@Override\n+\tpublic Resolution resolve(ClassSelector selector, Context context) {\n+\t\tClass<?> testClass = selector.getJavaClass();\n+\t\tif (isSuiteClass.test(testClass)) {\n+\t\t\t// Nested tests are never filtered out", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDg5OTMzMg=="}, "originalCommit": {"oid": "b227adb3283af8b8b40ebab7b979cdd55608f1b2"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkyMDI2MQ==", "bodyText": "The comment in jupiter-engine should stay, the one in suite-engine (originally copied, I assume) should be removed.", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r550920261", "createdAt": "2021-01-02T20:54:58Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/ClassSelectorResolver.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.suite.engine;\n+\n+import static org.junit.platform.engine.support.discovery.SelectorResolver.Resolution.unresolved;\n+import static org.junit.platform.suite.engine.UniqueIdHelper.removePrefix;\n+import static org.junit.platform.suite.engine.UniqueIdHelper.uniqueIdOfSegment;\n+\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+\n+import org.junit.platform.commons.util.ReflectionUtils;\n+import org.junit.platform.engine.TestDescriptor;\n+import org.junit.platform.engine.UniqueId;\n+import org.junit.platform.engine.discovery.ClassSelector;\n+import org.junit.platform.engine.discovery.UniqueIdSelector;\n+import org.junit.platform.engine.support.discovery.SelectorResolver;\n+\n+final class ClassSelectorResolver implements SelectorResolver {\n+\n+\tprivate static final IsSuiteClass isSuiteClass = new IsSuiteClass();\n+\n+\tprivate final Predicate<String> classNameFilter;\n+\tprivate final SuiteConfiguration configuration;\n+\n+\tClassSelectorResolver(Predicate<String> classNameFilter, SuiteConfiguration configuration) {\n+\t\tthis.classNameFilter = classNameFilter;\n+\t\tthis.configuration = configuration;\n+\t}\n+\n+\t@Override\n+\tpublic Resolution resolve(ClassSelector selector, Context context) {\n+\t\tClass<?> testClass = selector.getJavaClass();\n+\t\tif (isSuiteClass.test(testClass)) {\n+\t\t\t// Nested tests are never filtered out", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDg5OTMzMg=="}, "originalCommit": {"oid": "b227adb3283af8b8b40ebab7b979cdd55608f1b2"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDk5NDc5MA==", "bodyText": "Derp.", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r550994790", "createdAt": "2021-01-03T11:44:41Z", "author": {"login": "mpkorstanje"}, "path": "junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/ClassSelectorResolver.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.suite.engine;\n+\n+import static org.junit.platform.engine.support.discovery.SelectorResolver.Resolution.unresolved;\n+import static org.junit.platform.suite.engine.UniqueIdHelper.removePrefix;\n+import static org.junit.platform.suite.engine.UniqueIdHelper.uniqueIdOfSegment;\n+\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+\n+import org.junit.platform.commons.util.ReflectionUtils;\n+import org.junit.platform.engine.TestDescriptor;\n+import org.junit.platform.engine.UniqueId;\n+import org.junit.platform.engine.discovery.ClassSelector;\n+import org.junit.platform.engine.discovery.UniqueIdSelector;\n+import org.junit.platform.engine.support.discovery.SelectorResolver;\n+\n+final class ClassSelectorResolver implements SelectorResolver {\n+\n+\tprivate static final IsSuiteClass isSuiteClass = new IsSuiteClass();\n+\n+\tprivate final Predicate<String> classNameFilter;\n+\tprivate final SuiteConfiguration configuration;\n+\n+\tClassSelectorResolver(Predicate<String> classNameFilter, SuiteConfiguration configuration) {\n+\t\tthis.classNameFilter = classNameFilter;\n+\t\tthis.configuration = configuration;\n+\t}\n+\n+\t@Override\n+\tpublic Resolution resolve(ClassSelector selector, Context context) {\n+\t\tClass<?> testClass = selector.getJavaClass();\n+\t\tif (isSuiteClass.test(testClass)) {\n+\t\t\t// Nested tests are never filtered out", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDg5OTMzMg=="}, "originalCommit": {"oid": "b227adb3283af8b8b40ebab7b979cdd55608f1b2"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NjQ2MjgzOnYy", "diffSide": "RIGHT", "path": "junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/TestIdentifierAsTestDescriptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQxNjo1ODoyNlrOINYQnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQxOTozOTo0OFrOINZHYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDg5OTg2OA==", "bodyText": "\u274c getLegacyReportingName() and getTags() should be overridden.", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r550899868", "createdAt": "2021-01-02T16:58:26Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/TestIdentifierAsTestDescriptor.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.suite.engine;\n+\n+import org.junit.platform.engine.ExecutionRequest;\n+import org.junit.platform.engine.TestDescriptor;\n+import org.junit.platform.engine.UniqueId;\n+import org.junit.platform.engine.support.descriptor.AbstractTestDescriptor;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * Represents a {@link TestIdentifier} from a {@link TestPlan} as a\n+ * {@link TestDescriptor} in an {@link ExecutionRequest}.\n+ *\n+ * @see EngineExecutionListenerAdaptor\n+ */\n+final class TestIdentifierAsTestDescriptor extends AbstractTestDescriptor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b227adb3283af8b8b40ebab7b979cdd55608f1b2"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkxMzg5MA==", "bodyText": "Fixed in f064ebb", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r550913890", "createdAt": "2021-01-02T19:39:48Z", "author": {"login": "mpkorstanje"}, "path": "junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/TestIdentifierAsTestDescriptor.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.suite.engine;\n+\n+import org.junit.platform.engine.ExecutionRequest;\n+import org.junit.platform.engine.TestDescriptor;\n+import org.junit.platform.engine.UniqueId;\n+import org.junit.platform.engine.support.descriptor.AbstractTestDescriptor;\n+import org.junit.platform.launcher.TestIdentifier;\n+import org.junit.platform.launcher.TestPlan;\n+\n+/**\n+ * Represents a {@link TestIdentifier} from a {@link TestPlan} as a\n+ * {@link TestDescriptor} in an {@link ExecutionRequest}.\n+ *\n+ * @see EngineExecutionListenerAdaptor\n+ */\n+final class TestIdentifierAsTestDescriptor extends AbstractTestDescriptor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDg5OTg2OA=="}, "originalCommit": {"oid": "b227adb3283af8b8b40ebab7b979cdd55608f1b2"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NjQ2NTQ0OnYy", "diffSide": "RIGHT", "path": "junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteLauncherDiscoveryRequestBuilder.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQxNzowMjoxN1rOINYR0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0zMFQyMzo1NDoxNVrOIdDulw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkwMDE3OQ==", "bodyText": "Can we share this with junit-platform-runner?", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r550900179", "createdAt": "2021-01-02T17:02:17Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteLauncherDiscoveryRequestBuilder.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.suite.engine;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.junit.platform.commons.support.AnnotationSupport.findAnnotation;\n+import static org.junit.platform.commons.support.AnnotationSupport.findRepeatableAnnotations;\n+import static org.junit.platform.engine.discovery.ClassNameFilter.excludeClassNamePatterns;\n+import static org.junit.platform.engine.discovery.ClassNameFilter.includeClassNamePatterns;\n+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClasspathResource;\n+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectDirectory;\n+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectFile;\n+import static org.junit.platform.engine.discovery.PackageNameFilter.excludePackageNames;\n+import static org.junit.platform.engine.discovery.PackageNameFilter.includePackageNames;\n+import static org.junit.platform.launcher.EngineFilter.excludeEngines;\n+import static org.junit.platform.launcher.EngineFilter.includeEngines;\n+import static org.junit.platform.launcher.TagFilter.excludeTags;\n+import static org.junit.platform.launcher.TagFilter.includeTags;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.junit.platform.engine.UniqueId;\n+import org.junit.platform.engine.discovery.ClassSelector;\n+import org.junit.platform.engine.discovery.ClasspathResourceSelector;\n+import org.junit.platform.engine.discovery.ClasspathRootSelector;\n+import org.junit.platform.engine.discovery.DiscoverySelectors;\n+import org.junit.platform.engine.discovery.FilePosition;\n+import org.junit.platform.engine.discovery.FileSelector;\n+import org.junit.platform.engine.discovery.ModuleSelector;\n+import org.junit.platform.engine.discovery.PackageSelector;\n+import org.junit.platform.engine.discovery.UriSelector;\n+import org.junit.platform.launcher.LauncherDiscoveryRequest;\n+import org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder;\n+import org.junit.platform.suite.api.Configuration;\n+import org.junit.platform.suite.api.ExcludeClassNamePatterns;\n+import org.junit.platform.suite.api.ExcludeEngines;\n+import org.junit.platform.suite.api.ExcludePackages;\n+import org.junit.platform.suite.api.ExcludeTags;\n+import org.junit.platform.suite.api.IncludeClassNamePatterns;\n+import org.junit.platform.suite.api.IncludeEngines;\n+import org.junit.platform.suite.api.IncludePackages;\n+import org.junit.platform.suite.api.IncludeTags;\n+import org.junit.platform.suite.api.SelectClasses;\n+import org.junit.platform.suite.api.SelectClasspathResource;\n+import org.junit.platform.suite.api.SelectClasspathRoots;\n+import org.junit.platform.suite.api.SelectDirectories;\n+import org.junit.platform.suite.api.SelectFile;\n+import org.junit.platform.suite.api.SelectModules;\n+import org.junit.platform.suite.api.SelectPackages;\n+import org.junit.platform.suite.api.SelectUris;\n+\n+final class SuiteLauncherDiscoveryRequestBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b227adb3283af8b8b40ebab7b979cdd55608f1b2"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkxNzE5MQ==", "bodyText": "While the name might create the impression that it can be used by a user to build requests to discover test suites, it is only a utility that the suite engine uses to create launcher discovery requests to discover the tests in a suite. In essence it maps suite annotations to a launcher discovery request.\nPerhaps a better name is in order.", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r550917191", "createdAt": "2021-01-02T20:17:30Z", "author": {"login": "mpkorstanje"}, "path": "junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteLauncherDiscoveryRequestBuilder.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.suite.engine;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.junit.platform.commons.support.AnnotationSupport.findAnnotation;\n+import static org.junit.platform.commons.support.AnnotationSupport.findRepeatableAnnotations;\n+import static org.junit.platform.engine.discovery.ClassNameFilter.excludeClassNamePatterns;\n+import static org.junit.platform.engine.discovery.ClassNameFilter.includeClassNamePatterns;\n+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClasspathResource;\n+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectDirectory;\n+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectFile;\n+import static org.junit.platform.engine.discovery.PackageNameFilter.excludePackageNames;\n+import static org.junit.platform.engine.discovery.PackageNameFilter.includePackageNames;\n+import static org.junit.platform.launcher.EngineFilter.excludeEngines;\n+import static org.junit.platform.launcher.EngineFilter.includeEngines;\n+import static org.junit.platform.launcher.TagFilter.excludeTags;\n+import static org.junit.platform.launcher.TagFilter.includeTags;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.junit.platform.engine.UniqueId;\n+import org.junit.platform.engine.discovery.ClassSelector;\n+import org.junit.platform.engine.discovery.ClasspathResourceSelector;\n+import org.junit.platform.engine.discovery.ClasspathRootSelector;\n+import org.junit.platform.engine.discovery.DiscoverySelectors;\n+import org.junit.platform.engine.discovery.FilePosition;\n+import org.junit.platform.engine.discovery.FileSelector;\n+import org.junit.platform.engine.discovery.ModuleSelector;\n+import org.junit.platform.engine.discovery.PackageSelector;\n+import org.junit.platform.engine.discovery.UriSelector;\n+import org.junit.platform.launcher.LauncherDiscoveryRequest;\n+import org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder;\n+import org.junit.platform.suite.api.Configuration;\n+import org.junit.platform.suite.api.ExcludeClassNamePatterns;\n+import org.junit.platform.suite.api.ExcludeEngines;\n+import org.junit.platform.suite.api.ExcludePackages;\n+import org.junit.platform.suite.api.ExcludeTags;\n+import org.junit.platform.suite.api.IncludeClassNamePatterns;\n+import org.junit.platform.suite.api.IncludeEngines;\n+import org.junit.platform.suite.api.IncludePackages;\n+import org.junit.platform.suite.api.IncludeTags;\n+import org.junit.platform.suite.api.SelectClasses;\n+import org.junit.platform.suite.api.SelectClasspathResource;\n+import org.junit.platform.suite.api.SelectClasspathRoots;\n+import org.junit.platform.suite.api.SelectDirectories;\n+import org.junit.platform.suite.api.SelectFile;\n+import org.junit.platform.suite.api.SelectModules;\n+import org.junit.platform.suite.api.SelectPackages;\n+import org.junit.platform.suite.api.SelectUris;\n+\n+final class SuiteLauncherDiscoveryRequestBuilder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkwMDE3OQ=="}, "originalCommit": {"oid": "b227adb3283af8b8b40ebab7b979cdd55608f1b2"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkxODU0NA==", "bodyText": "This is exactly what junit-platform-runner does with the annotations, isn't it?", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r550918544", "createdAt": "2021-01-02T20:34:06Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteLauncherDiscoveryRequestBuilder.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.suite.engine;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.junit.platform.commons.support.AnnotationSupport.findAnnotation;\n+import static org.junit.platform.commons.support.AnnotationSupport.findRepeatableAnnotations;\n+import static org.junit.platform.engine.discovery.ClassNameFilter.excludeClassNamePatterns;\n+import static org.junit.platform.engine.discovery.ClassNameFilter.includeClassNamePatterns;\n+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClasspathResource;\n+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectDirectory;\n+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectFile;\n+import static org.junit.platform.engine.discovery.PackageNameFilter.excludePackageNames;\n+import static org.junit.platform.engine.discovery.PackageNameFilter.includePackageNames;\n+import static org.junit.platform.launcher.EngineFilter.excludeEngines;\n+import static org.junit.platform.launcher.EngineFilter.includeEngines;\n+import static org.junit.platform.launcher.TagFilter.excludeTags;\n+import static org.junit.platform.launcher.TagFilter.includeTags;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.junit.platform.engine.UniqueId;\n+import org.junit.platform.engine.discovery.ClassSelector;\n+import org.junit.platform.engine.discovery.ClasspathResourceSelector;\n+import org.junit.platform.engine.discovery.ClasspathRootSelector;\n+import org.junit.platform.engine.discovery.DiscoverySelectors;\n+import org.junit.platform.engine.discovery.FilePosition;\n+import org.junit.platform.engine.discovery.FileSelector;\n+import org.junit.platform.engine.discovery.ModuleSelector;\n+import org.junit.platform.engine.discovery.PackageSelector;\n+import org.junit.platform.engine.discovery.UriSelector;\n+import org.junit.platform.launcher.LauncherDiscoveryRequest;\n+import org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder;\n+import org.junit.platform.suite.api.Configuration;\n+import org.junit.platform.suite.api.ExcludeClassNamePatterns;\n+import org.junit.platform.suite.api.ExcludeEngines;\n+import org.junit.platform.suite.api.ExcludePackages;\n+import org.junit.platform.suite.api.ExcludeTags;\n+import org.junit.platform.suite.api.IncludeClassNamePatterns;\n+import org.junit.platform.suite.api.IncludeEngines;\n+import org.junit.platform.suite.api.IncludePackages;\n+import org.junit.platform.suite.api.IncludeTags;\n+import org.junit.platform.suite.api.SelectClasses;\n+import org.junit.platform.suite.api.SelectClasspathResource;\n+import org.junit.platform.suite.api.SelectClasspathRoots;\n+import org.junit.platform.suite.api.SelectDirectories;\n+import org.junit.platform.suite.api.SelectFile;\n+import org.junit.platform.suite.api.SelectModules;\n+import org.junit.platform.suite.api.SelectPackages;\n+import org.junit.platform.suite.api.SelectUris;\n+\n+final class SuiteLauncherDiscoveryRequestBuilder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkwMDE3OQ=="}, "originalCommit": {"oid": "b227adb3283af8b8b40ebab7b979cdd55608f1b2"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAwNTAxNA==", "bodyText": "Ah I see. It'd be a single class/module. I'll see about extracting that after everything else.", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r551005014", "createdAt": "2021-01-03T13:17:44Z", "author": {"login": "mpkorstanje"}, "path": "junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteLauncherDiscoveryRequestBuilder.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.suite.engine;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.junit.platform.commons.support.AnnotationSupport.findAnnotation;\n+import static org.junit.platform.commons.support.AnnotationSupport.findRepeatableAnnotations;\n+import static org.junit.platform.engine.discovery.ClassNameFilter.excludeClassNamePatterns;\n+import static org.junit.platform.engine.discovery.ClassNameFilter.includeClassNamePatterns;\n+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClasspathResource;\n+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectDirectory;\n+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectFile;\n+import static org.junit.platform.engine.discovery.PackageNameFilter.excludePackageNames;\n+import static org.junit.platform.engine.discovery.PackageNameFilter.includePackageNames;\n+import static org.junit.platform.launcher.EngineFilter.excludeEngines;\n+import static org.junit.platform.launcher.EngineFilter.includeEngines;\n+import static org.junit.platform.launcher.TagFilter.excludeTags;\n+import static org.junit.platform.launcher.TagFilter.includeTags;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.junit.platform.engine.UniqueId;\n+import org.junit.platform.engine.discovery.ClassSelector;\n+import org.junit.platform.engine.discovery.ClasspathResourceSelector;\n+import org.junit.platform.engine.discovery.ClasspathRootSelector;\n+import org.junit.platform.engine.discovery.DiscoverySelectors;\n+import org.junit.platform.engine.discovery.FilePosition;\n+import org.junit.platform.engine.discovery.FileSelector;\n+import org.junit.platform.engine.discovery.ModuleSelector;\n+import org.junit.platform.engine.discovery.PackageSelector;\n+import org.junit.platform.engine.discovery.UriSelector;\n+import org.junit.platform.launcher.LauncherDiscoveryRequest;\n+import org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder;\n+import org.junit.platform.suite.api.Configuration;\n+import org.junit.platform.suite.api.ExcludeClassNamePatterns;\n+import org.junit.platform.suite.api.ExcludeEngines;\n+import org.junit.platform.suite.api.ExcludePackages;\n+import org.junit.platform.suite.api.ExcludeTags;\n+import org.junit.platform.suite.api.IncludeClassNamePatterns;\n+import org.junit.platform.suite.api.IncludeEngines;\n+import org.junit.platform.suite.api.IncludePackages;\n+import org.junit.platform.suite.api.IncludeTags;\n+import org.junit.platform.suite.api.SelectClasses;\n+import org.junit.platform.suite.api.SelectClasspathResource;\n+import org.junit.platform.suite.api.SelectClasspathRoots;\n+import org.junit.platform.suite.api.SelectDirectories;\n+import org.junit.platform.suite.api.SelectFile;\n+import org.junit.platform.suite.api.SelectModules;\n+import org.junit.platform.suite.api.SelectPackages;\n+import org.junit.platform.suite.api.SelectUris;\n+\n+final class SuiteLauncherDiscoveryRequestBuilder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkwMDE3OQ=="}, "originalCommit": {"oid": "b227adb3283af8b8b40ebab7b979cdd55608f1b2"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjIxNTIzMw==", "bodyText": "On second thought. This would require solving quite a few problems that I'd consider out of scope of this PR. I'm also not convinced the effort to remove a relatively trivial amount of not-quite-duplication is worth the added complexity of adding another module and satisfying two somewhat dissimilar use-cases..\nWhile functionally almost the same the JUnitPlatformRunner is applying some introspection to work out if it is used as a suite or not. Unfortunately this is determined by the implicit use of either @SelectPackages or @SelectClasses rather then an explicit annotation (e.g. @Suite).\n\tprivate LauncherDiscoveryRequest createDiscoveryRequest() {\n\t\tList<DiscoverySelector> selectors = getSelectorsFromAnnotations();\n\n\t\t// Allows to simply add @RunWith(JUnitPlatform.class) to any test case\n\t\tboolean isSuite = !selectors.isEmpty();\n\t\tif (!isSuite) {\n\t\t\tselectors.add(selectClass(this.testClass));\n\t\t}\n\n\t\tLauncherDiscoveryRequestBuilder requestBuilder = request().selectors(selectors);\n\t\taddFiltersFromAnnotations(requestBuilder, isSuite);\n\t\treturn requestBuilder.build();\n\t}\nThis could be worked around by making the SuiteLauncherDiscoveryRequestBuilder build a LauncherDiscoveryRequestBuilder rather then a DiscoveryRequestBuilder. Using that LauncherDiscoveryRequestBuilder to build the LauncherDiscoveryRequest. Inspecting the  LauncherDiscoveryRequest and adding the defaults when absent.\nThis would also require making IncludeClassNameFilter and friends public.\n                LauncherDiscoveryRequestBuilder requestBuilder = suiteLauncherDiscoveryRequestBuilder.build();\n                LauncherDiscoveryRequest build = requestBuilder.build();\n\t\tList<ClassSelector> classSelectors = build.getSelectorsByType(ClassSelector.class);\n\t\tList<PackageSelector> packageSelectors = build.getSelectorsByType(PackageSelector.class);\n\t\tList<IncludeClassNameFilter> includeClassNameFilters = build.getFiltersByType(IncludeClassNameFilter.class);\n\n\t\t// Allows to simply add @RunWith(JUnitPlatform.class) to any test case\n\t\tboolean isSuite = !classSelectors.isEmpty() && !packageSelectors.isEmpty();\n\t\tif (!isSuite) {\n\t\t\trequestBuilder.selectors(selectClass(this.testClass));\n\t\t} else {\n\t\t\tif(includeClassNameFilters.isEmpty()) {\n\t\t\t\trequestBuilder.filters(includeClassNamePatterns(STANDARD_INCLUDE_PATTERN_ARRAY));\n\t\t\t}\n\t\t}\n\t\treturn requestBuilder.build();\nFrom the other side, the SuiteLauncherDiscoveryRequestBuilder currently supports adding a requests from a class by looking at it's annotations and adding a request from a unique id. The latter is needed because suites may be selected by their unique id (the class) or by the unique id of a test in that suite, or both.\nThis could be worked around by making the SuiteLauncherDiscoveryRequestBuilder build a LauncherDiscoveryRequestBuilder rather then a DiscoveryRequestBuilder but would introduce another layer of indirection as the SuiteTestDescriptor would have store unique ids and test classes and build the discovery request after all selectors have been resolved delaying feedback on incorrectly used annotations.\nSo overall we'd remove some duplication but we'd get back two more complicated solutions and a module containing a single class. It seems a bit much.", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r552215233", "createdAt": "2021-01-05T21:39:10Z", "author": {"login": "mpkorstanje"}, "path": "junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteLauncherDiscoveryRequestBuilder.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.suite.engine;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.junit.platform.commons.support.AnnotationSupport.findAnnotation;\n+import static org.junit.platform.commons.support.AnnotationSupport.findRepeatableAnnotations;\n+import static org.junit.platform.engine.discovery.ClassNameFilter.excludeClassNamePatterns;\n+import static org.junit.platform.engine.discovery.ClassNameFilter.includeClassNamePatterns;\n+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClasspathResource;\n+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectDirectory;\n+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectFile;\n+import static org.junit.platform.engine.discovery.PackageNameFilter.excludePackageNames;\n+import static org.junit.platform.engine.discovery.PackageNameFilter.includePackageNames;\n+import static org.junit.platform.launcher.EngineFilter.excludeEngines;\n+import static org.junit.platform.launcher.EngineFilter.includeEngines;\n+import static org.junit.platform.launcher.TagFilter.excludeTags;\n+import static org.junit.platform.launcher.TagFilter.includeTags;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.junit.platform.engine.UniqueId;\n+import org.junit.platform.engine.discovery.ClassSelector;\n+import org.junit.platform.engine.discovery.ClasspathResourceSelector;\n+import org.junit.platform.engine.discovery.ClasspathRootSelector;\n+import org.junit.platform.engine.discovery.DiscoverySelectors;\n+import org.junit.platform.engine.discovery.FilePosition;\n+import org.junit.platform.engine.discovery.FileSelector;\n+import org.junit.platform.engine.discovery.ModuleSelector;\n+import org.junit.platform.engine.discovery.PackageSelector;\n+import org.junit.platform.engine.discovery.UriSelector;\n+import org.junit.platform.launcher.LauncherDiscoveryRequest;\n+import org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder;\n+import org.junit.platform.suite.api.Configuration;\n+import org.junit.platform.suite.api.ExcludeClassNamePatterns;\n+import org.junit.platform.suite.api.ExcludeEngines;\n+import org.junit.platform.suite.api.ExcludePackages;\n+import org.junit.platform.suite.api.ExcludeTags;\n+import org.junit.platform.suite.api.IncludeClassNamePatterns;\n+import org.junit.platform.suite.api.IncludeEngines;\n+import org.junit.platform.suite.api.IncludePackages;\n+import org.junit.platform.suite.api.IncludeTags;\n+import org.junit.platform.suite.api.SelectClasses;\n+import org.junit.platform.suite.api.SelectClasspathResource;\n+import org.junit.platform.suite.api.SelectClasspathRoots;\n+import org.junit.platform.suite.api.SelectDirectories;\n+import org.junit.platform.suite.api.SelectFile;\n+import org.junit.platform.suite.api.SelectModules;\n+import org.junit.platform.suite.api.SelectPackages;\n+import org.junit.platform.suite.api.SelectUris;\n+\n+final class SuiteLauncherDiscoveryRequestBuilder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkwMDE3OQ=="}, "originalCommit": {"oid": "b227adb3283af8b8b40ebab7b979cdd55608f1b2"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzMxMTg5MA==", "bodyText": "Ooh. I found a solution!", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r567311890", "createdAt": "2021-01-30T20:39:51Z", "author": {"login": "mpkorstanje"}, "path": "junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteLauncherDiscoveryRequestBuilder.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.suite.engine;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.junit.platform.commons.support.AnnotationSupport.findAnnotation;\n+import static org.junit.platform.commons.support.AnnotationSupport.findRepeatableAnnotations;\n+import static org.junit.platform.engine.discovery.ClassNameFilter.excludeClassNamePatterns;\n+import static org.junit.platform.engine.discovery.ClassNameFilter.includeClassNamePatterns;\n+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClasspathResource;\n+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectDirectory;\n+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectFile;\n+import static org.junit.platform.engine.discovery.PackageNameFilter.excludePackageNames;\n+import static org.junit.platform.engine.discovery.PackageNameFilter.includePackageNames;\n+import static org.junit.platform.launcher.EngineFilter.excludeEngines;\n+import static org.junit.platform.launcher.EngineFilter.includeEngines;\n+import static org.junit.platform.launcher.TagFilter.excludeTags;\n+import static org.junit.platform.launcher.TagFilter.includeTags;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.junit.platform.engine.UniqueId;\n+import org.junit.platform.engine.discovery.ClassSelector;\n+import org.junit.platform.engine.discovery.ClasspathResourceSelector;\n+import org.junit.platform.engine.discovery.ClasspathRootSelector;\n+import org.junit.platform.engine.discovery.DiscoverySelectors;\n+import org.junit.platform.engine.discovery.FilePosition;\n+import org.junit.platform.engine.discovery.FileSelector;\n+import org.junit.platform.engine.discovery.ModuleSelector;\n+import org.junit.platform.engine.discovery.PackageSelector;\n+import org.junit.platform.engine.discovery.UriSelector;\n+import org.junit.platform.launcher.LauncherDiscoveryRequest;\n+import org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder;\n+import org.junit.platform.suite.api.Configuration;\n+import org.junit.platform.suite.api.ExcludeClassNamePatterns;\n+import org.junit.platform.suite.api.ExcludeEngines;\n+import org.junit.platform.suite.api.ExcludePackages;\n+import org.junit.platform.suite.api.ExcludeTags;\n+import org.junit.platform.suite.api.IncludeClassNamePatterns;\n+import org.junit.platform.suite.api.IncludeEngines;\n+import org.junit.platform.suite.api.IncludePackages;\n+import org.junit.platform.suite.api.IncludeTags;\n+import org.junit.platform.suite.api.SelectClasses;\n+import org.junit.platform.suite.api.SelectClasspathResource;\n+import org.junit.platform.suite.api.SelectClasspathRoots;\n+import org.junit.platform.suite.api.SelectDirectories;\n+import org.junit.platform.suite.api.SelectFile;\n+import org.junit.platform.suite.api.SelectModules;\n+import org.junit.platform.suite.api.SelectPackages;\n+import org.junit.platform.suite.api.SelectUris;\n+\n+final class SuiteLauncherDiscoveryRequestBuilder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkwMDE3OQ=="}, "originalCommit": {"oid": "b227adb3283af8b8b40ebab7b979cdd55608f1b2"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzM0MDY5NQ==", "bodyText": "Done. See: SuiteLauncherDiscoveryRequestBuilder.", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r567340695", "createdAt": "2021-01-30T23:54:15Z", "author": {"login": "mpkorstanje"}, "path": "junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteLauncherDiscoveryRequestBuilder.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.suite.engine;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.junit.platform.commons.support.AnnotationSupport.findAnnotation;\n+import static org.junit.platform.commons.support.AnnotationSupport.findRepeatableAnnotations;\n+import static org.junit.platform.engine.discovery.ClassNameFilter.excludeClassNamePatterns;\n+import static org.junit.platform.engine.discovery.ClassNameFilter.includeClassNamePatterns;\n+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClasspathResource;\n+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectDirectory;\n+import static org.junit.platform.engine.discovery.DiscoverySelectors.selectFile;\n+import static org.junit.platform.engine.discovery.PackageNameFilter.excludePackageNames;\n+import static org.junit.platform.engine.discovery.PackageNameFilter.includePackageNames;\n+import static org.junit.platform.launcher.EngineFilter.excludeEngines;\n+import static org.junit.platform.launcher.EngineFilter.includeEngines;\n+import static org.junit.platform.launcher.TagFilter.excludeTags;\n+import static org.junit.platform.launcher.TagFilter.includeTags;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.junit.platform.engine.UniqueId;\n+import org.junit.platform.engine.discovery.ClassSelector;\n+import org.junit.platform.engine.discovery.ClasspathResourceSelector;\n+import org.junit.platform.engine.discovery.ClasspathRootSelector;\n+import org.junit.platform.engine.discovery.DiscoverySelectors;\n+import org.junit.platform.engine.discovery.FilePosition;\n+import org.junit.platform.engine.discovery.FileSelector;\n+import org.junit.platform.engine.discovery.ModuleSelector;\n+import org.junit.platform.engine.discovery.PackageSelector;\n+import org.junit.platform.engine.discovery.UriSelector;\n+import org.junit.platform.launcher.LauncherDiscoveryRequest;\n+import org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder;\n+import org.junit.platform.suite.api.Configuration;\n+import org.junit.platform.suite.api.ExcludeClassNamePatterns;\n+import org.junit.platform.suite.api.ExcludeEngines;\n+import org.junit.platform.suite.api.ExcludePackages;\n+import org.junit.platform.suite.api.ExcludeTags;\n+import org.junit.platform.suite.api.IncludeClassNamePatterns;\n+import org.junit.platform.suite.api.IncludeEngines;\n+import org.junit.platform.suite.api.IncludePackages;\n+import org.junit.platform.suite.api.IncludeTags;\n+import org.junit.platform.suite.api.SelectClasses;\n+import org.junit.platform.suite.api.SelectClasspathResource;\n+import org.junit.platform.suite.api.SelectClasspathRoots;\n+import org.junit.platform.suite.api.SelectDirectories;\n+import org.junit.platform.suite.api.SelectFile;\n+import org.junit.platform.suite.api.SelectModules;\n+import org.junit.platform.suite.api.SelectPackages;\n+import org.junit.platform.suite.api.SelectUris;\n+\n+final class SuiteLauncherDiscoveryRequestBuilder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkwMDE3OQ=="}, "originalCommit": {"oid": "b227adb3283af8b8b40ebab7b979cdd55608f1b2"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NjQ2OTUyOnYy", "diffSide": "RIGHT", "path": "junit-platform-suite-engine/src/test/java/org/junit/platform/suite/engine/testsuites/SuiteSuite.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQxNzowNzowN1rOINYTpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMlQyMDo0ODoyMVrOINZeZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkwMDY0Ng==", "bodyText": "We should use the java-test-fixtures Gradle plugin and move the two sample packages to the testFixtures source set like we do in junit-vintage-engine.", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r550900646", "createdAt": "2021-01-02T17:07:07Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-suite-engine/src/test/java/org/junit/platform/suite/engine/testsuites/SuiteSuite.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.suite.engine.testsuites;\n+\n+import org.junit.platform.suite.api.SelectClasses;\n+import org.junit.platform.suite.api.Suite;\n+\n+@Suite\n+@SelectClasses(SelectClassesSuite.class)\n+public class SuiteSuite {\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b227adb3283af8b8b40ebab7b979cdd55608f1b2"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkxOTc4Mw==", "bodyText": "Ah. This is pretty nice.\nResolved with 08feabb.", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r550919783", "createdAt": "2021-01-02T20:48:21Z", "author": {"login": "mpkorstanje"}, "path": "junit-platform-suite-engine/src/test/java/org/junit/platform/suite/engine/testsuites/SuiteSuite.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.suite.engine.testsuites;\n+\n+import org.junit.platform.suite.api.SelectClasses;\n+import org.junit.platform.suite.api.Suite;\n+\n+@Suite\n+@SelectClasses(SelectClassesSuite.class)\n+public class SuiteSuite {\n+\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkwMDY0Ng=="}, "originalCommit": {"oid": "b227adb3283af8b8b40ebab7b979cdd55608f1b2"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NzU3NDA1OnYy", "diffSide": "RIGHT", "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineDiscoveryOrchestrator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wM1QxNjo1MTo1OVrOINgIoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wM1QxNzo0MzoxMVrOINgdrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAyODg5Nw==", "bodyText": "@marcphilipp wdyt? Would it break the expectation of the LauncherDiscoveryListener to provide the executionId rather then the uniqueEngineId?", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r551028897", "createdAt": "2021-01-03T16:51:59Z", "author": {"login": "mpkorstanje"}, "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineDiscoveryOrchestrator.java", "diffHunk": "@@ -115,13 +119,14 @@ private LauncherDiscoveryResult discoverSafely(LauncherDiscoveryRequest request,\n \t}\n \n \tprivate TestDescriptor discoverEngineRoot(TestEngine testEngine, LauncherDiscoveryRequest request,\n-\t\t\tLauncherDiscoveryListener listener) {\n+\t\t\tLauncherDiscoveryListener listener, UniqueId parentId) {\n \t\tUniqueId uniqueEngineId = UniqueId.forEngine(testEngine.getId());\n+\t\tUniqueId executionId = parentId == null ? uniqueEngineId : parentId.append(uniqueEngineId.getLastSegment()); // TODO: Do better\n \t\ttry {\n-\t\t\tlistener.engineDiscoveryStarted(uniqueEngineId);\n-\t\t\tTestDescriptor engineRoot = testEngine.discover(request, uniqueEngineId);\n+\t\t\tlistener.engineDiscoveryStarted(uniqueEngineId); // TODO: uniqueEngineId ok?\n+\t\t\tTestDescriptor engineRoot = testEngine.discover(request, executionId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd64804a9f4d4fa74ec026b067ba001cb0076a35"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAzNDI4NA==", "bodyText": "Good question. I think we should pass in executionId because otherwise it would be inconsistent with what the engine passes to selectorProcessed and it's documented to be \"the unique ID of the engine descriptor\". I took a quick look and the internal implementation looked like they don't make any such assumptions.", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r551034284", "createdAt": "2021-01-03T17:43:11Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineDiscoveryOrchestrator.java", "diffHunk": "@@ -115,13 +119,14 @@ private LauncherDiscoveryResult discoverSafely(LauncherDiscoveryRequest request,\n \t}\n \n \tprivate TestDescriptor discoverEngineRoot(TestEngine testEngine, LauncherDiscoveryRequest request,\n-\t\t\tLauncherDiscoveryListener listener) {\n+\t\t\tLauncherDiscoveryListener listener, UniqueId parentId) {\n \t\tUniqueId uniqueEngineId = UniqueId.forEngine(testEngine.getId());\n+\t\tUniqueId executionId = parentId == null ? uniqueEngineId : parentId.append(uniqueEngineId.getLastSegment()); // TODO: Do better\n \t\ttry {\n-\t\t\tlistener.engineDiscoveryStarted(uniqueEngineId);\n-\t\t\tTestDescriptor engineRoot = testEngine.discover(request, uniqueEngineId);\n+\t\t\tlistener.engineDiscoveryStarted(uniqueEngineId); // TODO: uniqueEngineId ok?\n+\t\t\tTestDescriptor engineRoot = testEngine.discover(request, executionId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAyODg5Nw=="}, "originalCommit": {"oid": "fd64804a9f4d4fa74ec026b067ba001cb0076a35"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NzU3NDgxOnYy", "diffSide": "RIGHT", "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineIdValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wM1QxNjo1MzoxMlrOINgI_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wM1QxNzo0NTowMFrOINgedw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAyODk5MA==", "bodyText": "I'm surpriced that this isn't already use by test kit.", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r551028990", "createdAt": "2021-01-03T16:53:12Z", "author": {"login": "mpkorstanje"}, "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineIdValidator.java", "diffHunk": "@@ -21,14 +24,15 @@\n /**\n  * @since 1.7\n  */\n-class EngineIdValidator {\n+@API(status = INTERNAL, since = \"1.7\", consumers = \"suite\") //TODO: Why isn't this used in testkit?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd64804a9f4d4fa74ec026b067ba001cb0076a35"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAzNDQ4Nw==", "bodyText": "Good catch! I think this should be done in the EngineDiscoveryOrchestrator constructor instead so we can avoid making it public.", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r551034487", "createdAt": "2021-01-03T17:45:00Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineIdValidator.java", "diffHunk": "@@ -21,14 +24,15 @@\n /**\n  * @since 1.7\n  */\n-class EngineIdValidator {\n+@API(status = INTERNAL, since = \"1.7\", consumers = \"suite\") //TODO: Why isn't this used in testkit?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAyODk5MA=="}, "originalCommit": {"oid": "fd64804a9f4d4fa74ec026b067ba001cb0076a35"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2NzU4MTYwOnYy", "diffSide": "RIGHT", "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/LauncherDiscoveryResult.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wM1QxNjo1OTozOVrOINgMDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wM1QxNjo1OTozOVrOINgMDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAyOTc3Mw==", "bodyText": "Could have opened up getEngineTestDescriptors but given  getEngineTestDescriptor needs a matching getTestEngines for the API to be usable I opened up this one instead.", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r551029773", "createdAt": "2021-01-03T16:59:39Z", "author": {"login": "mpkorstanje"}, "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/LauncherDiscoveryResult.java", "diffHunk": "@@ -48,7 +48,7 @@ ConfigurationParameters getConfigurationParameters() {\n \t\treturn configurationParameters;\n \t}\n \n-\tCollection<TestEngine> getTestEngines() {\n+\tpublic Collection<TestEngine> getTestEngines() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd64804a9f4d4fa74ec026b067ba001cb0076a35"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5MTM4MzkzOnYy", "diffSide": "RIGHT", "path": "documentation/src/test/java/example/SuiteDemo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQxOTo0MDoxM1rOIQ65Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQxOTo0MDoxM1rOIQ65Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYxMjk5OA==", "bodyText": "Both the platform launcher and platform runner only include classes with specific names when no other pattern is provided. In doing so they ignore ExampleTestCase.failingTest which would fail the build. So we have to explicitly configure the include patterns.\nI don't think it is a good idea to repeat this feature in the suite engine. It is a \"hidden\" requirement in addition to the use of the annotations. However I'm also unaware of the rationale for including it in the first place.\nWhat was is reason to only include classes with certain names by default?", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r554612998", "createdAt": "2021-01-10T19:40:13Z", "author": {"login": "mpkorstanje"}, "path": "documentation/src/test/java/example/SuiteDemo.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package example;\n+\n+//tag::user_guide[]\n+import org.junit.platform.suite.api.SelectPackages;\n+import org.junit.platform.suite.api.Suite;\n+import org.junit.platform.suite.api.SuiteDisplayName;\n+\n+@Suite\n+@SuiteDisplayName(\"JUnit Platform Suite Demo\")\n+@SelectPackages(\"example\")\n+//end::user_guide[]\n+@org.junit.platform.suite.api.IncludeClassNamePatterns", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b232de90bbf22a3081036440ee6319313085a2"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5MTM4NTA3OnYy", "diffSide": "RIGHT", "path": "documentation/src/docs/asciidoc/user-guide/appendix.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQxOTo0MToyOFrOIQ65kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQxOTo0MToyOFrOIQ65kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYxMzEzNw==", "bodyText": "I've intentionally removed the reference to other test engines. Looking at the current implementations I don't think it is feasible for other test engines to replicate this functionality without using JUnits internals.", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r554613137", "createdAt": "2021-01-10T19:41:28Z", "author": {"login": "mpkorstanje"}, "path": "documentation/src/docs/asciidoc/user-guide/appendix.adoc", "diffHunk": "@@ -50,10 +50,17 @@ artifacts are deployed to Sonatype's {snapshot-repo}[snapshots repository] under\n   `junit-platform-runner`::\n     Runner for executing tests and test suites on the JUnit Platform in a JUnit 4\n     environment. See <<running-tests-junit-platform-runner>> for details.\n+  `junit-platform-suite`::\n+    JUnit Platform Suite artifact that transitively pulls in dependencies on\n+    `junit-platform-suite-api`, `junit-platfomr-suite-engine` for simplified\n+    dependency management in build tools such as Gradle and Maven.\n   `junit-platform-suite-api`::\n     Annotations for configuring test suites on the JUnit Platform. Supported by the\n-    <<running-tests-junit-platform-runner,JUnitPlatform runner>> and possibly by\n-    third-party `TestEngine` implementations.\n+    <<junit-platform-suite-engine,JUnit Platform Suite Engine>> and\n+    <<running-tests-junit-platform-runner,JUnitPlatform runner>>.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94b232de90bbf22a3081036440ee6319313085a2"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5MTM4NjgwOnYy", "diffSide": "RIGHT", "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineDiscoveryOrchestrator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQxOTo0MzoxN1rOIQ66Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQxOTo0MzoxN1rOIQ66Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYxMzM1MQ==", "bodyText": "The usage of consumers is rather inconsistent. What is the preferred usage?\n@API(status = EXPERIMENTAL, since = \"1.3\", consumers = \"org.junit.platform.engine.support.hierarchical\")\n@API(status = INTERNAL, since = \"5.8\", consumers = \"org.junit.vintage.**\")\n@API(status = INTERNAL, since = \"1.7\", consumers = { \"testkit\", \"suite\" })", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r554613351", "createdAt": "2021-01-10T19:43:17Z", "author": {"login": "mpkorstanje"}, "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineDiscoveryOrchestrator.java", "diffHunk": "@@ -45,7 +48,7 @@\n  *\n  * @since 1.7\n  */\n-@API(status = INTERNAL, since = \"1.7\", consumers = \"testkit\")\n+@API(status = INTERNAL, since = \"1.7\", consumers = { \"testkit\", \"suite\" })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "697db7c78603a77189d9408a5af0d23deb9fc079"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5MTM5MDU1OnYy", "diffSide": "RIGHT", "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineDiscoveryOrchestrator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQxOTo0Njo1N1rOIQ68Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQxOTo0Njo1N1rOIQ68Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYxMzgwMw==", "bodyText": "Pruning the test engines is necessary because their test descriptors no longer root containers. This results in them being pruned when added as children to the parent engine. However because the LauncherDiscoveryResult is executed as a whole events for these empty test engine are still emitted resulting exceptions when trying to look up these nodes in in the test plan.\nI'm not sure where and if I should convey this information.\nPruning here also avoids the need to open up the LauncherDiscoveryResult more.", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r554613803", "createdAt": "2021-01-10T19:46:57Z", "author": {"login": "mpkorstanje"}, "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineDiscoveryOrchestrator.java", "diffHunk": "@@ -72,18 +75,40 @@ public EngineDiscoveryOrchestrator(Iterable<TestEngine> testEngines,\n \t * {@linkplain TestDescriptor#prune() prunes} the resulting test tree.\n \t */\n \tpublic LauncherDiscoveryResult discover(LauncherDiscoveryRequest request, Phase phase) {\n+\t\tMap<TestEngine, TestDescriptor> result = discover(request, phase, UniqueId::forEngine);\n+\t\treturn new LauncherDiscoveryResult(result, request.getConfigurationParameters());\n+\t}\n+\n+\t/**\n+\t * Discovers tests for the supplied request in the supplied phase using the\n+\t * configured test engines.\n+\t *\n+\t * <p>Applies {@linkplain org.junit.platform.launcher.EngineFilter engine\n+\t * filters} and {@linkplain PostDiscoveryFilter post-discovery filters} and\n+\t * {@linkplain TestDescriptor#prune() prunes} the resulting test tree.\n+\t *\n+\t * Additionally test engines without tests are pruned from from the discovery\n+\t * result and the engines unique id will be prefixed with {@code parentId}.\n+\t */\n+\tpublic LauncherDiscoveryResult discover(LauncherDiscoveryRequest request, Phase phase, UniqueId parentId) {\n+\t\tMap<TestEngine, TestDescriptor> result = discover(request, phase, parentId::appendEngine);\n+\t\treturn new LauncherDiscoveryResult(pruneEngines(result), request.getConfigurationParameters());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "697db7c78603a77189d9408a5af0d23deb9fc079"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5MTQwNTE3OnYy", "diffSide": "RIGHT", "path": "documentation/src/docs/asciidoc/user-guide/appendix.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQyMDowMzozOVrOIQ7DQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMFQyMDo0NTo0MFrOIQ7WIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYxNTYxNg==", "bodyText": "This image is becoming quite crowded now. I'm not sure how to improve it.", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r554615616", "createdAt": "2021-01-10T20:03:39Z", "author": {"login": "mpkorstanje"}, "path": "documentation/src/docs/asciidoc/user-guide/appendix.adoc", "diffHunk": "@@ -199,6 +208,12 @@ runner ..> launcher\n runner ..> suite_api\n runner ..> junit4\n \n+suite ..> suite_api\n+suite ..> suite_engine\n+\n+suite_engine ..> launcher\n+suite_engine ..> suite_api", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78fca289c4312a67b41de3140dfbb4e2c8cae499"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYyMDQ1MA==", "bodyText": "By adding some more space (additional dots) between the connections that cross package boundaries graphviz seems to be able to sort it out again.", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r554620450", "createdAt": "2021-01-10T20:45:40Z", "author": {"login": "mpkorstanje"}, "path": "documentation/src/docs/asciidoc/user-guide/appendix.adoc", "diffHunk": "@@ -199,6 +208,12 @@ runner ..> launcher\n runner ..> suite_api\n runner ..> junit4\n \n+suite ..> suite_api\n+suite ..> suite_engine\n+\n+suite_engine ..> launcher\n+suite_engine ..> suite_api", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDYxNTYxNg=="}, "originalCommit": {"oid": "78fca289c4312a67b41de3140dfbb4e2c8cae499"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3NDEyNDcwOnYy", "diffSide": "RIGHT", "path": "junit-platform-runner/src/main/java/org/junit/platform/runner/JUnitPlatform.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0zMFQyMzoyODowOFrOIdDbtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0zMFQyMzoyODowOFrOIdDbtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzMzNTg2Mw==", "bodyText": "What about meta-annotations?", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r567335863", "createdAt": "2021-01-30T23:28:08Z", "author": {"login": "mpkorstanje"}, "path": "junit-platform-runner/src/main/java/org/junit/platform/runner/JUnitPlatform.java", "diffHunk": "@@ -145,160 +157,23 @@ private JUnitPlatformTestTree generateTestTree(LauncherDiscoveryRequest discover\n \t}\n \n \tprivate LauncherDiscoveryRequest createDiscoveryRequest() {\n-\t\tList<DiscoverySelector> selectors = getSelectorsFromAnnotations();\n-\n+\t\tLauncherDiscoveryRequestBuilder requestBuilder = request();\n \t\t// Allows @RunWith(JUnitPlatform.class) to be added to any test case\n-\t\tboolean isSuite = !selectors.isEmpty();\n+\t\tboolean isSuite = isSuite();\n \t\tif (!isSuite) {\n-\t\t\tselectors.add(selectClass(this.testClass));\n+\t\t\trequestBuilder.selectors(selectClass(this.testClass));\n \t\t}\n \n-\t\tLauncherDiscoveryRequestBuilder requestBuilder = request().selectors(selectors);\n-\t\taddFiltersFromAnnotations(requestBuilder, isSuite);\n-\t\treturn requestBuilder.build();\n-\t}\n-\n-\tprivate void addFiltersFromAnnotations(LauncherDiscoveryRequestBuilder requestBuilder, boolean isSuite) {\n-\t\taddIncludeClassNamePatternFilter(requestBuilder, isSuite);\n-\t\taddExcludeClassNamePatternFilter(requestBuilder);\n-\n-\t\taddIncludePackagesFilter(requestBuilder);\n-\t\taddExcludePackagesFilter(requestBuilder);\n-\n-\t\taddIncludedTagsFilter(requestBuilder);\n-\t\taddExcludedTagsFilter(requestBuilder);\n-\n-\t\taddIncludedEnginesFilter(requestBuilder);\n-\t\taddExcludedEnginesFilter(requestBuilder);\n-\t}\n-\n-\tprivate List<DiscoverySelector> getSelectorsFromAnnotations() {\n-\t\tList<DiscoverySelector> selectors = new ArrayList<>();\n-\n-\t\tselectors.addAll(transform(getSelectedClasses(), DiscoverySelectors::selectClass));\n-\t\tselectors.addAll(transform(getSelectedPackageNames(), DiscoverySelectors::selectPackage));\n-\n-\t\treturn selectors;\n-\t}\n-\n-\tprivate <T> List<DiscoverySelector> transform(T[] sourceElements, Function<T, DiscoverySelector> transformer) {\n-\t\treturn stream(sourceElements).map(transformer).collect(toList());\n-\t}\n-\n-\tprivate void addIncludeClassNamePatternFilter(LauncherDiscoveryRequestBuilder requestBuilder, boolean isSuite) {\n-\t\tString[] patterns = getIncludeClassNamePatterns(isSuite);\n-\t\tif (patterns.length > 0) {\n-\t\t\trequestBuilder.filters(includeClassNamePatterns(patterns));\n-\t\t}\n-\t}\n-\n-\tprivate void addExcludeClassNamePatternFilter(LauncherDiscoveryRequestBuilder requestBuilder) {\n-\t\tString[] patterns = getExcludeClassNamePatterns();\n-\t\tif (patterns.length > 0) {\n-\t\t\trequestBuilder.filters(excludeClassNamePatterns(patterns));\n-\t\t}\n-\t}\n-\n-\tprivate void addIncludePackagesFilter(LauncherDiscoveryRequestBuilder requestBuilder) {\n-\t\tString[] includedPackages = getIncludedPackages();\n-\t\tif (includedPackages.length > 0) {\n-\t\t\trequestBuilder.filters(includePackageNames(includedPackages));\n-\t\t}\n-\t}\n-\n-\tprivate void addExcludePackagesFilter(LauncherDiscoveryRequestBuilder requestBuilder) {\n-\t\tString[] excludedPackages = getExcludedPackages();\n-\t\tif (excludedPackages.length > 0) {\n-\t\t\trequestBuilder.filters(excludePackageNames(excludedPackages));\n-\t\t}\n-\t}\n-\n-\tprivate void addIncludedTagsFilter(LauncherDiscoveryRequestBuilder requestBuilder) {\n-\t\tString[] includedTags = getIncludedTags();\n-\t\tif (includedTags.length > 0) {\n-\t\t\trequestBuilder.filters(includeTags(includedTags));\n-\t\t}\n-\t}\n-\n-\tprivate void addExcludedTagsFilter(LauncherDiscoveryRequestBuilder requestBuilder) {\n-\t\tString[] excludedTags = getExcludedTags();\n-\t\tif (excludedTags.length > 0) {\n-\t\t\trequestBuilder.filters(excludeTags(excludedTags));\n-\t\t}\n-\t}\n-\n-\tprivate void addIncludedEnginesFilter(LauncherDiscoveryRequestBuilder requestBuilder) {\n-\t\tString[] engineIds = getIncludedEngineIds();\n-\t\tif (engineIds.length > 0) {\n-\t\t\trequestBuilder.filters(includeEngines(engineIds));\n-\t\t}\n-\t}\n-\n-\tprivate void addExcludedEnginesFilter(LauncherDiscoveryRequestBuilder requestBuilder) {\n-\t\tString[] engineIds = getExcludedEngineIds();\n-\t\tif (engineIds.length > 0) {\n-\t\t\trequestBuilder.filters(excludeEngines(engineIds));\n-\t\t}\n-\t}\n-\n-\tprivate Class<?>[] getSelectedClasses() {\n-\t\treturn getValueFromAnnotation(SelectClasses.class, SelectClasses::value, EMPTY_CLASS_ARRAY);\n-\t}\n-\n-\tprivate String[] getSelectedPackageNames() {\n-\t\treturn getValueFromAnnotation(SelectPackages.class, SelectPackages::value, EMPTY_STRING_ARRAY);\n-\t}\n-\n-\tprivate String[] getIncludedPackages() {\n-\t\treturn getValueFromAnnotation(IncludePackages.class, IncludePackages::value, EMPTY_STRING_ARRAY);\n-\t}\n-\n-\tprivate String[] getExcludedPackages() {\n-\t\treturn getValueFromAnnotation(ExcludePackages.class, ExcludePackages::value, EMPTY_STRING_ARRAY);\n-\t}\n-\n-\tprivate String[] getIncludedTags() {\n-\t\treturn getValueFromAnnotation(IncludeTags.class, IncludeTags::value, EMPTY_STRING_ARRAY);\n-\t}\n-\n-\tprivate String[] getExcludedTags() {\n-\t\treturn getValueFromAnnotation(ExcludeTags.class, ExcludeTags::value, EMPTY_STRING_ARRAY);\n-\t}\n-\n-\tprivate String[] getIncludedEngineIds() {\n-\t\treturn getValueFromAnnotation(IncludeEngines.class, IncludeEngines::value, EMPTY_STRING_ARRAY);\n-\t}\n-\n-\tprivate String[] getExcludedEngineIds() {\n-\t\treturn getValueFromAnnotation(ExcludeEngines.class, ExcludeEngines::value, EMPTY_STRING_ARRAY);\n-\t}\n-\n-\tprivate String[] getIncludeClassNamePatterns(boolean isSuite) {\n-\t\tString[] patterns = trimmed(getValueFromAnnotation(IncludeClassNamePatterns.class,\n-\t\t\tIncludeClassNamePatterns::value, EMPTY_STRING_ARRAY));\n-\t\tif (patterns.length == 0 && isSuite) {\n-\t\t\treturn STANDARD_INCLUDE_PATTERN_ARRAY;\n-\t\t}\n-\t\treturn patterns;\n-\t}\n-\n-\tprivate String[] getExcludeClassNamePatterns() {\n-\t\treturn trimmed(getValueFromAnnotation(ExcludeClassNamePatterns.class, ExcludeClassNamePatterns::value,\n-\t\t\tEMPTY_STRING_ARRAY));\n-\t}\n-\n-\tprivate String[] trimmed(String[] patterns) {\n-\t\tif (patterns.length == 0) {\n-\t\t\treturn patterns;\n-\t\t}\n-\t\treturn Arrays.stream(patterns).filter(StringUtils::isNotBlank).map(String::trim).toArray(String[]::new);\n+\t\t// @formatter:off\n+\t\treturn SuiteLauncherDiscoveryRequestBuilder.request(requestBuilder)\n+\t\t\t\t.filterStandardClassNamePatterns(isSuite)\n+\t\t\t\t.suite(this.testClass)\n+\t\t\t\t.build();\n+\t\t// @formatter:on\n \t}\n \n-\tprivate <A extends Annotation, V> V getValueFromAnnotation(Class<A> annotationClass, Function<A, V> extractor,\n-\t\t\tV defaultValue) {\n-\n-\t\tA annotation = this.testClass.getAnnotation(annotationClass);\n-\t\treturn (annotation != null ? extractor.apply(annotation) : defaultValue);\n+\tprivate boolean isSuite() {\n+\t\treturn SUITE_ANNOTATIONS.stream().anyMatch(annotation -> testClass.getAnnotation(annotation) != null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37230ccccbf8d699a665950161fce4e0c93fe515"}, "originalPosition": 275}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3NDEyNzU2OnYy", "diffSide": "RIGHT", "path": "documentation/src/docs/asciidoc/user-guide/junit-platform-suite-engine.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0zMFQyMzozMTo1MFrOIdDc9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0zMVQxMzoyODozOVrOIdI9hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzMzNjE4Mg==", "bodyText": "What about meta annotations?", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r567336182", "createdAt": "2021-01-30T23:31:50Z", "author": {"login": "mpkorstanje"}, "path": "documentation/src/docs/asciidoc/user-guide/junit-platform-suite-engine.adoc", "diffHunk": "@@ -0,0 +1,41 @@\n+[[junit-platform-suite-engine]]\n+=== JUnit Platform Suite Engine\n+\n+The JUnit Platform supports declarative definition and execution of suites of tests from\n+_any_ test engine using the Junit Platform.\n+\n+==== Setup\n+\n+In addition to _at least one_ other test engine, you need the following artifacts and\n+their dependencies on the classpath. See <<dependency-metadata>> for details regarding\n+group IDs, artifact IDs, and versions.\n+\n+===== Explicit Dependencies\n+\n+* `junit-platform-suite-api` in _test_ scope\n+* `junit-platform-suite-engine` in _test runtime_ scope: implementation of the\n+                                `TestEngine` API for the declarative Junit Platform\n+                                Suites\n+\n+===== Transitive Dependencies\n+\n+* `junit-platform-launcher` in _test_ scope\n+* `junit-platform-engine` in _test_ scope\n+* `junit-platform-commons` in _test_ scope\n+* `opentest4j` in _test_ scope\n+\n+==== Test Suite\n+\n+By annotating a class with `@Suite` it is marked as a test suite on the JUnit Platform.\n+As seen in the following example, selector and filter annotations can then be used to\n+control the contents of the suite.\n+\n+[source,java,indent=0]\n+----\n+include::{testDir}/example/SuiteDemo.java[tags=user_guide]\n+----\n+\n+.Additional Configuration Options", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37230ccccbf8d699a665950161fce4e0c93fe515"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzQyNjQzOQ==", "bodyText": "In general, JUnit 5 always supports using annotations as meta-annotations. So if you're talking about finding the @Suite annotation as a meta-annotation, yes, we should support that.", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r567426439", "createdAt": "2021-01-31T13:28:39Z", "author": {"login": "sbrannen"}, "path": "documentation/src/docs/asciidoc/user-guide/junit-platform-suite-engine.adoc", "diffHunk": "@@ -0,0 +1,41 @@\n+[[junit-platform-suite-engine]]\n+=== JUnit Platform Suite Engine\n+\n+The JUnit Platform supports declarative definition and execution of suites of tests from\n+_any_ test engine using the Junit Platform.\n+\n+==== Setup\n+\n+In addition to _at least one_ other test engine, you need the following artifacts and\n+their dependencies on the classpath. See <<dependency-metadata>> for details regarding\n+group IDs, artifact IDs, and versions.\n+\n+===== Explicit Dependencies\n+\n+* `junit-platform-suite-api` in _test_ scope\n+* `junit-platform-suite-engine` in _test runtime_ scope: implementation of the\n+                                `TestEngine` API for the declarative Junit Platform\n+                                Suites\n+\n+===== Transitive Dependencies\n+\n+* `junit-platform-launcher` in _test_ scope\n+* `junit-platform-engine` in _test_ scope\n+* `junit-platform-commons` in _test_ scope\n+* `opentest4j` in _test_ scope\n+\n+==== Test Suite\n+\n+By annotating a class with `@Suite` it is marked as a test suite on the JUnit Platform.\n+As seen in the following example, selector and filter annotations can then be used to\n+control the contents of the suite.\n+\n+[source,java,indent=0]\n+----\n+include::{testDir}/example/SuiteDemo.java[tags=user_guide]\n+----\n+\n+.Additional Configuration Options", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzMzNjE4Mg=="}, "originalCommit": {"oid": "37230ccccbf8d699a665950161fce4e0c93fe515"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3NDEyOTQxOnYy", "diffSide": "RIGHT", "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/DiscoverySelectors.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0zMFQyMzozNToyNlrOIdDd0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0zMFQyMzozNToyNlrOIdDd0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzMzNjQwMg==", "bodyText": "For consistency.", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r567336402", "createdAt": "2021-01-30T23:35:26Z", "author": {"login": "mpkorstanje"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/discovery/DiscoverySelectors.java", "diffHunk": "@@ -343,8 +343,8 @@ public static ModuleSelector selectModule(String moduleName) {\n \t */\n \t@API(status = EXPERIMENTAL, since = \"1.1\")\n \tpublic static List<ModuleSelector> selectModules(Set<String> moduleNames) {\n-\t\tPreconditions.notNull(moduleNames, \"moduleNames must not be null\");\n-\t\tPreconditions.containsNoNullElements(moduleNames, \"individual module name must not be null\");\n+\t\tPreconditions.notNull(moduleNames, \"Module names must not be null\");\n+\t\tPreconditions.containsNoNullElements(moduleNames, \"Individual module name must not be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37230ccccbf8d699a665950161fce4e0c93fe515"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3NDE1MjQ0OnYy", "diffSide": "RIGHT", "path": "junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/IsSuiteClass.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0zMFQyMzo0Nzo0NVrOIdDqUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0zMFQyMzo0Nzo0NVrOIdDqUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzMzOTYwMw==", "bodyText": "@Suite\n@SelectPackages(\"org.junit.suite.testcases\")\nThis is starting to look kinda redundant. A suite without selectors doesn't work anyway. Though on the other hand, it would make it harder if multiple suite engines were used in the same project.\nSelectClasses\nSelectClasspathResource\nSelectDirectories\nSelectFile\nSelectFile\nSelectModules.\nSelectPackages\nSelectUris", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r567339603", "createdAt": "2021-01-30T23:47:45Z", "author": {"login": "mpkorstanje"}, "path": "junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/IsSuiteClass.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2015-2021 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.suite.engine;\n+\n+import java.util.function.Predicate;\n+\n+import org.junit.platform.commons.support.AnnotationSupport;\n+import org.junit.platform.suite.api.Suite;\n+\n+final class IsSuiteClass implements Predicate<Class<?>> {\n+\n+\tprivate static final IsPotentialTestContainer isPotentialTestContainer = new IsPotentialTestContainer();\n+\n+\t@Override\n+\tpublic boolean test(Class<?> testClass) {\n+\t\treturn isPotentialTestContainer.test(testClass) && hasSuiteAnnotation(testClass);\n+\t}\n+\n+\tprivate boolean hasSuiteAnnotation(Class<?> testClass) {\n+\t\treturn AnnotationSupport.isAnnotated(testClass, Suite.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "450ff2024d6f692e51855d98b77b1b4c6a4e2ed7"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwMjY1NDY3OnYy", "diffSide": "RIGHT", "path": "junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteLauncher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QxNDozNjozNVrOIhJUtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QxNDozNjozNVrOIhJUtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTYyNjY3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tPreconditions.condition(hasTestEngineOtherThenSuiteEngine(testEngines),\n          \n          \n            \n            \t\t\t() -> \"Cannot create SuiteLauncher without at least one other TestEngine; \"\n          \n          \n            \n            \t\t\t\t\t+ \"consider adding an engine implementation JAR to the classpath\");\n          \n          \n            \n            \t\tthis.discoveryOrchestrator = new EngineDiscoveryOrchestrator(testEngines, emptyList());\n          \n          \n            \n            \t}\n          \n          \n            \n            \n          \n          \n            \n            \tprivate boolean hasTestEngineOtherThenSuiteEngine(Set<TestEngine> testEngines) {\n          \n          \n            \n            \t\tPreconditions.condition(hasTestEngineOtherThanSuiteEngine(testEngines),\n          \n          \n            \n            \t\t\t() -> \"Cannot create SuiteLauncher without at least one other TestEngine; \"\n          \n          \n            \n            \t\t\t\t\t+ \"consider adding an engine implementation JAR to the classpath\");\n          \n          \n            \n            \t\tthis.discoveryOrchestrator = new EngineDiscoveryOrchestrator(testEngines, emptyList());\n          \n          \n            \n            \t}\n          \n          \n            \n            \n          \n          \n            \n            \tprivate boolean hasTestEngineOtherThanSuiteEngine(Set<TestEngine> testEngines) {", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r571626679", "createdAt": "2021-02-07T14:36:35Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/SuiteLauncher.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2015-2021 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.suite.engine;\n+\n+import static java.util.Collections.emptyList;\n+\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+\n+import org.junit.platform.commons.util.Preconditions;\n+import org.junit.platform.engine.EngineExecutionListener;\n+import org.junit.platform.engine.TestEngine;\n+import org.junit.platform.engine.UniqueId;\n+import org.junit.platform.launcher.LauncherDiscoveryRequest;\n+import org.junit.platform.launcher.core.EngineDiscoveryOrchestrator;\n+import org.junit.platform.launcher.core.EngineDiscoveryOrchestrator.Phase;\n+import org.junit.platform.launcher.core.EngineExecutionOrchestrator;\n+import org.junit.platform.launcher.core.LauncherDiscoveryResult;\n+import org.junit.platform.launcher.core.ServiceLoaderTestEngineRegistry;\n+\n+class SuiteLauncher {\n+\n+\tprivate final EngineExecutionOrchestrator executionOrchestrator = new EngineExecutionOrchestrator();\n+\tprivate final EngineDiscoveryOrchestrator discoveryOrchestrator;\n+\n+\tstatic SuiteLauncher create() {\n+\t\tSet<TestEngine> engines = new LinkedHashSet<>();\n+\t\tnew ServiceLoaderTestEngineRegistry().loadTestEngines().forEach(engines::add);\n+\t\treturn new SuiteLauncher(engines);\n+\t}\n+\n+\tprivate SuiteLauncher(Set<TestEngine> testEngines) {\n+\t\tPreconditions.condition(hasTestEngineOtherThenSuiteEngine(testEngines),\n+\t\t\t() -> \"Cannot create SuiteLauncher without at least one other TestEngine; \"\n+\t\t\t\t\t+ \"consider adding an engine implementation JAR to the classpath\");\n+\t\tthis.discoveryOrchestrator = new EngineDiscoveryOrchestrator(testEngines, emptyList());\n+\t}\n+\n+\tprivate boolean hasTestEngineOtherThenSuiteEngine(Set<TestEngine> testEngines) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10cfe8db6b185fec4db9cbddfd0f045ac4d46128"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwMjY1ODQyOnYy", "diffSide": "RIGHT", "path": "documentation/src/docs/asciidoc/release-notes/release-notes-5.8.0-M1.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QxNDozOTo0NlrOIhJWZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QxNDozOTo0NlrOIhJWZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTYyNzExMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Platform Launcher.\n          \n          \n            \n              Platform Launcher.", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r571627111", "createdAt": "2021-02-07T14:39:46Z", "author": {"login": "marcphilipp"}, "path": "documentation/src/docs/asciidoc/release-notes/release-notes-5.8.0-M1.adoc", "diffHunk": "@@ -45,7 +45,9 @@ on GitHub.\n   `LauncherSession` in order to allow for executing global setup and teardown code exactly\n   once via the new `LauncherSessionListener` interface that can be registered via Java\u2019s\n   `{ServiceLoader}` mechanism.\n-\n+* New `junit-platform-suite-engine` to execute declarative test suites using the JUnit\n+Platform Launcher.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10cfe8db6b185fec4db9cbddfd0f045ac4d46128"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwMjY3NjE4OnYy", "diffSide": "RIGHT", "path": "documentation/src/docs/asciidoc/user-guide/junit-platform-suite-engine.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QxNDo1NTo0M1rOIhJe8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QxNzozMDozMVrOIhKypw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTYyOTI5Nw==", "bodyText": "\u2753 Should we rather document to use junit-platform-suite?", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r571629297", "createdAt": "2021-02-07T14:55:43Z", "author": {"login": "marcphilipp"}, "path": "documentation/src/docs/asciidoc/user-guide/junit-platform-suite-engine.adoc", "diffHunk": "@@ -0,0 +1,42 @@\n+[[junit-platform-suite-engine]]\n+=== JUnit Platform Suite Engine\n+\n+The JUnit Platform supports declarative definition and execution of suites of tests from\n+_any_ test engine using the Junit Platform.\n+\n+==== Setup\n+\n+In addition to _at least one_ other test engine, you need the following artifacts and\n+their dependencies on the classpath. See <<dependency-metadata>> for details regarding\n+group IDs, artifact IDs, and versions.\n+\n+===== Explicit Dependencies\n+\n+* `junit-platform-suite-api` in _test_ scope\n+* `junit-platform-suite-engine` in _test runtime_ scope: implementation of the\n+                                `TestEngine` API for the declarative Junit Platform\n+                                Suites", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10cfe8db6b185fec4db9cbddfd0f045ac4d46128"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTY0NTQ1Mw==", "bodyText": "I couldn't work out from the documentation what the preferred pattern is.\nThe junit-jupiter aggregator goes unmentioned and the junit-platform-runner details the difference in scopes used by *-api and -engine. Something I don't think is possible when using junit-platform-suite because they'd both be in the same suite.", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r571645453", "createdAt": "2021-02-07T16:50:26Z", "author": {"login": "mpkorstanje"}, "path": "documentation/src/docs/asciidoc/user-guide/junit-platform-suite-engine.adoc", "diffHunk": "@@ -0,0 +1,42 @@\n+[[junit-platform-suite-engine]]\n+=== JUnit Platform Suite Engine\n+\n+The JUnit Platform supports declarative definition and execution of suites of tests from\n+_any_ test engine using the Junit Platform.\n+\n+==== Setup\n+\n+In addition to _at least one_ other test engine, you need the following artifacts and\n+their dependencies on the classpath. See <<dependency-metadata>> for details regarding\n+group IDs, artifact IDs, and versions.\n+\n+===== Explicit Dependencies\n+\n+* `junit-platform-suite-api` in _test_ scope\n+* `junit-platform-suite-engine` in _test runtime_ scope: implementation of the\n+                                `TestEngine` API for the declarative Junit Platform\n+                                Suites", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTYyOTI5Nw=="}, "originalCommit": {"oid": "10cfe8db6b185fec4db9cbddfd0f045ac4d46128"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTY1MDcyNw==", "bodyText": "Added a note about the aggregator. I think that should be sufficient.", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r571650727", "createdAt": "2021-02-07T17:30:31Z", "author": {"login": "mpkorstanje"}, "path": "documentation/src/docs/asciidoc/user-guide/junit-platform-suite-engine.adoc", "diffHunk": "@@ -0,0 +1,42 @@\n+[[junit-platform-suite-engine]]\n+=== JUnit Platform Suite Engine\n+\n+The JUnit Platform supports declarative definition and execution of suites of tests from\n+_any_ test engine using the Junit Platform.\n+\n+==== Setup\n+\n+In addition to _at least one_ other test engine, you need the following artifacts and\n+their dependencies on the classpath. See <<dependency-metadata>> for details regarding\n+group IDs, artifact IDs, and versions.\n+\n+===== Explicit Dependencies\n+\n+* `junit-platform-suite-api` in _test_ scope\n+* `junit-platform-suite-engine` in _test runtime_ scope: implementation of the\n+                                `TestEngine` API for the declarative Junit Platform\n+                                Suites", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTYyOTI5Nw=="}, "originalCommit": {"oid": "10cfe8db6b185fec4db9cbddfd0f045ac4d46128"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwMjY4MTUwOnYy", "diffSide": "RIGHT", "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/UniqueId.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QxNDo1OTo1NlrOIhJhZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QxNDo1OTo1NlrOIhJhZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTYyOTkyNA==", "bodyText": "\u2b55 Does this work?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * {@link Segment#getType type} {@code \"engine\"}.\n          \n          \n            \n            \t * {@link Segment#getType type} {@value ENGINE_SEGMENT_TYPE}.", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r571629924", "createdAt": "2021-02-07T14:59:56Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/UniqueId.java", "diffHunk": "@@ -162,6 +163,24 @@ public final UniqueId append(Segment segment) {\n \t\treturn new UniqueId(this.uniqueIdFormat, baseSegments);\n \t}\n \n+\t/**\n+\t * Construct a new {@code UniqueId} by appending a new {@link Segment}, based\n+\t * on the supplied {@code engineId}, to the end of this {@code UniqueId}.\n+\t *\n+\t * <p>This {@code UniqueId} will not be modified.\n+\t *\n+\t * <p>The engine ID will be stored in a {@link Segment} with\n+\t * {@link Segment#getType type} {@code \"engine\"}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10cfe8db6b185fec4db9cbddfd0f045ac4d46128"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwMjY4NTgxOnYy", "diffSide": "RIGHT", "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineDiscoveryOrchestrator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QxNTowNDo0MVrOIhJjdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QxNTowNDo0MVrOIhJjdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTYzMDQ1Mw==", "bodyText": "\u274c Although I don't know of any engine that is completely dynamic, we should call containsTests here:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t.filter(entry -> !entry.getValue().getChildren().isEmpty())\n          \n          \n            \n            \t\t\t\t.filter(entry -> TestDescriptor.containsTests(entry.getValue())", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r571630453", "createdAt": "2021-02-07T15:04:41Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/EngineDiscoveryOrchestrator.java", "diffHunk": "@@ -173,6 +202,15 @@ private void logTestDescriptorExclusionReasons(Map<String, List<TestDescriptor>>\n \t\t});\n \t}\n \n+\tprivate Map<TestEngine, TestDescriptor> pruneEngines(Map<TestEngine, TestDescriptor> result) {\n+\t\t// @formatter:off\n+\t\treturn result.entrySet()\n+\t\t\t\t.stream()\n+\t\t\t\t.filter(entry -> !entry.getValue().getChildren().isEmpty())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10cfe8db6b185fec4db9cbddfd0f045ac4d46128"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwMjY4NzQwOnYy", "diffSide": "RIGHT", "path": "junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/Configuration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QxNTowNjowM1rOIhJkMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QxNjozNDoxNFrOIhKVcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTYzMDY0Mw==", "bodyText": "\u2753 You opted for brevity here?", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r571630643", "createdAt": "2021-02-07T15:06:03Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/Configuration.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2015-2021 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.suite.api;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Inherited;\n+import java.lang.annotation.Repeatable;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.apiguardian.api.API;\n+import org.apiguardian.api.API.Status;\n+\n+/**\n+ * {@code @Configuration} specifies the configuration {@linkplain #key key} and\n+ * {@linkplain #value value} pairs to be added to the discovery request when running\n+ * a test suite on the JUnit Platform.\n+ *\n+ * @since 1.8\n+ * @see Suite\n+ * @see org.junit.platform.runner.JUnitPlatform\n+ * @see org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder#configurationParameter(String, String)\n+ */\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.TYPE)\n+@Inherited\n+@Documented\n+@API(status = Status.EXPERIMENTAL, since = \"1.8\")\n+@Repeatable(Configurations.class)\n+public @interface Configuration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10cfe8db6b185fec4db9cbddfd0f045ac4d46128"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTY0MzI1MA==", "bodyText": "I never noticed. But yes, it would be better to use ConfigurationParameter to retain the similarity to the launcher api.", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r571643250", "createdAt": "2021-02-07T16:34:14Z", "author": {"login": "mpkorstanje"}, "path": "junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/Configuration.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2015-2021 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.suite.api;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Inherited;\n+import java.lang.annotation.Repeatable;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.apiguardian.api.API;\n+import org.apiguardian.api.API.Status;\n+\n+/**\n+ * {@code @Configuration} specifies the configuration {@linkplain #key key} and\n+ * {@linkplain #value value} pairs to be added to the discovery request when running\n+ * a test suite on the JUnit Platform.\n+ *\n+ * @since 1.8\n+ * @see Suite\n+ * @see org.junit.platform.runner.JUnitPlatform\n+ * @see org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder#configurationParameter(String, String)\n+ */\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.TYPE)\n+@Inherited\n+@Documented\n+@API(status = Status.EXPERIMENTAL, since = \"1.8\")\n+@Repeatable(Configurations.class)\n+public @interface Configuration {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTYzMDY0Mw=="}, "originalCommit": {"oid": "10cfe8db6b185fec4db9cbddfd0f045ac4d46128"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwMjY5MDIyOnYy", "diffSide": "RIGHT", "path": "junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/package-info.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QxNTowODoyMFrOIhJljA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QxNTowODoyMFrOIhJljA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTYzMDk4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * {@code @Suite} with the {@code junit-platform-suite-engine}.\n          \n          \n            \n             * {@link Suite @Suite} with the {@code junit-platform-suite-engine}.", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r571630988", "createdAt": "2021-02-07T15:08:20Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-suite-api/src/main/java/org/junit/platform/suite/api/package-info.java", "diffHunk": "@@ -1,5 +1,13 @@\n /**\n  * Annotations for configuring a <em>test suite</em> on the JUnit Platform.\n+ *\n+ * <h4>JUnit 4 Suite Support</h4>\n+ * <p>Test suites can be run on the JUnit Platform in a JUnit 4 environment via\n+ * {@code @RunWith(JUnitPlatform.class)} with the {@code junit-platform-runner}.\n+ *\n+ * <h4>JUnit 5 Suite Support</h4>\n+ * <p>Test suites can be run on the JUnit Platform in a JUnit 5 environment via\n+ * {@code @Suite} with the {@code junit-platform-suite-engine}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10cfe8db6b185fec4db9cbddfd0f045ac4d46128"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwMjY5NjgwOnYy", "diffSide": "RIGHT", "path": "junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/DiscoverySelectorResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QxNToxMzoxM1rOIhJogA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QxNToxMzoxM1rOIhJogA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTYzMTc0NA==", "bodyText": "\u274c We shouldn't do this recursively, just for the engine descriptor's direct children.", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r571631744", "createdAt": "2021-02-07T15:13:13Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/DiscoverySelectorResolver.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2015-2021 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.platform.suite.engine;\n+\n+import org.junit.platform.engine.EngineDiscoveryRequest;\n+import org.junit.platform.engine.TestDescriptor;\n+import org.junit.platform.engine.support.discovery.EngineDiscoveryRequestResolver;\n+\n+final class DiscoverySelectorResolver {\n+\n+\t// @formatter:off\n+\tprivate static final EngineDiscoveryRequestResolver<SuiteEngineDescriptor> resolver = EngineDiscoveryRequestResolver.<SuiteEngineDescriptor>builder()\n+\t\t\t.addClassContainerSelectorResolver(new IsSuiteClass())\n+\t\t\t.addSelectorResolver(context -> new ClassSelectorResolver(context.getClassNameFilter(), context.getEngineDescriptor()))\n+\t\t\t.addTestDescriptorVisitor(context -> DiscoverySelectorResolver::discoverSuite)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10cfe8db6b185fec4db9cbddfd0f045ac4d46128"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwMjcwNTcyOnYy", "diffSide": "RIGHT", "path": "documentation/src/docs/asciidoc/user-guide/appendix.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QxNToxODoyMVrOIhJsgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QxNToxODoyMVrOIhJsgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTYzMjc3MA==", "bodyText": "Nice, I didn't know about these! \ud83d\udc4d", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r571632770", "createdAt": "2021-02-07T15:18:21Z", "author": {"login": "marcphilipp"}, "path": "documentation/src/docs/asciidoc/user-guide/appendix.adoc", "diffHunk": "@@ -173,15 +183,15 @@ jupiter ..> jupiter_api\n jupiter ..> jupiter_params\n jupiter ..> jupiter_engine\n \n-jupiter_api ..> opentest4j\n-jupiter_api ..> commons\n+jupiter_api ....> opentest4j\n+jupiter_api ...> commons", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10cfe8db6b185fec4db9cbddfd0f045ac4d46128"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwMjk1OTk1OnYy", "diffSide": "RIGHT", "path": "junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/DiscoverySelectorResolver.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QxODo0Njo0OFrOIhLqAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxMjozNToyMVrOIiT4uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTY2NDg5OA==", "bodyText": "\u2753 Shouldn't this be done before pruning the tree?", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r571664898", "createdAt": "2021-02-07T18:46:48Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/DiscoverySelectorResolver.java", "diffHunk": "@@ -34,6 +33,7 @@ private static void discoverSuite(TestDescriptor descriptor) {\n \n \tvoid resolveSelectors(EngineDiscoveryRequest request, SuiteEngineDescriptor engineDescriptor) {\n \t\tresolver.resolve(request, engineDescriptor);\n+\t\tengineDescriptor.getChildren().forEach(DiscoverySelectorResolver::discoverSuite);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94e47a2d66468829bc1ea6cad18c7b7e5086a8a0"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTY5NTc1Ng==", "bodyText": "Yup. \ud83e\udd15", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r571695756", "createdAt": "2021-02-07T21:04:57Z", "author": {"login": "mpkorstanje"}, "path": "junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/DiscoverySelectorResolver.java", "diffHunk": "@@ -34,6 +33,7 @@ private static void discoverSuite(TestDescriptor descriptor) {\n \n \tvoid resolveSelectors(EngineDiscoveryRequest request, SuiteEngineDescriptor engineDescriptor) {\n \t\tresolver.resolve(request, engineDescriptor);\n+\t\tengineDescriptor.getChildren().forEach(DiscoverySelectorResolver::discoverSuite);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTY2NDg5OA=="}, "originalCommit": {"oid": "94e47a2d66468829bc1ea6cad18c7b7e5086a8a0"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mjg0ODMxNQ==", "bodyText": "Fixed  a7bb955 .", "url": "https://github.com/junit-team/junit5/pull/2416#discussion_r572848315", "createdAt": "2021-02-09T12:35:21Z", "author": {"login": "mpkorstanje"}, "path": "junit-platform-suite-engine/src/main/java/org/junit/platform/suite/engine/DiscoverySelectorResolver.java", "diffHunk": "@@ -34,6 +33,7 @@ private static void discoverSuite(TestDescriptor descriptor) {\n \n \tvoid resolveSelectors(EngineDiscoveryRequest request, SuiteEngineDescriptor engineDescriptor) {\n \t\tresolver.resolve(request, engineDescriptor);\n+\t\tengineDescriptor.getChildren().forEach(DiscoverySelectorResolver::discoverSuite);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTY2NDg5OA=="}, "originalCommit": {"oid": "94e47a2d66468829bc1ea6cad18c7b7e5086a8a0"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4103, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}