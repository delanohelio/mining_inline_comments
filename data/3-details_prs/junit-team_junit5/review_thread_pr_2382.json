{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3NDQ1Nzkz", "number": 2382, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTozMTozN1rOEYG4bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxNjoxNjoyMFrOEYuMfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzE0MDI4OnYy", "diffSide": "RIGHT", "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/NodeTreeWalker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTozMTozN1rOHAQ9Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTozMTozN1rOHAQ9Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzOTg1OQ==", "bodyText": "This can be moved into the else branch again.", "url": "https://github.com/junit-team/junit5/pull/2382#discussion_r470039859", "createdAt": "2020-08-13T15:31:37Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/NodeTreeWalker.java", "diffHunk": "@@ -10,39 +10,62 @@\n \n package org.junit.platform.engine.support.hierarchical;\n \n+import static java.util.Collections.singleton;\n+import static org.junit.platform.engine.support.hierarchical.ExclusiveResource.GLOBAL_RESOURCE_LOCK_KEY;\n import static org.junit.platform.engine.support.hierarchical.Node.ExecutionMode.SAME_THREAD;\n \n import java.util.HashSet;\n import java.util.Set;\n import java.util.function.Consumer;\n \n+import org.junit.platform.commons.util.Preconditions;\n import org.junit.platform.engine.TestDescriptor;\n \n /**\n  * @since 1.3\n  */\n class NodeTreeWalker {\n \n+\tprivate static final ExclusiveResource GLOBAL_WRITE_LOCK = new ExclusiveResource(GLOBAL_RESOURCE_LOCK_KEY,\n+\t\tExclusiveResource.LockMode.READ_WRITE);\n+\tprivate static final ExclusiveResource GLOBAL_READ_LOCK = new ExclusiveResource(GLOBAL_RESOURCE_LOCK_KEY,\n+\t\tExclusiveResource.LockMode.READ);\n+\n \tprivate final LockManager lockManager = new LockManager();\n \n-\tNodeExecutionAdvisor walk(TestDescriptor testDescriptor) {\n+\tNodeExecutionAdvisor walk(TestDescriptor rootDescriptor) {\n \t\tNodeExecutionAdvisor advisor = new NodeExecutionAdvisor();\n-\t\twalk(testDescriptor, advisor);\n+\t\tPreconditions.condition(getExclusiveResources(rootDescriptor).isEmpty(),\n+\t\t\t\"Engine descriptor must not declare exclusive resources\");\n+\t\trootDescriptor.getChildren().forEach(child -> {\n+\t\t\twalk(child, child, advisor);\n+\t\t});\n \t\treturn advisor;\n \t}\n \n-\tprivate void walk(TestDescriptor testDescriptor, NodeExecutionAdvisor advisor) {\n+\tprivate void walk(TestDescriptor globalLockDescriptor, TestDescriptor testDescriptor,\n+\t\t\tNodeExecutionAdvisor advisor) {\n \t\tSet<ExclusiveResource> exclusiveResources = getExclusiveResources(testDescriptor);\n+\t\tSet<ExclusiveResource> allResources = new HashSet<>(exclusiveResources);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b7c6dfbecc2fa67b3db72e62d835439d99089fc"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzE0NDE3OnYy", "diffSide": "RIGHT", "path": "platform-tests/src/test/java/org/junit/platform/engine/support/hierarchical/LockManagerTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTozMjozNlrOHAQ_qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTozMjozNlrOHAQ_qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA0MDQ5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tnew ExclusiveResource(GLOBAL_RESOURCE_LOCK_KEY, globalLockMode), new ExclusiveResource(\"bar\", READ_WRITE));\n          \n          \n            \n            \t\t\tnew ExclusiveResource(GLOBAL_RESOURCE_LOCK_KEY, globalLockMode), //\n          \n          \n            \n            \t\t\tnew ExclusiveResource(\"bar\", READ_WRITE));", "url": "https://github.com/junit-team/junit5/pull/2382#discussion_r470040490", "createdAt": "2020-08-13T15:32:36Z", "author": {"login": "marcphilipp"}, "path": "platform-tests/src/test/java/org/junit/platform/engine/support/hierarchical/LockManagerTests.java", "diffHunk": "@@ -93,6 +97,27 @@ void returnsWriteLockForExclusiveResourceWithBothLockModes() {\n \t\tassertThat(locks.get(1)).isInstanceOf(WriteLock.class);\n \t}\n \n+\t@ParameterizedTest\n+\t@EnumSource\n+\tvoid globalLockComesFirst(LockMode globalLockMode) {\n+\t\tCollection<ExclusiveResource> resources = asList( //\n+\t\t\tnew ExclusiveResource(\"___foo\", READ), //\n+\t\t\tnew ExclusiveResource(\"foo\", READ_WRITE), //\n+\t\t\tnew ExclusiveResource(GLOBAL_RESOURCE_LOCK_KEY, globalLockMode), new ExclusiveResource(\"bar\", READ_WRITE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b7c6dfbecc2fa67b3db72e62d835439d99089fc"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MDM2Mzk4OnYy", "diffSide": "RIGHT", "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/parallel/Isolated.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMDoxMDowN1rOHAvPhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMDoxMDowN1rOHAvPhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUzNjA2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @Target({ ElementType.TYPE, ElementType.METHOD })\n          \n          \n            \n            @Target(ElementType.TYPE)", "url": "https://github.com/junit-team/junit5/pull/2382#discussion_r470536068", "createdAt": "2020-08-14T10:10:07Z", "author": {"login": "marcphilipp"}, "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/parallel/Isolated.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.jupiter.api.parallel;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Inherited;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.apiguardian.api.API;\n+\n+@API(status = EXPERIMENTAL, since = \"5.7\")\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target({ ElementType.TYPE, ElementType.METHOD })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3f5a4dbb98cccc0bd198d54d3047e91644cd29f"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MDQwMzE3OnYy", "diffSide": "RIGHT", "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/parallel/Isolated.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMDoyMzoxM1rOHAvmhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwOToxNjowOVrOHBI_MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU0MTk1Ng==", "bodyText": "\u2753 Feedback from JUnit team call: maybe call the lock __isolated__? Or namespace it (e.g. junit.platform.isolation)?", "url": "https://github.com/junit-team/junit5/pull/2382#discussion_r470541956", "createdAt": "2020-08-14T10:23:13Z", "author": {"login": "marcphilipp"}, "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/parallel/Isolated.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.jupiter.api.parallel;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Inherited;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.apiguardian.api.API;\n+\n+@API(status = EXPERIMENTAL, since = \"5.7\")\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target({ ElementType.TYPE, ElementType.METHOD })\n+@Inherited\n+@ResourceLock(\"__global__\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3f5a4dbb98cccc0bd198d54d3047e91644cd29f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc4ODQyOA==", "bodyText": "IMHO the name of the lock is fitting, as the lock is used by every TestDescriptor, I would find it more confusing if every such descriptor would acquire a read lock on __isolated__.\nJust as a side note: https://en.wikipedia.org/wiki/Global_interpreter_lock\nMaybe we could change the annotation to @GlobalIsolation if @Isolated to __global__ is too surprising.\nFurthermore, not every engine will call their annotation @Isolated.", "url": "https://github.com/junit-team/junit5/pull/2382#discussion_r470788428", "createdAt": "2020-08-14T18:23:42Z", "author": {"login": "leonard84"}, "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/parallel/Isolated.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.jupiter.api.parallel;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Inherited;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.apiguardian.api.API;\n+\n+@API(status = EXPERIMENTAL, since = \"5.7\")\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target({ ElementType.TYPE, ElementType.METHOD })\n+@Inherited\n+@ResourceLock(\"__global__\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU0MTk1Ng=="}, "originalCommit": {"oid": "e3f5a4dbb98cccc0bd198d54d3047e91644cd29f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk1Nzg3Mg==", "bodyText": "I went with org.junit.platform.engine.support.hierarchical.ExclusiveResource.GLOBAL_KEY now for consistency with the constants in the Resources class.", "url": "https://github.com/junit-team/junit5/pull/2382#discussion_r470957872", "createdAt": "2020-08-15T09:16:09Z", "author": {"login": "marcphilipp"}, "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/parallel/Isolated.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.jupiter.api.parallel;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Inherited;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.apiguardian.api.API;\n+\n+@API(status = EXPERIMENTAL, since = \"5.7\")\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target({ ElementType.TYPE, ElementType.METHOD })\n+@Inherited\n+@ResourceLock(\"__global__\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU0MTk1Ng=="}, "originalCommit": {"oid": "e3f5a4dbb98cccc0bd198d54d3047e91644cd29f"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MzIwMjUyOnYy", "diffSide": "RIGHT", "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/NodeTreeWalker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwOTo1NTo1MFrOHBJKzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxMDoyNTo0M1rOHBJUBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk2MDg0NA==", "bodyText": "You could create a constant for the singleton locks, no real need to create new instances, same for the read_write below", "url": "https://github.com/junit-team/junit5/pull/2382#discussion_r470960844", "createdAt": "2020-08-15T09:55:50Z", "author": {"login": "leonard84"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/NodeTreeWalker.java", "diffHunk": "@@ -25,16 +29,20 @@\n \n \tprivate final LockManager lockManager = new LockManager();\n \n-\tNodeExecutionAdvisor walk(TestDescriptor testDescriptor) {\n+\tNodeExecutionAdvisor walk(TestDescriptor rootDescriptor) {\n \t\tNodeExecutionAdvisor advisor = new NodeExecutionAdvisor();\n-\t\twalk(testDescriptor, advisor);\n+\t\tPreconditions.condition(getExclusiveResources(rootDescriptor).isEmpty(),\n+\t\t\t\"Engine descriptor must not declare exclusive resources\");\n+\t\trootDescriptor.getChildren().forEach(child -> walk(child, child, advisor));\n \t\treturn advisor;\n \t}\n \n-\tprivate void walk(TestDescriptor testDescriptor, NodeExecutionAdvisor advisor) {\n+\tprivate void walk(TestDescriptor globalLockDescriptor, TestDescriptor testDescriptor,\n+\t\t\tNodeExecutionAdvisor advisor) {\n \t\tSet<ExclusiveResource> exclusiveResources = getExclusiveResources(testDescriptor);\n \t\tif (exclusiveResources.isEmpty()) {\n-\t\t\ttestDescriptor.getChildren().forEach(child -> walk(child, advisor));\n+\t\t\tadvisor.useResourceLock(testDescriptor, lockManager.getLockForResources(singleton(GLOBAL_READ)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99683df4d29ccec7b185319ef2ee1f8f5a4d9490"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk2MzIwNA==", "bodyText": "Good catch. I added a getLockForResource method that takes a single ExclusiveResource now.", "url": "https://github.com/junit-team/junit5/pull/2382#discussion_r470963204", "createdAt": "2020-08-15T10:25:43Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/NodeTreeWalker.java", "diffHunk": "@@ -25,16 +29,20 @@\n \n \tprivate final LockManager lockManager = new LockManager();\n \n-\tNodeExecutionAdvisor walk(TestDescriptor testDescriptor) {\n+\tNodeExecutionAdvisor walk(TestDescriptor rootDescriptor) {\n \t\tNodeExecutionAdvisor advisor = new NodeExecutionAdvisor();\n-\t\twalk(testDescriptor, advisor);\n+\t\tPreconditions.condition(getExclusiveResources(rootDescriptor).isEmpty(),\n+\t\t\t\"Engine descriptor must not declare exclusive resources\");\n+\t\trootDescriptor.getChildren().forEach(child -> walk(child, child, advisor));\n \t\treturn advisor;\n \t}\n \n-\tprivate void walk(TestDescriptor testDescriptor, NodeExecutionAdvisor advisor) {\n+\tprivate void walk(TestDescriptor globalLockDescriptor, TestDescriptor testDescriptor,\n+\t\t\tNodeExecutionAdvisor advisor) {\n \t\tSet<ExclusiveResource> exclusiveResources = getExclusiveResources(testDescriptor);\n \t\tif (exclusiveResources.isEmpty()) {\n-\t\t\ttestDescriptor.getChildren().forEach(child -> walk(child, advisor));\n+\t\t\tadvisor.useResourceLock(testDescriptor, lockManager.getLockForResources(singleton(GLOBAL_READ)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk2MDg0NA=="}, "originalCommit": {"oid": "99683df4d29ccec7b185319ef2ee1f8f5a4d9490"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MzIxMzY5OnYy", "diffSide": "RIGHT", "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/ExclusiveResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxMDoxMjoxM1rOHBJQAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxMDozODozMFrOHBJXuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk2MjE3Ng==", "bodyText": "Maybe extend the explanation a bit with the additional effects if any such child requests READ_WRITE for this key, i.e. lock coarsening to top-level descriptor, forced same thread execution", "url": "https://github.com/junit-team/junit5/pull/2382#discussion_r470962176", "createdAt": "2020-08-15T10:12:13Z", "author": {"login": "leonard84"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/ExclusiveResource.java", "diffHunk": "@@ -29,6 +29,19 @@\n @API(status = EXPERIMENTAL, since = \"1.3\")\n public class ExclusiveResource {\n \n+\t/**\n+\t * The key for the global resource lock that all direct children of the\n+\t * engine descriptor acquire in {@linkplain LockMode#READ read} mode by\n+\t * default.\n+\t *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99683df4d29ccec7b185319ef2ee1f8f5a4d9490"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk2NDE1Mg==", "bodyText": "Done in f7a7742.", "url": "https://github.com/junit-team/junit5/pull/2382#discussion_r470964152", "createdAt": "2020-08-15T10:38:30Z", "author": {"login": "marcphilipp"}, "path": "junit-platform-engine/src/main/java/org/junit/platform/engine/support/hierarchical/ExclusiveResource.java", "diffHunk": "@@ -29,6 +29,19 @@\n @API(status = EXPERIMENTAL, since = \"1.3\")\n public class ExclusiveResource {\n \n+\t/**\n+\t * The key for the global resource lock that all direct children of the\n+\t * engine descriptor acquire in {@linkplain LockMode#READ read} mode by\n+\t * default.\n+\t *", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk2MjE3Ng=="}, "originalCommit": {"oid": "99683df4d29ccec7b185319ef2ee1f8f5a4d9490"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MzU4MTQxOnYy", "diffSide": "RIGHT", "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/parallel/Isolated.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxNjoxNjoyMFrOHBML2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxMDo0NzowMlrOHBRevw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAxMDI2NQ==", "bodyText": "I wonder if the constant could be declared in the interface, so it could be referenced from ExclusiveResource", "url": "https://github.com/junit-team/junit5/pull/2382#discussion_r471010265", "createdAt": "2020-08-15T16:16:20Z", "author": {"login": "vlsi"}, "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/parallel/Isolated.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.jupiter.api.parallel;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Inherited;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.apiguardian.api.API;\n+\n+/**\n+ * {@code @Isolated} is used to declare that the annotated test class should be\n+ * executed in isolation from other test classes.\n+ *\n+ * <p>When a test class is run in isolation, no other test class is executed\n+ * concurrently. This can be used to enable parallel test execution for the\n+ * entire test suite while running some tests in isolation (e.g. if they modify\n+ * some global resource).\n+ *\n+ * @since 5.7\n+ * @see ExecutionMode\n+ * @see ResourceLock\n+ */\n+@API(status = EXPERIMENTAL, since = \"5.7\")\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.TYPE)\n+@Inherited\n+@ResourceLock(\"org.junit.platform.engine.support.hierarchical.ExclusiveResource.GLOBAL_KEY\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30f1955235456c1cba70ee34b33a676b4f938b62"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5NzAyMw==", "bodyText": "jupiter-api doesn't have a dependency on platform-engine or vice versa.", "url": "https://github.com/junit-team/junit5/pull/2382#discussion_r471097023", "createdAt": "2020-08-16T10:47:02Z", "author": {"login": "marcphilipp"}, "path": "junit-jupiter-api/src/main/java/org/junit/jupiter/api/parallel/Isolated.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2015-2020 the original author or authors.\n+ *\n+ * All rights reserved. This program and the accompanying materials are\n+ * made available under the terms of the Eclipse Public License v2.0 which\n+ * accompanies this distribution and is available at\n+ *\n+ * https://www.eclipse.org/legal/epl-v20.html\n+ */\n+\n+package org.junit.jupiter.api.parallel;\n+\n+import static org.apiguardian.api.API.Status.EXPERIMENTAL;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Inherited;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.apiguardian.api.API;\n+\n+/**\n+ * {@code @Isolated} is used to declare that the annotated test class should be\n+ * executed in isolation from other test classes.\n+ *\n+ * <p>When a test class is run in isolation, no other test class is executed\n+ * concurrently. This can be used to enable parallel test execution for the\n+ * entire test suite while running some tests in isolation (e.g. if they modify\n+ * some global resource).\n+ *\n+ * @since 5.7\n+ * @see ExecutionMode\n+ * @see ResourceLock\n+ */\n+@API(status = EXPERIMENTAL, since = \"5.7\")\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.TYPE)\n+@Inherited\n+@ResourceLock(\"org.junit.platform.engine.support.hierarchical.ExclusiveResource.GLOBAL_KEY\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAxMDI2NQ=="}, "originalCommit": {"oid": "30f1955235456c1cba70ee34b33a676b4f938b62"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4089, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}