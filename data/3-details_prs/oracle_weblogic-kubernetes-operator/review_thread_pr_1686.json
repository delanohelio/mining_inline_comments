{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NTgwMjIz", "number": 1686, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxOTo0NTo0NVrOEAphZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxOTo0NTo0NVrOEAphZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTE1NzUxOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiSample.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxOTo0NTo0NVrOGcD94w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjoyNjowOVrOGcjr9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA3ODMwNw==", "bodyText": "It should not be necessary to set MODEL_DIR anymore.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1686#discussion_r432078307", "createdAt": "2020-05-28T19:45:45Z", "author": {"login": "tbarnes-us"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiSample.java", "diffHunk": "@@ -0,0 +1,244 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WORK_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteImage;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.doesImageExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getDateAndTimeStamp;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests to verify MII sample.\n+ */\n+@DisplayName(\"Test model in image sample\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@IntegrationTest\n+public class ItMiiSample implements LoggedTest {\n+\n+  private static final String MII_SAMPLES_WORK_DIR = WORK_DIR\n+      + \"/model-in-image-sample-work-dir\";\n+  private static final String MII_SAMPLES_SCRIPT =\n+      \"../src/integration-tests/model-in-image/run-test.sh\";\n+\n+  private static String DOMAIN_TYPE = \"WLS\";\n+  private static String MII_SAMPLE_IMAGE_NAME1 = REPO_NAME + \"mii-\" + getDateAndTimeStamp();\n+  private static String MII_SAMPLE_IMAGE_NAME2 = REPO_NAME + \"mii-\" + getDateAndTimeStamp();\n+  private static String MII_SAMPLE_IMAGE_TAG_V1 = DOMAIN_TYPE + \"-v1\";\n+  private static String MII_SAMPLE_IMAGE_TAG_V2 = DOMAIN_TYPE + \"-v2\";\n+  private static String imageNameV1 = MII_SAMPLE_IMAGE_NAME1 + \":\" + MII_SAMPLE_IMAGE_TAG_V1;\n+  private static String imageNameV2 = MII_SAMPLE_IMAGE_NAME2 + \":\" + MII_SAMPLE_IMAGE_TAG_V2;\n+  private static String SUCCESS_SEARCH_STRING = \"Finished without errors\";\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static String traefikNamespace = null;\n+  private static Map<String, String> envMap = null;\n+\n+  /**\n+   * Install Operator.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *        JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    logger.info(\"Creating unique namespace for Treafik\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    traefikNamespace = namespaces.get(2);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // env variables to override default values in sample scripts\n+    envMap = new HashMap<String, String>();\n+    envMap.put(\"DOMAIN_NAMESPACE\", domainNamespace);\n+    envMap.put(\"TRAEFIK_NAMESPACE\", traefikNamespace);\n+    envMap.put(\"WORKDIR\", MII_SAMPLES_WORK_DIR);\n+    envMap.put(\"MODEL_IMAGE_NAME\", MII_SAMPLE_IMAGE_NAME1);\n+    envMap.put(\"MODEL_DIR\", \"model-images/model-in-image__\" + MII_SAMPLE_IMAGE_TAG_V1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09704eabbf2bc97bae44c795d505430d33ef6569"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU5ODAwNQ==", "bodyText": "removed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1686#discussion_r432598005", "createdAt": "2020-05-29T16:26:09Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiSample.java", "diffHunk": "@@ -0,0 +1,244 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WORK_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteImage;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.doesImageExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getDateAndTimeStamp;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests to verify MII sample.\n+ */\n+@DisplayName(\"Test model in image sample\")\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@IntegrationTest\n+public class ItMiiSample implements LoggedTest {\n+\n+  private static final String MII_SAMPLES_WORK_DIR = WORK_DIR\n+      + \"/model-in-image-sample-work-dir\";\n+  private static final String MII_SAMPLES_SCRIPT =\n+      \"../src/integration-tests/model-in-image/run-test.sh\";\n+\n+  private static String DOMAIN_TYPE = \"WLS\";\n+  private static String MII_SAMPLE_IMAGE_NAME1 = REPO_NAME + \"mii-\" + getDateAndTimeStamp();\n+  private static String MII_SAMPLE_IMAGE_NAME2 = REPO_NAME + \"mii-\" + getDateAndTimeStamp();\n+  private static String MII_SAMPLE_IMAGE_TAG_V1 = DOMAIN_TYPE + \"-v1\";\n+  private static String MII_SAMPLE_IMAGE_TAG_V2 = DOMAIN_TYPE + \"-v2\";\n+  private static String imageNameV1 = MII_SAMPLE_IMAGE_NAME1 + \":\" + MII_SAMPLE_IMAGE_TAG_V1;\n+  private static String imageNameV2 = MII_SAMPLE_IMAGE_NAME2 + \":\" + MII_SAMPLE_IMAGE_TAG_V2;\n+  private static String SUCCESS_SEARCH_STRING = \"Finished without errors\";\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static String traefikNamespace = null;\n+  private static Map<String, String> envMap = null;\n+\n+  /**\n+   * Install Operator.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *        JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    logger.info(\"Creating unique namespace for Treafik\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    traefikNamespace = namespaces.get(2);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // env variables to override default values in sample scripts\n+    envMap = new HashMap<String, String>();\n+    envMap.put(\"DOMAIN_NAMESPACE\", domainNamespace);\n+    envMap.put(\"TRAEFIK_NAMESPACE\", traefikNamespace);\n+    envMap.put(\"WORKDIR\", MII_SAMPLES_WORK_DIR);\n+    envMap.put(\"MODEL_IMAGE_NAME\", MII_SAMPLE_IMAGE_NAME1);\n+    envMap.put(\"MODEL_DIR\", \"model-images/model-in-image__\" + MII_SAMPLE_IMAGE_TAG_V1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA3ODMwNw=="}, "originalCommit": {"oid": "09704eabbf2bc97bae44c795d505430d33ef6569"}, "originalPosition": 93}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4267, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}