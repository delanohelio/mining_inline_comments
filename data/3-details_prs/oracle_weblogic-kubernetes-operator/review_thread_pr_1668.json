{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwOTY5OTAw", "number": 1668, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNDo0Mjo1N1rOD-eMzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNDoyOTo1N1rOD-nlCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODMzMTAyOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNDo0Mjo1N1rOGYl_zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNzo0MDowNVrOGY8X2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ0MTU0OA==", "bodyText": "You don't really need this check, the podReady actually validates the existence of the pod and ready status", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1668#discussion_r428441548", "createdAt": "2020-05-21T04:42:57Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -259,60 +171,60 @@ public void testCreateMiiDomain() {\n     final int replicaCount = 2;\n \n     // Create the repo secret to pull the image\n-    assertDoesNotThrow(() -> createRepoSecret(domainNamespace),\n-            String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+        String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n \n     // create secret for admin credentials\n     logger.info(\"Create secret for admin credentials\");\n     String adminSecretName = \"weblogic-credentials\";\n-    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n-            \"welcome1\", domainNamespace),\n-            String.format(\"createSecret failed for %s\", adminSecretName));\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+                                    adminSecretName,\n+                                    domainNamespace,\n+                                    \"weblogic\",\n+                                    \"welcome1\"),\n+        String.format(\"createSecret failed for %s\", adminSecretName));\n \n     // create encryption secret\n     logger.info(\"Create encryption secret\");\n     String encryptionSecretName = \"encryptionsecret\";\n-    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n-            \"weblogicenc\", domainNamespace),\n-             String.format(\"createSecret failed for %s\", encryptionSecretName));\n-\n-    // create the domain CR\n-    createDomainResource(domainUid, domainNamespace, adminSecretName, REPO_SECRET_NAME,\n-              encryptionSecretName, replicaCount);\n-\n-    // wait for the domain to exist\n-    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n-    withStandardRetryPolicy\n-        .conditionEvaluationListener(\n-            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n-                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n-                domainUid,\n-                domainNamespace,\n-                condition.getElapsedTimeInMS(),\n-                condition.getRemainingTimeInMS()))\n-        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n-\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+                                      encryptionSecretName,\n+                                      domainNamespace,\n+                            \"weblogicenc\",\n+                            \"weblogicenc\"),\n+                    String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    // create the domain object\n+    Domain domain = createDomainResource(domainUid,\n+                                      domainNamespace,\n+                                      adminSecretName,\n+                                      REPO_SECRET_NAME,\n+                                      encryptionSecretName,\n+                                      replicaCount,\n+                              MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG);\n+\n+    // create model in image domain\n+    logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+        domainUid, domainNamespace, MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG);\n+    createDomainAndVerify(domain, domainNamespace);\n \n     // check admin server pod exists\n     logger.info(\"Check for admin server pod {0} existence in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkPodCreated(adminServerPodName, domainUid, domainNamespace);\n+    checkPodExists(adminServerPodName, domainUid, domainNamespace);\n \n     // check managed server pods exist\n     for (int i = 1; i <= replicaCount; i++) {\n       logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n           managedServerPrefix + i, domainNamespace);\n-      checkPodCreated(managedServerPrefix + i, domainUid, domainNamespace);\n+      checkPodExists(managedServerPrefix + i, domainUid, domainNamespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a91bfa10114bb648a3883aecaa15f7749353cea9"}, "originalPosition": 295}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgwODE1NA==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1668#discussion_r428808154", "createdAt": "2020-05-21T17:40:05Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -259,60 +171,60 @@ public void testCreateMiiDomain() {\n     final int replicaCount = 2;\n \n     // Create the repo secret to pull the image\n-    assertDoesNotThrow(() -> createRepoSecret(domainNamespace),\n-            String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+        String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n \n     // create secret for admin credentials\n     logger.info(\"Create secret for admin credentials\");\n     String adminSecretName = \"weblogic-credentials\";\n-    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n-            \"welcome1\", domainNamespace),\n-            String.format(\"createSecret failed for %s\", adminSecretName));\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+                                    adminSecretName,\n+                                    domainNamespace,\n+                                    \"weblogic\",\n+                                    \"welcome1\"),\n+        String.format(\"createSecret failed for %s\", adminSecretName));\n \n     // create encryption secret\n     logger.info(\"Create encryption secret\");\n     String encryptionSecretName = \"encryptionsecret\";\n-    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n-            \"weblogicenc\", domainNamespace),\n-             String.format(\"createSecret failed for %s\", encryptionSecretName));\n-\n-    // create the domain CR\n-    createDomainResource(domainUid, domainNamespace, adminSecretName, REPO_SECRET_NAME,\n-              encryptionSecretName, replicaCount);\n-\n-    // wait for the domain to exist\n-    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n-    withStandardRetryPolicy\n-        .conditionEvaluationListener(\n-            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n-                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n-                domainUid,\n-                domainNamespace,\n-                condition.getElapsedTimeInMS(),\n-                condition.getRemainingTimeInMS()))\n-        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n-\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+                                      encryptionSecretName,\n+                                      domainNamespace,\n+                            \"weblogicenc\",\n+                            \"weblogicenc\"),\n+                    String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    // create the domain object\n+    Domain domain = createDomainResource(domainUid,\n+                                      domainNamespace,\n+                                      adminSecretName,\n+                                      REPO_SECRET_NAME,\n+                                      encryptionSecretName,\n+                                      replicaCount,\n+                              MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG);\n+\n+    // create model in image domain\n+    logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+        domainUid, domainNamespace, MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG);\n+    createDomainAndVerify(domain, domainNamespace);\n \n     // check admin server pod exists\n     logger.info(\"Check for admin server pod {0} existence in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkPodCreated(adminServerPodName, domainUid, domainNamespace);\n+    checkPodExists(adminServerPodName, domainUid, domainNamespace);\n \n     // check managed server pods exist\n     for (int i = 1; i <= replicaCount; i++) {\n       logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n           managedServerPrefix + i, domainNamespace);\n-      checkPodCreated(managedServerPrefix + i, domainUid, domainNamespace);\n+      checkPodExists(managedServerPrefix + i, domainUid, domainNamespace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ0MTU0OA=="}, "originalCommit": {"oid": "a91bfa10114bb648a3883aecaa15f7749353cea9"}, "originalPosition": 295}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODM0NzEyOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNDo1NDoyMlrOGYmJgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNzo0MDoxNFrOGY8YNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ0NDAzNA==", "bodyText": "add javadoc", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1668#discussion_r428444034", "createdAt": "2020-05-21T04:54:22Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -748,6 +573,117 @@ public void tearDownAll() {\n     }\n   }\n \n+  @ParameterizedTest\n+  @DisplayName(\"Create model in image domain using different WebLogic version images as parameters\")\n+  @MethodSource(\"oracle.weblogic.kubernetes.utils.Params#webLogicImageTags\")\n+  public void testParamsCreateMiiDomain(String imageTag, @Namespaces(1) List<String> namespaces) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a91bfa10114bb648a3883aecaa15f7749353cea9"}, "originalPosition": 545}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgwODI0Nw==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1668#discussion_r428808247", "createdAt": "2020-05-21T17:40:14Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -748,6 +573,117 @@ public void tearDownAll() {\n     }\n   }\n \n+  @ParameterizedTest\n+  @DisplayName(\"Create model in image domain using different WebLogic version images as parameters\")\n+  @MethodSource(\"oracle.weblogic.kubernetes.utils.Params#webLogicImageTags\")\n+  public void testParamsCreateMiiDomain(String imageTag, @Namespaces(1) List<String> namespaces) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ0NDAzNA=="}, "originalCommit": {"oid": "a91bfa10114bb648a3883aecaa15f7749353cea9"}, "originalPosition": 545}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODM0ODIyOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNDo1NTowM1rOGYmKJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNzo0MDoyM1rOGY8YfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ0NDE5Nw==", "bodyText": "we don't need the podExists assertions", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1668#discussion_r428444197", "createdAt": "2020-05-21T04:55:03Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -748,6 +573,117 @@ public void tearDownAll() {\n     }\n   }\n \n+  @ParameterizedTest\n+  @DisplayName(\"Create model in image domain using different WebLogic version images as parameters\")\n+  @MethodSource(\"oracle.weblogic.kubernetes.utils.Params#webLogicImageTags\")\n+  public void testParamsCreateMiiDomain(String imageTag, @Namespaces(1) List<String> namespaces) {\n+    imageTag = imageTag.trim();\n+    assertTrue(!imageTag.isEmpty(), \"imageTag can not be empty string\");\n+    logger.info(\"Using imageTag {0}\", imageTag);\n+\n+    logger.info(\"Getting unique namespace for Domain\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(0);\n+\n+    // upgrade Operator for the new domain namespace\n+    assertTrue(upgradeAndVerifyOperator(opNamespace, domainNamespace),\n+        String.format(\"Failed to upgrade operator in namespace %s\", opNamespace));\n+\n+    // admin/managed server name here should match with model yaml in MII_BASIC_WDT_MODEL_FILE\n+    final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+    final String managedServerPrefix = domainUid + \"-managed-server\";\n+    final int replicaCount = 2;\n+\n+    // create image with model files\n+    logger.info(\"Creating image with model file and verify\");\n+    miiImage = createMiiImageAndVerify(\n+          \"mii-image\",\n+                          MII_BASIC_WDT_MODEL_FILE,\n+                          MII_BASIC_APP_NAME,\n+                          WLS_BASE_IMAGE_NAME,\n+                          imageTag,\n+                          WLS);\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+        String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\",\n+        \"welcome1\"),\n+        String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\",\n+        \"weblogicenc\"),\n+        String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    // create the domain object\n+    Domain domain = createDomainResource(domainUid, domainNamespace, adminSecretName, REPO_SECRET_NAME,\n+        encryptionSecretName, replicaCount, miiImage);\n+\n+    // create model in image domain\n+    logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+        domainUid, domainNamespace, miiImage);\n+    createDomainAndVerify(domain, domainNamespace);\n+\n+    // check admin server pod exists\n+    logger.info(\"Check for admin server pod {0} existence in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodExists(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check managed server pods exist\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodExists(managedServerPrefix + i, domainUid, domainNamespace);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a91bfa10114bb648a3883aecaa15f7749353cea9"}, "originalPosition": 613}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgwODMxNw==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1668#discussion_r428808317", "createdAt": "2020-05-21T17:40:23Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -748,6 +573,117 @@ public void tearDownAll() {\n     }\n   }\n \n+  @ParameterizedTest\n+  @DisplayName(\"Create model in image domain using different WebLogic version images as parameters\")\n+  @MethodSource(\"oracle.weblogic.kubernetes.utils.Params#webLogicImageTags\")\n+  public void testParamsCreateMiiDomain(String imageTag, @Namespaces(1) List<String> namespaces) {\n+    imageTag = imageTag.trim();\n+    assertTrue(!imageTag.isEmpty(), \"imageTag can not be empty string\");\n+    logger.info(\"Using imageTag {0}\", imageTag);\n+\n+    logger.info(\"Getting unique namespace for Domain\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(0);\n+\n+    // upgrade Operator for the new domain namespace\n+    assertTrue(upgradeAndVerifyOperator(opNamespace, domainNamespace),\n+        String.format(\"Failed to upgrade operator in namespace %s\", opNamespace));\n+\n+    // admin/managed server name here should match with model yaml in MII_BASIC_WDT_MODEL_FILE\n+    final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+    final String managedServerPrefix = domainUid + \"-managed-server\";\n+    final int replicaCount = 2;\n+\n+    // create image with model files\n+    logger.info(\"Creating image with model file and verify\");\n+    miiImage = createMiiImageAndVerify(\n+          \"mii-image\",\n+                          MII_BASIC_WDT_MODEL_FILE,\n+                          MII_BASIC_APP_NAME,\n+                          WLS_BASE_IMAGE_NAME,\n+                          imageTag,\n+                          WLS);\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+        String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\",\n+        \"welcome1\"),\n+        String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\",\n+        \"weblogicenc\"),\n+        String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    // create the domain object\n+    Domain domain = createDomainResource(domainUid, domainNamespace, adminSecretName, REPO_SECRET_NAME,\n+        encryptionSecretName, replicaCount, miiImage);\n+\n+    // create model in image domain\n+    logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+        domainUid, domainNamespace, miiImage);\n+    createDomainAndVerify(domain, domainNamespace);\n+\n+    // check admin server pod exists\n+    logger.info(\"Check for admin server pod {0} existence in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodExists(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check managed server pods exist\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodExists(managedServerPrefix + i, domainUid, domainNamespace);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ0NDE5Nw=="}, "originalCommit": {"oid": "a91bfa10114bb648a3883aecaa15f7749353cea9"}, "originalPosition": 613}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2OTg2NzYxOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/TestConstants.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNDoyOTo1N1rOGY1BoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNzo0MDozOFrOGY8ZEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY4Nzc3Ng==", "bodyText": "Not 14.1.1.0? I think we should add that version.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1668#discussion_r428687776", "createdAt": "2020-05-21T14:29:57Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/TestConstants.java", "diffHunk": "@@ -18,6 +18,7 @@\n   public static final String ADMIN_SERVER_NAME_BASE = \"admin-server\";\n   public static final String MANAGED_SERVER_NAME_BASE = \"managed-server\";\n   public static final String WLS_DOMAIN_TYPE = \"WLS\";\n+  public static final String DEFAULT_WLS_IMAGE_TAGS = \"12.2.1.3, 12.2.1.4\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a91bfa10114bb648a3883aecaa15f7749353cea9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgwODQ2Nw==", "bodyText": "modified", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1668#discussion_r428808467", "createdAt": "2020-05-21T17:40:38Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/TestConstants.java", "diffHunk": "@@ -18,6 +18,7 @@\n   public static final String ADMIN_SERVER_NAME_BASE = \"admin-server\";\n   public static final String MANAGED_SERVER_NAME_BASE = \"managed-server\";\n   public static final String WLS_DOMAIN_TYPE = \"WLS\";\n+  public static final String DEFAULT_WLS_IMAGE_TAGS = \"12.2.1.3, 12.2.1.4\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY4Nzc3Ng=="}, "originalCommit": {"oid": "a91bfa10114bb648a3883aecaa15f7749353cea9"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4598, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}