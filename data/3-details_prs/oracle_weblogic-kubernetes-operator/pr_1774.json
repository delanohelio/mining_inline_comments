{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNjg0NTQ2", "number": 1774, "title": "Parse all resource versions using BigInteger", "bodyText": "Based on an internal team's testing, we now know that the resourceVersion can be larger than Java's max. integer.", "createdAt": "2020-06-29T22:36:25Z", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1774", "merged": true, "mergeCommit": {"oid": "39c41e85d2913dd3b2786042258411578dfe2157"}, "closed": true, "closedAt": "2020-06-30T19:08:08Z", "author": {"login": "rjeberhard"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwI3ARAH2gAyNDQxNjg0NTQ2OjhlZmRmMDg3Mjk0NDM1ZmFmNTU3YWFkOThkODExZjQzMDJkMjljNmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwaXYXgFqTQ0MDMwMDYwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8efdf087294435faf557aad98d811f4302d29c6d", "author": {"user": {"login": "rjeberhard", "name": "Ryan Eberhard"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8efdf087294435faf557aad98d811f4302d29c6d", "committedDate": "2020-06-29T22:33:46Z", "message": "Parse all resource versions using BigInteger"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMDQ1Mzk4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1774#pullrequestreview-440045398", "createdAt": "2020-06-30T14:00:58Z", "commit": {"oid": "8efdf087294435faf557aad98d811f4302d29c6d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDowMDo1OFrOGq90sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDowMjozOVrOGq95ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwNjI5MA==", "bodyText": "Long.parseLong can throw NumberFormatException - why would you swallow it for BigInteger?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1774#discussion_r447706290", "createdAt": "2020-06-30T14:00:58Z", "author": {"login": "dldnh"}, "path": "operator/src/main/java/oracle/kubernetes/operator/Watcher.java", "diffHunk": "@@ -226,12 +227,16 @@ private long computeNextResourceVersionFromMessage(V1Status status) {\n         if (index2 > 0) {\n           String val = message.substring(index1 + 1, index2);\n           if (!isNullOrEmpty(val)) {\n-            return Long.parseLong(val);\n+            try {\n+              return new BigInteger(val);\n+            } catch (NumberFormatException nfe) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8efdf087294435faf557aad98d811f4302d29c6d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwNzU1MA==", "bodyText": "why swallow the NumberFormatException?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1774#discussion_r447707550", "createdAt": "2020-06-30T14:02:39Z", "author": {"login": "dldnh"}, "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/KubernetesUtils.java", "diffHunk": "@@ -128,14 +129,22 @@ public static boolean isFirstNewer(V1ObjectMeta first, V1ObjectMeta second) {\n     DateTime time2 = second.getCreationTimestamp();\n \n     if (time1.equals(time2)) {\n-      return getResourceVersion(first) > getResourceVersion(second);\n+      return getResourceVersion(first).compareTo(getResourceVersion(second)) > 0;\n     } else {\n       return time1.isAfter(time2);\n     }\n   }\n \n-  private static int getResourceVersion(V1ObjectMeta metadata) {\n-    return Integer.parseInt(metadata.getResourceVersion());\n+  private static BigInteger getResourceVersion(V1ObjectMeta metadata) {\n+    String resVersion = metadata.getResourceVersion();\n+    if (resVersion != null) {\n+      try {\n+        return new BigInteger(resVersion);\n+      } catch (NumberFormatException nfe) {\n+        // no-op", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8efdf087294435faf557aad98d811f4302d29c6d"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMDUxNDgx", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1774#pullrequestreview-440051481", "createdAt": "2020-06-30T14:07:04Z", "commit": {"oid": "8efdf087294435faf557aad98d811f4302d29c6d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDowNzowNFrOGq-Gdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDowNzo0M1rOGq-Igw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcxMDgzOA==", "bodyText": "no op or return BI.ZERO?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1774#discussion_r447710838", "createdAt": "2020-06-30T14:07:04Z", "author": {"login": "markxnelson"}, "path": "operator/src/main/java/oracle/kubernetes/operator/Watcher.java", "diffHunk": "@@ -226,12 +227,16 @@ private long computeNextResourceVersionFromMessage(V1Status status) {\n         if (index2 > 0) {\n           String val = message.substring(index1 + 1, index2);\n           if (!isNullOrEmpty(val)) {\n-            return Long.parseLong(val);\n+            try {\n+              return new BigInteger(val);\n+            } catch (NumberFormatException nfe) {\n+              // no-op", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8efdf087294435faf557aad98d811f4302d29c6d"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcxMTM2Mw==", "bodyText": "no op or zero?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1774#discussion_r447711363", "createdAt": "2020-06-30T14:07:43Z", "author": {"login": "markxnelson"}, "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/KubernetesUtils.java", "diffHunk": "@@ -128,14 +129,22 @@ public static boolean isFirstNewer(V1ObjectMeta first, V1ObjectMeta second) {\n     DateTime time2 = second.getCreationTimestamp();\n \n     if (time1.equals(time2)) {\n-      return getResourceVersion(first) > getResourceVersion(second);\n+      return getResourceVersion(first).compareTo(getResourceVersion(second)) > 0;\n     } else {\n       return time1.isAfter(time2);\n     }\n   }\n \n-  private static int getResourceVersion(V1ObjectMeta metadata) {\n-    return Integer.parseInt(metadata.getResourceVersion());\n+  private static BigInteger getResourceVersion(V1ObjectMeta metadata) {\n+    String resVersion = metadata.getResourceVersion();\n+    if (resVersion != null) {\n+      try {\n+        return new BigInteger(resVersion);\n+      } catch (NumberFormatException nfe) {\n+        // no-op", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8efdf087294435faf557aad98d811f4302d29c6d"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6662c6a7060d3966f7f8fe01adcb4ef1ad6c6fc1", "author": {"user": {"login": "rjeberhard", "name": "Ryan Eberhard"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6662c6a7060d3966f7f8fe01adcb4ef1ad6c6fc1", "committedDate": "2020-06-30T15:41:36Z", "message": "Clarify behavior when failing to parse resource version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4821d48dad89ea853fba617820c87a79e8587fe3", "author": {"user": {"login": "rjeberhard", "name": "Ryan Eberhard"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/4821d48dad89ea853fba617820c87a79e8587fe3", "committedDate": "2020-06-30T17:51:32Z", "message": "Watcher use resource version directly"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMjkyNzAx", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1774#pullrequestreview-440292701", "createdAt": "2020-06-30T18:46:06Z", "commit": {"oid": "4821d48dad89ea853fba617820c87a79e8587fe3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo0NjowNlrOGrJ5HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo0NjowNlrOGrJ5HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwNDAyOQ==", "bodyText": "you say you will return the value or zero, but you seem to return the value or null", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1774#discussion_r447904029", "createdAt": "2020-06-30T18:46:06Z", "author": {"login": "markxnelson"}, "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/KubernetesUtils.java", "diffHunk": "@@ -128,14 +130,47 @@ public static boolean isFirstNewer(V1ObjectMeta first, V1ObjectMeta second) {\n     DateTime time2 = second.getCreationTimestamp();\n \n     if (time1.equals(time2)) {\n-      return getResourceVersion(first) > getResourceVersion(second);\n+      return getResourceVersion(first).compareTo(getResourceVersion(second)) > 0;\n     } else {\n       return time1.isAfter(time2);\n     }\n   }\n \n-  private static int getResourceVersion(V1ObjectMeta metadata) {\n-    return Integer.parseInt(metadata.getResourceVersion());\n+  /**\n+   * Parse the resource version from the metadata. According to the Kubernetes design documentation,\n+   * https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/\n+   *  api-conventions.md#concurrency-control-and-consistency, the resource version is technically opaque; however,\n+   * the Kubernetes design also requires that clients be able to list changes to resources \"after\" the last\n+   * change to the same or different resource. Therefore, all Kubernetes implementations use a increasing positive\n+   * integer value for the resource version. This can be useful to detect out-of-order watch events. This method\n+   * parses the metadata's resource version into a big integer or to 0, if the value is not parsable.\n+   * @param metadata Meta data containing resource version\n+   * @return The integer value of the resource version or 0, if the value is not parsable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4821d48dad89ea853fba617820c87a79e8587fe3"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMjk0MDUz", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1774#pullrequestreview-440294053", "createdAt": "2020-06-30T18:47:59Z", "commit": {"oid": "4821d48dad89ea853fba617820c87a79e8587fe3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMjk4MTgy", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1774#pullrequestreview-440298182", "createdAt": "2020-06-30T18:53:50Z", "commit": {"oid": "4821d48dad89ea853fba617820c87a79e8587fe3"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo1Mzo1MVrOGrKLQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo1Mzo1MVrOGrKLQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwODY3NQ==", "bodyText": "ah ok, my bad. thanks", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1774#discussion_r447908675", "createdAt": "2020-06-30T18:53:51Z", "author": {"login": "markxnelson"}, "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/KubernetesUtils.java", "diffHunk": "@@ -128,14 +130,47 @@ public static boolean isFirstNewer(V1ObjectMeta first, V1ObjectMeta second) {\n     DateTime time2 = second.getCreationTimestamp();\n \n     if (time1.equals(time2)) {\n-      return getResourceVersion(first) > getResourceVersion(second);\n+      return getResourceVersion(first).compareTo(getResourceVersion(second)) > 0;\n     } else {\n       return time1.isAfter(time2);\n     }\n   }\n \n-  private static int getResourceVersion(V1ObjectMeta metadata) {\n-    return Integer.parseInt(metadata.getResourceVersion());\n+  /**\n+   * Parse the resource version from the metadata. According to the Kubernetes design documentation,\n+   * https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/\n+   *  api-conventions.md#concurrency-control-and-consistency, the resource version is technically opaque; however,\n+   * the Kubernetes design also requires that clients be able to list changes to resources \"after\" the last\n+   * change to the same or different resource. Therefore, all Kubernetes implementations use a increasing positive\n+   * integer value for the resource version. This can be useful to detect out-of-order watch events. This method\n+   * parses the metadata's resource version into a big integer or to 0, if the value is not parsable.\n+   * @param metadata Meta data containing resource version\n+   * @return The integer value of the resource version or 0, if the value is not parsable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwNDAyOQ=="}, "originalCommit": {"oid": "4821d48dad89ea853fba617820c87a79e8587fe3"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMzAwNjAz", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1774#pullrequestreview-440300603", "createdAt": "2020-06-30T18:57:31Z", "commit": {"oid": "4821d48dad89ea853fba617820c87a79e8587fe3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4617, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}