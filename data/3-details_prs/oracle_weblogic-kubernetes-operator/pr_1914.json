{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1NzM2ODEw", "number": 1914, "title": "Pod shutdown tests porting", "bodyText": "The tests from JUnit4 integration-tests/src/test/java/oracle/kubernetes/operator/ItPodsShutdown.java test class is ported to JUnit5\nThe tests covers the following scenarios\n\n\nSet Shutdown property values SHUTDOWN_IGNORE_SESSIONS, SHUTDOWN_TYPE, SHUTDOWN_TIMEOUT at all levels such as admin server, cluster and independent managed server levels and verifies the values are applied as per the documented feature\n\n\nSet Shutdown property values SHUTDOWN_IGNORE_SESSIONS, SHUTDOWN_TYPE, SHUTDOWN_TIMEOUT at all levels such as admin server, cluster and independent managed server levels and overrides the SHUTDOWN_TYPE as Env item and verifies the values are applied as per the documented feature and overridden SHUTDOWN_TYPE at env is applied to every server than the one set at server/cluster since env item has high precedence.\n\n\nTest Results\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/1961\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/1960\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/1956\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/1955", "createdAt": "2020-09-12T04:39:24Z", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1914", "merged": true, "mergeCommit": {"oid": "562b2dd33efd2ba81c837036d5b6963e733a4e9a"}, "closed": true, "closedAt": "2020-09-17T15:07:31Z", "author": {"login": "sankarpn"}, "timelineItems": {"totalCount": 36, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdFU2KVgH2gAyNDg1NzM2ODEwOjQ4NThiYzE1NmViZTg4NDc3OTJjYmEzZGQwMDYxNTU5Mzc1YTgxNWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJeEAggFqTQ4OTc0MTY1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4858bc156ebe8847792cba3dd0061559375a815d", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/4858bc156ebe8847792cba3dd0061559375a815d", "committedDate": "2020-09-03T18:24:07Z", "message": "Fix the shutdown options"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e66f8b6f6f8ec56e8560df60b1765aa79ee69a77", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e66f8b6f6f8ec56e8560df60b1765aa79ee69a77", "committedDate": "2020-09-08T17:01:42Z", "message": "Merge branch 'develop' into podshutdown-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98f27adfee3b8ccced4b09cec60c4269acd3d9cd", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/98f27adfee3b8ccced4b09cec60c4269acd3d9cd", "committedDate": "2020-09-09T18:29:32Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into podshutdown-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5d8eeee9bd0dc48e4b989510b33d95286b9c838", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c5d8eeee9bd0dc48e4b989510b33d95286b9c838", "committedDate": "2020-09-09T21:33:08Z", "message": "Adding shutdown option tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8dd9e95cd4675c2fdbea76ab0d30c3e5295609dc", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8dd9e95cd4675c2fdbea76ab0d30c3e5295609dc", "committedDate": "2020-09-11T16:15:57Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into podshutdown-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a545a81738e43747e07224577490adf5d579f17d", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a545a81738e43747e07224577490adf5d579f17d", "committedDate": "2020-09-11T17:09:57Z", "message": "Fix log location"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e12e57a3aa3d37e01cf394b34569e8bc4572fd35", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e12e57a3aa3d37e01cf394b34569e8bc4572fd35", "committedDate": "2020-09-11T17:41:41Z", "message": "fix shutdown object assignment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "984ddd3c18ebb20f494c8f6aa9608156681d8707", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/984ddd3c18ebb20f494c8f6aa9608156681d8707", "committedDate": "2020-09-11T19:09:40Z", "message": "Add ind ms"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4a518a5329d3a96f99f348c314b9d778a812cce", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f4a518a5329d3a96f99f348c314b9d778a812cce", "committedDate": "2020-09-11T19:20:02Z", "message": "fix start policy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e044ecfe687d7cbe075098d8197c3a601f8374e5", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e044ecfe687d7cbe075098d8197c3a601f8374e5", "committedDate": "2020-09-11T20:31:36Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05fe83612093549eced1b6111c33eef4d5e84c64", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/05fe83612093549eced1b6111c33eef4d5e84c64", "committedDate": "2020-09-11T20:32:41Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa9bc3e07fc6995d8bfc90607956820a24a7c000", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/aa9bc3e07fc6995d8bfc90607956820a24a7c000", "committedDate": "2020-09-11T20:42:48Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "042d1aff4144899607c0e09ef5d4023d19259f17", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/042d1aff4144899607c0e09ef5d4023d19259f17", "committedDate": "2020-09-11T20:48:56Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "994b805f97be9d88bb482124640531bff194426d", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/994b805f97be9d88bb482124640531bff194426d", "committedDate": "2020-09-11T21:23:53Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcdcf4b29b53f98e75d3b1fb2e21a720fd13ebfe", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/bcdcf4b29b53f98e75d3b1fb2e21a720fd13ebfe", "committedDate": "2020-09-11T22:17:40Z", "message": "Add tests without env override"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfa8fb72ffa0976263e1693a2288e5f620debc67", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/bfa8fb72ffa0976263e1693a2288e5f620debc67", "committedDate": "2020-09-11T22:36:35Z", "message": "add debug messages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60d4ac21912f4082e492ea0897fd6c94ff93634f", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/60d4ac21912f4082e492ea0897fd6c94ff93634f", "committedDate": "2020-09-11T23:25:12Z", "message": "refactor code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73c88d3dea4e35e4b5c620185a3768c2794aafb2", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/73c88d3dea4e35e4b5c620185a3768c2794aafb2", "committedDate": "2020-09-11T23:32:04Z", "message": "check for in ms 2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c82d9ef2869197317c1430e99f5b88d2c11b92a7", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c82d9ef2869197317c1430e99f5b88d2c11b92a7", "committedDate": "2020-09-11T23:54:45Z", "message": "Fix pod name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6569128cb0ce6355f60eb804b55267be943e88b7", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6569128cb0ce6355f60eb804b55267be943e88b7", "committedDate": "2020-09-12T02:12:41Z", "message": "fix pod name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ebfc2a7f2a1d10b95d02cf45e3ca3ea9d56035a", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8ebfc2a7f2a1d10b95d02cf45e3ca3ea9d56035a", "committedDate": "2020-09-12T04:29:54Z", "message": "Cleaned up comments and updated javadocs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6339ad6dc1d3257eeeb5474c181b3ff50d25c14", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c6339ad6dc1d3257eeeb5474c181b3ff50d25c14", "committedDate": "2020-09-12T04:31:33Z", "message": "Removed JUnit4 test class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70969ce951ff8da59b24a26d0e2e83e37fba6254", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/70969ce951ff8da59b24a26d0e2e83e37fba6254", "committedDate": "2020-09-12T04:45:04Z", "message": "Restore updatedomainconfig it class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d53ae69a460818da1f11455f07d8c5e824bf1d2", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8d53ae69a460818da1f11455f07d8c5e824bf1d2", "committedDate": "2020-09-12T05:02:06Z", "message": "fix the yaml formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "561fa6cf890adf0462e6c86907afbaf371e177ea", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/561fa6cf890adf0462e6c86907afbaf371e177ea", "committedDate": "2020-09-12T05:10:44Z", "message": "Remove left over files"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MTI3NTU1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1914#pullrequestreview-488127555", "createdAt": "2020-09-14T20:45:22Z", "commit": {"oid": "561fa6cf890adf0462e6c86907afbaf371e177ea"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMDo0NToyMlrOHRl7xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMToxNDozOFrOHRm1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIwOTM0OA==", "bodyText": "Shutdown Object is a the name of the java Object. Can we explain the usecase in term of shutdown option that reflects the public document.  NodeManger is internal tools in WKO.  We should not expose in our usecase. Anyhow what is the nodemanager env we are looking here ?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1914#discussion_r488209348", "createdAt": "2020-09-14T20:45:22Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsShutdownOption.java", "diffHunk": "@@ -156,15 +118,127 @@ private static void createAndVerifyMiiDomain() {\n \n     // create secret for admin credentials\n     logger.info(\"Creating secret for admin credentials\");\n-    String adminSecretName = \"weblogic-credentials\";\n+    adminSecretName = \"weblogic-credentials\";\n     createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n \n     // create encryption secret\n     logger.info(\"Creating encryption secret\");\n-    String encryptionSecretName = \"encryptionsecret\";\n+    encryptionSecretName = \"encryptionsecret\";\n     createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n \n-    // create the domain CR\n+    String yamlString = \"topology:\\n\"\n+        + \"  Server:\\n\"\n+        + \"    'ms-1':\\n\"\n+        + \"      ListenPort: '10001'\\n\"\n+        + \"    'ms-2':\\n\"\n+        + \"      ListenPort: '9001'\\n\";\n+\n+    createModelConfigMap(cmName, yamlString);\n+\n+  }\n+\n+  /**\n+   * Delete the domain created by each test for the next test to start over.\n+   */\n+  @AfterEach\n+  public void afterEach() {\n+    logger.info(\"Deleting the domain resource\");\n+    TestActions.deleteDomainCustomResource(domainUid, domainNamespace);\n+    checkPodDoesNotExist(adminServerPodName, domainUid, domainNamespace);\n+    checkPodDoesNotExist(managedServerPodNamePrefix + 1, domainUid, domainNamespace);\n+    checkPodDoesNotExist(managedServerPodNamePrefix + 2, domainUid, domainNamespace);\n+    checkPodDoesNotExist(indManagedServerPodName1, domainUid, domainNamespace);\n+    checkPodDoesNotExist(indManagedServerPodName2, domainUid, domainNamespace);\n+  }\n+\n+  /**\n+   * Add shutdown properties at all levels and verify.\n+   * 1. Creates shutdown object for admin server, cluster and managed servers.\n+   * 2. Creates domain resource with the above shutdown objects.\n+   * 3. After all the pods are started, verifies the server.out for each server to see whether the nodemanager env", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "561fa6cf890adf0462e6c86907afbaf371e177ea"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIyNDA0OA==", "bodyText": "Remove TODO comments", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1914#discussion_r488224048", "createdAt": "2020-09-14T21:14:38Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsShutdownOption.java", "diffHunk": "@@ -188,103 +262,112 @@ private static void createAndVerifyMiiDomain() {\n                     .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n                 .addEnvItem(new V1EnvVar()\n                     .name(\"USER_MEM_ARGS\")\n-                    .value(\"-Djava.security.egd=file:/dev/./urandom \"))\n-                .addEnvItem(new V1EnvVar()\n-                    .name(\"SHUTDOWN_TYPE\")\n-                    .value(\"Graceful\")))\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n             .adminServer(new AdminServer()\n                 .serverStartState(\"RUNNING\")\n-                .serverPod(new ServerPod().shutdown(new Shutdown().shutdownType(\"Forced\")))\n-                .serverPod(new ServerPod().shutdown(new Shutdown().ignoreSessions(true)))\n-                .serverPod(new ServerPod().shutdown(new Shutdown().timeoutSeconds(40L))))\n+                .serverPod(new ServerPod()\n+                    .shutdown(shutDownObject[0])))\n             .addClustersItem(new Cluster()\n                 .clusterName(clusterName)\n                 .replicas(replicaCount)\n                 .serverStartState(\"RUNNING\")\n-                .serverPod(new ServerPod().shutdown(new Shutdown().timeoutSeconds(80L)))\n-                .serverPod(new ServerPod().shutdown(new Shutdown().ignoreSessions(true))))\n+                .serverPod(new ServerPod()\n+                    .shutdown(shutDownObject[1])))\n             .configuration(new Configuration()\n                 .model(new Model()\n+                    .configMap(cmName)\n                     .domainType(WLS_DOMAIN_TYPE)\n                     .runtimeEncryptionSecret(encryptionSecretName)))\n             .addManagedServersItem(new ManagedServer()\n-                .serverName(managedServer1Name)\n-                .serverPod(new ServerPod().shutdown(new Shutdown().timeoutSeconds(100L)))));\n+                .serverStartState(\"RUNNING\")\n+                .serverStartPolicy(\"ALWAYS\")\n+                .serverName(indManagedServerName1)\n+                .serverPod(new ServerPod()\n+                    .shutdown(shutDownObject[2])))\n+            .addManagedServersItem(new ManagedServer()\n+                .serverStartState(\"RUNNING\")\n+                .serverStartPolicy(\"ALWAYS\")\n+                .serverName(indManagedServerName2)\n+                .serverPod(new ServerPod()\n+                    .shutdown(shutDownObject[3]))));\n+    return domain;\n+  }\n \n+  // create domain resource and verify all the server pods are ready\n+  private void createVerifyDomain(Domain domain) {\n     // create model in image domain\n     logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n         domainUid, domainNamespace, miiImage);\n     createDomainAndVerify(domain, domainNamespace);\n \n-    // check that admin server pod exists in the domain namespace\n-    logger.info(\"Checking that admin server pod {0} exists in namespace {1}\",\n+    // check that admin service exists in the domain namespace\n+    logger.info(\"Checking that admin service {0} exists in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkPodExists(adminServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n \n     // check that admin server pod is ready\n     logger.info(\"Checking that admin server pod {0} is ready in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkPodReady(adminServerPodName, domainUid, domainNamespace);\n \n-    // check that admin service exists in the domain namespace\n-    logger.info(\"Checking that admin service {0} exists in namespace {1}\",\n-        adminServerPodName, domainNamespace);\n-    checkServiceExists(adminServerPodName, domainNamespace);\n-\n-    // check for managed server pods existence in the domain namespace\n     for (int i = 1; i <= replicaCount; i++) {\n-      String managedServerPodName = managedServerPrefix + i;\n+      String managedServerPodName = managedServerPodNamePrefix + i;\n \n-      // check that the managed server pod exists in the domain namespace\n-      logger.info(\"Checking that managed server pod {0} exists in namespace {1}\",\n+      // check that the managed server service exists in the domain namespace\n+      logger.info(\"Checking that managed server service {0} exists in namespace {1}\",\n           managedServerPodName, domainNamespace);\n-      checkPodExists(managedServerPodName, domainUid, domainNamespace);\n+      checkServiceExists(managedServerPodName, domainNamespace);\n \n       // check that the managed server pod is ready\n       logger.info(\"Checking that managed server pod {0} is ready in namespace {1}\",\n           managedServerPodName, domainNamespace);\n       checkPodReady(managedServerPodName, domainUid, domainNamespace);\n+    }\n \n+    // check for independent managed server pods existence in the domain namespace\n+    //TODO - only one of the independent managed server is coming up, bug???", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "561fa6cf890adf0462e6c86907afbaf371e177ea"}, "originalPosition": 373}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af77a0d3736a4e5e7eccedb8ebb9a767573e5838", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/af77a0d3736a4e5e7eccedb8ebb9a767573e5838", "committedDate": "2020-09-15T16:20:16Z", "message": "update comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02dfc9eeedaa85b34691a40dd8351bb4e148d3bf", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/02dfc9eeedaa85b34691a40dd8351bb4e148d3bf", "committedDate": "2020-09-15T16:20:54Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into podshutdown-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce549322a202a677f378a047f53f223b61b41e2d", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ce549322a202a677f378a047f53f223b61b41e2d", "committedDate": "2020-09-15T16:31:04Z", "message": "fix array size"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4OTM3MzQ0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1914#pullrequestreview-488937344", "createdAt": "2020-09-15T18:06:17Z", "commit": {"oid": "ce549322a202a677f378a047f53f223b61b41e2d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxODowNjoxN1rOHSN8PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxOTowNDoyOFrOHSQJuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg2NDgyOA==", "bodyText": "shutdown", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1914#discussion_r488864828", "createdAt": "2020-09-15T18:06:17Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsShutdownOption.java", "diffHunk": "@@ -156,15 +118,158 @@ private static void createAndVerifyMiiDomain() {\n \n     // create secret for admin credentials\n     logger.info(\"Creating secret for admin credentials\");\n-    String adminSecretName = \"weblogic-credentials\";\n+    adminSecretName = \"weblogic-credentials\";\n     createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n \n     // create encryption secret\n     logger.info(\"Creating encryption secret\");\n-    String encryptionSecretName = \"encryptionsecret\";\n+    encryptionSecretName = \"encryptionsecret\";\n     createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n \n-    // create the domain CR\n+    String yamlString = \"topology:\\n\"\n+        + \"  Server:\\n\"\n+        + \"    'ms-1':\\n\"\n+        + \"      ListenPort: '10001'\\n\"\n+        + \"    'ms-2':\\n\"\n+        + \"      ListenPort: '9001'\\n\";\n+\n+    createModelConfigMap(cmName, yamlString);\n+\n+  }\n+\n+  /**\n+   * Delete the domain created by each test for the next test to start over.\n+   */\n+  @AfterEach\n+  public void afterEach() {\n+    logger.info(\"Deleting the domain resource\");\n+    TestActions.deleteDomainCustomResource(domainUid, domainNamespace);\n+    checkPodDoesNotExist(adminServerPodName, domainUid, domainNamespace);\n+    checkPodDoesNotExist(managedServerPodNamePrefix + 1, domainUid, domainNamespace);\n+    checkPodDoesNotExist(managedServerPodNamePrefix + 2, domainUid, domainNamespace);\n+    checkPodDoesNotExist(indManagedServerPodName1, domainUid, domainNamespace);\n+    checkPodDoesNotExist(indManagedServerPodName2, domainUid, domainNamespace);\n+  }\n+\n+  /**\n+   * Add shutdown options for servers at all levels: domain, admin server, cluster and managed server levels.\n+   * Verify individual specific level options takes precedence.\n+   *\n+   *<p>Domain level shutdown option which is applicable for all servers in the domain\n+   *      shutdownType - Forced , timeoutSeconds - 30 secs, ignoreSessions - true\n+   * Admin server level shutdown option applicable only to the admin server\n+   *      shutdownType - Forced , timeoutSeconds - 40 secs, ignoreSessions - true\n+   * Cluster level shutdown option applicable only to the clustered instances\n+   *      shutdownType - Graceful , timeoutSeconds - 60 secs, ignoreSessions - false\n+   * Managed server server level shutdown option applicable only to the independent managed servers\n+   *      shutdownType - Forced , timeoutSeconds - 45 secs, ignoreSessions - true\n+   *\n+   *<p>Since the shutdown options are provided at all levels the domain level shutdown options has no effect on the\n+   * admin server, cluster, or managed server options. All of those entities use their own shutdown options.\n+   *\n+   *<p>When server pods starts up the server.out log will show the options applied to the servers. The test verifies\n+   * the logs and determine the outcome of the test.\n+   *\n+   *<p>This use case shows how to add shutdown options at domain and how to override them at server level.\n+   * @throws ApiException when getting log fails\n+   */\n+  @Test\n+  @DisplayName(\"Verify shutdown rules when shutdown properties are defined at different levels \")\n+  public void testShutdownPropsAllLevels() throws ApiException {\n+\n+\n+    // create Shitdown objects for each server and cluster", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce549322a202a677f378a047f53f223b61b41e2d"}, "originalPosition": 218}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg2OTkxNA==", "bodyText": "this image is already pushed to OCIR in ImageBuilders.java, why are we pushing again? may be some old code?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1914#discussion_r488869914", "createdAt": "2020-09-15T18:15:35Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsShutdownOption.java", "diffHunk": "@@ -94,58 +106,8 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     // install and verify operator\n     installAndVerifyOperator(opNamespace, domainNamespace);\n \n-    // create a basic model in image domain\n-    createAndVerifyMiiDomain();\n-  }\n-\n-  /**\n-   * This test is to verify different shutdown options specified at different scopes in Domain Resource Definition.\n-   * Refer to section \"Shutdown options\" of Documentation link:\n-   * https://oracle.github.io/weblogic-kubernetes-operator/userguide/managing-domains/domain-lifecycle/startup/\n-   * step 1: Startup a WebLogic domain with one cluster that initially has one running managed server. The shutdown  \n-   * option is configured as follows:\n-   * domain: SHUTDOWN_TYPE -> Graceful.\n-   * adminServer: SHUTDOWN_TYPE -> Forced.\n-   *              SHUTDOWN_IGNORE_SESSIONS -> true.\n-   *              SHUTDOWN_TIMEOUT -> 40.\n-   * cluster: SHUTDOWN_IGNORE_SESSIONS -> true.\n-   *          SHUTDOWN_TIMEOUT -> 80.\n-   * managedServer1: SHUTDOWN_TIMEOUT -> 100.\n-   * step2: Scale cluster with two managed servers.\n-   * step 3: Verify shutdown properties of admin server, managedServer1 and newly scaled up managedServer2.\n-   * Domain level \"Graceful\" SHUTDOWN_TYPE overrides server level setting and is used for all servers.\n-   * So adminServer has \"Graceful\" SHUTDOWN_TYPE, default \"false\" SHUTDOWN_IGNORE_SESSIONS and\n-   * configured \"40\" SHUTDOWN_TIMEOUT.\n-   * Managed level setting overrides cluster level setting so managedServer1 has configured \"100\"\n-   * SHUTDOWN_TIMEOUT, cluster level \"true\" SHUTDOWN_IGNORE_SESSIONS  \"true\" and \"Graceful\" SHUTDOWN_TYPE.\n-   * Newly scaled up managedServer2 takes setting from combination of domain level and cluster level\n-   * with \"Graceful\" SHUTDOWN_TYPE, \"true\" SHUTDOWN_IGNORE_SESSIONS and default \"30\" SHUTDOWN_TIMEOUT\n-   */\n-  @Test\n-  @DisplayName(\"Verify shutdown rules when shutdown properties are defined at different levels \")\n-  public void testShutdownProps() throws ApiException {\n-\n-    //scale the cluster to 2 managed servers\n-    assertThat(assertDoesNotThrow(() -> scaleCluster(domainUid, domainNamespace, clusterName, 2)))\n-        .as(\"Verify scaling cluster {0} of domain {1} in namespace {2} succeeds\",\n-              clusterName, domainUid, domainNamespace)\n-        .withFailMessage(\"Scaling cluster {0} of domain {1} in namespace {2} failed\",\n-              clusterName, domainUid, domainNamespace)\n-        .isTrue();\n-    assertDoesNotThrow(() -> TimeUnit.SECONDS.sleep(30));\n-\n-    assertTrue(verifyServerShutdownProp(adminServerPodName, domainNamespace, \"Graceful\", \"40\", \"false\"));\n-    assertTrue(verifyServerShutdownProp(managedServerPrefix + 1, domainNamespace, \"Graceful\", \"100\", \"true\"));\n-    assertTrue(verifyServerShutdownProp(managedServerPrefix + 2, domainNamespace, \"Graceful\", \"30\", \"true\"));\n-  }\n-\n-  /**\n-   * Create a model in image domain and verify the server pods are ready.\n-   */\n-  private static void createAndVerifyMiiDomain() {\n-\n     // get the pre-built image created by IntegrationTestWatcher\n-    String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+    miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n \n     // docker login and push image to docker registry if necessary\n     dockerLoginAndPushImageToRegistry(miiImage);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce549322a202a677f378a047f53f223b61b41e2d"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg3MzQwMA==", "bodyText": "configured-cluster.yaml? you are adding independent managed servers, is this correct?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1914#discussion_r488873400", "createdAt": "2020-09-15T18:22:18Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsShutdownOption.java", "diffHunk": "@@ -183,108 +288,117 @@ private static void createAndVerifyMiiDomain() {\n             .includeServerOutInPodLog(true)\n             .serverStartPolicy(\"IF_NEEDED\")\n             .serverPod(new ServerPod()\n+                .shutdown(shutDownObject[0])\n                 .addEnvItem(new V1EnvVar()\n                     .name(\"JAVA_OPTIONS\")\n                     .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n                 .addEnvItem(new V1EnvVar()\n                     .name(\"USER_MEM_ARGS\")\n-                    .value(\"-Djava.security.egd=file:/dev/./urandom \"))\n-                .addEnvItem(new V1EnvVar()\n-                    .name(\"SHUTDOWN_TYPE\")\n-                    .value(\"Graceful\")))\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n             .adminServer(new AdminServer()\n                 .serverStartState(\"RUNNING\")\n-                .serverPod(new ServerPod().shutdown(new Shutdown().shutdownType(\"Forced\")))\n-                .serverPod(new ServerPod().shutdown(new Shutdown().ignoreSessions(true)))\n-                .serverPod(new ServerPod().shutdown(new Shutdown().timeoutSeconds(40L))))\n+                .serverPod(new ServerPod()\n+                    .shutdown(shutDownObject[1])))\n             .addClustersItem(new Cluster()\n                 .clusterName(clusterName)\n                 .replicas(replicaCount)\n                 .serverStartState(\"RUNNING\")\n-                .serverPod(new ServerPod().shutdown(new Shutdown().timeoutSeconds(80L)))\n-                .serverPod(new ServerPod().shutdown(new Shutdown().ignoreSessions(true))))\n+                .serverPod(new ServerPod()\n+                    .shutdown(shutDownObject[2])))\n             .configuration(new Configuration()\n                 .model(new Model()\n+                    .configMap(cmName)\n                     .domainType(WLS_DOMAIN_TYPE)\n                     .runtimeEncryptionSecret(encryptionSecretName)))\n             .addManagedServersItem(new ManagedServer()\n-                .serverName(managedServer1Name)\n-                .serverPod(new ServerPod().shutdown(new Shutdown().timeoutSeconds(100L)))));\n+                .serverStartState(\"RUNNING\")\n+                .serverStartPolicy(\"ALWAYS\")\n+                .serverName(indManagedServerName1)\n+                .serverPod(new ServerPod()\n+                    .shutdown(shutDownObject[3])))\n+            .addManagedServersItem(new ManagedServer()\n+                .serverStartState(\"RUNNING\")\n+                .serverStartPolicy(\"ALWAYS\")\n+                .serverName(indManagedServerName2)\n+                .serverPod(new ServerPod()\n+                    .shutdown(shutDownObject[4]))));\n+    return domain;\n+  }\n \n+  // create domain resource and verify all the server pods are ready\n+  private void createVerifyDomain(Domain domain) {\n     // create model in image domain\n     logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n         domainUid, domainNamespace, miiImage);\n     createDomainAndVerify(domain, domainNamespace);\n \n-    // check that admin server pod exists in the domain namespace\n-    logger.info(\"Checking that admin server pod {0} exists in namespace {1}\",\n+    // check that admin service exists in the domain namespace\n+    logger.info(\"Checking that admin service {0} exists in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkPodExists(adminServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n \n     // check that admin server pod is ready\n     logger.info(\"Checking that admin server pod {0} is ready in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkPodReady(adminServerPodName, domainUid, domainNamespace);\n \n-    // check that admin service exists in the domain namespace\n-    logger.info(\"Checking that admin service {0} exists in namespace {1}\",\n-        adminServerPodName, domainNamespace);\n-    checkServiceExists(adminServerPodName, domainNamespace);\n-\n-    // check for managed server pods existence in the domain namespace\n     for (int i = 1; i <= replicaCount; i++) {\n-      String managedServerPodName = managedServerPrefix + i;\n+      String managedServerPodName = managedServerPodNamePrefix + i;\n \n-      // check that the managed server pod exists in the domain namespace\n-      logger.info(\"Checking that managed server pod {0} exists in namespace {1}\",\n+      // check that the managed server service exists in the domain namespace\n+      logger.info(\"Checking that managed server service {0} exists in namespace {1}\",\n           managedServerPodName, domainNamespace);\n-      checkPodExists(managedServerPodName, domainUid, domainNamespace);\n+      checkServiceExists(managedServerPodName, domainNamespace);\n \n       // check that the managed server pod is ready\n       logger.info(\"Checking that managed server pod {0} is ready in namespace {1}\",\n           managedServerPodName, domainNamespace);\n       checkPodReady(managedServerPodName, domainUid, domainNamespace);\n+    }\n \n+    // check for independent managed server pods existence in the domain namespace\n+    for (String podName : new String[]{indManagedServerPodName2}) {\n       // check that the managed server service exists in the domain namespace\n       logger.info(\"Checking that managed server service {0} exists in namespace {1}\",\n-          managedServerPodName, domainNamespace);\n-      checkServiceExists(managedServerPodName, domainNamespace);\n+          podName, domainNamespace);\n+      checkServiceExists(podName, domainNamespace);\n+\n+      // check that the managed server pod is ready\n+      logger.info(\"Checking that managed server pod {0} is ready in namespace {1}\",\n+          podName, domainNamespace);\n+      checkPodReady(podName, domainUid, domainNamespace);\n     }\n+\n   }\n \n-  /**\n-   * Verify the server pod Shutdown properties.\n-   * @param podName the name of the server pod\n-   * @param domainNS the namespace where the server pod exist\n-   * @param props the shutdown properties\n-   */\n-  private static boolean verifyServerShutdownProp(\n-      String podName,\n-      String domainNS,\n-      String... props) throws io.kubernetes.client.openapi.ApiException {\n-\n-    V1Pod serverPod = Kubernetes.getPod(domainNS, null, podName);\n-    assertNotNull(serverPod,\"The server pod does not exist in namespace \" + domainNS);\n-    List<V1EnvVar> envVars = Objects.requireNonNull(serverPod.getSpec()).getContainers().get(0).getEnv();\n-\n-    boolean found = false;\n-    HashMap<String, Boolean> propFound = new HashMap<String, Boolean>();\n-    for (String prop : props) {\n-      for (var envVar : envVars) {\n-        if (envVar.getName().contains(\"SHUTDOWN\")) {\n-          if (envVar.getValue() != null && envVar.getValue().contains(prop)) {\n-            logger.info(\"For pod {0} SHUTDOWN option {1} has value {2} \",\n-                podName, envVar.getName(),  envVar.getValue());\n-            logger.info(\"Property with value \" + prop + \" has found\");\n-            propFound.put(prop, true);\n-          }\n-        }\n-      }\n-    }\n-    if (props.length == propFound.size()) {\n-      found = true;\n+\n+  // get pod log which includes the server.out logs and verify the messages contain the set shutdown properties\n+  private void verifyServerLog(String namespace, String podName, String[] envVars) throws ApiException {\n+    String podLog = TestActions.getPodLog(podName, namespace);\n+    for (String envVar : envVars) {\n+      logger.info(\"Checking Pod {0} for server startup property {1}\", podName, envVar);\n+      assertTrue(podLog.contains(envVar));\n+      logger.info(\"Pod {0} contains the property {1} in server startup env\", podName, envVar);\n     }\n-    return found;\n+  }\n+\n+  // Crate a ConfigMap with a model to add a 2 independent managed servers\n+  private static void createModelConfigMap(String configMapName, String model) {\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"weblogic.domainUid\", domainUid);\n+    Map<String, String> data = new HashMap<>();\n+    data.put(\"configured-cluster.yaml\", model);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce549322a202a677f378a047f53f223b61b41e2d"}, "originalPosition": 474}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg3NzcyMA==", "bodyText": "add a message in assert when it fails", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1914#discussion_r488877720", "createdAt": "2020-09-15T18:29:53Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsShutdownOption.java", "diffHunk": "@@ -183,108 +288,117 @@ private static void createAndVerifyMiiDomain() {\n             .includeServerOutInPodLog(true)\n             .serverStartPolicy(\"IF_NEEDED\")\n             .serverPod(new ServerPod()\n+                .shutdown(shutDownObject[0])\n                 .addEnvItem(new V1EnvVar()\n                     .name(\"JAVA_OPTIONS\")\n                     .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n                 .addEnvItem(new V1EnvVar()\n                     .name(\"USER_MEM_ARGS\")\n-                    .value(\"-Djava.security.egd=file:/dev/./urandom \"))\n-                .addEnvItem(new V1EnvVar()\n-                    .name(\"SHUTDOWN_TYPE\")\n-                    .value(\"Graceful\")))\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n             .adminServer(new AdminServer()\n                 .serverStartState(\"RUNNING\")\n-                .serverPod(new ServerPod().shutdown(new Shutdown().shutdownType(\"Forced\")))\n-                .serverPod(new ServerPod().shutdown(new Shutdown().ignoreSessions(true)))\n-                .serverPod(new ServerPod().shutdown(new Shutdown().timeoutSeconds(40L))))\n+                .serverPod(new ServerPod()\n+                    .shutdown(shutDownObject[1])))\n             .addClustersItem(new Cluster()\n                 .clusterName(clusterName)\n                 .replicas(replicaCount)\n                 .serverStartState(\"RUNNING\")\n-                .serverPod(new ServerPod().shutdown(new Shutdown().timeoutSeconds(80L)))\n-                .serverPod(new ServerPod().shutdown(new Shutdown().ignoreSessions(true))))\n+                .serverPod(new ServerPod()\n+                    .shutdown(shutDownObject[2])))\n             .configuration(new Configuration()\n                 .model(new Model()\n+                    .configMap(cmName)\n                     .domainType(WLS_DOMAIN_TYPE)\n                     .runtimeEncryptionSecret(encryptionSecretName)))\n             .addManagedServersItem(new ManagedServer()\n-                .serverName(managedServer1Name)\n-                .serverPod(new ServerPod().shutdown(new Shutdown().timeoutSeconds(100L)))));\n+                .serverStartState(\"RUNNING\")\n+                .serverStartPolicy(\"ALWAYS\")\n+                .serverName(indManagedServerName1)\n+                .serverPod(new ServerPod()\n+                    .shutdown(shutDownObject[3])))\n+            .addManagedServersItem(new ManagedServer()\n+                .serverStartState(\"RUNNING\")\n+                .serverStartPolicy(\"ALWAYS\")\n+                .serverName(indManagedServerName2)\n+                .serverPod(new ServerPod()\n+                    .shutdown(shutDownObject[4]))));\n+    return domain;\n+  }\n \n+  // create domain resource and verify all the server pods are ready\n+  private void createVerifyDomain(Domain domain) {\n     // create model in image domain\n     logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n         domainUid, domainNamespace, miiImage);\n     createDomainAndVerify(domain, domainNamespace);\n \n-    // check that admin server pod exists in the domain namespace\n-    logger.info(\"Checking that admin server pod {0} exists in namespace {1}\",\n+    // check that admin service exists in the domain namespace\n+    logger.info(\"Checking that admin service {0} exists in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkPodExists(adminServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n \n     // check that admin server pod is ready\n     logger.info(\"Checking that admin server pod {0} is ready in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkPodReady(adminServerPodName, domainUid, domainNamespace);\n \n-    // check that admin service exists in the domain namespace\n-    logger.info(\"Checking that admin service {0} exists in namespace {1}\",\n-        adminServerPodName, domainNamespace);\n-    checkServiceExists(adminServerPodName, domainNamespace);\n-\n-    // check for managed server pods existence in the domain namespace\n     for (int i = 1; i <= replicaCount; i++) {\n-      String managedServerPodName = managedServerPrefix + i;\n+      String managedServerPodName = managedServerPodNamePrefix + i;\n \n-      // check that the managed server pod exists in the domain namespace\n-      logger.info(\"Checking that managed server pod {0} exists in namespace {1}\",\n+      // check that the managed server service exists in the domain namespace\n+      logger.info(\"Checking that managed server service {0} exists in namespace {1}\",\n           managedServerPodName, domainNamespace);\n-      checkPodExists(managedServerPodName, domainUid, domainNamespace);\n+      checkServiceExists(managedServerPodName, domainNamespace);\n \n       // check that the managed server pod is ready\n       logger.info(\"Checking that managed server pod {0} is ready in namespace {1}\",\n           managedServerPodName, domainNamespace);\n       checkPodReady(managedServerPodName, domainUid, domainNamespace);\n+    }\n \n+    // check for independent managed server pods existence in the domain namespace\n+    for (String podName : new String[]{indManagedServerPodName2}) {\n       // check that the managed server service exists in the domain namespace\n       logger.info(\"Checking that managed server service {0} exists in namespace {1}\",\n-          managedServerPodName, domainNamespace);\n-      checkServiceExists(managedServerPodName, domainNamespace);\n+          podName, domainNamespace);\n+      checkServiceExists(podName, domainNamespace);\n+\n+      // check that the managed server pod is ready\n+      logger.info(\"Checking that managed server pod {0} is ready in namespace {1}\",\n+          podName, domainNamespace);\n+      checkPodReady(podName, domainUid, domainNamespace);\n     }\n+\n   }\n \n-  /**\n-   * Verify the server pod Shutdown properties.\n-   * @param podName the name of the server pod\n-   * @param domainNS the namespace where the server pod exist\n-   * @param props the shutdown properties\n-   */\n-  private static boolean verifyServerShutdownProp(\n-      String podName,\n-      String domainNS,\n-      String... props) throws io.kubernetes.client.openapi.ApiException {\n-\n-    V1Pod serverPod = Kubernetes.getPod(domainNS, null, podName);\n-    assertNotNull(serverPod,\"The server pod does not exist in namespace \" + domainNS);\n-    List<V1EnvVar> envVars = Objects.requireNonNull(serverPod.getSpec()).getContainers().get(0).getEnv();\n-\n-    boolean found = false;\n-    HashMap<String, Boolean> propFound = new HashMap<String, Boolean>();\n-    for (String prop : props) {\n-      for (var envVar : envVars) {\n-        if (envVar.getName().contains(\"SHUTDOWN\")) {\n-          if (envVar.getValue() != null && envVar.getValue().contains(prop)) {\n-            logger.info(\"For pod {0} SHUTDOWN option {1} has value {2} \",\n-                podName, envVar.getName(),  envVar.getValue());\n-            logger.info(\"Property with value \" + prop + \" has found\");\n-            propFound.put(prop, true);\n-          }\n-        }\n-      }\n-    }\n-    if (props.length == propFound.size()) {\n-      found = true;\n+\n+  // get pod log which includes the server.out logs and verify the messages contain the set shutdown properties\n+  private void verifyServerLog(String namespace, String podName, String[] envVars) throws ApiException {\n+    String podLog = TestActions.getPodLog(podName, namespace);\n+    for (String envVar : envVars) {\n+      logger.info(\"Checking Pod {0} for server startup property {1}\", podName, envVar);\n+      assertTrue(podLog.contains(envVar));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce549322a202a677f378a047f53f223b61b41e2d"}, "originalPosition": 463}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg5NjQxMQ==", "bodyText": "any reason for not adding the assertion for exception instead of throws in the test method? we usually add assertions in the test..", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1914#discussion_r488896411", "createdAt": "2020-09-15T18:57:28Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsShutdownOption.java", "diffHunk": "@@ -156,15 +118,158 @@ private static void createAndVerifyMiiDomain() {\n \n     // create secret for admin credentials\n     logger.info(\"Creating secret for admin credentials\");\n-    String adminSecretName = \"weblogic-credentials\";\n+    adminSecretName = \"weblogic-credentials\";\n     createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n \n     // create encryption secret\n     logger.info(\"Creating encryption secret\");\n-    String encryptionSecretName = \"encryptionsecret\";\n+    encryptionSecretName = \"encryptionsecret\";\n     createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n \n-    // create the domain CR\n+    String yamlString = \"topology:\\n\"\n+        + \"  Server:\\n\"\n+        + \"    'ms-1':\\n\"\n+        + \"      ListenPort: '10001'\\n\"\n+        + \"    'ms-2':\\n\"\n+        + \"      ListenPort: '9001'\\n\";\n+\n+    createModelConfigMap(cmName, yamlString);\n+\n+  }\n+\n+  /**\n+   * Delete the domain created by each test for the next test to start over.\n+   */\n+  @AfterEach\n+  public void afterEach() {\n+    logger.info(\"Deleting the domain resource\");\n+    TestActions.deleteDomainCustomResource(domainUid, domainNamespace);\n+    checkPodDoesNotExist(adminServerPodName, domainUid, domainNamespace);\n+    checkPodDoesNotExist(managedServerPodNamePrefix + 1, domainUid, domainNamespace);\n+    checkPodDoesNotExist(managedServerPodNamePrefix + 2, domainUid, domainNamespace);\n+    checkPodDoesNotExist(indManagedServerPodName1, domainUid, domainNamespace);\n+    checkPodDoesNotExist(indManagedServerPodName2, domainUid, domainNamespace);\n+  }\n+\n+  /**\n+   * Add shutdown options for servers at all levels: domain, admin server, cluster and managed server levels.\n+   * Verify individual specific level options takes precedence.\n+   *\n+   *<p>Domain level shutdown option which is applicable for all servers in the domain\n+   *      shutdownType - Forced , timeoutSeconds - 30 secs, ignoreSessions - true\n+   * Admin server level shutdown option applicable only to the admin server\n+   *      shutdownType - Forced , timeoutSeconds - 40 secs, ignoreSessions - true\n+   * Cluster level shutdown option applicable only to the clustered instances\n+   *      shutdownType - Graceful , timeoutSeconds - 60 secs, ignoreSessions - false\n+   * Managed server server level shutdown option applicable only to the independent managed servers\n+   *      shutdownType - Forced , timeoutSeconds - 45 secs, ignoreSessions - true\n+   *\n+   *<p>Since the shutdown options are provided at all levels the domain level shutdown options has no effect on the\n+   * admin server, cluster, or managed server options. All of those entities use their own shutdown options.\n+   *\n+   *<p>When server pods starts up the server.out log will show the options applied to the servers. The test verifies\n+   * the logs and determine the outcome of the test.\n+   *\n+   *<p>This use case shows how to add shutdown options at domain and how to override them at server level.\n+   * @throws ApiException when getting log fails\n+   */\n+  @Test\n+  @DisplayName(\"Verify shutdown rules when shutdown properties are defined at different levels \")\n+  public void testShutdownPropsAllLevels() throws ApiException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce549322a202a677f378a047f53f223b61b41e2d"}, "originalPosition": 215}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg5ODY3MA==", "bodyText": "shutdown", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1914#discussion_r488898670", "createdAt": "2020-09-15T19:00:12Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsShutdownOption.java", "diffHunk": "@@ -156,15 +118,158 @@ private static void createAndVerifyMiiDomain() {\n \n     // create secret for admin credentials\n     logger.info(\"Creating secret for admin credentials\");\n-    String adminSecretName = \"weblogic-credentials\";\n+    adminSecretName = \"weblogic-credentials\";\n     createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n \n     // create encryption secret\n     logger.info(\"Creating encryption secret\");\n-    String encryptionSecretName = \"encryptionsecret\";\n+    encryptionSecretName = \"encryptionsecret\";\n     createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n \n-    // create the domain CR\n+    String yamlString = \"topology:\\n\"\n+        + \"  Server:\\n\"\n+        + \"    'ms-1':\\n\"\n+        + \"      ListenPort: '10001'\\n\"\n+        + \"    'ms-2':\\n\"\n+        + \"      ListenPort: '9001'\\n\";\n+\n+    createModelConfigMap(cmName, yamlString);\n+\n+  }\n+\n+  /**\n+   * Delete the domain created by each test for the next test to start over.\n+   */\n+  @AfterEach\n+  public void afterEach() {\n+    logger.info(\"Deleting the domain resource\");\n+    TestActions.deleteDomainCustomResource(domainUid, domainNamespace);\n+    checkPodDoesNotExist(adminServerPodName, domainUid, domainNamespace);\n+    checkPodDoesNotExist(managedServerPodNamePrefix + 1, domainUid, domainNamespace);\n+    checkPodDoesNotExist(managedServerPodNamePrefix + 2, domainUid, domainNamespace);\n+    checkPodDoesNotExist(indManagedServerPodName1, domainUid, domainNamespace);\n+    checkPodDoesNotExist(indManagedServerPodName2, domainUid, domainNamespace);\n+  }\n+\n+  /**\n+   * Add shutdown options for servers at all levels: domain, admin server, cluster and managed server levels.\n+   * Verify individual specific level options takes precedence.\n+   *\n+   *<p>Domain level shutdown option which is applicable for all servers in the domain\n+   *      shutdownType - Forced , timeoutSeconds - 30 secs, ignoreSessions - true\n+   * Admin server level shutdown option applicable only to the admin server\n+   *      shutdownType - Forced , timeoutSeconds - 40 secs, ignoreSessions - true\n+   * Cluster level shutdown option applicable only to the clustered instances\n+   *      shutdownType - Graceful , timeoutSeconds - 60 secs, ignoreSessions - false\n+   * Managed server server level shutdown option applicable only to the independent managed servers\n+   *      shutdownType - Forced , timeoutSeconds - 45 secs, ignoreSessions - true\n+   *\n+   *<p>Since the shutdown options are provided at all levels the domain level shutdown options has no effect on the\n+   * admin server, cluster, or managed server options. All of those entities use their own shutdown options.\n+   *\n+   *<p>When server pods starts up the server.out log will show the options applied to the servers. The test verifies\n+   * the logs and determine the outcome of the test.\n+   *\n+   *<p>This use case shows how to add shutdown options at domain and how to override them at server level.\n+   * @throws ApiException when getting log fails\n+   */\n+  @Test\n+  @DisplayName(\"Verify shutdown rules when shutdown properties are defined at different levels \")\n+  public void testShutdownPropsAllLevels() throws ApiException {\n+\n+\n+    // create Shitdown objects for each server and cluster\n+    Shutdown[] shutDownObjects = new Shutdown[5];\n+    Shutdown dom = new Shutdown().ignoreSessions(Boolean.TRUE).shutdownType(\"Forced\").timeoutSeconds(30L);\n+    Shutdown admin = new Shutdown().ignoreSessions(Boolean.TRUE).shutdownType(\"Forced\").timeoutSeconds(40L);\n+    Shutdown cluster = new Shutdown().ignoreSessions(Boolean.FALSE).shutdownType(\"Graceful\").timeoutSeconds(60L);\n+    Shutdown ms1 = new Shutdown().ignoreSessions(Boolean.FALSE).shutdownType(\"Graceful\").timeoutSeconds(120L);\n+    Shutdown ms2 = new Shutdown().ignoreSessions(Boolean.TRUE).shutdownType(\"Forced\").timeoutSeconds(45L);\n+    shutDownObjects[0] = dom;\n+    shutDownObjects[1] = admin;\n+    shutDownObjects[2] = cluster;\n+    shutDownObjects[3] = ms1;\n+    shutDownObjects[4] = ms2;\n+    // create domain custom resource and verify all the pods came up\n+    Domain domain = buildDomainResource(shutDownObjects);\n+    createVerifyDomain(domain);\n+\n+    // get pod logs each server which contains server.out file logs and verify values set above are present in the log\n+    verifyServerLog(domainNamespace, adminServerPodName,\n+        new String[]{\"SHUTDOWN_IGNORE_SESSIONS=true\", \"SHUTDOWN_TYPE=Forced\", \"SHUTDOWN_TIMEOUT=40\"});\n+    verifyServerLog(domainNamespace, managedServerPodNamePrefix + 1,\n+        new String[]{\"SHUTDOWN_IGNORE_SESSIONS=false\", \"SHUTDOWN_TYPE=Graceful\", \"SHUTDOWN_TIMEOUT=60\"});\n+    verifyServerLog(domainNamespace, managedServerPodNamePrefix + 2,\n+        new String[]{\"SHUTDOWN_IGNORE_SESSIONS=false\", \"SHUTDOWN_TYPE=Graceful\", \"SHUTDOWN_TIMEOUT=60\"});\n+    verifyServerLog(domainNamespace, indManagedServerPodName2,\n+        new String[]{\"SHUTDOWN_IGNORE_SESSIONS=true\", \"SHUTDOWN_TYPE=Forced\", \"SHUTDOWN_TIMEOUT=45\"});\n+  }\n+\n+  /**\n+   * Add shutdown options for servers at all levels: domain, admin server, cluster and managed server levels\n+   * and override all those options with a domain level ENV variables. Verify the domain level options takes precedence.\n+   *\n+   *<p>Domain level shutdown option which is applicable for all servers in the domain\n+   *      shutdownType - Forced , timeoutSeconds - 30 secs, ignoreSessions - true\n+   * Admin server level shutdown option applicable only to the admin server\n+   *      shutdownType - Forced , timeoutSeconds - 40 secs, ignoreSessions - true\n+   * Cluster level shutdown option applicable only to the clustered instances\n+   *      shutdownType - Graceful , timeoutSeconds - 60 secs, ignoreSessions - false\n+   * Managed server server level shutdown option applicable only to the independent managed servers\n+   *      shutdownType - Forced , timeoutSeconds - 45 secs, ignoreSessions - true\n+   *\n+   *<p>After creating the above options override the shutdownType for all servers using a ENV level value - Forced\n+   * Now shutdownType for all servers are overridden with Forced as the shutdown option but rest of the properties\n+   * are applied as set in the individual server levels.\n+   *\n+   *<p>When server pods starts up the server.out log will show the shutdown options applied to the servers.\n+   * The test verifies the logs and determine the outcome of the test.\n+   *\n+   *<p>This use case shows how to add shutdown options at domain and how to override them using ENV variable.\n+   *\n+   * @throws ApiException when getting log fails\n+   */\n+  @Test\n+  @DisplayName(\"Verify shutdown rules when shutdown properties are defined at different levels \")\n+  public void testShutdownPropsEnvOverride() throws ApiException {\n+\n+\n+    // create Shitdown objects for each server and cluster", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce549322a202a677f378a047f53f223b61b41e2d"}, "originalPosition": 274}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkwMDc2OQ==", "bodyText": "you can call checkPodReadyAndServiceExists(String podName, String domainUid, String namespace) method", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1914#discussion_r488900769", "createdAt": "2020-09-15T19:04:00Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsShutdownOption.java", "diffHunk": "@@ -183,108 +288,117 @@ private static void createAndVerifyMiiDomain() {\n             .includeServerOutInPodLog(true)\n             .serverStartPolicy(\"IF_NEEDED\")\n             .serverPod(new ServerPod()\n+                .shutdown(shutDownObject[0])\n                 .addEnvItem(new V1EnvVar()\n                     .name(\"JAVA_OPTIONS\")\n                     .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n                 .addEnvItem(new V1EnvVar()\n                     .name(\"USER_MEM_ARGS\")\n-                    .value(\"-Djava.security.egd=file:/dev/./urandom \"))\n-                .addEnvItem(new V1EnvVar()\n-                    .name(\"SHUTDOWN_TYPE\")\n-                    .value(\"Graceful\")))\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n             .adminServer(new AdminServer()\n                 .serverStartState(\"RUNNING\")\n-                .serverPod(new ServerPod().shutdown(new Shutdown().shutdownType(\"Forced\")))\n-                .serverPod(new ServerPod().shutdown(new Shutdown().ignoreSessions(true)))\n-                .serverPod(new ServerPod().shutdown(new Shutdown().timeoutSeconds(40L))))\n+                .serverPod(new ServerPod()\n+                    .shutdown(shutDownObject[1])))\n             .addClustersItem(new Cluster()\n                 .clusterName(clusterName)\n                 .replicas(replicaCount)\n                 .serverStartState(\"RUNNING\")\n-                .serverPod(new ServerPod().shutdown(new Shutdown().timeoutSeconds(80L)))\n-                .serverPod(new ServerPod().shutdown(new Shutdown().ignoreSessions(true))))\n+                .serverPod(new ServerPod()\n+                    .shutdown(shutDownObject[2])))\n             .configuration(new Configuration()\n                 .model(new Model()\n+                    .configMap(cmName)\n                     .domainType(WLS_DOMAIN_TYPE)\n                     .runtimeEncryptionSecret(encryptionSecretName)))\n             .addManagedServersItem(new ManagedServer()\n-                .serverName(managedServer1Name)\n-                .serverPod(new ServerPod().shutdown(new Shutdown().timeoutSeconds(100L)))));\n+                .serverStartState(\"RUNNING\")\n+                .serverStartPolicy(\"ALWAYS\")\n+                .serverName(indManagedServerName1)\n+                .serverPod(new ServerPod()\n+                    .shutdown(shutDownObject[3])))\n+            .addManagedServersItem(new ManagedServer()\n+                .serverStartState(\"RUNNING\")\n+                .serverStartPolicy(\"ALWAYS\")\n+                .serverName(indManagedServerName2)\n+                .serverPod(new ServerPod()\n+                    .shutdown(shutDownObject[4]))));\n+    return domain;\n+  }\n \n+  // create domain resource and verify all the server pods are ready\n+  private void createVerifyDomain(Domain domain) {\n     // create model in image domain\n     logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n         domainUid, domainNamespace, miiImage);\n     createDomainAndVerify(domain, domainNamespace);\n \n-    // check that admin server pod exists in the domain namespace\n-    logger.info(\"Checking that admin server pod {0} exists in namespace {1}\",\n+    // check that admin service exists in the domain namespace\n+    logger.info(\"Checking that admin service {0} exists in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkPodExists(adminServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce549322a202a677f378a047f53f223b61b41e2d"}, "originalPosition": 378}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkwMDkzNw==", "bodyText": "you can call checkPodReadyAndServiceExists(String podName, String domainUid, String namespace) method", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1914#discussion_r488900937", "createdAt": "2020-09-15T19:04:18Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsShutdownOption.java", "diffHunk": "@@ -183,108 +288,117 @@ private static void createAndVerifyMiiDomain() {\n             .includeServerOutInPodLog(true)\n             .serverStartPolicy(\"IF_NEEDED\")\n             .serverPod(new ServerPod()\n+                .shutdown(shutDownObject[0])\n                 .addEnvItem(new V1EnvVar()\n                     .name(\"JAVA_OPTIONS\")\n                     .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n                 .addEnvItem(new V1EnvVar()\n                     .name(\"USER_MEM_ARGS\")\n-                    .value(\"-Djava.security.egd=file:/dev/./urandom \"))\n-                .addEnvItem(new V1EnvVar()\n-                    .name(\"SHUTDOWN_TYPE\")\n-                    .value(\"Graceful\")))\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n             .adminServer(new AdminServer()\n                 .serverStartState(\"RUNNING\")\n-                .serverPod(new ServerPod().shutdown(new Shutdown().shutdownType(\"Forced\")))\n-                .serverPod(new ServerPod().shutdown(new Shutdown().ignoreSessions(true)))\n-                .serverPod(new ServerPod().shutdown(new Shutdown().timeoutSeconds(40L))))\n+                .serverPod(new ServerPod()\n+                    .shutdown(shutDownObject[1])))\n             .addClustersItem(new Cluster()\n                 .clusterName(clusterName)\n                 .replicas(replicaCount)\n                 .serverStartState(\"RUNNING\")\n-                .serverPod(new ServerPod().shutdown(new Shutdown().timeoutSeconds(80L)))\n-                .serverPod(new ServerPod().shutdown(new Shutdown().ignoreSessions(true))))\n+                .serverPod(new ServerPod()\n+                    .shutdown(shutDownObject[2])))\n             .configuration(new Configuration()\n                 .model(new Model()\n+                    .configMap(cmName)\n                     .domainType(WLS_DOMAIN_TYPE)\n                     .runtimeEncryptionSecret(encryptionSecretName)))\n             .addManagedServersItem(new ManagedServer()\n-                .serverName(managedServer1Name)\n-                .serverPod(new ServerPod().shutdown(new Shutdown().timeoutSeconds(100L)))));\n+                .serverStartState(\"RUNNING\")\n+                .serverStartPolicy(\"ALWAYS\")\n+                .serverName(indManagedServerName1)\n+                .serverPod(new ServerPod()\n+                    .shutdown(shutDownObject[3])))\n+            .addManagedServersItem(new ManagedServer()\n+                .serverStartState(\"RUNNING\")\n+                .serverStartPolicy(\"ALWAYS\")\n+                .serverName(indManagedServerName2)\n+                .serverPod(new ServerPod()\n+                    .shutdown(shutDownObject[4]))));\n+    return domain;\n+  }\n \n+  // create domain resource and verify all the server pods are ready\n+  private void createVerifyDomain(Domain domain) {\n     // create model in image domain\n     logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n         domainUid, domainNamespace, miiImage);\n     createDomainAndVerify(domain, domainNamespace);\n \n-    // check that admin server pod exists in the domain namespace\n-    logger.info(\"Checking that admin server pod {0} exists in namespace {1}\",\n+    // check that admin service exists in the domain namespace\n+    logger.info(\"Checking that admin service {0} exists in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkPodExists(adminServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n \n     // check that admin server pod is ready\n     logger.info(\"Checking that admin server pod {0} is ready in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkPodReady(adminServerPodName, domainUid, domainNamespace);\n \n-    // check that admin service exists in the domain namespace\n-    logger.info(\"Checking that admin service {0} exists in namespace {1}\",\n-        adminServerPodName, domainNamespace);\n-    checkServiceExists(adminServerPodName, domainNamespace);\n-\n-    // check for managed server pods existence in the domain namespace\n     for (int i = 1; i <= replicaCount; i++) {\n-      String managedServerPodName = managedServerPrefix + i;\n+      String managedServerPodName = managedServerPodNamePrefix + i;\n \n-      // check that the managed server pod exists in the domain namespace\n-      logger.info(\"Checking that managed server pod {0} exists in namespace {1}\",\n+      // check that the managed server service exists in the domain namespace\n+      logger.info(\"Checking that managed server service {0} exists in namespace {1}\",\n           managedServerPodName, domainNamespace);\n-      checkPodExists(managedServerPodName, domainUid, domainNamespace);\n+      checkServiceExists(managedServerPodName, domainNamespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce549322a202a677f378a047f53f223b61b41e2d"}, "originalPosition": 401}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkwMTA0OA==", "bodyText": "you can call checkPodReadyAndServiceExists(String podName, String domainUid, String namespace) method", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1914#discussion_r488901048", "createdAt": "2020-09-15T19:04:28Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsShutdownOption.java", "diffHunk": "@@ -183,108 +288,117 @@ private static void createAndVerifyMiiDomain() {\n             .includeServerOutInPodLog(true)\n             .serverStartPolicy(\"IF_NEEDED\")\n             .serverPod(new ServerPod()\n+                .shutdown(shutDownObject[0])\n                 .addEnvItem(new V1EnvVar()\n                     .name(\"JAVA_OPTIONS\")\n                     .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n                 .addEnvItem(new V1EnvVar()\n                     .name(\"USER_MEM_ARGS\")\n-                    .value(\"-Djava.security.egd=file:/dev/./urandom \"))\n-                .addEnvItem(new V1EnvVar()\n-                    .name(\"SHUTDOWN_TYPE\")\n-                    .value(\"Graceful\")))\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n             .adminServer(new AdminServer()\n                 .serverStartState(\"RUNNING\")\n-                .serverPod(new ServerPod().shutdown(new Shutdown().shutdownType(\"Forced\")))\n-                .serverPod(new ServerPod().shutdown(new Shutdown().ignoreSessions(true)))\n-                .serverPod(new ServerPod().shutdown(new Shutdown().timeoutSeconds(40L))))\n+                .serverPod(new ServerPod()\n+                    .shutdown(shutDownObject[1])))\n             .addClustersItem(new Cluster()\n                 .clusterName(clusterName)\n                 .replicas(replicaCount)\n                 .serverStartState(\"RUNNING\")\n-                .serverPod(new ServerPod().shutdown(new Shutdown().timeoutSeconds(80L)))\n-                .serverPod(new ServerPod().shutdown(new Shutdown().ignoreSessions(true))))\n+                .serverPod(new ServerPod()\n+                    .shutdown(shutDownObject[2])))\n             .configuration(new Configuration()\n                 .model(new Model()\n+                    .configMap(cmName)\n                     .domainType(WLS_DOMAIN_TYPE)\n                     .runtimeEncryptionSecret(encryptionSecretName)))\n             .addManagedServersItem(new ManagedServer()\n-                .serverName(managedServer1Name)\n-                .serverPod(new ServerPod().shutdown(new Shutdown().timeoutSeconds(100L)))));\n+                .serverStartState(\"RUNNING\")\n+                .serverStartPolicy(\"ALWAYS\")\n+                .serverName(indManagedServerName1)\n+                .serverPod(new ServerPod()\n+                    .shutdown(shutDownObject[3])))\n+            .addManagedServersItem(new ManagedServer()\n+                .serverStartState(\"RUNNING\")\n+                .serverStartPolicy(\"ALWAYS\")\n+                .serverName(indManagedServerName2)\n+                .serverPod(new ServerPod()\n+                    .shutdown(shutDownObject[4]))));\n+    return domain;\n+  }\n \n+  // create domain resource and verify all the server pods are ready\n+  private void createVerifyDomain(Domain domain) {\n     // create model in image domain\n     logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n         domainUid, domainNamespace, miiImage);\n     createDomainAndVerify(domain, domainNamespace);\n \n-    // check that admin server pod exists in the domain namespace\n-    logger.info(\"Checking that admin server pod {0} exists in namespace {1}\",\n+    // check that admin service exists in the domain namespace\n+    logger.info(\"Checking that admin service {0} exists in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkPodExists(adminServerPodName, domainUid, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n \n     // check that admin server pod is ready\n     logger.info(\"Checking that admin server pod {0} is ready in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkPodReady(adminServerPodName, domainUid, domainNamespace);\n \n-    // check that admin service exists in the domain namespace\n-    logger.info(\"Checking that admin service {0} exists in namespace {1}\",\n-        adminServerPodName, domainNamespace);\n-    checkServiceExists(adminServerPodName, domainNamespace);\n-\n-    // check for managed server pods existence in the domain namespace\n     for (int i = 1; i <= replicaCount; i++) {\n-      String managedServerPodName = managedServerPrefix + i;\n+      String managedServerPodName = managedServerPodNamePrefix + i;\n \n-      // check that the managed server pod exists in the domain namespace\n-      logger.info(\"Checking that managed server pod {0} exists in namespace {1}\",\n+      // check that the managed server service exists in the domain namespace\n+      logger.info(\"Checking that managed server service {0} exists in namespace {1}\",\n           managedServerPodName, domainNamespace);\n-      checkPodExists(managedServerPodName, domainUid, domainNamespace);\n+      checkServiceExists(managedServerPodName, domainNamespace);\n \n       // check that the managed server pod is ready\n       logger.info(\"Checking that managed server pod {0} is ready in namespace {1}\",\n           managedServerPodName, domainNamespace);\n       checkPodReady(managedServerPodName, domainUid, domainNamespace);\n+    }\n \n+    // check for independent managed server pods existence in the domain namespace\n+    for (String podName : new String[]{indManagedServerPodName2}) {\n       // check that the managed server service exists in the domain namespace\n       logger.info(\"Checking that managed server service {0} exists in namespace {1}\",\n-          managedServerPodName, domainNamespace);\n-      checkServiceExists(managedServerPodName, domainNamespace);\n+          podName, domainNamespace);\n+      checkServiceExists(podName, domainNamespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce549322a202a677f378a047f53f223b61b41e2d"}, "originalPosition": 416}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e2ee71ba819b3eeaaea51142bd27e92220cf7a5", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7e2ee71ba819b3eeaaea51142bd27e92220cf7a5", "committedDate": "2020-09-15T19:41:30Z", "message": "address review comments from Vanaja"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MDY5NzAz", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1914#pullrequestreview-489069703", "createdAt": "2020-09-15T21:04:34Z", "commit": {"oid": "7e2ee71ba819b3eeaaea51142bd27e92220cf7a5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMTowNDozNFrOHSUftQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMTowNDozNFrOHSUftQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk3MjIxMw==", "bodyText": "remove throws ApiException", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1914#discussion_r488972213", "createdAt": "2020-09-15T21:04:34Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsShutdownOption.java", "diffHunk": "@@ -94,77 +104,167 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     // install and verify operator\n     installAndVerifyOperator(opNamespace, domainNamespace);\n \n-    // create a basic model in image domain\n-    createAndVerifyMiiDomain();\n-  }\n-\n-  /**\n-   * This test is to verify different shutdown options specified at different scopes in Domain Resource Definition.\n-   * Refer to section \"Shutdown options\" of Documentation link:\n-   * https://oracle.github.io/weblogic-kubernetes-operator/userguide/managing-domains/domain-lifecycle/startup/\n-   * step 1: Startup a WebLogic domain with one cluster that initially has one running managed server. The shutdown  \n-   * option is configured as follows:\n-   * domain: SHUTDOWN_TYPE -> Graceful.\n-   * adminServer: SHUTDOWN_TYPE -> Forced.\n-   *              SHUTDOWN_IGNORE_SESSIONS -> true.\n-   *              SHUTDOWN_TIMEOUT -> 40.\n-   * cluster: SHUTDOWN_IGNORE_SESSIONS -> true.\n-   *          SHUTDOWN_TIMEOUT -> 80.\n-   * managedServer1: SHUTDOWN_TIMEOUT -> 100.\n-   * step2: Scale cluster with two managed servers.\n-   * step 3: Verify shutdown properties of admin server, managedServer1 and newly scaled up managedServer2.\n-   * Domain level \"Graceful\" SHUTDOWN_TYPE overrides server level setting and is used for all servers.\n-   * So adminServer has \"Graceful\" SHUTDOWN_TYPE, default \"false\" SHUTDOWN_IGNORE_SESSIONS and\n-   * configured \"40\" SHUTDOWN_TIMEOUT.\n-   * Managed level setting overrides cluster level setting so managedServer1 has configured \"100\"\n-   * SHUTDOWN_TIMEOUT, cluster level \"true\" SHUTDOWN_IGNORE_SESSIONS  \"true\" and \"Graceful\" SHUTDOWN_TYPE.\n-   * Newly scaled up managedServer2 takes setting from combination of domain level and cluster level\n-   * with \"Graceful\" SHUTDOWN_TYPE, \"true\" SHUTDOWN_IGNORE_SESSIONS and default \"30\" SHUTDOWN_TIMEOUT\n-   */\n-  @Test\n-  @DisplayName(\"Verify shutdown rules when shutdown properties are defined at different levels \")\n-  public void testShutdownProps() throws ApiException {\n-\n-    //scale the cluster to 2 managed servers\n-    assertThat(assertDoesNotThrow(() -> scaleCluster(domainUid, domainNamespace, clusterName, 2)))\n-        .as(\"Verify scaling cluster {0} of domain {1} in namespace {2} succeeds\",\n-              clusterName, domainUid, domainNamespace)\n-        .withFailMessage(\"Scaling cluster {0} of domain {1} in namespace {2} failed\",\n-              clusterName, domainUid, domainNamespace)\n-        .isTrue();\n-    assertDoesNotThrow(() -> TimeUnit.SECONDS.sleep(30));\n-\n-    assertTrue(verifyServerShutdownProp(adminServerPodName, domainNamespace, \"Graceful\", \"40\", \"false\"));\n-    assertTrue(verifyServerShutdownProp(managedServerPrefix + 1, domainNamespace, \"Graceful\", \"100\", \"true\"));\n-    assertTrue(verifyServerShutdownProp(managedServerPrefix + 2, domainNamespace, \"Graceful\", \"30\", \"true\"));\n-  }\n-\n-  /**\n-   * Create a model in image domain and verify the server pods are ready.\n-   */\n-  private static void createAndVerifyMiiDomain() {\n-\n     // get the pre-built image created by IntegrationTestWatcher\n-    String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n-\n-    // docker login and push image to docker registry if necessary\n-    dockerLoginAndPushImageToRegistry(miiImage);\n+    miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n \n     // create docker registry secret to pull the image from registry\n     logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n     createDockerRegistrySecret(domainNamespace);\n \n     // create secret for admin credentials\n     logger.info(\"Creating secret for admin credentials\");\n-    String adminSecretName = \"weblogic-credentials\";\n+    adminSecretName = \"weblogic-credentials\";\n     createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n \n     // create encryption secret\n     logger.info(\"Creating encryption secret\");\n-    String encryptionSecretName = \"encryptionsecret\";\n+    encryptionSecretName = \"encryptionsecret\";\n     createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n \n-    // create the domain CR\n+    String yamlString = \"topology:\\n\"\n+        + \"  Server:\\n\"\n+        + \"    'ms-1':\\n\"\n+        + \"      ListenPort: '10001'\\n\"\n+        + \"    'ms-2':\\n\"\n+        + \"      ListenPort: '9001'\\n\";\n+\n+    createModelConfigMap(cmName, yamlString);\n+\n+  }\n+\n+  /**\n+   * Delete the domain created by each test for the next test to start over.\n+   */\n+  @AfterEach\n+  public void afterEach() {\n+    logger.info(\"Deleting the domain resource\");\n+    TestActions.deleteDomainCustomResource(domainUid, domainNamespace);\n+    checkPodDoesNotExist(adminServerPodName, domainUid, domainNamespace);\n+    checkPodDoesNotExist(managedServerPodNamePrefix + 1, domainUid, domainNamespace);\n+    checkPodDoesNotExist(managedServerPodNamePrefix + 2, domainUid, domainNamespace);\n+    checkPodDoesNotExist(indManagedServerPodName1, domainUid, domainNamespace);\n+    checkPodDoesNotExist(indManagedServerPodName2, domainUid, domainNamespace);\n+  }\n+\n+  /**\n+   * Add shutdown options for servers at all levels: domain, admin server, cluster and managed server levels.\n+   * Verify individual specific level options takes precedence.\n+   *\n+   *<p>Domain level shutdown option which is applicable for all servers in the domain\n+   *      shutdownType - Forced , timeoutSeconds - 30 secs, ignoreSessions - true\n+   * Admin server level shutdown option applicable only to the admin server\n+   *      shutdownType - Forced , timeoutSeconds - 40 secs, ignoreSessions - true\n+   * Cluster level shutdown option applicable only to the clustered instances\n+   *      shutdownType - Graceful , timeoutSeconds - 60 secs, ignoreSessions - false\n+   * Managed server server level shutdown option applicable only to the independent managed servers\n+   *      shutdownType - Forced , timeoutSeconds - 45 secs, ignoreSessions - true\n+   *\n+   *<p>Since the shutdown options are provided at all levels the domain level shutdown options has no effect on the\n+   * admin server, cluster, or managed server options. All of those entities use their own shutdown options.\n+   *\n+   *<p>When server pods starts up the server.out log will show the options applied to the servers. The test verifies\n+   * the logs and determine the outcome of the test.\n+   *\n+   *<p>This use case shows how to add shutdown options at domain and how to override them at server level.\n+   * @throws ApiException when getting log fails\n+   */\n+  @Test\n+  @DisplayName(\"Verify shutdown rules when shutdown properties are defined at different levels \")\n+  public void testShutdownPropsAllLevels() throws ApiException {\n+\n+\n+    // create Shutdown objects for each server and cluster\n+    Shutdown[] shutDownObjects = new Shutdown[5];\n+    Shutdown dom = new Shutdown().ignoreSessions(Boolean.TRUE).shutdownType(\"Forced\").timeoutSeconds(30L);\n+    Shutdown admin = new Shutdown().ignoreSessions(Boolean.TRUE).shutdownType(\"Forced\").timeoutSeconds(40L);\n+    Shutdown cluster = new Shutdown().ignoreSessions(Boolean.FALSE).shutdownType(\"Graceful\").timeoutSeconds(60L);\n+    Shutdown ms1 = new Shutdown().ignoreSessions(Boolean.FALSE).shutdownType(\"Graceful\").timeoutSeconds(120L);\n+    Shutdown ms2 = new Shutdown().ignoreSessions(Boolean.TRUE).shutdownType(\"Forced\").timeoutSeconds(45L);\n+    shutDownObjects[0] = dom;\n+    shutDownObjects[1] = admin;\n+    shutDownObjects[2] = cluster;\n+    shutDownObjects[3] = ms1;\n+    shutDownObjects[4] = ms2;\n+    // create domain custom resource and verify all the pods came up\n+    Domain domain = buildDomainResource(shutDownObjects);\n+    createVerifyDomain(domain);\n+\n+    // get pod logs each server which contains server.out file logs and verify values set above are present in the log\n+    verifyServerLog(domainNamespace, adminServerPodName,\n+        new String[]{\"SHUTDOWN_IGNORE_SESSIONS=true\", \"SHUTDOWN_TYPE=Forced\", \"SHUTDOWN_TIMEOUT=40\"});\n+    verifyServerLog(domainNamespace, managedServerPodNamePrefix + 1,\n+        new String[]{\"SHUTDOWN_IGNORE_SESSIONS=false\", \"SHUTDOWN_TYPE=Graceful\", \"SHUTDOWN_TIMEOUT=60\"});\n+    verifyServerLog(domainNamespace, managedServerPodNamePrefix + 2,\n+        new String[]{\"SHUTDOWN_IGNORE_SESSIONS=false\", \"SHUTDOWN_TYPE=Graceful\", \"SHUTDOWN_TIMEOUT=60\"});\n+    verifyServerLog(domainNamespace, indManagedServerPodName2,\n+        new String[]{\"SHUTDOWN_IGNORE_SESSIONS=true\", \"SHUTDOWN_TYPE=Forced\", \"SHUTDOWN_TIMEOUT=45\"});\n+  }\n+\n+  /**\n+   * Add shutdown options for servers at all levels: domain, admin server, cluster and managed server levels\n+   * and override all those options with a domain level ENV variables. Verify the domain level options takes precedence.\n+   *\n+   *<p>Domain level shutdown option which is applicable for all servers in the domain\n+   *      shutdownType - Forced , timeoutSeconds - 30 secs, ignoreSessions - true\n+   * Admin server level shutdown option applicable only to the admin server\n+   *      shutdownType - Forced , timeoutSeconds - 40 secs, ignoreSessions - true\n+   * Cluster level shutdown option applicable only to the clustered instances\n+   *      shutdownType - Graceful , timeoutSeconds - 60 secs, ignoreSessions - false\n+   * Managed server server level shutdown option applicable only to the independent managed servers\n+   *      shutdownType - Forced , timeoutSeconds - 45 secs, ignoreSessions - true\n+   *\n+   *<p>After creating the above options override the shutdownType for all servers using a ENV level value - Forced\n+   * Now shutdownType for all servers are overridden with Forced as the shutdown option but rest of the properties\n+   * are applied as set in the individual server levels.\n+   *\n+   *<p>When server pods starts up the server.out log will show the shutdown options applied to the servers.\n+   * The test verifies the logs and determine the outcome of the test.\n+   *\n+   *<p>This use case shows how to add shutdown options at domain and how to override them using ENV variable.\n+   *\n+   * @throws ApiException when getting log fails\n+   */\n+  @Test\n+  @DisplayName(\"Verify shutdown rules when shutdown properties are defined at different levels \")\n+  public void testShutdownPropsEnvOverride() throws ApiException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e2ee71ba819b3eeaaea51142bd27e92220cf7a5"}, "originalPosition": 276}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10f9a36e90a5d79535147163ee6790a5a5fad86d", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/10f9a36e90a5d79535147163ee6790a5a5fad86d", "committedDate": "2020-09-15T21:10:21Z", "message": "remove throws clause"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "936ed070b35531c53e951fe5b86d7d2f53154b0c", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/936ed070b35531c53e951fe5b86d7d2f53154b0c", "committedDate": "2020-09-15T21:12:24Z", "message": "fix javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NzM0OTYx", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1914#pullrequestreview-489734961", "createdAt": "2020-09-16T15:17:10Z", "commit": {"oid": "936ed070b35531c53e951fe5b86d7d2f53154b0c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NzQxNjUy", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1914#pullrequestreview-489741652", "createdAt": "2020-09-16T15:24:05Z", "commit": {"oid": "936ed070b35531c53e951fe5b86d7d2f53154b0c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4140, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}