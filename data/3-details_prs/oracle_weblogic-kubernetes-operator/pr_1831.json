{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1ODE0MDAy", "number": 1831, "title": "Add tests to verify loadbalancing with treafik lb for multiple domains", "bodyText": "Adding new IT class to verify loadbalancing of 2 WebLogic domains with a single traefik loadbalancer\n\n\nConsolidated Voyager loadbalancer test in to this class\n\n\nFixed the logging of assertion exceptions in individual It*.out files\n\n\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/934/testReport/oracle.weblogic.kubernetes/", "createdAt": "2020-07-23T16:05:35Z", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831", "merged": true, "mergeCommit": {"oid": "526e09f4fc16639f22e599d14d63cb2198bfc11f"}, "closed": true, "closedAt": "2020-07-30T14:19:03Z", "author": {"login": "sankarpn"}, "timelineItems": {"totalCount": 59, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc26rCtAH2gAyNDU1ODE0MDAyOjQ1YWJjNTVkOWJhMmJjYmE5MzM3ZTJhYzdmMDI0OGM5MzA2MzQyYmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5zSlCgH2gAyNDU1ODE0MDAyOjlmZDNiN2RiYjJkNjU1OGM3MzQ1ODQ4NTYzNzY1NThmYTQ5YTMyYjU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "45abc55d9ba2bcba9337e2ac7f0248c9306342bd", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/45abc55d9ba2bcba9337e2ac7f0248c9306342bd", "committedDate": "2020-07-20T23:59:30Z", "message": "Adding utilities for creating Traefik load balancer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0a7762cd25b4f9e919c9ec7759f39508e13a5e4", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d0a7762cd25b4f9e919c9ec7759f39508e13a5e4", "committedDate": "2020-07-21T00:24:33Z", "message": "Log the assertion errors in IT*.out files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e9382c32f234f86528e965aa4b2ce040aa1fd87", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5e9382c32f234f86528e965aa4b2ce040aa1fd87", "committedDate": "2020-07-21T17:47:00Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into traefik-lb-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23b847afe3762492a6c9a671364b5b482c932876", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/23b847afe3762492a6c9a671364b5b482c932876", "committedDate": "2020-07-21T18:59:06Z", "message": "Create ingress resource for traefik"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33e8eb5fa71b64c8ea97d67b05eac9c53c6d106a", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/33e8eb5fa71b64c8ea97d67b05eac9c53c6d106a", "committedDate": "2020-07-21T19:34:36Z", "message": "Fix the traefik pod name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a04162cb2bfebafdcb0f7ee7570158f43a48b96", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3a04162cb2bfebafdcb0f7ee7570158f43a48b96", "committedDate": "2020-07-21T20:16:17Z", "message": "do kind repo check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a18027ee7da9d2dac6ad4ab8b6d809e50e2f20f", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/4a18027ee7da9d2dac6ad4ab8b6d809e50e2f20f", "committedDate": "2020-07-21T21:04:57Z", "message": "uninstall traefik"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f0c1b2f3d0a29c95f2df0c722f9bde64cf6edbf", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/2f0c1b2f3d0a29c95f2df0c722f9bde64cf6edbf", "committedDate": "2020-07-21T21:09:11Z", "message": "Add application building"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df9b88326967955b3861ea75e3928e46172d6098", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/df9b88326967955b3861ea75e3928e46172d6098", "committedDate": "2020-07-22T17:26:59Z", "message": "Deploy application using REST and access it through traefik LB"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06e2d92e01566323c8093c3878c33bad3e7fed77", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/06e2d92e01566323c8093c3878c33bad3e7fed77", "committedDate": "2020-07-22T17:30:39Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into traefik-lb-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0479643be7888ca35419452ecba7214dcf7eada5", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0479643be7888ca35419452ecba7214dcf7eada5", "committedDate": "2020-07-22T18:04:52Z", "message": "create secret for WebLogic domain"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6def0edf0d1fe74dc012d474e1a8e845fd3fc1f", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b6def0edf0d1fe74dc012d474e1a8e845fd3fc1f", "committedDate": "2020-07-22T18:25:19Z", "message": "remove the testwebapp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15f6ebda5694bc00304315f623ccdd082c9a82cc", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/15f6ebda5694bc00304315f623ccdd082c9a82cc", "committedDate": "2020-07-22T18:51:34Z", "message": "Print JVMID from clusterview app"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bec514608da46300c41b5c769bf04e9316b284f", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/1bec514608da46300c41b5c769bf04e9316b284f", "committedDate": "2020-07-22T19:45:09Z", "message": "Remove the domain creation in PV"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f33cefb1d92905924c4d8f2910f96a835ceade5", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/1f33cefb1d92905924c4d8f2910f96a835ceade5", "committedDate": "2020-07-22T19:50:50Z", "message": "cleanup code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ecb73f1bec4c489e43b2d5a87923494eaaeb502", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8ecb73f1bec4c489e43b2d5a87923494eaaeb502", "committedDate": "2020-07-22T21:51:00Z", "message": "cleanup code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11b171e7b4ef4446ed7c8453cc0be54f4a776042", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/11b171e7b4ef4446ed7c8453cc0be54f4a776042", "committedDate": "2020-07-22T23:04:01Z", "message": "remove the domainUid from url"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cafc778bde54f40e70d5fc0b04b3689a2321d1c0", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/cafc778bde54f40e70d5fc0b04b3689a2321d1c0", "committedDate": "2020-07-23T16:00:23Z", "message": "verify loadbalancing after creating 2 domains"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3df3356fe3d2cd9ad50c4a699be4a75905d12ca", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a3df3356fe3d2cd9ad50c4a699be4a75905d12ca", "committedDate": "2020-07-23T16:20:16Z", "message": "cleanup javadocs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b59aed35eb7e84abecd5a098ed966f997663d36c", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b59aed35eb7e84abecd5a098ed966f997663d36c", "committedDate": "2020-07-23T16:20:29Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into traefik-lb-tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MzczMTAz", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#pullrequestreview-454373103", "createdAt": "2020-07-23T18:02:14Z", "commit": {"oid": "b59aed35eb7e84abecd5a098ed966f997663d36c"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODowMjoxNFrOG2VrBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODoxOToyNlrOG2WQ4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzMTM2Ng==", "bodyText": "Add more information about the usecase\n(a) we are verifying host routing usecase\n(b) A single Traefik Ingress controller routing web requests to multiple domains by providing host information in Http Header.\n(c) quick info about the expected return string from the webapp.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r459631366", "createdAt": "2020-07-23T18:02:14Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTraefikLoadBalancer.java", "diffHunk": "@@ -0,0 +1,304 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.DeployUtil;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallTraefik;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createTraefikIngressForDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyTraefik;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.verifyClusterMemberCommunication;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to WebLogic domain traffic routed by traefik loadbalancer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b59aed35eb7e84abecd5a098ed966f997663d36c"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzMjY1OA==", "bodyText": "Modify test name to be specific testTraefikHostRoutingAcrossDomains()", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r459632658", "createdAt": "2020-07-23T18:04:38Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTraefikLoadBalancer.java", "diffHunk": "@@ -0,0 +1,304 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.DeployUtil;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallTraefik;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createTraefikIngressForDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyTraefik;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.verifyClusterMemberCommunication;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to WebLogic domain traffic routed by traefik loadbalancer.\n+ */\n+@DisplayName(\"Test traefik loadbalancing with multiple WebLogic domains\")\n+@IntegrationTest\n+public class ItTraefikLoadBalancer {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static String traefikNamespace = null;\n+\n+  private static int nodeportshttp;\n+\n+  private static HelmParams traefikHelmParams = null;\n+\n+  private static final String IMAGE = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private final String wlSecretName = \"weblogic-credentials\";\n+\n+  private static Path clusterViewAppPath;\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains. Installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Assign a unique namespace for WebLogic domains\");\n+    domainNamespace = namespaces.get(1);\n+\n+    logger.info(\"Assign a unique namespace for traefik\");\n+    traefikNamespace = namespaces.get(2);\n+\n+    // install operator and verify its running in ready state\n+    logger.info(\"Installing operator\");\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // get a free web and websecure ports for traefik\n+    nodeportshttp = getNextFreePort(30380, 30405);\n+    int nodeportshttps = getNextFreePort(31443, 31743);\n+\n+    // install and verify traefik\n+    logger.info(\"Installing traefik controller using helm\");\n+    traefikHelmParams = installAndVerifyTraefik(traefikNamespace, nodeportshttp, nodeportshttps);\n+\n+    // build the clusterview application\n+    logger.info(\"Building clusterview application\");\n+    Path distDir = BuildApplication.buildApplication(Paths.get(APP_DIR, \"clusterview\"), null, null,\n+        \"dist\", domainNamespace);\n+    assertTrue(Paths.get(distDir.toString(),\n+        \"clusterview.war\").toFile().exists(),\n+        \"Application archive is not available\");\n+    clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n+\n+  }\n+\n+  @Test\n+  @DisplayName(\"Create model in image domains domain1 and domain2 and Ingress resources\")\n+  public void testTraefikLoadbalancer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b59aed35eb7e84abecd5a098ed966f997663d36c"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzNzQ5Ng==", "bodyText": "Does the clusterView Servlet assures that the response is coming form domain1/domain2. Does it display the unique managed server name from each domain ?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r459637496", "createdAt": "2020-07-23T18:13:09Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTraefikLoadBalancer.java", "diffHunk": "@@ -0,0 +1,304 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.DeployUtil;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallTraefik;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createTraefikIngressForDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyTraefik;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.verifyClusterMemberCommunication;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to WebLogic domain traffic routed by traefik loadbalancer.\n+ */\n+@DisplayName(\"Test traefik loadbalancing with multiple WebLogic domains\")\n+@IntegrationTest\n+public class ItTraefikLoadBalancer {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static String traefikNamespace = null;\n+\n+  private static int nodeportshttp;\n+\n+  private static HelmParams traefikHelmParams = null;\n+\n+  private static final String IMAGE = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private final String wlSecretName = \"weblogic-credentials\";\n+\n+  private static Path clusterViewAppPath;\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains. Installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Assign a unique namespace for WebLogic domains\");\n+    domainNamespace = namespaces.get(1);\n+\n+    logger.info(\"Assign a unique namespace for traefik\");\n+    traefikNamespace = namespaces.get(2);\n+\n+    // install operator and verify its running in ready state\n+    logger.info(\"Installing operator\");\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // get a free web and websecure ports for traefik\n+    nodeportshttp = getNextFreePort(30380, 30405);\n+    int nodeportshttps = getNextFreePort(31443, 31743);\n+\n+    // install and verify traefik\n+    logger.info(\"Installing traefik controller using helm\");\n+    traefikHelmParams = installAndVerifyTraefik(traefikNamespace, nodeportshttp, nodeportshttps);\n+\n+    // build the clusterview application\n+    logger.info(\"Building clusterview application\");\n+    Path distDir = BuildApplication.buildApplication(Paths.get(APP_DIR, \"clusterview\"), null, null,\n+        \"dist\", domainNamespace);\n+    assertTrue(Paths.get(distDir.toString(),\n+        \"clusterview.war\").toFile().exists(),\n+        \"Application archive is not available\");\n+    clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n+\n+  }\n+\n+  @Test\n+  @DisplayName(\"Create model in image domains domain1 and domain2 and Ingress resources\")\n+  public void testTraefikLoadbalancer() {\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+        String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create WebLogic domain credentials secret\n+    logger.info(\"Creating WebLogic credentials secrets for domain\");\n+    createSecretWithUsernamePassword(wlSecretName, domainNamespace,\n+        ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n+\n+    // create model encryption secret\n+    logger.info(\"Creating encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        encryptionSecretName,\n+        domainNamespace,\n+        \"weblogicenc\",\n+        \"weblogicenc\"),\n+        String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    int replicaCount = 2;\n+    String managedServerNameBase = \"managed-server\";\n+    String[] domains = {\"domain1\", \"domain2\"};\n+\n+    for (String domainUid : domains) {\n+\n+      // admin/managed server name here should match with model yaml in MII_BASIC_WDT_MODEL_FILE\n+      String adminServerPodName = domainUid + \"-admin-server\";\n+      String managedServerPrefix = domainUid + \"-\" + managedServerNameBase;\n+\n+      // create the domain custom resource object\n+      Domain domain = createDomainResource(domainUid,\n+          domainNamespace,\n+          REPO_SECRET_NAME,\n+          encryptionSecretName,\n+          replicaCount,\n+          IMAGE);\n+\n+      // create model in image domain\n+      logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+          domainUid, domainNamespace, MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG);\n+      createDomainAndVerify(domain, domainNamespace);\n+\n+      logger.info(\"Check admin service {0} is created in namespace {1}\",\n+          adminServerPodName, domainNamespace);\n+      checkServiceExists(adminServerPodName, domainNamespace);\n+\n+      // check admin server pod is ready\n+      logger.info(\"Waiting for admin server pod {0} to be ready in namespace {1}\",\n+          adminServerPodName, domainNamespace);\n+      checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+      // check managed server services created\n+      for (int i = 1; i <= replicaCount; i++) {\n+        logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+            managedServerPrefix + i, domainNamespace);\n+        checkServiceExists(managedServerPrefix + i, domainNamespace);\n+      }\n+\n+      // check managed server pods are ready\n+      for (int i = 1; i <= replicaCount; i++) {\n+        logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+            managedServerPrefix + i, domainNamespace);\n+        checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+      }\n+\n+      //create ingress resource - rules for loadbalancing\n+      Map<String, Integer> clusterNameMsPortMap = new HashMap<>();\n+      clusterNameMsPortMap.put(\"cluster-1\", 8001);\n+      logger.info(\"Creating ingress resource for domain {0} in namespace {1}\", domainUid, domainNamespace);\n+      createTraefikIngressForDomainAndVerify(domainUid, domainNamespace, 0, clusterNameMsPortMap, true);\n+\n+      logger.info(\"Getting node port for admin server default channel\");\n+      int serviceNodePort = assertDoesNotThrow(()\n+          -> getServiceNodePort(domainNamespace, adminServerPodName + \"-external\", \"default\"),\n+          \"Getting admin server node port failed\");\n+\n+      logger.info(\"Deploying application {0} in domain {1} cluster target cluster-1\",\n+          clusterViewAppPath, domainUid);\n+      ExecResult result = DeployUtil.deployUsingRest(K8S_NODEPORT_HOST,\n+          String.valueOf(serviceNodePort),\n+          ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT,\n+          \"cluster-1\", clusterViewAppPath, null, domainUid + \"clusterview\");\n+      assertNotNull(result, \"Application deployment failed\");\n+      logger.info(\"Application deployment returned {0}\", result.toString());\n+      assertEquals(\"202\", result.stdout(), \"Deployment didn't return HTTP status code 202\");\n+\n+      verifyLoadbalancing(domainUid, replicaCount, managedServerNameBase);\n+    }\n+\n+    // verify load balancing works when 2 domains are running in the same namespace\n+    for (String domainUid : domains) {\n+      verifyLoadbalancing(domainUid, replicaCount, managedServerNameBase);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b59aed35eb7e84abecd5a098ed966f997663d36c"}, "originalPosition": 223}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0MTA1OQ==", "bodyText": "We need to add test\n(a) to access console thru LoadBalancer\n(b) access the app thru TLS enabled EndPoints.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r459641059", "createdAt": "2020-07-23T18:19:26Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTraefikLoadBalancer.java", "diffHunk": "@@ -0,0 +1,304 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.DeployUtil;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallTraefik;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createTraefikIngressForDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyTraefik;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.verifyClusterMemberCommunication;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to WebLogic domain traffic routed by traefik loadbalancer.\n+ */\n+@DisplayName(\"Test traefik loadbalancing with multiple WebLogic domains\")\n+@IntegrationTest\n+public class ItTraefikLoadBalancer {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static String traefikNamespace = null;\n+\n+  private static int nodeportshttp;\n+\n+  private static HelmParams traefikHelmParams = null;\n+\n+  private static final String IMAGE = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private final String wlSecretName = \"weblogic-credentials\";\n+\n+  private static Path clusterViewAppPath;\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains. Installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Assign a unique namespace for WebLogic domains\");\n+    domainNamespace = namespaces.get(1);\n+\n+    logger.info(\"Assign a unique namespace for traefik\");\n+    traefikNamespace = namespaces.get(2);\n+\n+    // install operator and verify its running in ready state\n+    logger.info(\"Installing operator\");\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // get a free web and websecure ports for traefik\n+    nodeportshttp = getNextFreePort(30380, 30405);\n+    int nodeportshttps = getNextFreePort(31443, 31743);\n+\n+    // install and verify traefik\n+    logger.info(\"Installing traefik controller using helm\");\n+    traefikHelmParams = installAndVerifyTraefik(traefikNamespace, nodeportshttp, nodeportshttps);\n+\n+    // build the clusterview application\n+    logger.info(\"Building clusterview application\");\n+    Path distDir = BuildApplication.buildApplication(Paths.get(APP_DIR, \"clusterview\"), null, null,\n+        \"dist\", domainNamespace);\n+    assertTrue(Paths.get(distDir.toString(),\n+        \"clusterview.war\").toFile().exists(),\n+        \"Application archive is not available\");\n+    clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n+\n+  }\n+\n+  @Test\n+  @DisplayName(\"Create model in image domains domain1 and domain2 and Ingress resources\")\n+  public void testTraefikLoadbalancer() {\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+        String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create WebLogic domain credentials secret\n+    logger.info(\"Creating WebLogic credentials secrets for domain\");\n+    createSecretWithUsernamePassword(wlSecretName, domainNamespace,\n+        ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n+\n+    // create model encryption secret\n+    logger.info(\"Creating encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        encryptionSecretName,\n+        domainNamespace,\n+        \"weblogicenc\",\n+        \"weblogicenc\"),\n+        String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    int replicaCount = 2;\n+    String managedServerNameBase = \"managed-server\";\n+    String[] domains = {\"domain1\", \"domain2\"};\n+\n+    for (String domainUid : domains) {\n+\n+      // admin/managed server name here should match with model yaml in MII_BASIC_WDT_MODEL_FILE\n+      String adminServerPodName = domainUid + \"-admin-server\";\n+      String managedServerPrefix = domainUid + \"-\" + managedServerNameBase;\n+\n+      // create the domain custom resource object\n+      Domain domain = createDomainResource(domainUid,\n+          domainNamespace,\n+          REPO_SECRET_NAME,\n+          encryptionSecretName,\n+          replicaCount,\n+          IMAGE);\n+\n+      // create model in image domain\n+      logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+          domainUid, domainNamespace, MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG);\n+      createDomainAndVerify(domain, domainNamespace);\n+\n+      logger.info(\"Check admin service {0} is created in namespace {1}\",\n+          adminServerPodName, domainNamespace);\n+      checkServiceExists(adminServerPodName, domainNamespace);\n+\n+      // check admin server pod is ready\n+      logger.info(\"Waiting for admin server pod {0} to be ready in namespace {1}\",\n+          adminServerPodName, domainNamespace);\n+      checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+      // check managed server services created\n+      for (int i = 1; i <= replicaCount; i++) {\n+        logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+            managedServerPrefix + i, domainNamespace);\n+        checkServiceExists(managedServerPrefix + i, domainNamespace);\n+      }\n+\n+      // check managed server pods are ready\n+      for (int i = 1; i <= replicaCount; i++) {\n+        logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+            managedServerPrefix + i, domainNamespace);\n+        checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+      }\n+\n+      //create ingress resource - rules for loadbalancing\n+      Map<String, Integer> clusterNameMsPortMap = new HashMap<>();\n+      clusterNameMsPortMap.put(\"cluster-1\", 8001);\n+      logger.info(\"Creating ingress resource for domain {0} in namespace {1}\", domainUid, domainNamespace);\n+      createTraefikIngressForDomainAndVerify(domainUid, domainNamespace, 0, clusterNameMsPortMap, true);\n+\n+      logger.info(\"Getting node port for admin server default channel\");\n+      int serviceNodePort = assertDoesNotThrow(()\n+          -> getServiceNodePort(domainNamespace, adminServerPodName + \"-external\", \"default\"),\n+          \"Getting admin server node port failed\");\n+\n+      logger.info(\"Deploying application {0} in domain {1} cluster target cluster-1\",\n+          clusterViewAppPath, domainUid);\n+      ExecResult result = DeployUtil.deployUsingRest(K8S_NODEPORT_HOST,\n+          String.valueOf(serviceNodePort),\n+          ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT,\n+          \"cluster-1\", clusterViewAppPath, null, domainUid + \"clusterview\");\n+      assertNotNull(result, \"Application deployment failed\");\n+      logger.info(\"Application deployment returned {0}\", result.toString());\n+      assertEquals(\"202\", result.stdout(), \"Deployment didn't return HTTP status code 202\");\n+\n+      verifyLoadbalancing(domainUid, replicaCount, managedServerNameBase);\n+    }\n+\n+    // verify load balancing works when 2 domains are running in the same namespace\n+    for (String domainUid : domains) {\n+      verifyLoadbalancing(domainUid, replicaCount, managedServerNameBase);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b59aed35eb7e84abecd5a098ed966f997663d36c"}, "originalPosition": 224}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c4ff724aee90c511fa4c23d4b645a4a8a8aef5e", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/2c4ff724aee90c511fa4c23d4b645a4a8a8aef5e", "committedDate": "2020-07-23T19:51:22Z", "message": "Add verification checks to determine host routing is done correctly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0d4245dc4111aede7b871b0a2e9c9534f8e930f", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a0d4245dc4111aede7b871b0a2e9c9534f8e930f", "committedDate": "2020-07-23T19:54:39Z", "message": "fix comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NDU0NzYx", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#pullrequestreview-454454761", "createdAt": "2020-07-23T20:02:49Z", "commit": {"oid": "a0d4245dc4111aede7b871b0a2e9c9534f8e930f"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDowMjo1MFrOG2ZnVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMDoxNDoxN1rOG2Z9ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY5NTk1OQ==", "bodyText": "Assigns unique namespaces for operator, Traefik and domains", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r459695959", "createdAt": "2020-07-23T20:02:50Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTraefikLoadBalancer.java", "diffHunk": "@@ -0,0 +1,353 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.DeployUtil;\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallTraefik;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createTraefikIngressForDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyTraefik;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.verifyClusterMemberCommunication;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to WebLogic domain traffic routed by traefik loadbalancer.\n+ */\n+@DisplayName(\"Test traefik loadbalancing with multiple WebLogic domains\")\n+@IntegrationTest\n+public class ItTraefikLoadBalancer {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static String traefikNamespace = null;\n+\n+  private static int nodeportshttp;\n+\n+  private static HelmParams traefikHelmParams = null;\n+\n+  private static final String IMAGE = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private final String wlSecretName = \"weblogic-credentials\";\n+\n+  private static Path clusterViewAppPath;\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains. Installs operator.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0d4245dc4111aede7b871b0a2e9c9534f8e930f"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY5ODIxNQ==", "bodyText": "Can you let Kubernetes pick up the nodeport for Traefik then get the assigned nodeport through getServiceNodePort() method? In parallel run, the predefined nodeport may got port conflicts.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r459698215", "createdAt": "2020-07-23T20:07:09Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTraefikLoadBalancer.java", "diffHunk": "@@ -0,0 +1,353 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.DeployUtil;\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallTraefik;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createTraefikIngressForDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyTraefik;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.verifyClusterMemberCommunication;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to WebLogic domain traffic routed by traefik loadbalancer.\n+ */\n+@DisplayName(\"Test traefik loadbalancing with multiple WebLogic domains\")\n+@IntegrationTest\n+public class ItTraefikLoadBalancer {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static String traefikNamespace = null;\n+\n+  private static int nodeportshttp;\n+\n+  private static HelmParams traefikHelmParams = null;\n+\n+  private static final String IMAGE = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private final String wlSecretName = \"weblogic-credentials\";\n+\n+  private static Path clusterViewAppPath;\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains. Installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Assign a unique namespace for WebLogic domains\");\n+    domainNamespace = namespaces.get(1);\n+\n+    logger.info(\"Assign a unique namespace for traefik\");\n+    traefikNamespace = namespaces.get(2);\n+\n+    // install operator and verify its running in ready state\n+    logger.info(\"Installing operator\");\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // get a free web and websecure ports for traefik\n+    nodeportshttp = getNextFreePort(30380, 30405);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0d4245dc4111aede7b871b0a2e9c9534f8e930f"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTcwMTY2Mg==", "bodyText": "change this to: domainUid + \".\" + domainNamespace + \".cluster-1.test\", K8S_NODEPORT_HOST, nodeportshttp);", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r459701662", "createdAt": "2020-07-23T20:14:17Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTraefikLoadBalancer.java", "diffHunk": "@@ -0,0 +1,353 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.DeployUtil;\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallTraefik;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createTraefikIngressForDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyTraefik;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.verifyClusterMemberCommunication;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to WebLogic domain traffic routed by traefik loadbalancer.\n+ */\n+@DisplayName(\"Test traefik loadbalancing with multiple WebLogic domains\")\n+@IntegrationTest\n+public class ItTraefikLoadBalancer {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static String traefikNamespace = null;\n+\n+  private static int nodeportshttp;\n+\n+  private static HelmParams traefikHelmParams = null;\n+\n+  private static final String IMAGE = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private final String wlSecretName = \"weblogic-credentials\";\n+\n+  private static Path clusterViewAppPath;\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains. Installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Assign a unique namespace for WebLogic domains\");\n+    domainNamespace = namespaces.get(1);\n+\n+    logger.info(\"Assign a unique namespace for traefik\");\n+    traefikNamespace = namespaces.get(2);\n+\n+    // install operator and verify its running in ready state\n+    logger.info(\"Installing operator\");\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // get a free web and websecure ports for traefik\n+    nodeportshttp = getNextFreePort(30380, 30405);\n+    int nodeportshttps = getNextFreePort(31443, 31743);\n+\n+    // install and verify traefik\n+    logger.info(\"Installing traefik controller using helm\");\n+    traefikHelmParams = installAndVerifyTraefik(traefikNamespace, nodeportshttp, nodeportshttps);\n+\n+    // build the clusterview application\n+    logger.info(\"Building clusterview application\");\n+    Path distDir = BuildApplication.buildApplication(Paths.get(APP_DIR, \"clusterview\"), null, null,\n+        \"dist\", domainNamespace);\n+    assertTrue(Paths.get(distDir.toString(),\n+        \"clusterview.war\").toFile().exists(),\n+        \"Application archive is not available\");\n+    clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n+\n+  }\n+\n+  @Test\n+  @DisplayName(\"Create model in image domains domain1 and domain2 and Ingress resources\")\n+  public void testTraefikLoadbalancer() {\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+        String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create WebLogic domain credentials secret\n+    logger.info(\"Creating WebLogic credentials secrets for domain\");\n+    createSecretWithUsernamePassword(wlSecretName, domainNamespace,\n+        ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n+\n+    // create model encryption secret\n+    logger.info(\"Creating encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        encryptionSecretName,\n+        domainNamespace,\n+        \"weblogicenc\",\n+        \"weblogicenc\"),\n+        String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    int replicaCount = 2;\n+    String managedServerNameBase = \"managed-server\";\n+    String[] domains = {\"domain1\", \"domain2\"};\n+\n+    for (String domainUid : domains) {\n+\n+      // admin/managed server name here should match with model yaml in MII_BASIC_WDT_MODEL_FILE\n+      String adminServerPodName = domainUid + \"-admin-server\";\n+      String managedServerPrefix = domainUid + \"-\" + managedServerNameBase;\n+\n+      // create the domain custom resource object\n+      Domain domain = createDomainResource(domainUid,\n+          domainNamespace,\n+          REPO_SECRET_NAME,\n+          encryptionSecretName,\n+          replicaCount,\n+          IMAGE);\n+\n+      // create model in image domain\n+      logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+          domainUid, domainNamespace, MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG);\n+      createDomainAndVerify(domain, domainNamespace);\n+\n+      logger.info(\"Check admin service {0} is created in namespace {1}\",\n+          adminServerPodName, domainNamespace);\n+      checkServiceExists(adminServerPodName, domainNamespace);\n+\n+      // check admin server pod is ready\n+      logger.info(\"Waiting for admin server pod {0} to be ready in namespace {1}\",\n+          adminServerPodName, domainNamespace);\n+      checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+      // check managed server services created\n+      for (int i = 1; i <= replicaCount; i++) {\n+        logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+            managedServerPrefix + i, domainNamespace);\n+        checkServiceExists(managedServerPrefix + i, domainNamespace);\n+      }\n+\n+      // check managed server pods are ready\n+      for (int i = 1; i <= replicaCount; i++) {\n+        logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+            managedServerPrefix + i, domainNamespace);\n+        checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+      }\n+\n+      //create ingress resource - rules for loadbalancing\n+      Map<String, Integer> clusterNameMsPortMap = new HashMap<>();\n+      clusterNameMsPortMap.put(\"cluster-1\", 8001);\n+      logger.info(\"Creating ingress resource for domain {0} in namespace {1}\", domainUid, domainNamespace);\n+      createTraefikIngressForDomainAndVerify(domainUid, domainNamespace, 0, clusterNameMsPortMap, true);\n+\n+      logger.info(\"Getting node port for admin server default channel\");\n+      int serviceNodePort = assertDoesNotThrow(()\n+          -> getServiceNodePort(domainNamespace, adminServerPodName + \"-external\", \"default\"),\n+          \"Getting admin server node port failed\");\n+\n+      logger.info(\"Deploying application {0} in domain {1} cluster target cluster-1\",\n+          clusterViewAppPath, domainUid);\n+      ExecResult result = DeployUtil.deployUsingRest(K8S_NODEPORT_HOST,\n+          String.valueOf(serviceNodePort),\n+          ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT,\n+          \"cluster-1\", clusterViewAppPath, null, domainUid + \"clusterview\");\n+      assertNotNull(result, \"Application deployment failed\");\n+      logger.info(\"Application deployment returned {0}\", result.toString());\n+      assertEquals(\"202\", result.stdout(), \"Deployment didn't return HTTP status code 202\");\n+\n+      bindDomainName(domainUid);\n+    }\n+\n+    // verify load balancing works when 2 domains are running in the same namespace\n+    for (String domainUid : domains) {\n+      verifyLoadbalancing(domainUid, replicaCount, managedServerNameBase);\n+    }\n+  }\n+\n+  private void verifyLoadbalancing(String domainUid, int replicaCount, String managedServerNameBase) {\n+    //access application in managed servers through traefik load balancer\n+    logger.info(\"Accessing the clusterview app through traefik load balancer\");\n+    String curlRequest = String.format(\"curl --silent --show-error --noproxy '*' \"\n+        + \"-H 'host: %s' http://%s:%s/clusterview/ClusterViewServlet\",\n+        domainUid + \".\" + domainNamespace + \".\" + \"cluster-1\" + \".test\", K8S_NODEPORT_HOST, nodeportshttp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0d4245dc4111aede7b871b0a2e9c9534f8e930f"}, "originalPosition": 234}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e91d56575098e4cb824f53ec9631c64db60667e", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/4e91d56575098e4cb824f53ec9631c64db60667e", "committedDate": "2020-07-23T20:36:23Z", "message": "Add a delay before accessing the app"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6c95bfc2a127e9d9ad14d83270969f9e4f578e0", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d6c95bfc2a127e9d9ad14d83270969f9e4f578e0", "committedDate": "2020-07-23T20:38:20Z", "message": "Fix the curl command"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9047b9343487da8830c66426144867df4be91932", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/9047b9343487da8830c66426144867df4be91932", "committedDate": "2020-07-23T21:43:14Z", "message": "iAddressed the review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09cf9577ba69affa0d9976479b81bcebea70be0e", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/09cf9577ba69affa0d9976479b81bcebea70be0e", "committedDate": "2020-07-23T21:57:41Z", "message": "Fix service name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f15538d7b76cf04b98111c44c728c11d45d82d0", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3f15538d7b76cf04b98111c44c728c11d45d82d0", "committedDate": "2020-07-23T22:07:46Z", "message": "fix namespace"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NTM1MjY4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#pullrequestreview-454535268", "createdAt": "2020-07-23T22:22:21Z", "commit": {"oid": "a0d4245dc4111aede7b871b0a2e9c9534f8e930f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjoyMjoyMVrOG2dkjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjoyMjoyMVrOG2dkjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2MDc4MA==", "bodyText": "You can change this to: domainUid + \".\" + domainNamespace + \".cluster-1.test\", K8S_NODEPORT_HOST, nodeportshttp);", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r459760780", "createdAt": "2020-07-23T22:22:21Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTraefikLoadBalancer.java", "diffHunk": "@@ -0,0 +1,353 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.DeployUtil;\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallTraefik;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createTraefikIngressForDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyTraefik;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.verifyClusterMemberCommunication;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to WebLogic domain traffic routed by traefik loadbalancer.\n+ */\n+@DisplayName(\"Test traefik loadbalancing with multiple WebLogic domains\")\n+@IntegrationTest\n+public class ItTraefikLoadBalancer {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static String traefikNamespace = null;\n+\n+  private static int nodeportshttp;\n+\n+  private static HelmParams traefikHelmParams = null;\n+\n+  private static final String IMAGE = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private final String wlSecretName = \"weblogic-credentials\";\n+\n+  private static Path clusterViewAppPath;\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains. Installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Assign a unique namespace for WebLogic domains\");\n+    domainNamespace = namespaces.get(1);\n+\n+    logger.info(\"Assign a unique namespace for traefik\");\n+    traefikNamespace = namespaces.get(2);\n+\n+    // install operator and verify its running in ready state\n+    logger.info(\"Installing operator\");\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // get a free web and websecure ports for traefik\n+    nodeportshttp = getNextFreePort(30380, 30405);\n+    int nodeportshttps = getNextFreePort(31443, 31743);\n+\n+    // install and verify traefik\n+    logger.info(\"Installing traefik controller using helm\");\n+    traefikHelmParams = installAndVerifyTraefik(traefikNamespace, nodeportshttp, nodeportshttps);\n+\n+    // build the clusterview application\n+    logger.info(\"Building clusterview application\");\n+    Path distDir = BuildApplication.buildApplication(Paths.get(APP_DIR, \"clusterview\"), null, null,\n+        \"dist\", domainNamespace);\n+    assertTrue(Paths.get(distDir.toString(),\n+        \"clusterview.war\").toFile().exists(),\n+        \"Application archive is not available\");\n+    clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n+\n+  }\n+\n+  @Test\n+  @DisplayName(\"Create model in image domains domain1 and domain2 and Ingress resources\")\n+  public void testTraefikLoadbalancer() {\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+        String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create WebLogic domain credentials secret\n+    logger.info(\"Creating WebLogic credentials secrets for domain\");\n+    createSecretWithUsernamePassword(wlSecretName, domainNamespace,\n+        ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n+\n+    // create model encryption secret\n+    logger.info(\"Creating encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        encryptionSecretName,\n+        domainNamespace,\n+        \"weblogicenc\",\n+        \"weblogicenc\"),\n+        String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    int replicaCount = 2;\n+    String managedServerNameBase = \"managed-server\";\n+    String[] domains = {\"domain1\", \"domain2\"};\n+\n+    for (String domainUid : domains) {\n+\n+      // admin/managed server name here should match with model yaml in MII_BASIC_WDT_MODEL_FILE\n+      String adminServerPodName = domainUid + \"-admin-server\";\n+      String managedServerPrefix = domainUid + \"-\" + managedServerNameBase;\n+\n+      // create the domain custom resource object\n+      Domain domain = createDomainResource(domainUid,\n+          domainNamespace,\n+          REPO_SECRET_NAME,\n+          encryptionSecretName,\n+          replicaCount,\n+          IMAGE);\n+\n+      // create model in image domain\n+      logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+          domainUid, domainNamespace, MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG);\n+      createDomainAndVerify(domain, domainNamespace);\n+\n+      logger.info(\"Check admin service {0} is created in namespace {1}\",\n+          adminServerPodName, domainNamespace);\n+      checkServiceExists(adminServerPodName, domainNamespace);\n+\n+      // check admin server pod is ready\n+      logger.info(\"Waiting for admin server pod {0} to be ready in namespace {1}\",\n+          adminServerPodName, domainNamespace);\n+      checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+      // check managed server services created\n+      for (int i = 1; i <= replicaCount; i++) {\n+        logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+            managedServerPrefix + i, domainNamespace);\n+        checkServiceExists(managedServerPrefix + i, domainNamespace);\n+      }\n+\n+      // check managed server pods are ready\n+      for (int i = 1; i <= replicaCount; i++) {\n+        logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+            managedServerPrefix + i, domainNamespace);\n+        checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+      }\n+\n+      //create ingress resource - rules for loadbalancing\n+      Map<String, Integer> clusterNameMsPortMap = new HashMap<>();\n+      clusterNameMsPortMap.put(\"cluster-1\", 8001);\n+      logger.info(\"Creating ingress resource for domain {0} in namespace {1}\", domainUid, domainNamespace);\n+      createTraefikIngressForDomainAndVerify(domainUid, domainNamespace, 0, clusterNameMsPortMap, true);\n+\n+      logger.info(\"Getting node port for admin server default channel\");\n+      int serviceNodePort = assertDoesNotThrow(()\n+          -> getServiceNodePort(domainNamespace, adminServerPodName + \"-external\", \"default\"),\n+          \"Getting admin server node port failed\");\n+\n+      logger.info(\"Deploying application {0} in domain {1} cluster target cluster-1\",\n+          clusterViewAppPath, domainUid);\n+      ExecResult result = DeployUtil.deployUsingRest(K8S_NODEPORT_HOST,\n+          String.valueOf(serviceNodePort),\n+          ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT,\n+          \"cluster-1\", clusterViewAppPath, null, domainUid + \"clusterview\");\n+      assertNotNull(result, \"Application deployment failed\");\n+      logger.info(\"Application deployment returned {0}\", result.toString());\n+      assertEquals(\"202\", result.stdout(), \"Deployment didn't return HTTP status code 202\");\n+\n+      bindDomainName(domainUid);\n+    }\n+\n+    // verify load balancing works when 2 domains are running in the same namespace\n+    for (String domainUid : domains) {\n+      verifyLoadbalancing(domainUid, replicaCount, managedServerNameBase);\n+    }\n+  }\n+\n+  private void verifyLoadbalancing(String domainUid, int replicaCount, String managedServerNameBase) {\n+    //access application in managed servers through traefik load balancer\n+    logger.info(\"Accessing the clusterview app through traefik load balancer\");\n+    String curlRequest = String.format(\"curl --silent --show-error --noproxy '*' \"\n+        + \"-H 'host: %s' http://%s:%s/clusterview/ClusterViewServlet\",\n+        domainUid + \".\" + domainNamespace + \".\" + \"cluster-1\" + \".test\", K8S_NODEPORT_HOST, nodeportshttp);\n+    List<String> managedServers = new ArrayList<>();\n+    for (int i = 1; i <= replicaCount; i++) {\n+      managedServers.add(managedServerNameBase + i);\n+    }\n+    assertThat(verifyClusterMemberCommunication(curlRequest, managedServers, 20))\n+        .as(\"Verify applications from cluster can be acessed through the traefik loadbalancer.\")\n+        .withFailMessage(\"application not accessible through traefik loadbalancer.\")\n+        .isTrue();\n+\n+    boolean hostRouting = false;\n+    //access application in managed servers through traefik load balancer and bind domain in the JNDI tree\n+    logger.info(\"Accessing the clusterview app through traefik load balancer\");\n+    String curlCmd = String.format(\"curl --silent --show-error --noproxy '*' \"\n+        + \"-H 'host: %s' http://%s:%s/clusterview/ClusterViewServlet?domainTest=\" + domainUid,\n+        domainUid + \".\" + domainNamespace + \".\" + \"cluster-1\" + \".test\", K8S_NODEPORT_HOST, nodeportshttp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0d4245dc4111aede7b871b0a2e9c9534f8e930f"}, "originalPosition": 249}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NTM1NjQ1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#pullrequestreview-454535645", "createdAt": "2020-07-23T22:23:14Z", "commit": {"oid": "a0d4245dc4111aede7b871b0a2e9c9534f8e930f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjoyMzoxNVrOG2dlyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjoyMzoxNVrOG2dlyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2MTA5OQ==", "bodyText": "You can change this to: domainUid + \".\" + domainNamespace + \".cluster-1.test\", K8S_NODEPORT_HOST, nodeportshttp);", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r459761099", "createdAt": "2020-07-23T22:23:15Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTraefikLoadBalancer.java", "diffHunk": "@@ -0,0 +1,353 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.DeployUtil;\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallTraefik;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createTraefikIngressForDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyTraefik;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.verifyClusterMemberCommunication;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to WebLogic domain traffic routed by traefik loadbalancer.\n+ */\n+@DisplayName(\"Test traefik loadbalancing with multiple WebLogic domains\")\n+@IntegrationTest\n+public class ItTraefikLoadBalancer {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static String traefikNamespace = null;\n+\n+  private static int nodeportshttp;\n+\n+  private static HelmParams traefikHelmParams = null;\n+\n+  private static final String IMAGE = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private final String wlSecretName = \"weblogic-credentials\";\n+\n+  private static Path clusterViewAppPath;\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains. Installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Assign a unique namespace for WebLogic domains\");\n+    domainNamespace = namespaces.get(1);\n+\n+    logger.info(\"Assign a unique namespace for traefik\");\n+    traefikNamespace = namespaces.get(2);\n+\n+    // install operator and verify its running in ready state\n+    logger.info(\"Installing operator\");\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // get a free web and websecure ports for traefik\n+    nodeportshttp = getNextFreePort(30380, 30405);\n+    int nodeportshttps = getNextFreePort(31443, 31743);\n+\n+    // install and verify traefik\n+    logger.info(\"Installing traefik controller using helm\");\n+    traefikHelmParams = installAndVerifyTraefik(traefikNamespace, nodeportshttp, nodeportshttps);\n+\n+    // build the clusterview application\n+    logger.info(\"Building clusterview application\");\n+    Path distDir = BuildApplication.buildApplication(Paths.get(APP_DIR, \"clusterview\"), null, null,\n+        \"dist\", domainNamespace);\n+    assertTrue(Paths.get(distDir.toString(),\n+        \"clusterview.war\").toFile().exists(),\n+        \"Application archive is not available\");\n+    clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n+\n+  }\n+\n+  @Test\n+  @DisplayName(\"Create model in image domains domain1 and domain2 and Ingress resources\")\n+  public void testTraefikLoadbalancer() {\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+        String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create WebLogic domain credentials secret\n+    logger.info(\"Creating WebLogic credentials secrets for domain\");\n+    createSecretWithUsernamePassword(wlSecretName, domainNamespace,\n+        ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n+\n+    // create model encryption secret\n+    logger.info(\"Creating encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        encryptionSecretName,\n+        domainNamespace,\n+        \"weblogicenc\",\n+        \"weblogicenc\"),\n+        String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    int replicaCount = 2;\n+    String managedServerNameBase = \"managed-server\";\n+    String[] domains = {\"domain1\", \"domain2\"};\n+\n+    for (String domainUid : domains) {\n+\n+      // admin/managed server name here should match with model yaml in MII_BASIC_WDT_MODEL_FILE\n+      String adminServerPodName = domainUid + \"-admin-server\";\n+      String managedServerPrefix = domainUid + \"-\" + managedServerNameBase;\n+\n+      // create the domain custom resource object\n+      Domain domain = createDomainResource(domainUid,\n+          domainNamespace,\n+          REPO_SECRET_NAME,\n+          encryptionSecretName,\n+          replicaCount,\n+          IMAGE);\n+\n+      // create model in image domain\n+      logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+          domainUid, domainNamespace, MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG);\n+      createDomainAndVerify(domain, domainNamespace);\n+\n+      logger.info(\"Check admin service {0} is created in namespace {1}\",\n+          adminServerPodName, domainNamespace);\n+      checkServiceExists(adminServerPodName, domainNamespace);\n+\n+      // check admin server pod is ready\n+      logger.info(\"Waiting for admin server pod {0} to be ready in namespace {1}\",\n+          adminServerPodName, domainNamespace);\n+      checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+      // check managed server services created\n+      for (int i = 1; i <= replicaCount; i++) {\n+        logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+            managedServerPrefix + i, domainNamespace);\n+        checkServiceExists(managedServerPrefix + i, domainNamespace);\n+      }\n+\n+      // check managed server pods are ready\n+      for (int i = 1; i <= replicaCount; i++) {\n+        logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+            managedServerPrefix + i, domainNamespace);\n+        checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+      }\n+\n+      //create ingress resource - rules for loadbalancing\n+      Map<String, Integer> clusterNameMsPortMap = new HashMap<>();\n+      clusterNameMsPortMap.put(\"cluster-1\", 8001);\n+      logger.info(\"Creating ingress resource for domain {0} in namespace {1}\", domainUid, domainNamespace);\n+      createTraefikIngressForDomainAndVerify(domainUid, domainNamespace, 0, clusterNameMsPortMap, true);\n+\n+      logger.info(\"Getting node port for admin server default channel\");\n+      int serviceNodePort = assertDoesNotThrow(()\n+          -> getServiceNodePort(domainNamespace, adminServerPodName + \"-external\", \"default\"),\n+          \"Getting admin server node port failed\");\n+\n+      logger.info(\"Deploying application {0} in domain {1} cluster target cluster-1\",\n+          clusterViewAppPath, domainUid);\n+      ExecResult result = DeployUtil.deployUsingRest(K8S_NODEPORT_HOST,\n+          String.valueOf(serviceNodePort),\n+          ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT,\n+          \"cluster-1\", clusterViewAppPath, null, domainUid + \"clusterview\");\n+      assertNotNull(result, \"Application deployment failed\");\n+      logger.info(\"Application deployment returned {0}\", result.toString());\n+      assertEquals(\"202\", result.stdout(), \"Deployment didn't return HTTP status code 202\");\n+\n+      bindDomainName(domainUid);\n+    }\n+\n+    // verify load balancing works when 2 domains are running in the same namespace\n+    for (String domainUid : domains) {\n+      verifyLoadbalancing(domainUid, replicaCount, managedServerNameBase);\n+    }\n+  }\n+\n+  private void verifyLoadbalancing(String domainUid, int replicaCount, String managedServerNameBase) {\n+    //access application in managed servers through traefik load balancer\n+    logger.info(\"Accessing the clusterview app through traefik load balancer\");\n+    String curlRequest = String.format(\"curl --silent --show-error --noproxy '*' \"\n+        + \"-H 'host: %s' http://%s:%s/clusterview/ClusterViewServlet\",\n+        domainUid + \".\" + domainNamespace + \".\" + \"cluster-1\" + \".test\", K8S_NODEPORT_HOST, nodeportshttp);\n+    List<String> managedServers = new ArrayList<>();\n+    for (int i = 1; i <= replicaCount; i++) {\n+      managedServers.add(managedServerNameBase + i);\n+    }\n+    assertThat(verifyClusterMemberCommunication(curlRequest, managedServers, 20))\n+        .as(\"Verify applications from cluster can be acessed through the traefik loadbalancer.\")\n+        .withFailMessage(\"application not accessible through traefik loadbalancer.\")\n+        .isTrue();\n+\n+    boolean hostRouting = false;\n+    //access application in managed servers through traefik load balancer and bind domain in the JNDI tree\n+    logger.info(\"Accessing the clusterview app through traefik load balancer\");\n+    String curlCmd = String.format(\"curl --silent --show-error --noproxy '*' \"\n+        + \"-H 'host: %s' http://%s:%s/clusterview/ClusterViewServlet?domainTest=\" + domainUid,\n+        domainUid + \".\" + domainNamespace + \".\" + \"cluster-1\" + \".test\", K8S_NODEPORT_HOST, nodeportshttp);\n+\n+    // call the webapp and verify the bound domain name to determine\n+    // the requests are sent to the correct cluster members.\n+    for (int i = 0; i < 10; i++) {\n+      ExecResult result;\n+      try {\n+        result = ExecCommand.exec(curlCmd, true);\n+        String response = result.stdout().trim();\n+        if (response.contains(domainUid)) {\n+          hostRouting = true;\n+        }\n+        logger.info(\"Response for iteration {0}: exitValue {1}, stdout {2}, stderr {3}\",\n+            i, result.exitValue(), response, result.stderr());\n+      } catch (IOException | InterruptedException ex) {\n+        //\n+      }\n+    }\n+    assertTrue(hostRouting, \"Host routing is not working\");\n+\n+  }\n+\n+  private void bindDomainName(String domainUid) {\n+    //access application in managed servers through traefik load balancer and bind domain in the JNDI tree\n+    logger.info(\"Accessing the clusterview app through traefik load balancer\");\n+    String curlCmd = String.format(\"curl --silent --show-error --noproxy '*' \"\n+        + \"-H 'host: %s' http://%s:%s/clusterview/ClusterViewServlet?bindDomain=\" + domainUid,\n+        domainUid + \".\" + domainNamespace + \".\" + \"cluster-1\" + \".test\", K8S_NODEPORT_HOST, nodeportshttp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0d4245dc4111aede7b871b0a2e9c9534f8e930f"}, "originalPosition": 276}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e9ebb47c739eded1414c29b6aa682fe85ec9e40", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0e9ebb47c739eded1414c29b6aa682fe85ec9e40", "committedDate": "2020-07-23T22:30:57Z", "message": "add more wait time"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NTM5MDQ5", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#pullrequestreview-454539049", "createdAt": "2020-07-23T22:31:26Z", "commit": {"oid": "a0d4245dc4111aede7b871b0a2e9c9534f8e930f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjozMToyNlrOG2dxsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjozMToyNlrOG2dxsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2NDE0Ng==", "bodyText": "use 'Traefik' since it is a product name", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r459764146", "createdAt": "2020-07-23T22:31:26Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -338,6 +340,18 @@ public static boolean installVoyager(VoyagerParams params) {\n     return Voyager.install(params);\n   }\n \n+  /**\n+   * Install traefik ingress controller.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0d4245dc4111aede7b871b0a2e9c9534f8e930f"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NTQwODM5", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#pullrequestreview-454540839", "createdAt": "2020-07-23T22:35:42Z", "commit": {"oid": "a0d4245dc4111aede7b871b0a2e9c9534f8e930f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjozNTo0MlrOG2d34g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjozNTo0MlrOG2d34g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2NTczMA==", "bodyText": "use 'Traefik' here", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r459765730", "createdAt": "2020-07-23T22:35:42Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Kubernetes.java", "diffHunk": "@@ -338,6 +339,29 @@ public static boolean isNginxPodReady(String namespace) throws ApiException {\n     return isPodReady(namespace, labelSelector, \"nginx-ingress-controller\");\n   }\n \n+  /**\n+   * Checks if traefik pod is running in the specified namespace.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0d4245dc4111aede7b871b0a2e9c9534f8e930f"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NTQxMDkx", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#pullrequestreview-454541091", "createdAt": "2020-07-23T22:36:17Z", "commit": {"oid": "a0d4245dc4111aede7b871b0a2e9c9534f8e930f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjozNjoxN1rOG2d4qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjozNjoxN1rOG2d4qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2NTkzMA==", "bodyText": "change all 'traefik' in the comments to 'Traefik'", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r459765930", "createdAt": "2020-07-23T22:36:17Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Kubernetes.java", "diffHunk": "@@ -338,6 +339,29 @@ public static boolean isNginxPodReady(String namespace) throws ApiException {\n     return isPodReady(namespace, labelSelector, \"nginx-ingress-controller\");\n   }\n \n+  /**\n+   * Checks if traefik pod is running in the specified namespace.\n+   *\n+   * @param namespace in which to check for the running traefik pod\n+   * @return true if the pod is running, otherwise false\n+   * @throws ApiException if Kubernetes client API call fails\n+   */\n+  public static boolean isTraefikPodRunning(String namespace) throws ApiException {\n+    return isPodRunning(namespace, null, TRAEFIK_RELEASE_NAME + \"-\" + namespace.substring(3));\n+  }\n+\n+  /**\n+   * Check whether the traefik pod is ready in the specified namespace.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0d4245dc4111aede7b871b0a2e9c9534f8e930f"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NTQyMjIy", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#pullrequestreview-454542222", "createdAt": "2020-07-23T22:39:20Z", "commit": {"oid": "a0d4245dc4111aede7b871b0a2e9c9534f8e930f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjozOToyMFrOG2d8jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjozOToyMFrOG2d8jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2NjkyNQ==", "bodyText": "Traefik chart values to override", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r459766925", "createdAt": "2020-07-23T22:39:20Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "diffHunk": "@@ -448,6 +455,63 @@ public static HelmParams installAndVerifyVoyager(String voyagerNamespace,\n     return voyagerHelmParams;\n   }\n \n+  /**\n+   * Install traefik and wait for up to five minutes for the traefik pod to be ready.\n+   *\n+   * @param traefikNamespace the namespace in which the traefik ingress controller is installed\n+   * @param nodeportshttp the web nodeport of traefik\n+   * @param nodeportshttps the websecure nodeport of traefik\n+   * @return the traefik Helm installation parameters\n+   */\n+  public static HelmParams installAndVerifyTraefik(String traefikNamespace,\n+      int nodeportshttp,\n+      int nodeportshttps) {\n+    LoggingFacade logger = getLogger();\n+    // Helm install parameters\n+    HelmParams traefikHelmParams = new HelmParams()\n+        .releaseName(TRAEFIK_RELEASE_NAME + \"-\" + traefikNamespace.substring(3))\n+        .namespace(traefikNamespace)\n+        .repoUrl(TRAEFIK_REPO_URL)\n+        .repoName(TRAEFIK_REPO_NAME)\n+        .chartName(TRAEFIK_CHART_NAME);\n+\n+    // NGINX chart values to override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0d4245dc4111aede7b871b0a2e9c9534f8e930f"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NTQyOTg3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#pullrequestreview-454542987", "createdAt": "2020-07-23T22:41:19Z", "commit": {"oid": "a0d4245dc4111aede7b871b0a2e9c9534f8e930f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjo0MToxOVrOG2d_WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMjo0MToxOVrOG2d_WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc2NzY0MA==", "bodyText": "what if only nodeportshttp or nodeportshttps is not 0?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r459767640", "createdAt": "2020-07-23T22:41:19Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "diffHunk": "@@ -448,6 +455,63 @@ public static HelmParams installAndVerifyVoyager(String voyagerNamespace,\n     return voyagerHelmParams;\n   }\n \n+  /**\n+   * Install traefik and wait for up to five minutes for the traefik pod to be ready.\n+   *\n+   * @param traefikNamespace the namespace in which the traefik ingress controller is installed\n+   * @param nodeportshttp the web nodeport of traefik\n+   * @param nodeportshttps the websecure nodeport of traefik\n+   * @return the traefik Helm installation parameters\n+   */\n+  public static HelmParams installAndVerifyTraefik(String traefikNamespace,\n+      int nodeportshttp,\n+      int nodeportshttps) {\n+    LoggingFacade logger = getLogger();\n+    // Helm install parameters\n+    HelmParams traefikHelmParams = new HelmParams()\n+        .releaseName(TRAEFIK_RELEASE_NAME + \"-\" + traefikNamespace.substring(3))\n+        .namespace(traefikNamespace)\n+        .repoUrl(TRAEFIK_REPO_URL)\n+        .repoName(TRAEFIK_REPO_NAME)\n+        .chartName(TRAEFIK_CHART_NAME);\n+\n+    // NGINX chart values to override\n+    TraefikParams traefikParams = new TraefikParams()\n+        .helmParams(traefikHelmParams);\n+\n+    if (nodeportshttp != 0 && nodeportshttps != 0) {\n+      traefikParams\n+          .nodePortsHttp(nodeportshttp)\n+          .nodePortsHttps(nodeportshttps);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0d4245dc4111aede7b871b0a2e9c9534f8e930f"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "097465f569f721633cecae63b848b453d6a963ba", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/097465f569f721633cecae63b848b453d6a963ba", "committedDate": "2020-07-24T01:26:48Z", "message": "Adding TLS test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0dda55420afd49660282b8c24ff505c2e89f1931", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0dda55420afd49660282b8c24ff505c2e89f1931", "committedDate": "2020-07-24T04:06:14Z", "message": "Fix CN"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9eb5c6d0a97bc06bfdf8e79708103a8c745b5ed4", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/9eb5c6d0a97bc06bfdf8e79708103a8c745b5ed4", "committedDate": "2020-07-24T16:35:45Z", "message": "Add https usecase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1fa721f1321c4b0656632497e19f987333d674a", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a1fa721f1321c4b0656632497e19f987333d674a", "committedDate": "2020-07-24T17:12:02Z", "message": "Encode it as normal String"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a71b6f301f5bd7a3f5fe67011a4e7bd1ef69cbc", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5a71b6f301f5bd7a3f5fe67011a4e7bd1ef69cbc", "committedDate": "2020-07-24T17:23:10Z", "message": "Fix file names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "760edcad6ee0afee1ff520cc5276e790183412b8", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/760edcad6ee0afee1ff520cc5276e790183412b8", "committedDate": "2020-07-24T17:25:37Z", "message": "include -k option to ignore host name verification"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82300487fcb8e22c5d3f6459c912bba09bcfbf30", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/82300487fcb8e22c5d3f6459c912bba09bcfbf30", "committedDate": "2020-07-24T17:58:04Z", "message": "Add cert and key as String"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fbe3e814bf51e1f026116cc746bcbe16011e327", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3fbe3e814bf51e1f026116cc746bcbe16011e327", "committedDate": "2020-07-24T18:51:42Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8723f0489edf68f842e5f782ca31fa517947413", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c8723f0489edf68f842e5f782ca31fa517947413", "committedDate": "2020-07-24T20:02:13Z", "message": "use same namespace for traefik"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "086720c99aa364c4d465ec538bb7babe9b3a2ff5", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/086720c99aa364c4d465ec538bb7babe9b3a2ff5", "committedDate": "2020-07-25T03:46:53Z", "message": "Added more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6a03cc26767605567f6e968001278dbb353c8cd", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b6a03cc26767605567f6e968001278dbb353c8cd", "committedDate": "2020-07-25T03:47:14Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into traefik-lb-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fa00fb9298e58d2c20b07e2243f26f8f668b9a3", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6fa00fb9298e58d2c20b07e2243f26f8f668b9a3", "committedDate": "2020-07-25T05:32:59Z", "message": "Fix the ingress rules creation  command"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe7f4c5832216fb5bf00347543951ef5c82acd19", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/fe7f4c5832216fb5bf00347543951ef5c82acd19", "committedDate": "2020-07-25T23:14:57Z", "message": "Fix getNodePort"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3e95fadc162d2d4d9cc68725b40ce276336422d", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d3e95fadc162d2d4d9cc68725b40ce276336422d", "committedDate": "2020-07-26T00:09:30Z", "message": "Access console in a loop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e3c8259e7ce105c8a8608c1d056743c7be7a857", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5e3c8259e7ce105c8a8608c1d056743c7be7a857", "committedDate": "2020-07-27T17:15:08Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into traefik-lb-tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MTM0Mzcx", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#pullrequestreview-457134371", "createdAt": "2020-07-29T01:28:13Z", "commit": {"oid": "d3e95fadc162d2d4d9cc68725b40ce276336422d"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMToyODoxM1rOG4lTcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMToyODoxM1rOG4lTcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk4NDYyNg==", "bodyText": "remove commented out line", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#discussion_r461984626", "createdAt": "2020-07-29T01:28:13Z", "author": {"login": "marinakog"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTraefikLoadBalancer.java", "diffHunk": "@@ -0,0 +1,509 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.ActionConstants;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.BuildApplication;\n+import oracle.weblogic.kubernetes.utils.DeployUtil;\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallTraefik;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithTLSCertKey;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyTraefik;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.verifyClusterMemberCommunication;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to WebLogic domain traffic routed by Traefik loadbalancer.\n+ */\n+@DisplayName(\"Test Traefik loadbalancing with multiple WebLogic domains\")\n+@IntegrationTest\n+public class ItTraefikLoadBalancer {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static String traefikNamespace = null;\n+\n+  private static HelmParams traefikHelmParams = null;\n+\n+  private static final String IMAGE = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+  private static final String WL_SECRET_NAME = \"weblogic-credentials\";\n+  private static Path tlsCertFile;\n+  private static Path tlsKeyFile;\n+\n+  private static Path clusterViewAppPath;\n+  private static LoggingFacade logger = null;\n+\n+  private static final String[] domains = {\"domain1\", \"domain2\"};\n+  private static final int replicaCount = 2;\n+  private static final String managedServerNameBase = \"managed-server\";\n+\n+  /**\n+   * 1. Assigns unique namespaces for operator, Traefik loadbalancer and domains.\n+   * 2. Installs operator.\n+   * 3. Creates 2 MII domains.\n+   * 4. Creates Ingress resource for each domain with Host based routing rules.\n+   * 5. Deploys clusterview sample application in cluster target in each domain.\n+   * 6. Creates a TLS Kubernetes for secure access to the clusters.\n+   * 7. Create Ingress rules for host based routing to various targets.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Assign a unique namespace for WebLogic domains\");\n+    domainNamespace = namespaces.get(1);\n+\n+    logger.info(\"Assign a unique namespace for Traefik\");\n+    traefikNamespace = namespaces.get(2);\n+\n+    // install operator and verify its running in ready state\n+    logger.info(\"Installing operator\");\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // install and verify Traefik\n+    logger.info(\"Installing Traefik controller using helm\");\n+    traefikHelmParams = installAndVerifyTraefik(traefikNamespace, 0, 0);\n+    //traefikHelmParams = installAndVerifyTraefik(domainNamespace, 0, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3e95fadc162d2d4d9cc68725b40ce276336422d"}, "originalPosition": 125}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NTc0MzA4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1831#pullrequestreview-457574308", "createdAt": "2020-07-29T14:23:56Z", "commit": {"oid": "d3e95fadc162d2d4d9cc68725b40ce276336422d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d25985e0814993836f32c274e05eb2987935ae8d", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d25985e0814993836f32c274e05eb2987935ae8d", "committedDate": "2020-07-29T20:03:40Z", "message": "Adding voyager tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14e2fd1f55c4884e2fef103c488cff2796e933f0", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/14e2fd1f55c4884e2fef103c488cff2796e933f0", "committedDate": "2020-07-29T20:05:13Z", "message": "Renamed testclass to be generic for all loadbalancers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e290856fb59d4251fc00ce8c57492efedfc22afd", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e290856fb59d4251fc00ce8c57492efedfc22afd", "committedDate": "2020-07-29T21:44:39Z", "message": "order the tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a61c91319d2c7a219aa72b201a755dd655e30e68", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a61c91319d2c7a219aa72b201a755dd655e30e68", "committedDate": "2020-07-29T22:19:40Z", "message": "Add break statement once reponse is found"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fd3b7dbb2d6558c734584856376558fa49a32b5", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/9fd3b7dbb2d6558c734584856376558fa49a32b5", "committedDate": "2020-07-29T23:05:13Z", "message": "bind domain names"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4323, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}