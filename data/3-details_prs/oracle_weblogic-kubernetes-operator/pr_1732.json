{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzODI2NTg5", "number": 1732, "title": "Added Voyager to Junit5 framework ", "bodyText": "Created Voyager LBer controller in the Junit5 framework and added a sample test suite", "createdAt": "2020-06-12T18:28:07Z", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1732", "merged": true, "mergeCommit": {"oid": "e9046638731569f93d1244e585c6a39ee7293b16"}, "closed": true, "closedAt": "2020-06-23T14:23:35Z", "author": {"login": "hzhao-github"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcqnHMBgH2gAyNDMzODI2NTg5OjZhY2U5YjYzMjhlMDNjNWJhMzAyN2I0YTNhZjU0YTIzMjcyY2YyMDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABct0mwOAFqTQzNTE0Nzk0Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6ace9b6328e03c5ba3027b4a3af54a23272cf209", "author": {"user": {"login": "hzhao-github", "name": "Huiling Zhao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6ace9b6328e03c5ba3027b4a3af54a23272cf209", "committedDate": "2020-06-12T18:25:03Z", "message": "Added Voyager to Junit5 framework jenkins-ignore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "694141bc639afe07bc34e97557fed6b4f172f2b0", "author": {"user": {"login": "hzhao-github", "name": "Huiling Zhao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/694141bc639afe07bc34e97557fed6b4f172f2b0", "committedDate": "2020-06-15T18:08:11Z", "message": "Changed DisplayName jenkins-ignore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46c29a3bad36e96a647b8010d09b996f17597c2d", "author": {"user": {"login": "hzhao-github", "name": "Huiling Zhao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/46c29a3bad36e96a647b8010d09b996f17597c2d", "committedDate": "2020-06-16T18:59:41Z", "message": "Synced up with develop branch jenkins-ignore"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNjU0Mjg1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1732#pullrequestreview-432654285", "createdAt": "2020-06-17T18:13:16Z", "commit": {"oid": "46c29a3bad36e96a647b8010d09b996f17597c2d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODoxMzoxNlrOGlRccw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODo0Mjo0OVrOGlScww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTczNjMwNw==", "bodyText": "remove commented code", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1732#discussion_r441736307", "createdAt": "2020-06-17T18:13:16Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItVoyagerSample.java", "diffHunk": "@@ -0,0 +1,298 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+//import com.google.common.primitives.Ints;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46c29a3bad36e96a647b8010d09b996f17597c2d"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0MDc3NQ==", "bodyText": "check Xian's PR #1740 which checks for ingress ready", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1732#discussion_r441740775", "createdAt": "2020-06-17T18:21:13Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItVoyagerSample.java", "diffHunk": "@@ -0,0 +1,298 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+//import com.google.common.primitives.Ints;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.annotations.tags.MustNotRunInParallel;\n+import oracle.weblogic.kubernetes.annotations.tags.Slow;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.VOYAGER_CHART_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallVoyager;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyVoyager;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installVoyagerIngressAndVerify;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Verify that Voyager and Voyager ingress are installed successfully.\n+ */\n+@DisplayName(\"Test Voyager is installed and the Voyager ingress is created successfully\")\n+@IntegrationTest\n+class ItVoyagerSample implements LoggedTest {\n+\n+  // constants for operator and WebLogic domain\n+  private static String domainUid = \"voyager-domain-1\";\n+  private static String clusterName = \"cluster-1\";\n+  private static String adminServerPodName = domainUid + \"-admin-server\";\n+  private static String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static int managedServerPort = 8001;\n+  private static int replicaCount = 2;\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+\n+  private static HelmParams voyagerHelmParams = null;\n+\n+  /**\n+   * Install operator, create a one cluster domain and install Voyager.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void init(@Namespaces(3) List<String> namespaces) {\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+      .and().with().pollInterval(10, SECONDS)\n+      .atMost(5, MINUTES).await();\n+\n+    // get a unique Voyager namespace\n+    logger.info(\"Get a unique namespace for Voyager\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    String voyagerNamespace = namespaces.get(0);\n+\n+    // get a unique operator namespace\n+    logger.info(\"Get a unique namespace for operator\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    opNamespace = namespaces.get(1);\n+\n+    // get a unique domain namespace\n+    logger.info(\"Get a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(2);\n+\n+    final String cloudProvider = \"baremetal\";\n+    final boolean enableValidatingWebhook = false;\n+\n+    // install and verify Voyager\n+    voyagerHelmParams =\n+      installAndVerifyVoyager(voyagerNamespace, cloudProvider, enableValidatingWebhook);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // create and verify one cluster domain\n+    logger.info(\"Create domain and verify that it's running\");\n+    createAndVerifyDomain();\n+  }\n+\n+  @AfterAll\n+  void tearDown() {\n+    // uninstall Voyager\n+    if (voyagerHelmParams != null) {\n+      assertThat(uninstallVoyager(voyagerHelmParams))\n+          .as(\"Test uninstallVoyager returns true\")\n+          .withFailMessage(\"uninstallVoyager() did not return true\")\n+          .isTrue();\n+    }\n+  }\n+\n+  /**\n+   * The test invokes a webapp to verify the Voyager is installed successfully and ready to use.\n+   */\n+  @Test\n+  @DisplayName(\"Create the Voyager ingress and invoke the webapp to verify Voyager load balancer works\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testVoyagerWorks() {\n+    String ingressName = domainUid + \"-ingress-host-routing\";\n+    String ingressServiceName = VOYAGER_CHART_NAME + \"-\" + ingressName;\n+    String channelName = \"tcp-80\";\n+\n+    try {\n+      // create Voyager ingress resource\n+      Map<String, Integer> clusterNameMsPortMap = new HashMap<>();\n+      clusterNameMsPortMap.put(clusterName, managedServerPort);\n+      List<String>  hostNames =\n+          installVoyagerIngressAndVerify(domainUid, domainNamespace, ingressName, clusterNameMsPortMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46c29a3bad36e96a647b8010d09b996f17597c2d"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0MTM4OQ==", "bodyText": "isn't the ingress creation same for Nginx or Voyager?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1732#discussion_r441741389", "createdAt": "2020-06-17T18:22:22Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItVoyagerSample.java", "diffHunk": "@@ -0,0 +1,298 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+//import com.google.common.primitives.Ints;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.annotations.tags.MustNotRunInParallel;\n+import oracle.weblogic.kubernetes.annotations.tags.Slow;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.VOYAGER_CHART_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallVoyager;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyVoyager;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installVoyagerIngressAndVerify;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Verify that Voyager and Voyager ingress are installed successfully.\n+ */\n+@DisplayName(\"Test Voyager is installed and the Voyager ingress is created successfully\")\n+@IntegrationTest\n+class ItVoyagerSample implements LoggedTest {\n+\n+  // constants for operator and WebLogic domain\n+  private static String domainUid = \"voyager-domain-1\";\n+  private static String clusterName = \"cluster-1\";\n+  private static String adminServerPodName = domainUid + \"-admin-server\";\n+  private static String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static int managedServerPort = 8001;\n+  private static int replicaCount = 2;\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+\n+  private static HelmParams voyagerHelmParams = null;\n+\n+  /**\n+   * Install operator, create a one cluster domain and install Voyager.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void init(@Namespaces(3) List<String> namespaces) {\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+      .and().with().pollInterval(10, SECONDS)\n+      .atMost(5, MINUTES).await();\n+\n+    // get a unique Voyager namespace\n+    logger.info(\"Get a unique namespace for Voyager\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    String voyagerNamespace = namespaces.get(0);\n+\n+    // get a unique operator namespace\n+    logger.info(\"Get a unique namespace for operator\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    opNamespace = namespaces.get(1);\n+\n+    // get a unique domain namespace\n+    logger.info(\"Get a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(2);\n+\n+    final String cloudProvider = \"baremetal\";\n+    final boolean enableValidatingWebhook = false;\n+\n+    // install and verify Voyager\n+    voyagerHelmParams =\n+      installAndVerifyVoyager(voyagerNamespace, cloudProvider, enableValidatingWebhook);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // create and verify one cluster domain\n+    logger.info(\"Create domain and verify that it's running\");\n+    createAndVerifyDomain();\n+  }\n+\n+  @AfterAll\n+  void tearDown() {\n+    // uninstall Voyager\n+    if (voyagerHelmParams != null) {\n+      assertThat(uninstallVoyager(voyagerHelmParams))\n+          .as(\"Test uninstallVoyager returns true\")\n+          .withFailMessage(\"uninstallVoyager() did not return true\")\n+          .isTrue();\n+    }\n+  }\n+\n+  /**\n+   * The test invokes a webapp to verify the Voyager is installed successfully and ready to use.\n+   */\n+  @Test\n+  @DisplayName(\"Create the Voyager ingress and invoke the webapp to verify Voyager load balancer works\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testVoyagerWorks() {\n+    String ingressName = domainUid + \"-ingress-host-routing\";\n+    String ingressServiceName = VOYAGER_CHART_NAME + \"-\" + ingressName;\n+    String channelName = \"tcp-80\";\n+\n+    try {\n+      // create Voyager ingress resource\n+      Map<String, Integer> clusterNameMsPortMap = new HashMap<>();\n+      clusterNameMsPortMap.put(clusterName, managedServerPort);\n+      List<String>  hostNames =\n+          installVoyagerIngressAndVerify(domainUid, domainNamespace, ingressName, clusterNameMsPortMap);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0MDc3NQ=="}, "originalCommit": {"oid": "46c29a3bad36e96a647b8010d09b996f17597c2d"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0MTY1Ng==", "bodyText": "This is not needed if you have the check for ingress ready", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1732#discussion_r441741656", "createdAt": "2020-06-17T18:22:53Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItVoyagerSample.java", "diffHunk": "@@ -0,0 +1,298 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+//import com.google.common.primitives.Ints;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.annotations.tags.MustNotRunInParallel;\n+import oracle.weblogic.kubernetes.annotations.tags.Slow;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.VOYAGER_CHART_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallVoyager;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyVoyager;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installVoyagerIngressAndVerify;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Verify that Voyager and Voyager ingress are installed successfully.\n+ */\n+@DisplayName(\"Test Voyager is installed and the Voyager ingress is created successfully\")\n+@IntegrationTest\n+class ItVoyagerSample implements LoggedTest {\n+\n+  // constants for operator and WebLogic domain\n+  private static String domainUid = \"voyager-domain-1\";\n+  private static String clusterName = \"cluster-1\";\n+  private static String adminServerPodName = domainUid + \"-admin-server\";\n+  private static String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static int managedServerPort = 8001;\n+  private static int replicaCount = 2;\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+\n+  private static HelmParams voyagerHelmParams = null;\n+\n+  /**\n+   * Install operator, create a one cluster domain and install Voyager.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void init(@Namespaces(3) List<String> namespaces) {\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+      .and().with().pollInterval(10, SECONDS)\n+      .atMost(5, MINUTES).await();\n+\n+    // get a unique Voyager namespace\n+    logger.info(\"Get a unique namespace for Voyager\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    String voyagerNamespace = namespaces.get(0);\n+\n+    // get a unique operator namespace\n+    logger.info(\"Get a unique namespace for operator\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    opNamespace = namespaces.get(1);\n+\n+    // get a unique domain namespace\n+    logger.info(\"Get a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(2);\n+\n+    final String cloudProvider = \"baremetal\";\n+    final boolean enableValidatingWebhook = false;\n+\n+    // install and verify Voyager\n+    voyagerHelmParams =\n+      installAndVerifyVoyager(voyagerNamespace, cloudProvider, enableValidatingWebhook);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // create and verify one cluster domain\n+    logger.info(\"Create domain and verify that it's running\");\n+    createAndVerifyDomain();\n+  }\n+\n+  @AfterAll\n+  void tearDown() {\n+    // uninstall Voyager\n+    if (voyagerHelmParams != null) {\n+      assertThat(uninstallVoyager(voyagerHelmParams))\n+          .as(\"Test uninstallVoyager returns true\")\n+          .withFailMessage(\"uninstallVoyager() did not return true\")\n+          .isTrue();\n+    }\n+  }\n+\n+  /**\n+   * The test invokes a webapp to verify the Voyager is installed successfully and ready to use.\n+   */\n+  @Test\n+  @DisplayName(\"Create the Voyager ingress and invoke the webapp to verify Voyager load balancer works\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testVoyagerWorks() {\n+    String ingressName = domainUid + \"-ingress-host-routing\";\n+    String ingressServiceName = VOYAGER_CHART_NAME + \"-\" + ingressName;\n+    String channelName = \"tcp-80\";\n+\n+    try {\n+      // create Voyager ingress resource\n+      Map<String, Integer> clusterNameMsPortMap = new HashMap<>();\n+      clusterNameMsPortMap.put(clusterName, managedServerPort);\n+      List<String>  hostNames =\n+          installVoyagerIngressAndVerify(domainUid, domainNamespace, ingressName, clusterNameMsPortMap);\n+\n+      // wait 60 seconds for ingress service to be ready\n+      Thread.sleep(60 * 1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46c29a3bad36e96a647b8010d09b996f17597c2d"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0MzQzNA==", "bodyText": "test should log the exception and fail on exception", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1732#discussion_r441743434", "createdAt": "2020-06-17T18:26:02Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItVoyagerSample.java", "diffHunk": "@@ -0,0 +1,298 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+//import com.google.common.primitives.Ints;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.annotations.tags.MustNotRunInParallel;\n+import oracle.weblogic.kubernetes.annotations.tags.Slow;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.VOYAGER_CHART_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallVoyager;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyVoyager;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installVoyagerIngressAndVerify;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Verify that Voyager and Voyager ingress are installed successfully.\n+ */\n+@DisplayName(\"Test Voyager is installed and the Voyager ingress is created successfully\")\n+@IntegrationTest\n+class ItVoyagerSample implements LoggedTest {\n+\n+  // constants for operator and WebLogic domain\n+  private static String domainUid = \"voyager-domain-1\";\n+  private static String clusterName = \"cluster-1\";\n+  private static String adminServerPodName = domainUid + \"-admin-server\";\n+  private static String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static int managedServerPort = 8001;\n+  private static int replicaCount = 2;\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+\n+  private static HelmParams voyagerHelmParams = null;\n+\n+  /**\n+   * Install operator, create a one cluster domain and install Voyager.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void init(@Namespaces(3) List<String> namespaces) {\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+      .and().with().pollInterval(10, SECONDS)\n+      .atMost(5, MINUTES).await();\n+\n+    // get a unique Voyager namespace\n+    logger.info(\"Get a unique namespace for Voyager\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    String voyagerNamespace = namespaces.get(0);\n+\n+    // get a unique operator namespace\n+    logger.info(\"Get a unique namespace for operator\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    opNamespace = namespaces.get(1);\n+\n+    // get a unique domain namespace\n+    logger.info(\"Get a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(2);\n+\n+    final String cloudProvider = \"baremetal\";\n+    final boolean enableValidatingWebhook = false;\n+\n+    // install and verify Voyager\n+    voyagerHelmParams =\n+      installAndVerifyVoyager(voyagerNamespace, cloudProvider, enableValidatingWebhook);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // create and verify one cluster domain\n+    logger.info(\"Create domain and verify that it's running\");\n+    createAndVerifyDomain();\n+  }\n+\n+  @AfterAll\n+  void tearDown() {\n+    // uninstall Voyager\n+    if (voyagerHelmParams != null) {\n+      assertThat(uninstallVoyager(voyagerHelmParams))\n+          .as(\"Test uninstallVoyager returns true\")\n+          .withFailMessage(\"uninstallVoyager() did not return true\")\n+          .isTrue();\n+    }\n+  }\n+\n+  /**\n+   * The test invokes a webapp to verify the Voyager is installed successfully and ready to use.\n+   */\n+  @Test\n+  @DisplayName(\"Create the Voyager ingress and invoke the webapp to verify Voyager load balancer works\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testVoyagerWorks() {\n+    String ingressName = domainUid + \"-ingress-host-routing\";\n+    String ingressServiceName = VOYAGER_CHART_NAME + \"-\" + ingressName;\n+    String channelName = \"tcp-80\";\n+\n+    try {\n+      // create Voyager ingress resource\n+      Map<String, Integer> clusterNameMsPortMap = new HashMap<>();\n+      clusterNameMsPortMap.put(clusterName, managedServerPort);\n+      List<String>  hostNames =\n+          installVoyagerIngressAndVerify(domainUid, domainNamespace, ingressName, clusterNameMsPortMap);\n+\n+      // wait 60 seconds for ingress service to be ready\n+      Thread.sleep(60 * 1000);\n+      logger.info(\"Getting node port for ingress service: \" + ingressServiceName);\n+\n+      // get ingress service Nodeport\n+      int ingressServiceNodePort = assertDoesNotThrow(()\n+          -> getServiceNodePort(domainNamespace, ingressServiceName, channelName),\n+              \"Getting admin server node port failed\");\n+      logger.info(\"Node port for {0} is: {1} :\", ingressServiceName, ingressServiceNodePort);\n+\n+      // invoke webapp\n+      String curlRequest = String.format(\"curl --silent --show-error --noproxy '*' \"\n+          + \"-H 'host: %s' http://%s:%s/sample-war/index.jsp\",\n+              hostNames.get(0), K8S_NODEPORT_HOST, ingressServiceNodePort);\n+      logger.info(\"Exec curl command :\" + curlRequest);\n+      ExecResult result = ExecCommand.exec(curlRequest, true);\n+      assertNotNull(result, \"curl command returns null\");\n+      logger.info(\"curl command returns: \\n{0}, \\n{1}\", result.stdout(), result.stderr());\n+      assertTrue(result.stdout().contains(\"Hello World\"), \"Failed to invoke the webapp\");\n+    } catch (Exception ex) {\n+      ex.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46c29a3bad36e96a647b8010d09b996f17597c2d"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc1Mjc3MQ==", "bodyText": "I see the same code in Nginx as well for listIngresses() and slightly different for createIngress() methods. Can Ingress be pulled out as another impl class instead of duplicate code?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1732#discussion_r441752771", "createdAt": "2020-06-17T18:42:49Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Voyager.java", "diffHunk": "@@ -0,0 +1,155 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.actions.impl;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.IntOrString;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.ExtensionsV1beta1HTTPIngressPath;\n+import io.kubernetes.client.openapi.models.ExtensionsV1beta1HTTPIngressRuleValue;\n+import io.kubernetes.client.openapi.models.ExtensionsV1beta1Ingress;\n+import io.kubernetes.client.openapi.models.ExtensionsV1beta1IngressBackend;\n+import io.kubernetes.client.openapi.models.ExtensionsV1beta1IngressList;\n+import io.kubernetes.client.openapi.models.ExtensionsV1beta1IngressRule;\n+import io.kubernetes.client.openapi.models.ExtensionsV1beta1IngressSpec;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Helm;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+\n+/**\n+ * Utility class for Voyager ingress controller.\n+ */\n+public class Voyager {\n+  /**\n+   * Install Voyager Helm chart.\n+   *\n+   * @param params the parameters to Helm install command such as release name, namespace, repo url or chart dir,\n+   *               chart name and chart values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean install(VoyagerParams params) {\n+    return Helm.install(params.getHelmParams(), params.getValues());\n+  }\n+\n+  /**\n+   * Upgrade Voyager Helm release.\n+   *\n+   * @param params the parameters to Helm upgrade command such as release name, namespace and chart values to override\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean upgrade(VoyagerParams params) {\n+    return Helm.upgrade(params.getHelmParams(), params.getValues());\n+  }\n+\n+  /**\n+   * Uninstall Voyager Helm release.\n+   *\n+   * @param params the parameters to Helm uninstall command such as release name and namespace\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean uninstall(HelmParams params) {\n+    return Helm.uninstall(params);\n+  }\n+\n+  /**\n+   * Create an ingress for the WebLogic domain with domainUid in the specified domain namespace.\n+   * The ingress host is set to 'domainUid.clusterName.test'.\n+   *\n+   * @param ingressName name of the ingress to be created\n+   * @param domainNamespace the WebLogic domain namespace in which the ingress will be created\n+   * @param domainUid the WebLogic domainUid which is backend to the ingress\n+   * @param clusterNameMsPortMap the map with key as cluster name and value as managed server port of the cluster\n+   * @return list of ingress hosts or null if got ApiException when calling Kubernetes client API to create ingress\n+   */\n+  public static List<String> createIngress(String ingressName,\n+                                           String domainNamespace,\n+                                           String domainUid,\n+                                           Map<String, Integer> clusterNameMsPortMap) {\n+\n+    final String ingressApiVersion = \"extensions/v1beta1\";\n+    final String ingressKind = \"Ingress\";\n+    final String ingressType = \"NodePort\";\n+    final String ingressAffinity = \"cookie\";\n+    final String ingressClass = \"voyager\";\n+\n+    // set the annotations for Voyager\n+    HashMap<String, String> annotation = new HashMap<>();\n+    annotation.put(\"ingress.appscode.com/type\", ingressType);\n+    annotation.put(\"ingress.appscode.com/affinity\", ingressAffinity);\n+    annotation.put(\"kubernetes.io/ingress.class\", ingressClass);\n+\n+    List<String> ingressHostList = new ArrayList<>();\n+    ArrayList<ExtensionsV1beta1IngressRule> ingressRules = new ArrayList<>();\n+    clusterNameMsPortMap.forEach((clusterName, managedServerPort) -> {\n+      // set the http ingress paths\n+      ExtensionsV1beta1HTTPIngressPath httpIngressPath = new ExtensionsV1beta1HTTPIngressPath()\n+          .path(null)\n+          .backend(new ExtensionsV1beta1IngressBackend()\n+              .serviceName(domainUid + \"-cluster-\" + clusterName.toLowerCase().replace(\"_\", \"-\"))\n+              .servicePort(new IntOrString(managedServerPort))\n+          );\n+      ArrayList<ExtensionsV1beta1HTTPIngressPath> httpIngressPaths = new ArrayList<>();\n+      httpIngressPaths.add(httpIngressPath);\n+\n+      // set the ingress rule\n+      String ingressHost = domainUid + \".\" + clusterName + \".org\";\n+      ExtensionsV1beta1IngressRule ingressRule = new ExtensionsV1beta1IngressRule()\n+          .host(ingressHost)\n+          .http(new ExtensionsV1beta1HTTPIngressRuleValue()\n+              .paths(httpIngressPaths));\n+\n+      ingressRules.add(ingressRule);\n+      ingressHostList.add(ingressHost);\n+    });\n+\n+    // set the ingress\n+    ExtensionsV1beta1Ingress ingress = new ExtensionsV1beta1Ingress()\n+        .apiVersion(ingressApiVersion)\n+        .kind(ingressKind)\n+        .metadata(new V1ObjectMeta()\n+            .name(ingressName)\n+            .namespace(domainNamespace)\n+            .annotations(annotation))\n+        .spec(new ExtensionsV1beta1IngressSpec()\n+            .rules(ingressRules));\n+\n+    // create the ingress\n+    try {\n+      Kubernetes.createIngress(domainNamespace, ingress);\n+    } catch (ApiException apex) {\n+      logger.severe(\"got ApiException while calling createIngress: {0}\", apex.getResponseBody());\n+      return null;\n+    }\n+    return ingressHostList;\n+  }\n+\n+  /**\n+   * List all of the ingresses in the specified namespace.\n+   *\n+   * @param namespace the namespace to which the ingresses belong\n+   * @return a list of ingress names in the namespace\n+   * @throws ApiException if Kubernetes client API call fails\n+   */\n+  public static List<String> listIngresses(String namespace) throws ApiException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46c29a3bad36e96a647b8010d09b996f17597c2d"}, "originalPosition": 141}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMDE1MTQ1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1732#pullrequestreview-431015145", "createdAt": "2020-06-15T21:44:25Z", "commit": {"oid": "694141bc639afe07bc34e97557fed6b4f172f2b0"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMTo0NDoyNVrOGkDz5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDozMjoyNVrOGksGJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ2NDM1Ng==", "bodyText": "Here we are not asserting voyager as the load balancer, since we are not making only a single call to webapp thru Ingress Port", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1732#discussion_r440464356", "createdAt": "2020-06-15T21:44:25Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItVoyagerSample.java", "diffHunk": "@@ -0,0 +1,298 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+//import com.google.common.primitives.Ints;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.annotations.tags.MustNotRunInParallel;\n+import oracle.weblogic.kubernetes.annotations.tags.Slow;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.VOYAGER_CHART_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallVoyager;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyVoyager;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installVoyagerIngressAndVerify;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Verify that Voyager and Voyager ingress are installed successfully.\n+ */\n+@DisplayName(\"Test Voyager is installed and the Voyager ingress is created successfully\")\n+@IntegrationTest\n+class ItVoyagerSample implements LoggedTest {\n+\n+  // constants for operator and WebLogic domain\n+  private static String domainUid = \"voyager-domain-1\";\n+  private static String clusterName = \"cluster-1\";\n+  private static String adminServerPodName = domainUid + \"-admin-server\";\n+  private static String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static int managedServerPort = 8001;\n+  private static int replicaCount = 2;\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+\n+  private static HelmParams voyagerHelmParams = null;\n+\n+  /**\n+   * Install operator, create a one cluster domain and install Voyager.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void init(@Namespaces(3) List<String> namespaces) {\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+      .and().with().pollInterval(10, SECONDS)\n+      .atMost(5, MINUTES).await();\n+\n+    // get a unique Voyager namespace\n+    logger.info(\"Get a unique namespace for Voyager\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    String voyagerNamespace = namespaces.get(0);\n+\n+    // get a unique operator namespace\n+    logger.info(\"Get a unique namespace for operator\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    opNamespace = namespaces.get(1);\n+\n+    // get a unique domain namespace\n+    logger.info(\"Get a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(2);\n+\n+    final String cloudProvider = \"baremetal\";\n+    final boolean enableValidatingWebhook = false;\n+\n+    // install and verify Voyager\n+    voyagerHelmParams =\n+      installAndVerifyVoyager(voyagerNamespace, cloudProvider, enableValidatingWebhook);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // create and verify one cluster domain\n+    logger.info(\"Create domain and verify that it's running\");\n+    createAndVerifyDomain();\n+  }\n+\n+  @AfterAll\n+  void tearDown() {\n+    // uninstall Voyager\n+    if (voyagerHelmParams != null) {\n+      assertThat(uninstallVoyager(voyagerHelmParams))\n+          .as(\"Test uninstallVoyager returns true\")\n+          .withFailMessage(\"uninstallVoyager() did not return true\")\n+          .isTrue();\n+    }\n+  }\n+\n+  /**\n+   * The test invokes a webapp to verify the Voyager is installed successfully and ready to use.\n+   */\n+  @Test\n+  @DisplayName(\"Create the Voyager ingress and invoke the webapp to verify Voyager load balancer works\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "694141bc639afe07bc34e97557fed6b4f172f2b0"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ2NTkxNw==", "bodyText": "Add a check to see all the Services and Ingress Objects are ready to use.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1732#discussion_r440465917", "createdAt": "2020-06-15T21:48:01Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Voyager.java", "diffHunk": "@@ -0,0 +1,155 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.actions.impl;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.IntOrString;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.ExtensionsV1beta1HTTPIngressPath;\n+import io.kubernetes.client.openapi.models.ExtensionsV1beta1HTTPIngressRuleValue;\n+import io.kubernetes.client.openapi.models.ExtensionsV1beta1Ingress;\n+import io.kubernetes.client.openapi.models.ExtensionsV1beta1IngressBackend;\n+import io.kubernetes.client.openapi.models.ExtensionsV1beta1IngressList;\n+import io.kubernetes.client.openapi.models.ExtensionsV1beta1IngressRule;\n+import io.kubernetes.client.openapi.models.ExtensionsV1beta1IngressSpec;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Helm;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+\n+/**\n+ * Utility class for Voyager ingress controller.\n+ */\n+public class Voyager {\n+  /**\n+   * Install Voyager Helm chart.\n+   *\n+   * @param params the parameters to Helm install command such as release name, namespace, repo url or chart dir,\n+   *               chart name and chart values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean install(VoyagerParams params) {\n+    return Helm.install(params.getHelmParams(), params.getValues());\n+  }\n+\n+  /**\n+   * Upgrade Voyager Helm release.\n+   *\n+   * @param params the parameters to Helm upgrade command such as release name, namespace and chart values to override\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean upgrade(VoyagerParams params) {\n+    return Helm.upgrade(params.getHelmParams(), params.getValues());\n+  }\n+\n+  /**\n+   * Uninstall Voyager Helm release.\n+   *\n+   * @param params the parameters to Helm uninstall command such as release name and namespace\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean uninstall(HelmParams params) {\n+    return Helm.uninstall(params);\n+  }\n+\n+  /**\n+   * Create an ingress for the WebLogic domain with domainUid in the specified domain namespace.\n+   * The ingress host is set to 'domainUid.clusterName.test'.\n+   *\n+   * @param ingressName name of the ingress to be created\n+   * @param domainNamespace the WebLogic domain namespace in which the ingress will be created\n+   * @param domainUid the WebLogic domainUid which is backend to the ingress\n+   * @param clusterNameMsPortMap the map with key as cluster name and value as managed server port of the cluster\n+   * @return list of ingress hosts or null if got ApiException when calling Kubernetes client API to create ingress\n+   */\n+  public static List<String> createIngress(String ingressName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "694141bc639afe07bc34e97557fed6b4f172f2b0"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEyNDM4OQ==", "bodyText": "Can u check the readiness of the Ingress Object instated of waiting for 60s", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1732#discussion_r441124389", "createdAt": "2020-06-16T20:32:25Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItVoyagerSample.java", "diffHunk": "@@ -0,0 +1,298 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+//import com.google.common.primitives.Ints;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.annotations.tags.MustNotRunInParallel;\n+import oracle.weblogic.kubernetes.annotations.tags.Slow;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.VOYAGER_CHART_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallVoyager;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyVoyager;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installVoyagerIngressAndVerify;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Verify that Voyager and Voyager ingress are installed successfully.\n+ */\n+@DisplayName(\"Test Voyager is installed and the Voyager ingress is created successfully\")\n+@IntegrationTest\n+class ItVoyagerSample implements LoggedTest {\n+\n+  // constants for operator and WebLogic domain\n+  private static String domainUid = \"voyager-domain-1\";\n+  private static String clusterName = \"cluster-1\";\n+  private static String adminServerPodName = domainUid + \"-admin-server\";\n+  private static String managedServerPrefix = domainUid + \"-managed-server\";\n+  private static int managedServerPort = 8001;\n+  private static int replicaCount = 2;\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+\n+  private static HelmParams voyagerHelmParams = null;\n+\n+  /**\n+   * Install operator, create a one cluster domain and install Voyager.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void init(@Namespaces(3) List<String> namespaces) {\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+      .and().with().pollInterval(10, SECONDS)\n+      .atMost(5, MINUTES).await();\n+\n+    // get a unique Voyager namespace\n+    logger.info(\"Get a unique namespace for Voyager\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    String voyagerNamespace = namespaces.get(0);\n+\n+    // get a unique operator namespace\n+    logger.info(\"Get a unique namespace for operator\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    opNamespace = namespaces.get(1);\n+\n+    // get a unique domain namespace\n+    logger.info(\"Get a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(2);\n+\n+    final String cloudProvider = \"baremetal\";\n+    final boolean enableValidatingWebhook = false;\n+\n+    // install and verify Voyager\n+    voyagerHelmParams =\n+      installAndVerifyVoyager(voyagerNamespace, cloudProvider, enableValidatingWebhook);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // create and verify one cluster domain\n+    logger.info(\"Create domain and verify that it's running\");\n+    createAndVerifyDomain();\n+  }\n+\n+  @AfterAll\n+  void tearDown() {\n+    // uninstall Voyager\n+    if (voyagerHelmParams != null) {\n+      assertThat(uninstallVoyager(voyagerHelmParams))\n+          .as(\"Test uninstallVoyager returns true\")\n+          .withFailMessage(\"uninstallVoyager() did not return true\")\n+          .isTrue();\n+    }\n+  }\n+\n+  /**\n+   * The test invokes a webapp to verify the Voyager is installed successfully and ready to use.\n+   */\n+  @Test\n+  @DisplayName(\"Create the Voyager ingress and invoke the webapp to verify Voyager load balancer works\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testVoyagerWorks() {\n+    String ingressName = domainUid + \"-ingress-host-routing\";\n+    String ingressServiceName = VOYAGER_CHART_NAME + \"-\" + ingressName;\n+    String channelName = \"tcp-80\";\n+\n+    try {\n+      // create Voyager ingress resource\n+      Map<String, Integer> clusterNameMsPortMap = new HashMap<>();\n+      clusterNameMsPortMap.put(clusterName, managedServerPort);\n+      List<String>  hostNames =\n+          installVoyagerIngressAndVerify(domainUid, domainNamespace, ingressName, clusterNameMsPortMap);\n+\n+      // wait 60 seconds for ingress service to be ready", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46c29a3bad36e96a647b8010d09b996f17597c2d"}, "originalPosition": 157}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c0827efa43e9b32f75d54780f145b42fc895c23", "author": {"user": {"login": "hzhao-github", "name": "Huiling Zhao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/2c0827efa43e9b32f75d54780f145b42fc895c23", "committedDate": "2020-06-18T02:13:00Z", "message": "Changes b ased on comments jenkins-ignore"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzMzM1ODAy", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1732#pullrequestreview-433335802", "createdAt": "2020-06-18T14:23:36Z", "commit": {"oid": "2c0827efa43e9b32f75d54780f145b42fc895c23"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDoyMzozNlrOGlxwFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDoyODoyN1rOGlx-gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI2NTYyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Utility class for Voyager ingress controller.\n          \n          \n            \n             * Utility class for Ingress Resource.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1732#discussion_r442265621", "createdAt": "2020-06-18T14:23:36Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Ingress.java", "diffHunk": "@@ -0,0 +1,114 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.actions.impl;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.IntOrString;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.ExtensionsV1beta1HTTPIngressPath;\n+import io.kubernetes.client.openapi.models.ExtensionsV1beta1HTTPIngressRuleValue;\n+import io.kubernetes.client.openapi.models.ExtensionsV1beta1Ingress;\n+import io.kubernetes.client.openapi.models.ExtensionsV1beta1IngressBackend;\n+import io.kubernetes.client.openapi.models.ExtensionsV1beta1IngressList;\n+import io.kubernetes.client.openapi.models.ExtensionsV1beta1IngressRule;\n+import io.kubernetes.client.openapi.models.ExtensionsV1beta1IngressSpec;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.INGRESS_API_VERSION;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.INGRESS_KIND;\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+\n+/**\n+ * Utility class for Voyager ingress controller.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c0827efa43e9b32f75d54780f145b42fc895c23"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI2NjEyNQ==", "bodyText": "missing javadoc for annotations argument", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1732#discussion_r442266125", "createdAt": "2020-06-18T14:24:16Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Ingress.java", "diffHunk": "@@ -0,0 +1,114 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.actions.impl;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.custom.IntOrString;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.ExtensionsV1beta1HTTPIngressPath;\n+import io.kubernetes.client.openapi.models.ExtensionsV1beta1HTTPIngressRuleValue;\n+import io.kubernetes.client.openapi.models.ExtensionsV1beta1Ingress;\n+import io.kubernetes.client.openapi.models.ExtensionsV1beta1IngressBackend;\n+import io.kubernetes.client.openapi.models.ExtensionsV1beta1IngressList;\n+import io.kubernetes.client.openapi.models.ExtensionsV1beta1IngressRule;\n+import io.kubernetes.client.openapi.models.ExtensionsV1beta1IngressSpec;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.INGRESS_API_VERSION;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.INGRESS_KIND;\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+\n+/**\n+ * Utility class for Voyager ingress controller.\n+ */\n+public class Ingress {\n+\n+  /**\n+   * Create an ingress for the WebLogic domain with domainUid in the specified domain namespace.\n+   * The ingress host is set to 'domainUid.clusterName.test'.\n+   *\n+   * @param ingressName name of the ingress to be created\n+   * @param domainNamespace the WebLogic domain namespace in which the ingress will be created\n+   * @param domainUid the WebLogic domainUid which is backend to the ingress\n+   * @param clusterNameMsPortMap the map with key as cluster name and value as managed server port of the cluster\n+   * @return list of ingress hosts or null if got ApiException when calling Kubernetes client API to create ingress\n+   */\n+  public static List<String> createIngress(String ingressName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c0827efa43e9b32f75d54780f145b42fc895c23"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI2NzA1Ng==", "bodyText": "update javadoc for annotations", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1732#discussion_r442267056", "createdAt": "2020-06-18T14:25:24Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -338,14 +319,21 @@ public static boolean uninstallVoyager(HelmParams params) {\n   }\n \n   /**\n-   * Get a list of ingresses in the specified namespace.\n+   * Create an ingress for the WebLogic domain with domainUid in the specified domain namespace.\n+   * The ingress host is set to 'domainUid.clusterName.test'.\n    *\n-   * @param namespace in which to list all the ingresses\n-   * @return list of ingress names in the specified namespace\n-   * @throws ApiException if Kubernetes client API call fails\n+   * @param ingressName the name of the ingress to be created\n+   * @param domainNamespace the WebLogic domain namespace in which to create the ingress\n+   * @param domainUid WebLogic domainUid which is backend to the ingress\n+   * @param clusterNameMsPortMap the map with key as cluster name and value as managed server port of the cluster\n+   * @return list of ingress hosts or null if got ApiException when calling Kubernetes client API to create ingress\n    */\n-  public static List<String> listIngresses(String namespace) throws ApiException {\n-    return Nginx.listIngresses(namespace);\n+  public static List<String> createIngress(String ingressName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c0827efa43e9b32f75d54780f145b42fc895c23"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI2ODUxMw==", "bodyText": "update javadoc for podName", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1732#discussion_r442268513", "createdAt": "2020-06-18T14:27:21Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/TestAssertions.java", "diffHunk": "@@ -67,8 +67,8 @@\n    * @param namespace in which to check if Voyager pod is running\n    * @return true if Voyager pod is running, false otherwise\n    */\n-  public static Callable<Boolean> isVoyagerRunning(String namespace) {\n-    return Voyager.isRunning(namespace);\n+  public static Callable<Boolean> isVoyagerRunning(String namespace, String podName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c0827efa43e9b32f75d54780f145b42fc895c23"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI2ODY5Ng==", "bodyText": "update javadoc for podName", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1732#discussion_r442268696", "createdAt": "2020-06-18T14:27:34Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/TestAssertions.java", "diffHunk": "@@ -77,30 +77,8 @@\n    * @param namespace in which to check if Voyager pod is in the ready state\n    * @return true if Voyager pod is in the ready state, false otherwise\n    */\n-  public static Callable<Boolean> isVoyagerReady(String namespace) {\n-    return Voyager.isReady(namespace);\n-  }\n-\n-  /**\n-   * Check if Voyager ingress pod is running in a given namespace and pod name.\n-   *\n-   * @param namespace in which to check if Voyager ingress pod is running\n-   * @param podName name of Voyager ingress pod to check\n-   * @return true if Voyager ingress pod is running, false otherwise\n-   */\n-  public static Callable<Boolean> isVoyagerIngressRunning(String namespace, String podName) {\n-    return Voyager.isIngressRunning(namespace, podName);\n-  }\n-\n-  /**\n-   * Check if Voyager ingress pod exists and running in a given namespace and pod name.\n-   *\n-   * @param namespace in which to check if Voyager ingress pod is in the ready state\n-   * @param podName name of Voyager ingress pod to check\n-   * @return true if Voyager ingress pods is in the ready state, false otherwise\n-   */\n-  public static Callable<Boolean> isVoyagerIngressReady(String namespace, String podName) {\n-    return Voyager.isIngressReady(namespace, podName);\n+  public static Callable<Boolean> isVoyagerReady(String namespace, String podName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c0827efa43e9b32f75d54780f145b42fc895c23"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI2OTE4Mg==", "bodyText": "update javadoc for podName", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1732#discussion_r442269182", "createdAt": "2020-06-18T14:28:15Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Voyager.java", "diffHunk": "@@ -16,8 +16,9 @@\n    * @param namespace in which to check if the Voyager pod is running\n    * @return true if the Voyager pod is running, false otherwise\n    */\n-  public static Callable<Boolean> isRunning(String namespace) {\n-    return () -> Kubernetes.isVoyagerPodRunning(namespace);\n+  public static Callable<Boolean> isRunning(String namespace, String podName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c0827efa43e9b32f75d54780f145b42fc895c23"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI2OTMxNQ==", "bodyText": "same as above", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1732#discussion_r442269315", "createdAt": "2020-06-18T14:28:27Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Voyager.java", "diffHunk": "@@ -26,30 +27,8 @@\n    * @param namespace in which to check the Voyager pod is ready\n    * @return true if the Voyager pod is in the ready state, false otherwise\n    */\n-  public static Callable<Boolean> isReady(String namespace) {\n-    return () -> Kubernetes.isVoyagerPodReady(namespace);\n+  public static Callable<Boolean> isReady(String namespace, String podName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c0827efa43e9b32f75d54780f145b42fc895c23"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "261d3a28c0a847aff5826d5edceaeeaf4ce89371", "author": {"user": {"login": "hzhao-github", "name": "Huiling Zhao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/261d3a28c0a847aff5826d5edceaeeaf4ce89371", "committedDate": "2020-06-18T16:38:51Z", "message": "Changes based on comments jenkins-ignore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2939bf369ad6bcabef4ed3167e2f11471d07204a", "author": {"user": {"login": "hzhao-github", "name": "Huiling Zhao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/2939bf369ad6bcabef4ed3167e2f11471d07204a", "committedDate": "2020-06-21T21:32:40Z", "message": "Fixed ingressHost jenkins-ignore"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MDgwNjQ1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1732#pullrequestreview-435080645", "createdAt": "2020-06-22T16:18:38Z", "commit": {"oid": "2939bf369ad6bcabef4ed3167e2f11471d07204a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MTQ3OTQz", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1732#pullrequestreview-435147943", "createdAt": "2020-06-22T17:50:04Z", "commit": {"oid": "2939bf369ad6bcabef4ed3167e2f11471d07204a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4532, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}