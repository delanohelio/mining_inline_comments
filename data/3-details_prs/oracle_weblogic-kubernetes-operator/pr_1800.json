{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4NDc3NzY3", "number": 1800, "title": "Refactor integration tests creating domain in PV to use methods from CommonTestUtils", "bodyText": "The following changes are made to the ItDomainInPV, ItConfigDistributionStrategy and ItIntrospectVersion classes\n\n\nDeleted the local methods for creating PV, PVC, configmap creation and create domain creation.\n\n\nUsing methods from CommonTestUtils\n\n\nChanged the starting node port range for t3channel nodeport. The tests tries to get a unused port and then creates a domain with that t3channel nodeport. But by the time the domain starts up the port is gone and domain startup fails. So using a different starting port ranges in hope of reducing the port clash.\n\n\nclean parallel run results from kind cluster\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/744/\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/742/", "createdAt": "2020-07-13T20:39:32Z", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1800", "merged": true, "mergeCommit": {"oid": "7473182aaefd7330b9eb884f88173942b55ece02"}, "closed": true, "closedAt": "2020-07-17T02:28:52Z", "author": {"login": "sankarpn"}, "timelineItems": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc0k5RcgH2gAyNDQ4NDc3NzY3OmU5ZjczZDFkNDk2NjQzNjljMTJiMGE5MTEyN2ZlNWQxOGE3MWM4ZTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc1lsI3AFqTQ1MDIxMTU4MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e9f73d1d49664369c12b0a91127fe5d18a71c8e8", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e9f73d1d49664369c12b0a91127fe5d18a71c8e8", "committedDate": "2020-07-13T17:29:17Z", "message": "Using different ports instead of starting at default 30000, at times when\nthere is a delay in getting an unused port and using it."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1be2310972347b36f0865df37b489688241ce183", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/1be2310972347b36f0865df37b489688241ce183", "committedDate": "2020-07-13T17:36:09Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65db0926c137908c2133fa82f156411182d0cea1", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/65db0926c137908c2133fa82f156411182d0cea1", "committedDate": "2020-07-13T20:15:54Z", "message": "Refactored the ItDomainInPV, ItIntrospectVersion and\nItConfigDistributionStrategy test classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed89664485c602d6f90292eee5ed0f04ebd5e224", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ed89664485c602d6f90292eee5ed0f04ebd5e224", "committedDate": "2020-07-13T20:22:03Z", "message": "Use static imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac90905bdd7d92601159d500bf743ac09263941d", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ac90905bdd7d92601159d500bf743ac09263941d", "committedDate": "2020-07-13T20:30:44Z", "message": "cleanup comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c0c885b1756e206f7ff3d981fcefd5044d20496", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3c0c885b1756e206f7ff3d981fcefd5044d20496", "committedDate": "2020-07-14T02:05:22Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into refactor-domaininpv-tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MTEyMjg5", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1800#pullrequestreview-448112289", "createdAt": "2020-07-14T13:36:44Z", "commit": {"oid": "ac90905bdd7d92601159d500bf743ac09263941d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzozNjo0NFrOGxT_1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzozODozN1rOGxUEsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM2MTA0Ng==", "bodyText": "fw.close() call is missing in the refactored code. Not sure if it is intentional.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1800#discussion_r454361046", "createdAt": "2020-07-14T13:36:44Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDomainInPV.java", "diffHunk": "@@ -764,236 +730,29 @@ private void createDomainOnPVUsingWdt(Path domainCreationScriptFile, Path modelF\n             .value(\"/shared/domains/\" + domainUid)); // domain location\n \n     logger.info(\"Running a Kubernetes job to create the domain\");\n-    createDomainJob(pvName, pvcName, domainScriptConfigMapName, namespace, jobCreationContainer);\n+    createDomainJob(image, isUseSecret, pvName, pvcName, domainScriptConfigMapName,\n+        namespace, jobCreationContainer);\n \n   }\n \n-  /**\n-   * Create configmap containing domain creation scripts.\n-   *\n-   * @param configMapName name of the configmap to create\n-   * @param files files to add in configmap\n-   * @param namespace name of the namespace in which to create configmap\n-   * @throws IOException when reading the domain script files fail\n-   * @throws ApiException if create configmap fails\n-   */\n-  private void createConfigMapForDomainCreation(String configMapName, List<Path> files, String namespace)\n-      throws ApiException, IOException {\n-    logger.info(\"Creating configmap {0}\", configMapName);\n-\n-    Path domainScriptsDir = Files.createDirectories(\n-        Paths.get(TestConstants.LOGS_DIR, this.getClass().getSimpleName(), namespace));\n-\n-    // add domain creation scripts and properties files to the configmap\n-    Map<String, String> data = new HashMap<>();\n-    for (Path file : files) {\n-      logger.info(\"Adding file {0} in configmap\", file);\n-      data.put(file.getFileName().toString(), Files.readString(file));\n-      logger.info(\"Making a copy of file {0} to {1} for diagnostic purposes\", file,\n-          domainScriptsDir.resolve(file.getFileName()));\n-      Files.copy(file, domainScriptsDir.resolve(file.getFileName()));\n-    }\n-    V1ObjectMeta meta = new V1ObjectMeta()\n-        .name(configMapName)\n-        .namespace(namespace);\n-    V1ConfigMap configMap = new V1ConfigMap()\n-        .data(data)\n-        .metadata(meta);\n-\n-    boolean cmCreated = assertDoesNotThrow(() -> createConfigMap(configMap),\n-        String.format(\"Failed to create configmap %s with files %s\", configMapName, files));\n-    assertTrue(cmCreated, String.format(\"Failed while creating ConfigMap %s\", configMapName));\n-  }\n-\n-  /**\n-   * Create a job to create a domain in persistent volume.\n-   *\n-   * @param pvName name of the persistent volume to create domain in\n-   * @param pvcName name of the persistent volume claim\n-   * @param domainScriptCM configmap holding domain creation script files\n-   * @param namespace name of the domain namespace in which the job is created\n-   * @param jobContainer V1Container with job commands to create domain\n-   */\n-  private void createDomainJob(String pvName,\n-                               String pvcName, String domainScriptCM, String namespace, V1Container jobContainer) {\n-    logger.info(\"Running Kubernetes job to create domain\");\n-\n-    V1Job jobBody = new V1Job()\n-        .metadata(\n-            new V1ObjectMeta()\n-                .name(\"create-domain-onpv-job-\" + pvName) // name of the create domain job\n-                .namespace(namespace))\n-        .spec(new V1JobSpec()\n-            .backoffLimit(0) // try only once\n-            .template(new V1PodTemplateSpec()\n-                .spec(new V1PodSpec()\n-                    .restartPolicy(\"Never\")\n-                    .initContainers(Arrays.asList(new V1Container()\n-                        .name(\"fix-pvc-owner\") // change the ownership of the pv to opc:opc\n-                        .image(image)\n-                        .addCommandItem(\"/bin/sh\")\n-                        .addArgsItem(\"-c\")\n-                        .addArgsItem(\"chown -R 1000:1000 /shared\")\n-                        .volumeMounts(Arrays.asList(\n-                            new V1VolumeMount()\n-                                .name(pvName)\n-                                .mountPath(\"/shared\")))\n-                        .securityContext(new V1SecurityContext()\n-                            .runAsGroup(0L)\n-                            .runAsUser(0L))))\n-                    .containers(Arrays.asList(jobContainer  // container containing WLST or WDT details\n-                        .name(\"create-weblogic-domain-onpv-container\")\n-                        .image(image)\n-                        .imagePullPolicy(\"Always\")\n-                        .ports(Arrays.asList(new V1ContainerPort()\n-                            .containerPort(7001)))\n-                        .volumeMounts(Arrays.asList(\n-                            new V1VolumeMount()\n-                                .name(\"create-weblogic-domain-job-cm-volume\") // domain creation scripts volume\n-                                .mountPath(\"/u01/weblogic\"), // availble under /u01/weblogic inside pod\n-                            new V1VolumeMount()\n-                                .name(pvName) // location to write domain\n-                                .mountPath(\"/shared\"))))) // mounted under /shared inside pod\n-                    .volumes(Arrays.asList(\n-                        new V1Volume()\n-                            .name(pvName)\n-                            .persistentVolumeClaim(\n-                                new V1PersistentVolumeClaimVolumeSource()\n-                                    .claimName(pvcName)),\n-                        new V1Volume()\n-                            .name(\"create-weblogic-domain-job-cm-volume\")\n-                            .configMap(\n-                                new V1ConfigMapVolumeSource()\n-                                    .name(domainScriptCM)))) //config map containing domain scripts\n-                    .imagePullSecrets(isUseSecret ? Arrays.asList(\n-                        new V1LocalObjectReference()\n-                            .name(OCR_SECRET_NAME))\n-                        : null))));\n-    String jobName = assertDoesNotThrow(()\n-        -> createNamespacedJob(jobBody), \"Failed to create Job\");\n-\n-    logger.info(\"Checking if the domain creation job {0} completed in namespace {1}\",\n-        jobName, namespace);\n-    withStandardRetryPolicy\n-        .conditionEvaluationListener(\n-            condition -> logger.info(\"Waiting for job {0} to be completed in namespace {1} \"\n-                    + \"(elapsed time {2} ms, remaining time {3} ms)\",\n-                jobName,\n-                namespace,\n-                condition.getElapsedTimeInMS(),\n-                condition.getRemainingTimeInMS()))\n-        .until(jobCompleted(jobName, null, namespace));\n-\n-    // check job status and fail test if the job failed to create domain\n-    V1Job job = assertDoesNotThrow(() -> getJob(jobName, namespace),\n-        \"Getting the job failed\");\n-    if (job != null) {\n-      V1JobCondition jobCondition = job.getStatus().getConditions().stream().filter(\n-          v1JobCondition -> \"Failed\".equalsIgnoreCase(v1JobCondition.getType()))\n-          .findAny()\n-          .orElse(null);\n-      if (jobCondition != null) {\n-        logger.severe(\"Job {0} failed to create domain\", jobName);\n-        List<V1Pod> pods = assertDoesNotThrow(() -> listPods(\n-            namespace, \"job-name=\" + jobName).getItems(),\n-            \"Listing pods failed\");\n-        if (!pods.isEmpty()) {\n-          String podLog = assertDoesNotThrow(() -> getPodLog(pods.get(0).getMetadata().getName(), namespace),\n-              \"Failed to get pod log\");\n-          logger.severe(podLog);\n-          fail(\"Domain create job failed\");\n-        }\n-      }\n-    }\n-\n-  }\n-\n-  /**\n-   * Create a persistent volume.\n-   *\n-   * @param pvName name of the persistent volume to create\n-   * @param domainUid domain UID\n-   * @throws IOException when creating pv path fails\n-   */\n-  private void createPV(String pvName, String domainUid) {\n-    logger.info(\"creating persistent volume\");\n-\n-    Path pvHostPath = null;\n-    try {\n-      pvHostPath = Files.createDirectories(Paths.get(\n-          PV_ROOT, this.getClass().getSimpleName(), pvName));\n-      logger.info(\"Creating PV directory host path {0}\", pvHostPath);\n-      FileUtils.deleteDirectory(pvHostPath.toFile());\n-      Files.createDirectories(pvHostPath);\n-    } catch (IOException ioex) {\n-      logger.severe(ioex.getMessage());\n-      fail(\"Create persistent volume host path failed\");\n-    }\n-\n-    V1PersistentVolume v1pv = new V1PersistentVolume()\n-        .spec(new V1PersistentVolumeSpec()\n-            .addAccessModesItem(\"ReadWriteMany\")\n-            .storageClassName(\"weblogic-domain-storage-class\")\n-            .volumeMode(\"Filesystem\")\n-            .putCapacityItem(\"storage\", Quantity.fromString(\"5Gi\"))\n-            .persistentVolumeReclaimPolicy(\"Recycle\")\n-            .accessModes(Arrays.asList(\"ReadWriteMany\"))\n-            .hostPath(new V1HostPathVolumeSource()\n-                .path(pvHostPath.toString())))\n-        .metadata(new V1ObjectMeta()\n-            .name(pvName)\n-            .putLabelsItem(\"weblogic.domainUid\", domainUid));\n-    boolean success = assertDoesNotThrow(() -> createPersistentVolume(v1pv),\n-        \"Failed to create persistent volume\");\n-    assertTrue(success, \"PersistentVolume creation failed\");\n-  }\n-\n-  /**\n-   * Create a persistent volume claim.\n-   *\n-   * @param pvName name of the persistent volume\n-   * @param pvcName name of the persistent volume to create\n-   * @param domainUid UID of the WebLogic domain\n-   * @param namespace name of the namespace in which to create the persistent volume claim\n-   */\n-  private void createPVC(String pvName, String pvcName, String domainUid, String namespace) {\n-    logger.info(\"creating persistent volume claim\");\n-\n-    V1PersistentVolumeClaim v1pvc = new V1PersistentVolumeClaim()\n-        .spec(new V1PersistentVolumeClaimSpec()\n-            .addAccessModesItem(\"ReadWriteMany\")\n-            .storageClassName(\"weblogic-domain-storage-class\")\n-            .volumeName(pvName)\n-            .resources(new V1ResourceRequirements()\n-                .putRequestsItem(\"storage\", Quantity.fromString(\"5Gi\"))))\n-        .metadata(new V1ObjectMeta()\n-            .name(pvcName)\n-            .namespace(namespace)\n-            .putLabelsItem(\"weblogic.domainUid\", domainUid));\n-\n-    boolean success = assertDoesNotThrow(() -> createPersistentVolumeClaim(v1pvc),\n-        \"Failed to create persistent volume claim\");\n-    assertTrue(success, \"PersistentVolumeClaim creation failed\");\n-  }\n-\n   /**\n    * Create secret for docker credentials.\n    *\n    * @param namespace name of the namespace in which to create secret\n    */\n   private void createOCRRepoSecret(String namespace) {\n-    CommonTestUtils.createDockerRegistrySecret(OCR_USERNAME, OCR_PASSWORD,\n+    createDockerRegistrySecret(OCR_USERNAME, OCR_PASSWORD,\n         OCR_EMAIL, OCR_REGISTRY, OCR_SECRET_NAME, namespace);\n   }\n \n   private File createScriptToKillServer() throws IOException {\n     File killServerScript = File.createTempFile(\"killserver\", \".sh\");\n     //deletes the file when VM terminates\n     killServerScript.deleteOnExit();\n-    FileWriter fw = new FileWriter(killServerScript);\n-    fw.write(\"#!/bin/bash\\n\");\n-    fw.write(\"kill -9 `jps | grep Server | awk '{print $1}'`\");\n-    fw.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac90905bdd7d92601159d500bf743ac09263941d"}, "originalPosition": 421}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM2MjI4OQ==", "bodyText": "typo: \"\u2026 the PV directories needs\" -> \"\u2026 the PV directories need\".", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1800#discussion_r454362289", "createdAt": "2020-07-14T13:38:37Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "diffHunk": "@@ -1892,6 +1892,7 @@ public static void createPV(String pvName, String domainUid, String className) {\n     logger.info(\"creating persistent volume for pvName {0}, domainUid: {1}, className: {2}\",\n         pvName, domainUid, className);\n     Path pvHostPath = null;\n+    // when tests are running in local box the PV directories needs to exist", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac90905bdd7d92601159d500bf743ac09263941d"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MjM1NjQ1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1800#pullrequestreview-448235645", "createdAt": "2020-07-14T15:48:05Z", "commit": {"oid": "ac90905bdd7d92601159d500bf743ac09263941d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNTo0ODowNlrOGxZ41Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNTo0ODoyMlrOGxZ5hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ1NzU1Nw==", "bodyText": "can the node port be specified as 0 so that it picks the available port?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1800#discussion_r454457557", "createdAt": "2020-07-14T15:48:06Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItConfigDistributionStrategy.java", "diffHunk": "@@ -207,9 +182,9 @@ public void initAll(@Namespaces(2) List<String> namespaces) {\n     domainNamespace = namespaces.get(1);\n \n     //start two MySQL database instances\n-    mysqlDBPort1 = getNextFreePort(30000, 32767);\n+    mysqlDBPort1 = getNextFreePort(30020, 32767);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac90905bdd7d92601159d500bf743ac09263941d"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ1NzczNQ==", "bodyText": "can the node port be specified as 0 so that it picks the available port?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1800#discussion_r454457735", "createdAt": "2020-07-14T15:48:22Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItConfigDistributionStrategy.java", "diffHunk": "@@ -207,9 +182,9 @@ public void initAll(@Namespaces(2) List<String> namespaces) {\n     domainNamespace = namespaces.get(1);\n \n     //start two MySQL database instances\n-    mysqlDBPort1 = getNextFreePort(30000, 32767);\n+    mysqlDBPort1 = getNextFreePort(30020, 32767);\n     createMySQLDB(\"mysqldb-1\", \"root\", \"root123\", mysqlDBPort1, domainNamespace, null);\n-    mysqlDBPort2 = getNextFreePort(31000, 32767);\n+    mysqlDBPort2 = getNextFreePort(31020, 32767);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac90905bdd7d92601159d500bf743ac09263941d"}, "originalPosition": 102}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63074d516388f472c94818e9906abebd651ef44d", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/63074d516388f472c94818e9906abebd651ef44d", "committedDate": "2020-07-14T16:47:23Z", "message": "Doing a lookup for every request instead of onetime lookup in init method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77ba2909eba2f05c5b35033d2ebd343abafce6a0", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/77ba2909eba2f05c5b35033d2ebd343abafce6a0", "committedDate": "2020-07-14T16:48:18Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into refactor-domaininpv-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "587d41b52f8ee12d867320f848fca7fc49eded59", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/587d41b52f8ee12d867320f848fca7fc49eded59", "committedDate": "2020-07-14T18:28:21Z", "message": "Using 0 for mysql nodeport"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e06125c8507ad9c03eb18c30fb35ce581c42f8e3", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e06125c8507ad9c03eb18c30fb35ce581c42f8e3", "committedDate": "2020-07-14T19:16:55Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5333df399739e21527da760d7b42b0af2058684", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b5333df399739e21527da760d7b42b0af2058684", "committedDate": "2020-07-14T19:39:18Z", "message": "Fix get db nodeport method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05a2cac933bff7baa962b17a144a5b3a86c9d5d1", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/05a2cac933bff7baa962b17a144a5b3a86c9d5d1", "committedDate": "2020-07-14T20:12:12Z", "message": "Fix typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19dc7f2d138347b0a1bd2f2c7a990a577efd12c1", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/19dc7f2d138347b0a1bd2f2c7a990a577efd12c1", "committedDate": "2020-07-14T21:17:40Z", "message": "Use static imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bd11269668bb8ef6d131b1c37795adce83b83d6", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/9bd11269668bb8ef6d131b1c37795adce83b83d6", "committedDate": "2020-07-15T03:36:53Z", "message": "using a smaller max message size"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5c9678fab6b707f6d6b3807ed601495184057aa", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a5c9678fab6b707f6d6b3807ed601495184057aa", "committedDate": "2020-07-15T04:20:12Z", "message": "Adding debug statements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26805fdc441263fb4a07d0eb53cf28702cc31ce4", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/26805fdc441263fb4a07d0eb53cf28702cc31ce4", "committedDate": "2020-07-15T04:44:28Z", "message": "load servlets on startup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5dde3092bfdf8e72eb9cb5b9f25d7f7202111cc0", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5dde3092bfdf8e72eb9cb5b9f25d7f7202111cc0", "committedDate": "2020-07-15T18:24:21Z", "message": "List servers after restart\nCheck service existance after restart"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4715cf318e8b851a7ea4cfb22518d7ab149bcd77", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/4715cf318e8b851a7ea4cfb22518d7ab149bcd77", "committedDate": "2020-07-15T19:52:53Z", "message": "Move the DB creation after operator installation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5eced90f3f0a13b7e28ff7bdf2d2b33307488db3", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5eced90f3f0a13b7e28ff7bdf2d2b33307488db3", "committedDate": "2020-07-15T19:53:25Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into refactor-domaininpv-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb9800b01ff163f95e83884072052e060ab76682", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/cb9800b01ff163f95e83884072052e060ab76682", "committedDate": "2020-07-15T20:04:16Z", "message": "Add more checks for service existance"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b54a03a2105cf0cb0d4e54f753cf335f698b57a", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0b54a03a2105cf0cb0d4e54f753cf335f698b57a", "committedDate": "2020-07-16T02:49:46Z", "message": "Move the default token check to CommonTestUtils.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ba92c835bc35f5ad02980f8a7361126b007dd65", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/9ba92c835bc35f5ad02980f8a7361126b007dd65", "committedDate": "2020-07-16T02:50:17Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into refactor-domaininpv-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "917cf9f5deab6bafc6e070a111d4b574a9f92ba3", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/917cf9f5deab6bafc6e070a111d4b574a9f92ba3", "committedDate": "2020-07-16T14:40:19Z", "message": "Add javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03f33cd0acbd0fe903528208388e93a5b7aa91da", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/03f33cd0acbd0fe903528208388e93a5b7aa91da", "committedDate": "2020-07-16T14:40:34Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into refactor-domaininpv-tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5OTkyNjU2", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1800#pullrequestreview-449992656", "createdAt": "2020-07-16T16:01:03Z", "commit": {"oid": "03f33cd0acbd0fe903528208388e93a5b7aa91da"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjowMTowM1rOGyxxkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjowMTowM1rOGyxxkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5NzQ5MQ==", "bodyText": "catching the exception and just printing it, does the test fail on any exceptions and how?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1800#discussion_r455897491", "createdAt": "2020-07-16T16:01:03Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/resources/apps/clusterview/src/java/oracle/weblogic/kubernetes/applications/clusterview/ConfigServlet.java", "diffHunk": "@@ -178,16 +178,23 @@ private void testJdbcConnection(HttpServletRequest request, PrintWriter out) {\n \n     String dsName = request.getParameter(\"dsName\");\n     String serverName = request.getParameter(\"serverName\");\n-\n-    ServerRuntimeMBean serverRuntime = getServerRuntime(serverName);\n-    JDBCDataSourceRuntimeMBean[] jdbcDataSourceRuntimeMBeans = serverRuntime.getJDBCServiceRuntime().getJDBCDataSourceRuntimeMBeans();\n-    for (JDBCDataSourceRuntimeMBean jdbcDataSourceRuntimeMBean : jdbcDataSourceRuntimeMBeans) {\n-      if (jdbcDataSourceRuntimeMBean.getName().equals(dsName)) {\n-        String testPool = jdbcDataSourceRuntimeMBean.testPool();\n-        if (testPool == null) {\n-          out.println(\"Connection successful\");\n+    System.out.println(\"ITTESTS:>>>>Testing connection pool in datasource : \" + dsName + \" in server \" + serverName);\n+    try {\n+      ServerRuntimeMBean serverRuntime = getServerRuntime(serverName);\n+      JDBCDataSourceRuntimeMBean[] jdbcDataSourceRuntimeMBeans = serverRuntime.getJDBCServiceRuntime().getJDBCDataSourceRuntimeMBeans();\n+      System.out.println(\"ITTESTS:>>>>Getting datasource runtime mbeans\");\n+      for (JDBCDataSourceRuntimeMBean jdbcDataSourceRuntimeMBean : jdbcDataSourceRuntimeMBeans) {\n+        System.out.println(\"ITTESTS:>>>>Found JDBC datasource runtime mbean: \" + jdbcDataSourceRuntimeMBean.getName());\n+        if (jdbcDataSourceRuntimeMBean.getName().equals(dsName)) {\n+          System.out.println(\"ITTESTS:>>>>Testing connection pool for JDBC datasource runtime mbean: \" + jdbcDataSourceRuntimeMBean.getName());\n+          String testPool = jdbcDataSourceRuntimeMBean.testPool();\n+          if (testPool == null) {\n+            out.println(\"Connection successful\");\n+          }\n         }\n       }\n+    } catch (Exception ex) {\n+      ex.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03f33cd0acbd0fe903528208388e93a5b7aa91da"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMTc3NTc1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1800#pullrequestreview-450177575", "createdAt": "2020-07-16T20:06:33Z", "commit": {"oid": "03f33cd0acbd0fe903528208388e93a5b7aa91da"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMTg5NjI4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1800#pullrequestreview-450189628", "createdAt": "2020-07-16T20:25:10Z", "commit": {"oid": "03f33cd0acbd0fe903528208388e93a5b7aa91da"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMTkwMzcw", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1800#pullrequestreview-450190370", "createdAt": "2020-07-16T20:26:15Z", "commit": {"oid": "03f33cd0acbd0fe903528208388e93a5b7aa91da"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMTk1MzI0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1800#pullrequestreview-450195324", "createdAt": "2020-07-16T20:33:46Z", "commit": {"oid": "03f33cd0acbd0fe903528208388e93a5b7aa91da"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMjExNTgx", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1800#pullrequestreview-450211581", "createdAt": "2020-07-16T20:58:46Z", "commit": {"oid": "03f33cd0acbd0fe903528208388e93a5b7aa91da"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4283, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}