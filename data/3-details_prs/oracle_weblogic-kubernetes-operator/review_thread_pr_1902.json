{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4OTU3Mzk2", "number": 1902, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMjoyODo0OVrOEgLTvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjoxODoxNFrOEopBLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTc1MTY3OnYy", "diffSide": "RIGHT", "path": "operator/src/main/resources/scripts/introspectDomain.py", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMjoyODo0OVrOHM5gMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDozODo0NFrOHag3bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI4NzA5MA==", "bodyText": "I've found three additional attributes that this script checks, that have different default and secureValue fields, and that aren't included in this update:\n\nNetworkAccessPoint.getProtocol: t3 (default) --> t3s (secureValue) (search for \"getProtocol()\")\nServer[Template].isListenPortEnabled: true --> false (search for \"isListenPortEnabled()\")\nSSL.isEnabled: false --> true (search for \"isEnabled()\")\n\nI assume the script needs to be updated for them too?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1902#discussion_r483287090", "createdAt": "2020-09-03T22:28:49Z", "author": {"login": "tbarnes-us"}, "path": "operator/src/main/resources/scripts/introspectDomain.py", "diffHunk": "@@ -1664,6 +1662,50 @@ def getSSLOrNone(server):\n     ret = None\n   return ret\n \n+# Derive the default value for SecureMode of a domain\n+def isSecureModeEnabledForDomain(domain):\n+  secureModeEnabled = false\n+  if domain.getSecurityConfiguration().getSecureMode() != None:\n+    secureModeEnabled = domain.getSecurityConfiguration().getSecureMode().isSecureModeEnabled()\n+  else:\n+    secureModeEnabled = domain.isProductionModeEnabled() and not LegalHelper.versionEarlierThan(domain.getDomainVersion(), \"14.1.2.0\")\n+  return secureModeEnabled\n+\n+def isAdministrationPortEnabledForDomain(domain):\n+  administrationPortEnabled = false\n+  #\"if domain.isSet('AdministrationPortEnabled'):\" does not work in off-line WLST!\n+  # Go to the domain root\n+  cd('/')\n+  if isSet('AdministrationPortEnabled'):\n+    administrationPortEnabled = domain.isAdministrationPortEnabled()\n+  else:\n+    # AdministrationPortEnabled is not explicitly set so going with the default\n+    # Starting with 14.1.2.0, the domain's AdministrationPortEnabled default is derived from the domain's SecureMode\n+    administrationPortEnabled = isSecureModeEnabledForDomain(domain)\n+  return administrationPortEnabled\n+\n+def isAdministrationPortEnabledForServer(server, domain, isServerTemplate=False):\n+  administrationPortEnabled = false\n+  #\"if server.isSet('AdministrationPortEnabled'):\" does not work in off-line WLST!\n+  cd('/')\n+  if isServerTemplate:\n+    cd('ServerTemplate')\n+  else:\n+    cd('Server')\n+  cd(server.getName())\n+  if isSet('AdministrationPortEnabled'):\n+    administrationPortEnabled = server.isAdministrationPortEnabled()\n+  else:\n+    administrationPortEnabled = isAdministrationPortEnabledForDomain(domain)\n+  return administrationPortEnabled\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47753da917aeac87f827d736f6e87a6a7b05040f"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI4ODM3MQ==", "bodyText": "(The current pull looks excellent to me otherwise BTW.)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1902#discussion_r483288371", "createdAt": "2020-09-03T22:32:40Z", "author": {"login": "tbarnes-us"}, "path": "operator/src/main/resources/scripts/introspectDomain.py", "diffHunk": "@@ -1664,6 +1662,50 @@ def getSSLOrNone(server):\n     ret = None\n   return ret\n \n+# Derive the default value for SecureMode of a domain\n+def isSecureModeEnabledForDomain(domain):\n+  secureModeEnabled = false\n+  if domain.getSecurityConfiguration().getSecureMode() != None:\n+    secureModeEnabled = domain.getSecurityConfiguration().getSecureMode().isSecureModeEnabled()\n+  else:\n+    secureModeEnabled = domain.isProductionModeEnabled() and not LegalHelper.versionEarlierThan(domain.getDomainVersion(), \"14.1.2.0\")\n+  return secureModeEnabled\n+\n+def isAdministrationPortEnabledForDomain(domain):\n+  administrationPortEnabled = false\n+  #\"if domain.isSet('AdministrationPortEnabled'):\" does not work in off-line WLST!\n+  # Go to the domain root\n+  cd('/')\n+  if isSet('AdministrationPortEnabled'):\n+    administrationPortEnabled = domain.isAdministrationPortEnabled()\n+  else:\n+    # AdministrationPortEnabled is not explicitly set so going with the default\n+    # Starting with 14.1.2.0, the domain's AdministrationPortEnabled default is derived from the domain's SecureMode\n+    administrationPortEnabled = isSecureModeEnabledForDomain(domain)\n+  return administrationPortEnabled\n+\n+def isAdministrationPortEnabledForServer(server, domain, isServerTemplate=False):\n+  administrationPortEnabled = false\n+  #\"if server.isSet('AdministrationPortEnabled'):\" does not work in off-line WLST!\n+  cd('/')\n+  if isServerTemplate:\n+    cd('ServerTemplate')\n+  else:\n+    cd('Server')\n+  cd(server.getName())\n+  if isSet('AdministrationPortEnabled'):\n+    administrationPortEnabled = server.isAdministrationPortEnabled()\n+  else:\n+    administrationPortEnabled = isAdministrationPortEnabledForDomain(domain)\n+  return administrationPortEnabled\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI4NzA5MA=="}, "originalCommit": {"oid": "47753da917aeac87f827d736f6e87a6a7b05040f"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE2MTYxMQ==", "bodyText": "Good catch.  Let me add some updates for those as well. Thanks!", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1902#discussion_r485161611", "createdAt": "2020-09-08T19:56:16Z", "author": {"login": "qvdang"}, "path": "operator/src/main/resources/scripts/introspectDomain.py", "diffHunk": "@@ -1664,6 +1662,50 @@ def getSSLOrNone(server):\n     ret = None\n   return ret\n \n+# Derive the default value for SecureMode of a domain\n+def isSecureModeEnabledForDomain(domain):\n+  secureModeEnabled = false\n+  if domain.getSecurityConfiguration().getSecureMode() != None:\n+    secureModeEnabled = domain.getSecurityConfiguration().getSecureMode().isSecureModeEnabled()\n+  else:\n+    secureModeEnabled = domain.isProductionModeEnabled() and not LegalHelper.versionEarlierThan(domain.getDomainVersion(), \"14.1.2.0\")\n+  return secureModeEnabled\n+\n+def isAdministrationPortEnabledForDomain(domain):\n+  administrationPortEnabled = false\n+  #\"if domain.isSet('AdministrationPortEnabled'):\" does not work in off-line WLST!\n+  # Go to the domain root\n+  cd('/')\n+  if isSet('AdministrationPortEnabled'):\n+    administrationPortEnabled = domain.isAdministrationPortEnabled()\n+  else:\n+    # AdministrationPortEnabled is not explicitly set so going with the default\n+    # Starting with 14.1.2.0, the domain's AdministrationPortEnabled default is derived from the domain's SecureMode\n+    administrationPortEnabled = isSecureModeEnabledForDomain(domain)\n+  return administrationPortEnabled\n+\n+def isAdministrationPortEnabledForServer(server, domain, isServerTemplate=False):\n+  administrationPortEnabled = false\n+  #\"if server.isSet('AdministrationPortEnabled'):\" does not work in off-line WLST!\n+  cd('/')\n+  if isServerTemplate:\n+    cd('ServerTemplate')\n+  else:\n+    cd('Server')\n+  cd(server.getName())\n+  if isSet('AdministrationPortEnabled'):\n+    administrationPortEnabled = server.isAdministrationPortEnabled()\n+  else:\n+    administrationPortEnabled = isAdministrationPortEnabledForDomain(domain)\n+  return administrationPortEnabled\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI4NzA5MA=="}, "originalCommit": {"oid": "47753da917aeac87f827d736f6e87a6a7b05040f"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU2MzUwMQ==", "bodyText": "Looks good!", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1902#discussion_r497563501", "createdAt": "2020-09-30T14:38:44Z", "author": {"login": "tbarnes-us"}, "path": "operator/src/main/resources/scripts/introspectDomain.py", "diffHunk": "@@ -1664,6 +1662,50 @@ def getSSLOrNone(server):\n     ret = None\n   return ret\n \n+# Derive the default value for SecureMode of a domain\n+def isSecureModeEnabledForDomain(domain):\n+  secureModeEnabled = false\n+  if domain.getSecurityConfiguration().getSecureMode() != None:\n+    secureModeEnabled = domain.getSecurityConfiguration().getSecureMode().isSecureModeEnabled()\n+  else:\n+    secureModeEnabled = domain.isProductionModeEnabled() and not LegalHelper.versionEarlierThan(domain.getDomainVersion(), \"14.1.2.0\")\n+  return secureModeEnabled\n+\n+def isAdministrationPortEnabledForDomain(domain):\n+  administrationPortEnabled = false\n+  #\"if domain.isSet('AdministrationPortEnabled'):\" does not work in off-line WLST!\n+  # Go to the domain root\n+  cd('/')\n+  if isSet('AdministrationPortEnabled'):\n+    administrationPortEnabled = domain.isAdministrationPortEnabled()\n+  else:\n+    # AdministrationPortEnabled is not explicitly set so going with the default\n+    # Starting with 14.1.2.0, the domain's AdministrationPortEnabled default is derived from the domain's SecureMode\n+    administrationPortEnabled = isSecureModeEnabledForDomain(domain)\n+  return administrationPortEnabled\n+\n+def isAdministrationPortEnabledForServer(server, domain, isServerTemplate=False):\n+  administrationPortEnabled = false\n+  #\"if server.isSet('AdministrationPortEnabled'):\" does not work in off-line WLST!\n+  cd('/')\n+  if isServerTemplate:\n+    cd('ServerTemplate')\n+  else:\n+    cd('Server')\n+  cd(server.getName())\n+  if isSet('AdministrationPortEnabled'):\n+    administrationPortEnabled = server.isAdministrationPortEnabled()\n+  else:\n+    administrationPortEnabled = isAdministrationPortEnabledForDomain(domain)\n+  return administrationPortEnabled\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzI4NzA5MA=="}, "originalCommit": {"oid": "47753da917aeac87f827d736f6e87a6a7b05040f"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMDUwNTQyOnYy", "diffSide": "RIGHT", "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/PodStepContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjoxODoxNFrOHZ2WrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjo1MTowNlrOHZ34XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg2Njk4OA==", "bodyText": "Do we need to make changes elsewhere to accommodate these extraScrapeConfigs? For instance, are there documentation or blogs that must now be updated?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1902#discussion_r496866988", "createdAt": "2020-09-29T16:18:14Z", "author": {"login": "rjeberhard"}, "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/PodStepContext.java", "diffHunk": "@@ -535,7 +551,9 @@ protected V1ObjectMeta createMetadata() {\n           .ifPresent(hash -> addHashLabel(metadata, LabelConstants.MODEL_IN_IMAGE_MODEL_SECRETS_HASH, hash));\n \n     // Add prometheus annotations. This will overwrite any custom annotations with same name.\n-    AnnotationHelper.annotateForPrometheus(metadata, getDefaultPort());\n+    // Prometheus does not support \"prometheus.io/scheme\".  The scheme(http/https) can be set\n+    // in the Prometheus Chart values yaml under the \"extraScrapeConfigs:\" section.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "208450dad767697d9f42c2d4d0761c50922e971c"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg5MTk5Nw==", "bodyText": "@rjeberhard , I think we do for the use case when only the SSL port of the managed server is enabled.  The other use case I found that breaks the monitoring exporter app is when the managed server has the non-SSL port enabled + the administration port enabled.  Should I enter a tracking bug or JIRA for it?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1902#discussion_r496891997", "createdAt": "2020-09-29T16:51:06Z", "author": {"login": "qvdang"}, "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/PodStepContext.java", "diffHunk": "@@ -535,7 +551,9 @@ protected V1ObjectMeta createMetadata() {\n           .ifPresent(hash -> addHashLabel(metadata, LabelConstants.MODEL_IN_IMAGE_MODEL_SECRETS_HASH, hash));\n \n     // Add prometheus annotations. This will overwrite any custom annotations with same name.\n-    AnnotationHelper.annotateForPrometheus(metadata, getDefaultPort());\n+    // Prometheus does not support \"prometheus.io/scheme\".  The scheme(http/https) can be set\n+    // in the Prometheus Chart values yaml under the \"extraScrapeConfigs:\" section.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg2Njk4OA=="}, "originalCommit": {"oid": "208450dad767697d9f42c2d4d0761c50922e971c"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3932, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}