{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1MDUzMTcy", "number": 2118, "title": "Retry behavior for synchronous calls during initialization", "bodyText": "As you know, we've been seeing fairly regular integration test failures for the ItIstio* series of tests. The tests fail because the operator fails to start being unable to connect to the Kubernetes master. In each case I analyzed, the operator failed just before the Istio Envoy proxy finished initialization.\nMost operator calls are done using the async pattern, which has built-in delay and retry; however, the synchronous calls done during operator initialization do not have this functionality. Therefore, I've added a wrapper method that can do this retry. I've put it down at the CallBuilder level because this gave the easiest location to add the unit-test.\nCreating this as draft so that you can take a look. I think I need to use some configured value for the retry delay rather than hardcoding 5 seconds.\nIstio tests are clean with this change: https://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/3454/console", "createdAt": "2020-12-23T22:23:15Z", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2118", "merged": true, "mergeCommit": {"oid": "5812d447d231828b3ef8594bb75e0ab824586e0c"}, "closed": true, "closedAt": "2021-01-05T16:20:18Z", "author": {"login": "rjeberhard"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdpGn8BgH2gAyNTQ1MDUzMTcyOjNhZThiOThhNTBiNDg3ODFmM2RkZmJkNTJmZjRiNTdkNGUzNmIxMGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdtNYyWAH2gAyNTQ1MDUzMTcyOjE1NjAxNGJiMDYzNGZiYzZlMmVhNDVhNTczNDdlOTlhZDcwYzNiYTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3ae8b98a50b48781f3ddfbd52ff4b57d4e36b10b", "author": {"user": {"login": "rjeberhard", "name": "Ryan Eberhard"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3ae8b98a50b48781f3ddfbd52ff4b57d4e36b10b", "committedDate": "2020-12-23T22:11:11Z", "message": "Retry behavior for synchronous calls during initialization"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4Mjc1MDM5", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2118#pullrequestreview-558275039", "createdAt": "2020-12-23T23:44:35Z", "commit": {"oid": "3ae8b98a50b48781f3ddfbd52ff4b57d4e36b10b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMzo0NDozNVrOIK65-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMzo0NDozNVrOIK65-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMyMTc4Ng==", "bodyText": "What happened if it is a RuntimeException but not an ApiException?  Do we want to limit the number of retries or make it retry forever (hopefully the condition can be resolved)?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2118#discussion_r548321786", "createdAt": "2020-12-23T23:44:35Z", "author": {"login": "jshum2479"}, "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/CallBuilder.java", "diffHunk": "@@ -594,6 +600,40 @@ public VersionInfo readVersionCode() throws ApiException {\n     return DISPATCHER.execute(factory, requestParams, helper);\n   }\n \n+  /**\n+   * Execute a synchronous call with a retry on failure.\n+   * @param call The call\n+   * @param retryDelaySeconds Retry delay in seconds\n+   * @param <T> Call return type\n+   * @return Results of operation, if successful\n+   * @throws Exception Exception types other than ApiException, which will cause failure\n+   */\n+  public <T> T executeSynchronousCallWithRetry(Callable<T> call, int retryDelaySeconds) throws Exception {\n+    T result = null;\n+    boolean complete = false;\n+    do {\n+      try {\n+        result = call.call();\n+        complete = true;\n+      } catch (RuntimeException re) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ae8b98a50b48781f3ddfbd52ff4b57d4e36b10b"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1286b17415521b08c918a382d93e0dc25d6dc138", "author": {"user": {"login": "rjeberhard", "name": "Ryan Eberhard"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/1286b17415521b08c918a382d93e0dc25d6dc138", "committedDate": "2021-01-04T21:26:55Z", "message": "Merge remote-tracking branch 'origin/develop' into owls-86461"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb16edec075e8d30c3f7e7429ee407d90ca18e10", "author": {"user": {"login": "rjeberhard", "name": "Ryan Eberhard"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/bb16edec075e8d30c3f7e7429ee407d90ca18e10", "committedDate": "2021-01-04T22:15:29Z", "message": "Add initialization retry tuning"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxMzk0MjMz", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2118#pullrequestreview-561394233", "createdAt": "2021-01-04T22:31:21Z", "commit": {"oid": "bb16edec075e8d30c3f7e7429ee407d90ca18e10"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxOTA1MTY5", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2118#pullrequestreview-561905169", "createdAt": "2021-01-05T15:50:20Z", "commit": {"oid": "bb16edec075e8d30c3f7e7429ee407d90ca18e10"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNTo1MDoyMFrOIOch_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNTo1Mjo1OVrOIOcoig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAxODQzMA==", "bodyText": "Does the ApiException ever get nested further down?  Is there ever a case where you need to loop through the causes looking for ApiException?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2118#discussion_r552018430", "createdAt": "2021-01-05T15:50:20Z", "author": {"login": "ddsharpe"}, "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/CallBuilder.java", "diffHunk": "@@ -594,6 +600,40 @@ public VersionInfo readVersionCode() throws ApiException {\n     return DISPATCHER.execute(factory, requestParams, helper);\n   }\n \n+  /**\n+   * Execute a synchronous call with a retry on failure.\n+   * @param call The call\n+   * @param retryDelaySeconds Retry delay in seconds\n+   * @param <T> Call return type\n+   * @return Results of operation, if successful\n+   * @throws Exception Exception types other than ApiException, which will cause failure\n+   */\n+  public <T> T executeSynchronousCallWithRetry(Callable<T> call, int retryDelaySeconds) throws Exception {\n+    T result = null;\n+    boolean complete = false;\n+    do {\n+      try {\n+        result = call.call();\n+        complete = true;\n+      } catch (RuntimeException re) {\n+        Throwable cause = re.getCause();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb16edec075e8d30c3f7e7429ee407d90ca18e10"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAyMDEwNg==", "bodyText": "Please add a comment here that we expect the liveness probe to cancel this process if it \"retries forever\".  The next coder may not understand the assumption/expectation.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2118#discussion_r552020106", "createdAt": "2021-01-05T15:52:59Z", "author": {"login": "ddsharpe"}, "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/CallBuilder.java", "diffHunk": "@@ -594,6 +600,40 @@ public VersionInfo readVersionCode() throws ApiException {\n     return DISPATCHER.execute(factory, requestParams, helper);\n   }\n \n+  /**\n+   * Execute a synchronous call with a retry on failure.\n+   * @param call The call\n+   * @param retryDelaySeconds Retry delay in seconds\n+   * @param <T> Call return type\n+   * @return Results of operation, if successful\n+   * @throws Exception Exception types other than ApiException, which will cause failure\n+   */\n+  public <T> T executeSynchronousCallWithRetry(Callable<T> call, int retryDelaySeconds) throws Exception {\n+    T result = null;\n+    boolean complete = false;\n+    do {\n+      try {\n+        result = call.call();\n+        complete = true;\n+      } catch (RuntimeException re) {\n+        Throwable cause = re.getCause();\n+        if (cause instanceof ApiException) {\n+          LOGGER.warning(MessageKeys.EXCEPTION, cause);\n+        }\n+      } catch (Throwable t) {\n+        LOGGER.warning(MessageKeys.EXCEPTION, t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb16edec075e8d30c3f7e7429ee407d90ca18e10"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "156014bb0634fbc6e2ea45a57347e99ad70c3ba9", "author": {"user": {"login": "rjeberhard", "name": "Ryan Eberhard"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/156014bb0634fbc6e2ea45a57347e99ad70c3ba9", "committedDate": "2021-01-05T16:19:40Z", "message": "Add implementation note"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4017, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}