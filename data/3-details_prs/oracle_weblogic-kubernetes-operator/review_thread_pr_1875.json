{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4OTAyMjQ1", "number": 1875, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDoyNzoxOFrOEZglCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOTozNjo1N1rOEaracA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTgzNjI2OnYy", "diffSide": "LEFT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDoyNzoxOFrOHCXLzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMjo1NjoyMVrOHEV8rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIzOTA1NA==", "bodyText": "I am wondering if the initAll method can be modified to use some of the comment test util methods.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r472239054", "createdAt": "2020-08-18T14:27:18Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -237,10 +275,22 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n             \"weblogicenc\", domainNamespace),\n              String.format(\"createSecret failed for %s\", encryptionSecretName));\n-    // create the domain CR with no configmap", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29f22d110d941ea9533816f54abec814aee70972"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMxNTk0OA==", "bodyText": "added CommonTestUtils.installAndVerifyOperator to remove the extra code. Thanks for the suggestion.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r474315948", "createdAt": "2020-08-20T22:56:21Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -237,10 +275,22 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n             \"weblogicenc\", domainNamespace),\n              String.format(\"createSecret failed for %s\", encryptionSecretName));\n-    // create the domain CR with no configmap", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIzOTA1NA=="}, "originalCommit": {"oid": "29f22d110d941ea9533816f54abec814aee70972"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTg0Njg3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDoyOTozMlrOHCXSeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTo0NjozM1rOHDNjTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI0MDc2MQ==", "bodyText": "Javadoc here needs some cleanup, such as removing the space in the beginning of a line, and adding a period at the end of a sentence.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r472240761", "createdAt": "2020-08-18T14:29:32Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -285,20 +335,208 @@ public void beforeEach() {\n     }\n   }\n \n+  /**\n+   * Create a WebLogic domain with a defined configmap in configuration/model ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29f22d110d941ea9533816f54abec814aee70972"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyOTgwNg==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473129806", "createdAt": "2020-08-19T15:46:33Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -285,20 +335,208 @@ public void beforeEach() {\n     }\n   }\n \n+  /**\n+   * Create a WebLogic domain with a defined configmap in configuration/model ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI0MDc2MQ=="}, "originalCommit": {"oid": "29f22d110d941ea9533816f54abec814aee70972"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTg3MzQzOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDozNDo1NlrOHCXirw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTo0NjoyNFrOHDNi2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI0NDkxMQ==", "bodyText": "What is the replica count in the initial configuration?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r472244911", "createdAt": "2020-08-18T14:34:56Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -351,18 +589,16 @@ public void testAddMiiClusteriWithNoReplica() {\n   /**\n    * Create a configmap with a sparse model file to add a dynamic cluster.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29f22d110d941ea9533816f54abec814aee70972"}, "originalPosition": 339}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyOTY4OA==", "bodyText": "Initial replica count is 2", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473129688", "createdAt": "2020-08-19T15:46:24Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -351,18 +589,16 @@ public void testAddMiiClusteriWithNoReplica() {\n   /**\n    * Create a configmap with a sparse model file to add a dynamic cluster.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI0NDkxMQ=="}, "originalCommit": {"oid": "29f22d110d941ea9533816f54abec814aee70972"}, "originalPosition": 339}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTg3ODcxOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDozNjowMVrOHCXl0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTo0NjowM1rOHDNiAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI0NTcxNQ==", "bodyText": "javadoc needs some cleanup.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r472245715", "createdAt": "2020-08-18T14:36:01Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -507,6 +741,72 @@ public void testAddMiiConfiguredCluster() {\n     logger.info(\"Found new managed server configuration\");\n   }\n \n+  /**\n+   * Start a WebLogic domain with model-in-imge ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29f22d110d941ea9533816f54abec814aee70972"}, "originalPosition": 388}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyOTQ3NQ==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473129475", "createdAt": "2020-08-19T15:46:03Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -507,6 +741,72 @@ public void testAddMiiConfiguredCluster() {\n     logger.info(\"Found new managed server configuration\");\n   }\n \n+  /**\n+   * Start a WebLogic domain with model-in-imge ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI0NTcxNQ=="}, "originalCommit": {"oid": "29f22d110d941ea9533816f54abec814aee70972"}, "originalPosition": 388}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjA0Nzg3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNToxMjowOVrOHCZP2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTo0NTo1N1rOHDNhvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI3Mjg1Ng==", "bodyText": "typo \"repicar\".", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r472272856", "createdAt": "2020-08-18T15:12:09Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -285,20 +335,208 @@ public void beforeEach() {\n     }\n   }\n \n+  /**\n+   * Create a WebLogic domain with a defined configmap in configuration/model \n+   *  section of the domain resource.\n+   * The configmap has multiple sparse WDT model files that define \n+   *  a JDBCSystemResource, a JMSSystemResource and a WLDFSystemResource.\n+   * Verify all the SystemResource configurations using the rest API call \n+   *   using adminserver's public nodeport\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"Verify the pre-configured SystemResources in a model-in-image domain\")\n+  public void testMiiCheckSystemResources() {\n+    ExecResult result = null;\n+    result = checkSystemResourceConfiguration(\"JDBCSystemResources\", \"TestDataSource\");\n+    assertNotNull(result, \"CheckJDBCSystemResources returned null\");\n+    logger.info(\"CheckJDBCSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"JDBCSystemResource not found\");\n+    logger.info(\"Found the JDBCSystemResource configuration\");\n+\n+    result = null;\n+    result = checkSystemResourceConfiguration(\"JMSSystemResources\", \"TestClusterJmsModule\");\n+    assertNotNull(result, \"CheckJMSSystemResources returned null\");\n+    logger.info(\"CheckJMSSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"JMSSystemResource not found\");\n+    logger.info(\"Found the JMSSystemResource configuration\");\n+\n+    result = null;\n+    result = checkSystemResourceConfiguration(\"WLDFSystemResources\", \"TestWldfModule\");\n+    assertNotNull(result, \"CheckWLDFSystemResources returned null\");\n+    logger.info(\"CheckWLDFSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"WLDFSystemResource not found\");\n+    logger.info(\"Found the WLDFSystemResource configuration\");\n+\n+    result = null;\n+    result = checkJdbcRuntime(\"TestDataSource\");\n+    logger.info(\"checkJdbcRuntime: returned {0}\", result.toString());\n+    assertTrue(result.stdout().contains(\"jdbc:oracle:thin:localhost\"),\n+         String.format(\"DB URL does not match with RuntimeMBean Info\"));\n+    assertTrue(result.stdout().contains(\"scott\"),\n+         String.format(\"DB user name does not match with RuntimeMBean Info\"));\n+    logger.info(\"Found the JDBCSystemResource configuration\");\n+\n+  }\n+\n+  /**\n+   * Start a WebLogic domain using model-in-image with JMS/JDBC SystemResource.\n+   * Create a configmap to delete JMS/JDBC System Resource.\n+   * Patch the domain resource with the configmap.\n+   * Update the restart version of the domain resource.\n+   * Verify rolling restart of the domain by comparing PodCreationTimestamp\n+   * for all the server pods before and after rolling restart.\n+   * Verify System Resource are deleted from the domain.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"Delete SystemResources from a model-in-image domain\")\n+  public void testMiiDeleteSystemResources() {\n+\n+    String configMapName = \"deletesysrescm\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.delete.sysresources.yaml\"));\n+\n+    LinkedHashMap<String, DateTime> pods = new LinkedHashMap<>();\n+    // get the creation time of the admin server pod before patching\n+    DateTime adminPodCreationTime = getPodCreationTime(domainNamespace,adminServerPodName);\n+    pods.put(adminServerPodName, adminPodCreationTime);\n+    // get the creation time of the managed server pods before patching\n+    for (int i = 1; i <= replicaCount; i++) {\n+      pods.put(managedServerPrefix + i, getPodCreationTime(domainNamespace, managedServerPrefix + i));\n+    }\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/configuration/model/configMap\\\",\")\n+        .append(\" \\\"value\\\":  \\\"\" + configMapName + \"\\\"\")\n+        .append(\" }]\");\n+    logger.log(Level.INFO, \"Configmap patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean cmPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(configMap)  failed \");\n+    assertTrue(cmPatched, \"patchDomainCustomResource(configMap) failed\");\n+\n+    String newRestartVersion = patchDomainResourceWithNewRestartVersion(domainUid, domainNamespace);\n+    logger.log(Level.INFO, \"New restart version is {0}\", newRestartVersion);\n+    \n+    assertTrue(assertDoesNotThrow(\n+        () -> (verifyRollingRestartOccurred(pods, 1, domainNamespace)),\n+         \"More than one pod was restarted at same time\"),\n+        \"Rolling restart failed\");\n+\n+    // Even if pods are created, need the service to created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+   \n+    ExecResult result = null;\n+    result = checkSystemResourceConfiguration(\"JDBCSystemResources\", \"TestDataSource\");\n+    assertNotNull(result, \"CheckJDBCSystemResources returned null\");\n+    logger.info(\"CheckJDBCSystemResource returned {0}\", result.toString());\n+    assertEquals(\"404\", result.stdout(), \"JDBCSystemResource not found\");\n+    logger.info(\"JDBCSystemResource configuration not found\");\n+\n+    result = null;\n+    result = checkSystemResourceConfiguration(\"JMSSystemResources\", \"TestClusterJmsModule\");\n+    assertNotNull(result, \"CheckJMSSystemResources returned null\");\n+    logger.info(\"CheckJMSSystemResource returned {0}\", result.toString());\n+    assertEquals(\"404\", result.stdout(), \"JMSSystemResource not found\");\n+    logger.info(\"JMSSystemResource configuration not found\");\n+\n+  }\n+\n+  /**\n+   * Start a WebLogic domain using model-in-image.\n+   * Create a configmap with sparse JDBC/JMS model files.\n+   * Patch the domain resource with the configmap.\n+   * Update the restart version of the domain resource.\n+   * Verify rolling restart of the domain by comparing PodCreationTimestamp\n+   * for all the server pods before and after rolling restart.\n+   * Verify SystemResource configurations using Rest API call to admin server.\n+   */\n+  @Test\n+  @Order(3)\n+  @DisplayName(\"Add New JDBC/JMS SystemResources to a model-in-image domain\")\n+  public void testMiiAddSystemResources() {\n+\n+    logger.info(\"Use same database secret created in befreAll() method\");\n+    String configMapName = \"dsjmsconfigmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.jdbc2.yaml\", \"model.jms2.yaml\"));\n+\n+    LinkedHashMap<String, DateTime> pods = new LinkedHashMap<>();\n+    // get the creation time of the admin server pod before patching\n+    DateTime adminPodCreationTime = getPodCreationTime(domainNamespace,adminServerPodName);\n+    pods.put(adminServerPodName, adminPodCreationTime);\n+    // get the creation time of the managed server pods before patching\n+    for (int i = 1; i <= replicaCount; i++) {\n+      pods.put(managedServerPrefix + i, getPodCreationTime(domainNamespace, managedServerPrefix + i));\n+    }\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/configuration/model/configMap\\\",\")\n+        .append(\" \\\"value\\\":  \\\"\" + configMapName + \"\\\"\")\n+        .append(\" }]\");\n+    logger.log(Level.INFO, \"Configmap patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean cmPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(configMap)  failed \");\n+    assertTrue(cmPatched, \"patchDomainCustomResource(configMap) failed\");\n+\n+    String newRestartVersion = patchDomainResourceWithNewRestartVersion(domainUid, domainNamespace);\n+    logger.log(Level.INFO, \"New restart version is {0}\", newRestartVersion);\n+    \n+    assertTrue(assertDoesNotThrow(\n+        () -> (verifyRollingRestartOccurred(pods, 1, domainNamespace)),\n+         \"More than one pod was restarted at same time\"),\n+        \"Rolling restart failed\");\n+\n+    // Even if pods are created, need the service to created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+    ExecResult result = null;\n+    result = checkSystemResourceConfiguration(\"JDBCSystemResources\", \"TestDataSource2\");\n+    assertNotNull(result, \"CheckJDBCSystemResources returned null\");\n+    logger.info(\"CheckJDBCSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"JDBCSystemResource not found\");\n+    logger.info(\"Found the JDBCSystemResource configuration\");\n+\n+    result = null;\n+    result = checkSystemResourceConfiguration(\"JMSSystemResources\", \"TestClusterJmsModule2\");\n+    assertNotNull(result, \"CheckJMSSystemResources returned null\");\n+    logger.info(\"CheckJMSSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"JMSSystemResource not found\");\n+    logger.info(\"Found the JMSSystemResource configuration\");\n+  }\n+\n   /**\n    * Patch the domain resource with the configmap to add a cluster.\n-   * Update the restart version of the domain resource to 1.\n+   * Update the restart version of the domain resource.\n    * Verify rolling restart of the domain by comparing PodCreationTimestamp\n    * before and after rolling restart.\n-   * Verify servers from new cluster are not in running state, because i\n+   * Verify servers from new cluster are not in running state, because \n    * the spec level replica count to zero(default).\n    */\n   @Test\n-  @Order(1)\n-  @DisplayName(\"Add a cluster to model in image domain with default replica count\")\n-  @Slow\n-  @MustNotRunInParallel\n-  public void testAddMiiClusteriWithNoReplica() {\n+  @Order(4)\n+  @DisplayName(\"Add a dynamic cluster to a model-in-image domain with default repicar count\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29f22d110d941ea9533816f54abec814aee70972"}, "originalPosition": 332}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyOTQwNg==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473129406", "createdAt": "2020-08-19T15:45:57Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -285,20 +335,208 @@ public void beforeEach() {\n     }\n   }\n \n+  /**\n+   * Create a WebLogic domain with a defined configmap in configuration/model \n+   *  section of the domain resource.\n+   * The configmap has multiple sparse WDT model files that define \n+   *  a JDBCSystemResource, a JMSSystemResource and a WLDFSystemResource.\n+   * Verify all the SystemResource configurations using the rest API call \n+   *   using adminserver's public nodeport\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"Verify the pre-configured SystemResources in a model-in-image domain\")\n+  public void testMiiCheckSystemResources() {\n+    ExecResult result = null;\n+    result = checkSystemResourceConfiguration(\"JDBCSystemResources\", \"TestDataSource\");\n+    assertNotNull(result, \"CheckJDBCSystemResources returned null\");\n+    logger.info(\"CheckJDBCSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"JDBCSystemResource not found\");\n+    logger.info(\"Found the JDBCSystemResource configuration\");\n+\n+    result = null;\n+    result = checkSystemResourceConfiguration(\"JMSSystemResources\", \"TestClusterJmsModule\");\n+    assertNotNull(result, \"CheckJMSSystemResources returned null\");\n+    logger.info(\"CheckJMSSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"JMSSystemResource not found\");\n+    logger.info(\"Found the JMSSystemResource configuration\");\n+\n+    result = null;\n+    result = checkSystemResourceConfiguration(\"WLDFSystemResources\", \"TestWldfModule\");\n+    assertNotNull(result, \"CheckWLDFSystemResources returned null\");\n+    logger.info(\"CheckWLDFSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"WLDFSystemResource not found\");\n+    logger.info(\"Found the WLDFSystemResource configuration\");\n+\n+    result = null;\n+    result = checkJdbcRuntime(\"TestDataSource\");\n+    logger.info(\"checkJdbcRuntime: returned {0}\", result.toString());\n+    assertTrue(result.stdout().contains(\"jdbc:oracle:thin:localhost\"),\n+         String.format(\"DB URL does not match with RuntimeMBean Info\"));\n+    assertTrue(result.stdout().contains(\"scott\"),\n+         String.format(\"DB user name does not match with RuntimeMBean Info\"));\n+    logger.info(\"Found the JDBCSystemResource configuration\");\n+\n+  }\n+\n+  /**\n+   * Start a WebLogic domain using model-in-image with JMS/JDBC SystemResource.\n+   * Create a configmap to delete JMS/JDBC System Resource.\n+   * Patch the domain resource with the configmap.\n+   * Update the restart version of the domain resource.\n+   * Verify rolling restart of the domain by comparing PodCreationTimestamp\n+   * for all the server pods before and after rolling restart.\n+   * Verify System Resource are deleted from the domain.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"Delete SystemResources from a model-in-image domain\")\n+  public void testMiiDeleteSystemResources() {\n+\n+    String configMapName = \"deletesysrescm\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.delete.sysresources.yaml\"));\n+\n+    LinkedHashMap<String, DateTime> pods = new LinkedHashMap<>();\n+    // get the creation time of the admin server pod before patching\n+    DateTime adminPodCreationTime = getPodCreationTime(domainNamespace,adminServerPodName);\n+    pods.put(adminServerPodName, adminPodCreationTime);\n+    // get the creation time of the managed server pods before patching\n+    for (int i = 1; i <= replicaCount; i++) {\n+      pods.put(managedServerPrefix + i, getPodCreationTime(domainNamespace, managedServerPrefix + i));\n+    }\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/configuration/model/configMap\\\",\")\n+        .append(\" \\\"value\\\":  \\\"\" + configMapName + \"\\\"\")\n+        .append(\" }]\");\n+    logger.log(Level.INFO, \"Configmap patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean cmPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(configMap)  failed \");\n+    assertTrue(cmPatched, \"patchDomainCustomResource(configMap) failed\");\n+\n+    String newRestartVersion = patchDomainResourceWithNewRestartVersion(domainUid, domainNamespace);\n+    logger.log(Level.INFO, \"New restart version is {0}\", newRestartVersion);\n+    \n+    assertTrue(assertDoesNotThrow(\n+        () -> (verifyRollingRestartOccurred(pods, 1, domainNamespace)),\n+         \"More than one pod was restarted at same time\"),\n+        \"Rolling restart failed\");\n+\n+    // Even if pods are created, need the service to created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+   \n+    ExecResult result = null;\n+    result = checkSystemResourceConfiguration(\"JDBCSystemResources\", \"TestDataSource\");\n+    assertNotNull(result, \"CheckJDBCSystemResources returned null\");\n+    logger.info(\"CheckJDBCSystemResource returned {0}\", result.toString());\n+    assertEquals(\"404\", result.stdout(), \"JDBCSystemResource not found\");\n+    logger.info(\"JDBCSystemResource configuration not found\");\n+\n+    result = null;\n+    result = checkSystemResourceConfiguration(\"JMSSystemResources\", \"TestClusterJmsModule\");\n+    assertNotNull(result, \"CheckJMSSystemResources returned null\");\n+    logger.info(\"CheckJMSSystemResource returned {0}\", result.toString());\n+    assertEquals(\"404\", result.stdout(), \"JMSSystemResource not found\");\n+    logger.info(\"JMSSystemResource configuration not found\");\n+\n+  }\n+\n+  /**\n+   * Start a WebLogic domain using model-in-image.\n+   * Create a configmap with sparse JDBC/JMS model files.\n+   * Patch the domain resource with the configmap.\n+   * Update the restart version of the domain resource.\n+   * Verify rolling restart of the domain by comparing PodCreationTimestamp\n+   * for all the server pods before and after rolling restart.\n+   * Verify SystemResource configurations using Rest API call to admin server.\n+   */\n+  @Test\n+  @Order(3)\n+  @DisplayName(\"Add New JDBC/JMS SystemResources to a model-in-image domain\")\n+  public void testMiiAddSystemResources() {\n+\n+    logger.info(\"Use same database secret created in befreAll() method\");\n+    String configMapName = \"dsjmsconfigmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.jdbc2.yaml\", \"model.jms2.yaml\"));\n+\n+    LinkedHashMap<String, DateTime> pods = new LinkedHashMap<>();\n+    // get the creation time of the admin server pod before patching\n+    DateTime adminPodCreationTime = getPodCreationTime(domainNamespace,adminServerPodName);\n+    pods.put(adminServerPodName, adminPodCreationTime);\n+    // get the creation time of the managed server pods before patching\n+    for (int i = 1; i <= replicaCount; i++) {\n+      pods.put(managedServerPrefix + i, getPodCreationTime(domainNamespace, managedServerPrefix + i));\n+    }\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/configuration/model/configMap\\\",\")\n+        .append(\" \\\"value\\\":  \\\"\" + configMapName + \"\\\"\")\n+        .append(\" }]\");\n+    logger.log(Level.INFO, \"Configmap patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean cmPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(configMap)  failed \");\n+    assertTrue(cmPatched, \"patchDomainCustomResource(configMap) failed\");\n+\n+    String newRestartVersion = patchDomainResourceWithNewRestartVersion(domainUid, domainNamespace);\n+    logger.log(Level.INFO, \"New restart version is {0}\", newRestartVersion);\n+    \n+    assertTrue(assertDoesNotThrow(\n+        () -> (verifyRollingRestartOccurred(pods, 1, domainNamespace)),\n+         \"More than one pod was restarted at same time\"),\n+        \"Rolling restart failed\");\n+\n+    // Even if pods are created, need the service to created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+    ExecResult result = null;\n+    result = checkSystemResourceConfiguration(\"JDBCSystemResources\", \"TestDataSource2\");\n+    assertNotNull(result, \"CheckJDBCSystemResources returned null\");\n+    logger.info(\"CheckJDBCSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"JDBCSystemResource not found\");\n+    logger.info(\"Found the JDBCSystemResource configuration\");\n+\n+    result = null;\n+    result = checkSystemResourceConfiguration(\"JMSSystemResources\", \"TestClusterJmsModule2\");\n+    assertNotNull(result, \"CheckJMSSystemResources returned null\");\n+    logger.info(\"CheckJMSSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"JMSSystemResource not found\");\n+    logger.info(\"Found the JMSSystemResource configuration\");\n+  }\n+\n   /**\n    * Patch the domain resource with the configmap to add a cluster.\n-   * Update the restart version of the domain resource to 1.\n+   * Update the restart version of the domain resource.\n    * Verify rolling restart of the domain by comparing PodCreationTimestamp\n    * before and after rolling restart.\n-   * Verify servers from new cluster are not in running state, because i\n+   * Verify servers from new cluster are not in running state, because \n    * the spec level replica count to zero(default).\n    */\n   @Test\n-  @Order(1)\n-  @DisplayName(\"Add a cluster to model in image domain with default replica count\")\n-  @Slow\n-  @MustNotRunInParallel\n-  public void testAddMiiClusteriWithNoReplica() {\n+  @Order(4)\n+  @DisplayName(\"Add a dynamic cluster to a model-in-image domain with default repicar count\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI3Mjg1Ng=="}, "originalCommit": {"oid": "29f22d110d941ea9533816f54abec814aee70972"}, "originalPosition": 332}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjA2ODM2OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNToxNjozNVrOHCZceQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTo0NTo1MlrOHDNhgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI3NjA4OQ==", "bodyText": "Are we deleting multiple system resources? If so, modify the javadoc to use plural.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r472276089", "createdAt": "2020-08-18T15:16:35Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -285,20 +335,208 @@ public void beforeEach() {\n     }\n   }\n \n+  /**\n+   * Create a WebLogic domain with a defined configmap in configuration/model \n+   *  section of the domain resource.\n+   * The configmap has multiple sparse WDT model files that define \n+   *  a JDBCSystemResource, a JMSSystemResource and a WLDFSystemResource.\n+   * Verify all the SystemResource configurations using the rest API call \n+   *   using adminserver's public nodeport\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"Verify the pre-configured SystemResources in a model-in-image domain\")\n+  public void testMiiCheckSystemResources() {\n+    ExecResult result = null;\n+    result = checkSystemResourceConfiguration(\"JDBCSystemResources\", \"TestDataSource\");\n+    assertNotNull(result, \"CheckJDBCSystemResources returned null\");\n+    logger.info(\"CheckJDBCSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"JDBCSystemResource not found\");\n+    logger.info(\"Found the JDBCSystemResource configuration\");\n+\n+    result = null;\n+    result = checkSystemResourceConfiguration(\"JMSSystemResources\", \"TestClusterJmsModule\");\n+    assertNotNull(result, \"CheckJMSSystemResources returned null\");\n+    logger.info(\"CheckJMSSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"JMSSystemResource not found\");\n+    logger.info(\"Found the JMSSystemResource configuration\");\n+\n+    result = null;\n+    result = checkSystemResourceConfiguration(\"WLDFSystemResources\", \"TestWldfModule\");\n+    assertNotNull(result, \"CheckWLDFSystemResources returned null\");\n+    logger.info(\"CheckWLDFSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"WLDFSystemResource not found\");\n+    logger.info(\"Found the WLDFSystemResource configuration\");\n+\n+    result = null;\n+    result = checkJdbcRuntime(\"TestDataSource\");\n+    logger.info(\"checkJdbcRuntime: returned {0}\", result.toString());\n+    assertTrue(result.stdout().contains(\"jdbc:oracle:thin:localhost\"),\n+         String.format(\"DB URL does not match with RuntimeMBean Info\"));\n+    assertTrue(result.stdout().contains(\"scott\"),\n+         String.format(\"DB user name does not match with RuntimeMBean Info\"));\n+    logger.info(\"Found the JDBCSystemResource configuration\");\n+\n+  }\n+\n+  /**\n+   * Start a WebLogic domain using model-in-image with JMS/JDBC SystemResource.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29f22d110d941ea9533816f54abec814aee70972"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyOTM0Nw==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473129347", "createdAt": "2020-08-19T15:45:52Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -285,20 +335,208 @@ public void beforeEach() {\n     }\n   }\n \n+  /**\n+   * Create a WebLogic domain with a defined configmap in configuration/model \n+   *  section of the domain resource.\n+   * The configmap has multiple sparse WDT model files that define \n+   *  a JDBCSystemResource, a JMSSystemResource and a WLDFSystemResource.\n+   * Verify all the SystemResource configurations using the rest API call \n+   *   using adminserver's public nodeport\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"Verify the pre-configured SystemResources in a model-in-image domain\")\n+  public void testMiiCheckSystemResources() {\n+    ExecResult result = null;\n+    result = checkSystemResourceConfiguration(\"JDBCSystemResources\", \"TestDataSource\");\n+    assertNotNull(result, \"CheckJDBCSystemResources returned null\");\n+    logger.info(\"CheckJDBCSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"JDBCSystemResource not found\");\n+    logger.info(\"Found the JDBCSystemResource configuration\");\n+\n+    result = null;\n+    result = checkSystemResourceConfiguration(\"JMSSystemResources\", \"TestClusterJmsModule\");\n+    assertNotNull(result, \"CheckJMSSystemResources returned null\");\n+    logger.info(\"CheckJMSSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"JMSSystemResource not found\");\n+    logger.info(\"Found the JMSSystemResource configuration\");\n+\n+    result = null;\n+    result = checkSystemResourceConfiguration(\"WLDFSystemResources\", \"TestWldfModule\");\n+    assertNotNull(result, \"CheckWLDFSystemResources returned null\");\n+    logger.info(\"CheckWLDFSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"WLDFSystemResource not found\");\n+    logger.info(\"Found the WLDFSystemResource configuration\");\n+\n+    result = null;\n+    result = checkJdbcRuntime(\"TestDataSource\");\n+    logger.info(\"checkJdbcRuntime: returned {0}\", result.toString());\n+    assertTrue(result.stdout().contains(\"jdbc:oracle:thin:localhost\"),\n+         String.format(\"DB URL does not match with RuntimeMBean Info\"));\n+    assertTrue(result.stdout().contains(\"scott\"),\n+         String.format(\"DB user name does not match with RuntimeMBean Info\"));\n+    logger.info(\"Found the JDBCSystemResource configuration\");\n+\n+  }\n+\n+  /**\n+   * Start a WebLogic domain using model-in-image with JMS/JDBC SystemResource.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI3NjA4OQ=="}, "originalCommit": {"oid": "29f22d110d941ea9533816f54abec814aee70972"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjEyODU4OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNToyOToyM1rOHCaB0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTo0NTo0NlrOHDNhSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4NTY0OA==", "bodyText": "Typo \"validitity\".", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r472285648", "createdAt": "2020-08-18T15:29:23Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -507,6 +741,72 @@ public void testAddMiiConfiguredCluster() {\n     logger.info(\"Found new managed server configuration\");\n   }\n \n+  /**\n+   * Start a WebLogic domain with model-in-imge \n+   * Patch domain CRD with new webLogicCredentialsSecret.\n+   * Update domainRestartVersion to trigger a rolling restart of server pods.\n+   * make sure all the server pods are re-started in a rolling fashion. \n+   * Check the validitity of new credentials by accessing ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29f22d110d941ea9533816f54abec814aee70972"}, "originalPosition": 392}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyOTI5MQ==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473129291", "createdAt": "2020-08-19T15:45:46Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -507,6 +741,72 @@ public void testAddMiiConfiguredCluster() {\n     logger.info(\"Found new managed server configuration\");\n   }\n \n+  /**\n+   * Start a WebLogic domain with model-in-imge \n+   * Patch domain CRD with new webLogicCredentialsSecret.\n+   * Update domainRestartVersion to trigger a rolling restart of server pods.\n+   * make sure all the server pods are re-started in a rolling fashion. \n+   * Check the validitity of new credentials by accessing ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4NTY0OA=="}, "originalCommit": {"oid": "29f22d110d941ea9533816f54abec814aee70972"}, "originalPosition": 392}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODE2Njk0OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTowNzozNFrOHDVXGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjozNTo0N1rOHDdpIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1Nzc1Mw==", "bodyText": "SystemResource typo, Check the SystemResources in a pre-configured ConfigMap", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473257753", "createdAt": "2020-08-19T19:07:34Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -81,21 +84,55 @@\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonPatchTestUtils.patchDomainWithNewSecretAndVerify;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.verifyCredentials;\n import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n import static org.awaitility.Awaitility.with;\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+/**\n+ * This test class verifies the following scenerios\n+ *\n+ * <p>testMiiCheckSystemResources\n+ *  Check the SystemResourece in a pre-configured in ConfigMap", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1285a972188e83c1b3744103aed389a53a35a107"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM5MzQ0Mw==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473393443", "createdAt": "2020-08-19T22:35:47Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -81,21 +84,55 @@\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonPatchTestUtils.patchDomainWithNewSecretAndVerify;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.verifyCredentials;\n import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n import static org.awaitility.Awaitility.with;\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+/**\n+ * This test class verifies the following scenerios\n+ *\n+ * <p>testMiiCheckSystemResources\n+ *  Check the SystemResourece in a pre-configured in ConfigMap", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1Nzc1Mw=="}, "originalCommit": {"oid": "1285a972188e83c1b3744103aed389a53a35a107"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODE3MTgxOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTowOTowM1rOHDVaLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjozNTo1MlrOHDdpbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1ODU0MA==", "bodyText": "SystemResources", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473258540", "createdAt": "2020-08-19T19:09:03Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -81,21 +84,55 @@\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonPatchTestUtils.patchDomainWithNewSecretAndVerify;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.verifyCredentials;\n import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n import static org.awaitility.Awaitility.with;\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+/**\n+ * This test class verifies the following scenerios\n+ *\n+ * <p>testMiiCheckSystemResources\n+ *  Check the SystemResourece in a pre-configured in ConfigMap\n+ *\n+ * <p>testMiiDeleteSystemResources\n+ *  Delete SystemResourece(s) defined in WebLogic domain ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1285a972188e83c1b3744103aed389a53a35a107"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM5MzUxNw==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473393517", "createdAt": "2020-08-19T22:35:52Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -81,21 +84,55 @@\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonPatchTestUtils.patchDomainWithNewSecretAndVerify;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.verifyCredentials;\n import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n import static org.awaitility.Awaitility.with;\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+/**\n+ * This test class verifies the following scenerios\n+ *\n+ * <p>testMiiCheckSystemResources\n+ *  Check the SystemResourece in a pre-configured in ConfigMap\n+ *\n+ * <p>testMiiDeleteSystemResources\n+ *  Delete SystemResourece(s) defined in WebLogic domain ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1ODU0MA=="}, "originalCommit": {"oid": "1285a972188e83c1b3744103aed389a53a35a107"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODE3NDY1OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTowOTo1NVrOHDVb6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjozNjozM1rOHDdrRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1ODk4NQ==", "bodyText": "managed typo", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473258985", "createdAt": "2020-08-19T19:09:55Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -81,21 +84,55 @@\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonPatchTestUtils.patchDomainWithNewSecretAndVerify;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.verifyCredentials;\n import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n import static org.awaitility.Awaitility.with;\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+/**\n+ * This test class verifies the following scenerios\n+ *\n+ * <p>testMiiCheckSystemResources\n+ *  Check the SystemResourece in a pre-configured in ConfigMap\n+ *\n+ * <p>testMiiDeleteSystemResources\n+ *  Delete SystemResourece(s) defined in WebLogic domain \n+ *\n+ * <p>testMiiAddSystemResources\n+ *  Add new SystemResources to a running domain\n+ *\n+ * <p>testMiiAddDynmicClusteriWithNoReplica\n+ *  Add a new dynamic WebLogic cluster to a running domain with default Replica\n+ *  count(zero), so that no manged server on the new cluster is activated.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1285a972188e83c1b3744103aed389a53a35a107"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM5Mzk5MA==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473393990", "createdAt": "2020-08-19T22:36:33Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -81,21 +84,55 @@\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonPatchTestUtils.patchDomainWithNewSecretAndVerify;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.verifyCredentials;\n import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n import static org.awaitility.Awaitility.with;\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+/**\n+ * This test class verifies the following scenerios\n+ *\n+ * <p>testMiiCheckSystemResources\n+ *  Check the SystemResourece in a pre-configured in ConfigMap\n+ *\n+ * <p>testMiiDeleteSystemResources\n+ *  Delete SystemResourece(s) defined in WebLogic domain \n+ *\n+ * <p>testMiiAddSystemResources\n+ *  Add new SystemResources to a running domain\n+ *\n+ * <p>testMiiAddDynmicClusteriWithNoReplica\n+ *  Add a new dynamic WebLogic cluster to a running domain with default Replica\n+ *  count(zero), so that no manged server on the new cluster is activated.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1ODk4NQ=="}, "originalCommit": {"oid": "1285a972188e83c1b3744103aed389a53a35a107"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODE3NTAwOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOToxMDowM1rOHDVcKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjozNjo0MVrOHDdrnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1OTA1MQ==", "bodyText": "managed typo", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473259051", "createdAt": "2020-08-19T19:10:03Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -81,21 +84,55 @@\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonPatchTestUtils.patchDomainWithNewSecretAndVerify;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.verifyCredentials;\n import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n import static org.awaitility.Awaitility.with;\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+/**\n+ * This test class verifies the following scenerios\n+ *\n+ * <p>testMiiCheckSystemResources\n+ *  Check the SystemResourece in a pre-configured in ConfigMap\n+ *\n+ * <p>testMiiDeleteSystemResources\n+ *  Delete SystemResourece(s) defined in WebLogic domain \n+ *\n+ * <p>testMiiAddSystemResources\n+ *  Add new SystemResources to a running domain\n+ *\n+ * <p>testMiiAddDynmicClusteriWithNoReplica\n+ *  Add a new dynamic WebLogic cluster to a running domain with default Replica\n+ *  count(zero), so that no manged server on the new cluster is activated.\n+ *\n+ * <p>testMiiAddDynamicCluster\n+ *  Add a new dynamic WebLogic cluster to a running domain with non-zero Replica\n+ *  count so that required number of manged servers(s) on new cluster get  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1285a972188e83c1b3744103aed389a53a35a107"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM5NDA3Ng==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473394076", "createdAt": "2020-08-19T22:36:41Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -81,21 +84,55 @@\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonPatchTestUtils.patchDomainWithNewSecretAndVerify;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.verifyCredentials;\n import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n import static org.awaitility.Awaitility.with;\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+/**\n+ * This test class verifies the following scenerios\n+ *\n+ * <p>testMiiCheckSystemResources\n+ *  Check the SystemResourece in a pre-configured in ConfigMap\n+ *\n+ * <p>testMiiDeleteSystemResources\n+ *  Delete SystemResourece(s) defined in WebLogic domain \n+ *\n+ * <p>testMiiAddSystemResources\n+ *  Add new SystemResources to a running domain\n+ *\n+ * <p>testMiiAddDynmicClusteriWithNoReplica\n+ *  Add a new dynamic WebLogic cluster to a running domain with default Replica\n+ *  count(zero), so that no manged server on the new cluster is activated.\n+ *\n+ * <p>testMiiAddDynamicCluster\n+ *  Add a new dynamic WebLogic cluster to a running domain with non-zero Replica\n+ *  count so that required number of manged servers(s) on new cluster get  ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1OTA1MQ=="}, "originalCommit": {"oid": "1285a972188e83c1b3744103aed389a53a35a107"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODE3NTU3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOToxMDoxM1rOHDVciA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjozNzoyN1rOHDdtuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1OTE0NA==", "bodyText": "activated", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473259144", "createdAt": "2020-08-19T19:10:13Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -81,21 +84,55 @@\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonPatchTestUtils.patchDomainWithNewSecretAndVerify;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.verifyCredentials;\n import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n import static org.awaitility.Awaitility.with;\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+/**\n+ * This test class verifies the following scenerios\n+ *\n+ * <p>testMiiCheckSystemResources\n+ *  Check the SystemResourece in a pre-configured in ConfigMap\n+ *\n+ * <p>testMiiDeleteSystemResources\n+ *  Delete SystemResourece(s) defined in WebLogic domain \n+ *\n+ * <p>testMiiAddSystemResources\n+ *  Add new SystemResources to a running domain\n+ *\n+ * <p>testMiiAddDynmicClusteriWithNoReplica\n+ *  Add a new dynamic WebLogic cluster to a running domain with default Replica\n+ *  count(zero), so that no manged server on the new cluster is activated.\n+ *\n+ * <p>testMiiAddDynamicCluster\n+ *  Add a new dynamic WebLogic cluster to a running domain with non-zero Replica\n+ *  count so that required number of manged servers(s) on new cluster get  \n+ *  activted after rolling restart. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1285a972188e83c1b3744103aed389a53a35a107"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM5NDYxOQ==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473394619", "createdAt": "2020-08-19T22:37:27Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -81,21 +84,55 @@\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonPatchTestUtils.patchDomainWithNewSecretAndVerify;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.verifyCredentials;\n import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n import static org.awaitility.Awaitility.with;\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+/**\n+ * This test class verifies the following scenerios\n+ *\n+ * <p>testMiiCheckSystemResources\n+ *  Check the SystemResourece in a pre-configured in ConfigMap\n+ *\n+ * <p>testMiiDeleteSystemResources\n+ *  Delete SystemResourece(s) defined in WebLogic domain \n+ *\n+ * <p>testMiiAddSystemResources\n+ *  Add new SystemResources to a running domain\n+ *\n+ * <p>testMiiAddDynmicClusteriWithNoReplica\n+ *  Add a new dynamic WebLogic cluster to a running domain with default Replica\n+ *  count(zero), so that no manged server on the new cluster is activated.\n+ *\n+ * <p>testMiiAddDynamicCluster\n+ *  Add a new dynamic WebLogic cluster to a running domain with non-zero Replica\n+ *  count so that required number of manged servers(s) on new cluster get  \n+ *  activted after rolling restart. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1OTE0NA=="}, "originalCommit": {"oid": "1285a972188e83c1b3744103aed389a53a35a107"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODE3OTAxOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOToxMToxOVrOHDVerg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOTo0MzoxM1rOHEQx7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1OTY5NA==", "bodyText": "administrative", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473259694", "createdAt": "2020-08-19T19:11:19Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -81,21 +84,55 @@\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonPatchTestUtils.patchDomainWithNewSecretAndVerify;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.verifyCredentials;\n import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n import static org.awaitility.Awaitility.with;\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+/**\n+ * This test class verifies the following scenerios\n+ *\n+ * <p>testMiiCheckSystemResources\n+ *  Check the SystemResourece in a pre-configured in ConfigMap\n+ *\n+ * <p>testMiiDeleteSystemResources\n+ *  Delete SystemResourece(s) defined in WebLogic domain \n+ *\n+ * <p>testMiiAddSystemResources\n+ *  Add new SystemResources to a running domain\n+ *\n+ * <p>testMiiAddDynmicClusteriWithNoReplica\n+ *  Add a new dynamic WebLogic cluster to a running domain with default Replica\n+ *  count(zero), so that no manged server on the new cluster is activated.\n+ *\n+ * <p>testMiiAddDynamicCluster\n+ *  Add a new dynamic WebLogic cluster to a running domain with non-zero Replica\n+ *  count so that required number of manged servers(s) on new cluster get  \n+ *  activted after rolling restart. \n+ *\n+ * <p>testMiiAddConfiguredCluster\n+ *  Add a new configured WebLogic cluster to a running domain \n+ *\n+ * <p>testMiiUpdateWebLogicCredential\n+ *  Update the adminstrative credential of a running domain by updating the ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1285a972188e83c1b3744103aed389a53a35a107"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIzMTI3Ng==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r474231276", "createdAt": "2020-08-20T19:43:13Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -81,21 +84,55 @@\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonPatchTestUtils.patchDomainWithNewSecretAndVerify;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.verifyCredentials;\n import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n import static org.awaitility.Awaitility.with;\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+/**\n+ * This test class verifies the following scenerios\n+ *\n+ * <p>testMiiCheckSystemResources\n+ *  Check the SystemResourece in a pre-configured in ConfigMap\n+ *\n+ * <p>testMiiDeleteSystemResources\n+ *  Delete SystemResourece(s) defined in WebLogic domain \n+ *\n+ * <p>testMiiAddSystemResources\n+ *  Add new SystemResources to a running domain\n+ *\n+ * <p>testMiiAddDynmicClusteriWithNoReplica\n+ *  Add a new dynamic WebLogic cluster to a running domain with default Replica\n+ *  count(zero), so that no manged server on the new cluster is activated.\n+ *\n+ * <p>testMiiAddDynamicCluster\n+ *  Add a new dynamic WebLogic cluster to a running domain with non-zero Replica\n+ *  count so that required number of manged servers(s) on new cluster get  \n+ *  activted after rolling restart. \n+ *\n+ * <p>testMiiAddConfiguredCluster\n+ *  Add a new configured WebLogic cluster to a running domain \n+ *\n+ * <p>testMiiUpdateWebLogicCredential\n+ *  Update the adminstrative credential of a running domain by updating the ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1OTY5NA=="}, "originalCommit": {"oid": "1285a972188e83c1b3744103aed389a53a35a107"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODE5MDQ5OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOToxNDo0M1rOHDVlxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMzowMDoyMFrOHEWBvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI2MTUxMA==", "bodyText": "remove old code and use installAndVerifyOperator utility method in initAll()", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473261510", "createdAt": "2020-08-19T19:14:43Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -81,21 +84,55 @@\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonPatchTestUtils.patchDomainWithNewSecretAndVerify;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.verifyCredentials;\n import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n import static org.awaitility.Awaitility.with;\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+/**\n+ * This test class verifies the following scenerios\n+ *\n+ * <p>testMiiCheckSystemResources\n+ *  Check the SystemResourece in a pre-configured in ConfigMap\n+ *\n+ * <p>testMiiDeleteSystemResources\n+ *  Delete SystemResourece(s) defined in WebLogic domain \n+ *\n+ * <p>testMiiAddSystemResources\n+ *  Add new SystemResources to a running domain\n+ *\n+ * <p>testMiiAddDynmicClusteriWithNoReplica\n+ *  Add a new dynamic WebLogic cluster to a running domain with default Replica\n+ *  count(zero), so that no manged server on the new cluster is activated.\n+ *\n+ * <p>testMiiAddDynamicCluster\n+ *  Add a new dynamic WebLogic cluster to a running domain with non-zero Replica\n+ *  count so that required number of manged servers(s) on new cluster get  \n+ *  activted after rolling restart. \n+ *\n+ * <p>testMiiAddConfiguredCluster\n+ *  Add a new configured WebLogic cluster to a running domain \n+ *\n+ * <p>testMiiUpdateWebLogicCredential\n+ *  Update the adminstrative credential of a running domain by updating the \n+ *  secret and activating a rolling restart.\n+ */\n+\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@DisplayName(\"Test to add a cluster to model in image domain\")\n+@DisplayName(\"Test add SystemResources, Clusters to model in image domain\")\n @IntegrationTest\n-class ItMiiAddCluster {\n+class ItMiiUpdateDomainConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1285a972188e83c1b3744103aed389a53a35a107"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMxNzI0Nw==", "bodyText": "Added installAndVerifyOperator to replace the old code.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r474317247", "createdAt": "2020-08-20T23:00:20Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -81,21 +84,55 @@\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonPatchTestUtils.patchDomainWithNewSecretAndVerify;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.verifyCredentials;\n import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n import static org.awaitility.Awaitility.with;\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+/**\n+ * This test class verifies the following scenerios\n+ *\n+ * <p>testMiiCheckSystemResources\n+ *  Check the SystemResourece in a pre-configured in ConfigMap\n+ *\n+ * <p>testMiiDeleteSystemResources\n+ *  Delete SystemResourece(s) defined in WebLogic domain \n+ *\n+ * <p>testMiiAddSystemResources\n+ *  Add new SystemResources to a running domain\n+ *\n+ * <p>testMiiAddDynmicClusteriWithNoReplica\n+ *  Add a new dynamic WebLogic cluster to a running domain with default Replica\n+ *  count(zero), so that no manged server on the new cluster is activated.\n+ *\n+ * <p>testMiiAddDynamicCluster\n+ *  Add a new dynamic WebLogic cluster to a running domain with non-zero Replica\n+ *  count so that required number of manged servers(s) on new cluster get  \n+ *  activted after rolling restart. \n+ *\n+ * <p>testMiiAddConfiguredCluster\n+ *  Add a new configured WebLogic cluster to a running domain \n+ *\n+ * <p>testMiiUpdateWebLogicCredential\n+ *  Update the adminstrative credential of a running domain by updating the \n+ *  secret and activating a rolling restart.\n+ */\n+\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@DisplayName(\"Test to add a cluster to model in image domain\")\n+@DisplayName(\"Test add SystemResources, Clusters to model in image domain\")\n @IntegrationTest\n-class ItMiiAddCluster {\n+class ItMiiUpdateDomainConfig {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI2MTUxMA=="}, "originalCommit": {"oid": "1285a972188e83c1b3744103aed389a53a35a107"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODI3MzM5OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTozOTo1OFrOHDWYpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMzowMjo0NFrOHDe2gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3NDUzNQ==", "bodyText": "If you want to refactor the code in the same PR, you can use the below code, change return type to boolean\nreturn new Command()\n          .withParams(new CommandParams()\n              .command(curlString.toString()))\n          .executeAndVerify(\"200\");\n\nFrom the calling code,\nassertTrue(checkSystemResourceConfiguration(\"JDBCSystemResources\", \"TestDataSource\"), \"JDBCSystemResource is not found\");", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473274535", "createdAt": "2020-08-19T19:39:58Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -685,4 +1006,50 @@ private void createClusterConfigMap(String configMapName, String modelFile) {\n     assertTrue(cmCreated, String.format(\"createConfigMap failed while creating ConfigMap %s\", configMapName));\n   }\n \n+  private ExecResult checkSystemResourceConfiguration(String resourcesType, String resourcesName) {\n+\n+    int adminServiceNodePort = getServiceNodePort(domainNamespace, adminServerPodName + \"-external\", \"default\");\n+    ExecResult result = null;\n+    curlString = new StringBuffer(\"status=$(curl --user weblogic:welcome1 \");\n+    curlString.append(\"http://\" + K8S_NODEPORT_HOST + \":\" + adminServiceNodePort)\n+         .append(\"/management/weblogic/latest/domainConfig\")\n+         .append(\"/\")\n+         .append(resourcesType)\n+         .append(\"/\")\n+         .append(resourcesName)\n+         .append(\"/\")\n+         .append(\" --silent --show-error \")\n+         .append(\" -o /dev/null \")\n+         .append(\" -w %{http_code});\")\n+         .append(\"echo ${status}\");\n+    logger.info(\"checkSystemResource: curl command {0}\", new String(curlString));\n+    try {\n+      result = exec(new String(curlString), true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1285a972188e83c1b3744103aed389a53a35a107"}, "originalPosition": 529}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQxMzI0OA==", "bodyText": "In some case I check for 200 and in some cases I check for 404. So I updated the utility method to check for 200 by default and used assertTrue/assertFalse to verify the availability of SystemResource", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473413248", "createdAt": "2020-08-19T23:02:44Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -685,4 +1006,50 @@ private void createClusterConfigMap(String configMapName, String modelFile) {\n     assertTrue(cmCreated, String.format(\"createConfigMap failed while creating ConfigMap %s\", configMapName));\n   }\n \n+  private ExecResult checkSystemResourceConfiguration(String resourcesType, String resourcesName) {\n+\n+    int adminServiceNodePort = getServiceNodePort(domainNamespace, adminServerPodName + \"-external\", \"default\");\n+    ExecResult result = null;\n+    curlString = new StringBuffer(\"status=$(curl --user weblogic:welcome1 \");\n+    curlString.append(\"http://\" + K8S_NODEPORT_HOST + \":\" + adminServiceNodePort)\n+         .append(\"/management/weblogic/latest/domainConfig\")\n+         .append(\"/\")\n+         .append(resourcesType)\n+         .append(\"/\")\n+         .append(resourcesName)\n+         .append(\"/\")\n+         .append(\" --silent --show-error \")\n+         .append(\" -o /dev/null \")\n+         .append(\" -w %{http_code});\")\n+         .append(\"echo ${status}\");\n+    logger.info(\"checkSystemResource: curl command {0}\", new String(curlString));\n+    try {\n+      result = exec(new String(curlString), true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3NDUzNQ=="}, "originalCommit": {"oid": "1285a972188e83c1b3744103aed389a53a35a107"}, "originalPosition": 529}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODI3NzAwOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTo0MTowNVrOHDWa4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMDo1Mzo0OVrOHDjcCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3NTEwNA==", "bodyText": "you can replace these lines with single line if you refactor the code, scroll down to check checkSystemResourceConfiguration()", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473275104", "createdAt": "2020-08-19T19:41:05Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -285,20 +335,208 @@ public void beforeEach() {\n     }\n   }\n \n+  /**\n+   * Create a WebLogic domain with a defined configmap in configuration/model \n+   * section of the domain resource.\n+   * The configmap has multiple sparse WDT model files that define \n+   * a JDBCSystemResource, a JMSSystemResource and a WLDFSystemResource.\n+   * Verify all the SystemResource configurations using the rest API call \n+   * using the public nodeport of the administration server.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"Verify the pre-configured SystemResources in a model-in-image domain\")\n+  public void testMiiCheckSystemResources() {\n+    ExecResult result = null;\n+    result = checkSystemResourceConfiguration(\"JDBCSystemResources\", \"TestDataSource\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1285a972188e83c1b3744103aed389a53a35a107"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ4ODM5NQ==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473488395", "createdAt": "2020-08-20T00:53:49Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -285,20 +335,208 @@ public void beforeEach() {\n     }\n   }\n \n+  /**\n+   * Create a WebLogic domain with a defined configmap in configuration/model \n+   * section of the domain resource.\n+   * The configmap has multiple sparse WDT model files that define \n+   * a JDBCSystemResource, a JMSSystemResource and a WLDFSystemResource.\n+   * Verify all the SystemResource configurations using the rest API call \n+   * using the public nodeport of the administration server.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"Verify the pre-configured SystemResources in a model-in-image domain\")\n+  public void testMiiCheckSystemResources() {\n+    ExecResult result = null;\n+    result = checkSystemResourceConfiguration(\"JDBCSystemResources\", \"TestDataSource\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3NTEwNA=="}, "originalCommit": {"oid": "1285a972188e83c1b3744103aed389a53a35a107"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODI3NzQxOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTo0MToxNlrOHDWbIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMDo1Mzo1NFrOHDjcNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3NTE3MA==", "bodyText": "same as above", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473275170", "createdAt": "2020-08-19T19:41:16Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -285,20 +335,208 @@ public void beforeEach() {\n     }\n   }\n \n+  /**\n+   * Create a WebLogic domain with a defined configmap in configuration/model \n+   * section of the domain resource.\n+   * The configmap has multiple sparse WDT model files that define \n+   * a JDBCSystemResource, a JMSSystemResource and a WLDFSystemResource.\n+   * Verify all the SystemResource configurations using the rest API call \n+   * using the public nodeport of the administration server.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"Verify the pre-configured SystemResources in a model-in-image domain\")\n+  public void testMiiCheckSystemResources() {\n+    ExecResult result = null;\n+    result = checkSystemResourceConfiguration(\"JDBCSystemResources\", \"TestDataSource\");\n+    assertNotNull(result, \"CheckJDBCSystemResources returned null\");\n+    logger.info(\"CheckJDBCSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"JDBCSystemResource not found\");\n+    logger.info(\"Found the JDBCSystemResource configuration\");\n+\n+    result = null;\n+    result = checkSystemResourceConfiguration(\"JMSSystemResources\", \"TestClusterJmsModule\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1285a972188e83c1b3744103aed389a53a35a107"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ4ODQzNg==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473488436", "createdAt": "2020-08-20T00:53:54Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -285,20 +335,208 @@ public void beforeEach() {\n     }\n   }\n \n+  /**\n+   * Create a WebLogic domain with a defined configmap in configuration/model \n+   * section of the domain resource.\n+   * The configmap has multiple sparse WDT model files that define \n+   * a JDBCSystemResource, a JMSSystemResource and a WLDFSystemResource.\n+   * Verify all the SystemResource configurations using the rest API call \n+   * using the public nodeport of the administration server.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"Verify the pre-configured SystemResources in a model-in-image domain\")\n+  public void testMiiCheckSystemResources() {\n+    ExecResult result = null;\n+    result = checkSystemResourceConfiguration(\"JDBCSystemResources\", \"TestDataSource\");\n+    assertNotNull(result, \"CheckJDBCSystemResources returned null\");\n+    logger.info(\"CheckJDBCSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"JDBCSystemResource not found\");\n+    logger.info(\"Found the JDBCSystemResource configuration\");\n+\n+    result = null;\n+    result = checkSystemResourceConfiguration(\"JMSSystemResources\", \"TestClusterJmsModule\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3NTE3MA=="}, "originalCommit": {"oid": "1285a972188e83c1b3744103aed389a53a35a107"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODI3OTg5OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTo0MjowNlrOHDWcwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjozODozNlrOHDdwyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3NTU4NA==", "bodyText": "Resources", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473275584", "createdAt": "2020-08-19T19:42:06Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -285,20 +335,208 @@ public void beforeEach() {\n     }\n   }\n \n+  /**\n+   * Create a WebLogic domain with a defined configmap in configuration/model \n+   * section of the domain resource.\n+   * The configmap has multiple sparse WDT model files that define \n+   * a JDBCSystemResource, a JMSSystemResource and a WLDFSystemResource.\n+   * Verify all the SystemResource configurations using the rest API call \n+   * using the public nodeport of the administration server.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"Verify the pre-configured SystemResources in a model-in-image domain\")\n+  public void testMiiCheckSystemResources() {\n+    ExecResult result = null;\n+    result = checkSystemResourceConfiguration(\"JDBCSystemResources\", \"TestDataSource\");\n+    assertNotNull(result, \"CheckJDBCSystemResources returned null\");\n+    logger.info(\"CheckJDBCSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"JDBCSystemResource not found\");\n+    logger.info(\"Found the JDBCSystemResource configuration\");\n+\n+    result = null;\n+    result = checkSystemResourceConfiguration(\"JMSSystemResources\", \"TestClusterJmsModule\");\n+    assertNotNull(result, \"CheckJMSSystemResources returned null\");\n+    logger.info(\"CheckJMSSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"JMSSystemResource not found\");\n+    logger.info(\"Found the JMSSystemResource configuration\");\n+\n+    result = null;\n+    result = checkSystemResourceConfiguration(\"WLDFSystemResources\", \"TestWldfModule\");\n+    assertNotNull(result, \"CheckWLDFSystemResources returned null\");\n+    logger.info(\"CheckWLDFSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"WLDFSystemResource not found\");\n+    logger.info(\"Found the WLDFSystemResource configuration\");\n+\n+    result = null;\n+    result = checkJdbcRuntime(\"TestDataSource\");\n+    logger.info(\"checkJdbcRuntime: returned {0}\", result.toString());\n+    assertTrue(result.stdout().contains(\"jdbc:oracle:thin:localhost\"),\n+         String.format(\"DB URL does not match with RuntimeMBean Info\"));\n+    assertTrue(result.stdout().contains(\"scott\"),\n+         String.format(\"DB user name does not match with RuntimeMBean Info\"));\n+    logger.info(\"Found the JDBCSystemResource configuration\");\n+\n+  }\n+\n+  /**\n+   * Start a WebLogic domain using model-in-image with JMS/JDBC SystemResources.\n+   * Create a configmap to delete JMS/JDBC SystemResources.\n+   * Patch the domain resource with the configmap.\n+   * Update the restart version of the domain resource.\n+   * Verify rolling restart of the domain by comparing PodCreationTimestamp\n+   * for all the server pods before and after rolling restart.\n+   * Verify System Resource are deleted from the domain.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1285a972188e83c1b3744103aed389a53a35a107"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM5NTQwMw==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473395403", "createdAt": "2020-08-19T22:38:36Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -285,20 +335,208 @@ public void beforeEach() {\n     }\n   }\n \n+  /**\n+   * Create a WebLogic domain with a defined configmap in configuration/model \n+   * section of the domain resource.\n+   * The configmap has multiple sparse WDT model files that define \n+   * a JDBCSystemResource, a JMSSystemResource and a WLDFSystemResource.\n+   * Verify all the SystemResource configurations using the rest API call \n+   * using the public nodeport of the administration server.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"Verify the pre-configured SystemResources in a model-in-image domain\")\n+  public void testMiiCheckSystemResources() {\n+    ExecResult result = null;\n+    result = checkSystemResourceConfiguration(\"JDBCSystemResources\", \"TestDataSource\");\n+    assertNotNull(result, \"CheckJDBCSystemResources returned null\");\n+    logger.info(\"CheckJDBCSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"JDBCSystemResource not found\");\n+    logger.info(\"Found the JDBCSystemResource configuration\");\n+\n+    result = null;\n+    result = checkSystemResourceConfiguration(\"JMSSystemResources\", \"TestClusterJmsModule\");\n+    assertNotNull(result, \"CheckJMSSystemResources returned null\");\n+    logger.info(\"CheckJMSSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"JMSSystemResource not found\");\n+    logger.info(\"Found the JMSSystemResource configuration\");\n+\n+    result = null;\n+    result = checkSystemResourceConfiguration(\"WLDFSystemResources\", \"TestWldfModule\");\n+    assertNotNull(result, \"CheckWLDFSystemResources returned null\");\n+    logger.info(\"CheckWLDFSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"WLDFSystemResource not found\");\n+    logger.info(\"Found the WLDFSystemResource configuration\");\n+\n+    result = null;\n+    result = checkJdbcRuntime(\"TestDataSource\");\n+    logger.info(\"checkJdbcRuntime: returned {0}\", result.toString());\n+    assertTrue(result.stdout().contains(\"jdbc:oracle:thin:localhost\"),\n+         String.format(\"DB URL does not match with RuntimeMBean Info\"));\n+    assertTrue(result.stdout().contains(\"scott\"),\n+         String.format(\"DB user name does not match with RuntimeMBean Info\"));\n+    logger.info(\"Found the JDBCSystemResource configuration\");\n+\n+  }\n+\n+  /**\n+   * Start a WebLogic domain using model-in-image with JMS/JDBC SystemResources.\n+   * Create a configmap to delete JMS/JDBC SystemResources.\n+   * Patch the domain resource with the configmap.\n+   * Update the restart version of the domain resource.\n+   * Verify rolling restart of the domain by comparing PodCreationTimestamp\n+   * for all the server pods before and after rolling restart.\n+   * Verify System Resource are deleted from the domain.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3NTU4NA=="}, "originalCommit": {"oid": "1285a972188e83c1b3744103aed389a53a35a107"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODI5MDEzOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTo0NToxNlrOHDWjCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjozOTo1N1rOHDd0yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3NzE5NQ==", "bodyText": "Patch the domain CRD with new credentials secret.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473277195", "createdAt": "2020-08-19T19:45:16Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -507,6 +741,72 @@ public void testAddMiiConfiguredCluster() {\n     logger.info(\"Found new managed server configuration\");\n   }\n \n+  /**\n+   * Start a WebLogic domain with model-in-imge.\n+   * Patch domain CRD with new webLogicCredentialsSecret.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1285a972188e83c1b3744103aed389a53a35a107"}, "originalPosition": 389}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM5NjQyNA==", "bodyText": "modified:  Patch the domain CRD with a new credentials secret", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473396424", "createdAt": "2020-08-19T22:39:57Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -507,6 +741,72 @@ public void testAddMiiConfiguredCluster() {\n     logger.info(\"Found new managed server configuration\");\n   }\n \n+  /**\n+   * Start a WebLogic domain with model-in-imge.\n+   * Patch domain CRD with new webLogicCredentialsSecret.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3NzE5NQ=="}, "originalCommit": {"oid": "1285a972188e83c1b3744103aed389a53a35a107"}, "originalPosition": 389}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzE2NDk4OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTozMzo1N1rOHEHRgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTozMzo1N1rOHEHRgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA3NTUyMw==", "bodyText": "Typo \"repica\".", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r474075523", "createdAt": "2020-08-20T15:33:57Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -285,20 +336,184 @@ public void beforeEach() {\n     }\n   }\n \n+  /**\n+   * Create a WebLogic domain with a defined configmap in configuration/model \n+   * section of the domain resource.\n+   * The configmap has multiple sparse WDT model files that define \n+   * a JDBCSystemResource, a JMSSystemResource and a WLDFSystemResource.\n+   * Verify all the SystemResource configurations using the rest API call \n+   * using the public nodeport of the administration server.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"Verify the pre-configured SystemResources in a model-in-image domain\")\n+  public void testMiiCheckSystemResources() {\n+\n+    assertTrue(checkSystemResourceConfiguration(\"JDBCSystemResources\", \n+        \"TestDataSource\"), \"JDBCSystemResource not found\");\n+    logger.info(\"Found the JDBCSystemResource configuration\");\n+\n+    assertTrue(checkSystemResourceConfiguration(\"JMSSystemResources\", \n+        \"TestClusterJmsModule\"), \"JMSSystemResources not found\");\n+    logger.info(\"Found the JMSSystemResource configuration\");\n+\n+    assertTrue(checkSystemResourceConfiguration(\"WLDFSystemResources\", \n+        \"TestWldfModule\"), \"WLDFSystemResources not found\");\n+    logger.info(\"Found the WLDFSystemResource configuration\");\n+\n+    ExecResult result = null;\n+    result = checkJdbcRuntime(\"TestDataSource\");\n+    logger.info(\"checkJdbcRuntime: returned {0}\", result.toString());\n+    assertTrue(result.stdout().contains(\"jdbc:oracle:thin:localhost\"),\n+         String.format(\"DB URL does not match with RuntimeMBean Info\"));\n+    assertTrue(result.stdout().contains(\"scott\"),\n+         String.format(\"DB user name does not match with RuntimeMBean Info\"));\n+    logger.info(\"Found the JDBCSystemResource configuration\");\n+\n+  }\n+\n+  /**\n+   * Start a WebLogic domain using model-in-image with JMS/JDBC SystemResources.\n+   * Create a configmap to delete JMS/JDBC SystemResources.\n+   * Patch the domain resource with the configmap.\n+   * Update the restart version of the domain resource.\n+   * Verify rolling restart of the domain by comparing PodCreationTimestamp\n+   * for all the server pods before and after rolling restart.\n+   * Verify SystemResources are deleted from the domain.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"Delete SystemResources from a model-in-image domain\")\n+  public void testMiiDeleteSystemResources() {\n+\n+    String configMapName = \"deletesysrescm\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.delete.sysresources.yaml\"));\n+\n+    LinkedHashMap<String, DateTime> pods = new LinkedHashMap<>();\n+    // get the creation time of the admin server pod before patching\n+    DateTime adminPodCreationTime = getPodCreationTime(domainNamespace,adminServerPodName);\n+    pods.put(adminServerPodName, adminPodCreationTime);\n+    // get the creation time of the managed server pods before patching\n+    for (int i = 1; i <= replicaCount; i++) {\n+      pods.put(managedServerPrefix + i, getPodCreationTime(domainNamespace, managedServerPrefix + i));\n+    }\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/configuration/model/configMap\\\",\")\n+        .append(\" \\\"value\\\":  \\\"\" + configMapName + \"\\\"\")\n+        .append(\" }]\");\n+    logger.log(Level.INFO, \"Configmap patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean cmPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(configMap)  failed \");\n+    assertTrue(cmPatched, \"patchDomainCustomResource(configMap) failed\");\n+\n+    String newRestartVersion = patchDomainResourceWithNewRestartVersion(domainUid, domainNamespace);\n+    logger.log(Level.INFO, \"New restart version is {0}\", newRestartVersion);\n+    \n+    assertTrue(assertDoesNotThrow(\n+        () -> (verifyRollingRestartOccurred(pods, 1, domainNamespace)),\n+         \"More than one pod was restarted at same time\"),\n+        \"Rolling restart failed\");\n+\n+    // Even if pods are created, need the service to created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+   \n+    assertFalse(checkSystemResourceConfiguration(\"JDBCSystemResources\", \n+         \"TestDataSource\"), \"JDBCSystemResource should be deleted\");\n+    assertFalse(checkSystemResourceConfiguration(\"JMSSystemResources\", \n+         \"TestClusterJmsModule\"), \"JMSSystemResources should be deleted\");\n+  }\n+\n+  /**\n+   * Start a WebLogic domain using model-in-image.\n+   * Create a configmap with sparse JDBC/JMS model files.\n+   * Patch the domain resource with the configmap.\n+   * Update the restart version of the domain resource.\n+   * Verify rolling restart of the domain by comparing PodCreationTimestamp\n+   * for all the server pods before and after rolling restart.\n+   * Verify SystemResource configurations using Rest API call to admin server.\n+   */\n+  @Test\n+  @Order(3)\n+  @DisplayName(\"Add New JDBC/JMS SystemResources to a model-in-image domain\")\n+  public void testMiiAddSystemResources() {\n+\n+    logger.info(\"Use same database secret created in befreAll() method\");\n+    String configMapName = \"dsjmsconfigmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.jdbc2.yaml\", \"model.jms2.yaml\"));\n+\n+    LinkedHashMap<String, DateTime> pods = new LinkedHashMap<>();\n+    // get the creation time of the admin server pod before patching\n+    DateTime adminPodCreationTime = getPodCreationTime(domainNamespace,adminServerPodName);\n+    pods.put(adminServerPodName, adminPodCreationTime);\n+    // get the creation time of the managed server pods before patching\n+    for (int i = 1; i <= replicaCount; i++) {\n+      pods.put(managedServerPrefix + i, getPodCreationTime(domainNamespace, managedServerPrefix + i));\n+    }\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/configuration/model/configMap\\\",\")\n+        .append(\" \\\"value\\\":  \\\"\" + configMapName + \"\\\"\")\n+        .append(\" }]\");\n+    logger.log(Level.INFO, \"Configmap patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean cmPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(configMap)  failed \");\n+    assertTrue(cmPatched, \"patchDomainCustomResource(configMap) failed\");\n+\n+    String newRestartVersion = patchDomainResourceWithNewRestartVersion(domainUid, domainNamespace);\n+    logger.log(Level.INFO, \"New restart version is {0}\", newRestartVersion);\n+    \n+    assertTrue(assertDoesNotThrow(\n+        () -> (verifyRollingRestartOccurred(pods, 1, domainNamespace)),\n+         \"More than one pod was restarted at same time\"),\n+        \"Rolling restart failed\");\n+\n+    // Even if pods are created, need the service to created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+    assertTrue(checkSystemResourceConfiguration(\"JDBCSystemResources\", \n+          \"TestDataSource2\"), \"JDBCSystemResource not found\");\n+    logger.info(\"Found the JDBCSystemResource configuration\");\n+\n+    assertTrue(checkSystemResourceConfiguration(\"JMSSystemResources\", \n+          \"TestClusterJmsModule2\"), \"JMSSystemResources not found\");\n+    logger.info(\"Found the JMSSystemResource configuration\");\n+  }\n+\n   /**\n    * Patch the domain resource with the configmap to add a cluster.\n-   * Update the restart version of the domain resource to 1.\n+   * Update the restart version of the domain resource.\n    * Verify rolling restart of the domain by comparing PodCreationTimestamp\n    * before and after rolling restart.\n-   * Verify servers from new cluster are not in running state, because i\n+   * Verify servers from new cluster are not in running state, because \n    * the spec level replica count to zero(default).\n    */\n   @Test\n-  @Order(1)\n-  @DisplayName(\"Add a cluster to model in image domain with default replica count\")\n-  @Slow\n-  @MustNotRunInParallel\n-  public void testAddMiiClusteriWithNoReplica() {\n+  @Order(4)\n+  @DisplayName(\"Add a dynamic cluster to a model-in-image domain with default repica count\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6543606400e588367f5ab30ec61c44009890a0b0"}, "originalPosition": 311}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDA5NTE1OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOTozNjozN1rOHEQaoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOTo1MDo0OFrOHERAxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIyNTMxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *  Check the SystemResoureces in a pre-configured in ConfigMap\n          \n          \n            \n             *  Check the System Resources in a pre-configured ConfigMap", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r474225312", "createdAt": "2020-08-20T19:36:37Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -92,10 +101,39 @@\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+/**\n+ * This test class verifies the following scenerios\n+ *\n+ * <p>testMiiCheckSystemResources\n+ *  Check the SystemResoureces in a pre-configured in ConfigMap", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1670d3d3fce79ee8ce6c2614197548cd38aca29"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIzNTA3OQ==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r474235079", "createdAt": "2020-08-20T19:50:48Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -92,10 +101,39 @@\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+/**\n+ * This test class verifies the following scenerios\n+ *\n+ * <p>testMiiCheckSystemResources\n+ *  Check the SystemResoureces in a pre-configured in ConfigMap", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIyNTMxMg=="}, "originalCommit": {"oid": "e1670d3d3fce79ee8ce6c2614197548cd38aca29"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDA5NzEyOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOTozNjo1N1rOHEQb7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOTo1MDoxN1rOHEQ_yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIyNTY0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *  Delete SystemResoureces defined in WebLogic domain \n          \n          \n            \n             *  Delete System Resources defined in WebLogic domain", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r474225646", "createdAt": "2020-08-20T19:36:57Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -92,10 +101,39 @@\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+/**\n+ * This test class verifies the following scenerios\n+ *\n+ * <p>testMiiCheckSystemResources\n+ *  Check the SystemResoureces in a pre-configured in ConfigMap\n+ *\n+ * <p>testMiiDeleteSystemResources\n+ *  Delete SystemResoureces defined in WebLogic domain ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1670d3d3fce79ee8ce6c2614197548cd38aca29"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIzNDgyNQ==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r474234825", "createdAt": "2020-08-20T19:50:17Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -92,10 +101,39 @@\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+/**\n+ * This test class verifies the following scenerios\n+ *\n+ * <p>testMiiCheckSystemResources\n+ *  Check the SystemResoureces in a pre-configured in ConfigMap\n+ *\n+ * <p>testMiiDeleteSystemResources\n+ *  Delete SystemResoureces defined in WebLogic domain ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIyNTY0Ng=="}, "originalCommit": {"oid": "e1670d3d3fce79ee8ce6c2614197548cd38aca29"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4213, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}