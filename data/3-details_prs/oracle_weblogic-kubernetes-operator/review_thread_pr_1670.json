{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxNjU2ODcz", "number": 1670, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNDoxNDozNlrOD-9xdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzozOTo1M1rOD_x2vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzUwMzg5OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiAddCluster.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNDoxNDozNlrOGZYrmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxOTo1OTozMFrOGZiYDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI3MTk2Mg==", "bodyText": "This method is duplicated in multiple test classes now. Shall we make it a test action?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1670#discussion_r429271962", "createdAt": "2020-05-22T14:14:36Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiAddCluster.java", "diffHunk": "@@ -767,37 +712,57 @@ private void createClusterConfigMap(String configMapName, String modelFile) {\n     assertTrue(cmCreated, String.format(\"createConfigMap failed while creating ConfigMap %s\", configMapName));\n   }     \n \n-  private String getadminPodCreationTime() {\n-\n-    String adminPodCreationTime =\n-        assertDoesNotThrow(() -> getPodCreationTimestamp(domainNamespace, \"\", adminServerPodName),\n-            String.format(\"Couldn't get PodCreationTime for pod %s\", adminServerPodName));\n-    assertNotNull(adminPodCreationTime, \"adminPodCreationTime returned null\");\n-    logger.info(\"Domain {0} in namespace {1}, admin server pod {2} creationTimestamp before patching is {3}\",\n-        domainUid,\n-        domainNamespace,\n-        adminServerPodName,\n-        adminPodCreationTime);\n-    return adminPodCreationTime;\n+  /**\n+   * Get the PodCreationTimestamp of a pod in a namespace.\n+   * \n+   * @param namespace Kubernetes namespace that the domain is hosted\n+   * @param podName name of the pod \n+   * @return PodCreationTimestamp of the pod\n+   */\n+  private String getPodCreationTime(String namespace, String podName) {\n+    String podCreationTime =\n+        assertDoesNotThrow(() -> getPodCreationTimestamp(namespace, \"\", podName),\n+            String.format(\"Couldn't get PodCreationTime for pod %s\", podName));\n+    assertNotNull(podCreationTime, \"Got null PodCreationTimestamp\");\n+    logger.info(\"PodCreationTimestamp for pod ${0} in namespace ${1} is {2}\",\n+        namespace,\n+        podName,\n+        podCreationTime);\n+    return podCreationTime;\n   }\n \n-  private List<String> getManagedServerPodTimestampList() {\n-    List<String> managedServerPodTimestampList = new ArrayList<>();\n-    assertDoesNotThrow(\n-        () -> { \n-          for (int i = 1; i <= replicaCount; i++) {\n-            String managedServerPodName = managedServerPrefix + i;\n-            String creationTime = getPodCreationTimestamp(domainNamespace,\"\", managedServerPodName);\n-            managedServerPodTimestampList.add(creationTime);\n-            logger.info(\"Domain {0} in namespace {1}, managed server pod {2} creationTimestamp before patching is {3}\",\n-                domainUid,\n-                domainNamespace,\n-                managedServerPodName,\n-                creationTime);\n-          } \n-        },\n-        String.format(\"Failed to get creationTimestamp for managed server pods\"));\n-    return managedServerPodTimestampList;\n+  /**\n+   * Patch the domain resource with a new restartVersion.\n+   * \n+   * @param domainResourceName name of the domain resource\n+   * @param namespace Kubernetes namespace that the domain is hosted\n+   * @return restartVersion new restartVersion of the domain resource\n+   */\n+  private String patchDomainResourceWithNewRestartVersion(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c017f1cb6d70b9f4f786be34732e9fd6f60e6cb"}, "originalPosition": 308}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQzMDc5OQ==", "bodyText": "Added follwwing methos(s) to  utils/CommonTestUtils.java\npatchDomainResourceWithNewRestartVersion()\ngetPodCreationTime()", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1670#discussion_r429430799", "createdAt": "2020-05-22T19:59:30Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiAddCluster.java", "diffHunk": "@@ -767,37 +712,57 @@ private void createClusterConfigMap(String configMapName, String modelFile) {\n     assertTrue(cmCreated, String.format(\"createConfigMap failed while creating ConfigMap %s\", configMapName));\n   }     \n \n-  private String getadminPodCreationTime() {\n-\n-    String adminPodCreationTime =\n-        assertDoesNotThrow(() -> getPodCreationTimestamp(domainNamespace, \"\", adminServerPodName),\n-            String.format(\"Couldn't get PodCreationTime for pod %s\", adminServerPodName));\n-    assertNotNull(adminPodCreationTime, \"adminPodCreationTime returned null\");\n-    logger.info(\"Domain {0} in namespace {1}, admin server pod {2} creationTimestamp before patching is {3}\",\n-        domainUid,\n-        domainNamespace,\n-        adminServerPodName,\n-        adminPodCreationTime);\n-    return adminPodCreationTime;\n+  /**\n+   * Get the PodCreationTimestamp of a pod in a namespace.\n+   * \n+   * @param namespace Kubernetes namespace that the domain is hosted\n+   * @param podName name of the pod \n+   * @return PodCreationTimestamp of the pod\n+   */\n+  private String getPodCreationTime(String namespace, String podName) {\n+    String podCreationTime =\n+        assertDoesNotThrow(() -> getPodCreationTimestamp(namespace, \"\", podName),\n+            String.format(\"Couldn't get PodCreationTime for pod %s\", podName));\n+    assertNotNull(podCreationTime, \"Got null PodCreationTimestamp\");\n+    logger.info(\"PodCreationTimestamp for pod ${0} in namespace ${1} is {2}\",\n+        namespace,\n+        podName,\n+        podCreationTime);\n+    return podCreationTime;\n   }\n \n-  private List<String> getManagedServerPodTimestampList() {\n-    List<String> managedServerPodTimestampList = new ArrayList<>();\n-    assertDoesNotThrow(\n-        () -> { \n-          for (int i = 1; i <= replicaCount; i++) {\n-            String managedServerPodName = managedServerPrefix + i;\n-            String creationTime = getPodCreationTimestamp(domainNamespace,\"\", managedServerPodName);\n-            managedServerPodTimestampList.add(creationTime);\n-            logger.info(\"Domain {0} in namespace {1}, managed server pod {2} creationTimestamp before patching is {3}\",\n-                domainUid,\n-                domainNamespace,\n-                managedServerPodName,\n-                creationTime);\n-          } \n-        },\n-        String.format(\"Failed to get creationTimestamp for managed server pods\"));\n-    return managedServerPodTimestampList;\n+  /**\n+   * Patch the domain resource with a new restartVersion.\n+   * \n+   * @param domainResourceName name of the domain resource\n+   * @param namespace Kubernetes namespace that the domain is hosted\n+   * @return restartVersion new restartVersion of the domain resource\n+   */\n+  private String patchDomainResourceWithNewRestartVersion(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI3MTk2Mg=="}, "originalCommit": {"oid": "2c017f1cb6d70b9f4f786be34732e9fd6f60e6cb"}, "originalPosition": 308}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzUyNzIxOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiAddCluster.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNDoyMDozM1rOGZY5hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMDowMDozM1rOGZiZTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI3NTUyNw==", "bodyText": "The code that get the creation timestamp of all servers and add it to a map is duplicated in the test cases.\nConsider make it a common test util method?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1670#discussion_r429275527", "createdAt": "2020-05-22T14:20:33Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiAddCluster.java", "diffHunk": "@@ -473,12 +448,15 @@ public void testAddMiiConfiguredCluster() {\n     String configMapName = \"configclusterconfigmap\";\n     createClusterConfigMap(configMapName, \"model.config.cluster.yaml\");\n \n-    // get the creation time of the admin server pod before patching\n-    String adminPodCreationTime = getadminPodCreationTime();\n+    LinkedHashMap<String, String> pods = new LinkedHashMap<>();\n \n+    // get the creation time of the admin server pod before patching\n+    String adminPodCreationTime = getPodCreationTime(domainNamespace, adminServerPodName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c017f1cb6d70b9f4f786be34732e9fd6f60e6cb"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQzMTExNw==", "bodyText": "Done. Added method(s) to utils/CommonTestUtils.java", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1670#discussion_r429431117", "createdAt": "2020-05-22T20:00:33Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiAddCluster.java", "diffHunk": "@@ -473,12 +448,15 @@ public void testAddMiiConfiguredCluster() {\n     String configMapName = \"configclusterconfigmap\";\n     createClusterConfigMap(configMapName, \"model.config.cluster.yaml\");\n \n-    // get the creation time of the admin server pod before patching\n-    String adminPodCreationTime = getadminPodCreationTime();\n+    LinkedHashMap<String, String> pods = new LinkedHashMap<>();\n \n+    // get the creation time of the admin server pod before patching\n+    String adminPodCreationTime = getPodCreationTime(domainNamespace, adminServerPodName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI3NTUyNw=="}, "originalCommit": {"oid": "2c017f1cb6d70b9f4f786be34732e9fd6f60e6cb"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzUzMDU1OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiAddCluster.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNDoyMToyNlrOGZY7lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMDowMDo0NlrOGZiZjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI3NjA1Mw==", "bodyText": "This method is also duplicated in test classes now. Make it a test action or common test util method?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1670#discussion_r429276053", "createdAt": "2020-05-22T14:21:26Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiAddCluster.java", "diffHunk": "@@ -767,37 +712,57 @@ private void createClusterConfigMap(String configMapName, String modelFile) {\n     assertTrue(cmCreated, String.format(\"createConfigMap failed while creating ConfigMap %s\", configMapName));\n   }     \n \n-  private String getadminPodCreationTime() {\n-\n-    String adminPodCreationTime =\n-        assertDoesNotThrow(() -> getPodCreationTimestamp(domainNamespace, \"\", adminServerPodName),\n-            String.format(\"Couldn't get PodCreationTime for pod %s\", adminServerPodName));\n-    assertNotNull(adminPodCreationTime, \"adminPodCreationTime returned null\");\n-    logger.info(\"Domain {0} in namespace {1}, admin server pod {2} creationTimestamp before patching is {3}\",\n-        domainUid,\n-        domainNamespace,\n-        adminServerPodName,\n-        adminPodCreationTime);\n-    return adminPodCreationTime;\n+  /**\n+   * Get the PodCreationTimestamp of a pod in a namespace.\n+   * \n+   * @param namespace Kubernetes namespace that the domain is hosted\n+   * @param podName name of the pod \n+   * @return PodCreationTimestamp of the pod\n+   */\n+  private String getPodCreationTime(String namespace, String podName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c017f1cb6d70b9f4f786be34732e9fd6f60e6cb"}, "originalPosition": 272}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQzMTE4Mg==", "bodyText": "Done. Added method(s) to utils/CommonTestUtils.java", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1670#discussion_r429431182", "createdAt": "2020-05-22T20:00:46Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiAddCluster.java", "diffHunk": "@@ -767,37 +712,57 @@ private void createClusterConfigMap(String configMapName, String modelFile) {\n     assertTrue(cmCreated, String.format(\"createConfigMap failed while creating ConfigMap %s\", configMapName));\n   }     \n \n-  private String getadminPodCreationTime() {\n-\n-    String adminPodCreationTime =\n-        assertDoesNotThrow(() -> getPodCreationTimestamp(domainNamespace, \"\", adminServerPodName),\n-            String.format(\"Couldn't get PodCreationTime for pod %s\", adminServerPodName));\n-    assertNotNull(adminPodCreationTime, \"adminPodCreationTime returned null\");\n-    logger.info(\"Domain {0} in namespace {1}, admin server pod {2} creationTimestamp before patching is {3}\",\n-        domainUid,\n-        domainNamespace,\n-        adminServerPodName,\n-        adminPodCreationTime);\n-    return adminPodCreationTime;\n+  /**\n+   * Get the PodCreationTimestamp of a pod in a namespace.\n+   * \n+   * @param namespace Kubernetes namespace that the domain is hosted\n+   * @param podName name of the pod \n+   * @return PodCreationTimestamp of the pod\n+   */\n+  private String getPodCreationTime(String namespace, String podName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI3NjA1Mw=="}, "originalCommit": {"oid": "2c017f1cb6d70b9f4f786be34732e9fd6f60e6cb"}, "originalPosition": 272}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTE1MTUyOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwMjozMDozOVrOGaM2ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMDoxNjowNFrOGauweg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyNjcxNQ==", "bodyText": "Please add this method in TestActions.java class.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1670#discussion_r430126715", "createdAt": "2020-05-26T02:30:39Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "diffHunk": "@@ -751,4 +755,58 @@ public static void scaleAndVerifyCluster(String clusterName,\n       }\n     }\n   }\n+\n+  /**\n+   * Get the PodCreationTimestamp of a pod in a namespace.\n+   * \n+   * @param namespace Kubernetes namespace that the domain is hosted\n+   * @param podName name of the pod \n+   * @return PodCreationTimestamp of the pod\n+   */\n+  public static String getPodCreationTime(String namespace, String podName) {\n+    String podCreationTime =\n+        assertDoesNotThrow(() -> getPodCreationTimestamp(namespace, \"\", podName),\n+            String.format(\"Couldn't get PodCreationTimestamp for pod %s\", podName));\n+    assertNotNull(podCreationTime, \"Got null PodCreationTimestamp\");\n+    logger.info(\"PodCreationTimestamp for pod ${0} in namespace ${1} is {2}\",\n+        namespace,\n+        podName,\n+        podCreationTime);\n+    return podCreationTime;\n+  }\n+\n+  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7fa5166328cc2410111235d724d6b6958a5eefc"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ4MTg0MA==", "bodyText": "We have already a static method TestActions.getPodCreationTimestamp,  the current convenient utility method uses the same.  By using the utility method we are hiding details of the assertion to be duplicated everywhere.  Some test uses the TestActions.getPodCreationTimestamp directly.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1670#discussion_r430481840", "createdAt": "2020-05-26T15:02:41Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "diffHunk": "@@ -751,4 +755,58 @@ public static void scaleAndVerifyCluster(String clusterName,\n       }\n     }\n   }\n+\n+  /**\n+   * Get the PodCreationTimestamp of a pod in a namespace.\n+   * \n+   * @param namespace Kubernetes namespace that the domain is hosted\n+   * @param podName name of the pod \n+   * @return PodCreationTimestamp of the pod\n+   */\n+  public static String getPodCreationTime(String namespace, String podName) {\n+    String podCreationTime =\n+        assertDoesNotThrow(() -> getPodCreationTimestamp(namespace, \"\", podName),\n+            String.format(\"Couldn't get PodCreationTimestamp for pod %s\", podName));\n+    assertNotNull(podCreationTime, \"Got null PodCreationTimestamp\");\n+    logger.info(\"PodCreationTimestamp for pod ${0} in namespace ${1} is {2}\",\n+        namespace,\n+        podName,\n+        podCreationTime);\n+    return podCreationTime;\n+  }\n+\n+  /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyNjcxNQ=="}, "originalCommit": {"oid": "a7fa5166328cc2410111235d724d6b6958a5eefc"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ4MzU3Mg==", "bodyText": "Agree for getPodCreationTime. My comment is for patchDomainResourceWithNewRestartVersion method.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1670#discussion_r430483572", "createdAt": "2020-05-26T15:05:00Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "diffHunk": "@@ -751,4 +755,58 @@ public static void scaleAndVerifyCluster(String clusterName,\n       }\n     }\n   }\n+\n+  /**\n+   * Get the PodCreationTimestamp of a pod in a namespace.\n+   * \n+   * @param namespace Kubernetes namespace that the domain is hosted\n+   * @param podName name of the pod \n+   * @return PodCreationTimestamp of the pod\n+   */\n+  public static String getPodCreationTime(String namespace, String podName) {\n+    String podCreationTime =\n+        assertDoesNotThrow(() -> getPodCreationTimestamp(namespace, \"\", podName),\n+            String.format(\"Couldn't get PodCreationTimestamp for pod %s\", podName));\n+    assertNotNull(podCreationTime, \"Got null PodCreationTimestamp\");\n+    logger.info(\"PodCreationTimestamp for pod ${0} in namespace ${1} is {2}\",\n+        namespace,\n+        podName,\n+        podCreationTime);\n+    return podCreationTime;\n+  }\n+\n+  /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyNjcxNQ=="}, "originalCommit": {"oid": "a7fa5166328cc2410111235d724d6b6958a5eefc"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUxMzI3Mg==", "bodyText": "patchDomainResourceWithNewRestartVersion() is a one-off utility used in MII tests only not a commonly used action.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1670#discussion_r430513272", "createdAt": "2020-05-26T15:41:19Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "diffHunk": "@@ -751,4 +755,58 @@ public static void scaleAndVerifyCluster(String clusterName,\n       }\n     }\n   }\n+\n+  /**\n+   * Get the PodCreationTimestamp of a pod in a namespace.\n+   * \n+   * @param namespace Kubernetes namespace that the domain is hosted\n+   * @param podName name of the pod \n+   * @return PodCreationTimestamp of the pod\n+   */\n+  public static String getPodCreationTime(String namespace, String podName) {\n+    String podCreationTime =\n+        assertDoesNotThrow(() -> getPodCreationTimestamp(namespace, \"\", podName),\n+            String.format(\"Couldn't get PodCreationTimestamp for pod %s\", podName));\n+    assertNotNull(podCreationTime, \"Got null PodCreationTimestamp\");\n+    logger.info(\"PodCreationTimestamp for pod ${0} in namespace ${1} is {2}\",\n+        namespace,\n+        podName,\n+        podCreationTime);\n+    return podCreationTime;\n+  }\n+\n+  /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyNjcxNQ=="}, "originalCommit": {"oid": "a7fa5166328cc2410111235d724d6b6958a5eefc"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUyNDM0MQ==", "bodyText": "yes, it is still an action right. This is similar to patchDomainCustomResource action method. We need to identify the actions over utility methods, otherwise we will have all methods added as utility methods like in old JUnit 4 TestUtils.java class, it will grow big, that's my only concern.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1670#discussion_r430524341", "createdAt": "2020-05-26T15:56:48Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "diffHunk": "@@ -751,4 +755,58 @@ public static void scaleAndVerifyCluster(String clusterName,\n       }\n     }\n   }\n+\n+  /**\n+   * Get the PodCreationTimestamp of a pod in a namespace.\n+   * \n+   * @param namespace Kubernetes namespace that the domain is hosted\n+   * @param podName name of the pod \n+   * @return PodCreationTimestamp of the pod\n+   */\n+  public static String getPodCreationTime(String namespace, String podName) {\n+    String podCreationTime =\n+        assertDoesNotThrow(() -> getPodCreationTimestamp(namespace, \"\", podName),\n+            String.format(\"Couldn't get PodCreationTimestamp for pod %s\", podName));\n+    assertNotNull(podCreationTime, \"Got null PodCreationTimestamp\");\n+    logger.info(\"PodCreationTimestamp for pod ${0} in namespace ${1} is {2}\",\n+        namespace,\n+        podName,\n+        podCreationTime);\n+    return podCreationTime;\n+  }\n+\n+  /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyNjcxNQ=="}, "originalCommit": {"oid": "a7fa5166328cc2410111235d724d6b6958a5eefc"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4MjIzNA==", "bodyText": "moved the patchDomainResourceWithNewRestartVersion  into TestAction", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1670#discussion_r430682234", "createdAt": "2020-05-26T20:16:04Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "diffHunk": "@@ -751,4 +755,58 @@ public static void scaleAndVerifyCluster(String clusterName,\n       }\n     }\n   }\n+\n+  /**\n+   * Get the PodCreationTimestamp of a pod in a namespace.\n+   * \n+   * @param namespace Kubernetes namespace that the domain is hosted\n+   * @param podName name of the pod \n+   * @return PodCreationTimestamp of the pod\n+   */\n+  public static String getPodCreationTime(String namespace, String podName) {\n+    String podCreationTime =\n+        assertDoesNotThrow(() -> getPodCreationTimestamp(namespace, \"\", podName),\n+            String.format(\"Couldn't get PodCreationTimestamp for pod %s\", podName));\n+    assertNotNull(podCreationTime, \"Got null PodCreationTimestamp\");\n+    logger.info(\"PodCreationTimestamp for pod ${0} in namespace ${1} is {2}\",\n+        namespace,\n+        podName,\n+        podCreationTime);\n+    return podCreationTime;\n+  }\n+\n+  /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyNjcxNQ=="}, "originalCommit": {"oid": "a7fa5166328cc2410111235d724d6b6958a5eefc"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjAyMDY2OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDomainOnPV.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzozNToyMVrOGapBGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzo1MDowMlrOGapi_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU4ODE4NQ==", "bodyText": "This has to be done right after checkPodReady(adminServerPodName, domainUid, domainNamespace);", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1670#discussion_r430588185", "createdAt": "2020-05-26T17:35:21Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDomainOnPV.java", "diffHunk": "@@ -283,24 +283,24 @@ public void testDomainOnPvUsingWlst() throws IOException {\n     // check admin server pod is ready\n     logger.info(\"Waiting for admin server pod {0} to be ready in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkPodReady(adminServerPodName);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n \n     // check managed server pods are ready\n     for (int i = 1; i <= replicaCount; i++) {\n       logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n           managedServerPodNamePrefix + i, domainNamespace);\n-      checkPodReady(managedServerPodNamePrefix + i);\n+      checkPodReady(managedServerPodNamePrefix + i, domainUid, domainNamespace);\n     }\n \n     logger.info(\"Check admin service {0} is created in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkServiceCreated(adminServerPodName);\n+    checkServiceExists(adminServerPodName, domainNamespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7fa5166328cc2410111235d724d6b6958a5eefc"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5Njg2MA==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1670#discussion_r430596860", "createdAt": "2020-05-26T17:50:02Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDomainOnPV.java", "diffHunk": "@@ -283,24 +283,24 @@ public void testDomainOnPvUsingWlst() throws IOException {\n     // check admin server pod is ready\n     logger.info(\"Waiting for admin server pod {0} to be ready in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkPodReady(adminServerPodName);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n \n     // check managed server pods are ready\n     for (int i = 1; i <= replicaCount; i++) {\n       logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n           managedServerPodNamePrefix + i, domainNamespace);\n-      checkPodReady(managedServerPodNamePrefix + i);\n+      checkPodReady(managedServerPodNamePrefix + i, domainUid, domainNamespace);\n     }\n \n     logger.info(\"Check admin service {0} is created in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkServiceCreated(adminServerPodName);\n+    checkServiceExists(adminServerPodName, domainNamespace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU4ODE4NQ=="}, "originalCommit": {"oid": "a7fa5166328cc2410111235d724d6b6958a5eefc"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjAyNDY4OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiAddCluster.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzozNjozMVrOGapDsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzo1MTo0MVrOGapmrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU4ODg0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // get the creation time of the admin server pod before patching\n          \n          \n            \n                // get the creation time of the server pods before patching", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1670#discussion_r430588849", "createdAt": "2020-05-26T17:36:31Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiAddCluster.java", "diffHunk": "@@ -302,12 +303,14 @@ public void testAddMiiClusteriWithNoReplica() {\n     String configMapName = \"noreplicaconfigmap\";\n     createClusterConfigMap(configMapName, \"model.config.cluster.yaml\");\n \n-    // get the creation time of the admin server pod before patching\n-    String adminPodCreationTime = getadminPodCreationTime();\n+    LinkedHashMap<String, String> pods = new LinkedHashMap<>();\n \n-    // get the creation time of the managed server pods before patching\n-    List<String> managedServerPodOriginalTimestampList = new ArrayList<>();\n-    managedServerPodOriginalTimestampList = getManagedServerPodTimestampList();\n+    // get the creation time of the admin server pod before patching", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7fa5166328cc2410111235d724d6b6958a5eefc"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5NzgwNg==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1670#discussion_r430597806", "createdAt": "2020-05-26T17:51:41Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiAddCluster.java", "diffHunk": "@@ -302,12 +303,14 @@ public void testAddMiiClusteriWithNoReplica() {\n     String configMapName = \"noreplicaconfigmap\";\n     createClusterConfigMap(configMapName, \"model.config.cluster.yaml\");\n \n-    // get the creation time of the admin server pod before patching\n-    String adminPodCreationTime = getadminPodCreationTime();\n+    LinkedHashMap<String, String> pods = new LinkedHashMap<>();\n \n-    // get the creation time of the managed server pods before patching\n-    List<String> managedServerPodOriginalTimestampList = new ArrayList<>();\n-    managedServerPodOriginalTimestampList = getManagedServerPodTimestampList();\n+    // get the creation time of the admin server pod before patching", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU4ODg0OQ=="}, "originalCommit": {"oid": "a7fa5166328cc2410111235d724d6b6958a5eefc"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjAzNzA5OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiConfigMap.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzozOTo1M1rOGapLmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzo1NTo0MVrOGapwIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5MDg3NA==", "bodyText": "In all It classes, the service existence check should be done right after admin pod ready check. Otherwise  if there are errors in creating the service the assertion will fail at waiting for managed server to come up when the actual problem was in the service creation of admin server pod.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1670#discussion_r430590874", "createdAt": "2020-05-26T17:39:53Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiConfigMap.java", "diffHunk": "@@ -332,13 +331,13 @@ public void testCreateMiiConfigMapDomain() {\n \n     logger.info(\"Check admin service {0} is created in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkServiceCreated(adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7fa5166328cc2410111235d724d6b6958a5eefc"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYwMDIyNw==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1670#discussion_r430600227", "createdAt": "2020-05-26T17:55:41Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiConfigMap.java", "diffHunk": "@@ -332,13 +331,13 @@ public void testCreateMiiConfigMapDomain() {\n \n     logger.info(\"Check admin service {0} is created in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkServiceCreated(adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5MDg3NA=="}, "originalCommit": {"oid": "a7fa5166328cc2410111235d724d6b6958a5eefc"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4601, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}