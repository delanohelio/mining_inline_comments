{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4ODA3MDkz", "number": 1538, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQyMzozMzo1OVrODuxhNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQyMzo0MjoyNFrODuxtlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMzcyNDA1OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItPodsShutdown.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQyMzozMzo1OVrOGA4LmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQyMzozMzo1OVrOGA4LmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzU3MzY1Nw==", "bodyText": "this doc is unclear - what does this mean? please try to make it clearer", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1538#discussion_r403573657", "createdAt": "2020-04-04T23:33:59Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItPodsShutdown.java", "diffHunk": "@@ -74,128 +68,99 @@ public static void staticPrepare() throws Exception {\n    * This method gets called before every test. It creates the result/pv root directories\n    * for the test. Creates the operator and domain if its not running.\n    *\n-   * @throws Exception exception if result/pv/operator/domain creation fails\n+   * @throws Exception if result/pv/operator/domain creation fails\n    */\n   @BeforeEach\n   public void prepare() throws Exception {\n     // initialize test properties and create the directories\n     if (FULLTEST) {\n       LoggerHelper.getLocal().log(Level.INFO, \"Checking if operator1 and domain are running, if not creating\");\n+      createResultAndPvDirs(testClassName);\n       // create operator1\n       if (operator1 == null) {\n-        createResultAndPvDirs(testClassName);\n+        ArrayList<String> targetDomainsNS = new ArrayList<String>();\n+        targetDomainsNS.add(domainNSShutOpCluster);\n+        targetDomainsNS.add(domainNSShutOpDomain);\n+        targetDomainsNS.add(domainNSShutOpEnv);\n+        targetDomainsNS.add(domainNSShutOpMS);\n+        targetDomainsNS.add(domainNSShutOpMSForced);\n+        targetDomainsNS.add(domainNSShutOpMSIgnoreSessions);\n+        targetDomainsNS.add(domainNSShutOpMSTimeout);\n+        targetDomainsNS.add(domainNSShutOpOverrideViaCluster);\n+        targetDomainsNS.add(domainNSShutOpOverrideViaEnv);\n         Map<String, Object> operatorMap = createOperatorMap(getNewSuffixCount(), true, testClassName);\n+        operatorMap.put(\"domainNamespaces\",targetDomainsNS);\n         operator1 = TestUtils.createOperator(operatorMap, Operator.RestCertType.SELF_SIGNED);\n         Assertions.assertNotNull(operator1);\n-        domainNS1 = ((ArrayList<String>) operatorMap.get(\"domainNamespaces\")).get(0);\n         namespaceList.append((String)operatorMap.get(\"namespace\"));\n-        namespaceList.append(\" \").append(domainNS1);\n-        shutdownTmpDir = getResultDir() + \"/shutdowntemp\";\n-        Files.createDirectories(Paths.get(shutdownTmpDir));\n+        namespaceList.append(\" \")\n+            .append(domainNSShutOpOverrideViaCluster)\n+            .append(\" \")\n+            .append(domainNSShutOpMS)\n+            .append(\" \")\n+            .append(domainNSShutOpMSForced)\n+            .append(\" \")\n+            .append(domainNSShutOpMSIgnoreSessions)\n+            .append(\" \")\n+            .append(domainNSShutOpMSTimeout)\n+            .append(\" \")\n+            .append(domainNSShutOpEnv)\n+            .append(\" \")\n+            .append(domainNSShutOpDomain)\n+            .append(\" \")\n+            .append(domainNSShutOpOverrideViaEnv)\n+            .append(\" \")\n+            .append(domainNSShutOpCluster);\n       }\n-\n-      if (domain == null) {\n-        domain = createDomain();\n-        originalYaml =\n-            getUserProjectsDir()\n-                + \"/weblogic-domains/\"\n-                + domain.getDomainUid()\n-                + \"/domain.yaml\";\n-        Assertions.assertNotNull(domain);\n-      }\n-      domainUid = domain.getDomainUid();\n-      domainNS = domain.getDomainNs();\n     }\n   }\n \n   /**\n    * Releases k8s cluster lease, archives result, pv directories.\n    *\n-   * @throws Exception exception\n+   * @throws Exception tear objects fails", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee2cef4a5e4b3d877868eb0dc337d5cf7e4ea5d0"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMzczMTUwOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItPodsShutdown.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQyMzozNTo1N1rOGA4O0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQyMzozNTo1N1rOGA4O0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzU3NDQ4Mg==", "bodyText": "Please use capital to start the sentence - as per the Javadoc standard https://www.oracle.com/technetwork/java/javase/documentation/index-137868.html - in particular the section \"First sentence\"", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1538#discussion_r403574482", "createdAt": "2020-04-04T23:35:57Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItPodsShutdown.java", "diffHunk": "@@ -206,23 +171,22 @@ public static void callWebApp(String testAppPath, Domain domain, boolean deployA\n \n     // Send a HTTP request to keep open session\n     String curlCmd = webServiceUrl.toString();\n-    // LoggerHelper.getLocal().log(Level.INFO, \"Send a HTTP request: \" + curlCmd);\n     TestUtils.checkAnyCmdInLoop(curlCmd, \"Ending to sleep\");\n   }\n \n   /**\n-   * shutdown managed server.\n+   * shutdown managed server and returns spent shutdown time.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee2cef4a5e4b3d877868eb0dc337d5cf7e4ea5d0"}, "originalPosition": 227}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMzc0MjQ4OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItPodsShutdown.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQyMzozOTowMFrOGA4T8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQyMzozOTowMFrOGA4T8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzU3NTc5Mw==", "bodyText": "please add messages to your assertions, so that we get a descriptive message in the log if the assertion fails.\nplease consider static importing Assertions so that you can just write assertNotNull(domain, \"descriptive failure message\")", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1538#discussion_r403575793", "createdAt": "2020-04-04T23:39:00Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItPodsShutdown.java", "diffHunk": "@@ -261,166 +225,168 @@ private static boolean checkShutdownUpdatedProp(String podName, String... props)\n   }\n \n   /**\n-   * Add shutdown options at managed server level and verify the managed server pod are Terminated\n-   * and recreated with specified shutdown options.\n+   * Start domain with added shutdown options at the domain level\n+   * and verify values are propagated to server level.\n    *\n-   * @throws Exception when domain.yaml cannot be read or modified\n+   * @throws Exception when domain cannot be started or failed to verify shutdown options\n    */\n   @Test\n-  public void testAddShutdownOptionsToMS() throws Exception {\n+  public void testAddShutdownOptionsToDomain() throws Exception {\n+\n     Assumptions.assumeTrue(FULLTEST);\n     String testMethodName = new Object() {\n     }.getClass().getEnclosingMethod().getName();\n     logTestBegin(testMethodName);\n-    String podName = domainUid + \"-managed-server1\";\n-    Files.createDirectories(Paths.get(shutdownTmpDir));\n-    // Modify the original domain yaml to include shutdown options in managed server-1 node\n-    final DomainCrd crd = new DomainCrd(originalYaml);\n-\n-    Map<String, Object> shutdownProps = new HashMap();\n+    Map<String, Object> shutdownProps = new HashMap<>();\n+    Map<String, Object> shutdownDomainProps = new HashMap();\n     shutdownProps.put(\"timeoutSeconds\", 160);\n-    shutdownProps.put(\"shutdownType\", \"Forced\");\n-    shutdownProps.put(\"ignoreSessions\", true);\n-    crd.addShutDownOptionToMS(\"managed-server1\", shutdownProps);\n+    shutdownDomainProps.put(\"domain\",shutdownProps);\n+    Domain domain = null;\n     try {\n-      updateCrdYamlVerifyShutdown(crd, 0);\n-      Assertions.assertTrue(checkShutdownUpdatedProp(domainUid + \"-admin-server\", \"Graceful\"));\n-      Assertions.assertTrue(\n-          checkShutdownUpdatedProp(domainUid + \"-managed-server1\", \"Forced\", \"160\", \"true\"));\n+      domain = createDomain(domainNSShutOpDomain, shutdownDomainProps);\n+      Assertions.assertNotNull(domain);\n+      Assertions.assertTrue(checkShutdownUpdatedProp(domain.getDomainUid()\n+          + \"-admin-server\", domain.getDomainNs(),\"160\"));\n+      Assertions.assertTrue(checkShutdownUpdatedProp(domain.getDomainUid()\n+          + \"-managed-server1\",domain.getDomainNs(), \"160\"));\n     } finally {\n-      LoggerHelper.getLocal().log(\n-          Level.INFO, \"Reverting back the domain to old crd\\n kubectl apply -f {0}\", originalYaml);\n-      resetDomainCrd();\n+      if (domain != null) {\n+        TestUtils.deleteWeblogicDomainResources(domain.getDomainUid());\n+      }\n     }\n+    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - {0}\", testMethodName);\n   }\n \n   /**\n-   * Add shutdown options to Cluster level and verify the managed server pods in the cluster are\n-   * Terminated and recreated with specified shutdown options.\n+   * Start domain with added shutdown options at the managed server level\n+   * and verify values are propagated to specified server level but effecting admin setting.\n    *\n-   * @throws Exception when domain.yaml cannot be read or modified\n+   * @throws Exception when domain cannot be started or failed to verify shutdown options\n    */\n   @Test\n-  public void testAddShutdownOptionToCluster() throws Exception {\n+  public void testAddShutdownOptionsToMS() throws Exception {\n     Assumptions.assumeTrue(FULLTEST);\n     String testMethodName = new Object() {\n     }.getClass().getEnclosingMethod().getName();\n     logTestBegin(testMethodName);\n \n-    Files.createDirectories(Paths.get(shutdownTmpDir));\n-\n-    // Modify the original domain yaml to include shutdown options in cluster-1 node\n-    final DomainCrd crd = new DomainCrd(originalYaml);\n-\n     Map<String, Object> shutdownProps = new HashMap();\n-    shutdownProps.put(\"timeoutSeconds\", 60);\n+    shutdownProps.put(\"timeoutSeconds\", 160);\n     shutdownProps.put(\"shutdownType\", \"Forced\");\n     shutdownProps.put(\"ignoreSessions\", true);\n-\n-    crd.addShutdownOptionsToCluster(domain.getClusterName(), shutdownProps);\n+    List<Map<String,Object>> shutdownPropsMSs = new ArrayList<>();\n+    Map<String, Object> shutdownPropsMyMS = new HashMap();\n+    shutdownPropsMyMS.put(\"managed-server1\", shutdownProps);\n+    shutdownPropsMSs.add(shutdownPropsMyMS);\n+    Map<String, Object> shutdownPropOpt = new HashMap();\n+    shutdownPropOpt.put(\"server\",shutdownPropsMSs);\n+    Domain domain = null;\n     try {\n-      updateCrdYamlVerifyShutdown(crd, 0);\n-      Assertions.assertTrue(checkShutdownUpdatedProp(domainUid + \"-admin-server\", \"Graceful\"));\n-      Assertions.assertTrue(checkShutdownUpdatedProp(domainUid + \"-managed-server1\", \"Forced\"));\n+      domain = createDomain(domainNSShutOpMS, shutdownPropOpt);\n+      Assertions.assertNotNull(domain);\n+      Assertions.assertTrue(checkShutdownUpdatedProp(domain.getDomainUid()\n+          + \"-admin-server\", \"Graceful\"));\n+      Assertions.assertTrue(\n+          checkShutdownUpdatedProp(domain.getDomainUid()\n+              + \"-managed-server1\", domain.getDomainNs(),\"Forced\", \"160\", \"true\"));\n     } finally {\n       LoggerHelper.getLocal().log(\n-          Level.INFO, \"Reverting back the domain to old crd\\n kubectl apply -f {0}\", originalYaml);\n-      resetDomainCrd();\n+          Level.INFO, \" Deleting domain \" + domain.getDomainUid());\n+      if (domain != null) {\n+        TestUtils.deleteWeblogicDomainResources(domain.getDomainUid());\n+      }\n     }\n     LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - {0}\", testMethodName);\n   }\n \n   /**\n-   * Add shutdown options at domain level and verify all pods are Terminated and recreated.\n+   * Start domain with added shutdown options at the cluster level\n+   * and verify values are propagated to all managed servers in the cluster.\n    *\n-   * @throws Exception when domain.yaml cannot be read or modified\n+   * @throws Exception when domain cannot be started or failed to verify shutdown options\n    */\n   @Test\n-  public void testAddShutdownOptionsToDomain() throws Exception {\n-\n+  public void testAddShutdownOptionToCluster() throws Exception {\n     Assumptions.assumeTrue(FULLTEST);\n     String testMethodName = new Object() {\n     }.getClass().getEnclosingMethod().getName();\n     logTestBegin(testMethodName);\n \n-    Files.createDirectories(Paths.get(shutdownTmpDir));\n-    // Modify the original domain yaml to include shutdown options in domain spec node\n-    DomainCrd crd = new DomainCrd(originalYaml);\n-\n     Map<String, Object> shutdownProps = new HashMap();\n-    shutdownProps.put(\"timeoutSeconds\", 160);\n-    crd.addShutdownOptionToDomain(shutdownProps);\n+    shutdownProps.put(\"timeoutSeconds\", 60);\n+    shutdownProps.put(\"shutdownType\", \"Forced\");\n+    shutdownProps.put(\"ignoreSessions\", true);\n+    List<Map<String,Object>> shutdownPropsClusters = new ArrayList<>();\n+    Map<String, Object> shutdownPropsMyCluster = new HashMap();\n+    shutdownPropsMyCluster.put(\"cluster-1\", shutdownProps);\n+    shutdownPropsClusters.add(shutdownPropsMyCluster);\n+    Map<String, Object> shutdownPropOpt = new HashMap();\n+    shutdownPropOpt.put(\"cluster\",shutdownPropsClusters);\n+    Domain domain = null;\n     try {\n-      updateCrdYamlVerifyShutdown(crd, 0);\n-      Assertions.assertTrue(checkShutdownUpdatedProp(domainUid + \"-admin-server\", \"160\"));\n-      Assertions.assertTrue(checkShutdownUpdatedProp(domainUid + \"-managed-server1\", \"160\"));\n+      domain = createDomain(domainNSShutOpCluster,shutdownPropOpt);\n+      Assertions.assertNotNull(domain);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee2cef4a5e4b3d877868eb0dc337d5cf7e4ea5d0"}, "originalPosition": 411}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMzc1NTcyOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/utils/Domain.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQyMzo0MjoyNFrOGA4Zng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQyMzo0MjoyNFrOGA4Zng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzU3NzI0Ng==", "bodyText": "start sentence with a capital", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1538#discussion_r403577246", "createdAt": "2020-04-04T23:42:24Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/utils/Domain.java", "diffHunk": "@@ -2414,7 +2458,7 @@ public boolean accept(File dir, String name) {\n \n \n   /**\n-   * write server pod logs\n+   * write server pod logs.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee2cef4a5e4b3d877868eb0dc337d5cf7e4ea5d0"}, "originalPosition": 93}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4741, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}