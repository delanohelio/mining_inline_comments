{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1NDM4NDQ4", "number": 1741, "title": "OWLS-79995 - Introduce maxConcurrentStartup cluster configuration", "bodyText": "Add maxConcurrentStartup cluster configuration, and maxClusterConcurrentStartup domain configuration:\nThe maximum number of managed servers that the operator will start in parallel for the cluster in response to a change in replicas count for the cluster. If more managed servers need to be started, the operator will wait until a managed server to be in Ready and Running state before starting the next managed server. A value of 0 (the default) means all managed servers will start in parallel.\nOther changes included:\n\nAdd global setting for allowReplicasBelowMinDynClusterSize (OWLS-81769)\nReduce DELAY_IN_SECONDS in RollingHelper that was introduced in PR 1663 from 10 to 1 second as suggested. This is the delay between checking for pods in ready state from the previous rolling operation before the current rolling operation can proceed.", "createdAt": "2020-06-16T20:03:33Z", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741", "merged": true, "mergeCommit": {"oid": "e19c4fdfdccf6dd8605b284414749188e7cae886"}, "closed": true, "closedAt": "2020-06-19T18:26:24Z", "author": {"login": "alai8"}, "timelineItems": {"totalCount": 45, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclH9-3gH2gAyNDM1NDM4NDQ4OmI5YjZlYWY1MmUxYTU0MDU1MWViM2Y5MDczYTAwNDkxZTMwZmI2MWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcs3UFcAH2gAyNDM1NDM4NDQ4OmNlMjZlNjZiNjUyOTM5YWVjNzdkZTkyMjY1OWM3OTE1OTYxYTI3Mjg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b9b6eaf52e1a540551eb3f9073a00491e30fb61d", "author": {"user": {"login": "alai8", "name": "Anthony Lai"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b9b6eaf52e1a540551eb3f9073a00491e30fb61d", "committedDate": "2020-05-26T17:18:19Z", "message": "shorten DELAY_IN_SECONDS from 10s to 1s"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39c20192439bd1d60cd63e506c3d9df783dcda67", "author": {"user": {"login": "alai8", "name": "Anthony Lai"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/39c20192439bd1d60cd63e506c3d9df783dcda67", "committedDate": "2020-05-26T22:50:02Z", "message": "add allowConcurrentScaleUp Cluster configuration, and allowConcurrentScaleUp and allowReplicasBelowDynClusterSize Domain configuration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69434e04941093d591c05268f3111b42b564c8f6", "author": {"user": {"login": "alai8", "name": "Anthony Lai"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/69434e04941093d591c05268f3111b42b564c8f6", "committedDate": "2020-05-27T15:34:32Z", "message": "Merge branch 'develop' into owls-79995"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e27588d2103837d5ea59b6f6932e421bed43ade6", "author": {"user": {"login": "alai8", "name": "Anthony Lai"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e27588d2103837d5ea59b6f6932e421bed43ade6", "committedDate": "2020-05-27T15:38:21Z", "message": "update description for allowConcurrentScaleUp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61229a48e7df01b87685ed87809278e99a596791", "author": {"user": {"login": "alai8", "name": "Anthony Lai"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/61229a48e7df01b87685ed87809278e99a596791", "committedDate": "2020-05-27T15:54:30Z", "message": "Merge branch 'develop' into owls-79995"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "927a0ba8a453018f811cd567010ee82fb2ce4b90", "author": {"user": {"login": "alai8", "name": "Anthony Lai"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/927a0ba8a453018f811cd567010ee82fb2ce4b90", "committedDate": "2020-05-27T22:27:26Z", "message": "replace allowConcurrentScaleUp with maxClusterServerConcurrentStartup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac7bd9e026ff998865bb834677be2e1647104af3", "author": {"user": {"login": "alai8", "name": "Anthony Lai"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ac7bd9e026ff998865bb834677be2e1647104af3", "committedDate": "2020-05-28T00:11:08Z", "message": "code cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8ef627cce2139be7fc36106ebb1d4b4aef214c5", "author": {"user": {"login": "alai8", "name": "Anthony Lai"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d8ef627cce2139be7fc36106ebb1d4b4aef214c5", "committedDate": "2020-05-28T17:26:13Z", "message": "Merge branch 'develop' into owls-79995"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c93cf2fae3dd732cb06fab7685cb3e8afde85fe", "author": {"user": {"login": "alai8", "name": "Anthony Lai"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6c93cf2fae3dd732cb06fab7685cb3e8afde85fe", "committedDate": "2020-05-28T22:28:03Z", "message": "add unit tests for ManagedServerUpIteratorStep"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd2ebe09fb08bcc19e71b8216582ae48bb925752", "author": {"user": {"login": "alai8", "name": "Anthony Lai"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/bd2ebe09fb08bcc19e71b8216582ae48bb925752", "committedDate": "2020-05-28T23:14:40Z", "message": "more unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4ed7252e3a64c67da9c7b5632fdc090b42b413b", "author": {"user": {"login": "alai8", "name": "Anthony Lai"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d4ed7252e3a64c67da9c7b5632fdc090b42b413b", "committedDate": "2020-05-29T17:01:20Z", "message": "update equals with new fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b34ccfd8affd52171ffd9387137272e6886f796", "author": {"user": {"login": "alai8", "name": "Anthony Lai"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5b34ccfd8affd52171ffd9387137272e6886f796", "committedDate": "2020-05-29T22:16:24Z", "message": "Merge branch 'develop' into owls-79995"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eee80d4054f0792581155c2b50af0b9ea10abb0a", "author": {"user": {"login": "alai8", "name": "Anthony Lai"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/eee80d4054f0792581155c2b50af0b9ea10abb0a", "committedDate": "2020-06-01T16:28:31Z", "message": "Merge branch 'develop' into owls-79995"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a2a879b3b5bff6139b3cf351bb77fa3bd09e01e", "author": {"user": {"login": "alai8", "name": "Anthony Lai"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7a2a879b3b5bff6139b3cf351bb77fa3bd09e01e", "committedDate": "2020-06-02T15:35:42Z", "message": "Merge branch 'develop' into owls-79995"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09b67cc9dba20520db328e6e2e91ba5406a1c7e5", "author": {"user": {"login": "alai8", "name": "Anthony Lai"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/09b67cc9dba20520db328e6e2e91ba5406a1c7e5", "committedDate": "2020-06-03T20:39:00Z", "message": "Merge branch 'develop' into owls-79995"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08c3b03c98ca3077c3de1bbac2bc09b89b2b9e65", "author": {"user": {"login": "alai8", "name": "Anthony Lai"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/08c3b03c98ca3077c3de1bbac2bc09b89b2b9e65", "committedDate": "2020-06-05T17:11:05Z", "message": "Merge branch 'develop' into owls-79995"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb4b22d4a83f555f7a7a7e931eb9680a8a6a6203", "author": {"user": {"login": "alai8", "name": "Anthony Lai"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/cb4b22d4a83f555f7a7a7e931eb9680a8a6a6203", "committedDate": "2020-06-05T23:40:06Z", "message": "Merge branch 'develop' into owls-79995"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eac17e619a896e8367f54fcee346ecc53829a8b8", "author": {"user": {"login": "alai8", "name": "Anthony Lai"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/eac17e619a896e8367f54fcee346ecc53829a8b8", "committedDate": "2020-06-09T16:54:52Z", "message": "Merge branch 'develop' into owls-79995"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8087b75326feb293731baa578133ee083937c6d8", "author": {"user": {"login": "alai8", "name": "Anthony Lai"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8087b75326feb293731baa578133ee083937c6d8", "committedDate": "2020-06-09T20:50:24Z", "message": "Merge branch 'develop' into owls-79995"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f905a51765d76c54ce81d21df46351840490035b", "author": {"user": {"login": "alai8", "name": "Anthony Lai"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f905a51765d76c54ce81d21df46351840490035b", "committedDate": "2020-06-09T21:11:01Z", "message": "Merge branch 'owls-79995' of https://github.com/oracle/weblogic-kubernetes-operator into owls-79995"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f68034ed639c48445ae52f5cbf94e79fdc6aff2d", "author": {"user": {"login": "alai8", "name": "Anthony Lai"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f68034ed639c48445ae52f5cbf94e79fdc6aff2d", "committedDate": "2020-06-11T21:12:17Z", "message": "Merge branch 'develop' into owls-79995"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1b67118619dc77158649880ebfc0df8f5785a86", "author": {"user": {"login": "alai8", "name": "Anthony Lai"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f1b67118619dc77158649880ebfc0df8f5785a86", "committedDate": "2020-06-12T17:25:02Z", "message": "Merge branch 'develop' into owls-79995"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97a2dbbecc0f5fd03667ad88b0bde749a14314bf", "author": {"user": {"login": "alai8", "name": "Anthony Lai"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/97a2dbbecc0f5fd03667ad88b0bde749a14314bf", "committedDate": "2020-06-12T17:40:22Z", "message": "Merge branch 'owls-79995' of github.com:oracle/weblogic-kubernetes-operator into owls-79995"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61e5fd8ed9ce9b60da75f1482f88a9f84a770841", "author": {"user": {"login": "alai8", "name": "Anthony Lai"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/61e5fd8ed9ce9b60da75f1482f88a9f84a770841", "committedDate": "2020-06-15T18:49:36Z", "message": "Merge branch 'develop' into owls-79995"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "985519cfe22c522ad67c22b6c98f6476f1888214", "author": {"user": {"login": "alai8", "name": "Anthony Lai"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/985519cfe22c522ad67c22b6c98f6476f1888214", "committedDate": "2020-06-16T16:54:08Z", "message": "Merge branch 'develop' into owls-79995"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b32a38235e79fda8b2f0a7b615fdd55ecc59c71", "author": {"user": {"login": "alai8", "name": "Anthony Lai"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7b32a38235e79fda8b2f0a7b615fdd55ecc59c71", "committedDate": "2020-06-16T17:26:33Z", "message": "rename maxClusterServerConcurrentStartup to maxConcurrentStartup in cluster and maxClusterConcurrentStartup in domain"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "664e1838148a5494e0104dd4b758bb4eee45294d", "author": {"user": {"login": "alai8", "name": "Anthony Lai"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/664e1838148a5494e0104dd4b758bb4eee45294d", "committedDate": "2020-06-16T18:48:54Z", "message": "code cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14cb39edd9d660b77f81c3df76529740020fc370", "author": {"user": {"login": "alai8", "name": "Anthony Lai"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/14cb39edd9d660b77f81c3df76529740020fc370", "committedDate": "2020-06-16T19:20:05Z", "message": "update description"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6259266563355809305891489111e1a47aa0422", "author": {"user": {"login": "alai8", "name": "Anthony Lai"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a6259266563355809305891489111e1a47aa0422", "committedDate": "2020-06-16T19:30:25Z", "message": "description update"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxODU1ODg4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#pullrequestreview-431855888", "createdAt": "2020-06-16T20:12:59Z", "commit": {"oid": "a6259266563355809305891489111e1a47aa0422"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDoxMzowMFrOGkreCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDoyMToxM1rOGkruPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExNDEyMQ==", "bodyText": "managed servers -> Managed Servers\nif maxConcurrentStartup is not -> if maxConcurrentStartup is not (maxConcurrentStartup should be in code font)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#discussion_r441114121", "createdAt": "2020-06-16T20:13:00Z", "author": {"login": "rosemarymarano"}, "path": "docs/domains/Domain.md", "diffHunk": "@@ -36,6 +37,7 @@ DomainSpec is a description of a domain.\n | `logHome` | string | The in-pod name of the directory in which to store the domain, Node Manager, server logs, server  *.out, and optionally HTTP access log files if `httpAccessLogInLogHome` is true. Ignored if logHomeEnabled is false. |\n | `logHomeEnabled` | Boolean | Specified whether the log home folder is enabled. Not required. Defaults to true if domainHomeSourceType is PersistentVolume; false, otherwise. |\n | `managedServers` | array of [Managed Server](#managed-server) | Configuration for individual Managed Servers. |\n+| `maxClusterConcurrentStartup` | number | The maximum number of managed servers that the operator will start in parallel for a cluster, if maxConcurrentStartup is not specified at the cluster level. A default value of 0 means there is no configured limit. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6259266563355809305891489111e1a47aa0422"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExODI3MQ==", "bodyText": "managed servers -> Managed Servers (globally)\nwill wait until a managed server to be in Ready and Running state -> will wait until a Managed Server is in the Ready and Running state.\n(Hmmm, in the WLS docs, https://docs.oracle.com/en/middleware/standalone/weblogic-server/14.1.1.0/start/server_life.html#GUID-B1352C2D-351C-47C0-BE40-CA109367263C, there is a RUNNING state but not a READY state. Maybe these docs are not applicable.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#discussion_r441118271", "createdAt": "2020-06-16T20:21:13Z", "author": {"login": "rosemarymarano"}, "path": "docs/domains/Domain.md", "diffHunk": "@@ -80,6 +82,7 @@ An element representing a cluster in the domain configuration.\n | `allowReplicasBelowMinDynClusterSize` | Boolean | If true (the default), then the number of replicas is allowed to drop below the minimum dynamic cluster size configured in the WebLogic domain home configuration. Otherwise, the operator will ensure that the number of replicas is not less than the minimum dynamic cluster setting. This setting applies to dynamic clusters only. |\n | `clusterName` | string | The name of this cluster. Required |\n | `clusterService` | [Kubernetes Resource](#kubernetes-resource) | Customization affecting ClusterIP Kubernetes services for the WebLogic cluster. |\n+| `maxConcurrentStartup` | number | The maximum number of managed servers that the operator will start in parallel for the cluster in response to a change in replicas count for the cluster. If more managed servers need to be started, the operator will wait until a managed server to be in Ready and Running state before starting the next managed server. A value of 0 (the default) means all managed servers will start in parallel. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6259266563355809305891489111e1a47aa0422"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxODk0NjU1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#pullrequestreview-431894655", "createdAt": "2020-06-16T21:11:07Z", "commit": {"oid": "a6259266563355809305891489111e1a47aa0422"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMToxMTowN1rOGktUbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMToxMTowN1rOGktUbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE0NDQzMA==", "bodyText": "Add 'Defaults to true'.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#discussion_r441144430", "createdAt": "2020-06-16T21:11:07Z", "author": {"login": "tbarnes-us"}, "path": "docs/domains/Domain.json", "diffHunk": "@@ -383,6 +393,10 @@\n           \"description\": \"Specified whether the log home folder is enabled. Not required. Defaults to true if domainHomeSourceType is PersistentVolume; false, otherwise.\",\n           \"type\": \"boolean\"\n         },\n+        \"allowReplicasBelowMinDynClusterSize\": {\n+          \"description\": \"Whether to allow the number of replicas to drop below the minimum dynamic cluster size configured in the WebLogic domain home configuration, if this is not specified at the cluster level.\",\n+          \"type\": \"boolean\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6259266563355809305891489111e1a47aa0422"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxODk1MDk2", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#pullrequestreview-431895096", "createdAt": "2020-06-16T21:11:46Z", "commit": {"oid": "a6259266563355809305891489111e1a47aa0422"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMToxMTo0NlrOGktVyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMToxMTo0NlrOGktVyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE0NDc3Nw==", "bodyText": "Add 'Defaults to true.' (Similarly add the default in any other description.)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#discussion_r441144777", "createdAt": "2020-06-16T21:11:46Z", "author": {"login": "tbarnes-us"}, "path": "docs/domains/Domain.md", "diffHunk": "@@ -17,6 +17,7 @@ DomainSpec is a description of a domain.\n | Name | Type | Description |\n | --- | --- | --- |\n | `adminServer` | [Admin Server](#admin-server) | Configuration for the Administration Server. |\n+| `allowReplicasBelowMinDynClusterSize` | Boolean | Whether to allow the number of replicas to drop below the minimum dynamic cluster size configured in the WebLogic domain home configuration, if this is not specified at the cluster level. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6259266563355809305891489111e1a47aa0422"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxODk2MzYw", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#pullrequestreview-431896360", "createdAt": "2020-06-16T21:13:47Z", "commit": {"oid": "a6259266563355809305891489111e1a47aa0422"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMToxMzo0N1rOGktZjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMToxMzo0N1rOGktZjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE0NTc0MQ==", "bodyText": "A default value of 0 means there --> A value of 0 (the default) means that there", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#discussion_r441145741", "createdAt": "2020-06-16T21:13:47Z", "author": {"login": "tbarnes-us"}, "path": "docs/domains/Domain.json", "diffHunk": "@@ -343,6 +348,11 @@\n             \"IfNotPresent\"\n           ]\n         },\n+        \"maxClusterConcurrentStartup\": {\n+          \"description\": \"The maximum number of managed servers that the operator will start in parallel for a cluster, if maxConcurrentStartup is not specified at the cluster level. A default value of 0 means there is no configured limit.\",\n+          \"type\": \"number\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6259266563355809305891489111e1a47aa0422"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxOTA5MDg0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#pullrequestreview-431909084", "createdAt": "2020-06-16T21:35:08Z", "commit": {"oid": "a6259266563355809305891489111e1a47aa0422"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTozNTowOFrOGkuAsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTozNTowOFrOGkuAsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE1NTc2Mg==", "bodyText": "General questions (not directly related to this unit test):\nWill the managed server startup ordering fix from #1727 continue to apply (start 'lowest' servers first)?  I assume so?\nIf the answer is yes, do these unit tests verify this?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#discussion_r441155762", "createdAt": "2020-06-16T21:35:08Z", "author": {"login": "tbarnes-us"}, "path": "operator/src/test/java/oracle/kubernetes/operator/steps/ManagedServerUpIteratorStepTest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator.steps;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.meterware.simplestub.Memento;\n+import com.meterware.simplestub.StaticStubSupport;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import oracle.kubernetes.operator.ProcessingConstants;\n+import oracle.kubernetes.operator.helpers.DomainPresenceInfo;\n+import oracle.kubernetes.operator.helpers.DomainPresenceInfo.ServerStartupInfo;\n+import oracle.kubernetes.operator.steps.ManagedServerUpIteratorStep.StartClusteredServersStep;\n+import oracle.kubernetes.operator.steps.ManagedServerUpIteratorStep.StartManagedServersStep;\n+import oracle.kubernetes.operator.utils.WlsDomainConfigSupport;\n+import oracle.kubernetes.operator.work.FiberTestSupport;\n+import oracle.kubernetes.operator.work.Step;\n+import oracle.kubernetes.operator.work.Step.StepAndPacket;\n+import oracle.kubernetes.operator.work.TerminalStep;\n+import oracle.kubernetes.utils.TestUtils;\n+import oracle.kubernetes.weblogic.domain.ClusterConfigurator;\n+import oracle.kubernetes.weblogic.domain.DomainConfigurator;\n+import oracle.kubernetes.weblogic.domain.DomainConfiguratorFactory;\n+import oracle.kubernetes.weblogic.domain.model.Domain;\n+import oracle.kubernetes.weblogic.domain.model.DomainSpec;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static oracle.kubernetes.operator.steps.ManagedServerUpIteratorStepTest.TestStepFactory.getServers;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.junit.MatcherAssert.assertThat;\n+\n+public class ManagedServerUpIteratorStepTest {\n+\n+  private static final String DOMAIN = \"domain\";\n+  private static final String NS = \"namespace\";\n+  private static final String UID = \"uid1\";\n+  private static final String ADMIN = \"asName\";\n+  private static final String CLUSTER = \"cluster1\";\n+  private final Domain domain = createDomain();\n+  private final DomainConfigurator configurator = DomainConfiguratorFactory.forDomain(domain);\n+  private WlsDomainConfigSupport configSupport = new WlsDomainConfigSupport(DOMAIN);\n+\n+  private Step nextStep = new TerminalStep();\n+  private FiberTestSupport testSupport = new FiberTestSupport();\n+  private List<Memento> mementos = new ArrayList<>();\n+  private DomainPresenceInfo domainPresenceInfo = createDomainPresenceInfo();\n+  private TestUtils.ConsoleHandlerMemento consoleHandlerMemento;\n+\n+  private DomainPresenceInfo createDomainPresenceInfo() {\n+    return new DomainPresenceInfo(domain);\n+  }\n+\n+  private Domain createDomain() {\n+    return new Domain().withMetadata(createMetaData()).withSpec(createDomainSpec());\n+  }\n+\n+  private V1ObjectMeta createMetaData() {\n+    return new V1ObjectMeta().namespace(NS);\n+  }\n+\n+  private DomainSpec createDomainSpec() {\n+    return new DomainSpec().withDomainUid(UID).withReplicas(1);\n+  }\n+\n+  /**\n+   * Setup env for tests.\n+   * @throws NoSuchFieldException if TestStepFactory fails to install\n+   */\n+  @Before\n+  public void setUp() throws NoSuchFieldException {\n+    mementos.add(consoleHandlerMemento = TestUtils.silenceOperatorLogger());\n+    mementos.add(TestStepFactory.install());\n+    testSupport.addDomainPresenceInfo(domainPresenceInfo);\n+  }\n+\n+  /**\n+   * Cleanup env after tests.\n+   * @throws Exception if test support failed\n+   */\n+  @After\n+  public void tearDown() throws Exception {\n+    for (Memento memento : mementos) {\n+      memento.revert();\n+    }\n+\n+    testSupport.throwOnCompletionFailure();\n+  }\n+\n+  @Test\n+  public void verifyThat_withConcurrencyOf1_bothClusteredServersShouldStartSequentially() {\n+    configureCluster(CLUSTER).withMaxConcurrentStartup(1);\n+    addWlsCluster(CLUSTER, \"ms1\", \"ms2\");\n+\n+    invokeStepWithServerStartupInfos(createServerStartupInfosForCluster(CLUSTER,\"ms1\", \"ms2\"));\n+\n+    assertThat(getServers(), hasItem(Arrays.asList(\"ms1\", \"ms2\")));\n+    assertThat(getServers().size(), equalTo(1));\n+  }\n+\n+  @Test\n+  public void verifyThat_withConcurrencyOf0_bothClusteredServersShouldStartConcurrently() {\n+    configureCluster(CLUSTER).withMaxConcurrentStartup(0);\n+    addWlsCluster(CLUSTER, \"ms1\", \"ms2\");\n+\n+    invokeStepWithServerStartupInfos(createServerStartupInfosForCluster(CLUSTER,\"ms1\", \"ms2\"));\n+\n+    assertThat(getServers(), allOf(hasItem(\"ms1\"), hasItem(\"ms2\")));\n+  }\n+\n+  @Test\n+  public void verifyThat_withConcurrencyOf2_bothClusteredServersShouldStartConcurrently() {\n+    configureCluster(CLUSTER).withMaxConcurrentStartup(2);\n+    addWlsCluster(CLUSTER, \"ms1\", \"ms2\");\n+\n+    invokeStepWithServerStartupInfos(createServerStartupInfosForCluster(CLUSTER, \"ms1\", \"ms2\"));\n+\n+    assertThat(getServers(), allOf(hasItem(\"ms1\"), hasItem(\"ms2\")));\n+  }\n+\n+  @Test\n+  public void verifyThat_withConcurrencyOf2_4clusteredServersShouldStartIn2Threads() {\n+    configureCluster(CLUSTER).withMaxConcurrentStartup(2);\n+    addWlsCluster(CLUSTER, \"ms1\", \"ms2\", \"ms3\", \"ms4\");\n+\n+    invokeStepWithServerStartupInfos(createServerStartupInfosForCluster(CLUSTER, \"ms1\", \"ms2\", \"ms3\", \"ms4\"));\n+\n+    assertThat(getServers(), hasItem(Arrays.asList(\"ms1\", \"ms2\", \"ms3\", \"ms4\")));\n+    assertThat(getServers().size(), equalTo(2));\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6259266563355809305891489111e1a47aa0422"}, "originalPosition": 140}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "415bfdad0c84b3ad78fdbd1157a3975131e3767b", "author": {"user": {"login": "alai8", "name": "Anthony Lai"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/415bfdad0c84b3ad78fdbd1157a3975131e3767b", "committedDate": "2020-06-16T21:35:51Z", "message": "doc edits from review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxOTI0NjMw", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#pullrequestreview-431924630", "createdAt": "2020-06-16T22:03:59Z", "commit": {"oid": "415bfdad0c84b3ad78fdbd1157a3975131e3767b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMjowMzo1OVrOGkuw5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMjowMzo1OVrOGkuw5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2ODEwMw==", "bodyText": "If you're using Intellij, it should have suggested that you change this to\n.filter(this::isServerInCluster)\nsince there is no need to repeat the variable ssi here", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#discussion_r441168103", "createdAt": "2020-06-16T22:03:59Z", "author": {"login": "russgold"}, "path": "operator/src/main/java/oracle/kubernetes/operator/steps/ManagedServerUpIteratorStep.java", "diffHunk": "@@ -102,6 +119,27 @@ private Packet createPacketForServer(Packet packet, ServerStartupInfo ssi) {\n     return p;\n   }\n \n+  private Map<String, StartClusteredServersStepFactory> getStartClusteredServersStepFactories(\n+      Collection<ServerStartupInfo> startupInfos,\n+      Packet packet) {\n+    DomainPresenceInfo info = packet.getSpi(DomainPresenceInfo.class);\n+    Domain domain = info.getDomain();\n+\n+    Map<String, StartClusteredServersStepFactory> factories = new HashMap<>();\n+    startupInfos.stream()\n+        .filter(ssi -> isServerInCluster(ssi))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "415bfdad0c84b3ad78fdbd1157a3975131e3767b"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxOTI3Mzg4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#pullrequestreview-431927388", "createdAt": "2020-06-16T22:09:51Z", "commit": {"oid": "415bfdad0c84b3ad78fdbd1157a3975131e3767b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMjowOTo1MVrOGku5nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMjowOTo1MVrOGku5nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE3MDMzNQ==", "bodyText": "You don't need to prefix your test names with \"verifyThat_\" since all tests do verification. Just make it an assertion on the behaviors, such as:\nwithConcurrencyOf1_clusteredServersStartSequentially", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#discussion_r441170335", "createdAt": "2020-06-16T22:09:51Z", "author": {"login": "russgold"}, "path": "operator/src/test/java/oracle/kubernetes/operator/steps/ManagedServerUpIteratorStepTest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator.steps;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.meterware.simplestub.Memento;\n+import com.meterware.simplestub.StaticStubSupport;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import oracle.kubernetes.operator.ProcessingConstants;\n+import oracle.kubernetes.operator.helpers.DomainPresenceInfo;\n+import oracle.kubernetes.operator.helpers.DomainPresenceInfo.ServerStartupInfo;\n+import oracle.kubernetes.operator.steps.ManagedServerUpIteratorStep.StartClusteredServersStep;\n+import oracle.kubernetes.operator.steps.ManagedServerUpIteratorStep.StartManagedServersStep;\n+import oracle.kubernetes.operator.utils.WlsDomainConfigSupport;\n+import oracle.kubernetes.operator.work.FiberTestSupport;\n+import oracle.kubernetes.operator.work.Step;\n+import oracle.kubernetes.operator.work.Step.StepAndPacket;\n+import oracle.kubernetes.operator.work.TerminalStep;\n+import oracle.kubernetes.utils.TestUtils;\n+import oracle.kubernetes.weblogic.domain.ClusterConfigurator;\n+import oracle.kubernetes.weblogic.domain.DomainConfigurator;\n+import oracle.kubernetes.weblogic.domain.DomainConfiguratorFactory;\n+import oracle.kubernetes.weblogic.domain.model.Domain;\n+import oracle.kubernetes.weblogic.domain.model.DomainSpec;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static oracle.kubernetes.operator.steps.ManagedServerUpIteratorStepTest.TestStepFactory.getServers;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.junit.MatcherAssert.assertThat;\n+\n+public class ManagedServerUpIteratorStepTest {\n+\n+  private static final String DOMAIN = \"domain\";\n+  private static final String NS = \"namespace\";\n+  private static final String UID = \"uid1\";\n+  private static final String ADMIN = \"asName\";\n+  private static final String CLUSTER = \"cluster1\";\n+  private final Domain domain = createDomain();\n+  private final DomainConfigurator configurator = DomainConfiguratorFactory.forDomain(domain);\n+  private WlsDomainConfigSupport configSupport = new WlsDomainConfigSupport(DOMAIN);\n+\n+  private Step nextStep = new TerminalStep();\n+  private FiberTestSupport testSupport = new FiberTestSupport();\n+  private List<Memento> mementos = new ArrayList<>();\n+  private DomainPresenceInfo domainPresenceInfo = createDomainPresenceInfo();\n+  private TestUtils.ConsoleHandlerMemento consoleHandlerMemento;\n+\n+  private DomainPresenceInfo createDomainPresenceInfo() {\n+    return new DomainPresenceInfo(domain);\n+  }\n+\n+  private Domain createDomain() {\n+    return new Domain().withMetadata(createMetaData()).withSpec(createDomainSpec());\n+  }\n+\n+  private V1ObjectMeta createMetaData() {\n+    return new V1ObjectMeta().namespace(NS);\n+  }\n+\n+  private DomainSpec createDomainSpec() {\n+    return new DomainSpec().withDomainUid(UID).withReplicas(1);\n+  }\n+\n+  /**\n+   * Setup env for tests.\n+   * @throws NoSuchFieldException if TestStepFactory fails to install\n+   */\n+  @Before\n+  public void setUp() throws NoSuchFieldException {\n+    mementos.add(consoleHandlerMemento = TestUtils.silenceOperatorLogger());\n+    mementos.add(TestStepFactory.install());\n+    testSupport.addDomainPresenceInfo(domainPresenceInfo);\n+  }\n+\n+  /**\n+   * Cleanup env after tests.\n+   * @throws Exception if test support failed\n+   */\n+  @After\n+  public void tearDown() throws Exception {\n+    for (Memento memento : mementos) {\n+      memento.revert();\n+    }\n+\n+    testSupport.throwOnCompletionFailure();\n+  }\n+\n+  @Test\n+  public void verifyThat_withConcurrencyOf1_bothClusteredServersShouldStartSequentially() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "415bfdad0c84b3ad78fdbd1157a3975131e3767b"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxOTI4MDY1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#pullrequestreview-431928065", "createdAt": "2020-06-16T22:11:16Z", "commit": {"oid": "415bfdad0c84b3ad78fdbd1157a3975131e3767b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMjoxMToxNlrOGku73Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMjoxMToxNlrOGku73Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE3MDkwOQ==", "bodyText": "missing 'e' in \"Clusterd\"", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#discussion_r441170909", "createdAt": "2020-06-16T22:11:16Z", "author": {"login": "russgold"}, "path": "operator/src/test/java/oracle/kubernetes/operator/steps/ManagedServerUpIteratorStepTest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator.steps;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import com.meterware.simplestub.Memento;\n+import com.meterware.simplestub.StaticStubSupport;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import oracle.kubernetes.operator.ProcessingConstants;\n+import oracle.kubernetes.operator.helpers.DomainPresenceInfo;\n+import oracle.kubernetes.operator.helpers.DomainPresenceInfo.ServerStartupInfo;\n+import oracle.kubernetes.operator.steps.ManagedServerUpIteratorStep.StartClusteredServersStep;\n+import oracle.kubernetes.operator.steps.ManagedServerUpIteratorStep.StartManagedServersStep;\n+import oracle.kubernetes.operator.utils.WlsDomainConfigSupport;\n+import oracle.kubernetes.operator.work.FiberTestSupport;\n+import oracle.kubernetes.operator.work.Step;\n+import oracle.kubernetes.operator.work.Step.StepAndPacket;\n+import oracle.kubernetes.operator.work.TerminalStep;\n+import oracle.kubernetes.utils.TestUtils;\n+import oracle.kubernetes.weblogic.domain.ClusterConfigurator;\n+import oracle.kubernetes.weblogic.domain.DomainConfigurator;\n+import oracle.kubernetes.weblogic.domain.DomainConfiguratorFactory;\n+import oracle.kubernetes.weblogic.domain.model.Domain;\n+import oracle.kubernetes.weblogic.domain.model.DomainSpec;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static oracle.kubernetes.operator.steps.ManagedServerUpIteratorStepTest.TestStepFactory.getServers;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.junit.MatcherAssert.assertThat;\n+\n+public class ManagedServerUpIteratorStepTest {\n+\n+  private static final String DOMAIN = \"domain\";\n+  private static final String NS = \"namespace\";\n+  private static final String UID = \"uid1\";\n+  private static final String ADMIN = \"asName\";\n+  private static final String CLUSTER = \"cluster1\";\n+  private final Domain domain = createDomain();\n+  private final DomainConfigurator configurator = DomainConfiguratorFactory.forDomain(domain);\n+  private WlsDomainConfigSupport configSupport = new WlsDomainConfigSupport(DOMAIN);\n+\n+  private Step nextStep = new TerminalStep();\n+  private FiberTestSupport testSupport = new FiberTestSupport();\n+  private List<Memento> mementos = new ArrayList<>();\n+  private DomainPresenceInfo domainPresenceInfo = createDomainPresenceInfo();\n+  private TestUtils.ConsoleHandlerMemento consoleHandlerMemento;\n+\n+  private DomainPresenceInfo createDomainPresenceInfo() {\n+    return new DomainPresenceInfo(domain);\n+  }\n+\n+  private Domain createDomain() {\n+    return new Domain().withMetadata(createMetaData()).withSpec(createDomainSpec());\n+  }\n+\n+  private V1ObjectMeta createMetaData() {\n+    return new V1ObjectMeta().namespace(NS);\n+  }\n+\n+  private DomainSpec createDomainSpec() {\n+    return new DomainSpec().withDomainUid(UID).withReplicas(1);\n+  }\n+\n+  /**\n+   * Setup env for tests.\n+   * @throws NoSuchFieldException if TestStepFactory fails to install\n+   */\n+  @Before\n+  public void setUp() throws NoSuchFieldException {\n+    mementos.add(consoleHandlerMemento = TestUtils.silenceOperatorLogger());\n+    mementos.add(TestStepFactory.install());\n+    testSupport.addDomainPresenceInfo(domainPresenceInfo);\n+  }\n+\n+  /**\n+   * Cleanup env after tests.\n+   * @throws Exception if test support failed\n+   */\n+  @After\n+  public void tearDown() throws Exception {\n+    for (Memento memento : mementos) {\n+      memento.revert();\n+    }\n+\n+    testSupport.throwOnCompletionFailure();\n+  }\n+\n+  @Test\n+  public void verifyThat_withConcurrencyOf1_bothClusteredServersShouldStartSequentially() {\n+    configureCluster(CLUSTER).withMaxConcurrentStartup(1);\n+    addWlsCluster(CLUSTER, \"ms1\", \"ms2\");\n+\n+    invokeStepWithServerStartupInfos(createServerStartupInfosForCluster(CLUSTER,\"ms1\", \"ms2\"));\n+\n+    assertThat(getServers(), hasItem(Arrays.asList(\"ms1\", \"ms2\")));\n+    assertThat(getServers().size(), equalTo(1));\n+  }\n+\n+  @Test\n+  public void verifyThat_withConcurrencyOf0_bothClusteredServersShouldStartConcurrently() {\n+    configureCluster(CLUSTER).withMaxConcurrentStartup(0);\n+    addWlsCluster(CLUSTER, \"ms1\", \"ms2\");\n+\n+    invokeStepWithServerStartupInfos(createServerStartupInfosForCluster(CLUSTER,\"ms1\", \"ms2\"));\n+\n+    assertThat(getServers(), allOf(hasItem(\"ms1\"), hasItem(\"ms2\")));\n+  }\n+\n+  @Test\n+  public void verifyThat_withConcurrencyOf2_bothClusteredServersShouldStartConcurrently() {\n+    configureCluster(CLUSTER).withMaxConcurrentStartup(2);\n+    addWlsCluster(CLUSTER, \"ms1\", \"ms2\");\n+\n+    invokeStepWithServerStartupInfos(createServerStartupInfosForCluster(CLUSTER, \"ms1\", \"ms2\"));\n+\n+    assertThat(getServers(), allOf(hasItem(\"ms1\"), hasItem(\"ms2\")));\n+  }\n+\n+  @Test\n+  public void verifyThat_withConcurrencyOf2_4clusteredServersShouldStartIn2Threads() {\n+    configureCluster(CLUSTER).withMaxConcurrentStartup(2);\n+    addWlsCluster(CLUSTER, \"ms1\", \"ms2\", \"ms3\", \"ms4\");\n+\n+    invokeStepWithServerStartupInfos(createServerStartupInfosForCluster(CLUSTER, \"ms1\", \"ms2\", \"ms3\", \"ms4\"));\n+\n+    assertThat(getServers(), hasItem(Arrays.asList(\"ms1\", \"ms2\", \"ms3\", \"ms4\")));\n+    assertThat(getServers().size(), equalTo(2));\n+  }\n+\n+  @Test\n+  public void verifyThat_withMultipleClusters_differentClusterShouldStartDifferently() {\n+    final String CLUSTER2 = \"cluster2\";\n+    configureCluster(CLUSTER).withMaxConcurrentStartup(1);\n+    configureCluster(CLUSTER2).withMaxConcurrentStartup(0);\n+\n+    addWlsCluster(CLUSTER, \"ms1\", \"ms2\");\n+    addWlsCluster(CLUSTER2, \"ms3\", \"ms4\");\n+\n+    Collection<ServerStartupInfo> serverStartupInfos = createServerStartupInfosForCluster(CLUSTER, \"ms1\", \"ms2\");\n+    serverStartupInfos.addAll(createServerStartupInfosForCluster(CLUSTER2, \"ms3\", \"ms4\"));\n+    invokeStepWithServerStartupInfos(serverStartupInfos);\n+\n+    assertThat(getServers(), hasItem(Arrays.asList(\"ms1\", \"ms2\")));\n+    assertThat(getServers(), allOf(hasItem(\"ms3\"), hasItem(\"ms4\")));\n+  }\n+\n+  @Test\n+  public void verifyThat_maxClusterConcurrentStartup_doesNotApplyToNonClusterdServers() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "415bfdad0c84b3ad78fdbd1157a3975131e3767b"}, "originalPosition": 160}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxOTMwNDkx", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#pullrequestreview-431930491", "createdAt": "2020-06-16T22:16:24Z", "commit": {"oid": "415bfdad0c84b3ad78fdbd1157a3975131e3767b"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd05dace062734eea464d2948e72ca8c603bb56e", "author": {"user": {"login": "alai8", "name": "Anthony Lai"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/dd05dace062734eea464d2948e72ca8c603bb56e", "committedDate": "2020-06-16T22:46:50Z", "message": "minor fix to address review comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4581c58d1bd8ff64c16dee7f9e77e83651f0b3b8", "author": {"user": {"login": "alai8", "name": "Anthony Lai"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/4581c58d1bd8ff64c16dee7f9e77e83651f0b3b8", "committedDate": "2020-06-16T22:47:15Z", "message": "test names"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxOTQ3MTAx", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#pullrequestreview-431947101", "createdAt": "2020-06-16T22:55:54Z", "commit": {"oid": "4581c58d1bd8ff64c16dee7f9e77e83651f0b3b8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxOTYwMjEz", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#pullrequestreview-431960213", "createdAt": "2020-06-16T23:31:03Z", "commit": {"oid": "4581c58d1bd8ff64c16dee7f9e77e83651f0b3b8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMjgzMjUx", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1741#pullrequestreview-432283251", "createdAt": "2020-06-17T10:51:01Z", "commit": {"oid": "4581c58d1bd8ff64c16dee7f9e77e83651f0b3b8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce26e66b652939aec77de922659c7915961a2728", "author": {"user": {"login": "rjeberhard", "name": "Ryan Eberhard"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ce26e66b652939aec77de922659c7915961a2728", "committedDate": "2020-06-19T18:25:28Z", "message": "Merge remote-tracking branch 'origin/develop' into owls-79995"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4551, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}