{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNDIzMTA1", "number": 1564, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMTozNDowOFrODyB_pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMTozNTowNlrODyCA0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzg4MDY5OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleDomainValidation.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMTozNDowOFrOGF1mFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDoyMzoxMlrOGGKK2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc3NDE2NA==", "bodyText": "failed? or succeeded?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1564#discussion_r408774164", "createdAt": "2020-04-15T11:34:08Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleDomainValidation.java", "diffHunk": "@@ -48,6 +55,51 @@ public void testCreatingDomain() {\n             .metadata(new V1ObjectMeta().namespace(namespace).name(serviceAccountName))));\n     logger.info(\"Created service account: {0}\", serviceAccount.getMetadata().getName());\n \n+    // create persistent volume and persistent volume claim\n+    final String pvcName = domainUID + \"-pvc\"; // name of the persistent volume claim\n+    final String pvName = domainUID + \"-pv\"; // name of the persistent volume\n+\n+    V1PersistentVolumeClaim v1pvc = new V1PersistentVolumeClaim()\n+        .spec(new V1PersistentVolumeClaimSpec()\n+            .addAccessModesItem(\"ReadWriteMany\")\n+            .storageClassName(domainUID + \"-weblogic-domain-storage-class\")\n+            .volumeName(domainUID + \"-weblogic-pv\")\n+            .resources(new V1ResourceRequirements()\n+                .putRequestsItem(\"storage\", Quantity.fromString(\"10Gi\"))))\n+        .metadata(new V1ObjectMetaBuilder()\n+            .withName(pvcName)\n+            .withNamespace(namespace)\n+            .build()\n+            .putLabelsItem(\"weblogic.resourceVersion\", \"domain-v2\")\n+            .putLabelsItem(\"weblogic.domainUID\", domainUID));\n+\n+    boolean success = assertDoesNotThrow(\n+        () -> TestActions.createPersistentVolumeClaim(v1pvc),\n+        \"Persistent volume claim creation failed, look at the log for failure ApiException responsebody\"\n+    );\n+    assertTrue(success, \"PersistentVolumeClaim creation failed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d1fca55d438c54e5c27982fc7602621ee4b2b2"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MDY2OQ==", "bodyText": "Assert that the supplied condition is true.\nFails with the supplied failure message.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1564#discussion_r408970669", "createdAt": "2020-04-15T16:22:09Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleDomainValidation.java", "diffHunk": "@@ -48,6 +55,51 @@ public void testCreatingDomain() {\n             .metadata(new V1ObjectMeta().namespace(namespace).name(serviceAccountName))));\n     logger.info(\"Created service account: {0}\", serviceAccount.getMetadata().getName());\n \n+    // create persistent volume and persistent volume claim\n+    final String pvcName = domainUID + \"-pvc\"; // name of the persistent volume claim\n+    final String pvName = domainUID + \"-pv\"; // name of the persistent volume\n+\n+    V1PersistentVolumeClaim v1pvc = new V1PersistentVolumeClaim()\n+        .spec(new V1PersistentVolumeClaimSpec()\n+            .addAccessModesItem(\"ReadWriteMany\")\n+            .storageClassName(domainUID + \"-weblogic-domain-storage-class\")\n+            .volumeName(domainUID + \"-weblogic-pv\")\n+            .resources(new V1ResourceRequirements()\n+                .putRequestsItem(\"storage\", Quantity.fromString(\"10Gi\"))))\n+        .metadata(new V1ObjectMetaBuilder()\n+            .withName(pvcName)\n+            .withNamespace(namespace)\n+            .build()\n+            .putLabelsItem(\"weblogic.resourceVersion\", \"domain-v2\")\n+            .putLabelsItem(\"weblogic.domainUID\", domainUID));\n+\n+    boolean success = assertDoesNotThrow(\n+        () -> TestActions.createPersistentVolumeClaim(v1pvc),\n+        \"Persistent volume claim creation failed, look at the log for failure ApiException responsebody\"\n+    );\n+    assertTrue(success, \"PersistentVolumeClaim creation failed\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc3NDE2NA=="}, "originalCommit": {"oid": "68d1fca55d438c54e5c27982fc7602621ee4b2b2"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2OTkwMw==", "bodyText": "This looks right.  Mark, what would you prefer?  It's asserting that success is true and then providing a message for when that assertion is violated.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1564#discussion_r409069903", "createdAt": "2020-04-15T19:06:03Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleDomainValidation.java", "diffHunk": "@@ -48,6 +55,51 @@ public void testCreatingDomain() {\n             .metadata(new V1ObjectMeta().namespace(namespace).name(serviceAccountName))));\n     logger.info(\"Created service account: {0}\", serviceAccount.getMetadata().getName());\n \n+    // create persistent volume and persistent volume claim\n+    final String pvcName = domainUID + \"-pvc\"; // name of the persistent volume claim\n+    final String pvName = domainUID + \"-pv\"; // name of the persistent volume\n+\n+    V1PersistentVolumeClaim v1pvc = new V1PersistentVolumeClaim()\n+        .spec(new V1PersistentVolumeClaimSpec()\n+            .addAccessModesItem(\"ReadWriteMany\")\n+            .storageClassName(domainUID + \"-weblogic-domain-storage-class\")\n+            .volumeName(domainUID + \"-weblogic-pv\")\n+            .resources(new V1ResourceRequirements()\n+                .putRequestsItem(\"storage\", Quantity.fromString(\"10Gi\"))))\n+        .metadata(new V1ObjectMetaBuilder()\n+            .withName(pvcName)\n+            .withNamespace(namespace)\n+            .build()\n+            .putLabelsItem(\"weblogic.resourceVersion\", \"domain-v2\")\n+            .putLabelsItem(\"weblogic.domainUID\", domainUID));\n+\n+    boolean success = assertDoesNotThrow(\n+        () -> TestActions.createPersistentVolumeClaim(v1pvc),\n+        \"Persistent volume claim creation failed, look at the log for failure ApiException responsebody\"\n+    );\n+    assertTrue(success, \"PersistentVolumeClaim creation failed\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc3NDE2NA=="}, "originalCommit": {"oid": "68d1fca55d438c54e5c27982fc7602621ee4b2b2"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTExMTI1OA==", "bodyText": "ok got it. sorry it's a pain to have to remember the different types of asserts :(", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1564#discussion_r409111258", "createdAt": "2020-04-15T20:23:12Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleDomainValidation.java", "diffHunk": "@@ -48,6 +55,51 @@ public void testCreatingDomain() {\n             .metadata(new V1ObjectMeta().namespace(namespace).name(serviceAccountName))));\n     logger.info(\"Created service account: {0}\", serviceAccount.getMetadata().getName());\n \n+    // create persistent volume and persistent volume claim\n+    final String pvcName = domainUID + \"-pvc\"; // name of the persistent volume claim\n+    final String pvName = domainUID + \"-pv\"; // name of the persistent volume\n+\n+    V1PersistentVolumeClaim v1pvc = new V1PersistentVolumeClaim()\n+        .spec(new V1PersistentVolumeClaimSpec()\n+            .addAccessModesItem(\"ReadWriteMany\")\n+            .storageClassName(domainUID + \"-weblogic-domain-storage-class\")\n+            .volumeName(domainUID + \"-weblogic-pv\")\n+            .resources(new V1ResourceRequirements()\n+                .putRequestsItem(\"storage\", Quantity.fromString(\"10Gi\"))))\n+        .metadata(new V1ObjectMetaBuilder()\n+            .withName(pvcName)\n+            .withNamespace(namespace)\n+            .build()\n+            .putLabelsItem(\"weblogic.resourceVersion\", \"domain-v2\")\n+            .putLabelsItem(\"weblogic.domainUID\", domainUID));\n+\n+    boolean success = assertDoesNotThrow(\n+        () -> TestActions.createPersistentVolumeClaim(v1pvc),\n+        \"Persistent volume claim creation failed, look at the log for failure ApiException responsebody\"\n+    );\n+    assertTrue(success, \"PersistentVolumeClaim creation failed\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc3NDE2NA=="}, "originalCommit": {"oid": "68d1fca55d438c54e5c27982fc7602621ee4b2b2"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzg4MzA3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleDomainValidation.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMTozNDo1M1rOGF1nmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODozMDo1M1rOGGGWyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc3NDU1Mw==", "bodyText": "it would be better to catch the exception and check it, and what is \"look at the log\"? what log? where? get the details and print them out here yourself", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1564#discussion_r408774553", "createdAt": "2020-04-15T11:34:53Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleDomainValidation.java", "diffHunk": "@@ -48,6 +55,51 @@ public void testCreatingDomain() {\n             .metadata(new V1ObjectMeta().namespace(namespace).name(serviceAccountName))));\n     logger.info(\"Created service account: {0}\", serviceAccount.getMetadata().getName());\n \n+    // create persistent volume and persistent volume claim\n+    final String pvcName = domainUID + \"-pvc\"; // name of the persistent volume claim\n+    final String pvName = domainUID + \"-pv\"; // name of the persistent volume\n+\n+    V1PersistentVolumeClaim v1pvc = new V1PersistentVolumeClaim()\n+        .spec(new V1PersistentVolumeClaimSpec()\n+            .addAccessModesItem(\"ReadWriteMany\")\n+            .storageClassName(domainUID + \"-weblogic-domain-storage-class\")\n+            .volumeName(domainUID + \"-weblogic-pv\")\n+            .resources(new V1ResourceRequirements()\n+                .putRequestsItem(\"storage\", Quantity.fromString(\"10Gi\"))))\n+        .metadata(new V1ObjectMetaBuilder()\n+            .withName(pvcName)\n+            .withNamespace(namespace)\n+            .build()\n+            .putLabelsItem(\"weblogic.resourceVersion\", \"domain-v2\")\n+            .putLabelsItem(\"weblogic.domainUID\", domainUID));\n+\n+    boolean success = assertDoesNotThrow(\n+        () -> TestActions.createPersistentVolumeClaim(v1pvc),\n+        \"Persistent volume claim creation failed, look at the log for failure ApiException responsebody\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d1fca55d438c54e5c27982fc7602621ee4b2b2"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3NTkxMA==", "bodyText": "The final call to create pvc/pv \"Kubernetes.createPersistentVolumeClaim(v1pvc)\" will log ApiException messages as severe in the console. That is addressed in PR #1562\nWhen this messages is printed\n\"Persistent volume claim creation failed, look at the log for failure ApiException responsebody\"\nThe reason for the failure will be just above few lines in the console log. I can change the message to include \"look at the console log\" if that helps.\nSo which way you want to check ?\nassertDoesNotThrow(\n() -> TestActions.createPersistentVolumeClaim(v1pvc),\n\"Persistent volume claim creation failed, \"\n+ \"look at the above log messages for failure reason in ApiException responsebody\");\n(or)\ntry{\nTestActions.createPersistentVolumeClaim(v1pvc);\nlogger.info(\"PersistentVolumeClaim {0} created\", pvcName);\n} catch (ApiException ex) {\nlogger.severe(\"PersistentVolumeClaim {0} creation failed.\", pvcName);\nlogger.severe(ex.getResponseBody());\nfail(String.format(\"PersistentVolumeClaim {0} creation failed\", pvcName));\n}", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1564#discussion_r408975910", "createdAt": "2020-04-15T16:30:06Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleDomainValidation.java", "diffHunk": "@@ -48,6 +55,51 @@ public void testCreatingDomain() {\n             .metadata(new V1ObjectMeta().namespace(namespace).name(serviceAccountName))));\n     logger.info(\"Created service account: {0}\", serviceAccount.getMetadata().getName());\n \n+    // create persistent volume and persistent volume claim\n+    final String pvcName = domainUID + \"-pvc\"; // name of the persistent volume claim\n+    final String pvName = domainUID + \"-pv\"; // name of the persistent volume\n+\n+    V1PersistentVolumeClaim v1pvc = new V1PersistentVolumeClaim()\n+        .spec(new V1PersistentVolumeClaimSpec()\n+            .addAccessModesItem(\"ReadWriteMany\")\n+            .storageClassName(domainUID + \"-weblogic-domain-storage-class\")\n+            .volumeName(domainUID + \"-weblogic-pv\")\n+            .resources(new V1ResourceRequirements()\n+                .putRequestsItem(\"storage\", Quantity.fromString(\"10Gi\"))))\n+        .metadata(new V1ObjectMetaBuilder()\n+            .withName(pvcName)\n+            .withNamespace(namespace)\n+            .build()\n+            .putLabelsItem(\"weblogic.resourceVersion\", \"domain-v2\")\n+            .putLabelsItem(\"weblogic.domainUID\", domainUID));\n+\n+    boolean success = assertDoesNotThrow(\n+        () -> TestActions.createPersistentVolumeClaim(v1pvc),\n+        \"Persistent volume claim creation failed, look at the log for failure ApiException responsebody\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc3NDU1Mw=="}, "originalCommit": {"oid": "68d1fca55d438c54e5c27982fc7602621ee4b2b2"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA0ODc3OQ==", "bodyText": "This is how it will fail.\n<04-15-2020 18:27:03>  <oracle.weblogic.kubernetes.ItSimpleDomainValidation testCreatingDomain> \n<04-15-2020 18:27:03>  <oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes createPvc> <{\"kind\":\"Status\",\"apiVersion\":\"v1\",\"metadata\":{},\"status\":\"Failure\",\"message\":\"persistentvolumeclaims \"domain1-pvc\" already exists\",\"reason\":\"AlreadyExists\",\"details\":{\"name\":\"domain1-pvc\",\"kind\":\"persistentvolumeclaims\"},\"code\":409}\n\n\n<04-15-2020 18:27:03>  <oracle.weblogic.kubernetes.extensions.Timing afterTestExecution> <Method [testCreatingDomain] took 978 ms.>\n<04-15-2020 18:27:03>  <oracle.weblogic.kubernetes.extensions.LoggedTest afterEachTest> <Finished executing [Create a domain] in oracle.weblogic.kubernetes.ItSimpleDomainValidation.testCreatingDomain()>\n[ERROR] Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 1.026 s <<< FAILURE! - in oracle.weblogic.kubernetes.ItSimpleDomainValidation\n[ERROR] testCreatingDomain  Time elapsed: 1.02 s  <<< FAILURE!\norg.opentest4j.AssertionFailedError: Persistent volume claim creation failed, look at the above log messages for failure reason in ApiException responsebody ==> Unexpected exception thrown: io.kubernetes.client.openapi.ApiException\nat org.junit.jupiter.api.AssertDoesNotThrow.createAssertionFailedError(AssertDoesNotThrow.java:83)\nat org.junit.jupiter.api.AssertDoesNotThrow.assertDoesNotThrow(AssertDoesNotThrow.java:76)\nat org.junit.jupiter.api.AssertDoesNotThrow.assertDoesNotThrow(AssertDoesNotThrow.java:63)\nat org.junit.jupiter.api.Assertions.assertDoesNotThrow(Assertions.java:3086)\nat oracle.weblogic.kubernetes.ItSimpleDomainValidation.testCreatingDomain(ItSimpleDomainValidation.java:97)\nat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\nat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1564#discussion_r409048779", "createdAt": "2020-04-15T18:30:53Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleDomainValidation.java", "diffHunk": "@@ -48,6 +55,51 @@ public void testCreatingDomain() {\n             .metadata(new V1ObjectMeta().namespace(namespace).name(serviceAccountName))));\n     logger.info(\"Created service account: {0}\", serviceAccount.getMetadata().getName());\n \n+    // create persistent volume and persistent volume claim\n+    final String pvcName = domainUID + \"-pvc\"; // name of the persistent volume claim\n+    final String pvName = domainUID + \"-pv\"; // name of the persistent volume\n+\n+    V1PersistentVolumeClaim v1pvc = new V1PersistentVolumeClaim()\n+        .spec(new V1PersistentVolumeClaimSpec()\n+            .addAccessModesItem(\"ReadWriteMany\")\n+            .storageClassName(domainUID + \"-weblogic-domain-storage-class\")\n+            .volumeName(domainUID + \"-weblogic-pv\")\n+            .resources(new V1ResourceRequirements()\n+                .putRequestsItem(\"storage\", Quantity.fromString(\"10Gi\"))))\n+        .metadata(new V1ObjectMetaBuilder()\n+            .withName(pvcName)\n+            .withNamespace(namespace)\n+            .build()\n+            .putLabelsItem(\"weblogic.resourceVersion\", \"domain-v2\")\n+            .putLabelsItem(\"weblogic.domainUID\", domainUID));\n+\n+    boolean success = assertDoesNotThrow(\n+        () -> TestActions.createPersistentVolumeClaim(v1pvc),\n+        \"Persistent volume claim creation failed, look at the log for failure ApiException responsebody\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc3NDU1Mw=="}, "originalCommit": {"oid": "68d1fca55d438c54e5c27982fc7602621ee4b2b2"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzg4MzY5OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleDomainValidation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMTozNTowNlrOGF1oCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMTozNTowNlrOGF1oCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc3NDY2NQ==", "bodyText": "same", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1564#discussion_r408774665", "createdAt": "2020-04-15T11:35:06Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleDomainValidation.java", "diffHunk": "@@ -48,6 +55,51 @@ public void testCreatingDomain() {\n             .metadata(new V1ObjectMeta().namespace(namespace).name(serviceAccountName))));\n     logger.info(\"Created service account: {0}\", serviceAccount.getMetadata().getName());\n \n+    // create persistent volume and persistent volume claim\n+    final String pvcName = domainUID + \"-pvc\"; // name of the persistent volume claim\n+    final String pvName = domainUID + \"-pv\"; // name of the persistent volume\n+\n+    V1PersistentVolumeClaim v1pvc = new V1PersistentVolumeClaim()\n+        .spec(new V1PersistentVolumeClaimSpec()\n+            .addAccessModesItem(\"ReadWriteMany\")\n+            .storageClassName(domainUID + \"-weblogic-domain-storage-class\")\n+            .volumeName(domainUID + \"-weblogic-pv\")\n+            .resources(new V1ResourceRequirements()\n+                .putRequestsItem(\"storage\", Quantity.fromString(\"10Gi\"))))\n+        .metadata(new V1ObjectMetaBuilder()\n+            .withName(pvcName)\n+            .withNamespace(namespace)\n+            .build()\n+            .putLabelsItem(\"weblogic.resourceVersion\", \"domain-v2\")\n+            .putLabelsItem(\"weblogic.domainUID\", domainUID));\n+\n+    boolean success = assertDoesNotThrow(\n+        () -> TestActions.createPersistentVolumeClaim(v1pvc),\n+        \"Persistent volume claim creation failed, look at the log for failure ApiException responsebody\"\n+    );\n+    assertTrue(success, \"PersistentVolumeClaim creation failed\");\n+\n+    V1PersistentVolume v1pv = new V1PersistentVolume()\n+        .spec(new V1PersistentVolumeSpec()\n+            .addAccessModesItem(\"ReadWriteMany\")\n+            .storageClassName(domainUID + \"-weblogic-domain-storage-class\")\n+            .volumeMode(\"Filesystem\")\n+            .putCapacityItem(\"storage\", Quantity.fromString(\"10Gi\"))\n+            .persistentVolumeReclaimPolicy(\"Recycle\")\n+            .hostPath(new V1HostPathVolumeSource()\n+                .path(System.getProperty(\"java.io.tmpdir\") + domainUID + \"-persistentVolume\")))\n+                .metadata(new V1ObjectMetaBuilder()\n+            .withName(pvName)\n+            .withNamespace(namespace)\n+            .build()\n+            .putLabelsItem(\"weblogic.resourceVersion\", \"domain-v2\")\n+            .putLabelsItem(\"weblogic.domainUID\", domainUID));\n+    success = assertDoesNotThrow(\n+        () -> TestActions.createPersistentVolume(v1pv),\n+        \"Persistent volume creation failed, look at the log for failure ApiException responsebody\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d1fca55d438c54e5c27982fc7602621ee4b2b2"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4440, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}