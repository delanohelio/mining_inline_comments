{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NjE2NTQ1", "number": 1522, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjowOTo1N1rODtgMCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTozMzo1OFrODuAmcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDM5ODgwOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Operator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjowOTo1N1rOF-9oeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzo0Nzo1OVrOF_BeMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU2NTgxOA==", "bodyText": "use assertj - will make this look like\nimport static org.assertj.core.api.Assertions.*;\n\n assertThat(namespace)\n            .as(\"make sure namespace is not empty or null\")\n            .isNotEqualTo(\"\")\n            .isNotNull();\n\nwhich is a lot clearer", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1522#discussion_r401565818", "createdAt": "2020-04-01T12:09:57Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Operator.java", "diffHunk": "@@ -3,35 +3,78 @@\n \n package oracle.weblogic.kubernetes.actions.impl;\n \n+import io.kubernetes.client.openapi.ApiException;\n import oracle.weblogic.kubernetes.actions.impl.primitive.Helm;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n \n-public class Operator {\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+public class Operator implements LoggedTest {\n \n   /**\n    * The URL of the Operator's Helm Repository.\n    */\n   private static String OPERATOR_HELM_REPO_URL = \"https://oracle.github.io/weblogic-kubernetes-operator/charts\";\n+\n   /**\n    * The name of the Operator's Helm Chart (in the repository).\n    */\n   private static String OPERATOR_CHART_NAME = \"weblogic-operator/weblogic-operator\";\n \n+  /**\n+   * Install WebLogic Kubernetes Operator.\n+   *\n+   * @param params operator parameters for helm values\n+   * @return true if the operator is successfully installed, false otherwise.\n+   * @throws ApiException - if Kubernetes client API call fails\n+   */\n+  public static boolean install(OperatorParams params) throws ApiException {\n+\n+    String namespace = params.getNamespace();\n+    String serviceAccount = params.getServiceAccount();\n+\n+    // assertions for required parameters\n+    assertNotNull(namespace, \"Operator namespace cannot be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c151eee5c02752fb941d3ece437b1aaa8edc0d65"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU4Mzk0Mw==", "bodyText": "looking for something similar to isNotNullOrEmpty() as it takes care of multiple white spaces..", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1522#discussion_r401583943", "createdAt": "2020-04-01T12:41:45Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Operator.java", "diffHunk": "@@ -3,35 +3,78 @@\n \n package oracle.weblogic.kubernetes.actions.impl;\n \n+import io.kubernetes.client.openapi.ApiException;\n import oracle.weblogic.kubernetes.actions.impl.primitive.Helm;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n \n-public class Operator {\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+public class Operator implements LoggedTest {\n \n   /**\n    * The URL of the Operator's Helm Repository.\n    */\n   private static String OPERATOR_HELM_REPO_URL = \"https://oracle.github.io/weblogic-kubernetes-operator/charts\";\n+\n   /**\n    * The name of the Operator's Helm Chart (in the repository).\n    */\n   private static String OPERATOR_CHART_NAME = \"weblogic-operator/weblogic-operator\";\n \n+  /**\n+   * Install WebLogic Kubernetes Operator.\n+   *\n+   * @param params operator parameters for helm values\n+   * @return true if the operator is successfully installed, false otherwise.\n+   * @throws ApiException - if Kubernetes client API call fails\n+   */\n+  public static boolean install(OperatorParams params) throws ApiException {\n+\n+    String namespace = params.getNamespace();\n+    String serviceAccount = params.getServiceAccount();\n+\n+    // assertions for required parameters\n+    assertNotNull(namespace, \"Operator namespace cannot be null\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU2NTgxOA=="}, "originalCommit": {"oid": "c151eee5c02752fb941d3ece437b1aaa8edc0d65"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYwOTg0Ng==", "bodyText": "We have Guava as a dependency in other modules.  You could add it here and use: assertFalse(Strings.isNullOrEmpty(text));", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1522#discussion_r401609846", "createdAt": "2020-04-01T13:21:56Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Operator.java", "diffHunk": "@@ -3,35 +3,78 @@\n \n package oracle.weblogic.kubernetes.actions.impl;\n \n+import io.kubernetes.client.openapi.ApiException;\n import oracle.weblogic.kubernetes.actions.impl.primitive.Helm;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n \n-public class Operator {\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+public class Operator implements LoggedTest {\n \n   /**\n    * The URL of the Operator's Helm Repository.\n    */\n   private static String OPERATOR_HELM_REPO_URL = \"https://oracle.github.io/weblogic-kubernetes-operator/charts\";\n+\n   /**\n    * The name of the Operator's Helm Chart (in the repository).\n    */\n   private static String OPERATOR_CHART_NAME = \"weblogic-operator/weblogic-operator\";\n \n+  /**\n+   * Install WebLogic Kubernetes Operator.\n+   *\n+   * @param params operator parameters for helm values\n+   * @return true if the operator is successfully installed, false otherwise.\n+   * @throws ApiException - if Kubernetes client API call fails\n+   */\n+  public static boolean install(OperatorParams params) throws ApiException {\n+\n+    String namespace = params.getNamespace();\n+    String serviceAccount = params.getServiceAccount();\n+\n+    // assertions for required parameters\n+    assertNotNull(namespace, \"Operator namespace cannot be null\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU2NTgxOA=="}, "originalCommit": {"oid": "c151eee5c02752fb941d3ece437b1aaa8edc0d65"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYyODcyMQ==", "bodyText": "added assertj core dependency and doing ..\n    assertThat(namespace)\n        .as(\"make sure namespace is not empty or null\")\n        .isNotNull()\n        .isNotEmpty();", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1522#discussion_r401628721", "createdAt": "2020-04-01T13:47:59Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Operator.java", "diffHunk": "@@ -3,35 +3,78 @@\n \n package oracle.weblogic.kubernetes.actions.impl;\n \n+import io.kubernetes.client.openapi.ApiException;\n import oracle.weblogic.kubernetes.actions.impl.primitive.Helm;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n \n-public class Operator {\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+public class Operator implements LoggedTest {\n \n   /**\n    * The URL of the Operator's Helm Repository.\n    */\n   private static String OPERATOR_HELM_REPO_URL = \"https://oracle.github.io/weblogic-kubernetes-operator/charts\";\n+\n   /**\n    * The name of the Operator's Helm Chart (in the repository).\n    */\n   private static String OPERATOR_CHART_NAME = \"weblogic-operator/weblogic-operator\";\n \n+  /**\n+   * Install WebLogic Kubernetes Operator.\n+   *\n+   * @param params operator parameters for helm values\n+   * @return true if the operator is successfully installed, false otherwise.\n+   * @throws ApiException - if Kubernetes client API call fails\n+   */\n+  public static boolean install(OperatorParams params) throws ApiException {\n+\n+    String namespace = params.getNamespace();\n+    String serviceAccount = params.getServiceAccount();\n+\n+    // assertions for required parameters\n+    assertNotNull(namespace, \"Operator namespace cannot be null\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU2NTgxOA=="}, "originalCommit": {"oid": "c151eee5c02752fb941d3ece437b1aaa8edc0d65"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDQwMjc3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Operator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjoxMTowN1rOF-9q7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzo0ODoyM1rOF_BfTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU2NjQ0Nw==", "bodyText": "why delete the namespace? seems a bit extreme", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1522#discussion_r401566447", "createdAt": "2020-04-01T12:11:07Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Operator.java", "diffHunk": "@@ -3,35 +3,78 @@\n \n package oracle.weblogic.kubernetes.actions.impl;\n \n+import io.kubernetes.client.openapi.ApiException;\n import oracle.weblogic.kubernetes.actions.impl.primitive.Helm;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n \n-public class Operator {\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+public class Operator implements LoggedTest {\n \n   /**\n    * The URL of the Operator's Helm Repository.\n    */\n   private static String OPERATOR_HELM_REPO_URL = \"https://oracle.github.io/weblogic-kubernetes-operator/charts\";\n+\n   /**\n    * The name of the Operator's Helm Chart (in the repository).\n    */\n   private static String OPERATOR_CHART_NAME = \"weblogic-operator/weblogic-operator\";\n \n+  /**\n+   * Install WebLogic Kubernetes Operator.\n+   *\n+   * @param params operator parameters for helm values\n+   * @return true if the operator is successfully installed, false otherwise.\n+   * @throws ApiException - if Kubernetes client API call fails\n+   */\n+  public static boolean install(OperatorParams params) throws ApiException {\n+\n+    String namespace = params.getNamespace();\n+    String serviceAccount = params.getServiceAccount();\n+\n+    // assertions for required parameters\n+    assertNotNull(namespace, \"Operator namespace cannot be null\");\n+    assertNotNull(params.getReleaseName(), \"Operator release name cannot be null\");\n+    assertNotEquals(\"\",namespace.trim(), \"Operator namespace cannot be empty string\");\n+    assertNotEquals(\"\",params.getReleaseName().trim(), \"Operator release name cannot be empty string\");\n+\n+    //delete the namespace if it exists\n+    if (Namespace.exists(namespace)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c151eee5c02752fb941d3ece437b1aaa8edc0d65"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3NDY3OA==", "bodyText": "what if the namespace already exists? just proceed with it?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1522#discussion_r401574678", "createdAt": "2020-04-01T12:25:55Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Operator.java", "diffHunk": "@@ -3,35 +3,78 @@\n \n package oracle.weblogic.kubernetes.actions.impl;\n \n+import io.kubernetes.client.openapi.ApiException;\n import oracle.weblogic.kubernetes.actions.impl.primitive.Helm;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n \n-public class Operator {\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+public class Operator implements LoggedTest {\n \n   /**\n    * The URL of the Operator's Helm Repository.\n    */\n   private static String OPERATOR_HELM_REPO_URL = \"https://oracle.github.io/weblogic-kubernetes-operator/charts\";\n+\n   /**\n    * The name of the Operator's Helm Chart (in the repository).\n    */\n   private static String OPERATOR_CHART_NAME = \"weblogic-operator/weblogic-operator\";\n \n+  /**\n+   * Install WebLogic Kubernetes Operator.\n+   *\n+   * @param params operator parameters for helm values\n+   * @return true if the operator is successfully installed, false otherwise.\n+   * @throws ApiException - if Kubernetes client API call fails\n+   */\n+  public static boolean install(OperatorParams params) throws ApiException {\n+\n+    String namespace = params.getNamespace();\n+    String serviceAccount = params.getServiceAccount();\n+\n+    // assertions for required parameters\n+    assertNotNull(namespace, \"Operator namespace cannot be null\");\n+    assertNotNull(params.getReleaseName(), \"Operator release name cannot be null\");\n+    assertNotEquals(\"\",namespace.trim(), \"Operator namespace cannot be empty string\");\n+    assertNotEquals(\"\",params.getReleaseName().trim(), \"Operator release name cannot be empty string\");\n+\n+    //delete the namespace if it exists\n+    if (Namespace.exists(namespace)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU2NjQ0Nw=="}, "originalCommit": {"oid": "c151eee5c02752fb941d3ece437b1aaa8edc0d65"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU5MTIyOA==", "bodyText": "yeah - the method is meant to install an operator --- if doing so deleted the target namespace, that would be unexpected and surprising behavior.  we should not do that", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1522#discussion_r401591228", "createdAt": "2020-04-01T12:53:43Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Operator.java", "diffHunk": "@@ -3,35 +3,78 @@\n \n package oracle.weblogic.kubernetes.actions.impl;\n \n+import io.kubernetes.client.openapi.ApiException;\n import oracle.weblogic.kubernetes.actions.impl.primitive.Helm;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n \n-public class Operator {\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+public class Operator implements LoggedTest {\n \n   /**\n    * The URL of the Operator's Helm Repository.\n    */\n   private static String OPERATOR_HELM_REPO_URL = \"https://oracle.github.io/weblogic-kubernetes-operator/charts\";\n+\n   /**\n    * The name of the Operator's Helm Chart (in the repository).\n    */\n   private static String OPERATOR_CHART_NAME = \"weblogic-operator/weblogic-operator\";\n \n+  /**\n+   * Install WebLogic Kubernetes Operator.\n+   *\n+   * @param params operator parameters for helm values\n+   * @return true if the operator is successfully installed, false otherwise.\n+   * @throws ApiException - if Kubernetes client API call fails\n+   */\n+  public static boolean install(OperatorParams params) throws ApiException {\n+\n+    String namespace = params.getNamespace();\n+    String serviceAccount = params.getServiceAccount();\n+\n+    // assertions for required parameters\n+    assertNotNull(namespace, \"Operator namespace cannot be null\");\n+    assertNotNull(params.getReleaseName(), \"Operator release name cannot be null\");\n+    assertNotEquals(\"\",namespace.trim(), \"Operator namespace cannot be empty string\");\n+    assertNotEquals(\"\",params.getReleaseName().trim(), \"Operator release name cannot be empty string\");\n+\n+    //delete the namespace if it exists\n+    if (Namespace.exists(namespace)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU2NjQ0Nw=="}, "originalCommit": {"oid": "c151eee5c02752fb941d3ece437b1aaa8edc0d65"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYyOTAwNw==", "bodyText": "ok, will modify the code accordingly", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1522#discussion_r401629007", "createdAt": "2020-04-01T13:48:23Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Operator.java", "diffHunk": "@@ -3,35 +3,78 @@\n \n package oracle.weblogic.kubernetes.actions.impl;\n \n+import io.kubernetes.client.openapi.ApiException;\n import oracle.weblogic.kubernetes.actions.impl.primitive.Helm;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n \n-public class Operator {\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+public class Operator implements LoggedTest {\n \n   /**\n    * The URL of the Operator's Helm Repository.\n    */\n   private static String OPERATOR_HELM_REPO_URL = \"https://oracle.github.io/weblogic-kubernetes-operator/charts\";\n+\n   /**\n    * The name of the Operator's Helm Chart (in the repository).\n    */\n   private static String OPERATOR_CHART_NAME = \"weblogic-operator/weblogic-operator\";\n \n+  /**\n+   * Install WebLogic Kubernetes Operator.\n+   *\n+   * @param params operator parameters for helm values\n+   * @return true if the operator is successfully installed, false otherwise.\n+   * @throws ApiException - if Kubernetes client API call fails\n+   */\n+  public static boolean install(OperatorParams params) throws ApiException {\n+\n+    String namespace = params.getNamespace();\n+    String serviceAccount = params.getServiceAccount();\n+\n+    // assertions for required parameters\n+    assertNotNull(namespace, \"Operator namespace cannot be null\");\n+    assertNotNull(params.getReleaseName(), \"Operator release name cannot be null\");\n+    assertNotEquals(\"\",namespace.trim(), \"Operator namespace cannot be empty string\");\n+    assertNotEquals(\"\",params.getReleaseName().trim(), \"Operator release name cannot be empty string\");\n+\n+    //delete the namespace if it exists\n+    if (Namespace.exists(namespace)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU2NjQ0Nw=="}, "originalCommit": {"oid": "c151eee5c02752fb941d3ece437b1aaa8edc0d65"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTI4NzEyOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTozNDo1OVrOF_Gabw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDowNjo1MVrOF_Qrlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcwOTY3OQ==", "bodyText": "i'm not sure about this being a string like this - i liked it better the way you had it before, where is was clear it was a list of things, this is just a string that has some kind of special meaning that i don't understand", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1522#discussion_r401709679", "createdAt": "2020-04-01T15:34:59Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -58,19 +59,26 @@ public void testInstallingOperator() {\n     // imagine that installOperator() will try to install the operator, by creating\n     // the kubernetes deployment.  this will complete quickly, and will either be\n     // successful or not.\n-\n     String opns = \"opns1\";\n-    OperatorParams opParams\n-        = new OperatorParams().image(\"weblogic-kubernetes-operator:test_itsimpleoperator\")\n-          .domainNamespaces(Arrays.asList(\"domainns1\", \"domainns2\"))\n-          .serviceAccount(\"sa-opns1\");\n-    boolean success = installOperator(\"weblogic-operator\", opns, opParams);\n+    OperatorParams opParams =\n+        new OperatorParams().releaseName(\"weblogic-operator\")\n+            .namespace(opns)\n+            .image(\"weblogic-kubernetes-operator:test_itsimpleoperator\")\n+            .domainNamespaces(\"domainns1, domainns2\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "814e9904fb1150484f596bafdcaec994aa83fcf6"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg3NzkxMA==", "bodyText": "changed it back", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1522#discussion_r401877910", "createdAt": "2020-04-01T20:06:51Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -58,19 +59,26 @@ public void testInstallingOperator() {\n     // imagine that installOperator() will try to install the operator, by creating\n     // the kubernetes deployment.  this will complete quickly, and will either be\n     // successful or not.\n-\n     String opns = \"opns1\";\n-    OperatorParams opParams\n-        = new OperatorParams().image(\"weblogic-kubernetes-operator:test_itsimpleoperator\")\n-          .domainNamespaces(Arrays.asList(\"domainns1\", \"domainns2\"))\n-          .serviceAccount(\"sa-opns1\");\n-    boolean success = installOperator(\"weblogic-operator\", opns, opParams);\n+    OperatorParams opParams =\n+        new OperatorParams().releaseName(\"weblogic-operator\")\n+            .namespace(opns)\n+            .image(\"weblogic-kubernetes-operator:test_itsimpleoperator\")\n+            .domainNamespaces(\"domainns1, domainns2\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcwOTY3OQ=="}, "originalCommit": {"oid": "814e9904fb1150484f596bafdcaec994aa83fcf6"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTI5MDAwOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Operator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTozNTozN1rOF_Gcag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDowNzowMVrOF_Qr2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMDE4Ng==", "bodyText": "namespace?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1522#discussion_r401710186", "createdAt": "2020-04-01T15:35:37Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Operator.java", "diffHunk": "@@ -3,35 +3,73 @@\n \n package oracle.weblogic.kubernetes.actions.impl;\n \n+import io.kubernetes.client.openapi.ApiException;\n import oracle.weblogic.kubernetes.actions.impl.primitive.Helm;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n \n-public class Operator {\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class Operator implements LoggedTest {\n \n   /**\n    * The URL of the Operator's Helm Repository.\n    */\n+  //Question - is this URL correct?\n   private static String OPERATOR_HELM_REPO_URL = \"https://oracle.github.io/weblogic-kubernetes-operator/charts\";\n+\n   /**\n    * The name of the Operator's Helm Chart (in the repository).\n    */\n   private static String OPERATOR_CHART_NAME = \"weblogic-operator/weblogic-operator\";\n \n+  /**\n+   * Install WebLogic Kubernetes Operator.\n+   *\n+   * @param params operator parameters for helm values\n+   * @return true if the operator is successfully installed, false otherwise.\n+   * @throws ApiException - if Kubernetes client API call fails\n+   */\n+  public static boolean install(OperatorParams params) throws ApiException {\n+\n+    String namespace = params.getNamespace();\n+    String serviceAccount = params.getServiceAccount();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure namespace is not empty or null\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "814e9904fb1150484f596bafdcaec994aa83fcf6"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg3Nzk3Nw==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1522#discussion_r401877977", "createdAt": "2020-04-01T20:07:01Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Operator.java", "diffHunk": "@@ -3,35 +3,73 @@\n \n package oracle.weblogic.kubernetes.actions.impl;\n \n+import io.kubernetes.client.openapi.ApiException;\n import oracle.weblogic.kubernetes.actions.impl.primitive.Helm;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n \n-public class Operator {\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class Operator implements LoggedTest {\n \n   /**\n    * The URL of the Operator's Helm Repository.\n    */\n+  //Question - is this URL correct?\n   private static String OPERATOR_HELM_REPO_URL = \"https://oracle.github.io/weblogic-kubernetes-operator/charts\";\n+\n   /**\n    * The name of the Operator's Helm Chart (in the repository).\n    */\n   private static String OPERATOR_CHART_NAME = \"weblogic-operator/weblogic-operator\";\n \n+  /**\n+   * Install WebLogic Kubernetes Operator.\n+   *\n+   * @param params operator parameters for helm values\n+   * @return true if the operator is successfully installed, false otherwise.\n+   * @throws ApiException - if Kubernetes client API call fails\n+   */\n+  public static boolean install(OperatorParams params) throws ApiException {\n+\n+    String namespace = params.getNamespace();\n+    String serviceAccount = params.getServiceAccount();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure namespace is not empty or null\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMDE4Ng=="}, "originalCommit": {"oid": "814e9904fb1150484f596bafdcaec994aa83fcf6"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTI5NTQ2OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Operator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTozNjo1M1rOF_GgBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTo1NjoxOFrOF_HXqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMTExMQ==", "bodyText": "again, this is surprising/unexpected.  the method is installOperator - i would not expect that to create a namespace. if you try to deploy something into a non-existent namespace in k8s, it will give an error.  that is what i would expect this to do too. we should try to stick to the standard/predictable/expected behavior", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1522#discussion_r401711111", "createdAt": "2020-04-01T15:36:53Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Operator.java", "diffHunk": "@@ -3,35 +3,73 @@\n \n package oracle.weblogic.kubernetes.actions.impl;\n \n+import io.kubernetes.client.openapi.ApiException;\n import oracle.weblogic.kubernetes.actions.impl.primitive.Helm;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n \n-public class Operator {\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class Operator implements LoggedTest {\n \n   /**\n    * The URL of the Operator's Helm Repository.\n    */\n+  //Question - is this URL correct?\n   private static String OPERATOR_HELM_REPO_URL = \"https://oracle.github.io/weblogic-kubernetes-operator/charts\";\n+\n   /**\n    * The name of the Operator's Helm Chart (in the repository).\n    */\n   private static String OPERATOR_CHART_NAME = \"weblogic-operator/weblogic-operator\";\n \n+  /**\n+   * Install WebLogic Kubernetes Operator.\n+   *\n+   * @param params operator parameters for helm values\n+   * @return true if the operator is successfully installed, false otherwise.\n+   * @throws ApiException - if Kubernetes client API call fails\n+   */\n+  public static boolean install(OperatorParams params) throws ApiException {\n+\n+    String namespace = params.getNamespace();\n+    String serviceAccount = params.getServiceAccount();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    // create namespace\n+    if (!Namespace.exists(namespace)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "814e9904fb1150484f596bafdcaec994aa83fcf6"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcyNTM1Mw==", "bodyText": "ok ..I will create the namespace, service account in the test class ..", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1522#discussion_r401725353", "createdAt": "2020-04-01T15:56:18Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Operator.java", "diffHunk": "@@ -3,35 +3,73 @@\n \n package oracle.weblogic.kubernetes.actions.impl;\n \n+import io.kubernetes.client.openapi.ApiException;\n import oracle.weblogic.kubernetes.actions.impl.primitive.Helm;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n \n-public class Operator {\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class Operator implements LoggedTest {\n \n   /**\n    * The URL of the Operator's Helm Repository.\n    */\n+  //Question - is this URL correct?\n   private static String OPERATOR_HELM_REPO_URL = \"https://oracle.github.io/weblogic-kubernetes-operator/charts\";\n+\n   /**\n    * The name of the Operator's Helm Chart (in the repository).\n    */\n   private static String OPERATOR_CHART_NAME = \"weblogic-operator/weblogic-operator\";\n \n+  /**\n+   * Install WebLogic Kubernetes Operator.\n+   *\n+   * @param params operator parameters for helm values\n+   * @return true if the operator is successfully installed, false otherwise.\n+   * @throws ApiException - if Kubernetes client API call fails\n+   */\n+  public static boolean install(OperatorParams params) throws ApiException {\n+\n+    String namespace = params.getNamespace();\n+    String serviceAccount = params.getServiceAccount();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    // create namespace\n+    if (!Namespace.exists(namespace)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMTExMQ=="}, "originalCommit": {"oid": "814e9904fb1150484f596bafdcaec994aa83fcf6"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTI5NjI1OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Operator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTozNzowNlrOF_Gglg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMDowNzoxOFrOF_QscA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMTI1NA==", "bodyText": "same here", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1522#discussion_r401711254", "createdAt": "2020-04-01T15:37:06Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Operator.java", "diffHunk": "@@ -3,35 +3,73 @@\n \n package oracle.weblogic.kubernetes.actions.impl;\n \n+import io.kubernetes.client.openapi.ApiException;\n import oracle.weblogic.kubernetes.actions.impl.primitive.Helm;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n \n-public class Operator {\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class Operator implements LoggedTest {\n \n   /**\n    * The URL of the Operator's Helm Repository.\n    */\n+  //Question - is this URL correct?\n   private static String OPERATOR_HELM_REPO_URL = \"https://oracle.github.io/weblogic-kubernetes-operator/charts\";\n+\n   /**\n    * The name of the Operator's Helm Chart (in the repository).\n    */\n   private static String OPERATOR_CHART_NAME = \"weblogic-operator/weblogic-operator\";\n \n+  /**\n+   * Install WebLogic Kubernetes Operator.\n+   *\n+   * @param params operator parameters for helm values\n+   * @return true if the operator is successfully installed, false otherwise.\n+   * @throws ApiException - if Kubernetes client API call fails\n+   */\n+  public static boolean install(OperatorParams params) throws ApiException {\n+\n+    String namespace = params.getNamespace();\n+    String serviceAccount = params.getServiceAccount();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    // create namespace\n+    if (!Namespace.exists(namespace)) {\n+      logger.info(String.format(\"Creating namespace %s\", namespace));\n+      Namespace ns = new Namespace().name(namespace);\n+    }\n+\n+    // create service account\n+    if (serviceAccount != null && !serviceAccount.equals(\"default\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "814e9904fb1150484f596bafdcaec994aa83fcf6"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg3ODEyOA==", "bodyText": "removed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1522#discussion_r401878128", "createdAt": "2020-04-01T20:07:18Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Operator.java", "diffHunk": "@@ -3,35 +3,73 @@\n \n package oracle.weblogic.kubernetes.actions.impl;\n \n+import io.kubernetes.client.openapi.ApiException;\n import oracle.weblogic.kubernetes.actions.impl.primitive.Helm;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n \n-public class Operator {\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class Operator implements LoggedTest {\n \n   /**\n    * The URL of the Operator's Helm Repository.\n    */\n+  //Question - is this URL correct?\n   private static String OPERATOR_HELM_REPO_URL = \"https://oracle.github.io/weblogic-kubernetes-operator/charts\";\n+\n   /**\n    * The name of the Operator's Helm Chart (in the repository).\n    */\n   private static String OPERATOR_CHART_NAME = \"weblogic-operator/weblogic-operator\";\n \n+  /**\n+   * Install WebLogic Kubernetes Operator.\n+   *\n+   * @param params operator parameters for helm values\n+   * @return true if the operator is successfully installed, false otherwise.\n+   * @throws ApiException - if Kubernetes client API call fails\n+   */\n+  public static boolean install(OperatorParams params) throws ApiException {\n+\n+    String namespace = params.getNamespace();\n+    String serviceAccount = params.getServiceAccount();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    // create namespace\n+    if (!Namespace.exists(namespace)) {\n+      logger.info(String.format(\"Creating namespace %s\", namespace));\n+      Namespace ns = new Namespace().name(namespace);\n+    }\n+\n+    // create service account\n+    if (serviceAccount != null && !serviceAccount.equals(\"default\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMTI1NA=="}, "originalCommit": {"oid": "814e9904fb1150484f596bafdcaec994aa83fcf6"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTcwNzI5OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTozMzozMFrOF_xDAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTo0MDo0OVrOF_xXeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQwODE5NA==", "bodyText": "wow, that's a bit awkward.  is there an assertJ assertion we can use instead of this one, that makes the code a bit nicer?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1522#discussion_r402408194", "createdAt": "2020-04-02T15:33:30Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -59,18 +65,37 @@ public void testInstallingOperator() {\n     // the kubernetes deployment.  this will complete quickly, and will either be\n     // successful or not.\n \n-    String opns = \"opns1\";\n-    OperatorParams opParams\n-        = new OperatorParams().image(\"weblogic-kubernetes-operator:test_itsimpleoperator\")\n-          .domainNamespaces(Arrays.asList(\"domainns1\", \"domainns2\"))\n-          .serviceAccount(\"sa-opns1\");\n-    boolean success = installOperator(\"weblogic-operator\", opns, opParams);\n+    // get a new unique namespace\n+    final String namespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", namespace));\n \n-    // we can use a standard JUnit assertion to check on the result\n-    assertEquals(true, success, \"There MUST be a descriptive message here\");\n+    // Create a service account for the unique namespace\n+    final String serviceAccountName = namespace + \"-sa\";\n+    assertDoesNotThrow(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa9a285396ac9f2e9891f5090e0e1868ace318ed"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxMzQzMw==", "bodyText": "will see ...", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1522#discussion_r402413433", "createdAt": "2020-04-02T15:40:49Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -59,18 +65,37 @@ public void testInstallingOperator() {\n     // the kubernetes deployment.  this will complete quickly, and will either be\n     // successful or not.\n \n-    String opns = \"opns1\";\n-    OperatorParams opParams\n-        = new OperatorParams().image(\"weblogic-kubernetes-operator:test_itsimpleoperator\")\n-          .domainNamespaces(Arrays.asList(\"domainns1\", \"domainns2\"))\n-          .serviceAccount(\"sa-opns1\");\n-    boolean success = installOperator(\"weblogic-operator\", opns, opParams);\n+    // get a new unique namespace\n+    final String namespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", namespace));\n \n-    // we can use a standard JUnit assertion to check on the result\n-    assertEquals(true, success, \"There MUST be a descriptive message here\");\n+    // Create a service account for the unique namespace\n+    final String serviceAccountName = namespace + \"-sa\";\n+    assertDoesNotThrow(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQwODE5NA=="}, "originalCommit": {"oid": "aa9a285396ac9f2e9891f5090e0e1868ace318ed"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTcwOTI4OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTozMzo1OFrOF_xEWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTo0MDo1NFrOF_xXxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQwODUzNg==", "bodyText": "put it in the log, not SOP", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1522#discussion_r402408536", "createdAt": "2020-04-02T15:33:58Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -59,18 +65,37 @@ public void testInstallingOperator() {\n     // the kubernetes deployment.  this will complete quickly, and will either be\n     // successful or not.\n \n-    String opns = \"opns1\";\n-    OperatorParams opParams\n-        = new OperatorParams().image(\"weblogic-kubernetes-operator:test_itsimpleoperator\")\n-          .domainNamespaces(Arrays.asList(\"domainns1\", \"domainns2\"))\n-          .serviceAccount(\"sa-opns1\");\n-    boolean success = installOperator(\"weblogic-operator\", opns, opParams);\n+    // get a new unique namespace\n+    final String namespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", namespace));\n \n-    // we can use a standard JUnit assertion to check on the result\n-    assertEquals(true, success, \"There MUST be a descriptive message here\");\n+    // Create a service account for the unique namespace\n+    final String serviceAccountName = namespace + \"-sa\";\n+    assertDoesNotThrow(\n+        () -> TestActions.createServiceAccount(new V1ServiceAccount()\n+            .metadata(new V1ObjectMeta().namespace(namespace).name(serviceAccountName))));\n+    logger.info(\"Created service account: \" + serviceAccountName);\n+\n+    OperatorParams opParams =\n+        new OperatorParams().releaseName(\"weblogic-operator\")\n+            .namespace(namespace)\n+            .image(\"weblogic-kubernetes-operator:test_itsimpleoperator\")\n+            .domainNamespaces(Arrays.asList(\"domainns1\", \"domainns2\"))\n+            .serviceAccount(\"opns1-sa\");\n \n-    // we can use the injected logger like this:\n-    logger.info(\"hello\");\n+    //ToDO: use Junit 5 assertions\n+    try {\n+      installOperator(opParams);\n+    } catch (ApiException e) {\n+      e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa9a285396ac9f2e9891f5090e0e1868ace318ed"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQxMzUwOA==", "bodyText": "will do", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1522#discussion_r402413508", "createdAt": "2020-04-02T15:40:54Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -59,18 +65,37 @@ public void testInstallingOperator() {\n     // the kubernetes deployment.  this will complete quickly, and will either be\n     // successful or not.\n \n-    String opns = \"opns1\";\n-    OperatorParams opParams\n-        = new OperatorParams().image(\"weblogic-kubernetes-operator:test_itsimpleoperator\")\n-          .domainNamespaces(Arrays.asList(\"domainns1\", \"domainns2\"))\n-          .serviceAccount(\"sa-opns1\");\n-    boolean success = installOperator(\"weblogic-operator\", opns, opParams);\n+    // get a new unique namespace\n+    final String namespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", namespace));\n \n-    // we can use a standard JUnit assertion to check on the result\n-    assertEquals(true, success, \"There MUST be a descriptive message here\");\n+    // Create a service account for the unique namespace\n+    final String serviceAccountName = namespace + \"-sa\";\n+    assertDoesNotThrow(\n+        () -> TestActions.createServiceAccount(new V1ServiceAccount()\n+            .metadata(new V1ObjectMeta().namespace(namespace).name(serviceAccountName))));\n+    logger.info(\"Created service account: \" + serviceAccountName);\n+\n+    OperatorParams opParams =\n+        new OperatorParams().releaseName(\"weblogic-operator\")\n+            .namespace(namespace)\n+            .image(\"weblogic-kubernetes-operator:test_itsimpleoperator\")\n+            .domainNamespaces(Arrays.asList(\"domainns1\", \"domainns2\"))\n+            .serviceAccount(\"opns1-sa\");\n \n-    // we can use the injected logger like this:\n-    logger.info(\"hello\");\n+    //ToDO: use Junit 5 assertions\n+    try {\n+      installOperator(opParams);\n+    } catch (ApiException e) {\n+      e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQwODUzNg=="}, "originalCommit": {"oid": "aa9a285396ac9f2e9891f5090e0e1868ace318ed"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4698, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}