{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4NTIyMDUw", "number": 1759, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDo0MTo0MFrOEIAGYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNzoyNzozNFrOEIELQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODI1Njk3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorRestartWhenPodRoll.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDo0MTo0MFrOGnsmzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjoxMDo0MVrOGnwgtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI3ODQ3OQ==", "bodyText": "This needs to be updated", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1759#discussion_r444278479", "createdAt": "2020-06-23T14:41:40Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorRestartWhenPodRoll.java", "diffHunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.annotations.tags.MustNotRunInParallel;\n+import oracle.weblogic.kubernetes.annotations.tags.Slow;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import oracle.weblogic.kubernetes.utils.CommonPatchTestUtils;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_PATCH;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_PATCH;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteOperatorPod;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorPodName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodCreationTimestamp;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.assertions.impl.Kubernetes.isPodRestarted;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.createMiiDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonPatchTestUtils.checkPodRestartVersionUpdated;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.verifyCredentials;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+// Test to change the WebLogic credentials secret of a domain custom resource that uses model-in-image.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3644ee70b97676ddfd948b881b09b56c53299624"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0MjQ1NQ==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1759#discussion_r444342455", "createdAt": "2020-06-23T16:10:41Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorRestartWhenPodRoll.java", "diffHunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.annotations.tags.MustNotRunInParallel;\n+import oracle.weblogic.kubernetes.annotations.tags.Slow;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import oracle.weblogic.kubernetes.utils.CommonPatchTestUtils;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_PATCH;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_PATCH;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteOperatorPod;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorPodName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodCreationTimestamp;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.assertions.impl.Kubernetes.isPodRestarted;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.createMiiDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonPatchTestUtils.checkPodRestartVersionUpdated;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.verifyCredentials;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+// Test to change the WebLogic credentials secret of a domain custom resource that uses model-in-image.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI3ODQ3OQ=="}, "originalCommit": {"oid": "3644ee70b97676ddfd948b881b09b56c53299624"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODI3ODEyOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorRestartWhenPodRoll.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDo0NjowMVrOGnsz_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjoxMDo1MlrOGnwhKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI4MTg1NA==", "bodyText": "You can also add check for verifying the pod names to be different before/after restart", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1759#discussion_r444281854", "createdAt": "2020-06-23T14:46:01Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorRestartWhenPodRoll.java", "diffHunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.annotations.tags.MustNotRunInParallel;\n+import oracle.weblogic.kubernetes.annotations.tags.Slow;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import oracle.weblogic.kubernetes.utils.CommonPatchTestUtils;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_PATCH;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_PATCH;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteOperatorPod;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorPodName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodCreationTimestamp;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.assertions.impl.Kubernetes.isPodRestarted;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.createMiiDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonPatchTestUtils.checkPodRestartVersionUpdated;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.verifyCredentials;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+// Test to change the WebLogic credentials secret of a domain custom resource that uses model-in-image.\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test to patch the model-in-image image to change WebLogic admin credentials secret\")\n+@IntegrationTest\n+class ItOperatorRestartWhenPodRoll implements LoggedTest {\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static String domainUid = \"domain1\";\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+\n+  private static String adminServerPodName = String.format(\"%s-%s\", domainUid, ADMIN_SERVER_NAME_BASE);\n+  private static String managedServerPrefix = String.format(\"%s-%s\", domainUid, MANAGED_SERVER_NAME_BASE);\n+  private static int replicaCount = 2;\n+\n+  /**\n+   * Perform initialization for all the tests in this class.\n+   * Set up the necessary namespaces, install the operator in the first namespace, and\n+   * create a domain in the second namespace using the pre-created basic MII image.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *           JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(6, MINUTES).await();\n+\n+    // get namespaces\n+    assertNotNull(namespaces.get(0), String.format(\"Namespace namespaces.get(0) is null\"));\n+    opNamespace = namespaces.get(0);\n+\n+    assertNotNull(namespaces.get(1), String.format(\"Namespace namespaces.get(1) is null\"));\n+    domainNamespace = namespaces.get(1);\n+\n+    // install the operator\n+    logger.info(\"Install an operator in namespace {0}, managing namespace {1}\",\n+        opNamespace, domainNamespace);\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // create a domain resource\n+    logger.info(\"Create model-in-image domain {0} in namespace {1}, and wait until it comes up\",\n+        domainUid, domainNamespace);\n+    createMiiDomainAndVerify(\n+        domainNamespace, domainUid, adminServerPodName, managedServerPrefix, replicaCount);\n+  }\n+\n+  /**\n+   * Test patching a running model-in-image domain with a new WebLogic credentials secret.\n+   * Perform two patching operations to the domain spec. First, change the webLogicCredentialsSecret to\n+   * a new secret, and then change the domainRestartVersion to trigger a rolling restart of the server pods.\n+   * While the rolling is on-going, restart the operator pod.\n+   * Verify that after the operator is restarted, the domain spec's webLogicCredentialsSecret and,\n+   * restartVersion are updated, and the server pods are recreated, the server pods' weblogic.domainRestartVersion\n+   * label is updated, and the new credentials are valid and can be used to access WebLogic RESTful\n+   * Management Services.\n+   */\n+  @Test\n+  @DisplayName(\"Restart operator when the domain is rolling after the admin credentials are changed\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testOperatorRestartWhenPodRoll() {\n+    final boolean VALID = true;\n+    final boolean INVALID = false;\n+\n+    LinkedHashMap<String, DateTime> pods = new LinkedHashMap<>();\n+\n+    // get the creation time of the admin server pod before patching\n+    DateTime adminPodCreationTime =\n+        assertDoesNotThrow(() -> getPodCreationTimestamp(domainNamespace, \"\", adminServerPodName),\n+        String.format(\"Failed to get creationTimestamp for pod %s\", adminServerPodName));\n+    assertNotNull(adminPodCreationTime, \"creationTimestamp of the admin server pod is null\");\n+\n+    logger.info(\"Domain {0} in namespace {1}, admin server pod {2} creationTimestamp before patching is {3}\",\n+        domainUid,\n+        domainNamespace,\n+        adminServerPodName,\n+        adminPodCreationTime);\n+\n+    pods.put(adminServerPodName, adminPodCreationTime);\n+\n+    List<DateTime> msLastCreationTime = new ArrayList<DateTime>();\n+    // get the creation time of the managed server pods before patching\n+    assertDoesNotThrow(\n+        () -> {\n+            for (int i = 1; i <= replicaCount; i++) {\n+              String managedServerPodName = managedServerPrefix + i;\n+              DateTime creationTime = getPodCreationTimestamp(domainNamespace, \"\", managedServerPodName);\n+              msLastCreationTime.add(creationTime);\n+              pods.put(managedServerPodName, creationTime);\n+\n+              logger.info(\"Domain {0} in namespace {1}, server pod {2} creationTimestamp before patching is {3}\",\n+                  domainUid,\n+                  domainNamespace,\n+                  managedServerPodName,\n+                  creationTime);\n+            }\n+        },\n+        String.format(\"Failed to get creationTimestamp for managed server pods\"));\n+\n+    logger.info(\"Check that before patching current credentials are valid and new credentials are not\");\n+    verifyCredentials(adminServerPodName, domainNamespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT, VALID);\n+    verifyCredentials(adminServerPodName, domainNamespace, ADMIN_USERNAME_PATCH, ADMIN_PASSWORD_PATCH, INVALID);\n+\n+    // create a new secret for admin credentials\n+    logger.info(\"Create a new secret that contains new WebLogic admin credentials\");\n+    String adminSecretName = \"weblogic-credentials-new\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        adminSecretName,\n+        domainNamespace,\n+        ADMIN_USERNAME_PATCH,\n+        ADMIN_PASSWORD_PATCH),\n+        String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // patch the domain resource with the new secret and verify that the domain resource is patched.\n+    logger.info(\"Patch domain {0} in namespace {1} with the secret {2}, and verify the result\",\n+        domainUid, domainNamespace, adminSecretName);\n+\n+    String restartVersion = CommonPatchTestUtils.patchDomainWithNewSecretAndVerify(\n+        domainUid,\n+        domainNamespace,\n+        adminServerPodName,\n+        managedServerPrefix,\n+        replicaCount,\n+        adminSecretName);\n+\n+    logger.info(\"Delete the operator pod in namespace {0} and wait for it to be restarted\", opNamespace);\n+    restartOperatorAndVerify();\n+\n+    logger.info(\"Wait for domain {0} admin server pod {1} in namespace {2} to be restarted\",\n+        domainUid, adminServerPodName, domainNamespace);\n+\n+    assertTrue(assertDoesNotThrow(\n+        () -> (verifyRollingRestartOccurred(pods, 1, domainNamespace)),\n+        \"More than one pod was restarted at same time\"),\n+        \"Rolling restart failed\");\n+\n+    for (int i = 1; i <= replicaCount; i++) {\n+      final String podName = managedServerPrefix + i;\n+      final DateTime lastCreationTime = msLastCreationTime.get(i - 1);\n+      // check that the managed server pod's label has been updated with the new restartVersion\n+      checkPodRestartVersionUpdated(podName, domainUid, domainNamespace, restartVersion);\n+    }\n+\n+    // check if the new credentials are valid and the old credentials are not valid any more\n+    logger.info(\"Check that after patching current credentials are not valid and new credentials are\");\n+    verifyCredentials(adminServerPodName, domainNamespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT, INVALID);\n+    verifyCredentials(adminServerPodName, domainNamespace, ADMIN_USERNAME_PATCH, ADMIN_PASSWORD_PATCH, VALID);\n+\n+    logger.info(\"Domain {0} in namespace {1} is fully started after changing WebLogic credentials secret\",\n+        domainUid, domainNamespace);\n+  }\n+\n+  private void restartOperatorAndVerify() {\n+    String opPodName = \n+        assertDoesNotThrow(() -> getOperatorPodName(TestConstants.OPERATOR_RELEASE_NAME, opNamespace),\n+        \"Failed to get the name of the operator pod\");\n+\n+    // get the creation time of the admin server pod before patching\n+    DateTime opPodCreationTime =\n+        assertDoesNotThrow(() -> getPodCreationTimestamp(opNamespace, \"\", opPodName),\n+            String.format(\"Failed to get creationTimestamp for pod %s\", opPodName));\n+    assertNotNull(opPodCreationTime, \"creationTimestamp of the operator pod is null\");\n+\n+    assertDoesNotThrow(\n+        () -> deleteOperatorPod(opPodName, opNamespace),\n+        \"Got exception in deleting the Operator pod\");\n+\n+    // wait for the operator to be ready\n+    logger.info(\"Wait for the operator pod is ready in namespace {0}\", opNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for operator to be running in namespace {0} \"\n+              + \"(elapsed time {1}ms, remaining time {2}ms)\",\n+            opNamespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> operatorIsReady(opNamespace),\n+          \"operatorIsReady failed with ApiException\"));\n+\n+    String opPodNameNew = \n+        assertDoesNotThrow(() -> getOperatorPodName(TestConstants.OPERATOR_RELEASE_NAME, opNamespace),\n+        \"Failed to get the name of the operator pod\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3644ee70b97676ddfd948b881b09b56c53299624"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0MjU3MA==", "bodyText": "added", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1759#discussion_r444342570", "createdAt": "2020-06-23T16:10:52Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorRestartWhenPodRoll.java", "diffHunk": "@@ -0,0 +1,237 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.annotations.tags.MustNotRunInParallel;\n+import oracle.weblogic.kubernetes.annotations.tags.Slow;\n+import oracle.weblogic.kubernetes.extensions.LoggedTest;\n+import oracle.weblogic.kubernetes.utils.CommonPatchTestUtils;\n+import org.awaitility.core.ConditionFactory;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_PATCH;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_PATCH;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteOperatorPod;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorPodName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getPodCreationTimestamp;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.assertions.impl.Kubernetes.isPodRestarted;\n+import static oracle.weblogic.kubernetes.utils.CommonMiiTestUtils.createMiiDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonPatchTestUtils.checkPodRestartVersionUpdated;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.verifyCredentials;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+// Test to change the WebLogic credentials secret of a domain custom resource that uses model-in-image.\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test to patch the model-in-image image to change WebLogic admin credentials secret\")\n+@IntegrationTest\n+class ItOperatorRestartWhenPodRoll implements LoggedTest {\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static String domainUid = \"domain1\";\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+\n+  private static String adminServerPodName = String.format(\"%s-%s\", domainUid, ADMIN_SERVER_NAME_BASE);\n+  private static String managedServerPrefix = String.format(\"%s-%s\", domainUid, MANAGED_SERVER_NAME_BASE);\n+  private static int replicaCount = 2;\n+\n+  /**\n+   * Perform initialization for all the tests in this class.\n+   * Set up the necessary namespaces, install the operator in the first namespace, and\n+   * create a domain in the second namespace using the pre-created basic MII image.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *           JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(6, MINUTES).await();\n+\n+    // get namespaces\n+    assertNotNull(namespaces.get(0), String.format(\"Namespace namespaces.get(0) is null\"));\n+    opNamespace = namespaces.get(0);\n+\n+    assertNotNull(namespaces.get(1), String.format(\"Namespace namespaces.get(1) is null\"));\n+    domainNamespace = namespaces.get(1);\n+\n+    // install the operator\n+    logger.info(\"Install an operator in namespace {0}, managing namespace {1}\",\n+        opNamespace, domainNamespace);\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // create a domain resource\n+    logger.info(\"Create model-in-image domain {0} in namespace {1}, and wait until it comes up\",\n+        domainUid, domainNamespace);\n+    createMiiDomainAndVerify(\n+        domainNamespace, domainUid, adminServerPodName, managedServerPrefix, replicaCount);\n+  }\n+\n+  /**\n+   * Test patching a running model-in-image domain with a new WebLogic credentials secret.\n+   * Perform two patching operations to the domain spec. First, change the webLogicCredentialsSecret to\n+   * a new secret, and then change the domainRestartVersion to trigger a rolling restart of the server pods.\n+   * While the rolling is on-going, restart the operator pod.\n+   * Verify that after the operator is restarted, the domain spec's webLogicCredentialsSecret and,\n+   * restartVersion are updated, and the server pods are recreated, the server pods' weblogic.domainRestartVersion\n+   * label is updated, and the new credentials are valid and can be used to access WebLogic RESTful\n+   * Management Services.\n+   */\n+  @Test\n+  @DisplayName(\"Restart operator when the domain is rolling after the admin credentials are changed\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testOperatorRestartWhenPodRoll() {\n+    final boolean VALID = true;\n+    final boolean INVALID = false;\n+\n+    LinkedHashMap<String, DateTime> pods = new LinkedHashMap<>();\n+\n+    // get the creation time of the admin server pod before patching\n+    DateTime adminPodCreationTime =\n+        assertDoesNotThrow(() -> getPodCreationTimestamp(domainNamespace, \"\", adminServerPodName),\n+        String.format(\"Failed to get creationTimestamp for pod %s\", adminServerPodName));\n+    assertNotNull(adminPodCreationTime, \"creationTimestamp of the admin server pod is null\");\n+\n+    logger.info(\"Domain {0} in namespace {1}, admin server pod {2} creationTimestamp before patching is {3}\",\n+        domainUid,\n+        domainNamespace,\n+        adminServerPodName,\n+        adminPodCreationTime);\n+\n+    pods.put(adminServerPodName, adminPodCreationTime);\n+\n+    List<DateTime> msLastCreationTime = new ArrayList<DateTime>();\n+    // get the creation time of the managed server pods before patching\n+    assertDoesNotThrow(\n+        () -> {\n+            for (int i = 1; i <= replicaCount; i++) {\n+              String managedServerPodName = managedServerPrefix + i;\n+              DateTime creationTime = getPodCreationTimestamp(domainNamespace, \"\", managedServerPodName);\n+              msLastCreationTime.add(creationTime);\n+              pods.put(managedServerPodName, creationTime);\n+\n+              logger.info(\"Domain {0} in namespace {1}, server pod {2} creationTimestamp before patching is {3}\",\n+                  domainUid,\n+                  domainNamespace,\n+                  managedServerPodName,\n+                  creationTime);\n+            }\n+        },\n+        String.format(\"Failed to get creationTimestamp for managed server pods\"));\n+\n+    logger.info(\"Check that before patching current credentials are valid and new credentials are not\");\n+    verifyCredentials(adminServerPodName, domainNamespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT, VALID);\n+    verifyCredentials(adminServerPodName, domainNamespace, ADMIN_USERNAME_PATCH, ADMIN_PASSWORD_PATCH, INVALID);\n+\n+    // create a new secret for admin credentials\n+    logger.info(\"Create a new secret that contains new WebLogic admin credentials\");\n+    String adminSecretName = \"weblogic-credentials-new\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        adminSecretName,\n+        domainNamespace,\n+        ADMIN_USERNAME_PATCH,\n+        ADMIN_PASSWORD_PATCH),\n+        String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // patch the domain resource with the new secret and verify that the domain resource is patched.\n+    logger.info(\"Patch domain {0} in namespace {1} with the secret {2}, and verify the result\",\n+        domainUid, domainNamespace, adminSecretName);\n+\n+    String restartVersion = CommonPatchTestUtils.patchDomainWithNewSecretAndVerify(\n+        domainUid,\n+        domainNamespace,\n+        adminServerPodName,\n+        managedServerPrefix,\n+        replicaCount,\n+        adminSecretName);\n+\n+    logger.info(\"Delete the operator pod in namespace {0} and wait for it to be restarted\", opNamespace);\n+    restartOperatorAndVerify();\n+\n+    logger.info(\"Wait for domain {0} admin server pod {1} in namespace {2} to be restarted\",\n+        domainUid, adminServerPodName, domainNamespace);\n+\n+    assertTrue(assertDoesNotThrow(\n+        () -> (verifyRollingRestartOccurred(pods, 1, domainNamespace)),\n+        \"More than one pod was restarted at same time\"),\n+        \"Rolling restart failed\");\n+\n+    for (int i = 1; i <= replicaCount; i++) {\n+      final String podName = managedServerPrefix + i;\n+      final DateTime lastCreationTime = msLastCreationTime.get(i - 1);\n+      // check that the managed server pod's label has been updated with the new restartVersion\n+      checkPodRestartVersionUpdated(podName, domainUid, domainNamespace, restartVersion);\n+    }\n+\n+    // check if the new credentials are valid and the old credentials are not valid any more\n+    logger.info(\"Check that after patching current credentials are not valid and new credentials are\");\n+    verifyCredentials(adminServerPodName, domainNamespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT, INVALID);\n+    verifyCredentials(adminServerPodName, domainNamespace, ADMIN_USERNAME_PATCH, ADMIN_PASSWORD_PATCH, VALID);\n+\n+    logger.info(\"Domain {0} in namespace {1} is fully started after changing WebLogic credentials secret\",\n+        domainUid, domainNamespace);\n+  }\n+\n+  private void restartOperatorAndVerify() {\n+    String opPodName = \n+        assertDoesNotThrow(() -> getOperatorPodName(TestConstants.OPERATOR_RELEASE_NAME, opNamespace),\n+        \"Failed to get the name of the operator pod\");\n+\n+    // get the creation time of the admin server pod before patching\n+    DateTime opPodCreationTime =\n+        assertDoesNotThrow(() -> getPodCreationTimestamp(opNamespace, \"\", opPodName),\n+            String.format(\"Failed to get creationTimestamp for pod %s\", opPodName));\n+    assertNotNull(opPodCreationTime, \"creationTimestamp of the operator pod is null\");\n+\n+    assertDoesNotThrow(\n+        () -> deleteOperatorPod(opPodName, opNamespace),\n+        \"Got exception in deleting the Operator pod\");\n+\n+    // wait for the operator to be ready\n+    logger.info(\"Wait for the operator pod is ready in namespace {0}\", opNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for operator to be running in namespace {0} \"\n+              + \"(elapsed time {1}ms, remaining time {2}ms)\",\n+            opNamespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> operatorIsReady(opNamespace),\n+          \"operatorIsReady failed with ApiException\"));\n+\n+    String opPodNameNew = \n+        assertDoesNotThrow(() -> getOperatorPodName(TestConstants.OPERATOR_RELEASE_NAME, opNamespace),\n+        \"Failed to get the name of the operator pod\");\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI4MTg1NA=="}, "originalCommit": {"oid": "3644ee70b97676ddfd948b881b09b56c53299624"}, "originalPosition": 232}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODI4NDA2OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDo0NzoxNlrOGns3xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjoxMDo1OVrOGnwhbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI4MjgyMQ==", "bodyText": "Does this method name has to be deleteOperatorPod?\nSince it is generic it can be renamed to be deletePod", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1759#discussion_r444282821", "createdAt": "2020-06-23T14:47:16Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -910,6 +910,17 @@ public static V1PodList listPods(String namespace, String labelSelectors) throws\n     return Pod.listPods(namespace, labelSelectors);\n   }\n \n+  /**\n+   * Delete the operator pod.\n+   *\n+   * @param podName the name of the operator pod\n+   * @param namespace the Kubernetes namespace that the operator belongs to\n+   * @throws ApiException if Kubernetes client API call fails\n+   */\n+  public static void deleteOperatorPod(String podName, String namespace) throws ApiException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3644ee70b97676ddfd948b881b09b56c53299624"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0MjYzOA==", "bodyText": "renamed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1759#discussion_r444342638", "createdAt": "2020-06-23T16:10:59Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -910,6 +910,17 @@ public static V1PodList listPods(String namespace, String labelSelectors) throws\n     return Pod.listPods(namespace, labelSelectors);\n   }\n \n+  /**\n+   * Delete the operator pod.\n+   *\n+   * @param podName the name of the operator pod\n+   * @param namespace the Kubernetes namespace that the operator belongs to\n+   * @throws ApiException if Kubernetes client API call fails\n+   */\n+  public static void deleteOperatorPod(String podName, String namespace) throws ApiException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI4MjgyMQ=="}, "originalCommit": {"oid": "3644ee70b97676ddfd948b881b09b56c53299624"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODI5MjM0OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDo0OTowNFrOGns9Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDo0OTowNFrOGns9Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI4NDIzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param namespace Kubernetes namespace that the operator belongs to\n          \n          \n            \n               * @param namespace Kubernetes namespace that the operator is running in", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1759#discussion_r444284231", "createdAt": "2020-06-23T14:49:04Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -2351,6 +2351,25 @@ private static String readExecCmdData(InputStream is) {\n     return sb.toString().trim();\n   }\n \n+  /**\n+   * Get the name of the operator pod.\n+   *\n+   * @param release release name of the operator\n+   * @param namespace Kubernetes namespace that the operator belongs to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3644ee70b97676ddfd948b881b09b56c53299624"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODMwMDA3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonMiiTestUtils.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDo1MDo0MVrOGntCYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjoxMToyMFrOGnwicw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI4NTUzOA==", "bodyText": "missing params javadoc", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1759#discussion_r444285538", "createdAt": "2020-06-23T14:50:41Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonMiiTestUtils.java", "diffHunk": "@@ -0,0 +1,158 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.utils;\n+\n+import oracle.weblogic.domain.Domain;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+\n+/**\n+ * The common utility class for model-in-image tests.\n+ */\n+public class CommonMiiTestUtils {\n+  /**\n+   * Create a basic Kubernetes domain resource and wait until the domain is fully up.\n+   *\n+   */\n+  public static void createMiiDomainAndVerify(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3644ee70b97676ddfd948b881b09b56c53299624"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMzNTk3OQ==", "bodyText": "added", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1759#discussion_r444335979", "createdAt": "2020-06-23T16:01:11Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonMiiTestUtils.java", "diffHunk": "@@ -0,0 +1,158 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.utils;\n+\n+import oracle.weblogic.domain.Domain;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+\n+/**\n+ * The common utility class for model-in-image tests.\n+ */\n+public class CommonMiiTestUtils {\n+  /**\n+   * Create a basic Kubernetes domain resource and wait until the domain is fully up.\n+   *\n+   */\n+  public static void createMiiDomainAndVerify(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI4NTUzOA=="}, "originalCommit": {"oid": "3644ee70b97676ddfd948b881b09b56c53299624"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0Mjg5OQ==", "bodyText": "added", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1759#discussion_r444342899", "createdAt": "2020-06-23T16:11:20Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonMiiTestUtils.java", "diffHunk": "@@ -0,0 +1,158 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.utils;\n+\n+import oracle.weblogic.domain.Domain;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+\n+/**\n+ * The common utility class for model-in-image tests.\n+ */\n+public class CommonMiiTestUtils {\n+  /**\n+   * Create a basic Kubernetes domain resource and wait until the domain is fully up.\n+   *\n+   */\n+  public static void createMiiDomainAndVerify(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI4NTUzOA=="}, "originalCommit": {"oid": "3644ee70b97676ddfd948b881b09b56c53299624"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODMxMjg5OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonMiiTestUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDo1MzoyMFrOGntKfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjoxMDowNlrOGnwfJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI4NzYxNA==", "bodyText": "checkServiceExists checks need to be done before podReady checks.\nPod will never become ready when service creation fails.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1759#discussion_r444287614", "createdAt": "2020-06-23T14:53:20Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonMiiTestUtils.java", "diffHunk": "@@ -0,0 +1,158 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.utils;\n+\n+import oracle.weblogic.domain.Domain;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+\n+/**\n+ * The common utility class for model-in-image tests.\n+ */\n+public class CommonMiiTestUtils {\n+  /**\n+   * Create a basic Kubernetes domain resource and wait until the domain is fully up.\n+   *\n+   */\n+  public static void createMiiDomainAndVerify(\n+      String domainNamespace,\n+      String domainUid,\n+      String adminServerPodName,\n+      String managedServerPrefix,\n+      int replicaCount\n+  ) {\n+    logger.info(\"Create the repo secret {0} to pull the image\", REPO_SECRET_NAME);\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+            String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        adminSecretName,\n+        domainNamespace,\n+        ADMIN_USERNAME_DEFAULT,\n+        ADMIN_PASSWORD_DEFAULT),\n+        String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        encryptionSecretName,\n+        domainNamespace,\n+        \"weblogicenc\",\n+        \"weblogicenc\"),\n+        String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    // create the domain custom resource\n+    logger.info(\"Create domain resource {0} object in namespace {1} and verify that it is created\",\n+        domainUid, domainNamespace);\n+    Domain domain = createDomainResource(\n+        domainUid,\n+        domainNamespace,\n+        adminSecretName,\n+        REPO_SECRET_NAME,\n+        encryptionSecretName,\n+        replicaCount);\n+\n+    createDomainAndVerify(domain, domainNamespace);\n+\n+    // check admin server pod is ready\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // check managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3644ee70b97676ddfd948b881b09b56c53299624"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0MjA1NQ==", "bodyText": "This pattern is consistent in all test classes. Can you create a task to verify this and make the change to all classes if needed?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1759#discussion_r444342055", "createdAt": "2020-06-23T16:10:06Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonMiiTestUtils.java", "diffHunk": "@@ -0,0 +1,158 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.utils;\n+\n+import oracle.weblogic.domain.Domain;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+\n+/**\n+ * The common utility class for model-in-image tests.\n+ */\n+public class CommonMiiTestUtils {\n+  /**\n+   * Create a basic Kubernetes domain resource and wait until the domain is fully up.\n+   *\n+   */\n+  public static void createMiiDomainAndVerify(\n+      String domainNamespace,\n+      String domainUid,\n+      String adminServerPodName,\n+      String managedServerPrefix,\n+      int replicaCount\n+  ) {\n+    logger.info(\"Create the repo secret {0} to pull the image\", REPO_SECRET_NAME);\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+            String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        adminSecretName,\n+        domainNamespace,\n+        ADMIN_USERNAME_DEFAULT,\n+        ADMIN_PASSWORD_DEFAULT),\n+        String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        encryptionSecretName,\n+        domainNamespace,\n+        \"weblogicenc\",\n+        \"weblogicenc\"),\n+        String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    // create the domain custom resource\n+    logger.info(\"Create domain resource {0} object in namespace {1} and verify that it is created\",\n+        domainUid, domainNamespace);\n+    Domain domain = createDomainResource(\n+        domainUid,\n+        domainNamespace,\n+        adminSecretName,\n+        REPO_SECRET_NAME,\n+        encryptionSecretName,\n+        replicaCount);\n+\n+    createDomainAndVerify(domain, domainNamespace);\n+\n+    // check admin server pod is ready\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // check managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI4NzYxNA=="}, "originalCommit": {"oid": "3644ee70b97676ddfd948b881b09b56c53299624"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODMxNzM2OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonMiiTestUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDo1NDoxM1rOGntNYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjoxMTozMVrOGnwi8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI4ODM1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param encryptionSecretName name of the secret for encryption\n          \n          \n            \n               * @param encryptionSecretName name of the secret for encryption of model", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1759#discussion_r444288352", "createdAt": "2020-06-23T14:54:13Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonMiiTestUtils.java", "diffHunk": "@@ -0,0 +1,158 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.utils;\n+\n+import oracle.weblogic.domain.Domain;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+\n+/**\n+ * The common utility class for model-in-image tests.\n+ */\n+public class CommonMiiTestUtils {\n+  /**\n+   * Create a basic Kubernetes domain resource and wait until the domain is fully up.\n+   *\n+   */\n+  public static void createMiiDomainAndVerify(\n+      String domainNamespace,\n+      String domainUid,\n+      String adminServerPodName,\n+      String managedServerPrefix,\n+      int replicaCount\n+  ) {\n+    logger.info(\"Create the repo secret {0} to pull the image\", REPO_SECRET_NAME);\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+            String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        adminSecretName,\n+        domainNamespace,\n+        ADMIN_USERNAME_DEFAULT,\n+        ADMIN_PASSWORD_DEFAULT),\n+        String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        encryptionSecretName,\n+        domainNamespace,\n+        \"weblogicenc\",\n+        \"weblogicenc\"),\n+        String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    // create the domain custom resource\n+    logger.info(\"Create domain resource {0} object in namespace {1} and verify that it is created\",\n+        domainUid, domainNamespace);\n+    Domain domain = createDomainResource(\n+        domainUid,\n+        domainNamespace,\n+        adminSecretName,\n+        REPO_SECRET_NAME,\n+        encryptionSecretName,\n+        replicaCount);\n+\n+    createDomainAndVerify(domain, domainNamespace);\n+\n+    // check admin server pod is ready\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // check managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+  }\n+\n+  /**\n+   * Create a domain object for a Kubernetes domain custom resource using the basic model-in-image image.\n+   *\n+   * @param domainResourceName name of the domain resource\n+   * @param domNamespace Kubernetes namespace that the domain is hosted\n+   * @param adminSecretName name of the new WebLogic admin credentials secret\n+   * @param repoSecretName name of the secret for pulling the WebLogic image\n+   * @param encryptionSecretName name of the secret for encryption", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3644ee70b97676ddfd948b881b09b56c53299624"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0MzAyNA==", "bodyText": "reworded", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1759#discussion_r444343024", "createdAt": "2020-06-23T16:11:31Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonMiiTestUtils.java", "diffHunk": "@@ -0,0 +1,158 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.utils;\n+\n+import oracle.weblogic.domain.Domain;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+\n+/**\n+ * The common utility class for model-in-image tests.\n+ */\n+public class CommonMiiTestUtils {\n+  /**\n+   * Create a basic Kubernetes domain resource and wait until the domain is fully up.\n+   *\n+   */\n+  public static void createMiiDomainAndVerify(\n+      String domainNamespace,\n+      String domainUid,\n+      String adminServerPodName,\n+      String managedServerPrefix,\n+      int replicaCount\n+  ) {\n+    logger.info(\"Create the repo secret {0} to pull the image\", REPO_SECRET_NAME);\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+            String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        adminSecretName,\n+        domainNamespace,\n+        ADMIN_USERNAME_DEFAULT,\n+        ADMIN_PASSWORD_DEFAULT),\n+        String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        encryptionSecretName,\n+        domainNamespace,\n+        \"weblogicenc\",\n+        \"weblogicenc\"),\n+        String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    // create the domain custom resource\n+    logger.info(\"Create domain resource {0} object in namespace {1} and verify that it is created\",\n+        domainUid, domainNamespace);\n+    Domain domain = createDomainResource(\n+        domainUid,\n+        domainNamespace,\n+        adminSecretName,\n+        REPO_SECRET_NAME,\n+        encryptionSecretName,\n+        replicaCount);\n+\n+    createDomainAndVerify(domain, domainNamespace);\n+\n+    // check admin server pod is ready\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // check managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+  }\n+\n+  /**\n+   * Create a domain object for a Kubernetes domain custom resource using the basic model-in-image image.\n+   *\n+   * @param domainResourceName name of the domain resource\n+   * @param domNamespace Kubernetes namespace that the domain is hosted\n+   * @param adminSecretName name of the new WebLogic admin credentials secret\n+   * @param repoSecretName name of the secret for pulling the WebLogic image\n+   * @param encryptionSecretName name of the secret for encryption", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI4ODM1Mg=="}, "originalCommit": {"oid": "3644ee70b97676ddfd948b881b09b56c53299624"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODMyMDkxOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonMiiTestUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDo1NDo1NlrOGntPpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDo1NDo1NlrOGntPpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI4ODkzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @return domain of the domain resource\n          \n          \n            \n               * @return domain object of the domain resource", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1759#discussion_r444288934", "createdAt": "2020-06-23T14:54:56Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonMiiTestUtils.java", "diffHunk": "@@ -0,0 +1,158 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.utils;\n+\n+import oracle.weblogic.domain.Domain;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+\n+/**\n+ * The common utility class for model-in-image tests.\n+ */\n+public class CommonMiiTestUtils {\n+  /**\n+   * Create a basic Kubernetes domain resource and wait until the domain is fully up.\n+   *\n+   */\n+  public static void createMiiDomainAndVerify(\n+      String domainNamespace,\n+      String domainUid,\n+      String adminServerPodName,\n+      String managedServerPrefix,\n+      int replicaCount\n+  ) {\n+    logger.info(\"Create the repo secret {0} to pull the image\", REPO_SECRET_NAME);\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+            String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        adminSecretName,\n+        domainNamespace,\n+        ADMIN_USERNAME_DEFAULT,\n+        ADMIN_PASSWORD_DEFAULT),\n+        String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        encryptionSecretName,\n+        domainNamespace,\n+        \"weblogicenc\",\n+        \"weblogicenc\"),\n+        String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    // create the domain custom resource\n+    logger.info(\"Create domain resource {0} object in namespace {1} and verify that it is created\",\n+        domainUid, domainNamespace);\n+    Domain domain = createDomainResource(\n+        domainUid,\n+        domainNamespace,\n+        adminSecretName,\n+        REPO_SECRET_NAME,\n+        encryptionSecretName,\n+        replicaCount);\n+\n+    createDomainAndVerify(domain, domainNamespace);\n+\n+    // check admin server pod is ready\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // check managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+  }\n+\n+  /**\n+   * Create a domain object for a Kubernetes domain custom resource using the basic model-in-image image.\n+   *\n+   * @param domainResourceName name of the domain resource\n+   * @param domNamespace Kubernetes namespace that the domain is hosted\n+   * @param adminSecretName name of the new WebLogic admin credentials secret\n+   * @param repoSecretName name of the secret for pulling the WebLogic image\n+   * @param encryptionSecretName name of the secret for encryption\n+   * @param replicaCount number of managed servers to start\n+   * @return domain of the domain resource", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3644ee70b97676ddfd948b881b09b56c53299624"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODMyOTg3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonPatchTestUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDo1Njo1NFrOGntVgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjoxMTo0MFrOGnwjUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI5MDQzMw==", "bodyText": "import V1Patch", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1759#discussion_r444290433", "createdAt": "2020-06-23T14:56:54Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonPatchTestUtils.java", "diffHunk": "@@ -0,0 +1,177 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.utils;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainResourceCredentialsSecretPatched;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podRestartVersionUpdated;\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * The common utility class for domain patching tests.\n+ */\n+public class CommonPatchTestUtils {\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(5, MINUTES).await();\n+\n+  /**\n+   * Patch the domain resource with a new WebLogic admin credentials secret.\n+   *\n+   * @param domainResourceName name of the domain resource\n+   * @param namespace Kubernetes namespace that the domain is hosted\n+   * @param secretName name of the new WebLogic admin credentials secret\n+   * @return restartVersion new restartVersion of the domain resource\n+   */\n+  public static String patchDomainResourceWithNewAdminSecret(\n+      String domainResourceName,\n+      String namespace,\n+      String secretName\n+  ) {\n+    String patch = String.format(\n+        \"[\\n  {\\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/spec/%s\\\", \\\"value\\\": \\\"%s\\\"}\\n]\\n\",\n+        \"webLogicCredentialsSecret/name\", secretName);\n+    logger.info(\"Patch the domain resource {0} in namespace {1} with: {2}\\n\",\n+        domainResourceName, namespace, patch);\n+\n+    assertTrue(patchDomainCustomResource(\n+        domainResourceName,\n+        namespace,\n+        new io.kubernetes.client.custom.V1Patch(patch),\n+        io.kubernetes.client.custom.V1Patch.PATCH_FORMAT_JSON_PATCH),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3644ee70b97676ddfd948b881b09b56c53299624"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0MzEyMg==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1759#discussion_r444343122", "createdAt": "2020-06-23T16:11:40Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonPatchTestUtils.java", "diffHunk": "@@ -0,0 +1,177 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.utils;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainResourceCredentialsSecretPatched;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podRestartVersionUpdated;\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * The common utility class for domain patching tests.\n+ */\n+public class CommonPatchTestUtils {\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(5, MINUTES).await();\n+\n+  /**\n+   * Patch the domain resource with a new WebLogic admin credentials secret.\n+   *\n+   * @param domainResourceName name of the domain resource\n+   * @param namespace Kubernetes namespace that the domain is hosted\n+   * @param secretName name of the new WebLogic admin credentials secret\n+   * @return restartVersion new restartVersion of the domain resource\n+   */\n+  public static String patchDomainResourceWithNewAdminSecret(\n+      String domainResourceName,\n+      String namespace,\n+      String secretName\n+  ) {\n+    String patch = String.format(\n+        \"[\\n  {\\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/spec/%s\\\", \\\"value\\\": \\\"%s\\\"}\\n]\\n\",\n+        \"webLogicCredentialsSecret/name\", secretName);\n+    logger.info(\"Patch the domain resource {0} in namespace {1} with: {2}\\n\",\n+        domainResourceName, namespace, patch);\n+\n+    assertTrue(patchDomainCustomResource(\n+        domainResourceName,\n+        namespace,\n+        new io.kubernetes.client.custom.V1Patch(patch),\n+        io.kubernetes.client.custom.V1Patch.PATCH_FORMAT_JSON_PATCH),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI5MDQzMw=="}, "originalCommit": {"oid": "3644ee70b97676ddfd948b881b09b56c53299624"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODMzNzU3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonPatchTestUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDo1ODo0MVrOGntaqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjoxMTo0OVrOGnwjtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI5MTc1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param adminServerPodName name of the WebLogic admin server\n          \n          \n            \n               * @param adminServerPodName name of the WebLogic admin server pod", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1759#discussion_r444291752", "createdAt": "2020-06-23T14:58:41Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonPatchTestUtils.java", "diffHunk": "@@ -0,0 +1,177 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.utils;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainResourceCredentialsSecretPatched;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podRestartVersionUpdated;\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * The common utility class for domain patching tests.\n+ */\n+public class CommonPatchTestUtils {\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(5, MINUTES).await();\n+\n+  /**\n+   * Patch the domain resource with a new WebLogic admin credentials secret.\n+   *\n+   * @param domainResourceName name of the domain resource\n+   * @param namespace Kubernetes namespace that the domain is hosted\n+   * @param secretName name of the new WebLogic admin credentials secret\n+   * @return restartVersion new restartVersion of the domain resource\n+   */\n+  public static String patchDomainResourceWithNewAdminSecret(\n+      String domainResourceName,\n+      String namespace,\n+      String secretName\n+  ) {\n+    String patch = String.format(\n+        \"[\\n  {\\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/spec/%s\\\", \\\"value\\\": \\\"%s\\\"}\\n]\\n\",\n+        \"webLogicCredentialsSecret/name\", secretName);\n+    logger.info(\"Patch the domain resource {0} in namespace {1} with: {2}\\n\",\n+        domainResourceName, namespace, patch);\n+\n+    assertTrue(patchDomainCustomResource(\n+        domainResourceName,\n+        namespace,\n+        new io.kubernetes.client.custom.V1Patch(patch),\n+        io.kubernetes.client.custom.V1Patch.PATCH_FORMAT_JSON_PATCH),\n+        String.format(\"Failed to patch the domain resource %s in namespace %s with %s: %s\",\n+            domainResourceName, namespace, \"/spec/webLogicCredentialsSecret/name\", secretName));\n+\n+    String oldVersion = assertDoesNotThrow(\n+        () -> getDomainCustomResource(domainResourceName, namespace).getSpec().getRestartVersion(),\n+        String.format(\"Failed to get the restartVersion of %s in namespace %s\", domainResourceName, namespace));\n+    int newVersion = oldVersion == null ? 1 : Integer.valueOf(oldVersion) + 1;\n+    logger.info(\"Update domain resource {0} in namespace {1} restartVersion from {2} to {3}\",\n+        domainResourceName, namespace, oldVersion, newVersion);\n+    patch =\n+        String.format(\"[\\n  {\\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/spec/restartVersion\\\", \\\"value\\\": \\\"%s\\\"}\\n]\\n\",\n+            newVersion);\n+\n+    logger.info(\"Patch the domain resource {0} in namespace {1} with: {2}\\n\",\n+        domainResourceName, namespace, patch);\n+\n+    assertTrue(patchDomainCustomResource(\n+        domainResourceName,\n+        namespace,\n+        new io.kubernetes.client.custom.V1Patch(patch),\n+        io.kubernetes.client.custom.V1Patch.PATCH_FORMAT_JSON_PATCH),\n+        String.format(\"Failed to patch the domain resource %s in namespace %s with startVersion: %s\",\n+            domainResourceName, namespace, newVersion));\n+\n+    String updatedVersion = assertDoesNotThrow(\n+        () -> getDomainCustomResource(domainResourceName, namespace).getSpec().getRestartVersion(),\n+        String.format(\"Failed to get the restartVersion of %s in namespace %s\", domainResourceName, namespace));\n+    logger.info(\"Current restartVersion is {0}\", updatedVersion);\n+    assertTrue(updatedVersion.equals(String.valueOf(newVersion)),\n+        String.format(\"Failed to update the restartVersion of domain %s from %s to %s\",\n+            domainResourceName,\n+            oldVersion,\n+            newVersion));\n+    return String.valueOf(newVersion);\n+  }\n+\n+  /**\n+   * Patch domain resource with a new WebLogic domain credentials secret and a new restartVersion,\n+   * and verify if the domain spec has been correctly updated.\n+   *\n+   * @param domainUid name of the domain resource\n+   * @param namespace Kubernetes namespace that the domain is hosted\n+   * @param adminServerPodName name of the WebLogic admin server", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3644ee70b97676ddfd948b881b09b56c53299624"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0MzIyMw==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1759#discussion_r444343223", "createdAt": "2020-06-23T16:11:49Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonPatchTestUtils.java", "diffHunk": "@@ -0,0 +1,177 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.utils;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainResourceCredentialsSecretPatched;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podRestartVersionUpdated;\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * The common utility class for domain patching tests.\n+ */\n+public class CommonPatchTestUtils {\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(5, MINUTES).await();\n+\n+  /**\n+   * Patch the domain resource with a new WebLogic admin credentials secret.\n+   *\n+   * @param domainResourceName name of the domain resource\n+   * @param namespace Kubernetes namespace that the domain is hosted\n+   * @param secretName name of the new WebLogic admin credentials secret\n+   * @return restartVersion new restartVersion of the domain resource\n+   */\n+  public static String patchDomainResourceWithNewAdminSecret(\n+      String domainResourceName,\n+      String namespace,\n+      String secretName\n+  ) {\n+    String patch = String.format(\n+        \"[\\n  {\\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/spec/%s\\\", \\\"value\\\": \\\"%s\\\"}\\n]\\n\",\n+        \"webLogicCredentialsSecret/name\", secretName);\n+    logger.info(\"Patch the domain resource {0} in namespace {1} with: {2}\\n\",\n+        domainResourceName, namespace, patch);\n+\n+    assertTrue(patchDomainCustomResource(\n+        domainResourceName,\n+        namespace,\n+        new io.kubernetes.client.custom.V1Patch(patch),\n+        io.kubernetes.client.custom.V1Patch.PATCH_FORMAT_JSON_PATCH),\n+        String.format(\"Failed to patch the domain resource %s in namespace %s with %s: %s\",\n+            domainResourceName, namespace, \"/spec/webLogicCredentialsSecret/name\", secretName));\n+\n+    String oldVersion = assertDoesNotThrow(\n+        () -> getDomainCustomResource(domainResourceName, namespace).getSpec().getRestartVersion(),\n+        String.format(\"Failed to get the restartVersion of %s in namespace %s\", domainResourceName, namespace));\n+    int newVersion = oldVersion == null ? 1 : Integer.valueOf(oldVersion) + 1;\n+    logger.info(\"Update domain resource {0} in namespace {1} restartVersion from {2} to {3}\",\n+        domainResourceName, namespace, oldVersion, newVersion);\n+    patch =\n+        String.format(\"[\\n  {\\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/spec/restartVersion\\\", \\\"value\\\": \\\"%s\\\"}\\n]\\n\",\n+            newVersion);\n+\n+    logger.info(\"Patch the domain resource {0} in namespace {1} with: {2}\\n\",\n+        domainResourceName, namespace, patch);\n+\n+    assertTrue(patchDomainCustomResource(\n+        domainResourceName,\n+        namespace,\n+        new io.kubernetes.client.custom.V1Patch(patch),\n+        io.kubernetes.client.custom.V1Patch.PATCH_FORMAT_JSON_PATCH),\n+        String.format(\"Failed to patch the domain resource %s in namespace %s with startVersion: %s\",\n+            domainResourceName, namespace, newVersion));\n+\n+    String updatedVersion = assertDoesNotThrow(\n+        () -> getDomainCustomResource(domainResourceName, namespace).getSpec().getRestartVersion(),\n+        String.format(\"Failed to get the restartVersion of %s in namespace %s\", domainResourceName, namespace));\n+    logger.info(\"Current restartVersion is {0}\", updatedVersion);\n+    assertTrue(updatedVersion.equals(String.valueOf(newVersion)),\n+        String.format(\"Failed to update the restartVersion of domain %s from %s to %s\",\n+            domainResourceName,\n+            oldVersion,\n+            newVersion));\n+    return String.valueOf(newVersion);\n+  }\n+\n+  /**\n+   * Patch domain resource with a new WebLogic domain credentials secret and a new restartVersion,\n+   * and verify if the domain spec has been correctly updated.\n+   *\n+   * @param domainUid name of the domain resource\n+   * @param namespace Kubernetes namespace that the domain is hosted\n+   * @param adminServerPodName name of the WebLogic admin server", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI5MTc1Mg=="}, "originalCommit": {"oid": "3644ee70b97676ddfd948b881b09b56c53299624"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODMzOTIwOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonPatchTestUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDo1OTowNFrOGntbzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDo1OTowNFrOGntbzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI5MjA0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param managedServerPrefix prefix of the managed servers\n          \n          \n            \n               * @param managedServerPrefix prefix of the managed server pods", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1759#discussion_r444292046", "createdAt": "2020-06-23T14:59:04Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonPatchTestUtils.java", "diffHunk": "@@ -0,0 +1,177 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.utils;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.patchDomainCustomResource;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainResourceCredentialsSecretPatched;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podRestartVersionUpdated;\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+/**\n+ * The common utility class for domain patching tests.\n+ */\n+public class CommonPatchTestUtils {\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(5, MINUTES).await();\n+\n+  /**\n+   * Patch the domain resource with a new WebLogic admin credentials secret.\n+   *\n+   * @param domainResourceName name of the domain resource\n+   * @param namespace Kubernetes namespace that the domain is hosted\n+   * @param secretName name of the new WebLogic admin credentials secret\n+   * @return restartVersion new restartVersion of the domain resource\n+   */\n+  public static String patchDomainResourceWithNewAdminSecret(\n+      String domainResourceName,\n+      String namespace,\n+      String secretName\n+  ) {\n+    String patch = String.format(\n+        \"[\\n  {\\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/spec/%s\\\", \\\"value\\\": \\\"%s\\\"}\\n]\\n\",\n+        \"webLogicCredentialsSecret/name\", secretName);\n+    logger.info(\"Patch the domain resource {0} in namespace {1} with: {2}\\n\",\n+        domainResourceName, namespace, patch);\n+\n+    assertTrue(patchDomainCustomResource(\n+        domainResourceName,\n+        namespace,\n+        new io.kubernetes.client.custom.V1Patch(patch),\n+        io.kubernetes.client.custom.V1Patch.PATCH_FORMAT_JSON_PATCH),\n+        String.format(\"Failed to patch the domain resource %s in namespace %s with %s: %s\",\n+            domainResourceName, namespace, \"/spec/webLogicCredentialsSecret/name\", secretName));\n+\n+    String oldVersion = assertDoesNotThrow(\n+        () -> getDomainCustomResource(domainResourceName, namespace).getSpec().getRestartVersion(),\n+        String.format(\"Failed to get the restartVersion of %s in namespace %s\", domainResourceName, namespace));\n+    int newVersion = oldVersion == null ? 1 : Integer.valueOf(oldVersion) + 1;\n+    logger.info(\"Update domain resource {0} in namespace {1} restartVersion from {2} to {3}\",\n+        domainResourceName, namespace, oldVersion, newVersion);\n+    patch =\n+        String.format(\"[\\n  {\\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/spec/restartVersion\\\", \\\"value\\\": \\\"%s\\\"}\\n]\\n\",\n+            newVersion);\n+\n+    logger.info(\"Patch the domain resource {0} in namespace {1} with: {2}\\n\",\n+        domainResourceName, namespace, patch);\n+\n+    assertTrue(patchDomainCustomResource(\n+        domainResourceName,\n+        namespace,\n+        new io.kubernetes.client.custom.V1Patch(patch),\n+        io.kubernetes.client.custom.V1Patch.PATCH_FORMAT_JSON_PATCH),\n+        String.format(\"Failed to patch the domain resource %s in namespace %s with startVersion: %s\",\n+            domainResourceName, namespace, newVersion));\n+\n+    String updatedVersion = assertDoesNotThrow(\n+        () -> getDomainCustomResource(domainResourceName, namespace).getSpec().getRestartVersion(),\n+        String.format(\"Failed to get the restartVersion of %s in namespace %s\", domainResourceName, namespace));\n+    logger.info(\"Current restartVersion is {0}\", updatedVersion);\n+    assertTrue(updatedVersion.equals(String.valueOf(newVersion)),\n+        String.format(\"Failed to update the restartVersion of domain %s from %s to %s\",\n+            domainResourceName,\n+            oldVersion,\n+            newVersion));\n+    return String.valueOf(newVersion);\n+  }\n+\n+  /**\n+   * Patch domain resource with a new WebLogic domain credentials secret and a new restartVersion,\n+   * and verify if the domain spec has been correctly updated.\n+   *\n+   * @param domainUid name of the domain resource\n+   * @param namespace Kubernetes namespace that the domain is hosted\n+   * @param adminServerPodName name of the WebLogic admin server\n+   * @param managedServerPrefix prefix of the managed servers", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3644ee70b97676ddfd948b881b09b56c53299624"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODkyNDgzOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonMiiTestUtils.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNzoyNzozNFrOGnzW6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMjo0NzoyOFrOGoQjkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM4OTA5OQ==", "bodyText": "can we add in this method image name param, so we can pass custom images as well?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1759#discussion_r444389099", "createdAt": "2020-06-23T17:27:34Z", "author": {"login": "marinakog"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonMiiTestUtils.java", "diffHunk": "@@ -0,0 +1,163 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.utils;\n+\n+import oracle.weblogic.domain.Domain;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+\n+/**\n+ * The common utility class for model-in-image tests.\n+ */\n+public class CommonMiiTestUtils {\n+  /**\n+   * Create a basic Kubernetes domain resource and wait until the domain is fully up.\n+   *\n+   * @param domainNamespace Kubernetes namespace that the pod is running in\n+   * @param domainUid identifier of the domain\n+   * @param adminServerPodName name of the admin server pod\n+   * @param managedServerPrefix prefix of the managed server pods\n+   * @param replicaCount number of managed servers to start\n+   */\n+  public static void createMiiDomainAndVerify(\n+      String domainNamespace,\n+      String domainUid,\n+      String adminServerPodName,\n+      String managedServerPrefix,\n+      int replicaCount\n+  ) {\n+    logger.info(\"Create the repo secret {0} to pull the image\", REPO_SECRET_NAME);\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+            String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        adminSecretName,\n+        domainNamespace,\n+        ADMIN_USERNAME_DEFAULT,\n+        ADMIN_PASSWORD_DEFAULT),\n+        String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        encryptionSecretName,\n+        domainNamespace,\n+        \"weblogicenc\",\n+        \"weblogicenc\"),\n+        String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    // create the domain custom resource\n+    logger.info(\"Create domain resource {0} object in namespace {1} and verify that it is created\",\n+        domainUid, domainNamespace);\n+    Domain domain = createDomainResource(\n+        domainUid,\n+        domainNamespace,\n+        adminSecretName,\n+        REPO_SECRET_NAME,\n+        encryptionSecretName,\n+        replicaCount);\n+\n+    createDomainAndVerify(domain, domainNamespace);\n+\n+    // check admin server pod is ready\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // check managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+  }\n+\n+  /**\n+   * Create a domain object for a Kubernetes domain custom resource using the basic model-in-image image.\n+   *\n+   * @param domainResourceName name of the domain resource\n+   * @param domNamespace Kubernetes namespace that the domain is hosted\n+   * @param adminSecretName name of the new WebLogic admin credentials secret\n+   * @param repoSecretName name of the secret for pulling the WebLogic image\n+   * @param encryptionSecretName name of the secret used to encrypt the models\n+   * @param replicaCount number of managed servers to start\n+   * @return domain object of the domain resource\n+   */\n+  public static oracle.weblogic.domain.Domain createDomainResource(\n+      String domainResourceName,\n+      String domNamespace,\n+      String adminSecretName,\n+      String repoSecretName,\n+      String encryptionSecretName,\n+      int replicaCount) {\n+    // create the domain CR\n+    return new oracle.weblogic.domain.Domain()\n+        .apiVersion(DOMAIN_API_VERSION)\n+        .kind(\"Domain\")\n+        .metadata(new io.kubernetes.client.openapi.models.V1ObjectMeta()\n+            .name(domainResourceName)\n+            .namespace(domNamespace))\n+        .spec(new oracle.weblogic.domain.DomainSpec()\n+            .domainUid(domainResourceName)\n+            .domainHomeSourceType(\"FromModel\")\n+            .image(MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG)\n+            .addImagePullSecretsItem(new io.kubernetes.client.openapi.models.V1LocalObjectReference()\n+                .name(repoSecretName))\n+            .webLogicCredentialsSecret(new io.kubernetes.client.openapi.models.V1SecretReference()\n+                .name(adminSecretName)\n+                .namespace(domNamespace))\n+            .includeServerOutInPodLog(true)\n+            .serverStartPolicy(\"IF_NEEDED\")\n+            .serverPod(new oracle.weblogic.domain.ServerPod()\n+                .addEnvItem(new io.kubernetes.client.openapi.models.V1EnvVar()\n+                    .name(\"JAVA_OPTIONS\")\n+                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n+                .addEnvItem(new io.kubernetes.client.openapi.models.V1EnvVar()\n+                    .name(\"USER_MEM_ARGS\")\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n+            .adminServer(new oracle.weblogic.domain.AdminServer()\n+                .serverStartState(\"RUNNING\")\n+                .adminService(new oracle.weblogic.domain.AdminService()\n+                    .addChannelsItem(new oracle.weblogic.domain.Channel()\n+                        .channelName(\"default\")\n+                        .nodePort(0))))\n+            .addClustersItem(new oracle.weblogic.domain.Cluster()\n+                .clusterName(\"cluster-1\")\n+                .replicas(replicaCount)\n+                .serverStartState(\"RUNNING\"))\n+            .configuration(new oracle.weblogic.domain.Configuration()\n+                .model(new oracle.weblogic.domain.Model()\n+                    .domainType(\"WLS\")\n+                    .runtimeEncryptionSecret(encryptionSecretName))\n+                .introspectorJobActiveDeadlineSeconds(300L)));\n+\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee9bf085f78c8fc94e7c9b9b02d9f1177ed80747"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQxNTk4MA==", "bodyText": "added", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1759#discussion_r444415980", "createdAt": "2020-06-23T18:13:25Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonMiiTestUtils.java", "diffHunk": "@@ -0,0 +1,163 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.utils;\n+\n+import oracle.weblogic.domain.Domain;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+\n+/**\n+ * The common utility class for model-in-image tests.\n+ */\n+public class CommonMiiTestUtils {\n+  /**\n+   * Create a basic Kubernetes domain resource and wait until the domain is fully up.\n+   *\n+   * @param domainNamespace Kubernetes namespace that the pod is running in\n+   * @param domainUid identifier of the domain\n+   * @param adminServerPodName name of the admin server pod\n+   * @param managedServerPrefix prefix of the managed server pods\n+   * @param replicaCount number of managed servers to start\n+   */\n+  public static void createMiiDomainAndVerify(\n+      String domainNamespace,\n+      String domainUid,\n+      String adminServerPodName,\n+      String managedServerPrefix,\n+      int replicaCount\n+  ) {\n+    logger.info(\"Create the repo secret {0} to pull the image\", REPO_SECRET_NAME);\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+            String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        adminSecretName,\n+        domainNamespace,\n+        ADMIN_USERNAME_DEFAULT,\n+        ADMIN_PASSWORD_DEFAULT),\n+        String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        encryptionSecretName,\n+        domainNamespace,\n+        \"weblogicenc\",\n+        \"weblogicenc\"),\n+        String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    // create the domain custom resource\n+    logger.info(\"Create domain resource {0} object in namespace {1} and verify that it is created\",\n+        domainUid, domainNamespace);\n+    Domain domain = createDomainResource(\n+        domainUid,\n+        domainNamespace,\n+        adminSecretName,\n+        REPO_SECRET_NAME,\n+        encryptionSecretName,\n+        replicaCount);\n+\n+    createDomainAndVerify(domain, domainNamespace);\n+\n+    // check admin server pod is ready\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // check managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+  }\n+\n+  /**\n+   * Create a domain object for a Kubernetes domain custom resource using the basic model-in-image image.\n+   *\n+   * @param domainResourceName name of the domain resource\n+   * @param domNamespace Kubernetes namespace that the domain is hosted\n+   * @param adminSecretName name of the new WebLogic admin credentials secret\n+   * @param repoSecretName name of the secret for pulling the WebLogic image\n+   * @param encryptionSecretName name of the secret used to encrypt the models\n+   * @param replicaCount number of managed servers to start\n+   * @return domain object of the domain resource\n+   */\n+  public static oracle.weblogic.domain.Domain createDomainResource(\n+      String domainResourceName,\n+      String domNamespace,\n+      String adminSecretName,\n+      String repoSecretName,\n+      String encryptionSecretName,\n+      int replicaCount) {\n+    // create the domain CR\n+    return new oracle.weblogic.domain.Domain()\n+        .apiVersion(DOMAIN_API_VERSION)\n+        .kind(\"Domain\")\n+        .metadata(new io.kubernetes.client.openapi.models.V1ObjectMeta()\n+            .name(domainResourceName)\n+            .namespace(domNamespace))\n+        .spec(new oracle.weblogic.domain.DomainSpec()\n+            .domainUid(domainResourceName)\n+            .domainHomeSourceType(\"FromModel\")\n+            .image(MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG)\n+            .addImagePullSecretsItem(new io.kubernetes.client.openapi.models.V1LocalObjectReference()\n+                .name(repoSecretName))\n+            .webLogicCredentialsSecret(new io.kubernetes.client.openapi.models.V1SecretReference()\n+                .name(adminSecretName)\n+                .namespace(domNamespace))\n+            .includeServerOutInPodLog(true)\n+            .serverStartPolicy(\"IF_NEEDED\")\n+            .serverPod(new oracle.weblogic.domain.ServerPod()\n+                .addEnvItem(new io.kubernetes.client.openapi.models.V1EnvVar()\n+                    .name(\"JAVA_OPTIONS\")\n+                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n+                .addEnvItem(new io.kubernetes.client.openapi.models.V1EnvVar()\n+                    .name(\"USER_MEM_ARGS\")\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n+            .adminServer(new oracle.weblogic.domain.AdminServer()\n+                .serverStartState(\"RUNNING\")\n+                .adminService(new oracle.weblogic.domain.AdminService()\n+                    .addChannelsItem(new oracle.weblogic.domain.Channel()\n+                        .channelName(\"default\")\n+                        .nodePort(0))))\n+            .addClustersItem(new oracle.weblogic.domain.Cluster()\n+                .clusterName(\"cluster-1\")\n+                .replicas(replicaCount)\n+                .serverStartState(\"RUNNING\"))\n+            .configuration(new oracle.weblogic.domain.Configuration()\n+                .model(new oracle.weblogic.domain.Model()\n+                    .domainType(\"WLS\")\n+                    .runtimeEncryptionSecret(encryptionSecretName))\n+                .introspectorJobActiveDeadlineSeconds(300L)));\n+\n+  }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM4OTA5OQ=="}, "originalCommit": {"oid": "ee9bf085f78c8fc94e7c9b9b02d9f1177ed80747"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU2OTc2MQ==", "bodyText": "could you please also have method createMiiDomainAndVerify which takes custom image name?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1759#discussion_r444569761", "createdAt": "2020-06-23T23:53:33Z", "author": {"login": "marinakog"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonMiiTestUtils.java", "diffHunk": "@@ -0,0 +1,163 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.utils;\n+\n+import oracle.weblogic.domain.Domain;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+\n+/**\n+ * The common utility class for model-in-image tests.\n+ */\n+public class CommonMiiTestUtils {\n+  /**\n+   * Create a basic Kubernetes domain resource and wait until the domain is fully up.\n+   *\n+   * @param domainNamespace Kubernetes namespace that the pod is running in\n+   * @param domainUid identifier of the domain\n+   * @param adminServerPodName name of the admin server pod\n+   * @param managedServerPrefix prefix of the managed server pods\n+   * @param replicaCount number of managed servers to start\n+   */\n+  public static void createMiiDomainAndVerify(\n+      String domainNamespace,\n+      String domainUid,\n+      String adminServerPodName,\n+      String managedServerPrefix,\n+      int replicaCount\n+  ) {\n+    logger.info(\"Create the repo secret {0} to pull the image\", REPO_SECRET_NAME);\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+            String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        adminSecretName,\n+        domainNamespace,\n+        ADMIN_USERNAME_DEFAULT,\n+        ADMIN_PASSWORD_DEFAULT),\n+        String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        encryptionSecretName,\n+        domainNamespace,\n+        \"weblogicenc\",\n+        \"weblogicenc\"),\n+        String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    // create the domain custom resource\n+    logger.info(\"Create domain resource {0} object in namespace {1} and verify that it is created\",\n+        domainUid, domainNamespace);\n+    Domain domain = createDomainResource(\n+        domainUid,\n+        domainNamespace,\n+        adminSecretName,\n+        REPO_SECRET_NAME,\n+        encryptionSecretName,\n+        replicaCount);\n+\n+    createDomainAndVerify(domain, domainNamespace);\n+\n+    // check admin server pod is ready\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // check managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+  }\n+\n+  /**\n+   * Create a domain object for a Kubernetes domain custom resource using the basic model-in-image image.\n+   *\n+   * @param domainResourceName name of the domain resource\n+   * @param domNamespace Kubernetes namespace that the domain is hosted\n+   * @param adminSecretName name of the new WebLogic admin credentials secret\n+   * @param repoSecretName name of the secret for pulling the WebLogic image\n+   * @param encryptionSecretName name of the secret used to encrypt the models\n+   * @param replicaCount number of managed servers to start\n+   * @return domain object of the domain resource\n+   */\n+  public static oracle.weblogic.domain.Domain createDomainResource(\n+      String domainResourceName,\n+      String domNamespace,\n+      String adminSecretName,\n+      String repoSecretName,\n+      String encryptionSecretName,\n+      int replicaCount) {\n+    // create the domain CR\n+    return new oracle.weblogic.domain.Domain()\n+        .apiVersion(DOMAIN_API_VERSION)\n+        .kind(\"Domain\")\n+        .metadata(new io.kubernetes.client.openapi.models.V1ObjectMeta()\n+            .name(domainResourceName)\n+            .namespace(domNamespace))\n+        .spec(new oracle.weblogic.domain.DomainSpec()\n+            .domainUid(domainResourceName)\n+            .domainHomeSourceType(\"FromModel\")\n+            .image(MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG)\n+            .addImagePullSecretsItem(new io.kubernetes.client.openapi.models.V1LocalObjectReference()\n+                .name(repoSecretName))\n+            .webLogicCredentialsSecret(new io.kubernetes.client.openapi.models.V1SecretReference()\n+                .name(adminSecretName)\n+                .namespace(domNamespace))\n+            .includeServerOutInPodLog(true)\n+            .serverStartPolicy(\"IF_NEEDED\")\n+            .serverPod(new oracle.weblogic.domain.ServerPod()\n+                .addEnvItem(new io.kubernetes.client.openapi.models.V1EnvVar()\n+                    .name(\"JAVA_OPTIONS\")\n+                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n+                .addEnvItem(new io.kubernetes.client.openapi.models.V1EnvVar()\n+                    .name(\"USER_MEM_ARGS\")\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n+            .adminServer(new oracle.weblogic.domain.AdminServer()\n+                .serverStartState(\"RUNNING\")\n+                .adminService(new oracle.weblogic.domain.AdminService()\n+                    .addChannelsItem(new oracle.weblogic.domain.Channel()\n+                        .channelName(\"default\")\n+                        .nodePort(0))))\n+            .addClustersItem(new oracle.weblogic.domain.Cluster()\n+                .clusterName(\"cluster-1\")\n+                .replicas(replicaCount)\n+                .serverStartState(\"RUNNING\"))\n+            .configuration(new oracle.weblogic.domain.Configuration()\n+                .model(new oracle.weblogic.domain.Model()\n+                    .domainType(\"WLS\")\n+                    .runtimeEncryptionSecret(encryptionSecretName))\n+                .introspectorJobActiveDeadlineSeconds(300L)));\n+\n+  }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM4OTA5OQ=="}, "originalCommit": {"oid": "ee9bf085f78c8fc94e7c9b9b02d9f1177ed80747"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg2NzQ3Mw==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1759#discussion_r444867473", "createdAt": "2020-06-24T12:47:28Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonMiiTestUtils.java", "diffHunk": "@@ -0,0 +1,163 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.utils;\n+\n+import oracle.weblogic.domain.Domain;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+\n+/**\n+ * The common utility class for model-in-image tests.\n+ */\n+public class CommonMiiTestUtils {\n+  /**\n+   * Create a basic Kubernetes domain resource and wait until the domain is fully up.\n+   *\n+   * @param domainNamespace Kubernetes namespace that the pod is running in\n+   * @param domainUid identifier of the domain\n+   * @param adminServerPodName name of the admin server pod\n+   * @param managedServerPrefix prefix of the managed server pods\n+   * @param replicaCount number of managed servers to start\n+   */\n+  public static void createMiiDomainAndVerify(\n+      String domainNamespace,\n+      String domainUid,\n+      String adminServerPodName,\n+      String managedServerPrefix,\n+      int replicaCount\n+  ) {\n+    logger.info(\"Create the repo secret {0} to pull the image\", REPO_SECRET_NAME);\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+            String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        adminSecretName,\n+        domainNamespace,\n+        ADMIN_USERNAME_DEFAULT,\n+        ADMIN_PASSWORD_DEFAULT),\n+        String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        encryptionSecretName,\n+        domainNamespace,\n+        \"weblogicenc\",\n+        \"weblogicenc\"),\n+        String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    // create the domain custom resource\n+    logger.info(\"Create domain resource {0} object in namespace {1} and verify that it is created\",\n+        domainUid, domainNamespace);\n+    Domain domain = createDomainResource(\n+        domainUid,\n+        domainNamespace,\n+        adminSecretName,\n+        REPO_SECRET_NAME,\n+        encryptionSecretName,\n+        replicaCount);\n+\n+    createDomainAndVerify(domain, domainNamespace);\n+\n+    // check admin server pod is ready\n+    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // check managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+  }\n+\n+  /**\n+   * Create a domain object for a Kubernetes domain custom resource using the basic model-in-image image.\n+   *\n+   * @param domainResourceName name of the domain resource\n+   * @param domNamespace Kubernetes namespace that the domain is hosted\n+   * @param adminSecretName name of the new WebLogic admin credentials secret\n+   * @param repoSecretName name of the secret for pulling the WebLogic image\n+   * @param encryptionSecretName name of the secret used to encrypt the models\n+   * @param replicaCount number of managed servers to start\n+   * @return domain object of the domain resource\n+   */\n+  public static oracle.weblogic.domain.Domain createDomainResource(\n+      String domainResourceName,\n+      String domNamespace,\n+      String adminSecretName,\n+      String repoSecretName,\n+      String encryptionSecretName,\n+      int replicaCount) {\n+    // create the domain CR\n+    return new oracle.weblogic.domain.Domain()\n+        .apiVersion(DOMAIN_API_VERSION)\n+        .kind(\"Domain\")\n+        .metadata(new io.kubernetes.client.openapi.models.V1ObjectMeta()\n+            .name(domainResourceName)\n+            .namespace(domNamespace))\n+        .spec(new oracle.weblogic.domain.DomainSpec()\n+            .domainUid(domainResourceName)\n+            .domainHomeSourceType(\"FromModel\")\n+            .image(MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG)\n+            .addImagePullSecretsItem(new io.kubernetes.client.openapi.models.V1LocalObjectReference()\n+                .name(repoSecretName))\n+            .webLogicCredentialsSecret(new io.kubernetes.client.openapi.models.V1SecretReference()\n+                .name(adminSecretName)\n+                .namespace(domNamespace))\n+            .includeServerOutInPodLog(true)\n+            .serverStartPolicy(\"IF_NEEDED\")\n+            .serverPod(new oracle.weblogic.domain.ServerPod()\n+                .addEnvItem(new io.kubernetes.client.openapi.models.V1EnvVar()\n+                    .name(\"JAVA_OPTIONS\")\n+                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n+                .addEnvItem(new io.kubernetes.client.openapi.models.V1EnvVar()\n+                    .name(\"USER_MEM_ARGS\")\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n+            .adminServer(new oracle.weblogic.domain.AdminServer()\n+                .serverStartState(\"RUNNING\")\n+                .adminService(new oracle.weblogic.domain.AdminService()\n+                    .addChannelsItem(new oracle.weblogic.domain.Channel()\n+                        .channelName(\"default\")\n+                        .nodePort(0))))\n+            .addClustersItem(new oracle.weblogic.domain.Cluster()\n+                .clusterName(\"cluster-1\")\n+                .replicas(replicaCount)\n+                .serverStartState(\"RUNNING\"))\n+            .configuration(new oracle.weblogic.domain.Configuration()\n+                .model(new oracle.weblogic.domain.Model()\n+                    .domainType(\"WLS\")\n+                    .runtimeEncryptionSecret(encryptionSecretName))\n+                .introspectorJobActiveDeadlineSeconds(300L)));\n+\n+  }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM4OTA5OQ=="}, "originalCommit": {"oid": "ee9bf085f78c8fc94e7c9b9b02d9f1177ed80747"}, "originalPosition": 163}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4391, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}