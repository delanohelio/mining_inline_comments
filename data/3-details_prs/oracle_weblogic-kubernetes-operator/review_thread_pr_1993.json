{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0MDk2NTgw", "number": 1993, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNjoyMjoyOVrOEuEwzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMjoxMzowN1rOEuNBKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NzQ3OTgxOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/resources/apps/cdtservlet/src/application/CdtTxServlet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNjoyMjoyOVrOHiP7Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMDo0MToxOFrOHiZZMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY3NDU5NQ==", "bodyText": "You don't need to lookup the datasource again here.  Getting the connection under a global tx will cause the JDBC resource to be enlisted in the tx.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1993#discussion_r505674595", "createdAt": "2020-10-15T16:22:29Z", "author": {"login": "ajsomogyi"}, "path": "integration-tests/src/test/resources/apps/cdtservlet/src/application/CdtTxServlet.java", "diffHunk": "@@ -0,0 +1,249 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package application;\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Hashtable;\n+import javax.jms.ConnectionFactory;\n+import javax.jms.Destination;\n+import javax.jms.JMSContext;\n+import javax.naming.Context;\n+import javax.naming.InitialContext;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.transaction.SystemException;\n+import javax.transaction.xa.Xid;\n+\n+import weblogic.transaction.Transaction;\n+import weblogic.transaction.TransactionHelper;\n+import weblogic.transaction.TransactionManager;\n+\n+import static java.lang.Thread.sleep;\n+     \n+public class CdtTxServlet extends HttpServlet {\n+  private static final long serialVersionUID = 1L;\n+  private TransactionManager tm = (TransactionManager)\n+      TransactionHelper.getTransactionHelper().getTransactionManager();\n+  PrintWriter out = null;\n+\n+  /**\n+   * Handles the HTTP <code>GET</code> method.\n+   * Servlet send a message to a local queue and a remote (different domain) DB in distributed tx\n+   *\n+   * @param request  servlet request\n+   * @param response servlet response\n+   * @throws ServletException if a servlet-specific error occurs\n+   * @throws IOException      if an I/O error occurs\n+   */\n+  protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n+    //PrintWriter out = response.getWriter();\n+    out = response.getWriter();\n+    System.out.println(\"in cdttxservlet doGet method\");\n+\n+    String nsParam = request.getParameter(\"namespaces\");\n+    if (nsParam == null) {\n+      return;\n+    }\n+    String[] namespace = nsParam.split(\",\");\n+\n+    String domain1NsParam = namespace[0];\n+    String domain2NsParam = namespace[1];\n+    System.out.println(\"in cdttxservlet doGet method - domain1NsParam = \" + domain1NsParam);\n+    System.out.println(\"in cdttxservlet doGet method - domain2NsParam = \" + domain2NsParam);\n+\n+    String domain2Url = \"t3://domain2-managed-server1.\" + domain2NsParam + \",\"\n+        + \"domain2-managed-server2.\" + domain2NsParam + \":8001\";\n+    String tableName = \"cdt_table\";\n+    java.sql.Connection conn;\n+    Destination d;\n+    Context ctx;\n+    JMSContext context;\n+\n+    try {\n+      DateFormat dateFormat = new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\");\n+      java.util.Date date = new java.util.Date();\n+      System.out.println(\"Today Time [\" + dateFormat.format(date) + \"]\");\n+      out.println(\"Today Time [\" + dateFormat.format(date) + \"]\");\n+      out.println(\"\");\n+\n+      Hashtable h1 = new Hashtable();\n+      h1.put(Context.INITIAL_CONTEXT_FACTORY,\n+          \"weblogic.jndi.WLInitialContextFactory\");\n+      String providerUrl = \"t3://domain1-managed-server1.\" + domain1NsParam + \",\"\n+          + \"domain1-managed-server2.\" + domain1NsParam + \":8001\";\n+      System.out.println(\"BR: providerUrl = \" + providerUrl);\n+      h1.put(Context.PROVIDER_URL, providerUrl);\n+\n+      //Get the context from domain1. This is where JMS Queue is configured\n+      ctx = new InitialContext(h1);\n+      System.out.println(\"Got Local InitialContext [\" + ctx + \"]\");\n+      out.println(\"Got Local InitialContext [\" + ctx + \"]\");\n+\n+      ConnectionFactory qcf = (ConnectionFactory) ctx.lookup(\"weblogic.jms.XAConnectionFactory\");\n+      d = (Destination) ctx.lookup(\"jms/testCdtUniformQueue\");\n+      System.out.println(\"Got Local JMS Destination \" + d);\n+      out.println(\"Got Local JMS Destination \" + d);\n+      context = qcf.createContext();\n+\n+      //Get context from domain2. This is where JDBC DS is configured\n+      out.println(\"Getting Remote Context from \" + domain2Url);\n+      Hashtable h = new Hashtable();\n+      h.put(Context.INITIAL_CONTEXT_FACTORY,\n+          \"weblogic.jndi.WLInitialContextFactory\");\n+      h.put(Context.PROVIDER_URL, domain2Url);\n+\n+      Context ctx2 = new InitialContext(h);\n+      System.out.println(\"Got Remote InitialContext [\" + ctx2 + \"]\");\n+      out.println(\"Got Remote InitialContext [\" + ctx2 + \"]\");\n+\n+      javax.sql.DataSource ds = (javax.sql.DataSource) ctx2.lookup(\"jdbc/TestCdtDataSource\");\n+      System.out.println(\"Got ds from context - \" + ds);\n+      out.println(\"Got ds from context - \" + ds);\n+      conn = ds.getConnection();\n+      System.out.println(\"Got connection to datasource - \" + conn);\n+      out.println(\"Got connection to datasource - \" + conn);\n+\n+      //create a table in the DB\n+      createTable(conn, tableName);\n+\n+      try {\n+        tm.begin();\n+        Transaction tx = (Transaction) tm.getTransaction();\n+        Xid xid = tx.getXID();\n+        System.out.println(\"xid=\" + xid);\n+        tx.setProperty(\"TMAfterTLogBeforeCommitExit\", Boolean.TRUE);\n+\n+        ds = (javax.sql.DataSource) ctx2.lookup(\"jdbc/TestCdtDataSource\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d381b06e424c1ad10f27badbb445c710ec62c0bc"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgyOTY4Mg==", "bodyText": "Fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1993#discussion_r505829682", "createdAt": "2020-10-15T20:41:18Z", "author": {"login": "bhavaniravichandran"}, "path": "integration-tests/src/test/resources/apps/cdtservlet/src/application/CdtTxServlet.java", "diffHunk": "@@ -0,0 +1,249 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package application;\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Hashtable;\n+import javax.jms.ConnectionFactory;\n+import javax.jms.Destination;\n+import javax.jms.JMSContext;\n+import javax.naming.Context;\n+import javax.naming.InitialContext;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.transaction.SystemException;\n+import javax.transaction.xa.Xid;\n+\n+import weblogic.transaction.Transaction;\n+import weblogic.transaction.TransactionHelper;\n+import weblogic.transaction.TransactionManager;\n+\n+import static java.lang.Thread.sleep;\n+     \n+public class CdtTxServlet extends HttpServlet {\n+  private static final long serialVersionUID = 1L;\n+  private TransactionManager tm = (TransactionManager)\n+      TransactionHelper.getTransactionHelper().getTransactionManager();\n+  PrintWriter out = null;\n+\n+  /**\n+   * Handles the HTTP <code>GET</code> method.\n+   * Servlet send a message to a local queue and a remote (different domain) DB in distributed tx\n+   *\n+   * @param request  servlet request\n+   * @param response servlet response\n+   * @throws ServletException if a servlet-specific error occurs\n+   * @throws IOException      if an I/O error occurs\n+   */\n+  protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n+    //PrintWriter out = response.getWriter();\n+    out = response.getWriter();\n+    System.out.println(\"in cdttxservlet doGet method\");\n+\n+    String nsParam = request.getParameter(\"namespaces\");\n+    if (nsParam == null) {\n+      return;\n+    }\n+    String[] namespace = nsParam.split(\",\");\n+\n+    String domain1NsParam = namespace[0];\n+    String domain2NsParam = namespace[1];\n+    System.out.println(\"in cdttxservlet doGet method - domain1NsParam = \" + domain1NsParam);\n+    System.out.println(\"in cdttxservlet doGet method - domain2NsParam = \" + domain2NsParam);\n+\n+    String domain2Url = \"t3://domain2-managed-server1.\" + domain2NsParam + \",\"\n+        + \"domain2-managed-server2.\" + domain2NsParam + \":8001\";\n+    String tableName = \"cdt_table\";\n+    java.sql.Connection conn;\n+    Destination d;\n+    Context ctx;\n+    JMSContext context;\n+\n+    try {\n+      DateFormat dateFormat = new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\");\n+      java.util.Date date = new java.util.Date();\n+      System.out.println(\"Today Time [\" + dateFormat.format(date) + \"]\");\n+      out.println(\"Today Time [\" + dateFormat.format(date) + \"]\");\n+      out.println(\"\");\n+\n+      Hashtable h1 = new Hashtable();\n+      h1.put(Context.INITIAL_CONTEXT_FACTORY,\n+          \"weblogic.jndi.WLInitialContextFactory\");\n+      String providerUrl = \"t3://domain1-managed-server1.\" + domain1NsParam + \",\"\n+          + \"domain1-managed-server2.\" + domain1NsParam + \":8001\";\n+      System.out.println(\"BR: providerUrl = \" + providerUrl);\n+      h1.put(Context.PROVIDER_URL, providerUrl);\n+\n+      //Get the context from domain1. This is where JMS Queue is configured\n+      ctx = new InitialContext(h1);\n+      System.out.println(\"Got Local InitialContext [\" + ctx + \"]\");\n+      out.println(\"Got Local InitialContext [\" + ctx + \"]\");\n+\n+      ConnectionFactory qcf = (ConnectionFactory) ctx.lookup(\"weblogic.jms.XAConnectionFactory\");\n+      d = (Destination) ctx.lookup(\"jms/testCdtUniformQueue\");\n+      System.out.println(\"Got Local JMS Destination \" + d);\n+      out.println(\"Got Local JMS Destination \" + d);\n+      context = qcf.createContext();\n+\n+      //Get context from domain2. This is where JDBC DS is configured\n+      out.println(\"Getting Remote Context from \" + domain2Url);\n+      Hashtable h = new Hashtable();\n+      h.put(Context.INITIAL_CONTEXT_FACTORY,\n+          \"weblogic.jndi.WLInitialContextFactory\");\n+      h.put(Context.PROVIDER_URL, domain2Url);\n+\n+      Context ctx2 = new InitialContext(h);\n+      System.out.println(\"Got Remote InitialContext [\" + ctx2 + \"]\");\n+      out.println(\"Got Remote InitialContext [\" + ctx2 + \"]\");\n+\n+      javax.sql.DataSource ds = (javax.sql.DataSource) ctx2.lookup(\"jdbc/TestCdtDataSource\");\n+      System.out.println(\"Got ds from context - \" + ds);\n+      out.println(\"Got ds from context - \" + ds);\n+      conn = ds.getConnection();\n+      System.out.println(\"Got connection to datasource - \" + conn);\n+      out.println(\"Got connection to datasource - \" + conn);\n+\n+      //create a table in the DB\n+      createTable(conn, tableName);\n+\n+      try {\n+        tm.begin();\n+        Transaction tx = (Transaction) tm.getTransaction();\n+        Xid xid = tx.getXID();\n+        System.out.println(\"xid=\" + xid);\n+        tx.setProperty(\"TMAfterTLogBeforeCommitExit\", Boolean.TRUE);\n+\n+        ds = (javax.sql.DataSource) ctx2.lookup(\"jdbc/TestCdtDataSource\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY3NDU5NQ=="}, "originalCommit": {"oid": "d381b06e424c1ad10f27badbb445c710ec62c0bc"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2ODc2NjA1OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItCrossDomainTransaction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMTo0OToyMFrOHicsoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNToxNzowNlrOHjEbIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4MzgwOA==", "bodyText": "Modify the description - Check cross domain transaction recovery works", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1993#discussion_r505883808", "createdAt": "2020-10-15T21:49:20Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItCrossDomainTransaction.java", "diffHunk": "@@ -246,6 +303,41 @@ public void testCrossDomainTransaction() {\n \n   }\n \n+  /*\n+   * This test verifies cross domain transaction is successful and able to re-establish connection when\n+   * one domain is shutdown. domain in image using wdt is used to create 2 domains in different namespaces.\n+   * A servlet is deployed to the admin server of domain1. This servlet starts a transaction with\n+   * TMAfterTLogBeforeCommitExit transaction property set. Sends a message to a JMS queue and also inserts\n+   * data into oracleDB table. The coordinator (server in domain2) should exit before commit and the domain1\n+   * admin server should be able to establish connection with domain2 and the transaction should commit.\n+   *\n+   */\n+  @Test\n+  @DisplayName(\"Check cross domain transaction works\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "888672d4b995449206988a69f058861768a17d08"}, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUzNDY4OA==", "bodyText": "Done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1993#discussion_r506534688", "createdAt": "2020-10-16T15:17:06Z", "author": {"login": "bhavaniravichandran"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItCrossDomainTransaction.java", "diffHunk": "@@ -246,6 +303,41 @@ public void testCrossDomainTransaction() {\n \n   }\n \n+  /*\n+   * This test verifies cross domain transaction is successful and able to re-establish connection when\n+   * one domain is shutdown. domain in image using wdt is used to create 2 domains in different namespaces.\n+   * A servlet is deployed to the admin server of domain1. This servlet starts a transaction with\n+   * TMAfterTLogBeforeCommitExit transaction property set. Sends a message to a JMS queue and also inserts\n+   * data into oracleDB table. The coordinator (server in domain2) should exit before commit and the domain1\n+   * admin server should be able to establish connection with domain2 and the transaction should commit.\n+   *\n+   */\n+  @Test\n+  @DisplayName(\"Check cross domain transaction works\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4MzgwOA=="}, "originalCommit": {"oid": "888672d4b995449206988a69f058861768a17d08"}, "originalPosition": 222}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2ODc4MDE5OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItCrossDomainTransaction.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMTo1Mjo0MlrOHic1fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNToxNzoxNlrOHjEbig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4NjA3Nw==", "bodyText": "Here the coordinator server on domain2 is re-started to recover the transaction. Am I right ?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1993#discussion_r505886077", "createdAt": "2020-10-15T21:52:42Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItCrossDomainTransaction.java", "diffHunk": "@@ -246,6 +303,41 @@ public void testCrossDomainTransaction() {\n \n   }\n \n+  /*\n+   * This test verifies cross domain transaction is successful and able to re-establish connection when\n+   * one domain is shutdown. domain in image using wdt is used to create 2 domains in different namespaces.\n+   * A servlet is deployed to the admin server of domain1. This servlet starts a transaction with\n+   * TMAfterTLogBeforeCommitExit transaction property set. Sends a message to a JMS queue and also inserts\n+   * data into oracleDB table. The coordinator (server in domain2) should exit before commit and the domain1\n+   * admin server should be able to establish connection with domain2 and the transaction should commit.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "888672d4b995449206988a69f058861768a17d08"}, "originalPosition": 218}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ5NjkyOA==", "bodyText": "Are you asking if I am restarting the server in the test? No. The server is shutdown and restarts - no user intervention necessary.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1993#discussion_r506496928", "createdAt": "2020-10-16T14:40:24Z", "author": {"login": "bhavaniravichandran"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItCrossDomainTransaction.java", "diffHunk": "@@ -246,6 +303,41 @@ public void testCrossDomainTransaction() {\n \n   }\n \n+  /*\n+   * This test verifies cross domain transaction is successful and able to re-establish connection when\n+   * one domain is shutdown. domain in image using wdt is used to create 2 domains in different namespaces.\n+   * A servlet is deployed to the admin server of domain1. This servlet starts a transaction with\n+   * TMAfterTLogBeforeCommitExit transaction property set. Sends a message to a JMS queue and also inserts\n+   * data into oracleDB table. The coordinator (server in domain2) should exit before commit and the domain1\n+   * admin server should be able to establish connection with domain2 and the transaction should commit.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4NjA3Nw=="}, "originalCommit": {"oid": "888672d4b995449206988a69f058861768a17d08"}, "originalPosition": 218}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUzNDc5NA==", "bodyText": "Fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1993#discussion_r506534794", "createdAt": "2020-10-16T15:17:16Z", "author": {"login": "bhavaniravichandran"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItCrossDomainTransaction.java", "diffHunk": "@@ -246,6 +303,41 @@ public void testCrossDomainTransaction() {\n \n   }\n \n+  /*\n+   * This test verifies cross domain transaction is successful and able to re-establish connection when\n+   * one domain is shutdown. domain in image using wdt is used to create 2 domains in different namespaces.\n+   * A servlet is deployed to the admin server of domain1. This servlet starts a transaction with\n+   * TMAfterTLogBeforeCommitExit transaction property set. Sends a message to a JMS queue and also inserts\n+   * data into oracleDB table. The coordinator (server in domain2) should exit before commit and the domain1\n+   * admin server should be able to establish connection with domain2 and the transaction should commit.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4NjA3Nw=="}, "originalCommit": {"oid": "888672d4b995449206988a69f058861768a17d08"}, "originalPosition": 218}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2ODc4MzY3OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItCrossDomainTransaction.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMTo1NDowNlrOHic3mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNToxNzoyOFrOHjEcLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4NjYxOQ==", "bodyText": "domain in image using wdt is used -> Domain In Image Model with WDT is used to create", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1993#discussion_r505886619", "createdAt": "2020-10-15T21:54:06Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItCrossDomainTransaction.java", "diffHunk": "@@ -246,6 +303,41 @@ public void testCrossDomainTransaction() {\n \n   }\n \n+  /*\n+   * This test verifies cross domain transaction is successful and able to re-establish connection when\n+   * one domain is shutdown. domain in image using wdt is used to create 2 domains in different namespaces.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "888672d4b995449206988a69f058861768a17d08"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ5Njg3Mg==", "bodyText": "No, it is domain in image with wdt.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1993#discussion_r506496872", "createdAt": "2020-10-16T14:40:19Z", "author": {"login": "bhavaniravichandran"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItCrossDomainTransaction.java", "diffHunk": "@@ -246,6 +303,41 @@ public void testCrossDomainTransaction() {\n \n   }\n \n+  /*\n+   * This test verifies cross domain transaction is successful and able to re-establish connection when\n+   * one domain is shutdown. domain in image using wdt is used to create 2 domains in different namespaces.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4NjYxOQ=="}, "originalCommit": {"oid": "888672d4b995449206988a69f058861768a17d08"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUwODc2OQ==", "bodyText": "Just change the sentence which starts with a lower case letter.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1993#discussion_r506508769", "createdAt": "2020-10-16T14:53:18Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItCrossDomainTransaction.java", "diffHunk": "@@ -246,6 +303,41 @@ public void testCrossDomainTransaction() {\n \n   }\n \n+  /*\n+   * This test verifies cross domain transaction is successful and able to re-establish connection when\n+   * one domain is shutdown. domain in image using wdt is used to create 2 domains in different namespaces.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4NjYxOQ=="}, "originalCommit": {"oid": "888672d4b995449206988a69f058861768a17d08"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUzNDk1OA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1993#discussion_r506534958", "createdAt": "2020-10-16T15:17:28Z", "author": {"login": "bhavaniravichandran"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItCrossDomainTransaction.java", "diffHunk": "@@ -246,6 +303,41 @@ public void testCrossDomainTransaction() {\n \n   }\n \n+  /*\n+   * This test verifies cross domain transaction is successful and able to re-establish connection when\n+   * one domain is shutdown. domain in image using wdt is used to create 2 domains in different namespaces.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4NjYxOQ=="}, "originalCommit": {"oid": "888672d4b995449206988a69f058861768a17d08"}, "originalPosition": 214}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2ODc5MzI5OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIstioCrossDomainTransaction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMTo1Nzo0OFrOHic9aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMTo1Nzo0OFrOHic9aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4ODEwNw==", "bodyText": "Modify the description --> Check cross domain transaction recovery with istio works", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1993#discussion_r505888107", "createdAt": "2020-10-15T21:57:48Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIstioCrossDomainTransaction.java", "diffHunk": "@@ -290,6 +346,38 @@ public void testIstioCrossDomainTransaction() {\n \n   }\n \n+  /*\n+   * This test verifies cross domain transaction with Istio is successful and able to re-establish connection when\n+   * one domain is shutdown. domain in image using wdt is used to create 2 domains in different namespaces.\n+   * A servlet is deployed to the admin server of domain1. This servlet starts a transaction with\n+   * TMAfterTLogBeforeCommitExit transaction property set. Sends a message to a JMS queue and also inserts\n+   * data into oracleDB table. The coordinator (server in domain2) should exit before commit and the domain1\n+   * admin server should be able to establish connection with domain2 and the transaction should commit.\n+   */\n+\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"Check cross domain transaction works\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "888672d4b995449206988a69f058861768a17d08"}, "originalPosition": 234}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2ODc5NjA3OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMTo1OTowMFrOHic_MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNToxNzozNFrOHjEccA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4ODU2MA==", "bodyText": "remove commented code", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1993#discussion_r505888560", "createdAt": "2020-10-15T21:59:00Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "diffHunk": "@@ -1740,21 +1740,21 @@ public static String createMiiImageAndVerify(String miiImageNameBase,\n    * is needed to be updated with a property that has been created by the framework, it is copied\n    * onto RESULT_ROOT and updated. Hence the altModelDir. Call this method to create a domain home in image.\n    * @param imageNameBase - base image name used in local or to construct image name in repository\n-   * @param wdtModelFile - model file used to build the image\n-   * @param appName - application to be added to the image\n+   * @param wdtModelList - model file used to build the image\n+   * @param appSrcDirList - application to be added to the image\n    * @param modelPropFile - property file to be used with the model file above\n    * @param altModelDir - directory where the property file is found if not in the default MODEL_DIR\n    * @return image name with tag\n    */\n   public static String createImageAndVerify(String imageNameBase,\n-                                            String wdtModelFile,\n-                                            String appName,\n+                                            List<String> wdtModelList,\n+                                            List<String> appSrcDirList,\n                                             String modelPropFile,\n                                             String altModelDir,\n                                             String domainHome) {\n \n-    final List<String> wdtModelList = Collections.singletonList(MODEL_DIR + \"/\" + wdtModelFile);\n-    final List<String> appSrcDirList = Collections.singletonList(appName);\n+    //final List<String> wdtModelList = Collections.singletonList(MODEL_DIR + \"/\" + wdtModelFile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "888672d4b995449206988a69f058861768a17d08"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUzNTAyNA==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1993#discussion_r506535024", "createdAt": "2020-10-16T15:17:34Z", "author": {"login": "bhavaniravichandran"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "diffHunk": "@@ -1740,21 +1740,21 @@ public static String createMiiImageAndVerify(String miiImageNameBase,\n    * is needed to be updated with a property that has been created by the framework, it is copied\n    * onto RESULT_ROOT and updated. Hence the altModelDir. Call this method to create a domain home in image.\n    * @param imageNameBase - base image name used in local or to construct image name in repository\n-   * @param wdtModelFile - model file used to build the image\n-   * @param appName - application to be added to the image\n+   * @param wdtModelList - model file used to build the image\n+   * @param appSrcDirList - application to be added to the image\n    * @param modelPropFile - property file to be used with the model file above\n    * @param altModelDir - directory where the property file is found if not in the default MODEL_DIR\n    * @return image name with tag\n    */\n   public static String createImageAndVerify(String imageNameBase,\n-                                            String wdtModelFile,\n-                                            String appName,\n+                                            List<String> wdtModelList,\n+                                            List<String> appSrcDirList,\n                                             String modelPropFile,\n                                             String altModelDir,\n                                             String domainHome) {\n \n-    final List<String> wdtModelList = Collections.singletonList(MODEL_DIR + \"/\" + wdtModelFile);\n-    final List<String> appSrcDirList = Collections.singletonList(appName);\n+    //final List<String> wdtModelList = Collections.singletonList(MODEL_DIR + \"/\" + wdtModelFile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4ODU2MA=="}, "originalCommit": {"oid": "888672d4b995449206988a69f058861768a17d08"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2ODgyMDQ1OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/resources/wdt-models/model-cdt-jdbc.yaml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMjowODoyNVrOHidNdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNToxNzo0MFrOHjEc1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg5MjIxNA==", "bodyText": "remove commented code", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1993#discussion_r505892214", "createdAt": "2020-10-15T22:08:25Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/resources/wdt-models/model-cdt-jdbc.yaml", "diffHunk": "@@ -0,0 +1,26 @@\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+resources:\n+  JDBCSystemResource:\n+    TestCdtDataSource:\n+      Target: 'cluster-1'\n+      JdbcResource:\n+        JDBCConnectionPoolParams:\n+          InitialCapacity: 0\n+          MinCapacity: 0\n+          MaxCapacity: 15\n+          TestTableName: SQL SELECT 1\n+        JDBCDataSourceParams:\n+          GlobalTransactionsProtocol: TwoPhaseCommit\n+          #GlobalTransactionsProtocol: LoggingLastResource\n+          RowPrefetchSize: 200\n+          JNDIName: jdbc/TestCdtDataSource\n+        JDBCDriverParams:\n+          URL: 'jdbc:oracle:thin:@//@@PROP:K8S_NODEPORT_HOST@@:@@PROP:DBPORT@@/devpdb.k8s'\n+          PasswordEncrypted: 'Oradoc_db1'\n+          #DriverName: com.mysql.cj.jdbc.MysqlXADataSource", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "888672d4b995449206988a69f058861768a17d08"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUzNTEyNA==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1993#discussion_r506535124", "createdAt": "2020-10-16T15:17:40Z", "author": {"login": "bhavaniravichandran"}, "path": "integration-tests/src/test/resources/wdt-models/model-cdt-jdbc.yaml", "diffHunk": "@@ -0,0 +1,26 @@\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+resources:\n+  JDBCSystemResource:\n+    TestCdtDataSource:\n+      Target: 'cluster-1'\n+      JdbcResource:\n+        JDBCConnectionPoolParams:\n+          InitialCapacity: 0\n+          MinCapacity: 0\n+          MaxCapacity: 15\n+          TestTableName: SQL SELECT 1\n+        JDBCDataSourceParams:\n+          GlobalTransactionsProtocol: TwoPhaseCommit\n+          #GlobalTransactionsProtocol: LoggingLastResource\n+          RowPrefetchSize: 200\n+          JNDIName: jdbc/TestCdtDataSource\n+        JDBCDriverParams:\n+          URL: 'jdbc:oracle:thin:@//@@PROP:K8S_NODEPORT_HOST@@:@@PROP:DBPORT@@/devpdb.k8s'\n+          PasswordEncrypted: 'Oradoc_db1'\n+          #DriverName: com.mysql.cj.jdbc.MysqlXADataSource", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg5MjIxNA=="}, "originalCommit": {"oid": "888672d4b995449206988a69f058861768a17d08"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2ODgzMjQxOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/resources/apps/cdtservlet/src/application/CdtTxServlet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMjoxMzowN1rOHidUeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNToxNzo1NVrOHjEd1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg5NDAwOQ==", "bodyText": "Check the message  body , to see if the body contains the same message string.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1993#discussion_r505894009", "createdAt": "2020-10-15T22:13:07Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/resources/apps/cdtservlet/src/application/CdtTxServlet.java", "diffHunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package application;\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Hashtable;\n+import javax.jms.ConnectionFactory;\n+import javax.jms.Destination;\n+import javax.jms.JMSContext;\n+import javax.naming.Context;\n+import javax.naming.InitialContext;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.transaction.SystemException;\n+import javax.transaction.xa.Xid;\n+\n+import weblogic.transaction.Transaction;\n+import weblogic.transaction.TransactionHelper;\n+import weblogic.transaction.TransactionManager;\n+\n+import static java.lang.Thread.sleep;\n+     \n+public class CdtTxServlet extends HttpServlet {\n+  private static final long serialVersionUID = 1L;\n+  private TransactionManager tm = (TransactionManager)\n+      TransactionHelper.getTransactionHelper().getTransactionManager();\n+  PrintWriter out = null;\n+\n+  /**\n+   * Handles the HTTP <code>GET</code> method.\n+   * Servlet send a message to a local queue and a remote (different domain) DB in distributed tx\n+   *\n+   * @param request  servlet request\n+   * @param response servlet response\n+   * @throws ServletException if a servlet-specific error occurs\n+   * @throws IOException      if an I/O error occurs\n+   */\n+  protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n+    //PrintWriter out = response.getWriter();\n+    out = response.getWriter();\n+    System.out.println(\"in cdttxservlet doGet method\");\n+\n+    String nsParam = request.getParameter(\"namespaces\");\n+    if (nsParam == null) {\n+      return;\n+    }\n+    String[] namespace = nsParam.split(\",\");\n+\n+    String domain1NsParam = namespace[0];\n+    String domain2NsParam = namespace[1];\n+    System.out.println(\"in cdttxservlet doGet method - domain1NsParam = \" + domain1NsParam);\n+    System.out.println(\"in cdttxservlet doGet method - domain2NsParam = \" + domain2NsParam);\n+\n+    String domain2Url = \"t3://domain2-managed-server1.\" + domain2NsParam + \",\"\n+        + \"domain2-managed-server2.\" + domain2NsParam + \":8001\";\n+    String tableName = \"cdt_table\";\n+    java.sql.Connection conn;\n+    Destination d;\n+    Context ctx;\n+    JMSContext context;\n+\n+    try {\n+      DateFormat dateFormat = new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\");\n+      java.util.Date date = new java.util.Date();\n+      System.out.println(\"Today Time [\" + dateFormat.format(date) + \"]\");\n+      out.println(\"Today Time [\" + dateFormat.format(date) + \"]\");\n+      out.println(\"\");\n+\n+      Hashtable h1 = new Hashtable();\n+      h1.put(Context.INITIAL_CONTEXT_FACTORY,\n+          \"weblogic.jndi.WLInitialContextFactory\");\n+      String providerUrl = \"t3://domain1-managed-server1.\" + domain1NsParam + \",\"\n+          + \"domain1-managed-server2.\" + domain1NsParam + \":8001\";\n+      System.out.println(\"BR: providerUrl = \" + providerUrl);\n+      h1.put(Context.PROVIDER_URL, providerUrl);\n+\n+      //Get the context from domain1. This is where JMS Queue is configured\n+      ctx = new InitialContext(h1);\n+      System.out.println(\"Got Local InitialContext [\" + ctx + \"]\");\n+      out.println(\"Got Local InitialContext [\" + ctx + \"]\");\n+\n+      ConnectionFactory qcf = (ConnectionFactory) ctx.lookup(\"weblogic.jms.XAConnectionFactory\");\n+      d = (Destination) ctx.lookup(\"jms/testCdtUniformQueue\");\n+      System.out.println(\"Got Local JMS Destination \" + d);\n+      out.println(\"Got Local JMS Destination \" + d);\n+      context = qcf.createContext();\n+\n+      //Get context from domain2. This is where JDBC DS is configured\n+      out.println(\"Getting Remote Context from \" + domain2Url);\n+      Hashtable h = new Hashtable();\n+      h.put(Context.INITIAL_CONTEXT_FACTORY,\n+          \"weblogic.jndi.WLInitialContextFactory\");\n+      h.put(Context.PROVIDER_URL, domain2Url);\n+\n+      Context ctx2 = new InitialContext(h);\n+      System.out.println(\"Got Remote InitialContext [\" + ctx2 + \"]\");\n+      out.println(\"Got Remote InitialContext [\" + ctx2 + \"]\");\n+\n+      javax.sql.DataSource ds = (javax.sql.DataSource) ctx2.lookup(\"jdbc/TestCdtDataSource\");\n+      System.out.println(\"Got ds from context - \" + ds);\n+      out.println(\"Got ds from context - \" + ds);\n+      conn = ds.getConnection();\n+      System.out.println(\"Got connection to datasource - \" + conn);\n+      out.println(\"Got connection to datasource - \" + conn);\n+\n+      //create a table in the DB\n+      createTable(conn, tableName);\n+\n+      try {\n+        tm.begin();\n+        Transaction tx = (Transaction) tm.getTransaction();\n+        Xid xid = tx.getXID();\n+        System.out.println(\"xid=\" + xid);\n+        tx.setProperty(\"TMAfterTLogBeforeCommitExit\", Boolean.TRUE);\n+        \n+        Connection conn1 = ds.getConnection();\n+        System.out.println(\"Got connection to datasource - \" + conn1);\n+        out.println(\"Got connection to datasource - \" + conn1);\n+        insertData(conn1, tableName);\n+        System.out.println(\"CdTXServlet: Inserted data\");\n+        out.println(\"CdTXServlet: Inserted data\");\n+        context.createProducer().send(d, \"(D1) A Transcated JMS Message\");\n+        System.out.println(\"CdTXServlet: sent message to jms queue\");\n+        out.println(\"CdTXServlet: sent message to jms queue\");\n+\n+        System.out.println(\"tx.toString() = \" + tx.toString());\n+        out.println(\"tx.toString() = \" + tx.toString());\n+\n+        tm.commit();\n+      } catch (SystemException se) {\n+        if (!(se.toString().contains(\"weblogic.rjvm.PeerGoneException\"))) {\n+          throw se;\n+        }\n+        System.out.println(\"CdTXServlet: Got PeerGoneException \" + se);\n+        out.println(\"CdTXServlet:Exception got - \" + se.toString());\n+        out.println(\"CdTXServlet: got PeerGoneException as expected\");\n+      }\n+\n+      out.println(\"Message Delivered in Distributed Transcation\");\n+\n+      sleep(30);\n+\n+      String body = context.createConsumer(d).receiveBody(String.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "888672d4b995449206988a69f058861768a17d08"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUzNTM4Mg==", "bodyText": "fixed.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1993#discussion_r506535382", "createdAt": "2020-10-16T15:17:55Z", "author": {"login": "bhavaniravichandran"}, "path": "integration-tests/src/test/resources/apps/cdtservlet/src/application/CdtTxServlet.java", "diffHunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package application;\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Hashtable;\n+import javax.jms.ConnectionFactory;\n+import javax.jms.Destination;\n+import javax.jms.JMSContext;\n+import javax.naming.Context;\n+import javax.naming.InitialContext;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.transaction.SystemException;\n+import javax.transaction.xa.Xid;\n+\n+import weblogic.transaction.Transaction;\n+import weblogic.transaction.TransactionHelper;\n+import weblogic.transaction.TransactionManager;\n+\n+import static java.lang.Thread.sleep;\n+     \n+public class CdtTxServlet extends HttpServlet {\n+  private static final long serialVersionUID = 1L;\n+  private TransactionManager tm = (TransactionManager)\n+      TransactionHelper.getTransactionHelper().getTransactionManager();\n+  PrintWriter out = null;\n+\n+  /**\n+   * Handles the HTTP <code>GET</code> method.\n+   * Servlet send a message to a local queue and a remote (different domain) DB in distributed tx\n+   *\n+   * @param request  servlet request\n+   * @param response servlet response\n+   * @throws ServletException if a servlet-specific error occurs\n+   * @throws IOException      if an I/O error occurs\n+   */\n+  protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n+    //PrintWriter out = response.getWriter();\n+    out = response.getWriter();\n+    System.out.println(\"in cdttxservlet doGet method\");\n+\n+    String nsParam = request.getParameter(\"namespaces\");\n+    if (nsParam == null) {\n+      return;\n+    }\n+    String[] namespace = nsParam.split(\",\");\n+\n+    String domain1NsParam = namespace[0];\n+    String domain2NsParam = namespace[1];\n+    System.out.println(\"in cdttxservlet doGet method - domain1NsParam = \" + domain1NsParam);\n+    System.out.println(\"in cdttxservlet doGet method - domain2NsParam = \" + domain2NsParam);\n+\n+    String domain2Url = \"t3://domain2-managed-server1.\" + domain2NsParam + \",\"\n+        + \"domain2-managed-server2.\" + domain2NsParam + \":8001\";\n+    String tableName = \"cdt_table\";\n+    java.sql.Connection conn;\n+    Destination d;\n+    Context ctx;\n+    JMSContext context;\n+\n+    try {\n+      DateFormat dateFormat = new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\");\n+      java.util.Date date = new java.util.Date();\n+      System.out.println(\"Today Time [\" + dateFormat.format(date) + \"]\");\n+      out.println(\"Today Time [\" + dateFormat.format(date) + \"]\");\n+      out.println(\"\");\n+\n+      Hashtable h1 = new Hashtable();\n+      h1.put(Context.INITIAL_CONTEXT_FACTORY,\n+          \"weblogic.jndi.WLInitialContextFactory\");\n+      String providerUrl = \"t3://domain1-managed-server1.\" + domain1NsParam + \",\"\n+          + \"domain1-managed-server2.\" + domain1NsParam + \":8001\";\n+      System.out.println(\"BR: providerUrl = \" + providerUrl);\n+      h1.put(Context.PROVIDER_URL, providerUrl);\n+\n+      //Get the context from domain1. This is where JMS Queue is configured\n+      ctx = new InitialContext(h1);\n+      System.out.println(\"Got Local InitialContext [\" + ctx + \"]\");\n+      out.println(\"Got Local InitialContext [\" + ctx + \"]\");\n+\n+      ConnectionFactory qcf = (ConnectionFactory) ctx.lookup(\"weblogic.jms.XAConnectionFactory\");\n+      d = (Destination) ctx.lookup(\"jms/testCdtUniformQueue\");\n+      System.out.println(\"Got Local JMS Destination \" + d);\n+      out.println(\"Got Local JMS Destination \" + d);\n+      context = qcf.createContext();\n+\n+      //Get context from domain2. This is where JDBC DS is configured\n+      out.println(\"Getting Remote Context from \" + domain2Url);\n+      Hashtable h = new Hashtable();\n+      h.put(Context.INITIAL_CONTEXT_FACTORY,\n+          \"weblogic.jndi.WLInitialContextFactory\");\n+      h.put(Context.PROVIDER_URL, domain2Url);\n+\n+      Context ctx2 = new InitialContext(h);\n+      System.out.println(\"Got Remote InitialContext [\" + ctx2 + \"]\");\n+      out.println(\"Got Remote InitialContext [\" + ctx2 + \"]\");\n+\n+      javax.sql.DataSource ds = (javax.sql.DataSource) ctx2.lookup(\"jdbc/TestCdtDataSource\");\n+      System.out.println(\"Got ds from context - \" + ds);\n+      out.println(\"Got ds from context - \" + ds);\n+      conn = ds.getConnection();\n+      System.out.println(\"Got connection to datasource - \" + conn);\n+      out.println(\"Got connection to datasource - \" + conn);\n+\n+      //create a table in the DB\n+      createTable(conn, tableName);\n+\n+      try {\n+        tm.begin();\n+        Transaction tx = (Transaction) tm.getTransaction();\n+        Xid xid = tx.getXID();\n+        System.out.println(\"xid=\" + xid);\n+        tx.setProperty(\"TMAfterTLogBeforeCommitExit\", Boolean.TRUE);\n+        \n+        Connection conn1 = ds.getConnection();\n+        System.out.println(\"Got connection to datasource - \" + conn1);\n+        out.println(\"Got connection to datasource - \" + conn1);\n+        insertData(conn1, tableName);\n+        System.out.println(\"CdTXServlet: Inserted data\");\n+        out.println(\"CdTXServlet: Inserted data\");\n+        context.createProducer().send(d, \"(D1) A Transcated JMS Message\");\n+        System.out.println(\"CdTXServlet: sent message to jms queue\");\n+        out.println(\"CdTXServlet: sent message to jms queue\");\n+\n+        System.out.println(\"tx.toString() = \" + tx.toString());\n+        out.println(\"tx.toString() = \" + tx.toString());\n+\n+        tm.commit();\n+      } catch (SystemException se) {\n+        if (!(se.toString().contains(\"weblogic.rjvm.PeerGoneException\"))) {\n+          throw se;\n+        }\n+        System.out.println(\"CdTXServlet: Got PeerGoneException \" + se);\n+        out.println(\"CdTXServlet:Exception got - \" + se.toString());\n+        out.println(\"CdTXServlet: got PeerGoneException as expected\");\n+      }\n+\n+      out.println(\"Message Delivered in Distributed Transcation\");\n+\n+      sleep(30);\n+\n+      String body = context.createConsumer(d).receiveBody(String.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg5NDAwOQ=="}, "originalCommit": {"oid": "888672d4b995449206988a69f058861768a17d08"}, "originalPosition": 153}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4069, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}