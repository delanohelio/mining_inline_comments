{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0MjI5NzQ3", "number": 1855, "title": "Changes for OWLS-83431", "bodyText": "Changes for OWLS-83431 - Create Pods one-at-a-time waiting on scheduling", "createdAt": "2020-08-06T19:47:22Z", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1855", "merged": true, "mergeCommit": {"oid": "1b090d6ebc10ce924dcd46fc18b9ef44e646435e"}, "closed": true, "closedAt": "2020-08-12T20:56:23Z", "author": {"login": "ankedia"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7-A3-gH2gAyNDY0MjI5NzQ3OjQ5OTRhMzg3OTgzMTQyYTdmZjI2ODNmYWVlM2QyOGQ5MWNmMjdhNjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-R1jYAFqTQ2NjI3MDk0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4994a387983142a7ff2683faee3d28d91cf27a69", "author": {"user": {"login": "ankedia", "name": "Anil Kedia"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/4994a387983142a7ff2683faee3d28d91cf27a69", "committedDate": "2020-08-05T16:42:41Z", "message": "changes for OWLS-83431"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6dc9cdb338dd591cdae68e8037d67de050b9f6e6", "author": {"user": {"login": "ankedia", "name": "Anil Kedia"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6dc9cdb338dd591cdae68e8037d67de050b9f6e6", "committedDate": "2020-08-10T21:57:33Z", "message": "changes for owls-83431"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "619cc7da95e6fc8894291b212e93c6067d032ad6", "author": {"user": {"login": "ankedia", "name": "Anil Kedia"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/619cc7da95e6fc8894291b212e93c6067d032ad6", "committedDate": "2020-08-11T14:02:01Z", "message": "Chnages to address PR review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b2266f0bb884a19d120fba13b109f7fc97db972", "author": {"user": {"login": "ankedia", "name": "Anil Kedia"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5b2266f0bb884a19d120fba13b109f7fc97db972", "committedDate": "2020-08-11T15:13:55Z", "message": "changes to suppresserror from synchronous call"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "beeb8e00547288ae23f5df1eb41222f080ccdee7", "author": {"user": {"login": "ankedia", "name": "Anil Kedia"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/beeb8e00547288ae23f5df1eb41222f080ccdee7", "committedDate": "2020-08-11T16:08:19Z", "message": "cleanup changes based on PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1MjYzNDYw", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1855#pullrequestreview-465263460", "createdAt": "2020-08-11T17:06:46Z", "commit": {"oid": "beeb8e00547288ae23f5df1eb41222f080ccdee7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1ODgxOTE0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1855#pullrequestreview-465881914", "createdAt": "2020-08-12T12:48:32Z", "commit": {"oid": "beeb8e00547288ae23f5df1eb41222f080ccdee7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjo0ODozMlrOG_fuyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjo0ODozMlrOG_fuyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzMzM1Mw==", "bodyText": "Missing Javadoc @param for clusterName", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1855#discussion_r469233353", "createdAt": "2020-08-12T12:48:32Z", "author": {"login": "rjeberhard"}, "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/PodHelper.java", "diffHunk": "@@ -85,6 +86,59 @@ public static boolean isReady(V1Pod pod) {\n     return ready;\n   }\n \n+  /**\n+   * Get list of scheduled pods.\n+   * @param info Domain presence info\n+   * @return list containing scheduled pods", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "beeb8e00547288ae23f5df1eb41222f080ccdee7"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1ODgzMDE2", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1855#pullrequestreview-465883016", "createdAt": "2020-08-12T12:49:55Z", "commit": {"oid": "beeb8e00547288ae23f5df1eb41222f080ccdee7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjo0OTo1NVrOG_fx8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjo0OTo1NVrOG_fx8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzNDE2MQ==", "bodyText": "I'll verify below, but it's surprising that you have a method to list scheduled pods. I would think that you would be interested in unscheduled pods.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1855#discussion_r469234161", "createdAt": "2020-08-12T12:49:55Z", "author": {"login": "rjeberhard"}, "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/PodHelper.java", "diffHunk": "@@ -85,6 +86,59 @@ public static boolean isReady(V1Pod pod) {\n     return ready;\n   }\n \n+  /**\n+   * Get list of scheduled pods.\n+   * @param info Domain presence info\n+   * @return list containing scheduled pods\n+   */\n+  public static List<String> getScheduledPods(DomainPresenceInfo info, String clusterName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "beeb8e00547288ae23f5df1eb41222f080ccdee7"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1ODgzOTA3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1855#pullrequestreview-465883907", "createdAt": "2020-08-12T12:51:04Z", "commit": {"oid": "beeb8e00547288ae23f5df1eb41222f080ccdee7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjo1MTowNFrOG_f0wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjo1MTowNFrOG_f0wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzNDg4MA==", "bodyText": "Fix variable name", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1855#discussion_r469234880", "createdAt": "2020-08-12T12:51:04Z", "author": {"login": "rjeberhard"}, "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/PodHelper.java", "diffHunk": "@@ -85,6 +86,59 @@ public static boolean isReady(V1Pod pod) {\n     return ready;\n   }\n \n+  /**\n+   * Get list of scheduled pods.\n+   * @param info Domain presence info\n+   * @return list containing scheduled pods\n+   */\n+  public static List<String> getScheduledPods(DomainPresenceInfo info, String clusterName) {\n+    // These are presently scheduled servers\n+    List<String> scheduledServers = new ArrayList<>();\n+    for (Map.Entry<String, ServerKubernetesObjects> entry : info.getServers().entrySet()) {\n+      V1Pod pod = entry.getValue().getPod().get();\n+      if (pod != null && !PodHelper.isDeleting(pod) && PodHelper.getScheduledStatus(pod)) {\n+        String wlsClusterName = pod.getMetadata().getLabels().get(CLUSTERNAME_LABEL);\n+        if ((wlsClusterName == null) || (wlsClusterName.contains(clusterName))) {\n+          scheduledServers.add(entry.getKey());\n+        }\n+      }\n+    }\n+    return scheduledServers;\n+  }\n+\n+  /**\n+   * Get list of ready pods.\n+   * @param info Domain presence info\n+   * @return list containing ready pods\n+   */\n+  public static List<String> getReadyPods(DomainPresenceInfo info, String clusterName) {\n+    // These are presently Ready servers\n+    List<String> readyServers = new ArrayList<>();\n+    for (Map.Entry<String, ServerKubernetesObjects> entry : info.getServers().entrySet()) {\n+      V1Pod pod = entry.getValue().getPod().get();\n+      if (pod != null && !PodHelper.isDeleting(pod) && PodHelper.getReadyStatus(pod)) {\n+        String wlsClusterName = pod.getMetadata().getLabels().get(CLUSTERNAME_LABEL);\n+        if ((wlsClusterName == null) || (wlsClusterName.contains(clusterName))) {\n+          readyServers.add(entry.getKey());\n+        }\n+      }\n+    }\n+    return readyServers;\n+  }\n+\n+  /**\n+   * get if pod is in scheduled state.\n+   * @param pod pod\n+   * @return true, if pod is scheduled\n+   */\n+  public static boolean getScheduledStatus(V1Pod pod) {\n+    V1PodSpec status = pod.getSpec();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "beeb8e00547288ae23f5df1eb41222f080ccdee7"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1ODg3NjAz", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1855#pullrequestreview-465887603", "createdAt": "2020-08-12T12:55:43Z", "commit": {"oid": "beeb8e00547288ae23f5df1eb41222f080ccdee7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjo1NTo0M1rOG_f_iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjo1NTo0M1rOG_f_iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzNzY0MA==", "bodyText": "What do you think about switching this to test PodHelper.unscheduledPodsExist() rather than comparing the count of scheduled pods to an expected number?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1855#discussion_r469237640", "createdAt": "2020-08-12T12:55:43Z", "author": {"login": "rjeberhard"}, "path": "operator/src/main/java/oracle/kubernetes/operator/steps/ManagedServerUpIteratorStep.java", "diffHunk": "@@ -142,19 +154,53 @@ private boolean isServerInCluster(ServerStartupInfo ssi) {\n \n   static class StartManagedServersStep extends Step {\n     final Collection<StepAndPacket> startDetails;\n+    final Queue<StepAndPacket> startDetailsQueue = new ConcurrentLinkedQueue<>();\n+    final String clusterName;\n+    int numStarted = 0;\n+    int maxConcurrency = 0;\n \n-    StartManagedServersStep(Collection<StepAndPacket> startDetails, Step next) {\n+    StartManagedServersStep(String clusterName, Collection<StepAndPacket> startDetails, Step next) {\n       super(next);\n+      this.clusterName = clusterName;\n       this.startDetails = startDetails;\n+      startDetails.forEach(this::add);\n     }\n \n-    Collection<StepAndPacket> getStartDetails() {\n-      return startDetails;\n+    void add(StepAndPacket serverToStart) {\n+      startDetailsQueue.add(new StepAndPacket(serverToStart.step, serverToStart.packet));\n+      this.maxConcurrency = Optional.ofNullable(\n+              (Integer) serverToStart.packet.get(ProcessingConstants.MAX_CONCURRENCY)).orElse(0);\n     }\n \n     @Override\n     public NextAction apply(Packet packet) {\n-      return doForkJoin(new ManagedServerUpAfterStep(getNext()), packet, startDetails);\n+\n+      if (startDetailsQueue.isEmpty()) {\n+        return doNext(new ManagedServerUpAfterStep(getNext()), packet);\n+      } else if (isServiceOnlyOrShuttingDown()) {\n+        Collection<StepAndPacket> servers = Collections.singletonList(startDetailsQueue.poll());\n+        return doForkJoin(this, packet, servers);\n+      } else if (serverAvailableToStart(packet.getSpi(DomainPresenceInfo.class))) {\n+        this.numStarted++;\n+        return doForkJoin(this, packet, Collections.singletonList(startDetailsQueue.poll()));\n+      } else {\n+        return doDelay(this, packet, 100, TimeUnit.MILLISECONDS);\n+      }\n+    }\n+\n+    private boolean isServiceOnlyOrShuttingDown() {\n+      return Optional.ofNullable(startDetailsQueue.peek().step)\n+              .map(step -> step.getNext() instanceof ServerDownStep).orElse(false);\n+    }\n+\n+    private boolean serverAvailableToStart(DomainPresenceInfo info) {\n+      return ((this.numStarted < PodHelper.getScheduledPods(info, clusterName).size())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "beeb8e00547288ae23f5df1eb41222f080ccdee7"}, "originalPosition": 110}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1ODg3OTUz", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1855#pullrequestreview-465887953", "createdAt": "2020-08-12T12:56:08Z", "commit": {"oid": "beeb8e00547288ae23f5df1eb41222f080ccdee7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjo1NjowOFrOG_gAjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjo1NjowOFrOG_gAjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzNzkwMw==", "bodyText": "What is the concurrency of this code? Will multiple threads ever be running here?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1855#discussion_r469237903", "createdAt": "2020-08-12T12:56:08Z", "author": {"login": "rjeberhard"}, "path": "operator/src/main/java/oracle/kubernetes/operator/steps/ManagedServerUpIteratorStep.java", "diffHunk": "@@ -142,19 +154,53 @@ private boolean isServerInCluster(ServerStartupInfo ssi) {\n \n   static class StartManagedServersStep extends Step {\n     final Collection<StepAndPacket> startDetails;\n+    final Queue<StepAndPacket> startDetailsQueue = new ConcurrentLinkedQueue<>();\n+    final String clusterName;\n+    int numStarted = 0;\n+    int maxConcurrency = 0;\n \n-    StartManagedServersStep(Collection<StepAndPacket> startDetails, Step next) {\n+    StartManagedServersStep(String clusterName, Collection<StepAndPacket> startDetails, Step next) {\n       super(next);\n+      this.clusterName = clusterName;\n       this.startDetails = startDetails;\n+      startDetails.forEach(this::add);\n     }\n \n-    Collection<StepAndPacket> getStartDetails() {\n-      return startDetails;\n+    void add(StepAndPacket serverToStart) {\n+      startDetailsQueue.add(new StepAndPacket(serverToStart.step, serverToStart.packet));\n+      this.maxConcurrency = Optional.ofNullable(\n+              (Integer) serverToStart.packet.get(ProcessingConstants.MAX_CONCURRENCY)).orElse(0);\n     }\n \n     @Override\n     public NextAction apply(Packet packet) {\n-      return doForkJoin(new ManagedServerUpAfterStep(getNext()), packet, startDetails);\n+\n+      if (startDetailsQueue.isEmpty()) {\n+        return doNext(new ManagedServerUpAfterStep(getNext()), packet);\n+      } else if (isServiceOnlyOrShuttingDown()) {\n+        Collection<StepAndPacket> servers = Collections.singletonList(startDetailsQueue.poll());\n+        return doForkJoin(this, packet, servers);\n+      } else if (serverAvailableToStart(packet.getSpi(DomainPresenceInfo.class))) {\n+        this.numStarted++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "beeb8e00547288ae23f5df1eb41222f080ccdee7"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1ODg4NjYy", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1855#pullrequestreview-465888662", "createdAt": "2020-08-12T12:56:59Z", "commit": {"oid": "beeb8e00547288ae23f5df1eb41222f080ccdee7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjo1Njo1OVrOG_gCkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjo1Njo1OVrOG_gCkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzODQxOA==", "bodyText": "Similarly, it seems like you ought to be checking for the number of unready pods.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1855#discussion_r469238418", "createdAt": "2020-08-12T12:56:59Z", "author": {"login": "rjeberhard"}, "path": "operator/src/main/java/oracle/kubernetes/operator/steps/ManagedServerUpIteratorStep.java", "diffHunk": "@@ -142,19 +154,53 @@ private boolean isServerInCluster(ServerStartupInfo ssi) {\n \n   static class StartManagedServersStep extends Step {\n     final Collection<StepAndPacket> startDetails;\n+    final Queue<StepAndPacket> startDetailsQueue = new ConcurrentLinkedQueue<>();\n+    final String clusterName;\n+    int numStarted = 0;\n+    int maxConcurrency = 0;\n \n-    StartManagedServersStep(Collection<StepAndPacket> startDetails, Step next) {\n+    StartManagedServersStep(String clusterName, Collection<StepAndPacket> startDetails, Step next) {\n       super(next);\n+      this.clusterName = clusterName;\n       this.startDetails = startDetails;\n+      startDetails.forEach(this::add);\n     }\n \n-    Collection<StepAndPacket> getStartDetails() {\n-      return startDetails;\n+    void add(StepAndPacket serverToStart) {\n+      startDetailsQueue.add(new StepAndPacket(serverToStart.step, serverToStart.packet));\n+      this.maxConcurrency = Optional.ofNullable(\n+              (Integer) serverToStart.packet.get(ProcessingConstants.MAX_CONCURRENCY)).orElse(0);\n     }\n \n     @Override\n     public NextAction apply(Packet packet) {\n-      return doForkJoin(new ManagedServerUpAfterStep(getNext()), packet, startDetails);\n+\n+      if (startDetailsQueue.isEmpty()) {\n+        return doNext(new ManagedServerUpAfterStep(getNext()), packet);\n+      } else if (isServiceOnlyOrShuttingDown()) {\n+        Collection<StepAndPacket> servers = Collections.singletonList(startDetailsQueue.poll());\n+        return doForkJoin(this, packet, servers);\n+      } else if (serverAvailableToStart(packet.getSpi(DomainPresenceInfo.class))) {\n+        this.numStarted++;\n+        return doForkJoin(this, packet, Collections.singletonList(startDetailsQueue.poll()));\n+      } else {\n+        return doDelay(this, packet, 100, TimeUnit.MILLISECONDS);\n+      }\n+    }\n+\n+    private boolean isServiceOnlyOrShuttingDown() {\n+      return Optional.ofNullable(startDetailsQueue.peek().step)\n+              .map(step -> step.getNext() instanceof ServerDownStep).orElse(false);\n+    }\n+\n+    private boolean serverAvailableToStart(DomainPresenceInfo info) {\n+      return ((this.numStarted < PodHelper.getScheduledPods(info, clusterName).size())\n+              && (canStartConcurrently(PodHelper.getReadyPods(info, clusterName).size())));\n+    }\n+\n+    private boolean canStartConcurrently(int numReady) {\n+      return ((this.maxConcurrency > 0) && (this.numStarted < (this.maxConcurrency + numReady - 1)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "beeb8e00547288ae23f5df1eb41222f080ccdee7"}, "originalPosition": 115}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1ODg5NzA4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1855#pullrequestreview-465889708", "createdAt": "2020-08-12T12:58:14Z", "commit": {"oid": "beeb8e00547288ae23f5df1eb41222f080ccdee7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00edd0a490e6cdc7fe898f9fcb56c9f190ff45d5", "author": {"user": {"login": "ankedia", "name": "Anil Kedia"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/00edd0a490e6cdc7fe898f9fcb56c9f190ff45d5", "committedDate": "2020-08-12T13:14:59Z", "message": "changes to fix javadoc and variable name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4d2039135c2a9418483297e3b473479838ee663", "author": {"user": {"login": "ankedia", "name": "Anil Kedia"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f4d2039135c2a9418483297e3b473479838ee663", "committedDate": "2020-08-12T15:45:19Z", "message": "changes for latest review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MjcwOTQx", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1855#pullrequestreview-466270941", "createdAt": "2020-08-12T20:56:16Z", "commit": {"oid": "f4d2039135c2a9418483297e3b473479838ee663"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4362, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}