{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyNjYwNjYz", "number": 1616, "reviewThreads": {"totalCount": 53, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxOTo1OToyN1rOD5jrBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo0OTo0NlrOD8JuVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjc5ODc4OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxOTo1OToyN1rOGQ5YAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMDo0MTo1NVrOGRqXaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM3MDQzNA==", "bodyText": "i'm not completely sure about this -- do we not trust WebLogic to start the app on all the managed servers? could we not just hit the WebLogic Server REST API to check the application status?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420370434", "createdAt": "2020-05-05T19:59:27Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -324,7 +342,19 @@ public void testCreateMiiDomain() {\n           managedServerPrefix + i, domainNamespace);\n       checkServiceCreated(managedServerPrefix + i, domainNamespace);\n     }\n-\n+    \n+    // check and wait for the app to be accessible in all server pods\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkAppRunning(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91718268821b8ff6526d906096e25bbec183499e"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxMzI2Mw==", "bodyText": "We don't want to rely on a load balancer here, and the managed servers don't have a NodePort.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r421013263", "createdAt": "2020-05-06T18:45:22Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -324,7 +342,19 @@ public void testCreateMiiDomain() {\n           managedServerPrefix + i, domainNamespace);\n       checkServiceCreated(managedServerPrefix + i, domainNamespace);\n     }\n-\n+    \n+    // check and wait for the app to be accessible in all server pods\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkAppRunning(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM3MDQzNA=="}, "originalCommit": {"oid": "91718268821b8ff6526d906096e25bbec183499e"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTExMzMyMQ==", "bodyText": "I'm confused now too.  We discussed this in the test meeting today.  I thought I heard something different.  That is, the use case is not a redeploy, but instead just a cluster rolling.  Since the application is available on all cluster members, then the application would be continually available through a load balancer.  This isn't the same thing as the \"continuous availability\" option of course, but the application should be available through the load balancer all of the time because there will always be at least one cluster member ready.  This check looks like something different.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r421113321", "createdAt": "2020-05-06T21:50:14Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -324,7 +342,19 @@ public void testCreateMiiDomain() {\n           managedServerPrefix + i, domainNamespace);\n       checkServiceCreated(managedServerPrefix + i, domainNamespace);\n     }\n-\n+    \n+    // check and wait for the app to be accessible in all server pods\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkAppRunning(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM3MDQzNA=="}, "originalCommit": {"oid": "91718268821b8ff6526d906096e25bbec183499e"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE3MTkyNA==", "bodyText": "This test class contains 5 test cases in this PR. We are at the end of the first end-to-end test case testCreateMiiDomain, which does not do any patching/rolling-restart. The checkAppRunning method here just checks and waits util the application is accessible on all server pods as a sanity check of a stable domain/cluster. It fails if the app is not available on all servers within the given period of time. The check is performed by running curl command inside each pod.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r421171924", "createdAt": "2020-05-07T00:37:52Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -324,7 +342,19 @@ public void testCreateMiiDomain() {\n           managedServerPrefix + i, domainNamespace);\n       checkServiceCreated(managedServerPrefix + i, domainNamespace);\n     }\n-\n+    \n+    // check and wait for the app to be accessible in all server pods\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkAppRunning(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM3MDQzNA=="}, "originalCommit": {"oid": "91718268821b8ff6526d906096e25bbec183499e"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE3MzA5OQ==", "bodyText": "The #4 and #5 test cases added in this PR, namely testPatchAppV2 and testAddSecondApp, are the use cases where we patch the domain resource with a new image that contains a newer version of an existing app, and adds a new app,  respectively. Only in testPatchAppV2, we check the application \"continuous\" availability. We achieve this by starting a thread to collect the availability data of the app (V1 or V2)while the main thread does the patching operation and regular verification. At the end when the V2 app becomes available on all servers, we use the collected data to determine if there are app outage during the period of time when the patching and rolling-restart are in progress.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r421173099", "createdAt": "2020-05-07T00:41:55Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -324,7 +342,19 @@ public void testCreateMiiDomain() {\n           managedServerPrefix + i, domainNamespace);\n       checkServiceCreated(managedServerPrefix + i, domainNamespace);\n     }\n-\n+    \n+    // check and wait for the app to be accessible in all server pods\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkAppRunning(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM3MDQzNA=="}, "originalCommit": {"oid": "91718268821b8ff6526d906096e25bbec183499e"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzUzNzc5OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDoyNDo1M1rOGRAS9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxOTowNDo1NVrOGRhVMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4MzgyOQ==", "bodyText": "don't use the term \"continuous availability\" unless that is what you really mean - hint: it is not", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420483829", "createdAt": "2020-05-06T00:24:53Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -504,12 +534,204 @@ public void testCreateMiiDomainSameDomainUidDiffNS() {\n     }\n   }\n \n+  @Test\n+  @Order(4)\n+  @DisplayName(\"Update the sample-app application to version 2\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testPatchAppV2() {\n+    \n+    // app in the new image contains what is in the original app dir sample-app, \n+    // plus the replacements or/and additions in the second app dir sample-app-2.\n+    final String appDir1 = \"sample-app\";\n+    final String appDir2 = \"sample-app-2\";\n+    final String adminServerPodName = domainUid + \"-admin-server\";\n+    final String managedServerPrefix = domainUid + \"-managed-server\";\n+    final int replicaCount = 2;\n+    \n+    // The verification of app's continuous availability during patching is turned off", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89a9123951329addafd819650ad3cd20c511f0fd"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAyNTA3NA==", "bodyText": "My understanding is that the application should stay up when the domain is patched because the restart of the next pod will not begin before the current pod completes its restart. But I guess there is no way we can guarantee continuous availability.\nModified the comment.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r421025074", "createdAt": "2020-05-06T19:04:55Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -504,12 +534,204 @@ public void testCreateMiiDomainSameDomainUidDiffNS() {\n     }\n   }\n \n+  @Test\n+  @Order(4)\n+  @DisplayName(\"Update the sample-app application to version 2\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testPatchAppV2() {\n+    \n+    // app in the new image contains what is in the original app dir sample-app, \n+    // plus the replacements or/and additions in the second app dir sample-app-2.\n+    final String appDir1 = \"sample-app\";\n+    final String appDir2 = \"sample-app-2\";\n+    final String adminServerPodName = domainUid + \"-admin-server\";\n+    final String managedServerPrefix = domainUid + \"-managed-server\";\n+    final int replicaCount = 2;\n+    \n+    // The verification of app's continuous availability during patching is turned off", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4MzgyOQ=="}, "originalCommit": {"oid": "89a9123951329addafd819650ad3cd20c511f0fd"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzUzOTcwOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDoyNTo1OFrOGRAUFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzozNjowM1rOGU8YWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NDExOA==", "bodyText": "i am not sure how i feel about running a background thread in a test, especially one that is going to be run my maven...", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420484118", "createdAt": "2020-05-06T00:25:58Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -504,12 +534,204 @@ public void testCreateMiiDomainSameDomainUidDiffNS() {\n     }\n   }\n \n+  @Test\n+  @Order(4)\n+  @DisplayName(\"Update the sample-app application to version 2\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testPatchAppV2() {\n+    \n+    // app in the new image contains what is in the original app dir sample-app, \n+    // plus the replacements or/and additions in the second app dir sample-app-2.\n+    final String appDir1 = \"sample-app\";\n+    final String appDir2 = \"sample-app-2\";\n+    final String adminServerPodName = domainUid + \"-admin-server\";\n+    final String managedServerPrefix = domainUid + \"-managed-server\";\n+    final int replicaCount = 2;\n+    \n+    // The verification of app's continuous availability during patching is turned off\n+    // because it fails intermittently right now. It can be enabled using the following system property.\n+    // We'll remove the property and enable it all the time once the product problem (tracked\n+    // by owls-81575) is fixed.\n+    final String enableAppAvailbilityCheck = \n+        System.getProperty(\"weblogic.operator.enableAppAvailabilityCheck\", \"false\");\n+    Thread accountingThread = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89a9123951329addafd819650ad3cd20c511f0fd"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxMDI1NQ==", "bodyText": "I need a way to continue collecting data while the main thread does the patching and regular verification. Suggestions are welcome.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r421010255", "createdAt": "2020-05-06T18:40:34Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -504,12 +534,204 @@ public void testCreateMiiDomainSameDomainUidDiffNS() {\n     }\n   }\n \n+  @Test\n+  @Order(4)\n+  @DisplayName(\"Update the sample-app application to version 2\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testPatchAppV2() {\n+    \n+    // app in the new image contains what is in the original app dir sample-app, \n+    // plus the replacements or/and additions in the second app dir sample-app-2.\n+    final String appDir1 = \"sample-app\";\n+    final String appDir2 = \"sample-app-2\";\n+    final String adminServerPodName = domainUid + \"-admin-server\";\n+    final String managedServerPrefix = domainUid + \"-managed-server\";\n+    final int replicaCount = 2;\n+    \n+    // The verification of app's continuous availability during patching is turned off\n+    // because it fails intermittently right now. It can be enabled using the following system property.\n+    // We'll remove the property and enable it all the time once the product problem (tracked\n+    // by owls-81575) is fixed.\n+    final String enableAppAvailbilityCheck = \n+        System.getProperty(\"weblogic.operator.enableAppAvailabilityCheck\", \"false\");\n+    Thread accountingThread = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NDExOA=="}, "originalCommit": {"oid": "89a9123951329addafd819650ad3cd20c511f0fd"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwMDMwMA==", "bodyText": "Normally, threads in a maven build or tests is frowned upon.  But for monitoring external processes, there isn't a better alternative.  With the try/finally, I think this exception should be okay.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r424600300", "createdAt": "2020-05-13T17:13:31Z", "author": {"login": "ddsharpe"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -504,12 +534,204 @@ public void testCreateMiiDomainSameDomainUidDiffNS() {\n     }\n   }\n \n+  @Test\n+  @Order(4)\n+  @DisplayName(\"Update the sample-app application to version 2\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testPatchAppV2() {\n+    \n+    // app in the new image contains what is in the original app dir sample-app, \n+    // plus the replacements or/and additions in the second app dir sample-app-2.\n+    final String appDir1 = \"sample-app\";\n+    final String appDir2 = \"sample-app-2\";\n+    final String adminServerPodName = domainUid + \"-admin-server\";\n+    final String managedServerPrefix = domainUid + \"-managed-server\";\n+    final int replicaCount = 2;\n+    \n+    // The verification of app's continuous availability during patching is turned off\n+    // because it fails intermittently right now. It can be enabled using the following system property.\n+    // We'll remove the property and enable it all the time once the product problem (tracked\n+    // by owls-81575) is fixed.\n+    final String enableAppAvailbilityCheck = \n+        System.getProperty(\"weblogic.operator.enableAppAvailabilityCheck\", \"false\");\n+    Thread accountingThread = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NDExOA=="}, "originalCommit": {"oid": "89a9123951329addafd819650ad3cd20c511f0fd"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxMzk3OA==", "bodyText": "ok i reviewed this with derek and ryan, and i am ok with this", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r424613978", "createdAt": "2020-05-13T17:36:03Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -504,12 +534,204 @@ public void testCreateMiiDomainSameDomainUidDiffNS() {\n     }\n   }\n \n+  @Test\n+  @Order(4)\n+  @DisplayName(\"Update the sample-app application to version 2\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testPatchAppV2() {\n+    \n+    // app in the new image contains what is in the original app dir sample-app, \n+    // plus the replacements or/and additions in the second app dir sample-app-2.\n+    final String appDir1 = \"sample-app\";\n+    final String appDir2 = \"sample-app-2\";\n+    final String adminServerPodName = domainUid + \"-admin-server\";\n+    final String managedServerPrefix = domainUid + \"-managed-server\";\n+    final int replicaCount = 2;\n+    \n+    // The verification of app's continuous availability during patching is turned off\n+    // because it fails intermittently right now. It can be enabled using the following system property.\n+    // We'll remove the property and enable it all the time once the product problem (tracked\n+    // by owls-81575) is fixed.\n+    final String enableAppAvailbilityCheck = \n+        System.getProperty(\"weblogic.operator.enableAppAvailabilityCheck\", \"false\");\n+    Thread accountingThread = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NDExOA=="}, "originalCommit": {"oid": "89a9123951329addafd819650ad3cd20c511f0fd"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU0Mjk5OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDoyODoxMlrOGRAWHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDoyODozOFrOGRAWpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NDYzOA==", "bodyText": "Check that the new app ...", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420484638", "createdAt": "2020-05-06T00:28:12Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -504,12 +534,201 @@ public void testCreateMiiDomainSameDomainUidDiffNS() {\n     }\n   }\n \n+  @Test\n+  @Order(4)\n+  @DisplayName(\"Update the sample-app application to version 2\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testPatchAppV2() {\n+    \n+    // app in the new image contains what is in the original app dir sample-app, \n+    // plus the replacements or/and additions in the second app dir sample-app-2.\n+    final String appDir1 = \"sample-app\";\n+    final String appDir2 = \"sample-app-2\";\n+    final String adminServerPodName = domainUid + \"-admin-server\";\n+    final String managedServerPrefix = domainUid + \"-managed-server\";\n+    final int replicaCount = 2;\n+    \n+    // The verification of app's continuous availability during patching is turned off\n+    // because it fails intermittently right now. It can be enabled using the following system property.\n+    // We'll remove the property and enable it all the time once the product problem (tracked\n+    // by owls-81575) is fixed.\n+    final String enableAppAvailbilityCheck = \n+        System.getProperty(\"weblogic.operator.enableAppAvailabilityCheck\", \"false\");\n+    Thread accountingThread = null;\n+    List<Integer> appAvailability = new ArrayList<Integer>();\n+    \n+    if (enableAppAvailbilityCheck.equalsIgnoreCase(\"true\")) {\n+      // start a new thread to collect the availability data of the app while the\n+      // main thread performs patching operation, and checking of the results.\n+      accountingThread =\n+          new Thread(\n+              () -> {\n+                collectAppAvaiability(\n+                    domainNamespace,\n+                    appAvailability,\n+                    managedServerPrefix,\n+                    replicaCount,\n+                    \"8001\",\n+                    \"sample-war/index.jsp\");\n+              });\n+      accountingThread.start();\n+    }\n+   \n+    try {\n+      logger.info(\"Check and make sure that V1 app is still running\");\n+      for (int i = 1; i <= replicaCount; i++) {\n+        quickCheckAppRunning(\n+            domainNamespace,\n+            managedServerPrefix + i,\n+            \"8001\",\n+            \"sample-war/index.jsp\",\n+            APP_RESPONSE_V1 + i);\n+      }\n+ \n+      logger.info(\"Check and make sure that the version 2 app is NOT running\");\n+      for (int i = 1; i <= replicaCount; i++) {\n+        quickCheckAppNotRunning(\n+            domainNamespace,\n+            managedServerPrefix + i,\n+            \"8001\",\n+            \"sample-war/index.jsp\",\n+            APP_RESPONSE_V2 + i);   \n+      }\n+ \n+      logger.info(\"Create a new image with app V2\");\n+      miiImagePatchAppV2 = updateImageWithAppV2Patch(\n+          String.format(\"%s-%s\", MII_IMAGE_NAME, \"test-patch-app-v2\"),\n+          Arrays.asList(appDir1, appDir2));\n+\n+      // push the image to OCIR to make the test work in multi node cluster\n+      pushImageIfNeeded(miiImagePatchAppV2);\n+\n+      // patch the domain resource with the new image and verify that the domain resource is patched, \n+      // and all server pods are patched as well.\n+      logger.info(\"Patch domain resource with the new image, and verify the results\");\n+      patchAndVerify(\n+          domainUid,\n+          domainNamespace,\n+          adminServerPodName,\n+          managedServerPrefix,\n+          replicaCount,\n+          miiImagePatchAppV2);\n+\n+      logger.info(\"Check and wait for the V2 app to be ready\");\n+      for (int i = 1; i <= replicaCount; i++) {\n+        checkAppRunning(\n+            domainNamespace,\n+            managedServerPrefix + i,\n+            \"8001\",\n+            \"sample-war/index.jsp\",\n+            APP_RESPONSE_V2 + i);\n+      } \n+    } finally {\n+    \n+      if (accountingThread != null) {\n+        try {\n+          accountingThread.join();\n+        } catch (InterruptedException ie) {\n+          // do nothing\n+        }\n+ \n+        // check the app availability data that we have collected, and see if\n+        // the app has been available all the time since the beginning of this test method\n+        logger.info(\"Verify that the app was available in the duration when app was being patched\"); \n+        assertTrue(appAlwaysAvailable(appAvailability),\n+            \"App does not always avaiable when the domain is being patched with a newer version of the app\");\n+      }\n+    }\n+    \n+    logger.info(\"The cluster has been rolling restarted, and the version 2 app has been deployed correctly\");\n+  }\n+\n+  @Test\n+  @Order(5)\n+  @DisplayName(\"Update the domain with another application\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testAddSecondApp() {\n+    \n+    // the existing app is the combination of what are in appDir1 and appDir2 as in test case number 4,\n+    // the second app is in appDir3.\n+    final String appDir1 = \"sample-app\";\n+    final String appDir2 = \"sample-app-2\";\n+    final String appDir3 = \"sample-app-3\";\n+    final String adminServerPodName = domainUid + \"-admin-server\";\n+    final String managedServerPrefix = domainUid + \"-managed-server\";\n+    final int replicaCount = 2;\n+\n+    logger.info(\"Check V2 app is still running after the previous test\");\n+    for (int i = 1; i <= replicaCount; i++) {\n+      quickCheckAppRunning(\n+          domainNamespace,\n+          managedServerPrefix + i,\n+          \"8001\",\n+          \"sample-war/index.jsp\",\n+          APP_RESPONSE_V2 + i);\n+    }\n+\n+    logger.info(\"Check and make sure that the new app is NOT already running\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 277}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NDc3Mw==", "bodyText": "application", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420484773", "createdAt": "2020-05-06T00:28:38Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -504,12 +534,201 @@ public void testCreateMiiDomainSameDomainUidDiffNS() {\n     }\n   }\n \n+  @Test\n+  @Order(4)\n+  @DisplayName(\"Update the sample-app application to version 2\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testPatchAppV2() {\n+    \n+    // app in the new image contains what is in the original app dir sample-app, \n+    // plus the replacements or/and additions in the second app dir sample-app-2.\n+    final String appDir1 = \"sample-app\";\n+    final String appDir2 = \"sample-app-2\";\n+    final String adminServerPodName = domainUid + \"-admin-server\";\n+    final String managedServerPrefix = domainUid + \"-managed-server\";\n+    final int replicaCount = 2;\n+    \n+    // The verification of app's continuous availability during patching is turned off\n+    // because it fails intermittently right now. It can be enabled using the following system property.\n+    // We'll remove the property and enable it all the time once the product problem (tracked\n+    // by owls-81575) is fixed.\n+    final String enableAppAvailbilityCheck = \n+        System.getProperty(\"weblogic.operator.enableAppAvailabilityCheck\", \"false\");\n+    Thread accountingThread = null;\n+    List<Integer> appAvailability = new ArrayList<Integer>();\n+    \n+    if (enableAppAvailbilityCheck.equalsIgnoreCase(\"true\")) {\n+      // start a new thread to collect the availability data of the app while the\n+      // main thread performs patching operation, and checking of the results.\n+      accountingThread =\n+          new Thread(\n+              () -> {\n+                collectAppAvaiability(\n+                    domainNamespace,\n+                    appAvailability,\n+                    managedServerPrefix,\n+                    replicaCount,\n+                    \"8001\",\n+                    \"sample-war/index.jsp\");\n+              });\n+      accountingThread.start();\n+    }\n+   \n+    try {\n+      logger.info(\"Check and make sure that V1 app is still running\");\n+      for (int i = 1; i <= replicaCount; i++) {\n+        quickCheckAppRunning(\n+            domainNamespace,\n+            managedServerPrefix + i,\n+            \"8001\",\n+            \"sample-war/index.jsp\",\n+            APP_RESPONSE_V1 + i);\n+      }\n+ \n+      logger.info(\"Check and make sure that the version 2 app is NOT running\");\n+      for (int i = 1; i <= replicaCount; i++) {\n+        quickCheckAppNotRunning(\n+            domainNamespace,\n+            managedServerPrefix + i,\n+            \"8001\",\n+            \"sample-war/index.jsp\",\n+            APP_RESPONSE_V2 + i);   \n+      }\n+ \n+      logger.info(\"Create a new image with app V2\");\n+      miiImagePatchAppV2 = updateImageWithAppV2Patch(\n+          String.format(\"%s-%s\", MII_IMAGE_NAME, \"test-patch-app-v2\"),\n+          Arrays.asList(appDir1, appDir2));\n+\n+      // push the image to OCIR to make the test work in multi node cluster\n+      pushImageIfNeeded(miiImagePatchAppV2);\n+\n+      // patch the domain resource with the new image and verify that the domain resource is patched, \n+      // and all server pods are patched as well.\n+      logger.info(\"Patch domain resource with the new image, and verify the results\");\n+      patchAndVerify(\n+          domainUid,\n+          domainNamespace,\n+          adminServerPodName,\n+          managedServerPrefix,\n+          replicaCount,\n+          miiImagePatchAppV2);\n+\n+      logger.info(\"Check and wait for the V2 app to be ready\");\n+      for (int i = 1; i <= replicaCount; i++) {\n+        checkAppRunning(\n+            domainNamespace,\n+            managedServerPrefix + i,\n+            \"8001\",\n+            \"sample-war/index.jsp\",\n+            APP_RESPONSE_V2 + i);\n+      } \n+    } finally {\n+    \n+      if (accountingThread != null) {\n+        try {\n+          accountingThread.join();\n+        } catch (InterruptedException ie) {\n+          // do nothing\n+        }\n+ \n+        // check the app availability data that we have collected, and see if\n+        // the app has been available all the time since the beginning of this test method\n+        logger.info(\"Verify that the app was available in the duration when app was being patched\"); \n+        assertTrue(appAlwaysAvailable(appAvailability),\n+            \"App does not always avaiable when the domain is being patched with a newer version of the app\");\n+      }\n+    }\n+    \n+    logger.info(\"The cluster has been rolling restarted, and the version 2 app has been deployed correctly\");\n+  }\n+\n+  @Test\n+  @Order(5)\n+  @DisplayName(\"Update the domain with another application\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testAddSecondApp() {\n+    \n+    // the existing app is the combination of what are in appDir1 and appDir2 as in test case number 4,\n+    // the second app is in appDir3.\n+    final String appDir1 = \"sample-app\";\n+    final String appDir2 = \"sample-app-2\";\n+    final String appDir3 = \"sample-app-3\";\n+    final String adminServerPodName = domainUid + \"-admin-server\";\n+    final String managedServerPrefix = domainUid + \"-managed-server\";\n+    final int replicaCount = 2;\n+\n+    logger.info(\"Check V2 app is still running after the previous test\");\n+    for (int i = 1; i <= replicaCount; i++) {\n+      quickCheckAppRunning(\n+          domainNamespace,\n+          managedServerPrefix + i,\n+          \"8001\",\n+          \"sample-war/index.jsp\",\n+          APP_RESPONSE_V2 + i);\n+    }\n+\n+    logger.info(\"Check and make sure that the new app is NOT already running\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NDYzOA=="}, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 277}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU0MzY4OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDoyODozMlrOGRAWjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODo0OToxMlrOGRgv3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NDc1MQ==", "bodyText": "application", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420484751", "createdAt": "2020-05-06T00:28:32Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -504,12 +534,201 @@ public void testCreateMiiDomainSameDomainUidDiffNS() {\n     }\n   }\n \n+  @Test\n+  @Order(4)\n+  @DisplayName(\"Update the sample-app application to version 2\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testPatchAppV2() {\n+    \n+    // app in the new image contains what is in the original app dir sample-app, \n+    // plus the replacements or/and additions in the second app dir sample-app-2.\n+    final String appDir1 = \"sample-app\";\n+    final String appDir2 = \"sample-app-2\";\n+    final String adminServerPodName = domainUid + \"-admin-server\";\n+    final String managedServerPrefix = domainUid + \"-managed-server\";\n+    final int replicaCount = 2;\n+    \n+    // The verification of app's continuous availability during patching is turned off\n+    // because it fails intermittently right now. It can be enabled using the following system property.\n+    // We'll remove the property and enable it all the time once the product problem (tracked\n+    // by owls-81575) is fixed.\n+    final String enableAppAvailbilityCheck = \n+        System.getProperty(\"weblogic.operator.enableAppAvailabilityCheck\", \"false\");\n+    Thread accountingThread = null;\n+    List<Integer> appAvailability = new ArrayList<Integer>();\n+    \n+    if (enableAppAvailbilityCheck.equalsIgnoreCase(\"true\")) {\n+      // start a new thread to collect the availability data of the app while the\n+      // main thread performs patching operation, and checking of the results.\n+      accountingThread =\n+          new Thread(\n+              () -> {\n+                collectAppAvaiability(\n+                    domainNamespace,\n+                    appAvailability,\n+                    managedServerPrefix,\n+                    replicaCount,\n+                    \"8001\",\n+                    \"sample-war/index.jsp\");\n+              });\n+      accountingThread.start();\n+    }\n+   \n+    try {\n+      logger.info(\"Check and make sure that V1 app is still running\");\n+      for (int i = 1; i <= replicaCount; i++) {\n+        quickCheckAppRunning(\n+            domainNamespace,\n+            managedServerPrefix + i,\n+            \"8001\",\n+            \"sample-war/index.jsp\",\n+            APP_RESPONSE_V1 + i);\n+      }\n+ \n+      logger.info(\"Check and make sure that the version 2 app is NOT running\");\n+      for (int i = 1; i <= replicaCount; i++) {\n+        quickCheckAppNotRunning(\n+            domainNamespace,\n+            managedServerPrefix + i,\n+            \"8001\",\n+            \"sample-war/index.jsp\",\n+            APP_RESPONSE_V2 + i);   \n+      }\n+ \n+      logger.info(\"Create a new image with app V2\");\n+      miiImagePatchAppV2 = updateImageWithAppV2Patch(\n+          String.format(\"%s-%s\", MII_IMAGE_NAME, \"test-patch-app-v2\"),\n+          Arrays.asList(appDir1, appDir2));\n+\n+      // push the image to OCIR to make the test work in multi node cluster\n+      pushImageIfNeeded(miiImagePatchAppV2);\n+\n+      // patch the domain resource with the new image and verify that the domain resource is patched, \n+      // and all server pods are patched as well.\n+      logger.info(\"Patch domain resource with the new image, and verify the results\");\n+      patchAndVerify(\n+          domainUid,\n+          domainNamespace,\n+          adminServerPodName,\n+          managedServerPrefix,\n+          replicaCount,\n+          miiImagePatchAppV2);\n+\n+      logger.info(\"Check and wait for the V2 app to be ready\");\n+      for (int i = 1; i <= replicaCount; i++) {\n+        checkAppRunning(\n+            domainNamespace,\n+            managedServerPrefix + i,\n+            \"8001\",\n+            \"sample-war/index.jsp\",\n+            APP_RESPONSE_V2 + i);\n+      } \n+    } finally {\n+    \n+      if (accountingThread != null) {\n+        try {\n+          accountingThread.join();\n+        } catch (InterruptedException ie) {\n+          // do nothing\n+        }\n+ \n+        // check the app availability data that we have collected, and see if\n+        // the app has been available all the time since the beginning of this test method\n+        logger.info(\"Verify that the app was available in the duration when app was being patched\"); \n+        assertTrue(appAlwaysAvailable(appAvailability),\n+            \"App does not always avaiable when the domain is being patched with a newer version of the app\");\n+      }\n+    }\n+    \n+    logger.info(\"The cluster has been rolling restarted, and the version 2 app has been deployed correctly\");\n+  }\n+\n+  @Test\n+  @Order(5)\n+  @DisplayName(\"Update the domain with another application\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testAddSecondApp() {\n+    \n+    // the existing app is the combination of what are in appDir1 and appDir2 as in test case number 4,\n+    // the second app is in appDir3.\n+    final String appDir1 = \"sample-app\";\n+    final String appDir2 = \"sample-app-2\";\n+    final String appDir3 = \"sample-app-3\";\n+    final String adminServerPodName = domainUid + \"-admin-server\";\n+    final String managedServerPrefix = domainUid + \"-managed-server\";\n+    final int replicaCount = 2;\n+\n+    logger.info(\"Check V2 app is still running after the previous test\");\n+    for (int i = 1; i <= replicaCount; i++) {\n+      quickCheckAppRunning(\n+          domainNamespace,\n+          managedServerPrefix + i,\n+          \"8001\",\n+          \"sample-war/index.jsp\",\n+          APP_RESPONSE_V2 + i);\n+    }\n+\n+    logger.info(\"Check and make sure that the new app is NOT already running\");\n+    for (int i = 1; i <= replicaCount; i++) {\n+      quickCheckAppNotRunning(\n+          domainNamespace,\n+          managedServerPrefix + i,\n+          \"8001\",\n+          \"sample-war-3/index.jsp\",\n+          APP_RESPONSE_V3 + i);\n+    }\n+   \n+    logger.info(\"Create a new image that contains the additional app\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 287}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxNTUxNw==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r421015517", "createdAt": "2020-05-06T18:49:12Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -504,12 +534,201 @@ public void testCreateMiiDomainSameDomainUidDiffNS() {\n     }\n   }\n \n+  @Test\n+  @Order(4)\n+  @DisplayName(\"Update the sample-app application to version 2\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testPatchAppV2() {\n+    \n+    // app in the new image contains what is in the original app dir sample-app, \n+    // plus the replacements or/and additions in the second app dir sample-app-2.\n+    final String appDir1 = \"sample-app\";\n+    final String appDir2 = \"sample-app-2\";\n+    final String adminServerPodName = domainUid + \"-admin-server\";\n+    final String managedServerPrefix = domainUid + \"-managed-server\";\n+    final int replicaCount = 2;\n+    \n+    // The verification of app's continuous availability during patching is turned off\n+    // because it fails intermittently right now. It can be enabled using the following system property.\n+    // We'll remove the property and enable it all the time once the product problem (tracked\n+    // by owls-81575) is fixed.\n+    final String enableAppAvailbilityCheck = \n+        System.getProperty(\"weblogic.operator.enableAppAvailabilityCheck\", \"false\");\n+    Thread accountingThread = null;\n+    List<Integer> appAvailability = new ArrayList<Integer>();\n+    \n+    if (enableAppAvailbilityCheck.equalsIgnoreCase(\"true\")) {\n+      // start a new thread to collect the availability data of the app while the\n+      // main thread performs patching operation, and checking of the results.\n+      accountingThread =\n+          new Thread(\n+              () -> {\n+                collectAppAvaiability(\n+                    domainNamespace,\n+                    appAvailability,\n+                    managedServerPrefix,\n+                    replicaCount,\n+                    \"8001\",\n+                    \"sample-war/index.jsp\");\n+              });\n+      accountingThread.start();\n+    }\n+   \n+    try {\n+      logger.info(\"Check and make sure that V1 app is still running\");\n+      for (int i = 1; i <= replicaCount; i++) {\n+        quickCheckAppRunning(\n+            domainNamespace,\n+            managedServerPrefix + i,\n+            \"8001\",\n+            \"sample-war/index.jsp\",\n+            APP_RESPONSE_V1 + i);\n+      }\n+ \n+      logger.info(\"Check and make sure that the version 2 app is NOT running\");\n+      for (int i = 1; i <= replicaCount; i++) {\n+        quickCheckAppNotRunning(\n+            domainNamespace,\n+            managedServerPrefix + i,\n+            \"8001\",\n+            \"sample-war/index.jsp\",\n+            APP_RESPONSE_V2 + i);   \n+      }\n+ \n+      logger.info(\"Create a new image with app V2\");\n+      miiImagePatchAppV2 = updateImageWithAppV2Patch(\n+          String.format(\"%s-%s\", MII_IMAGE_NAME, \"test-patch-app-v2\"),\n+          Arrays.asList(appDir1, appDir2));\n+\n+      // push the image to OCIR to make the test work in multi node cluster\n+      pushImageIfNeeded(miiImagePatchAppV2);\n+\n+      // patch the domain resource with the new image and verify that the domain resource is patched, \n+      // and all server pods are patched as well.\n+      logger.info(\"Patch domain resource with the new image, and verify the results\");\n+      patchAndVerify(\n+          domainUid,\n+          domainNamespace,\n+          adminServerPodName,\n+          managedServerPrefix,\n+          replicaCount,\n+          miiImagePatchAppV2);\n+\n+      logger.info(\"Check and wait for the V2 app to be ready\");\n+      for (int i = 1; i <= replicaCount; i++) {\n+        checkAppRunning(\n+            domainNamespace,\n+            managedServerPrefix + i,\n+            \"8001\",\n+            \"sample-war/index.jsp\",\n+            APP_RESPONSE_V2 + i);\n+      } \n+    } finally {\n+    \n+      if (accountingThread != null) {\n+        try {\n+          accountingThread.join();\n+        } catch (InterruptedException ie) {\n+          // do nothing\n+        }\n+ \n+        // check the app availability data that we have collected, and see if\n+        // the app has been available all the time since the beginning of this test method\n+        logger.info(\"Verify that the app was available in the duration when app was being patched\"); \n+        assertTrue(appAlwaysAvailable(appAvailability),\n+            \"App does not always avaiable when the domain is being patched with a newer version of the app\");\n+      }\n+    }\n+    \n+    logger.info(\"The cluster has been rolling restarted, and the version 2 app has been deployed correctly\");\n+  }\n+\n+  @Test\n+  @Order(5)\n+  @DisplayName(\"Update the domain with another application\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testAddSecondApp() {\n+    \n+    // the existing app is the combination of what are in appDir1 and appDir2 as in test case number 4,\n+    // the second app is in appDir3.\n+    final String appDir1 = \"sample-app\";\n+    final String appDir2 = \"sample-app-2\";\n+    final String appDir3 = \"sample-app-3\";\n+    final String adminServerPodName = domainUid + \"-admin-server\";\n+    final String managedServerPrefix = domainUid + \"-managed-server\";\n+    final int replicaCount = 2;\n+\n+    logger.info(\"Check V2 app is still running after the previous test\");\n+    for (int i = 1; i <= replicaCount; i++) {\n+      quickCheckAppRunning(\n+          domainNamespace,\n+          managedServerPrefix + i,\n+          \"8001\",\n+          \"sample-war/index.jsp\",\n+          APP_RESPONSE_V2 + i);\n+    }\n+\n+    logger.info(\"Check and make sure that the new app is NOT already running\");\n+    for (int i = 1; i <= replicaCount; i++) {\n+      quickCheckAppNotRunning(\n+          domainNamespace,\n+          managedServerPrefix + i,\n+          \"8001\",\n+          \"sample-war-3/index.jsp\",\n+          APP_RESPONSE_V3 + i);\n+    }\n+   \n+    logger.info(\"Create a new image that contains the additional app\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NDc1MQ=="}, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 287}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU0Mzk3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDoyODo0NFrOGRAWuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDoyODo0NFrOGRAWuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NDc5Mw==", "bodyText": "application", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420484793", "createdAt": "2020-05-06T00:28:44Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -504,12 +534,201 @@ public void testCreateMiiDomainSameDomainUidDiffNS() {\n     }\n   }\n \n+  @Test\n+  @Order(4)\n+  @DisplayName(\"Update the sample-app application to version 2\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testPatchAppV2() {\n+    \n+    // app in the new image contains what is in the original app dir sample-app, \n+    // plus the replacements or/and additions in the second app dir sample-app-2.\n+    final String appDir1 = \"sample-app\";\n+    final String appDir2 = \"sample-app-2\";\n+    final String adminServerPodName = domainUid + \"-admin-server\";\n+    final String managedServerPrefix = domainUid + \"-managed-server\";\n+    final int replicaCount = 2;\n+    \n+    // The verification of app's continuous availability during patching is turned off\n+    // because it fails intermittently right now. It can be enabled using the following system property.\n+    // We'll remove the property and enable it all the time once the product problem (tracked\n+    // by owls-81575) is fixed.\n+    final String enableAppAvailbilityCheck = \n+        System.getProperty(\"weblogic.operator.enableAppAvailabilityCheck\", \"false\");\n+    Thread accountingThread = null;\n+    List<Integer> appAvailability = new ArrayList<Integer>();\n+    \n+    if (enableAppAvailbilityCheck.equalsIgnoreCase(\"true\")) {\n+      // start a new thread to collect the availability data of the app while the\n+      // main thread performs patching operation, and checking of the results.\n+      accountingThread =\n+          new Thread(\n+              () -> {\n+                collectAppAvaiability(\n+                    domainNamespace,\n+                    appAvailability,\n+                    managedServerPrefix,\n+                    replicaCount,\n+                    \"8001\",\n+                    \"sample-war/index.jsp\");\n+              });\n+      accountingThread.start();\n+    }\n+   \n+    try {\n+      logger.info(\"Check and make sure that V1 app is still running\");\n+      for (int i = 1; i <= replicaCount; i++) {\n+        quickCheckAppRunning(\n+            domainNamespace,\n+            managedServerPrefix + i,\n+            \"8001\",\n+            \"sample-war/index.jsp\",\n+            APP_RESPONSE_V1 + i);\n+      }\n+ \n+      logger.info(\"Check and make sure that the version 2 app is NOT running\");\n+      for (int i = 1; i <= replicaCount; i++) {\n+        quickCheckAppNotRunning(\n+            domainNamespace,\n+            managedServerPrefix + i,\n+            \"8001\",\n+            \"sample-war/index.jsp\",\n+            APP_RESPONSE_V2 + i);   \n+      }\n+ \n+      logger.info(\"Create a new image with app V2\");\n+      miiImagePatchAppV2 = updateImageWithAppV2Patch(\n+          String.format(\"%s-%s\", MII_IMAGE_NAME, \"test-patch-app-v2\"),\n+          Arrays.asList(appDir1, appDir2));\n+\n+      // push the image to OCIR to make the test work in multi node cluster\n+      pushImageIfNeeded(miiImagePatchAppV2);\n+\n+      // patch the domain resource with the new image and verify that the domain resource is patched, \n+      // and all server pods are patched as well.\n+      logger.info(\"Patch domain resource with the new image, and verify the results\");\n+      patchAndVerify(\n+          domainUid,\n+          domainNamespace,\n+          adminServerPodName,\n+          managedServerPrefix,\n+          replicaCount,\n+          miiImagePatchAppV2);\n+\n+      logger.info(\"Check and wait for the V2 app to be ready\");\n+      for (int i = 1; i <= replicaCount; i++) {\n+        checkAppRunning(\n+            domainNamespace,\n+            managedServerPrefix + i,\n+            \"8001\",\n+            \"sample-war/index.jsp\",\n+            APP_RESPONSE_V2 + i);\n+      } \n+    } finally {\n+    \n+      if (accountingThread != null) {\n+        try {\n+          accountingThread.join();\n+        } catch (InterruptedException ie) {\n+          // do nothing\n+        }\n+ \n+        // check the app availability data that we have collected, and see if\n+        // the app has been available all the time since the beginning of this test method\n+        logger.info(\"Verify that the app was available in the duration when app was being patched\"); \n+        assertTrue(appAlwaysAvailable(appAvailability),\n+            \"App does not always avaiable when the domain is being patched with a newer version of the app\");\n+      }\n+    }\n+    \n+    logger.info(\"The cluster has been rolling restarted, and the version 2 app has been deployed correctly\");\n+  }\n+\n+  @Test\n+  @Order(5)\n+  @DisplayName(\"Update the domain with another application\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testAddSecondApp() {\n+    \n+    // the existing app is the combination of what are in appDir1 and appDir2 as in test case number 4,\n+    // the second app is in appDir3.\n+    final String appDir1 = \"sample-app\";\n+    final String appDir2 = \"sample-app-2\";\n+    final String appDir3 = \"sample-app-3\";\n+    final String adminServerPodName = domainUid + \"-admin-server\";\n+    final String managedServerPrefix = domainUid + \"-managed-server\";\n+    final int replicaCount = 2;\n+\n+    logger.info(\"Check V2 app is still running after the previous test\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 267}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU0NTQ0OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDoyOTozMVrOGRAXlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDoyOTozMVrOGRAXlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NTAxNA==", "bodyText": "i didn't see you check that anything was restarted", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420485014", "createdAt": "2020-05-06T00:29:31Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -504,12 +534,201 @@ public void testCreateMiiDomainSameDomainUidDiffNS() {\n     }\n   }\n \n+  @Test\n+  @Order(4)\n+  @DisplayName(\"Update the sample-app application to version 2\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testPatchAppV2() {\n+    \n+    // app in the new image contains what is in the original app dir sample-app, \n+    // plus the replacements or/and additions in the second app dir sample-app-2.\n+    final String appDir1 = \"sample-app\";\n+    final String appDir2 = \"sample-app-2\";\n+    final String adminServerPodName = domainUid + \"-admin-server\";\n+    final String managedServerPrefix = domainUid + \"-managed-server\";\n+    final int replicaCount = 2;\n+    \n+    // The verification of app's continuous availability during patching is turned off\n+    // because it fails intermittently right now. It can be enabled using the following system property.\n+    // We'll remove the property and enable it all the time once the product problem (tracked\n+    // by owls-81575) is fixed.\n+    final String enableAppAvailbilityCheck = \n+        System.getProperty(\"weblogic.operator.enableAppAvailabilityCheck\", \"false\");\n+    Thread accountingThread = null;\n+    List<Integer> appAvailability = new ArrayList<Integer>();\n+    \n+    if (enableAppAvailbilityCheck.equalsIgnoreCase(\"true\")) {\n+      // start a new thread to collect the availability data of the app while the\n+      // main thread performs patching operation, and checking of the results.\n+      accountingThread =\n+          new Thread(\n+              () -> {\n+                collectAppAvaiability(\n+                    domainNamespace,\n+                    appAvailability,\n+                    managedServerPrefix,\n+                    replicaCount,\n+                    \"8001\",\n+                    \"sample-war/index.jsp\");\n+              });\n+      accountingThread.start();\n+    }\n+   \n+    try {\n+      logger.info(\"Check and make sure that V1 app is still running\");\n+      for (int i = 1; i <= replicaCount; i++) {\n+        quickCheckAppRunning(\n+            domainNamespace,\n+            managedServerPrefix + i,\n+            \"8001\",\n+            \"sample-war/index.jsp\",\n+            APP_RESPONSE_V1 + i);\n+      }\n+ \n+      logger.info(\"Check and make sure that the version 2 app is NOT running\");\n+      for (int i = 1; i <= replicaCount; i++) {\n+        quickCheckAppNotRunning(\n+            domainNamespace,\n+            managedServerPrefix + i,\n+            \"8001\",\n+            \"sample-war/index.jsp\",\n+            APP_RESPONSE_V2 + i);   \n+      }\n+ \n+      logger.info(\"Create a new image with app V2\");\n+      miiImagePatchAppV2 = updateImageWithAppV2Patch(\n+          String.format(\"%s-%s\", MII_IMAGE_NAME, \"test-patch-app-v2\"),\n+          Arrays.asList(appDir1, appDir2));\n+\n+      // push the image to OCIR to make the test work in multi node cluster\n+      pushImageIfNeeded(miiImagePatchAppV2);\n+\n+      // patch the domain resource with the new image and verify that the domain resource is patched, \n+      // and all server pods are patched as well.\n+      logger.info(\"Patch domain resource with the new image, and verify the results\");\n+      patchAndVerify(\n+          domainUid,\n+          domainNamespace,\n+          adminServerPodName,\n+          managedServerPrefix,\n+          replicaCount,\n+          miiImagePatchAppV2);\n+\n+      logger.info(\"Check and wait for the V2 app to be ready\");\n+      for (int i = 1; i <= replicaCount; i++) {\n+        checkAppRunning(\n+            domainNamespace,\n+            managedServerPrefix + i,\n+            \"8001\",\n+            \"sample-war/index.jsp\",\n+            APP_RESPONSE_V2 + i);\n+      } \n+    } finally {\n+    \n+      if (accountingThread != null) {\n+        try {\n+          accountingThread.join();\n+        } catch (InterruptedException ie) {\n+          // do nothing\n+        }\n+ \n+        // check the app availability data that we have collected, and see if\n+        // the app has been available all the time since the beginning of this test method\n+        logger.info(\"Verify that the app was available in the duration when app was being patched\"); \n+        assertTrue(appAlwaysAvailable(appAvailability),\n+            \"App does not always avaiable when the domain is being patched with a newer version of the app\");\n+      }\n+    }\n+    \n+    logger.info(\"The cluster has been rolling restarted, and the version 2 app has been deployed correctly\");\n+  }\n+\n+  @Test\n+  @Order(5)\n+  @DisplayName(\"Update the domain with another application\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testAddSecondApp() {\n+    \n+    // the existing app is the combination of what are in appDir1 and appDir2 as in test case number 4,\n+    // the second app is in appDir3.\n+    final String appDir1 = \"sample-app\";\n+    final String appDir2 = \"sample-app-2\";\n+    final String appDir3 = \"sample-app-3\";\n+    final String adminServerPodName = domainUid + \"-admin-server\";\n+    final String managedServerPrefix = domainUid + \"-managed-server\";\n+    final int replicaCount = 2;\n+\n+    logger.info(\"Check V2 app is still running after the previous test\");\n+    for (int i = 1; i <= replicaCount; i++) {\n+      quickCheckAppRunning(\n+          domainNamespace,\n+          managedServerPrefix + i,\n+          \"8001\",\n+          \"sample-war/index.jsp\",\n+          APP_RESPONSE_V2 + i);\n+    }\n+\n+    logger.info(\"Check and make sure that the new app is NOT already running\");\n+    for (int i = 1; i <= replicaCount; i++) {\n+      quickCheckAppNotRunning(\n+          domainNamespace,\n+          managedServerPrefix + i,\n+          \"8001\",\n+          \"sample-war-3/index.jsp\",\n+          APP_RESPONSE_V3 + i);\n+    }\n+   \n+    logger.info(\"Create a new image that contains the additional app\");\n+    miiImageAddSecondApp = updateImageWithSampleApp3(\n+        String.format(\"%s-%s\", MII_IMAGE_NAME, \"test-add-second-app\"),\n+        Arrays.asList(appDir1, appDir2),\n+        Collections.singletonList(appDir3),\n+        \"model2-wls.yaml\");\n+    \n+    // push the image to OCIR to make the test work in multi node cluster\n+    pushImageIfNeeded(miiImageAddSecondApp);\n+   \n+    // patch the domain resource with the new image and verify that the domain resource is patched, \n+    // and all server pods are patched as well.\n+    logger.info(\"Patch the domain with the new image, and verify the result\"); \n+    patchAndVerify(\n+        domainUid,\n+        domainNamespace,\n+        adminServerPodName,\n+        managedServerPrefix,\n+        replicaCount,\n+        miiImageAddSecondApp);\n+    \n+    logger.info(\"Check and wait for the new app to become ready\");\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkAppRunning(\n+          domainNamespace,\n+          managedServerPrefix + i,\n+          \"8001\",\n+          \"sample-war-3/index.jsp\",\n+          APP_RESPONSE_V3 + i);\n+    }\n+ \n+    logger.info(\"Check and wait for the original app V2 to become ready\");\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkAppRunning(\n+          domainNamespace,\n+          managedServerPrefix + i,\n+          \"8001\",\n+          \"sample-war/index.jsp\",\n+          APP_RESPONSE_V2 + i);\n+    }\n+\n+    logger.info(\"The cluster has been rolling restarted, and the two applications are both running correctly\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 328}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU0Nzg4OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDozMDozOVrOGRAY7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDozMDozOVrOGRAY7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NTM1Ng==", "bodyText": "this feels like the wrong way to assure what you want to happen, especially as the test could fail before you get to here", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420485356", "createdAt": "2020-05-06T00:30:39Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -526,14 +745,38 @@ void tearDown() {\n             \"deleteDomainCustomResource failed with ApiException\");\n     logger.info(\"Deleted Domain Custom Resource \" + domainUid + \" from \" + domainNamespace1);\n \n-    // delete the domain image created for the test\n+    // delete the domain images created in the test class\n     if (miiImage != null) {\n       deleteImage(miiImage);\n     }\n+    if (miiImagePatchAppV2 != null) {\n+      deleteImage(miiImagePatchAppV2);\n+    }\n+    if (miiImageAddSecondApp != null) {\n+      deleteImage(miiImageAddSecondApp);\n+    }\n \n+    // clean up the download directory so that we always get the latest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 357}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU0ODgxOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDozMTowN1rOGRAZdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDozMTowN1rOGRAZdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NTQ5Mg==", "bodyText": "include some details, at least the repo name", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420485492", "createdAt": "2020-05-06T00:31:07Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -526,14 +745,38 @@ void tearDown() {\n             \"deleteDomainCustomResource failed with ApiException\");\n     logger.info(\"Deleted Domain Custom Resource \" + domainUid + \" from \" + domainNamespace1);\n \n-    // delete the domain image created for the test\n+    // delete the domain images created in the test class\n     if (miiImage != null) {\n       deleteImage(miiImage);\n     }\n+    if (miiImagePatchAppV2 != null) {\n+      deleteImage(miiImagePatchAppV2);\n+    }\n+    if (miiImageAddSecondApp != null) {\n+      deleteImage(miiImageAddSecondApp);\n+    }\n \n+    // clean up the download directory so that we always get the latest\n+    // versions of the tools in every run of the test class.\n+    try {\n+      cleanupDirectory(DOWNLOAD_DIR);\n+    } catch (IOException | RuntimeException e) {    \n+      logger.severe(\"Failed to cleanup the download directory \" + DOWNLOAD_DIR + \" ready\", e);    \n+    }\n   }\n \n-  private String createImageAndVerify() {\n+  private void pushImageIfNeeded(String image) {\n+    // push the image to OCIR to make the test work in multi node cluster\n+    if (!REPO_USERNAME.equals(REPO_DUMMY_VALUE)) {\n+      logger.info(\"docker login\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 370}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU0OTU3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDozMTozMlrOGRAZ6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDozMTozMlrOGRAZ6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NTYwOQ==", "bodyText": "how do you know it is ocir? \"registry\" would be a more accurate choice", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420485609", "createdAt": "2020-05-06T00:31:32Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -526,14 +745,38 @@ void tearDown() {\n             \"deleteDomainCustomResource failed with ApiException\");\n     logger.info(\"Deleted Domain Custom Resource \" + domainUid + \" from \" + domainNamespace1);\n \n-    // delete the domain image created for the test\n+    // delete the domain images created in the test class\n     if (miiImage != null) {\n       deleteImage(miiImage);\n     }\n+    if (miiImagePatchAppV2 != null) {\n+      deleteImage(miiImagePatchAppV2);\n+    }\n+    if (miiImageAddSecondApp != null) {\n+      deleteImage(miiImageAddSecondApp);\n+    }\n \n+    // clean up the download directory so that we always get the latest\n+    // versions of the tools in every run of the test class.\n+    try {\n+      cleanupDirectory(DOWNLOAD_DIR);\n+    } catch (IOException | RuntimeException e) {    \n+      logger.severe(\"Failed to cleanup the download directory \" + DOWNLOAD_DIR + \" ready\", e);    \n+    }\n   }\n \n-  private String createImageAndVerify() {\n+  private void pushImageIfNeeded(String image) {\n+    // push the image to OCIR to make the test work in multi node cluster\n+    if (!REPO_USERNAME.equals(REPO_DUMMY_VALUE)) {\n+      logger.info(\"docker login\");\n+      assertTrue(dockerLogin(REPO_REGISTRY, REPO_USERNAME, REPO_PASSWORD), \"docker login failed\");\n+\n+      logger.info(\"docker push image {0} to OCIR\", image);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 373}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU1MTc3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDozMjo0M1rOGRAbHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDozMjo0M1rOGRAbHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NTkxOA==", "bodyText": "this seems to be repeated - make it a static or a const or something?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420485918", "createdAt": "2020-05-06T00:32:43Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -543,23 +786,152 @@ private String createImageAndVerify() {\n     final String image = imageName + \":\" + imageTag;\n \n     // build the model file list\n-    final List<String> modelList = Collections.singletonList(MODEL_DIR + \"/\" + WDT_MODEL_FILE);\n+    final List<String> modelList = \n+        Collections.singletonList(String.format(\"%s/%s\", MODEL_DIR, WDT_MODEL_FILE));\n \n     // build an application archive using what is in resources/apps/APP_NAME\n     assertTrue(buildAppArchive(defaultAppParams()\n-        .srcDir(APP_NAME)), String.format(\"Failed to create app archive for %s\", APP_NAME));\n+        .srcDirList(Collections.singletonList(APP_NAME))), \n+        String.format(\"Failed to create app archive for %s\", APP_NAME));\n \n     // build the archive list\n-    String zipFile = String.format(\"%s/%s.zip\", ARCHIVE_DIR, APP_NAME);\n-    final List<String> archiveList = Collections.singletonList(zipFile);\n+    List<String> archiveList = \n+        Collections.singletonList(String.format(\"%s/%s.zip\", ARCHIVE_DIR, APP_NAME));\n+\n+    createImageAndVerify(imageName, imageTag, modelList, archiveList);\n+\n+    return image;\n+  }\n+  \n+  private String updateImageWithAppV2Patch(\n+      String imageName,\n+      List<String> appDirList\n+  ) {\n+    DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 411}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU1MjcxOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDozMzoyMFrOGRAbrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODo0MDo1N1rOGRgcVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NjA2MA==", "bodyText": "there was no logging at all in this method", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420486060", "createdAt": "2020-05-06T00:33:20Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -543,23 +786,152 @@ private String createImageAndVerify() {\n     final String image = imageName + \":\" + imageTag;\n \n     // build the model file list\n-    final List<String> modelList = Collections.singletonList(MODEL_DIR + \"/\" + WDT_MODEL_FILE);\n+    final List<String> modelList = \n+        Collections.singletonList(String.format(\"%s/%s\", MODEL_DIR, WDT_MODEL_FILE));\n \n     // build an application archive using what is in resources/apps/APP_NAME\n     assertTrue(buildAppArchive(defaultAppParams()\n-        .srcDir(APP_NAME)), String.format(\"Failed to create app archive for %s\", APP_NAME));\n+        .srcDirList(Collections.singletonList(APP_NAME))), \n+        String.format(\"Failed to create app archive for %s\", APP_NAME));\n \n     // build the archive list\n-    String zipFile = String.format(\"%s/%s.zip\", ARCHIVE_DIR, APP_NAME);\n-    final List<String> archiveList = Collections.singletonList(zipFile);\n+    List<String> archiveList = \n+        Collections.singletonList(String.format(\"%s/%s.zip\", ARCHIVE_DIR, APP_NAME));\n+\n+    createImageAndVerify(imageName, imageTag, modelList, archiveList);\n+\n+    return image;\n+  }\n+  \n+  private String updateImageWithAppV2Patch(\n+      String imageName,\n+      List<String> appDirList\n+  ) {\n+    DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n+    Date date = new Date();\n+    final String imageTag = dateFormat.format(date) + \"-\" + System.currentTimeMillis();\n+    // Add repository name in image name for Jenkins runs\n+    final String imageNameReal = REPO_USERNAME.equals(REPO_DUMMY_VALUE) ? imageName : REPO_NAME + imageName;\n+    String image = String.format(\"%s:%s\",  imageNameReal, imageTag);\n+    \n+    // build the model file list\n+    List<String> modelList = \n+        Collections.singletonList(String.format(\"%s/%s\", MODEL_DIR, WDT_MODEL_FILE));\n+   \n+    // build an application archive\n+    assertTrue(\n+        buildAppArchive(\n+            defaultAppParams()\n+                .srcDirList(appDirList)),\n+        String.format(\"Failed to create app archive for %s\",\n+            APP_NAME));\n+\n+    // build the archive list\n+    List<String> archiveList = \n+        Collections.singletonList(\n+            String.format(\"%s/%s.zip\", ARCHIVE_DIR, APP_NAME));\n+    \n+    createImageAndVerify(imageNameReal, imageTag, modelList, archiveList);\n+    \n+    return image;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 438}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxMDUxNg==", "bodyText": "added", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r421010516", "createdAt": "2020-05-06T18:40:57Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -543,23 +786,152 @@ private String createImageAndVerify() {\n     final String image = imageName + \":\" + imageTag;\n \n     // build the model file list\n-    final List<String> modelList = Collections.singletonList(MODEL_DIR + \"/\" + WDT_MODEL_FILE);\n+    final List<String> modelList = \n+        Collections.singletonList(String.format(\"%s/%s\", MODEL_DIR, WDT_MODEL_FILE));\n \n     // build an application archive using what is in resources/apps/APP_NAME\n     assertTrue(buildAppArchive(defaultAppParams()\n-        .srcDir(APP_NAME)), String.format(\"Failed to create app archive for %s\", APP_NAME));\n+        .srcDirList(Collections.singletonList(APP_NAME))), \n+        String.format(\"Failed to create app archive for %s\", APP_NAME));\n \n     // build the archive list\n-    String zipFile = String.format(\"%s/%s.zip\", ARCHIVE_DIR, APP_NAME);\n-    final List<String> archiveList = Collections.singletonList(zipFile);\n+    List<String> archiveList = \n+        Collections.singletonList(String.format(\"%s/%s.zip\", ARCHIVE_DIR, APP_NAME));\n+\n+    createImageAndVerify(imageName, imageTag, modelList, archiveList);\n+\n+    return image;\n+  }\n+  \n+  private String updateImageWithAppV2Patch(\n+      String imageName,\n+      List<String> appDirList\n+  ) {\n+    DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n+    Date date = new Date();\n+    final String imageTag = dateFormat.format(date) + \"-\" + System.currentTimeMillis();\n+    // Add repository name in image name for Jenkins runs\n+    final String imageNameReal = REPO_USERNAME.equals(REPO_DUMMY_VALUE) ? imageName : REPO_NAME + imageName;\n+    String image = String.format(\"%s:%s\",  imageNameReal, imageTag);\n+    \n+    // build the model file list\n+    List<String> modelList = \n+        Collections.singletonList(String.format(\"%s/%s\", MODEL_DIR, WDT_MODEL_FILE));\n+   \n+    // build an application archive\n+    assertTrue(\n+        buildAppArchive(\n+            defaultAppParams()\n+                .srcDirList(appDirList)),\n+        String.format(\"Failed to create app archive for %s\",\n+            APP_NAME));\n+\n+    // build the archive list\n+    List<String> archiveList = \n+        Collections.singletonList(\n+            String.format(\"%s/%s.zip\", ARCHIVE_DIR, APP_NAME));\n+    \n+    createImageAndVerify(imageNameReal, imageTag, modelList, archiveList);\n+    \n+    return image;\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NjA2MA=="}, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 438}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU1MzQ0OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDozMzo0NFrOGRAcFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODo0MToxMlrOGRgc5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NjE2NA==", "bodyText": "seems like a lot of duplicate code here - refactor", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420486164", "createdAt": "2020-05-06T00:33:44Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -543,23 +786,152 @@ private String createImageAndVerify() {\n     final String image = imageName + \":\" + imageTag;\n \n     // build the model file list\n-    final List<String> modelList = Collections.singletonList(MODEL_DIR + \"/\" + WDT_MODEL_FILE);\n+    final List<String> modelList = \n+        Collections.singletonList(String.format(\"%s/%s\", MODEL_DIR, WDT_MODEL_FILE));\n \n     // build an application archive using what is in resources/apps/APP_NAME\n     assertTrue(buildAppArchive(defaultAppParams()\n-        .srcDir(APP_NAME)), String.format(\"Failed to create app archive for %s\", APP_NAME));\n+        .srcDirList(Collections.singletonList(APP_NAME))), \n+        String.format(\"Failed to create app archive for %s\", APP_NAME));\n \n     // build the archive list\n-    String zipFile = String.format(\"%s/%s.zip\", ARCHIVE_DIR, APP_NAME);\n-    final List<String> archiveList = Collections.singletonList(zipFile);\n+    List<String> archiveList = \n+        Collections.singletonList(String.format(\"%s/%s.zip\", ARCHIVE_DIR, APP_NAME));\n+\n+    createImageAndVerify(imageName, imageTag, modelList, archiveList);\n+\n+    return image;\n+  }\n+  \n+  private String updateImageWithAppV2Patch(\n+      String imageName,\n+      List<String> appDirList\n+  ) {\n+    DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n+    Date date = new Date();\n+    final String imageTag = dateFormat.format(date) + \"-\" + System.currentTimeMillis();\n+    // Add repository name in image name for Jenkins runs\n+    final String imageNameReal = REPO_USERNAME.equals(REPO_DUMMY_VALUE) ? imageName : REPO_NAME + imageName;\n+    String image = String.format(\"%s:%s\",  imageNameReal, imageTag);\n+    \n+    // build the model file list\n+    List<String> modelList = \n+        Collections.singletonList(String.format(\"%s/%s\", MODEL_DIR, WDT_MODEL_FILE));\n+   \n+    // build an application archive\n+    assertTrue(\n+        buildAppArchive(\n+            defaultAppParams()\n+                .srcDirList(appDirList)),\n+        String.format(\"Failed to create app archive for %s\",\n+            APP_NAME));\n+\n+    // build the archive list\n+    List<String> archiveList = \n+        Collections.singletonList(\n+            String.format(\"%s/%s.zip\", ARCHIVE_DIR, APP_NAME));\n+    \n+    createImageAndVerify(imageNameReal, imageTag, modelList, archiveList);\n+    \n+    return image;\n+  }\n+\n+  private String updateImageWithSampleApp3(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 440}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxMDY2Mg==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r421010662", "createdAt": "2020-05-06T18:41:12Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -543,23 +786,152 @@ private String createImageAndVerify() {\n     final String image = imageName + \":\" + imageTag;\n \n     // build the model file list\n-    final List<String> modelList = Collections.singletonList(MODEL_DIR + \"/\" + WDT_MODEL_FILE);\n+    final List<String> modelList = \n+        Collections.singletonList(String.format(\"%s/%s\", MODEL_DIR, WDT_MODEL_FILE));\n \n     // build an application archive using what is in resources/apps/APP_NAME\n     assertTrue(buildAppArchive(defaultAppParams()\n-        .srcDir(APP_NAME)), String.format(\"Failed to create app archive for %s\", APP_NAME));\n+        .srcDirList(Collections.singletonList(APP_NAME))), \n+        String.format(\"Failed to create app archive for %s\", APP_NAME));\n \n     // build the archive list\n-    String zipFile = String.format(\"%s/%s.zip\", ARCHIVE_DIR, APP_NAME);\n-    final List<String> archiveList = Collections.singletonList(zipFile);\n+    List<String> archiveList = \n+        Collections.singletonList(String.format(\"%s/%s.zip\", ARCHIVE_DIR, APP_NAME));\n+\n+    createImageAndVerify(imageName, imageTag, modelList, archiveList);\n+\n+    return image;\n+  }\n+  \n+  private String updateImageWithAppV2Patch(\n+      String imageName,\n+      List<String> appDirList\n+  ) {\n+    DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n+    Date date = new Date();\n+    final String imageTag = dateFormat.format(date) + \"-\" + System.currentTimeMillis();\n+    // Add repository name in image name for Jenkins runs\n+    final String imageNameReal = REPO_USERNAME.equals(REPO_DUMMY_VALUE) ? imageName : REPO_NAME + imageName;\n+    String image = String.format(\"%s:%s\",  imageNameReal, imageTag);\n+    \n+    // build the model file list\n+    List<String> modelList = \n+        Collections.singletonList(String.format(\"%s/%s\", MODEL_DIR, WDT_MODEL_FILE));\n+   \n+    // build an application archive\n+    assertTrue(\n+        buildAppArchive(\n+            defaultAppParams()\n+                .srcDirList(appDirList)),\n+        String.format(\"Failed to create app archive for %s\",\n+            APP_NAME));\n+\n+    // build the archive list\n+    List<String> archiveList = \n+        Collections.singletonList(\n+            String.format(\"%s/%s.zip\", ARCHIVE_DIR, APP_NAME));\n+    \n+    createImageAndVerify(imageNameReal, imageTag, modelList, archiveList);\n+    \n+    return image;\n+  }\n+\n+  private String updateImageWithSampleApp3(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NjE2NA=="}, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 440}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU1MzgwOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDozMzo1NlrOGRAcRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDozMzo1NlrOGRAcRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NjIxMw==", "bodyText": "spelling", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420486213", "createdAt": "2020-05-06T00:33:56Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -543,23 +786,152 @@ private String createImageAndVerify() {\n     final String image = imageName + \":\" + imageTag;\n \n     // build the model file list\n-    final List<String> modelList = Collections.singletonList(MODEL_DIR + \"/\" + WDT_MODEL_FILE);\n+    final List<String> modelList = \n+        Collections.singletonList(String.format(\"%s/%s\", MODEL_DIR, WDT_MODEL_FILE));\n \n     // build an application archive using what is in resources/apps/APP_NAME\n     assertTrue(buildAppArchive(defaultAppParams()\n-        .srcDir(APP_NAME)), String.format(\"Failed to create app archive for %s\", APP_NAME));\n+        .srcDirList(Collections.singletonList(APP_NAME))), \n+        String.format(\"Failed to create app archive for %s\", APP_NAME));\n \n     // build the archive list\n-    String zipFile = String.format(\"%s/%s.zip\", ARCHIVE_DIR, APP_NAME);\n-    final List<String> archiveList = Collections.singletonList(zipFile);\n+    List<String> archiveList = \n+        Collections.singletonList(String.format(\"%s/%s.zip\", ARCHIVE_DIR, APP_NAME));\n+\n+    createImageAndVerify(imageName, imageTag, modelList, archiveList);\n+\n+    return image;\n+  }\n+  \n+  private String updateImageWithAppV2Patch(\n+      String imageName,\n+      List<String> appDirList\n+  ) {\n+    DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n+    Date date = new Date();\n+    final String imageTag = dateFormat.format(date) + \"-\" + System.currentTimeMillis();\n+    // Add repository name in image name for Jenkins runs\n+    final String imageNameReal = REPO_USERNAME.equals(REPO_DUMMY_VALUE) ? imageName : REPO_NAME + imageName;\n+    String image = String.format(\"%s:%s\",  imageNameReal, imageTag);\n+    \n+    // build the model file list\n+    List<String> modelList = \n+        Collections.singletonList(String.format(\"%s/%s\", MODEL_DIR, WDT_MODEL_FILE));\n+   \n+    // build an application archive\n+    assertTrue(\n+        buildAppArchive(\n+            defaultAppParams()\n+                .srcDirList(appDirList)),\n+        String.format(\"Failed to create app archive for %s\",\n+            APP_NAME));\n+\n+    // build the archive list\n+    List<String> archiveList = \n+        Collections.singletonList(\n+            String.format(\"%s/%s.zip\", ARCHIVE_DIR, APP_NAME));\n+    \n+    createImageAndVerify(imageNameReal, imageTag, modelList, archiveList);\n+    \n+    return image;\n+  }\n+\n+  private String updateImageWithSampleApp3(\n+      String imageName,\n+      List<String> appDirList1,\n+      List<String> appDirList2,\n+      String modelFile\n+  ) {\n+    DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n+    Date date = new Date();\n+    final String imageTag = dateFormat.format(date) + \"-\" + System.currentTimeMillis();\n+    // Add repository name in image name for Jenkins runs\n+    final String imageNameReal = REPO_USERNAME.equals(REPO_DUMMY_VALUE) ? imageName : REPO_NAME + imageName;\n+    String image = String.format(\"%s:%s\",  imageNameReal, imageTag);\n+    \n+    // build the model file list\n+    List<String> modelList = Collections.singletonList(MODEL_DIR + \"/\" + modelFile);\n+ \n+    String appName1 = appDirList1.get(0);\n+    String appName2 = appDirList2.get(0);\n+    \n+    // build an application archive that contains the existing app\n+    assertTrue(\n+        buildAppArchive(\n+            defaultAppParams()\n+                .srcDirList(appDirList1)\n+                .appName(appName1)),\n+        String.format(\"Failed to create app archive for %s\",\n+            appName1));\n+    \n+    logger.info(\"Successfully created app zip file: \" + appName1);\n+     \n+    // build an application archive that contains the new app\n+    assertTrue(\n+        buildAppArchive(\n+            defaultAppParams()\n+                .srcDirList(appDirList2)\n+                .appName(appName2)),\n+        String.format(\"Failed to create app archive for %s\",\n+            appName2));\n+    \n+    logger.info(\"Successfully cteated app zip file: \" + appName2); \n+    \n+    // build the archive list with two zip files\n+    List<String> archiveList = Arrays.asList(\n+        String.format(\"%s/%s.zip\", ARCHIVE_DIR, appName1),\n+        String.format(\"%s/%s.zip\", ARCHIVE_DIR, appName2));\n+    \n+    createImageAndVerify(imageNameReal, imageTag, modelList, archiveList);\n+    \n+    return image;\n+  }\n+\n+  /**\n+   * Patch the domain resource with a new image.\n+   * Here is an example of the JSON patch string that is constructed in this method.\n+   * [\n+   *   {\"op\": \"replace\", \"path\": \"/spec/image\", \"value\": \"mii-image:v2\" }\n+   * ]\n+   * \n+   * @param domainUid unique identifier of the domain resource\n+   * @param namespace Kubernetes namespace that the domain is hosted\n+   * @param image name of the new image\n+   */\n+  private void patchDomainResourceIamge(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 502}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU1NTE3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDozNDozOVrOGRAdCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDozNDozOVrOGRAdCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NjQxMA==", "bodyText": "you are really using the resource's metadata.name right? not domainUid -- even though they might happen to be the same", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420486410", "createdAt": "2020-05-06T00:34:39Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -543,23 +786,152 @@ private String createImageAndVerify() {\n     final String image = imageName + \":\" + imageTag;\n \n     // build the model file list\n-    final List<String> modelList = Collections.singletonList(MODEL_DIR + \"/\" + WDT_MODEL_FILE);\n+    final List<String> modelList = \n+        Collections.singletonList(String.format(\"%s/%s\", MODEL_DIR, WDT_MODEL_FILE));\n \n     // build an application archive using what is in resources/apps/APP_NAME\n     assertTrue(buildAppArchive(defaultAppParams()\n-        .srcDir(APP_NAME)), String.format(\"Failed to create app archive for %s\", APP_NAME));\n+        .srcDirList(Collections.singletonList(APP_NAME))), \n+        String.format(\"Failed to create app archive for %s\", APP_NAME));\n \n     // build the archive list\n-    String zipFile = String.format(\"%s/%s.zip\", ARCHIVE_DIR, APP_NAME);\n-    final List<String> archiveList = Collections.singletonList(zipFile);\n+    List<String> archiveList = \n+        Collections.singletonList(String.format(\"%s/%s.zip\", ARCHIVE_DIR, APP_NAME));\n+\n+    createImageAndVerify(imageName, imageTag, modelList, archiveList);\n+\n+    return image;\n+  }\n+  \n+  private String updateImageWithAppV2Patch(\n+      String imageName,\n+      List<String> appDirList\n+  ) {\n+    DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n+    Date date = new Date();\n+    final String imageTag = dateFormat.format(date) + \"-\" + System.currentTimeMillis();\n+    // Add repository name in image name for Jenkins runs\n+    final String imageNameReal = REPO_USERNAME.equals(REPO_DUMMY_VALUE) ? imageName : REPO_NAME + imageName;\n+    String image = String.format(\"%s:%s\",  imageNameReal, imageTag);\n+    \n+    // build the model file list\n+    List<String> modelList = \n+        Collections.singletonList(String.format(\"%s/%s\", MODEL_DIR, WDT_MODEL_FILE));\n+   \n+    // build an application archive\n+    assertTrue(\n+        buildAppArchive(\n+            defaultAppParams()\n+                .srcDirList(appDirList)),\n+        String.format(\"Failed to create app archive for %s\",\n+            APP_NAME));\n+\n+    // build the archive list\n+    List<String> archiveList = \n+        Collections.singletonList(\n+            String.format(\"%s/%s.zip\", ARCHIVE_DIR, APP_NAME));\n+    \n+    createImageAndVerify(imageNameReal, imageTag, modelList, archiveList);\n+    \n+    return image;\n+  }\n+\n+  private String updateImageWithSampleApp3(\n+      String imageName,\n+      List<String> appDirList1,\n+      List<String> appDirList2,\n+      String modelFile\n+  ) {\n+    DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n+    Date date = new Date();\n+    final String imageTag = dateFormat.format(date) + \"-\" + System.currentTimeMillis();\n+    // Add repository name in image name for Jenkins runs\n+    final String imageNameReal = REPO_USERNAME.equals(REPO_DUMMY_VALUE) ? imageName : REPO_NAME + imageName;\n+    String image = String.format(\"%s:%s\",  imageNameReal, imageTag);\n+    \n+    // build the model file list\n+    List<String> modelList = Collections.singletonList(MODEL_DIR + \"/\" + modelFile);\n+ \n+    String appName1 = appDirList1.get(0);\n+    String appName2 = appDirList2.get(0);\n+    \n+    // build an application archive that contains the existing app\n+    assertTrue(\n+        buildAppArchive(\n+            defaultAppParams()\n+                .srcDirList(appDirList1)\n+                .appName(appName1)),\n+        String.format(\"Failed to create app archive for %s\",\n+            appName1));\n+    \n+    logger.info(\"Successfully created app zip file: \" + appName1);\n+     \n+    // build an application archive that contains the new app\n+    assertTrue(\n+        buildAppArchive(\n+            defaultAppParams()\n+                .srcDirList(appDirList2)\n+                .appName(appName2)),\n+        String.format(\"Failed to create app archive for %s\",\n+            appName2));\n+    \n+    logger.info(\"Successfully cteated app zip file: \" + appName2); \n+    \n+    // build the archive list with two zip files\n+    List<String> archiveList = Arrays.asList(\n+        String.format(\"%s/%s.zip\", ARCHIVE_DIR, appName1),\n+        String.format(\"%s/%s.zip\", ARCHIVE_DIR, appName2));\n+    \n+    createImageAndVerify(imageNameReal, imageTag, modelList, archiveList);\n+    \n+    return image;\n+  }\n+\n+  /**\n+   * Patch the domain resource with a new image.\n+   * Here is an example of the JSON patch string that is constructed in this method.\n+   * [\n+   *   {\"op\": \"replace\", \"path\": \"/spec/image\", \"value\": \"mii-image:v2\" }\n+   * ]\n+   * \n+   * @param domainUid unique identifier of the domain resource", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 498}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU1NTgxOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDozNDo1NVrOGRAdZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDozNDo1NVrOGRAdZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NjUwMQ==", "bodyText": "which domain resource?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420486501", "createdAt": "2020-05-06T00:34:55Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -543,23 +786,152 @@ private String createImageAndVerify() {\n     final String image = imageName + \":\" + imageTag;\n \n     // build the model file list\n-    final List<String> modelList = Collections.singletonList(MODEL_DIR + \"/\" + WDT_MODEL_FILE);\n+    final List<String> modelList = \n+        Collections.singletonList(String.format(\"%s/%s\", MODEL_DIR, WDT_MODEL_FILE));\n \n     // build an application archive using what is in resources/apps/APP_NAME\n     assertTrue(buildAppArchive(defaultAppParams()\n-        .srcDir(APP_NAME)), String.format(\"Failed to create app archive for %s\", APP_NAME));\n+        .srcDirList(Collections.singletonList(APP_NAME))), \n+        String.format(\"Failed to create app archive for %s\", APP_NAME));\n \n     // build the archive list\n-    String zipFile = String.format(\"%s/%s.zip\", ARCHIVE_DIR, APP_NAME);\n-    final List<String> archiveList = Collections.singletonList(zipFile);\n+    List<String> archiveList = \n+        Collections.singletonList(String.format(\"%s/%s.zip\", ARCHIVE_DIR, APP_NAME));\n+\n+    createImageAndVerify(imageName, imageTag, modelList, archiveList);\n+\n+    return image;\n+  }\n+  \n+  private String updateImageWithAppV2Patch(\n+      String imageName,\n+      List<String> appDirList\n+  ) {\n+    DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n+    Date date = new Date();\n+    final String imageTag = dateFormat.format(date) + \"-\" + System.currentTimeMillis();\n+    // Add repository name in image name for Jenkins runs\n+    final String imageNameReal = REPO_USERNAME.equals(REPO_DUMMY_VALUE) ? imageName : REPO_NAME + imageName;\n+    String image = String.format(\"%s:%s\",  imageNameReal, imageTag);\n+    \n+    // build the model file list\n+    List<String> modelList = \n+        Collections.singletonList(String.format(\"%s/%s\", MODEL_DIR, WDT_MODEL_FILE));\n+   \n+    // build an application archive\n+    assertTrue(\n+        buildAppArchive(\n+            defaultAppParams()\n+                .srcDirList(appDirList)),\n+        String.format(\"Failed to create app archive for %s\",\n+            APP_NAME));\n+\n+    // build the archive list\n+    List<String> archiveList = \n+        Collections.singletonList(\n+            String.format(\"%s/%s.zip\", ARCHIVE_DIR, APP_NAME));\n+    \n+    createImageAndVerify(imageNameReal, imageTag, modelList, archiveList);\n+    \n+    return image;\n+  }\n+\n+  private String updateImageWithSampleApp3(\n+      String imageName,\n+      List<String> appDirList1,\n+      List<String> appDirList2,\n+      String modelFile\n+  ) {\n+    DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n+    Date date = new Date();\n+    final String imageTag = dateFormat.format(date) + \"-\" + System.currentTimeMillis();\n+    // Add repository name in image name for Jenkins runs\n+    final String imageNameReal = REPO_USERNAME.equals(REPO_DUMMY_VALUE) ? imageName : REPO_NAME + imageName;\n+    String image = String.format(\"%s:%s\",  imageNameReal, imageTag);\n+    \n+    // build the model file list\n+    List<String> modelList = Collections.singletonList(MODEL_DIR + \"/\" + modelFile);\n+ \n+    String appName1 = appDirList1.get(0);\n+    String appName2 = appDirList2.get(0);\n+    \n+    // build an application archive that contains the existing app\n+    assertTrue(\n+        buildAppArchive(\n+            defaultAppParams()\n+                .srcDirList(appDirList1)\n+                .appName(appName1)),\n+        String.format(\"Failed to create app archive for %s\",\n+            appName1));\n+    \n+    logger.info(\"Successfully created app zip file: \" + appName1);\n+     \n+    // build an application archive that contains the new app\n+    assertTrue(\n+        buildAppArchive(\n+            defaultAppParams()\n+                .srcDirList(appDirList2)\n+                .appName(appName2)),\n+        String.format(\"Failed to create app archive for %s\",\n+            appName2));\n+    \n+    logger.info(\"Successfully cteated app zip file: \" + appName2); \n+    \n+    // build the archive list with two zip files\n+    List<String> archiveList = Arrays.asList(\n+        String.format(\"%s/%s.zip\", ARCHIVE_DIR, appName1),\n+        String.format(\"%s/%s.zip\", ARCHIVE_DIR, appName2));\n+    \n+    createImageAndVerify(imageNameReal, imageTag, modelList, archiveList);\n+    \n+    return image;\n+  }\n+\n+  /**\n+   * Patch the domain resource with a new image.\n+   * Here is an example of the JSON patch string that is constructed in this method.\n+   * [\n+   *   {\"op\": \"replace\", \"path\": \"/spec/image\", \"value\": \"mii-image:v2\" }\n+   * ]\n+   * \n+   * @param domainUid unique identifier of the domain resource\n+   * @param namespace Kubernetes namespace that the domain is hosted\n+   * @param image name of the new image\n+   */\n+  private void patchDomainResourceIamge(\n+      String domainUid,\n+      String namespace,\n+      String image\n+  ) {\n+    String patch = \n+        String.format(\"[\\n  {\\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/spec/image\\\", \\\"value\\\": \\\"%s\\\"}\\n]\\n\",\n+            image);\n+    logger.info(\"About to patch the domain resource with:\\n\" + patch);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 510}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU1NjIzOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDozNToxNlrOGRAdpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDozNToxNlrOGRAdpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NjU2Nw==", "bodyText": "spelling?\nwhich domain resource? which image?\nmake the log messages more informative", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420486567", "createdAt": "2020-05-06T00:35:16Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -543,23 +786,152 @@ private String createImageAndVerify() {\n     final String image = imageName + \":\" + imageTag;\n \n     // build the model file list\n-    final List<String> modelList = Collections.singletonList(MODEL_DIR + \"/\" + WDT_MODEL_FILE);\n+    final List<String> modelList = \n+        Collections.singletonList(String.format(\"%s/%s\", MODEL_DIR, WDT_MODEL_FILE));\n \n     // build an application archive using what is in resources/apps/APP_NAME\n     assertTrue(buildAppArchive(defaultAppParams()\n-        .srcDir(APP_NAME)), String.format(\"Failed to create app archive for %s\", APP_NAME));\n+        .srcDirList(Collections.singletonList(APP_NAME))), \n+        String.format(\"Failed to create app archive for %s\", APP_NAME));\n \n     // build the archive list\n-    String zipFile = String.format(\"%s/%s.zip\", ARCHIVE_DIR, APP_NAME);\n-    final List<String> archiveList = Collections.singletonList(zipFile);\n+    List<String> archiveList = \n+        Collections.singletonList(String.format(\"%s/%s.zip\", ARCHIVE_DIR, APP_NAME));\n+\n+    createImageAndVerify(imageName, imageTag, modelList, archiveList);\n+\n+    return image;\n+  }\n+  \n+  private String updateImageWithAppV2Patch(\n+      String imageName,\n+      List<String> appDirList\n+  ) {\n+    DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n+    Date date = new Date();\n+    final String imageTag = dateFormat.format(date) + \"-\" + System.currentTimeMillis();\n+    // Add repository name in image name for Jenkins runs\n+    final String imageNameReal = REPO_USERNAME.equals(REPO_DUMMY_VALUE) ? imageName : REPO_NAME + imageName;\n+    String image = String.format(\"%s:%s\",  imageNameReal, imageTag);\n+    \n+    // build the model file list\n+    List<String> modelList = \n+        Collections.singletonList(String.format(\"%s/%s\", MODEL_DIR, WDT_MODEL_FILE));\n+   \n+    // build an application archive\n+    assertTrue(\n+        buildAppArchive(\n+            defaultAppParams()\n+                .srcDirList(appDirList)),\n+        String.format(\"Failed to create app archive for %s\",\n+            APP_NAME));\n+\n+    // build the archive list\n+    List<String> archiveList = \n+        Collections.singletonList(\n+            String.format(\"%s/%s.zip\", ARCHIVE_DIR, APP_NAME));\n+    \n+    createImageAndVerify(imageNameReal, imageTag, modelList, archiveList);\n+    \n+    return image;\n+  }\n+\n+  private String updateImageWithSampleApp3(\n+      String imageName,\n+      List<String> appDirList1,\n+      List<String> appDirList2,\n+      String modelFile\n+  ) {\n+    DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n+    Date date = new Date();\n+    final String imageTag = dateFormat.format(date) + \"-\" + System.currentTimeMillis();\n+    // Add repository name in image name for Jenkins runs\n+    final String imageNameReal = REPO_USERNAME.equals(REPO_DUMMY_VALUE) ? imageName : REPO_NAME + imageName;\n+    String image = String.format(\"%s:%s\",  imageNameReal, imageTag);\n+    \n+    // build the model file list\n+    List<String> modelList = Collections.singletonList(MODEL_DIR + \"/\" + modelFile);\n+ \n+    String appName1 = appDirList1.get(0);\n+    String appName2 = appDirList2.get(0);\n+    \n+    // build an application archive that contains the existing app\n+    assertTrue(\n+        buildAppArchive(\n+            defaultAppParams()\n+                .srcDirList(appDirList1)\n+                .appName(appName1)),\n+        String.format(\"Failed to create app archive for %s\",\n+            appName1));\n+    \n+    logger.info(\"Successfully created app zip file: \" + appName1);\n+     \n+    // build an application archive that contains the new app\n+    assertTrue(\n+        buildAppArchive(\n+            defaultAppParams()\n+                .srcDirList(appDirList2)\n+                .appName(appName2)),\n+        String.format(\"Failed to create app archive for %s\",\n+            appName2));\n+    \n+    logger.info(\"Successfully cteated app zip file: \" + appName2); \n+    \n+    // build the archive list with two zip files\n+    List<String> archiveList = Arrays.asList(\n+        String.format(\"%s/%s.zip\", ARCHIVE_DIR, appName1),\n+        String.format(\"%s/%s.zip\", ARCHIVE_DIR, appName2));\n+    \n+    createImageAndVerify(imageNameReal, imageTag, modelList, archiveList);\n+    \n+    return image;\n+  }\n+\n+  /**\n+   * Patch the domain resource with a new image.\n+   * Here is an example of the JSON patch string that is constructed in this method.\n+   * [\n+   *   {\"op\": \"replace\", \"path\": \"/spec/image\", \"value\": \"mii-image:v2\" }\n+   * ]\n+   * \n+   * @param domainUid unique identifier of the domain resource\n+   * @param namespace Kubernetes namespace that the domain is hosted\n+   * @param image name of the new image\n+   */\n+  private void patchDomainResourceIamge(\n+      String domainUid,\n+      String namespace,\n+      String image\n+  ) {\n+    String patch = \n+        String.format(\"[\\n  {\\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/spec/image\\\", \\\"value\\\": \\\"%s\\\"}\\n]\\n\",\n+            image);\n+    logger.info(\"About to patch the domain resource with:\\n\" + patch);\n+\n+    assertTrue(patchDomainCustomResource(\n+            domainUid,\n+            namespace,\n+            new V1Patch(patch),\n+            V1Patch.PATCH_FORMAT_JSON_PATCH),\n+        \"Failed to patch the domain resource with a  a different image.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 517}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU1Njk5OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDozNTozOFrOGRAeGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODo0MToyMFrOGRgdOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NjY4MQ==", "bodyText": "no logging?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420486681", "createdAt": "2020-05-06T00:35:38Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -693,6 +1063,38 @@ private void checkPodCreated(String podName, String domainUid, String domNamespa\n \n   }\n \n+  private void patchAndVerify(\n+      final String domainUid,\n+      final String namespace,\n+      final String adminServerPodName,\n+      final String managedServerPrefix,\n+      final int replicaCount,\n+      final String image\n+  ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 560}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxMDc0NQ==", "bodyText": "added", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r421010745", "createdAt": "2020-05-06T18:41:20Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -693,6 +1063,38 @@ private void checkPodCreated(String podName, String domainUid, String domNamespa\n \n   }\n \n+  private void patchAndVerify(\n+      final String domainUid,\n+      final String namespace,\n+      final String adminServerPodName,\n+      final String managedServerPrefix,\n+      final int replicaCount,\n+      final String image\n+  ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NjY4MQ=="}, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 560}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU1ODQ2OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDozNjozNVrOGRAe6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDozNjozNVrOGRAe6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4Njg5MQ==", "bodyText": "should be checking the return values, or catching exceptions, or something here...", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420486891", "createdAt": "2020-05-06T00:36:35Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -693,6 +1063,38 @@ private void checkPodCreated(String podName, String domainUid, String domNamespa\n \n   }\n \n+  private void patchAndVerify(\n+      final String domainUid,\n+      final String namespace,\n+      final String adminServerPodName,\n+      final String managedServerPrefix,\n+      final int replicaCount,\n+      final String image\n+  ) {\n+    // modify the domain resource to use the new image\n+    patchDomainResourceIamge(domainUid, namespace, image);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 562}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU1OTY4OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDozNzoyM1rOGRAfrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODo0MToyOVrOGRgdlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NzA4NQ==", "bodyText": "duplicate code - refactor", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420487085", "createdAt": "2020-05-06T00:37:23Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -719,27 +1121,210 @@ private void checkServiceCreated(String serviceName, String domNamespace) {\n                 condition.getRemainingTimeInMS()))\n         .until(assertDoesNotThrow(() -> serviceExists(serviceName, null, domNamespace),\n             String.format(\n-                \"Service %s is not ready in namespace %s\", serviceName, domainNamespace)));\n+                \"Service %s is not ready in namespace %s\", serviceName, domNamespace)));\n \n   }\n \n-  private void checkServerReadyStatusByExec(String podName, String namespace) {\n-    final V1Pod pod = assertDoesNotThrow(() -> oracle.weblogic.kubernetes.assertions.impl.Kubernetes\n-        .getPod(namespace, null, podName));\n-\n-    if (pod != null) {\n-      ExecResult execResult = assertDoesNotThrow(\n-          () -> execCommand(pod, null, true, READ_STATE_COMMAND));\n-      if (execResult.exitValue() == 0) {\n-        logger.info(\"execResult: \" + execResult);\n-        assertEquals(\"RUNNING\", execResult.stdout(),\n-            \"Expected \" + podName + \", in namespace \" + namespace + \", to be in RUNNING ready status\");\n+  private void checkAppRunning(\n+      String namespace,\n+      String podName,\n+      String internalPort,\n+      String appPath,\n+      String expectedStr\n+  ) {\n+   \n+    // check if the app is accessible inside of a server pod\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for application {0} to be ready on {1} in namespace {2} \"\n+            + \"(elapsed time {3}ms, remaining time {4}ms)\",\n+            appPath,\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(() -> appAccessibleInPod(\n+                namespace, \n+                podName, \n+                internalPort, \n+                appPath, \n+                expectedStr));\n+\n+  }\n+  \n+  private void quickCheckAppRunning(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 635}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxMDgzNg==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r421010836", "createdAt": "2020-05-06T18:41:29Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -719,27 +1121,210 @@ private void checkServiceCreated(String serviceName, String domNamespace) {\n                 condition.getRemainingTimeInMS()))\n         .until(assertDoesNotThrow(() -> serviceExists(serviceName, null, domNamespace),\n             String.format(\n-                \"Service %s is not ready in namespace %s\", serviceName, domainNamespace)));\n+                \"Service %s is not ready in namespace %s\", serviceName, domNamespace)));\n \n   }\n \n-  private void checkServerReadyStatusByExec(String podName, String namespace) {\n-    final V1Pod pod = assertDoesNotThrow(() -> oracle.weblogic.kubernetes.assertions.impl.Kubernetes\n-        .getPod(namespace, null, podName));\n-\n-    if (pod != null) {\n-      ExecResult execResult = assertDoesNotThrow(\n-          () -> execCommand(pod, null, true, READ_STATE_COMMAND));\n-      if (execResult.exitValue() == 0) {\n-        logger.info(\"execResult: \" + execResult);\n-        assertEquals(\"RUNNING\", execResult.stdout(),\n-            \"Expected \" + podName + \", in namespace \" + namespace + \", to be in RUNNING ready status\");\n+  private void checkAppRunning(\n+      String namespace,\n+      String podName,\n+      String internalPort,\n+      String appPath,\n+      String expectedStr\n+  ) {\n+   \n+    // check if the app is accessible inside of a server pod\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for application {0} to be ready on {1} in namespace {2} \"\n+            + \"(elapsed time {3}ms, remaining time {4}ms)\",\n+            appPath,\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(() -> appAccessibleInPod(\n+                namespace, \n+                podName, \n+                internalPort, \n+                appPath, \n+                expectedStr));\n+\n+  }\n+  \n+  private void quickCheckAppRunning(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NzA4NQ=="}, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 635}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU2MDE1OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDozNzozN1rOGRAf7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODo0MTo0OVrOGRgeZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NzE0OA==", "bodyText": "duplication", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420487148", "createdAt": "2020-05-06T00:37:37Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -719,27 +1121,210 @@ private void checkServiceCreated(String serviceName, String domNamespace) {\n                 condition.getRemainingTimeInMS()))\n         .until(assertDoesNotThrow(() -> serviceExists(serviceName, null, domNamespace),\n             String.format(\n-                \"Service %s is not ready in namespace %s\", serviceName, domainNamespace)));\n+                \"Service %s is not ready in namespace %s\", serviceName, domNamespace)));\n \n   }\n \n-  private void checkServerReadyStatusByExec(String podName, String namespace) {\n-    final V1Pod pod = assertDoesNotThrow(() -> oracle.weblogic.kubernetes.assertions.impl.Kubernetes\n-        .getPod(namespace, null, podName));\n-\n-    if (pod != null) {\n-      ExecResult execResult = assertDoesNotThrow(\n-          () -> execCommand(pod, null, true, READ_STATE_COMMAND));\n-      if (execResult.exitValue() == 0) {\n-        logger.info(\"execResult: \" + execResult);\n-        assertEquals(\"RUNNING\", execResult.stdout(),\n-            \"Expected \" + podName + \", in namespace \" + namespace + \", to be in RUNNING ready status\");\n+  private void checkAppRunning(\n+      String namespace,\n+      String podName,\n+      String internalPort,\n+      String appPath,\n+      String expectedStr\n+  ) {\n+   \n+    // check if the app is accessible inside of a server pod\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for application {0} to be ready on {1} in namespace {2} \"\n+            + \"(elapsed time {3}ms, remaining time {4}ms)\",\n+            appPath,\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(() -> appAccessibleInPod(\n+                namespace, \n+                podName, \n+                internalPort, \n+                appPath, \n+                expectedStr));\n+\n+  }\n+  \n+  private void quickCheckAppRunning(\n+      String namespace,\n+      String podName,\n+      String internalPort,\n+      String appPath,\n+      String expectedStr\n+  ) {\n+   \n+    // check if the app is accessible inside of a server pod\n+    withQuickRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Checking if application {0} is running on pod {1} in namespace {2} \"\n+            + \"(elapsed time {3}ms, remaining time {4}ms)\",\n+            appPath,\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(() -> appAccessibleInPod(\n+                namespace,\n+                podName, \n+                internalPort, \n+                appPath, \n+                expectedStr));\n+\n+  }\n+  \n+  private void quickCheckAppNotRunning(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 662}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxMTA0Ng==", "bodyText": "refactored the code a little", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r421011046", "createdAt": "2020-05-06T18:41:49Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -719,27 +1121,210 @@ private void checkServiceCreated(String serviceName, String domNamespace) {\n                 condition.getRemainingTimeInMS()))\n         .until(assertDoesNotThrow(() -> serviceExists(serviceName, null, domNamespace),\n             String.format(\n-                \"Service %s is not ready in namespace %s\", serviceName, domainNamespace)));\n+                \"Service %s is not ready in namespace %s\", serviceName, domNamespace)));\n \n   }\n \n-  private void checkServerReadyStatusByExec(String podName, String namespace) {\n-    final V1Pod pod = assertDoesNotThrow(() -> oracle.weblogic.kubernetes.assertions.impl.Kubernetes\n-        .getPod(namespace, null, podName));\n-\n-    if (pod != null) {\n-      ExecResult execResult = assertDoesNotThrow(\n-          () -> execCommand(pod, null, true, READ_STATE_COMMAND));\n-      if (execResult.exitValue() == 0) {\n-        logger.info(\"execResult: \" + execResult);\n-        assertEquals(\"RUNNING\", execResult.stdout(),\n-            \"Expected \" + podName + \", in namespace \" + namespace + \", to be in RUNNING ready status\");\n+  private void checkAppRunning(\n+      String namespace,\n+      String podName,\n+      String internalPort,\n+      String appPath,\n+      String expectedStr\n+  ) {\n+   \n+    // check if the app is accessible inside of a server pod\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for application {0} to be ready on {1} in namespace {2} \"\n+            + \"(elapsed time {3}ms, remaining time {4}ms)\",\n+            appPath,\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(() -> appAccessibleInPod(\n+                namespace, \n+                podName, \n+                internalPort, \n+                appPath, \n+                expectedStr));\n+\n+  }\n+  \n+  private void quickCheckAppRunning(\n+      String namespace,\n+      String podName,\n+      String internalPort,\n+      String appPath,\n+      String expectedStr\n+  ) {\n+   \n+    // check if the app is accessible inside of a server pod\n+    withQuickRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Checking if application {0} is running on pod {1} in namespace {2} \"\n+            + \"(elapsed time {3}ms, remaining time {4}ms)\",\n+            appPath,\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(() -> appAccessibleInPod(\n+                namespace,\n+                podName, \n+                internalPort, \n+                appPath, \n+                expectedStr));\n+\n+  }\n+  \n+  private void quickCheckAppNotRunning(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NzE0OA=="}, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 662}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU2MTA4OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDozODoxNlrOGRAgiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDozODoxNlrOGRAgiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NzMwNA==", "bodyText": "initialize?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420487304", "createdAt": "2020-05-06T00:38:16Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -719,27 +1121,210 @@ private void checkServiceCreated(String serviceName, String domNamespace) {\n                 condition.getRemainingTimeInMS()))\n         .until(assertDoesNotThrow(() -> serviceExists(serviceName, null, domNamespace),\n             String.format(\n-                \"Service %s is not ready in namespace %s\", serviceName, domainNamespace)));\n+                \"Service %s is not ready in namespace %s\", serviceName, domNamespace)));\n \n   }\n \n-  private void checkServerReadyStatusByExec(String podName, String namespace) {\n-    final V1Pod pod = assertDoesNotThrow(() -> oracle.weblogic.kubernetes.assertions.impl.Kubernetes\n-        .getPod(namespace, null, podName));\n-\n-    if (pod != null) {\n-      ExecResult execResult = assertDoesNotThrow(\n-          () -> execCommand(pod, null, true, READ_STATE_COMMAND));\n-      if (execResult.exitValue() == 0) {\n-        logger.info(\"execResult: \" + execResult);\n-        assertEquals(\"RUNNING\", execResult.stdout(),\n-            \"Expected \" + podName + \", in namespace \" + namespace + \", to be in RUNNING ready status\");\n+  private void checkAppRunning(\n+      String namespace,\n+      String podName,\n+      String internalPort,\n+      String appPath,\n+      String expectedStr\n+  ) {\n+   \n+    // check if the app is accessible inside of a server pod\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for application {0} to be ready on {1} in namespace {2} \"\n+            + \"(elapsed time {3}ms, remaining time {4}ms)\",\n+            appPath,\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(() -> appAccessibleInPod(\n+                namespace, \n+                podName, \n+                internalPort, \n+                appPath, \n+                expectedStr));\n+\n+  }\n+  \n+  private void quickCheckAppRunning(\n+      String namespace,\n+      String podName,\n+      String internalPort,\n+      String appPath,\n+      String expectedStr\n+  ) {\n+   \n+    // check if the app is accessible inside of a server pod\n+    withQuickRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Checking if application {0} is running on pod {1} in namespace {2} \"\n+            + \"(elapsed time {3}ms, remaining time {4}ms)\",\n+            appPath,\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(() -> appAccessibleInPod(\n+                namespace,\n+                podName, \n+                internalPort, \n+                appPath, \n+                expectedStr));\n+\n+  }\n+  \n+  private void quickCheckAppNotRunning(\n+      String namespace,\n+      String podName,\n+      String internalPort,\n+      String appPath,\n+      String expectedStr\n+  ) {\n+   \n+    // check if the app is not running inside of a server pod\n+    withQuickRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Checking if application {0} is not running on pod {1} in namespace {2} \"\n+            + \"(elapsed time {3}ms, remaining time {4}ms)\",\n+            appPath,\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(() -> appNotAccessibleInPod(\n+                namespace, \n+                podName,\n+                internalPort, \n+                appPath, \n+                expectedStr));\n+  }\n+   \n+  private void checkDomainPatched(\n+      String domainUid,\n+      String namespace,\n+      String image \n+  ) {\n+   \n+    // check if the domain resource has been patched with the given image\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be patched in namespace {1} \"\n+            + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+            domainUid,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> domainResourceImagePatched(domainUid, namespace, image),\n+            String.format(\n+               \"Domain %s is not patched in namespace %s with image %s\", domainUid, namespace, image)));\n+\n+  }\n+  \n+  private void checkPodImagePatched(\n+      String domainUid,\n+      String namespace,\n+      String podName,\n+      String image\n+  ) {\n+   \n+    // check if the server pod has been patched with the given image\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be patched in namespace {1} \"\n+            + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podImagePatched(domainUid, namespace, podName, image),\n+            String.format(\n+               \"Pod %s is not patched with image %s in namespace %s.\",\n+               podName,\n+               image,\n+               namespace)));\n+  }\n+  \n+  private static void collectAppAvaiability(\n+      String namespace,\n+      List<Integer> appAvailability,\n+      String managedServerPrefix,\n+      int replicaCount,\n+      String internalPort,\n+      String appPath\n+  ) {\n+    boolean v2AppAvailable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 741}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU2MjAzOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDozODo0N1rOGRAhCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDozOTowNFrOGRAheg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NzQzNA==", "bodyText": "surely you're not pinging it  - fix this doc", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420487434", "createdAt": "2020-05-06T00:38:47Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -719,27 +1121,210 @@ private void checkServiceCreated(String serviceName, String domNamespace) {\n                 condition.getRemainingTimeInMS()))\n         .until(assertDoesNotThrow(() -> serviceExists(serviceName, null, domNamespace),\n             String.format(\n-                \"Service %s is not ready in namespace %s\", serviceName, domainNamespace)));\n+                \"Service %s is not ready in namespace %s\", serviceName, domNamespace)));\n \n   }\n \n-  private void checkServerReadyStatusByExec(String podName, String namespace) {\n-    final V1Pod pod = assertDoesNotThrow(() -> oracle.weblogic.kubernetes.assertions.impl.Kubernetes\n-        .getPod(namespace, null, podName));\n-\n-    if (pod != null) {\n-      ExecResult execResult = assertDoesNotThrow(\n-          () -> execCommand(pod, null, true, READ_STATE_COMMAND));\n-      if (execResult.exitValue() == 0) {\n-        logger.info(\"execResult: \" + execResult);\n-        assertEquals(\"RUNNING\", execResult.stdout(),\n-            \"Expected \" + podName + \", in namespace \" + namespace + \", to be in RUNNING ready status\");\n+  private void checkAppRunning(\n+      String namespace,\n+      String podName,\n+      String internalPort,\n+      String appPath,\n+      String expectedStr\n+  ) {\n+   \n+    // check if the app is accessible inside of a server pod\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for application {0} to be ready on {1} in namespace {2} \"\n+            + \"(elapsed time {3}ms, remaining time {4}ms)\",\n+            appPath,\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(() -> appAccessibleInPod(\n+                namespace, \n+                podName, \n+                internalPort, \n+                appPath, \n+                expectedStr));\n+\n+  }\n+  \n+  private void quickCheckAppRunning(\n+      String namespace,\n+      String podName,\n+      String internalPort,\n+      String appPath,\n+      String expectedStr\n+  ) {\n+   \n+    // check if the app is accessible inside of a server pod\n+    withQuickRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Checking if application {0} is running on pod {1} in namespace {2} \"\n+            + \"(elapsed time {3}ms, remaining time {4}ms)\",\n+            appPath,\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(() -> appAccessibleInPod(\n+                namespace,\n+                podName, \n+                internalPort, \n+                appPath, \n+                expectedStr));\n+\n+  }\n+  \n+  private void quickCheckAppNotRunning(\n+      String namespace,\n+      String podName,\n+      String internalPort,\n+      String appPath,\n+      String expectedStr\n+  ) {\n+   \n+    // check if the app is not running inside of a server pod\n+    withQuickRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Checking if application {0} is not running on pod {1} in namespace {2} \"\n+            + \"(elapsed time {3}ms, remaining time {4}ms)\",\n+            appPath,\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(() -> appNotAccessibleInPod(\n+                namespace, \n+                podName,\n+                internalPort, \n+                appPath, \n+                expectedStr));\n+  }\n+   \n+  private void checkDomainPatched(\n+      String domainUid,\n+      String namespace,\n+      String image \n+  ) {\n+   \n+    // check if the domain resource has been patched with the given image\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be patched in namespace {1} \"\n+            + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+            domainUid,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> domainResourceImagePatched(domainUid, namespace, image),\n+            String.format(\n+               \"Domain %s is not patched in namespace %s with image %s\", domainUid, namespace, image)));\n+\n+  }\n+  \n+  private void checkPodImagePatched(\n+      String domainUid,\n+      String namespace,\n+      String podName,\n+      String image\n+  ) {\n+   \n+    // check if the server pod has been patched with the given image\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be patched in namespace {1} \"\n+            + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podImagePatched(domainUid, namespace, podName, image),\n+            String.format(\n+               \"Pod %s is not patched with image %s in namespace %s.\",\n+               podName,\n+               image,\n+               namespace)));\n+  }\n+  \n+  private static void collectAppAvaiability(\n+      String namespace,\n+      List<Integer> appAvailability,\n+      String managedServerPrefix,\n+      int replicaCount,\n+      String internalPort,\n+      String appPath\n+  ) {\n+    boolean v2AppAvailable;\n+ \n+    // ping the app periodically to check its availability across the duration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 743}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NzU0Ng==", "bodyText": "it's - possessive", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420487546", "createdAt": "2020-05-06T00:39:04Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -719,27 +1121,210 @@ private void checkServiceCreated(String serviceName, String domNamespace) {\n                 condition.getRemainingTimeInMS()))\n         .until(assertDoesNotThrow(() -> serviceExists(serviceName, null, domNamespace),\n             String.format(\n-                \"Service %s is not ready in namespace %s\", serviceName, domainNamespace)));\n+                \"Service %s is not ready in namespace %s\", serviceName, domNamespace)));\n \n   }\n \n-  private void checkServerReadyStatusByExec(String podName, String namespace) {\n-    final V1Pod pod = assertDoesNotThrow(() -> oracle.weblogic.kubernetes.assertions.impl.Kubernetes\n-        .getPod(namespace, null, podName));\n-\n-    if (pod != null) {\n-      ExecResult execResult = assertDoesNotThrow(\n-          () -> execCommand(pod, null, true, READ_STATE_COMMAND));\n-      if (execResult.exitValue() == 0) {\n-        logger.info(\"execResult: \" + execResult);\n-        assertEquals(\"RUNNING\", execResult.stdout(),\n-            \"Expected \" + podName + \", in namespace \" + namespace + \", to be in RUNNING ready status\");\n+  private void checkAppRunning(\n+      String namespace,\n+      String podName,\n+      String internalPort,\n+      String appPath,\n+      String expectedStr\n+  ) {\n+   \n+    // check if the app is accessible inside of a server pod\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for application {0} to be ready on {1} in namespace {2} \"\n+            + \"(elapsed time {3}ms, remaining time {4}ms)\",\n+            appPath,\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(() -> appAccessibleInPod(\n+                namespace, \n+                podName, \n+                internalPort, \n+                appPath, \n+                expectedStr));\n+\n+  }\n+  \n+  private void quickCheckAppRunning(\n+      String namespace,\n+      String podName,\n+      String internalPort,\n+      String appPath,\n+      String expectedStr\n+  ) {\n+   \n+    // check if the app is accessible inside of a server pod\n+    withQuickRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Checking if application {0} is running on pod {1} in namespace {2} \"\n+            + \"(elapsed time {3}ms, remaining time {4}ms)\",\n+            appPath,\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(() -> appAccessibleInPod(\n+                namespace,\n+                podName, \n+                internalPort, \n+                appPath, \n+                expectedStr));\n+\n+  }\n+  \n+  private void quickCheckAppNotRunning(\n+      String namespace,\n+      String podName,\n+      String internalPort,\n+      String appPath,\n+      String expectedStr\n+  ) {\n+   \n+    // check if the app is not running inside of a server pod\n+    withQuickRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Checking if application {0} is not running on pod {1} in namespace {2} \"\n+            + \"(elapsed time {3}ms, remaining time {4}ms)\",\n+            appPath,\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(() -> appNotAccessibleInPod(\n+                namespace, \n+                podName,\n+                internalPort, \n+                appPath, \n+                expectedStr));\n+  }\n+   \n+  private void checkDomainPatched(\n+      String domainUid,\n+      String namespace,\n+      String image \n+  ) {\n+   \n+    // check if the domain resource has been patched with the given image\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be patched in namespace {1} \"\n+            + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+            domainUid,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> domainResourceImagePatched(domainUid, namespace, image),\n+            String.format(\n+               \"Domain %s is not patched in namespace %s with image %s\", domainUid, namespace, image)));\n+\n+  }\n+  \n+  private void checkPodImagePatched(\n+      String domainUid,\n+      String namespace,\n+      String podName,\n+      String image\n+  ) {\n+   \n+    // check if the server pod has been patched with the given image\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be patched in namespace {1} \"\n+            + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podImagePatched(domainUid, namespace, podName, image),\n+            String.format(\n+               \"Pod %s is not patched with image %s in namespace %s.\",\n+               podName,\n+               image,\n+               namespace)));\n+  }\n+  \n+  private static void collectAppAvaiability(\n+      String namespace,\n+      List<Integer> appAvailability,\n+      String managedServerPrefix,\n+      int replicaCount,\n+      String internalPort,\n+      String appPath\n+  ) {\n+    boolean v2AppAvailable;\n+ \n+    // ping the app periodically to check its availability across the duration", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NzQzNA=="}, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 743}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU2MzQ2OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDozOToxNlrOGRAhsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDozOToxNlrOGRAhsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NzYwMw==", "bodyText": "application", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420487603", "createdAt": "2020-05-06T00:39:16Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -719,27 +1121,210 @@ private void checkServiceCreated(String serviceName, String domNamespace) {\n                 condition.getRemainingTimeInMS()))\n         .until(assertDoesNotThrow(() -> serviceExists(serviceName, null, domNamespace),\n             String.format(\n-                \"Service %s is not ready in namespace %s\", serviceName, domainNamespace)));\n+                \"Service %s is not ready in namespace %s\", serviceName, domNamespace)));\n \n   }\n \n-  private void checkServerReadyStatusByExec(String podName, String namespace) {\n-    final V1Pod pod = assertDoesNotThrow(() -> oracle.weblogic.kubernetes.assertions.impl.Kubernetes\n-        .getPod(namespace, null, podName));\n-\n-    if (pod != null) {\n-      ExecResult execResult = assertDoesNotThrow(\n-          () -> execCommand(pod, null, true, READ_STATE_COMMAND));\n-      if (execResult.exitValue() == 0) {\n-        logger.info(\"execResult: \" + execResult);\n-        assertEquals(\"RUNNING\", execResult.stdout(),\n-            \"Expected \" + podName + \", in namespace \" + namespace + \", to be in RUNNING ready status\");\n+  private void checkAppRunning(\n+      String namespace,\n+      String podName,\n+      String internalPort,\n+      String appPath,\n+      String expectedStr\n+  ) {\n+   \n+    // check if the app is accessible inside of a server pod\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for application {0} to be ready on {1} in namespace {2} \"\n+            + \"(elapsed time {3}ms, remaining time {4}ms)\",\n+            appPath,\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(() -> appAccessibleInPod(\n+                namespace, \n+                podName, \n+                internalPort, \n+                appPath, \n+                expectedStr));\n+\n+  }\n+  \n+  private void quickCheckAppRunning(\n+      String namespace,\n+      String podName,\n+      String internalPort,\n+      String appPath,\n+      String expectedStr\n+  ) {\n+   \n+    // check if the app is accessible inside of a server pod\n+    withQuickRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Checking if application {0} is running on pod {1} in namespace {2} \"\n+            + \"(elapsed time {3}ms, remaining time {4}ms)\",\n+            appPath,\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(() -> appAccessibleInPod(\n+                namespace,\n+                podName, \n+                internalPort, \n+                appPath, \n+                expectedStr));\n+\n+  }\n+  \n+  private void quickCheckAppNotRunning(\n+      String namespace,\n+      String podName,\n+      String internalPort,\n+      String appPath,\n+      String expectedStr\n+  ) {\n+   \n+    // check if the app is not running inside of a server pod\n+    withQuickRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Checking if application {0} is not running on pod {1} in namespace {2} \"\n+            + \"(elapsed time {3}ms, remaining time {4}ms)\",\n+            appPath,\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(() -> appNotAccessibleInPod(\n+                namespace, \n+                podName,\n+                internalPort, \n+                appPath, \n+                expectedStr));\n+  }\n+   \n+  private void checkDomainPatched(\n+      String domainUid,\n+      String namespace,\n+      String image \n+  ) {\n+   \n+    // check if the domain resource has been patched with the given image\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be patched in namespace {1} \"\n+            + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+            domainUid,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> domainResourceImagePatched(domainUid, namespace, image),\n+            String.format(\n+               \"Domain %s is not patched in namespace %s with image %s\", domainUid, namespace, image)));\n+\n+  }\n+  \n+  private void checkPodImagePatched(\n+      String domainUid,\n+      String namespace,\n+      String podName,\n+      String image\n+  ) {\n+   \n+    // check if the server pod has been patched with the given image\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be patched in namespace {1} \"\n+            + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podImagePatched(domainUid, namespace, podName, image),\n+            String.format(\n+               \"Pod %s is not patched with image %s in namespace %s.\",\n+               podName,\n+               image,\n+               namespace)));\n+  }\n+  \n+  private static void collectAppAvaiability(\n+      String namespace,\n+      List<Integer> appAvailability,\n+      String managedServerPrefix,\n+      int replicaCount,\n+      String internalPort,\n+      String appPath\n+  ) {\n+    boolean v2AppAvailable;\n+ \n+    // ping the app periodically to check its availability across the duration\n+    // of patching the domain with newer version of the app.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 744}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU2NDE2OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDozOTozNFrOGRAiEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODo0MjoyOFrOGRgf9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NzY5Nw==", "bodyText": "fix the problem then - don't work around it", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420487697", "createdAt": "2020-05-06T00:39:34Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -719,27 +1121,210 @@ private void checkServiceCreated(String serviceName, String domNamespace) {\n                 condition.getRemainingTimeInMS()))\n         .until(assertDoesNotThrow(() -> serviceExists(serviceName, null, domNamespace),\n             String.format(\n-                \"Service %s is not ready in namespace %s\", serviceName, domainNamespace)));\n+                \"Service %s is not ready in namespace %s\", serviceName, domNamespace)));\n \n   }\n \n-  private void checkServerReadyStatusByExec(String podName, String namespace) {\n-    final V1Pod pod = assertDoesNotThrow(() -> oracle.weblogic.kubernetes.assertions.impl.Kubernetes\n-        .getPod(namespace, null, podName));\n-\n-    if (pod != null) {\n-      ExecResult execResult = assertDoesNotThrow(\n-          () -> execCommand(pod, null, true, READ_STATE_COMMAND));\n-      if (execResult.exitValue() == 0) {\n-        logger.info(\"execResult: \" + execResult);\n-        assertEquals(\"RUNNING\", execResult.stdout(),\n-            \"Expected \" + podName + \", in namespace \" + namespace + \", to be in RUNNING ready status\");\n+  private void checkAppRunning(\n+      String namespace,\n+      String podName,\n+      String internalPort,\n+      String appPath,\n+      String expectedStr\n+  ) {\n+   \n+    // check if the app is accessible inside of a server pod\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for application {0} to be ready on {1} in namespace {2} \"\n+            + \"(elapsed time {3}ms, remaining time {4}ms)\",\n+            appPath,\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(() -> appAccessibleInPod(\n+                namespace, \n+                podName, \n+                internalPort, \n+                appPath, \n+                expectedStr));\n+\n+  }\n+  \n+  private void quickCheckAppRunning(\n+      String namespace,\n+      String podName,\n+      String internalPort,\n+      String appPath,\n+      String expectedStr\n+  ) {\n+   \n+    // check if the app is accessible inside of a server pod\n+    withQuickRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Checking if application {0} is running on pod {1} in namespace {2} \"\n+            + \"(elapsed time {3}ms, remaining time {4}ms)\",\n+            appPath,\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(() -> appAccessibleInPod(\n+                namespace,\n+                podName, \n+                internalPort, \n+                appPath, \n+                expectedStr));\n+\n+  }\n+  \n+  private void quickCheckAppNotRunning(\n+      String namespace,\n+      String podName,\n+      String internalPort,\n+      String appPath,\n+      String expectedStr\n+  ) {\n+   \n+    // check if the app is not running inside of a server pod\n+    withQuickRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Checking if application {0} is not running on pod {1} in namespace {2} \"\n+            + \"(elapsed time {3}ms, remaining time {4}ms)\",\n+            appPath,\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(() -> appNotAccessibleInPod(\n+                namespace, \n+                podName,\n+                internalPort, \n+                appPath, \n+                expectedStr));\n+  }\n+   \n+  private void checkDomainPatched(\n+      String domainUid,\n+      String namespace,\n+      String image \n+  ) {\n+   \n+    // check if the domain resource has been patched with the given image\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be patched in namespace {1} \"\n+            + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+            domainUid,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> domainResourceImagePatched(domainUid, namespace, image),\n+            String.format(\n+               \"Domain %s is not patched in namespace %s with image %s\", domainUid, namespace, image)));\n+\n+  }\n+  \n+  private void checkPodImagePatched(\n+      String domainUid,\n+      String namespace,\n+      String podName,\n+      String image\n+  ) {\n+   \n+    // check if the server pod has been patched with the given image\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be patched in namespace {1} \"\n+            + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podImagePatched(domainUid, namespace, podName, image),\n+            String.format(\n+               \"Pod %s is not patched with image %s in namespace %s.\",\n+               podName,\n+               image,\n+               namespace)));\n+  }\n+  \n+  private static void collectAppAvaiability(\n+      String namespace,\n+      List<Integer> appAvailability,\n+      String managedServerPrefix,\n+      int replicaCount,\n+      String internalPort,\n+      String appPath\n+  ) {\n+    boolean v2AppAvailable;\n+ \n+    // ping the app periodically to check its availability across the duration\n+    // of patching the domain with newer version of the app.\n+    // Note: we use the \"kubectl exec\" command in this method only. This is to avoid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 745}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxMTQ0Nw==", "bodyText": "Lenny is  working on this issue.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r421011447", "createdAt": "2020-05-06T18:42:28Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -719,27 +1121,210 @@ private void checkServiceCreated(String serviceName, String domNamespace) {\n                 condition.getRemainingTimeInMS()))\n         .until(assertDoesNotThrow(() -> serviceExists(serviceName, null, domNamespace),\n             String.format(\n-                \"Service %s is not ready in namespace %s\", serviceName, domainNamespace)));\n+                \"Service %s is not ready in namespace %s\", serviceName, domNamespace)));\n \n   }\n \n-  private void checkServerReadyStatusByExec(String podName, String namespace) {\n-    final V1Pod pod = assertDoesNotThrow(() -> oracle.weblogic.kubernetes.assertions.impl.Kubernetes\n-        .getPod(namespace, null, podName));\n-\n-    if (pod != null) {\n-      ExecResult execResult = assertDoesNotThrow(\n-          () -> execCommand(pod, null, true, READ_STATE_COMMAND));\n-      if (execResult.exitValue() == 0) {\n-        logger.info(\"execResult: \" + execResult);\n-        assertEquals(\"RUNNING\", execResult.stdout(),\n-            \"Expected \" + podName + \", in namespace \" + namespace + \", to be in RUNNING ready status\");\n+  private void checkAppRunning(\n+      String namespace,\n+      String podName,\n+      String internalPort,\n+      String appPath,\n+      String expectedStr\n+  ) {\n+   \n+    // check if the app is accessible inside of a server pod\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for application {0} to be ready on {1} in namespace {2} \"\n+            + \"(elapsed time {3}ms, remaining time {4}ms)\",\n+            appPath,\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(() -> appAccessibleInPod(\n+                namespace, \n+                podName, \n+                internalPort, \n+                appPath, \n+                expectedStr));\n+\n+  }\n+  \n+  private void quickCheckAppRunning(\n+      String namespace,\n+      String podName,\n+      String internalPort,\n+      String appPath,\n+      String expectedStr\n+  ) {\n+   \n+    // check if the app is accessible inside of a server pod\n+    withQuickRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Checking if application {0} is running on pod {1} in namespace {2} \"\n+            + \"(elapsed time {3}ms, remaining time {4}ms)\",\n+            appPath,\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(() -> appAccessibleInPod(\n+                namespace,\n+                podName, \n+                internalPort, \n+                appPath, \n+                expectedStr));\n+\n+  }\n+  \n+  private void quickCheckAppNotRunning(\n+      String namespace,\n+      String podName,\n+      String internalPort,\n+      String appPath,\n+      String expectedStr\n+  ) {\n+   \n+    // check if the app is not running inside of a server pod\n+    withQuickRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Checking if application {0} is not running on pod {1} in namespace {2} \"\n+            + \"(elapsed time {3}ms, remaining time {4}ms)\",\n+            appPath,\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(() -> appNotAccessibleInPod(\n+                namespace, \n+                podName,\n+                internalPort, \n+                appPath, \n+                expectedStr));\n+  }\n+   \n+  private void checkDomainPatched(\n+      String domainUid,\n+      String namespace,\n+      String image \n+  ) {\n+   \n+    // check if the domain resource has been patched with the given image\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be patched in namespace {1} \"\n+            + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+            domainUid,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> domainResourceImagePatched(domainUid, namespace, image),\n+            String.format(\n+               \"Domain %s is not patched in namespace %s with image %s\", domainUid, namespace, image)));\n+\n+  }\n+  \n+  private void checkPodImagePatched(\n+      String domainUid,\n+      String namespace,\n+      String podName,\n+      String image\n+  ) {\n+   \n+    // check if the server pod has been patched with the given image\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be patched in namespace {1} \"\n+            + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podImagePatched(domainUid, namespace, podName, image),\n+            String.format(\n+               \"Pod %s is not patched with image %s in namespace %s.\",\n+               podName,\n+               image,\n+               namespace)));\n+  }\n+  \n+  private static void collectAppAvaiability(\n+      String namespace,\n+      List<Integer> appAvailability,\n+      String managedServerPrefix,\n+      int replicaCount,\n+      String internalPort,\n+      String appPath\n+  ) {\n+    boolean v2AppAvailable;\n+ \n+    // ping the app periodically to check its availability across the duration\n+    // of patching the domain with newer version of the app.\n+    // Note: we use the \"kubectl exec\" command in this method only. This is to avoid", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NzY5Nw=="}, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 745}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU2NTk1OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDo0MDo0MFrOGRAjDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDo0MDo0MFrOGRAjDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4Nzk0OQ==", "bodyText": "do while hides important information - use while instead, it is much clearer", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420487949", "createdAt": "2020-05-06T00:40:40Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -719,27 +1121,210 @@ private void checkServiceCreated(String serviceName, String domNamespace) {\n                 condition.getRemainingTimeInMS()))\n         .until(assertDoesNotThrow(() -> serviceExists(serviceName, null, domNamespace),\n             String.format(\n-                \"Service %s is not ready in namespace %s\", serviceName, domainNamespace)));\n+                \"Service %s is not ready in namespace %s\", serviceName, domNamespace)));\n \n   }\n \n-  private void checkServerReadyStatusByExec(String podName, String namespace) {\n-    final V1Pod pod = assertDoesNotThrow(() -> oracle.weblogic.kubernetes.assertions.impl.Kubernetes\n-        .getPod(namespace, null, podName));\n-\n-    if (pod != null) {\n-      ExecResult execResult = assertDoesNotThrow(\n-          () -> execCommand(pod, null, true, READ_STATE_COMMAND));\n-      if (execResult.exitValue() == 0) {\n-        logger.info(\"execResult: \" + execResult);\n-        assertEquals(\"RUNNING\", execResult.stdout(),\n-            \"Expected \" + podName + \", in namespace \" + namespace + \", to be in RUNNING ready status\");\n+  private void checkAppRunning(\n+      String namespace,\n+      String podName,\n+      String internalPort,\n+      String appPath,\n+      String expectedStr\n+  ) {\n+   \n+    // check if the app is accessible inside of a server pod\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for application {0} to be ready on {1} in namespace {2} \"\n+            + \"(elapsed time {3}ms, remaining time {4}ms)\",\n+            appPath,\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(() -> appAccessibleInPod(\n+                namespace, \n+                podName, \n+                internalPort, \n+                appPath, \n+                expectedStr));\n+\n+  }\n+  \n+  private void quickCheckAppRunning(\n+      String namespace,\n+      String podName,\n+      String internalPort,\n+      String appPath,\n+      String expectedStr\n+  ) {\n+   \n+    // check if the app is accessible inside of a server pod\n+    withQuickRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Checking if application {0} is running on pod {1} in namespace {2} \"\n+            + \"(elapsed time {3}ms, remaining time {4}ms)\",\n+            appPath,\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(() -> appAccessibleInPod(\n+                namespace,\n+                podName, \n+                internalPort, \n+                appPath, \n+                expectedStr));\n+\n+  }\n+  \n+  private void quickCheckAppNotRunning(\n+      String namespace,\n+      String podName,\n+      String internalPort,\n+      String appPath,\n+      String expectedStr\n+  ) {\n+   \n+    // check if the app is not running inside of a server pod\n+    withQuickRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Checking if application {0} is not running on pod {1} in namespace {2} \"\n+            + \"(elapsed time {3}ms, remaining time {4}ms)\",\n+            appPath,\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(() -> appNotAccessibleInPod(\n+                namespace, \n+                podName,\n+                internalPort, \n+                appPath, \n+                expectedStr));\n+  }\n+   \n+  private void checkDomainPatched(\n+      String domainUid,\n+      String namespace,\n+      String image \n+  ) {\n+   \n+    // check if the domain resource has been patched with the given image\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be patched in namespace {1} \"\n+            + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+            domainUid,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> domainResourceImagePatched(domainUid, namespace, image),\n+            String.format(\n+               \"Domain %s is not patched in namespace %s with image %s\", domainUid, namespace, image)));\n+\n+  }\n+  \n+  private void checkPodImagePatched(\n+      String domainUid,\n+      String namespace,\n+      String podName,\n+      String image\n+  ) {\n+   \n+    // check if the server pod has been patched with the given image\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be patched in namespace {1} \"\n+            + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podImagePatched(domainUid, namespace, podName, image),\n+            String.format(\n+               \"Pod %s is not patched with image %s in namespace %s.\",\n+               podName,\n+               image,\n+               namespace)));\n+  }\n+  \n+  private static void collectAppAvaiability(\n+      String namespace,\n+      List<Integer> appAvailability,\n+      String managedServerPrefix,\n+      int replicaCount,\n+      String internalPort,\n+      String appPath\n+  ) {\n+    boolean v2AppAvailable;\n+ \n+    // ping the app periodically to check its availability across the duration\n+    // of patching the domain with newer version of the app.\n+    // Note: we use the \"kubectl exec\" command in this method only. This is to avoid\n+    // problems when two threads accessing the same pod at the same time via Kubernetes\n+    // Java client.\n+    do {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 748}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU2NjY3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDo0MToxMVrOGRAjhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDo0MToxMVrOGRAjhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4ODA2OA==", "bodyText": "same", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420488068", "createdAt": "2020-05-06T00:41:11Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -719,27 +1121,210 @@ private void checkServiceCreated(String serviceName, String domNamespace) {\n                 condition.getRemainingTimeInMS()))\n         .until(assertDoesNotThrow(() -> serviceExists(serviceName, null, domNamespace),\n             String.format(\n-                \"Service %s is not ready in namespace %s\", serviceName, domainNamespace)));\n+                \"Service %s is not ready in namespace %s\", serviceName, domNamespace)));\n \n   }\n \n-  private void checkServerReadyStatusByExec(String podName, String namespace) {\n-    final V1Pod pod = assertDoesNotThrow(() -> oracle.weblogic.kubernetes.assertions.impl.Kubernetes\n-        .getPod(namespace, null, podName));\n-\n-    if (pod != null) {\n-      ExecResult execResult = assertDoesNotThrow(\n-          () -> execCommand(pod, null, true, READ_STATE_COMMAND));\n-      if (execResult.exitValue() == 0) {\n-        logger.info(\"execResult: \" + execResult);\n-        assertEquals(\"RUNNING\", execResult.stdout(),\n-            \"Expected \" + podName + \", in namespace \" + namespace + \", to be in RUNNING ready status\");\n+  private void checkAppRunning(\n+      String namespace,\n+      String podName,\n+      String internalPort,\n+      String appPath,\n+      String expectedStr\n+  ) {\n+   \n+    // check if the app is accessible inside of a server pod\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for application {0} to be ready on {1} in namespace {2} \"\n+            + \"(elapsed time {3}ms, remaining time {4}ms)\",\n+            appPath,\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(() -> appAccessibleInPod(\n+                namespace, \n+                podName, \n+                internalPort, \n+                appPath, \n+                expectedStr));\n+\n+  }\n+  \n+  private void quickCheckAppRunning(\n+      String namespace,\n+      String podName,\n+      String internalPort,\n+      String appPath,\n+      String expectedStr\n+  ) {\n+   \n+    // check if the app is accessible inside of a server pod\n+    withQuickRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Checking if application {0} is running on pod {1} in namespace {2} \"\n+            + \"(elapsed time {3}ms, remaining time {4}ms)\",\n+            appPath,\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(() -> appAccessibleInPod(\n+                namespace,\n+                podName, \n+                internalPort, \n+                appPath, \n+                expectedStr));\n+\n+  }\n+  \n+  private void quickCheckAppNotRunning(\n+      String namespace,\n+      String podName,\n+      String internalPort,\n+      String appPath,\n+      String expectedStr\n+  ) {\n+   \n+    // check if the app is not running inside of a server pod\n+    withQuickRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Checking if application {0} is not running on pod {1} in namespace {2} \"\n+            + \"(elapsed time {3}ms, remaining time {4}ms)\",\n+            appPath,\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(() -> appNotAccessibleInPod(\n+                namespace, \n+                podName,\n+                internalPort, \n+                appPath, \n+                expectedStr));\n+  }\n+   \n+  private void checkDomainPatched(\n+      String domainUid,\n+      String namespace,\n+      String image \n+  ) {\n+   \n+    // check if the domain resource has been patched with the given image\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be patched in namespace {1} \"\n+            + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+            domainUid,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> domainResourceImagePatched(domainUid, namespace, image),\n+            String.format(\n+               \"Domain %s is not patched in namespace %s with image %s\", domainUid, namespace, image)));\n+\n+  }\n+  \n+  private void checkPodImagePatched(\n+      String domainUid,\n+      String namespace,\n+      String podName,\n+      String image\n+  ) {\n+   \n+    // check if the server pod has been patched with the given image\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be patched in namespace {1} \"\n+            + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podImagePatched(domainUid, namespace, podName, image),\n+            String.format(\n+               \"Pod %s is not patched with image %s in namespace %s.\",\n+               podName,\n+               image,\n+               namespace)));\n+  }\n+  \n+  private static void collectAppAvaiability(\n+      String namespace,\n+      List<Integer> appAvailability,\n+      String managedServerPrefix,\n+      int replicaCount,\n+      String internalPort,\n+      String appPath\n+  ) {\n+    boolean v2AppAvailable;\n+ \n+    // ping the app periodically to check its availability across the duration\n+    // of patching the domain with newer version of the app.\n+    // Note: we use the \"kubectl exec\" command in this method only. This is to avoid\n+    // problems when two threads accessing the same pod at the same time via Kubernetes\n+    // Java client.\n+    do {\n+      v2AppAvailable = true;\n+      for (int i = 1; i <= replicaCount; i++) {\n+        v2AppAvailable = v2AppAvailable && appAccessibleInPodKubectl(\n+                            namespace,\n+                            managedServerPrefix + i, \n+                            internalPort, \n+                            appPath, \n+                            APP_RESPONSE_V2 + i);\n+      }\n+\n+      int count = 0;\n+      for (int i = 1; i <= replicaCount; i++) {\n+        if (appAccessibleInPodKubectl(\n+            namespace,\n+            managedServerPrefix + i, \n+            internalPort, \n+            appPath, \n+            \"Hello World\")) {  \n+          count++;\n+        }\n+      }\n+      appAvailability.add(count);\n+      \n+      // the following log messages are temporarily here for debugging purposes.\n+      // This part of the code is disabled by default right now, and can be enabled by\n+      // -Dweblogic.operator.enableAppAvailabilityCheck=true.\n+      // TODO remove these log messages when this verification is fully enabled.\n+      if (count == 0) {\n+        logger.info(\"XXXXXXXXXXX: app not available XXXXXXXX\");\n       } else {\n-        fail(\"Ready command failed with exit status code: \" + execResult.exitValue());\n+        logger.info(\"YYYYYYYYYYY: app available YYYYYYYY count = \" + count);   \n+      }\n+      try {\n+        TimeUnit.MILLISECONDS.sleep(200);\n+      } catch (InterruptedException ie) {\n+        // do nothing\n+      }\n+    } while (!v2AppAvailable);\n+  }\n+  \n+  private static boolean appAlwaysAvailable(List<Integer> appAvailability) {\n+    for (Integer count: appAvailability) {\n+      if (count == 0) {\n+        logger.warning(\"App was not continuously available during patching.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 793}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU2NzQxOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDo0MTozMVrOGRAj7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODo0MzozM1rOGRgiiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4ODE3NA==", "bodyText": "running or ready? they are two different things", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420488174", "createdAt": "2020-05-06T00:41:31Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -719,27 +1121,210 @@ private void checkServiceCreated(String serviceName, String domNamespace) {\n                 condition.getRemainingTimeInMS()))\n         .until(assertDoesNotThrow(() -> serviceExists(serviceName, null, domNamespace),\n             String.format(\n-                \"Service %s is not ready in namespace %s\", serviceName, domainNamespace)));\n+                \"Service %s is not ready in namespace %s\", serviceName, domNamespace)));\n \n   }\n \n-  private void checkServerReadyStatusByExec(String podName, String namespace) {\n-    final V1Pod pod = assertDoesNotThrow(() -> oracle.weblogic.kubernetes.assertions.impl.Kubernetes\n-        .getPod(namespace, null, podName));\n-\n-    if (pod != null) {\n-      ExecResult execResult = assertDoesNotThrow(\n-          () -> execCommand(pod, null, true, READ_STATE_COMMAND));\n-      if (execResult.exitValue() == 0) {\n-        logger.info(\"execResult: \" + execResult);\n-        assertEquals(\"RUNNING\", execResult.stdout(),\n-            \"Expected \" + podName + \", in namespace \" + namespace + \", to be in RUNNING ready status\");\n+  private void checkAppRunning(\n+      String namespace,\n+      String podName,\n+      String internalPort,\n+      String appPath,\n+      String expectedStr\n+  ) {\n+   \n+    // check if the app is accessible inside of a server pod\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for application {0} to be ready on {1} in namespace {2} \"\n+            + \"(elapsed time {3}ms, remaining time {4}ms)\",\n+            appPath,\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(() -> appAccessibleInPod(\n+                namespace, \n+                podName, \n+                internalPort, \n+                appPath, \n+                expectedStr));\n+\n+  }\n+  \n+  private void quickCheckAppRunning(\n+      String namespace,\n+      String podName,\n+      String internalPort,\n+      String appPath,\n+      String expectedStr\n+  ) {\n+   \n+    // check if the app is accessible inside of a server pod\n+    withQuickRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Checking if application {0} is running on pod {1} in namespace {2} \"\n+            + \"(elapsed time {3}ms, remaining time {4}ms)\",\n+            appPath,\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(() -> appAccessibleInPod(\n+                namespace,\n+                podName, \n+                internalPort, \n+                appPath, \n+                expectedStr));\n+\n+  }\n+  \n+  private void quickCheckAppNotRunning(\n+      String namespace,\n+      String podName,\n+      String internalPort,\n+      String appPath,\n+      String expectedStr\n+  ) {\n+   \n+    // check if the app is not running inside of a server pod\n+    withQuickRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Checking if application {0} is not running on pod {1} in namespace {2} \"\n+            + \"(elapsed time {3}ms, remaining time {4}ms)\",\n+            appPath,\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(() -> appNotAccessibleInPod(\n+                namespace, \n+                podName,\n+                internalPort, \n+                appPath, \n+                expectedStr));\n+  }\n+   \n+  private void checkDomainPatched(\n+      String domainUid,\n+      String namespace,\n+      String image \n+  ) {\n+   \n+    // check if the domain resource has been patched with the given image\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be patched in namespace {1} \"\n+            + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+            domainUid,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> domainResourceImagePatched(domainUid, namespace, image),\n+            String.format(\n+               \"Domain %s is not patched in namespace %s with image %s\", domainUid, namespace, image)));\n+\n+  }\n+  \n+  private void checkPodImagePatched(\n+      String domainUid,\n+      String namespace,\n+      String podName,\n+      String image\n+  ) {\n+   \n+    // check if the server pod has been patched with the given image\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be patched in namespace {1} \"\n+            + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podImagePatched(domainUid, namespace, podName, image),\n+            String.format(\n+               \"Pod %s is not patched with image %s in namespace %s.\",\n+               podName,\n+               image,\n+               namespace)));\n+  }\n+  \n+  private static void collectAppAvaiability(\n+      String namespace,\n+      List<Integer> appAvailability,\n+      String managedServerPrefix,\n+      int replicaCount,\n+      String internalPort,\n+      String appPath\n+  ) {\n+    boolean v2AppAvailable;\n+ \n+    // ping the app periodically to check its availability across the duration\n+    // of patching the domain with newer version of the app.\n+    // Note: we use the \"kubectl exec\" command in this method only. This is to avoid\n+    // problems when two threads accessing the same pod at the same time via Kubernetes\n+    // Java client.\n+    do {\n+      v2AppAvailable = true;\n+      for (int i = 1; i <= replicaCount; i++) {\n+        v2AppAvailable = v2AppAvailable && appAccessibleInPodKubectl(\n+                            namespace,\n+                            managedServerPrefix + i, \n+                            internalPort, \n+                            appPath, \n+                            APP_RESPONSE_V2 + i);\n+      }\n+\n+      int count = 0;\n+      for (int i = 1; i <= replicaCount; i++) {\n+        if (appAccessibleInPodKubectl(\n+            namespace,\n+            managedServerPrefix + i, \n+            internalPort, \n+            appPath, \n+            \"Hello World\")) {  \n+          count++;\n+        }\n+      }\n+      appAvailability.add(count);\n+      \n+      // the following log messages are temporarily here for debugging purposes.\n+      // This part of the code is disabled by default right now, and can be enabled by\n+      // -Dweblogic.operator.enableAppAvailabilityCheck=true.\n+      // TODO remove these log messages when this verification is fully enabled.\n+      if (count == 0) {\n+        logger.info(\"XXXXXXXXXXX: app not available XXXXXXXX\");\n       } else {\n-        fail(\"Ready command failed with exit status code: \" + execResult.exitValue());\n+        logger.info(\"YYYYYYYYYYY: app available YYYYYYYY count = \" + count);   \n+      }\n+      try {\n+        TimeUnit.MILLISECONDS.sleep(200);\n+      } catch (InterruptedException ie) {\n+        // do nothing\n+      }\n+    } while (!v2AppAvailable);\n+  }\n+  \n+  private static boolean appAlwaysAvailable(List<Integer> appAvailability) {\n+    for (Integer count: appAvailability) {\n+      if (count == 0) {\n+        logger.warning(\"App was not continuously available during patching.\");\n+        return false;\n       }\n-    } else {\n-      fail(\"Did not find pod \" + podName + \" in namespace \" + namespace);\n     }\n+    return true;\n   }\n \n+  private void checkServerReadyStatusByExec(String podName, String namespace) {\n+    ExecResult execResult = assertDoesNotThrow(\n+        () -> execCommand(namespace, podName, null, true, READ_STATE_COMMAND));\n+    if (execResult.exitValue() == 0) {\n+      logger.info(\"execResult: \" + execResult);\n+      assertEquals(\"RUNNING\", execResult.stdout(),\n+          \"Expected \" + podName + \", in namespace \" + namespace + \", to be in RUNNING ready status\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 808}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxMjEwNw==", "bodyText": "This checks the WebLogic server state from the node manager.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r421012107", "createdAt": "2020-05-06T18:43:33Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -719,27 +1121,210 @@ private void checkServiceCreated(String serviceName, String domNamespace) {\n                 condition.getRemainingTimeInMS()))\n         .until(assertDoesNotThrow(() -> serviceExists(serviceName, null, domNamespace),\n             String.format(\n-                \"Service %s is not ready in namespace %s\", serviceName, domainNamespace)));\n+                \"Service %s is not ready in namespace %s\", serviceName, domNamespace)));\n \n   }\n \n-  private void checkServerReadyStatusByExec(String podName, String namespace) {\n-    final V1Pod pod = assertDoesNotThrow(() -> oracle.weblogic.kubernetes.assertions.impl.Kubernetes\n-        .getPod(namespace, null, podName));\n-\n-    if (pod != null) {\n-      ExecResult execResult = assertDoesNotThrow(\n-          () -> execCommand(pod, null, true, READ_STATE_COMMAND));\n-      if (execResult.exitValue() == 0) {\n-        logger.info(\"execResult: \" + execResult);\n-        assertEquals(\"RUNNING\", execResult.stdout(),\n-            \"Expected \" + podName + \", in namespace \" + namespace + \", to be in RUNNING ready status\");\n+  private void checkAppRunning(\n+      String namespace,\n+      String podName,\n+      String internalPort,\n+      String appPath,\n+      String expectedStr\n+  ) {\n+   \n+    // check if the app is accessible inside of a server pod\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for application {0} to be ready on {1} in namespace {2} \"\n+            + \"(elapsed time {3}ms, remaining time {4}ms)\",\n+            appPath,\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(() -> appAccessibleInPod(\n+                namespace, \n+                podName, \n+                internalPort, \n+                appPath, \n+                expectedStr));\n+\n+  }\n+  \n+  private void quickCheckAppRunning(\n+      String namespace,\n+      String podName,\n+      String internalPort,\n+      String appPath,\n+      String expectedStr\n+  ) {\n+   \n+    // check if the app is accessible inside of a server pod\n+    withQuickRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Checking if application {0} is running on pod {1} in namespace {2} \"\n+            + \"(elapsed time {3}ms, remaining time {4}ms)\",\n+            appPath,\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(() -> appAccessibleInPod(\n+                namespace,\n+                podName, \n+                internalPort, \n+                appPath, \n+                expectedStr));\n+\n+  }\n+  \n+  private void quickCheckAppNotRunning(\n+      String namespace,\n+      String podName,\n+      String internalPort,\n+      String appPath,\n+      String expectedStr\n+  ) {\n+   \n+    // check if the app is not running inside of a server pod\n+    withQuickRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Checking if application {0} is not running on pod {1} in namespace {2} \"\n+            + \"(elapsed time {3}ms, remaining time {4}ms)\",\n+            appPath,\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(() -> appNotAccessibleInPod(\n+                namespace, \n+                podName,\n+                internalPort, \n+                appPath, \n+                expectedStr));\n+  }\n+   \n+  private void checkDomainPatched(\n+      String domainUid,\n+      String namespace,\n+      String image \n+  ) {\n+   \n+    // check if the domain resource has been patched with the given image\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be patched in namespace {1} \"\n+            + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+            domainUid,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> domainResourceImagePatched(domainUid, namespace, image),\n+            String.format(\n+               \"Domain %s is not patched in namespace %s with image %s\", domainUid, namespace, image)));\n+\n+  }\n+  \n+  private void checkPodImagePatched(\n+      String domainUid,\n+      String namespace,\n+      String podName,\n+      String image\n+  ) {\n+   \n+    // check if the server pod has been patched with the given image\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be patched in namespace {1} \"\n+            + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podImagePatched(domainUid, namespace, podName, image),\n+            String.format(\n+               \"Pod %s is not patched with image %s in namespace %s.\",\n+               podName,\n+               image,\n+               namespace)));\n+  }\n+  \n+  private static void collectAppAvaiability(\n+      String namespace,\n+      List<Integer> appAvailability,\n+      String managedServerPrefix,\n+      int replicaCount,\n+      String internalPort,\n+      String appPath\n+  ) {\n+    boolean v2AppAvailable;\n+ \n+    // ping the app periodically to check its availability across the duration\n+    // of patching the domain with newer version of the app.\n+    // Note: we use the \"kubectl exec\" command in this method only. This is to avoid\n+    // problems when two threads accessing the same pod at the same time via Kubernetes\n+    // Java client.\n+    do {\n+      v2AppAvailable = true;\n+      for (int i = 1; i <= replicaCount; i++) {\n+        v2AppAvailable = v2AppAvailable && appAccessibleInPodKubectl(\n+                            namespace,\n+                            managedServerPrefix + i, \n+                            internalPort, \n+                            appPath, \n+                            APP_RESPONSE_V2 + i);\n+      }\n+\n+      int count = 0;\n+      for (int i = 1; i <= replicaCount; i++) {\n+        if (appAccessibleInPodKubectl(\n+            namespace,\n+            managedServerPrefix + i, \n+            internalPort, \n+            appPath, \n+            \"Hello World\")) {  \n+          count++;\n+        }\n+      }\n+      appAvailability.add(count);\n+      \n+      // the following log messages are temporarily here for debugging purposes.\n+      // This part of the code is disabled by default right now, and can be enabled by\n+      // -Dweblogic.operator.enableAppAvailabilityCheck=true.\n+      // TODO remove these log messages when this verification is fully enabled.\n+      if (count == 0) {\n+        logger.info(\"XXXXXXXXXXX: app not available XXXXXXXX\");\n       } else {\n-        fail(\"Ready command failed with exit status code: \" + execResult.exitValue());\n+        logger.info(\"YYYYYYYYYYY: app available YYYYYYYY count = \" + count);   \n+      }\n+      try {\n+        TimeUnit.MILLISECONDS.sleep(200);\n+      } catch (InterruptedException ie) {\n+        // do nothing\n+      }\n+    } while (!v2AppAvailable);\n+  }\n+  \n+  private static boolean appAlwaysAvailable(List<Integer> appAvailability) {\n+    for (Integer count: appAvailability) {\n+      if (count == 0) {\n+        logger.warning(\"App was not continuously available during patching.\");\n+        return false;\n       }\n-    } else {\n-      fail(\"Did not find pod \" + podName + \" in namespace \" + namespace);\n     }\n+    return true;\n   }\n \n+  private void checkServerReadyStatusByExec(String podName, String namespace) {\n+    ExecResult execResult = assertDoesNotThrow(\n+        () -> execCommand(namespace, podName, null, true, READ_STATE_COMMAND));\n+    if (execResult.exitValue() == 0) {\n+      logger.info(\"execResult: \" + execResult);\n+      assertEquals(\"RUNNING\", execResult.stdout(),\n+          \"Expected \" + podName + \", in namespace \" + namespace + \", to be in RUNNING ready status\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4ODE3NA=="}, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 808}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU2ODQxOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDo0MTo1NlrOGRAkeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDo0MTo1NlrOGRAkeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4ODMxMg==", "bodyText": "what is \"ready command\"?  do you mean readiness probe?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420488312", "createdAt": "2020-05-06T00:41:56Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -719,27 +1121,210 @@ private void checkServiceCreated(String serviceName, String domNamespace) {\n                 condition.getRemainingTimeInMS()))\n         .until(assertDoesNotThrow(() -> serviceExists(serviceName, null, domNamespace),\n             String.format(\n-                \"Service %s is not ready in namespace %s\", serviceName, domainNamespace)));\n+                \"Service %s is not ready in namespace %s\", serviceName, domNamespace)));\n \n   }\n \n-  private void checkServerReadyStatusByExec(String podName, String namespace) {\n-    final V1Pod pod = assertDoesNotThrow(() -> oracle.weblogic.kubernetes.assertions.impl.Kubernetes\n-        .getPod(namespace, null, podName));\n-\n-    if (pod != null) {\n-      ExecResult execResult = assertDoesNotThrow(\n-          () -> execCommand(pod, null, true, READ_STATE_COMMAND));\n-      if (execResult.exitValue() == 0) {\n-        logger.info(\"execResult: \" + execResult);\n-        assertEquals(\"RUNNING\", execResult.stdout(),\n-            \"Expected \" + podName + \", in namespace \" + namespace + \", to be in RUNNING ready status\");\n+  private void checkAppRunning(\n+      String namespace,\n+      String podName,\n+      String internalPort,\n+      String appPath,\n+      String expectedStr\n+  ) {\n+   \n+    // check if the app is accessible inside of a server pod\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for application {0} to be ready on {1} in namespace {2} \"\n+            + \"(elapsed time {3}ms, remaining time {4}ms)\",\n+            appPath,\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(() -> appAccessibleInPod(\n+                namespace, \n+                podName, \n+                internalPort, \n+                appPath, \n+                expectedStr));\n+\n+  }\n+  \n+  private void quickCheckAppRunning(\n+      String namespace,\n+      String podName,\n+      String internalPort,\n+      String appPath,\n+      String expectedStr\n+  ) {\n+   \n+    // check if the app is accessible inside of a server pod\n+    withQuickRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Checking if application {0} is running on pod {1} in namespace {2} \"\n+            + \"(elapsed time {3}ms, remaining time {4}ms)\",\n+            appPath,\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(() -> appAccessibleInPod(\n+                namespace,\n+                podName, \n+                internalPort, \n+                appPath, \n+                expectedStr));\n+\n+  }\n+  \n+  private void quickCheckAppNotRunning(\n+      String namespace,\n+      String podName,\n+      String internalPort,\n+      String appPath,\n+      String expectedStr\n+  ) {\n+   \n+    // check if the app is not running inside of a server pod\n+    withQuickRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Checking if application {0} is not running on pod {1} in namespace {2} \"\n+            + \"(elapsed time {3}ms, remaining time {4}ms)\",\n+            appPath,\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(() -> appNotAccessibleInPod(\n+                namespace, \n+                podName,\n+                internalPort, \n+                appPath, \n+                expectedStr));\n+  }\n+   \n+  private void checkDomainPatched(\n+      String domainUid,\n+      String namespace,\n+      String image \n+  ) {\n+   \n+    // check if the domain resource has been patched with the given image\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be patched in namespace {1} \"\n+            + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+            domainUid,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> domainResourceImagePatched(domainUid, namespace, image),\n+            String.format(\n+               \"Domain %s is not patched in namespace %s with image %s\", domainUid, namespace, image)));\n+\n+  }\n+  \n+  private void checkPodImagePatched(\n+      String domainUid,\n+      String namespace,\n+      String podName,\n+      String image\n+  ) {\n+   \n+    // check if the server pod has been patched with the given image\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be patched in namespace {1} \"\n+            + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+            podName,\n+            namespace,\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podImagePatched(domainUid, namespace, podName, image),\n+            String.format(\n+               \"Pod %s is not patched with image %s in namespace %s.\",\n+               podName,\n+               image,\n+               namespace)));\n+  }\n+  \n+  private static void collectAppAvaiability(\n+      String namespace,\n+      List<Integer> appAvailability,\n+      String managedServerPrefix,\n+      int replicaCount,\n+      String internalPort,\n+      String appPath\n+  ) {\n+    boolean v2AppAvailable;\n+ \n+    // ping the app periodically to check its availability across the duration\n+    // of patching the domain with newer version of the app.\n+    // Note: we use the \"kubectl exec\" command in this method only. This is to avoid\n+    // problems when two threads accessing the same pod at the same time via Kubernetes\n+    // Java client.\n+    do {\n+      v2AppAvailable = true;\n+      for (int i = 1; i <= replicaCount; i++) {\n+        v2AppAvailable = v2AppAvailable && appAccessibleInPodKubectl(\n+                            namespace,\n+                            managedServerPrefix + i, \n+                            internalPort, \n+                            appPath, \n+                            APP_RESPONSE_V2 + i);\n+      }\n+\n+      int count = 0;\n+      for (int i = 1; i <= replicaCount; i++) {\n+        if (appAccessibleInPodKubectl(\n+            namespace,\n+            managedServerPrefix + i, \n+            internalPort, \n+            appPath, \n+            \"Hello World\")) {  \n+          count++;\n+        }\n+      }\n+      appAvailability.add(count);\n+      \n+      // the following log messages are temporarily here for debugging purposes.\n+      // This part of the code is disabled by default right now, and can be enabled by\n+      // -Dweblogic.operator.enableAppAvailabilityCheck=true.\n+      // TODO remove these log messages when this verification is fully enabled.\n+      if (count == 0) {\n+        logger.info(\"XXXXXXXXXXX: app not available XXXXXXXX\");\n       } else {\n-        fail(\"Ready command failed with exit status code: \" + execResult.exitValue());\n+        logger.info(\"YYYYYYYYYYY: app available YYYYYYYY count = \" + count);   \n+      }\n+      try {\n+        TimeUnit.MILLISECONDS.sleep(200);\n+      } catch (InterruptedException ie) {\n+        // do nothing\n+      }\n+    } while (!v2AppAvailable);\n+  }\n+  \n+  private static boolean appAlwaysAvailable(List<Integer> appAvailability) {\n+    for (Integer count: appAvailability) {\n+      if (count == 0) {\n+        logger.warning(\"App was not continuously available during patching.\");\n+        return false;\n       }\n-    } else {\n-      fail(\"Did not find pod \" + podName + \" in namespace \" + namespace);\n     }\n+    return true;\n   }\n \n+  private void checkServerReadyStatusByExec(String podName, String namespace) {\n+    ExecResult execResult = assertDoesNotThrow(\n+        () -> execCommand(namespace, podName, null, true, READ_STATE_COMMAND));\n+    if (execResult.exitValue() == 0) {\n+      logger.info(\"execResult: \" + execResult);\n+      assertEquals(\"RUNNING\", execResult.stdout(),\n+          \"Expected \" + podName + \", in namespace \" + namespace + \", to be in RUNNING ready status\");\n+    } else {\n+      fail(\"Ready command failed with exit status code: \" + execResult.exitValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 810}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU2OTA4OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDo0MjoyNVrOGRAk3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwMTozNjozOVrOGWdnSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4ODQxNQ==", "bodyText": "what pod? do you mean the namespace to create the utility pod in?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420488415", "createdAt": "2020-05-06T00:42:25Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -540,7 +540,8 @@ public static JsonObject createDockerConfigJson(String username, String password\n   /**\n    * Execute a command in a container.\n    *\n-   * @param pod The pod where the command is to be run\n+   * @param namespace The Kubernertes namespace that the pod is in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwMDk2Mg==", "bodyText": "This is any Kubernetes pod that you would like to run a command using Kubernetes exec Java client API. In the test cases that we have, it is one of the WebLogic server pods.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r421000962", "createdAt": "2020-05-06T18:25:11Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -540,7 +540,8 @@ public static JsonObject createDockerConfigJson(String username, String password\n   /**\n    * Execute a command in a container.\n    *\n-   * @param pod The pod where the command is to be run\n+   * @param namespace The Kubernertes namespace that the pod is in", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4ODQxNQ=="}, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIwNzA0OQ==", "bodyText": "still has a spelling mistake", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r426207049", "createdAt": "2020-05-17T01:36:39Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -540,7 +540,8 @@ public static JsonObject createDockerConfigJson(String username, String password\n   /**\n    * Execute a command in a container.\n    *\n-   * @param pod The pod where the command is to be run\n+   * @param namespace The Kubernertes namespace that the pod is in", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4ODQxNQ=="}, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU2OTgzOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDo0Mjo1MlrOGRAlQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDo0Mjo1MlrOGRAlQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4ODUxNA==", "bodyText": "this implies the pod already exists, is that what you intended?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420488514", "createdAt": "2020-05-06T00:42:52Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -540,7 +540,8 @@ public static JsonObject createDockerConfigJson(String username, String password\n   /**\n    * Execute a command in a container.\n    *\n-   * @param pod The pod where the command is to be run\n+   * @param namespace The Kubernertes namespace that the pod is in\n+   * @param podName The name of the pod where the command is to be run", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU3MDMyOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDo0MzoxM1rOGRAljA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODoyNzozNFrOGRf8cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4ODU4OA==", "bodyText": "magic value (null)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420488588", "createdAt": "2020-05-06T00:43:13Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -550,9 +551,19 @@ public static JsonObject createDockerConfigJson(String username, String password\n    * @throws ApiException if Kubernetes client API call fails\n    * @throws InterruptedException if any thread has interrupted the current thread\n    */\n-  public static ExecResult execCommand(V1Pod pod, String containerName, boolean redirectToStdout,\n-      String... command)\n-      throws IOException, ApiException, InterruptedException {\n+  public static ExecResult execCommand(\n+      String namespace,\n+      String podName,\n+      String containerName,\n+      boolean redirectToStdout,\n+      String... command\n+  ) throws IOException, ApiException, InterruptedException {\n+    final V1Pod pod = oracle.weblogic.kubernetes.assertions.impl.Kubernetes\n+        .getPod(namespace, null, podName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwMjM1NA==", "bodyText": "The null here means no label selector of the query. I added a command above the call.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r421002354", "createdAt": "2020-05-06T18:27:34Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -550,9 +551,19 @@ public static JsonObject createDockerConfigJson(String username, String password\n    * @throws ApiException if Kubernetes client API call fails\n    * @throws InterruptedException if any thread has interrupted the current thread\n    */\n-  public static ExecResult execCommand(V1Pod pod, String containerName, boolean redirectToStdout,\n-      String... command)\n-      throws IOException, ApiException, InterruptedException {\n+  public static ExecResult execCommand(\n+      String namespace,\n+      String podName,\n+      String containerName,\n+      boolean redirectToStdout,\n+      String... command\n+  ) throws IOException, ApiException, InterruptedException {\n+    final V1Pod pod = oracle.weblogic.kubernetes.assertions.impl.Kubernetes\n+        .getPod(namespace, null, podName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4ODU4OA=="}, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU3MTI0OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/AppBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDo0Mzo0NVrOGRAmEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODoyNzo1MVrOGRf9Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4ODcyMQ==", "bodyText": "space before and after colon", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420488721", "createdAt": "2020-05-06T00:43:45Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/AppBuilder.java", "diffHunk": "@@ -52,22 +55,29 @@ private AppBuilder params(AppParams params) {\n   public boolean build() {\n     // prepare the archive directory and copy over the app src\n     try {\n-      cleanupDirectory(ARCHIVE_DIR);\n+      cleanupDirectory(ARCHIVE_SRC_DIR);\n       checkDirectory(ARCHIVE_SRC_DIR);\n-      copyFolder(\n-          APP_DIR + \"/\" + params.srcDir(), \n-          ARCHIVE_SRC_DIR);\n-    } catch (IOException ioe) {    \n-      logger.warning(\"Failed to get the directory \" + ARCHIVE_DIR + \" ready\");\n+      for (String item: params.srcDirList()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwMjUyNg==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r421002526", "createdAt": "2020-05-06T18:27:51Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/AppBuilder.java", "diffHunk": "@@ -52,22 +55,29 @@ private AppBuilder params(AppParams params) {\n   public boolean build() {\n     // prepare the archive directory and copy over the app src\n     try {\n-      cleanupDirectory(ARCHIVE_DIR);\n+      cleanupDirectory(ARCHIVE_SRC_DIR);\n       checkDirectory(ARCHIVE_SRC_DIR);\n-      copyFolder(\n-          APP_DIR + \"/\" + params.srcDir(), \n-          ARCHIVE_SRC_DIR);\n-    } catch (IOException ioe) {    \n-      logger.warning(\"Failed to get the directory \" + ARCHIVE_DIR + \" ready\");\n+      for (String item: params.srcDirList()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4ODcyMQ=="}, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU3MjA3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/AppBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDo0NDowNlrOGRAmhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMDo1NToxNVrOGRlDkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4ODgzNw==", "bodyText": "i don't think you can catch a runtime exception?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420488837", "createdAt": "2020-05-06T00:44:06Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/AppBuilder.java", "diffHunk": "@@ -52,22 +55,29 @@ private AppBuilder params(AppParams params) {\n   public boolean build() {\n     // prepare the archive directory and copy over the app src\n     try {\n-      cleanupDirectory(ARCHIVE_DIR);\n+      cleanupDirectory(ARCHIVE_SRC_DIR);\n       checkDirectory(ARCHIVE_SRC_DIR);\n-      copyFolder(\n-          APP_DIR + \"/\" + params.srcDir(), \n-          ARCHIVE_SRC_DIR);\n-    } catch (IOException ioe) {    \n-      logger.warning(\"Failed to get the directory \" + ARCHIVE_DIR + \" ready\");\n+      for (String item: params.srcDirList()) {\n+        copyFolder(\n+            APP_DIR + \"/\" + item, \n+            ARCHIVE_SRC_DIR);\n+      }\n+    } catch (IOException | RuntimeException e) {    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA4NjA5Ng==", "bodyText": "fixed.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r421086096", "createdAt": "2020-05-06T20:55:15Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/AppBuilder.java", "diffHunk": "@@ -52,22 +55,29 @@ private AppBuilder params(AppParams params) {\n   public boolean build() {\n     // prepare the archive directory and copy over the app src\n     try {\n-      cleanupDirectory(ARCHIVE_DIR);\n+      cleanupDirectory(ARCHIVE_SRC_DIR);\n       checkDirectory(ARCHIVE_SRC_DIR);\n-      copyFolder(\n-          APP_DIR + \"/\" + params.srcDir(), \n-          ARCHIVE_SRC_DIR);\n-    } catch (IOException ioe) {    \n-      logger.warning(\"Failed to get the directory \" + ARCHIVE_DIR + \" ready\");\n+      for (String item: params.srcDirList()) {\n+        copyFolder(\n+            APP_DIR + \"/\" + item, \n+            ARCHIVE_SRC_DIR);\n+      }\n+    } catch (IOException | RuntimeException e) {    ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4ODgzNw=="}, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU3MzE4OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/AppParams.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDo0NDozMlrOGRAnGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDo0NDozMlrOGRAnGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4ODk4NA==", "bodyText": "are -> is", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420488984", "createdAt": "2020-05-06T00:44:32Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/AppParams.java", "diffHunk": "@@ -3,30 +3,46 @@\n \n package oracle.weblogic.kubernetes.actions.impl;\n \n+import java.util.List;\n+\n /**\n  * Contains the parameters for creating an application archive.\n  */\n \n public class AppParams {\n \n-  // Location of the source code. \n-  // This is the name of the directory under resources/apps for an application\n-  private String srcDir;\n+  // A list of directories under resources/apps that are part of the application.\n+  // Note: the order of the directory names are significant. Files are copied into", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU3MzUxOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/AppParams.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDo0NDo0NlrOGRAnRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDo0NDo0NlrOGRAnRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4OTAyOQ==", "bodyText": "what if it is a war?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420489029", "createdAt": "2020-05-06T00:44:46Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/AppParams.java", "diffHunk": "@@ -3,30 +3,46 @@\n \n package oracle.weblogic.kubernetes.actions.impl;\n \n+import java.util.List;\n+\n /**\n  * Contains the parameters for creating an application archive.\n  */\n \n public class AppParams {\n \n-  // Location of the source code. \n-  // This is the name of the directory under resources/apps for an application\n-  private String srcDir;\n+  // A list of directories under resources/apps that are part of the application.\n+  // Note: the order of the directory names are significant. Files are copied into\n+  // the staging directory in this order. \n+  private List<String> srcDirList;\n+  \n+  // The name of the final ear file.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU3NDQ3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Command.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDo0NToxN1rOGRAnzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDo0NToxN1rOGRAnzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4OTE2Ng==", "bodyText": "spelling", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420489166", "createdAt": "2020-05-06T00:45:17Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Command.java", "diffHunk": "@@ -66,4 +69,38 @@ public boolean execute() {\n       return false;\n     }\n   }\n+  \n+  /**\n+   * Execute a command and verify the response.\n+   *\n+   * @params expectedResponse the expected response to verify", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU3NTQyOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Command.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDo0NTo1M1rOGRAoWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDo0NTo1M1rOGRAoWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4OTMwNw==", "bodyText": "this seems a bit weak", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420489307", "createdAt": "2020-05-06T00:45:53Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Command.java", "diffHunk": "@@ -66,4 +69,38 @@ public boolean execute() {\n       return false;\n     }\n   }\n+  \n+  /**\n+   * Execute a command and verify the response.\n+   *\n+   * @params expectedResponse the expected response to verify\n+   * @return true if the execution succeeded and response contains the expected value\n+   */\n+  public boolean executeAndVerify(String expectedResponse) {\n+    if (params.verbose()) {\n+      logger.info(\"Executing command {0}\", params.command());\n+    }\n+    try {\n+      ExecResult result = ExecCommand.exec(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU3Njg4OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDo0Njo0NFrOGRApLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNDoyNjoxNFrOGWHJXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4OTUxOA==", "bodyText": "this sounds like a problem", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420489518", "createdAt": "2020-05-06T00:46:44Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -1915,7 +1915,9 @@ public static ExecResult exec(V1Pod pod, String containerName, boolean redirectT\n \n       // wait for reading thread to finish any last remaining output\n       if (out != null) {\n-        out.join();\n+        // need to time out here, otherwise the command can take almost one minute to return.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwMzg4OA==", "bodyText": "Lenny has looked into this. I would not be surprised if we hit an issue in Kubernetes here.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r421003888", "createdAt": "2020-05-06T18:30:07Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -1915,7 +1915,9 @@ public static ExecResult exec(V1Pod pod, String containerName, boolean redirectT\n \n       // wait for reading thread to finish any last remaining output\n       if (out != null) {\n-        out.join();\n+        // need to time out here, otherwise the command can take almost one minute to return.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4OTUxOA=="}, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTgzODk0Mw==", "bodyText": "This is related to a Kubernetes Java client issue tracked by  kubernetes-client/java#933. The problem was fixed about two weeks ago, but is yet to be included in a release.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r425838943", "createdAt": "2020-05-15T14:26:14Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -1915,7 +1915,9 @@ public static ExecResult exec(V1Pod pod, String containerName, boolean redirectT\n \n       // wait for reading thread to finish any last remaining output\n       if (out != null) {\n-        out.join();\n+        // need to time out here, otherwise the command can take almost one minute to return.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4OTUxOA=="}, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU4MTc3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/TestAssertions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDo0OTozMlrOGRAr1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODozMzo1OVrOGRgL4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ5MDE5OQ==", "bodyText": "i am not understand why we want to check inside the pod, rather than from outside... maybe i am  missing something", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420490199", "createdAt": "2020-05-06T00:49:32Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/TestAssertions.java", "diffHunk": "@@ -186,6 +223,68 @@ public static boolean dockerImageExists(String imageName, String imageTag) {\n     return WitAssertion.doesImageExist(imageName, imageTag);\n   }\n \n+  /**\n+   * Check if an application is accessible inside a WebLogic server pod using", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwNjMwNg==", "bodyText": "The goal is to make sure that all pods are patched correctly. There is probably a better approach but this is what I came up with. Note that we don't want to rely on a LB and managed servers don't have a NodePort.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r421006306", "createdAt": "2020-05-06T18:33:59Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/TestAssertions.java", "diffHunk": "@@ -186,6 +223,68 @@ public static boolean dockerImageExists(String imageName, String imageTag) {\n     return WitAssertion.doesImageExist(imageName, imageTag);\n   }\n \n+  /**\n+   * Check if an application is accessible inside a WebLogic server pod using", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ5MDE5OQ=="}, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzY2NzM2OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Domain.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMTozOTo0NFrOGRBbWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMTozOTo0NFrOGRBbWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwMjM2MQ==", "bodyText": "is supposed to use -> is expected to be using", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420502361", "createdAt": "2020-05-06T01:39:44Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Domain.java", "diffHunk": "@@ -77,6 +77,35 @@ public static boolean doesCrdExist() throws ApiException {\n     };\n   }\n \n+  /**\n+   * Check if the domain resource has been patched with a new image.\n+   *\n+   * @param domainUID identifier of the domain resource\n+   * @param namespace Kubernetes namespace in which the domain exists\n+   * @param image name of the image that the pod is supposed to use", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzY3MTMxOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Kubernetes.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMTo0MjoyOFrOGRBdpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODozNDo0NVrOGRgNyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwMjk0OQ==", "bodyText": "we should probably make the container an optional param, pods can have more than one container, and probably will in some tests, e.g. when we have a fluentd sidecar.  if the pod has only one container, it is obvious which one to use.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420502949", "createdAt": "2020-05-06T01:42:28Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Kubernetes.java", "diffHunk": "@@ -146,6 +147,41 @@ public static boolean isPodTerminating(String namespace, String domainUid, Strin\n     return status;\n   }\n \n+  /**\n+   * Checks if a WebLogic server pod has been patched with an expected image.\n+   *\n+   * @param namespace Kubernetes namespace in which the pod is running\n+   * @param domainUid label that the pod is decorated with\n+   * @param podName name of the WebLogic server pod\n+   * @param image name of the image to check for\n+   * @return true if pod's image has been patched\n+   * @throws ApiException when there is an error in querying the Kubernetes cluster\n+   */\n+  public static boolean podImagePatched(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwNjc5Mw==", "bodyText": "Good point. I added the containerName.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r421006793", "createdAt": "2020-05-06T18:34:45Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Kubernetes.java", "diffHunk": "@@ -146,6 +147,41 @@ public static boolean isPodTerminating(String namespace, String domainUid, Strin\n     return status;\n   }\n \n+  /**\n+   * Checks if a WebLogic server pod has been patched with an expected image.\n+   *\n+   * @param namespace Kubernetes namespace in which the pod is running\n+   * @param domainUid label that the pod is decorated with\n+   * @param podName name of the WebLogic server pod\n+   * @param image name of the image to check for\n+   * @return true if pod's image has been patched\n+   * @throws ApiException when there is an error in querying the Kubernetes cluster\n+   */\n+  public static boolean podImagePatched(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwMjk0OQ=="}, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzY3MjYyOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Kubernetes.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMTo0MzoyMVrOGRBeZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODo0OToxOFrOGRgwHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwMzE0MQ==", "bodyText": "spelling", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420503141", "createdAt": "2020-05-06T01:43:21Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Kubernetes.java", "diffHunk": "@@ -146,6 +147,41 @@ public static boolean isPodTerminating(String namespace, String domainUid, Strin\n     return status;\n   }\n \n+  /**\n+   * Checks if a WebLogic server pod has been patched with an expected image.\n+   *\n+   * @param namespace Kubernetes namespace in which the pod is running\n+   * @param domainUid label that the pod is decorated with\n+   * @param podName name of the WebLogic server pod\n+   * @param image name of the image to check for\n+   * @return true if pod's image has been patched\n+   * @throws ApiException when there is an error in querying the Kubernetes cluster\n+   */\n+  public static boolean podImagePatched(\n+      String namespace,\n+      String domainUid,\n+      String podName,\n+      String image\n+  ) throws ApiException {\n+    boolean podPatched = false;\n+    String labelSelector = null;\n+    if (domainUid != null) {\n+      labelSelector = String.format(\"weblogic.domainUID in (%s)\", domainUid);\n+    }\n+    V1Pod pod = getPod(namespace, labelSelector, podName);\n+    if (pod != null && pod.getSpec() != null) {\n+      List<V1Container> containers = pod.getSpec().getContainers();\n+      for (V1Container container : containers) {\n+        // look for the weblogic server container", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxNTU4MA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r421015580", "createdAt": "2020-05-06T18:49:18Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Kubernetes.java", "diffHunk": "@@ -146,6 +147,41 @@ public static boolean isPodTerminating(String namespace, String domainUid, Strin\n     return status;\n   }\n \n+  /**\n+   * Checks if a WebLogic server pod has been patched with an expected image.\n+   *\n+   * @param namespace Kubernetes namespace in which the pod is running\n+   * @param domainUid label that the pod is decorated with\n+   * @param podName name of the WebLogic server pod\n+   * @param image name of the image to check for\n+   * @return true if pod's image has been patched\n+   * @throws ApiException when there is an error in querying the Kubernetes cluster\n+   */\n+  public static boolean podImagePatched(\n+      String namespace,\n+      String domainUid,\n+      String podName,\n+      String image\n+  ) throws ApiException {\n+    boolean podPatched = false;\n+    String labelSelector = null;\n+    if (domainUid != null) {\n+      labelSelector = String.format(\"weblogic.domainUID in (%s)\", domainUid);\n+    }\n+    V1Pod pod = getPod(namespace, labelSelector, podName);\n+    if (pod != null && pod.getSpec() != null) {\n+      List<V1Container> containers = pod.getSpec().getContainers();\n+      for (V1Container container : containers) {\n+        // look for the weblogic server container", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwMzE0MQ=="}, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzY3MzQ0OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Kubernetes.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMTo0Mzo0OFrOGRBe1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODozNTo0OFrOGRgQEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwMzI1NA==", "bodyText": "do we need a null check on containers?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420503254", "createdAt": "2020-05-06T01:43:48Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Kubernetes.java", "diffHunk": "@@ -146,6 +147,41 @@ public static boolean isPodTerminating(String namespace, String domainUid, Strin\n     return status;\n   }\n \n+  /**\n+   * Checks if a WebLogic server pod has been patched with an expected image.\n+   *\n+   * @param namespace Kubernetes namespace in which the pod is running\n+   * @param domainUid label that the pod is decorated with\n+   * @param podName name of the WebLogic server pod\n+   * @param image name of the image to check for\n+   * @return true if pod's image has been patched\n+   * @throws ApiException when there is an error in querying the Kubernetes cluster\n+   */\n+  public static boolean podImagePatched(\n+      String namespace,\n+      String domainUid,\n+      String podName,\n+      String image\n+  ) throws ApiException {\n+    boolean podPatched = false;\n+    String labelSelector = null;\n+    if (domainUid != null) {\n+      labelSelector = String.format(\"weblogic.domainUID in (%s)\", domainUid);\n+    }\n+    V1Pod pod = getPod(namespace, labelSelector, podName);\n+    if (pod != null && pod.getSpec() != null) {\n+      List<V1Container> containers = pod.getSpec().getContainers();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwNzM3Nw==", "bodyText": "As far as I can tell, if there is no container, we'll get an empty list.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r421007377", "createdAt": "2020-05-06T18:35:48Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Kubernetes.java", "diffHunk": "@@ -146,6 +147,41 @@ public static boolean isPodTerminating(String namespace, String domainUid, Strin\n     return status;\n   }\n \n+  /**\n+   * Checks if a WebLogic server pod has been patched with an expected image.\n+   *\n+   * @param namespace Kubernetes namespace in which the pod is running\n+   * @param domainUid label that the pod is decorated with\n+   * @param podName name of the WebLogic server pod\n+   * @param image name of the image to check for\n+   * @return true if pod's image has been patched\n+   * @throws ApiException when there is an error in querying the Kubernetes cluster\n+   */\n+  public static boolean podImagePatched(\n+      String namespace,\n+      String domainUid,\n+      String podName,\n+      String image\n+  ) throws ApiException {\n+    boolean podPatched = false;\n+    String labelSelector = null;\n+    if (domainUid != null) {\n+      labelSelector = String.format(\"weblogic.domainUID in (%s)\", domainUid);\n+    }\n+    V1Pod pod = getPod(namespace, labelSelector, podName);\n+    if (pod != null && pod.getSpec() != null) {\n+      List<V1Container> containers = pod.getSpec().getContainers();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwMzI1NA=="}, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzY3NDIyOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Kubernetes.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMTo0NDoxNlrOGRBfTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODo0OToyN1rOGRgwdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwMzM3Mg==", "bodyText": "space after colon, not before", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420503372", "createdAt": "2020-05-06T01:44:16Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Kubernetes.java", "diffHunk": "@@ -198,10 +234,11 @@ public static V1Pod getPod(String namespace, String labelSelector, String podNam\n         );\n     for (V1Pod item : v1PodList.getItems()) {\n       if (item.getMetadata().getName().startsWith(podName.trim())) {\n-        logger.info(\"Pod Name: \" + item.getMetadata().getName());\n-        logger.info(\"Pod Namespace: \" + item.getMetadata().getNamespace());\n-        logger.info(\"Pod UID: \" + item.getMetadata().getUid());\n-        logger.info(\"Pod Status: \" + item.getStatus().getPhase());\n+        logger.fine(String.format(\"Pod Name :%s, Pod Namespace :%s, Pod UID :%s, Pod Status :%s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxNTY3MA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r421015670", "createdAt": "2020-05-06T18:49:27Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Kubernetes.java", "diffHunk": "@@ -198,10 +234,11 @@ public static V1Pod getPod(String namespace, String labelSelector, String podNam\n         );\n     for (V1Pod item : v1PodList.getItems()) {\n       if (item.getMetadata().getName().startsWith(podName.trim())) {\n-        logger.info(\"Pod Name: \" + item.getMetadata().getName());\n-        logger.info(\"Pod Namespace: \" + item.getMetadata().getNamespace());\n-        logger.info(\"Pod UID: \" + item.getMetadata().getUid());\n-        logger.info(\"Pod Status: \" + item.getStatus().getPhase());\n+        logger.fine(String.format(\"Pod Name :%s, Pod Namespace :%s, Pod UID :%s, Pod Status :%s\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwMzM3Mg=="}, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzY3NDc1OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/FileUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMTo0NDozN1rOGRBfow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODo0OTozN1rOGRgw1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwMzQ1OQ==", "bodyText": "directory", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420503459", "createdAt": "2020-05-06T01:44:37Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/FileUtils.java", "diffHunk": "@@ -31,7 +35,7 @@ public static void checkDirectory(String dir) {\n     File file = new File(dir);\n     if (!(file.exists() && file.isDirectory())) {\n       file.mkdirs();\n-      logger.info(\"Made a new dir \" + dir);\n+      logger.fine(\"Made a new dir {0}.\", dir);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxNTc2NA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r421015764", "createdAt": "2020-05-06T18:49:37Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/FileUtils.java", "diffHunk": "@@ -31,7 +35,7 @@ public static void checkDirectory(String dir) {\n     File file = new File(dir);\n     if (!(file.exists() && file.isDirectory())) {\n       file.mkdirs();\n-      logger.info(\"Made a new dir \" + dir);\n+      logger.fine(\"Made a new dir {0}.\", dir);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwMzQ1OQ=="}, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzY3NTE5OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/FileUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMTo0NDo1MFrOGRBf2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODo0OTo0NFrOGRgxJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwMzUxNA==", "bodyText": "to where?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r420503514", "createdAt": "2020-05-06T01:44:50Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/FileUtils.java", "diffHunk": "@@ -98,6 +102,7 @@ public static void copyFolder(String srcDir, String destDir) throws IOException\n         try {\n           copy(source, destPath.resolve(srcPath.relativize(source)));\n         } catch (IOException e) {\n+          logger.severe(String.format(\"Failed to copy file %s\", source), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxNTg0NQ==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r421015845", "createdAt": "2020-05-06T18:49:44Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/FileUtils.java", "diffHunk": "@@ -98,6 +102,7 @@ public static void copyFolder(String srcDir, String destDir) throws IOException\n         try {\n           copy(source, destPath.resolve(srcPath.relativize(source)));\n         } catch (IOException e) {\n+          logger.severe(String.format(\"Failed to copy file %s\", source), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDUwMzUxNA=="}, "originalCommit": {"oid": "f1c30255fa251e2db6646acc4c8af541102ca1f2"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTI2MzU1OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxOTowMzo1M1rOGSwPyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMToyMDoxMFrOGS0Fbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMxODAyNw==", "bodyText": "I think we want to clean up the directory once before all tests run. This can be moved to ImageBuilders.beforeAll()?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r422318027", "createdAt": "2020-05-08T19:03:53Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -136,7 +155,20 @@ public static void initAll(@Namespaces(3) List<String> namespaces) {\n     // create standard, reusable retry/backoff policy\n     withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n         .and().with().pollInterval(10, SECONDS)\n-        .atMost(5, MINUTES).await();\n+        .atMost(6, MINUTES).await();\n+\n+    // create a reusable quick retry policy\n+    withQuickRetryPolicy = with().pollDelay(0, SECONDS)\n+        .and().with().pollInterval(4, SECONDS)\n+        .atMost(10, SECONDS).await();\n+\n+    // clean up the download directory so that we always get the latest\n+    // versions of the tools in every run of the test class.\n+    try {\n+      cleanupDirectory(DOWNLOAD_DIR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5c3a0d0c4df62015eaeca7df87106a9c18a051d"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM4MDkxMA==", "bodyText": "Moved. Thanks.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r422380910", "createdAt": "2020-05-08T21:20:10Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -136,7 +155,20 @@ public static void initAll(@Namespaces(3) List<String> namespaces) {\n     // create standard, reusable retry/backoff policy\n     withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n         .and().with().pollInterval(10, SECONDS)\n-        .atMost(5, MINUTES).await();\n+        .atMost(6, MINUTES).await();\n+\n+    // create a reusable quick retry policy\n+    withQuickRetryPolicy = with().pollDelay(0, SECONDS)\n+        .and().with().pollInterval(4, SECONDS)\n+        .atMost(10, SECONDS).await();\n+\n+    // clean up the download directory so that we always get the latest\n+    // versions of the tools in every run of the test class.\n+    try {\n+      cleanupDirectory(DOWNLOAD_DIR);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMxODAyNw=="}, "originalCommit": {"oid": "b5c3a0d0c4df62015eaeca7df87106a9c18a051d"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTk5MzUxOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoxMzoyMFrOGTrqeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMDowMDo1NVrOGTxekQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5MTUxNA==", "bodyText": "action methods in TestActions.java should be calling other impl methods, no actual implementation should be here I think ..This may be moved to Kubernetes.java prim?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r423291514", "createdAt": "2020-05-11T20:13:20Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -588,9 +589,21 @@ public static JsonObject createDockerConfigJson(String username, String password\n    * @throws ApiException if Kubernetes client API call fails\n    * @throws InterruptedException if any thread has interrupted the current thread\n    */\n-  public static ExecResult execCommand(V1Pod pod, String containerName, boolean redirectToStdout,\n-      String... command)\n-      throws IOException, ApiException, InterruptedException {\n+  public static ExecResult execCommand(\n+      String namespace,\n+      String podName,\n+      String containerName,\n+      boolean redirectToStdout,\n+      String... command\n+  ) throws IOException, ApiException, InterruptedException {\n+    // get the pod given the namespace and name of the pod\n+    // no label selector is needed (thus null below)\n+    final V1Pod pod = oracle.weblogic.kubernetes.assertions.impl.Kubernetes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e3f2412b84b59e609631183d56e7add5b966bef"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM4Njc2OQ==", "bodyText": "Moved the method to actions impl.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r423386769", "createdAt": "2020-05-12T00:00:55Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -588,9 +589,21 @@ public static JsonObject createDockerConfigJson(String username, String password\n    * @throws ApiException if Kubernetes client API call fails\n    * @throws InterruptedException if any thread has interrupted the current thread\n    */\n-  public static ExecResult execCommand(V1Pod pod, String containerName, boolean redirectToStdout,\n-      String... command)\n-      throws IOException, ApiException, InterruptedException {\n+  public static ExecResult execCommand(\n+      String namespace,\n+      String podName,\n+      String containerName,\n+      boolean redirectToStdout,\n+      String... command\n+  ) throws IOException, ApiException, InterruptedException {\n+    // get the pod given the namespace and name of the pod\n+    // no label selector is needed (thus null below)\n+    final V1Pod pod = oracle.weblogic.kubernetes.assertions.impl.Kubernetes", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5MTUxNA=="}, "originalCommit": {"oid": "0e3f2412b84b59e609631183d56e7add5b966bef"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjA1NjY1OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/resources/wdt-models/model2-wls.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDozMjoxMVrOGTsSOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMDowMToyMVrOGTxe_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMwMTY4OQ==", "bodyText": "name the model file name with a descriptive name, for example I renamed model1-wls.yaml to model-basicdomain-singlecluster-sampleapp-wls.yaml in my PR.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r423301689", "createdAt": "2020-05-11T20:32:11Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/resources/wdt-models/model2-wls.yaml", "diffHunk": "@@ -0,0 +1,38 @@\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e3f2412b84b59e609631183d56e7add5b966bef"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM4Njg3OQ==", "bodyText": "renamed to model-singlecluster-two-sampleapp-wls.yaml.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r423386879", "createdAt": "2020-05-12T00:01:21Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/resources/wdt-models/model2-wls.yaml", "diffHunk": "@@ -0,0 +1,38 @@\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMwMTY4OQ=="}, "originalCommit": {"oid": "0e3f2412b84b59e609631183d56e7add5b966bef"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDQ4MzU0OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMDozNTo0NlrOGUX9xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMToxMzoyNFrOGUZLYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAxNzM0OQ==", "bodyText": "This is what is breaking your test. You need to add REPO_NAME all of the time.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r424017349", "createdAt": "2020-05-12T20:35:46Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -494,6 +738,189 @@ void tearDown() {\n     assertDoesNotThrow(() -> deleteDomainCustomResource(domainUid, domainNamespace1),\n             \"deleteDomainCustomResource failed with ApiException\");\n     logger.info(\"Deleted Domain Custom Resource \" + domainUid + \" from \" + domainNamespace1);\n+\n+    // delete the domain images created in the test class\n+    if (miiImagePatchAppV2 != null) {\n+      deleteImage(miiImagePatchAppV2);\n+    }\n+    if (miiImageAddSecondApp != null) {\n+      deleteImage(miiImageAddSecondApp);\n+    }\n+  }\n+\n+  private void pushImageIfNeeded(String image) {\n+    // push the image to a registry to make the test work in multi node cluster\n+    if (!REPO_USERNAME.equals(REPO_DUMMY_VALUE)) {\n+      logger.info(\"docker login to registry {0}\", REPO_REGISTRY);\n+      assertTrue(dockerLogin(REPO_REGISTRY, REPO_USERNAME, REPO_PASSWORD), \"docker login failed\");\n+\n+      logger.info(\"docker push image {0} to registry {1}\", image, REPO_REGISTRY);\n+      assertTrue(dockerPush(image), String.format(\"docker push failed for image %s\", image));\n+    }\n+  }\n+\n+  private String createUniqueImageTag() {\n+    // create unique image name with date\n+    DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n+    Date date = new Date();\n+    return dateFormat.format(date) + \"-\" + System.currentTimeMillis();\n+  }\n+\n+  private String createImageName(String baseImageName) {\n+    // Add repository name in image name for Jenkins runs\n+    return REPO_USERNAME.equals(REPO_DUMMY_VALUE) ? baseImageName : REPO_NAME + baseImageName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b2d51d4107d0e54366635b411646fdcd9e04d64"}, "originalPosition": 410}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAxNzY1OA==", "bodyText": "REPO_NAME will be empty when no push is required.  It is no longer tied to whether or not REPO_USERNAME is set.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r424017658", "createdAt": "2020-05-12T20:36:22Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -494,6 +738,189 @@ void tearDown() {\n     assertDoesNotThrow(() -> deleteDomainCustomResource(domainUid, domainNamespace1),\n             \"deleteDomainCustomResource failed with ApiException\");\n     logger.info(\"Deleted Domain Custom Resource \" + domainUid + \" from \" + domainNamespace1);\n+\n+    // delete the domain images created in the test class\n+    if (miiImagePatchAppV2 != null) {\n+      deleteImage(miiImagePatchAppV2);\n+    }\n+    if (miiImageAddSecondApp != null) {\n+      deleteImage(miiImageAddSecondApp);\n+    }\n+  }\n+\n+  private void pushImageIfNeeded(String image) {\n+    // push the image to a registry to make the test work in multi node cluster\n+    if (!REPO_USERNAME.equals(REPO_DUMMY_VALUE)) {\n+      logger.info(\"docker login to registry {0}\", REPO_REGISTRY);\n+      assertTrue(dockerLogin(REPO_REGISTRY, REPO_USERNAME, REPO_PASSWORD), \"docker login failed\");\n+\n+      logger.info(\"docker push image {0} to registry {1}\", image, REPO_REGISTRY);\n+      assertTrue(dockerPush(image), String.format(\"docker push failed for image %s\", image));\n+    }\n+  }\n+\n+  private String createUniqueImageTag() {\n+    // create unique image name with date\n+    DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n+    Date date = new Date();\n+    return dateFormat.format(date) + \"-\" + System.currentTimeMillis();\n+  }\n+\n+  private String createImageName(String baseImageName) {\n+    // Add repository name in image name for Jenkins runs\n+    return REPO_USERNAME.equals(REPO_DUMMY_VALUE) ? baseImageName : REPO_NAME + baseImageName;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAxNzM0OQ=="}, "originalCommit": {"oid": "6b2d51d4107d0e54366635b411646fdcd9e04d64"}, "originalPosition": 410}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAzNzIxNg==", "bodyText": "fixed.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r424037216", "createdAt": "2020-05-12T21:13:24Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -494,6 +738,189 @@ void tearDown() {\n     assertDoesNotThrow(() -> deleteDomainCustomResource(domainUid, domainNamespace1),\n             \"deleteDomainCustomResource failed with ApiException\");\n     logger.info(\"Deleted Domain Custom Resource \" + domainUid + \" from \" + domainNamespace1);\n+\n+    // delete the domain images created in the test class\n+    if (miiImagePatchAppV2 != null) {\n+      deleteImage(miiImagePatchAppV2);\n+    }\n+    if (miiImageAddSecondApp != null) {\n+      deleteImage(miiImageAddSecondApp);\n+    }\n+  }\n+\n+  private void pushImageIfNeeded(String image) {\n+    // push the image to a registry to make the test work in multi node cluster\n+    if (!REPO_USERNAME.equals(REPO_DUMMY_VALUE)) {\n+      logger.info(\"docker login to registry {0}\", REPO_REGISTRY);\n+      assertTrue(dockerLogin(REPO_REGISTRY, REPO_USERNAME, REPO_PASSWORD), \"docker login failed\");\n+\n+      logger.info(\"docker push image {0} to registry {1}\", image, REPO_REGISTRY);\n+      assertTrue(dockerPush(image), String.format(\"docker push failed for image %s\", image));\n+    }\n+  }\n+\n+  private String createUniqueImageTag() {\n+    // create unique image name with date\n+    DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n+    Date date = new Date();\n+    return dateFormat.format(date) + \"-\" + System.currentTimeMillis();\n+  }\n+\n+  private String createImageName(String baseImageName) {\n+    // Add repository name in image name for Jenkins runs\n+    return REPO_USERNAME.equals(REPO_DUMMY_VALUE) ? baseImageName : REPO_NAME + baseImageName;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAxNzM0OQ=="}, "originalCommit": {"oid": "6b2d51d4107d0e54366635b411646fdcd9e04d64"}, "originalPosition": 410}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MDQ4Njk0OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMDozNjo1NFrOGUYAEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMToxMzoyN1rOGUZLfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAxNzkzNg==", "bodyText": "This is broken too.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r424017936", "createdAt": "2020-05-12T20:36:54Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -494,6 +738,189 @@ void tearDown() {\n     assertDoesNotThrow(() -> deleteDomainCustomResource(domainUid, domainNamespace1),\n             \"deleteDomainCustomResource failed with ApiException\");\n     logger.info(\"Deleted Domain Custom Resource \" + domainUid + \" from \" + domainNamespace1);\n+\n+    // delete the domain images created in the test class\n+    if (miiImagePatchAppV2 != null) {\n+      deleteImage(miiImagePatchAppV2);\n+    }\n+    if (miiImageAddSecondApp != null) {\n+      deleteImage(miiImageAddSecondApp);\n+    }\n+  }\n+\n+  private void pushImageIfNeeded(String image) {\n+    // push the image to a registry to make the test work in multi node cluster\n+    if (!REPO_USERNAME.equals(REPO_DUMMY_VALUE)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b2d51d4107d0e54366635b411646fdcd9e04d64"}, "originalPosition": 392}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAxODM0OA==", "bodyText": "You should login if REPO_USERNAME is set (to a non-dummy value), but you should push if REPO_NAME is non-empty. (Look at the code in other tests)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r424018348", "createdAt": "2020-05-12T20:37:44Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -494,6 +738,189 @@ void tearDown() {\n     assertDoesNotThrow(() -> deleteDomainCustomResource(domainUid, domainNamespace1),\n             \"deleteDomainCustomResource failed with ApiException\");\n     logger.info(\"Deleted Domain Custom Resource \" + domainUid + \" from \" + domainNamespace1);\n+\n+    // delete the domain images created in the test class\n+    if (miiImagePatchAppV2 != null) {\n+      deleteImage(miiImagePatchAppV2);\n+    }\n+    if (miiImageAddSecondApp != null) {\n+      deleteImage(miiImageAddSecondApp);\n+    }\n+  }\n+\n+  private void pushImageIfNeeded(String image) {\n+    // push the image to a registry to make the test work in multi node cluster\n+    if (!REPO_USERNAME.equals(REPO_DUMMY_VALUE)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAxNzkzNg=="}, "originalCommit": {"oid": "6b2d51d4107d0e54366635b411646fdcd9e04d64"}, "originalPosition": 392}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAzNzI0NQ==", "bodyText": "fixed.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r424037245", "createdAt": "2020-05-12T21:13:27Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -494,6 +738,189 @@ void tearDown() {\n     assertDoesNotThrow(() -> deleteDomainCustomResource(domainUid, domainNamespace1),\n             \"deleteDomainCustomResource failed with ApiException\");\n     logger.info(\"Deleted Domain Custom Resource \" + domainUid + \" from \" + domainNamespace1);\n+\n+    // delete the domain images created in the test class\n+    if (miiImagePatchAppV2 != null) {\n+      deleteImage(miiImagePatchAppV2);\n+    }\n+    if (miiImageAddSecondApp != null) {\n+      deleteImage(miiImageAddSecondApp);\n+    }\n+  }\n+\n+  private void pushImageIfNeeded(String image) {\n+    // push the image to a registry to make the test work in multi node cluster\n+    if (!REPO_USERNAME.equals(REPO_DUMMY_VALUE)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAxNzkzNg=="}, "originalCommit": {"oid": "6b2d51d4107d0e54366635b411646fdcd9e04d64"}, "originalPosition": 392}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDAwNDcxOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo0OTo0NlrOGU6p2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMjoxMToxMFrOGVFUQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4NTY4OQ==", "bodyText": "I think the new tests in this PR should be added in a new or other existing It class where the domain creation/existence is a prerequisite, then you don't need to order the tests. Here it is assumed that the domain is up and running by ordering the tests where it should have been verified in beforeEach method. This is a late comment in this PR. If everyone agrees, changes can be made in another PR.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r424585689", "createdAt": "2020-05-13T16:49:46Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -473,12 +525,204 @@ public void testCreateMiiDomainSameDomainUidDiffNS() {\n     }\n   }\n \n+  @Test\n+  @Order(4)\n+  @DisplayName(\"Update the sample-app application to version 2\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testPatchAppV2() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70fbeb1b8ef8598db5aa0d36ed05c651864c24b5"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcwNDk2Ng==", "bodyText": "Thanks, and yes, I would prefer address this comment in a different PR.\nI still need to understand how to maintain expected order among different test methods without using @order annotation, or between different test classes.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r424704966", "createdAt": "2020-05-13T20:15:31Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -473,12 +525,204 @@ public void testCreateMiiDomainSameDomainUidDiffNS() {\n     }\n   }\n \n+  @Test\n+  @Order(4)\n+  @DisplayName(\"Update the sample-app application to version 2\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testPatchAppV2() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4NTY4OQ=="}, "originalCommit": {"oid": "70fbeb1b8ef8598db5aa0d36ed05c651864c24b5"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc2MDM4NA==", "bodyText": "In order for the patching test cases to be fully independent, we need to do three things:\n\nMove those test methods into a different test class;\nCreate a new initial domain in the BeforeAll handler of the new class; instead of using the domain that is created in the first end-to-end test case;\nAt the end of each test case,  rollback what we have done in the method so that the domain goes back to the initial state, to make the state predictable for the next test case.\n\nBoth 2) and 3) will increase the total time of the test suite run, which is what the current approach tries to avoid.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1616#discussion_r424760384", "createdAt": "2020-05-13T22:11:10Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -473,12 +525,204 @@ public void testCreateMiiDomainSameDomainUidDiffNS() {\n     }\n   }\n \n+  @Test\n+  @Order(4)\n+  @DisplayName(\"Update the sample-app application to version 2\")\n+  @Slow\n+  @MustNotRunInParallel\n+  public void testPatchAppV2() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4NTY4OQ=="}, "originalCommit": {"oid": "70fbeb1b8ef8598db5aa0d36ed05c651864c24b5"}, "originalPosition": 178}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4508, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}