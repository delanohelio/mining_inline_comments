{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0MjY2Njc5", "number": 1955, "reviewThreads": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzo1MDoyOVrOEp5frg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMjowODo0OVrOEra5aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzY5MDcwOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzo1MDoyOVrOHb2ZFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDozNzo1N1rOHdKd1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2NDc1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static String opNamespace = null;\n          \n          \n            \n              private static String op1Namespace = null;", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r498964757", "createdAt": "2020-10-02T17:50:29Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,824 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretList;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DEFAULT_EXTERNAL_REST_IDENTITY_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorImageName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.installOperator;\n+import static oracle.weblogic.kubernetes.actions.TestActions.listSecrets;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.checkHelmReleaseStatus;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorRestServiceRunning;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createExternalRestIdentitySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String opNamespace = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f7e78cece4496d7be6e42ec72deec2f2648b5d3"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM0MjIzMA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r500342230", "createdAt": "2020-10-06T14:37:57Z", "author": {"login": "marinakog"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,824 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretList;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DEFAULT_EXTERNAL_REST_IDENTITY_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorImageName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.installOperator;\n+import static oracle.weblogic.kubernetes.actions.TestActions.listSecrets;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.checkHelmReleaseStatus;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorRestServiceRunning;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createExternalRestIdentitySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String opNamespace = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2NDc1Nw=="}, "originalCommit": {"oid": "2f7e78cece4496d7be6e42ec72deec2f2648b5d3"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzY5MzQxOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzo1MTozMFrOHb2axg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzo1MTozMFrOHb2axg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2NTE5MA==", "bodyText": "can you use an array instead of defining so many variables of same type?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r498965190", "createdAt": "2020-10-02T17:51:30Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,824 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretList;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DEFAULT_EXTERNAL_REST_IDENTITY_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorImageName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.installOperator;\n+import static oracle.weblogic.kubernetes.actions.TestActions.listSecrets;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.checkHelmReleaseStatus;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorRestServiceRunning;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createExternalRestIdentitySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String opNamespace = null;\n+  private static String op2Namespace = null;\n+  private static String op3Namespace = null;\n+  private static String op4Namespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f7e78cece4496d7be6e42ec72deec2f2648b5d3"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzY5NjA5OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzo1MjoyOVrOHb2ceQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDozODowN1rOHdKeig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2NTYyNQ==", "bodyText": "please use an array and loop to assign ns", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r498965625", "createdAt": "2020-10-02T17:52:29Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,824 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretList;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DEFAULT_EXTERNAL_REST_IDENTITY_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorImageName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.installOperator;\n+import static oracle.weblogic.kubernetes.actions.TestActions.listSecrets;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.checkHelmReleaseStatus;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorRestServiceRunning;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createExternalRestIdentitySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String opNamespace = null;\n+  private static String op2Namespace = null;\n+  private static String op3Namespace = null;\n+  private static String op4Namespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"managensdomain1\";\n+  private final String domain2Uid = \"managensdomain2\";\n+  private final String domain3Uid = \"managensdomain3\";\n+  private final String domain4Uid = \"managensdomain4\";\n+\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams opHelmParams1;\n+  private HelmParams opHelmParams2;\n+  private HelmParams opHelmParams4;\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // get a unique operator 2 namespace\n+    logger.info(\"Getting a unique namespace for operator 2\");\n+    assertNotNull(namespaces.get(5), \"Namespace list is null\");\n+    op2Namespace = namespaces.get(5);\n+\n+    // get a unique operator 3 namespace\n+    logger.info(\"Getting a unique namespace for operator 3\");\n+    assertNotNull(namespaces.get(6), \"Namespace list is null\");\n+    op3Namespace = namespaces.get(6);\n+\n+    // get a unique operator 4 namespace\n+    logger.info(\"Getting a unique namespace for operator 4\");\n+    assertNotNull(namespaces.get(7), \"Namespace list is null\");\n+    op4Namespace = namespaces.get(7);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f7e78cece4496d7be6e42ec72deec2f2648b5d3"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM0MjQxMA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r500342410", "createdAt": "2020-10-06T14:38:07Z", "author": {"login": "marinakog"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,824 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretList;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DEFAULT_EXTERNAL_REST_IDENTITY_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorImageName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.installOperator;\n+import static oracle.weblogic.kubernetes.actions.TestActions.listSecrets;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.checkHelmReleaseStatus;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorRestServiceRunning;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createExternalRestIdentitySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String opNamespace = null;\n+  private static String op2Namespace = null;\n+  private static String op3Namespace = null;\n+  private static String op4Namespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"managensdomain1\";\n+  private final String domain2Uid = \"managensdomain2\";\n+  private final String domain3Uid = \"managensdomain3\";\n+  private final String domain4Uid = \"managensdomain4\";\n+\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams opHelmParams1;\n+  private HelmParams opHelmParams2;\n+  private HelmParams opHelmParams4;\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // get a unique operator 2 namespace\n+    logger.info(\"Getting a unique namespace for operator 2\");\n+    assertNotNull(namespaces.get(5), \"Namespace list is null\");\n+    op2Namespace = namespaces.get(5);\n+\n+    // get a unique operator 3 namespace\n+    logger.info(\"Getting a unique namespace for operator 3\");\n+    assertNotNull(namespaces.get(6), \"Namespace list is null\");\n+    op3Namespace = namespaces.get(6);\n+\n+    // get a unique operator 4 namespace\n+    logger.info(\"Getting a unique namespace for operator 4\");\n+    assertNotNull(namespaces.get(7), \"Namespace list is null\");\n+    op4Namespace = namespaces.get(7);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2NTYyNQ=="}, "originalCommit": {"oid": "2f7e78cece4496d7be6e42ec72deec2f2648b5d3"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzY5Nzk3OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzo1MzowN1rOHb2doQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDozODoyMlrOHdKfYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2NTkyMQ==", "bodyText": "isn't this already available in the registry?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r498965921", "createdAt": "2020-10-02T17:53:07Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,824 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretList;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DEFAULT_EXTERNAL_REST_IDENTITY_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorImageName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.installOperator;\n+import static oracle.weblogic.kubernetes.actions.TestActions.listSecrets;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.checkHelmReleaseStatus;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorRestServiceRunning;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createExternalRestIdentitySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String opNamespace = null;\n+  private static String op2Namespace = null;\n+  private static String op3Namespace = null;\n+  private static String op4Namespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"managensdomain1\";\n+  private final String domain2Uid = \"managensdomain2\";\n+  private final String domain3Uid = \"managensdomain3\";\n+  private final String domain4Uid = \"managensdomain4\";\n+\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams opHelmParams1;\n+  private HelmParams opHelmParams2;\n+  private HelmParams opHelmParams4;\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // get a unique operator 2 namespace\n+    logger.info(\"Getting a unique namespace for operator 2\");\n+    assertNotNull(namespaces.get(5), \"Namespace list is null\");\n+    op2Namespace = namespaces.get(5);\n+\n+    // get a unique operator 3 namespace\n+    logger.info(\"Getting a unique namespace for operator 3\");\n+    assertNotNull(namespaces.get(6), \"Namespace list is null\");\n+    op3Namespace = namespaces.get(6);\n+\n+    // get a unique operator 4 namespace\n+    logger.info(\"Getting a unique namespace for operator 4\");\n+    assertNotNull(namespaces.get(7), \"Namespace list is null\");\n+    op4Namespace = namespaces.get(7);\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f7e78cece4496d7be6e42ec72deec2f2648b5d3"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM0MjYyNA==", "bodyText": "removed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r500342624", "createdAt": "2020-10-06T14:38:22Z", "author": {"login": "marinakog"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,824 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretList;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DEFAULT_EXTERNAL_REST_IDENTITY_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorImageName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.installOperator;\n+import static oracle.weblogic.kubernetes.actions.TestActions.listSecrets;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.checkHelmReleaseStatus;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorRestServiceRunning;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createExternalRestIdentitySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String opNamespace = null;\n+  private static String op2Namespace = null;\n+  private static String op3Namespace = null;\n+  private static String op4Namespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"managensdomain1\";\n+  private final String domain2Uid = \"managensdomain2\";\n+  private final String domain3Uid = \"managensdomain3\";\n+  private final String domain4Uid = \"managensdomain4\";\n+\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams opHelmParams1;\n+  private HelmParams opHelmParams2;\n+  private HelmParams opHelmParams4;\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // get a unique operator 2 namespace\n+    logger.info(\"Getting a unique namespace for operator 2\");\n+    assertNotNull(namespaces.get(5), \"Namespace list is null\");\n+    op2Namespace = namespaces.get(5);\n+\n+    // get a unique operator 3 namespace\n+    logger.info(\"Getting a unique namespace for operator 3\");\n+    assertNotNull(namespaces.get(6), \"Namespace list is null\");\n+    op3Namespace = namespaces.get(6);\n+\n+    // get a unique operator 4 namespace\n+    logger.info(\"Getting a unique namespace for operator 4\");\n+    assertNotNull(namespaces.get(7), \"Namespace list is null\");\n+    op4Namespace = namespaces.get(7);\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2NTkyMQ=="}, "originalCommit": {"oid": "2f7e78cece4496d7be6e42ec72deec2f2648b5d3"}, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzcwMTM3OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzo1NDoxM1rOHb2f2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDozODoxNFrOHdKe7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2NjQ5MA==", "bodyText": "use arrays and loops", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r498966490", "createdAt": "2020-10-02T17:54:13Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,824 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretList;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DEFAULT_EXTERNAL_REST_IDENTITY_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorImageName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.installOperator;\n+import static oracle.weblogic.kubernetes.actions.TestActions.listSecrets;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.checkHelmReleaseStatus;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorRestServiceRunning;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createExternalRestIdentitySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String opNamespace = null;\n+  private static String op2Namespace = null;\n+  private static String op3Namespace = null;\n+  private static String op4Namespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"managensdomain1\";\n+  private final String domain2Uid = \"managensdomain2\";\n+  private final String domain3Uid = \"managensdomain3\";\n+  private final String domain4Uid = \"managensdomain4\";\n+\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams opHelmParams1;\n+  private HelmParams opHelmParams2;\n+  private HelmParams opHelmParams4;\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // get a unique operator 2 namespace\n+    logger.info(\"Getting a unique namespace for operator 2\");\n+    assertNotNull(namespaces.get(5), \"Namespace list is null\");\n+    op2Namespace = namespaces.get(5);\n+\n+    // get a unique operator 3 namespace\n+    logger.info(\"Getting a unique namespace for operator 3\");\n+    assertNotNull(namespaces.get(6), \"Namespace list is null\");\n+    op3Namespace = namespaces.get(6);\n+\n+    // get a unique operator 4 namespace\n+    logger.info(\"Getting a unique namespace for operator 4\");\n+    assertNotNull(namespaces.get(7), \"Namespace list is null\");\n+    op4Namespace = namespaces.get(7);\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+    createSecrets(domain3Namespace);\n+    createSecrets(\"default\");\n+    labels1 = new java.util.HashMap<>();\n+    labels1.put(OPERATOR_RELEASE_NAME, OPERATOR_RELEASE_NAME);\n+    labels2 = new java.util.HashMap<>();\n+    labels2.put(OPERATOR_RELEASE_NAME + \"2\", OPERATOR_RELEASE_NAME);\n+    setLabelToNamespace(domain1Namespace, labels1);\n+    setLabelToNamespace(domain2Namespace, labels2);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+\n+    // Delete domain custom resource\n+    logger.info(\"Delete domain1 custom resource in namespace {0}\", domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid, domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \" from \" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2 custom resource in namespace {0}\", domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid, domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \" from \" + domain2Namespace);\n+\n+    logger.info(\"Delete domain3 custom resource in namespace {0}\", domain3Namespace);\n+    deleteDomainCustomResource(domain3Uid, domain3Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain3Uid);\n+\n+    logger.info(\"Delete domain4 custom resource in namespace {0}\", domain4Namespace);\n+    deleteDomainCustomResource(domain4Uid, domain4Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain4Uid);\n+\n+    logger.info(\"Delete domain1test custom resource in namespace {0}\", \"test-\" + domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid + \"test\", \"test-\" + domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \"test from test-\" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2test custom resource in namespace {0}\", \"test-\" + domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid + \"test\", \"test-\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \"test from test-\" + domain2Namespace);\n+\n+    logger.info(\"Delete weblogic custom resource in namespace {0}\", \"weblogic\" + domain2Namespace);\n+    deleteDomainCustomResource(\"weblogic\", \"weblogic\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource weblogic from weblogic\" + domain2Namespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f7e78cece4496d7be6e42ec72deec2f2648b5d3"}, "originalPosition": 225}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM0MjUwOQ==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r500342509", "createdAt": "2020-10-06T14:38:14Z", "author": {"login": "marinakog"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,824 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretList;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DEFAULT_EXTERNAL_REST_IDENTITY_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorImageName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.installOperator;\n+import static oracle.weblogic.kubernetes.actions.TestActions.listSecrets;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.checkHelmReleaseStatus;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorRestServiceRunning;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createExternalRestIdentitySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String opNamespace = null;\n+  private static String op2Namespace = null;\n+  private static String op3Namespace = null;\n+  private static String op4Namespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"managensdomain1\";\n+  private final String domain2Uid = \"managensdomain2\";\n+  private final String domain3Uid = \"managensdomain3\";\n+  private final String domain4Uid = \"managensdomain4\";\n+\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams opHelmParams1;\n+  private HelmParams opHelmParams2;\n+  private HelmParams opHelmParams4;\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // get a unique operator 2 namespace\n+    logger.info(\"Getting a unique namespace for operator 2\");\n+    assertNotNull(namespaces.get(5), \"Namespace list is null\");\n+    op2Namespace = namespaces.get(5);\n+\n+    // get a unique operator 3 namespace\n+    logger.info(\"Getting a unique namespace for operator 3\");\n+    assertNotNull(namespaces.get(6), \"Namespace list is null\");\n+    op3Namespace = namespaces.get(6);\n+\n+    // get a unique operator 4 namespace\n+    logger.info(\"Getting a unique namespace for operator 4\");\n+    assertNotNull(namespaces.get(7), \"Namespace list is null\");\n+    op4Namespace = namespaces.get(7);\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+    createSecrets(domain3Namespace);\n+    createSecrets(\"default\");\n+    labels1 = new java.util.HashMap<>();\n+    labels1.put(OPERATOR_RELEASE_NAME, OPERATOR_RELEASE_NAME);\n+    labels2 = new java.util.HashMap<>();\n+    labels2.put(OPERATOR_RELEASE_NAME + \"2\", OPERATOR_RELEASE_NAME);\n+    setLabelToNamespace(domain1Namespace, labels1);\n+    setLabelToNamespace(domain2Namespace, labels2);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+\n+    // Delete domain custom resource\n+    logger.info(\"Delete domain1 custom resource in namespace {0}\", domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid, domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \" from \" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2 custom resource in namespace {0}\", domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid, domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \" from \" + domain2Namespace);\n+\n+    logger.info(\"Delete domain3 custom resource in namespace {0}\", domain3Namespace);\n+    deleteDomainCustomResource(domain3Uid, domain3Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain3Uid);\n+\n+    logger.info(\"Delete domain4 custom resource in namespace {0}\", domain4Namespace);\n+    deleteDomainCustomResource(domain4Uid, domain4Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain4Uid);\n+\n+    logger.info(\"Delete domain1test custom resource in namespace {0}\", \"test-\" + domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid + \"test\", \"test-\" + domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \"test from test-\" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2test custom resource in namespace {0}\", \"test-\" + domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid + \"test\", \"test-\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \"test from test-\" + domain2Namespace);\n+\n+    logger.info(\"Delete weblogic custom resource in namespace {0}\", \"weblogic\" + domain2Namespace);\n+    deleteDomainCustomResource(\"weblogic\", \"weblogic\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource weblogic from weblogic\" + domain2Namespace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2NjQ5MA=="}, "originalCommit": {"oid": "2f7e78cece4496d7be6e42ec72deec2f2648b5d3"}, "originalPosition": 225}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzcwMjk1OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzo1NDo0NlrOHb2g0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzo1NDo0NlrOHb2g0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2NjczNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Deploy two custom domain resources in the two different namespaces with names starting with test\n          \n          \n            \n               * Deploy two custom domain resources in two different namespaces with names starting with test", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r498966737", "createdAt": "2020-10-02T17:54:46Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,824 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretList;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DEFAULT_EXTERNAL_REST_IDENTITY_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorImageName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.installOperator;\n+import static oracle.weblogic.kubernetes.actions.TestActions.listSecrets;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.checkHelmReleaseStatus;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorRestServiceRunning;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createExternalRestIdentitySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String opNamespace = null;\n+  private static String op2Namespace = null;\n+  private static String op3Namespace = null;\n+  private static String op4Namespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"managensdomain1\";\n+  private final String domain2Uid = \"managensdomain2\";\n+  private final String domain3Uid = \"managensdomain3\";\n+  private final String domain4Uid = \"managensdomain4\";\n+\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams opHelmParams1;\n+  private HelmParams opHelmParams2;\n+  private HelmParams opHelmParams4;\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // get a unique operator 2 namespace\n+    logger.info(\"Getting a unique namespace for operator 2\");\n+    assertNotNull(namespaces.get(5), \"Namespace list is null\");\n+    op2Namespace = namespaces.get(5);\n+\n+    // get a unique operator 3 namespace\n+    logger.info(\"Getting a unique namespace for operator 3\");\n+    assertNotNull(namespaces.get(6), \"Namespace list is null\");\n+    op3Namespace = namespaces.get(6);\n+\n+    // get a unique operator 4 namespace\n+    logger.info(\"Getting a unique namespace for operator 4\");\n+    assertNotNull(namespaces.get(7), \"Namespace list is null\");\n+    op4Namespace = namespaces.get(7);\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+    createSecrets(domain3Namespace);\n+    createSecrets(\"default\");\n+    labels1 = new java.util.HashMap<>();\n+    labels1.put(OPERATOR_RELEASE_NAME, OPERATOR_RELEASE_NAME);\n+    labels2 = new java.util.HashMap<>();\n+    labels2.put(OPERATOR_RELEASE_NAME + \"2\", OPERATOR_RELEASE_NAME);\n+    setLabelToNamespace(domain1Namespace, labels1);\n+    setLabelToNamespace(domain2Namespace, labels2);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+\n+    // Delete domain custom resource\n+    logger.info(\"Delete domain1 custom resource in namespace {0}\", domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid, domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \" from \" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2 custom resource in namespace {0}\", domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid, domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \" from \" + domain2Namespace);\n+\n+    logger.info(\"Delete domain3 custom resource in namespace {0}\", domain3Namespace);\n+    deleteDomainCustomResource(domain3Uid, domain3Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain3Uid);\n+\n+    logger.info(\"Delete domain4 custom resource in namespace {0}\", domain4Namespace);\n+    deleteDomainCustomResource(domain4Uid, domain4Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain4Uid);\n+\n+    logger.info(\"Delete domain1test custom resource in namespace {0}\", \"test-\" + domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid + \"test\", \"test-\" + domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \"test from test-\" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2test custom resource in namespace {0}\", \"test-\" + domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid + \"test\", \"test-\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \"test from test-\" + domain2Namespace);\n+\n+    logger.info(\"Delete weblogic custom resource in namespace {0}\", \"weblogic\" + domain2Namespace);\n+    deleteDomainCustomResource(\"weblogic\", \"weblogic\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource weblogic from weblogic\" + domain2Namespace);\n+\n+    deleteSecrets(\"default\");\n+    deleteSecrets(\"atest-\" +  domain1Namespace);;\n+    deleteNamespace(\"atest-\" + domain1Namespace);\n+    //delete operator\n+    uninstallOperator(opHelmParams1);\n+    uninstallOperator(opHelmParams2);\n+    uninstallOperator(opHelmParams4);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=RegExp,\n+   * and domainNamespaceRegExp=^test and domainNamespace= domain3NS.\n+   * Deploy two custom domain resources in the two different namespaces with names starting with test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f7e78cece4496d7be6e42ec72deec2f2648b5d3"}, "originalPosition": 241}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzcxMjI2OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzo1ODowMVrOHb2mtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzo1ODowMVrOHb2mtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2ODI0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n          \n          \n            \n                createSecretWithUsernamePassword(adminSecretName, domainNamespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r498968244", "createdAt": "2020-10-02T17:58:01Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,824 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretList;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DEFAULT_EXTERNAL_REST_IDENTITY_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorImageName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.installOperator;\n+import static oracle.weblogic.kubernetes.actions.TestActions.listSecrets;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.checkHelmReleaseStatus;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorRestServiceRunning;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createExternalRestIdentitySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String opNamespace = null;\n+  private static String op2Namespace = null;\n+  private static String op3Namespace = null;\n+  private static String op4Namespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"managensdomain1\";\n+  private final String domain2Uid = \"managensdomain2\";\n+  private final String domain3Uid = \"managensdomain3\";\n+  private final String domain4Uid = \"managensdomain4\";\n+\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams opHelmParams1;\n+  private HelmParams opHelmParams2;\n+  private HelmParams opHelmParams4;\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // get a unique operator 2 namespace\n+    logger.info(\"Getting a unique namespace for operator 2\");\n+    assertNotNull(namespaces.get(5), \"Namespace list is null\");\n+    op2Namespace = namespaces.get(5);\n+\n+    // get a unique operator 3 namespace\n+    logger.info(\"Getting a unique namespace for operator 3\");\n+    assertNotNull(namespaces.get(6), \"Namespace list is null\");\n+    op3Namespace = namespaces.get(6);\n+\n+    // get a unique operator 4 namespace\n+    logger.info(\"Getting a unique namespace for operator 4\");\n+    assertNotNull(namespaces.get(7), \"Namespace list is null\");\n+    op4Namespace = namespaces.get(7);\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+    createSecrets(domain3Namespace);\n+    createSecrets(\"default\");\n+    labels1 = new java.util.HashMap<>();\n+    labels1.put(OPERATOR_RELEASE_NAME, OPERATOR_RELEASE_NAME);\n+    labels2 = new java.util.HashMap<>();\n+    labels2.put(OPERATOR_RELEASE_NAME + \"2\", OPERATOR_RELEASE_NAME);\n+    setLabelToNamespace(domain1Namespace, labels1);\n+    setLabelToNamespace(domain2Namespace, labels2);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+\n+    // Delete domain custom resource\n+    logger.info(\"Delete domain1 custom resource in namespace {0}\", domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid, domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \" from \" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2 custom resource in namespace {0}\", domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid, domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \" from \" + domain2Namespace);\n+\n+    logger.info(\"Delete domain3 custom resource in namespace {0}\", domain3Namespace);\n+    deleteDomainCustomResource(domain3Uid, domain3Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain3Uid);\n+\n+    logger.info(\"Delete domain4 custom resource in namespace {0}\", domain4Namespace);\n+    deleteDomainCustomResource(domain4Uid, domain4Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain4Uid);\n+\n+    logger.info(\"Delete domain1test custom resource in namespace {0}\", \"test-\" + domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid + \"test\", \"test-\" + domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \"test from test-\" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2test custom resource in namespace {0}\", \"test-\" + domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid + \"test\", \"test-\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \"test from test-\" + domain2Namespace);\n+\n+    logger.info(\"Delete weblogic custom resource in namespace {0}\", \"weblogic\" + domain2Namespace);\n+    deleteDomainCustomResource(\"weblogic\", \"weblogic\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource weblogic from weblogic\" + domain2Namespace);\n+\n+    deleteSecrets(\"default\");\n+    deleteSecrets(\"atest-\" +  domain1Namespace);;\n+    deleteNamespace(\"atest-\" + domain1Namespace);\n+    //delete operator\n+    uninstallOperator(opHelmParams1);\n+    uninstallOperator(opHelmParams2);\n+    uninstallOperator(opHelmParams4);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=RegExp,\n+   * and domainNamespaceRegExp=^test and domainNamespace= domain3NS.\n+   * Deploy two custom domain resources in the two different namespaces with names starting with test\n+   * and verify all server pods in the domains were created and ready.\n+   * Verify operator is able to manage these domains by scaling.\n+   * Try to start another domain with namespace domain3NS. Verify it is not started by operator\n+   * and value of domainNamespace is ignored for both specific namespace and default.\n+   * Upgrade helm chart to switch to using LabelSelector, start domain and verify operator can scale it.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using expression namespace management\")\n+  public void testNsManageByExp() {\n+    //create domain namespace\n+    String manageByExp1NS = \"test-\" +  domain1Namespace;\n+    String manageByExp2NS = \"test-\" +  domain2Namespace;\n+    String manageByExpDomain1Uid = \"test-\" + domain1Uid;\n+    String manageByExpDomain2Uid = \"test-\" + domain2Uid;\n+    String manageByLabelNS = \"weblogic1\" + domain1Namespace;\n+    String manageByLabelDomainUid = \"weblogic1\" + domain1Uid;\n+    String domain3NS = \"atest-\" +  domain1Namespace;\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp1NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp2NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(domain3NS));\n+    installAndVerifyOperatorCanManageDomainByNSRegExp(manageByExp1NS, manageByExp2NS,\n+        manageByExpDomain1Uid, manageByExpDomain2Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain will not start for specific NS and default\n+    checkPodNotCreated(domain3Uid + adminServerPrefix, domain3Uid, domain3Namespace);\n+    checkDomainNotStartedInDefaultNS(\"RegExp\");\n+    //verify that operator can't start domain if namespace does not start from test\n+    createSecrets(domain3NS);\n+    checkPodNotCreated(domain3Uid + adminServerPrefix, domain3Uid, domain3NS);\n+\n+    // install  operator sharing same domain\n+    checkSecondOperatorFailedToShareSameNS(manageByExp1NS);\n+    switchNSManagementToLabelSelectUsingUpgradeOperator(manageByLabelNS, manageByExp1NS,\n+        manageByLabelDomainUid, manageByExpDomain1Uid);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1.\n+   * Deploy a custom domain resource in the namespace with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   * Verify operator can't start another domain with namespace2 with label2.\n+   * Modify namespace2 to set label1, verify that operator can manage it.\n+   * Verify that domainNamespaces field will be ignored and domain will not start for namespaces:\n+   * (domain3Namespace) and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade operator to replace namespace management using RegExp namespaces.\n+   * Verify it can manage added domain and can't manage old domain by scaling .\n+   * Verify that upgrade helm fail if try to add domain, managed by other operator.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using label namespace management\")\n+  public void testNsManageByLabel() {\n+    String manageByLabelDomain1NS = domain1Namespace;\n+    String manageByLabelDomain2NS = domain2Namespace;\n+    String manageByExpDomainUid = \"weblogic2\" + domain2Namespace;\n+    String manageByExpDomainNS = \"weblogic2\" + domain2Namespace;\n+    String manageByLabelDomain1Uid = domain1Uid;\n+    String manageByLabelDomain2Uid = domain2Uid;\n+    installAndVerifyOperatorCanManageDomainByLabelSelector(manageByLabelDomain1NS, manageByLabelDomain2NS,\n+        manageByLabelDomain1Uid, manageByLabelDomain2Uid);\n+    addExtraDomainByAddingLabelToNS(labels1, manageByLabelDomain2NS, manageByLabelDomain2Uid);\n+    checkDomainNotStartedInDefaultNS(\"SelectLabel\");\n+    checkSecondOperatorFailedToShareSameNS(manageByLabelDomain1NS);\n+    switchNSManagementToRegExpUsingUpgradeOperator(manageByLabelDomain1NS, manageByExpDomainNS,\n+        manageByLabelDomain1Uid, manageByExpDomainUid);\n+    checkUpgradeFailedToAddNSManagedByAnotherOperator();\n+  }\n+\n+  /**\n+   * Create namespace ns1 with no label\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1 and enableRbac=false.\n+   * Add label1 to ns1 and verify domain can't be started\n+   * Call upgrade operator with reuse values to enable management for ns1\n+   * Deploy a custom domain resource in the namespace ns1 with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   */\n+  @Test\n+  @Order(3)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" with enableClusterRoleBinding\")\n+  public void testSwitchRbac() {\n+    String manageByLabelDomainNS = domain1Namespace + \"test4\";\n+    String manageByLabelDomainUid = domain1Uid + \"test4\";\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelDomainNS));\n+    opHelmParams4 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        op4Namespace, \"LabelSelector\",\n+        \"mytest4\", false);\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest4\", manageByLabelDomainUid);\n+    assertDoesNotThrow(() -> addLabelsToNamespace(manageByLabelDomainNS, labels));\n+    //verify domain can't be started because operator does not have permission to manage it\n+    createSecrets(manageByLabelDomainNS);\n+    checkPodNotCreated(manageByLabelDomainUid + adminServerPrefix, manageByLabelDomainUid, manageByLabelDomainNS);\n+    deleteDomainCrd(manageByLabelDomainNS, manageByLabelDomainUid);\n+    //upgrade operator and start domain\n+    int externalRestHttpsPort = getServiceNodePort(op4Namespace, \"external-weblogic-operator-svc\");\n+\n+    OperatorParams opParams = new OperatorParams()\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .helmParams(opHelmParams4);\n+\n+    assertTrue(upgradeAndVerifyOperator(op4Namespace, opParams));\n+    assertTrue(startDomain(manageByLabelDomainNS, manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(op4Namespace, manageByLabelDomainUid);\n+  }\n+\n+  private void checkUpgradeFailedToAddNSManagedByAnotherOperator() {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    // for ns names starting from weblogic, there one of domains\n+    //in namespace weblogic* is managed by operator2\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams1)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic\");\n+\n+    assertFalse(upgradeAndVerifyOperator(opNamespace, opParams), \"Upgrade does not fail when adding domain,\"\n+        + \" managed by other operator\");\n+  }\n+\n+  private void switchNSManagementToRegExpUsingUpgradeOperator(String manageByLabelNS,\n+                                                              String manageByExpNS,\n+                                                              String manageByLabelDomainUid,\n+                                                              String manageByExpDomainUid) {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    assertDoesNotThrow(() -> createNamespace(manageByExpNS));\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams1)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic2\");\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespace, opParams));\n+\n+    //verify domain is started in namespace with name starting with weblogic* and operator can scale it.\n+    createSecrets(manageByExpNS);\n+    assertTrue(startDomain(manageByExpNS,manageByExpDomainUid));\n+    checkOperatorCanScaleDomain(opNamespace,manageByExpDomainUid);\n+    //verify operator can't manage anymore domain running in the namespace with label\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespace, manageByLabelDomainUid, manageByLabelNS),\n+        \"Operator can still manage domain \"\n+        + manageByLabelDomainUid + \" in the namespace \" + manageByLabelNS);\n+  }\n+\n+  private void addExtraDomainByAddingLabelToNS(Map<String, String> labels, String domainNS, String domainUid) {\n+    deleteDomainCrd(domainNS, domainUid);\n+\n+    //switch to the label1, managed by operator and verify domain is started and can be managed by operator.\n+    setLabelToNamespace(domainNS, labels);\n+    assertTrue(startDomain(domainNS, domainUid));\n+    checkOperatorCanScaleDomain(opNamespace, domainUid);\n+  }\n+\n+  private void deleteDomainCrd(String domainNS, String domainUid) {\n+    //clean up domain resources in namespace and set namespace to label , managed by operator\n+    logger.info(\"deleting domain custom resource {0}\", domainUid);\n+    assertTrue(deleteDomainCustomResource(domainUid, domainNS));\n+\n+    // wait until domain was deleted\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be deleted in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNS,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainDoesNotExist(domainUid, DOMAIN_VERSION, domainNS));\n+  }\n+\n+  private void installAndVerifyOperatorCanManageDomainByLabelSelector(String manageByLabelDomain1NS,\n+                                                                      String manageByLabelDomain2NS,\n+                                                                      String manageByLabelDomain1Uid,\n+                                                                      String manageByLabelDomain2Uid) {\n+    // install and verify operator set to manage domains based on LabelSelector strategy,\n+    // domainNamespaces set to domain4 will be ignored\n+    opHelmParams1 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        opNamespace, \"LabelSelector\",\n+        OPERATOR_RELEASE_NAME, true, manageByLabelDomain1NS);\n+\n+    logger.info(\"Installing and verifying domain1\");\n+    createSecrets(manageByLabelDomain1NS);\n+    assertTrue(startDomain(manageByLabelDomain1NS, manageByLabelDomain1Uid),\n+        \"can't start or verify domain in namespace \" + manageByLabelDomain1NS);\n+\n+    checkOperatorCanScaleDomain(opNamespace, manageByLabelDomain1Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain4 will not start\n+    createSecrets(domain4Namespace);\n+    checkPodNotCreated(domain4Uid + adminServerPrefix, domain4Uid, domain4Namespace);\n+\n+    //verify that domain2 in namespace with no label2 will not start\n+    createSecrets(manageByLabelDomain2NS);\n+    checkPodNotCreated(manageByLabelDomain2Uid + adminServerPrefix, manageByLabelDomain2Uid, manageByLabelDomain2NS);\n+  }\n+\n+  private boolean isOperatorFailedToScaleDomain(String opNamespace, String domainUid, String domainNamespace) {\n+    try {\n+      //check operator can't manage domainNamespace by trying to scale domain\n+      int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+      String managedServerPodNamePrefix = domainUid + \"-managed-server\";\n+      String opServiceAccount = OPERATOR_RELEASE_NAME + \"-sa\";\n+      scaleAndVerifyCluster(\"cluster-1\", domainUid, domainNamespace,\n+          managedServerPodNamePrefix, 2, 1,\n+          true, externalRestHttpsPort, opNamespace, opServiceAccount,\n+          false, \"\", \"scaleDown\", 1, \"\", \"\", null, null);\n+      return false;\n+\n+    } catch (ConditionTimeoutException ex) {\n+      logger.info(\"Received expected error \" + ex.getMessage());\n+      return true;\n+    }\n+  }\n+\n+  private static void setLabelToNamespace(String domainNS, Map<String, String> labels) {\n+    //add label to domain namespace\n+    V1Namespace namespaceObject1 = assertDoesNotThrow(() -> Kubernetes.getNamespaceAsObject(domainNS));\n+    assertNotNull(namespaceObject1, \"Can't find namespace with name \" + domainNS);\n+    namespaceObject1.getMetadata().setLabels(labels);\n+    assertDoesNotThrow(() -> Kubernetes.replaceNamespace(namespaceObject1));\n+  }\n+\n+  private void checkOperatorCanScaleDomain(String opNamespace, String domainUid) {\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    assertTrue(scaleClusterWithRestApi(domainUid, clusterName, 3,\n+        externalRestHttpsPort, opNamespace, OPERATOR_RELEASE_NAME + \"-sa\"),\n+        \"Domain \" + domainUid + \" scaling operation failed\");\n+  }\n+\n+  private void checkSecondOperatorFailedToShareSameNS(String domainNamespace) {\n+    // try to install another operator sharing same domain namespace via different domainNsSelectionStrategy\n+    try {\n+      HelmParams opHelmParams3 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+          op3Namespace, \"List\",\n+          null, true, domainNamespace);\n+      assertNull(opHelmParams3, \"Operator helm chart sharing same NS with other operator did not fail\");\n+    } catch (org.opentest4j.AssertionFailedError ex) {\n+      //expecting to fail\n+      logger.info(\"Helm installation failed as expected \" + ex.getMessage());\n+    }\n+  }\n+\n+  private void checkDomainNotStartedInDefaultNS(String domainNsSelectionStrategy) {\n+    //verify operator can't start domain in the default namespace when domainNsSelectionStrategy not List\n+    // and selector does not match default\n+    checkPodNotCreated(\"defaultuid\" + adminServerPrefix, \"defaultuid\", \"default\");\n+\n+    logger.info(\"Delete defaultuid custom resource in namespace {0}\", \"default\");\n+    deleteDomainCustomResource(\"defaultuid\", \"default\");\n+    logger.info(\"Deleted Domain Custom Resource \" + \"defaultuid\");\n+  }\n+\n+  private void switchNSManagementToLabelSelectUsingUpgradeOperator(String manageByLabelNS,\n+                                                                   String manageByExpNS,\n+                                                                   String manageByLabelDomainUid,\n+                                                                   String manageByExpDomainUid) {\n+\n+    //upgrade operator to manage domains with Labeled namespaces\n+    int externalRestHttpsPort = getServiceNodePort(op2Namespace, \"external-weblogic-operator-svc\");\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelNS));\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest\", \"weblogic2\");\n+    setLabelToNamespace(manageByLabelNS, labels);\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams2)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceLabelSelector(\"mytest\")\n+        .domainNamespaceSelectionStrategy(\"LabelSelector\");\n+\n+    assertTrue(upgradeAndVerifyOperator(op2Namespace, opParams));\n+\n+    //verify domain is started\n+    createSecrets(manageByLabelNS);\n+    assertTrue(startDomain(manageByLabelNS,manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(op2Namespace,manageByLabelDomainUid);\n+    //check operator can't manage anymore manageByExpNS\n+    assertTrue(isOperatorFailedToScaleDomain(op2Namespace, manageByExpDomainUid,\n+        manageByExpNS), \"Operator can still manage domain \"\n+        + manageByExpNS + \" in the namespace \" + manageByExpNS);\n+  }\n+\n+  private void installAndVerifyOperatorCanManageDomainByNSRegExp(String manageByExp1NS,\n+                                                                 String manageByExp2NS,\n+                                                                 String manageByExpDomain1Uid,\n+                                                                 String manageByExpDomain2Uid) {\n+    // install and verify operator with domainNsSelectStrategy=RegExp to manage domains with namespaces names,\n+    // starting from test\n+    opHelmParams2 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        op2Namespace, \"RegExp\", \"^test\", true, domain3Namespace);\n+\n+    logger.info(\"Installing and verifying domain1\");\n+    createSecrets(manageByExp1NS);\n+    assertTrue(startDomain(manageByExp1NS, manageByExpDomain1Uid),\n+        \"can't start or verify domain in namespace \" + manageByExp1NS);\n+    checkOperatorCanScaleDomain(op2Namespace, manageByExpDomain1Uid);\n+\n+    logger.info(\"Installing and verifying domain2\");\n+    createSecrets(manageByExp2NS);\n+    assertTrue(startDomain(manageByExp2NS, manageByExpDomain2Uid),\n+        \"operator can start or verify domain in namespace \" + manageByExp2NS);\n+    checkOperatorCanScaleDomain(op2Namespace, manageByExpDomain2Uid);\n+  }\n+\n+\n+  private boolean startDomain(String domainNamespace, String domainUid) {\n+\n+    // create and verify the domain\n+    logger.info(\"Creating and verifying model in image domain\");\n+    try {\n+      Domain domain = createDomainCRD(domainNamespace, domainUid);\n+      createVerifyDomain(domainNamespace, domainUid, miiImage, domain);\n+      return true;\n+    } catch (Exception ex) {\n+      logger.info(\"Failed to createVerifyDomain \" + ex.getMessage());\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * Create a model in image domain crd.\n+   */\n+  private Domain createDomainCRD(String domainNamespace, String domainUid) {\n+\n+    // construct a list of oracle.weblogic.domain.Cluster objects to be used in the domain custom resource\n+    List<Cluster> clusters = new ArrayList<>();\n+    clusters.add(new Cluster()\n+        .clusterName(clusterName)\n+        .replicas(replicaCount)\n+        .serverStartState(\"RUNNING\"));\n+\n+    // create the domain CR\n+    Domain domain = new Domain()\n+        .apiVersion(DOMAIN_API_VERSION)\n+        .kind(\"Domain\")\n+        .metadata(new V1ObjectMeta()\n+            .name(domainUid)\n+            .namespace(domainNamespace))\n+        .spec(new DomainSpec()\n+            .domainUid(domainUid)\n+            .domainHomeSourceType(\"FromModel\")\n+            .image(miiImage)\n+            .addImagePullSecretsItem(new V1LocalObjectReference()\n+                .name(REPO_SECRET_NAME))\n+            .webLogicCredentialsSecret(new V1SecretReference()\n+                .name(adminSecretName)\n+                .namespace(domainNamespace))\n+            .includeServerOutInPodLog(true)\n+            .serverStartPolicy(\"IF_NEEDED\")\n+            .serverPod(new ServerPod()\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"JAVA_OPTIONS\")\n+                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"USER_MEM_ARGS\")\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n+            .adminServer(new AdminServer()\n+                .serverStartState(\"RUNNING\")\n+                .adminService(new oracle.weblogic.domain.AdminService()\n+                    .addChannelsItem(new oracle.weblogic.domain.Channel()\n+                        .channelName(\"default\")\n+                        .nodePort(0))))\n+            .clusters(clusters)\n+            .configuration(new Configuration()\n+                .model(new Model()\n+                    .domainType(WLS_DOMAIN_TYPE)\n+                    .runtimeEncryptionSecret(encryptionSecretName))));\n+    return domain;\n+  }\n+\n+  private static void createSecrets(String domainNamespace) {\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    if (!domainNamespace.equals(\"default\")) {\n+      createDockerRegistrySecret(domainNamespace);\n+    }\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f7e78cece4496d7be6e42ec72deec2f2648b5d3"}, "originalPosition": 639}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzcxNTk2OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzo1OToxNVrOHb2pGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzo1OToxNVrOHb2pGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2ODg1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Install WebLogic operator and wait up to two minutes until the operator pod is ready.\n          \n          \n            \n               * Install WebLogic operator and wait up to two minutes for the operator pod to be ready.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r498968859", "createdAt": "2020-10-02T17:59:15Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,824 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretList;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DEFAULT_EXTERNAL_REST_IDENTITY_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorImageName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.installOperator;\n+import static oracle.weblogic.kubernetes.actions.TestActions.listSecrets;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.checkHelmReleaseStatus;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorRestServiceRunning;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createExternalRestIdentitySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String opNamespace = null;\n+  private static String op2Namespace = null;\n+  private static String op3Namespace = null;\n+  private static String op4Namespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"managensdomain1\";\n+  private final String domain2Uid = \"managensdomain2\";\n+  private final String domain3Uid = \"managensdomain3\";\n+  private final String domain4Uid = \"managensdomain4\";\n+\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams opHelmParams1;\n+  private HelmParams opHelmParams2;\n+  private HelmParams opHelmParams4;\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // get a unique operator 2 namespace\n+    logger.info(\"Getting a unique namespace for operator 2\");\n+    assertNotNull(namespaces.get(5), \"Namespace list is null\");\n+    op2Namespace = namespaces.get(5);\n+\n+    // get a unique operator 3 namespace\n+    logger.info(\"Getting a unique namespace for operator 3\");\n+    assertNotNull(namespaces.get(6), \"Namespace list is null\");\n+    op3Namespace = namespaces.get(6);\n+\n+    // get a unique operator 4 namespace\n+    logger.info(\"Getting a unique namespace for operator 4\");\n+    assertNotNull(namespaces.get(7), \"Namespace list is null\");\n+    op4Namespace = namespaces.get(7);\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+    createSecrets(domain3Namespace);\n+    createSecrets(\"default\");\n+    labels1 = new java.util.HashMap<>();\n+    labels1.put(OPERATOR_RELEASE_NAME, OPERATOR_RELEASE_NAME);\n+    labels2 = new java.util.HashMap<>();\n+    labels2.put(OPERATOR_RELEASE_NAME + \"2\", OPERATOR_RELEASE_NAME);\n+    setLabelToNamespace(domain1Namespace, labels1);\n+    setLabelToNamespace(domain2Namespace, labels2);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+\n+    // Delete domain custom resource\n+    logger.info(\"Delete domain1 custom resource in namespace {0}\", domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid, domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \" from \" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2 custom resource in namespace {0}\", domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid, domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \" from \" + domain2Namespace);\n+\n+    logger.info(\"Delete domain3 custom resource in namespace {0}\", domain3Namespace);\n+    deleteDomainCustomResource(domain3Uid, domain3Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain3Uid);\n+\n+    logger.info(\"Delete domain4 custom resource in namespace {0}\", domain4Namespace);\n+    deleteDomainCustomResource(domain4Uid, domain4Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain4Uid);\n+\n+    logger.info(\"Delete domain1test custom resource in namespace {0}\", \"test-\" + domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid + \"test\", \"test-\" + domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \"test from test-\" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2test custom resource in namespace {0}\", \"test-\" + domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid + \"test\", \"test-\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \"test from test-\" + domain2Namespace);\n+\n+    logger.info(\"Delete weblogic custom resource in namespace {0}\", \"weblogic\" + domain2Namespace);\n+    deleteDomainCustomResource(\"weblogic\", \"weblogic\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource weblogic from weblogic\" + domain2Namespace);\n+\n+    deleteSecrets(\"default\");\n+    deleteSecrets(\"atest-\" +  domain1Namespace);;\n+    deleteNamespace(\"atest-\" + domain1Namespace);\n+    //delete operator\n+    uninstallOperator(opHelmParams1);\n+    uninstallOperator(opHelmParams2);\n+    uninstallOperator(opHelmParams4);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=RegExp,\n+   * and domainNamespaceRegExp=^test and domainNamespace= domain3NS.\n+   * Deploy two custom domain resources in the two different namespaces with names starting with test\n+   * and verify all server pods in the domains were created and ready.\n+   * Verify operator is able to manage these domains by scaling.\n+   * Try to start another domain with namespace domain3NS. Verify it is not started by operator\n+   * and value of domainNamespace is ignored for both specific namespace and default.\n+   * Upgrade helm chart to switch to using LabelSelector, start domain and verify operator can scale it.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using expression namespace management\")\n+  public void testNsManageByExp() {\n+    //create domain namespace\n+    String manageByExp1NS = \"test-\" +  domain1Namespace;\n+    String manageByExp2NS = \"test-\" +  domain2Namespace;\n+    String manageByExpDomain1Uid = \"test-\" + domain1Uid;\n+    String manageByExpDomain2Uid = \"test-\" + domain2Uid;\n+    String manageByLabelNS = \"weblogic1\" + domain1Namespace;\n+    String manageByLabelDomainUid = \"weblogic1\" + domain1Uid;\n+    String domain3NS = \"atest-\" +  domain1Namespace;\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp1NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp2NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(domain3NS));\n+    installAndVerifyOperatorCanManageDomainByNSRegExp(manageByExp1NS, manageByExp2NS,\n+        manageByExpDomain1Uid, manageByExpDomain2Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain will not start for specific NS and default\n+    checkPodNotCreated(domain3Uid + adminServerPrefix, domain3Uid, domain3Namespace);\n+    checkDomainNotStartedInDefaultNS(\"RegExp\");\n+    //verify that operator can't start domain if namespace does not start from test\n+    createSecrets(domain3NS);\n+    checkPodNotCreated(domain3Uid + adminServerPrefix, domain3Uid, domain3NS);\n+\n+    // install  operator sharing same domain\n+    checkSecondOperatorFailedToShareSameNS(manageByExp1NS);\n+    switchNSManagementToLabelSelectUsingUpgradeOperator(manageByLabelNS, manageByExp1NS,\n+        manageByLabelDomainUid, manageByExpDomain1Uid);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1.\n+   * Deploy a custom domain resource in the namespace with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   * Verify operator can't start another domain with namespace2 with label2.\n+   * Modify namespace2 to set label1, verify that operator can manage it.\n+   * Verify that domainNamespaces field will be ignored and domain will not start for namespaces:\n+   * (domain3Namespace) and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade operator to replace namespace management using RegExp namespaces.\n+   * Verify it can manage added domain and can't manage old domain by scaling .\n+   * Verify that upgrade helm fail if try to add domain, managed by other operator.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using label namespace management\")\n+  public void testNsManageByLabel() {\n+    String manageByLabelDomain1NS = domain1Namespace;\n+    String manageByLabelDomain2NS = domain2Namespace;\n+    String manageByExpDomainUid = \"weblogic2\" + domain2Namespace;\n+    String manageByExpDomainNS = \"weblogic2\" + domain2Namespace;\n+    String manageByLabelDomain1Uid = domain1Uid;\n+    String manageByLabelDomain2Uid = domain2Uid;\n+    installAndVerifyOperatorCanManageDomainByLabelSelector(manageByLabelDomain1NS, manageByLabelDomain2NS,\n+        manageByLabelDomain1Uid, manageByLabelDomain2Uid);\n+    addExtraDomainByAddingLabelToNS(labels1, manageByLabelDomain2NS, manageByLabelDomain2Uid);\n+    checkDomainNotStartedInDefaultNS(\"SelectLabel\");\n+    checkSecondOperatorFailedToShareSameNS(manageByLabelDomain1NS);\n+    switchNSManagementToRegExpUsingUpgradeOperator(manageByLabelDomain1NS, manageByExpDomainNS,\n+        manageByLabelDomain1Uid, manageByExpDomainUid);\n+    checkUpgradeFailedToAddNSManagedByAnotherOperator();\n+  }\n+\n+  /**\n+   * Create namespace ns1 with no label\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1 and enableRbac=false.\n+   * Add label1 to ns1 and verify domain can't be started\n+   * Call upgrade operator with reuse values to enable management for ns1\n+   * Deploy a custom domain resource in the namespace ns1 with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   */\n+  @Test\n+  @Order(3)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" with enableClusterRoleBinding\")\n+  public void testSwitchRbac() {\n+    String manageByLabelDomainNS = domain1Namespace + \"test4\";\n+    String manageByLabelDomainUid = domain1Uid + \"test4\";\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelDomainNS));\n+    opHelmParams4 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        op4Namespace, \"LabelSelector\",\n+        \"mytest4\", false);\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest4\", manageByLabelDomainUid);\n+    assertDoesNotThrow(() -> addLabelsToNamespace(manageByLabelDomainNS, labels));\n+    //verify domain can't be started because operator does not have permission to manage it\n+    createSecrets(manageByLabelDomainNS);\n+    checkPodNotCreated(manageByLabelDomainUid + adminServerPrefix, manageByLabelDomainUid, manageByLabelDomainNS);\n+    deleteDomainCrd(manageByLabelDomainNS, manageByLabelDomainUid);\n+    //upgrade operator and start domain\n+    int externalRestHttpsPort = getServiceNodePort(op4Namespace, \"external-weblogic-operator-svc\");\n+\n+    OperatorParams opParams = new OperatorParams()\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .helmParams(opHelmParams4);\n+\n+    assertTrue(upgradeAndVerifyOperator(op4Namespace, opParams));\n+    assertTrue(startDomain(manageByLabelDomainNS, manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(op4Namespace, manageByLabelDomainUid);\n+  }\n+\n+  private void checkUpgradeFailedToAddNSManagedByAnotherOperator() {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    // for ns names starting from weblogic, there one of domains\n+    //in namespace weblogic* is managed by operator2\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams1)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic\");\n+\n+    assertFalse(upgradeAndVerifyOperator(opNamespace, opParams), \"Upgrade does not fail when adding domain,\"\n+        + \" managed by other operator\");\n+  }\n+\n+  private void switchNSManagementToRegExpUsingUpgradeOperator(String manageByLabelNS,\n+                                                              String manageByExpNS,\n+                                                              String manageByLabelDomainUid,\n+                                                              String manageByExpDomainUid) {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    assertDoesNotThrow(() -> createNamespace(manageByExpNS));\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams1)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic2\");\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespace, opParams));\n+\n+    //verify domain is started in namespace with name starting with weblogic* and operator can scale it.\n+    createSecrets(manageByExpNS);\n+    assertTrue(startDomain(manageByExpNS,manageByExpDomainUid));\n+    checkOperatorCanScaleDomain(opNamespace,manageByExpDomainUid);\n+    //verify operator can't manage anymore domain running in the namespace with label\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespace, manageByLabelDomainUid, manageByLabelNS),\n+        \"Operator can still manage domain \"\n+        + manageByLabelDomainUid + \" in the namespace \" + manageByLabelNS);\n+  }\n+\n+  private void addExtraDomainByAddingLabelToNS(Map<String, String> labels, String domainNS, String domainUid) {\n+    deleteDomainCrd(domainNS, domainUid);\n+\n+    //switch to the label1, managed by operator and verify domain is started and can be managed by operator.\n+    setLabelToNamespace(domainNS, labels);\n+    assertTrue(startDomain(domainNS, domainUid));\n+    checkOperatorCanScaleDomain(opNamespace, domainUid);\n+  }\n+\n+  private void deleteDomainCrd(String domainNS, String domainUid) {\n+    //clean up domain resources in namespace and set namespace to label , managed by operator\n+    logger.info(\"deleting domain custom resource {0}\", domainUid);\n+    assertTrue(deleteDomainCustomResource(domainUid, domainNS));\n+\n+    // wait until domain was deleted\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be deleted in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNS,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainDoesNotExist(domainUid, DOMAIN_VERSION, domainNS));\n+  }\n+\n+  private void installAndVerifyOperatorCanManageDomainByLabelSelector(String manageByLabelDomain1NS,\n+                                                                      String manageByLabelDomain2NS,\n+                                                                      String manageByLabelDomain1Uid,\n+                                                                      String manageByLabelDomain2Uid) {\n+    // install and verify operator set to manage domains based on LabelSelector strategy,\n+    // domainNamespaces set to domain4 will be ignored\n+    opHelmParams1 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        opNamespace, \"LabelSelector\",\n+        OPERATOR_RELEASE_NAME, true, manageByLabelDomain1NS);\n+\n+    logger.info(\"Installing and verifying domain1\");\n+    createSecrets(manageByLabelDomain1NS);\n+    assertTrue(startDomain(manageByLabelDomain1NS, manageByLabelDomain1Uid),\n+        \"can't start or verify domain in namespace \" + manageByLabelDomain1NS);\n+\n+    checkOperatorCanScaleDomain(opNamespace, manageByLabelDomain1Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain4 will not start\n+    createSecrets(domain4Namespace);\n+    checkPodNotCreated(domain4Uid + adminServerPrefix, domain4Uid, domain4Namespace);\n+\n+    //verify that domain2 in namespace with no label2 will not start\n+    createSecrets(manageByLabelDomain2NS);\n+    checkPodNotCreated(manageByLabelDomain2Uid + adminServerPrefix, manageByLabelDomain2Uid, manageByLabelDomain2NS);\n+  }\n+\n+  private boolean isOperatorFailedToScaleDomain(String opNamespace, String domainUid, String domainNamespace) {\n+    try {\n+      //check operator can't manage domainNamespace by trying to scale domain\n+      int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+      String managedServerPodNamePrefix = domainUid + \"-managed-server\";\n+      String opServiceAccount = OPERATOR_RELEASE_NAME + \"-sa\";\n+      scaleAndVerifyCluster(\"cluster-1\", domainUid, domainNamespace,\n+          managedServerPodNamePrefix, 2, 1,\n+          true, externalRestHttpsPort, opNamespace, opServiceAccount,\n+          false, \"\", \"scaleDown\", 1, \"\", \"\", null, null);\n+      return false;\n+\n+    } catch (ConditionTimeoutException ex) {\n+      logger.info(\"Received expected error \" + ex.getMessage());\n+      return true;\n+    }\n+  }\n+\n+  private static void setLabelToNamespace(String domainNS, Map<String, String> labels) {\n+    //add label to domain namespace\n+    V1Namespace namespaceObject1 = assertDoesNotThrow(() -> Kubernetes.getNamespaceAsObject(domainNS));\n+    assertNotNull(namespaceObject1, \"Can't find namespace with name \" + domainNS);\n+    namespaceObject1.getMetadata().setLabels(labels);\n+    assertDoesNotThrow(() -> Kubernetes.replaceNamespace(namespaceObject1));\n+  }\n+\n+  private void checkOperatorCanScaleDomain(String opNamespace, String domainUid) {\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    assertTrue(scaleClusterWithRestApi(domainUid, clusterName, 3,\n+        externalRestHttpsPort, opNamespace, OPERATOR_RELEASE_NAME + \"-sa\"),\n+        \"Domain \" + domainUid + \" scaling operation failed\");\n+  }\n+\n+  private void checkSecondOperatorFailedToShareSameNS(String domainNamespace) {\n+    // try to install another operator sharing same domain namespace via different domainNsSelectionStrategy\n+    try {\n+      HelmParams opHelmParams3 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+          op3Namespace, \"List\",\n+          null, true, domainNamespace);\n+      assertNull(opHelmParams3, \"Operator helm chart sharing same NS with other operator did not fail\");\n+    } catch (org.opentest4j.AssertionFailedError ex) {\n+      //expecting to fail\n+      logger.info(\"Helm installation failed as expected \" + ex.getMessage());\n+    }\n+  }\n+\n+  private void checkDomainNotStartedInDefaultNS(String domainNsSelectionStrategy) {\n+    //verify operator can't start domain in the default namespace when domainNsSelectionStrategy not List\n+    // and selector does not match default\n+    checkPodNotCreated(\"defaultuid\" + adminServerPrefix, \"defaultuid\", \"default\");\n+\n+    logger.info(\"Delete defaultuid custom resource in namespace {0}\", \"default\");\n+    deleteDomainCustomResource(\"defaultuid\", \"default\");\n+    logger.info(\"Deleted Domain Custom Resource \" + \"defaultuid\");\n+  }\n+\n+  private void switchNSManagementToLabelSelectUsingUpgradeOperator(String manageByLabelNS,\n+                                                                   String manageByExpNS,\n+                                                                   String manageByLabelDomainUid,\n+                                                                   String manageByExpDomainUid) {\n+\n+    //upgrade operator to manage domains with Labeled namespaces\n+    int externalRestHttpsPort = getServiceNodePort(op2Namespace, \"external-weblogic-operator-svc\");\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelNS));\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest\", \"weblogic2\");\n+    setLabelToNamespace(manageByLabelNS, labels);\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams2)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceLabelSelector(\"mytest\")\n+        .domainNamespaceSelectionStrategy(\"LabelSelector\");\n+\n+    assertTrue(upgradeAndVerifyOperator(op2Namespace, opParams));\n+\n+    //verify domain is started\n+    createSecrets(manageByLabelNS);\n+    assertTrue(startDomain(manageByLabelNS,manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(op2Namespace,manageByLabelDomainUid);\n+    //check operator can't manage anymore manageByExpNS\n+    assertTrue(isOperatorFailedToScaleDomain(op2Namespace, manageByExpDomainUid,\n+        manageByExpNS), \"Operator can still manage domain \"\n+        + manageByExpNS + \" in the namespace \" + manageByExpNS);\n+  }\n+\n+  private void installAndVerifyOperatorCanManageDomainByNSRegExp(String manageByExp1NS,\n+                                                                 String manageByExp2NS,\n+                                                                 String manageByExpDomain1Uid,\n+                                                                 String manageByExpDomain2Uid) {\n+    // install and verify operator with domainNsSelectStrategy=RegExp to manage domains with namespaces names,\n+    // starting from test\n+    opHelmParams2 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        op2Namespace, \"RegExp\", \"^test\", true, domain3Namespace);\n+\n+    logger.info(\"Installing and verifying domain1\");\n+    createSecrets(manageByExp1NS);\n+    assertTrue(startDomain(manageByExp1NS, manageByExpDomain1Uid),\n+        \"can't start or verify domain in namespace \" + manageByExp1NS);\n+    checkOperatorCanScaleDomain(op2Namespace, manageByExpDomain1Uid);\n+\n+    logger.info(\"Installing and verifying domain2\");\n+    createSecrets(manageByExp2NS);\n+    assertTrue(startDomain(manageByExp2NS, manageByExpDomain2Uid),\n+        \"operator can start or verify domain in namespace \" + manageByExp2NS);\n+    checkOperatorCanScaleDomain(op2Namespace, manageByExpDomain2Uid);\n+  }\n+\n+\n+  private boolean startDomain(String domainNamespace, String domainUid) {\n+\n+    // create and verify the domain\n+    logger.info(\"Creating and verifying model in image domain\");\n+    try {\n+      Domain domain = createDomainCRD(domainNamespace, domainUid);\n+      createVerifyDomain(domainNamespace, domainUid, miiImage, domain);\n+      return true;\n+    } catch (Exception ex) {\n+      logger.info(\"Failed to createVerifyDomain \" + ex.getMessage());\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * Create a model in image domain crd.\n+   */\n+  private Domain createDomainCRD(String domainNamespace, String domainUid) {\n+\n+    // construct a list of oracle.weblogic.domain.Cluster objects to be used in the domain custom resource\n+    List<Cluster> clusters = new ArrayList<>();\n+    clusters.add(new Cluster()\n+        .clusterName(clusterName)\n+        .replicas(replicaCount)\n+        .serverStartState(\"RUNNING\"));\n+\n+    // create the domain CR\n+    Domain domain = new Domain()\n+        .apiVersion(DOMAIN_API_VERSION)\n+        .kind(\"Domain\")\n+        .metadata(new V1ObjectMeta()\n+            .name(domainUid)\n+            .namespace(domainNamespace))\n+        .spec(new DomainSpec()\n+            .domainUid(domainUid)\n+            .domainHomeSourceType(\"FromModel\")\n+            .image(miiImage)\n+            .addImagePullSecretsItem(new V1LocalObjectReference()\n+                .name(REPO_SECRET_NAME))\n+            .webLogicCredentialsSecret(new V1SecretReference()\n+                .name(adminSecretName)\n+                .namespace(domainNamespace))\n+            .includeServerOutInPodLog(true)\n+            .serverStartPolicy(\"IF_NEEDED\")\n+            .serverPod(new ServerPod()\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"JAVA_OPTIONS\")\n+                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"USER_MEM_ARGS\")\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n+            .adminServer(new AdminServer()\n+                .serverStartState(\"RUNNING\")\n+                .adminService(new oracle.weblogic.domain.AdminService()\n+                    .addChannelsItem(new oracle.weblogic.domain.Channel()\n+                        .channelName(\"default\")\n+                        .nodePort(0))))\n+            .clusters(clusters)\n+            .configuration(new Configuration()\n+                .model(new Model()\n+                    .domainType(WLS_DOMAIN_TYPE)\n+                    .runtimeEncryptionSecret(encryptionSecretName))));\n+    return domain;\n+  }\n+\n+  private static void createSecrets(String domainNamespace) {\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    if (!domainNamespace.equals(\"default\")) {\n+      createDockerRegistrySecret(domainNamespace);\n+    }\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create encryption secret\n+    logger.info(\"Creating encryption secret\");\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+  }\n+\n+  private static void deleteSecrets(String domainNamespace) {\n+    logger.info(\"Deleting docker registry secret in namespace {0}\", domainNamespace);\n+    if (!domainNamespace.equals(\"default\")) {\n+      deleteSecret(OCR_SECRET_NAME, domainNamespace);\n+    }\n+\n+    // delete secret for admin credentials\n+    logger.info(\"Deleting secret for admin credentials\");\n+    deleteSecret(adminSecretName, domainNamespace);\n+\n+    // delete encryption secret\n+    logger.info(\"Deleting encryption secret\");\n+    deleteSecret(encryptionSecretName, domainNamespace);\n+  }\n+\n+  private void createVerifyDomain(String domainNamespace, String domainUid, String miiImage, Domain domain) {\n+    // create domain\n+    logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+        domainUid, domainNamespace, miiImage);\n+    createDomainAndVerify(domain, domainNamespace);\n+    String adminServerPodName = domainUid + adminServerPrefix;\n+    // check that admin server pod exists in the domain namespace\n+    logger.info(\"Checking that admin server pod {0} exists in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReadyAndServiceExists(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check for managed server pods existence in the domain namespace\n+    for (int i = 1; i <= replicaCount; i++) {\n+      String managedServerPodName = domainUid + managedServerPrefix + i;\n+\n+      // check that the managed server pod exists\n+      logger.info(\"Checking that managed server pod {0} exists in namespace {1}\",\n+          managedServerPodName, domainNamespace);\n+      checkPodReadyAndServiceExists(managedServerPodName, domainUid, domainNamespace);\n+    }\n+  }\n+\n+  /**\n+   * Install WebLogic operator and wait up to two minutes until the operator pod is ready.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f7e78cece4496d7be6e42ec72deec2f2648b5d3"}, "originalPosition": 684}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzcxNzE0OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzo1OTo0MlrOHb2p4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzo1OTo0MlrOHb2p4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2OTA1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param operNamespace the operator namespace in which the operator will be installed\n          \n          \n            \n               * @param operNamespace the namespace in which the operator is installed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r498969057", "createdAt": "2020-10-02T17:59:42Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,824 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretList;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DEFAULT_EXTERNAL_REST_IDENTITY_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorImageName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.installOperator;\n+import static oracle.weblogic.kubernetes.actions.TestActions.listSecrets;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.checkHelmReleaseStatus;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorRestServiceRunning;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createExternalRestIdentitySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String opNamespace = null;\n+  private static String op2Namespace = null;\n+  private static String op3Namespace = null;\n+  private static String op4Namespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"managensdomain1\";\n+  private final String domain2Uid = \"managensdomain2\";\n+  private final String domain3Uid = \"managensdomain3\";\n+  private final String domain4Uid = \"managensdomain4\";\n+\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams opHelmParams1;\n+  private HelmParams opHelmParams2;\n+  private HelmParams opHelmParams4;\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // get a unique operator 2 namespace\n+    logger.info(\"Getting a unique namespace for operator 2\");\n+    assertNotNull(namespaces.get(5), \"Namespace list is null\");\n+    op2Namespace = namespaces.get(5);\n+\n+    // get a unique operator 3 namespace\n+    logger.info(\"Getting a unique namespace for operator 3\");\n+    assertNotNull(namespaces.get(6), \"Namespace list is null\");\n+    op3Namespace = namespaces.get(6);\n+\n+    // get a unique operator 4 namespace\n+    logger.info(\"Getting a unique namespace for operator 4\");\n+    assertNotNull(namespaces.get(7), \"Namespace list is null\");\n+    op4Namespace = namespaces.get(7);\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+    createSecrets(domain3Namespace);\n+    createSecrets(\"default\");\n+    labels1 = new java.util.HashMap<>();\n+    labels1.put(OPERATOR_RELEASE_NAME, OPERATOR_RELEASE_NAME);\n+    labels2 = new java.util.HashMap<>();\n+    labels2.put(OPERATOR_RELEASE_NAME + \"2\", OPERATOR_RELEASE_NAME);\n+    setLabelToNamespace(domain1Namespace, labels1);\n+    setLabelToNamespace(domain2Namespace, labels2);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+\n+    // Delete domain custom resource\n+    logger.info(\"Delete domain1 custom resource in namespace {0}\", domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid, domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \" from \" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2 custom resource in namespace {0}\", domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid, domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \" from \" + domain2Namespace);\n+\n+    logger.info(\"Delete domain3 custom resource in namespace {0}\", domain3Namespace);\n+    deleteDomainCustomResource(domain3Uid, domain3Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain3Uid);\n+\n+    logger.info(\"Delete domain4 custom resource in namespace {0}\", domain4Namespace);\n+    deleteDomainCustomResource(domain4Uid, domain4Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain4Uid);\n+\n+    logger.info(\"Delete domain1test custom resource in namespace {0}\", \"test-\" + domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid + \"test\", \"test-\" + domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \"test from test-\" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2test custom resource in namespace {0}\", \"test-\" + domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid + \"test\", \"test-\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \"test from test-\" + domain2Namespace);\n+\n+    logger.info(\"Delete weblogic custom resource in namespace {0}\", \"weblogic\" + domain2Namespace);\n+    deleteDomainCustomResource(\"weblogic\", \"weblogic\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource weblogic from weblogic\" + domain2Namespace);\n+\n+    deleteSecrets(\"default\");\n+    deleteSecrets(\"atest-\" +  domain1Namespace);;\n+    deleteNamespace(\"atest-\" + domain1Namespace);\n+    //delete operator\n+    uninstallOperator(opHelmParams1);\n+    uninstallOperator(opHelmParams2);\n+    uninstallOperator(opHelmParams4);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=RegExp,\n+   * and domainNamespaceRegExp=^test and domainNamespace= domain3NS.\n+   * Deploy two custom domain resources in the two different namespaces with names starting with test\n+   * and verify all server pods in the domains were created and ready.\n+   * Verify operator is able to manage these domains by scaling.\n+   * Try to start another domain with namespace domain3NS. Verify it is not started by operator\n+   * and value of domainNamespace is ignored for both specific namespace and default.\n+   * Upgrade helm chart to switch to using LabelSelector, start domain and verify operator can scale it.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using expression namespace management\")\n+  public void testNsManageByExp() {\n+    //create domain namespace\n+    String manageByExp1NS = \"test-\" +  domain1Namespace;\n+    String manageByExp2NS = \"test-\" +  domain2Namespace;\n+    String manageByExpDomain1Uid = \"test-\" + domain1Uid;\n+    String manageByExpDomain2Uid = \"test-\" + domain2Uid;\n+    String manageByLabelNS = \"weblogic1\" + domain1Namespace;\n+    String manageByLabelDomainUid = \"weblogic1\" + domain1Uid;\n+    String domain3NS = \"atest-\" +  domain1Namespace;\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp1NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp2NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(domain3NS));\n+    installAndVerifyOperatorCanManageDomainByNSRegExp(manageByExp1NS, manageByExp2NS,\n+        manageByExpDomain1Uid, manageByExpDomain2Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain will not start for specific NS and default\n+    checkPodNotCreated(domain3Uid + adminServerPrefix, domain3Uid, domain3Namespace);\n+    checkDomainNotStartedInDefaultNS(\"RegExp\");\n+    //verify that operator can't start domain if namespace does not start from test\n+    createSecrets(domain3NS);\n+    checkPodNotCreated(domain3Uid + adminServerPrefix, domain3Uid, domain3NS);\n+\n+    // install  operator sharing same domain\n+    checkSecondOperatorFailedToShareSameNS(manageByExp1NS);\n+    switchNSManagementToLabelSelectUsingUpgradeOperator(manageByLabelNS, manageByExp1NS,\n+        manageByLabelDomainUid, manageByExpDomain1Uid);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1.\n+   * Deploy a custom domain resource in the namespace with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   * Verify operator can't start another domain with namespace2 with label2.\n+   * Modify namespace2 to set label1, verify that operator can manage it.\n+   * Verify that domainNamespaces field will be ignored and domain will not start for namespaces:\n+   * (domain3Namespace) and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade operator to replace namespace management using RegExp namespaces.\n+   * Verify it can manage added domain and can't manage old domain by scaling .\n+   * Verify that upgrade helm fail if try to add domain, managed by other operator.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using label namespace management\")\n+  public void testNsManageByLabel() {\n+    String manageByLabelDomain1NS = domain1Namespace;\n+    String manageByLabelDomain2NS = domain2Namespace;\n+    String manageByExpDomainUid = \"weblogic2\" + domain2Namespace;\n+    String manageByExpDomainNS = \"weblogic2\" + domain2Namespace;\n+    String manageByLabelDomain1Uid = domain1Uid;\n+    String manageByLabelDomain2Uid = domain2Uid;\n+    installAndVerifyOperatorCanManageDomainByLabelSelector(manageByLabelDomain1NS, manageByLabelDomain2NS,\n+        manageByLabelDomain1Uid, manageByLabelDomain2Uid);\n+    addExtraDomainByAddingLabelToNS(labels1, manageByLabelDomain2NS, manageByLabelDomain2Uid);\n+    checkDomainNotStartedInDefaultNS(\"SelectLabel\");\n+    checkSecondOperatorFailedToShareSameNS(manageByLabelDomain1NS);\n+    switchNSManagementToRegExpUsingUpgradeOperator(manageByLabelDomain1NS, manageByExpDomainNS,\n+        manageByLabelDomain1Uid, manageByExpDomainUid);\n+    checkUpgradeFailedToAddNSManagedByAnotherOperator();\n+  }\n+\n+  /**\n+   * Create namespace ns1 with no label\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1 and enableRbac=false.\n+   * Add label1 to ns1 and verify domain can't be started\n+   * Call upgrade operator with reuse values to enable management for ns1\n+   * Deploy a custom domain resource in the namespace ns1 with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   */\n+  @Test\n+  @Order(3)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" with enableClusterRoleBinding\")\n+  public void testSwitchRbac() {\n+    String manageByLabelDomainNS = domain1Namespace + \"test4\";\n+    String manageByLabelDomainUid = domain1Uid + \"test4\";\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelDomainNS));\n+    opHelmParams4 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        op4Namespace, \"LabelSelector\",\n+        \"mytest4\", false);\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest4\", manageByLabelDomainUid);\n+    assertDoesNotThrow(() -> addLabelsToNamespace(manageByLabelDomainNS, labels));\n+    //verify domain can't be started because operator does not have permission to manage it\n+    createSecrets(manageByLabelDomainNS);\n+    checkPodNotCreated(manageByLabelDomainUid + adminServerPrefix, manageByLabelDomainUid, manageByLabelDomainNS);\n+    deleteDomainCrd(manageByLabelDomainNS, manageByLabelDomainUid);\n+    //upgrade operator and start domain\n+    int externalRestHttpsPort = getServiceNodePort(op4Namespace, \"external-weblogic-operator-svc\");\n+\n+    OperatorParams opParams = new OperatorParams()\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .helmParams(opHelmParams4);\n+\n+    assertTrue(upgradeAndVerifyOperator(op4Namespace, opParams));\n+    assertTrue(startDomain(manageByLabelDomainNS, manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(op4Namespace, manageByLabelDomainUid);\n+  }\n+\n+  private void checkUpgradeFailedToAddNSManagedByAnotherOperator() {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    // for ns names starting from weblogic, there one of domains\n+    //in namespace weblogic* is managed by operator2\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams1)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic\");\n+\n+    assertFalse(upgradeAndVerifyOperator(opNamespace, opParams), \"Upgrade does not fail when adding domain,\"\n+        + \" managed by other operator\");\n+  }\n+\n+  private void switchNSManagementToRegExpUsingUpgradeOperator(String manageByLabelNS,\n+                                                              String manageByExpNS,\n+                                                              String manageByLabelDomainUid,\n+                                                              String manageByExpDomainUid) {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    assertDoesNotThrow(() -> createNamespace(manageByExpNS));\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams1)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic2\");\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespace, opParams));\n+\n+    //verify domain is started in namespace with name starting with weblogic* and operator can scale it.\n+    createSecrets(manageByExpNS);\n+    assertTrue(startDomain(manageByExpNS,manageByExpDomainUid));\n+    checkOperatorCanScaleDomain(opNamespace,manageByExpDomainUid);\n+    //verify operator can't manage anymore domain running in the namespace with label\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespace, manageByLabelDomainUid, manageByLabelNS),\n+        \"Operator can still manage domain \"\n+        + manageByLabelDomainUid + \" in the namespace \" + manageByLabelNS);\n+  }\n+\n+  private void addExtraDomainByAddingLabelToNS(Map<String, String> labels, String domainNS, String domainUid) {\n+    deleteDomainCrd(domainNS, domainUid);\n+\n+    //switch to the label1, managed by operator and verify domain is started and can be managed by operator.\n+    setLabelToNamespace(domainNS, labels);\n+    assertTrue(startDomain(domainNS, domainUid));\n+    checkOperatorCanScaleDomain(opNamespace, domainUid);\n+  }\n+\n+  private void deleteDomainCrd(String domainNS, String domainUid) {\n+    //clean up domain resources in namespace and set namespace to label , managed by operator\n+    logger.info(\"deleting domain custom resource {0}\", domainUid);\n+    assertTrue(deleteDomainCustomResource(domainUid, domainNS));\n+\n+    // wait until domain was deleted\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be deleted in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNS,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainDoesNotExist(domainUid, DOMAIN_VERSION, domainNS));\n+  }\n+\n+  private void installAndVerifyOperatorCanManageDomainByLabelSelector(String manageByLabelDomain1NS,\n+                                                                      String manageByLabelDomain2NS,\n+                                                                      String manageByLabelDomain1Uid,\n+                                                                      String manageByLabelDomain2Uid) {\n+    // install and verify operator set to manage domains based on LabelSelector strategy,\n+    // domainNamespaces set to domain4 will be ignored\n+    opHelmParams1 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        opNamespace, \"LabelSelector\",\n+        OPERATOR_RELEASE_NAME, true, manageByLabelDomain1NS);\n+\n+    logger.info(\"Installing and verifying domain1\");\n+    createSecrets(manageByLabelDomain1NS);\n+    assertTrue(startDomain(manageByLabelDomain1NS, manageByLabelDomain1Uid),\n+        \"can't start or verify domain in namespace \" + manageByLabelDomain1NS);\n+\n+    checkOperatorCanScaleDomain(opNamespace, manageByLabelDomain1Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain4 will not start\n+    createSecrets(domain4Namespace);\n+    checkPodNotCreated(domain4Uid + adminServerPrefix, domain4Uid, domain4Namespace);\n+\n+    //verify that domain2 in namespace with no label2 will not start\n+    createSecrets(manageByLabelDomain2NS);\n+    checkPodNotCreated(manageByLabelDomain2Uid + adminServerPrefix, manageByLabelDomain2Uid, manageByLabelDomain2NS);\n+  }\n+\n+  private boolean isOperatorFailedToScaleDomain(String opNamespace, String domainUid, String domainNamespace) {\n+    try {\n+      //check operator can't manage domainNamespace by trying to scale domain\n+      int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+      String managedServerPodNamePrefix = domainUid + \"-managed-server\";\n+      String opServiceAccount = OPERATOR_RELEASE_NAME + \"-sa\";\n+      scaleAndVerifyCluster(\"cluster-1\", domainUid, domainNamespace,\n+          managedServerPodNamePrefix, 2, 1,\n+          true, externalRestHttpsPort, opNamespace, opServiceAccount,\n+          false, \"\", \"scaleDown\", 1, \"\", \"\", null, null);\n+      return false;\n+\n+    } catch (ConditionTimeoutException ex) {\n+      logger.info(\"Received expected error \" + ex.getMessage());\n+      return true;\n+    }\n+  }\n+\n+  private static void setLabelToNamespace(String domainNS, Map<String, String> labels) {\n+    //add label to domain namespace\n+    V1Namespace namespaceObject1 = assertDoesNotThrow(() -> Kubernetes.getNamespaceAsObject(domainNS));\n+    assertNotNull(namespaceObject1, \"Can't find namespace with name \" + domainNS);\n+    namespaceObject1.getMetadata().setLabels(labels);\n+    assertDoesNotThrow(() -> Kubernetes.replaceNamespace(namespaceObject1));\n+  }\n+\n+  private void checkOperatorCanScaleDomain(String opNamespace, String domainUid) {\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    assertTrue(scaleClusterWithRestApi(domainUid, clusterName, 3,\n+        externalRestHttpsPort, opNamespace, OPERATOR_RELEASE_NAME + \"-sa\"),\n+        \"Domain \" + domainUid + \" scaling operation failed\");\n+  }\n+\n+  private void checkSecondOperatorFailedToShareSameNS(String domainNamespace) {\n+    // try to install another operator sharing same domain namespace via different domainNsSelectionStrategy\n+    try {\n+      HelmParams opHelmParams3 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+          op3Namespace, \"List\",\n+          null, true, domainNamespace);\n+      assertNull(opHelmParams3, \"Operator helm chart sharing same NS with other operator did not fail\");\n+    } catch (org.opentest4j.AssertionFailedError ex) {\n+      //expecting to fail\n+      logger.info(\"Helm installation failed as expected \" + ex.getMessage());\n+    }\n+  }\n+\n+  private void checkDomainNotStartedInDefaultNS(String domainNsSelectionStrategy) {\n+    //verify operator can't start domain in the default namespace when domainNsSelectionStrategy not List\n+    // and selector does not match default\n+    checkPodNotCreated(\"defaultuid\" + adminServerPrefix, \"defaultuid\", \"default\");\n+\n+    logger.info(\"Delete defaultuid custom resource in namespace {0}\", \"default\");\n+    deleteDomainCustomResource(\"defaultuid\", \"default\");\n+    logger.info(\"Deleted Domain Custom Resource \" + \"defaultuid\");\n+  }\n+\n+  private void switchNSManagementToLabelSelectUsingUpgradeOperator(String manageByLabelNS,\n+                                                                   String manageByExpNS,\n+                                                                   String manageByLabelDomainUid,\n+                                                                   String manageByExpDomainUid) {\n+\n+    //upgrade operator to manage domains with Labeled namespaces\n+    int externalRestHttpsPort = getServiceNodePort(op2Namespace, \"external-weblogic-operator-svc\");\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelNS));\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest\", \"weblogic2\");\n+    setLabelToNamespace(manageByLabelNS, labels);\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams2)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceLabelSelector(\"mytest\")\n+        .domainNamespaceSelectionStrategy(\"LabelSelector\");\n+\n+    assertTrue(upgradeAndVerifyOperator(op2Namespace, opParams));\n+\n+    //verify domain is started\n+    createSecrets(manageByLabelNS);\n+    assertTrue(startDomain(manageByLabelNS,manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(op2Namespace,manageByLabelDomainUid);\n+    //check operator can't manage anymore manageByExpNS\n+    assertTrue(isOperatorFailedToScaleDomain(op2Namespace, manageByExpDomainUid,\n+        manageByExpNS), \"Operator can still manage domain \"\n+        + manageByExpNS + \" in the namespace \" + manageByExpNS);\n+  }\n+\n+  private void installAndVerifyOperatorCanManageDomainByNSRegExp(String manageByExp1NS,\n+                                                                 String manageByExp2NS,\n+                                                                 String manageByExpDomain1Uid,\n+                                                                 String manageByExpDomain2Uid) {\n+    // install and verify operator with domainNsSelectStrategy=RegExp to manage domains with namespaces names,\n+    // starting from test\n+    opHelmParams2 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        op2Namespace, \"RegExp\", \"^test\", true, domain3Namespace);\n+\n+    logger.info(\"Installing and verifying domain1\");\n+    createSecrets(manageByExp1NS);\n+    assertTrue(startDomain(manageByExp1NS, manageByExpDomain1Uid),\n+        \"can't start or verify domain in namespace \" + manageByExp1NS);\n+    checkOperatorCanScaleDomain(op2Namespace, manageByExpDomain1Uid);\n+\n+    logger.info(\"Installing and verifying domain2\");\n+    createSecrets(manageByExp2NS);\n+    assertTrue(startDomain(manageByExp2NS, manageByExpDomain2Uid),\n+        \"operator can start or verify domain in namespace \" + manageByExp2NS);\n+    checkOperatorCanScaleDomain(op2Namespace, manageByExpDomain2Uid);\n+  }\n+\n+\n+  private boolean startDomain(String domainNamespace, String domainUid) {\n+\n+    // create and verify the domain\n+    logger.info(\"Creating and verifying model in image domain\");\n+    try {\n+      Domain domain = createDomainCRD(domainNamespace, domainUid);\n+      createVerifyDomain(domainNamespace, domainUid, miiImage, domain);\n+      return true;\n+    } catch (Exception ex) {\n+      logger.info(\"Failed to createVerifyDomain \" + ex.getMessage());\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * Create a model in image domain crd.\n+   */\n+  private Domain createDomainCRD(String domainNamespace, String domainUid) {\n+\n+    // construct a list of oracle.weblogic.domain.Cluster objects to be used in the domain custom resource\n+    List<Cluster> clusters = new ArrayList<>();\n+    clusters.add(new Cluster()\n+        .clusterName(clusterName)\n+        .replicas(replicaCount)\n+        .serverStartState(\"RUNNING\"));\n+\n+    // create the domain CR\n+    Domain domain = new Domain()\n+        .apiVersion(DOMAIN_API_VERSION)\n+        .kind(\"Domain\")\n+        .metadata(new V1ObjectMeta()\n+            .name(domainUid)\n+            .namespace(domainNamespace))\n+        .spec(new DomainSpec()\n+            .domainUid(domainUid)\n+            .domainHomeSourceType(\"FromModel\")\n+            .image(miiImage)\n+            .addImagePullSecretsItem(new V1LocalObjectReference()\n+                .name(REPO_SECRET_NAME))\n+            .webLogicCredentialsSecret(new V1SecretReference()\n+                .name(adminSecretName)\n+                .namespace(domainNamespace))\n+            .includeServerOutInPodLog(true)\n+            .serverStartPolicy(\"IF_NEEDED\")\n+            .serverPod(new ServerPod()\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"JAVA_OPTIONS\")\n+                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"USER_MEM_ARGS\")\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n+            .adminServer(new AdminServer()\n+                .serverStartState(\"RUNNING\")\n+                .adminService(new oracle.weblogic.domain.AdminService()\n+                    .addChannelsItem(new oracle.weblogic.domain.Channel()\n+                        .channelName(\"default\")\n+                        .nodePort(0))))\n+            .clusters(clusters)\n+            .configuration(new Configuration()\n+                .model(new Model()\n+                    .domainType(WLS_DOMAIN_TYPE)\n+                    .runtimeEncryptionSecret(encryptionSecretName))));\n+    return domain;\n+  }\n+\n+  private static void createSecrets(String domainNamespace) {\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    if (!domainNamespace.equals(\"default\")) {\n+      createDockerRegistrySecret(domainNamespace);\n+    }\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create encryption secret\n+    logger.info(\"Creating encryption secret\");\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+  }\n+\n+  private static void deleteSecrets(String domainNamespace) {\n+    logger.info(\"Deleting docker registry secret in namespace {0}\", domainNamespace);\n+    if (!domainNamespace.equals(\"default\")) {\n+      deleteSecret(OCR_SECRET_NAME, domainNamespace);\n+    }\n+\n+    // delete secret for admin credentials\n+    logger.info(\"Deleting secret for admin credentials\");\n+    deleteSecret(adminSecretName, domainNamespace);\n+\n+    // delete encryption secret\n+    logger.info(\"Deleting encryption secret\");\n+    deleteSecret(encryptionSecretName, domainNamespace);\n+  }\n+\n+  private void createVerifyDomain(String domainNamespace, String domainUid, String miiImage, Domain domain) {\n+    // create domain\n+    logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+        domainUid, domainNamespace, miiImage);\n+    createDomainAndVerify(domain, domainNamespace);\n+    String adminServerPodName = domainUid + adminServerPrefix;\n+    // check that admin server pod exists in the domain namespace\n+    logger.info(\"Checking that admin server pod {0} exists in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReadyAndServiceExists(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check for managed server pods existence in the domain namespace\n+    for (int i = 1; i <= replicaCount; i++) {\n+      String managedServerPodName = domainUid + managedServerPrefix + i;\n+\n+      // check that the managed server pod exists\n+      logger.info(\"Checking that managed server pod {0} exists in namespace {1}\",\n+          managedServerPodName, domainNamespace);\n+      checkPodReadyAndServiceExists(managedServerPodName, domainUid, domainNamespace);\n+    }\n+  }\n+\n+  /**\n+   * Install WebLogic operator and wait up to two minutes until the operator pod is ready.\n+   *\n+   * @param operNamespace the operator namespace in which the operator will be installed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f7e78cece4496d7be6e42ec72deec2f2648b5d3"}, "originalPosition": 686}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzcxODc3OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODowMDoxNVrOHb2q6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODowMDoxNVrOHb2q6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2OTMyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param domainNamespace the list of the domain namespaces which will be managed by the operator\n          \n          \n            \n               * @param domainNamespace the list of the domain namespaces managed by the operator", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r498969320", "createdAt": "2020-10-02T18:00:15Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,824 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretList;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DEFAULT_EXTERNAL_REST_IDENTITY_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorImageName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.installOperator;\n+import static oracle.weblogic.kubernetes.actions.TestActions.listSecrets;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.checkHelmReleaseStatus;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorRestServiceRunning;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createExternalRestIdentitySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String opNamespace = null;\n+  private static String op2Namespace = null;\n+  private static String op3Namespace = null;\n+  private static String op4Namespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"managensdomain1\";\n+  private final String domain2Uid = \"managensdomain2\";\n+  private final String domain3Uid = \"managensdomain3\";\n+  private final String domain4Uid = \"managensdomain4\";\n+\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams opHelmParams1;\n+  private HelmParams opHelmParams2;\n+  private HelmParams opHelmParams4;\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // get a unique operator 2 namespace\n+    logger.info(\"Getting a unique namespace for operator 2\");\n+    assertNotNull(namespaces.get(5), \"Namespace list is null\");\n+    op2Namespace = namespaces.get(5);\n+\n+    // get a unique operator 3 namespace\n+    logger.info(\"Getting a unique namespace for operator 3\");\n+    assertNotNull(namespaces.get(6), \"Namespace list is null\");\n+    op3Namespace = namespaces.get(6);\n+\n+    // get a unique operator 4 namespace\n+    logger.info(\"Getting a unique namespace for operator 4\");\n+    assertNotNull(namespaces.get(7), \"Namespace list is null\");\n+    op4Namespace = namespaces.get(7);\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+    createSecrets(domain3Namespace);\n+    createSecrets(\"default\");\n+    labels1 = new java.util.HashMap<>();\n+    labels1.put(OPERATOR_RELEASE_NAME, OPERATOR_RELEASE_NAME);\n+    labels2 = new java.util.HashMap<>();\n+    labels2.put(OPERATOR_RELEASE_NAME + \"2\", OPERATOR_RELEASE_NAME);\n+    setLabelToNamespace(domain1Namespace, labels1);\n+    setLabelToNamespace(domain2Namespace, labels2);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+\n+    // Delete domain custom resource\n+    logger.info(\"Delete domain1 custom resource in namespace {0}\", domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid, domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \" from \" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2 custom resource in namespace {0}\", domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid, domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \" from \" + domain2Namespace);\n+\n+    logger.info(\"Delete domain3 custom resource in namespace {0}\", domain3Namespace);\n+    deleteDomainCustomResource(domain3Uid, domain3Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain3Uid);\n+\n+    logger.info(\"Delete domain4 custom resource in namespace {0}\", domain4Namespace);\n+    deleteDomainCustomResource(domain4Uid, domain4Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain4Uid);\n+\n+    logger.info(\"Delete domain1test custom resource in namespace {0}\", \"test-\" + domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid + \"test\", \"test-\" + domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \"test from test-\" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2test custom resource in namespace {0}\", \"test-\" + domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid + \"test\", \"test-\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \"test from test-\" + domain2Namespace);\n+\n+    logger.info(\"Delete weblogic custom resource in namespace {0}\", \"weblogic\" + domain2Namespace);\n+    deleteDomainCustomResource(\"weblogic\", \"weblogic\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource weblogic from weblogic\" + domain2Namespace);\n+\n+    deleteSecrets(\"default\");\n+    deleteSecrets(\"atest-\" +  domain1Namespace);;\n+    deleteNamespace(\"atest-\" + domain1Namespace);\n+    //delete operator\n+    uninstallOperator(opHelmParams1);\n+    uninstallOperator(opHelmParams2);\n+    uninstallOperator(opHelmParams4);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=RegExp,\n+   * and domainNamespaceRegExp=^test and domainNamespace= domain3NS.\n+   * Deploy two custom domain resources in the two different namespaces with names starting with test\n+   * and verify all server pods in the domains were created and ready.\n+   * Verify operator is able to manage these domains by scaling.\n+   * Try to start another domain with namespace domain3NS. Verify it is not started by operator\n+   * and value of domainNamespace is ignored for both specific namespace and default.\n+   * Upgrade helm chart to switch to using LabelSelector, start domain and verify operator can scale it.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using expression namespace management\")\n+  public void testNsManageByExp() {\n+    //create domain namespace\n+    String manageByExp1NS = \"test-\" +  domain1Namespace;\n+    String manageByExp2NS = \"test-\" +  domain2Namespace;\n+    String manageByExpDomain1Uid = \"test-\" + domain1Uid;\n+    String manageByExpDomain2Uid = \"test-\" + domain2Uid;\n+    String manageByLabelNS = \"weblogic1\" + domain1Namespace;\n+    String manageByLabelDomainUid = \"weblogic1\" + domain1Uid;\n+    String domain3NS = \"atest-\" +  domain1Namespace;\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp1NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp2NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(domain3NS));\n+    installAndVerifyOperatorCanManageDomainByNSRegExp(manageByExp1NS, manageByExp2NS,\n+        manageByExpDomain1Uid, manageByExpDomain2Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain will not start for specific NS and default\n+    checkPodNotCreated(domain3Uid + adminServerPrefix, domain3Uid, domain3Namespace);\n+    checkDomainNotStartedInDefaultNS(\"RegExp\");\n+    //verify that operator can't start domain if namespace does not start from test\n+    createSecrets(domain3NS);\n+    checkPodNotCreated(domain3Uid + adminServerPrefix, domain3Uid, domain3NS);\n+\n+    // install  operator sharing same domain\n+    checkSecondOperatorFailedToShareSameNS(manageByExp1NS);\n+    switchNSManagementToLabelSelectUsingUpgradeOperator(manageByLabelNS, manageByExp1NS,\n+        manageByLabelDomainUid, manageByExpDomain1Uid);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1.\n+   * Deploy a custom domain resource in the namespace with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   * Verify operator can't start another domain with namespace2 with label2.\n+   * Modify namespace2 to set label1, verify that operator can manage it.\n+   * Verify that domainNamespaces field will be ignored and domain will not start for namespaces:\n+   * (domain3Namespace) and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade operator to replace namespace management using RegExp namespaces.\n+   * Verify it can manage added domain and can't manage old domain by scaling .\n+   * Verify that upgrade helm fail if try to add domain, managed by other operator.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using label namespace management\")\n+  public void testNsManageByLabel() {\n+    String manageByLabelDomain1NS = domain1Namespace;\n+    String manageByLabelDomain2NS = domain2Namespace;\n+    String manageByExpDomainUid = \"weblogic2\" + domain2Namespace;\n+    String manageByExpDomainNS = \"weblogic2\" + domain2Namespace;\n+    String manageByLabelDomain1Uid = domain1Uid;\n+    String manageByLabelDomain2Uid = domain2Uid;\n+    installAndVerifyOperatorCanManageDomainByLabelSelector(manageByLabelDomain1NS, manageByLabelDomain2NS,\n+        manageByLabelDomain1Uid, manageByLabelDomain2Uid);\n+    addExtraDomainByAddingLabelToNS(labels1, manageByLabelDomain2NS, manageByLabelDomain2Uid);\n+    checkDomainNotStartedInDefaultNS(\"SelectLabel\");\n+    checkSecondOperatorFailedToShareSameNS(manageByLabelDomain1NS);\n+    switchNSManagementToRegExpUsingUpgradeOperator(manageByLabelDomain1NS, manageByExpDomainNS,\n+        manageByLabelDomain1Uid, manageByExpDomainUid);\n+    checkUpgradeFailedToAddNSManagedByAnotherOperator();\n+  }\n+\n+  /**\n+   * Create namespace ns1 with no label\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1 and enableRbac=false.\n+   * Add label1 to ns1 and verify domain can't be started\n+   * Call upgrade operator with reuse values to enable management for ns1\n+   * Deploy a custom domain resource in the namespace ns1 with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   */\n+  @Test\n+  @Order(3)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" with enableClusterRoleBinding\")\n+  public void testSwitchRbac() {\n+    String manageByLabelDomainNS = domain1Namespace + \"test4\";\n+    String manageByLabelDomainUid = domain1Uid + \"test4\";\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelDomainNS));\n+    opHelmParams4 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        op4Namespace, \"LabelSelector\",\n+        \"mytest4\", false);\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest4\", manageByLabelDomainUid);\n+    assertDoesNotThrow(() -> addLabelsToNamespace(manageByLabelDomainNS, labels));\n+    //verify domain can't be started because operator does not have permission to manage it\n+    createSecrets(manageByLabelDomainNS);\n+    checkPodNotCreated(manageByLabelDomainUid + adminServerPrefix, manageByLabelDomainUid, manageByLabelDomainNS);\n+    deleteDomainCrd(manageByLabelDomainNS, manageByLabelDomainUid);\n+    //upgrade operator and start domain\n+    int externalRestHttpsPort = getServiceNodePort(op4Namespace, \"external-weblogic-operator-svc\");\n+\n+    OperatorParams opParams = new OperatorParams()\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .helmParams(opHelmParams4);\n+\n+    assertTrue(upgradeAndVerifyOperator(op4Namespace, opParams));\n+    assertTrue(startDomain(manageByLabelDomainNS, manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(op4Namespace, manageByLabelDomainUid);\n+  }\n+\n+  private void checkUpgradeFailedToAddNSManagedByAnotherOperator() {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    // for ns names starting from weblogic, there one of domains\n+    //in namespace weblogic* is managed by operator2\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams1)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic\");\n+\n+    assertFalse(upgradeAndVerifyOperator(opNamespace, opParams), \"Upgrade does not fail when adding domain,\"\n+        + \" managed by other operator\");\n+  }\n+\n+  private void switchNSManagementToRegExpUsingUpgradeOperator(String manageByLabelNS,\n+                                                              String manageByExpNS,\n+                                                              String manageByLabelDomainUid,\n+                                                              String manageByExpDomainUid) {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    assertDoesNotThrow(() -> createNamespace(manageByExpNS));\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams1)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic2\");\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespace, opParams));\n+\n+    //verify domain is started in namespace with name starting with weblogic* and operator can scale it.\n+    createSecrets(manageByExpNS);\n+    assertTrue(startDomain(manageByExpNS,manageByExpDomainUid));\n+    checkOperatorCanScaleDomain(opNamespace,manageByExpDomainUid);\n+    //verify operator can't manage anymore domain running in the namespace with label\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespace, manageByLabelDomainUid, manageByLabelNS),\n+        \"Operator can still manage domain \"\n+        + manageByLabelDomainUid + \" in the namespace \" + manageByLabelNS);\n+  }\n+\n+  private void addExtraDomainByAddingLabelToNS(Map<String, String> labels, String domainNS, String domainUid) {\n+    deleteDomainCrd(domainNS, domainUid);\n+\n+    //switch to the label1, managed by operator and verify domain is started and can be managed by operator.\n+    setLabelToNamespace(domainNS, labels);\n+    assertTrue(startDomain(domainNS, domainUid));\n+    checkOperatorCanScaleDomain(opNamespace, domainUid);\n+  }\n+\n+  private void deleteDomainCrd(String domainNS, String domainUid) {\n+    //clean up domain resources in namespace and set namespace to label , managed by operator\n+    logger.info(\"deleting domain custom resource {0}\", domainUid);\n+    assertTrue(deleteDomainCustomResource(domainUid, domainNS));\n+\n+    // wait until domain was deleted\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be deleted in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNS,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainDoesNotExist(domainUid, DOMAIN_VERSION, domainNS));\n+  }\n+\n+  private void installAndVerifyOperatorCanManageDomainByLabelSelector(String manageByLabelDomain1NS,\n+                                                                      String manageByLabelDomain2NS,\n+                                                                      String manageByLabelDomain1Uid,\n+                                                                      String manageByLabelDomain2Uid) {\n+    // install and verify operator set to manage domains based on LabelSelector strategy,\n+    // domainNamespaces set to domain4 will be ignored\n+    opHelmParams1 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        opNamespace, \"LabelSelector\",\n+        OPERATOR_RELEASE_NAME, true, manageByLabelDomain1NS);\n+\n+    logger.info(\"Installing and verifying domain1\");\n+    createSecrets(manageByLabelDomain1NS);\n+    assertTrue(startDomain(manageByLabelDomain1NS, manageByLabelDomain1Uid),\n+        \"can't start or verify domain in namespace \" + manageByLabelDomain1NS);\n+\n+    checkOperatorCanScaleDomain(opNamespace, manageByLabelDomain1Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain4 will not start\n+    createSecrets(domain4Namespace);\n+    checkPodNotCreated(domain4Uid + adminServerPrefix, domain4Uid, domain4Namespace);\n+\n+    //verify that domain2 in namespace with no label2 will not start\n+    createSecrets(manageByLabelDomain2NS);\n+    checkPodNotCreated(manageByLabelDomain2Uid + adminServerPrefix, manageByLabelDomain2Uid, manageByLabelDomain2NS);\n+  }\n+\n+  private boolean isOperatorFailedToScaleDomain(String opNamespace, String domainUid, String domainNamespace) {\n+    try {\n+      //check operator can't manage domainNamespace by trying to scale domain\n+      int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+      String managedServerPodNamePrefix = domainUid + \"-managed-server\";\n+      String opServiceAccount = OPERATOR_RELEASE_NAME + \"-sa\";\n+      scaleAndVerifyCluster(\"cluster-1\", domainUid, domainNamespace,\n+          managedServerPodNamePrefix, 2, 1,\n+          true, externalRestHttpsPort, opNamespace, opServiceAccount,\n+          false, \"\", \"scaleDown\", 1, \"\", \"\", null, null);\n+      return false;\n+\n+    } catch (ConditionTimeoutException ex) {\n+      logger.info(\"Received expected error \" + ex.getMessage());\n+      return true;\n+    }\n+  }\n+\n+  private static void setLabelToNamespace(String domainNS, Map<String, String> labels) {\n+    //add label to domain namespace\n+    V1Namespace namespaceObject1 = assertDoesNotThrow(() -> Kubernetes.getNamespaceAsObject(domainNS));\n+    assertNotNull(namespaceObject1, \"Can't find namespace with name \" + domainNS);\n+    namespaceObject1.getMetadata().setLabels(labels);\n+    assertDoesNotThrow(() -> Kubernetes.replaceNamespace(namespaceObject1));\n+  }\n+\n+  private void checkOperatorCanScaleDomain(String opNamespace, String domainUid) {\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    assertTrue(scaleClusterWithRestApi(domainUid, clusterName, 3,\n+        externalRestHttpsPort, opNamespace, OPERATOR_RELEASE_NAME + \"-sa\"),\n+        \"Domain \" + domainUid + \" scaling operation failed\");\n+  }\n+\n+  private void checkSecondOperatorFailedToShareSameNS(String domainNamespace) {\n+    // try to install another operator sharing same domain namespace via different domainNsSelectionStrategy\n+    try {\n+      HelmParams opHelmParams3 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+          op3Namespace, \"List\",\n+          null, true, domainNamespace);\n+      assertNull(opHelmParams3, \"Operator helm chart sharing same NS with other operator did not fail\");\n+    } catch (org.opentest4j.AssertionFailedError ex) {\n+      //expecting to fail\n+      logger.info(\"Helm installation failed as expected \" + ex.getMessage());\n+    }\n+  }\n+\n+  private void checkDomainNotStartedInDefaultNS(String domainNsSelectionStrategy) {\n+    //verify operator can't start domain in the default namespace when domainNsSelectionStrategy not List\n+    // and selector does not match default\n+    checkPodNotCreated(\"defaultuid\" + adminServerPrefix, \"defaultuid\", \"default\");\n+\n+    logger.info(\"Delete defaultuid custom resource in namespace {0}\", \"default\");\n+    deleteDomainCustomResource(\"defaultuid\", \"default\");\n+    logger.info(\"Deleted Domain Custom Resource \" + \"defaultuid\");\n+  }\n+\n+  private void switchNSManagementToLabelSelectUsingUpgradeOperator(String manageByLabelNS,\n+                                                                   String manageByExpNS,\n+                                                                   String manageByLabelDomainUid,\n+                                                                   String manageByExpDomainUid) {\n+\n+    //upgrade operator to manage domains with Labeled namespaces\n+    int externalRestHttpsPort = getServiceNodePort(op2Namespace, \"external-weblogic-operator-svc\");\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelNS));\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest\", \"weblogic2\");\n+    setLabelToNamespace(manageByLabelNS, labels);\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams2)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceLabelSelector(\"mytest\")\n+        .domainNamespaceSelectionStrategy(\"LabelSelector\");\n+\n+    assertTrue(upgradeAndVerifyOperator(op2Namespace, opParams));\n+\n+    //verify domain is started\n+    createSecrets(manageByLabelNS);\n+    assertTrue(startDomain(manageByLabelNS,manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(op2Namespace,manageByLabelDomainUid);\n+    //check operator can't manage anymore manageByExpNS\n+    assertTrue(isOperatorFailedToScaleDomain(op2Namespace, manageByExpDomainUid,\n+        manageByExpNS), \"Operator can still manage domain \"\n+        + manageByExpNS + \" in the namespace \" + manageByExpNS);\n+  }\n+\n+  private void installAndVerifyOperatorCanManageDomainByNSRegExp(String manageByExp1NS,\n+                                                                 String manageByExp2NS,\n+                                                                 String manageByExpDomain1Uid,\n+                                                                 String manageByExpDomain2Uid) {\n+    // install and verify operator with domainNsSelectStrategy=RegExp to manage domains with namespaces names,\n+    // starting from test\n+    opHelmParams2 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        op2Namespace, \"RegExp\", \"^test\", true, domain3Namespace);\n+\n+    logger.info(\"Installing and verifying domain1\");\n+    createSecrets(manageByExp1NS);\n+    assertTrue(startDomain(manageByExp1NS, manageByExpDomain1Uid),\n+        \"can't start or verify domain in namespace \" + manageByExp1NS);\n+    checkOperatorCanScaleDomain(op2Namespace, manageByExpDomain1Uid);\n+\n+    logger.info(\"Installing and verifying domain2\");\n+    createSecrets(manageByExp2NS);\n+    assertTrue(startDomain(manageByExp2NS, manageByExpDomain2Uid),\n+        \"operator can start or verify domain in namespace \" + manageByExp2NS);\n+    checkOperatorCanScaleDomain(op2Namespace, manageByExpDomain2Uid);\n+  }\n+\n+\n+  private boolean startDomain(String domainNamespace, String domainUid) {\n+\n+    // create and verify the domain\n+    logger.info(\"Creating and verifying model in image domain\");\n+    try {\n+      Domain domain = createDomainCRD(domainNamespace, domainUid);\n+      createVerifyDomain(domainNamespace, domainUid, miiImage, domain);\n+      return true;\n+    } catch (Exception ex) {\n+      logger.info(\"Failed to createVerifyDomain \" + ex.getMessage());\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * Create a model in image domain crd.\n+   */\n+  private Domain createDomainCRD(String domainNamespace, String domainUid) {\n+\n+    // construct a list of oracle.weblogic.domain.Cluster objects to be used in the domain custom resource\n+    List<Cluster> clusters = new ArrayList<>();\n+    clusters.add(new Cluster()\n+        .clusterName(clusterName)\n+        .replicas(replicaCount)\n+        .serverStartState(\"RUNNING\"));\n+\n+    // create the domain CR\n+    Domain domain = new Domain()\n+        .apiVersion(DOMAIN_API_VERSION)\n+        .kind(\"Domain\")\n+        .metadata(new V1ObjectMeta()\n+            .name(domainUid)\n+            .namespace(domainNamespace))\n+        .spec(new DomainSpec()\n+            .domainUid(domainUid)\n+            .domainHomeSourceType(\"FromModel\")\n+            .image(miiImage)\n+            .addImagePullSecretsItem(new V1LocalObjectReference()\n+                .name(REPO_SECRET_NAME))\n+            .webLogicCredentialsSecret(new V1SecretReference()\n+                .name(adminSecretName)\n+                .namespace(domainNamespace))\n+            .includeServerOutInPodLog(true)\n+            .serverStartPolicy(\"IF_NEEDED\")\n+            .serverPod(new ServerPod()\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"JAVA_OPTIONS\")\n+                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"USER_MEM_ARGS\")\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n+            .adminServer(new AdminServer()\n+                .serverStartState(\"RUNNING\")\n+                .adminService(new oracle.weblogic.domain.AdminService()\n+                    .addChannelsItem(new oracle.weblogic.domain.Channel()\n+                        .channelName(\"default\")\n+                        .nodePort(0))))\n+            .clusters(clusters)\n+            .configuration(new Configuration()\n+                .model(new Model()\n+                    .domainType(WLS_DOMAIN_TYPE)\n+                    .runtimeEncryptionSecret(encryptionSecretName))));\n+    return domain;\n+  }\n+\n+  private static void createSecrets(String domainNamespace) {\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    if (!domainNamespace.equals(\"default\")) {\n+      createDockerRegistrySecret(domainNamespace);\n+    }\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create encryption secret\n+    logger.info(\"Creating encryption secret\");\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+  }\n+\n+  private static void deleteSecrets(String domainNamespace) {\n+    logger.info(\"Deleting docker registry secret in namespace {0}\", domainNamespace);\n+    if (!domainNamespace.equals(\"default\")) {\n+      deleteSecret(OCR_SECRET_NAME, domainNamespace);\n+    }\n+\n+    // delete secret for admin credentials\n+    logger.info(\"Deleting secret for admin credentials\");\n+    deleteSecret(adminSecretName, domainNamespace);\n+\n+    // delete encryption secret\n+    logger.info(\"Deleting encryption secret\");\n+    deleteSecret(encryptionSecretName, domainNamespace);\n+  }\n+\n+  private void createVerifyDomain(String domainNamespace, String domainUid, String miiImage, Domain domain) {\n+    // create domain\n+    logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+        domainUid, domainNamespace, miiImage);\n+    createDomainAndVerify(domain, domainNamespace);\n+    String adminServerPodName = domainUid + adminServerPrefix;\n+    // check that admin server pod exists in the domain namespace\n+    logger.info(\"Checking that admin server pod {0} exists in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReadyAndServiceExists(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check for managed server pods existence in the domain namespace\n+    for (int i = 1; i <= replicaCount; i++) {\n+      String managedServerPodName = domainUid + managedServerPrefix + i;\n+\n+      // check that the managed server pod exists\n+      logger.info(\"Checking that managed server pod {0} exists in namespace {1}\",\n+          managedServerPodName, domainNamespace);\n+      checkPodReadyAndServiceExists(managedServerPodName, domainUid, domainNamespace);\n+    }\n+  }\n+\n+  /**\n+   * Install WebLogic operator and wait up to two minutes until the operator pod is ready.\n+   *\n+   * @param operNamespace the operator namespace in which the operator will be installed\n+   * @param opReleaseName the operator release name\n+   * @param enableClusterRoleBinding operator cluster role binding\n+   * @param domainNamespace the list of the domain namespaces which will be managed by the operator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f7e78cece4496d7be6e42ec72deec2f2648b5d3"}, "originalPosition": 689}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzcyMDU1OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODowMDo1MVrOHb2sAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDozODozMlrOHdKgCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2OTYwMg==", "bodyText": "You can define a class level logger and use it in all the methods", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r498969602", "createdAt": "2020-10-02T18:00:51Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,824 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretList;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DEFAULT_EXTERNAL_REST_IDENTITY_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorImageName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.installOperator;\n+import static oracle.weblogic.kubernetes.actions.TestActions.listSecrets;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.checkHelmReleaseStatus;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorRestServiceRunning;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createExternalRestIdentitySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String opNamespace = null;\n+  private static String op2Namespace = null;\n+  private static String op3Namespace = null;\n+  private static String op4Namespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"managensdomain1\";\n+  private final String domain2Uid = \"managensdomain2\";\n+  private final String domain3Uid = \"managensdomain3\";\n+  private final String domain4Uid = \"managensdomain4\";\n+\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams opHelmParams1;\n+  private HelmParams opHelmParams2;\n+  private HelmParams opHelmParams4;\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // get a unique operator 2 namespace\n+    logger.info(\"Getting a unique namespace for operator 2\");\n+    assertNotNull(namespaces.get(5), \"Namespace list is null\");\n+    op2Namespace = namespaces.get(5);\n+\n+    // get a unique operator 3 namespace\n+    logger.info(\"Getting a unique namespace for operator 3\");\n+    assertNotNull(namespaces.get(6), \"Namespace list is null\");\n+    op3Namespace = namespaces.get(6);\n+\n+    // get a unique operator 4 namespace\n+    logger.info(\"Getting a unique namespace for operator 4\");\n+    assertNotNull(namespaces.get(7), \"Namespace list is null\");\n+    op4Namespace = namespaces.get(7);\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+    createSecrets(domain3Namespace);\n+    createSecrets(\"default\");\n+    labels1 = new java.util.HashMap<>();\n+    labels1.put(OPERATOR_RELEASE_NAME, OPERATOR_RELEASE_NAME);\n+    labels2 = new java.util.HashMap<>();\n+    labels2.put(OPERATOR_RELEASE_NAME + \"2\", OPERATOR_RELEASE_NAME);\n+    setLabelToNamespace(domain1Namespace, labels1);\n+    setLabelToNamespace(domain2Namespace, labels2);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+\n+    // Delete domain custom resource\n+    logger.info(\"Delete domain1 custom resource in namespace {0}\", domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid, domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \" from \" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2 custom resource in namespace {0}\", domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid, domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \" from \" + domain2Namespace);\n+\n+    logger.info(\"Delete domain3 custom resource in namespace {0}\", domain3Namespace);\n+    deleteDomainCustomResource(domain3Uid, domain3Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain3Uid);\n+\n+    logger.info(\"Delete domain4 custom resource in namespace {0}\", domain4Namespace);\n+    deleteDomainCustomResource(domain4Uid, domain4Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain4Uid);\n+\n+    logger.info(\"Delete domain1test custom resource in namespace {0}\", \"test-\" + domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid + \"test\", \"test-\" + domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \"test from test-\" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2test custom resource in namespace {0}\", \"test-\" + domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid + \"test\", \"test-\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \"test from test-\" + domain2Namespace);\n+\n+    logger.info(\"Delete weblogic custom resource in namespace {0}\", \"weblogic\" + domain2Namespace);\n+    deleteDomainCustomResource(\"weblogic\", \"weblogic\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource weblogic from weblogic\" + domain2Namespace);\n+\n+    deleteSecrets(\"default\");\n+    deleteSecrets(\"atest-\" +  domain1Namespace);;\n+    deleteNamespace(\"atest-\" + domain1Namespace);\n+    //delete operator\n+    uninstallOperator(opHelmParams1);\n+    uninstallOperator(opHelmParams2);\n+    uninstallOperator(opHelmParams4);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=RegExp,\n+   * and domainNamespaceRegExp=^test and domainNamespace= domain3NS.\n+   * Deploy two custom domain resources in the two different namespaces with names starting with test\n+   * and verify all server pods in the domains were created and ready.\n+   * Verify operator is able to manage these domains by scaling.\n+   * Try to start another domain with namespace domain3NS. Verify it is not started by operator\n+   * and value of domainNamespace is ignored for both specific namespace and default.\n+   * Upgrade helm chart to switch to using LabelSelector, start domain and verify operator can scale it.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using expression namespace management\")\n+  public void testNsManageByExp() {\n+    //create domain namespace\n+    String manageByExp1NS = \"test-\" +  domain1Namespace;\n+    String manageByExp2NS = \"test-\" +  domain2Namespace;\n+    String manageByExpDomain1Uid = \"test-\" + domain1Uid;\n+    String manageByExpDomain2Uid = \"test-\" + domain2Uid;\n+    String manageByLabelNS = \"weblogic1\" + domain1Namespace;\n+    String manageByLabelDomainUid = \"weblogic1\" + domain1Uid;\n+    String domain3NS = \"atest-\" +  domain1Namespace;\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp1NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp2NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(domain3NS));\n+    installAndVerifyOperatorCanManageDomainByNSRegExp(manageByExp1NS, manageByExp2NS,\n+        manageByExpDomain1Uid, manageByExpDomain2Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain will not start for specific NS and default\n+    checkPodNotCreated(domain3Uid + adminServerPrefix, domain3Uid, domain3Namespace);\n+    checkDomainNotStartedInDefaultNS(\"RegExp\");\n+    //verify that operator can't start domain if namespace does not start from test\n+    createSecrets(domain3NS);\n+    checkPodNotCreated(domain3Uid + adminServerPrefix, domain3Uid, domain3NS);\n+\n+    // install  operator sharing same domain\n+    checkSecondOperatorFailedToShareSameNS(manageByExp1NS);\n+    switchNSManagementToLabelSelectUsingUpgradeOperator(manageByLabelNS, manageByExp1NS,\n+        manageByLabelDomainUid, manageByExpDomain1Uid);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1.\n+   * Deploy a custom domain resource in the namespace with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   * Verify operator can't start another domain with namespace2 with label2.\n+   * Modify namespace2 to set label1, verify that operator can manage it.\n+   * Verify that domainNamespaces field will be ignored and domain will not start for namespaces:\n+   * (domain3Namespace) and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade operator to replace namespace management using RegExp namespaces.\n+   * Verify it can manage added domain and can't manage old domain by scaling .\n+   * Verify that upgrade helm fail if try to add domain, managed by other operator.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using label namespace management\")\n+  public void testNsManageByLabel() {\n+    String manageByLabelDomain1NS = domain1Namespace;\n+    String manageByLabelDomain2NS = domain2Namespace;\n+    String manageByExpDomainUid = \"weblogic2\" + domain2Namespace;\n+    String manageByExpDomainNS = \"weblogic2\" + domain2Namespace;\n+    String manageByLabelDomain1Uid = domain1Uid;\n+    String manageByLabelDomain2Uid = domain2Uid;\n+    installAndVerifyOperatorCanManageDomainByLabelSelector(manageByLabelDomain1NS, manageByLabelDomain2NS,\n+        manageByLabelDomain1Uid, manageByLabelDomain2Uid);\n+    addExtraDomainByAddingLabelToNS(labels1, manageByLabelDomain2NS, manageByLabelDomain2Uid);\n+    checkDomainNotStartedInDefaultNS(\"SelectLabel\");\n+    checkSecondOperatorFailedToShareSameNS(manageByLabelDomain1NS);\n+    switchNSManagementToRegExpUsingUpgradeOperator(manageByLabelDomain1NS, manageByExpDomainNS,\n+        manageByLabelDomain1Uid, manageByExpDomainUid);\n+    checkUpgradeFailedToAddNSManagedByAnotherOperator();\n+  }\n+\n+  /**\n+   * Create namespace ns1 with no label\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1 and enableRbac=false.\n+   * Add label1 to ns1 and verify domain can't be started\n+   * Call upgrade operator with reuse values to enable management for ns1\n+   * Deploy a custom domain resource in the namespace ns1 with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   */\n+  @Test\n+  @Order(3)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" with enableClusterRoleBinding\")\n+  public void testSwitchRbac() {\n+    String manageByLabelDomainNS = domain1Namespace + \"test4\";\n+    String manageByLabelDomainUid = domain1Uid + \"test4\";\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelDomainNS));\n+    opHelmParams4 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        op4Namespace, \"LabelSelector\",\n+        \"mytest4\", false);\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest4\", manageByLabelDomainUid);\n+    assertDoesNotThrow(() -> addLabelsToNamespace(manageByLabelDomainNS, labels));\n+    //verify domain can't be started because operator does not have permission to manage it\n+    createSecrets(manageByLabelDomainNS);\n+    checkPodNotCreated(manageByLabelDomainUid + adminServerPrefix, manageByLabelDomainUid, manageByLabelDomainNS);\n+    deleteDomainCrd(manageByLabelDomainNS, manageByLabelDomainUid);\n+    //upgrade operator and start domain\n+    int externalRestHttpsPort = getServiceNodePort(op4Namespace, \"external-weblogic-operator-svc\");\n+\n+    OperatorParams opParams = new OperatorParams()\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .helmParams(opHelmParams4);\n+\n+    assertTrue(upgradeAndVerifyOperator(op4Namespace, opParams));\n+    assertTrue(startDomain(manageByLabelDomainNS, manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(op4Namespace, manageByLabelDomainUid);\n+  }\n+\n+  private void checkUpgradeFailedToAddNSManagedByAnotherOperator() {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    // for ns names starting from weblogic, there one of domains\n+    //in namespace weblogic* is managed by operator2\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams1)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic\");\n+\n+    assertFalse(upgradeAndVerifyOperator(opNamespace, opParams), \"Upgrade does not fail when adding domain,\"\n+        + \" managed by other operator\");\n+  }\n+\n+  private void switchNSManagementToRegExpUsingUpgradeOperator(String manageByLabelNS,\n+                                                              String manageByExpNS,\n+                                                              String manageByLabelDomainUid,\n+                                                              String manageByExpDomainUid) {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    assertDoesNotThrow(() -> createNamespace(manageByExpNS));\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams1)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic2\");\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespace, opParams));\n+\n+    //verify domain is started in namespace with name starting with weblogic* and operator can scale it.\n+    createSecrets(manageByExpNS);\n+    assertTrue(startDomain(manageByExpNS,manageByExpDomainUid));\n+    checkOperatorCanScaleDomain(opNamespace,manageByExpDomainUid);\n+    //verify operator can't manage anymore domain running in the namespace with label\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespace, manageByLabelDomainUid, manageByLabelNS),\n+        \"Operator can still manage domain \"\n+        + manageByLabelDomainUid + \" in the namespace \" + manageByLabelNS);\n+  }\n+\n+  private void addExtraDomainByAddingLabelToNS(Map<String, String> labels, String domainNS, String domainUid) {\n+    deleteDomainCrd(domainNS, domainUid);\n+\n+    //switch to the label1, managed by operator and verify domain is started and can be managed by operator.\n+    setLabelToNamespace(domainNS, labels);\n+    assertTrue(startDomain(domainNS, domainUid));\n+    checkOperatorCanScaleDomain(opNamespace, domainUid);\n+  }\n+\n+  private void deleteDomainCrd(String domainNS, String domainUid) {\n+    //clean up domain resources in namespace and set namespace to label , managed by operator\n+    logger.info(\"deleting domain custom resource {0}\", domainUid);\n+    assertTrue(deleteDomainCustomResource(domainUid, domainNS));\n+\n+    // wait until domain was deleted\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be deleted in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNS,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainDoesNotExist(domainUid, DOMAIN_VERSION, domainNS));\n+  }\n+\n+  private void installAndVerifyOperatorCanManageDomainByLabelSelector(String manageByLabelDomain1NS,\n+                                                                      String manageByLabelDomain2NS,\n+                                                                      String manageByLabelDomain1Uid,\n+                                                                      String manageByLabelDomain2Uid) {\n+    // install and verify operator set to manage domains based on LabelSelector strategy,\n+    // domainNamespaces set to domain4 will be ignored\n+    opHelmParams1 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        opNamespace, \"LabelSelector\",\n+        OPERATOR_RELEASE_NAME, true, manageByLabelDomain1NS);\n+\n+    logger.info(\"Installing and verifying domain1\");\n+    createSecrets(manageByLabelDomain1NS);\n+    assertTrue(startDomain(manageByLabelDomain1NS, manageByLabelDomain1Uid),\n+        \"can't start or verify domain in namespace \" + manageByLabelDomain1NS);\n+\n+    checkOperatorCanScaleDomain(opNamespace, manageByLabelDomain1Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain4 will not start\n+    createSecrets(domain4Namespace);\n+    checkPodNotCreated(domain4Uid + adminServerPrefix, domain4Uid, domain4Namespace);\n+\n+    //verify that domain2 in namespace with no label2 will not start\n+    createSecrets(manageByLabelDomain2NS);\n+    checkPodNotCreated(manageByLabelDomain2Uid + adminServerPrefix, manageByLabelDomain2Uid, manageByLabelDomain2NS);\n+  }\n+\n+  private boolean isOperatorFailedToScaleDomain(String opNamespace, String domainUid, String domainNamespace) {\n+    try {\n+      //check operator can't manage domainNamespace by trying to scale domain\n+      int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+      String managedServerPodNamePrefix = domainUid + \"-managed-server\";\n+      String opServiceAccount = OPERATOR_RELEASE_NAME + \"-sa\";\n+      scaleAndVerifyCluster(\"cluster-1\", domainUid, domainNamespace,\n+          managedServerPodNamePrefix, 2, 1,\n+          true, externalRestHttpsPort, opNamespace, opServiceAccount,\n+          false, \"\", \"scaleDown\", 1, \"\", \"\", null, null);\n+      return false;\n+\n+    } catch (ConditionTimeoutException ex) {\n+      logger.info(\"Received expected error \" + ex.getMessage());\n+      return true;\n+    }\n+  }\n+\n+  private static void setLabelToNamespace(String domainNS, Map<String, String> labels) {\n+    //add label to domain namespace\n+    V1Namespace namespaceObject1 = assertDoesNotThrow(() -> Kubernetes.getNamespaceAsObject(domainNS));\n+    assertNotNull(namespaceObject1, \"Can't find namespace with name \" + domainNS);\n+    namespaceObject1.getMetadata().setLabels(labels);\n+    assertDoesNotThrow(() -> Kubernetes.replaceNamespace(namespaceObject1));\n+  }\n+\n+  private void checkOperatorCanScaleDomain(String opNamespace, String domainUid) {\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    assertTrue(scaleClusterWithRestApi(domainUid, clusterName, 3,\n+        externalRestHttpsPort, opNamespace, OPERATOR_RELEASE_NAME + \"-sa\"),\n+        \"Domain \" + domainUid + \" scaling operation failed\");\n+  }\n+\n+  private void checkSecondOperatorFailedToShareSameNS(String domainNamespace) {\n+    // try to install another operator sharing same domain namespace via different domainNsSelectionStrategy\n+    try {\n+      HelmParams opHelmParams3 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+          op3Namespace, \"List\",\n+          null, true, domainNamespace);\n+      assertNull(opHelmParams3, \"Operator helm chart sharing same NS with other operator did not fail\");\n+    } catch (org.opentest4j.AssertionFailedError ex) {\n+      //expecting to fail\n+      logger.info(\"Helm installation failed as expected \" + ex.getMessage());\n+    }\n+  }\n+\n+  private void checkDomainNotStartedInDefaultNS(String domainNsSelectionStrategy) {\n+    //verify operator can't start domain in the default namespace when domainNsSelectionStrategy not List\n+    // and selector does not match default\n+    checkPodNotCreated(\"defaultuid\" + adminServerPrefix, \"defaultuid\", \"default\");\n+\n+    logger.info(\"Delete defaultuid custom resource in namespace {0}\", \"default\");\n+    deleteDomainCustomResource(\"defaultuid\", \"default\");\n+    logger.info(\"Deleted Domain Custom Resource \" + \"defaultuid\");\n+  }\n+\n+  private void switchNSManagementToLabelSelectUsingUpgradeOperator(String manageByLabelNS,\n+                                                                   String manageByExpNS,\n+                                                                   String manageByLabelDomainUid,\n+                                                                   String manageByExpDomainUid) {\n+\n+    //upgrade operator to manage domains with Labeled namespaces\n+    int externalRestHttpsPort = getServiceNodePort(op2Namespace, \"external-weblogic-operator-svc\");\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelNS));\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest\", \"weblogic2\");\n+    setLabelToNamespace(manageByLabelNS, labels);\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams2)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceLabelSelector(\"mytest\")\n+        .domainNamespaceSelectionStrategy(\"LabelSelector\");\n+\n+    assertTrue(upgradeAndVerifyOperator(op2Namespace, opParams));\n+\n+    //verify domain is started\n+    createSecrets(manageByLabelNS);\n+    assertTrue(startDomain(manageByLabelNS,manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(op2Namespace,manageByLabelDomainUid);\n+    //check operator can't manage anymore manageByExpNS\n+    assertTrue(isOperatorFailedToScaleDomain(op2Namespace, manageByExpDomainUid,\n+        manageByExpNS), \"Operator can still manage domain \"\n+        + manageByExpNS + \" in the namespace \" + manageByExpNS);\n+  }\n+\n+  private void installAndVerifyOperatorCanManageDomainByNSRegExp(String manageByExp1NS,\n+                                                                 String manageByExp2NS,\n+                                                                 String manageByExpDomain1Uid,\n+                                                                 String manageByExpDomain2Uid) {\n+    // install and verify operator with domainNsSelectStrategy=RegExp to manage domains with namespaces names,\n+    // starting from test\n+    opHelmParams2 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        op2Namespace, \"RegExp\", \"^test\", true, domain3Namespace);\n+\n+    logger.info(\"Installing and verifying domain1\");\n+    createSecrets(manageByExp1NS);\n+    assertTrue(startDomain(manageByExp1NS, manageByExpDomain1Uid),\n+        \"can't start or verify domain in namespace \" + manageByExp1NS);\n+    checkOperatorCanScaleDomain(op2Namespace, manageByExpDomain1Uid);\n+\n+    logger.info(\"Installing and verifying domain2\");\n+    createSecrets(manageByExp2NS);\n+    assertTrue(startDomain(manageByExp2NS, manageByExpDomain2Uid),\n+        \"operator can start or verify domain in namespace \" + manageByExp2NS);\n+    checkOperatorCanScaleDomain(op2Namespace, manageByExpDomain2Uid);\n+  }\n+\n+\n+  private boolean startDomain(String domainNamespace, String domainUid) {\n+\n+    // create and verify the domain\n+    logger.info(\"Creating and verifying model in image domain\");\n+    try {\n+      Domain domain = createDomainCRD(domainNamespace, domainUid);\n+      createVerifyDomain(domainNamespace, domainUid, miiImage, domain);\n+      return true;\n+    } catch (Exception ex) {\n+      logger.info(\"Failed to createVerifyDomain \" + ex.getMessage());\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * Create a model in image domain crd.\n+   */\n+  private Domain createDomainCRD(String domainNamespace, String domainUid) {\n+\n+    // construct a list of oracle.weblogic.domain.Cluster objects to be used in the domain custom resource\n+    List<Cluster> clusters = new ArrayList<>();\n+    clusters.add(new Cluster()\n+        .clusterName(clusterName)\n+        .replicas(replicaCount)\n+        .serverStartState(\"RUNNING\"));\n+\n+    // create the domain CR\n+    Domain domain = new Domain()\n+        .apiVersion(DOMAIN_API_VERSION)\n+        .kind(\"Domain\")\n+        .metadata(new V1ObjectMeta()\n+            .name(domainUid)\n+            .namespace(domainNamespace))\n+        .spec(new DomainSpec()\n+            .domainUid(domainUid)\n+            .domainHomeSourceType(\"FromModel\")\n+            .image(miiImage)\n+            .addImagePullSecretsItem(new V1LocalObjectReference()\n+                .name(REPO_SECRET_NAME))\n+            .webLogicCredentialsSecret(new V1SecretReference()\n+                .name(adminSecretName)\n+                .namespace(domainNamespace))\n+            .includeServerOutInPodLog(true)\n+            .serverStartPolicy(\"IF_NEEDED\")\n+            .serverPod(new ServerPod()\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"JAVA_OPTIONS\")\n+                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"USER_MEM_ARGS\")\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n+            .adminServer(new AdminServer()\n+                .serverStartState(\"RUNNING\")\n+                .adminService(new oracle.weblogic.domain.AdminService()\n+                    .addChannelsItem(new oracle.weblogic.domain.Channel()\n+                        .channelName(\"default\")\n+                        .nodePort(0))))\n+            .clusters(clusters)\n+            .configuration(new Configuration()\n+                .model(new Model()\n+                    .domainType(WLS_DOMAIN_TYPE)\n+                    .runtimeEncryptionSecret(encryptionSecretName))));\n+    return domain;\n+  }\n+\n+  private static void createSecrets(String domainNamespace) {\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    if (!domainNamespace.equals(\"default\")) {\n+      createDockerRegistrySecret(domainNamespace);\n+    }\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create encryption secret\n+    logger.info(\"Creating encryption secret\");\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+  }\n+\n+  private static void deleteSecrets(String domainNamespace) {\n+    logger.info(\"Deleting docker registry secret in namespace {0}\", domainNamespace);\n+    if (!domainNamespace.equals(\"default\")) {\n+      deleteSecret(OCR_SECRET_NAME, domainNamespace);\n+    }\n+\n+    // delete secret for admin credentials\n+    logger.info(\"Deleting secret for admin credentials\");\n+    deleteSecret(adminSecretName, domainNamespace);\n+\n+    // delete encryption secret\n+    logger.info(\"Deleting encryption secret\");\n+    deleteSecret(encryptionSecretName, domainNamespace);\n+  }\n+\n+  private void createVerifyDomain(String domainNamespace, String domainUid, String miiImage, Domain domain) {\n+    // create domain\n+    logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+        domainUid, domainNamespace, miiImage);\n+    createDomainAndVerify(domain, domainNamespace);\n+    String adminServerPodName = domainUid + adminServerPrefix;\n+    // check that admin server pod exists in the domain namespace\n+    logger.info(\"Checking that admin server pod {0} exists in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReadyAndServiceExists(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check for managed server pods existence in the domain namespace\n+    for (int i = 1; i <= replicaCount; i++) {\n+      String managedServerPodName = domainUid + managedServerPrefix + i;\n+\n+      // check that the managed server pod exists\n+      logger.info(\"Checking that managed server pod {0} exists in namespace {1}\",\n+          managedServerPodName, domainNamespace);\n+      checkPodReadyAndServiceExists(managedServerPodName, domainUid, domainNamespace);\n+    }\n+  }\n+\n+  /**\n+   * Install WebLogic operator and wait up to two minutes until the operator pod is ready.\n+   *\n+   * @param operNamespace the operator namespace in which the operator will be installed\n+   * @param opReleaseName the operator release name\n+   * @param enableClusterRoleBinding operator cluster role binding\n+   * @param domainNamespace the list of the domain namespaces which will be managed by the operator\n+   * @return the operator Helm installation parameters\n+   */\n+  private static HelmParams installOperatorHelmChart(String opReleaseName, String operNamespace,\n+                                                     String domainNsSelectionStrategy,\n+                                                     String domainNsSelector,\n+                                                     boolean enableClusterRoleBinding,\n+                                                     String... domainNamespace) {\n+    LoggingFacade logger = getLogger();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f7e78cece4496d7be6e42ec72deec2f2648b5d3"}, "originalPosition": 697}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM0Mjc5NA==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r500342794", "createdAt": "2020-10-06T14:38:32Z", "author": {"login": "marinakog"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,824 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretList;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DEFAULT_EXTERNAL_REST_IDENTITY_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorImageName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.installOperator;\n+import static oracle.weblogic.kubernetes.actions.TestActions.listSecrets;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.checkHelmReleaseStatus;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorRestServiceRunning;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createExternalRestIdentitySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String opNamespace = null;\n+  private static String op2Namespace = null;\n+  private static String op3Namespace = null;\n+  private static String op4Namespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"managensdomain1\";\n+  private final String domain2Uid = \"managensdomain2\";\n+  private final String domain3Uid = \"managensdomain3\";\n+  private final String domain4Uid = \"managensdomain4\";\n+\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams opHelmParams1;\n+  private HelmParams opHelmParams2;\n+  private HelmParams opHelmParams4;\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // get a unique operator 2 namespace\n+    logger.info(\"Getting a unique namespace for operator 2\");\n+    assertNotNull(namespaces.get(5), \"Namespace list is null\");\n+    op2Namespace = namespaces.get(5);\n+\n+    // get a unique operator 3 namespace\n+    logger.info(\"Getting a unique namespace for operator 3\");\n+    assertNotNull(namespaces.get(6), \"Namespace list is null\");\n+    op3Namespace = namespaces.get(6);\n+\n+    // get a unique operator 4 namespace\n+    logger.info(\"Getting a unique namespace for operator 4\");\n+    assertNotNull(namespaces.get(7), \"Namespace list is null\");\n+    op4Namespace = namespaces.get(7);\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+    createSecrets(domain3Namespace);\n+    createSecrets(\"default\");\n+    labels1 = new java.util.HashMap<>();\n+    labels1.put(OPERATOR_RELEASE_NAME, OPERATOR_RELEASE_NAME);\n+    labels2 = new java.util.HashMap<>();\n+    labels2.put(OPERATOR_RELEASE_NAME + \"2\", OPERATOR_RELEASE_NAME);\n+    setLabelToNamespace(domain1Namespace, labels1);\n+    setLabelToNamespace(domain2Namespace, labels2);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+\n+    // Delete domain custom resource\n+    logger.info(\"Delete domain1 custom resource in namespace {0}\", domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid, domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \" from \" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2 custom resource in namespace {0}\", domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid, domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \" from \" + domain2Namespace);\n+\n+    logger.info(\"Delete domain3 custom resource in namespace {0}\", domain3Namespace);\n+    deleteDomainCustomResource(domain3Uid, domain3Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain3Uid);\n+\n+    logger.info(\"Delete domain4 custom resource in namespace {0}\", domain4Namespace);\n+    deleteDomainCustomResource(domain4Uid, domain4Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain4Uid);\n+\n+    logger.info(\"Delete domain1test custom resource in namespace {0}\", \"test-\" + domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid + \"test\", \"test-\" + domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \"test from test-\" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2test custom resource in namespace {0}\", \"test-\" + domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid + \"test\", \"test-\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \"test from test-\" + domain2Namespace);\n+\n+    logger.info(\"Delete weblogic custom resource in namespace {0}\", \"weblogic\" + domain2Namespace);\n+    deleteDomainCustomResource(\"weblogic\", \"weblogic\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource weblogic from weblogic\" + domain2Namespace);\n+\n+    deleteSecrets(\"default\");\n+    deleteSecrets(\"atest-\" +  domain1Namespace);;\n+    deleteNamespace(\"atest-\" + domain1Namespace);\n+    //delete operator\n+    uninstallOperator(opHelmParams1);\n+    uninstallOperator(opHelmParams2);\n+    uninstallOperator(opHelmParams4);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=RegExp,\n+   * and domainNamespaceRegExp=^test and domainNamespace= domain3NS.\n+   * Deploy two custom domain resources in the two different namespaces with names starting with test\n+   * and verify all server pods in the domains were created and ready.\n+   * Verify operator is able to manage these domains by scaling.\n+   * Try to start another domain with namespace domain3NS. Verify it is not started by operator\n+   * and value of domainNamespace is ignored for both specific namespace and default.\n+   * Upgrade helm chart to switch to using LabelSelector, start domain and verify operator can scale it.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using expression namespace management\")\n+  public void testNsManageByExp() {\n+    //create domain namespace\n+    String manageByExp1NS = \"test-\" +  domain1Namespace;\n+    String manageByExp2NS = \"test-\" +  domain2Namespace;\n+    String manageByExpDomain1Uid = \"test-\" + domain1Uid;\n+    String manageByExpDomain2Uid = \"test-\" + domain2Uid;\n+    String manageByLabelNS = \"weblogic1\" + domain1Namespace;\n+    String manageByLabelDomainUid = \"weblogic1\" + domain1Uid;\n+    String domain3NS = \"atest-\" +  domain1Namespace;\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp1NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp2NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(domain3NS));\n+    installAndVerifyOperatorCanManageDomainByNSRegExp(manageByExp1NS, manageByExp2NS,\n+        manageByExpDomain1Uid, manageByExpDomain2Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain will not start for specific NS and default\n+    checkPodNotCreated(domain3Uid + adminServerPrefix, domain3Uid, domain3Namespace);\n+    checkDomainNotStartedInDefaultNS(\"RegExp\");\n+    //verify that operator can't start domain if namespace does not start from test\n+    createSecrets(domain3NS);\n+    checkPodNotCreated(domain3Uid + adminServerPrefix, domain3Uid, domain3NS);\n+\n+    // install  operator sharing same domain\n+    checkSecondOperatorFailedToShareSameNS(manageByExp1NS);\n+    switchNSManagementToLabelSelectUsingUpgradeOperator(manageByLabelNS, manageByExp1NS,\n+        manageByLabelDomainUid, manageByExpDomain1Uid);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1.\n+   * Deploy a custom domain resource in the namespace with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   * Verify operator can't start another domain with namespace2 with label2.\n+   * Modify namespace2 to set label1, verify that operator can manage it.\n+   * Verify that domainNamespaces field will be ignored and domain will not start for namespaces:\n+   * (domain3Namespace) and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade operator to replace namespace management using RegExp namespaces.\n+   * Verify it can manage added domain and can't manage old domain by scaling .\n+   * Verify that upgrade helm fail if try to add domain, managed by other operator.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using label namespace management\")\n+  public void testNsManageByLabel() {\n+    String manageByLabelDomain1NS = domain1Namespace;\n+    String manageByLabelDomain2NS = domain2Namespace;\n+    String manageByExpDomainUid = \"weblogic2\" + domain2Namespace;\n+    String manageByExpDomainNS = \"weblogic2\" + domain2Namespace;\n+    String manageByLabelDomain1Uid = domain1Uid;\n+    String manageByLabelDomain2Uid = domain2Uid;\n+    installAndVerifyOperatorCanManageDomainByLabelSelector(manageByLabelDomain1NS, manageByLabelDomain2NS,\n+        manageByLabelDomain1Uid, manageByLabelDomain2Uid);\n+    addExtraDomainByAddingLabelToNS(labels1, manageByLabelDomain2NS, manageByLabelDomain2Uid);\n+    checkDomainNotStartedInDefaultNS(\"SelectLabel\");\n+    checkSecondOperatorFailedToShareSameNS(manageByLabelDomain1NS);\n+    switchNSManagementToRegExpUsingUpgradeOperator(manageByLabelDomain1NS, manageByExpDomainNS,\n+        manageByLabelDomain1Uid, manageByExpDomainUid);\n+    checkUpgradeFailedToAddNSManagedByAnotherOperator();\n+  }\n+\n+  /**\n+   * Create namespace ns1 with no label\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1 and enableRbac=false.\n+   * Add label1 to ns1 and verify domain can't be started\n+   * Call upgrade operator with reuse values to enable management for ns1\n+   * Deploy a custom domain resource in the namespace ns1 with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   */\n+  @Test\n+  @Order(3)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" with enableClusterRoleBinding\")\n+  public void testSwitchRbac() {\n+    String manageByLabelDomainNS = domain1Namespace + \"test4\";\n+    String manageByLabelDomainUid = domain1Uid + \"test4\";\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelDomainNS));\n+    opHelmParams4 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        op4Namespace, \"LabelSelector\",\n+        \"mytest4\", false);\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest4\", manageByLabelDomainUid);\n+    assertDoesNotThrow(() -> addLabelsToNamespace(manageByLabelDomainNS, labels));\n+    //verify domain can't be started because operator does not have permission to manage it\n+    createSecrets(manageByLabelDomainNS);\n+    checkPodNotCreated(manageByLabelDomainUid + adminServerPrefix, manageByLabelDomainUid, manageByLabelDomainNS);\n+    deleteDomainCrd(manageByLabelDomainNS, manageByLabelDomainUid);\n+    //upgrade operator and start domain\n+    int externalRestHttpsPort = getServiceNodePort(op4Namespace, \"external-weblogic-operator-svc\");\n+\n+    OperatorParams opParams = new OperatorParams()\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .helmParams(opHelmParams4);\n+\n+    assertTrue(upgradeAndVerifyOperator(op4Namespace, opParams));\n+    assertTrue(startDomain(manageByLabelDomainNS, manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(op4Namespace, manageByLabelDomainUid);\n+  }\n+\n+  private void checkUpgradeFailedToAddNSManagedByAnotherOperator() {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    // for ns names starting from weblogic, there one of domains\n+    //in namespace weblogic* is managed by operator2\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams1)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic\");\n+\n+    assertFalse(upgradeAndVerifyOperator(opNamespace, opParams), \"Upgrade does not fail when adding domain,\"\n+        + \" managed by other operator\");\n+  }\n+\n+  private void switchNSManagementToRegExpUsingUpgradeOperator(String manageByLabelNS,\n+                                                              String manageByExpNS,\n+                                                              String manageByLabelDomainUid,\n+                                                              String manageByExpDomainUid) {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    assertDoesNotThrow(() -> createNamespace(manageByExpNS));\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams1)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic2\");\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespace, opParams));\n+\n+    //verify domain is started in namespace with name starting with weblogic* and operator can scale it.\n+    createSecrets(manageByExpNS);\n+    assertTrue(startDomain(manageByExpNS,manageByExpDomainUid));\n+    checkOperatorCanScaleDomain(opNamespace,manageByExpDomainUid);\n+    //verify operator can't manage anymore domain running in the namespace with label\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespace, manageByLabelDomainUid, manageByLabelNS),\n+        \"Operator can still manage domain \"\n+        + manageByLabelDomainUid + \" in the namespace \" + manageByLabelNS);\n+  }\n+\n+  private void addExtraDomainByAddingLabelToNS(Map<String, String> labels, String domainNS, String domainUid) {\n+    deleteDomainCrd(domainNS, domainUid);\n+\n+    //switch to the label1, managed by operator and verify domain is started and can be managed by operator.\n+    setLabelToNamespace(domainNS, labels);\n+    assertTrue(startDomain(domainNS, domainUid));\n+    checkOperatorCanScaleDomain(opNamespace, domainUid);\n+  }\n+\n+  private void deleteDomainCrd(String domainNS, String domainUid) {\n+    //clean up domain resources in namespace and set namespace to label , managed by operator\n+    logger.info(\"deleting domain custom resource {0}\", domainUid);\n+    assertTrue(deleteDomainCustomResource(domainUid, domainNS));\n+\n+    // wait until domain was deleted\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be deleted in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNS,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainDoesNotExist(domainUid, DOMAIN_VERSION, domainNS));\n+  }\n+\n+  private void installAndVerifyOperatorCanManageDomainByLabelSelector(String manageByLabelDomain1NS,\n+                                                                      String manageByLabelDomain2NS,\n+                                                                      String manageByLabelDomain1Uid,\n+                                                                      String manageByLabelDomain2Uid) {\n+    // install and verify operator set to manage domains based on LabelSelector strategy,\n+    // domainNamespaces set to domain4 will be ignored\n+    opHelmParams1 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        opNamespace, \"LabelSelector\",\n+        OPERATOR_RELEASE_NAME, true, manageByLabelDomain1NS);\n+\n+    logger.info(\"Installing and verifying domain1\");\n+    createSecrets(manageByLabelDomain1NS);\n+    assertTrue(startDomain(manageByLabelDomain1NS, manageByLabelDomain1Uid),\n+        \"can't start or verify domain in namespace \" + manageByLabelDomain1NS);\n+\n+    checkOperatorCanScaleDomain(opNamespace, manageByLabelDomain1Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain4 will not start\n+    createSecrets(domain4Namespace);\n+    checkPodNotCreated(domain4Uid + adminServerPrefix, domain4Uid, domain4Namespace);\n+\n+    //verify that domain2 in namespace with no label2 will not start\n+    createSecrets(manageByLabelDomain2NS);\n+    checkPodNotCreated(manageByLabelDomain2Uid + adminServerPrefix, manageByLabelDomain2Uid, manageByLabelDomain2NS);\n+  }\n+\n+  private boolean isOperatorFailedToScaleDomain(String opNamespace, String domainUid, String domainNamespace) {\n+    try {\n+      //check operator can't manage domainNamespace by trying to scale domain\n+      int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+      String managedServerPodNamePrefix = domainUid + \"-managed-server\";\n+      String opServiceAccount = OPERATOR_RELEASE_NAME + \"-sa\";\n+      scaleAndVerifyCluster(\"cluster-1\", domainUid, domainNamespace,\n+          managedServerPodNamePrefix, 2, 1,\n+          true, externalRestHttpsPort, opNamespace, opServiceAccount,\n+          false, \"\", \"scaleDown\", 1, \"\", \"\", null, null);\n+      return false;\n+\n+    } catch (ConditionTimeoutException ex) {\n+      logger.info(\"Received expected error \" + ex.getMessage());\n+      return true;\n+    }\n+  }\n+\n+  private static void setLabelToNamespace(String domainNS, Map<String, String> labels) {\n+    //add label to domain namespace\n+    V1Namespace namespaceObject1 = assertDoesNotThrow(() -> Kubernetes.getNamespaceAsObject(domainNS));\n+    assertNotNull(namespaceObject1, \"Can't find namespace with name \" + domainNS);\n+    namespaceObject1.getMetadata().setLabels(labels);\n+    assertDoesNotThrow(() -> Kubernetes.replaceNamespace(namespaceObject1));\n+  }\n+\n+  private void checkOperatorCanScaleDomain(String opNamespace, String domainUid) {\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    assertTrue(scaleClusterWithRestApi(domainUid, clusterName, 3,\n+        externalRestHttpsPort, opNamespace, OPERATOR_RELEASE_NAME + \"-sa\"),\n+        \"Domain \" + domainUid + \" scaling operation failed\");\n+  }\n+\n+  private void checkSecondOperatorFailedToShareSameNS(String domainNamespace) {\n+    // try to install another operator sharing same domain namespace via different domainNsSelectionStrategy\n+    try {\n+      HelmParams opHelmParams3 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+          op3Namespace, \"List\",\n+          null, true, domainNamespace);\n+      assertNull(opHelmParams3, \"Operator helm chart sharing same NS with other operator did not fail\");\n+    } catch (org.opentest4j.AssertionFailedError ex) {\n+      //expecting to fail\n+      logger.info(\"Helm installation failed as expected \" + ex.getMessage());\n+    }\n+  }\n+\n+  private void checkDomainNotStartedInDefaultNS(String domainNsSelectionStrategy) {\n+    //verify operator can't start domain in the default namespace when domainNsSelectionStrategy not List\n+    // and selector does not match default\n+    checkPodNotCreated(\"defaultuid\" + adminServerPrefix, \"defaultuid\", \"default\");\n+\n+    logger.info(\"Delete defaultuid custom resource in namespace {0}\", \"default\");\n+    deleteDomainCustomResource(\"defaultuid\", \"default\");\n+    logger.info(\"Deleted Domain Custom Resource \" + \"defaultuid\");\n+  }\n+\n+  private void switchNSManagementToLabelSelectUsingUpgradeOperator(String manageByLabelNS,\n+                                                                   String manageByExpNS,\n+                                                                   String manageByLabelDomainUid,\n+                                                                   String manageByExpDomainUid) {\n+\n+    //upgrade operator to manage domains with Labeled namespaces\n+    int externalRestHttpsPort = getServiceNodePort(op2Namespace, \"external-weblogic-operator-svc\");\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelNS));\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest\", \"weblogic2\");\n+    setLabelToNamespace(manageByLabelNS, labels);\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams2)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceLabelSelector(\"mytest\")\n+        .domainNamespaceSelectionStrategy(\"LabelSelector\");\n+\n+    assertTrue(upgradeAndVerifyOperator(op2Namespace, opParams));\n+\n+    //verify domain is started\n+    createSecrets(manageByLabelNS);\n+    assertTrue(startDomain(manageByLabelNS,manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(op2Namespace,manageByLabelDomainUid);\n+    //check operator can't manage anymore manageByExpNS\n+    assertTrue(isOperatorFailedToScaleDomain(op2Namespace, manageByExpDomainUid,\n+        manageByExpNS), \"Operator can still manage domain \"\n+        + manageByExpNS + \" in the namespace \" + manageByExpNS);\n+  }\n+\n+  private void installAndVerifyOperatorCanManageDomainByNSRegExp(String manageByExp1NS,\n+                                                                 String manageByExp2NS,\n+                                                                 String manageByExpDomain1Uid,\n+                                                                 String manageByExpDomain2Uid) {\n+    // install and verify operator with domainNsSelectStrategy=RegExp to manage domains with namespaces names,\n+    // starting from test\n+    opHelmParams2 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        op2Namespace, \"RegExp\", \"^test\", true, domain3Namespace);\n+\n+    logger.info(\"Installing and verifying domain1\");\n+    createSecrets(manageByExp1NS);\n+    assertTrue(startDomain(manageByExp1NS, manageByExpDomain1Uid),\n+        \"can't start or verify domain in namespace \" + manageByExp1NS);\n+    checkOperatorCanScaleDomain(op2Namespace, manageByExpDomain1Uid);\n+\n+    logger.info(\"Installing and verifying domain2\");\n+    createSecrets(manageByExp2NS);\n+    assertTrue(startDomain(manageByExp2NS, manageByExpDomain2Uid),\n+        \"operator can start or verify domain in namespace \" + manageByExp2NS);\n+    checkOperatorCanScaleDomain(op2Namespace, manageByExpDomain2Uid);\n+  }\n+\n+\n+  private boolean startDomain(String domainNamespace, String domainUid) {\n+\n+    // create and verify the domain\n+    logger.info(\"Creating and verifying model in image domain\");\n+    try {\n+      Domain domain = createDomainCRD(domainNamespace, domainUid);\n+      createVerifyDomain(domainNamespace, domainUid, miiImage, domain);\n+      return true;\n+    } catch (Exception ex) {\n+      logger.info(\"Failed to createVerifyDomain \" + ex.getMessage());\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * Create a model in image domain crd.\n+   */\n+  private Domain createDomainCRD(String domainNamespace, String domainUid) {\n+\n+    // construct a list of oracle.weblogic.domain.Cluster objects to be used in the domain custom resource\n+    List<Cluster> clusters = new ArrayList<>();\n+    clusters.add(new Cluster()\n+        .clusterName(clusterName)\n+        .replicas(replicaCount)\n+        .serverStartState(\"RUNNING\"));\n+\n+    // create the domain CR\n+    Domain domain = new Domain()\n+        .apiVersion(DOMAIN_API_VERSION)\n+        .kind(\"Domain\")\n+        .metadata(new V1ObjectMeta()\n+            .name(domainUid)\n+            .namespace(domainNamespace))\n+        .spec(new DomainSpec()\n+            .domainUid(domainUid)\n+            .domainHomeSourceType(\"FromModel\")\n+            .image(miiImage)\n+            .addImagePullSecretsItem(new V1LocalObjectReference()\n+                .name(REPO_SECRET_NAME))\n+            .webLogicCredentialsSecret(new V1SecretReference()\n+                .name(adminSecretName)\n+                .namespace(domainNamespace))\n+            .includeServerOutInPodLog(true)\n+            .serverStartPolicy(\"IF_NEEDED\")\n+            .serverPod(new ServerPod()\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"JAVA_OPTIONS\")\n+                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"USER_MEM_ARGS\")\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n+            .adminServer(new AdminServer()\n+                .serverStartState(\"RUNNING\")\n+                .adminService(new oracle.weblogic.domain.AdminService()\n+                    .addChannelsItem(new oracle.weblogic.domain.Channel()\n+                        .channelName(\"default\")\n+                        .nodePort(0))))\n+            .clusters(clusters)\n+            .configuration(new Configuration()\n+                .model(new Model()\n+                    .domainType(WLS_DOMAIN_TYPE)\n+                    .runtimeEncryptionSecret(encryptionSecretName))));\n+    return domain;\n+  }\n+\n+  private static void createSecrets(String domainNamespace) {\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    if (!domainNamespace.equals(\"default\")) {\n+      createDockerRegistrySecret(domainNamespace);\n+    }\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create encryption secret\n+    logger.info(\"Creating encryption secret\");\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+  }\n+\n+  private static void deleteSecrets(String domainNamespace) {\n+    logger.info(\"Deleting docker registry secret in namespace {0}\", domainNamespace);\n+    if (!domainNamespace.equals(\"default\")) {\n+      deleteSecret(OCR_SECRET_NAME, domainNamespace);\n+    }\n+\n+    // delete secret for admin credentials\n+    logger.info(\"Deleting secret for admin credentials\");\n+    deleteSecret(adminSecretName, domainNamespace);\n+\n+    // delete encryption secret\n+    logger.info(\"Deleting encryption secret\");\n+    deleteSecret(encryptionSecretName, domainNamespace);\n+  }\n+\n+  private void createVerifyDomain(String domainNamespace, String domainUid, String miiImage, Domain domain) {\n+    // create domain\n+    logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+        domainUid, domainNamespace, miiImage);\n+    createDomainAndVerify(domain, domainNamespace);\n+    String adminServerPodName = domainUid + adminServerPrefix;\n+    // check that admin server pod exists in the domain namespace\n+    logger.info(\"Checking that admin server pod {0} exists in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReadyAndServiceExists(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check for managed server pods existence in the domain namespace\n+    for (int i = 1; i <= replicaCount; i++) {\n+      String managedServerPodName = domainUid + managedServerPrefix + i;\n+\n+      // check that the managed server pod exists\n+      logger.info(\"Checking that managed server pod {0} exists in namespace {1}\",\n+          managedServerPodName, domainNamespace);\n+      checkPodReadyAndServiceExists(managedServerPodName, domainUid, domainNamespace);\n+    }\n+  }\n+\n+  /**\n+   * Install WebLogic operator and wait up to two minutes until the operator pod is ready.\n+   *\n+   * @param operNamespace the operator namespace in which the operator will be installed\n+   * @param opReleaseName the operator release name\n+   * @param enableClusterRoleBinding operator cluster role binding\n+   * @param domainNamespace the list of the domain namespaces which will be managed by the operator\n+   * @return the operator Helm installation parameters\n+   */\n+  private static HelmParams installOperatorHelmChart(String opReleaseName, String operNamespace,\n+                                                     String domainNsSelectionStrategy,\n+                                                     String domainNsSelector,\n+                                                     boolean enableClusterRoleBinding,\n+                                                     String... domainNamespace) {\n+    LoggingFacade logger = getLogger();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2OTYwMg=="}, "originalCommit": {"oid": "2f7e78cece4496d7be6e42ec72deec2f2648b5d3"}, "originalPosition": 697}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzcyODY3OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODowMzozOVrOHb2xOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDozODo0MFrOHdKgfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk3MDkzOQ==", "bodyText": "incomplete sentence", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r498970939", "createdAt": "2020-10-02T18:03:39Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -703,6 +704,34 @@ public static boolean createNamespace(String name) throws ApiException {\n     return true;\n   }\n \n+  // --------------------------- namespaces -----------------------------------\n+  /**\n+   * Create a Kubernetes namespace.\n+   *\n+   * @param name the name of the namespace\n+   * @param labels list of labels for the namespace\n+   * @return true on success, false otherwise\n+   * @throws ApiException if Kubernetes client API call", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f7e78cece4496d7be6e42ec72deec2f2648b5d3"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM0MjkwOQ==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r500342909", "createdAt": "2020-10-06T14:38:40Z", "author": {"login": "marinakog"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -703,6 +704,34 @@ public static boolean createNamespace(String name) throws ApiException {\n     return true;\n   }\n \n+  // --------------------------- namespaces -----------------------------------\n+  /**\n+   * Create a Kubernetes namespace.\n+   *\n+   * @param name the name of the namespace\n+   * @param labels list of labels for the namespace\n+   * @return true on success, false otherwise\n+   * @throws ApiException if Kubernetes client API call", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk3MDkzOQ=="}, "originalCommit": {"oid": "2f7e78cece4496d7be6e42ec72deec2f2648b5d3"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzczMjE3OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODowNDo0OVrOHb2zYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDozODo0OFrOHdKhGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk3MTQ4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * List namespaces in the Kubernetes cluster.\n          \n          \n            \n               * List namespaces in the Kubernetes cluster matching the label selector.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r498971488", "createdAt": "2020-10-02T18:04:49Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -760,6 +789,15 @@ public static void replaceNamespace(V1Namespace ns) throws ApiException {\n    * @throws ApiException if Kubernetes client API call fails\n    */\n   public static List<String> listNamespaces() throws ApiException {\n+    return listNamespaces(null);\n+  }\n+\n+  /**\n+   * List namespaces in the Kubernetes cluster.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f7e78cece4496d7be6e42ec72deec2f2648b5d3"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM0MzA2NA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r500343064", "createdAt": "2020-10-06T14:38:48Z", "author": {"login": "marinakog"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -760,6 +789,15 @@ public static void replaceNamespace(V1Namespace ns) throws ApiException {\n    * @throws ApiException if Kubernetes client API call fails\n    */\n   public static List<String> listNamespaces() throws ApiException {\n+    return listNamespaces(null);\n+  }\n+\n+  /**\n+   * List namespaces in the Kubernetes cluster.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk3MTQ4OA=="}, "originalCommit": {"oid": "2f7e78cece4496d7be6e42ec72deec2f2648b5d3"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzczMzc0OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODowNToxN1rOHb20UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDozODo1NVrOHdKhiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk3MTcyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * return namespace by provided name in the Kubernetes cluster as V1Namespace object.\n          \n          \n            \n               * Return namespace object for the given name from the Kubernetes cluster as V1Namespace object.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r498971728", "createdAt": "2020-10-02T18:05:17Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -813,6 +851,39 @@ public static V1NamespaceList listNamespacesAsObjects() throws ApiException {\n     return namespaceList;\n   }\n \n+  /**\n+   * return namespace by provided name in the Kubernetes cluster as V1Namespace object.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f7e78cece4496d7be6e42ec72deec2f2648b5d3"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM0MzE3Nw==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r500343177", "createdAt": "2020-10-06T14:38:55Z", "author": {"login": "marinakog"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -813,6 +851,39 @@ public static V1NamespaceList listNamespacesAsObjects() throws ApiException {\n     return namespaceList;\n   }\n \n+  /**\n+   * return namespace by provided name in the Kubernetes cluster as V1Namespace object.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk3MTcyOA=="}, "originalCommit": {"oid": "2f7e78cece4496d7be6e42ec72deec2f2648b5d3"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzczNzgxOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODowNjo0NlrOHb222Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDozOTowMVrOHdKh7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk3MjM3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @return V1Namespace of Namespace in the Kubernetes cluster\n          \n          \n            \n               * @return V1Namespace  Namespace object from the Kubernetes cluster", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r498972377", "createdAt": "2020-10-02T18:06:46Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -813,6 +851,39 @@ public static V1NamespaceList listNamespacesAsObjects() throws ApiException {\n     return namespaceList;\n   }\n \n+  /**\n+   * return namespace by provided name in the Kubernetes cluster as V1Namespace object.\n+   * @name name of namespace.\n+   * @return V1Namespace of Namespace in the Kubernetes cluster", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f7e78cece4496d7be6e42ec72deec2f2648b5d3"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM0MzI3Ng==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r500343276", "createdAt": "2020-10-06T14:39:01Z", "author": {"login": "marinakog"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -813,6 +851,39 @@ public static V1NamespaceList listNamespacesAsObjects() throws ApiException {\n     return namespaceList;\n   }\n \n+  /**\n+   * return namespace by provided name in the Kubernetes cluster as V1Namespace object.\n+   * @name name of namespace.\n+   * @return V1Namespace of Namespace in the Kubernetes cluster", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk3MjM3Nw=="}, "originalCommit": {"oid": "2f7e78cece4496d7be6e42ec72deec2f2648b5d3"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTQ4MTU5OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOToyNDowN1rOHcqmMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzoyNDoyOFrOHdSSMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyMDA4Mw==", "bodyText": "move this method to CommonTestUtils", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r499820083", "createdAt": "2020-10-05T19:24:07Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,824 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretList;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DEFAULT_EXTERNAL_REST_IDENTITY_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorImageName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.installOperator;\n+import static oracle.weblogic.kubernetes.actions.TestActions.listSecrets;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.checkHelmReleaseStatus;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorRestServiceRunning;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createExternalRestIdentitySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String opNamespace = null;\n+  private static String op2Namespace = null;\n+  private static String op3Namespace = null;\n+  private static String op4Namespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"managensdomain1\";\n+  private final String domain2Uid = \"managensdomain2\";\n+  private final String domain3Uid = \"managensdomain3\";\n+  private final String domain4Uid = \"managensdomain4\";\n+\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams opHelmParams1;\n+  private HelmParams opHelmParams2;\n+  private HelmParams opHelmParams4;\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // get a unique operator 2 namespace\n+    logger.info(\"Getting a unique namespace for operator 2\");\n+    assertNotNull(namespaces.get(5), \"Namespace list is null\");\n+    op2Namespace = namespaces.get(5);\n+\n+    // get a unique operator 3 namespace\n+    logger.info(\"Getting a unique namespace for operator 3\");\n+    assertNotNull(namespaces.get(6), \"Namespace list is null\");\n+    op3Namespace = namespaces.get(6);\n+\n+    // get a unique operator 4 namespace\n+    logger.info(\"Getting a unique namespace for operator 4\");\n+    assertNotNull(namespaces.get(7), \"Namespace list is null\");\n+    op4Namespace = namespaces.get(7);\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+    createSecrets(domain3Namespace);\n+    createSecrets(\"default\");\n+    labels1 = new java.util.HashMap<>();\n+    labels1.put(OPERATOR_RELEASE_NAME, OPERATOR_RELEASE_NAME);\n+    labels2 = new java.util.HashMap<>();\n+    labels2.put(OPERATOR_RELEASE_NAME + \"2\", OPERATOR_RELEASE_NAME);\n+    setLabelToNamespace(domain1Namespace, labels1);\n+    setLabelToNamespace(domain2Namespace, labels2);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+\n+    // Delete domain custom resource\n+    logger.info(\"Delete domain1 custom resource in namespace {0}\", domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid, domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \" from \" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2 custom resource in namespace {0}\", domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid, domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \" from \" + domain2Namespace);\n+\n+    logger.info(\"Delete domain3 custom resource in namespace {0}\", domain3Namespace);\n+    deleteDomainCustomResource(domain3Uid, domain3Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain3Uid);\n+\n+    logger.info(\"Delete domain4 custom resource in namespace {0}\", domain4Namespace);\n+    deleteDomainCustomResource(domain4Uid, domain4Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain4Uid);\n+\n+    logger.info(\"Delete domain1test custom resource in namespace {0}\", \"test-\" + domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid + \"test\", \"test-\" + domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \"test from test-\" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2test custom resource in namespace {0}\", \"test-\" + domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid + \"test\", \"test-\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \"test from test-\" + domain2Namespace);\n+\n+    logger.info(\"Delete weblogic custom resource in namespace {0}\", \"weblogic\" + domain2Namespace);\n+    deleteDomainCustomResource(\"weblogic\", \"weblogic\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource weblogic from weblogic\" + domain2Namespace);\n+\n+    deleteSecrets(\"default\");\n+    deleteSecrets(\"atest-\" +  domain1Namespace);;\n+    deleteNamespace(\"atest-\" + domain1Namespace);\n+    //delete operator\n+    uninstallOperator(opHelmParams1);\n+    uninstallOperator(opHelmParams2);\n+    uninstallOperator(opHelmParams4);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=RegExp,\n+   * and domainNamespaceRegExp=^test and domainNamespace= domain3NS.\n+   * Deploy two custom domain resources in the two different namespaces with names starting with test\n+   * and verify all server pods in the domains were created and ready.\n+   * Verify operator is able to manage these domains by scaling.\n+   * Try to start another domain with namespace domain3NS. Verify it is not started by operator\n+   * and value of domainNamespace is ignored for both specific namespace and default.\n+   * Upgrade helm chart to switch to using LabelSelector, start domain and verify operator can scale it.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using expression namespace management\")\n+  public void testNsManageByExp() {\n+    //create domain namespace\n+    String manageByExp1NS = \"test-\" +  domain1Namespace;\n+    String manageByExp2NS = \"test-\" +  domain2Namespace;\n+    String manageByExpDomain1Uid = \"test-\" + domain1Uid;\n+    String manageByExpDomain2Uid = \"test-\" + domain2Uid;\n+    String manageByLabelNS = \"weblogic1\" + domain1Namespace;\n+    String manageByLabelDomainUid = \"weblogic1\" + domain1Uid;\n+    String domain3NS = \"atest-\" +  domain1Namespace;\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp1NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp2NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(domain3NS));\n+    installAndVerifyOperatorCanManageDomainByNSRegExp(manageByExp1NS, manageByExp2NS,\n+        manageByExpDomain1Uid, manageByExpDomain2Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain will not start for specific NS and default\n+    checkPodNotCreated(domain3Uid + adminServerPrefix, domain3Uid, domain3Namespace);\n+    checkDomainNotStartedInDefaultNS(\"RegExp\");\n+    //verify that operator can't start domain if namespace does not start from test\n+    createSecrets(domain3NS);\n+    checkPodNotCreated(domain3Uid + adminServerPrefix, domain3Uid, domain3NS);\n+\n+    // install  operator sharing same domain\n+    checkSecondOperatorFailedToShareSameNS(manageByExp1NS);\n+    switchNSManagementToLabelSelectUsingUpgradeOperator(manageByLabelNS, manageByExp1NS,\n+        manageByLabelDomainUid, manageByExpDomain1Uid);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1.\n+   * Deploy a custom domain resource in the namespace with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   * Verify operator can't start another domain with namespace2 with label2.\n+   * Modify namespace2 to set label1, verify that operator can manage it.\n+   * Verify that domainNamespaces field will be ignored and domain will not start for namespaces:\n+   * (domain3Namespace) and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade operator to replace namespace management using RegExp namespaces.\n+   * Verify it can manage added domain and can't manage old domain by scaling .\n+   * Verify that upgrade helm fail if try to add domain, managed by other operator.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using label namespace management\")\n+  public void testNsManageByLabel() {\n+    String manageByLabelDomain1NS = domain1Namespace;\n+    String manageByLabelDomain2NS = domain2Namespace;\n+    String manageByExpDomainUid = \"weblogic2\" + domain2Namespace;\n+    String manageByExpDomainNS = \"weblogic2\" + domain2Namespace;\n+    String manageByLabelDomain1Uid = domain1Uid;\n+    String manageByLabelDomain2Uid = domain2Uid;\n+    installAndVerifyOperatorCanManageDomainByLabelSelector(manageByLabelDomain1NS, manageByLabelDomain2NS,\n+        manageByLabelDomain1Uid, manageByLabelDomain2Uid);\n+    addExtraDomainByAddingLabelToNS(labels1, manageByLabelDomain2NS, manageByLabelDomain2Uid);\n+    checkDomainNotStartedInDefaultNS(\"SelectLabel\");\n+    checkSecondOperatorFailedToShareSameNS(manageByLabelDomain1NS);\n+    switchNSManagementToRegExpUsingUpgradeOperator(manageByLabelDomain1NS, manageByExpDomainNS,\n+        manageByLabelDomain1Uid, manageByExpDomainUid);\n+    checkUpgradeFailedToAddNSManagedByAnotherOperator();\n+  }\n+\n+  /**\n+   * Create namespace ns1 with no label\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1 and enableRbac=false.\n+   * Add label1 to ns1 and verify domain can't be started\n+   * Call upgrade operator with reuse values to enable management for ns1\n+   * Deploy a custom domain resource in the namespace ns1 with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   */\n+  @Test\n+  @Order(3)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" with enableClusterRoleBinding\")\n+  public void testSwitchRbac() {\n+    String manageByLabelDomainNS = domain1Namespace + \"test4\";\n+    String manageByLabelDomainUid = domain1Uid + \"test4\";\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelDomainNS));\n+    opHelmParams4 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        op4Namespace, \"LabelSelector\",\n+        \"mytest4\", false);\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest4\", manageByLabelDomainUid);\n+    assertDoesNotThrow(() -> addLabelsToNamespace(manageByLabelDomainNS, labels));\n+    //verify domain can't be started because operator does not have permission to manage it\n+    createSecrets(manageByLabelDomainNS);\n+    checkPodNotCreated(manageByLabelDomainUid + adminServerPrefix, manageByLabelDomainUid, manageByLabelDomainNS);\n+    deleteDomainCrd(manageByLabelDomainNS, manageByLabelDomainUid);\n+    //upgrade operator and start domain\n+    int externalRestHttpsPort = getServiceNodePort(op4Namespace, \"external-weblogic-operator-svc\");\n+\n+    OperatorParams opParams = new OperatorParams()\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .helmParams(opHelmParams4);\n+\n+    assertTrue(upgradeAndVerifyOperator(op4Namespace, opParams));\n+    assertTrue(startDomain(manageByLabelDomainNS, manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(op4Namespace, manageByLabelDomainUid);\n+  }\n+\n+  private void checkUpgradeFailedToAddNSManagedByAnotherOperator() {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    // for ns names starting from weblogic, there one of domains\n+    //in namespace weblogic* is managed by operator2\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams1)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic\");\n+\n+    assertFalse(upgradeAndVerifyOperator(opNamespace, opParams), \"Upgrade does not fail when adding domain,\"\n+        + \" managed by other operator\");\n+  }\n+\n+  private void switchNSManagementToRegExpUsingUpgradeOperator(String manageByLabelNS,\n+                                                              String manageByExpNS,\n+                                                              String manageByLabelDomainUid,\n+                                                              String manageByExpDomainUid) {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    assertDoesNotThrow(() -> createNamespace(manageByExpNS));\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams1)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic2\");\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespace, opParams));\n+\n+    //verify domain is started in namespace with name starting with weblogic* and operator can scale it.\n+    createSecrets(manageByExpNS);\n+    assertTrue(startDomain(manageByExpNS,manageByExpDomainUid));\n+    checkOperatorCanScaleDomain(opNamespace,manageByExpDomainUid);\n+    //verify operator can't manage anymore domain running in the namespace with label\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespace, manageByLabelDomainUid, manageByLabelNS),\n+        \"Operator can still manage domain \"\n+        + manageByLabelDomainUid + \" in the namespace \" + manageByLabelNS);\n+  }\n+\n+  private void addExtraDomainByAddingLabelToNS(Map<String, String> labels, String domainNS, String domainUid) {\n+    deleteDomainCrd(domainNS, domainUid);\n+\n+    //switch to the label1, managed by operator and verify domain is started and can be managed by operator.\n+    setLabelToNamespace(domainNS, labels);\n+    assertTrue(startDomain(domainNS, domainUid));\n+    checkOperatorCanScaleDomain(opNamespace, domainUid);\n+  }\n+\n+  private void deleteDomainCrd(String domainNS, String domainUid) {\n+    //clean up domain resources in namespace and set namespace to label , managed by operator\n+    logger.info(\"deleting domain custom resource {0}\", domainUid);\n+    assertTrue(deleteDomainCustomResource(domainUid, domainNS));\n+\n+    // wait until domain was deleted\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be deleted in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNS,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainDoesNotExist(domainUid, DOMAIN_VERSION, domainNS));\n+  }\n+\n+  private void installAndVerifyOperatorCanManageDomainByLabelSelector(String manageByLabelDomain1NS,\n+                                                                      String manageByLabelDomain2NS,\n+                                                                      String manageByLabelDomain1Uid,\n+                                                                      String manageByLabelDomain2Uid) {\n+    // install and verify operator set to manage domains based on LabelSelector strategy,\n+    // domainNamespaces set to domain4 will be ignored\n+    opHelmParams1 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        opNamespace, \"LabelSelector\",\n+        OPERATOR_RELEASE_NAME, true, manageByLabelDomain1NS);\n+\n+    logger.info(\"Installing and verifying domain1\");\n+    createSecrets(manageByLabelDomain1NS);\n+    assertTrue(startDomain(manageByLabelDomain1NS, manageByLabelDomain1Uid),\n+        \"can't start or verify domain in namespace \" + manageByLabelDomain1NS);\n+\n+    checkOperatorCanScaleDomain(opNamespace, manageByLabelDomain1Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain4 will not start\n+    createSecrets(domain4Namespace);\n+    checkPodNotCreated(domain4Uid + adminServerPrefix, domain4Uid, domain4Namespace);\n+\n+    //verify that domain2 in namespace with no label2 will not start\n+    createSecrets(manageByLabelDomain2NS);\n+    checkPodNotCreated(manageByLabelDomain2Uid + adminServerPrefix, manageByLabelDomain2Uid, manageByLabelDomain2NS);\n+  }\n+\n+  private boolean isOperatorFailedToScaleDomain(String opNamespace, String domainUid, String domainNamespace) {\n+    try {\n+      //check operator can't manage domainNamespace by trying to scale domain\n+      int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+      String managedServerPodNamePrefix = domainUid + \"-managed-server\";\n+      String opServiceAccount = OPERATOR_RELEASE_NAME + \"-sa\";\n+      scaleAndVerifyCluster(\"cluster-1\", domainUid, domainNamespace,\n+          managedServerPodNamePrefix, 2, 1,\n+          true, externalRestHttpsPort, opNamespace, opServiceAccount,\n+          false, \"\", \"scaleDown\", 1, \"\", \"\", null, null);\n+      return false;\n+\n+    } catch (ConditionTimeoutException ex) {\n+      logger.info(\"Received expected error \" + ex.getMessage());\n+      return true;\n+    }\n+  }\n+\n+  private static void setLabelToNamespace(String domainNS, Map<String, String> labels) {\n+    //add label to domain namespace\n+    V1Namespace namespaceObject1 = assertDoesNotThrow(() -> Kubernetes.getNamespaceAsObject(domainNS));\n+    assertNotNull(namespaceObject1, \"Can't find namespace with name \" + domainNS);\n+    namespaceObject1.getMetadata().setLabels(labels);\n+    assertDoesNotThrow(() -> Kubernetes.replaceNamespace(namespaceObject1));\n+  }\n+\n+  private void checkOperatorCanScaleDomain(String opNamespace, String domainUid) {\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    assertTrue(scaleClusterWithRestApi(domainUid, clusterName, 3,\n+        externalRestHttpsPort, opNamespace, OPERATOR_RELEASE_NAME + \"-sa\"),\n+        \"Domain \" + domainUid + \" scaling operation failed\");\n+  }\n+\n+  private void checkSecondOperatorFailedToShareSameNS(String domainNamespace) {\n+    // try to install another operator sharing same domain namespace via different domainNsSelectionStrategy\n+    try {\n+      HelmParams opHelmParams3 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+          op3Namespace, \"List\",\n+          null, true, domainNamespace);\n+      assertNull(opHelmParams3, \"Operator helm chart sharing same NS with other operator did not fail\");\n+    } catch (org.opentest4j.AssertionFailedError ex) {\n+      //expecting to fail\n+      logger.info(\"Helm installation failed as expected \" + ex.getMessage());\n+    }\n+  }\n+\n+  private void checkDomainNotStartedInDefaultNS(String domainNsSelectionStrategy) {\n+    //verify operator can't start domain in the default namespace when domainNsSelectionStrategy not List\n+    // and selector does not match default\n+    checkPodNotCreated(\"defaultuid\" + adminServerPrefix, \"defaultuid\", \"default\");\n+\n+    logger.info(\"Delete defaultuid custom resource in namespace {0}\", \"default\");\n+    deleteDomainCustomResource(\"defaultuid\", \"default\");\n+    logger.info(\"Deleted Domain Custom Resource \" + \"defaultuid\");\n+  }\n+\n+  private void switchNSManagementToLabelSelectUsingUpgradeOperator(String manageByLabelNS,\n+                                                                   String manageByExpNS,\n+                                                                   String manageByLabelDomainUid,\n+                                                                   String manageByExpDomainUid) {\n+\n+    //upgrade operator to manage domains with Labeled namespaces\n+    int externalRestHttpsPort = getServiceNodePort(op2Namespace, \"external-weblogic-operator-svc\");\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelNS));\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest\", \"weblogic2\");\n+    setLabelToNamespace(manageByLabelNS, labels);\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams2)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceLabelSelector(\"mytest\")\n+        .domainNamespaceSelectionStrategy(\"LabelSelector\");\n+\n+    assertTrue(upgradeAndVerifyOperator(op2Namespace, opParams));\n+\n+    //verify domain is started\n+    createSecrets(manageByLabelNS);\n+    assertTrue(startDomain(manageByLabelNS,manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(op2Namespace,manageByLabelDomainUid);\n+    //check operator can't manage anymore manageByExpNS\n+    assertTrue(isOperatorFailedToScaleDomain(op2Namespace, manageByExpDomainUid,\n+        manageByExpNS), \"Operator can still manage domain \"\n+        + manageByExpNS + \" in the namespace \" + manageByExpNS);\n+  }\n+\n+  private void installAndVerifyOperatorCanManageDomainByNSRegExp(String manageByExp1NS,\n+                                                                 String manageByExp2NS,\n+                                                                 String manageByExpDomain1Uid,\n+                                                                 String manageByExpDomain2Uid) {\n+    // install and verify operator with domainNsSelectStrategy=RegExp to manage domains with namespaces names,\n+    // starting from test\n+    opHelmParams2 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        op2Namespace, \"RegExp\", \"^test\", true, domain3Namespace);\n+\n+    logger.info(\"Installing and verifying domain1\");\n+    createSecrets(manageByExp1NS);\n+    assertTrue(startDomain(manageByExp1NS, manageByExpDomain1Uid),\n+        \"can't start or verify domain in namespace \" + manageByExp1NS);\n+    checkOperatorCanScaleDomain(op2Namespace, manageByExpDomain1Uid);\n+\n+    logger.info(\"Installing and verifying domain2\");\n+    createSecrets(manageByExp2NS);\n+    assertTrue(startDomain(manageByExp2NS, manageByExpDomain2Uid),\n+        \"operator can start or verify domain in namespace \" + manageByExp2NS);\n+    checkOperatorCanScaleDomain(op2Namespace, manageByExpDomain2Uid);\n+  }\n+\n+\n+  private boolean startDomain(String domainNamespace, String domainUid) {\n+\n+    // create and verify the domain\n+    logger.info(\"Creating and verifying model in image domain\");\n+    try {\n+      Domain domain = createDomainCRD(domainNamespace, domainUid);\n+      createVerifyDomain(domainNamespace, domainUid, miiImage, domain);\n+      return true;\n+    } catch (Exception ex) {\n+      logger.info(\"Failed to createVerifyDomain \" + ex.getMessage());\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * Create a model in image domain crd.\n+   */\n+  private Domain createDomainCRD(String domainNamespace, String domainUid) {\n+\n+    // construct a list of oracle.weblogic.domain.Cluster objects to be used in the domain custom resource\n+    List<Cluster> clusters = new ArrayList<>();\n+    clusters.add(new Cluster()\n+        .clusterName(clusterName)\n+        .replicas(replicaCount)\n+        .serverStartState(\"RUNNING\"));\n+\n+    // create the domain CR\n+    Domain domain = new Domain()\n+        .apiVersion(DOMAIN_API_VERSION)\n+        .kind(\"Domain\")\n+        .metadata(new V1ObjectMeta()\n+            .name(domainUid)\n+            .namespace(domainNamespace))\n+        .spec(new DomainSpec()\n+            .domainUid(domainUid)\n+            .domainHomeSourceType(\"FromModel\")\n+            .image(miiImage)\n+            .addImagePullSecretsItem(new V1LocalObjectReference()\n+                .name(REPO_SECRET_NAME))\n+            .webLogicCredentialsSecret(new V1SecretReference()\n+                .name(adminSecretName)\n+                .namespace(domainNamespace))\n+            .includeServerOutInPodLog(true)\n+            .serverStartPolicy(\"IF_NEEDED\")\n+            .serverPod(new ServerPod()\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"JAVA_OPTIONS\")\n+                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"USER_MEM_ARGS\")\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n+            .adminServer(new AdminServer()\n+                .serverStartState(\"RUNNING\")\n+                .adminService(new oracle.weblogic.domain.AdminService()\n+                    .addChannelsItem(new oracle.weblogic.domain.Channel()\n+                        .channelName(\"default\")\n+                        .nodePort(0))))\n+            .clusters(clusters)\n+            .configuration(new Configuration()\n+                .model(new Model()\n+                    .domainType(WLS_DOMAIN_TYPE)\n+                    .runtimeEncryptionSecret(encryptionSecretName))));\n+    return domain;\n+  }\n+\n+  private static void createSecrets(String domainNamespace) {\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    if (!domainNamespace.equals(\"default\")) {\n+      createDockerRegistrySecret(domainNamespace);\n+    }\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create encryption secret\n+    logger.info(\"Creating encryption secret\");\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+  }\n+\n+  private static void deleteSecrets(String domainNamespace) {\n+    logger.info(\"Deleting docker registry secret in namespace {0}\", domainNamespace);\n+    if (!domainNamespace.equals(\"default\")) {\n+      deleteSecret(OCR_SECRET_NAME, domainNamespace);\n+    }\n+\n+    // delete secret for admin credentials\n+    logger.info(\"Deleting secret for admin credentials\");\n+    deleteSecret(adminSecretName, domainNamespace);\n+\n+    // delete encryption secret\n+    logger.info(\"Deleting encryption secret\");\n+    deleteSecret(encryptionSecretName, domainNamespace);\n+  }\n+\n+  private void createVerifyDomain(String domainNamespace, String domainUid, String miiImage, Domain domain) {\n+    // create domain\n+    logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+        domainUid, domainNamespace, miiImage);\n+    createDomainAndVerify(domain, domainNamespace);\n+    String adminServerPodName = domainUid + adminServerPrefix;\n+    // check that admin server pod exists in the domain namespace\n+    logger.info(\"Checking that admin server pod {0} exists in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReadyAndServiceExists(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check for managed server pods existence in the domain namespace\n+    for (int i = 1; i <= replicaCount; i++) {\n+      String managedServerPodName = domainUid + managedServerPrefix + i;\n+\n+      // check that the managed server pod exists\n+      logger.info(\"Checking that managed server pod {0} exists in namespace {1}\",\n+          managedServerPodName, domainNamespace);\n+      checkPodReadyAndServiceExists(managedServerPodName, domainUid, domainNamespace);\n+    }\n+  }\n+\n+  /**\n+   * Install WebLogic operator and wait up to two minutes until the operator pod is ready.\n+   *\n+   * @param operNamespace the operator namespace in which the operator will be installed\n+   * @param opReleaseName the operator release name\n+   * @param enableClusterRoleBinding operator cluster role binding\n+   * @param domainNamespace the list of the domain namespaces which will be managed by the operator\n+   * @return the operator Helm installation parameters\n+   */\n+  private static HelmParams installOperatorHelmChart(String opReleaseName, String operNamespace,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f7e78cece4496d7be6e42ec72deec2f2648b5d3"}, "originalPosition": 692}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3MDMyMA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r500470320", "createdAt": "2020-10-06T17:24:28Z", "author": {"login": "marinakog"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,824 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretList;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DEFAULT_EXTERNAL_REST_IDENTITY_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorImageName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.installOperator;\n+import static oracle.weblogic.kubernetes.actions.TestActions.listSecrets;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.checkHelmReleaseStatus;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorRestServiceRunning;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createExternalRestIdentitySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String opNamespace = null;\n+  private static String op2Namespace = null;\n+  private static String op3Namespace = null;\n+  private static String op4Namespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"managensdomain1\";\n+  private final String domain2Uid = \"managensdomain2\";\n+  private final String domain3Uid = \"managensdomain3\";\n+  private final String domain4Uid = \"managensdomain4\";\n+\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams opHelmParams1;\n+  private HelmParams opHelmParams2;\n+  private HelmParams opHelmParams4;\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // get a unique operator 2 namespace\n+    logger.info(\"Getting a unique namespace for operator 2\");\n+    assertNotNull(namespaces.get(5), \"Namespace list is null\");\n+    op2Namespace = namespaces.get(5);\n+\n+    // get a unique operator 3 namespace\n+    logger.info(\"Getting a unique namespace for operator 3\");\n+    assertNotNull(namespaces.get(6), \"Namespace list is null\");\n+    op3Namespace = namespaces.get(6);\n+\n+    // get a unique operator 4 namespace\n+    logger.info(\"Getting a unique namespace for operator 4\");\n+    assertNotNull(namespaces.get(7), \"Namespace list is null\");\n+    op4Namespace = namespaces.get(7);\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+    createSecrets(domain3Namespace);\n+    createSecrets(\"default\");\n+    labels1 = new java.util.HashMap<>();\n+    labels1.put(OPERATOR_RELEASE_NAME, OPERATOR_RELEASE_NAME);\n+    labels2 = new java.util.HashMap<>();\n+    labels2.put(OPERATOR_RELEASE_NAME + \"2\", OPERATOR_RELEASE_NAME);\n+    setLabelToNamespace(domain1Namespace, labels1);\n+    setLabelToNamespace(domain2Namespace, labels2);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+\n+    // Delete domain custom resource\n+    logger.info(\"Delete domain1 custom resource in namespace {0}\", domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid, domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \" from \" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2 custom resource in namespace {0}\", domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid, domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \" from \" + domain2Namespace);\n+\n+    logger.info(\"Delete domain3 custom resource in namespace {0}\", domain3Namespace);\n+    deleteDomainCustomResource(domain3Uid, domain3Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain3Uid);\n+\n+    logger.info(\"Delete domain4 custom resource in namespace {0}\", domain4Namespace);\n+    deleteDomainCustomResource(domain4Uid, domain4Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain4Uid);\n+\n+    logger.info(\"Delete domain1test custom resource in namespace {0}\", \"test-\" + domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid + \"test\", \"test-\" + domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \"test from test-\" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2test custom resource in namespace {0}\", \"test-\" + domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid + \"test\", \"test-\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \"test from test-\" + domain2Namespace);\n+\n+    logger.info(\"Delete weblogic custom resource in namespace {0}\", \"weblogic\" + domain2Namespace);\n+    deleteDomainCustomResource(\"weblogic\", \"weblogic\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource weblogic from weblogic\" + domain2Namespace);\n+\n+    deleteSecrets(\"default\");\n+    deleteSecrets(\"atest-\" +  domain1Namespace);;\n+    deleteNamespace(\"atest-\" + domain1Namespace);\n+    //delete operator\n+    uninstallOperator(opHelmParams1);\n+    uninstallOperator(opHelmParams2);\n+    uninstallOperator(opHelmParams4);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=RegExp,\n+   * and domainNamespaceRegExp=^test and domainNamespace= domain3NS.\n+   * Deploy two custom domain resources in the two different namespaces with names starting with test\n+   * and verify all server pods in the domains were created and ready.\n+   * Verify operator is able to manage these domains by scaling.\n+   * Try to start another domain with namespace domain3NS. Verify it is not started by operator\n+   * and value of domainNamespace is ignored for both specific namespace and default.\n+   * Upgrade helm chart to switch to using LabelSelector, start domain and verify operator can scale it.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using expression namespace management\")\n+  public void testNsManageByExp() {\n+    //create domain namespace\n+    String manageByExp1NS = \"test-\" +  domain1Namespace;\n+    String manageByExp2NS = \"test-\" +  domain2Namespace;\n+    String manageByExpDomain1Uid = \"test-\" + domain1Uid;\n+    String manageByExpDomain2Uid = \"test-\" + domain2Uid;\n+    String manageByLabelNS = \"weblogic1\" + domain1Namespace;\n+    String manageByLabelDomainUid = \"weblogic1\" + domain1Uid;\n+    String domain3NS = \"atest-\" +  domain1Namespace;\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp1NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp2NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(domain3NS));\n+    installAndVerifyOperatorCanManageDomainByNSRegExp(manageByExp1NS, manageByExp2NS,\n+        manageByExpDomain1Uid, manageByExpDomain2Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain will not start for specific NS and default\n+    checkPodNotCreated(domain3Uid + adminServerPrefix, domain3Uid, domain3Namespace);\n+    checkDomainNotStartedInDefaultNS(\"RegExp\");\n+    //verify that operator can't start domain if namespace does not start from test\n+    createSecrets(domain3NS);\n+    checkPodNotCreated(domain3Uid + adminServerPrefix, domain3Uid, domain3NS);\n+\n+    // install  operator sharing same domain\n+    checkSecondOperatorFailedToShareSameNS(manageByExp1NS);\n+    switchNSManagementToLabelSelectUsingUpgradeOperator(manageByLabelNS, manageByExp1NS,\n+        manageByLabelDomainUid, manageByExpDomain1Uid);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1.\n+   * Deploy a custom domain resource in the namespace with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   * Verify operator can't start another domain with namespace2 with label2.\n+   * Modify namespace2 to set label1, verify that operator can manage it.\n+   * Verify that domainNamespaces field will be ignored and domain will not start for namespaces:\n+   * (domain3Namespace) and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade operator to replace namespace management using RegExp namespaces.\n+   * Verify it can manage added domain and can't manage old domain by scaling .\n+   * Verify that upgrade helm fail if try to add domain, managed by other operator.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using label namespace management\")\n+  public void testNsManageByLabel() {\n+    String manageByLabelDomain1NS = domain1Namespace;\n+    String manageByLabelDomain2NS = domain2Namespace;\n+    String manageByExpDomainUid = \"weblogic2\" + domain2Namespace;\n+    String manageByExpDomainNS = \"weblogic2\" + domain2Namespace;\n+    String manageByLabelDomain1Uid = domain1Uid;\n+    String manageByLabelDomain2Uid = domain2Uid;\n+    installAndVerifyOperatorCanManageDomainByLabelSelector(manageByLabelDomain1NS, manageByLabelDomain2NS,\n+        manageByLabelDomain1Uid, manageByLabelDomain2Uid);\n+    addExtraDomainByAddingLabelToNS(labels1, manageByLabelDomain2NS, manageByLabelDomain2Uid);\n+    checkDomainNotStartedInDefaultNS(\"SelectLabel\");\n+    checkSecondOperatorFailedToShareSameNS(manageByLabelDomain1NS);\n+    switchNSManagementToRegExpUsingUpgradeOperator(manageByLabelDomain1NS, manageByExpDomainNS,\n+        manageByLabelDomain1Uid, manageByExpDomainUid);\n+    checkUpgradeFailedToAddNSManagedByAnotherOperator();\n+  }\n+\n+  /**\n+   * Create namespace ns1 with no label\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1 and enableRbac=false.\n+   * Add label1 to ns1 and verify domain can't be started\n+   * Call upgrade operator with reuse values to enable management for ns1\n+   * Deploy a custom domain resource in the namespace ns1 with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   */\n+  @Test\n+  @Order(3)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" with enableClusterRoleBinding\")\n+  public void testSwitchRbac() {\n+    String manageByLabelDomainNS = domain1Namespace + \"test4\";\n+    String manageByLabelDomainUid = domain1Uid + \"test4\";\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelDomainNS));\n+    opHelmParams4 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        op4Namespace, \"LabelSelector\",\n+        \"mytest4\", false);\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest4\", manageByLabelDomainUid);\n+    assertDoesNotThrow(() -> addLabelsToNamespace(manageByLabelDomainNS, labels));\n+    //verify domain can't be started because operator does not have permission to manage it\n+    createSecrets(manageByLabelDomainNS);\n+    checkPodNotCreated(manageByLabelDomainUid + adminServerPrefix, manageByLabelDomainUid, manageByLabelDomainNS);\n+    deleteDomainCrd(manageByLabelDomainNS, manageByLabelDomainUid);\n+    //upgrade operator and start domain\n+    int externalRestHttpsPort = getServiceNodePort(op4Namespace, \"external-weblogic-operator-svc\");\n+\n+    OperatorParams opParams = new OperatorParams()\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .helmParams(opHelmParams4);\n+\n+    assertTrue(upgradeAndVerifyOperator(op4Namespace, opParams));\n+    assertTrue(startDomain(manageByLabelDomainNS, manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(op4Namespace, manageByLabelDomainUid);\n+  }\n+\n+  private void checkUpgradeFailedToAddNSManagedByAnotherOperator() {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    // for ns names starting from weblogic, there one of domains\n+    //in namespace weblogic* is managed by operator2\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams1)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic\");\n+\n+    assertFalse(upgradeAndVerifyOperator(opNamespace, opParams), \"Upgrade does not fail when adding domain,\"\n+        + \" managed by other operator\");\n+  }\n+\n+  private void switchNSManagementToRegExpUsingUpgradeOperator(String manageByLabelNS,\n+                                                              String manageByExpNS,\n+                                                              String manageByLabelDomainUid,\n+                                                              String manageByExpDomainUid) {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    assertDoesNotThrow(() -> createNamespace(manageByExpNS));\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams1)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic2\");\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespace, opParams));\n+\n+    //verify domain is started in namespace with name starting with weblogic* and operator can scale it.\n+    createSecrets(manageByExpNS);\n+    assertTrue(startDomain(manageByExpNS,manageByExpDomainUid));\n+    checkOperatorCanScaleDomain(opNamespace,manageByExpDomainUid);\n+    //verify operator can't manage anymore domain running in the namespace with label\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespace, manageByLabelDomainUid, manageByLabelNS),\n+        \"Operator can still manage domain \"\n+        + manageByLabelDomainUid + \" in the namespace \" + manageByLabelNS);\n+  }\n+\n+  private void addExtraDomainByAddingLabelToNS(Map<String, String> labels, String domainNS, String domainUid) {\n+    deleteDomainCrd(domainNS, domainUid);\n+\n+    //switch to the label1, managed by operator and verify domain is started and can be managed by operator.\n+    setLabelToNamespace(domainNS, labels);\n+    assertTrue(startDomain(domainNS, domainUid));\n+    checkOperatorCanScaleDomain(opNamespace, domainUid);\n+  }\n+\n+  private void deleteDomainCrd(String domainNS, String domainUid) {\n+    //clean up domain resources in namespace and set namespace to label , managed by operator\n+    logger.info(\"deleting domain custom resource {0}\", domainUid);\n+    assertTrue(deleteDomainCustomResource(domainUid, domainNS));\n+\n+    // wait until domain was deleted\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be deleted in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNS,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainDoesNotExist(domainUid, DOMAIN_VERSION, domainNS));\n+  }\n+\n+  private void installAndVerifyOperatorCanManageDomainByLabelSelector(String manageByLabelDomain1NS,\n+                                                                      String manageByLabelDomain2NS,\n+                                                                      String manageByLabelDomain1Uid,\n+                                                                      String manageByLabelDomain2Uid) {\n+    // install and verify operator set to manage domains based on LabelSelector strategy,\n+    // domainNamespaces set to domain4 will be ignored\n+    opHelmParams1 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        opNamespace, \"LabelSelector\",\n+        OPERATOR_RELEASE_NAME, true, manageByLabelDomain1NS);\n+\n+    logger.info(\"Installing and verifying domain1\");\n+    createSecrets(manageByLabelDomain1NS);\n+    assertTrue(startDomain(manageByLabelDomain1NS, manageByLabelDomain1Uid),\n+        \"can't start or verify domain in namespace \" + manageByLabelDomain1NS);\n+\n+    checkOperatorCanScaleDomain(opNamespace, manageByLabelDomain1Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain4 will not start\n+    createSecrets(domain4Namespace);\n+    checkPodNotCreated(domain4Uid + adminServerPrefix, domain4Uid, domain4Namespace);\n+\n+    //verify that domain2 in namespace with no label2 will not start\n+    createSecrets(manageByLabelDomain2NS);\n+    checkPodNotCreated(manageByLabelDomain2Uid + adminServerPrefix, manageByLabelDomain2Uid, manageByLabelDomain2NS);\n+  }\n+\n+  private boolean isOperatorFailedToScaleDomain(String opNamespace, String domainUid, String domainNamespace) {\n+    try {\n+      //check operator can't manage domainNamespace by trying to scale domain\n+      int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+      String managedServerPodNamePrefix = domainUid + \"-managed-server\";\n+      String opServiceAccount = OPERATOR_RELEASE_NAME + \"-sa\";\n+      scaleAndVerifyCluster(\"cluster-1\", domainUid, domainNamespace,\n+          managedServerPodNamePrefix, 2, 1,\n+          true, externalRestHttpsPort, opNamespace, opServiceAccount,\n+          false, \"\", \"scaleDown\", 1, \"\", \"\", null, null);\n+      return false;\n+\n+    } catch (ConditionTimeoutException ex) {\n+      logger.info(\"Received expected error \" + ex.getMessage());\n+      return true;\n+    }\n+  }\n+\n+  private static void setLabelToNamespace(String domainNS, Map<String, String> labels) {\n+    //add label to domain namespace\n+    V1Namespace namespaceObject1 = assertDoesNotThrow(() -> Kubernetes.getNamespaceAsObject(domainNS));\n+    assertNotNull(namespaceObject1, \"Can't find namespace with name \" + domainNS);\n+    namespaceObject1.getMetadata().setLabels(labels);\n+    assertDoesNotThrow(() -> Kubernetes.replaceNamespace(namespaceObject1));\n+  }\n+\n+  private void checkOperatorCanScaleDomain(String opNamespace, String domainUid) {\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    assertTrue(scaleClusterWithRestApi(domainUid, clusterName, 3,\n+        externalRestHttpsPort, opNamespace, OPERATOR_RELEASE_NAME + \"-sa\"),\n+        \"Domain \" + domainUid + \" scaling operation failed\");\n+  }\n+\n+  private void checkSecondOperatorFailedToShareSameNS(String domainNamespace) {\n+    // try to install another operator sharing same domain namespace via different domainNsSelectionStrategy\n+    try {\n+      HelmParams opHelmParams3 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+          op3Namespace, \"List\",\n+          null, true, domainNamespace);\n+      assertNull(opHelmParams3, \"Operator helm chart sharing same NS with other operator did not fail\");\n+    } catch (org.opentest4j.AssertionFailedError ex) {\n+      //expecting to fail\n+      logger.info(\"Helm installation failed as expected \" + ex.getMessage());\n+    }\n+  }\n+\n+  private void checkDomainNotStartedInDefaultNS(String domainNsSelectionStrategy) {\n+    //verify operator can't start domain in the default namespace when domainNsSelectionStrategy not List\n+    // and selector does not match default\n+    checkPodNotCreated(\"defaultuid\" + adminServerPrefix, \"defaultuid\", \"default\");\n+\n+    logger.info(\"Delete defaultuid custom resource in namespace {0}\", \"default\");\n+    deleteDomainCustomResource(\"defaultuid\", \"default\");\n+    logger.info(\"Deleted Domain Custom Resource \" + \"defaultuid\");\n+  }\n+\n+  private void switchNSManagementToLabelSelectUsingUpgradeOperator(String manageByLabelNS,\n+                                                                   String manageByExpNS,\n+                                                                   String manageByLabelDomainUid,\n+                                                                   String manageByExpDomainUid) {\n+\n+    //upgrade operator to manage domains with Labeled namespaces\n+    int externalRestHttpsPort = getServiceNodePort(op2Namespace, \"external-weblogic-operator-svc\");\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelNS));\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest\", \"weblogic2\");\n+    setLabelToNamespace(manageByLabelNS, labels);\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams2)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceLabelSelector(\"mytest\")\n+        .domainNamespaceSelectionStrategy(\"LabelSelector\");\n+\n+    assertTrue(upgradeAndVerifyOperator(op2Namespace, opParams));\n+\n+    //verify domain is started\n+    createSecrets(manageByLabelNS);\n+    assertTrue(startDomain(manageByLabelNS,manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(op2Namespace,manageByLabelDomainUid);\n+    //check operator can't manage anymore manageByExpNS\n+    assertTrue(isOperatorFailedToScaleDomain(op2Namespace, manageByExpDomainUid,\n+        manageByExpNS), \"Operator can still manage domain \"\n+        + manageByExpNS + \" in the namespace \" + manageByExpNS);\n+  }\n+\n+  private void installAndVerifyOperatorCanManageDomainByNSRegExp(String manageByExp1NS,\n+                                                                 String manageByExp2NS,\n+                                                                 String manageByExpDomain1Uid,\n+                                                                 String manageByExpDomain2Uid) {\n+    // install and verify operator with domainNsSelectStrategy=RegExp to manage domains with namespaces names,\n+    // starting from test\n+    opHelmParams2 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        op2Namespace, \"RegExp\", \"^test\", true, domain3Namespace);\n+\n+    logger.info(\"Installing and verifying domain1\");\n+    createSecrets(manageByExp1NS);\n+    assertTrue(startDomain(manageByExp1NS, manageByExpDomain1Uid),\n+        \"can't start or verify domain in namespace \" + manageByExp1NS);\n+    checkOperatorCanScaleDomain(op2Namespace, manageByExpDomain1Uid);\n+\n+    logger.info(\"Installing and verifying domain2\");\n+    createSecrets(manageByExp2NS);\n+    assertTrue(startDomain(manageByExp2NS, manageByExpDomain2Uid),\n+        \"operator can start or verify domain in namespace \" + manageByExp2NS);\n+    checkOperatorCanScaleDomain(op2Namespace, manageByExpDomain2Uid);\n+  }\n+\n+\n+  private boolean startDomain(String domainNamespace, String domainUid) {\n+\n+    // create and verify the domain\n+    logger.info(\"Creating and verifying model in image domain\");\n+    try {\n+      Domain domain = createDomainCRD(domainNamespace, domainUid);\n+      createVerifyDomain(domainNamespace, domainUid, miiImage, domain);\n+      return true;\n+    } catch (Exception ex) {\n+      logger.info(\"Failed to createVerifyDomain \" + ex.getMessage());\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * Create a model in image domain crd.\n+   */\n+  private Domain createDomainCRD(String domainNamespace, String domainUid) {\n+\n+    // construct a list of oracle.weblogic.domain.Cluster objects to be used in the domain custom resource\n+    List<Cluster> clusters = new ArrayList<>();\n+    clusters.add(new Cluster()\n+        .clusterName(clusterName)\n+        .replicas(replicaCount)\n+        .serverStartState(\"RUNNING\"));\n+\n+    // create the domain CR\n+    Domain domain = new Domain()\n+        .apiVersion(DOMAIN_API_VERSION)\n+        .kind(\"Domain\")\n+        .metadata(new V1ObjectMeta()\n+            .name(domainUid)\n+            .namespace(domainNamespace))\n+        .spec(new DomainSpec()\n+            .domainUid(domainUid)\n+            .domainHomeSourceType(\"FromModel\")\n+            .image(miiImage)\n+            .addImagePullSecretsItem(new V1LocalObjectReference()\n+                .name(REPO_SECRET_NAME))\n+            .webLogicCredentialsSecret(new V1SecretReference()\n+                .name(adminSecretName)\n+                .namespace(domainNamespace))\n+            .includeServerOutInPodLog(true)\n+            .serverStartPolicy(\"IF_NEEDED\")\n+            .serverPod(new ServerPod()\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"JAVA_OPTIONS\")\n+                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"USER_MEM_ARGS\")\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n+            .adminServer(new AdminServer()\n+                .serverStartState(\"RUNNING\")\n+                .adminService(new oracle.weblogic.domain.AdminService()\n+                    .addChannelsItem(new oracle.weblogic.domain.Channel()\n+                        .channelName(\"default\")\n+                        .nodePort(0))))\n+            .clusters(clusters)\n+            .configuration(new Configuration()\n+                .model(new Model()\n+                    .domainType(WLS_DOMAIN_TYPE)\n+                    .runtimeEncryptionSecret(encryptionSecretName))));\n+    return domain;\n+  }\n+\n+  private static void createSecrets(String domainNamespace) {\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    if (!domainNamespace.equals(\"default\")) {\n+      createDockerRegistrySecret(domainNamespace);\n+    }\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create encryption secret\n+    logger.info(\"Creating encryption secret\");\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+  }\n+\n+  private static void deleteSecrets(String domainNamespace) {\n+    logger.info(\"Deleting docker registry secret in namespace {0}\", domainNamespace);\n+    if (!domainNamespace.equals(\"default\")) {\n+      deleteSecret(OCR_SECRET_NAME, domainNamespace);\n+    }\n+\n+    // delete secret for admin credentials\n+    logger.info(\"Deleting secret for admin credentials\");\n+    deleteSecret(adminSecretName, domainNamespace);\n+\n+    // delete encryption secret\n+    logger.info(\"Deleting encryption secret\");\n+    deleteSecret(encryptionSecretName, domainNamespace);\n+  }\n+\n+  private void createVerifyDomain(String domainNamespace, String domainUid, String miiImage, Domain domain) {\n+    // create domain\n+    logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+        domainUid, domainNamespace, miiImage);\n+    createDomainAndVerify(domain, domainNamespace);\n+    String adminServerPodName = domainUid + adminServerPrefix;\n+    // check that admin server pod exists in the domain namespace\n+    logger.info(\"Checking that admin server pod {0} exists in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReadyAndServiceExists(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check for managed server pods existence in the domain namespace\n+    for (int i = 1; i <= replicaCount; i++) {\n+      String managedServerPodName = domainUid + managedServerPrefix + i;\n+\n+      // check that the managed server pod exists\n+      logger.info(\"Checking that managed server pod {0} exists in namespace {1}\",\n+          managedServerPodName, domainNamespace);\n+      checkPodReadyAndServiceExists(managedServerPodName, domainUid, domainNamespace);\n+    }\n+  }\n+\n+  /**\n+   * Install WebLogic operator and wait up to two minutes until the operator pod is ready.\n+   *\n+   * @param operNamespace the operator namespace in which the operator will be installed\n+   * @param opReleaseName the operator release name\n+   * @param enableClusterRoleBinding operator cluster role binding\n+   * @param domainNamespace the list of the domain namespaces which will be managed by the operator\n+   * @return the operator Helm installation parameters\n+   */\n+  private static HelmParams installOperatorHelmChart(String opReleaseName, String operNamespace,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyMDA4Mw=="}, "originalCommit": {"oid": "2f7e78cece4496d7be6e42ec72deec2f2648b5d3"}, "originalPosition": 692}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTQ5MjY4OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOToyNzoyOVrOHcqtFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDozOTowOFrOHdKiWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyMTg0NQ==", "bodyText": "domainNsSelectionStrategy is not used", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r499821845", "createdAt": "2020-10-05T19:27:29Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,824 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretList;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DEFAULT_EXTERNAL_REST_IDENTITY_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorImageName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.installOperator;\n+import static oracle.weblogic.kubernetes.actions.TestActions.listSecrets;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.checkHelmReleaseStatus;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorRestServiceRunning;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createExternalRestIdentitySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String opNamespace = null;\n+  private static String op2Namespace = null;\n+  private static String op3Namespace = null;\n+  private static String op4Namespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"managensdomain1\";\n+  private final String domain2Uid = \"managensdomain2\";\n+  private final String domain3Uid = \"managensdomain3\";\n+  private final String domain4Uid = \"managensdomain4\";\n+\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams opHelmParams1;\n+  private HelmParams opHelmParams2;\n+  private HelmParams opHelmParams4;\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // get a unique operator 2 namespace\n+    logger.info(\"Getting a unique namespace for operator 2\");\n+    assertNotNull(namespaces.get(5), \"Namespace list is null\");\n+    op2Namespace = namespaces.get(5);\n+\n+    // get a unique operator 3 namespace\n+    logger.info(\"Getting a unique namespace for operator 3\");\n+    assertNotNull(namespaces.get(6), \"Namespace list is null\");\n+    op3Namespace = namespaces.get(6);\n+\n+    // get a unique operator 4 namespace\n+    logger.info(\"Getting a unique namespace for operator 4\");\n+    assertNotNull(namespaces.get(7), \"Namespace list is null\");\n+    op4Namespace = namespaces.get(7);\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+    createSecrets(domain3Namespace);\n+    createSecrets(\"default\");\n+    labels1 = new java.util.HashMap<>();\n+    labels1.put(OPERATOR_RELEASE_NAME, OPERATOR_RELEASE_NAME);\n+    labels2 = new java.util.HashMap<>();\n+    labels2.put(OPERATOR_RELEASE_NAME + \"2\", OPERATOR_RELEASE_NAME);\n+    setLabelToNamespace(domain1Namespace, labels1);\n+    setLabelToNamespace(domain2Namespace, labels2);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+\n+    // Delete domain custom resource\n+    logger.info(\"Delete domain1 custom resource in namespace {0}\", domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid, domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \" from \" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2 custom resource in namespace {0}\", domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid, domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \" from \" + domain2Namespace);\n+\n+    logger.info(\"Delete domain3 custom resource in namespace {0}\", domain3Namespace);\n+    deleteDomainCustomResource(domain3Uid, domain3Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain3Uid);\n+\n+    logger.info(\"Delete domain4 custom resource in namespace {0}\", domain4Namespace);\n+    deleteDomainCustomResource(domain4Uid, domain4Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain4Uid);\n+\n+    logger.info(\"Delete domain1test custom resource in namespace {0}\", \"test-\" + domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid + \"test\", \"test-\" + domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \"test from test-\" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2test custom resource in namespace {0}\", \"test-\" + domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid + \"test\", \"test-\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \"test from test-\" + domain2Namespace);\n+\n+    logger.info(\"Delete weblogic custom resource in namespace {0}\", \"weblogic\" + domain2Namespace);\n+    deleteDomainCustomResource(\"weblogic\", \"weblogic\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource weblogic from weblogic\" + domain2Namespace);\n+\n+    deleteSecrets(\"default\");\n+    deleteSecrets(\"atest-\" +  domain1Namespace);;\n+    deleteNamespace(\"atest-\" + domain1Namespace);\n+    //delete operator\n+    uninstallOperator(opHelmParams1);\n+    uninstallOperator(opHelmParams2);\n+    uninstallOperator(opHelmParams4);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=RegExp,\n+   * and domainNamespaceRegExp=^test and domainNamespace= domain3NS.\n+   * Deploy two custom domain resources in the two different namespaces with names starting with test\n+   * and verify all server pods in the domains were created and ready.\n+   * Verify operator is able to manage these domains by scaling.\n+   * Try to start another domain with namespace domain3NS. Verify it is not started by operator\n+   * and value of domainNamespace is ignored for both specific namespace and default.\n+   * Upgrade helm chart to switch to using LabelSelector, start domain and verify operator can scale it.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using expression namespace management\")\n+  public void testNsManageByExp() {\n+    //create domain namespace\n+    String manageByExp1NS = \"test-\" +  domain1Namespace;\n+    String manageByExp2NS = \"test-\" +  domain2Namespace;\n+    String manageByExpDomain1Uid = \"test-\" + domain1Uid;\n+    String manageByExpDomain2Uid = \"test-\" + domain2Uid;\n+    String manageByLabelNS = \"weblogic1\" + domain1Namespace;\n+    String manageByLabelDomainUid = \"weblogic1\" + domain1Uid;\n+    String domain3NS = \"atest-\" +  domain1Namespace;\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp1NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp2NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(domain3NS));\n+    installAndVerifyOperatorCanManageDomainByNSRegExp(manageByExp1NS, manageByExp2NS,\n+        manageByExpDomain1Uid, manageByExpDomain2Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain will not start for specific NS and default\n+    checkPodNotCreated(domain3Uid + adminServerPrefix, domain3Uid, domain3Namespace);\n+    checkDomainNotStartedInDefaultNS(\"RegExp\");\n+    //verify that operator can't start domain if namespace does not start from test\n+    createSecrets(domain3NS);\n+    checkPodNotCreated(domain3Uid + adminServerPrefix, domain3Uid, domain3NS);\n+\n+    // install  operator sharing same domain\n+    checkSecondOperatorFailedToShareSameNS(manageByExp1NS);\n+    switchNSManagementToLabelSelectUsingUpgradeOperator(manageByLabelNS, manageByExp1NS,\n+        manageByLabelDomainUid, manageByExpDomain1Uid);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1.\n+   * Deploy a custom domain resource in the namespace with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   * Verify operator can't start another domain with namespace2 with label2.\n+   * Modify namespace2 to set label1, verify that operator can manage it.\n+   * Verify that domainNamespaces field will be ignored and domain will not start for namespaces:\n+   * (domain3Namespace) and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade operator to replace namespace management using RegExp namespaces.\n+   * Verify it can manage added domain and can't manage old domain by scaling .\n+   * Verify that upgrade helm fail if try to add domain, managed by other operator.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using label namespace management\")\n+  public void testNsManageByLabel() {\n+    String manageByLabelDomain1NS = domain1Namespace;\n+    String manageByLabelDomain2NS = domain2Namespace;\n+    String manageByExpDomainUid = \"weblogic2\" + domain2Namespace;\n+    String manageByExpDomainNS = \"weblogic2\" + domain2Namespace;\n+    String manageByLabelDomain1Uid = domain1Uid;\n+    String manageByLabelDomain2Uid = domain2Uid;\n+    installAndVerifyOperatorCanManageDomainByLabelSelector(manageByLabelDomain1NS, manageByLabelDomain2NS,\n+        manageByLabelDomain1Uid, manageByLabelDomain2Uid);\n+    addExtraDomainByAddingLabelToNS(labels1, manageByLabelDomain2NS, manageByLabelDomain2Uid);\n+    checkDomainNotStartedInDefaultNS(\"SelectLabel\");\n+    checkSecondOperatorFailedToShareSameNS(manageByLabelDomain1NS);\n+    switchNSManagementToRegExpUsingUpgradeOperator(manageByLabelDomain1NS, manageByExpDomainNS,\n+        manageByLabelDomain1Uid, manageByExpDomainUid);\n+    checkUpgradeFailedToAddNSManagedByAnotherOperator();\n+  }\n+\n+  /**\n+   * Create namespace ns1 with no label\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1 and enableRbac=false.\n+   * Add label1 to ns1 and verify domain can't be started\n+   * Call upgrade operator with reuse values to enable management for ns1\n+   * Deploy a custom domain resource in the namespace ns1 with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   */\n+  @Test\n+  @Order(3)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" with enableClusterRoleBinding\")\n+  public void testSwitchRbac() {\n+    String manageByLabelDomainNS = domain1Namespace + \"test4\";\n+    String manageByLabelDomainUid = domain1Uid + \"test4\";\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelDomainNS));\n+    opHelmParams4 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        op4Namespace, \"LabelSelector\",\n+        \"mytest4\", false);\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest4\", manageByLabelDomainUid);\n+    assertDoesNotThrow(() -> addLabelsToNamespace(manageByLabelDomainNS, labels));\n+    //verify domain can't be started because operator does not have permission to manage it\n+    createSecrets(manageByLabelDomainNS);\n+    checkPodNotCreated(manageByLabelDomainUid + adminServerPrefix, manageByLabelDomainUid, manageByLabelDomainNS);\n+    deleteDomainCrd(manageByLabelDomainNS, manageByLabelDomainUid);\n+    //upgrade operator and start domain\n+    int externalRestHttpsPort = getServiceNodePort(op4Namespace, \"external-weblogic-operator-svc\");\n+\n+    OperatorParams opParams = new OperatorParams()\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .helmParams(opHelmParams4);\n+\n+    assertTrue(upgradeAndVerifyOperator(op4Namespace, opParams));\n+    assertTrue(startDomain(manageByLabelDomainNS, manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(op4Namespace, manageByLabelDomainUid);\n+  }\n+\n+  private void checkUpgradeFailedToAddNSManagedByAnotherOperator() {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    // for ns names starting from weblogic, there one of domains\n+    //in namespace weblogic* is managed by operator2\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams1)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic\");\n+\n+    assertFalse(upgradeAndVerifyOperator(opNamespace, opParams), \"Upgrade does not fail when adding domain,\"\n+        + \" managed by other operator\");\n+  }\n+\n+  private void switchNSManagementToRegExpUsingUpgradeOperator(String manageByLabelNS,\n+                                                              String manageByExpNS,\n+                                                              String manageByLabelDomainUid,\n+                                                              String manageByExpDomainUid) {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    assertDoesNotThrow(() -> createNamespace(manageByExpNS));\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams1)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic2\");\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespace, opParams));\n+\n+    //verify domain is started in namespace with name starting with weblogic* and operator can scale it.\n+    createSecrets(manageByExpNS);\n+    assertTrue(startDomain(manageByExpNS,manageByExpDomainUid));\n+    checkOperatorCanScaleDomain(opNamespace,manageByExpDomainUid);\n+    //verify operator can't manage anymore domain running in the namespace with label\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespace, manageByLabelDomainUid, manageByLabelNS),\n+        \"Operator can still manage domain \"\n+        + manageByLabelDomainUid + \" in the namespace \" + manageByLabelNS);\n+  }\n+\n+  private void addExtraDomainByAddingLabelToNS(Map<String, String> labels, String domainNS, String domainUid) {\n+    deleteDomainCrd(domainNS, domainUid);\n+\n+    //switch to the label1, managed by operator and verify domain is started and can be managed by operator.\n+    setLabelToNamespace(domainNS, labels);\n+    assertTrue(startDomain(domainNS, domainUid));\n+    checkOperatorCanScaleDomain(opNamespace, domainUid);\n+  }\n+\n+  private void deleteDomainCrd(String domainNS, String domainUid) {\n+    //clean up domain resources in namespace and set namespace to label , managed by operator\n+    logger.info(\"deleting domain custom resource {0}\", domainUid);\n+    assertTrue(deleteDomainCustomResource(domainUid, domainNS));\n+\n+    // wait until domain was deleted\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be deleted in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNS,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainDoesNotExist(domainUid, DOMAIN_VERSION, domainNS));\n+  }\n+\n+  private void installAndVerifyOperatorCanManageDomainByLabelSelector(String manageByLabelDomain1NS,\n+                                                                      String manageByLabelDomain2NS,\n+                                                                      String manageByLabelDomain1Uid,\n+                                                                      String manageByLabelDomain2Uid) {\n+    // install and verify operator set to manage domains based on LabelSelector strategy,\n+    // domainNamespaces set to domain4 will be ignored\n+    opHelmParams1 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        opNamespace, \"LabelSelector\",\n+        OPERATOR_RELEASE_NAME, true, manageByLabelDomain1NS);\n+\n+    logger.info(\"Installing and verifying domain1\");\n+    createSecrets(manageByLabelDomain1NS);\n+    assertTrue(startDomain(manageByLabelDomain1NS, manageByLabelDomain1Uid),\n+        \"can't start or verify domain in namespace \" + manageByLabelDomain1NS);\n+\n+    checkOperatorCanScaleDomain(opNamespace, manageByLabelDomain1Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain4 will not start\n+    createSecrets(domain4Namespace);\n+    checkPodNotCreated(domain4Uid + adminServerPrefix, domain4Uid, domain4Namespace);\n+\n+    //verify that domain2 in namespace with no label2 will not start\n+    createSecrets(manageByLabelDomain2NS);\n+    checkPodNotCreated(manageByLabelDomain2Uid + adminServerPrefix, manageByLabelDomain2Uid, manageByLabelDomain2NS);\n+  }\n+\n+  private boolean isOperatorFailedToScaleDomain(String opNamespace, String domainUid, String domainNamespace) {\n+    try {\n+      //check operator can't manage domainNamespace by trying to scale domain\n+      int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+      String managedServerPodNamePrefix = domainUid + \"-managed-server\";\n+      String opServiceAccount = OPERATOR_RELEASE_NAME + \"-sa\";\n+      scaleAndVerifyCluster(\"cluster-1\", domainUid, domainNamespace,\n+          managedServerPodNamePrefix, 2, 1,\n+          true, externalRestHttpsPort, opNamespace, opServiceAccount,\n+          false, \"\", \"scaleDown\", 1, \"\", \"\", null, null);\n+      return false;\n+\n+    } catch (ConditionTimeoutException ex) {\n+      logger.info(\"Received expected error \" + ex.getMessage());\n+      return true;\n+    }\n+  }\n+\n+  private static void setLabelToNamespace(String domainNS, Map<String, String> labels) {\n+    //add label to domain namespace\n+    V1Namespace namespaceObject1 = assertDoesNotThrow(() -> Kubernetes.getNamespaceAsObject(domainNS));\n+    assertNotNull(namespaceObject1, \"Can't find namespace with name \" + domainNS);\n+    namespaceObject1.getMetadata().setLabels(labels);\n+    assertDoesNotThrow(() -> Kubernetes.replaceNamespace(namespaceObject1));\n+  }\n+\n+  private void checkOperatorCanScaleDomain(String opNamespace, String domainUid) {\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    assertTrue(scaleClusterWithRestApi(domainUid, clusterName, 3,\n+        externalRestHttpsPort, opNamespace, OPERATOR_RELEASE_NAME + \"-sa\"),\n+        \"Domain \" + domainUid + \" scaling operation failed\");\n+  }\n+\n+  private void checkSecondOperatorFailedToShareSameNS(String domainNamespace) {\n+    // try to install another operator sharing same domain namespace via different domainNsSelectionStrategy\n+    try {\n+      HelmParams opHelmParams3 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+          op3Namespace, \"List\",\n+          null, true, domainNamespace);\n+      assertNull(opHelmParams3, \"Operator helm chart sharing same NS with other operator did not fail\");\n+    } catch (org.opentest4j.AssertionFailedError ex) {\n+      //expecting to fail\n+      logger.info(\"Helm installation failed as expected \" + ex.getMessage());\n+    }\n+  }\n+\n+  private void checkDomainNotStartedInDefaultNS(String domainNsSelectionStrategy) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f7e78cece4496d7be6e42ec72deec2f2648b5d3"}, "originalPosition": 502}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM0MzM4NQ==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r500343385", "createdAt": "2020-10-06T14:39:08Z", "author": {"login": "marinakog"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,824 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretList;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DEFAULT_EXTERNAL_REST_IDENTITY_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorImageName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.installOperator;\n+import static oracle.weblogic.kubernetes.actions.TestActions.listSecrets;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.checkHelmReleaseStatus;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorRestServiceRunning;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createExternalRestIdentitySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String opNamespace = null;\n+  private static String op2Namespace = null;\n+  private static String op3Namespace = null;\n+  private static String op4Namespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"managensdomain1\";\n+  private final String domain2Uid = \"managensdomain2\";\n+  private final String domain3Uid = \"managensdomain3\";\n+  private final String domain4Uid = \"managensdomain4\";\n+\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams opHelmParams1;\n+  private HelmParams opHelmParams2;\n+  private HelmParams opHelmParams4;\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // get a unique operator 2 namespace\n+    logger.info(\"Getting a unique namespace for operator 2\");\n+    assertNotNull(namespaces.get(5), \"Namespace list is null\");\n+    op2Namespace = namespaces.get(5);\n+\n+    // get a unique operator 3 namespace\n+    logger.info(\"Getting a unique namespace for operator 3\");\n+    assertNotNull(namespaces.get(6), \"Namespace list is null\");\n+    op3Namespace = namespaces.get(6);\n+\n+    // get a unique operator 4 namespace\n+    logger.info(\"Getting a unique namespace for operator 4\");\n+    assertNotNull(namespaces.get(7), \"Namespace list is null\");\n+    op4Namespace = namespaces.get(7);\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+    createSecrets(domain3Namespace);\n+    createSecrets(\"default\");\n+    labels1 = new java.util.HashMap<>();\n+    labels1.put(OPERATOR_RELEASE_NAME, OPERATOR_RELEASE_NAME);\n+    labels2 = new java.util.HashMap<>();\n+    labels2.put(OPERATOR_RELEASE_NAME + \"2\", OPERATOR_RELEASE_NAME);\n+    setLabelToNamespace(domain1Namespace, labels1);\n+    setLabelToNamespace(domain2Namespace, labels2);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+\n+    // Delete domain custom resource\n+    logger.info(\"Delete domain1 custom resource in namespace {0}\", domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid, domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \" from \" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2 custom resource in namespace {0}\", domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid, domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \" from \" + domain2Namespace);\n+\n+    logger.info(\"Delete domain3 custom resource in namespace {0}\", domain3Namespace);\n+    deleteDomainCustomResource(domain3Uid, domain3Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain3Uid);\n+\n+    logger.info(\"Delete domain4 custom resource in namespace {0}\", domain4Namespace);\n+    deleteDomainCustomResource(domain4Uid, domain4Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain4Uid);\n+\n+    logger.info(\"Delete domain1test custom resource in namespace {0}\", \"test-\" + domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid + \"test\", \"test-\" + domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \"test from test-\" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2test custom resource in namespace {0}\", \"test-\" + domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid + \"test\", \"test-\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \"test from test-\" + domain2Namespace);\n+\n+    logger.info(\"Delete weblogic custom resource in namespace {0}\", \"weblogic\" + domain2Namespace);\n+    deleteDomainCustomResource(\"weblogic\", \"weblogic\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource weblogic from weblogic\" + domain2Namespace);\n+\n+    deleteSecrets(\"default\");\n+    deleteSecrets(\"atest-\" +  domain1Namespace);;\n+    deleteNamespace(\"atest-\" + domain1Namespace);\n+    //delete operator\n+    uninstallOperator(opHelmParams1);\n+    uninstallOperator(opHelmParams2);\n+    uninstallOperator(opHelmParams4);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=RegExp,\n+   * and domainNamespaceRegExp=^test and domainNamespace= domain3NS.\n+   * Deploy two custom domain resources in the two different namespaces with names starting with test\n+   * and verify all server pods in the domains were created and ready.\n+   * Verify operator is able to manage these domains by scaling.\n+   * Try to start another domain with namespace domain3NS. Verify it is not started by operator\n+   * and value of domainNamespace is ignored for both specific namespace and default.\n+   * Upgrade helm chart to switch to using LabelSelector, start domain and verify operator can scale it.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using expression namespace management\")\n+  public void testNsManageByExp() {\n+    //create domain namespace\n+    String manageByExp1NS = \"test-\" +  domain1Namespace;\n+    String manageByExp2NS = \"test-\" +  domain2Namespace;\n+    String manageByExpDomain1Uid = \"test-\" + domain1Uid;\n+    String manageByExpDomain2Uid = \"test-\" + domain2Uid;\n+    String manageByLabelNS = \"weblogic1\" + domain1Namespace;\n+    String manageByLabelDomainUid = \"weblogic1\" + domain1Uid;\n+    String domain3NS = \"atest-\" +  domain1Namespace;\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp1NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp2NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(domain3NS));\n+    installAndVerifyOperatorCanManageDomainByNSRegExp(manageByExp1NS, manageByExp2NS,\n+        manageByExpDomain1Uid, manageByExpDomain2Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain will not start for specific NS and default\n+    checkPodNotCreated(domain3Uid + adminServerPrefix, domain3Uid, domain3Namespace);\n+    checkDomainNotStartedInDefaultNS(\"RegExp\");\n+    //verify that operator can't start domain if namespace does not start from test\n+    createSecrets(domain3NS);\n+    checkPodNotCreated(domain3Uid + adminServerPrefix, domain3Uid, domain3NS);\n+\n+    // install  operator sharing same domain\n+    checkSecondOperatorFailedToShareSameNS(manageByExp1NS);\n+    switchNSManagementToLabelSelectUsingUpgradeOperator(manageByLabelNS, manageByExp1NS,\n+        manageByLabelDomainUid, manageByExpDomain1Uid);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1.\n+   * Deploy a custom domain resource in the namespace with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   * Verify operator can't start another domain with namespace2 with label2.\n+   * Modify namespace2 to set label1, verify that operator can manage it.\n+   * Verify that domainNamespaces field will be ignored and domain will not start for namespaces:\n+   * (domain3Namespace) and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade operator to replace namespace management using RegExp namespaces.\n+   * Verify it can manage added domain and can't manage old domain by scaling .\n+   * Verify that upgrade helm fail if try to add domain, managed by other operator.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using label namespace management\")\n+  public void testNsManageByLabel() {\n+    String manageByLabelDomain1NS = domain1Namespace;\n+    String manageByLabelDomain2NS = domain2Namespace;\n+    String manageByExpDomainUid = \"weblogic2\" + domain2Namespace;\n+    String manageByExpDomainNS = \"weblogic2\" + domain2Namespace;\n+    String manageByLabelDomain1Uid = domain1Uid;\n+    String manageByLabelDomain2Uid = domain2Uid;\n+    installAndVerifyOperatorCanManageDomainByLabelSelector(manageByLabelDomain1NS, manageByLabelDomain2NS,\n+        manageByLabelDomain1Uid, manageByLabelDomain2Uid);\n+    addExtraDomainByAddingLabelToNS(labels1, manageByLabelDomain2NS, manageByLabelDomain2Uid);\n+    checkDomainNotStartedInDefaultNS(\"SelectLabel\");\n+    checkSecondOperatorFailedToShareSameNS(manageByLabelDomain1NS);\n+    switchNSManagementToRegExpUsingUpgradeOperator(manageByLabelDomain1NS, manageByExpDomainNS,\n+        manageByLabelDomain1Uid, manageByExpDomainUid);\n+    checkUpgradeFailedToAddNSManagedByAnotherOperator();\n+  }\n+\n+  /**\n+   * Create namespace ns1 with no label\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1 and enableRbac=false.\n+   * Add label1 to ns1 and verify domain can't be started\n+   * Call upgrade operator with reuse values to enable management for ns1\n+   * Deploy a custom domain resource in the namespace ns1 with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   */\n+  @Test\n+  @Order(3)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" with enableClusterRoleBinding\")\n+  public void testSwitchRbac() {\n+    String manageByLabelDomainNS = domain1Namespace + \"test4\";\n+    String manageByLabelDomainUid = domain1Uid + \"test4\";\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelDomainNS));\n+    opHelmParams4 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        op4Namespace, \"LabelSelector\",\n+        \"mytest4\", false);\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest4\", manageByLabelDomainUid);\n+    assertDoesNotThrow(() -> addLabelsToNamespace(manageByLabelDomainNS, labels));\n+    //verify domain can't be started because operator does not have permission to manage it\n+    createSecrets(manageByLabelDomainNS);\n+    checkPodNotCreated(manageByLabelDomainUid + adminServerPrefix, manageByLabelDomainUid, manageByLabelDomainNS);\n+    deleteDomainCrd(manageByLabelDomainNS, manageByLabelDomainUid);\n+    //upgrade operator and start domain\n+    int externalRestHttpsPort = getServiceNodePort(op4Namespace, \"external-weblogic-operator-svc\");\n+\n+    OperatorParams opParams = new OperatorParams()\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .helmParams(opHelmParams4);\n+\n+    assertTrue(upgradeAndVerifyOperator(op4Namespace, opParams));\n+    assertTrue(startDomain(manageByLabelDomainNS, manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(op4Namespace, manageByLabelDomainUid);\n+  }\n+\n+  private void checkUpgradeFailedToAddNSManagedByAnotherOperator() {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    // for ns names starting from weblogic, there one of domains\n+    //in namespace weblogic* is managed by operator2\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams1)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic\");\n+\n+    assertFalse(upgradeAndVerifyOperator(opNamespace, opParams), \"Upgrade does not fail when adding domain,\"\n+        + \" managed by other operator\");\n+  }\n+\n+  private void switchNSManagementToRegExpUsingUpgradeOperator(String manageByLabelNS,\n+                                                              String manageByExpNS,\n+                                                              String manageByLabelDomainUid,\n+                                                              String manageByExpDomainUid) {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    assertDoesNotThrow(() -> createNamespace(manageByExpNS));\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams1)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic2\");\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespace, opParams));\n+\n+    //verify domain is started in namespace with name starting with weblogic* and operator can scale it.\n+    createSecrets(manageByExpNS);\n+    assertTrue(startDomain(manageByExpNS,manageByExpDomainUid));\n+    checkOperatorCanScaleDomain(opNamespace,manageByExpDomainUid);\n+    //verify operator can't manage anymore domain running in the namespace with label\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespace, manageByLabelDomainUid, manageByLabelNS),\n+        \"Operator can still manage domain \"\n+        + manageByLabelDomainUid + \" in the namespace \" + manageByLabelNS);\n+  }\n+\n+  private void addExtraDomainByAddingLabelToNS(Map<String, String> labels, String domainNS, String domainUid) {\n+    deleteDomainCrd(domainNS, domainUid);\n+\n+    //switch to the label1, managed by operator and verify domain is started and can be managed by operator.\n+    setLabelToNamespace(domainNS, labels);\n+    assertTrue(startDomain(domainNS, domainUid));\n+    checkOperatorCanScaleDomain(opNamespace, domainUid);\n+  }\n+\n+  private void deleteDomainCrd(String domainNS, String domainUid) {\n+    //clean up domain resources in namespace and set namespace to label , managed by operator\n+    logger.info(\"deleting domain custom resource {0}\", domainUid);\n+    assertTrue(deleteDomainCustomResource(domainUid, domainNS));\n+\n+    // wait until domain was deleted\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be deleted in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNS,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainDoesNotExist(domainUid, DOMAIN_VERSION, domainNS));\n+  }\n+\n+  private void installAndVerifyOperatorCanManageDomainByLabelSelector(String manageByLabelDomain1NS,\n+                                                                      String manageByLabelDomain2NS,\n+                                                                      String manageByLabelDomain1Uid,\n+                                                                      String manageByLabelDomain2Uid) {\n+    // install and verify operator set to manage domains based on LabelSelector strategy,\n+    // domainNamespaces set to domain4 will be ignored\n+    opHelmParams1 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        opNamespace, \"LabelSelector\",\n+        OPERATOR_RELEASE_NAME, true, manageByLabelDomain1NS);\n+\n+    logger.info(\"Installing and verifying domain1\");\n+    createSecrets(manageByLabelDomain1NS);\n+    assertTrue(startDomain(manageByLabelDomain1NS, manageByLabelDomain1Uid),\n+        \"can't start or verify domain in namespace \" + manageByLabelDomain1NS);\n+\n+    checkOperatorCanScaleDomain(opNamespace, manageByLabelDomain1Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain4 will not start\n+    createSecrets(domain4Namespace);\n+    checkPodNotCreated(domain4Uid + adminServerPrefix, domain4Uid, domain4Namespace);\n+\n+    //verify that domain2 in namespace with no label2 will not start\n+    createSecrets(manageByLabelDomain2NS);\n+    checkPodNotCreated(manageByLabelDomain2Uid + adminServerPrefix, manageByLabelDomain2Uid, manageByLabelDomain2NS);\n+  }\n+\n+  private boolean isOperatorFailedToScaleDomain(String opNamespace, String domainUid, String domainNamespace) {\n+    try {\n+      //check operator can't manage domainNamespace by trying to scale domain\n+      int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+      String managedServerPodNamePrefix = domainUid + \"-managed-server\";\n+      String opServiceAccount = OPERATOR_RELEASE_NAME + \"-sa\";\n+      scaleAndVerifyCluster(\"cluster-1\", domainUid, domainNamespace,\n+          managedServerPodNamePrefix, 2, 1,\n+          true, externalRestHttpsPort, opNamespace, opServiceAccount,\n+          false, \"\", \"scaleDown\", 1, \"\", \"\", null, null);\n+      return false;\n+\n+    } catch (ConditionTimeoutException ex) {\n+      logger.info(\"Received expected error \" + ex.getMessage());\n+      return true;\n+    }\n+  }\n+\n+  private static void setLabelToNamespace(String domainNS, Map<String, String> labels) {\n+    //add label to domain namespace\n+    V1Namespace namespaceObject1 = assertDoesNotThrow(() -> Kubernetes.getNamespaceAsObject(domainNS));\n+    assertNotNull(namespaceObject1, \"Can't find namespace with name \" + domainNS);\n+    namespaceObject1.getMetadata().setLabels(labels);\n+    assertDoesNotThrow(() -> Kubernetes.replaceNamespace(namespaceObject1));\n+  }\n+\n+  private void checkOperatorCanScaleDomain(String opNamespace, String domainUid) {\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    assertTrue(scaleClusterWithRestApi(domainUid, clusterName, 3,\n+        externalRestHttpsPort, opNamespace, OPERATOR_RELEASE_NAME + \"-sa\"),\n+        \"Domain \" + domainUid + \" scaling operation failed\");\n+  }\n+\n+  private void checkSecondOperatorFailedToShareSameNS(String domainNamespace) {\n+    // try to install another operator sharing same domain namespace via different domainNsSelectionStrategy\n+    try {\n+      HelmParams opHelmParams3 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+          op3Namespace, \"List\",\n+          null, true, domainNamespace);\n+      assertNull(opHelmParams3, \"Operator helm chart sharing same NS with other operator did not fail\");\n+    } catch (org.opentest4j.AssertionFailedError ex) {\n+      //expecting to fail\n+      logger.info(\"Helm installation failed as expected \" + ex.getMessage());\n+    }\n+  }\n+\n+  private void checkDomainNotStartedInDefaultNS(String domainNsSelectionStrategy) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyMTg0NQ=="}, "originalCommit": {"oid": "2f7e78cece4496d7be6e42ec72deec2f2648b5d3"}, "originalPosition": 502}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTUwMzY3OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOTozMDo1M1rOHcqz6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDozOToxNlrOHdKi0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyMzU5NA==", "bodyText": "can u call this variable something else, its confusing as there is already a variable domain3Namespace", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r499823594", "createdAt": "2020-10-05T19:30:53Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,824 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretList;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DEFAULT_EXTERNAL_REST_IDENTITY_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorImageName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.installOperator;\n+import static oracle.weblogic.kubernetes.actions.TestActions.listSecrets;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.checkHelmReleaseStatus;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorRestServiceRunning;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createExternalRestIdentitySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String opNamespace = null;\n+  private static String op2Namespace = null;\n+  private static String op3Namespace = null;\n+  private static String op4Namespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"managensdomain1\";\n+  private final String domain2Uid = \"managensdomain2\";\n+  private final String domain3Uid = \"managensdomain3\";\n+  private final String domain4Uid = \"managensdomain4\";\n+\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams opHelmParams1;\n+  private HelmParams opHelmParams2;\n+  private HelmParams opHelmParams4;\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // get a unique operator 2 namespace\n+    logger.info(\"Getting a unique namespace for operator 2\");\n+    assertNotNull(namespaces.get(5), \"Namespace list is null\");\n+    op2Namespace = namespaces.get(5);\n+\n+    // get a unique operator 3 namespace\n+    logger.info(\"Getting a unique namespace for operator 3\");\n+    assertNotNull(namespaces.get(6), \"Namespace list is null\");\n+    op3Namespace = namespaces.get(6);\n+\n+    // get a unique operator 4 namespace\n+    logger.info(\"Getting a unique namespace for operator 4\");\n+    assertNotNull(namespaces.get(7), \"Namespace list is null\");\n+    op4Namespace = namespaces.get(7);\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+    createSecrets(domain3Namespace);\n+    createSecrets(\"default\");\n+    labels1 = new java.util.HashMap<>();\n+    labels1.put(OPERATOR_RELEASE_NAME, OPERATOR_RELEASE_NAME);\n+    labels2 = new java.util.HashMap<>();\n+    labels2.put(OPERATOR_RELEASE_NAME + \"2\", OPERATOR_RELEASE_NAME);\n+    setLabelToNamespace(domain1Namespace, labels1);\n+    setLabelToNamespace(domain2Namespace, labels2);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+\n+    // Delete domain custom resource\n+    logger.info(\"Delete domain1 custom resource in namespace {0}\", domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid, domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \" from \" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2 custom resource in namespace {0}\", domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid, domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \" from \" + domain2Namespace);\n+\n+    logger.info(\"Delete domain3 custom resource in namespace {0}\", domain3Namespace);\n+    deleteDomainCustomResource(domain3Uid, domain3Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain3Uid);\n+\n+    logger.info(\"Delete domain4 custom resource in namespace {0}\", domain4Namespace);\n+    deleteDomainCustomResource(domain4Uid, domain4Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain4Uid);\n+\n+    logger.info(\"Delete domain1test custom resource in namespace {0}\", \"test-\" + domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid + \"test\", \"test-\" + domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \"test from test-\" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2test custom resource in namespace {0}\", \"test-\" + domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid + \"test\", \"test-\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \"test from test-\" + domain2Namespace);\n+\n+    logger.info(\"Delete weblogic custom resource in namespace {0}\", \"weblogic\" + domain2Namespace);\n+    deleteDomainCustomResource(\"weblogic\", \"weblogic\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource weblogic from weblogic\" + domain2Namespace);\n+\n+    deleteSecrets(\"default\");\n+    deleteSecrets(\"atest-\" +  domain1Namespace);;\n+    deleteNamespace(\"atest-\" + domain1Namespace);\n+    //delete operator\n+    uninstallOperator(opHelmParams1);\n+    uninstallOperator(opHelmParams2);\n+    uninstallOperator(opHelmParams4);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=RegExp,\n+   * and domainNamespaceRegExp=^test and domainNamespace= domain3NS.\n+   * Deploy two custom domain resources in the two different namespaces with names starting with test\n+   * and verify all server pods in the domains were created and ready.\n+   * Verify operator is able to manage these domains by scaling.\n+   * Try to start another domain with namespace domain3NS. Verify it is not started by operator\n+   * and value of domainNamespace is ignored for both specific namespace and default.\n+   * Upgrade helm chart to switch to using LabelSelector, start domain and verify operator can scale it.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using expression namespace management\")\n+  public void testNsManageByExp() {\n+    //create domain namespace\n+    String manageByExp1NS = \"test-\" +  domain1Namespace;\n+    String manageByExp2NS = \"test-\" +  domain2Namespace;\n+    String manageByExpDomain1Uid = \"test-\" + domain1Uid;\n+    String manageByExpDomain2Uid = \"test-\" + domain2Uid;\n+    String manageByLabelNS = \"weblogic1\" + domain1Namespace;\n+    String manageByLabelDomainUid = \"weblogic1\" + domain1Uid;\n+    String domain3NS = \"atest-\" +  domain1Namespace;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f7e78cece4496d7be6e42ec72deec2f2648b5d3"}, "originalPosition": 260}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM0MzUwNg==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r500343506", "createdAt": "2020-10-06T14:39:16Z", "author": {"login": "marinakog"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,824 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretList;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DEFAULT_EXTERNAL_REST_IDENTITY_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorImageName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.installOperator;\n+import static oracle.weblogic.kubernetes.actions.TestActions.listSecrets;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.checkHelmReleaseStatus;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorRestServiceRunning;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createExternalRestIdentitySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String opNamespace = null;\n+  private static String op2Namespace = null;\n+  private static String op3Namespace = null;\n+  private static String op4Namespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"managensdomain1\";\n+  private final String domain2Uid = \"managensdomain2\";\n+  private final String domain3Uid = \"managensdomain3\";\n+  private final String domain4Uid = \"managensdomain4\";\n+\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams opHelmParams1;\n+  private HelmParams opHelmParams2;\n+  private HelmParams opHelmParams4;\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // get a unique operator 2 namespace\n+    logger.info(\"Getting a unique namespace for operator 2\");\n+    assertNotNull(namespaces.get(5), \"Namespace list is null\");\n+    op2Namespace = namespaces.get(5);\n+\n+    // get a unique operator 3 namespace\n+    logger.info(\"Getting a unique namespace for operator 3\");\n+    assertNotNull(namespaces.get(6), \"Namespace list is null\");\n+    op3Namespace = namespaces.get(6);\n+\n+    // get a unique operator 4 namespace\n+    logger.info(\"Getting a unique namespace for operator 4\");\n+    assertNotNull(namespaces.get(7), \"Namespace list is null\");\n+    op4Namespace = namespaces.get(7);\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+    createSecrets(domain3Namespace);\n+    createSecrets(\"default\");\n+    labels1 = new java.util.HashMap<>();\n+    labels1.put(OPERATOR_RELEASE_NAME, OPERATOR_RELEASE_NAME);\n+    labels2 = new java.util.HashMap<>();\n+    labels2.put(OPERATOR_RELEASE_NAME + \"2\", OPERATOR_RELEASE_NAME);\n+    setLabelToNamespace(domain1Namespace, labels1);\n+    setLabelToNamespace(domain2Namespace, labels2);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+\n+    // Delete domain custom resource\n+    logger.info(\"Delete domain1 custom resource in namespace {0}\", domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid, domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \" from \" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2 custom resource in namespace {0}\", domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid, domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \" from \" + domain2Namespace);\n+\n+    logger.info(\"Delete domain3 custom resource in namespace {0}\", domain3Namespace);\n+    deleteDomainCustomResource(domain3Uid, domain3Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain3Uid);\n+\n+    logger.info(\"Delete domain4 custom resource in namespace {0}\", domain4Namespace);\n+    deleteDomainCustomResource(domain4Uid, domain4Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain4Uid);\n+\n+    logger.info(\"Delete domain1test custom resource in namespace {0}\", \"test-\" + domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid + \"test\", \"test-\" + domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \"test from test-\" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2test custom resource in namespace {0}\", \"test-\" + domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid + \"test\", \"test-\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \"test from test-\" + domain2Namespace);\n+\n+    logger.info(\"Delete weblogic custom resource in namespace {0}\", \"weblogic\" + domain2Namespace);\n+    deleteDomainCustomResource(\"weblogic\", \"weblogic\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource weblogic from weblogic\" + domain2Namespace);\n+\n+    deleteSecrets(\"default\");\n+    deleteSecrets(\"atest-\" +  domain1Namespace);;\n+    deleteNamespace(\"atest-\" + domain1Namespace);\n+    //delete operator\n+    uninstallOperator(opHelmParams1);\n+    uninstallOperator(opHelmParams2);\n+    uninstallOperator(opHelmParams4);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=RegExp,\n+   * and domainNamespaceRegExp=^test and domainNamespace= domain3NS.\n+   * Deploy two custom domain resources in the two different namespaces with names starting with test\n+   * and verify all server pods in the domains were created and ready.\n+   * Verify operator is able to manage these domains by scaling.\n+   * Try to start another domain with namespace domain3NS. Verify it is not started by operator\n+   * and value of domainNamespace is ignored for both specific namespace and default.\n+   * Upgrade helm chart to switch to using LabelSelector, start domain and verify operator can scale it.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using expression namespace management\")\n+  public void testNsManageByExp() {\n+    //create domain namespace\n+    String manageByExp1NS = \"test-\" +  domain1Namespace;\n+    String manageByExp2NS = \"test-\" +  domain2Namespace;\n+    String manageByExpDomain1Uid = \"test-\" + domain1Uid;\n+    String manageByExpDomain2Uid = \"test-\" + domain2Uid;\n+    String manageByLabelNS = \"weblogic1\" + domain1Namespace;\n+    String manageByLabelDomainUid = \"weblogic1\" + domain1Uid;\n+    String domain3NS = \"atest-\" +  domain1Namespace;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyMzU5NA=="}, "originalCommit": {"oid": "2f7e78cece4496d7be6e42ec72deec2f2648b5d3"}, "originalPosition": 260}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTUyNTU1OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOTozNzoxN1rOHcrBEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDozOToyNFrOHdKjVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyNjk2MA==", "bodyText": "change method name to createDomainCrAndVerifyDomainIsRunning or some such", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r499826960", "createdAt": "2020-10-05T19:37:17Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,824 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretList;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DEFAULT_EXTERNAL_REST_IDENTITY_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorImageName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.installOperator;\n+import static oracle.weblogic.kubernetes.actions.TestActions.listSecrets;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.checkHelmReleaseStatus;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorRestServiceRunning;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createExternalRestIdentitySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String opNamespace = null;\n+  private static String op2Namespace = null;\n+  private static String op3Namespace = null;\n+  private static String op4Namespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"managensdomain1\";\n+  private final String domain2Uid = \"managensdomain2\";\n+  private final String domain3Uid = \"managensdomain3\";\n+  private final String domain4Uid = \"managensdomain4\";\n+\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams opHelmParams1;\n+  private HelmParams opHelmParams2;\n+  private HelmParams opHelmParams4;\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // get a unique operator 2 namespace\n+    logger.info(\"Getting a unique namespace for operator 2\");\n+    assertNotNull(namespaces.get(5), \"Namespace list is null\");\n+    op2Namespace = namespaces.get(5);\n+\n+    // get a unique operator 3 namespace\n+    logger.info(\"Getting a unique namespace for operator 3\");\n+    assertNotNull(namespaces.get(6), \"Namespace list is null\");\n+    op3Namespace = namespaces.get(6);\n+\n+    // get a unique operator 4 namespace\n+    logger.info(\"Getting a unique namespace for operator 4\");\n+    assertNotNull(namespaces.get(7), \"Namespace list is null\");\n+    op4Namespace = namespaces.get(7);\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+    createSecrets(domain3Namespace);\n+    createSecrets(\"default\");\n+    labels1 = new java.util.HashMap<>();\n+    labels1.put(OPERATOR_RELEASE_NAME, OPERATOR_RELEASE_NAME);\n+    labels2 = new java.util.HashMap<>();\n+    labels2.put(OPERATOR_RELEASE_NAME + \"2\", OPERATOR_RELEASE_NAME);\n+    setLabelToNamespace(domain1Namespace, labels1);\n+    setLabelToNamespace(domain2Namespace, labels2);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+\n+    // Delete domain custom resource\n+    logger.info(\"Delete domain1 custom resource in namespace {0}\", domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid, domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \" from \" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2 custom resource in namespace {0}\", domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid, domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \" from \" + domain2Namespace);\n+\n+    logger.info(\"Delete domain3 custom resource in namespace {0}\", domain3Namespace);\n+    deleteDomainCustomResource(domain3Uid, domain3Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain3Uid);\n+\n+    logger.info(\"Delete domain4 custom resource in namespace {0}\", domain4Namespace);\n+    deleteDomainCustomResource(domain4Uid, domain4Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain4Uid);\n+\n+    logger.info(\"Delete domain1test custom resource in namespace {0}\", \"test-\" + domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid + \"test\", \"test-\" + domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \"test from test-\" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2test custom resource in namespace {0}\", \"test-\" + domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid + \"test\", \"test-\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \"test from test-\" + domain2Namespace);\n+\n+    logger.info(\"Delete weblogic custom resource in namespace {0}\", \"weblogic\" + domain2Namespace);\n+    deleteDomainCustomResource(\"weblogic\", \"weblogic\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource weblogic from weblogic\" + domain2Namespace);\n+\n+    deleteSecrets(\"default\");\n+    deleteSecrets(\"atest-\" +  domain1Namespace);;\n+    deleteNamespace(\"atest-\" + domain1Namespace);\n+    //delete operator\n+    uninstallOperator(opHelmParams1);\n+    uninstallOperator(opHelmParams2);\n+    uninstallOperator(opHelmParams4);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=RegExp,\n+   * and domainNamespaceRegExp=^test and domainNamespace= domain3NS.\n+   * Deploy two custom domain resources in the two different namespaces with names starting with test\n+   * and verify all server pods in the domains were created and ready.\n+   * Verify operator is able to manage these domains by scaling.\n+   * Try to start another domain with namespace domain3NS. Verify it is not started by operator\n+   * and value of domainNamespace is ignored for both specific namespace and default.\n+   * Upgrade helm chart to switch to using LabelSelector, start domain and verify operator can scale it.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using expression namespace management\")\n+  public void testNsManageByExp() {\n+    //create domain namespace\n+    String manageByExp1NS = \"test-\" +  domain1Namespace;\n+    String manageByExp2NS = \"test-\" +  domain2Namespace;\n+    String manageByExpDomain1Uid = \"test-\" + domain1Uid;\n+    String manageByExpDomain2Uid = \"test-\" + domain2Uid;\n+    String manageByLabelNS = \"weblogic1\" + domain1Namespace;\n+    String manageByLabelDomainUid = \"weblogic1\" + domain1Uid;\n+    String domain3NS = \"atest-\" +  domain1Namespace;\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp1NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp2NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(domain3NS));\n+    installAndVerifyOperatorCanManageDomainByNSRegExp(manageByExp1NS, manageByExp2NS,\n+        manageByExpDomain1Uid, manageByExpDomain2Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain will not start for specific NS and default\n+    checkPodNotCreated(domain3Uid + adminServerPrefix, domain3Uid, domain3Namespace);\n+    checkDomainNotStartedInDefaultNS(\"RegExp\");\n+    //verify that operator can't start domain if namespace does not start from test\n+    createSecrets(domain3NS);\n+    checkPodNotCreated(domain3Uid + adminServerPrefix, domain3Uid, domain3NS);\n+\n+    // install  operator sharing same domain\n+    checkSecondOperatorFailedToShareSameNS(manageByExp1NS);\n+    switchNSManagementToLabelSelectUsingUpgradeOperator(manageByLabelNS, manageByExp1NS,\n+        manageByLabelDomainUid, manageByExpDomain1Uid);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1.\n+   * Deploy a custom domain resource in the namespace with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   * Verify operator can't start another domain with namespace2 with label2.\n+   * Modify namespace2 to set label1, verify that operator can manage it.\n+   * Verify that domainNamespaces field will be ignored and domain will not start for namespaces:\n+   * (domain3Namespace) and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade operator to replace namespace management using RegExp namespaces.\n+   * Verify it can manage added domain and can't manage old domain by scaling .\n+   * Verify that upgrade helm fail if try to add domain, managed by other operator.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using label namespace management\")\n+  public void testNsManageByLabel() {\n+    String manageByLabelDomain1NS = domain1Namespace;\n+    String manageByLabelDomain2NS = domain2Namespace;\n+    String manageByExpDomainUid = \"weblogic2\" + domain2Namespace;\n+    String manageByExpDomainNS = \"weblogic2\" + domain2Namespace;\n+    String manageByLabelDomain1Uid = domain1Uid;\n+    String manageByLabelDomain2Uid = domain2Uid;\n+    installAndVerifyOperatorCanManageDomainByLabelSelector(manageByLabelDomain1NS, manageByLabelDomain2NS,\n+        manageByLabelDomain1Uid, manageByLabelDomain2Uid);\n+    addExtraDomainByAddingLabelToNS(labels1, manageByLabelDomain2NS, manageByLabelDomain2Uid);\n+    checkDomainNotStartedInDefaultNS(\"SelectLabel\");\n+    checkSecondOperatorFailedToShareSameNS(manageByLabelDomain1NS);\n+    switchNSManagementToRegExpUsingUpgradeOperator(manageByLabelDomain1NS, manageByExpDomainNS,\n+        manageByLabelDomain1Uid, manageByExpDomainUid);\n+    checkUpgradeFailedToAddNSManagedByAnotherOperator();\n+  }\n+\n+  /**\n+   * Create namespace ns1 with no label\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1 and enableRbac=false.\n+   * Add label1 to ns1 and verify domain can't be started\n+   * Call upgrade operator with reuse values to enable management for ns1\n+   * Deploy a custom domain resource in the namespace ns1 with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   */\n+  @Test\n+  @Order(3)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" with enableClusterRoleBinding\")\n+  public void testSwitchRbac() {\n+    String manageByLabelDomainNS = domain1Namespace + \"test4\";\n+    String manageByLabelDomainUid = domain1Uid + \"test4\";\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelDomainNS));\n+    opHelmParams4 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        op4Namespace, \"LabelSelector\",\n+        \"mytest4\", false);\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest4\", manageByLabelDomainUid);\n+    assertDoesNotThrow(() -> addLabelsToNamespace(manageByLabelDomainNS, labels));\n+    //verify domain can't be started because operator does not have permission to manage it\n+    createSecrets(manageByLabelDomainNS);\n+    checkPodNotCreated(manageByLabelDomainUid + adminServerPrefix, manageByLabelDomainUid, manageByLabelDomainNS);\n+    deleteDomainCrd(manageByLabelDomainNS, manageByLabelDomainUid);\n+    //upgrade operator and start domain\n+    int externalRestHttpsPort = getServiceNodePort(op4Namespace, \"external-weblogic-operator-svc\");\n+\n+    OperatorParams opParams = new OperatorParams()\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .helmParams(opHelmParams4);\n+\n+    assertTrue(upgradeAndVerifyOperator(op4Namespace, opParams));\n+    assertTrue(startDomain(manageByLabelDomainNS, manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(op4Namespace, manageByLabelDomainUid);\n+  }\n+\n+  private void checkUpgradeFailedToAddNSManagedByAnotherOperator() {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    // for ns names starting from weblogic, there one of domains\n+    //in namespace weblogic* is managed by operator2\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams1)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic\");\n+\n+    assertFalse(upgradeAndVerifyOperator(opNamespace, opParams), \"Upgrade does not fail when adding domain,\"\n+        + \" managed by other operator\");\n+  }\n+\n+  private void switchNSManagementToRegExpUsingUpgradeOperator(String manageByLabelNS,\n+                                                              String manageByExpNS,\n+                                                              String manageByLabelDomainUid,\n+                                                              String manageByExpDomainUid) {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    assertDoesNotThrow(() -> createNamespace(manageByExpNS));\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams1)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic2\");\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespace, opParams));\n+\n+    //verify domain is started in namespace with name starting with weblogic* and operator can scale it.\n+    createSecrets(manageByExpNS);\n+    assertTrue(startDomain(manageByExpNS,manageByExpDomainUid));\n+    checkOperatorCanScaleDomain(opNamespace,manageByExpDomainUid);\n+    //verify operator can't manage anymore domain running in the namespace with label\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespace, manageByLabelDomainUid, manageByLabelNS),\n+        \"Operator can still manage domain \"\n+        + manageByLabelDomainUid + \" in the namespace \" + manageByLabelNS);\n+  }\n+\n+  private void addExtraDomainByAddingLabelToNS(Map<String, String> labels, String domainNS, String domainUid) {\n+    deleteDomainCrd(domainNS, domainUid);\n+\n+    //switch to the label1, managed by operator and verify domain is started and can be managed by operator.\n+    setLabelToNamespace(domainNS, labels);\n+    assertTrue(startDomain(domainNS, domainUid));\n+    checkOperatorCanScaleDomain(opNamespace, domainUid);\n+  }\n+\n+  private void deleteDomainCrd(String domainNS, String domainUid) {\n+    //clean up domain resources in namespace and set namespace to label , managed by operator\n+    logger.info(\"deleting domain custom resource {0}\", domainUid);\n+    assertTrue(deleteDomainCustomResource(domainUid, domainNS));\n+\n+    // wait until domain was deleted\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be deleted in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNS,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainDoesNotExist(domainUid, DOMAIN_VERSION, domainNS));\n+  }\n+\n+  private void installAndVerifyOperatorCanManageDomainByLabelSelector(String manageByLabelDomain1NS,\n+                                                                      String manageByLabelDomain2NS,\n+                                                                      String manageByLabelDomain1Uid,\n+                                                                      String manageByLabelDomain2Uid) {\n+    // install and verify operator set to manage domains based on LabelSelector strategy,\n+    // domainNamespaces set to domain4 will be ignored\n+    opHelmParams1 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        opNamespace, \"LabelSelector\",\n+        OPERATOR_RELEASE_NAME, true, manageByLabelDomain1NS);\n+\n+    logger.info(\"Installing and verifying domain1\");\n+    createSecrets(manageByLabelDomain1NS);\n+    assertTrue(startDomain(manageByLabelDomain1NS, manageByLabelDomain1Uid),\n+        \"can't start or verify domain in namespace \" + manageByLabelDomain1NS);\n+\n+    checkOperatorCanScaleDomain(opNamespace, manageByLabelDomain1Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain4 will not start\n+    createSecrets(domain4Namespace);\n+    checkPodNotCreated(domain4Uid + adminServerPrefix, domain4Uid, domain4Namespace);\n+\n+    //verify that domain2 in namespace with no label2 will not start\n+    createSecrets(manageByLabelDomain2NS);\n+    checkPodNotCreated(manageByLabelDomain2Uid + adminServerPrefix, manageByLabelDomain2Uid, manageByLabelDomain2NS);\n+  }\n+\n+  private boolean isOperatorFailedToScaleDomain(String opNamespace, String domainUid, String domainNamespace) {\n+    try {\n+      //check operator can't manage domainNamespace by trying to scale domain\n+      int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+      String managedServerPodNamePrefix = domainUid + \"-managed-server\";\n+      String opServiceAccount = OPERATOR_RELEASE_NAME + \"-sa\";\n+      scaleAndVerifyCluster(\"cluster-1\", domainUid, domainNamespace,\n+          managedServerPodNamePrefix, 2, 1,\n+          true, externalRestHttpsPort, opNamespace, opServiceAccount,\n+          false, \"\", \"scaleDown\", 1, \"\", \"\", null, null);\n+      return false;\n+\n+    } catch (ConditionTimeoutException ex) {\n+      logger.info(\"Received expected error \" + ex.getMessage());\n+      return true;\n+    }\n+  }\n+\n+  private static void setLabelToNamespace(String domainNS, Map<String, String> labels) {\n+    //add label to domain namespace\n+    V1Namespace namespaceObject1 = assertDoesNotThrow(() -> Kubernetes.getNamespaceAsObject(domainNS));\n+    assertNotNull(namespaceObject1, \"Can't find namespace with name \" + domainNS);\n+    namespaceObject1.getMetadata().setLabels(labels);\n+    assertDoesNotThrow(() -> Kubernetes.replaceNamespace(namespaceObject1));\n+  }\n+\n+  private void checkOperatorCanScaleDomain(String opNamespace, String domainUid) {\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    assertTrue(scaleClusterWithRestApi(domainUid, clusterName, 3,\n+        externalRestHttpsPort, opNamespace, OPERATOR_RELEASE_NAME + \"-sa\"),\n+        \"Domain \" + domainUid + \" scaling operation failed\");\n+  }\n+\n+  private void checkSecondOperatorFailedToShareSameNS(String domainNamespace) {\n+    // try to install another operator sharing same domain namespace via different domainNsSelectionStrategy\n+    try {\n+      HelmParams opHelmParams3 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+          op3Namespace, \"List\",\n+          null, true, domainNamespace);\n+      assertNull(opHelmParams3, \"Operator helm chart sharing same NS with other operator did not fail\");\n+    } catch (org.opentest4j.AssertionFailedError ex) {\n+      //expecting to fail\n+      logger.info(\"Helm installation failed as expected \" + ex.getMessage());\n+    }\n+  }\n+\n+  private void checkDomainNotStartedInDefaultNS(String domainNsSelectionStrategy) {\n+    //verify operator can't start domain in the default namespace when domainNsSelectionStrategy not List\n+    // and selector does not match default\n+    checkPodNotCreated(\"defaultuid\" + adminServerPrefix, \"defaultuid\", \"default\");\n+\n+    logger.info(\"Delete defaultuid custom resource in namespace {0}\", \"default\");\n+    deleteDomainCustomResource(\"defaultuid\", \"default\");\n+    logger.info(\"Deleted Domain Custom Resource \" + \"defaultuid\");\n+  }\n+\n+  private void switchNSManagementToLabelSelectUsingUpgradeOperator(String manageByLabelNS,\n+                                                                   String manageByExpNS,\n+                                                                   String manageByLabelDomainUid,\n+                                                                   String manageByExpDomainUid) {\n+\n+    //upgrade operator to manage domains with Labeled namespaces\n+    int externalRestHttpsPort = getServiceNodePort(op2Namespace, \"external-weblogic-operator-svc\");\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelNS));\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest\", \"weblogic2\");\n+    setLabelToNamespace(manageByLabelNS, labels);\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams2)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceLabelSelector(\"mytest\")\n+        .domainNamespaceSelectionStrategy(\"LabelSelector\");\n+\n+    assertTrue(upgradeAndVerifyOperator(op2Namespace, opParams));\n+\n+    //verify domain is started\n+    createSecrets(manageByLabelNS);\n+    assertTrue(startDomain(manageByLabelNS,manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(op2Namespace,manageByLabelDomainUid);\n+    //check operator can't manage anymore manageByExpNS\n+    assertTrue(isOperatorFailedToScaleDomain(op2Namespace, manageByExpDomainUid,\n+        manageByExpNS), \"Operator can still manage domain \"\n+        + manageByExpNS + \" in the namespace \" + manageByExpNS);\n+  }\n+\n+  private void installAndVerifyOperatorCanManageDomainByNSRegExp(String manageByExp1NS,\n+                                                                 String manageByExp2NS,\n+                                                                 String manageByExpDomain1Uid,\n+                                                                 String manageByExpDomain2Uid) {\n+    // install and verify operator with domainNsSelectStrategy=RegExp to manage domains with namespaces names,\n+    // starting from test\n+    opHelmParams2 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        op2Namespace, \"RegExp\", \"^test\", true, domain3Namespace);\n+\n+    logger.info(\"Installing and verifying domain1\");\n+    createSecrets(manageByExp1NS);\n+    assertTrue(startDomain(manageByExp1NS, manageByExpDomain1Uid),\n+        \"can't start or verify domain in namespace \" + manageByExp1NS);\n+    checkOperatorCanScaleDomain(op2Namespace, manageByExpDomain1Uid);\n+\n+    logger.info(\"Installing and verifying domain2\");\n+    createSecrets(manageByExp2NS);\n+    assertTrue(startDomain(manageByExp2NS, manageByExpDomain2Uid),\n+        \"operator can start or verify domain in namespace \" + manageByExp2NS);\n+    checkOperatorCanScaleDomain(op2Namespace, manageByExpDomain2Uid);\n+  }\n+\n+\n+  private boolean startDomain(String domainNamespace, String domainUid) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f7e78cece4496d7be6e42ec72deec2f2648b5d3"}, "originalPosition": 565}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM0MzYzOQ==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r500343639", "createdAt": "2020-10-06T14:39:24Z", "author": {"login": "marinakog"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,824 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretList;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DEFAULT_EXTERNAL_REST_IDENTITY_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorImageName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.installOperator;\n+import static oracle.weblogic.kubernetes.actions.TestActions.listSecrets;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.checkHelmReleaseStatus;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorRestServiceRunning;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createExternalRestIdentitySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String opNamespace = null;\n+  private static String op2Namespace = null;\n+  private static String op3Namespace = null;\n+  private static String op4Namespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"managensdomain1\";\n+  private final String domain2Uid = \"managensdomain2\";\n+  private final String domain3Uid = \"managensdomain3\";\n+  private final String domain4Uid = \"managensdomain4\";\n+\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams opHelmParams1;\n+  private HelmParams opHelmParams2;\n+  private HelmParams opHelmParams4;\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // get a unique operator 2 namespace\n+    logger.info(\"Getting a unique namespace for operator 2\");\n+    assertNotNull(namespaces.get(5), \"Namespace list is null\");\n+    op2Namespace = namespaces.get(5);\n+\n+    // get a unique operator 3 namespace\n+    logger.info(\"Getting a unique namespace for operator 3\");\n+    assertNotNull(namespaces.get(6), \"Namespace list is null\");\n+    op3Namespace = namespaces.get(6);\n+\n+    // get a unique operator 4 namespace\n+    logger.info(\"Getting a unique namespace for operator 4\");\n+    assertNotNull(namespaces.get(7), \"Namespace list is null\");\n+    op4Namespace = namespaces.get(7);\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+    createSecrets(domain3Namespace);\n+    createSecrets(\"default\");\n+    labels1 = new java.util.HashMap<>();\n+    labels1.put(OPERATOR_RELEASE_NAME, OPERATOR_RELEASE_NAME);\n+    labels2 = new java.util.HashMap<>();\n+    labels2.put(OPERATOR_RELEASE_NAME + \"2\", OPERATOR_RELEASE_NAME);\n+    setLabelToNamespace(domain1Namespace, labels1);\n+    setLabelToNamespace(domain2Namespace, labels2);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+\n+    // Delete domain custom resource\n+    logger.info(\"Delete domain1 custom resource in namespace {0}\", domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid, domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \" from \" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2 custom resource in namespace {0}\", domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid, domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \" from \" + domain2Namespace);\n+\n+    logger.info(\"Delete domain3 custom resource in namespace {0}\", domain3Namespace);\n+    deleteDomainCustomResource(domain3Uid, domain3Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain3Uid);\n+\n+    logger.info(\"Delete domain4 custom resource in namespace {0}\", domain4Namespace);\n+    deleteDomainCustomResource(domain4Uid, domain4Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain4Uid);\n+\n+    logger.info(\"Delete domain1test custom resource in namespace {0}\", \"test-\" + domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid + \"test\", \"test-\" + domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \"test from test-\" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2test custom resource in namespace {0}\", \"test-\" + domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid + \"test\", \"test-\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \"test from test-\" + domain2Namespace);\n+\n+    logger.info(\"Delete weblogic custom resource in namespace {0}\", \"weblogic\" + domain2Namespace);\n+    deleteDomainCustomResource(\"weblogic\", \"weblogic\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource weblogic from weblogic\" + domain2Namespace);\n+\n+    deleteSecrets(\"default\");\n+    deleteSecrets(\"atest-\" +  domain1Namespace);;\n+    deleteNamespace(\"atest-\" + domain1Namespace);\n+    //delete operator\n+    uninstallOperator(opHelmParams1);\n+    uninstallOperator(opHelmParams2);\n+    uninstallOperator(opHelmParams4);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=RegExp,\n+   * and domainNamespaceRegExp=^test and domainNamespace= domain3NS.\n+   * Deploy two custom domain resources in the two different namespaces with names starting with test\n+   * and verify all server pods in the domains were created and ready.\n+   * Verify operator is able to manage these domains by scaling.\n+   * Try to start another domain with namespace domain3NS. Verify it is not started by operator\n+   * and value of domainNamespace is ignored for both specific namespace and default.\n+   * Upgrade helm chart to switch to using LabelSelector, start domain and verify operator can scale it.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using expression namespace management\")\n+  public void testNsManageByExp() {\n+    //create domain namespace\n+    String manageByExp1NS = \"test-\" +  domain1Namespace;\n+    String manageByExp2NS = \"test-\" +  domain2Namespace;\n+    String manageByExpDomain1Uid = \"test-\" + domain1Uid;\n+    String manageByExpDomain2Uid = \"test-\" + domain2Uid;\n+    String manageByLabelNS = \"weblogic1\" + domain1Namespace;\n+    String manageByLabelDomainUid = \"weblogic1\" + domain1Uid;\n+    String domain3NS = \"atest-\" +  domain1Namespace;\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp1NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp2NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(domain3NS));\n+    installAndVerifyOperatorCanManageDomainByNSRegExp(manageByExp1NS, manageByExp2NS,\n+        manageByExpDomain1Uid, manageByExpDomain2Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain will not start for specific NS and default\n+    checkPodNotCreated(domain3Uid + adminServerPrefix, domain3Uid, domain3Namespace);\n+    checkDomainNotStartedInDefaultNS(\"RegExp\");\n+    //verify that operator can't start domain if namespace does not start from test\n+    createSecrets(domain3NS);\n+    checkPodNotCreated(domain3Uid + adminServerPrefix, domain3Uid, domain3NS);\n+\n+    // install  operator sharing same domain\n+    checkSecondOperatorFailedToShareSameNS(manageByExp1NS);\n+    switchNSManagementToLabelSelectUsingUpgradeOperator(manageByLabelNS, manageByExp1NS,\n+        manageByLabelDomainUid, manageByExpDomain1Uid);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1.\n+   * Deploy a custom domain resource in the namespace with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   * Verify operator can't start another domain with namespace2 with label2.\n+   * Modify namespace2 to set label1, verify that operator can manage it.\n+   * Verify that domainNamespaces field will be ignored and domain will not start for namespaces:\n+   * (domain3Namespace) and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade operator to replace namespace management using RegExp namespaces.\n+   * Verify it can manage added domain and can't manage old domain by scaling .\n+   * Verify that upgrade helm fail if try to add domain, managed by other operator.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using label namespace management\")\n+  public void testNsManageByLabel() {\n+    String manageByLabelDomain1NS = domain1Namespace;\n+    String manageByLabelDomain2NS = domain2Namespace;\n+    String manageByExpDomainUid = \"weblogic2\" + domain2Namespace;\n+    String manageByExpDomainNS = \"weblogic2\" + domain2Namespace;\n+    String manageByLabelDomain1Uid = domain1Uid;\n+    String manageByLabelDomain2Uid = domain2Uid;\n+    installAndVerifyOperatorCanManageDomainByLabelSelector(manageByLabelDomain1NS, manageByLabelDomain2NS,\n+        manageByLabelDomain1Uid, manageByLabelDomain2Uid);\n+    addExtraDomainByAddingLabelToNS(labels1, manageByLabelDomain2NS, manageByLabelDomain2Uid);\n+    checkDomainNotStartedInDefaultNS(\"SelectLabel\");\n+    checkSecondOperatorFailedToShareSameNS(manageByLabelDomain1NS);\n+    switchNSManagementToRegExpUsingUpgradeOperator(manageByLabelDomain1NS, manageByExpDomainNS,\n+        manageByLabelDomain1Uid, manageByExpDomainUid);\n+    checkUpgradeFailedToAddNSManagedByAnotherOperator();\n+  }\n+\n+  /**\n+   * Create namespace ns1 with no label\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1 and enableRbac=false.\n+   * Add label1 to ns1 and verify domain can't be started\n+   * Call upgrade operator with reuse values to enable management for ns1\n+   * Deploy a custom domain resource in the namespace ns1 with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   */\n+  @Test\n+  @Order(3)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" with enableClusterRoleBinding\")\n+  public void testSwitchRbac() {\n+    String manageByLabelDomainNS = domain1Namespace + \"test4\";\n+    String manageByLabelDomainUid = domain1Uid + \"test4\";\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelDomainNS));\n+    opHelmParams4 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        op4Namespace, \"LabelSelector\",\n+        \"mytest4\", false);\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest4\", manageByLabelDomainUid);\n+    assertDoesNotThrow(() -> addLabelsToNamespace(manageByLabelDomainNS, labels));\n+    //verify domain can't be started because operator does not have permission to manage it\n+    createSecrets(manageByLabelDomainNS);\n+    checkPodNotCreated(manageByLabelDomainUid + adminServerPrefix, manageByLabelDomainUid, manageByLabelDomainNS);\n+    deleteDomainCrd(manageByLabelDomainNS, manageByLabelDomainUid);\n+    //upgrade operator and start domain\n+    int externalRestHttpsPort = getServiceNodePort(op4Namespace, \"external-weblogic-operator-svc\");\n+\n+    OperatorParams opParams = new OperatorParams()\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .helmParams(opHelmParams4);\n+\n+    assertTrue(upgradeAndVerifyOperator(op4Namespace, opParams));\n+    assertTrue(startDomain(manageByLabelDomainNS, manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(op4Namespace, manageByLabelDomainUid);\n+  }\n+\n+  private void checkUpgradeFailedToAddNSManagedByAnotherOperator() {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    // for ns names starting from weblogic, there one of domains\n+    //in namespace weblogic* is managed by operator2\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams1)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic\");\n+\n+    assertFalse(upgradeAndVerifyOperator(opNamespace, opParams), \"Upgrade does not fail when adding domain,\"\n+        + \" managed by other operator\");\n+  }\n+\n+  private void switchNSManagementToRegExpUsingUpgradeOperator(String manageByLabelNS,\n+                                                              String manageByExpNS,\n+                                                              String manageByLabelDomainUid,\n+                                                              String manageByExpDomainUid) {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    assertDoesNotThrow(() -> createNamespace(manageByExpNS));\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams1)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic2\");\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespace, opParams));\n+\n+    //verify domain is started in namespace with name starting with weblogic* and operator can scale it.\n+    createSecrets(manageByExpNS);\n+    assertTrue(startDomain(manageByExpNS,manageByExpDomainUid));\n+    checkOperatorCanScaleDomain(opNamespace,manageByExpDomainUid);\n+    //verify operator can't manage anymore domain running in the namespace with label\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespace, manageByLabelDomainUid, manageByLabelNS),\n+        \"Operator can still manage domain \"\n+        + manageByLabelDomainUid + \" in the namespace \" + manageByLabelNS);\n+  }\n+\n+  private void addExtraDomainByAddingLabelToNS(Map<String, String> labels, String domainNS, String domainUid) {\n+    deleteDomainCrd(domainNS, domainUid);\n+\n+    //switch to the label1, managed by operator and verify domain is started and can be managed by operator.\n+    setLabelToNamespace(domainNS, labels);\n+    assertTrue(startDomain(domainNS, domainUid));\n+    checkOperatorCanScaleDomain(opNamespace, domainUid);\n+  }\n+\n+  private void deleteDomainCrd(String domainNS, String domainUid) {\n+    //clean up domain resources in namespace and set namespace to label , managed by operator\n+    logger.info(\"deleting domain custom resource {0}\", domainUid);\n+    assertTrue(deleteDomainCustomResource(domainUid, domainNS));\n+\n+    // wait until domain was deleted\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be deleted in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNS,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainDoesNotExist(domainUid, DOMAIN_VERSION, domainNS));\n+  }\n+\n+  private void installAndVerifyOperatorCanManageDomainByLabelSelector(String manageByLabelDomain1NS,\n+                                                                      String manageByLabelDomain2NS,\n+                                                                      String manageByLabelDomain1Uid,\n+                                                                      String manageByLabelDomain2Uid) {\n+    // install and verify operator set to manage domains based on LabelSelector strategy,\n+    // domainNamespaces set to domain4 will be ignored\n+    opHelmParams1 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        opNamespace, \"LabelSelector\",\n+        OPERATOR_RELEASE_NAME, true, manageByLabelDomain1NS);\n+\n+    logger.info(\"Installing and verifying domain1\");\n+    createSecrets(manageByLabelDomain1NS);\n+    assertTrue(startDomain(manageByLabelDomain1NS, manageByLabelDomain1Uid),\n+        \"can't start or verify domain in namespace \" + manageByLabelDomain1NS);\n+\n+    checkOperatorCanScaleDomain(opNamespace, manageByLabelDomain1Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain4 will not start\n+    createSecrets(domain4Namespace);\n+    checkPodNotCreated(domain4Uid + adminServerPrefix, domain4Uid, domain4Namespace);\n+\n+    //verify that domain2 in namespace with no label2 will not start\n+    createSecrets(manageByLabelDomain2NS);\n+    checkPodNotCreated(manageByLabelDomain2Uid + adminServerPrefix, manageByLabelDomain2Uid, manageByLabelDomain2NS);\n+  }\n+\n+  private boolean isOperatorFailedToScaleDomain(String opNamespace, String domainUid, String domainNamespace) {\n+    try {\n+      //check operator can't manage domainNamespace by trying to scale domain\n+      int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+      String managedServerPodNamePrefix = domainUid + \"-managed-server\";\n+      String opServiceAccount = OPERATOR_RELEASE_NAME + \"-sa\";\n+      scaleAndVerifyCluster(\"cluster-1\", domainUid, domainNamespace,\n+          managedServerPodNamePrefix, 2, 1,\n+          true, externalRestHttpsPort, opNamespace, opServiceAccount,\n+          false, \"\", \"scaleDown\", 1, \"\", \"\", null, null);\n+      return false;\n+\n+    } catch (ConditionTimeoutException ex) {\n+      logger.info(\"Received expected error \" + ex.getMessage());\n+      return true;\n+    }\n+  }\n+\n+  private static void setLabelToNamespace(String domainNS, Map<String, String> labels) {\n+    //add label to domain namespace\n+    V1Namespace namespaceObject1 = assertDoesNotThrow(() -> Kubernetes.getNamespaceAsObject(domainNS));\n+    assertNotNull(namespaceObject1, \"Can't find namespace with name \" + domainNS);\n+    namespaceObject1.getMetadata().setLabels(labels);\n+    assertDoesNotThrow(() -> Kubernetes.replaceNamespace(namespaceObject1));\n+  }\n+\n+  private void checkOperatorCanScaleDomain(String opNamespace, String domainUid) {\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    assertTrue(scaleClusterWithRestApi(domainUid, clusterName, 3,\n+        externalRestHttpsPort, opNamespace, OPERATOR_RELEASE_NAME + \"-sa\"),\n+        \"Domain \" + domainUid + \" scaling operation failed\");\n+  }\n+\n+  private void checkSecondOperatorFailedToShareSameNS(String domainNamespace) {\n+    // try to install another operator sharing same domain namespace via different domainNsSelectionStrategy\n+    try {\n+      HelmParams opHelmParams3 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+          op3Namespace, \"List\",\n+          null, true, domainNamespace);\n+      assertNull(opHelmParams3, \"Operator helm chart sharing same NS with other operator did not fail\");\n+    } catch (org.opentest4j.AssertionFailedError ex) {\n+      //expecting to fail\n+      logger.info(\"Helm installation failed as expected \" + ex.getMessage());\n+    }\n+  }\n+\n+  private void checkDomainNotStartedInDefaultNS(String domainNsSelectionStrategy) {\n+    //verify operator can't start domain in the default namespace when domainNsSelectionStrategy not List\n+    // and selector does not match default\n+    checkPodNotCreated(\"defaultuid\" + adminServerPrefix, \"defaultuid\", \"default\");\n+\n+    logger.info(\"Delete defaultuid custom resource in namespace {0}\", \"default\");\n+    deleteDomainCustomResource(\"defaultuid\", \"default\");\n+    logger.info(\"Deleted Domain Custom Resource \" + \"defaultuid\");\n+  }\n+\n+  private void switchNSManagementToLabelSelectUsingUpgradeOperator(String manageByLabelNS,\n+                                                                   String manageByExpNS,\n+                                                                   String manageByLabelDomainUid,\n+                                                                   String manageByExpDomainUid) {\n+\n+    //upgrade operator to manage domains with Labeled namespaces\n+    int externalRestHttpsPort = getServiceNodePort(op2Namespace, \"external-weblogic-operator-svc\");\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelNS));\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest\", \"weblogic2\");\n+    setLabelToNamespace(manageByLabelNS, labels);\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams2)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceLabelSelector(\"mytest\")\n+        .domainNamespaceSelectionStrategy(\"LabelSelector\");\n+\n+    assertTrue(upgradeAndVerifyOperator(op2Namespace, opParams));\n+\n+    //verify domain is started\n+    createSecrets(manageByLabelNS);\n+    assertTrue(startDomain(manageByLabelNS,manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(op2Namespace,manageByLabelDomainUid);\n+    //check operator can't manage anymore manageByExpNS\n+    assertTrue(isOperatorFailedToScaleDomain(op2Namespace, manageByExpDomainUid,\n+        manageByExpNS), \"Operator can still manage domain \"\n+        + manageByExpNS + \" in the namespace \" + manageByExpNS);\n+  }\n+\n+  private void installAndVerifyOperatorCanManageDomainByNSRegExp(String manageByExp1NS,\n+                                                                 String manageByExp2NS,\n+                                                                 String manageByExpDomain1Uid,\n+                                                                 String manageByExpDomain2Uid) {\n+    // install and verify operator with domainNsSelectStrategy=RegExp to manage domains with namespaces names,\n+    // starting from test\n+    opHelmParams2 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        op2Namespace, \"RegExp\", \"^test\", true, domain3Namespace);\n+\n+    logger.info(\"Installing and verifying domain1\");\n+    createSecrets(manageByExp1NS);\n+    assertTrue(startDomain(manageByExp1NS, manageByExpDomain1Uid),\n+        \"can't start or verify domain in namespace \" + manageByExp1NS);\n+    checkOperatorCanScaleDomain(op2Namespace, manageByExpDomain1Uid);\n+\n+    logger.info(\"Installing and verifying domain2\");\n+    createSecrets(manageByExp2NS);\n+    assertTrue(startDomain(manageByExp2NS, manageByExpDomain2Uid),\n+        \"operator can start or verify domain in namespace \" + manageByExp2NS);\n+    checkOperatorCanScaleDomain(op2Namespace, manageByExpDomain2Uid);\n+  }\n+\n+\n+  private boolean startDomain(String domainNamespace, String domainUid) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyNjk2MA=="}, "originalCommit": {"oid": "2f7e78cece4496d7be6e42ec72deec2f2648b5d3"}, "originalPosition": 565}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTUyNzIyOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOTozNzo1M1rOHcrCJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDozOToyOVrOHdKjtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyNzIzOQ==", "bodyText": "is catch really needed here?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r499827239", "createdAt": "2020-10-05T19:37:53Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,824 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretList;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DEFAULT_EXTERNAL_REST_IDENTITY_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorImageName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.installOperator;\n+import static oracle.weblogic.kubernetes.actions.TestActions.listSecrets;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.checkHelmReleaseStatus;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorRestServiceRunning;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createExternalRestIdentitySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String opNamespace = null;\n+  private static String op2Namespace = null;\n+  private static String op3Namespace = null;\n+  private static String op4Namespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"managensdomain1\";\n+  private final String domain2Uid = \"managensdomain2\";\n+  private final String domain3Uid = \"managensdomain3\";\n+  private final String domain4Uid = \"managensdomain4\";\n+\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams opHelmParams1;\n+  private HelmParams opHelmParams2;\n+  private HelmParams opHelmParams4;\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // get a unique operator 2 namespace\n+    logger.info(\"Getting a unique namespace for operator 2\");\n+    assertNotNull(namespaces.get(5), \"Namespace list is null\");\n+    op2Namespace = namespaces.get(5);\n+\n+    // get a unique operator 3 namespace\n+    logger.info(\"Getting a unique namespace for operator 3\");\n+    assertNotNull(namespaces.get(6), \"Namespace list is null\");\n+    op3Namespace = namespaces.get(6);\n+\n+    // get a unique operator 4 namespace\n+    logger.info(\"Getting a unique namespace for operator 4\");\n+    assertNotNull(namespaces.get(7), \"Namespace list is null\");\n+    op4Namespace = namespaces.get(7);\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+    createSecrets(domain3Namespace);\n+    createSecrets(\"default\");\n+    labels1 = new java.util.HashMap<>();\n+    labels1.put(OPERATOR_RELEASE_NAME, OPERATOR_RELEASE_NAME);\n+    labels2 = new java.util.HashMap<>();\n+    labels2.put(OPERATOR_RELEASE_NAME + \"2\", OPERATOR_RELEASE_NAME);\n+    setLabelToNamespace(domain1Namespace, labels1);\n+    setLabelToNamespace(domain2Namespace, labels2);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+\n+    // Delete domain custom resource\n+    logger.info(\"Delete domain1 custom resource in namespace {0}\", domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid, domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \" from \" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2 custom resource in namespace {0}\", domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid, domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \" from \" + domain2Namespace);\n+\n+    logger.info(\"Delete domain3 custom resource in namespace {0}\", domain3Namespace);\n+    deleteDomainCustomResource(domain3Uid, domain3Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain3Uid);\n+\n+    logger.info(\"Delete domain4 custom resource in namespace {0}\", domain4Namespace);\n+    deleteDomainCustomResource(domain4Uid, domain4Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain4Uid);\n+\n+    logger.info(\"Delete domain1test custom resource in namespace {0}\", \"test-\" + domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid + \"test\", \"test-\" + domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \"test from test-\" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2test custom resource in namespace {0}\", \"test-\" + domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid + \"test\", \"test-\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \"test from test-\" + domain2Namespace);\n+\n+    logger.info(\"Delete weblogic custom resource in namespace {0}\", \"weblogic\" + domain2Namespace);\n+    deleteDomainCustomResource(\"weblogic\", \"weblogic\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource weblogic from weblogic\" + domain2Namespace);\n+\n+    deleteSecrets(\"default\");\n+    deleteSecrets(\"atest-\" +  domain1Namespace);;\n+    deleteNamespace(\"atest-\" + domain1Namespace);\n+    //delete operator\n+    uninstallOperator(opHelmParams1);\n+    uninstallOperator(opHelmParams2);\n+    uninstallOperator(opHelmParams4);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=RegExp,\n+   * and domainNamespaceRegExp=^test and domainNamespace= domain3NS.\n+   * Deploy two custom domain resources in the two different namespaces with names starting with test\n+   * and verify all server pods in the domains were created and ready.\n+   * Verify operator is able to manage these domains by scaling.\n+   * Try to start another domain with namespace domain3NS. Verify it is not started by operator\n+   * and value of domainNamespace is ignored for both specific namespace and default.\n+   * Upgrade helm chart to switch to using LabelSelector, start domain and verify operator can scale it.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using expression namespace management\")\n+  public void testNsManageByExp() {\n+    //create domain namespace\n+    String manageByExp1NS = \"test-\" +  domain1Namespace;\n+    String manageByExp2NS = \"test-\" +  domain2Namespace;\n+    String manageByExpDomain1Uid = \"test-\" + domain1Uid;\n+    String manageByExpDomain2Uid = \"test-\" + domain2Uid;\n+    String manageByLabelNS = \"weblogic1\" + domain1Namespace;\n+    String manageByLabelDomainUid = \"weblogic1\" + domain1Uid;\n+    String domain3NS = \"atest-\" +  domain1Namespace;\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp1NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp2NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(domain3NS));\n+    installAndVerifyOperatorCanManageDomainByNSRegExp(manageByExp1NS, manageByExp2NS,\n+        manageByExpDomain1Uid, manageByExpDomain2Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain will not start for specific NS and default\n+    checkPodNotCreated(domain3Uid + adminServerPrefix, domain3Uid, domain3Namespace);\n+    checkDomainNotStartedInDefaultNS(\"RegExp\");\n+    //verify that operator can't start domain if namespace does not start from test\n+    createSecrets(domain3NS);\n+    checkPodNotCreated(domain3Uid + adminServerPrefix, domain3Uid, domain3NS);\n+\n+    // install  operator sharing same domain\n+    checkSecondOperatorFailedToShareSameNS(manageByExp1NS);\n+    switchNSManagementToLabelSelectUsingUpgradeOperator(manageByLabelNS, manageByExp1NS,\n+        manageByLabelDomainUid, manageByExpDomain1Uid);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1.\n+   * Deploy a custom domain resource in the namespace with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   * Verify operator can't start another domain with namespace2 with label2.\n+   * Modify namespace2 to set label1, verify that operator can manage it.\n+   * Verify that domainNamespaces field will be ignored and domain will not start for namespaces:\n+   * (domain3Namespace) and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade operator to replace namespace management using RegExp namespaces.\n+   * Verify it can manage added domain and can't manage old domain by scaling .\n+   * Verify that upgrade helm fail if try to add domain, managed by other operator.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using label namespace management\")\n+  public void testNsManageByLabel() {\n+    String manageByLabelDomain1NS = domain1Namespace;\n+    String manageByLabelDomain2NS = domain2Namespace;\n+    String manageByExpDomainUid = \"weblogic2\" + domain2Namespace;\n+    String manageByExpDomainNS = \"weblogic2\" + domain2Namespace;\n+    String manageByLabelDomain1Uid = domain1Uid;\n+    String manageByLabelDomain2Uid = domain2Uid;\n+    installAndVerifyOperatorCanManageDomainByLabelSelector(manageByLabelDomain1NS, manageByLabelDomain2NS,\n+        manageByLabelDomain1Uid, manageByLabelDomain2Uid);\n+    addExtraDomainByAddingLabelToNS(labels1, manageByLabelDomain2NS, manageByLabelDomain2Uid);\n+    checkDomainNotStartedInDefaultNS(\"SelectLabel\");\n+    checkSecondOperatorFailedToShareSameNS(manageByLabelDomain1NS);\n+    switchNSManagementToRegExpUsingUpgradeOperator(manageByLabelDomain1NS, manageByExpDomainNS,\n+        manageByLabelDomain1Uid, manageByExpDomainUid);\n+    checkUpgradeFailedToAddNSManagedByAnotherOperator();\n+  }\n+\n+  /**\n+   * Create namespace ns1 with no label\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1 and enableRbac=false.\n+   * Add label1 to ns1 and verify domain can't be started\n+   * Call upgrade operator with reuse values to enable management for ns1\n+   * Deploy a custom domain resource in the namespace ns1 with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   */\n+  @Test\n+  @Order(3)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" with enableClusterRoleBinding\")\n+  public void testSwitchRbac() {\n+    String manageByLabelDomainNS = domain1Namespace + \"test4\";\n+    String manageByLabelDomainUid = domain1Uid + \"test4\";\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelDomainNS));\n+    opHelmParams4 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        op4Namespace, \"LabelSelector\",\n+        \"mytest4\", false);\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest4\", manageByLabelDomainUid);\n+    assertDoesNotThrow(() -> addLabelsToNamespace(manageByLabelDomainNS, labels));\n+    //verify domain can't be started because operator does not have permission to manage it\n+    createSecrets(manageByLabelDomainNS);\n+    checkPodNotCreated(manageByLabelDomainUid + adminServerPrefix, manageByLabelDomainUid, manageByLabelDomainNS);\n+    deleteDomainCrd(manageByLabelDomainNS, manageByLabelDomainUid);\n+    //upgrade operator and start domain\n+    int externalRestHttpsPort = getServiceNodePort(op4Namespace, \"external-weblogic-operator-svc\");\n+\n+    OperatorParams opParams = new OperatorParams()\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .helmParams(opHelmParams4);\n+\n+    assertTrue(upgradeAndVerifyOperator(op4Namespace, opParams));\n+    assertTrue(startDomain(manageByLabelDomainNS, manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(op4Namespace, manageByLabelDomainUid);\n+  }\n+\n+  private void checkUpgradeFailedToAddNSManagedByAnotherOperator() {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    // for ns names starting from weblogic, there one of domains\n+    //in namespace weblogic* is managed by operator2\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams1)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic\");\n+\n+    assertFalse(upgradeAndVerifyOperator(opNamespace, opParams), \"Upgrade does not fail when adding domain,\"\n+        + \" managed by other operator\");\n+  }\n+\n+  private void switchNSManagementToRegExpUsingUpgradeOperator(String manageByLabelNS,\n+                                                              String manageByExpNS,\n+                                                              String manageByLabelDomainUid,\n+                                                              String manageByExpDomainUid) {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    assertDoesNotThrow(() -> createNamespace(manageByExpNS));\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams1)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic2\");\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespace, opParams));\n+\n+    //verify domain is started in namespace with name starting with weblogic* and operator can scale it.\n+    createSecrets(manageByExpNS);\n+    assertTrue(startDomain(manageByExpNS,manageByExpDomainUid));\n+    checkOperatorCanScaleDomain(opNamespace,manageByExpDomainUid);\n+    //verify operator can't manage anymore domain running in the namespace with label\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespace, manageByLabelDomainUid, manageByLabelNS),\n+        \"Operator can still manage domain \"\n+        + manageByLabelDomainUid + \" in the namespace \" + manageByLabelNS);\n+  }\n+\n+  private void addExtraDomainByAddingLabelToNS(Map<String, String> labels, String domainNS, String domainUid) {\n+    deleteDomainCrd(domainNS, domainUid);\n+\n+    //switch to the label1, managed by operator and verify domain is started and can be managed by operator.\n+    setLabelToNamespace(domainNS, labels);\n+    assertTrue(startDomain(domainNS, domainUid));\n+    checkOperatorCanScaleDomain(opNamespace, domainUid);\n+  }\n+\n+  private void deleteDomainCrd(String domainNS, String domainUid) {\n+    //clean up domain resources in namespace and set namespace to label , managed by operator\n+    logger.info(\"deleting domain custom resource {0}\", domainUid);\n+    assertTrue(deleteDomainCustomResource(domainUid, domainNS));\n+\n+    // wait until domain was deleted\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be deleted in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNS,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainDoesNotExist(domainUid, DOMAIN_VERSION, domainNS));\n+  }\n+\n+  private void installAndVerifyOperatorCanManageDomainByLabelSelector(String manageByLabelDomain1NS,\n+                                                                      String manageByLabelDomain2NS,\n+                                                                      String manageByLabelDomain1Uid,\n+                                                                      String manageByLabelDomain2Uid) {\n+    // install and verify operator set to manage domains based on LabelSelector strategy,\n+    // domainNamespaces set to domain4 will be ignored\n+    opHelmParams1 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        opNamespace, \"LabelSelector\",\n+        OPERATOR_RELEASE_NAME, true, manageByLabelDomain1NS);\n+\n+    logger.info(\"Installing and verifying domain1\");\n+    createSecrets(manageByLabelDomain1NS);\n+    assertTrue(startDomain(manageByLabelDomain1NS, manageByLabelDomain1Uid),\n+        \"can't start or verify domain in namespace \" + manageByLabelDomain1NS);\n+\n+    checkOperatorCanScaleDomain(opNamespace, manageByLabelDomain1Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain4 will not start\n+    createSecrets(domain4Namespace);\n+    checkPodNotCreated(domain4Uid + adminServerPrefix, domain4Uid, domain4Namespace);\n+\n+    //verify that domain2 in namespace with no label2 will not start\n+    createSecrets(manageByLabelDomain2NS);\n+    checkPodNotCreated(manageByLabelDomain2Uid + adminServerPrefix, manageByLabelDomain2Uid, manageByLabelDomain2NS);\n+  }\n+\n+  private boolean isOperatorFailedToScaleDomain(String opNamespace, String domainUid, String domainNamespace) {\n+    try {\n+      //check operator can't manage domainNamespace by trying to scale domain\n+      int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+      String managedServerPodNamePrefix = domainUid + \"-managed-server\";\n+      String opServiceAccount = OPERATOR_RELEASE_NAME + \"-sa\";\n+      scaleAndVerifyCluster(\"cluster-1\", domainUid, domainNamespace,\n+          managedServerPodNamePrefix, 2, 1,\n+          true, externalRestHttpsPort, opNamespace, opServiceAccount,\n+          false, \"\", \"scaleDown\", 1, \"\", \"\", null, null);\n+      return false;\n+\n+    } catch (ConditionTimeoutException ex) {\n+      logger.info(\"Received expected error \" + ex.getMessage());\n+      return true;\n+    }\n+  }\n+\n+  private static void setLabelToNamespace(String domainNS, Map<String, String> labels) {\n+    //add label to domain namespace\n+    V1Namespace namespaceObject1 = assertDoesNotThrow(() -> Kubernetes.getNamespaceAsObject(domainNS));\n+    assertNotNull(namespaceObject1, \"Can't find namespace with name \" + domainNS);\n+    namespaceObject1.getMetadata().setLabels(labels);\n+    assertDoesNotThrow(() -> Kubernetes.replaceNamespace(namespaceObject1));\n+  }\n+\n+  private void checkOperatorCanScaleDomain(String opNamespace, String domainUid) {\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    assertTrue(scaleClusterWithRestApi(domainUid, clusterName, 3,\n+        externalRestHttpsPort, opNamespace, OPERATOR_RELEASE_NAME + \"-sa\"),\n+        \"Domain \" + domainUid + \" scaling operation failed\");\n+  }\n+\n+  private void checkSecondOperatorFailedToShareSameNS(String domainNamespace) {\n+    // try to install another operator sharing same domain namespace via different domainNsSelectionStrategy\n+    try {\n+      HelmParams opHelmParams3 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+          op3Namespace, \"List\",\n+          null, true, domainNamespace);\n+      assertNull(opHelmParams3, \"Operator helm chart sharing same NS with other operator did not fail\");\n+    } catch (org.opentest4j.AssertionFailedError ex) {\n+      //expecting to fail\n+      logger.info(\"Helm installation failed as expected \" + ex.getMessage());\n+    }\n+  }\n+\n+  private void checkDomainNotStartedInDefaultNS(String domainNsSelectionStrategy) {\n+    //verify operator can't start domain in the default namespace when domainNsSelectionStrategy not List\n+    // and selector does not match default\n+    checkPodNotCreated(\"defaultuid\" + adminServerPrefix, \"defaultuid\", \"default\");\n+\n+    logger.info(\"Delete defaultuid custom resource in namespace {0}\", \"default\");\n+    deleteDomainCustomResource(\"defaultuid\", \"default\");\n+    logger.info(\"Deleted Domain Custom Resource \" + \"defaultuid\");\n+  }\n+\n+  private void switchNSManagementToLabelSelectUsingUpgradeOperator(String manageByLabelNS,\n+                                                                   String manageByExpNS,\n+                                                                   String manageByLabelDomainUid,\n+                                                                   String manageByExpDomainUid) {\n+\n+    //upgrade operator to manage domains with Labeled namespaces\n+    int externalRestHttpsPort = getServiceNodePort(op2Namespace, \"external-weblogic-operator-svc\");\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelNS));\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest\", \"weblogic2\");\n+    setLabelToNamespace(manageByLabelNS, labels);\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams2)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceLabelSelector(\"mytest\")\n+        .domainNamespaceSelectionStrategy(\"LabelSelector\");\n+\n+    assertTrue(upgradeAndVerifyOperator(op2Namespace, opParams));\n+\n+    //verify domain is started\n+    createSecrets(manageByLabelNS);\n+    assertTrue(startDomain(manageByLabelNS,manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(op2Namespace,manageByLabelDomainUid);\n+    //check operator can't manage anymore manageByExpNS\n+    assertTrue(isOperatorFailedToScaleDomain(op2Namespace, manageByExpDomainUid,\n+        manageByExpNS), \"Operator can still manage domain \"\n+        + manageByExpNS + \" in the namespace \" + manageByExpNS);\n+  }\n+\n+  private void installAndVerifyOperatorCanManageDomainByNSRegExp(String manageByExp1NS,\n+                                                                 String manageByExp2NS,\n+                                                                 String manageByExpDomain1Uid,\n+                                                                 String manageByExpDomain2Uid) {\n+    // install and verify operator with domainNsSelectStrategy=RegExp to manage domains with namespaces names,\n+    // starting from test\n+    opHelmParams2 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        op2Namespace, \"RegExp\", \"^test\", true, domain3Namespace);\n+\n+    logger.info(\"Installing and verifying domain1\");\n+    createSecrets(manageByExp1NS);\n+    assertTrue(startDomain(manageByExp1NS, manageByExpDomain1Uid),\n+        \"can't start or verify domain in namespace \" + manageByExp1NS);\n+    checkOperatorCanScaleDomain(op2Namespace, manageByExpDomain1Uid);\n+\n+    logger.info(\"Installing and verifying domain2\");\n+    createSecrets(manageByExp2NS);\n+    assertTrue(startDomain(manageByExp2NS, manageByExpDomain2Uid),\n+        \"operator can start or verify domain in namespace \" + manageByExp2NS);\n+    checkOperatorCanScaleDomain(op2Namespace, manageByExpDomain2Uid);\n+  }\n+\n+\n+  private boolean startDomain(String domainNamespace, String domainUid) {\n+\n+    // create and verify the domain\n+    logger.info(\"Creating and verifying model in image domain\");\n+    try {\n+      Domain domain = createDomainCRD(domainNamespace, domainUid);\n+      createVerifyDomain(domainNamespace, domainUid, miiImage, domain);\n+      return true;\n+    } catch (Exception ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f7e78cece4496d7be6e42ec72deec2f2648b5d3"}, "originalPosition": 573}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM0MzczNA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r500343734", "createdAt": "2020-10-06T14:39:29Z", "author": {"login": "marinakog"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,824 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretList;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DEFAULT_EXTERNAL_REST_IDENTITY_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorImageName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.installOperator;\n+import static oracle.weblogic.kubernetes.actions.TestActions.listSecrets;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.checkHelmReleaseStatus;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorRestServiceRunning;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createExternalRestIdentitySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String opNamespace = null;\n+  private static String op2Namespace = null;\n+  private static String op3Namespace = null;\n+  private static String op4Namespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"managensdomain1\";\n+  private final String domain2Uid = \"managensdomain2\";\n+  private final String domain3Uid = \"managensdomain3\";\n+  private final String domain4Uid = \"managensdomain4\";\n+\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams opHelmParams1;\n+  private HelmParams opHelmParams2;\n+  private HelmParams opHelmParams4;\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // get a unique operator 2 namespace\n+    logger.info(\"Getting a unique namespace for operator 2\");\n+    assertNotNull(namespaces.get(5), \"Namespace list is null\");\n+    op2Namespace = namespaces.get(5);\n+\n+    // get a unique operator 3 namespace\n+    logger.info(\"Getting a unique namespace for operator 3\");\n+    assertNotNull(namespaces.get(6), \"Namespace list is null\");\n+    op3Namespace = namespaces.get(6);\n+\n+    // get a unique operator 4 namespace\n+    logger.info(\"Getting a unique namespace for operator 4\");\n+    assertNotNull(namespaces.get(7), \"Namespace list is null\");\n+    op4Namespace = namespaces.get(7);\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+    createSecrets(domain3Namespace);\n+    createSecrets(\"default\");\n+    labels1 = new java.util.HashMap<>();\n+    labels1.put(OPERATOR_RELEASE_NAME, OPERATOR_RELEASE_NAME);\n+    labels2 = new java.util.HashMap<>();\n+    labels2.put(OPERATOR_RELEASE_NAME + \"2\", OPERATOR_RELEASE_NAME);\n+    setLabelToNamespace(domain1Namespace, labels1);\n+    setLabelToNamespace(domain2Namespace, labels2);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+\n+    // Delete domain custom resource\n+    logger.info(\"Delete domain1 custom resource in namespace {0}\", domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid, domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \" from \" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2 custom resource in namespace {0}\", domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid, domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \" from \" + domain2Namespace);\n+\n+    logger.info(\"Delete domain3 custom resource in namespace {0}\", domain3Namespace);\n+    deleteDomainCustomResource(domain3Uid, domain3Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain3Uid);\n+\n+    logger.info(\"Delete domain4 custom resource in namespace {0}\", domain4Namespace);\n+    deleteDomainCustomResource(domain4Uid, domain4Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain4Uid);\n+\n+    logger.info(\"Delete domain1test custom resource in namespace {0}\", \"test-\" + domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid + \"test\", \"test-\" + domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \"test from test-\" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2test custom resource in namespace {0}\", \"test-\" + domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid + \"test\", \"test-\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \"test from test-\" + domain2Namespace);\n+\n+    logger.info(\"Delete weblogic custom resource in namespace {0}\", \"weblogic\" + domain2Namespace);\n+    deleteDomainCustomResource(\"weblogic\", \"weblogic\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource weblogic from weblogic\" + domain2Namespace);\n+\n+    deleteSecrets(\"default\");\n+    deleteSecrets(\"atest-\" +  domain1Namespace);;\n+    deleteNamespace(\"atest-\" + domain1Namespace);\n+    //delete operator\n+    uninstallOperator(opHelmParams1);\n+    uninstallOperator(opHelmParams2);\n+    uninstallOperator(opHelmParams4);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=RegExp,\n+   * and domainNamespaceRegExp=^test and domainNamespace= domain3NS.\n+   * Deploy two custom domain resources in the two different namespaces with names starting with test\n+   * and verify all server pods in the domains were created and ready.\n+   * Verify operator is able to manage these domains by scaling.\n+   * Try to start another domain with namespace domain3NS. Verify it is not started by operator\n+   * and value of domainNamespace is ignored for both specific namespace and default.\n+   * Upgrade helm chart to switch to using LabelSelector, start domain and verify operator can scale it.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using expression namespace management\")\n+  public void testNsManageByExp() {\n+    //create domain namespace\n+    String manageByExp1NS = \"test-\" +  domain1Namespace;\n+    String manageByExp2NS = \"test-\" +  domain2Namespace;\n+    String manageByExpDomain1Uid = \"test-\" + domain1Uid;\n+    String manageByExpDomain2Uid = \"test-\" + domain2Uid;\n+    String manageByLabelNS = \"weblogic1\" + domain1Namespace;\n+    String manageByLabelDomainUid = \"weblogic1\" + domain1Uid;\n+    String domain3NS = \"atest-\" +  domain1Namespace;\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp1NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp2NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(domain3NS));\n+    installAndVerifyOperatorCanManageDomainByNSRegExp(manageByExp1NS, manageByExp2NS,\n+        manageByExpDomain1Uid, manageByExpDomain2Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain will not start for specific NS and default\n+    checkPodNotCreated(domain3Uid + adminServerPrefix, domain3Uid, domain3Namespace);\n+    checkDomainNotStartedInDefaultNS(\"RegExp\");\n+    //verify that operator can't start domain if namespace does not start from test\n+    createSecrets(domain3NS);\n+    checkPodNotCreated(domain3Uid + adminServerPrefix, domain3Uid, domain3NS);\n+\n+    // install  operator sharing same domain\n+    checkSecondOperatorFailedToShareSameNS(manageByExp1NS);\n+    switchNSManagementToLabelSelectUsingUpgradeOperator(manageByLabelNS, manageByExp1NS,\n+        manageByLabelDomainUid, manageByExpDomain1Uid);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1.\n+   * Deploy a custom domain resource in the namespace with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   * Verify operator can't start another domain with namespace2 with label2.\n+   * Modify namespace2 to set label1, verify that operator can manage it.\n+   * Verify that domainNamespaces field will be ignored and domain will not start for namespaces:\n+   * (domain3Namespace) and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade operator to replace namespace management using RegExp namespaces.\n+   * Verify it can manage added domain and can't manage old domain by scaling .\n+   * Verify that upgrade helm fail if try to add domain, managed by other operator.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using label namespace management\")\n+  public void testNsManageByLabel() {\n+    String manageByLabelDomain1NS = domain1Namespace;\n+    String manageByLabelDomain2NS = domain2Namespace;\n+    String manageByExpDomainUid = \"weblogic2\" + domain2Namespace;\n+    String manageByExpDomainNS = \"weblogic2\" + domain2Namespace;\n+    String manageByLabelDomain1Uid = domain1Uid;\n+    String manageByLabelDomain2Uid = domain2Uid;\n+    installAndVerifyOperatorCanManageDomainByLabelSelector(manageByLabelDomain1NS, manageByLabelDomain2NS,\n+        manageByLabelDomain1Uid, manageByLabelDomain2Uid);\n+    addExtraDomainByAddingLabelToNS(labels1, manageByLabelDomain2NS, manageByLabelDomain2Uid);\n+    checkDomainNotStartedInDefaultNS(\"SelectLabel\");\n+    checkSecondOperatorFailedToShareSameNS(manageByLabelDomain1NS);\n+    switchNSManagementToRegExpUsingUpgradeOperator(manageByLabelDomain1NS, manageByExpDomainNS,\n+        manageByLabelDomain1Uid, manageByExpDomainUid);\n+    checkUpgradeFailedToAddNSManagedByAnotherOperator();\n+  }\n+\n+  /**\n+   * Create namespace ns1 with no label\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1 and enableRbac=false.\n+   * Add label1 to ns1 and verify domain can't be started\n+   * Call upgrade operator with reuse values to enable management for ns1\n+   * Deploy a custom domain resource in the namespace ns1 with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   */\n+  @Test\n+  @Order(3)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" with enableClusterRoleBinding\")\n+  public void testSwitchRbac() {\n+    String manageByLabelDomainNS = domain1Namespace + \"test4\";\n+    String manageByLabelDomainUid = domain1Uid + \"test4\";\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelDomainNS));\n+    opHelmParams4 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        op4Namespace, \"LabelSelector\",\n+        \"mytest4\", false);\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest4\", manageByLabelDomainUid);\n+    assertDoesNotThrow(() -> addLabelsToNamespace(manageByLabelDomainNS, labels));\n+    //verify domain can't be started because operator does not have permission to manage it\n+    createSecrets(manageByLabelDomainNS);\n+    checkPodNotCreated(manageByLabelDomainUid + adminServerPrefix, manageByLabelDomainUid, manageByLabelDomainNS);\n+    deleteDomainCrd(manageByLabelDomainNS, manageByLabelDomainUid);\n+    //upgrade operator and start domain\n+    int externalRestHttpsPort = getServiceNodePort(op4Namespace, \"external-weblogic-operator-svc\");\n+\n+    OperatorParams opParams = new OperatorParams()\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .helmParams(opHelmParams4);\n+\n+    assertTrue(upgradeAndVerifyOperator(op4Namespace, opParams));\n+    assertTrue(startDomain(manageByLabelDomainNS, manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(op4Namespace, manageByLabelDomainUid);\n+  }\n+\n+  private void checkUpgradeFailedToAddNSManagedByAnotherOperator() {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    // for ns names starting from weblogic, there one of domains\n+    //in namespace weblogic* is managed by operator2\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams1)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic\");\n+\n+    assertFalse(upgradeAndVerifyOperator(opNamespace, opParams), \"Upgrade does not fail when adding domain,\"\n+        + \" managed by other operator\");\n+  }\n+\n+  private void switchNSManagementToRegExpUsingUpgradeOperator(String manageByLabelNS,\n+                                                              String manageByExpNS,\n+                                                              String manageByLabelDomainUid,\n+                                                              String manageByExpDomainUid) {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    assertDoesNotThrow(() -> createNamespace(manageByExpNS));\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams1)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic2\");\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespace, opParams));\n+\n+    //verify domain is started in namespace with name starting with weblogic* and operator can scale it.\n+    createSecrets(manageByExpNS);\n+    assertTrue(startDomain(manageByExpNS,manageByExpDomainUid));\n+    checkOperatorCanScaleDomain(opNamespace,manageByExpDomainUid);\n+    //verify operator can't manage anymore domain running in the namespace with label\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespace, manageByLabelDomainUid, manageByLabelNS),\n+        \"Operator can still manage domain \"\n+        + manageByLabelDomainUid + \" in the namespace \" + manageByLabelNS);\n+  }\n+\n+  private void addExtraDomainByAddingLabelToNS(Map<String, String> labels, String domainNS, String domainUid) {\n+    deleteDomainCrd(domainNS, domainUid);\n+\n+    //switch to the label1, managed by operator and verify domain is started and can be managed by operator.\n+    setLabelToNamespace(domainNS, labels);\n+    assertTrue(startDomain(domainNS, domainUid));\n+    checkOperatorCanScaleDomain(opNamespace, domainUid);\n+  }\n+\n+  private void deleteDomainCrd(String domainNS, String domainUid) {\n+    //clean up domain resources in namespace and set namespace to label , managed by operator\n+    logger.info(\"deleting domain custom resource {0}\", domainUid);\n+    assertTrue(deleteDomainCustomResource(domainUid, domainNS));\n+\n+    // wait until domain was deleted\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be deleted in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNS,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainDoesNotExist(domainUid, DOMAIN_VERSION, domainNS));\n+  }\n+\n+  private void installAndVerifyOperatorCanManageDomainByLabelSelector(String manageByLabelDomain1NS,\n+                                                                      String manageByLabelDomain2NS,\n+                                                                      String manageByLabelDomain1Uid,\n+                                                                      String manageByLabelDomain2Uid) {\n+    // install and verify operator set to manage domains based on LabelSelector strategy,\n+    // domainNamespaces set to domain4 will be ignored\n+    opHelmParams1 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        opNamespace, \"LabelSelector\",\n+        OPERATOR_RELEASE_NAME, true, manageByLabelDomain1NS);\n+\n+    logger.info(\"Installing and verifying domain1\");\n+    createSecrets(manageByLabelDomain1NS);\n+    assertTrue(startDomain(manageByLabelDomain1NS, manageByLabelDomain1Uid),\n+        \"can't start or verify domain in namespace \" + manageByLabelDomain1NS);\n+\n+    checkOperatorCanScaleDomain(opNamespace, manageByLabelDomain1Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain4 will not start\n+    createSecrets(domain4Namespace);\n+    checkPodNotCreated(domain4Uid + adminServerPrefix, domain4Uid, domain4Namespace);\n+\n+    //verify that domain2 in namespace with no label2 will not start\n+    createSecrets(manageByLabelDomain2NS);\n+    checkPodNotCreated(manageByLabelDomain2Uid + adminServerPrefix, manageByLabelDomain2Uid, manageByLabelDomain2NS);\n+  }\n+\n+  private boolean isOperatorFailedToScaleDomain(String opNamespace, String domainUid, String domainNamespace) {\n+    try {\n+      //check operator can't manage domainNamespace by trying to scale domain\n+      int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+      String managedServerPodNamePrefix = domainUid + \"-managed-server\";\n+      String opServiceAccount = OPERATOR_RELEASE_NAME + \"-sa\";\n+      scaleAndVerifyCluster(\"cluster-1\", domainUid, domainNamespace,\n+          managedServerPodNamePrefix, 2, 1,\n+          true, externalRestHttpsPort, opNamespace, opServiceAccount,\n+          false, \"\", \"scaleDown\", 1, \"\", \"\", null, null);\n+      return false;\n+\n+    } catch (ConditionTimeoutException ex) {\n+      logger.info(\"Received expected error \" + ex.getMessage());\n+      return true;\n+    }\n+  }\n+\n+  private static void setLabelToNamespace(String domainNS, Map<String, String> labels) {\n+    //add label to domain namespace\n+    V1Namespace namespaceObject1 = assertDoesNotThrow(() -> Kubernetes.getNamespaceAsObject(domainNS));\n+    assertNotNull(namespaceObject1, \"Can't find namespace with name \" + domainNS);\n+    namespaceObject1.getMetadata().setLabels(labels);\n+    assertDoesNotThrow(() -> Kubernetes.replaceNamespace(namespaceObject1));\n+  }\n+\n+  private void checkOperatorCanScaleDomain(String opNamespace, String domainUid) {\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    assertTrue(scaleClusterWithRestApi(domainUid, clusterName, 3,\n+        externalRestHttpsPort, opNamespace, OPERATOR_RELEASE_NAME + \"-sa\"),\n+        \"Domain \" + domainUid + \" scaling operation failed\");\n+  }\n+\n+  private void checkSecondOperatorFailedToShareSameNS(String domainNamespace) {\n+    // try to install another operator sharing same domain namespace via different domainNsSelectionStrategy\n+    try {\n+      HelmParams opHelmParams3 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+          op3Namespace, \"List\",\n+          null, true, domainNamespace);\n+      assertNull(opHelmParams3, \"Operator helm chart sharing same NS with other operator did not fail\");\n+    } catch (org.opentest4j.AssertionFailedError ex) {\n+      //expecting to fail\n+      logger.info(\"Helm installation failed as expected \" + ex.getMessage());\n+    }\n+  }\n+\n+  private void checkDomainNotStartedInDefaultNS(String domainNsSelectionStrategy) {\n+    //verify operator can't start domain in the default namespace when domainNsSelectionStrategy not List\n+    // and selector does not match default\n+    checkPodNotCreated(\"defaultuid\" + adminServerPrefix, \"defaultuid\", \"default\");\n+\n+    logger.info(\"Delete defaultuid custom resource in namespace {0}\", \"default\");\n+    deleteDomainCustomResource(\"defaultuid\", \"default\");\n+    logger.info(\"Deleted Domain Custom Resource \" + \"defaultuid\");\n+  }\n+\n+  private void switchNSManagementToLabelSelectUsingUpgradeOperator(String manageByLabelNS,\n+                                                                   String manageByExpNS,\n+                                                                   String manageByLabelDomainUid,\n+                                                                   String manageByExpDomainUid) {\n+\n+    //upgrade operator to manage domains with Labeled namespaces\n+    int externalRestHttpsPort = getServiceNodePort(op2Namespace, \"external-weblogic-operator-svc\");\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelNS));\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest\", \"weblogic2\");\n+    setLabelToNamespace(manageByLabelNS, labels);\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams2)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceLabelSelector(\"mytest\")\n+        .domainNamespaceSelectionStrategy(\"LabelSelector\");\n+\n+    assertTrue(upgradeAndVerifyOperator(op2Namespace, opParams));\n+\n+    //verify domain is started\n+    createSecrets(manageByLabelNS);\n+    assertTrue(startDomain(manageByLabelNS,manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(op2Namespace,manageByLabelDomainUid);\n+    //check operator can't manage anymore manageByExpNS\n+    assertTrue(isOperatorFailedToScaleDomain(op2Namespace, manageByExpDomainUid,\n+        manageByExpNS), \"Operator can still manage domain \"\n+        + manageByExpNS + \" in the namespace \" + manageByExpNS);\n+  }\n+\n+  private void installAndVerifyOperatorCanManageDomainByNSRegExp(String manageByExp1NS,\n+                                                                 String manageByExp2NS,\n+                                                                 String manageByExpDomain1Uid,\n+                                                                 String manageByExpDomain2Uid) {\n+    // install and verify operator with domainNsSelectStrategy=RegExp to manage domains with namespaces names,\n+    // starting from test\n+    opHelmParams2 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        op2Namespace, \"RegExp\", \"^test\", true, domain3Namespace);\n+\n+    logger.info(\"Installing and verifying domain1\");\n+    createSecrets(manageByExp1NS);\n+    assertTrue(startDomain(manageByExp1NS, manageByExpDomain1Uid),\n+        \"can't start or verify domain in namespace \" + manageByExp1NS);\n+    checkOperatorCanScaleDomain(op2Namespace, manageByExpDomain1Uid);\n+\n+    logger.info(\"Installing and verifying domain2\");\n+    createSecrets(manageByExp2NS);\n+    assertTrue(startDomain(manageByExp2NS, manageByExpDomain2Uid),\n+        \"operator can start or verify domain in namespace \" + manageByExp2NS);\n+    checkOperatorCanScaleDomain(op2Namespace, manageByExpDomain2Uid);\n+  }\n+\n+\n+  private boolean startDomain(String domainNamespace, String domainUid) {\n+\n+    // create and verify the domain\n+    logger.info(\"Creating and verifying model in image domain\");\n+    try {\n+      Domain domain = createDomainCRD(domainNamespace, domainUid);\n+      createVerifyDomain(domainNamespace, domainUid, miiImage, domain);\n+      return true;\n+    } catch (Exception ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyNzIzOQ=="}, "originalCommit": {"oid": "2f7e78cece4496d7be6e42ec72deec2f2648b5d3"}, "originalPosition": 573}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTUzMTM3OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOTozOTowN1rOHcrEmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDozOTo1MVrOHdKlCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyNzg2NQ==", "bodyText": "Update use case description for this step", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r499827865", "createdAt": "2020-10-05T19:39:07Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,824 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretList;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DEFAULT_EXTERNAL_REST_IDENTITY_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorImageName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.installOperator;\n+import static oracle.weblogic.kubernetes.actions.TestActions.listSecrets;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.checkHelmReleaseStatus;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorRestServiceRunning;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createExternalRestIdentitySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String opNamespace = null;\n+  private static String op2Namespace = null;\n+  private static String op3Namespace = null;\n+  private static String op4Namespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"managensdomain1\";\n+  private final String domain2Uid = \"managensdomain2\";\n+  private final String domain3Uid = \"managensdomain3\";\n+  private final String domain4Uid = \"managensdomain4\";\n+\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams opHelmParams1;\n+  private HelmParams opHelmParams2;\n+  private HelmParams opHelmParams4;\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // get a unique operator 2 namespace\n+    logger.info(\"Getting a unique namespace for operator 2\");\n+    assertNotNull(namespaces.get(5), \"Namespace list is null\");\n+    op2Namespace = namespaces.get(5);\n+\n+    // get a unique operator 3 namespace\n+    logger.info(\"Getting a unique namespace for operator 3\");\n+    assertNotNull(namespaces.get(6), \"Namespace list is null\");\n+    op3Namespace = namespaces.get(6);\n+\n+    // get a unique operator 4 namespace\n+    logger.info(\"Getting a unique namespace for operator 4\");\n+    assertNotNull(namespaces.get(7), \"Namespace list is null\");\n+    op4Namespace = namespaces.get(7);\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+    createSecrets(domain3Namespace);\n+    createSecrets(\"default\");\n+    labels1 = new java.util.HashMap<>();\n+    labels1.put(OPERATOR_RELEASE_NAME, OPERATOR_RELEASE_NAME);\n+    labels2 = new java.util.HashMap<>();\n+    labels2.put(OPERATOR_RELEASE_NAME + \"2\", OPERATOR_RELEASE_NAME);\n+    setLabelToNamespace(domain1Namespace, labels1);\n+    setLabelToNamespace(domain2Namespace, labels2);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+\n+    // Delete domain custom resource\n+    logger.info(\"Delete domain1 custom resource in namespace {0}\", domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid, domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \" from \" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2 custom resource in namespace {0}\", domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid, domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \" from \" + domain2Namespace);\n+\n+    logger.info(\"Delete domain3 custom resource in namespace {0}\", domain3Namespace);\n+    deleteDomainCustomResource(domain3Uid, domain3Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain3Uid);\n+\n+    logger.info(\"Delete domain4 custom resource in namespace {0}\", domain4Namespace);\n+    deleteDomainCustomResource(domain4Uid, domain4Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain4Uid);\n+\n+    logger.info(\"Delete domain1test custom resource in namespace {0}\", \"test-\" + domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid + \"test\", \"test-\" + domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \"test from test-\" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2test custom resource in namespace {0}\", \"test-\" + domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid + \"test\", \"test-\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \"test from test-\" + domain2Namespace);\n+\n+    logger.info(\"Delete weblogic custom resource in namespace {0}\", \"weblogic\" + domain2Namespace);\n+    deleteDomainCustomResource(\"weblogic\", \"weblogic\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource weblogic from weblogic\" + domain2Namespace);\n+\n+    deleteSecrets(\"default\");\n+    deleteSecrets(\"atest-\" +  domain1Namespace);;\n+    deleteNamespace(\"atest-\" + domain1Namespace);\n+    //delete operator\n+    uninstallOperator(opHelmParams1);\n+    uninstallOperator(opHelmParams2);\n+    uninstallOperator(opHelmParams4);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=RegExp,\n+   * and domainNamespaceRegExp=^test and domainNamespace= domain3NS.\n+   * Deploy two custom domain resources in the two different namespaces with names starting with test\n+   * and verify all server pods in the domains were created and ready.\n+   * Verify operator is able to manage these domains by scaling.\n+   * Try to start another domain with namespace domain3NS. Verify it is not started by operator\n+   * and value of domainNamespace is ignored for both specific namespace and default.\n+   * Upgrade helm chart to switch to using LabelSelector, start domain and verify operator can scale it.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using expression namespace management\")\n+  public void testNsManageByExp() {\n+    //create domain namespace\n+    String manageByExp1NS = \"test-\" +  domain1Namespace;\n+    String manageByExp2NS = \"test-\" +  domain2Namespace;\n+    String manageByExpDomain1Uid = \"test-\" + domain1Uid;\n+    String manageByExpDomain2Uid = \"test-\" + domain2Uid;\n+    String manageByLabelNS = \"weblogic1\" + domain1Namespace;\n+    String manageByLabelDomainUid = \"weblogic1\" + domain1Uid;\n+    String domain3NS = \"atest-\" +  domain1Namespace;\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp1NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp2NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(domain3NS));\n+    installAndVerifyOperatorCanManageDomainByNSRegExp(manageByExp1NS, manageByExp2NS,\n+        manageByExpDomain1Uid, manageByExpDomain2Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain will not start for specific NS and default\n+    checkPodNotCreated(domain3Uid + adminServerPrefix, domain3Uid, domain3Namespace);\n+    checkDomainNotStartedInDefaultNS(\"RegExp\");\n+    //verify that operator can't start domain if namespace does not start from test\n+    createSecrets(domain3NS);\n+    checkPodNotCreated(domain3Uid + adminServerPrefix, domain3Uid, domain3NS);\n+\n+    // install  operator sharing same domain\n+    checkSecondOperatorFailedToShareSameNS(manageByExp1NS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f7e78cece4496d7be6e42ec72deec2f2648b5d3"}, "originalPosition": 275}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM0NDA3Mg==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r500344072", "createdAt": "2020-10-06T14:39:51Z", "author": {"login": "marinakog"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,824 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretList;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DEFAULT_EXTERNAL_REST_IDENTITY_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorImageName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.installOperator;\n+import static oracle.weblogic.kubernetes.actions.TestActions.listSecrets;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.checkHelmReleaseStatus;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorRestServiceRunning;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createExternalRestIdentitySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String opNamespace = null;\n+  private static String op2Namespace = null;\n+  private static String op3Namespace = null;\n+  private static String op4Namespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"managensdomain1\";\n+  private final String domain2Uid = \"managensdomain2\";\n+  private final String domain3Uid = \"managensdomain3\";\n+  private final String domain4Uid = \"managensdomain4\";\n+\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams opHelmParams1;\n+  private HelmParams opHelmParams2;\n+  private HelmParams opHelmParams4;\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // get a unique operator 2 namespace\n+    logger.info(\"Getting a unique namespace for operator 2\");\n+    assertNotNull(namespaces.get(5), \"Namespace list is null\");\n+    op2Namespace = namespaces.get(5);\n+\n+    // get a unique operator 3 namespace\n+    logger.info(\"Getting a unique namespace for operator 3\");\n+    assertNotNull(namespaces.get(6), \"Namespace list is null\");\n+    op3Namespace = namespaces.get(6);\n+\n+    // get a unique operator 4 namespace\n+    logger.info(\"Getting a unique namespace for operator 4\");\n+    assertNotNull(namespaces.get(7), \"Namespace list is null\");\n+    op4Namespace = namespaces.get(7);\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+    createSecrets(domain3Namespace);\n+    createSecrets(\"default\");\n+    labels1 = new java.util.HashMap<>();\n+    labels1.put(OPERATOR_RELEASE_NAME, OPERATOR_RELEASE_NAME);\n+    labels2 = new java.util.HashMap<>();\n+    labels2.put(OPERATOR_RELEASE_NAME + \"2\", OPERATOR_RELEASE_NAME);\n+    setLabelToNamespace(domain1Namespace, labels1);\n+    setLabelToNamespace(domain2Namespace, labels2);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+\n+    // Delete domain custom resource\n+    logger.info(\"Delete domain1 custom resource in namespace {0}\", domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid, domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \" from \" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2 custom resource in namespace {0}\", domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid, domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \" from \" + domain2Namespace);\n+\n+    logger.info(\"Delete domain3 custom resource in namespace {0}\", domain3Namespace);\n+    deleteDomainCustomResource(domain3Uid, domain3Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain3Uid);\n+\n+    logger.info(\"Delete domain4 custom resource in namespace {0}\", domain4Namespace);\n+    deleteDomainCustomResource(domain4Uid, domain4Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain4Uid);\n+\n+    logger.info(\"Delete domain1test custom resource in namespace {0}\", \"test-\" + domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid + \"test\", \"test-\" + domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \"test from test-\" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2test custom resource in namespace {0}\", \"test-\" + domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid + \"test\", \"test-\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \"test from test-\" + domain2Namespace);\n+\n+    logger.info(\"Delete weblogic custom resource in namespace {0}\", \"weblogic\" + domain2Namespace);\n+    deleteDomainCustomResource(\"weblogic\", \"weblogic\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource weblogic from weblogic\" + domain2Namespace);\n+\n+    deleteSecrets(\"default\");\n+    deleteSecrets(\"atest-\" +  domain1Namespace);;\n+    deleteNamespace(\"atest-\" + domain1Namespace);\n+    //delete operator\n+    uninstallOperator(opHelmParams1);\n+    uninstallOperator(opHelmParams2);\n+    uninstallOperator(opHelmParams4);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=RegExp,\n+   * and domainNamespaceRegExp=^test and domainNamespace= domain3NS.\n+   * Deploy two custom domain resources in the two different namespaces with names starting with test\n+   * and verify all server pods in the domains were created and ready.\n+   * Verify operator is able to manage these domains by scaling.\n+   * Try to start another domain with namespace domain3NS. Verify it is not started by operator\n+   * and value of domainNamespace is ignored for both specific namespace and default.\n+   * Upgrade helm chart to switch to using LabelSelector, start domain and verify operator can scale it.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using expression namespace management\")\n+  public void testNsManageByExp() {\n+    //create domain namespace\n+    String manageByExp1NS = \"test-\" +  domain1Namespace;\n+    String manageByExp2NS = \"test-\" +  domain2Namespace;\n+    String manageByExpDomain1Uid = \"test-\" + domain1Uid;\n+    String manageByExpDomain2Uid = \"test-\" + domain2Uid;\n+    String manageByLabelNS = \"weblogic1\" + domain1Namespace;\n+    String manageByLabelDomainUid = \"weblogic1\" + domain1Uid;\n+    String domain3NS = \"atest-\" +  domain1Namespace;\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp1NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp2NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(domain3NS));\n+    installAndVerifyOperatorCanManageDomainByNSRegExp(manageByExp1NS, manageByExp2NS,\n+        manageByExpDomain1Uid, manageByExpDomain2Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain will not start for specific NS and default\n+    checkPodNotCreated(domain3Uid + adminServerPrefix, domain3Uid, domain3Namespace);\n+    checkDomainNotStartedInDefaultNS(\"RegExp\");\n+    //verify that operator can't start domain if namespace does not start from test\n+    createSecrets(domain3NS);\n+    checkPodNotCreated(domain3Uid + adminServerPrefix, domain3Uid, domain3NS);\n+\n+    // install  operator sharing same domain\n+    checkSecondOperatorFailedToShareSameNS(manageByExp1NS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyNzg2NQ=="}, "originalCommit": {"oid": "2f7e78cece4496d7be6e42ec72deec2f2648b5d3"}, "originalPosition": 275}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTU0NTQ2OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxOTo0Mzo0N1rOHcrNmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDozOTo1N1rOHdKlew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgzMDE2OA==", "bodyText": "this check can be moved outside of this method", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r499830168", "createdAt": "2020-10-05T19:43:47Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,824 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretList;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DEFAULT_EXTERNAL_REST_IDENTITY_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorImageName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.installOperator;\n+import static oracle.weblogic.kubernetes.actions.TestActions.listSecrets;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.checkHelmReleaseStatus;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorRestServiceRunning;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createExternalRestIdentitySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String opNamespace = null;\n+  private static String op2Namespace = null;\n+  private static String op3Namespace = null;\n+  private static String op4Namespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"managensdomain1\";\n+  private final String domain2Uid = \"managensdomain2\";\n+  private final String domain3Uid = \"managensdomain3\";\n+  private final String domain4Uid = \"managensdomain4\";\n+\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams opHelmParams1;\n+  private HelmParams opHelmParams2;\n+  private HelmParams opHelmParams4;\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // get a unique operator 2 namespace\n+    logger.info(\"Getting a unique namespace for operator 2\");\n+    assertNotNull(namespaces.get(5), \"Namespace list is null\");\n+    op2Namespace = namespaces.get(5);\n+\n+    // get a unique operator 3 namespace\n+    logger.info(\"Getting a unique namespace for operator 3\");\n+    assertNotNull(namespaces.get(6), \"Namespace list is null\");\n+    op3Namespace = namespaces.get(6);\n+\n+    // get a unique operator 4 namespace\n+    logger.info(\"Getting a unique namespace for operator 4\");\n+    assertNotNull(namespaces.get(7), \"Namespace list is null\");\n+    op4Namespace = namespaces.get(7);\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+    createSecrets(domain3Namespace);\n+    createSecrets(\"default\");\n+    labels1 = new java.util.HashMap<>();\n+    labels1.put(OPERATOR_RELEASE_NAME, OPERATOR_RELEASE_NAME);\n+    labels2 = new java.util.HashMap<>();\n+    labels2.put(OPERATOR_RELEASE_NAME + \"2\", OPERATOR_RELEASE_NAME);\n+    setLabelToNamespace(domain1Namespace, labels1);\n+    setLabelToNamespace(domain2Namespace, labels2);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+\n+    // Delete domain custom resource\n+    logger.info(\"Delete domain1 custom resource in namespace {0}\", domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid, domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \" from \" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2 custom resource in namespace {0}\", domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid, domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \" from \" + domain2Namespace);\n+\n+    logger.info(\"Delete domain3 custom resource in namespace {0}\", domain3Namespace);\n+    deleteDomainCustomResource(domain3Uid, domain3Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain3Uid);\n+\n+    logger.info(\"Delete domain4 custom resource in namespace {0}\", domain4Namespace);\n+    deleteDomainCustomResource(domain4Uid, domain4Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain4Uid);\n+\n+    logger.info(\"Delete domain1test custom resource in namespace {0}\", \"test-\" + domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid + \"test\", \"test-\" + domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \"test from test-\" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2test custom resource in namespace {0}\", \"test-\" + domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid + \"test\", \"test-\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \"test from test-\" + domain2Namespace);\n+\n+    logger.info(\"Delete weblogic custom resource in namespace {0}\", \"weblogic\" + domain2Namespace);\n+    deleteDomainCustomResource(\"weblogic\", \"weblogic\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource weblogic from weblogic\" + domain2Namespace);\n+\n+    deleteSecrets(\"default\");\n+    deleteSecrets(\"atest-\" +  domain1Namespace);;\n+    deleteNamespace(\"atest-\" + domain1Namespace);\n+    //delete operator\n+    uninstallOperator(opHelmParams1);\n+    uninstallOperator(opHelmParams2);\n+    uninstallOperator(opHelmParams4);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=RegExp,\n+   * and domainNamespaceRegExp=^test and domainNamespace= domain3NS.\n+   * Deploy two custom domain resources in the two different namespaces with names starting with test\n+   * and verify all server pods in the domains were created and ready.\n+   * Verify operator is able to manage these domains by scaling.\n+   * Try to start another domain with namespace domain3NS. Verify it is not started by operator\n+   * and value of domainNamespace is ignored for both specific namespace and default.\n+   * Upgrade helm chart to switch to using LabelSelector, start domain and verify operator can scale it.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using expression namespace management\")\n+  public void testNsManageByExp() {\n+    //create domain namespace\n+    String manageByExp1NS = \"test-\" +  domain1Namespace;\n+    String manageByExp2NS = \"test-\" +  domain2Namespace;\n+    String manageByExpDomain1Uid = \"test-\" + domain1Uid;\n+    String manageByExpDomain2Uid = \"test-\" + domain2Uid;\n+    String manageByLabelNS = \"weblogic1\" + domain1Namespace;\n+    String manageByLabelDomainUid = \"weblogic1\" + domain1Uid;\n+    String domain3NS = \"atest-\" +  domain1Namespace;\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp1NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp2NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(domain3NS));\n+    installAndVerifyOperatorCanManageDomainByNSRegExp(manageByExp1NS, manageByExp2NS,\n+        manageByExpDomain1Uid, manageByExpDomain2Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain will not start for specific NS and default\n+    checkPodNotCreated(domain3Uid + adminServerPrefix, domain3Uid, domain3Namespace);\n+    checkDomainNotStartedInDefaultNS(\"RegExp\");\n+    //verify that operator can't start domain if namespace does not start from test\n+    createSecrets(domain3NS);\n+    checkPodNotCreated(domain3Uid + adminServerPrefix, domain3Uid, domain3NS);\n+\n+    // install  operator sharing same domain\n+    checkSecondOperatorFailedToShareSameNS(manageByExp1NS);\n+    switchNSManagementToLabelSelectUsingUpgradeOperator(manageByLabelNS, manageByExp1NS,\n+        manageByLabelDomainUid, manageByExpDomain1Uid);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1.\n+   * Deploy a custom domain resource in the namespace with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   * Verify operator can't start another domain with namespace2 with label2.\n+   * Modify namespace2 to set label1, verify that operator can manage it.\n+   * Verify that domainNamespaces field will be ignored and domain will not start for namespaces:\n+   * (domain3Namespace) and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade operator to replace namespace management using RegExp namespaces.\n+   * Verify it can manage added domain and can't manage old domain by scaling .\n+   * Verify that upgrade helm fail if try to add domain, managed by other operator.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using label namespace management\")\n+  public void testNsManageByLabel() {\n+    String manageByLabelDomain1NS = domain1Namespace;\n+    String manageByLabelDomain2NS = domain2Namespace;\n+    String manageByExpDomainUid = \"weblogic2\" + domain2Namespace;\n+    String manageByExpDomainNS = \"weblogic2\" + domain2Namespace;\n+    String manageByLabelDomain1Uid = domain1Uid;\n+    String manageByLabelDomain2Uid = domain2Uid;\n+    installAndVerifyOperatorCanManageDomainByLabelSelector(manageByLabelDomain1NS, manageByLabelDomain2NS,\n+        manageByLabelDomain1Uid, manageByLabelDomain2Uid);\n+    addExtraDomainByAddingLabelToNS(labels1, manageByLabelDomain2NS, manageByLabelDomain2Uid);\n+    checkDomainNotStartedInDefaultNS(\"SelectLabel\");\n+    checkSecondOperatorFailedToShareSameNS(manageByLabelDomain1NS);\n+    switchNSManagementToRegExpUsingUpgradeOperator(manageByLabelDomain1NS, manageByExpDomainNS,\n+        manageByLabelDomain1Uid, manageByExpDomainUid);\n+    checkUpgradeFailedToAddNSManagedByAnotherOperator();\n+  }\n+\n+  /**\n+   * Create namespace ns1 with no label\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1 and enableRbac=false.\n+   * Add label1 to ns1 and verify domain can't be started\n+   * Call upgrade operator with reuse values to enable management for ns1\n+   * Deploy a custom domain resource in the namespace ns1 with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   */\n+  @Test\n+  @Order(3)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" with enableClusterRoleBinding\")\n+  public void testSwitchRbac() {\n+    String manageByLabelDomainNS = domain1Namespace + \"test4\";\n+    String manageByLabelDomainUid = domain1Uid + \"test4\";\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelDomainNS));\n+    opHelmParams4 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        op4Namespace, \"LabelSelector\",\n+        \"mytest4\", false);\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest4\", manageByLabelDomainUid);\n+    assertDoesNotThrow(() -> addLabelsToNamespace(manageByLabelDomainNS, labels));\n+    //verify domain can't be started because operator does not have permission to manage it\n+    createSecrets(manageByLabelDomainNS);\n+    checkPodNotCreated(manageByLabelDomainUid + adminServerPrefix, manageByLabelDomainUid, manageByLabelDomainNS);\n+    deleteDomainCrd(manageByLabelDomainNS, manageByLabelDomainUid);\n+    //upgrade operator and start domain\n+    int externalRestHttpsPort = getServiceNodePort(op4Namespace, \"external-weblogic-operator-svc\");\n+\n+    OperatorParams opParams = new OperatorParams()\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .helmParams(opHelmParams4);\n+\n+    assertTrue(upgradeAndVerifyOperator(op4Namespace, opParams));\n+    assertTrue(startDomain(manageByLabelDomainNS, manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(op4Namespace, manageByLabelDomainUid);\n+  }\n+\n+  private void checkUpgradeFailedToAddNSManagedByAnotherOperator() {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    // for ns names starting from weblogic, there one of domains\n+    //in namespace weblogic* is managed by operator2\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams1)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic\");\n+\n+    assertFalse(upgradeAndVerifyOperator(opNamespace, opParams), \"Upgrade does not fail when adding domain,\"\n+        + \" managed by other operator\");\n+  }\n+\n+  private void switchNSManagementToRegExpUsingUpgradeOperator(String manageByLabelNS,\n+                                                              String manageByExpNS,\n+                                                              String manageByLabelDomainUid,\n+                                                              String manageByExpDomainUid) {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    assertDoesNotThrow(() -> createNamespace(manageByExpNS));\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams1)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic2\");\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespace, opParams));\n+\n+    //verify domain is started in namespace with name starting with weblogic* and operator can scale it.\n+    createSecrets(manageByExpNS);\n+    assertTrue(startDomain(manageByExpNS,manageByExpDomainUid));\n+    checkOperatorCanScaleDomain(opNamespace,manageByExpDomainUid);\n+    //verify operator can't manage anymore domain running in the namespace with label\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespace, manageByLabelDomainUid, manageByLabelNS),\n+        \"Operator can still manage domain \"\n+        + manageByLabelDomainUid + \" in the namespace \" + manageByLabelNS);\n+  }\n+\n+  private void addExtraDomainByAddingLabelToNS(Map<String, String> labels, String domainNS, String domainUid) {\n+    deleteDomainCrd(domainNS, domainUid);\n+\n+    //switch to the label1, managed by operator and verify domain is started and can be managed by operator.\n+    setLabelToNamespace(domainNS, labels);\n+    assertTrue(startDomain(domainNS, domainUid));\n+    checkOperatorCanScaleDomain(opNamespace, domainUid);\n+  }\n+\n+  private void deleteDomainCrd(String domainNS, String domainUid) {\n+    //clean up domain resources in namespace and set namespace to label , managed by operator\n+    logger.info(\"deleting domain custom resource {0}\", domainUid);\n+    assertTrue(deleteDomainCustomResource(domainUid, domainNS));\n+\n+    // wait until domain was deleted\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be deleted in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNS,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainDoesNotExist(domainUid, DOMAIN_VERSION, domainNS));\n+  }\n+\n+  private void installAndVerifyOperatorCanManageDomainByLabelSelector(String manageByLabelDomain1NS,\n+                                                                      String manageByLabelDomain2NS,\n+                                                                      String manageByLabelDomain1Uid,\n+                                                                      String manageByLabelDomain2Uid) {\n+    // install and verify operator set to manage domains based on LabelSelector strategy,\n+    // domainNamespaces set to domain4 will be ignored\n+    opHelmParams1 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        opNamespace, \"LabelSelector\",\n+        OPERATOR_RELEASE_NAME, true, manageByLabelDomain1NS);\n+\n+    logger.info(\"Installing and verifying domain1\");\n+    createSecrets(manageByLabelDomain1NS);\n+    assertTrue(startDomain(manageByLabelDomain1NS, manageByLabelDomain1Uid),\n+        \"can't start or verify domain in namespace \" + manageByLabelDomain1NS);\n+\n+    checkOperatorCanScaleDomain(opNamespace, manageByLabelDomain1Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain4 will not start\n+    createSecrets(domain4Namespace);\n+    checkPodNotCreated(domain4Uid + adminServerPrefix, domain4Uid, domain4Namespace);\n+\n+    //verify that domain2 in namespace with no label2 will not start\n+    createSecrets(manageByLabelDomain2NS);\n+    checkPodNotCreated(manageByLabelDomain2Uid + adminServerPrefix, manageByLabelDomain2Uid, manageByLabelDomain2NS);\n+  }\n+\n+  private boolean isOperatorFailedToScaleDomain(String opNamespace, String domainUid, String domainNamespace) {\n+    try {\n+      //check operator can't manage domainNamespace by trying to scale domain\n+      int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+      String managedServerPodNamePrefix = domainUid + \"-managed-server\";\n+      String opServiceAccount = OPERATOR_RELEASE_NAME + \"-sa\";\n+      scaleAndVerifyCluster(\"cluster-1\", domainUid, domainNamespace,\n+          managedServerPodNamePrefix, 2, 1,\n+          true, externalRestHttpsPort, opNamespace, opServiceAccount,\n+          false, \"\", \"scaleDown\", 1, \"\", \"\", null, null);\n+      return false;\n+\n+    } catch (ConditionTimeoutException ex) {\n+      logger.info(\"Received expected error \" + ex.getMessage());\n+      return true;\n+    }\n+  }\n+\n+  private static void setLabelToNamespace(String domainNS, Map<String, String> labels) {\n+    //add label to domain namespace\n+    V1Namespace namespaceObject1 = assertDoesNotThrow(() -> Kubernetes.getNamespaceAsObject(domainNS));\n+    assertNotNull(namespaceObject1, \"Can't find namespace with name \" + domainNS);\n+    namespaceObject1.getMetadata().setLabels(labels);\n+    assertDoesNotThrow(() -> Kubernetes.replaceNamespace(namespaceObject1));\n+  }\n+\n+  private void checkOperatorCanScaleDomain(String opNamespace, String domainUid) {\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    assertTrue(scaleClusterWithRestApi(domainUid, clusterName, 3,\n+        externalRestHttpsPort, opNamespace, OPERATOR_RELEASE_NAME + \"-sa\"),\n+        \"Domain \" + domainUid + \" scaling operation failed\");\n+  }\n+\n+  private void checkSecondOperatorFailedToShareSameNS(String domainNamespace) {\n+    // try to install another operator sharing same domain namespace via different domainNsSelectionStrategy\n+    try {\n+      HelmParams opHelmParams3 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+          op3Namespace, \"List\",\n+          null, true, domainNamespace);\n+      assertNull(opHelmParams3, \"Operator helm chart sharing same NS with other operator did not fail\");\n+    } catch (org.opentest4j.AssertionFailedError ex) {\n+      //expecting to fail\n+      logger.info(\"Helm installation failed as expected \" + ex.getMessage());\n+    }\n+  }\n+\n+  private void checkDomainNotStartedInDefaultNS(String domainNsSelectionStrategy) {\n+    //verify operator can't start domain in the default namespace when domainNsSelectionStrategy not List\n+    // and selector does not match default\n+    checkPodNotCreated(\"defaultuid\" + adminServerPrefix, \"defaultuid\", \"default\");\n+\n+    logger.info(\"Delete defaultuid custom resource in namespace {0}\", \"default\");\n+    deleteDomainCustomResource(\"defaultuid\", \"default\");\n+    logger.info(\"Deleted Domain Custom Resource \" + \"defaultuid\");\n+  }\n+\n+  private void switchNSManagementToLabelSelectUsingUpgradeOperator(String manageByLabelNS,\n+                                                                   String manageByExpNS,\n+                                                                   String manageByLabelDomainUid,\n+                                                                   String manageByExpDomainUid) {\n+\n+    //upgrade operator to manage domains with Labeled namespaces\n+    int externalRestHttpsPort = getServiceNodePort(op2Namespace, \"external-weblogic-operator-svc\");\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelNS));\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest\", \"weblogic2\");\n+    setLabelToNamespace(manageByLabelNS, labels);\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams2)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceLabelSelector(\"mytest\")\n+        .domainNamespaceSelectionStrategy(\"LabelSelector\");\n+\n+    assertTrue(upgradeAndVerifyOperator(op2Namespace, opParams));\n+\n+    //verify domain is started\n+    createSecrets(manageByLabelNS);\n+    assertTrue(startDomain(manageByLabelNS,manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(op2Namespace,manageByLabelDomainUid);\n+    //check operator can't manage anymore manageByExpNS", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f7e78cece4496d7be6e42ec72deec2f2648b5d3"}, "originalPosition": 536}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM0NDE4Nw==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r500344187", "createdAt": "2020-10-06T14:39:57Z", "author": {"login": "marinakog"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,824 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretList;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DEFAULT_EXTERNAL_REST_IDENTITY_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorImageName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.installOperator;\n+import static oracle.weblogic.kubernetes.actions.TestActions.listSecrets;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.checkHelmReleaseStatus;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorRestServiceRunning;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createExternalRestIdentitySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String opNamespace = null;\n+  private static String op2Namespace = null;\n+  private static String op3Namespace = null;\n+  private static String op4Namespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"managensdomain1\";\n+  private final String domain2Uid = \"managensdomain2\";\n+  private final String domain3Uid = \"managensdomain3\";\n+  private final String domain4Uid = \"managensdomain4\";\n+\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams opHelmParams1;\n+  private HelmParams opHelmParams2;\n+  private HelmParams opHelmParams4;\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // get a unique operator 2 namespace\n+    logger.info(\"Getting a unique namespace for operator 2\");\n+    assertNotNull(namespaces.get(5), \"Namespace list is null\");\n+    op2Namespace = namespaces.get(5);\n+\n+    // get a unique operator 3 namespace\n+    logger.info(\"Getting a unique namespace for operator 3\");\n+    assertNotNull(namespaces.get(6), \"Namespace list is null\");\n+    op3Namespace = namespaces.get(6);\n+\n+    // get a unique operator 4 namespace\n+    logger.info(\"Getting a unique namespace for operator 4\");\n+    assertNotNull(namespaces.get(7), \"Namespace list is null\");\n+    op4Namespace = namespaces.get(7);\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+    createSecrets(domain3Namespace);\n+    createSecrets(\"default\");\n+    labels1 = new java.util.HashMap<>();\n+    labels1.put(OPERATOR_RELEASE_NAME, OPERATOR_RELEASE_NAME);\n+    labels2 = new java.util.HashMap<>();\n+    labels2.put(OPERATOR_RELEASE_NAME + \"2\", OPERATOR_RELEASE_NAME);\n+    setLabelToNamespace(domain1Namespace, labels1);\n+    setLabelToNamespace(domain2Namespace, labels2);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+\n+    // Delete domain custom resource\n+    logger.info(\"Delete domain1 custom resource in namespace {0}\", domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid, domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \" from \" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2 custom resource in namespace {0}\", domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid, domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \" from \" + domain2Namespace);\n+\n+    logger.info(\"Delete domain3 custom resource in namespace {0}\", domain3Namespace);\n+    deleteDomainCustomResource(domain3Uid, domain3Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain3Uid);\n+\n+    logger.info(\"Delete domain4 custom resource in namespace {0}\", domain4Namespace);\n+    deleteDomainCustomResource(domain4Uid, domain4Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain4Uid);\n+\n+    logger.info(\"Delete domain1test custom resource in namespace {0}\", \"test-\" + domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid + \"test\", \"test-\" + domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \"test from test-\" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2test custom resource in namespace {0}\", \"test-\" + domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid + \"test\", \"test-\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \"test from test-\" + domain2Namespace);\n+\n+    logger.info(\"Delete weblogic custom resource in namespace {0}\", \"weblogic\" + domain2Namespace);\n+    deleteDomainCustomResource(\"weblogic\", \"weblogic\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource weblogic from weblogic\" + domain2Namespace);\n+\n+    deleteSecrets(\"default\");\n+    deleteSecrets(\"atest-\" +  domain1Namespace);;\n+    deleteNamespace(\"atest-\" + domain1Namespace);\n+    //delete operator\n+    uninstallOperator(opHelmParams1);\n+    uninstallOperator(opHelmParams2);\n+    uninstallOperator(opHelmParams4);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=RegExp,\n+   * and domainNamespaceRegExp=^test and domainNamespace= domain3NS.\n+   * Deploy two custom domain resources in the two different namespaces with names starting with test\n+   * and verify all server pods in the domains were created and ready.\n+   * Verify operator is able to manage these domains by scaling.\n+   * Try to start another domain with namespace domain3NS. Verify it is not started by operator\n+   * and value of domainNamespace is ignored for both specific namespace and default.\n+   * Upgrade helm chart to switch to using LabelSelector, start domain and verify operator can scale it.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using expression namespace management\")\n+  public void testNsManageByExp() {\n+    //create domain namespace\n+    String manageByExp1NS = \"test-\" +  domain1Namespace;\n+    String manageByExp2NS = \"test-\" +  domain2Namespace;\n+    String manageByExpDomain1Uid = \"test-\" + domain1Uid;\n+    String manageByExpDomain2Uid = \"test-\" + domain2Uid;\n+    String manageByLabelNS = \"weblogic1\" + domain1Namespace;\n+    String manageByLabelDomainUid = \"weblogic1\" + domain1Uid;\n+    String domain3NS = \"atest-\" +  domain1Namespace;\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp1NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp2NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(domain3NS));\n+    installAndVerifyOperatorCanManageDomainByNSRegExp(manageByExp1NS, manageByExp2NS,\n+        manageByExpDomain1Uid, manageByExpDomain2Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain will not start for specific NS and default\n+    checkPodNotCreated(domain3Uid + adminServerPrefix, domain3Uid, domain3Namespace);\n+    checkDomainNotStartedInDefaultNS(\"RegExp\");\n+    //verify that operator can't start domain if namespace does not start from test\n+    createSecrets(domain3NS);\n+    checkPodNotCreated(domain3Uid + adminServerPrefix, domain3Uid, domain3NS);\n+\n+    // install  operator sharing same domain\n+    checkSecondOperatorFailedToShareSameNS(manageByExp1NS);\n+    switchNSManagementToLabelSelectUsingUpgradeOperator(manageByLabelNS, manageByExp1NS,\n+        manageByLabelDomainUid, manageByExpDomain1Uid);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1.\n+   * Deploy a custom domain resource in the namespace with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   * Verify operator can't start another domain with namespace2 with label2.\n+   * Modify namespace2 to set label1, verify that operator can manage it.\n+   * Verify that domainNamespaces field will be ignored and domain will not start for namespaces:\n+   * (domain3Namespace) and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade operator to replace namespace management using RegExp namespaces.\n+   * Verify it can manage added domain and can't manage old domain by scaling .\n+   * Verify that upgrade helm fail if try to add domain, managed by other operator.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using label namespace management\")\n+  public void testNsManageByLabel() {\n+    String manageByLabelDomain1NS = domain1Namespace;\n+    String manageByLabelDomain2NS = domain2Namespace;\n+    String manageByExpDomainUid = \"weblogic2\" + domain2Namespace;\n+    String manageByExpDomainNS = \"weblogic2\" + domain2Namespace;\n+    String manageByLabelDomain1Uid = domain1Uid;\n+    String manageByLabelDomain2Uid = domain2Uid;\n+    installAndVerifyOperatorCanManageDomainByLabelSelector(manageByLabelDomain1NS, manageByLabelDomain2NS,\n+        manageByLabelDomain1Uid, manageByLabelDomain2Uid);\n+    addExtraDomainByAddingLabelToNS(labels1, manageByLabelDomain2NS, manageByLabelDomain2Uid);\n+    checkDomainNotStartedInDefaultNS(\"SelectLabel\");\n+    checkSecondOperatorFailedToShareSameNS(manageByLabelDomain1NS);\n+    switchNSManagementToRegExpUsingUpgradeOperator(manageByLabelDomain1NS, manageByExpDomainNS,\n+        manageByLabelDomain1Uid, manageByExpDomainUid);\n+    checkUpgradeFailedToAddNSManagedByAnotherOperator();\n+  }\n+\n+  /**\n+   * Create namespace ns1 with no label\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1 and enableRbac=false.\n+   * Add label1 to ns1 and verify domain can't be started\n+   * Call upgrade operator with reuse values to enable management for ns1\n+   * Deploy a custom domain resource in the namespace ns1 with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   */\n+  @Test\n+  @Order(3)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" with enableClusterRoleBinding\")\n+  public void testSwitchRbac() {\n+    String manageByLabelDomainNS = domain1Namespace + \"test4\";\n+    String manageByLabelDomainUid = domain1Uid + \"test4\";\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelDomainNS));\n+    opHelmParams4 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        op4Namespace, \"LabelSelector\",\n+        \"mytest4\", false);\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest4\", manageByLabelDomainUid);\n+    assertDoesNotThrow(() -> addLabelsToNamespace(manageByLabelDomainNS, labels));\n+    //verify domain can't be started because operator does not have permission to manage it\n+    createSecrets(manageByLabelDomainNS);\n+    checkPodNotCreated(manageByLabelDomainUid + adminServerPrefix, manageByLabelDomainUid, manageByLabelDomainNS);\n+    deleteDomainCrd(manageByLabelDomainNS, manageByLabelDomainUid);\n+    //upgrade operator and start domain\n+    int externalRestHttpsPort = getServiceNodePort(op4Namespace, \"external-weblogic-operator-svc\");\n+\n+    OperatorParams opParams = new OperatorParams()\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .helmParams(opHelmParams4);\n+\n+    assertTrue(upgradeAndVerifyOperator(op4Namespace, opParams));\n+    assertTrue(startDomain(manageByLabelDomainNS, manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(op4Namespace, manageByLabelDomainUid);\n+  }\n+\n+  private void checkUpgradeFailedToAddNSManagedByAnotherOperator() {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    // for ns names starting from weblogic, there one of domains\n+    //in namespace weblogic* is managed by operator2\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams1)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic\");\n+\n+    assertFalse(upgradeAndVerifyOperator(opNamespace, opParams), \"Upgrade does not fail when adding domain,\"\n+        + \" managed by other operator\");\n+  }\n+\n+  private void switchNSManagementToRegExpUsingUpgradeOperator(String manageByLabelNS,\n+                                                              String manageByExpNS,\n+                                                              String manageByLabelDomainUid,\n+                                                              String manageByExpDomainUid) {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    assertDoesNotThrow(() -> createNamespace(manageByExpNS));\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams1)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic2\");\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespace, opParams));\n+\n+    //verify domain is started in namespace with name starting with weblogic* and operator can scale it.\n+    createSecrets(manageByExpNS);\n+    assertTrue(startDomain(manageByExpNS,manageByExpDomainUid));\n+    checkOperatorCanScaleDomain(opNamespace,manageByExpDomainUid);\n+    //verify operator can't manage anymore domain running in the namespace with label\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespace, manageByLabelDomainUid, manageByLabelNS),\n+        \"Operator can still manage domain \"\n+        + manageByLabelDomainUid + \" in the namespace \" + manageByLabelNS);\n+  }\n+\n+  private void addExtraDomainByAddingLabelToNS(Map<String, String> labels, String domainNS, String domainUid) {\n+    deleteDomainCrd(domainNS, domainUid);\n+\n+    //switch to the label1, managed by operator and verify domain is started and can be managed by operator.\n+    setLabelToNamespace(domainNS, labels);\n+    assertTrue(startDomain(domainNS, domainUid));\n+    checkOperatorCanScaleDomain(opNamespace, domainUid);\n+  }\n+\n+  private void deleteDomainCrd(String domainNS, String domainUid) {\n+    //clean up domain resources in namespace and set namespace to label , managed by operator\n+    logger.info(\"deleting domain custom resource {0}\", domainUid);\n+    assertTrue(deleteDomainCustomResource(domainUid, domainNS));\n+\n+    // wait until domain was deleted\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be deleted in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNS,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainDoesNotExist(domainUid, DOMAIN_VERSION, domainNS));\n+  }\n+\n+  private void installAndVerifyOperatorCanManageDomainByLabelSelector(String manageByLabelDomain1NS,\n+                                                                      String manageByLabelDomain2NS,\n+                                                                      String manageByLabelDomain1Uid,\n+                                                                      String manageByLabelDomain2Uid) {\n+    // install and verify operator set to manage domains based on LabelSelector strategy,\n+    // domainNamespaces set to domain4 will be ignored\n+    opHelmParams1 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        opNamespace, \"LabelSelector\",\n+        OPERATOR_RELEASE_NAME, true, manageByLabelDomain1NS);\n+\n+    logger.info(\"Installing and verifying domain1\");\n+    createSecrets(manageByLabelDomain1NS);\n+    assertTrue(startDomain(manageByLabelDomain1NS, manageByLabelDomain1Uid),\n+        \"can't start or verify domain in namespace \" + manageByLabelDomain1NS);\n+\n+    checkOperatorCanScaleDomain(opNamespace, manageByLabelDomain1Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain4 will not start\n+    createSecrets(domain4Namespace);\n+    checkPodNotCreated(domain4Uid + adminServerPrefix, domain4Uid, domain4Namespace);\n+\n+    //verify that domain2 in namespace with no label2 will not start\n+    createSecrets(manageByLabelDomain2NS);\n+    checkPodNotCreated(manageByLabelDomain2Uid + adminServerPrefix, manageByLabelDomain2Uid, manageByLabelDomain2NS);\n+  }\n+\n+  private boolean isOperatorFailedToScaleDomain(String opNamespace, String domainUid, String domainNamespace) {\n+    try {\n+      //check operator can't manage domainNamespace by trying to scale domain\n+      int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+      String managedServerPodNamePrefix = domainUid + \"-managed-server\";\n+      String opServiceAccount = OPERATOR_RELEASE_NAME + \"-sa\";\n+      scaleAndVerifyCluster(\"cluster-1\", domainUid, domainNamespace,\n+          managedServerPodNamePrefix, 2, 1,\n+          true, externalRestHttpsPort, opNamespace, opServiceAccount,\n+          false, \"\", \"scaleDown\", 1, \"\", \"\", null, null);\n+      return false;\n+\n+    } catch (ConditionTimeoutException ex) {\n+      logger.info(\"Received expected error \" + ex.getMessage());\n+      return true;\n+    }\n+  }\n+\n+  private static void setLabelToNamespace(String domainNS, Map<String, String> labels) {\n+    //add label to domain namespace\n+    V1Namespace namespaceObject1 = assertDoesNotThrow(() -> Kubernetes.getNamespaceAsObject(domainNS));\n+    assertNotNull(namespaceObject1, \"Can't find namespace with name \" + domainNS);\n+    namespaceObject1.getMetadata().setLabels(labels);\n+    assertDoesNotThrow(() -> Kubernetes.replaceNamespace(namespaceObject1));\n+  }\n+\n+  private void checkOperatorCanScaleDomain(String opNamespace, String domainUid) {\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    assertTrue(scaleClusterWithRestApi(domainUid, clusterName, 3,\n+        externalRestHttpsPort, opNamespace, OPERATOR_RELEASE_NAME + \"-sa\"),\n+        \"Domain \" + domainUid + \" scaling operation failed\");\n+  }\n+\n+  private void checkSecondOperatorFailedToShareSameNS(String domainNamespace) {\n+    // try to install another operator sharing same domain namespace via different domainNsSelectionStrategy\n+    try {\n+      HelmParams opHelmParams3 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+          op3Namespace, \"List\",\n+          null, true, domainNamespace);\n+      assertNull(opHelmParams3, \"Operator helm chart sharing same NS with other operator did not fail\");\n+    } catch (org.opentest4j.AssertionFailedError ex) {\n+      //expecting to fail\n+      logger.info(\"Helm installation failed as expected \" + ex.getMessage());\n+    }\n+  }\n+\n+  private void checkDomainNotStartedInDefaultNS(String domainNsSelectionStrategy) {\n+    //verify operator can't start domain in the default namespace when domainNsSelectionStrategy not List\n+    // and selector does not match default\n+    checkPodNotCreated(\"defaultuid\" + adminServerPrefix, \"defaultuid\", \"default\");\n+\n+    logger.info(\"Delete defaultuid custom resource in namespace {0}\", \"default\");\n+    deleteDomainCustomResource(\"defaultuid\", \"default\");\n+    logger.info(\"Deleted Domain Custom Resource \" + \"defaultuid\");\n+  }\n+\n+  private void switchNSManagementToLabelSelectUsingUpgradeOperator(String manageByLabelNS,\n+                                                                   String manageByExpNS,\n+                                                                   String manageByLabelDomainUid,\n+                                                                   String manageByExpDomainUid) {\n+\n+    //upgrade operator to manage domains with Labeled namespaces\n+    int externalRestHttpsPort = getServiceNodePort(op2Namespace, \"external-weblogic-operator-svc\");\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelNS));\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest\", \"weblogic2\");\n+    setLabelToNamespace(manageByLabelNS, labels);\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams2)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceLabelSelector(\"mytest\")\n+        .domainNamespaceSelectionStrategy(\"LabelSelector\");\n+\n+    assertTrue(upgradeAndVerifyOperator(op2Namespace, opParams));\n+\n+    //verify domain is started\n+    createSecrets(manageByLabelNS);\n+    assertTrue(startDomain(manageByLabelNS,manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(op2Namespace,manageByLabelDomainUid);\n+    //check operator can't manage anymore manageByExpNS", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgzMDE2OA=="}, "originalCommit": {"oid": "2f7e78cece4496d7be6e42ec72deec2f2648b5d3"}, "originalPosition": 536}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTYyMDkyOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMDowNjo1NlrOHcr8XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzo1Njo1OFrOHd_FkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg0MjE0MA==", "bodyText": "use checkPodDoesNotExist in CommonTestUtils", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r499842140", "createdAt": "2020-10-05T20:06:56Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,824 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretList;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DEFAULT_EXTERNAL_REST_IDENTITY_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorImageName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.installOperator;\n+import static oracle.weblogic.kubernetes.actions.TestActions.listSecrets;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.checkHelmReleaseStatus;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorRestServiceRunning;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createExternalRestIdentitySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String opNamespace = null;\n+  private static String op2Namespace = null;\n+  private static String op3Namespace = null;\n+  private static String op4Namespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"managensdomain1\";\n+  private final String domain2Uid = \"managensdomain2\";\n+  private final String domain3Uid = \"managensdomain3\";\n+  private final String domain4Uid = \"managensdomain4\";\n+\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams opHelmParams1;\n+  private HelmParams opHelmParams2;\n+  private HelmParams opHelmParams4;\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // get a unique operator 2 namespace\n+    logger.info(\"Getting a unique namespace for operator 2\");\n+    assertNotNull(namespaces.get(5), \"Namespace list is null\");\n+    op2Namespace = namespaces.get(5);\n+\n+    // get a unique operator 3 namespace\n+    logger.info(\"Getting a unique namespace for operator 3\");\n+    assertNotNull(namespaces.get(6), \"Namespace list is null\");\n+    op3Namespace = namespaces.get(6);\n+\n+    // get a unique operator 4 namespace\n+    logger.info(\"Getting a unique namespace for operator 4\");\n+    assertNotNull(namespaces.get(7), \"Namespace list is null\");\n+    op4Namespace = namespaces.get(7);\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+    createSecrets(domain3Namespace);\n+    createSecrets(\"default\");\n+    labels1 = new java.util.HashMap<>();\n+    labels1.put(OPERATOR_RELEASE_NAME, OPERATOR_RELEASE_NAME);\n+    labels2 = new java.util.HashMap<>();\n+    labels2.put(OPERATOR_RELEASE_NAME + \"2\", OPERATOR_RELEASE_NAME);\n+    setLabelToNamespace(domain1Namespace, labels1);\n+    setLabelToNamespace(domain2Namespace, labels2);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+\n+    // Delete domain custom resource\n+    logger.info(\"Delete domain1 custom resource in namespace {0}\", domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid, domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \" from \" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2 custom resource in namespace {0}\", domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid, domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \" from \" + domain2Namespace);\n+\n+    logger.info(\"Delete domain3 custom resource in namespace {0}\", domain3Namespace);\n+    deleteDomainCustomResource(domain3Uid, domain3Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain3Uid);\n+\n+    logger.info(\"Delete domain4 custom resource in namespace {0}\", domain4Namespace);\n+    deleteDomainCustomResource(domain4Uid, domain4Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain4Uid);\n+\n+    logger.info(\"Delete domain1test custom resource in namespace {0}\", \"test-\" + domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid + \"test\", \"test-\" + domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \"test from test-\" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2test custom resource in namespace {0}\", \"test-\" + domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid + \"test\", \"test-\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \"test from test-\" + domain2Namespace);\n+\n+    logger.info(\"Delete weblogic custom resource in namespace {0}\", \"weblogic\" + domain2Namespace);\n+    deleteDomainCustomResource(\"weblogic\", \"weblogic\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource weblogic from weblogic\" + domain2Namespace);\n+\n+    deleteSecrets(\"default\");\n+    deleteSecrets(\"atest-\" +  domain1Namespace);;\n+    deleteNamespace(\"atest-\" + domain1Namespace);\n+    //delete operator\n+    uninstallOperator(opHelmParams1);\n+    uninstallOperator(opHelmParams2);\n+    uninstallOperator(opHelmParams4);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=RegExp,\n+   * and domainNamespaceRegExp=^test and domainNamespace= domain3NS.\n+   * Deploy two custom domain resources in the two different namespaces with names starting with test\n+   * and verify all server pods in the domains were created and ready.\n+   * Verify operator is able to manage these domains by scaling.\n+   * Try to start another domain with namespace domain3NS. Verify it is not started by operator\n+   * and value of domainNamespace is ignored for both specific namespace and default.\n+   * Upgrade helm chart to switch to using LabelSelector, start domain and verify operator can scale it.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using expression namespace management\")\n+  public void testNsManageByExp() {\n+    //create domain namespace\n+    String manageByExp1NS = \"test-\" +  domain1Namespace;\n+    String manageByExp2NS = \"test-\" +  domain2Namespace;\n+    String manageByExpDomain1Uid = \"test-\" + domain1Uid;\n+    String manageByExpDomain2Uid = \"test-\" + domain2Uid;\n+    String manageByLabelNS = \"weblogic1\" + domain1Namespace;\n+    String manageByLabelDomainUid = \"weblogic1\" + domain1Uid;\n+    String domain3NS = \"atest-\" +  domain1Namespace;\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp1NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp2NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(domain3NS));\n+    installAndVerifyOperatorCanManageDomainByNSRegExp(manageByExp1NS, manageByExp2NS,\n+        manageByExpDomain1Uid, manageByExpDomain2Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain will not start for specific NS and default\n+    checkPodNotCreated(domain3Uid + adminServerPrefix, domain3Uid, domain3Namespace);\n+    checkDomainNotStartedInDefaultNS(\"RegExp\");\n+    //verify that operator can't start domain if namespace does not start from test\n+    createSecrets(domain3NS);\n+    checkPodNotCreated(domain3Uid + adminServerPrefix, domain3Uid, domain3NS);\n+\n+    // install  operator sharing same domain\n+    checkSecondOperatorFailedToShareSameNS(manageByExp1NS);\n+    switchNSManagementToLabelSelectUsingUpgradeOperator(manageByLabelNS, manageByExp1NS,\n+        manageByLabelDomainUid, manageByExpDomain1Uid);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1.\n+   * Deploy a custom domain resource in the namespace with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   * Verify operator can't start another domain with namespace2 with label2.\n+   * Modify namespace2 to set label1, verify that operator can manage it.\n+   * Verify that domainNamespaces field will be ignored and domain will not start for namespaces:\n+   * (domain3Namespace) and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade operator to replace namespace management using RegExp namespaces.\n+   * Verify it can manage added domain and can't manage old domain by scaling .\n+   * Verify that upgrade helm fail if try to add domain, managed by other operator.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using label namespace management\")\n+  public void testNsManageByLabel() {\n+    String manageByLabelDomain1NS = domain1Namespace;\n+    String manageByLabelDomain2NS = domain2Namespace;\n+    String manageByExpDomainUid = \"weblogic2\" + domain2Namespace;\n+    String manageByExpDomainNS = \"weblogic2\" + domain2Namespace;\n+    String manageByLabelDomain1Uid = domain1Uid;\n+    String manageByLabelDomain2Uid = domain2Uid;\n+    installAndVerifyOperatorCanManageDomainByLabelSelector(manageByLabelDomain1NS, manageByLabelDomain2NS,\n+        manageByLabelDomain1Uid, manageByLabelDomain2Uid);\n+    addExtraDomainByAddingLabelToNS(labels1, manageByLabelDomain2NS, manageByLabelDomain2Uid);\n+    checkDomainNotStartedInDefaultNS(\"SelectLabel\");\n+    checkSecondOperatorFailedToShareSameNS(manageByLabelDomain1NS);\n+    switchNSManagementToRegExpUsingUpgradeOperator(manageByLabelDomain1NS, manageByExpDomainNS,\n+        manageByLabelDomain1Uid, manageByExpDomainUid);\n+    checkUpgradeFailedToAddNSManagedByAnotherOperator();\n+  }\n+\n+  /**\n+   * Create namespace ns1 with no label\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1 and enableRbac=false.\n+   * Add label1 to ns1 and verify domain can't be started\n+   * Call upgrade operator with reuse values to enable management for ns1\n+   * Deploy a custom domain resource in the namespace ns1 with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   */\n+  @Test\n+  @Order(3)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" with enableClusterRoleBinding\")\n+  public void testSwitchRbac() {\n+    String manageByLabelDomainNS = domain1Namespace + \"test4\";\n+    String manageByLabelDomainUid = domain1Uid + \"test4\";\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelDomainNS));\n+    opHelmParams4 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        op4Namespace, \"LabelSelector\",\n+        \"mytest4\", false);\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest4\", manageByLabelDomainUid);\n+    assertDoesNotThrow(() -> addLabelsToNamespace(manageByLabelDomainNS, labels));\n+    //verify domain can't be started because operator does not have permission to manage it\n+    createSecrets(manageByLabelDomainNS);\n+    checkPodNotCreated(manageByLabelDomainUid + adminServerPrefix, manageByLabelDomainUid, manageByLabelDomainNS);\n+    deleteDomainCrd(manageByLabelDomainNS, manageByLabelDomainUid);\n+    //upgrade operator and start domain\n+    int externalRestHttpsPort = getServiceNodePort(op4Namespace, \"external-weblogic-operator-svc\");\n+\n+    OperatorParams opParams = new OperatorParams()\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .helmParams(opHelmParams4);\n+\n+    assertTrue(upgradeAndVerifyOperator(op4Namespace, opParams));\n+    assertTrue(startDomain(manageByLabelDomainNS, manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(op4Namespace, manageByLabelDomainUid);\n+  }\n+\n+  private void checkUpgradeFailedToAddNSManagedByAnotherOperator() {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    // for ns names starting from weblogic, there one of domains\n+    //in namespace weblogic* is managed by operator2\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams1)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic\");\n+\n+    assertFalse(upgradeAndVerifyOperator(opNamespace, opParams), \"Upgrade does not fail when adding domain,\"\n+        + \" managed by other operator\");\n+  }\n+\n+  private void switchNSManagementToRegExpUsingUpgradeOperator(String manageByLabelNS,\n+                                                              String manageByExpNS,\n+                                                              String manageByLabelDomainUid,\n+                                                              String manageByExpDomainUid) {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    assertDoesNotThrow(() -> createNamespace(manageByExpNS));\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams1)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic2\");\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespace, opParams));\n+\n+    //verify domain is started in namespace with name starting with weblogic* and operator can scale it.\n+    createSecrets(manageByExpNS);\n+    assertTrue(startDomain(manageByExpNS,manageByExpDomainUid));\n+    checkOperatorCanScaleDomain(opNamespace,manageByExpDomainUid);\n+    //verify operator can't manage anymore domain running in the namespace with label\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespace, manageByLabelDomainUid, manageByLabelNS),\n+        \"Operator can still manage domain \"\n+        + manageByLabelDomainUid + \" in the namespace \" + manageByLabelNS);\n+  }\n+\n+  private void addExtraDomainByAddingLabelToNS(Map<String, String> labels, String domainNS, String domainUid) {\n+    deleteDomainCrd(domainNS, domainUid);\n+\n+    //switch to the label1, managed by operator and verify domain is started and can be managed by operator.\n+    setLabelToNamespace(domainNS, labels);\n+    assertTrue(startDomain(domainNS, domainUid));\n+    checkOperatorCanScaleDomain(opNamespace, domainUid);\n+  }\n+\n+  private void deleteDomainCrd(String domainNS, String domainUid) {\n+    //clean up domain resources in namespace and set namespace to label , managed by operator\n+    logger.info(\"deleting domain custom resource {0}\", domainUid);\n+    assertTrue(deleteDomainCustomResource(domainUid, domainNS));\n+\n+    // wait until domain was deleted\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be deleted in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNS,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainDoesNotExist(domainUid, DOMAIN_VERSION, domainNS));\n+  }\n+\n+  private void installAndVerifyOperatorCanManageDomainByLabelSelector(String manageByLabelDomain1NS,\n+                                                                      String manageByLabelDomain2NS,\n+                                                                      String manageByLabelDomain1Uid,\n+                                                                      String manageByLabelDomain2Uid) {\n+    // install and verify operator set to manage domains based on LabelSelector strategy,\n+    // domainNamespaces set to domain4 will be ignored\n+    opHelmParams1 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        opNamespace, \"LabelSelector\",\n+        OPERATOR_RELEASE_NAME, true, manageByLabelDomain1NS);\n+\n+    logger.info(\"Installing and verifying domain1\");\n+    createSecrets(manageByLabelDomain1NS);\n+    assertTrue(startDomain(manageByLabelDomain1NS, manageByLabelDomain1Uid),\n+        \"can't start or verify domain in namespace \" + manageByLabelDomain1NS);\n+\n+    checkOperatorCanScaleDomain(opNamespace, manageByLabelDomain1Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain4 will not start\n+    createSecrets(domain4Namespace);\n+    checkPodNotCreated(domain4Uid + adminServerPrefix, domain4Uid, domain4Namespace);\n+\n+    //verify that domain2 in namespace with no label2 will not start\n+    createSecrets(manageByLabelDomain2NS);\n+    checkPodNotCreated(manageByLabelDomain2Uid + adminServerPrefix, manageByLabelDomain2Uid, manageByLabelDomain2NS);\n+  }\n+\n+  private boolean isOperatorFailedToScaleDomain(String opNamespace, String domainUid, String domainNamespace) {\n+    try {\n+      //check operator can't manage domainNamespace by trying to scale domain\n+      int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+      String managedServerPodNamePrefix = domainUid + \"-managed-server\";\n+      String opServiceAccount = OPERATOR_RELEASE_NAME + \"-sa\";\n+      scaleAndVerifyCluster(\"cluster-1\", domainUid, domainNamespace,\n+          managedServerPodNamePrefix, 2, 1,\n+          true, externalRestHttpsPort, opNamespace, opServiceAccount,\n+          false, \"\", \"scaleDown\", 1, \"\", \"\", null, null);\n+      return false;\n+\n+    } catch (ConditionTimeoutException ex) {\n+      logger.info(\"Received expected error \" + ex.getMessage());\n+      return true;\n+    }\n+  }\n+\n+  private static void setLabelToNamespace(String domainNS, Map<String, String> labels) {\n+    //add label to domain namespace\n+    V1Namespace namespaceObject1 = assertDoesNotThrow(() -> Kubernetes.getNamespaceAsObject(domainNS));\n+    assertNotNull(namespaceObject1, \"Can't find namespace with name \" + domainNS);\n+    namespaceObject1.getMetadata().setLabels(labels);\n+    assertDoesNotThrow(() -> Kubernetes.replaceNamespace(namespaceObject1));\n+  }\n+\n+  private void checkOperatorCanScaleDomain(String opNamespace, String domainUid) {\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    assertTrue(scaleClusterWithRestApi(domainUid, clusterName, 3,\n+        externalRestHttpsPort, opNamespace, OPERATOR_RELEASE_NAME + \"-sa\"),\n+        \"Domain \" + domainUid + \" scaling operation failed\");\n+  }\n+\n+  private void checkSecondOperatorFailedToShareSameNS(String domainNamespace) {\n+    // try to install another operator sharing same domain namespace via different domainNsSelectionStrategy\n+    try {\n+      HelmParams opHelmParams3 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+          op3Namespace, \"List\",\n+          null, true, domainNamespace);\n+      assertNull(opHelmParams3, \"Operator helm chart sharing same NS with other operator did not fail\");\n+    } catch (org.opentest4j.AssertionFailedError ex) {\n+      //expecting to fail\n+      logger.info(\"Helm installation failed as expected \" + ex.getMessage());\n+    }\n+  }\n+\n+  private void checkDomainNotStartedInDefaultNS(String domainNsSelectionStrategy) {\n+    //verify operator can't start domain in the default namespace when domainNsSelectionStrategy not List\n+    // and selector does not match default\n+    checkPodNotCreated(\"defaultuid\" + adminServerPrefix, \"defaultuid\", \"default\");\n+\n+    logger.info(\"Delete defaultuid custom resource in namespace {0}\", \"default\");\n+    deleteDomainCustomResource(\"defaultuid\", \"default\");\n+    logger.info(\"Deleted Domain Custom Resource \" + \"defaultuid\");\n+  }\n+\n+  private void switchNSManagementToLabelSelectUsingUpgradeOperator(String manageByLabelNS,\n+                                                                   String manageByExpNS,\n+                                                                   String manageByLabelDomainUid,\n+                                                                   String manageByExpDomainUid) {\n+\n+    //upgrade operator to manage domains with Labeled namespaces\n+    int externalRestHttpsPort = getServiceNodePort(op2Namespace, \"external-weblogic-operator-svc\");\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelNS));\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest\", \"weblogic2\");\n+    setLabelToNamespace(manageByLabelNS, labels);\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams2)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceLabelSelector(\"mytest\")\n+        .domainNamespaceSelectionStrategy(\"LabelSelector\");\n+\n+    assertTrue(upgradeAndVerifyOperator(op2Namespace, opParams));\n+\n+    //verify domain is started\n+    createSecrets(manageByLabelNS);\n+    assertTrue(startDomain(manageByLabelNS,manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(op2Namespace,manageByLabelDomainUid);\n+    //check operator can't manage anymore manageByExpNS\n+    assertTrue(isOperatorFailedToScaleDomain(op2Namespace, manageByExpDomainUid,\n+        manageByExpNS), \"Operator can still manage domain \"\n+        + manageByExpNS + \" in the namespace \" + manageByExpNS);\n+  }\n+\n+  private void installAndVerifyOperatorCanManageDomainByNSRegExp(String manageByExp1NS,\n+                                                                 String manageByExp2NS,\n+                                                                 String manageByExpDomain1Uid,\n+                                                                 String manageByExpDomain2Uid) {\n+    // install and verify operator with domainNsSelectStrategy=RegExp to manage domains with namespaces names,\n+    // starting from test\n+    opHelmParams2 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        op2Namespace, \"RegExp\", \"^test\", true, domain3Namespace);\n+\n+    logger.info(\"Installing and verifying domain1\");\n+    createSecrets(manageByExp1NS);\n+    assertTrue(startDomain(manageByExp1NS, manageByExpDomain1Uid),\n+        \"can't start or verify domain in namespace \" + manageByExp1NS);\n+    checkOperatorCanScaleDomain(op2Namespace, manageByExpDomain1Uid);\n+\n+    logger.info(\"Installing and verifying domain2\");\n+    createSecrets(manageByExp2NS);\n+    assertTrue(startDomain(manageByExp2NS, manageByExpDomain2Uid),\n+        \"operator can start or verify domain in namespace \" + manageByExp2NS);\n+    checkOperatorCanScaleDomain(op2Namespace, manageByExpDomain2Uid);\n+  }\n+\n+\n+  private boolean startDomain(String domainNamespace, String domainUid) {\n+\n+    // create and verify the domain\n+    logger.info(\"Creating and verifying model in image domain\");\n+    try {\n+      Domain domain = createDomainCRD(domainNamespace, domainUid);\n+      createVerifyDomain(domainNamespace, domainUid, miiImage, domain);\n+      return true;\n+    } catch (Exception ex) {\n+      logger.info(\"Failed to createVerifyDomain \" + ex.getMessage());\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * Create a model in image domain crd.\n+   */\n+  private Domain createDomainCRD(String domainNamespace, String domainUid) {\n+\n+    // construct a list of oracle.weblogic.domain.Cluster objects to be used in the domain custom resource\n+    List<Cluster> clusters = new ArrayList<>();\n+    clusters.add(new Cluster()\n+        .clusterName(clusterName)\n+        .replicas(replicaCount)\n+        .serverStartState(\"RUNNING\"));\n+\n+    // create the domain CR\n+    Domain domain = new Domain()\n+        .apiVersion(DOMAIN_API_VERSION)\n+        .kind(\"Domain\")\n+        .metadata(new V1ObjectMeta()\n+            .name(domainUid)\n+            .namespace(domainNamespace))\n+        .spec(new DomainSpec()\n+            .domainUid(domainUid)\n+            .domainHomeSourceType(\"FromModel\")\n+            .image(miiImage)\n+            .addImagePullSecretsItem(new V1LocalObjectReference()\n+                .name(REPO_SECRET_NAME))\n+            .webLogicCredentialsSecret(new V1SecretReference()\n+                .name(adminSecretName)\n+                .namespace(domainNamespace))\n+            .includeServerOutInPodLog(true)\n+            .serverStartPolicy(\"IF_NEEDED\")\n+            .serverPod(new ServerPod()\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"JAVA_OPTIONS\")\n+                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"USER_MEM_ARGS\")\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n+            .adminServer(new AdminServer()\n+                .serverStartState(\"RUNNING\")\n+                .adminService(new oracle.weblogic.domain.AdminService()\n+                    .addChannelsItem(new oracle.weblogic.domain.Channel()\n+                        .channelName(\"default\")\n+                        .nodePort(0))))\n+            .clusters(clusters)\n+            .configuration(new Configuration()\n+                .model(new Model()\n+                    .domainType(WLS_DOMAIN_TYPE)\n+                    .runtimeEncryptionSecret(encryptionSecretName))));\n+    return domain;\n+  }\n+\n+  private static void createSecrets(String domainNamespace) {\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    if (!domainNamespace.equals(\"default\")) {\n+      createDockerRegistrySecret(domainNamespace);\n+    }\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create encryption secret\n+    logger.info(\"Creating encryption secret\");\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+  }\n+\n+  private static void deleteSecrets(String domainNamespace) {\n+    logger.info(\"Deleting docker registry secret in namespace {0}\", domainNamespace);\n+    if (!domainNamespace.equals(\"default\")) {\n+      deleteSecret(OCR_SECRET_NAME, domainNamespace);\n+    }\n+\n+    // delete secret for admin credentials\n+    logger.info(\"Deleting secret for admin credentials\");\n+    deleteSecret(adminSecretName, domainNamespace);\n+\n+    // delete encryption secret\n+    logger.info(\"Deleting encryption secret\");\n+    deleteSecret(encryptionSecretName, domainNamespace);\n+  }\n+\n+  private void createVerifyDomain(String domainNamespace, String domainUid, String miiImage, Domain domain) {\n+    // create domain\n+    logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+        domainUid, domainNamespace, miiImage);\n+    createDomainAndVerify(domain, domainNamespace);\n+    String adminServerPodName = domainUid + adminServerPrefix;\n+    // check that admin server pod exists in the domain namespace\n+    logger.info(\"Checking that admin server pod {0} exists in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReadyAndServiceExists(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check for managed server pods existence in the domain namespace\n+    for (int i = 1; i <= replicaCount; i++) {\n+      String managedServerPodName = domainUid + managedServerPrefix + i;\n+\n+      // check that the managed server pod exists\n+      logger.info(\"Checking that managed server pod {0} exists in namespace {1}\",\n+          managedServerPodName, domainNamespace);\n+      checkPodReadyAndServiceExists(managedServerPodName, domainUid, domainNamespace);\n+    }\n+  }\n+\n+  /**\n+   * Install WebLogic operator and wait up to two minutes until the operator pod is ready.\n+   *\n+   * @param operNamespace the operator namespace in which the operator will be installed\n+   * @param opReleaseName the operator release name\n+   * @param enableClusterRoleBinding operator cluster role binding\n+   * @param domainNamespace the list of the domain namespaces which will be managed by the operator\n+   * @return the operator Helm installation parameters\n+   */\n+  private static HelmParams installOperatorHelmChart(String opReleaseName, String operNamespace,\n+                                                     String domainNsSelectionStrategy,\n+                                                     String domainNsSelector,\n+                                                     boolean enableClusterRoleBinding,\n+                                                     String... domainNamespace) {\n+    LoggingFacade logger = getLogger();\n+\n+    HelmParams opHelmParams = new HelmParams().releaseName(opReleaseName)\n+        .namespace(operNamespace)\n+        .chartDir(OPERATOR_CHART_DIR);\n+\n+    // Create a service account for the unique operNamespace\n+    logger.info(\"Creating service account\");\n+    assertDoesNotThrow(() -> createServiceAccount(new V1ServiceAccount()\n+        .metadata(new V1ObjectMeta()\n+            .namespace(operNamespace)\n+            .name(opReleaseName + \"-sa\"))));\n+    logger.info(\"Created service account: {0}\", opReleaseName + \"-sa\");\n+\n+\n+    // get operator image name\n+    String operatorImage = getOperatorImageName();\n+    assertFalse(operatorImage.isEmpty(), \"operator image name can not be empty\");\n+    logger.info(\"operator image name {0}\", operatorImage);\n+\n+\n+    V1SecretList listSecrets = listSecrets(operNamespace);\n+    if (null != listSecrets) {\n+      for (V1Secret item : listSecrets.getItems()) {\n+        if (item.getMetadata().getName().equals(REPO_SECRET_NAME)) {\n+          break;\n+        }\n+      }\n+      // Create Docker registry secret in the operator namespace to pull the image from repository\n+      logger.info(\"Creating Docker registry secret in namespace {0}\", operNamespace);\n+      createDockerRegistrySecret(operNamespace);\n+    }\n+    // map with secret\n+    Map<String, Object> secretNameMap = new HashMap<>();\n+    secretNameMap.put(\"name\", REPO_SECRET_NAME);\n+\n+    // operator chart values to override\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams)\n+        .imagePullSecrets(secretNameMap)\n+        .domainNamespaces(java.util.Arrays.asList(domainNamespace))\n+        .enableClusterRoleBinding(enableClusterRoleBinding)\n+        .serviceAccount(opReleaseName + \"-sa\");\n+    if (domainNsSelectionStrategy != null) {\n+      opParams.domainNamespaceSelectionStrategy(domainNsSelectionStrategy);\n+      if (domainNsSelectionStrategy.equalsIgnoreCase(\"LabelSelector\")) {\n+        opParams.domainNamespaceLabelSelector(domainNsSelector);\n+      } else if (domainNsSelectionStrategy.equalsIgnoreCase(\"RegExp\")) {\n+        opParams.domainNamespaceRegExp(domainNsSelector);\n+      }\n+    }\n+\n+    // use default image in chart when repoUrl is set, otherwise use latest/current branch operator image\n+    if (opHelmParams.getRepoUrl() == null) {\n+      opParams.image(operatorImage);\n+    }\n+\n+    // create externalRestIdentitySecret\n+    assertTrue(createExternalRestIdentitySecret(operNamespace,\n+        DEFAULT_EXTERNAL_REST_IDENTITY_SECRET_NAME + operNamespace),\n+        \"failed to create external REST identity secret\");\n+    opParams\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(0)\n+        .externalRestIdentitySecret(DEFAULT_EXTERNAL_REST_IDENTITY_SECRET_NAME + operNamespace);\n+\n+\n+    // install operator\n+    logger.info(\"Installing operator in namespace {0}\", operNamespace);\n+\n+    assertTrue(installOperator(opParams),\n+        String.format(\"Failed to install operator in namespace %s \", operNamespace));\n+    logger.info(\"Operator installed in namespace {0}\", operNamespace);\n+\n+    // list Helm releases matching operator release name in operator namespace\n+    logger.info(\"Checking operator release {0} status in namespace {1}\",\n+        opReleaseName, operNamespace);\n+\n+    assertTrue(checkHelmReleaseStatus(opReleaseName, operNamespace, \"deployed\"),\n+        String.format(\"Operator release %s is not in %s status in namespace %s\",\n+            opReleaseName, \"deployed\", operNamespace));\n+    logger.info(\"Operator release {0} status is {1} in namespace {2}\",\n+        opReleaseName, \"deployed\", operNamespace);\n+\n+    // wait for the operator to be ready\n+    logger.info(\"Wait for the operator pod is ready in namespace {0}\", operNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for operator to be running in namespace {0} \"\n+                    + \"(elapsed time {1}ms, remaining time {2}ms)\",\n+                operNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> operatorIsReady(operNamespace),\n+            \"operatorIsReady failed with ApiException\"));\n+\n+\n+    logger.info(\"Wait for the operator external service in namespace {0}\", operNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for operator external service in namespace {0} \"\n+                    + \"(elapsed time {1}ms, remaining time {2}ms)\",\n+                operNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> operatorRestServiceRunning(operNamespace),\n+            \"operator external service is not running\"));\n+\n+    return opHelmParams;\n+  }\n+\n+  private void checkPodNotCreated(String podName, String domainUid, String domNamespace) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f7e78cece4496d7be6e42ec72deec2f2648b5d3"}, "originalPosition": 808}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIwNDM2OQ==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r501204369", "createdAt": "2020-10-07T17:56:58Z", "author": {"login": "marinakog"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,824 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretList;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1ServiceAccount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DEFAULT_EXTERNAL_REST_IDENTITY_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorImageName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.installOperator;\n+import static oracle.weblogic.kubernetes.actions.TestActions.listSecrets;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.checkHelmReleaseStatus;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorRestServiceRunning;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createExternalRestIdentitySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.dockerLoginAndPushImageToRegistry;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String opNamespace = null;\n+  private static String op2Namespace = null;\n+  private static String op3Namespace = null;\n+  private static String op4Namespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+  private static String domain3Namespace = null;\n+  private static String domain4Namespace = null;\n+\n+  // domain constants\n+  private final String domain1Uid = \"managensdomain1\";\n+  private final String domain2Uid = \"managensdomain2\";\n+  private final String domain3Uid = \"managensdomain3\";\n+  private final String domain4Uid = \"managensdomain4\";\n+\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams opHelmParams1;\n+  private HelmParams opHelmParams2;\n+  private HelmParams opHelmParams4;\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain1Namespace = namespaces.get(1);\n+\n+    // get a unique domain2 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 2\");\n+    assertNotNull(namespaces.get(2), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(2);\n+\n+    // get a unique domain3 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 3\");\n+    assertNotNull(namespaces.get(3), \"Namespace list is null\");\n+    domain3Namespace = namespaces.get(3);\n+\n+    // get a unique domain4 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain 4\");\n+    assertNotNull(namespaces.get(4), \"Namespace list is null\");\n+    domain4Namespace = namespaces.get(4);\n+\n+    // get a unique operator 2 namespace\n+    logger.info(\"Getting a unique namespace for operator 2\");\n+    assertNotNull(namespaces.get(5), \"Namespace list is null\");\n+    op2Namespace = namespaces.get(5);\n+\n+    // get a unique operator 3 namespace\n+    logger.info(\"Getting a unique namespace for operator 3\");\n+    assertNotNull(namespaces.get(6), \"Namespace list is null\");\n+    op3Namespace = namespaces.get(6);\n+\n+    // get a unique operator 4 namespace\n+    logger.info(\"Getting a unique namespace for operator 4\");\n+    assertNotNull(namespaces.get(7), \"Namespace list is null\");\n+    op4Namespace = namespaces.get(7);\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(miiImage);\n+    createSecrets(domain3Namespace);\n+    createSecrets(\"default\");\n+    labels1 = new java.util.HashMap<>();\n+    labels1.put(OPERATOR_RELEASE_NAME, OPERATOR_RELEASE_NAME);\n+    labels2 = new java.util.HashMap<>();\n+    labels2.put(OPERATOR_RELEASE_NAME + \"2\", OPERATOR_RELEASE_NAME);\n+    setLabelToNamespace(domain1Namespace, labels1);\n+    setLabelToNamespace(domain2Namespace, labels2);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+\n+    // Delete domain custom resource\n+    logger.info(\"Delete domain1 custom resource in namespace {0}\", domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid, domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \" from \" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2 custom resource in namespace {0}\", domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid, domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \" from \" + domain2Namespace);\n+\n+    logger.info(\"Delete domain3 custom resource in namespace {0}\", domain3Namespace);\n+    deleteDomainCustomResource(domain3Uid, domain3Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain3Uid);\n+\n+    logger.info(\"Delete domain4 custom resource in namespace {0}\", domain4Namespace);\n+    deleteDomainCustomResource(domain4Uid, domain4Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain4Uid);\n+\n+    logger.info(\"Delete domain1test custom resource in namespace {0}\", \"test-\" + domain1Namespace);\n+    deleteDomainCustomResource(domain1Uid + \"test\", \"test-\" + domain1Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain1Uid + \"test from test-\" + domain1Namespace);\n+\n+    logger.info(\"Delete domain2test custom resource in namespace {0}\", \"test-\" + domain2Namespace);\n+    deleteDomainCustomResource(domain2Uid + \"test\", \"test-\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource \" + domain2Uid + \"test from test-\" + domain2Namespace);\n+\n+    logger.info(\"Delete weblogic custom resource in namespace {0}\", \"weblogic\" + domain2Namespace);\n+    deleteDomainCustomResource(\"weblogic\", \"weblogic\" + domain2Namespace);\n+    logger.info(\"Deleted Domain Custom Resource weblogic from weblogic\" + domain2Namespace);\n+\n+    deleteSecrets(\"default\");\n+    deleteSecrets(\"atest-\" +  domain1Namespace);;\n+    deleteNamespace(\"atest-\" + domain1Namespace);\n+    //delete operator\n+    uninstallOperator(opHelmParams1);\n+    uninstallOperator(opHelmParams2);\n+    uninstallOperator(opHelmParams4);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=RegExp,\n+   * and domainNamespaceRegExp=^test and domainNamespace= domain3NS.\n+   * Deploy two custom domain resources in the two different namespaces with names starting with test\n+   * and verify all server pods in the domains were created and ready.\n+   * Verify operator is able to manage these domains by scaling.\n+   * Try to start another domain with namespace domain3NS. Verify it is not started by operator\n+   * and value of domainNamespace is ignored for both specific namespace and default.\n+   * Upgrade helm chart to switch to using LabelSelector, start domain and verify operator can scale it.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using expression namespace management\")\n+  public void testNsManageByExp() {\n+    //create domain namespace\n+    String manageByExp1NS = \"test-\" +  domain1Namespace;\n+    String manageByExp2NS = \"test-\" +  domain2Namespace;\n+    String manageByExpDomain1Uid = \"test-\" + domain1Uid;\n+    String manageByExpDomain2Uid = \"test-\" + domain2Uid;\n+    String manageByLabelNS = \"weblogic1\" + domain1Namespace;\n+    String manageByLabelDomainUid = \"weblogic1\" + domain1Uid;\n+    String domain3NS = \"atest-\" +  domain1Namespace;\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp1NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp2NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(domain3NS));\n+    installAndVerifyOperatorCanManageDomainByNSRegExp(manageByExp1NS, manageByExp2NS,\n+        manageByExpDomain1Uid, manageByExpDomain2Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain will not start for specific NS and default\n+    checkPodNotCreated(domain3Uid + adminServerPrefix, domain3Uid, domain3Namespace);\n+    checkDomainNotStartedInDefaultNS(\"RegExp\");\n+    //verify that operator can't start domain if namespace does not start from test\n+    createSecrets(domain3NS);\n+    checkPodNotCreated(domain3Uid + adminServerPrefix, domain3Uid, domain3NS);\n+\n+    // install  operator sharing same domain\n+    checkSecondOperatorFailedToShareSameNS(manageByExp1NS);\n+    switchNSManagementToLabelSelectUsingUpgradeOperator(manageByLabelNS, manageByExp1NS,\n+        manageByLabelDomainUid, manageByExpDomain1Uid);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1.\n+   * Deploy a custom domain resource in the namespace with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   * Verify operator can't start another domain with namespace2 with label2.\n+   * Modify namespace2 to set label1, verify that operator can manage it.\n+   * Verify that domainNamespaces field will be ignored and domain will not start for namespaces:\n+   * (domain3Namespace) and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade operator to replace namespace management using RegExp namespaces.\n+   * Verify it can manage added domain and can't manage old domain by scaling .\n+   * Verify that upgrade helm fail if try to add domain, managed by other operator.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using label namespace management\")\n+  public void testNsManageByLabel() {\n+    String manageByLabelDomain1NS = domain1Namespace;\n+    String manageByLabelDomain2NS = domain2Namespace;\n+    String manageByExpDomainUid = \"weblogic2\" + domain2Namespace;\n+    String manageByExpDomainNS = \"weblogic2\" + domain2Namespace;\n+    String manageByLabelDomain1Uid = domain1Uid;\n+    String manageByLabelDomain2Uid = domain2Uid;\n+    installAndVerifyOperatorCanManageDomainByLabelSelector(manageByLabelDomain1NS, manageByLabelDomain2NS,\n+        manageByLabelDomain1Uid, manageByLabelDomain2Uid);\n+    addExtraDomainByAddingLabelToNS(labels1, manageByLabelDomain2NS, manageByLabelDomain2Uid);\n+    checkDomainNotStartedInDefaultNS(\"SelectLabel\");\n+    checkSecondOperatorFailedToShareSameNS(manageByLabelDomain1NS);\n+    switchNSManagementToRegExpUsingUpgradeOperator(manageByLabelDomain1NS, manageByExpDomainNS,\n+        manageByLabelDomain1Uid, manageByExpDomainUid);\n+    checkUpgradeFailedToAddNSManagedByAnotherOperator();\n+  }\n+\n+  /**\n+   * Create namespace ns1 with no label\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1 and enableRbac=false.\n+   * Add label1 to ns1 and verify domain can't be started\n+   * Call upgrade operator with reuse values to enable management for ns1\n+   * Deploy a custom domain resource in the namespace ns1 with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   */\n+  @Test\n+  @Order(3)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" with enableClusterRoleBinding\")\n+  public void testSwitchRbac() {\n+    String manageByLabelDomainNS = domain1Namespace + \"test4\";\n+    String manageByLabelDomainUid = domain1Uid + \"test4\";\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelDomainNS));\n+    opHelmParams4 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        op4Namespace, \"LabelSelector\",\n+        \"mytest4\", false);\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest4\", manageByLabelDomainUid);\n+    assertDoesNotThrow(() -> addLabelsToNamespace(manageByLabelDomainNS, labels));\n+    //verify domain can't be started because operator does not have permission to manage it\n+    createSecrets(manageByLabelDomainNS);\n+    checkPodNotCreated(manageByLabelDomainUid + adminServerPrefix, manageByLabelDomainUid, manageByLabelDomainNS);\n+    deleteDomainCrd(manageByLabelDomainNS, manageByLabelDomainUid);\n+    //upgrade operator and start domain\n+    int externalRestHttpsPort = getServiceNodePort(op4Namespace, \"external-weblogic-operator-svc\");\n+\n+    OperatorParams opParams = new OperatorParams()\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .helmParams(opHelmParams4);\n+\n+    assertTrue(upgradeAndVerifyOperator(op4Namespace, opParams));\n+    assertTrue(startDomain(manageByLabelDomainNS, manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(op4Namespace, manageByLabelDomainUid);\n+  }\n+\n+  private void checkUpgradeFailedToAddNSManagedByAnotherOperator() {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    // for ns names starting from weblogic, there one of domains\n+    //in namespace weblogic* is managed by operator2\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams1)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic\");\n+\n+    assertFalse(upgradeAndVerifyOperator(opNamespace, opParams), \"Upgrade does not fail when adding domain,\"\n+        + \" managed by other operator\");\n+  }\n+\n+  private void switchNSManagementToRegExpUsingUpgradeOperator(String manageByLabelNS,\n+                                                              String manageByExpNS,\n+                                                              String manageByLabelDomainUid,\n+                                                              String manageByExpDomainUid) {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    assertDoesNotThrow(() -> createNamespace(manageByExpNS));\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams1)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic2\");\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespace, opParams));\n+\n+    //verify domain is started in namespace with name starting with weblogic* and operator can scale it.\n+    createSecrets(manageByExpNS);\n+    assertTrue(startDomain(manageByExpNS,manageByExpDomainUid));\n+    checkOperatorCanScaleDomain(opNamespace,manageByExpDomainUid);\n+    //verify operator can't manage anymore domain running in the namespace with label\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespace, manageByLabelDomainUid, manageByLabelNS),\n+        \"Operator can still manage domain \"\n+        + manageByLabelDomainUid + \" in the namespace \" + manageByLabelNS);\n+  }\n+\n+  private void addExtraDomainByAddingLabelToNS(Map<String, String> labels, String domainNS, String domainUid) {\n+    deleteDomainCrd(domainNS, domainUid);\n+\n+    //switch to the label1, managed by operator and verify domain is started and can be managed by operator.\n+    setLabelToNamespace(domainNS, labels);\n+    assertTrue(startDomain(domainNS, domainUid));\n+    checkOperatorCanScaleDomain(opNamespace, domainUid);\n+  }\n+\n+  private void deleteDomainCrd(String domainNS, String domainUid) {\n+    //clean up domain resources in namespace and set namespace to label , managed by operator\n+    logger.info(\"deleting domain custom resource {0}\", domainUid);\n+    assertTrue(deleteDomainCustomResource(domainUid, domainNS));\n+\n+    // wait until domain was deleted\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be deleted in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNS,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainDoesNotExist(domainUid, DOMAIN_VERSION, domainNS));\n+  }\n+\n+  private void installAndVerifyOperatorCanManageDomainByLabelSelector(String manageByLabelDomain1NS,\n+                                                                      String manageByLabelDomain2NS,\n+                                                                      String manageByLabelDomain1Uid,\n+                                                                      String manageByLabelDomain2Uid) {\n+    // install and verify operator set to manage domains based on LabelSelector strategy,\n+    // domainNamespaces set to domain4 will be ignored\n+    opHelmParams1 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        opNamespace, \"LabelSelector\",\n+        OPERATOR_RELEASE_NAME, true, manageByLabelDomain1NS);\n+\n+    logger.info(\"Installing and verifying domain1\");\n+    createSecrets(manageByLabelDomain1NS);\n+    assertTrue(startDomain(manageByLabelDomain1NS, manageByLabelDomain1Uid),\n+        \"can't start or verify domain in namespace \" + manageByLabelDomain1NS);\n+\n+    checkOperatorCanScaleDomain(opNamespace, manageByLabelDomain1Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain4 will not start\n+    createSecrets(domain4Namespace);\n+    checkPodNotCreated(domain4Uid + adminServerPrefix, domain4Uid, domain4Namespace);\n+\n+    //verify that domain2 in namespace with no label2 will not start\n+    createSecrets(manageByLabelDomain2NS);\n+    checkPodNotCreated(manageByLabelDomain2Uid + adminServerPrefix, manageByLabelDomain2Uid, manageByLabelDomain2NS);\n+  }\n+\n+  private boolean isOperatorFailedToScaleDomain(String opNamespace, String domainUid, String domainNamespace) {\n+    try {\n+      //check operator can't manage domainNamespace by trying to scale domain\n+      int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+      String managedServerPodNamePrefix = domainUid + \"-managed-server\";\n+      String opServiceAccount = OPERATOR_RELEASE_NAME + \"-sa\";\n+      scaleAndVerifyCluster(\"cluster-1\", domainUid, domainNamespace,\n+          managedServerPodNamePrefix, 2, 1,\n+          true, externalRestHttpsPort, opNamespace, opServiceAccount,\n+          false, \"\", \"scaleDown\", 1, \"\", \"\", null, null);\n+      return false;\n+\n+    } catch (ConditionTimeoutException ex) {\n+      logger.info(\"Received expected error \" + ex.getMessage());\n+      return true;\n+    }\n+  }\n+\n+  private static void setLabelToNamespace(String domainNS, Map<String, String> labels) {\n+    //add label to domain namespace\n+    V1Namespace namespaceObject1 = assertDoesNotThrow(() -> Kubernetes.getNamespaceAsObject(domainNS));\n+    assertNotNull(namespaceObject1, \"Can't find namespace with name \" + domainNS);\n+    namespaceObject1.getMetadata().setLabels(labels);\n+    assertDoesNotThrow(() -> Kubernetes.replaceNamespace(namespaceObject1));\n+  }\n+\n+  private void checkOperatorCanScaleDomain(String opNamespace, String domainUid) {\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    assertTrue(scaleClusterWithRestApi(domainUid, clusterName, 3,\n+        externalRestHttpsPort, opNamespace, OPERATOR_RELEASE_NAME + \"-sa\"),\n+        \"Domain \" + domainUid + \" scaling operation failed\");\n+  }\n+\n+  private void checkSecondOperatorFailedToShareSameNS(String domainNamespace) {\n+    // try to install another operator sharing same domain namespace via different domainNsSelectionStrategy\n+    try {\n+      HelmParams opHelmParams3 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+          op3Namespace, \"List\",\n+          null, true, domainNamespace);\n+      assertNull(opHelmParams3, \"Operator helm chart sharing same NS with other operator did not fail\");\n+    } catch (org.opentest4j.AssertionFailedError ex) {\n+      //expecting to fail\n+      logger.info(\"Helm installation failed as expected \" + ex.getMessage());\n+    }\n+  }\n+\n+  private void checkDomainNotStartedInDefaultNS(String domainNsSelectionStrategy) {\n+    //verify operator can't start domain in the default namespace when domainNsSelectionStrategy not List\n+    // and selector does not match default\n+    checkPodNotCreated(\"defaultuid\" + adminServerPrefix, \"defaultuid\", \"default\");\n+\n+    logger.info(\"Delete defaultuid custom resource in namespace {0}\", \"default\");\n+    deleteDomainCustomResource(\"defaultuid\", \"default\");\n+    logger.info(\"Deleted Domain Custom Resource \" + \"defaultuid\");\n+  }\n+\n+  private void switchNSManagementToLabelSelectUsingUpgradeOperator(String manageByLabelNS,\n+                                                                   String manageByExpNS,\n+                                                                   String manageByLabelDomainUid,\n+                                                                   String manageByExpDomainUid) {\n+\n+    //upgrade operator to manage domains with Labeled namespaces\n+    int externalRestHttpsPort = getServiceNodePort(op2Namespace, \"external-weblogic-operator-svc\");\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelNS));\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest\", \"weblogic2\");\n+    setLabelToNamespace(manageByLabelNS, labels);\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams2)\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceLabelSelector(\"mytest\")\n+        .domainNamespaceSelectionStrategy(\"LabelSelector\");\n+\n+    assertTrue(upgradeAndVerifyOperator(op2Namespace, opParams));\n+\n+    //verify domain is started\n+    createSecrets(manageByLabelNS);\n+    assertTrue(startDomain(manageByLabelNS,manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(op2Namespace,manageByLabelDomainUid);\n+    //check operator can't manage anymore manageByExpNS\n+    assertTrue(isOperatorFailedToScaleDomain(op2Namespace, manageByExpDomainUid,\n+        manageByExpNS), \"Operator can still manage domain \"\n+        + manageByExpNS + \" in the namespace \" + manageByExpNS);\n+  }\n+\n+  private void installAndVerifyOperatorCanManageDomainByNSRegExp(String manageByExp1NS,\n+                                                                 String manageByExp2NS,\n+                                                                 String manageByExpDomain1Uid,\n+                                                                 String manageByExpDomain2Uid) {\n+    // install and verify operator with domainNsSelectStrategy=RegExp to manage domains with namespaces names,\n+    // starting from test\n+    opHelmParams2 = installOperatorHelmChart(OPERATOR_RELEASE_NAME,\n+        op2Namespace, \"RegExp\", \"^test\", true, domain3Namespace);\n+\n+    logger.info(\"Installing and verifying domain1\");\n+    createSecrets(manageByExp1NS);\n+    assertTrue(startDomain(manageByExp1NS, manageByExpDomain1Uid),\n+        \"can't start or verify domain in namespace \" + manageByExp1NS);\n+    checkOperatorCanScaleDomain(op2Namespace, manageByExpDomain1Uid);\n+\n+    logger.info(\"Installing and verifying domain2\");\n+    createSecrets(manageByExp2NS);\n+    assertTrue(startDomain(manageByExp2NS, manageByExpDomain2Uid),\n+        \"operator can start or verify domain in namespace \" + manageByExp2NS);\n+    checkOperatorCanScaleDomain(op2Namespace, manageByExpDomain2Uid);\n+  }\n+\n+\n+  private boolean startDomain(String domainNamespace, String domainUid) {\n+\n+    // create and verify the domain\n+    logger.info(\"Creating and verifying model in image domain\");\n+    try {\n+      Domain domain = createDomainCRD(domainNamespace, domainUid);\n+      createVerifyDomain(domainNamespace, domainUid, miiImage, domain);\n+      return true;\n+    } catch (Exception ex) {\n+      logger.info(\"Failed to createVerifyDomain \" + ex.getMessage());\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * Create a model in image domain crd.\n+   */\n+  private Domain createDomainCRD(String domainNamespace, String domainUid) {\n+\n+    // construct a list of oracle.weblogic.domain.Cluster objects to be used in the domain custom resource\n+    List<Cluster> clusters = new ArrayList<>();\n+    clusters.add(new Cluster()\n+        .clusterName(clusterName)\n+        .replicas(replicaCount)\n+        .serverStartState(\"RUNNING\"));\n+\n+    // create the domain CR\n+    Domain domain = new Domain()\n+        .apiVersion(DOMAIN_API_VERSION)\n+        .kind(\"Domain\")\n+        .metadata(new V1ObjectMeta()\n+            .name(domainUid)\n+            .namespace(domainNamespace))\n+        .spec(new DomainSpec()\n+            .domainUid(domainUid)\n+            .domainHomeSourceType(\"FromModel\")\n+            .image(miiImage)\n+            .addImagePullSecretsItem(new V1LocalObjectReference()\n+                .name(REPO_SECRET_NAME))\n+            .webLogicCredentialsSecret(new V1SecretReference()\n+                .name(adminSecretName)\n+                .namespace(domainNamespace))\n+            .includeServerOutInPodLog(true)\n+            .serverStartPolicy(\"IF_NEEDED\")\n+            .serverPod(new ServerPod()\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"JAVA_OPTIONS\")\n+                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"USER_MEM_ARGS\")\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n+            .adminServer(new AdminServer()\n+                .serverStartState(\"RUNNING\")\n+                .adminService(new oracle.weblogic.domain.AdminService()\n+                    .addChannelsItem(new oracle.weblogic.domain.Channel()\n+                        .channelName(\"default\")\n+                        .nodePort(0))))\n+            .clusters(clusters)\n+            .configuration(new Configuration()\n+                .model(new Model()\n+                    .domainType(WLS_DOMAIN_TYPE)\n+                    .runtimeEncryptionSecret(encryptionSecretName))));\n+    return domain;\n+  }\n+\n+  private static void createSecrets(String domainNamespace) {\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    if (!domainNamespace.equals(\"default\")) {\n+      createDockerRegistrySecret(domainNamespace);\n+    }\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create encryption secret\n+    logger.info(\"Creating encryption secret\");\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+  }\n+\n+  private static void deleteSecrets(String domainNamespace) {\n+    logger.info(\"Deleting docker registry secret in namespace {0}\", domainNamespace);\n+    if (!domainNamespace.equals(\"default\")) {\n+      deleteSecret(OCR_SECRET_NAME, domainNamespace);\n+    }\n+\n+    // delete secret for admin credentials\n+    logger.info(\"Deleting secret for admin credentials\");\n+    deleteSecret(adminSecretName, domainNamespace);\n+\n+    // delete encryption secret\n+    logger.info(\"Deleting encryption secret\");\n+    deleteSecret(encryptionSecretName, domainNamespace);\n+  }\n+\n+  private void createVerifyDomain(String domainNamespace, String domainUid, String miiImage, Domain domain) {\n+    // create domain\n+    logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+        domainUid, domainNamespace, miiImage);\n+    createDomainAndVerify(domain, domainNamespace);\n+    String adminServerPodName = domainUid + adminServerPrefix;\n+    // check that admin server pod exists in the domain namespace\n+    logger.info(\"Checking that admin server pod {0} exists in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReadyAndServiceExists(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check for managed server pods existence in the domain namespace\n+    for (int i = 1; i <= replicaCount; i++) {\n+      String managedServerPodName = domainUid + managedServerPrefix + i;\n+\n+      // check that the managed server pod exists\n+      logger.info(\"Checking that managed server pod {0} exists in namespace {1}\",\n+          managedServerPodName, domainNamespace);\n+      checkPodReadyAndServiceExists(managedServerPodName, domainUid, domainNamespace);\n+    }\n+  }\n+\n+  /**\n+   * Install WebLogic operator and wait up to two minutes until the operator pod is ready.\n+   *\n+   * @param operNamespace the operator namespace in which the operator will be installed\n+   * @param opReleaseName the operator release name\n+   * @param enableClusterRoleBinding operator cluster role binding\n+   * @param domainNamespace the list of the domain namespaces which will be managed by the operator\n+   * @return the operator Helm installation parameters\n+   */\n+  private static HelmParams installOperatorHelmChart(String opReleaseName, String operNamespace,\n+                                                     String domainNsSelectionStrategy,\n+                                                     String domainNsSelector,\n+                                                     boolean enableClusterRoleBinding,\n+                                                     String... domainNamespace) {\n+    LoggingFacade logger = getLogger();\n+\n+    HelmParams opHelmParams = new HelmParams().releaseName(opReleaseName)\n+        .namespace(operNamespace)\n+        .chartDir(OPERATOR_CHART_DIR);\n+\n+    // Create a service account for the unique operNamespace\n+    logger.info(\"Creating service account\");\n+    assertDoesNotThrow(() -> createServiceAccount(new V1ServiceAccount()\n+        .metadata(new V1ObjectMeta()\n+            .namespace(operNamespace)\n+            .name(opReleaseName + \"-sa\"))));\n+    logger.info(\"Created service account: {0}\", opReleaseName + \"-sa\");\n+\n+\n+    // get operator image name\n+    String operatorImage = getOperatorImageName();\n+    assertFalse(operatorImage.isEmpty(), \"operator image name can not be empty\");\n+    logger.info(\"operator image name {0}\", operatorImage);\n+\n+\n+    V1SecretList listSecrets = listSecrets(operNamespace);\n+    if (null != listSecrets) {\n+      for (V1Secret item : listSecrets.getItems()) {\n+        if (item.getMetadata().getName().equals(REPO_SECRET_NAME)) {\n+          break;\n+        }\n+      }\n+      // Create Docker registry secret in the operator namespace to pull the image from repository\n+      logger.info(\"Creating Docker registry secret in namespace {0}\", operNamespace);\n+      createDockerRegistrySecret(operNamespace);\n+    }\n+    // map with secret\n+    Map<String, Object> secretNameMap = new HashMap<>();\n+    secretNameMap.put(\"name\", REPO_SECRET_NAME);\n+\n+    // operator chart values to override\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams)\n+        .imagePullSecrets(secretNameMap)\n+        .domainNamespaces(java.util.Arrays.asList(domainNamespace))\n+        .enableClusterRoleBinding(enableClusterRoleBinding)\n+        .serviceAccount(opReleaseName + \"-sa\");\n+    if (domainNsSelectionStrategy != null) {\n+      opParams.domainNamespaceSelectionStrategy(domainNsSelectionStrategy);\n+      if (domainNsSelectionStrategy.equalsIgnoreCase(\"LabelSelector\")) {\n+        opParams.domainNamespaceLabelSelector(domainNsSelector);\n+      } else if (domainNsSelectionStrategy.equalsIgnoreCase(\"RegExp\")) {\n+        opParams.domainNamespaceRegExp(domainNsSelector);\n+      }\n+    }\n+\n+    // use default image in chart when repoUrl is set, otherwise use latest/current branch operator image\n+    if (opHelmParams.getRepoUrl() == null) {\n+      opParams.image(operatorImage);\n+    }\n+\n+    // create externalRestIdentitySecret\n+    assertTrue(createExternalRestIdentitySecret(operNamespace,\n+        DEFAULT_EXTERNAL_REST_IDENTITY_SECRET_NAME + operNamespace),\n+        \"failed to create external REST identity secret\");\n+    opParams\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(0)\n+        .externalRestIdentitySecret(DEFAULT_EXTERNAL_REST_IDENTITY_SECRET_NAME + operNamespace);\n+\n+\n+    // install operator\n+    logger.info(\"Installing operator in namespace {0}\", operNamespace);\n+\n+    assertTrue(installOperator(opParams),\n+        String.format(\"Failed to install operator in namespace %s \", operNamespace));\n+    logger.info(\"Operator installed in namespace {0}\", operNamespace);\n+\n+    // list Helm releases matching operator release name in operator namespace\n+    logger.info(\"Checking operator release {0} status in namespace {1}\",\n+        opReleaseName, operNamespace);\n+\n+    assertTrue(checkHelmReleaseStatus(opReleaseName, operNamespace, \"deployed\"),\n+        String.format(\"Operator release %s is not in %s status in namespace %s\",\n+            opReleaseName, \"deployed\", operNamespace));\n+    logger.info(\"Operator release {0} status is {1} in namespace {2}\",\n+        opReleaseName, \"deployed\", operNamespace);\n+\n+    // wait for the operator to be ready\n+    logger.info(\"Wait for the operator pod is ready in namespace {0}\", operNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for operator to be running in namespace {0} \"\n+                    + \"(elapsed time {1}ms, remaining time {2}ms)\",\n+                operNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> operatorIsReady(operNamespace),\n+            \"operatorIsReady failed with ApiException\"));\n+\n+\n+    logger.info(\"Wait for the operator external service in namespace {0}\", operNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for operator external service in namespace {0} \"\n+                    + \"(elapsed time {1}ms, remaining time {2}ms)\",\n+                operNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> operatorRestServiceRunning(operNamespace),\n+            \"operator external service is not running\"));\n+\n+    return opHelmParams;\n+  }\n+\n+  private void checkPodNotCreated(String podName, String domainUid, String domNamespace) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg0MjE0MA=="}, "originalCommit": {"oid": "2f7e78cece4496d7be6e42ec72deec2f2648b5d3"}, "originalPosition": 808}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzMwOTM1OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjowNToyMFrOHdPNKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzoyNTo0M1rOHdSVdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQxOTg4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Return Namespace object for the given name from the Kubernetes cluster as V1Namespace object..\n          \n          \n            \n               * Return Namespace object for the given name from the Kubernetes cluster as V1Namespace object.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r500419882", "createdAt": "2020-10-06T16:05:20Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -813,6 +851,39 @@ public static V1NamespaceList listNamespacesAsObjects() throws ApiException {\n     return namespaceList;\n   }\n \n+  /**\n+   * Return Namespace object for the given name from the Kubernetes cluster as V1Namespace object..", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8094ec2c1840985cb91ad6d5881dc24b5f4bbe6"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3MTE1OA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r500471158", "createdAt": "2020-10-06T17:25:43Z", "author": {"login": "marinakog"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -813,6 +851,39 @@ public static V1NamespaceList listNamespacesAsObjects() throws ApiException {\n     return namespaceList;\n   }\n \n+  /**\n+   * Return Namespace object for the given name from the Kubernetes cluster as V1Namespace object..", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQxOTg4Mg=="}, "originalCommit": {"oid": "e8094ec2c1840985cb91ad6d5881dc24b5f4bbe6"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzc3Nzk5OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODowNToyMlrOHdTzvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzo1Njo1M1rOHd_FVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5NTI5NA==", "bodyText": "this check is not needed, createOcirRepoSecret() takes care of that", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r500495294", "createdAt": "2020-10-06T18:05:22Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "diffHunk": "@@ -453,6 +454,133 @@ public static HelmParams installAndVerifyOperator(String opNamespace,\n     return opHelmParams;\n   }\n \n+  /**\n+   * Install WebLogic operator and wait up to two minutes until the operator pod is ready.\n+   *\n+   * @param operNamespace the operator namespace in which the operator will be installed\n+   * @param opReleaseName the operator release name\n+   * @param domainNsSelectionStrategy SelectLabel, RegExp or List\n+   * @param domainNsSelector the label or expression value to manage namespaces\n+   * @param enableClusterRoleBinding operator cluster role binding\n+   * @param domainNamespace the list of the domain namespaces which will be managed by the operator\n+   *                        (only in case of List selector)\n+   * @return the operator Helm installation parameters\n+   */\n+  public static HelmParams installAndVerifyOperator(String opReleaseName, String operNamespace,\n+                                                     String domainNsSelectionStrategy,\n+                                                     String domainNsSelector,\n+                                                     boolean enableClusterRoleBinding,\n+                                                     String... domainNamespace) {\n+\n+    HelmParams opHelmParams = new HelmParams().releaseName(opReleaseName)\n+        .namespace(operNamespace)\n+        .chartDir(OPERATOR_CHART_DIR);\n+    LoggingFacade logger = getLogger();\n+    // Create a service account for the unique operNamespace\n+    logger.info(\"Creating service account\");\n+    assertDoesNotThrow(() -> createServiceAccount(new V1ServiceAccount()\n+        .metadata(new V1ObjectMeta()\n+            .namespace(operNamespace)\n+            .name(opReleaseName + \"-sa\"))));\n+    logger.info(\"Created service account: {0}\", opReleaseName + \"-sa\");\n+\n+\n+    // get operator image name\n+    String operatorImage = getOperatorImageName();\n+    assertFalse(operatorImage.isEmpty(), \"operator image name can not be empty\");\n+    logger.info(\"operator image name {0}\", operatorImage);\n+\n+\n+    V1SecretList listSecrets = oracle.weblogic.kubernetes.actions.TestActions.listSecrets(operNamespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2e726750020e9256617902446f7e472b92fb972"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIwNDMxMQ==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r501204311", "createdAt": "2020-10-07T17:56:53Z", "author": {"login": "marinakog"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "diffHunk": "@@ -453,6 +454,133 @@ public static HelmParams installAndVerifyOperator(String opNamespace,\n     return opHelmParams;\n   }\n \n+  /**\n+   * Install WebLogic operator and wait up to two minutes until the operator pod is ready.\n+   *\n+   * @param operNamespace the operator namespace in which the operator will be installed\n+   * @param opReleaseName the operator release name\n+   * @param domainNsSelectionStrategy SelectLabel, RegExp or List\n+   * @param domainNsSelector the label or expression value to manage namespaces\n+   * @param enableClusterRoleBinding operator cluster role binding\n+   * @param domainNamespace the list of the domain namespaces which will be managed by the operator\n+   *                        (only in case of List selector)\n+   * @return the operator Helm installation parameters\n+   */\n+  public static HelmParams installAndVerifyOperator(String opReleaseName, String operNamespace,\n+                                                     String domainNsSelectionStrategy,\n+                                                     String domainNsSelector,\n+                                                     boolean enableClusterRoleBinding,\n+                                                     String... domainNamespace) {\n+\n+    HelmParams opHelmParams = new HelmParams().releaseName(opReleaseName)\n+        .namespace(operNamespace)\n+        .chartDir(OPERATOR_CHART_DIR);\n+    LoggingFacade logger = getLogger();\n+    // Create a service account for the unique operNamespace\n+    logger.info(\"Creating service account\");\n+    assertDoesNotThrow(() -> createServiceAccount(new V1ServiceAccount()\n+        .metadata(new V1ObjectMeta()\n+            .namespace(operNamespace)\n+            .name(opReleaseName + \"-sa\"))));\n+    logger.info(\"Created service account: {0}\", opReleaseName + \"-sa\");\n+\n+\n+    // get operator image name\n+    String operatorImage = getOperatorImageName();\n+    assertFalse(operatorImage.isEmpty(), \"operator image name can not be empty\");\n+    logger.info(\"operator image name {0}\", operatorImage);\n+\n+\n+    V1SecretList listSecrets = oracle.weblogic.kubernetes.actions.TestActions.listSecrets(operNamespace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5NTI5NA=="}, "originalCommit": {"oid": "d2e726750020e9256617902446f7e472b92fb972"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzc4ODY2OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODowODowMVrOHdT5-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzo1NjoxMFrOHd_DcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5Njg4OA==", "bodyText": "there is lot of duplicate code in this method and the existing installAndVerifyOperator() method, refactor the methods to avoid code duplication", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r500496888", "createdAt": "2020-10-06T18:08:01Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "diffHunk": "@@ -453,6 +454,133 @@ public static HelmParams installAndVerifyOperator(String opNamespace,\n     return opHelmParams;\n   }\n \n+  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1586bbc49253812267c10dff605581af863931c5"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIwMzgyNA==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r501203824", "createdAt": "2020-10-07T17:56:10Z", "author": {"login": "marinakog"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "diffHunk": "@@ -453,6 +454,133 @@ public static HelmParams installAndVerifyOperator(String opNamespace,\n     return opHelmParams;\n   }\n \n+  /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5Njg4OA=="}, "originalCommit": {"oid": "1586bbc49253812267c10dff605581af863931c5"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzc5NTIxOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODowOTozOVrOHdT9qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzo1NjowM1rOHd_DMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5NzgzMw==", "bodyText": "move this check outside of the method", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r500497833", "createdAt": "2020-10-06T18:09:39Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,633 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCIR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOcirRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String[] opNamespaces = new String[4];\n+\n+  // domain constants\n+  private static final String[] domainsUid = {\"managensdomain1\",\"managensdomain2\",\"managensdomain3\",\"managensdomain4\"};\n+  private static String[] domainNamespaces = new String[4];\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams[] opHelmParams = new HelmParams[3];\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    for (int i = 0; i < 4; i++) {\n+      // get a unique domain namespace\n+      assertNotNull(namespaces.get(i), \"Namespace list is null\");\n+      logger.info(\"Getting a unique namespace {0} for WebLogic domain {1}\", namespaces.get(i), i);\n+      domainNamespaces[i] = namespaces.get(i);\n+    }\n+    for (int i = 4; i < 8; i++) {\n+      // get a unique operator namespace\n+      logger.info(\"Getting a unique namespace for operator {0}\", (i - 4));\n+      assertNotNull(namespaces.get(i), \"Namespace list is null\");\n+      opNamespaces[(i - 4)] = namespaces.get(i);\n+    }\n+\n+    createSecrets(domainNamespaces[2]);\n+    createSecrets(\"default\");\n+    labels1 = new java.util.HashMap<>();\n+    labels1.put(OPERATOR_RELEASE_NAME, OPERATOR_RELEASE_NAME);\n+    labels2 = new java.util.HashMap<>();\n+    labels2.put(OPERATOR_RELEASE_NAME + \"2\", OPERATOR_RELEASE_NAME);\n+    setLabelToNamespace(domainNamespaces[0], labels1);\n+    setLabelToNamespace(domainNamespaces[1], labels2);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    try {\n+      // Delete domain custom resource\n+      for (int i = 0; i < 4; i++) {\n+        logger.info(\"Delete domain1 custom resource in namespace {0}\", domainNamespaces[i]);\n+        deleteDomainCustomResource(domainsUid[i], domainNamespaces[i]);\n+        logger.info(\"Deleted Domain Custom Resource \" + domainsUid[i] + \" from \" + domainNamespaces[i]);\n+      }\n+      logger.info(\"Delete domain1test custom resource in namespace {0}\", \"test-\" + domainNamespaces[0]);\n+      deleteDomainCustomResource(domainsUid[0] + \"test\", \"test-\" + domainNamespaces[0]);\n+      logger.info(\"Deleted Domain Custom Resource \" + domainsUid[0] + \"test from test-\" + domainNamespaces[0]);\n+  \n+      logger.info(\"Delete domain2test custom resource in namespace {0}\", \"test-\" + domainNamespaces[1]);\n+      deleteDomainCustomResource(domainsUid[1] + \"test\", \"test-\" + domainNamespaces[1]);\n+      logger.info(\"Deleted Domain Custom Resource \" + domainsUid[1] + \"test from test-\" + domainNamespaces[1]);\n+  \n+      logger.info(\"Delete weblogic custom resource in namespace {0}\", \"weblogic\" + domainNamespaces[1]);\n+      deleteDomainCustomResource(\"weblogic\", \"weblogic\" + domainNamespaces[1]);\n+      logger.info(\"Deleted Domain Custom Resource weblogic from weblogic\" + domainNamespaces[1]);\n+    } finally {\n+      deleteSecrets(\"default\");\n+      deleteSecrets(\"atest-\" + domainNamespaces[0]);\n+     \n+      deleteNamespace(\"atest-\" + domainNamespaces[0]);\n+      //delete operator\n+      for (HelmParams helmParam : opHelmParams) {\n+        uninstallOperator(helmParam);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=RegExp,\n+   * and domainNamespaceRegExp=^test and domainNamespace= manageByExp3NS.\n+   * Deploy two custom domain resources in two different namespaces with names starting with test\n+   * and verify all server pods in the domains were created and ready.\n+   * Verify operator is able to manage these domains by scaling.\n+   * Try to start another domain with namespace manageByExp3NS. Verify it is not started by operator\n+   * and value of domainNamespace is ignored for both specific namespace and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade helm chart to switch to using LabelSelector, start domain and verify operator can scale it.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using expression namespace management\")\n+  public void testNsManageByExp() {\n+    //create domain namespace\n+    String manageByExp1NS = \"test-\" +  domainNamespaces[0];\n+    String manageByExp2NS = \"test-\" +  domainNamespaces[1];\n+    String manageByExpDomain1Uid = \"test-\" + domainsUid[0];\n+    String manageByExpDomain2Uid = \"test-\" + domainsUid[1];\n+    String manageByLabelNS = \"weblogic1\" + domainNamespaces[0];\n+    String manageByLabelDomainUid = \"weblogic1\" + domainsUid[0];\n+    String manageByExp3NS = \"atest-\" +  domainNamespaces[0];\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp1NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp2NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp3NS));\n+    installAndVerifyOperatorCanManageDomainByNSRegExp(manageByExp1NS, manageByExp2NS,\n+        manageByExpDomain1Uid, manageByExpDomain2Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain will not start for specific NS and default\n+    checkPodNotCreated(domainsUid[2] + adminServerPrefix, domainsUid[2], domainNamespaces[2]);\n+    checkDomainNotStartedInDefaultNS();\n+    //verify that operator can't start domain if namespace name does not start from test\n+    createSecrets(manageByExp3NS);\n+    checkPodNotCreated(domainsUid[2] + adminServerPrefix, domainsUid[2], manageByExp3NS);\n+\n+    // install  operator sharing same domain\n+    checkSecondOperatorFailedToShareSameNS(manageByExp1NS);\n+    switchNSManagementToLabelSelectUsingUpgradeOperator(manageByLabelNS, manageByExp1NS,\n+        manageByLabelDomainUid, manageByExpDomain1Uid);\n+    //check operator can't manage anymore manageByExp1NS\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespaces[1], manageByExpDomain1Uid,\n+        manageByExp1NS), \"Operator can still manage domain \"\n+        + manageByExp1NS + \" in the namespace \" + manageByExp1NS);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1.\n+   * Deploy a custom domain resource in the namespace with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   * Verify operator can't start another domain with namespace2 with label2.\n+   * Modify namespace2 to set label1, verify that operator can manage it.\n+   * Verify that domainNamespaces field will be ignored and domain will not start for namespaces:\n+   * (domain3Namespace) and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade operator to replace namespace management using RegExp namespaces.\n+   * Verify it can manage added domain and can't manage old domain by scaling .\n+   * Verify that upgrade helm fail if try to add domain, managed by other operator.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using label namespace management\")\n+  public void testNsManageByLabel() {\n+    String manageByLabelDomain1NS = domainNamespaces[0];\n+    String manageByLabelDomain2NS = domainNamespaces[1];\n+    String manageByExpDomainUid = \"weblogic2\" + domainNamespaces[1];\n+    String manageByExpDomainNS = \"weblogic2\" + domainNamespaces[1];\n+    String manageByLabelDomain1Uid = domainsUid[0];\n+    String manageByLabelDomain2Uid = domainsUid[1];\n+    installAndVerifyOperatorCanManageDomainByLabelSelector(manageByLabelDomain1NS, manageByLabelDomain2NS,\n+        manageByLabelDomain1Uid, manageByLabelDomain2Uid);\n+    addExtraDomainByAddingLabelToNS(labels1, manageByLabelDomain2NS, manageByLabelDomain2Uid);\n+    checkDomainNotStartedInDefaultNS();\n+    checkSecondOperatorFailedToShareSameNS(manageByLabelDomain1NS);\n+    switchNSManagementToRegExpUsingUpgradeOperator(manageByLabelDomain1NS, manageByExpDomainNS,\n+        manageByLabelDomain1Uid, manageByExpDomainUid);\n+    checkUpgradeFailedToAddNSManagedByAnotherOperator();\n+  }\n+\n+  /**\n+   * Create namespace ns1 with no label\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1 and enableRbac=false.\n+   * Add label1 to ns1 and verify domain can't be started\n+   * Call upgrade operator with reuse values to enable management for ns1\n+   * Deploy a custom domain resource in the namespace ns1 with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   */\n+  @Test\n+  @Order(3)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" with enableClusterRoleBinding\")\n+  public void testSwitchRbac() {\n+    String manageByLabelDomainNS = domainNamespaces[0] + \"test4\";\n+    String manageByLabelDomainUid = domainsUid[0] + \"test4\";\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelDomainNS));\n+    opHelmParams[2] = installAndVerifyOperator(OPERATOR_RELEASE_NAME,\n+        opNamespaces[3], \"LabelSelector\",\n+        \"mytest4\", false);\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest4\", manageByLabelDomainUid);\n+    assertDoesNotThrow(() -> addLabelsToNamespace(manageByLabelDomainNS, labels));\n+    //verify domain can't be started because operator does not have permission to manage it\n+    createSecrets(manageByLabelDomainNS);\n+    checkPodNotCreated(manageByLabelDomainUid + adminServerPrefix, manageByLabelDomainUid, manageByLabelDomainNS);\n+    deleteDomainCrd(manageByLabelDomainNS, manageByLabelDomainUid);\n+    //upgrade operator and start domain\n+    int externalRestHttpsPort = getServiceNodePort(opNamespaces[3], \"external-weblogic-operator-svc\");\n+\n+    OperatorParams opParams = new OperatorParams()\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .helmParams(opHelmParams[2]);\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespaces[3], opParams));\n+    assertTrue(createDomainCrdAndVerifyDomainIsRunning(manageByLabelDomainNS, manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(opNamespaces[3], manageByLabelDomainUid);\n+  }\n+\n+  private void checkUpgradeFailedToAddNSManagedByAnotherOperator() {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    // for ns names starting from weblogic, there one of domains\n+    //in namespace weblogic* is managed by operator2\n+    int externalRestHttpsPort = getServiceNodePort(opNamespaces[0], \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams[0])\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic\");\n+\n+    assertFalse(upgradeAndVerifyOperator(opNamespaces[0], opParams), \"Upgrade does not fail when adding domain,\"\n+        + \" managed by other operator\");\n+  }\n+\n+  private void switchNSManagementToRegExpUsingUpgradeOperator(String manageByLabelNS,\n+                                                              String manageByExpNS,\n+                                                              String manageByLabelDomainUid,\n+                                                              String manageByExpDomainUid) {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    assertDoesNotThrow(() -> createNamespace(manageByExpNS));\n+    int externalRestHttpsPort = getServiceNodePort(opNamespaces[0], \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams[0])\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic2\");\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespaces[0], opParams));\n+\n+    //verify domain is started in namespace with name starting with weblogic* and operator can scale it.\n+    createSecrets(manageByExpNS);\n+    assertTrue(createDomainCrdAndVerifyDomainIsRunning(manageByExpNS,manageByExpDomainUid));\n+    checkOperatorCanScaleDomain(opNamespaces[0],manageByExpDomainUid);\n+    //verify operator can't manage anymore domain running in the namespace with label\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespaces[0], manageByLabelDomainUid, manageByLabelNS),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1586bbc49253812267c10dff605581af863931c5"}, "originalPosition": 342}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIwMzc2Mg==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r501203762", "createdAt": "2020-10-07T17:56:03Z", "author": {"login": "marinakog"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,633 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCIR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOcirRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String[] opNamespaces = new String[4];\n+\n+  // domain constants\n+  private static final String[] domainsUid = {\"managensdomain1\",\"managensdomain2\",\"managensdomain3\",\"managensdomain4\"};\n+  private static String[] domainNamespaces = new String[4];\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams[] opHelmParams = new HelmParams[3];\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    for (int i = 0; i < 4; i++) {\n+      // get a unique domain namespace\n+      assertNotNull(namespaces.get(i), \"Namespace list is null\");\n+      logger.info(\"Getting a unique namespace {0} for WebLogic domain {1}\", namespaces.get(i), i);\n+      domainNamespaces[i] = namespaces.get(i);\n+    }\n+    for (int i = 4; i < 8; i++) {\n+      // get a unique operator namespace\n+      logger.info(\"Getting a unique namespace for operator {0}\", (i - 4));\n+      assertNotNull(namespaces.get(i), \"Namespace list is null\");\n+      opNamespaces[(i - 4)] = namespaces.get(i);\n+    }\n+\n+    createSecrets(domainNamespaces[2]);\n+    createSecrets(\"default\");\n+    labels1 = new java.util.HashMap<>();\n+    labels1.put(OPERATOR_RELEASE_NAME, OPERATOR_RELEASE_NAME);\n+    labels2 = new java.util.HashMap<>();\n+    labels2.put(OPERATOR_RELEASE_NAME + \"2\", OPERATOR_RELEASE_NAME);\n+    setLabelToNamespace(domainNamespaces[0], labels1);\n+    setLabelToNamespace(domainNamespaces[1], labels2);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    try {\n+      // Delete domain custom resource\n+      for (int i = 0; i < 4; i++) {\n+        logger.info(\"Delete domain1 custom resource in namespace {0}\", domainNamespaces[i]);\n+        deleteDomainCustomResource(domainsUid[i], domainNamespaces[i]);\n+        logger.info(\"Deleted Domain Custom Resource \" + domainsUid[i] + \" from \" + domainNamespaces[i]);\n+      }\n+      logger.info(\"Delete domain1test custom resource in namespace {0}\", \"test-\" + domainNamespaces[0]);\n+      deleteDomainCustomResource(domainsUid[0] + \"test\", \"test-\" + domainNamespaces[0]);\n+      logger.info(\"Deleted Domain Custom Resource \" + domainsUid[0] + \"test from test-\" + domainNamespaces[0]);\n+  \n+      logger.info(\"Delete domain2test custom resource in namespace {0}\", \"test-\" + domainNamespaces[1]);\n+      deleteDomainCustomResource(domainsUid[1] + \"test\", \"test-\" + domainNamespaces[1]);\n+      logger.info(\"Deleted Domain Custom Resource \" + domainsUid[1] + \"test from test-\" + domainNamespaces[1]);\n+  \n+      logger.info(\"Delete weblogic custom resource in namespace {0}\", \"weblogic\" + domainNamespaces[1]);\n+      deleteDomainCustomResource(\"weblogic\", \"weblogic\" + domainNamespaces[1]);\n+      logger.info(\"Deleted Domain Custom Resource weblogic from weblogic\" + domainNamespaces[1]);\n+    } finally {\n+      deleteSecrets(\"default\");\n+      deleteSecrets(\"atest-\" + domainNamespaces[0]);\n+     \n+      deleteNamespace(\"atest-\" + domainNamespaces[0]);\n+      //delete operator\n+      for (HelmParams helmParam : opHelmParams) {\n+        uninstallOperator(helmParam);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=RegExp,\n+   * and domainNamespaceRegExp=^test and domainNamespace= manageByExp3NS.\n+   * Deploy two custom domain resources in two different namespaces with names starting with test\n+   * and verify all server pods in the domains were created and ready.\n+   * Verify operator is able to manage these domains by scaling.\n+   * Try to start another domain with namespace manageByExp3NS. Verify it is not started by operator\n+   * and value of domainNamespace is ignored for both specific namespace and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade helm chart to switch to using LabelSelector, start domain and verify operator can scale it.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using expression namespace management\")\n+  public void testNsManageByExp() {\n+    //create domain namespace\n+    String manageByExp1NS = \"test-\" +  domainNamespaces[0];\n+    String manageByExp2NS = \"test-\" +  domainNamespaces[1];\n+    String manageByExpDomain1Uid = \"test-\" + domainsUid[0];\n+    String manageByExpDomain2Uid = \"test-\" + domainsUid[1];\n+    String manageByLabelNS = \"weblogic1\" + domainNamespaces[0];\n+    String manageByLabelDomainUid = \"weblogic1\" + domainsUid[0];\n+    String manageByExp3NS = \"atest-\" +  domainNamespaces[0];\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp1NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp2NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp3NS));\n+    installAndVerifyOperatorCanManageDomainByNSRegExp(manageByExp1NS, manageByExp2NS,\n+        manageByExpDomain1Uid, manageByExpDomain2Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain will not start for specific NS and default\n+    checkPodNotCreated(domainsUid[2] + adminServerPrefix, domainsUid[2], domainNamespaces[2]);\n+    checkDomainNotStartedInDefaultNS();\n+    //verify that operator can't start domain if namespace name does not start from test\n+    createSecrets(manageByExp3NS);\n+    checkPodNotCreated(domainsUid[2] + adminServerPrefix, domainsUid[2], manageByExp3NS);\n+\n+    // install  operator sharing same domain\n+    checkSecondOperatorFailedToShareSameNS(manageByExp1NS);\n+    switchNSManagementToLabelSelectUsingUpgradeOperator(manageByLabelNS, manageByExp1NS,\n+        manageByLabelDomainUid, manageByExpDomain1Uid);\n+    //check operator can't manage anymore manageByExp1NS\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespaces[1], manageByExpDomain1Uid,\n+        manageByExp1NS), \"Operator can still manage domain \"\n+        + manageByExp1NS + \" in the namespace \" + manageByExp1NS);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1.\n+   * Deploy a custom domain resource in the namespace with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   * Verify operator can't start another domain with namespace2 with label2.\n+   * Modify namespace2 to set label1, verify that operator can manage it.\n+   * Verify that domainNamespaces field will be ignored and domain will not start for namespaces:\n+   * (domain3Namespace) and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade operator to replace namespace management using RegExp namespaces.\n+   * Verify it can manage added domain and can't manage old domain by scaling .\n+   * Verify that upgrade helm fail if try to add domain, managed by other operator.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using label namespace management\")\n+  public void testNsManageByLabel() {\n+    String manageByLabelDomain1NS = domainNamespaces[0];\n+    String manageByLabelDomain2NS = domainNamespaces[1];\n+    String manageByExpDomainUid = \"weblogic2\" + domainNamespaces[1];\n+    String manageByExpDomainNS = \"weblogic2\" + domainNamespaces[1];\n+    String manageByLabelDomain1Uid = domainsUid[0];\n+    String manageByLabelDomain2Uid = domainsUid[1];\n+    installAndVerifyOperatorCanManageDomainByLabelSelector(manageByLabelDomain1NS, manageByLabelDomain2NS,\n+        manageByLabelDomain1Uid, manageByLabelDomain2Uid);\n+    addExtraDomainByAddingLabelToNS(labels1, manageByLabelDomain2NS, manageByLabelDomain2Uid);\n+    checkDomainNotStartedInDefaultNS();\n+    checkSecondOperatorFailedToShareSameNS(manageByLabelDomain1NS);\n+    switchNSManagementToRegExpUsingUpgradeOperator(manageByLabelDomain1NS, manageByExpDomainNS,\n+        manageByLabelDomain1Uid, manageByExpDomainUid);\n+    checkUpgradeFailedToAddNSManagedByAnotherOperator();\n+  }\n+\n+  /**\n+   * Create namespace ns1 with no label\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1 and enableRbac=false.\n+   * Add label1 to ns1 and verify domain can't be started\n+   * Call upgrade operator with reuse values to enable management for ns1\n+   * Deploy a custom domain resource in the namespace ns1 with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   */\n+  @Test\n+  @Order(3)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" with enableClusterRoleBinding\")\n+  public void testSwitchRbac() {\n+    String manageByLabelDomainNS = domainNamespaces[0] + \"test4\";\n+    String manageByLabelDomainUid = domainsUid[0] + \"test4\";\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelDomainNS));\n+    opHelmParams[2] = installAndVerifyOperator(OPERATOR_RELEASE_NAME,\n+        opNamespaces[3], \"LabelSelector\",\n+        \"mytest4\", false);\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest4\", manageByLabelDomainUid);\n+    assertDoesNotThrow(() -> addLabelsToNamespace(manageByLabelDomainNS, labels));\n+    //verify domain can't be started because operator does not have permission to manage it\n+    createSecrets(manageByLabelDomainNS);\n+    checkPodNotCreated(manageByLabelDomainUid + adminServerPrefix, manageByLabelDomainUid, manageByLabelDomainNS);\n+    deleteDomainCrd(manageByLabelDomainNS, manageByLabelDomainUid);\n+    //upgrade operator and start domain\n+    int externalRestHttpsPort = getServiceNodePort(opNamespaces[3], \"external-weblogic-operator-svc\");\n+\n+    OperatorParams opParams = new OperatorParams()\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .helmParams(opHelmParams[2]);\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespaces[3], opParams));\n+    assertTrue(createDomainCrdAndVerifyDomainIsRunning(manageByLabelDomainNS, manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(opNamespaces[3], manageByLabelDomainUid);\n+  }\n+\n+  private void checkUpgradeFailedToAddNSManagedByAnotherOperator() {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    // for ns names starting from weblogic, there one of domains\n+    //in namespace weblogic* is managed by operator2\n+    int externalRestHttpsPort = getServiceNodePort(opNamespaces[0], \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams[0])\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic\");\n+\n+    assertFalse(upgradeAndVerifyOperator(opNamespaces[0], opParams), \"Upgrade does not fail when adding domain,\"\n+        + \" managed by other operator\");\n+  }\n+\n+  private void switchNSManagementToRegExpUsingUpgradeOperator(String manageByLabelNS,\n+                                                              String manageByExpNS,\n+                                                              String manageByLabelDomainUid,\n+                                                              String manageByExpDomainUid) {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    assertDoesNotThrow(() -> createNamespace(manageByExpNS));\n+    int externalRestHttpsPort = getServiceNodePort(opNamespaces[0], \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams[0])\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic2\");\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespaces[0], opParams));\n+\n+    //verify domain is started in namespace with name starting with weblogic* and operator can scale it.\n+    createSecrets(manageByExpNS);\n+    assertTrue(createDomainCrdAndVerifyDomainIsRunning(manageByExpNS,manageByExpDomainUid));\n+    checkOperatorCanScaleDomain(opNamespaces[0],manageByExpDomainUid);\n+    //verify operator can't manage anymore domain running in the namespace with label\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespaces[0], manageByLabelDomainUid, manageByLabelNS),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5NzgzMw=="}, "originalCommit": {"oid": "1586bbc49253812267c10dff605581af863931c5"}, "originalPosition": 342}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzgwMDExOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODoxMDozOFrOHdUAWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzo1NTo1OFrOHd_C7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5ODUyMg==", "bodyText": "leave blank line after this line for better code readability", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r500498522", "createdAt": "2020-10-06T18:10:38Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,633 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCIR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOcirRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String[] opNamespaces = new String[4];\n+\n+  // domain constants\n+  private static final String[] domainsUid = {\"managensdomain1\",\"managensdomain2\",\"managensdomain3\",\"managensdomain4\"};\n+  private static String[] domainNamespaces = new String[4];\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams[] opHelmParams = new HelmParams[3];\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    for (int i = 0; i < 4; i++) {\n+      // get a unique domain namespace\n+      assertNotNull(namespaces.get(i), \"Namespace list is null\");\n+      logger.info(\"Getting a unique namespace {0} for WebLogic domain {1}\", namespaces.get(i), i);\n+      domainNamespaces[i] = namespaces.get(i);\n+    }\n+    for (int i = 4; i < 8; i++) {\n+      // get a unique operator namespace\n+      logger.info(\"Getting a unique namespace for operator {0}\", (i - 4));\n+      assertNotNull(namespaces.get(i), \"Namespace list is null\");\n+      opNamespaces[(i - 4)] = namespaces.get(i);\n+    }\n+\n+    createSecrets(domainNamespaces[2]);\n+    createSecrets(\"default\");\n+    labels1 = new java.util.HashMap<>();\n+    labels1.put(OPERATOR_RELEASE_NAME, OPERATOR_RELEASE_NAME);\n+    labels2 = new java.util.HashMap<>();\n+    labels2.put(OPERATOR_RELEASE_NAME + \"2\", OPERATOR_RELEASE_NAME);\n+    setLabelToNamespace(domainNamespaces[0], labels1);\n+    setLabelToNamespace(domainNamespaces[1], labels2);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    try {\n+      // Delete domain custom resource\n+      for (int i = 0; i < 4; i++) {\n+        logger.info(\"Delete domain1 custom resource in namespace {0}\", domainNamespaces[i]);\n+        deleteDomainCustomResource(domainsUid[i], domainNamespaces[i]);\n+        logger.info(\"Deleted Domain Custom Resource \" + domainsUid[i] + \" from \" + domainNamespaces[i]);\n+      }\n+      logger.info(\"Delete domain1test custom resource in namespace {0}\", \"test-\" + domainNamespaces[0]);\n+      deleteDomainCustomResource(domainsUid[0] + \"test\", \"test-\" + domainNamespaces[0]);\n+      logger.info(\"Deleted Domain Custom Resource \" + domainsUid[0] + \"test from test-\" + domainNamespaces[0]);\n+  \n+      logger.info(\"Delete domain2test custom resource in namespace {0}\", \"test-\" + domainNamespaces[1]);\n+      deleteDomainCustomResource(domainsUid[1] + \"test\", \"test-\" + domainNamespaces[1]);\n+      logger.info(\"Deleted Domain Custom Resource \" + domainsUid[1] + \"test from test-\" + domainNamespaces[1]);\n+  \n+      logger.info(\"Delete weblogic custom resource in namespace {0}\", \"weblogic\" + domainNamespaces[1]);\n+      deleteDomainCustomResource(\"weblogic\", \"weblogic\" + domainNamespaces[1]);\n+      logger.info(\"Deleted Domain Custom Resource weblogic from weblogic\" + domainNamespaces[1]);\n+    } finally {\n+      deleteSecrets(\"default\");\n+      deleteSecrets(\"atest-\" + domainNamespaces[0]);\n+     \n+      deleteNamespace(\"atest-\" + domainNamespaces[0]);\n+      //delete operator\n+      for (HelmParams helmParam : opHelmParams) {\n+        uninstallOperator(helmParam);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=RegExp,\n+   * and domainNamespaceRegExp=^test and domainNamespace= manageByExp3NS.\n+   * Deploy two custom domain resources in two different namespaces with names starting with test\n+   * and verify all server pods in the domains were created and ready.\n+   * Verify operator is able to manage these domains by scaling.\n+   * Try to start another domain with namespace manageByExp3NS. Verify it is not started by operator\n+   * and value of domainNamespace is ignored for both specific namespace and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade helm chart to switch to using LabelSelector, start domain and verify operator can scale it.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using expression namespace management\")\n+  public void testNsManageByExp() {\n+    //create domain namespace\n+    String manageByExp1NS = \"test-\" +  domainNamespaces[0];\n+    String manageByExp2NS = \"test-\" +  domainNamespaces[1];\n+    String manageByExpDomain1Uid = \"test-\" + domainsUid[0];\n+    String manageByExpDomain2Uid = \"test-\" + domainsUid[1];\n+    String manageByLabelNS = \"weblogic1\" + domainNamespaces[0];\n+    String manageByLabelDomainUid = \"weblogic1\" + domainsUid[0];\n+    String manageByExp3NS = \"atest-\" +  domainNamespaces[0];\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp1NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp2NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp3NS));\n+    installAndVerifyOperatorCanManageDomainByNSRegExp(manageByExp1NS, manageByExp2NS,\n+        manageByExpDomain1Uid, manageByExpDomain2Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain will not start for specific NS and default\n+    checkPodNotCreated(domainsUid[2] + adminServerPrefix, domainsUid[2], domainNamespaces[2]);\n+    checkDomainNotStartedInDefaultNS();\n+    //verify that operator can't start domain if namespace name does not start from test\n+    createSecrets(manageByExp3NS);\n+    checkPodNotCreated(domainsUid[2] + adminServerPrefix, domainsUid[2], manageByExp3NS);\n+\n+    // install  operator sharing same domain\n+    checkSecondOperatorFailedToShareSameNS(manageByExp1NS);\n+    switchNSManagementToLabelSelectUsingUpgradeOperator(manageByLabelNS, manageByExp1NS,\n+        manageByLabelDomainUid, manageByExpDomain1Uid);\n+    //check operator can't manage anymore manageByExp1NS\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespaces[1], manageByExpDomain1Uid,\n+        manageByExp1NS), \"Operator can still manage domain \"\n+        + manageByExp1NS + \" in the namespace \" + manageByExp1NS);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1.\n+   * Deploy a custom domain resource in the namespace with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   * Verify operator can't start another domain with namespace2 with label2.\n+   * Modify namespace2 to set label1, verify that operator can manage it.\n+   * Verify that domainNamespaces field will be ignored and domain will not start for namespaces:\n+   * (domain3Namespace) and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade operator to replace namespace management using RegExp namespaces.\n+   * Verify it can manage added domain and can't manage old domain by scaling .\n+   * Verify that upgrade helm fail if try to add domain, managed by other operator.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using label namespace management\")\n+  public void testNsManageByLabel() {\n+    String manageByLabelDomain1NS = domainNamespaces[0];\n+    String manageByLabelDomain2NS = domainNamespaces[1];\n+    String manageByExpDomainUid = \"weblogic2\" + domainNamespaces[1];\n+    String manageByExpDomainNS = \"weblogic2\" + domainNamespaces[1];\n+    String manageByLabelDomain1Uid = domainsUid[0];\n+    String manageByLabelDomain2Uid = domainsUid[1];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1586bbc49253812267c10dff605581af863931c5"}, "originalPosition": 250}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIwMzY5Mw==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r501203693", "createdAt": "2020-10-07T17:55:58Z", "author": {"login": "marinakog"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,633 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCIR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOcirRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String[] opNamespaces = new String[4];\n+\n+  // domain constants\n+  private static final String[] domainsUid = {\"managensdomain1\",\"managensdomain2\",\"managensdomain3\",\"managensdomain4\"};\n+  private static String[] domainNamespaces = new String[4];\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams[] opHelmParams = new HelmParams[3];\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    for (int i = 0; i < 4; i++) {\n+      // get a unique domain namespace\n+      assertNotNull(namespaces.get(i), \"Namespace list is null\");\n+      logger.info(\"Getting a unique namespace {0} for WebLogic domain {1}\", namespaces.get(i), i);\n+      domainNamespaces[i] = namespaces.get(i);\n+    }\n+    for (int i = 4; i < 8; i++) {\n+      // get a unique operator namespace\n+      logger.info(\"Getting a unique namespace for operator {0}\", (i - 4));\n+      assertNotNull(namespaces.get(i), \"Namespace list is null\");\n+      opNamespaces[(i - 4)] = namespaces.get(i);\n+    }\n+\n+    createSecrets(domainNamespaces[2]);\n+    createSecrets(\"default\");\n+    labels1 = new java.util.HashMap<>();\n+    labels1.put(OPERATOR_RELEASE_NAME, OPERATOR_RELEASE_NAME);\n+    labels2 = new java.util.HashMap<>();\n+    labels2.put(OPERATOR_RELEASE_NAME + \"2\", OPERATOR_RELEASE_NAME);\n+    setLabelToNamespace(domainNamespaces[0], labels1);\n+    setLabelToNamespace(domainNamespaces[1], labels2);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    try {\n+      // Delete domain custom resource\n+      for (int i = 0; i < 4; i++) {\n+        logger.info(\"Delete domain1 custom resource in namespace {0}\", domainNamespaces[i]);\n+        deleteDomainCustomResource(domainsUid[i], domainNamespaces[i]);\n+        logger.info(\"Deleted Domain Custom Resource \" + domainsUid[i] + \" from \" + domainNamespaces[i]);\n+      }\n+      logger.info(\"Delete domain1test custom resource in namespace {0}\", \"test-\" + domainNamespaces[0]);\n+      deleteDomainCustomResource(domainsUid[0] + \"test\", \"test-\" + domainNamespaces[0]);\n+      logger.info(\"Deleted Domain Custom Resource \" + domainsUid[0] + \"test from test-\" + domainNamespaces[0]);\n+  \n+      logger.info(\"Delete domain2test custom resource in namespace {0}\", \"test-\" + domainNamespaces[1]);\n+      deleteDomainCustomResource(domainsUid[1] + \"test\", \"test-\" + domainNamespaces[1]);\n+      logger.info(\"Deleted Domain Custom Resource \" + domainsUid[1] + \"test from test-\" + domainNamespaces[1]);\n+  \n+      logger.info(\"Delete weblogic custom resource in namespace {0}\", \"weblogic\" + domainNamespaces[1]);\n+      deleteDomainCustomResource(\"weblogic\", \"weblogic\" + domainNamespaces[1]);\n+      logger.info(\"Deleted Domain Custom Resource weblogic from weblogic\" + domainNamespaces[1]);\n+    } finally {\n+      deleteSecrets(\"default\");\n+      deleteSecrets(\"atest-\" + domainNamespaces[0]);\n+     \n+      deleteNamespace(\"atest-\" + domainNamespaces[0]);\n+      //delete operator\n+      for (HelmParams helmParam : opHelmParams) {\n+        uninstallOperator(helmParam);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=RegExp,\n+   * and domainNamespaceRegExp=^test and domainNamespace= manageByExp3NS.\n+   * Deploy two custom domain resources in two different namespaces with names starting with test\n+   * and verify all server pods in the domains were created and ready.\n+   * Verify operator is able to manage these domains by scaling.\n+   * Try to start another domain with namespace manageByExp3NS. Verify it is not started by operator\n+   * and value of domainNamespace is ignored for both specific namespace and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade helm chart to switch to using LabelSelector, start domain and verify operator can scale it.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using expression namespace management\")\n+  public void testNsManageByExp() {\n+    //create domain namespace\n+    String manageByExp1NS = \"test-\" +  domainNamespaces[0];\n+    String manageByExp2NS = \"test-\" +  domainNamespaces[1];\n+    String manageByExpDomain1Uid = \"test-\" + domainsUid[0];\n+    String manageByExpDomain2Uid = \"test-\" + domainsUid[1];\n+    String manageByLabelNS = \"weblogic1\" + domainNamespaces[0];\n+    String manageByLabelDomainUid = \"weblogic1\" + domainsUid[0];\n+    String manageByExp3NS = \"atest-\" +  domainNamespaces[0];\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp1NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp2NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp3NS));\n+    installAndVerifyOperatorCanManageDomainByNSRegExp(manageByExp1NS, manageByExp2NS,\n+        manageByExpDomain1Uid, manageByExpDomain2Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain will not start for specific NS and default\n+    checkPodNotCreated(domainsUid[2] + adminServerPrefix, domainsUid[2], domainNamespaces[2]);\n+    checkDomainNotStartedInDefaultNS();\n+    //verify that operator can't start domain if namespace name does not start from test\n+    createSecrets(manageByExp3NS);\n+    checkPodNotCreated(domainsUid[2] + adminServerPrefix, domainsUid[2], manageByExp3NS);\n+\n+    // install  operator sharing same domain\n+    checkSecondOperatorFailedToShareSameNS(manageByExp1NS);\n+    switchNSManagementToLabelSelectUsingUpgradeOperator(manageByLabelNS, manageByExp1NS,\n+        manageByLabelDomainUid, manageByExpDomain1Uid);\n+    //check operator can't manage anymore manageByExp1NS\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespaces[1], manageByExpDomain1Uid,\n+        manageByExp1NS), \"Operator can still manage domain \"\n+        + manageByExp1NS + \" in the namespace \" + manageByExp1NS);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1.\n+   * Deploy a custom domain resource in the namespace with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   * Verify operator can't start another domain with namespace2 with label2.\n+   * Modify namespace2 to set label1, verify that operator can manage it.\n+   * Verify that domainNamespaces field will be ignored and domain will not start for namespaces:\n+   * (domain3Namespace) and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade operator to replace namespace management using RegExp namespaces.\n+   * Verify it can manage added domain and can't manage old domain by scaling .\n+   * Verify that upgrade helm fail if try to add domain, managed by other operator.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using label namespace management\")\n+  public void testNsManageByLabel() {\n+    String manageByLabelDomain1NS = domainNamespaces[0];\n+    String manageByLabelDomain2NS = domainNamespaces[1];\n+    String manageByExpDomainUid = \"weblogic2\" + domainNamespaces[1];\n+    String manageByExpDomainNS = \"weblogic2\" + domainNamespaces[1];\n+    String manageByLabelDomain1Uid = domainsUid[0];\n+    String manageByLabelDomain2Uid = domainsUid[1];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5ODUyMg=="}, "originalCommit": {"oid": "1586bbc49253812267c10dff605581af863931c5"}, "originalPosition": 250}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzgwNjA3OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODoxMjowMlrOHdUDzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNzo1NTowMVrOHd_Acw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5OTQwNw==", "bodyText": "failed to create domain custom resource or domain is not started in namespace", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r500499407", "createdAt": "2020-10-06T18:12:02Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,633 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCIR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOcirRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String[] opNamespaces = new String[4];\n+\n+  // domain constants\n+  private static final String[] domainsUid = {\"managensdomain1\",\"managensdomain2\",\"managensdomain3\",\"managensdomain4\"};\n+  private static String[] domainNamespaces = new String[4];\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams[] opHelmParams = new HelmParams[3];\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    for (int i = 0; i < 4; i++) {\n+      // get a unique domain namespace\n+      assertNotNull(namespaces.get(i), \"Namespace list is null\");\n+      logger.info(\"Getting a unique namespace {0} for WebLogic domain {1}\", namespaces.get(i), i);\n+      domainNamespaces[i] = namespaces.get(i);\n+    }\n+    for (int i = 4; i < 8; i++) {\n+      // get a unique operator namespace\n+      logger.info(\"Getting a unique namespace for operator {0}\", (i - 4));\n+      assertNotNull(namespaces.get(i), \"Namespace list is null\");\n+      opNamespaces[(i - 4)] = namespaces.get(i);\n+    }\n+\n+    createSecrets(domainNamespaces[2]);\n+    createSecrets(\"default\");\n+    labels1 = new java.util.HashMap<>();\n+    labels1.put(OPERATOR_RELEASE_NAME, OPERATOR_RELEASE_NAME);\n+    labels2 = new java.util.HashMap<>();\n+    labels2.put(OPERATOR_RELEASE_NAME + \"2\", OPERATOR_RELEASE_NAME);\n+    setLabelToNamespace(domainNamespaces[0], labels1);\n+    setLabelToNamespace(domainNamespaces[1], labels2);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    try {\n+      // Delete domain custom resource\n+      for (int i = 0; i < 4; i++) {\n+        logger.info(\"Delete domain1 custom resource in namespace {0}\", domainNamespaces[i]);\n+        deleteDomainCustomResource(domainsUid[i], domainNamespaces[i]);\n+        logger.info(\"Deleted Domain Custom Resource \" + domainsUid[i] + \" from \" + domainNamespaces[i]);\n+      }\n+      logger.info(\"Delete domain1test custom resource in namespace {0}\", \"test-\" + domainNamespaces[0]);\n+      deleteDomainCustomResource(domainsUid[0] + \"test\", \"test-\" + domainNamespaces[0]);\n+      logger.info(\"Deleted Domain Custom Resource \" + domainsUid[0] + \"test from test-\" + domainNamespaces[0]);\n+  \n+      logger.info(\"Delete domain2test custom resource in namespace {0}\", \"test-\" + domainNamespaces[1]);\n+      deleteDomainCustomResource(domainsUid[1] + \"test\", \"test-\" + domainNamespaces[1]);\n+      logger.info(\"Deleted Domain Custom Resource \" + domainsUid[1] + \"test from test-\" + domainNamespaces[1]);\n+  \n+      logger.info(\"Delete weblogic custom resource in namespace {0}\", \"weblogic\" + domainNamespaces[1]);\n+      deleteDomainCustomResource(\"weblogic\", \"weblogic\" + domainNamespaces[1]);\n+      logger.info(\"Deleted Domain Custom Resource weblogic from weblogic\" + domainNamespaces[1]);\n+    } finally {\n+      deleteSecrets(\"default\");\n+      deleteSecrets(\"atest-\" + domainNamespaces[0]);\n+     \n+      deleteNamespace(\"atest-\" + domainNamespaces[0]);\n+      //delete operator\n+      for (HelmParams helmParam : opHelmParams) {\n+        uninstallOperator(helmParam);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=RegExp,\n+   * and domainNamespaceRegExp=^test and domainNamespace= manageByExp3NS.\n+   * Deploy two custom domain resources in two different namespaces with names starting with test\n+   * and verify all server pods in the domains were created and ready.\n+   * Verify operator is able to manage these domains by scaling.\n+   * Try to start another domain with namespace manageByExp3NS. Verify it is not started by operator\n+   * and value of domainNamespace is ignored for both specific namespace and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade helm chart to switch to using LabelSelector, start domain and verify operator can scale it.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using expression namespace management\")\n+  public void testNsManageByExp() {\n+    //create domain namespace\n+    String manageByExp1NS = \"test-\" +  domainNamespaces[0];\n+    String manageByExp2NS = \"test-\" +  domainNamespaces[1];\n+    String manageByExpDomain1Uid = \"test-\" + domainsUid[0];\n+    String manageByExpDomain2Uid = \"test-\" + domainsUid[1];\n+    String manageByLabelNS = \"weblogic1\" + domainNamespaces[0];\n+    String manageByLabelDomainUid = \"weblogic1\" + domainsUid[0];\n+    String manageByExp3NS = \"atest-\" +  domainNamespaces[0];\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp1NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp2NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp3NS));\n+    installAndVerifyOperatorCanManageDomainByNSRegExp(manageByExp1NS, manageByExp2NS,\n+        manageByExpDomain1Uid, manageByExpDomain2Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain will not start for specific NS and default\n+    checkPodNotCreated(domainsUid[2] + adminServerPrefix, domainsUid[2], domainNamespaces[2]);\n+    checkDomainNotStartedInDefaultNS();\n+    //verify that operator can't start domain if namespace name does not start from test\n+    createSecrets(manageByExp3NS);\n+    checkPodNotCreated(domainsUid[2] + adminServerPrefix, domainsUid[2], manageByExp3NS);\n+\n+    // install  operator sharing same domain\n+    checkSecondOperatorFailedToShareSameNS(manageByExp1NS);\n+    switchNSManagementToLabelSelectUsingUpgradeOperator(manageByLabelNS, manageByExp1NS,\n+        manageByLabelDomainUid, manageByExpDomain1Uid);\n+    //check operator can't manage anymore manageByExp1NS\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespaces[1], manageByExpDomain1Uid,\n+        manageByExp1NS), \"Operator can still manage domain \"\n+        + manageByExp1NS + \" in the namespace \" + manageByExp1NS);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1.\n+   * Deploy a custom domain resource in the namespace with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   * Verify operator can't start another domain with namespace2 with label2.\n+   * Modify namespace2 to set label1, verify that operator can manage it.\n+   * Verify that domainNamespaces field will be ignored and domain will not start for namespaces:\n+   * (domain3Namespace) and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade operator to replace namespace management using RegExp namespaces.\n+   * Verify it can manage added domain and can't manage old domain by scaling .\n+   * Verify that upgrade helm fail if try to add domain, managed by other operator.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using label namespace management\")\n+  public void testNsManageByLabel() {\n+    String manageByLabelDomain1NS = domainNamespaces[0];\n+    String manageByLabelDomain2NS = domainNamespaces[1];\n+    String manageByExpDomainUid = \"weblogic2\" + domainNamespaces[1];\n+    String manageByExpDomainNS = \"weblogic2\" + domainNamespaces[1];\n+    String manageByLabelDomain1Uid = domainsUid[0];\n+    String manageByLabelDomain2Uid = domainsUid[1];\n+    installAndVerifyOperatorCanManageDomainByLabelSelector(manageByLabelDomain1NS, manageByLabelDomain2NS,\n+        manageByLabelDomain1Uid, manageByLabelDomain2Uid);\n+    addExtraDomainByAddingLabelToNS(labels1, manageByLabelDomain2NS, manageByLabelDomain2Uid);\n+    checkDomainNotStartedInDefaultNS();\n+    checkSecondOperatorFailedToShareSameNS(manageByLabelDomain1NS);\n+    switchNSManagementToRegExpUsingUpgradeOperator(manageByLabelDomain1NS, manageByExpDomainNS,\n+        manageByLabelDomain1Uid, manageByExpDomainUid);\n+    checkUpgradeFailedToAddNSManagedByAnotherOperator();\n+  }\n+\n+  /**\n+   * Create namespace ns1 with no label\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1 and enableRbac=false.\n+   * Add label1 to ns1 and verify domain can't be started\n+   * Call upgrade operator with reuse values to enable management for ns1\n+   * Deploy a custom domain resource in the namespace ns1 with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   */\n+  @Test\n+  @Order(3)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" with enableClusterRoleBinding\")\n+  public void testSwitchRbac() {\n+    String manageByLabelDomainNS = domainNamespaces[0] + \"test4\";\n+    String manageByLabelDomainUid = domainsUid[0] + \"test4\";\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelDomainNS));\n+    opHelmParams[2] = installAndVerifyOperator(OPERATOR_RELEASE_NAME,\n+        opNamespaces[3], \"LabelSelector\",\n+        \"mytest4\", false);\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest4\", manageByLabelDomainUid);\n+    assertDoesNotThrow(() -> addLabelsToNamespace(manageByLabelDomainNS, labels));\n+    //verify domain can't be started because operator does not have permission to manage it\n+    createSecrets(manageByLabelDomainNS);\n+    checkPodNotCreated(manageByLabelDomainUid + adminServerPrefix, manageByLabelDomainUid, manageByLabelDomainNS);\n+    deleteDomainCrd(manageByLabelDomainNS, manageByLabelDomainUid);\n+    //upgrade operator and start domain\n+    int externalRestHttpsPort = getServiceNodePort(opNamespaces[3], \"external-weblogic-operator-svc\");\n+\n+    OperatorParams opParams = new OperatorParams()\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .helmParams(opHelmParams[2]);\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespaces[3], opParams));\n+    assertTrue(createDomainCrdAndVerifyDomainIsRunning(manageByLabelDomainNS, manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(opNamespaces[3], manageByLabelDomainUid);\n+  }\n+\n+  private void checkUpgradeFailedToAddNSManagedByAnotherOperator() {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    // for ns names starting from weblogic, there one of domains\n+    //in namespace weblogic* is managed by operator2\n+    int externalRestHttpsPort = getServiceNodePort(opNamespaces[0], \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams[0])\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic\");\n+\n+    assertFalse(upgradeAndVerifyOperator(opNamespaces[0], opParams), \"Upgrade does not fail when adding domain,\"\n+        + \" managed by other operator\");\n+  }\n+\n+  private void switchNSManagementToRegExpUsingUpgradeOperator(String manageByLabelNS,\n+                                                              String manageByExpNS,\n+                                                              String manageByLabelDomainUid,\n+                                                              String manageByExpDomainUid) {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    assertDoesNotThrow(() -> createNamespace(manageByExpNS));\n+    int externalRestHttpsPort = getServiceNodePort(opNamespaces[0], \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams[0])\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic2\");\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespaces[0], opParams));\n+\n+    //verify domain is started in namespace with name starting with weblogic* and operator can scale it.\n+    createSecrets(manageByExpNS);\n+    assertTrue(createDomainCrdAndVerifyDomainIsRunning(manageByExpNS,manageByExpDomainUid));\n+    checkOperatorCanScaleDomain(opNamespaces[0],manageByExpDomainUid);\n+    //verify operator can't manage anymore domain running in the namespace with label\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespaces[0], manageByLabelDomainUid, manageByLabelNS),\n+        \"Operator can still manage domain \"\n+        + manageByLabelDomainUid + \" in the namespace \" + manageByLabelNS);\n+  }\n+\n+  private void addExtraDomainByAddingLabelToNS(Map<String, String> labels, String domainNS, String domainUid) {\n+    deleteDomainCrd(domainNS, domainUid);\n+\n+    //switch to the label1, managed by operator and verify domain is started and can be managed by operator.\n+    setLabelToNamespace(domainNS, labels);\n+    assertTrue(createDomainCrdAndVerifyDomainIsRunning(domainNS, domainUid));\n+    checkOperatorCanScaleDomain(opNamespaces[0], domainUid);\n+  }\n+\n+  private void deleteDomainCrd(String domainNS, String domainUid) {\n+    //clean up domain resources in namespace and set namespace to label , managed by operator\n+    logger.info(\"deleting domain custom resource {0}\", domainUid);\n+    assertTrue(deleteDomainCustomResource(domainUid, domainNS));\n+\n+    // wait until domain was deleted\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be deleted in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNS,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainDoesNotExist(domainUid, DOMAIN_VERSION, domainNS));\n+  }\n+\n+  private void installAndVerifyOperatorCanManageDomainByLabelSelector(String manageByLabelDomain1NS,\n+                                                                      String manageByLabelDomain2NS,\n+                                                                      String manageByLabelDomain1Uid,\n+                                                                      String manageByLabelDomain2Uid) {\n+    // install and verify operator set to manage domains based on LabelSelector strategy,\n+    // domainNamespaces set to domain4 will be ignored\n+    opHelmParams[0] = installAndVerifyOperator(OPERATOR_RELEASE_NAME,\n+        opNamespaces[0], \"LabelSelector\",\n+        OPERATOR_RELEASE_NAME, true, manageByLabelDomain1NS);\n+\n+    logger.info(\"Installing and verifying domain1\");\n+    createSecrets(manageByLabelDomain1NS);\n+    assertTrue(createDomainCrdAndVerifyDomainIsRunning(manageByLabelDomain1NS, manageByLabelDomain1Uid),\n+        \"can't start or verify domain in namespace \" + manageByLabelDomain1NS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1586bbc49253812267c10dff605581af863931c5"}, "originalPosition": 386}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIwMzA1OQ==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r501203059", "createdAt": "2020-10-07T17:55:01Z", "author": {"login": "marinakog"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,633 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCIR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOcirRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String[] opNamespaces = new String[4];\n+\n+  // domain constants\n+  private static final String[] domainsUid = {\"managensdomain1\",\"managensdomain2\",\"managensdomain3\",\"managensdomain4\"};\n+  private static String[] domainNamespaces = new String[4];\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams[] opHelmParams = new HelmParams[3];\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    for (int i = 0; i < 4; i++) {\n+      // get a unique domain namespace\n+      assertNotNull(namespaces.get(i), \"Namespace list is null\");\n+      logger.info(\"Getting a unique namespace {0} for WebLogic domain {1}\", namespaces.get(i), i);\n+      domainNamespaces[i] = namespaces.get(i);\n+    }\n+    for (int i = 4; i < 8; i++) {\n+      // get a unique operator namespace\n+      logger.info(\"Getting a unique namespace for operator {0}\", (i - 4));\n+      assertNotNull(namespaces.get(i), \"Namespace list is null\");\n+      opNamespaces[(i - 4)] = namespaces.get(i);\n+    }\n+\n+    createSecrets(domainNamespaces[2]);\n+    createSecrets(\"default\");\n+    labels1 = new java.util.HashMap<>();\n+    labels1.put(OPERATOR_RELEASE_NAME, OPERATOR_RELEASE_NAME);\n+    labels2 = new java.util.HashMap<>();\n+    labels2.put(OPERATOR_RELEASE_NAME + \"2\", OPERATOR_RELEASE_NAME);\n+    setLabelToNamespace(domainNamespaces[0], labels1);\n+    setLabelToNamespace(domainNamespaces[1], labels2);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    try {\n+      // Delete domain custom resource\n+      for (int i = 0; i < 4; i++) {\n+        logger.info(\"Delete domain1 custom resource in namespace {0}\", domainNamespaces[i]);\n+        deleteDomainCustomResource(domainsUid[i], domainNamespaces[i]);\n+        logger.info(\"Deleted Domain Custom Resource \" + domainsUid[i] + \" from \" + domainNamespaces[i]);\n+      }\n+      logger.info(\"Delete domain1test custom resource in namespace {0}\", \"test-\" + domainNamespaces[0]);\n+      deleteDomainCustomResource(domainsUid[0] + \"test\", \"test-\" + domainNamespaces[0]);\n+      logger.info(\"Deleted Domain Custom Resource \" + domainsUid[0] + \"test from test-\" + domainNamespaces[0]);\n+  \n+      logger.info(\"Delete domain2test custom resource in namespace {0}\", \"test-\" + domainNamespaces[1]);\n+      deleteDomainCustomResource(domainsUid[1] + \"test\", \"test-\" + domainNamespaces[1]);\n+      logger.info(\"Deleted Domain Custom Resource \" + domainsUid[1] + \"test from test-\" + domainNamespaces[1]);\n+  \n+      logger.info(\"Delete weblogic custom resource in namespace {0}\", \"weblogic\" + domainNamespaces[1]);\n+      deleteDomainCustomResource(\"weblogic\", \"weblogic\" + domainNamespaces[1]);\n+      logger.info(\"Deleted Domain Custom Resource weblogic from weblogic\" + domainNamespaces[1]);\n+    } finally {\n+      deleteSecrets(\"default\");\n+      deleteSecrets(\"atest-\" + domainNamespaces[0]);\n+     \n+      deleteNamespace(\"atest-\" + domainNamespaces[0]);\n+      //delete operator\n+      for (HelmParams helmParam : opHelmParams) {\n+        uninstallOperator(helmParam);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=RegExp,\n+   * and domainNamespaceRegExp=^test and domainNamespace= manageByExp3NS.\n+   * Deploy two custom domain resources in two different namespaces with names starting with test\n+   * and verify all server pods in the domains were created and ready.\n+   * Verify operator is able to manage these domains by scaling.\n+   * Try to start another domain with namespace manageByExp3NS. Verify it is not started by operator\n+   * and value of domainNamespace is ignored for both specific namespace and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade helm chart to switch to using LabelSelector, start domain and verify operator can scale it.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using expression namespace management\")\n+  public void testNsManageByExp() {\n+    //create domain namespace\n+    String manageByExp1NS = \"test-\" +  domainNamespaces[0];\n+    String manageByExp2NS = \"test-\" +  domainNamespaces[1];\n+    String manageByExpDomain1Uid = \"test-\" + domainsUid[0];\n+    String manageByExpDomain2Uid = \"test-\" + domainsUid[1];\n+    String manageByLabelNS = \"weblogic1\" + domainNamespaces[0];\n+    String manageByLabelDomainUid = \"weblogic1\" + domainsUid[0];\n+    String manageByExp3NS = \"atest-\" +  domainNamespaces[0];\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp1NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp2NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp3NS));\n+    installAndVerifyOperatorCanManageDomainByNSRegExp(manageByExp1NS, manageByExp2NS,\n+        manageByExpDomain1Uid, manageByExpDomain2Uid);\n+\n+    //verify that domainNamespaces field will be ignored and domain will not start for specific NS and default\n+    checkPodNotCreated(domainsUid[2] + adminServerPrefix, domainsUid[2], domainNamespaces[2]);\n+    checkDomainNotStartedInDefaultNS();\n+    //verify that operator can't start domain if namespace name does not start from test\n+    createSecrets(manageByExp3NS);\n+    checkPodNotCreated(domainsUid[2] + adminServerPrefix, domainsUid[2], manageByExp3NS);\n+\n+    // install  operator sharing same domain\n+    checkSecondOperatorFailedToShareSameNS(manageByExp1NS);\n+    switchNSManagementToLabelSelectUsingUpgradeOperator(manageByLabelNS, manageByExp1NS,\n+        manageByLabelDomainUid, manageByExpDomain1Uid);\n+    //check operator can't manage anymore manageByExp1NS\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespaces[1], manageByExpDomain1Uid,\n+        manageByExp1NS), \"Operator can still manage domain \"\n+        + manageByExp1NS + \" in the namespace \" + manageByExp1NS);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1.\n+   * Deploy a custom domain resource in the namespace with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   * Verify operator can't start another domain with namespace2 with label2.\n+   * Modify namespace2 to set label1, verify that operator can manage it.\n+   * Verify that domainNamespaces field will be ignored and domain will not start for namespaces:\n+   * (domain3Namespace) and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade operator to replace namespace management using RegExp namespaces.\n+   * Verify it can manage added domain and can't manage old domain by scaling .\n+   * Verify that upgrade helm fail if try to add domain, managed by other operator.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using label namespace management\")\n+  public void testNsManageByLabel() {\n+    String manageByLabelDomain1NS = domainNamespaces[0];\n+    String manageByLabelDomain2NS = domainNamespaces[1];\n+    String manageByExpDomainUid = \"weblogic2\" + domainNamespaces[1];\n+    String manageByExpDomainNS = \"weblogic2\" + domainNamespaces[1];\n+    String manageByLabelDomain1Uid = domainsUid[0];\n+    String manageByLabelDomain2Uid = domainsUid[1];\n+    installAndVerifyOperatorCanManageDomainByLabelSelector(manageByLabelDomain1NS, manageByLabelDomain2NS,\n+        manageByLabelDomain1Uid, manageByLabelDomain2Uid);\n+    addExtraDomainByAddingLabelToNS(labels1, manageByLabelDomain2NS, manageByLabelDomain2Uid);\n+    checkDomainNotStartedInDefaultNS();\n+    checkSecondOperatorFailedToShareSameNS(manageByLabelDomain1NS);\n+    switchNSManagementToRegExpUsingUpgradeOperator(manageByLabelDomain1NS, manageByExpDomainNS,\n+        manageByLabelDomain1Uid, manageByExpDomainUid);\n+    checkUpgradeFailedToAddNSManagedByAnotherOperator();\n+  }\n+\n+  /**\n+   * Create namespace ns1 with no label\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1 and enableRbac=false.\n+   * Add label1 to ns1 and verify domain can't be started\n+   * Call upgrade operator with reuse values to enable management for ns1\n+   * Deploy a custom domain resource in the namespace ns1 with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   */\n+  @Test\n+  @Order(3)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" with enableClusterRoleBinding\")\n+  public void testSwitchRbac() {\n+    String manageByLabelDomainNS = domainNamespaces[0] + \"test4\";\n+    String manageByLabelDomainUid = domainsUid[0] + \"test4\";\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelDomainNS));\n+    opHelmParams[2] = installAndVerifyOperator(OPERATOR_RELEASE_NAME,\n+        opNamespaces[3], \"LabelSelector\",\n+        \"mytest4\", false);\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest4\", manageByLabelDomainUid);\n+    assertDoesNotThrow(() -> addLabelsToNamespace(manageByLabelDomainNS, labels));\n+    //verify domain can't be started because operator does not have permission to manage it\n+    createSecrets(manageByLabelDomainNS);\n+    checkPodNotCreated(manageByLabelDomainUid + adminServerPrefix, manageByLabelDomainUid, manageByLabelDomainNS);\n+    deleteDomainCrd(manageByLabelDomainNS, manageByLabelDomainUid);\n+    //upgrade operator and start domain\n+    int externalRestHttpsPort = getServiceNodePort(opNamespaces[3], \"external-weblogic-operator-svc\");\n+\n+    OperatorParams opParams = new OperatorParams()\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .helmParams(opHelmParams[2]);\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespaces[3], opParams));\n+    assertTrue(createDomainCrdAndVerifyDomainIsRunning(manageByLabelDomainNS, manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(opNamespaces[3], manageByLabelDomainUid);\n+  }\n+\n+  private void checkUpgradeFailedToAddNSManagedByAnotherOperator() {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    // for ns names starting from weblogic, there one of domains\n+    //in namespace weblogic* is managed by operator2\n+    int externalRestHttpsPort = getServiceNodePort(opNamespaces[0], \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams[0])\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic\");\n+\n+    assertFalse(upgradeAndVerifyOperator(opNamespaces[0], opParams), \"Upgrade does not fail when adding domain,\"\n+        + \" managed by other operator\");\n+  }\n+\n+  private void switchNSManagementToRegExpUsingUpgradeOperator(String manageByLabelNS,\n+                                                              String manageByExpNS,\n+                                                              String manageByLabelDomainUid,\n+                                                              String manageByExpDomainUid) {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    assertDoesNotThrow(() -> createNamespace(manageByExpNS));\n+    int externalRestHttpsPort = getServiceNodePort(opNamespaces[0], \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams[0])\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic2\");\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespaces[0], opParams));\n+\n+    //verify domain is started in namespace with name starting with weblogic* and operator can scale it.\n+    createSecrets(manageByExpNS);\n+    assertTrue(createDomainCrdAndVerifyDomainIsRunning(manageByExpNS,manageByExpDomainUid));\n+    checkOperatorCanScaleDomain(opNamespaces[0],manageByExpDomainUid);\n+    //verify operator can't manage anymore domain running in the namespace with label\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespaces[0], manageByLabelDomainUid, manageByLabelNS),\n+        \"Operator can still manage domain \"\n+        + manageByLabelDomainUid + \" in the namespace \" + manageByLabelNS);\n+  }\n+\n+  private void addExtraDomainByAddingLabelToNS(Map<String, String> labels, String domainNS, String domainUid) {\n+    deleteDomainCrd(domainNS, domainUid);\n+\n+    //switch to the label1, managed by operator and verify domain is started and can be managed by operator.\n+    setLabelToNamespace(domainNS, labels);\n+    assertTrue(createDomainCrdAndVerifyDomainIsRunning(domainNS, domainUid));\n+    checkOperatorCanScaleDomain(opNamespaces[0], domainUid);\n+  }\n+\n+  private void deleteDomainCrd(String domainNS, String domainUid) {\n+    //clean up domain resources in namespace and set namespace to label , managed by operator\n+    logger.info(\"deleting domain custom resource {0}\", domainUid);\n+    assertTrue(deleteDomainCustomResource(domainUid, domainNS));\n+\n+    // wait until domain was deleted\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be deleted in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNS,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainDoesNotExist(domainUid, DOMAIN_VERSION, domainNS));\n+  }\n+\n+  private void installAndVerifyOperatorCanManageDomainByLabelSelector(String manageByLabelDomain1NS,\n+                                                                      String manageByLabelDomain2NS,\n+                                                                      String manageByLabelDomain1Uid,\n+                                                                      String manageByLabelDomain2Uid) {\n+    // install and verify operator set to manage domains based on LabelSelector strategy,\n+    // domainNamespaces set to domain4 will be ignored\n+    opHelmParams[0] = installAndVerifyOperator(OPERATOR_RELEASE_NAME,\n+        opNamespaces[0], \"LabelSelector\",\n+        OPERATOR_RELEASE_NAME, true, manageByLabelDomain1NS);\n+\n+    logger.info(\"Installing and verifying domain1\");\n+    createSecrets(manageByLabelDomain1NS);\n+    assertTrue(createDomainCrdAndVerifyDomainIsRunning(manageByLabelDomain1NS, manageByLabelDomain1Uid),\n+        \"can't start or verify domain in namespace \" + manageByLabelDomain1NS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5OTQwNw=="}, "originalCommit": {"oid": "1586bbc49253812267c10dff605581af863931c5"}, "originalPosition": 386}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTYyNjU1OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMTo1NTowMlrOHeLUpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNTozNzoxMlrOHekmKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQwNDgzNg==", "bodyText": "Method name MUST be  self explanatory and descriptive . Modify the method name to  testNameSpaceManageByRegularExpression()", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r501404836", "createdAt": "2020-10-08T01:55:02Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,614 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCIR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOcirRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String[] opNamespaces = new String[4];\n+\n+  // domain constants\n+  private static final String[] domainsUid = {\"managensdomain1\",\"managensdomain2\",\"managensdomain3\",\"managensdomain4\"};\n+  private static String[] domainNamespaces = new String[4];\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams[] opHelmParams = new HelmParams[3];\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    for (int i = 0; i < 4; i++) {\n+      // get a unique domain namespace\n+      assertNotNull(namespaces.get(i), \"Namespace list is null\");\n+      logger.info(\"Getting a unique namespace {0} for WebLogic domain {1}\", namespaces.get(i), i);\n+      domainNamespaces[i] = namespaces.get(i);\n+    }\n+    for (int i = 4; i < 8; i++) {\n+      // get a unique operator namespace\n+      logger.info(\"Getting a unique namespace for operator {0}\", (i - 4));\n+      assertNotNull(namespaces.get(i), \"Namespace list is null\");\n+      opNamespaces[(i - 4)] = namespaces.get(i);\n+    }\n+\n+    createSecrets(domainNamespaces[2]);\n+    createSecrets(\"default\");\n+    labels1 = new java.util.HashMap<>();\n+    labels1.put(OPERATOR_RELEASE_NAME, OPERATOR_RELEASE_NAME);\n+    labels2 = new java.util.HashMap<>();\n+    labels2.put(OPERATOR_RELEASE_NAME + \"2\", OPERATOR_RELEASE_NAME);\n+    setLabelToNamespace(domainNamespaces[0], labels1);\n+    setLabelToNamespace(domainNamespaces[1], labels2);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    try {\n+      // Delete domain custom resource\n+      for (int i = 0; i < 4; i++) {\n+        logger.info(\"Delete domain1 custom resource in namespace {0}\", domainNamespaces[i]);\n+        deleteDomainCustomResource(domainsUid[i], domainNamespaces[i]);\n+        logger.info(\"Deleted Domain Custom Resource \" + domainsUid[i] + \" from \" + domainNamespaces[i]);\n+      }\n+      logger.info(\"Delete domain1test custom resource in namespace {0}\", \"test-\" + domainNamespaces[0]);\n+      deleteDomainCustomResource(domainsUid[0] + \"test\", \"test-\" + domainNamespaces[0]);\n+      logger.info(\"Deleted Domain Custom Resource \" + domainsUid[0] + \"test from test-\" + domainNamespaces[0]);\n+  \n+      logger.info(\"Delete domain2test custom resource in namespace {0}\", \"test-\" + domainNamespaces[1]);\n+      deleteDomainCustomResource(domainsUid[1] + \"test\", \"test-\" + domainNamespaces[1]);\n+      logger.info(\"Deleted Domain Custom Resource \" + domainsUid[1] + \"test from test-\" + domainNamespaces[1]);\n+  \n+      logger.info(\"Delete weblogic custom resource in namespace {0}\", \"weblogic\" + domainNamespaces[1]);\n+      deleteDomainCustomResource(\"weblogic\", \"weblogic\" + domainNamespaces[1]);\n+      logger.info(\"Deleted Domain Custom Resource weblogic from weblogic\" + domainNamespaces[1]);\n+    } finally {\n+      deleteSecrets(\"default\");\n+      deleteSecrets(\"atest-\" + domainNamespaces[0]);\n+     \n+      deleteNamespace(\"atest-\" + domainNamespaces[0]);\n+      //delete operator\n+      for (HelmParams helmParam : opHelmParams) {\n+        uninstallOperator(helmParam);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=RegExp,\n+   * and domainNamespaceRegExp=^test and domainNamespace= manageByExp3NS.\n+   * Deploy two custom domain resources in two different namespaces with names starting with test\n+   * and verify all server pods in the domains were created and ready.\n+   * Verify operator is able to manage these domains by scaling.\n+   * Try to start another domain with namespace manageByExp3NS. Verify it is not started by operator\n+   * and value of domainNamespace is ignored for both specific namespace and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade helm chart to switch to using LabelSelector, start domain and verify operator can scale it.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using expression namespace management\")\n+  public void testNsManageByExp() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d2a2c89d138d506bd5a5a5c1d3894a09c55726f"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxODkyMQ==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r501818921", "createdAt": "2020-10-08T15:37:12Z", "author": {"login": "marinakog"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,614 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCIR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOcirRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String[] opNamespaces = new String[4];\n+\n+  // domain constants\n+  private static final String[] domainsUid = {\"managensdomain1\",\"managensdomain2\",\"managensdomain3\",\"managensdomain4\"};\n+  private static String[] domainNamespaces = new String[4];\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams[] opHelmParams = new HelmParams[3];\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    for (int i = 0; i < 4; i++) {\n+      // get a unique domain namespace\n+      assertNotNull(namespaces.get(i), \"Namespace list is null\");\n+      logger.info(\"Getting a unique namespace {0} for WebLogic domain {1}\", namespaces.get(i), i);\n+      domainNamespaces[i] = namespaces.get(i);\n+    }\n+    for (int i = 4; i < 8; i++) {\n+      // get a unique operator namespace\n+      logger.info(\"Getting a unique namespace for operator {0}\", (i - 4));\n+      assertNotNull(namespaces.get(i), \"Namespace list is null\");\n+      opNamespaces[(i - 4)] = namespaces.get(i);\n+    }\n+\n+    createSecrets(domainNamespaces[2]);\n+    createSecrets(\"default\");\n+    labels1 = new java.util.HashMap<>();\n+    labels1.put(OPERATOR_RELEASE_NAME, OPERATOR_RELEASE_NAME);\n+    labels2 = new java.util.HashMap<>();\n+    labels2.put(OPERATOR_RELEASE_NAME + \"2\", OPERATOR_RELEASE_NAME);\n+    setLabelToNamespace(domainNamespaces[0], labels1);\n+    setLabelToNamespace(domainNamespaces[1], labels2);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    try {\n+      // Delete domain custom resource\n+      for (int i = 0; i < 4; i++) {\n+        logger.info(\"Delete domain1 custom resource in namespace {0}\", domainNamespaces[i]);\n+        deleteDomainCustomResource(domainsUid[i], domainNamespaces[i]);\n+        logger.info(\"Deleted Domain Custom Resource \" + domainsUid[i] + \" from \" + domainNamespaces[i]);\n+      }\n+      logger.info(\"Delete domain1test custom resource in namespace {0}\", \"test-\" + domainNamespaces[0]);\n+      deleteDomainCustomResource(domainsUid[0] + \"test\", \"test-\" + domainNamespaces[0]);\n+      logger.info(\"Deleted Domain Custom Resource \" + domainsUid[0] + \"test from test-\" + domainNamespaces[0]);\n+  \n+      logger.info(\"Delete domain2test custom resource in namespace {0}\", \"test-\" + domainNamespaces[1]);\n+      deleteDomainCustomResource(domainsUid[1] + \"test\", \"test-\" + domainNamespaces[1]);\n+      logger.info(\"Deleted Domain Custom Resource \" + domainsUid[1] + \"test from test-\" + domainNamespaces[1]);\n+  \n+      logger.info(\"Delete weblogic custom resource in namespace {0}\", \"weblogic\" + domainNamespaces[1]);\n+      deleteDomainCustomResource(\"weblogic\", \"weblogic\" + domainNamespaces[1]);\n+      logger.info(\"Deleted Domain Custom Resource weblogic from weblogic\" + domainNamespaces[1]);\n+    } finally {\n+      deleteSecrets(\"default\");\n+      deleteSecrets(\"atest-\" + domainNamespaces[0]);\n+     \n+      deleteNamespace(\"atest-\" + domainNamespaces[0]);\n+      //delete operator\n+      for (HelmParams helmParam : opHelmParams) {\n+        uninstallOperator(helmParam);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=RegExp,\n+   * and domainNamespaceRegExp=^test and domainNamespace= manageByExp3NS.\n+   * Deploy two custom domain resources in two different namespaces with names starting with test\n+   * and verify all server pods in the domains were created and ready.\n+   * Verify operator is able to manage these domains by scaling.\n+   * Try to start another domain with namespace manageByExp3NS. Verify it is not started by operator\n+   * and value of domainNamespace is ignored for both specific namespace and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade helm chart to switch to using LabelSelector, start domain and verify operator can scale it.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using expression namespace management\")\n+  public void testNsManageByExp() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQwNDgzNg=="}, "originalCommit": {"oid": "4d2a2c89d138d506bd5a5a5c1d3894a09c55726f"}, "originalPosition": 192}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTYzMTAzOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMTo1NzoxNlrOHeLXFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNTozNzoyNlrOHekmzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQwNTQ2Mw==", "bodyText": "testNsManageByLabel --> testNameSpaceManagedByLabelSelector", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r501405463", "createdAt": "2020-10-08T01:57:16Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,614 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCIR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOcirRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String[] opNamespaces = new String[4];\n+\n+  // domain constants\n+  private static final String[] domainsUid = {\"managensdomain1\",\"managensdomain2\",\"managensdomain3\",\"managensdomain4\"};\n+  private static String[] domainNamespaces = new String[4];\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams[] opHelmParams = new HelmParams[3];\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    for (int i = 0; i < 4; i++) {\n+      // get a unique domain namespace\n+      assertNotNull(namespaces.get(i), \"Namespace list is null\");\n+      logger.info(\"Getting a unique namespace {0} for WebLogic domain {1}\", namespaces.get(i), i);\n+      domainNamespaces[i] = namespaces.get(i);\n+    }\n+    for (int i = 4; i < 8; i++) {\n+      // get a unique operator namespace\n+      logger.info(\"Getting a unique namespace for operator {0}\", (i - 4));\n+      assertNotNull(namespaces.get(i), \"Namespace list is null\");\n+      opNamespaces[(i - 4)] = namespaces.get(i);\n+    }\n+\n+    createSecrets(domainNamespaces[2]);\n+    createSecrets(\"default\");\n+    labels1 = new java.util.HashMap<>();\n+    labels1.put(OPERATOR_RELEASE_NAME, OPERATOR_RELEASE_NAME);\n+    labels2 = new java.util.HashMap<>();\n+    labels2.put(OPERATOR_RELEASE_NAME + \"2\", OPERATOR_RELEASE_NAME);\n+    setLabelToNamespace(domainNamespaces[0], labels1);\n+    setLabelToNamespace(domainNamespaces[1], labels2);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    try {\n+      // Delete domain custom resource\n+      for (int i = 0; i < 4; i++) {\n+        logger.info(\"Delete domain1 custom resource in namespace {0}\", domainNamespaces[i]);\n+        deleteDomainCustomResource(domainsUid[i], domainNamespaces[i]);\n+        logger.info(\"Deleted Domain Custom Resource \" + domainsUid[i] + \" from \" + domainNamespaces[i]);\n+      }\n+      logger.info(\"Delete domain1test custom resource in namespace {0}\", \"test-\" + domainNamespaces[0]);\n+      deleteDomainCustomResource(domainsUid[0] + \"test\", \"test-\" + domainNamespaces[0]);\n+      logger.info(\"Deleted Domain Custom Resource \" + domainsUid[0] + \"test from test-\" + domainNamespaces[0]);\n+  \n+      logger.info(\"Delete domain2test custom resource in namespace {0}\", \"test-\" + domainNamespaces[1]);\n+      deleteDomainCustomResource(domainsUid[1] + \"test\", \"test-\" + domainNamespaces[1]);\n+      logger.info(\"Deleted Domain Custom Resource \" + domainsUid[1] + \"test from test-\" + domainNamespaces[1]);\n+  \n+      logger.info(\"Delete weblogic custom resource in namespace {0}\", \"weblogic\" + domainNamespaces[1]);\n+      deleteDomainCustomResource(\"weblogic\", \"weblogic\" + domainNamespaces[1]);\n+      logger.info(\"Deleted Domain Custom Resource weblogic from weblogic\" + domainNamespaces[1]);\n+    } finally {\n+      deleteSecrets(\"default\");\n+      deleteSecrets(\"atest-\" + domainNamespaces[0]);\n+     \n+      deleteNamespace(\"atest-\" + domainNamespaces[0]);\n+      //delete operator\n+      for (HelmParams helmParam : opHelmParams) {\n+        uninstallOperator(helmParam);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=RegExp,\n+   * and domainNamespaceRegExp=^test and domainNamespace= manageByExp3NS.\n+   * Deploy two custom domain resources in two different namespaces with names starting with test\n+   * and verify all server pods in the domains were created and ready.\n+   * Verify operator is able to manage these domains by scaling.\n+   * Try to start another domain with namespace manageByExp3NS. Verify it is not started by operator\n+   * and value of domainNamespace is ignored for both specific namespace and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade helm chart to switch to using LabelSelector, start domain and verify operator can scale it.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using expression namespace management\")\n+  public void testNsManageByExp() {\n+    //create domain namespace\n+    String manageByExp1NS = \"test-\" +  domainNamespaces[0];\n+    String manageByExp2NS = \"test-\" +  domainNamespaces[1];\n+    String manageByExpDomain1Uid = \"test-\" + domainsUid[0];\n+    String manageByExpDomain2Uid = \"test-\" + domainsUid[1];\n+    String manageByExp3NS = \"atest-\" +  domainNamespaces[0];\n+\n+    Map<String,String> managedByExpDomains = new HashMap<>();\n+    managedByExpDomains.put(manageByExp1NS,manageByExpDomain1Uid);\n+    managedByExpDomains.put(manageByExp2NS,manageByExpDomain2Uid);\n+    Map<String,String> unmanagedByExpDomains = new HashMap<>();\n+    unmanagedByExpDomains.put(manageByExp3NS,manageByExp3NS);\n+    String manageByLabelNS = \"weblogic1\" + domainNamespaces[0];\n+    String manageByLabelDomainUid = \"weblogic1\" + domainsUid[0];\n+\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp1NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp2NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp3NS));\n+\n+    opHelmParams[1] = installAndVerifyOperatorCanManageDomainBySelector(managedByExpDomains,unmanagedByExpDomains,\n+        \"RegExp\",\"^test\",\n+        opNamespaces[1], null);\n+\n+\n+    //verify that domainNamespaces field will be ignored and domain will not start for default\n+    checkDomainNotStartedInDefaultNS();\n+\n+    // install  operator sharing same domain\n+    checkSecondOperatorFailedToShareSameNS(manageByExp1NS);\n+\n+    //upgrade operator to manage domains with Labeled namespaces\n+    int externalRestHttpsPort = getServiceNodePort(opNamespaces[1], \"external-weblogic-operator-svc\");\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelNS));\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest\", \"weblogic2\");\n+    setLabelToNamespace(manageByLabelNS, labels);\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams[1])\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceLabelSelector(\"mytest\")\n+        .domainNamespaceSelectionStrategy(\"LabelSelector\");\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespaces[1], opParams));\n+\n+    //verify domain is started\n+    createSecrets(manageByLabelNS);\n+    assertTrue(createDomainCrdAndVerifyDomainIsRunning(manageByLabelNS,manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(opNamespaces[1],manageByLabelDomainUid);\n+\n+    //check operator can't manage anymore manageByExp1NS\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespaces[1], manageByExpDomain1Uid,\n+        manageByExp1NS), \"Operator can still manage domain \"\n+        + manageByExp1NS + \" in the namespace \" + manageByExp1NS);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1.\n+   * Deploy a custom domain resource in the namespace with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   * Verify operator can't start another domain with namespace2 with label2.\n+   * Modify namespace2 to set label1, verify that operator can manage it.\n+   * Verify that domainNamespaces field will be ignored and domain will not start for namespaces:\n+   * (domain3Namespace) and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade operator to replace namespace management using RegExp namespaces.\n+   * Verify it can manage added domain and can't manage old domain by scaling .\n+   * Verify that upgrade helm fail if try to add domain, managed by other operator.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using label namespace management\")\n+  public void testNsManageByLabel() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d2a2c89d138d506bd5a5a5c1d3894a09c55726f"}, "originalPosition": 270}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxOTA4Nw==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r501819087", "createdAt": "2020-10-08T15:37:26Z", "author": {"login": "marinakog"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,614 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCIR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOcirRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String[] opNamespaces = new String[4];\n+\n+  // domain constants\n+  private static final String[] domainsUid = {\"managensdomain1\",\"managensdomain2\",\"managensdomain3\",\"managensdomain4\"};\n+  private static String[] domainNamespaces = new String[4];\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams[] opHelmParams = new HelmParams[3];\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    for (int i = 0; i < 4; i++) {\n+      // get a unique domain namespace\n+      assertNotNull(namespaces.get(i), \"Namespace list is null\");\n+      logger.info(\"Getting a unique namespace {0} for WebLogic domain {1}\", namespaces.get(i), i);\n+      domainNamespaces[i] = namespaces.get(i);\n+    }\n+    for (int i = 4; i < 8; i++) {\n+      // get a unique operator namespace\n+      logger.info(\"Getting a unique namespace for operator {0}\", (i - 4));\n+      assertNotNull(namespaces.get(i), \"Namespace list is null\");\n+      opNamespaces[(i - 4)] = namespaces.get(i);\n+    }\n+\n+    createSecrets(domainNamespaces[2]);\n+    createSecrets(\"default\");\n+    labels1 = new java.util.HashMap<>();\n+    labels1.put(OPERATOR_RELEASE_NAME, OPERATOR_RELEASE_NAME);\n+    labels2 = new java.util.HashMap<>();\n+    labels2.put(OPERATOR_RELEASE_NAME + \"2\", OPERATOR_RELEASE_NAME);\n+    setLabelToNamespace(domainNamespaces[0], labels1);\n+    setLabelToNamespace(domainNamespaces[1], labels2);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    try {\n+      // Delete domain custom resource\n+      for (int i = 0; i < 4; i++) {\n+        logger.info(\"Delete domain1 custom resource in namespace {0}\", domainNamespaces[i]);\n+        deleteDomainCustomResource(domainsUid[i], domainNamespaces[i]);\n+        logger.info(\"Deleted Domain Custom Resource \" + domainsUid[i] + \" from \" + domainNamespaces[i]);\n+      }\n+      logger.info(\"Delete domain1test custom resource in namespace {0}\", \"test-\" + domainNamespaces[0]);\n+      deleteDomainCustomResource(domainsUid[0] + \"test\", \"test-\" + domainNamespaces[0]);\n+      logger.info(\"Deleted Domain Custom Resource \" + domainsUid[0] + \"test from test-\" + domainNamespaces[0]);\n+  \n+      logger.info(\"Delete domain2test custom resource in namespace {0}\", \"test-\" + domainNamespaces[1]);\n+      deleteDomainCustomResource(domainsUid[1] + \"test\", \"test-\" + domainNamespaces[1]);\n+      logger.info(\"Deleted Domain Custom Resource \" + domainsUid[1] + \"test from test-\" + domainNamespaces[1]);\n+  \n+      logger.info(\"Delete weblogic custom resource in namespace {0}\", \"weblogic\" + domainNamespaces[1]);\n+      deleteDomainCustomResource(\"weblogic\", \"weblogic\" + domainNamespaces[1]);\n+      logger.info(\"Deleted Domain Custom Resource weblogic from weblogic\" + domainNamespaces[1]);\n+    } finally {\n+      deleteSecrets(\"default\");\n+      deleteSecrets(\"atest-\" + domainNamespaces[0]);\n+     \n+      deleteNamespace(\"atest-\" + domainNamespaces[0]);\n+      //delete operator\n+      for (HelmParams helmParam : opHelmParams) {\n+        uninstallOperator(helmParam);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=RegExp,\n+   * and domainNamespaceRegExp=^test and domainNamespace= manageByExp3NS.\n+   * Deploy two custom domain resources in two different namespaces with names starting with test\n+   * and verify all server pods in the domains were created and ready.\n+   * Verify operator is able to manage these domains by scaling.\n+   * Try to start another domain with namespace manageByExp3NS. Verify it is not started by operator\n+   * and value of domainNamespace is ignored for both specific namespace and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade helm chart to switch to using LabelSelector, start domain and verify operator can scale it.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using expression namespace management\")\n+  public void testNsManageByExp() {\n+    //create domain namespace\n+    String manageByExp1NS = \"test-\" +  domainNamespaces[0];\n+    String manageByExp2NS = \"test-\" +  domainNamespaces[1];\n+    String manageByExpDomain1Uid = \"test-\" + domainsUid[0];\n+    String manageByExpDomain2Uid = \"test-\" + domainsUid[1];\n+    String manageByExp3NS = \"atest-\" +  domainNamespaces[0];\n+\n+    Map<String,String> managedByExpDomains = new HashMap<>();\n+    managedByExpDomains.put(manageByExp1NS,manageByExpDomain1Uid);\n+    managedByExpDomains.put(manageByExp2NS,manageByExpDomain2Uid);\n+    Map<String,String> unmanagedByExpDomains = new HashMap<>();\n+    unmanagedByExpDomains.put(manageByExp3NS,manageByExp3NS);\n+    String manageByLabelNS = \"weblogic1\" + domainNamespaces[0];\n+    String manageByLabelDomainUid = \"weblogic1\" + domainsUid[0];\n+\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp1NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp2NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp3NS));\n+\n+    opHelmParams[1] = installAndVerifyOperatorCanManageDomainBySelector(managedByExpDomains,unmanagedByExpDomains,\n+        \"RegExp\",\"^test\",\n+        opNamespaces[1], null);\n+\n+\n+    //verify that domainNamespaces field will be ignored and domain will not start for default\n+    checkDomainNotStartedInDefaultNS();\n+\n+    // install  operator sharing same domain\n+    checkSecondOperatorFailedToShareSameNS(manageByExp1NS);\n+\n+    //upgrade operator to manage domains with Labeled namespaces\n+    int externalRestHttpsPort = getServiceNodePort(opNamespaces[1], \"external-weblogic-operator-svc\");\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelNS));\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest\", \"weblogic2\");\n+    setLabelToNamespace(manageByLabelNS, labels);\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams[1])\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceLabelSelector(\"mytest\")\n+        .domainNamespaceSelectionStrategy(\"LabelSelector\");\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespaces[1], opParams));\n+\n+    //verify domain is started\n+    createSecrets(manageByLabelNS);\n+    assertTrue(createDomainCrdAndVerifyDomainIsRunning(manageByLabelNS,manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(opNamespaces[1],manageByLabelDomainUid);\n+\n+    //check operator can't manage anymore manageByExp1NS\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespaces[1], manageByExpDomain1Uid,\n+        manageByExp1NS), \"Operator can still manage domain \"\n+        + manageByExp1NS + \" in the namespace \" + manageByExp1NS);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1.\n+   * Deploy a custom domain resource in the namespace with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   * Verify operator can't start another domain with namespace2 with label2.\n+   * Modify namespace2 to set label1, verify that operator can manage it.\n+   * Verify that domainNamespaces field will be ignored and domain will not start for namespaces:\n+   * (domain3Namespace) and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade operator to replace namespace management using RegExp namespaces.\n+   * Verify it can manage added domain and can't manage old domain by scaling .\n+   * Verify that upgrade helm fail if try to add domain, managed by other operator.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using label namespace management\")\n+  public void testNsManageByLabel() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQwNTQ2Mw=="}, "originalCommit": {"oid": "4d2a2c89d138d506bd5a5a5c1d3894a09c55726f"}, "originalPosition": 270}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTYzNDU4OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMTo1OToyNVrOHeLZHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNTozNzoxOVrOHekmjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQwNTk4MQ==", "bodyText": "testSwitchRbac--> TestNameSpaceWithEnableRac", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r501405981", "createdAt": "2020-10-08T01:59:25Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,614 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCIR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOcirRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String[] opNamespaces = new String[4];\n+\n+  // domain constants\n+  private static final String[] domainsUid = {\"managensdomain1\",\"managensdomain2\",\"managensdomain3\",\"managensdomain4\"};\n+  private static String[] domainNamespaces = new String[4];\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams[] opHelmParams = new HelmParams[3];\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    for (int i = 0; i < 4; i++) {\n+      // get a unique domain namespace\n+      assertNotNull(namespaces.get(i), \"Namespace list is null\");\n+      logger.info(\"Getting a unique namespace {0} for WebLogic domain {1}\", namespaces.get(i), i);\n+      domainNamespaces[i] = namespaces.get(i);\n+    }\n+    for (int i = 4; i < 8; i++) {\n+      // get a unique operator namespace\n+      logger.info(\"Getting a unique namespace for operator {0}\", (i - 4));\n+      assertNotNull(namespaces.get(i), \"Namespace list is null\");\n+      opNamespaces[(i - 4)] = namespaces.get(i);\n+    }\n+\n+    createSecrets(domainNamespaces[2]);\n+    createSecrets(\"default\");\n+    labels1 = new java.util.HashMap<>();\n+    labels1.put(OPERATOR_RELEASE_NAME, OPERATOR_RELEASE_NAME);\n+    labels2 = new java.util.HashMap<>();\n+    labels2.put(OPERATOR_RELEASE_NAME + \"2\", OPERATOR_RELEASE_NAME);\n+    setLabelToNamespace(domainNamespaces[0], labels1);\n+    setLabelToNamespace(domainNamespaces[1], labels2);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    try {\n+      // Delete domain custom resource\n+      for (int i = 0; i < 4; i++) {\n+        logger.info(\"Delete domain1 custom resource in namespace {0}\", domainNamespaces[i]);\n+        deleteDomainCustomResource(domainsUid[i], domainNamespaces[i]);\n+        logger.info(\"Deleted Domain Custom Resource \" + domainsUid[i] + \" from \" + domainNamespaces[i]);\n+      }\n+      logger.info(\"Delete domain1test custom resource in namespace {0}\", \"test-\" + domainNamespaces[0]);\n+      deleteDomainCustomResource(domainsUid[0] + \"test\", \"test-\" + domainNamespaces[0]);\n+      logger.info(\"Deleted Domain Custom Resource \" + domainsUid[0] + \"test from test-\" + domainNamespaces[0]);\n+  \n+      logger.info(\"Delete domain2test custom resource in namespace {0}\", \"test-\" + domainNamespaces[1]);\n+      deleteDomainCustomResource(domainsUid[1] + \"test\", \"test-\" + domainNamespaces[1]);\n+      logger.info(\"Deleted Domain Custom Resource \" + domainsUid[1] + \"test from test-\" + domainNamespaces[1]);\n+  \n+      logger.info(\"Delete weblogic custom resource in namespace {0}\", \"weblogic\" + domainNamespaces[1]);\n+      deleteDomainCustomResource(\"weblogic\", \"weblogic\" + domainNamespaces[1]);\n+      logger.info(\"Deleted Domain Custom Resource weblogic from weblogic\" + domainNamespaces[1]);\n+    } finally {\n+      deleteSecrets(\"default\");\n+      deleteSecrets(\"atest-\" + domainNamespaces[0]);\n+     \n+      deleteNamespace(\"atest-\" + domainNamespaces[0]);\n+      //delete operator\n+      for (HelmParams helmParam : opHelmParams) {\n+        uninstallOperator(helmParam);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=RegExp,\n+   * and domainNamespaceRegExp=^test and domainNamespace= manageByExp3NS.\n+   * Deploy two custom domain resources in two different namespaces with names starting with test\n+   * and verify all server pods in the domains were created and ready.\n+   * Verify operator is able to manage these domains by scaling.\n+   * Try to start another domain with namespace manageByExp3NS. Verify it is not started by operator\n+   * and value of domainNamespace is ignored for both specific namespace and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade helm chart to switch to using LabelSelector, start domain and verify operator can scale it.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using expression namespace management\")\n+  public void testNsManageByExp() {\n+    //create domain namespace\n+    String manageByExp1NS = \"test-\" +  domainNamespaces[0];\n+    String manageByExp2NS = \"test-\" +  domainNamespaces[1];\n+    String manageByExpDomain1Uid = \"test-\" + domainsUid[0];\n+    String manageByExpDomain2Uid = \"test-\" + domainsUid[1];\n+    String manageByExp3NS = \"atest-\" +  domainNamespaces[0];\n+\n+    Map<String,String> managedByExpDomains = new HashMap<>();\n+    managedByExpDomains.put(manageByExp1NS,manageByExpDomain1Uid);\n+    managedByExpDomains.put(manageByExp2NS,manageByExpDomain2Uid);\n+    Map<String,String> unmanagedByExpDomains = new HashMap<>();\n+    unmanagedByExpDomains.put(manageByExp3NS,manageByExp3NS);\n+    String manageByLabelNS = \"weblogic1\" + domainNamespaces[0];\n+    String manageByLabelDomainUid = \"weblogic1\" + domainsUid[0];\n+\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp1NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp2NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp3NS));\n+\n+    opHelmParams[1] = installAndVerifyOperatorCanManageDomainBySelector(managedByExpDomains,unmanagedByExpDomains,\n+        \"RegExp\",\"^test\",\n+        opNamespaces[1], null);\n+\n+\n+    //verify that domainNamespaces field will be ignored and domain will not start for default\n+    checkDomainNotStartedInDefaultNS();\n+\n+    // install  operator sharing same domain\n+    checkSecondOperatorFailedToShareSameNS(manageByExp1NS);\n+\n+    //upgrade operator to manage domains with Labeled namespaces\n+    int externalRestHttpsPort = getServiceNodePort(opNamespaces[1], \"external-weblogic-operator-svc\");\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelNS));\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest\", \"weblogic2\");\n+    setLabelToNamespace(manageByLabelNS, labels);\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams[1])\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceLabelSelector(\"mytest\")\n+        .domainNamespaceSelectionStrategy(\"LabelSelector\");\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespaces[1], opParams));\n+\n+    //verify domain is started\n+    createSecrets(manageByLabelNS);\n+    assertTrue(createDomainCrdAndVerifyDomainIsRunning(manageByLabelNS,manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(opNamespaces[1],manageByLabelDomainUid);\n+\n+    //check operator can't manage anymore manageByExp1NS\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespaces[1], manageByExpDomain1Uid,\n+        manageByExp1NS), \"Operator can still manage domain \"\n+        + manageByExp1NS + \" in the namespace \" + manageByExp1NS);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1.\n+   * Deploy a custom domain resource in the namespace with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   * Verify operator can't start another domain with namespace2 with label2.\n+   * Modify namespace2 to set label1, verify that operator can manage it.\n+   * Verify that domainNamespaces field will be ignored and domain will not start for namespaces:\n+   * (domain3Namespace) and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade operator to replace namespace management using RegExp namespaces.\n+   * Verify it can manage added domain and can't manage old domain by scaling .\n+   * Verify that upgrade helm fail if try to add domain, managed by other operator.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using label namespace management\")\n+  public void testNsManageByLabel() {\n+    Map<String, String> managedByLabelDomains = new HashMap<>();\n+    managedByLabelDomains.put(domainNamespaces[0], domainsUid[0]);\n+    Map<String, String> unmanagedByLabelDomains = new HashMap<>();\n+    unmanagedByLabelDomains.put(domainNamespaces[1], domainsUid[1]);\n+    opHelmParams[0] = installAndVerifyOperatorCanManageDomainBySelector(managedByLabelDomains,unmanagedByLabelDomains,\n+        \"LabelSelector\",OPERATOR_RELEASE_NAME,\n+        opNamespaces[0], domainNamespaces[3]);\n+    assertNotNull(opHelmParams[0], \"Can't install or verify operator with SelectLabel namespace management\");\n+\n+    String manageByExpDomainUid = \"weblogic2\" + domainNamespaces[1];\n+    String manageByExpDomainNS = \"weblogic2\" + domainNamespaces[1];\n+\n+\n+    //switch namespace domainsNamespaces[1] to the label1,\n+    // managed by operator and verify domain is started and can be managed by operator.\n+    setLabelToNamespace(domainNamespaces[1], labels1);\n+    assertTrue(createDomainCrdAndVerifyDomainIsRunning(domainNamespaces[1], domainsUid[1]),\n+        \"Failed to create domain CRD or \"\n+        + \"verify that domain \" + domainsUid[1]\n+        + \" is running in namespace \" + domainNamespaces[1]);\n+    checkOperatorCanScaleDomain(opNamespaces[0], domainsUid[1]);\n+\n+    //check that with specific Selector default namespace is not under operator management\n+    checkDomainNotStartedInDefaultNS();\n+\n+    //check that another operator with selector=List matching domain namespace,\n+    // managed by first operator fails to install\n+    checkSecondOperatorFailedToShareSameNS(domainNamespaces[0]);\n+\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    assertDoesNotThrow(() -> createNamespace(manageByExpDomainNS));\n+    int externalRestHttpsPort = getServiceNodePort(opNamespaces[0], \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams[0])\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic2\");\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespaces[0], opParams));\n+\n+    //verify domain is started in namespace with name starting with weblogic* and operator can scale it.\n+    createSecrets(manageByExpDomainNS);\n+    assertTrue(createDomainCrdAndVerifyDomainIsRunning(manageByExpDomainNS,manageByExpDomainUid));\n+    checkOperatorCanScaleDomain(opNamespaces[0],manageByExpDomainUid);\n+    //verify operator can't manage anymore domain running in the namespace with label\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespaces[0], domainsUid[0], domainNamespaces[0]),\n+        \"Operator can still manage domain \"\n+            + domainsUid[0] + \" in the namespace \" + domainNamespaces[0]);\n+\n+    checkUpgradeFailedToAddNSManagedByAnotherOperator();\n+  }\n+\n+  /**\n+   * Create namespace ns1 with no label\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1 and enableRbac=false.\n+   * Add label1 to ns1 and verify domain can't be started\n+   * Call upgrade operator with reuse values to enable management for ns1\n+   * Deploy a custom domain resource in the namespace ns1 with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   */\n+  @Test\n+  @Order(3)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" with enableClusterRoleBinding\")\n+  public void testSwitchRbac() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d2a2c89d138d506bd5a5a5c1d3894a09c55726f"}, "originalPosition": 340}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxOTAyMg==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r501819022", "createdAt": "2020-10-08T15:37:19Z", "author": {"login": "marinakog"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,614 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCIR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOcirRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String[] opNamespaces = new String[4];\n+\n+  // domain constants\n+  private static final String[] domainsUid = {\"managensdomain1\",\"managensdomain2\",\"managensdomain3\",\"managensdomain4\"};\n+  private static String[] domainNamespaces = new String[4];\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams[] opHelmParams = new HelmParams[3];\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    for (int i = 0; i < 4; i++) {\n+      // get a unique domain namespace\n+      assertNotNull(namespaces.get(i), \"Namespace list is null\");\n+      logger.info(\"Getting a unique namespace {0} for WebLogic domain {1}\", namespaces.get(i), i);\n+      domainNamespaces[i] = namespaces.get(i);\n+    }\n+    for (int i = 4; i < 8; i++) {\n+      // get a unique operator namespace\n+      logger.info(\"Getting a unique namespace for operator {0}\", (i - 4));\n+      assertNotNull(namespaces.get(i), \"Namespace list is null\");\n+      opNamespaces[(i - 4)] = namespaces.get(i);\n+    }\n+\n+    createSecrets(domainNamespaces[2]);\n+    createSecrets(\"default\");\n+    labels1 = new java.util.HashMap<>();\n+    labels1.put(OPERATOR_RELEASE_NAME, OPERATOR_RELEASE_NAME);\n+    labels2 = new java.util.HashMap<>();\n+    labels2.put(OPERATOR_RELEASE_NAME + \"2\", OPERATOR_RELEASE_NAME);\n+    setLabelToNamespace(domainNamespaces[0], labels1);\n+    setLabelToNamespace(domainNamespaces[1], labels2);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    try {\n+      // Delete domain custom resource\n+      for (int i = 0; i < 4; i++) {\n+        logger.info(\"Delete domain1 custom resource in namespace {0}\", domainNamespaces[i]);\n+        deleteDomainCustomResource(domainsUid[i], domainNamespaces[i]);\n+        logger.info(\"Deleted Domain Custom Resource \" + domainsUid[i] + \" from \" + domainNamespaces[i]);\n+      }\n+      logger.info(\"Delete domain1test custom resource in namespace {0}\", \"test-\" + domainNamespaces[0]);\n+      deleteDomainCustomResource(domainsUid[0] + \"test\", \"test-\" + domainNamespaces[0]);\n+      logger.info(\"Deleted Domain Custom Resource \" + domainsUid[0] + \"test from test-\" + domainNamespaces[0]);\n+  \n+      logger.info(\"Delete domain2test custom resource in namespace {0}\", \"test-\" + domainNamespaces[1]);\n+      deleteDomainCustomResource(domainsUid[1] + \"test\", \"test-\" + domainNamespaces[1]);\n+      logger.info(\"Deleted Domain Custom Resource \" + domainsUid[1] + \"test from test-\" + domainNamespaces[1]);\n+  \n+      logger.info(\"Delete weblogic custom resource in namespace {0}\", \"weblogic\" + domainNamespaces[1]);\n+      deleteDomainCustomResource(\"weblogic\", \"weblogic\" + domainNamespaces[1]);\n+      logger.info(\"Deleted Domain Custom Resource weblogic from weblogic\" + domainNamespaces[1]);\n+    } finally {\n+      deleteSecrets(\"default\");\n+      deleteSecrets(\"atest-\" + domainNamespaces[0]);\n+     \n+      deleteNamespace(\"atest-\" + domainNamespaces[0]);\n+      //delete operator\n+      for (HelmParams helmParam : opHelmParams) {\n+        uninstallOperator(helmParam);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=RegExp,\n+   * and domainNamespaceRegExp=^test and domainNamespace= manageByExp3NS.\n+   * Deploy two custom domain resources in two different namespaces with names starting with test\n+   * and verify all server pods in the domains were created and ready.\n+   * Verify operator is able to manage these domains by scaling.\n+   * Try to start another domain with namespace manageByExp3NS. Verify it is not started by operator\n+   * and value of domainNamespace is ignored for both specific namespace and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade helm chart to switch to using LabelSelector, start domain and verify operator can scale it.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using expression namespace management\")\n+  public void testNsManageByExp() {\n+    //create domain namespace\n+    String manageByExp1NS = \"test-\" +  domainNamespaces[0];\n+    String manageByExp2NS = \"test-\" +  domainNamespaces[1];\n+    String manageByExpDomain1Uid = \"test-\" + domainsUid[0];\n+    String manageByExpDomain2Uid = \"test-\" + domainsUid[1];\n+    String manageByExp3NS = \"atest-\" +  domainNamespaces[0];\n+\n+    Map<String,String> managedByExpDomains = new HashMap<>();\n+    managedByExpDomains.put(manageByExp1NS,manageByExpDomain1Uid);\n+    managedByExpDomains.put(manageByExp2NS,manageByExpDomain2Uid);\n+    Map<String,String> unmanagedByExpDomains = new HashMap<>();\n+    unmanagedByExpDomains.put(manageByExp3NS,manageByExp3NS);\n+    String manageByLabelNS = \"weblogic1\" + domainNamespaces[0];\n+    String manageByLabelDomainUid = \"weblogic1\" + domainsUid[0];\n+\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp1NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp2NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp3NS));\n+\n+    opHelmParams[1] = installAndVerifyOperatorCanManageDomainBySelector(managedByExpDomains,unmanagedByExpDomains,\n+        \"RegExp\",\"^test\",\n+        opNamespaces[1], null);\n+\n+\n+    //verify that domainNamespaces field will be ignored and domain will not start for default\n+    checkDomainNotStartedInDefaultNS();\n+\n+    // install  operator sharing same domain\n+    checkSecondOperatorFailedToShareSameNS(manageByExp1NS);\n+\n+    //upgrade operator to manage domains with Labeled namespaces\n+    int externalRestHttpsPort = getServiceNodePort(opNamespaces[1], \"external-weblogic-operator-svc\");\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelNS));\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest\", \"weblogic2\");\n+    setLabelToNamespace(manageByLabelNS, labels);\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams[1])\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceLabelSelector(\"mytest\")\n+        .domainNamespaceSelectionStrategy(\"LabelSelector\");\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespaces[1], opParams));\n+\n+    //verify domain is started\n+    createSecrets(manageByLabelNS);\n+    assertTrue(createDomainCrdAndVerifyDomainIsRunning(manageByLabelNS,manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(opNamespaces[1],manageByLabelDomainUid);\n+\n+    //check operator can't manage anymore manageByExp1NS\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespaces[1], manageByExpDomain1Uid,\n+        manageByExp1NS), \"Operator can still manage domain \"\n+        + manageByExp1NS + \" in the namespace \" + manageByExp1NS);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1.\n+   * Deploy a custom domain resource in the namespace with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   * Verify operator can't start another domain with namespace2 with label2.\n+   * Modify namespace2 to set label1, verify that operator can manage it.\n+   * Verify that domainNamespaces field will be ignored and domain will not start for namespaces:\n+   * (domain3Namespace) and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade operator to replace namespace management using RegExp namespaces.\n+   * Verify it can manage added domain and can't manage old domain by scaling .\n+   * Verify that upgrade helm fail if try to add domain, managed by other operator.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using label namespace management\")\n+  public void testNsManageByLabel() {\n+    Map<String, String> managedByLabelDomains = new HashMap<>();\n+    managedByLabelDomains.put(domainNamespaces[0], domainsUid[0]);\n+    Map<String, String> unmanagedByLabelDomains = new HashMap<>();\n+    unmanagedByLabelDomains.put(domainNamespaces[1], domainsUid[1]);\n+    opHelmParams[0] = installAndVerifyOperatorCanManageDomainBySelector(managedByLabelDomains,unmanagedByLabelDomains,\n+        \"LabelSelector\",OPERATOR_RELEASE_NAME,\n+        opNamespaces[0], domainNamespaces[3]);\n+    assertNotNull(opHelmParams[0], \"Can't install or verify operator with SelectLabel namespace management\");\n+\n+    String manageByExpDomainUid = \"weblogic2\" + domainNamespaces[1];\n+    String manageByExpDomainNS = \"weblogic2\" + domainNamespaces[1];\n+\n+\n+    //switch namespace domainsNamespaces[1] to the label1,\n+    // managed by operator and verify domain is started and can be managed by operator.\n+    setLabelToNamespace(domainNamespaces[1], labels1);\n+    assertTrue(createDomainCrdAndVerifyDomainIsRunning(domainNamespaces[1], domainsUid[1]),\n+        \"Failed to create domain CRD or \"\n+        + \"verify that domain \" + domainsUid[1]\n+        + \" is running in namespace \" + domainNamespaces[1]);\n+    checkOperatorCanScaleDomain(opNamespaces[0], domainsUid[1]);\n+\n+    //check that with specific Selector default namespace is not under operator management\n+    checkDomainNotStartedInDefaultNS();\n+\n+    //check that another operator with selector=List matching domain namespace,\n+    // managed by first operator fails to install\n+    checkSecondOperatorFailedToShareSameNS(domainNamespaces[0]);\n+\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    assertDoesNotThrow(() -> createNamespace(manageByExpDomainNS));\n+    int externalRestHttpsPort = getServiceNodePort(opNamespaces[0], \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams[0])\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic2\");\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespaces[0], opParams));\n+\n+    //verify domain is started in namespace with name starting with weblogic* and operator can scale it.\n+    createSecrets(manageByExpDomainNS);\n+    assertTrue(createDomainCrdAndVerifyDomainIsRunning(manageByExpDomainNS,manageByExpDomainUid));\n+    checkOperatorCanScaleDomain(opNamespaces[0],manageByExpDomainUid);\n+    //verify operator can't manage anymore domain running in the namespace with label\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespaces[0], domainsUid[0], domainNamespaces[0]),\n+        \"Operator can still manage domain \"\n+            + domainsUid[0] + \" in the namespace \" + domainNamespaces[0]);\n+\n+    checkUpgradeFailedToAddNSManagedByAnotherOperator();\n+  }\n+\n+  /**\n+   * Create namespace ns1 with no label\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1 and enableRbac=false.\n+   * Add label1 to ns1 and verify domain can't be started\n+   * Call upgrade operator with reuse values to enable management for ns1\n+   * Deploy a custom domain resource in the namespace ns1 with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   */\n+  @Test\n+  @Order(3)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" with enableClusterRoleBinding\")\n+  public void testSwitchRbac() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQwNTk4MQ=="}, "originalCommit": {"oid": "4d2a2c89d138d506bd5a5a5c1d3894a09c55726f"}, "originalPosition": 340}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTY0NTI0OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMjowNjoyNVrOHeLfVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNTozNzo0N1rOHekntg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQwNzU3Mg==", "bodyText": "Here we are not deleting Domain CRD which is a global resource created by Operator. Actually we are deleting Domain Resource ( domain ).  Modify the method name to  deleteDomainResource()", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r501407572", "createdAt": "2020-10-08T02:06:25Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,614 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCIR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOcirRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String[] opNamespaces = new String[4];\n+\n+  // domain constants\n+  private static final String[] domainsUid = {\"managensdomain1\",\"managensdomain2\",\"managensdomain3\",\"managensdomain4\"};\n+  private static String[] domainNamespaces = new String[4];\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams[] opHelmParams = new HelmParams[3];\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    for (int i = 0; i < 4; i++) {\n+      // get a unique domain namespace\n+      assertNotNull(namespaces.get(i), \"Namespace list is null\");\n+      logger.info(\"Getting a unique namespace {0} for WebLogic domain {1}\", namespaces.get(i), i);\n+      domainNamespaces[i] = namespaces.get(i);\n+    }\n+    for (int i = 4; i < 8; i++) {\n+      // get a unique operator namespace\n+      logger.info(\"Getting a unique namespace for operator {0}\", (i - 4));\n+      assertNotNull(namespaces.get(i), \"Namespace list is null\");\n+      opNamespaces[(i - 4)] = namespaces.get(i);\n+    }\n+\n+    createSecrets(domainNamespaces[2]);\n+    createSecrets(\"default\");\n+    labels1 = new java.util.HashMap<>();\n+    labels1.put(OPERATOR_RELEASE_NAME, OPERATOR_RELEASE_NAME);\n+    labels2 = new java.util.HashMap<>();\n+    labels2.put(OPERATOR_RELEASE_NAME + \"2\", OPERATOR_RELEASE_NAME);\n+    setLabelToNamespace(domainNamespaces[0], labels1);\n+    setLabelToNamespace(domainNamespaces[1], labels2);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    try {\n+      // Delete domain custom resource\n+      for (int i = 0; i < 4; i++) {\n+        logger.info(\"Delete domain1 custom resource in namespace {0}\", domainNamespaces[i]);\n+        deleteDomainCustomResource(domainsUid[i], domainNamespaces[i]);\n+        logger.info(\"Deleted Domain Custom Resource \" + domainsUid[i] + \" from \" + domainNamespaces[i]);\n+      }\n+      logger.info(\"Delete domain1test custom resource in namespace {0}\", \"test-\" + domainNamespaces[0]);\n+      deleteDomainCustomResource(domainsUid[0] + \"test\", \"test-\" + domainNamespaces[0]);\n+      logger.info(\"Deleted Domain Custom Resource \" + domainsUid[0] + \"test from test-\" + domainNamespaces[0]);\n+  \n+      logger.info(\"Delete domain2test custom resource in namespace {0}\", \"test-\" + domainNamespaces[1]);\n+      deleteDomainCustomResource(domainsUid[1] + \"test\", \"test-\" + domainNamespaces[1]);\n+      logger.info(\"Deleted Domain Custom Resource \" + domainsUid[1] + \"test from test-\" + domainNamespaces[1]);\n+  \n+      logger.info(\"Delete weblogic custom resource in namespace {0}\", \"weblogic\" + domainNamespaces[1]);\n+      deleteDomainCustomResource(\"weblogic\", \"weblogic\" + domainNamespaces[1]);\n+      logger.info(\"Deleted Domain Custom Resource weblogic from weblogic\" + domainNamespaces[1]);\n+    } finally {\n+      deleteSecrets(\"default\");\n+      deleteSecrets(\"atest-\" + domainNamespaces[0]);\n+     \n+      deleteNamespace(\"atest-\" + domainNamespaces[0]);\n+      //delete operator\n+      for (HelmParams helmParam : opHelmParams) {\n+        uninstallOperator(helmParam);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=RegExp,\n+   * and domainNamespaceRegExp=^test and domainNamespace= manageByExp3NS.\n+   * Deploy two custom domain resources in two different namespaces with names starting with test\n+   * and verify all server pods in the domains were created and ready.\n+   * Verify operator is able to manage these domains by scaling.\n+   * Try to start another domain with namespace manageByExp3NS. Verify it is not started by operator\n+   * and value of domainNamespace is ignored for both specific namespace and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade helm chart to switch to using LabelSelector, start domain and verify operator can scale it.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using expression namespace management\")\n+  public void testNsManageByExp() {\n+    //create domain namespace\n+    String manageByExp1NS = \"test-\" +  domainNamespaces[0];\n+    String manageByExp2NS = \"test-\" +  domainNamespaces[1];\n+    String manageByExpDomain1Uid = \"test-\" + domainsUid[0];\n+    String manageByExpDomain2Uid = \"test-\" + domainsUid[1];\n+    String manageByExp3NS = \"atest-\" +  domainNamespaces[0];\n+\n+    Map<String,String> managedByExpDomains = new HashMap<>();\n+    managedByExpDomains.put(manageByExp1NS,manageByExpDomain1Uid);\n+    managedByExpDomains.put(manageByExp2NS,manageByExpDomain2Uid);\n+    Map<String,String> unmanagedByExpDomains = new HashMap<>();\n+    unmanagedByExpDomains.put(manageByExp3NS,manageByExp3NS);\n+    String manageByLabelNS = \"weblogic1\" + domainNamespaces[0];\n+    String manageByLabelDomainUid = \"weblogic1\" + domainsUid[0];\n+\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp1NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp2NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp3NS));\n+\n+    opHelmParams[1] = installAndVerifyOperatorCanManageDomainBySelector(managedByExpDomains,unmanagedByExpDomains,\n+        \"RegExp\",\"^test\",\n+        opNamespaces[1], null);\n+\n+\n+    //verify that domainNamespaces field will be ignored and domain will not start for default\n+    checkDomainNotStartedInDefaultNS();\n+\n+    // install  operator sharing same domain\n+    checkSecondOperatorFailedToShareSameNS(manageByExp1NS);\n+\n+    //upgrade operator to manage domains with Labeled namespaces\n+    int externalRestHttpsPort = getServiceNodePort(opNamespaces[1], \"external-weblogic-operator-svc\");\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelNS));\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest\", \"weblogic2\");\n+    setLabelToNamespace(manageByLabelNS, labels);\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams[1])\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceLabelSelector(\"mytest\")\n+        .domainNamespaceSelectionStrategy(\"LabelSelector\");\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespaces[1], opParams));\n+\n+    //verify domain is started\n+    createSecrets(manageByLabelNS);\n+    assertTrue(createDomainCrdAndVerifyDomainIsRunning(manageByLabelNS,manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(opNamespaces[1],manageByLabelDomainUid);\n+\n+    //check operator can't manage anymore manageByExp1NS\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespaces[1], manageByExpDomain1Uid,\n+        manageByExp1NS), \"Operator can still manage domain \"\n+        + manageByExp1NS + \" in the namespace \" + manageByExp1NS);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1.\n+   * Deploy a custom domain resource in the namespace with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   * Verify operator can't start another domain with namespace2 with label2.\n+   * Modify namespace2 to set label1, verify that operator can manage it.\n+   * Verify that domainNamespaces field will be ignored and domain will not start for namespaces:\n+   * (domain3Namespace) and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade operator to replace namespace management using RegExp namespaces.\n+   * Verify it can manage added domain and can't manage old domain by scaling .\n+   * Verify that upgrade helm fail if try to add domain, managed by other operator.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using label namespace management\")\n+  public void testNsManageByLabel() {\n+    Map<String, String> managedByLabelDomains = new HashMap<>();\n+    managedByLabelDomains.put(domainNamespaces[0], domainsUid[0]);\n+    Map<String, String> unmanagedByLabelDomains = new HashMap<>();\n+    unmanagedByLabelDomains.put(domainNamespaces[1], domainsUid[1]);\n+    opHelmParams[0] = installAndVerifyOperatorCanManageDomainBySelector(managedByLabelDomains,unmanagedByLabelDomains,\n+        \"LabelSelector\",OPERATOR_RELEASE_NAME,\n+        opNamespaces[0], domainNamespaces[3]);\n+    assertNotNull(opHelmParams[0], \"Can't install or verify operator with SelectLabel namespace management\");\n+\n+    String manageByExpDomainUid = \"weblogic2\" + domainNamespaces[1];\n+    String manageByExpDomainNS = \"weblogic2\" + domainNamespaces[1];\n+\n+\n+    //switch namespace domainsNamespaces[1] to the label1,\n+    // managed by operator and verify domain is started and can be managed by operator.\n+    setLabelToNamespace(domainNamespaces[1], labels1);\n+    assertTrue(createDomainCrdAndVerifyDomainIsRunning(domainNamespaces[1], domainsUid[1]),\n+        \"Failed to create domain CRD or \"\n+        + \"verify that domain \" + domainsUid[1]\n+        + \" is running in namespace \" + domainNamespaces[1]);\n+    checkOperatorCanScaleDomain(opNamespaces[0], domainsUid[1]);\n+\n+    //check that with specific Selector default namespace is not under operator management\n+    checkDomainNotStartedInDefaultNS();\n+\n+    //check that another operator with selector=List matching domain namespace,\n+    // managed by first operator fails to install\n+    checkSecondOperatorFailedToShareSameNS(domainNamespaces[0]);\n+\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    assertDoesNotThrow(() -> createNamespace(manageByExpDomainNS));\n+    int externalRestHttpsPort = getServiceNodePort(opNamespaces[0], \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams[0])\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic2\");\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespaces[0], opParams));\n+\n+    //verify domain is started in namespace with name starting with weblogic* and operator can scale it.\n+    createSecrets(manageByExpDomainNS);\n+    assertTrue(createDomainCrdAndVerifyDomainIsRunning(manageByExpDomainNS,manageByExpDomainUid));\n+    checkOperatorCanScaleDomain(opNamespaces[0],manageByExpDomainUid);\n+    //verify operator can't manage anymore domain running in the namespace with label\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespaces[0], domainsUid[0], domainNamespaces[0]),\n+        \"Operator can still manage domain \"\n+            + domainsUid[0] + \" in the namespace \" + domainNamespaces[0]);\n+\n+    checkUpgradeFailedToAddNSManagedByAnotherOperator();\n+  }\n+\n+  /**\n+   * Create namespace ns1 with no label\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1 and enableRbac=false.\n+   * Add label1 to ns1 and verify domain can't be started\n+   * Call upgrade operator with reuse values to enable management for ns1\n+   * Deploy a custom domain resource in the namespace ns1 with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   */\n+  @Test\n+  @Order(3)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" with enableClusterRoleBinding\")\n+  public void testSwitchRbac() {\n+    String manageByLabelDomainNS = domainNamespaces[0] + \"test4\";\n+    String manageByLabelDomainUid = domainsUid[0] + \"test4\";\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelDomainNS));\n+    opHelmParams[2] = installAndVerifyOperator(OPERATOR_RELEASE_NAME,\n+        opNamespaces[3], \"LabelSelector\",\n+        \"mytest4\", false);\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest4\", manageByLabelDomainUid);\n+    assertDoesNotThrow(() -> addLabelsToNamespace(manageByLabelDomainNS, labels));\n+    //verify domain can't be started because operator does not have permission to manage it\n+    createSecrets(manageByLabelDomainNS);\n+    checkPodNotCreated(manageByLabelDomainUid + adminServerPrefix, manageByLabelDomainUid, manageByLabelDomainNS);\n+    deleteDomainCrd(manageByLabelDomainNS, manageByLabelDomainUid);\n+    //upgrade operator and start domain\n+    int externalRestHttpsPort = getServiceNodePort(opNamespaces[3], \"external-weblogic-operator-svc\");\n+\n+    OperatorParams opParams = new OperatorParams()\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .helmParams(opHelmParams[2]);\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespaces[3], opParams));\n+    assertTrue(createDomainCrdAndVerifyDomainIsRunning(manageByLabelDomainNS, manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(opNamespaces[3], manageByLabelDomainUid);\n+  }\n+\n+  private void checkUpgradeFailedToAddNSManagedByAnotherOperator() {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    // for ns names starting from weblogic, there one of domains\n+    //in namespace weblogic* is managed by operator2\n+    int externalRestHttpsPort = getServiceNodePort(opNamespaces[0], \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams[0])\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic\");\n+\n+    assertFalse(upgradeAndVerifyOperator(opNamespaces[0], opParams), \"Upgrade does not fail when adding domain,\"\n+        + \" managed by other operator\");\n+  }\n+\n+  private void deleteDomainCrd(String domainNS, String domainUid) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d2a2c89d138d506bd5a5a5c1d3894a09c55726f"}, "originalPosition": 384}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxOTMxOA==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r501819318", "createdAt": "2020-10-08T15:37:47Z", "author": {"login": "marinakog"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,614 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCIR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOcirRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String[] opNamespaces = new String[4];\n+\n+  // domain constants\n+  private static final String[] domainsUid = {\"managensdomain1\",\"managensdomain2\",\"managensdomain3\",\"managensdomain4\"};\n+  private static String[] domainNamespaces = new String[4];\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams[] opHelmParams = new HelmParams[3];\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    for (int i = 0; i < 4; i++) {\n+      // get a unique domain namespace\n+      assertNotNull(namespaces.get(i), \"Namespace list is null\");\n+      logger.info(\"Getting a unique namespace {0} for WebLogic domain {1}\", namespaces.get(i), i);\n+      domainNamespaces[i] = namespaces.get(i);\n+    }\n+    for (int i = 4; i < 8; i++) {\n+      // get a unique operator namespace\n+      logger.info(\"Getting a unique namespace for operator {0}\", (i - 4));\n+      assertNotNull(namespaces.get(i), \"Namespace list is null\");\n+      opNamespaces[(i - 4)] = namespaces.get(i);\n+    }\n+\n+    createSecrets(domainNamespaces[2]);\n+    createSecrets(\"default\");\n+    labels1 = new java.util.HashMap<>();\n+    labels1.put(OPERATOR_RELEASE_NAME, OPERATOR_RELEASE_NAME);\n+    labels2 = new java.util.HashMap<>();\n+    labels2.put(OPERATOR_RELEASE_NAME + \"2\", OPERATOR_RELEASE_NAME);\n+    setLabelToNamespace(domainNamespaces[0], labels1);\n+    setLabelToNamespace(domainNamespaces[1], labels2);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    try {\n+      // Delete domain custom resource\n+      for (int i = 0; i < 4; i++) {\n+        logger.info(\"Delete domain1 custom resource in namespace {0}\", domainNamespaces[i]);\n+        deleteDomainCustomResource(domainsUid[i], domainNamespaces[i]);\n+        logger.info(\"Deleted Domain Custom Resource \" + domainsUid[i] + \" from \" + domainNamespaces[i]);\n+      }\n+      logger.info(\"Delete domain1test custom resource in namespace {0}\", \"test-\" + domainNamespaces[0]);\n+      deleteDomainCustomResource(domainsUid[0] + \"test\", \"test-\" + domainNamespaces[0]);\n+      logger.info(\"Deleted Domain Custom Resource \" + domainsUid[0] + \"test from test-\" + domainNamespaces[0]);\n+  \n+      logger.info(\"Delete domain2test custom resource in namespace {0}\", \"test-\" + domainNamespaces[1]);\n+      deleteDomainCustomResource(domainsUid[1] + \"test\", \"test-\" + domainNamespaces[1]);\n+      logger.info(\"Deleted Domain Custom Resource \" + domainsUid[1] + \"test from test-\" + domainNamespaces[1]);\n+  \n+      logger.info(\"Delete weblogic custom resource in namespace {0}\", \"weblogic\" + domainNamespaces[1]);\n+      deleteDomainCustomResource(\"weblogic\", \"weblogic\" + domainNamespaces[1]);\n+      logger.info(\"Deleted Domain Custom Resource weblogic from weblogic\" + domainNamespaces[1]);\n+    } finally {\n+      deleteSecrets(\"default\");\n+      deleteSecrets(\"atest-\" + domainNamespaces[0]);\n+     \n+      deleteNamespace(\"atest-\" + domainNamespaces[0]);\n+      //delete operator\n+      for (HelmParams helmParam : opHelmParams) {\n+        uninstallOperator(helmParam);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=RegExp,\n+   * and domainNamespaceRegExp=^test and domainNamespace= manageByExp3NS.\n+   * Deploy two custom domain resources in two different namespaces with names starting with test\n+   * and verify all server pods in the domains were created and ready.\n+   * Verify operator is able to manage these domains by scaling.\n+   * Try to start another domain with namespace manageByExp3NS. Verify it is not started by operator\n+   * and value of domainNamespace is ignored for both specific namespace and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade helm chart to switch to using LabelSelector, start domain and verify operator can scale it.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using expression namespace management\")\n+  public void testNsManageByExp() {\n+    //create domain namespace\n+    String manageByExp1NS = \"test-\" +  domainNamespaces[0];\n+    String manageByExp2NS = \"test-\" +  domainNamespaces[1];\n+    String manageByExpDomain1Uid = \"test-\" + domainsUid[0];\n+    String manageByExpDomain2Uid = \"test-\" + domainsUid[1];\n+    String manageByExp3NS = \"atest-\" +  domainNamespaces[0];\n+\n+    Map<String,String> managedByExpDomains = new HashMap<>();\n+    managedByExpDomains.put(manageByExp1NS,manageByExpDomain1Uid);\n+    managedByExpDomains.put(manageByExp2NS,manageByExpDomain2Uid);\n+    Map<String,String> unmanagedByExpDomains = new HashMap<>();\n+    unmanagedByExpDomains.put(manageByExp3NS,manageByExp3NS);\n+    String manageByLabelNS = \"weblogic1\" + domainNamespaces[0];\n+    String manageByLabelDomainUid = \"weblogic1\" + domainsUid[0];\n+\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp1NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp2NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp3NS));\n+\n+    opHelmParams[1] = installAndVerifyOperatorCanManageDomainBySelector(managedByExpDomains,unmanagedByExpDomains,\n+        \"RegExp\",\"^test\",\n+        opNamespaces[1], null);\n+\n+\n+    //verify that domainNamespaces field will be ignored and domain will not start for default\n+    checkDomainNotStartedInDefaultNS();\n+\n+    // install  operator sharing same domain\n+    checkSecondOperatorFailedToShareSameNS(manageByExp1NS);\n+\n+    //upgrade operator to manage domains with Labeled namespaces\n+    int externalRestHttpsPort = getServiceNodePort(opNamespaces[1], \"external-weblogic-operator-svc\");\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelNS));\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest\", \"weblogic2\");\n+    setLabelToNamespace(manageByLabelNS, labels);\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams[1])\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceLabelSelector(\"mytest\")\n+        .domainNamespaceSelectionStrategy(\"LabelSelector\");\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespaces[1], opParams));\n+\n+    //verify domain is started\n+    createSecrets(manageByLabelNS);\n+    assertTrue(createDomainCrdAndVerifyDomainIsRunning(manageByLabelNS,manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(opNamespaces[1],manageByLabelDomainUid);\n+\n+    //check operator can't manage anymore manageByExp1NS\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespaces[1], manageByExpDomain1Uid,\n+        manageByExp1NS), \"Operator can still manage domain \"\n+        + manageByExp1NS + \" in the namespace \" + manageByExp1NS);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1.\n+   * Deploy a custom domain resource in the namespace with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   * Verify operator can't start another domain with namespace2 with label2.\n+   * Modify namespace2 to set label1, verify that operator can manage it.\n+   * Verify that domainNamespaces field will be ignored and domain will not start for namespaces:\n+   * (domain3Namespace) and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade operator to replace namespace management using RegExp namespaces.\n+   * Verify it can manage added domain and can't manage old domain by scaling .\n+   * Verify that upgrade helm fail if try to add domain, managed by other operator.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using label namespace management\")\n+  public void testNsManageByLabel() {\n+    Map<String, String> managedByLabelDomains = new HashMap<>();\n+    managedByLabelDomains.put(domainNamespaces[0], domainsUid[0]);\n+    Map<String, String> unmanagedByLabelDomains = new HashMap<>();\n+    unmanagedByLabelDomains.put(domainNamespaces[1], domainsUid[1]);\n+    opHelmParams[0] = installAndVerifyOperatorCanManageDomainBySelector(managedByLabelDomains,unmanagedByLabelDomains,\n+        \"LabelSelector\",OPERATOR_RELEASE_NAME,\n+        opNamespaces[0], domainNamespaces[3]);\n+    assertNotNull(opHelmParams[0], \"Can't install or verify operator with SelectLabel namespace management\");\n+\n+    String manageByExpDomainUid = \"weblogic2\" + domainNamespaces[1];\n+    String manageByExpDomainNS = \"weblogic2\" + domainNamespaces[1];\n+\n+\n+    //switch namespace domainsNamespaces[1] to the label1,\n+    // managed by operator and verify domain is started and can be managed by operator.\n+    setLabelToNamespace(domainNamespaces[1], labels1);\n+    assertTrue(createDomainCrdAndVerifyDomainIsRunning(domainNamespaces[1], domainsUid[1]),\n+        \"Failed to create domain CRD or \"\n+        + \"verify that domain \" + domainsUid[1]\n+        + \" is running in namespace \" + domainNamespaces[1]);\n+    checkOperatorCanScaleDomain(opNamespaces[0], domainsUid[1]);\n+\n+    //check that with specific Selector default namespace is not under operator management\n+    checkDomainNotStartedInDefaultNS();\n+\n+    //check that another operator with selector=List matching domain namespace,\n+    // managed by first operator fails to install\n+    checkSecondOperatorFailedToShareSameNS(domainNamespaces[0]);\n+\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    assertDoesNotThrow(() -> createNamespace(manageByExpDomainNS));\n+    int externalRestHttpsPort = getServiceNodePort(opNamespaces[0], \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams[0])\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic2\");\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespaces[0], opParams));\n+\n+    //verify domain is started in namespace with name starting with weblogic* and operator can scale it.\n+    createSecrets(manageByExpDomainNS);\n+    assertTrue(createDomainCrdAndVerifyDomainIsRunning(manageByExpDomainNS,manageByExpDomainUid));\n+    checkOperatorCanScaleDomain(opNamespaces[0],manageByExpDomainUid);\n+    //verify operator can't manage anymore domain running in the namespace with label\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespaces[0], domainsUid[0], domainNamespaces[0]),\n+        \"Operator can still manage domain \"\n+            + domainsUid[0] + \" in the namespace \" + domainNamespaces[0]);\n+\n+    checkUpgradeFailedToAddNSManagedByAnotherOperator();\n+  }\n+\n+  /**\n+   * Create namespace ns1 with no label\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1 and enableRbac=false.\n+   * Add label1 to ns1 and verify domain can't be started\n+   * Call upgrade operator with reuse values to enable management for ns1\n+   * Deploy a custom domain resource in the namespace ns1 with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   */\n+  @Test\n+  @Order(3)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" with enableClusterRoleBinding\")\n+  public void testSwitchRbac() {\n+    String manageByLabelDomainNS = domainNamespaces[0] + \"test4\";\n+    String manageByLabelDomainUid = domainsUid[0] + \"test4\";\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelDomainNS));\n+    opHelmParams[2] = installAndVerifyOperator(OPERATOR_RELEASE_NAME,\n+        opNamespaces[3], \"LabelSelector\",\n+        \"mytest4\", false);\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest4\", manageByLabelDomainUid);\n+    assertDoesNotThrow(() -> addLabelsToNamespace(manageByLabelDomainNS, labels));\n+    //verify domain can't be started because operator does not have permission to manage it\n+    createSecrets(manageByLabelDomainNS);\n+    checkPodNotCreated(manageByLabelDomainUid + adminServerPrefix, manageByLabelDomainUid, manageByLabelDomainNS);\n+    deleteDomainCrd(manageByLabelDomainNS, manageByLabelDomainUid);\n+    //upgrade operator and start domain\n+    int externalRestHttpsPort = getServiceNodePort(opNamespaces[3], \"external-weblogic-operator-svc\");\n+\n+    OperatorParams opParams = new OperatorParams()\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .helmParams(opHelmParams[2]);\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespaces[3], opParams));\n+    assertTrue(createDomainCrdAndVerifyDomainIsRunning(manageByLabelDomainNS, manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(opNamespaces[3], manageByLabelDomainUid);\n+  }\n+\n+  private void checkUpgradeFailedToAddNSManagedByAnotherOperator() {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    // for ns names starting from weblogic, there one of domains\n+    //in namespace weblogic* is managed by operator2\n+    int externalRestHttpsPort = getServiceNodePort(opNamespaces[0], \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams[0])\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic\");\n+\n+    assertFalse(upgradeAndVerifyOperator(opNamespaces[0], opParams), \"Upgrade does not fail when adding domain,\"\n+        + \" managed by other operator\");\n+  }\n+\n+  private void deleteDomainCrd(String domainNS, String domainUid) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQwNzU3Mg=="}, "originalCommit": {"oid": "4d2a2c89d138d506bd5a5a5c1d3894a09c55726f"}, "originalPosition": 384}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTY0OTA3OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMjowODo0OVrOHeLhbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNTozNzozNFrOHeknFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQwODExMQ==", "bodyText": "Again here we are creating Domain Resource not CRD. Modify the method name to createDomainResource()", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r501408111", "createdAt": "2020-10-08T02:08:49Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,614 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCIR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOcirRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String[] opNamespaces = new String[4];\n+\n+  // domain constants\n+  private static final String[] domainsUid = {\"managensdomain1\",\"managensdomain2\",\"managensdomain3\",\"managensdomain4\"};\n+  private static String[] domainNamespaces = new String[4];\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams[] opHelmParams = new HelmParams[3];\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    for (int i = 0; i < 4; i++) {\n+      // get a unique domain namespace\n+      assertNotNull(namespaces.get(i), \"Namespace list is null\");\n+      logger.info(\"Getting a unique namespace {0} for WebLogic domain {1}\", namespaces.get(i), i);\n+      domainNamespaces[i] = namespaces.get(i);\n+    }\n+    for (int i = 4; i < 8; i++) {\n+      // get a unique operator namespace\n+      logger.info(\"Getting a unique namespace for operator {0}\", (i - 4));\n+      assertNotNull(namespaces.get(i), \"Namespace list is null\");\n+      opNamespaces[(i - 4)] = namespaces.get(i);\n+    }\n+\n+    createSecrets(domainNamespaces[2]);\n+    createSecrets(\"default\");\n+    labels1 = new java.util.HashMap<>();\n+    labels1.put(OPERATOR_RELEASE_NAME, OPERATOR_RELEASE_NAME);\n+    labels2 = new java.util.HashMap<>();\n+    labels2.put(OPERATOR_RELEASE_NAME + \"2\", OPERATOR_RELEASE_NAME);\n+    setLabelToNamespace(domainNamespaces[0], labels1);\n+    setLabelToNamespace(domainNamespaces[1], labels2);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    try {\n+      // Delete domain custom resource\n+      for (int i = 0; i < 4; i++) {\n+        logger.info(\"Delete domain1 custom resource in namespace {0}\", domainNamespaces[i]);\n+        deleteDomainCustomResource(domainsUid[i], domainNamespaces[i]);\n+        logger.info(\"Deleted Domain Custom Resource \" + domainsUid[i] + \" from \" + domainNamespaces[i]);\n+      }\n+      logger.info(\"Delete domain1test custom resource in namespace {0}\", \"test-\" + domainNamespaces[0]);\n+      deleteDomainCustomResource(domainsUid[0] + \"test\", \"test-\" + domainNamespaces[0]);\n+      logger.info(\"Deleted Domain Custom Resource \" + domainsUid[0] + \"test from test-\" + domainNamespaces[0]);\n+  \n+      logger.info(\"Delete domain2test custom resource in namespace {0}\", \"test-\" + domainNamespaces[1]);\n+      deleteDomainCustomResource(domainsUid[1] + \"test\", \"test-\" + domainNamespaces[1]);\n+      logger.info(\"Deleted Domain Custom Resource \" + domainsUid[1] + \"test from test-\" + domainNamespaces[1]);\n+  \n+      logger.info(\"Delete weblogic custom resource in namespace {0}\", \"weblogic\" + domainNamespaces[1]);\n+      deleteDomainCustomResource(\"weblogic\", \"weblogic\" + domainNamespaces[1]);\n+      logger.info(\"Deleted Domain Custom Resource weblogic from weblogic\" + domainNamespaces[1]);\n+    } finally {\n+      deleteSecrets(\"default\");\n+      deleteSecrets(\"atest-\" + domainNamespaces[0]);\n+     \n+      deleteNamespace(\"atest-\" + domainNamespaces[0]);\n+      //delete operator\n+      for (HelmParams helmParam : opHelmParams) {\n+        uninstallOperator(helmParam);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=RegExp,\n+   * and domainNamespaceRegExp=^test and domainNamespace= manageByExp3NS.\n+   * Deploy two custom domain resources in two different namespaces with names starting with test\n+   * and verify all server pods in the domains were created and ready.\n+   * Verify operator is able to manage these domains by scaling.\n+   * Try to start another domain with namespace manageByExp3NS. Verify it is not started by operator\n+   * and value of domainNamespace is ignored for both specific namespace and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade helm chart to switch to using LabelSelector, start domain and verify operator can scale it.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using expression namespace management\")\n+  public void testNsManageByExp() {\n+    //create domain namespace\n+    String manageByExp1NS = \"test-\" +  domainNamespaces[0];\n+    String manageByExp2NS = \"test-\" +  domainNamespaces[1];\n+    String manageByExpDomain1Uid = \"test-\" + domainsUid[0];\n+    String manageByExpDomain2Uid = \"test-\" + domainsUid[1];\n+    String manageByExp3NS = \"atest-\" +  domainNamespaces[0];\n+\n+    Map<String,String> managedByExpDomains = new HashMap<>();\n+    managedByExpDomains.put(manageByExp1NS,manageByExpDomain1Uid);\n+    managedByExpDomains.put(manageByExp2NS,manageByExpDomain2Uid);\n+    Map<String,String> unmanagedByExpDomains = new HashMap<>();\n+    unmanagedByExpDomains.put(manageByExp3NS,manageByExp3NS);\n+    String manageByLabelNS = \"weblogic1\" + domainNamespaces[0];\n+    String manageByLabelDomainUid = \"weblogic1\" + domainsUid[0];\n+\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp1NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp2NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp3NS));\n+\n+    opHelmParams[1] = installAndVerifyOperatorCanManageDomainBySelector(managedByExpDomains,unmanagedByExpDomains,\n+        \"RegExp\",\"^test\",\n+        opNamespaces[1], null);\n+\n+\n+    //verify that domainNamespaces field will be ignored and domain will not start for default\n+    checkDomainNotStartedInDefaultNS();\n+\n+    // install  operator sharing same domain\n+    checkSecondOperatorFailedToShareSameNS(manageByExp1NS);\n+\n+    //upgrade operator to manage domains with Labeled namespaces\n+    int externalRestHttpsPort = getServiceNodePort(opNamespaces[1], \"external-weblogic-operator-svc\");\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelNS));\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest\", \"weblogic2\");\n+    setLabelToNamespace(manageByLabelNS, labels);\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams[1])\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceLabelSelector(\"mytest\")\n+        .domainNamespaceSelectionStrategy(\"LabelSelector\");\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespaces[1], opParams));\n+\n+    //verify domain is started\n+    createSecrets(manageByLabelNS);\n+    assertTrue(createDomainCrdAndVerifyDomainIsRunning(manageByLabelNS,manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(opNamespaces[1],manageByLabelDomainUid);\n+\n+    //check operator can't manage anymore manageByExp1NS\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespaces[1], manageByExpDomain1Uid,\n+        manageByExp1NS), \"Operator can still manage domain \"\n+        + manageByExp1NS + \" in the namespace \" + manageByExp1NS);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1.\n+   * Deploy a custom domain resource in the namespace with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   * Verify operator can't start another domain with namespace2 with label2.\n+   * Modify namespace2 to set label1, verify that operator can manage it.\n+   * Verify that domainNamespaces field will be ignored and domain will not start for namespaces:\n+   * (domain3Namespace) and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade operator to replace namespace management using RegExp namespaces.\n+   * Verify it can manage added domain and can't manage old domain by scaling .\n+   * Verify that upgrade helm fail if try to add domain, managed by other operator.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using label namespace management\")\n+  public void testNsManageByLabel() {\n+    Map<String, String> managedByLabelDomains = new HashMap<>();\n+    managedByLabelDomains.put(domainNamespaces[0], domainsUid[0]);\n+    Map<String, String> unmanagedByLabelDomains = new HashMap<>();\n+    unmanagedByLabelDomains.put(domainNamespaces[1], domainsUid[1]);\n+    opHelmParams[0] = installAndVerifyOperatorCanManageDomainBySelector(managedByLabelDomains,unmanagedByLabelDomains,\n+        \"LabelSelector\",OPERATOR_RELEASE_NAME,\n+        opNamespaces[0], domainNamespaces[3]);\n+    assertNotNull(opHelmParams[0], \"Can't install or verify operator with SelectLabel namespace management\");\n+\n+    String manageByExpDomainUid = \"weblogic2\" + domainNamespaces[1];\n+    String manageByExpDomainNS = \"weblogic2\" + domainNamespaces[1];\n+\n+\n+    //switch namespace domainsNamespaces[1] to the label1,\n+    // managed by operator and verify domain is started and can be managed by operator.\n+    setLabelToNamespace(domainNamespaces[1], labels1);\n+    assertTrue(createDomainCrdAndVerifyDomainIsRunning(domainNamespaces[1], domainsUid[1]),\n+        \"Failed to create domain CRD or \"\n+        + \"verify that domain \" + domainsUid[1]\n+        + \" is running in namespace \" + domainNamespaces[1]);\n+    checkOperatorCanScaleDomain(opNamespaces[0], domainsUid[1]);\n+\n+    //check that with specific Selector default namespace is not under operator management\n+    checkDomainNotStartedInDefaultNS();\n+\n+    //check that another operator with selector=List matching domain namespace,\n+    // managed by first operator fails to install\n+    checkSecondOperatorFailedToShareSameNS(domainNamespaces[0]);\n+\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    assertDoesNotThrow(() -> createNamespace(manageByExpDomainNS));\n+    int externalRestHttpsPort = getServiceNodePort(opNamespaces[0], \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams[0])\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic2\");\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespaces[0], opParams));\n+\n+    //verify domain is started in namespace with name starting with weblogic* and operator can scale it.\n+    createSecrets(manageByExpDomainNS);\n+    assertTrue(createDomainCrdAndVerifyDomainIsRunning(manageByExpDomainNS,manageByExpDomainUid));\n+    checkOperatorCanScaleDomain(opNamespaces[0],manageByExpDomainUid);\n+    //verify operator can't manage anymore domain running in the namespace with label\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespaces[0], domainsUid[0], domainNamespaces[0]),\n+        \"Operator can still manage domain \"\n+            + domainsUid[0] + \" in the namespace \" + domainNamespaces[0]);\n+\n+    checkUpgradeFailedToAddNSManagedByAnotherOperator();\n+  }\n+\n+  /**\n+   * Create namespace ns1 with no label\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1 and enableRbac=false.\n+   * Add label1 to ns1 and verify domain can't be started\n+   * Call upgrade operator with reuse values to enable management for ns1\n+   * Deploy a custom domain resource in the namespace ns1 with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   */\n+  @Test\n+  @Order(3)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" with enableClusterRoleBinding\")\n+  public void testSwitchRbac() {\n+    String manageByLabelDomainNS = domainNamespaces[0] + \"test4\";\n+    String manageByLabelDomainUid = domainsUid[0] + \"test4\";\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelDomainNS));\n+    opHelmParams[2] = installAndVerifyOperator(OPERATOR_RELEASE_NAME,\n+        opNamespaces[3], \"LabelSelector\",\n+        \"mytest4\", false);\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest4\", manageByLabelDomainUid);\n+    assertDoesNotThrow(() -> addLabelsToNamespace(manageByLabelDomainNS, labels));\n+    //verify domain can't be started because operator does not have permission to manage it\n+    createSecrets(manageByLabelDomainNS);\n+    checkPodNotCreated(manageByLabelDomainUid + adminServerPrefix, manageByLabelDomainUid, manageByLabelDomainNS);\n+    deleteDomainCrd(manageByLabelDomainNS, manageByLabelDomainUid);\n+    //upgrade operator and start domain\n+    int externalRestHttpsPort = getServiceNodePort(opNamespaces[3], \"external-weblogic-operator-svc\");\n+\n+    OperatorParams opParams = new OperatorParams()\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .helmParams(opHelmParams[2]);\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespaces[3], opParams));\n+    assertTrue(createDomainCrdAndVerifyDomainIsRunning(manageByLabelDomainNS, manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(opNamespaces[3], manageByLabelDomainUid);\n+  }\n+\n+  private void checkUpgradeFailedToAddNSManagedByAnotherOperator() {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    // for ns names starting from weblogic, there one of domains\n+    //in namespace weblogic* is managed by operator2\n+    int externalRestHttpsPort = getServiceNodePort(opNamespaces[0], \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams[0])\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic\");\n+\n+    assertFalse(upgradeAndVerifyOperator(opNamespaces[0], opParams), \"Upgrade does not fail when adding domain,\"\n+        + \" managed by other operator\");\n+  }\n+\n+  private void deleteDomainCrd(String domainNS, String domainUid) {\n+    //clean up domain resources in namespace and set namespace to label , managed by operator\n+    logger.info(\"deleting domain custom resource {0}\", domainUid);\n+    assertTrue(deleteDomainCustomResource(domainUid, domainNS));\n+\n+    // wait until domain was deleted\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be deleted in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNS,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainDoesNotExist(domainUid, DOMAIN_VERSION, domainNS));\n+  }\n+\n+  private HelmParams installAndVerifyOperatorCanManageDomainBySelector(Map<String,String> managedDomains,\n+                                                                       Map<String,String> unmanagedDomains,\n+                                                                       String selector, String selectorValue,\n+                                                                       String opNamespace,\n+                                                                       String domainNamespacesValue) {\n+    // install and verify operator set to manage domains based on LabelSelector strategy,\n+    // domainNamespaces value expected to be ignored\n+    HelmParams opHelmParam = installAndVerifyOperator(OPERATOR_RELEASE_NAME,\n+        opNamespace, selector,\n+        selectorValue, true, domainNamespacesValue);\n+    managedDomains.forEach((domainNS, domainUid) -> {\n+          logger.info(\"Installing and verifying domain {0} in namespace {1}\", domainUid, domainNS);\n+          createSecrets(domainNS);\n+          assertTrue(createDomainCrdAndVerifyDomainIsRunning(domainNS, domainUid),\n+              \"can't start or verify domain in namespace \" + domainNS);\n+\n+          checkOperatorCanScaleDomain(opNamespace, domainUid);\n+        }\n+    );\n+    if (domainNamespacesValue != null) {\n+      //verify that domainNamespaces field will be ignored and domain will not start\n+      createSecrets(domainNamespacesValue);\n+      checkPodNotCreated(domainNamespacesValue + adminServerPrefix, domainNamespacesValue, domainNamespacesValue);\n+    }\n+    //verify that domains in namespaces not matching selector value will not start\n+    unmanagedDomains.forEach((domainNS, domainUid) -> {\n+      createSecrets(domainNS);\n+      checkPodNotCreated(domainUid + adminServerPrefix, domainUid, domainNS);\n+      deleteDomainCrd(domainNS, domainUid);\n+    }\n+    );\n+    return opHelmParam;\n+  }\n+\n+  private boolean isOperatorFailedToScaleDomain(String opNamespace, String domainUid, String domainNamespace) {\n+    try {\n+      //check operator can't manage domainNamespace by trying to scale domain\n+      int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+      String managedServerPodNamePrefix = domainUid + \"-managed-server\";\n+      String opServiceAccount = OPERATOR_RELEASE_NAME + \"-sa\";\n+      scaleAndVerifyCluster(\"cluster-1\", domainUid, domainNamespace,\n+          managedServerPodNamePrefix, 2, 1,\n+          true, externalRestHttpsPort, opNamespace, opServiceAccount,\n+          false, \"\", \"scaleDown\", 1, \"\", \"\", null, null);\n+      return false;\n+\n+    } catch (ConditionTimeoutException ex) {\n+      logger.info(\"Received expected error \" + ex.getMessage());\n+      return true;\n+    }\n+  }\n+\n+  private static void setLabelToNamespace(String domainNS, Map<String, String> labels) {\n+    //add label to domain namespace\n+    V1Namespace namespaceObject1 = assertDoesNotThrow(() -> Kubernetes.getNamespaceAsObject(domainNS));\n+    assertNotNull(namespaceObject1, \"Can't find namespace with name \" + domainNS);\n+    namespaceObject1.getMetadata().setLabels(labels);\n+    assertDoesNotThrow(() -> Kubernetes.replaceNamespace(namespaceObject1));\n+  }\n+\n+  private void checkOperatorCanScaleDomain(String opNamespace, String domainUid) {\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    assertTrue(scaleClusterWithRestApi(domainUid, clusterName, 3,\n+        externalRestHttpsPort, opNamespace, OPERATOR_RELEASE_NAME + \"-sa\"),\n+        \"Domain \" + domainUid + \" scaling operation failed\");\n+  }\n+\n+  private void checkSecondOperatorFailedToShareSameNS(String domainNamespace) {\n+    // try to install another operator sharing same domain namespace via different domainNsSelectionStrategy\n+    HelmParams opHelmParams = new HelmParams().releaseName(OPERATOR_RELEASE_NAME)\n+        .namespace(opNamespaces[2])\n+        .chartDir(OPERATOR_CHART_DIR);\n+    try {\n+      HelmParams opHelmParams2 = installAndVerifyOperator(OPERATOR_RELEASE_NAME,\n+          opNamespaces[2], \"List\",\n+          null, true, domainNamespace);\n+      assertNull(opHelmParams2, \"Operator helm chart sharing same NS with other operator did not fail\");\n+    } catch (org.opentest4j.AssertionFailedError ex) {\n+      //expecting to fail\n+      logger.info(\"Helm installation failed as expected \" + ex.getMessage());\n+      uninstallOperator(opHelmParams);\n+    }\n+  }\n+\n+  private void checkDomainNotStartedInDefaultNS() {\n+    //verify operator can't start domain in the default namespace when domainNsSelectionStrategy not List\n+    // and selector does not match default\n+    checkPodNotCreated(\"defaultuid\" + adminServerPrefix, \"defaultuid\", \"default\");\n+\n+    logger.info(\"Delete defaultuid custom resource in namespace {0}\", \"default\");\n+    deleteDomainCustomResource(\"defaultuid\", \"default\");\n+    logger.info(\"Deleted Domain Custom Resource \" + \"defaultuid\");\n+  }\n+\n+  private boolean createDomainCrdAndVerifyDomainIsRunning(String domainNamespace, String domainUid) {\n+\n+    // create and verify the domain\n+    logger.info(\"Creating and verifying model in image domain\");\n+    Domain domain = createDomainCRD(domainNamespace, domainUid);\n+    assertDoesNotThrow(() -> createVerifyDomain(domainNamespace, domainUid, miiImage, domain));\n+    return true;\n+  }\n+\n+  /**\n+   * Create a model in image domain crd.\n+   */\n+  private Domain createDomainCRD(String domainNamespace, String domainUid) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d2a2c89d138d506bd5a5a5c1d3894a09c55726f"}, "originalPosition": 507}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxOTE1Nw==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1955#discussion_r501819157", "createdAt": "2020-10-08T15:37:34Z", "author": {"login": "marinakog"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItManageNs.java", "diffHunk": "@@ -0,0 +1,614 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1Namespace;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OCIR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OCR_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.TestActions.addLabelsToNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteNamespace;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.scaleClusterWithRestApi;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOcirRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+\n+/**\n+ * Simple JUnit test file used for testing operator namespace management,\n+ * Dedicated usecase is covered by other test class.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test operator namespace management usability using Helm chart\")\n+@IntegrationTest\n+class ItManageNs {\n+\n+  private static String[] opNamespaces = new String[4];\n+\n+  // domain constants\n+  private static final String[] domainsUid = {\"managensdomain1\",\"managensdomain2\",\"managensdomain3\",\"managensdomain4\"};\n+  private static String[] domainNamespaces = new String[4];\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPrefix = \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPrefix = \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private HelmParams[] opHelmParams = new HelmParams[3];\n+  private static String adminSecretName = \"weblogic-credentials-itmanagens\";\n+  private static String encryptionSecretName = \"encryptionsecret-itmanagens\";\n+  private static Map<String, String> labels1;\n+  private static Map<String, String> labels2;\n+\n+  private static LoggingFacade logger = null;\n+  private static String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+  private static org.awaitility.core.ConditionFactory withStandardRetryPolicy =\n+      with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(5, SECONDS)\n+          .atMost(2, MINUTES).await();\n+\n+  /**\n+   * Get namespaces for operator, domain.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(8) List<String> namespaces) {\n+    logger = getLogger();\n+    for (int i = 0; i < 4; i++) {\n+      // get a unique domain namespace\n+      assertNotNull(namespaces.get(i), \"Namespace list is null\");\n+      logger.info(\"Getting a unique namespace {0} for WebLogic domain {1}\", namespaces.get(i), i);\n+      domainNamespaces[i] = namespaces.get(i);\n+    }\n+    for (int i = 4; i < 8; i++) {\n+      // get a unique operator namespace\n+      logger.info(\"Getting a unique namespace for operator {0}\", (i - 4));\n+      assertNotNull(namespaces.get(i), \"Namespace list is null\");\n+      opNamespaces[(i - 4)] = namespaces.get(i);\n+    }\n+\n+    createSecrets(domainNamespaces[2]);\n+    createSecrets(\"default\");\n+    labels1 = new java.util.HashMap<>();\n+    labels1.put(OPERATOR_RELEASE_NAME, OPERATOR_RELEASE_NAME);\n+    labels2 = new java.util.HashMap<>();\n+    labels2.put(OPERATOR_RELEASE_NAME + \"2\", OPERATOR_RELEASE_NAME);\n+    setLabelToNamespace(domainNamespaces[0], labels1);\n+    setLabelToNamespace(domainNamespaces[1], labels2);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+    try {\n+      // Delete domain custom resource\n+      for (int i = 0; i < 4; i++) {\n+        logger.info(\"Delete domain1 custom resource in namespace {0}\", domainNamespaces[i]);\n+        deleteDomainCustomResource(domainsUid[i], domainNamespaces[i]);\n+        logger.info(\"Deleted Domain Custom Resource \" + domainsUid[i] + \" from \" + domainNamespaces[i]);\n+      }\n+      logger.info(\"Delete domain1test custom resource in namespace {0}\", \"test-\" + domainNamespaces[0]);\n+      deleteDomainCustomResource(domainsUid[0] + \"test\", \"test-\" + domainNamespaces[0]);\n+      logger.info(\"Deleted Domain Custom Resource \" + domainsUid[0] + \"test from test-\" + domainNamespaces[0]);\n+  \n+      logger.info(\"Delete domain2test custom resource in namespace {0}\", \"test-\" + domainNamespaces[1]);\n+      deleteDomainCustomResource(domainsUid[1] + \"test\", \"test-\" + domainNamespaces[1]);\n+      logger.info(\"Deleted Domain Custom Resource \" + domainsUid[1] + \"test from test-\" + domainNamespaces[1]);\n+  \n+      logger.info(\"Delete weblogic custom resource in namespace {0}\", \"weblogic\" + domainNamespaces[1]);\n+      deleteDomainCustomResource(\"weblogic\", \"weblogic\" + domainNamespaces[1]);\n+      logger.info(\"Deleted Domain Custom Resource weblogic from weblogic\" + domainNamespaces[1]);\n+    } finally {\n+      deleteSecrets(\"default\");\n+      deleteSecrets(\"atest-\" + domainNamespaces[0]);\n+     \n+      deleteNamespace(\"atest-\" + domainNamespaces[0]);\n+      //delete operator\n+      for (HelmParams helmParam : opHelmParams) {\n+        uninstallOperator(helmParam);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=RegExp,\n+   * and domainNamespaceRegExp=^test and domainNamespace= manageByExp3NS.\n+   * Deploy two custom domain resources in two different namespaces with names starting with test\n+   * and verify all server pods in the domains were created and ready.\n+   * Verify operator is able to manage these domains by scaling.\n+   * Try to start another domain with namespace manageByExp3NS. Verify it is not started by operator\n+   * and value of domainNamespace is ignored for both specific namespace and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade helm chart to switch to using LabelSelector, start domain and verify operator can scale it.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using expression namespace management\")\n+  public void testNsManageByExp() {\n+    //create domain namespace\n+    String manageByExp1NS = \"test-\" +  domainNamespaces[0];\n+    String manageByExp2NS = \"test-\" +  domainNamespaces[1];\n+    String manageByExpDomain1Uid = \"test-\" + domainsUid[0];\n+    String manageByExpDomain2Uid = \"test-\" + domainsUid[1];\n+    String manageByExp3NS = \"atest-\" +  domainNamespaces[0];\n+\n+    Map<String,String> managedByExpDomains = new HashMap<>();\n+    managedByExpDomains.put(manageByExp1NS,manageByExpDomain1Uid);\n+    managedByExpDomains.put(manageByExp2NS,manageByExpDomain2Uid);\n+    Map<String,String> unmanagedByExpDomains = new HashMap<>();\n+    unmanagedByExpDomains.put(manageByExp3NS,manageByExp3NS);\n+    String manageByLabelNS = \"weblogic1\" + domainNamespaces[0];\n+    String manageByLabelDomainUid = \"weblogic1\" + domainsUid[0];\n+\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp1NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp2NS));\n+    assertDoesNotThrow(() -> Kubernetes.createNamespace(manageByExp3NS));\n+\n+    opHelmParams[1] = installAndVerifyOperatorCanManageDomainBySelector(managedByExpDomains,unmanagedByExpDomains,\n+        \"RegExp\",\"^test\",\n+        opNamespaces[1], null);\n+\n+\n+    //verify that domainNamespaces field will be ignored and domain will not start for default\n+    checkDomainNotStartedInDefaultNS();\n+\n+    // install  operator sharing same domain\n+    checkSecondOperatorFailedToShareSameNS(manageByExp1NS);\n+\n+    //upgrade operator to manage domains with Labeled namespaces\n+    int externalRestHttpsPort = getServiceNodePort(opNamespaces[1], \"external-weblogic-operator-svc\");\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelNS));\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest\", \"weblogic2\");\n+    setLabelToNamespace(manageByLabelNS, labels);\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams[1])\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceLabelSelector(\"mytest\")\n+        .domainNamespaceSelectionStrategy(\"LabelSelector\");\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespaces[1], opParams));\n+\n+    //verify domain is started\n+    createSecrets(manageByLabelNS);\n+    assertTrue(createDomainCrdAndVerifyDomainIsRunning(manageByLabelNS,manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(opNamespaces[1],manageByLabelDomainUid);\n+\n+    //check operator can't manage anymore manageByExp1NS\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespaces[1], manageByExpDomain1Uid,\n+        manageByExp1NS), \"Operator can still manage domain \"\n+        + manageByExp1NS + \" in the namespace \" + manageByExp1NS);\n+\n+  }\n+\n+  /**\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1.\n+   * Deploy a custom domain resource in the namespace with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   * Verify operator can't start another domain with namespace2 with label2.\n+   * Modify namespace2 to set label1, verify that operator can manage it.\n+   * Verify that domainNamespaces field will be ignored and domain will not start for namespaces:\n+   * (domain3Namespace) and default.\n+   * Add another operator using domainNamespaces sharing same namespace and verify it fails to install.\n+   * Upgrade operator to replace namespace management using RegExp namespaces.\n+   * Verify it can manage added domain and can't manage old domain by scaling .\n+   * Verify that upgrade helm fail if try to add domain, managed by other operator.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" using label namespace management\")\n+  public void testNsManageByLabel() {\n+    Map<String, String> managedByLabelDomains = new HashMap<>();\n+    managedByLabelDomains.put(domainNamespaces[0], domainsUid[0]);\n+    Map<String, String> unmanagedByLabelDomains = new HashMap<>();\n+    unmanagedByLabelDomains.put(domainNamespaces[1], domainsUid[1]);\n+    opHelmParams[0] = installAndVerifyOperatorCanManageDomainBySelector(managedByLabelDomains,unmanagedByLabelDomains,\n+        \"LabelSelector\",OPERATOR_RELEASE_NAME,\n+        opNamespaces[0], domainNamespaces[3]);\n+    assertNotNull(opHelmParams[0], \"Can't install or verify operator with SelectLabel namespace management\");\n+\n+    String manageByExpDomainUid = \"weblogic2\" + domainNamespaces[1];\n+    String manageByExpDomainNS = \"weblogic2\" + domainNamespaces[1];\n+\n+\n+    //switch namespace domainsNamespaces[1] to the label1,\n+    // managed by operator and verify domain is started and can be managed by operator.\n+    setLabelToNamespace(domainNamespaces[1], labels1);\n+    assertTrue(createDomainCrdAndVerifyDomainIsRunning(domainNamespaces[1], domainsUid[1]),\n+        \"Failed to create domain CRD or \"\n+        + \"verify that domain \" + domainsUid[1]\n+        + \" is running in namespace \" + domainNamespaces[1]);\n+    checkOperatorCanScaleDomain(opNamespaces[0], domainsUid[1]);\n+\n+    //check that with specific Selector default namespace is not under operator management\n+    checkDomainNotStartedInDefaultNS();\n+\n+    //check that another operator with selector=List matching domain namespace,\n+    // managed by first operator fails to install\n+    checkSecondOperatorFailedToShareSameNS(domainNamespaces[0]);\n+\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    assertDoesNotThrow(() -> createNamespace(manageByExpDomainNS));\n+    int externalRestHttpsPort = getServiceNodePort(opNamespaces[0], \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams[0])\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic2\");\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespaces[0], opParams));\n+\n+    //verify domain is started in namespace with name starting with weblogic* and operator can scale it.\n+    createSecrets(manageByExpDomainNS);\n+    assertTrue(createDomainCrdAndVerifyDomainIsRunning(manageByExpDomainNS,manageByExpDomainUid));\n+    checkOperatorCanScaleDomain(opNamespaces[0],manageByExpDomainUid);\n+    //verify operator can't manage anymore domain running in the namespace with label\n+    assertTrue(isOperatorFailedToScaleDomain(opNamespaces[0], domainsUid[0], domainNamespaces[0]),\n+        \"Operator can still manage domain \"\n+            + domainsUid[0] + \" in the namespace \" + domainNamespaces[0]);\n+\n+    checkUpgradeFailedToAddNSManagedByAnotherOperator();\n+  }\n+\n+  /**\n+   * Create namespace ns1 with no label\n+   * Install the Operator successfully and verify it is deployed successfully\n+   * with domainNamespaceSelectionStrategy=LabelSelector,\n+   * and domainNamespaceLabelSelector=label1 and enableRbac=false.\n+   * Add label1 to ns1 and verify domain can't be started\n+   * Call upgrade operator with reuse values to enable management for ns1\n+   * Deploy a custom domain resource in the namespace ns1 with label1\n+   * and verify all server pods in the domain were created and ready.\n+   * Verify operator is able to manage this domain by scaling.\n+   */\n+  @Test\n+  @Order(3)\n+  @DisplayName(\"install operator helm chart and domain, \"\n+      + \" with enableClusterRoleBinding\")\n+  public void testSwitchRbac() {\n+    String manageByLabelDomainNS = domainNamespaces[0] + \"test4\";\n+    String manageByLabelDomainUid = domainsUid[0] + \"test4\";\n+    assertDoesNotThrow(() -> createNamespace(manageByLabelDomainNS));\n+    opHelmParams[2] = installAndVerifyOperator(OPERATOR_RELEASE_NAME,\n+        opNamespaces[3], \"LabelSelector\",\n+        \"mytest4\", false);\n+    Map<String, String> labels = new HashMap<>();\n+    labels.put(\"mytest4\", manageByLabelDomainUid);\n+    assertDoesNotThrow(() -> addLabelsToNamespace(manageByLabelDomainNS, labels));\n+    //verify domain can't be started because operator does not have permission to manage it\n+    createSecrets(manageByLabelDomainNS);\n+    checkPodNotCreated(manageByLabelDomainUid + adminServerPrefix, manageByLabelDomainUid, manageByLabelDomainNS);\n+    deleteDomainCrd(manageByLabelDomainNS, manageByLabelDomainUid);\n+    //upgrade operator and start domain\n+    int externalRestHttpsPort = getServiceNodePort(opNamespaces[3], \"external-weblogic-operator-svc\");\n+\n+    OperatorParams opParams = new OperatorParams()\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .helmParams(opHelmParams[2]);\n+\n+    assertTrue(upgradeAndVerifyOperator(opNamespaces[3], opParams));\n+    assertTrue(createDomainCrdAndVerifyDomainIsRunning(manageByLabelDomainNS, manageByLabelDomainUid));\n+    checkOperatorCanScaleDomain(opNamespaces[3], manageByLabelDomainUid);\n+  }\n+\n+  private void checkUpgradeFailedToAddNSManagedByAnotherOperator() {\n+    //upgrade operator1 to replace managing domains using RegExp namespaces\n+    // for ns names starting from weblogic, there one of domains\n+    //in namespace weblogic* is managed by operator2\n+    int externalRestHttpsPort = getServiceNodePort(opNamespaces[0], \"external-weblogic-operator-svc\");\n+    //set helm params to use domainNamespaceSelectionStrategy=RegExp for namespaces names started with weblogic\n+    OperatorParams opParams = new OperatorParams()\n+        .helmParams(opHelmParams[0])\n+        .externalRestEnabled(true)\n+        .externalRestHttpsPort(externalRestHttpsPort)\n+        .domainNamespaceSelectionStrategy(\"RegExp\")\n+        .domainNamespaceRegExp(\"^\" + \"weblogic\");\n+\n+    assertFalse(upgradeAndVerifyOperator(opNamespaces[0], opParams), \"Upgrade does not fail when adding domain,\"\n+        + \" managed by other operator\");\n+  }\n+\n+  private void deleteDomainCrd(String domainNS, String domainUid) {\n+    //clean up domain resources in namespace and set namespace to label , managed by operator\n+    logger.info(\"deleting domain custom resource {0}\", domainUid);\n+    assertTrue(deleteDomainCustomResource(domainUid, domainNS));\n+\n+    // wait until domain was deleted\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be deleted in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNS,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainDoesNotExist(domainUid, DOMAIN_VERSION, domainNS));\n+  }\n+\n+  private HelmParams installAndVerifyOperatorCanManageDomainBySelector(Map<String,String> managedDomains,\n+                                                                       Map<String,String> unmanagedDomains,\n+                                                                       String selector, String selectorValue,\n+                                                                       String opNamespace,\n+                                                                       String domainNamespacesValue) {\n+    // install and verify operator set to manage domains based on LabelSelector strategy,\n+    // domainNamespaces value expected to be ignored\n+    HelmParams opHelmParam = installAndVerifyOperator(OPERATOR_RELEASE_NAME,\n+        opNamespace, selector,\n+        selectorValue, true, domainNamespacesValue);\n+    managedDomains.forEach((domainNS, domainUid) -> {\n+          logger.info(\"Installing and verifying domain {0} in namespace {1}\", domainUid, domainNS);\n+          createSecrets(domainNS);\n+          assertTrue(createDomainCrdAndVerifyDomainIsRunning(domainNS, domainUid),\n+              \"can't start or verify domain in namespace \" + domainNS);\n+\n+          checkOperatorCanScaleDomain(opNamespace, domainUid);\n+        }\n+    );\n+    if (domainNamespacesValue != null) {\n+      //verify that domainNamespaces field will be ignored and domain will not start\n+      createSecrets(domainNamespacesValue);\n+      checkPodNotCreated(domainNamespacesValue + adminServerPrefix, domainNamespacesValue, domainNamespacesValue);\n+    }\n+    //verify that domains in namespaces not matching selector value will not start\n+    unmanagedDomains.forEach((domainNS, domainUid) -> {\n+      createSecrets(domainNS);\n+      checkPodNotCreated(domainUid + adminServerPrefix, domainUid, domainNS);\n+      deleteDomainCrd(domainNS, domainUid);\n+    }\n+    );\n+    return opHelmParam;\n+  }\n+\n+  private boolean isOperatorFailedToScaleDomain(String opNamespace, String domainUid, String domainNamespace) {\n+    try {\n+      //check operator can't manage domainNamespace by trying to scale domain\n+      int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+      String managedServerPodNamePrefix = domainUid + \"-managed-server\";\n+      String opServiceAccount = OPERATOR_RELEASE_NAME + \"-sa\";\n+      scaleAndVerifyCluster(\"cluster-1\", domainUid, domainNamespace,\n+          managedServerPodNamePrefix, 2, 1,\n+          true, externalRestHttpsPort, opNamespace, opServiceAccount,\n+          false, \"\", \"scaleDown\", 1, \"\", \"\", null, null);\n+      return false;\n+\n+    } catch (ConditionTimeoutException ex) {\n+      logger.info(\"Received expected error \" + ex.getMessage());\n+      return true;\n+    }\n+  }\n+\n+  private static void setLabelToNamespace(String domainNS, Map<String, String> labels) {\n+    //add label to domain namespace\n+    V1Namespace namespaceObject1 = assertDoesNotThrow(() -> Kubernetes.getNamespaceAsObject(domainNS));\n+    assertNotNull(namespaceObject1, \"Can't find namespace with name \" + domainNS);\n+    namespaceObject1.getMetadata().setLabels(labels);\n+    assertDoesNotThrow(() -> Kubernetes.replaceNamespace(namespaceObject1));\n+  }\n+\n+  private void checkOperatorCanScaleDomain(String opNamespace, String domainUid) {\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    assertTrue(scaleClusterWithRestApi(domainUid, clusterName, 3,\n+        externalRestHttpsPort, opNamespace, OPERATOR_RELEASE_NAME + \"-sa\"),\n+        \"Domain \" + domainUid + \" scaling operation failed\");\n+  }\n+\n+  private void checkSecondOperatorFailedToShareSameNS(String domainNamespace) {\n+    // try to install another operator sharing same domain namespace via different domainNsSelectionStrategy\n+    HelmParams opHelmParams = new HelmParams().releaseName(OPERATOR_RELEASE_NAME)\n+        .namespace(opNamespaces[2])\n+        .chartDir(OPERATOR_CHART_DIR);\n+    try {\n+      HelmParams opHelmParams2 = installAndVerifyOperator(OPERATOR_RELEASE_NAME,\n+          opNamespaces[2], \"List\",\n+          null, true, domainNamespace);\n+      assertNull(opHelmParams2, \"Operator helm chart sharing same NS with other operator did not fail\");\n+    } catch (org.opentest4j.AssertionFailedError ex) {\n+      //expecting to fail\n+      logger.info(\"Helm installation failed as expected \" + ex.getMessage());\n+      uninstallOperator(opHelmParams);\n+    }\n+  }\n+\n+  private void checkDomainNotStartedInDefaultNS() {\n+    //verify operator can't start domain in the default namespace when domainNsSelectionStrategy not List\n+    // and selector does not match default\n+    checkPodNotCreated(\"defaultuid\" + adminServerPrefix, \"defaultuid\", \"default\");\n+\n+    logger.info(\"Delete defaultuid custom resource in namespace {0}\", \"default\");\n+    deleteDomainCustomResource(\"defaultuid\", \"default\");\n+    logger.info(\"Deleted Domain Custom Resource \" + \"defaultuid\");\n+  }\n+\n+  private boolean createDomainCrdAndVerifyDomainIsRunning(String domainNamespace, String domainUid) {\n+\n+    // create and verify the domain\n+    logger.info(\"Creating and verifying model in image domain\");\n+    Domain domain = createDomainCRD(domainNamespace, domainUid);\n+    assertDoesNotThrow(() -> createVerifyDomain(domainNamespace, domainUid, miiImage, domain));\n+    return true;\n+  }\n+\n+  /**\n+   * Create a model in image domain crd.\n+   */\n+  private Domain createDomainCRD(String domainNamespace, String domainUid) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQwODExMQ=="}, "originalCommit": {"oid": "4d2a2c89d138d506bd5a5a5c1d3894a09c55726f"}, "originalPosition": 507}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4016, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}