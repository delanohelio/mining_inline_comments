{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyMzk1MTQx", "number": 2016, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODowMDoxN1rOEz55AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMToxMTo0MFrOEz9s_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODYxMzEyOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODowMDoxN1rOHrajUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODoyMToxM1rOHrbNDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI4NTg0Mg==", "bodyText": "wlst or wdt is not set here", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2016#discussion_r515285842", "createdAt": "2020-10-30T18:00:17Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java", "diffHunk": "@@ -305,6 +304,105 @@ private void createPvPvc(String domainName) {\n \n   }\n \n+  private void updateDomainInputsFile(String domainName, Path sampleBase) {\n+    // change namespace from default to custom, set wlst or wdt, domain name, and t3PublicAddress", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47586c9ebfa2dd732d7ea0794c152dd82c021ee4"}, "originalPosition": 219}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI5NjUyNw==", "bodyText": "Thanks. I copy/pasted your original one :( will change", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2016#discussion_r515296527", "createdAt": "2020-10-30T18:21:13Z", "author": {"login": "hzhao-github"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java", "diffHunk": "@@ -305,6 +304,105 @@ private void createPvPvc(String domainName) {\n \n   }\n \n+  private void updateDomainInputsFile(String domainName, Path sampleBase) {\n+    // change namespace from default to custom, set wlst or wdt, domain name, and t3PublicAddress", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI4NTg0Mg=="}, "originalCommit": {"oid": "47586c9ebfa2dd732d7ea0794c152dd82c021ee4"}, "originalPosition": 219}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODg2OTU2OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxOToyNTowN1rOHrdCOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMDoyMToxMFrOHre34Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMyNjUyMg==", "bodyText": "I see these log messages in the test.out file which are confusing as its not actually copying the file, I think you can remove them or modify the log messages for string replacement ...https://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/2849/artifact/logdir/jenkins-weblogic-kubernetes-operator-kind-new-2849/wl_k8s_test_results/diagnosticlogs/ItSamples/ItSamples.out/*view*/\n<10-30-2020 04:29:24> <INFO> <oracle.weblogic.kubernetes.utils.FileUtils replaceStringInFile> <Copying /tmp/it-results/sample-testing/scripts/create-weblogic-domain/domain-home-in-image/create-domain-inputs.yaml>\n<10-30-2020 04:29:24> <INFO> <oracle.weblogic.kubernetes.utils.FileUtils replaceStringInFile> <to /tmp/it-results/sample-testing/scripts/create-weblogic-domain/domain-home-in-image/create-domain-inputs.yaml>\n<10-30-2020 04:29:24> <INFO> <oracle.weblogic.kubernetes.utils.FileUtils replaceStringInFile> <Copying /tmp/it-results/sample-testing/scripts/create-weblogic-domain/domain-home-in-image/create-domain-inputs.yaml>\n<10-30-2020 04:29:24> <INFO> <oracle.weblogic.kubernetes.utils.FileUtils replaceStringInFile> <to /tmp/it-results/sample-testing/scripts/create-weblogic-domain/domain-home-in-image/create-domain-inputs.yaml>\n<10-30-2020 04:29:24> <INFO> <oracle.weblogic.kubernetes.utils.FileUtils replaceStringInFile> <Copying /tmp/it-results/sample-testing/scripts/create-weblogic-domain/domain-home-in-image/create-domain-inputs.yaml>\n<10-30-2020 04:29:24> <INFO> <oracle.weblogic.kubernetes.utils.FileUtils replaceStringInFile> <to /tmp/it-results/sample-testing/scripts/create-weblogic-domain/domain-home-in-image/create-domain-inputs.yaml>\n<10-30-2020 04:29:24> <INFO> <oracle.weblogic.kubernetes.utils.FileUtils replaceStringInFile> <Copying /tmp/it-results/sample-testing/scripts/create-weblogic-domain/domain-home-in-image/create-domain-inputs.yaml>\n<10-30-2020 04:29:24> <INFO> <oracle.weblogic.kubernetes.utils.FileUtils replaceStringInFile> <to /tmp/it-results/sample-testing/scripts/create-weblogic-domain/domain-home-in-image/create-domain-inputs.yaml>\n<10-30-2020 04:29:24> <INFO> <oracle.weblogic.kubernetes.utils.FileUtils replaceStringInFile> <Copying /tmp/it-results/sample-testing/scripts/create-weblogic-domain/domain-home-in-image/create-domain-inputs.yaml>\n<10-30-2020 04:29:24> <INFO> <oracle.weblogic.kubernetes.utils.FileUtils replaceStringInFile> <to /tmp/it-results/sample-testing/scripts/create-weblogic-domain/domain-home-in-image/create-domain-inputs.yaml>\n<10-30-2020 04:29:24> <INFO> <oracle.weblogic.kubernetes.utils.FileUtils replaceStringInFile> <Copying /tmp/it-results/sample-testing/scripts/create-weblogic-domain/domain-home-in-image/create-domain-inputs.yaml>\n<10-30-2020 04:29:24> <INFO> <oracle.weblogic.kubernetes.utils.FileUtils replaceStringInFile> <to /tmp/it-results/sample-testing/scripts/create-weblogic-domain/domain-home-in-image/create-domain-inputs.yaml>", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2016#discussion_r515326522", "createdAt": "2020-10-30T19:25:07Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java", "diffHunk": "@@ -122,86 +129,79 @@ public void testSampleDomainInPv(String model) {\n \n     Path sampleBase = Paths.get(tempSamplePath.toString(), \"scripts/create-weblogic-domain/domain-home-on-pv\");\n \n-    // change namespace from default to custom, set wlst or wdt, domain name, and t3PublicAddress\n+    // update create-domain-inputs.yaml with the values from this test\n+    updateDomainInputsFile(domainName, sampleBase);\n+\n+    // change createDomainFilesDir and image with right values in create-domain-inputs.yaml\n     assertDoesNotThrow(() -> {\n-      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n-          \"namespace: default\", \"namespace: \" + domainNamespace);\n       replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n           \"createDomainFilesDir: wlst\", \"createDomainFilesDir: \" + script);\n-      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n-          \"domain1\", domainName);\n-      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n-          \"#t3PublicAddress:\", \"t3PublicAddress: \" + K8S_NODEPORT_HOST);\n       replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n           \"image: container-registry.oracle.com/middleware/weblogic:12.2.1.4\",\n           \"image: \" + WEBLOGIC_IMAGE_TO_USE_IN_SPEC);\n-      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n-          \"#imagePullSecretName:\", \"imagePullSecretName: \" + BASE_IMAGES_REPO_SECRET);\n     });\n \n-    // run create-domain.sh to create domain.yaml file\n-    CommandParams params = new CommandParams().defaults();\n-    params.command(\"sh \"\n-        + Paths.get(sampleBase.toString(), \"create-domain.sh\").toString()\n-        + \" -i \" + Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString()\n-        + \" -o \"\n-        + Paths.get(sampleBase.toString()));\n+    // run create-domain.sh to create domain.yaml file, run kubectl to create the domain and verify\n+    createDomainAndVerify(domainName, sampleBase);\n \n-    boolean result = Command.withParams(params).execute();\n-    assertTrue(result, \"Failed to create domain.yaml\");\n+    //delete the domain resource\n+    deleteDomainResourceAndVerify(domainName, sampleBase);\n+  }\n \n-    // run kubectl to create the domain\n-    params = new CommandParams().defaults();\n-    params.command(\"kubectl apply -f \"\n-        + Paths.get(sampleBase.toString(), \"weblogic-domains/\" + domainName + \"/domain.yaml\").toString());\n+  /**\n+   * Test domain in image samples using domains created by wlst and wdt.\n+   *\n+   * @param model domain name and script type to create domain. Acceptable values of format String:wlst|wdt\n+   */\n+  @Order(2)\n+  @ParameterizedTest\n+  @MethodSource(\"paramProvider\")\n+  @DisplayName(\"Test samples using domain in image\")\n+  public void testSampleDomainInImage(String model) {\n+    String domainName = model.split(\":\")[1];\n+    String script = model.split(\":\")[0];\n+    String imageName = (KIND_REPO != null\n+        ? KIND_REPO + diiImageNameBase + \"_\" + script + \":\" + diiImageTag\n+        : diiImageNameBase + \"_\" + script + \":\" + diiImageTag);\n \n-    result = Command.withParams(params).execute();\n-    assertTrue(result, \"Failed to create domain custom resource\");\n+    //copy the samples directory to a temporary location\n+    setupSample();\n \n-    // wait for the domain to exist\n-    logger.info(\"Checking for domain custom resource in namespace {0}\", domainNamespace);\n-    withStandardRetryPolicy\n-        .conditionEvaluationListener(\n-            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n-                + \"(elapsed time {2}ms, remaining time {3}ms)\",\n-                domainName,\n-                domainNamespace,\n-                condition.getElapsedTimeInMS(),\n-                condition.getRemainingTimeInMS()))\n-        .until(domainExists(domainName, DOMAIN_VERSION, domainNamespace));\n+    Path sampleBase = Paths.get(tempSamplePath.toString(), \"scripts/create-weblogic-domain/domain-home-in-image\");\n \n-    final String adminServerName = \"admin-server\";\n-    final String adminServerPodName = domainName + \"-\" + adminServerName;\n+    // update create-domain-inputs.yaml with the values from this test\n+    updateDomainInputsFile(domainName, sampleBase);\n \n-    final String managedServerNameBase = \"managed-server\";\n-    String managedServerPodNamePrefix = domainName + \"-\" + managedServerNameBase;\n-    int replicaCount = 2;\n+    // update domainHomeImageBase with right values in create-domain-inputs.yaml\n+    assertDoesNotThrow(() -> {\n+      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47586c9ebfa2dd732d7ea0794c152dd82c021ee4"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMzOTU3NQ==", "bodyText": "It's in fiuleUtils.java, do you want me change it there?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2016#discussion_r515339575", "createdAt": "2020-10-30T19:45:26Z", "author": {"login": "hzhao-github"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java", "diffHunk": "@@ -122,86 +129,79 @@ public void testSampleDomainInPv(String model) {\n \n     Path sampleBase = Paths.get(tempSamplePath.toString(), \"scripts/create-weblogic-domain/domain-home-on-pv\");\n \n-    // change namespace from default to custom, set wlst or wdt, domain name, and t3PublicAddress\n+    // update create-domain-inputs.yaml with the values from this test\n+    updateDomainInputsFile(domainName, sampleBase);\n+\n+    // change createDomainFilesDir and image with right values in create-domain-inputs.yaml\n     assertDoesNotThrow(() -> {\n-      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n-          \"namespace: default\", \"namespace: \" + domainNamespace);\n       replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n           \"createDomainFilesDir: wlst\", \"createDomainFilesDir: \" + script);\n-      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n-          \"domain1\", domainName);\n-      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n-          \"#t3PublicAddress:\", \"t3PublicAddress: \" + K8S_NODEPORT_HOST);\n       replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n           \"image: container-registry.oracle.com/middleware/weblogic:12.2.1.4\",\n           \"image: \" + WEBLOGIC_IMAGE_TO_USE_IN_SPEC);\n-      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n-          \"#imagePullSecretName:\", \"imagePullSecretName: \" + BASE_IMAGES_REPO_SECRET);\n     });\n \n-    // run create-domain.sh to create domain.yaml file\n-    CommandParams params = new CommandParams().defaults();\n-    params.command(\"sh \"\n-        + Paths.get(sampleBase.toString(), \"create-domain.sh\").toString()\n-        + \" -i \" + Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString()\n-        + \" -o \"\n-        + Paths.get(sampleBase.toString()));\n+    // run create-domain.sh to create domain.yaml file, run kubectl to create the domain and verify\n+    createDomainAndVerify(domainName, sampleBase);\n \n-    boolean result = Command.withParams(params).execute();\n-    assertTrue(result, \"Failed to create domain.yaml\");\n+    //delete the domain resource\n+    deleteDomainResourceAndVerify(domainName, sampleBase);\n+  }\n \n-    // run kubectl to create the domain\n-    params = new CommandParams().defaults();\n-    params.command(\"kubectl apply -f \"\n-        + Paths.get(sampleBase.toString(), \"weblogic-domains/\" + domainName + \"/domain.yaml\").toString());\n+  /**\n+   * Test domain in image samples using domains created by wlst and wdt.\n+   *\n+   * @param model domain name and script type to create domain. Acceptable values of format String:wlst|wdt\n+   */\n+  @Order(2)\n+  @ParameterizedTest\n+  @MethodSource(\"paramProvider\")\n+  @DisplayName(\"Test samples using domain in image\")\n+  public void testSampleDomainInImage(String model) {\n+    String domainName = model.split(\":\")[1];\n+    String script = model.split(\":\")[0];\n+    String imageName = (KIND_REPO != null\n+        ? KIND_REPO + diiImageNameBase + \"_\" + script + \":\" + diiImageTag\n+        : diiImageNameBase + \"_\" + script + \":\" + diiImageTag);\n \n-    result = Command.withParams(params).execute();\n-    assertTrue(result, \"Failed to create domain custom resource\");\n+    //copy the samples directory to a temporary location\n+    setupSample();\n \n-    // wait for the domain to exist\n-    logger.info(\"Checking for domain custom resource in namespace {0}\", domainNamespace);\n-    withStandardRetryPolicy\n-        .conditionEvaluationListener(\n-            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n-                + \"(elapsed time {2}ms, remaining time {3}ms)\",\n-                domainName,\n-                domainNamespace,\n-                condition.getElapsedTimeInMS(),\n-                condition.getRemainingTimeInMS()))\n-        .until(domainExists(domainName, DOMAIN_VERSION, domainNamespace));\n+    Path sampleBase = Paths.get(tempSamplePath.toString(), \"scripts/create-weblogic-domain/domain-home-in-image\");\n \n-    final String adminServerName = \"admin-server\";\n-    final String adminServerPodName = domainName + \"-\" + adminServerName;\n+    // update create-domain-inputs.yaml with the values from this test\n+    updateDomainInputsFile(domainName, sampleBase);\n \n-    final String managedServerNameBase = \"managed-server\";\n-    String managedServerPodNamePrefix = domainName + \"-\" + managedServerNameBase;\n-    int replicaCount = 2;\n+    // update domainHomeImageBase with right values in create-domain-inputs.yaml\n+    assertDoesNotThrow(() -> {\n+      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMyNjUyMg=="}, "originalCommit": {"oid": "47586c9ebfa2dd732d7ea0794c152dd82c021ee4"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM1NjY0MQ==", "bodyText": "yes please", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2016#discussion_r515356641", "createdAt": "2020-10-30T20:21:10Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java", "diffHunk": "@@ -122,86 +129,79 @@ public void testSampleDomainInPv(String model) {\n \n     Path sampleBase = Paths.get(tempSamplePath.toString(), \"scripts/create-weblogic-domain/domain-home-on-pv\");\n \n-    // change namespace from default to custom, set wlst or wdt, domain name, and t3PublicAddress\n+    // update create-domain-inputs.yaml with the values from this test\n+    updateDomainInputsFile(domainName, sampleBase);\n+\n+    // change createDomainFilesDir and image with right values in create-domain-inputs.yaml\n     assertDoesNotThrow(() -> {\n-      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n-          \"namespace: default\", \"namespace: \" + domainNamespace);\n       replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n           \"createDomainFilesDir: wlst\", \"createDomainFilesDir: \" + script);\n-      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n-          \"domain1\", domainName);\n-      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n-          \"#t3PublicAddress:\", \"t3PublicAddress: \" + K8S_NODEPORT_HOST);\n       replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n           \"image: container-registry.oracle.com/middleware/weblogic:12.2.1.4\",\n           \"image: \" + WEBLOGIC_IMAGE_TO_USE_IN_SPEC);\n-      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n-          \"#imagePullSecretName:\", \"imagePullSecretName: \" + BASE_IMAGES_REPO_SECRET);\n     });\n \n-    // run create-domain.sh to create domain.yaml file\n-    CommandParams params = new CommandParams().defaults();\n-    params.command(\"sh \"\n-        + Paths.get(sampleBase.toString(), \"create-domain.sh\").toString()\n-        + \" -i \" + Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString()\n-        + \" -o \"\n-        + Paths.get(sampleBase.toString()));\n+    // run create-domain.sh to create domain.yaml file, run kubectl to create the domain and verify\n+    createDomainAndVerify(domainName, sampleBase);\n \n-    boolean result = Command.withParams(params).execute();\n-    assertTrue(result, \"Failed to create domain.yaml\");\n+    //delete the domain resource\n+    deleteDomainResourceAndVerify(domainName, sampleBase);\n+  }\n \n-    // run kubectl to create the domain\n-    params = new CommandParams().defaults();\n-    params.command(\"kubectl apply -f \"\n-        + Paths.get(sampleBase.toString(), \"weblogic-domains/\" + domainName + \"/domain.yaml\").toString());\n+  /**\n+   * Test domain in image samples using domains created by wlst and wdt.\n+   *\n+   * @param model domain name and script type to create domain. Acceptable values of format String:wlst|wdt\n+   */\n+  @Order(2)\n+  @ParameterizedTest\n+  @MethodSource(\"paramProvider\")\n+  @DisplayName(\"Test samples using domain in image\")\n+  public void testSampleDomainInImage(String model) {\n+    String domainName = model.split(\":\")[1];\n+    String script = model.split(\":\")[0];\n+    String imageName = (KIND_REPO != null\n+        ? KIND_REPO + diiImageNameBase + \"_\" + script + \":\" + diiImageTag\n+        : diiImageNameBase + \"_\" + script + \":\" + diiImageTag);\n \n-    result = Command.withParams(params).execute();\n-    assertTrue(result, \"Failed to create domain custom resource\");\n+    //copy the samples directory to a temporary location\n+    setupSample();\n \n-    // wait for the domain to exist\n-    logger.info(\"Checking for domain custom resource in namespace {0}\", domainNamespace);\n-    withStandardRetryPolicy\n-        .conditionEvaluationListener(\n-            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n-                + \"(elapsed time {2}ms, remaining time {3}ms)\",\n-                domainName,\n-                domainNamespace,\n-                condition.getElapsedTimeInMS(),\n-                condition.getRemainingTimeInMS()))\n-        .until(domainExists(domainName, DOMAIN_VERSION, domainNamespace));\n+    Path sampleBase = Paths.get(tempSamplePath.toString(), \"scripts/create-weblogic-domain/domain-home-in-image\");\n \n-    final String adminServerName = \"admin-server\";\n-    final String adminServerPodName = domainName + \"-\" + adminServerName;\n+    // update create-domain-inputs.yaml with the values from this test\n+    updateDomainInputsFile(domainName, sampleBase);\n \n-    final String managedServerNameBase = \"managed-server\";\n-    String managedServerPodNamePrefix = domainName + \"-\" + managedServerNameBase;\n-    int replicaCount = 2;\n+    // update domainHomeImageBase with right values in create-domain-inputs.yaml\n+    assertDoesNotThrow(() -> {\n+      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTMyNjUyMg=="}, "originalCommit": {"oid": "47586c9ebfa2dd732d7ea0794c152dd82c021ee4"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTIzNzc0OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/FileUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMToxMTo0MFrOHrgmsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMToyMDoxNFrOHrgyjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM4NTAwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                logger.info(\"Replacing {0}\", src.toString());\n          \n          \n            \n                logger.info(\"Replacing {0}\", regex);", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2016#discussion_r515385008", "createdAt": "2020-10-30T21:11:40Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/FileUtils.java", "diffHunk": "@@ -278,11 +278,11 @@ public static void replaceStringInFile(String filePath, String regex, String rep\n       throws IOException {\n     LoggingFacade logger = getLogger();\n     Path src = Paths.get(filePath);\n-    logger.info(\"Copying {0}\", src.toString());\n+    logger.info(\"Replacing {0}\", src.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0cd85abf0f92577f8d01340734bfcc7423f5395"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM4ODA0Nw==", "bodyText": "Oops, merged. I will remember this and change it later", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2016#discussion_r515388047", "createdAt": "2020-10-30T21:20:14Z", "author": {"login": "hzhao-github"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/FileUtils.java", "diffHunk": "@@ -278,11 +278,11 @@ public static void replaceStringInFile(String filePath, String regex, String rep\n       throws IOException {\n     LoggingFacade logger = getLogger();\n     Path src = Paths.get(filePath);\n-    logger.info(\"Copying {0}\", src.toString());\n+    logger.info(\"Replacing {0}\", src.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM4NTAwOA=="}, "originalCommit": {"oid": "d0cd85abf0f92577f8d01340734bfcc7423f5395"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3875, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}