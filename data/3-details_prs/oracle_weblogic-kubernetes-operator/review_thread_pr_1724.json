{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNzYyMjQy", "number": 1724, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDoxMDoyMFrOEEf8JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNjo0MDoyM1rOEGBYtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTUzMDYxOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItScaleMiiDomainNginx.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDoxMDoyMFrOGiKSuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDozMTozNFrOGiKozg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3MzQwMw==", "bodyText": "Missing javadoc for the usecase detail", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1724#discussion_r438473403", "createdAt": "2020-06-11T00:10:20Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItScaleMiiDomainNginx.java", "diffHunk": "@@ -196,19 +214,58 @@ public void testScaleClustersWithRestApi() {\n     }\n   }\n \n+  @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbd627871d9abd9212f3dd56a2b5677f69c7e945"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3OTA1NA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1724#discussion_r438479054", "createdAt": "2020-06-11T00:31:34Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItScaleMiiDomainNginx.java", "diffHunk": "@@ -196,19 +214,58 @@ public void testScaleClustersWithRestApi() {\n     }\n   }\n \n+  @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3MzQwMw=="}, "originalCommit": {"oid": "bbd627871d9abd9212f3dd56a2b5677f69c7e945"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTUzMTk4OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItScaleMiiDomainNginx.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDoxMTowNlrOGiKThw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDoyNDoyOFrOGiKhgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3MzYwNw==", "bodyText": "Remove TODO comment", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1724#discussion_r438473607", "createdAt": "2020-06-11T00:11:06Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItScaleMiiDomainNginx.java", "diffHunk": "@@ -196,19 +214,58 @@ public void testScaleClustersWithRestApi() {\n     }\n   }\n \n+  @Test\n+  @DisplayName(\"Verify scale each cluster of the domain by using WLDF policy\")\n+  public void testScaleClustersWithWLDF() {\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+\n+      String clusterName = CLUSTER_NAME_PREFIX + i;\n+      curlCmd = generateCurlCmd(clusterName, SAMPLE_APP_CONTEXT_ROOT);\n+\n+      // scale up the cluster by 1 server\n+      logger.info(\"Scaling cluster {0} of domain {1} in namespace {2} from {3} servers to {4} servers.\",\n+          clusterName, domainUid, domainNamespace, replicaCount, replicaCount + 1);\n+      List<String> managedServersBeforeScale = listManagedServersBeforeScale(clusterName, replicaCount);\n+      scaleClusterAndVerifyWithWLDF(clusterName, replicaCount, replicaCount + 1,\n+          managedServersBeforeScale, \"scaleUp\");\n+\n+      // scale down the cluster by 1 server\n+      logger.info(\"Scaling cluster {0} of domain {1} in namespace {2} from {3} servers to {4} servers.\",\n+          clusterName, domainUid, domainNamespace, replicaCount + 1, replicaCount);\n+      managedServersBeforeScale = listManagedServersBeforeScale(clusterName, replicaCount + 1);\n+      scaleClusterAndVerifyWithWLDF(clusterName, replicaCount + 1, replicaCount,\n+          managedServersBeforeScale, \"scaleDown\");\n+    }\n+  }\n+\n   /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbd627871d9abd9212f3dd56a2b5677f69c7e945"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3NjAwMQ==", "bodyText": "The TODO comment is added by Mark's request.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1724#discussion_r438476001", "createdAt": "2020-06-11T00:19:58Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItScaleMiiDomainNginx.java", "diffHunk": "@@ -196,19 +214,58 @@ public void testScaleClustersWithRestApi() {\n     }\n   }\n \n+  @Test\n+  @DisplayName(\"Verify scale each cluster of the domain by using WLDF policy\")\n+  public void testScaleClustersWithWLDF() {\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+\n+      String clusterName = CLUSTER_NAME_PREFIX + i;\n+      curlCmd = generateCurlCmd(clusterName, SAMPLE_APP_CONTEXT_ROOT);\n+\n+      // scale up the cluster by 1 server\n+      logger.info(\"Scaling cluster {0} of domain {1} in namespace {2} from {3} servers to {4} servers.\",\n+          clusterName, domainUid, domainNamespace, replicaCount, replicaCount + 1);\n+      List<String> managedServersBeforeScale = listManagedServersBeforeScale(clusterName, replicaCount);\n+      scaleClusterAndVerifyWithWLDF(clusterName, replicaCount, replicaCount + 1,\n+          managedServersBeforeScale, \"scaleUp\");\n+\n+      // scale down the cluster by 1 server\n+      logger.info(\"Scaling cluster {0} of domain {1} in namespace {2} from {3} servers to {4} servers.\",\n+          clusterName, domainUid, domainNamespace, replicaCount + 1, replicaCount);\n+      managedServersBeforeScale = listManagedServersBeforeScale(clusterName, replicaCount + 1);\n+      scaleClusterAndVerifyWithWLDF(clusterName, replicaCount + 1, replicaCount,\n+          managedServersBeforeScale, \"scaleDown\");\n+    }\n+  }\n+\n   /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3MzYwNw=="}, "originalCommit": {"oid": "bbd627871d9abd9212f3dd56a2b5677f69c7e945"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3Njc0NA==", "bodyText": "Refering to  \"TODO: remove this after Sankar's PR is merged \"   Sankar PR is merged long time back.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1724#discussion_r438476744", "createdAt": "2020-06-11T00:22:37Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItScaleMiiDomainNginx.java", "diffHunk": "@@ -196,19 +214,58 @@ public void testScaleClustersWithRestApi() {\n     }\n   }\n \n+  @Test\n+  @DisplayName(\"Verify scale each cluster of the domain by using WLDF policy\")\n+  public void testScaleClustersWithWLDF() {\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+\n+      String clusterName = CLUSTER_NAME_PREFIX + i;\n+      curlCmd = generateCurlCmd(clusterName, SAMPLE_APP_CONTEXT_ROOT);\n+\n+      // scale up the cluster by 1 server\n+      logger.info(\"Scaling cluster {0} of domain {1} in namespace {2} from {3} servers to {4} servers.\",\n+          clusterName, domainUid, domainNamespace, replicaCount, replicaCount + 1);\n+      List<String> managedServersBeforeScale = listManagedServersBeforeScale(clusterName, replicaCount);\n+      scaleClusterAndVerifyWithWLDF(clusterName, replicaCount, replicaCount + 1,\n+          managedServersBeforeScale, \"scaleUp\");\n+\n+      // scale down the cluster by 1 server\n+      logger.info(\"Scaling cluster {0} of domain {1} in namespace {2} from {3} servers to {4} servers.\",\n+          clusterName, domainUid, domainNamespace, replicaCount + 1, replicaCount);\n+      managedServersBeforeScale = listManagedServersBeforeScale(clusterName, replicaCount + 1);\n+      scaleClusterAndVerifyWithWLDF(clusterName, replicaCount + 1, replicaCount,\n+          managedServersBeforeScale, \"scaleDown\");\n+    }\n+  }\n+\n   /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3MzYwNw=="}, "originalCommit": {"oid": "bbd627871d9abd9212f3dd56a2b5677f69c7e945"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3NzE4Ng==", "bodyText": "Sankar's PR did not remove NGINX.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1724#discussion_r438477186", "createdAt": "2020-06-11T00:24:28Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItScaleMiiDomainNginx.java", "diffHunk": "@@ -196,19 +214,58 @@ public void testScaleClustersWithRestApi() {\n     }\n   }\n \n+  @Test\n+  @DisplayName(\"Verify scale each cluster of the domain by using WLDF policy\")\n+  public void testScaleClustersWithWLDF() {\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+\n+      String clusterName = CLUSTER_NAME_PREFIX + i;\n+      curlCmd = generateCurlCmd(clusterName, SAMPLE_APP_CONTEXT_ROOT);\n+\n+      // scale up the cluster by 1 server\n+      logger.info(\"Scaling cluster {0} of domain {1} in namespace {2} from {3} servers to {4} servers.\",\n+          clusterName, domainUid, domainNamespace, replicaCount, replicaCount + 1);\n+      List<String> managedServersBeforeScale = listManagedServersBeforeScale(clusterName, replicaCount);\n+      scaleClusterAndVerifyWithWLDF(clusterName, replicaCount, replicaCount + 1,\n+          managedServersBeforeScale, \"scaleUp\");\n+\n+      // scale down the cluster by 1 server\n+      logger.info(\"Scaling cluster {0} of domain {1} in namespace {2} from {3} servers to {4} servers.\",\n+          clusterName, domainUid, domainNamespace, replicaCount + 1, replicaCount);\n+      managedServersBeforeScale = listManagedServersBeforeScale(clusterName, replicaCount + 1);\n+      scaleClusterAndVerifyWithWLDF(clusterName, replicaCount + 1, replicaCount,\n+          managedServersBeforeScale, \"scaleDown\");\n+    }\n+  }\n+\n   /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3MzYwNw=="}, "originalCommit": {"oid": "bbd627871d9abd9212f3dd56a2b5677f69c7e945"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTUzNzQ1OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/resources/python-scripts/wldf.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDoxNDoxMlrOGiKW1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMDozMTo0NFrOGiKo8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3NDQ1NQ==", "bodyText": "Missing copyright Information", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1724#discussion_r438474455", "createdAt": "2020-06-11T00:14:12Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/resources/python-scripts/wldf.py", "diffHunk": "@@ -0,0 +1,96 @@\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbd627871d9abd9212f3dd56a2b5677f69c7e945"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3OTA4OA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1724#discussion_r438479088", "createdAt": "2020-06-11T00:31:44Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/resources/python-scripts/wldf.py", "diffHunk": "@@ -0,0 +1,96 @@\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ3NDQ1NQ=="}, "originalCommit": {"oid": "bbd627871d9abd9212f3dd56a2b5677f69c7e945"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODM5ODA1OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItScaleMiiDomainNginx.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODozMjoxN1rOGjN6OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODo1MDo0N1rOGjOaDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4MTI0MA==", "bodyText": "Does this work to use 0 for the nodePort? My expectation is that Kubernetes will fill in the port on the NodePort-type Service. But the introspector won't know what port will be filled in...  Or, asked another way, this might work for HTTP, but won't work for T3.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1724#discussion_r439581240", "createdAt": "2020-06-12T18:32:17Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItScaleMiiDomainNginx.java", "diffHunk": "@@ -275,7 +340,11 @@ private static void createMiiDomainWithMultiClusters() {\n                     .name(\"USER_MEM_ARGS\")\n                     .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n             .adminServer(new AdminServer()\n-                .serverStartState(\"RUNNING\"))\n+                .serverStartState(\"RUNNING\")\n+                .adminService(new AdminService()\n+                    .addChannelsItem(new Channel()\n+                        .channelName(\"default\")\n+                        .nodePort(0))))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06b6fc6c6497c7a0680da21e7372c3f2ea579ccc"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4OTM5MA==", "bodyText": "This is not for t3. It is not used in the test. It is just for debugging purpose for me to connect to the admin console. I can remove this channel.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1724#discussion_r439589390", "createdAt": "2020-06-12T18:50:47Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItScaleMiiDomainNginx.java", "diffHunk": "@@ -275,7 +340,11 @@ private static void createMiiDomainWithMultiClusters() {\n                     .name(\"USER_MEM_ARGS\")\n                     .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n             .adminServer(new AdminServer()\n-                .serverStartState(\"RUNNING\"))\n+                .serverStartState(\"RUNNING\")\n+                .adminService(new AdminService()\n+                    .addChannelsItem(new Channel()\n+                        .channelName(\"default\")\n+                        .nodePort(0))))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4MTI0MA=="}, "originalCommit": {"oid": "06b6fc6c6497c7a0680da21e7372c3f2ea579ccc"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODQwNjY5OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Domain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODozNTozMVrOGjN_zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODo1MTozMlrOGjObbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4MjY2OQ==", "bodyText": "This feels like it is working around a bug. Why do we have to copy a script to the admin pod?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1724#discussion_r439582669", "createdAt": "2020-06-12T18:35:31Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Domain.java", "diffHunk": "@@ -292,4 +324,231 @@ public static boolean scaleClusterWithRestApi(String domainUid,\n \n     return Command.withParams(params).execute();\n   }\n+\n+  /**\n+   * Scale the cluster of the domain in the specified namespace with WLDF.\n+   *\n+   * @param clusterName name of the WebLogic cluster to be scaled in the domain\n+   * @param domainUid domainUid of the domain to be scaled\n+   * @param domainNamespace domain namespace in which the domain exists\n+   * @param domainHomeLocation domain home location of the domain\n+   * @param scalingAction scaling action, accepted value: scaleUp or scaleDown\n+   * @param scalingSize number of servers to be scaled up or down\n+   * @param opNamespace namespace of WebLogic operator\n+   * @param opServiceAccount service account of operator\n+   * @param myWebAppName web app name deployed to the domain used in the WLDF policy expression\n+   * @param curlCommand curl command to call the web app used in the WLDF policy expression\n+   * @return true if scaling the cluster succeeds, false otherwise\n+   * @throws ApiException if Kubernetes client API call fails\n+   * @throws IOException if an I/O error occurs\n+   * @throws InterruptedException if any thread has interrupted the current thread\n+   */\n+  public static boolean scaleClusterWithWLDF(String clusterName,\n+                                             String domainUid,\n+                                             String domainNamespace,\n+                                             String domainHomeLocation,\n+                                             String scalingAction,\n+                                             int scalingSize,\n+                                             String opNamespace,\n+                                             String opServiceAccount,\n+                                             String myWebAppName,\n+                                             String curlCommand)\n+      throws ApiException, IOException, InterruptedException {\n+\n+    // create RBAC API objects for WLDF script\n+    logger.info(\"Creating RBAC API objects for WLDF script\");\n+    if (!createRbacApiObjectsForWLDFScript(domainNamespace, opNamespace)) {\n+      return false;\n+    }\n+\n+    // copy scalingAction.sh to Admin Server pod\n+    // NOTE: you must copy scalingAction.sh to $DOMAIN_HOME/bin/scripts on admin server pod\n+    String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+    V1Pod adminPod = Kubernetes.getPod(domainNamespace, null, adminServerPodName);\n+    if (adminPod == null) {\n+      logger.info(\"The admin pod {0} does not exist in namespace {1}!\", adminServerPodName, domainNamespace);\n+      return false;\n+    }\n+\n+    // create $DOMAIN_HOME/bin/scripts directory on admin server pod\n+    logger.info(\"Creating directory {0}/bin/scripts on admin server pod\", domainHomeLocation);\n+    ExecResult result = exec(adminPod, null, true,\n+        \"/bin/sh\", \"-c\", \"mkdir -p \" + domainHomeLocation + \"/bin/scripts\");\n+    if (result.exitValue() != 0) {\n+      return false;\n+    }\n+\n+    logger.info(\"Copying scalingAction.sh to admin server pod\");\n+    try {\n+      copyFileToPod(domainNamespace, adminServerPodName, null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06b6fc6c6497c7a0680da21e7372c3f2ea579ccc"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4OTc0Mg==", "bodyText": "From the doc: https://oracle.github.io/weblogic-kubernetes-operator/userguide/managing-domains/domain-lifecycle/scaling/#using-a-wldf-policy-rule-and-script-action-to-call-the-operators-rest-scale-api\nThis is required to copy scalingAction.sh to admin server pod.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1724#discussion_r439589742", "createdAt": "2020-06-12T18:51:32Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Domain.java", "diffHunk": "@@ -292,4 +324,231 @@ public static boolean scaleClusterWithRestApi(String domainUid,\n \n     return Command.withParams(params).execute();\n   }\n+\n+  /**\n+   * Scale the cluster of the domain in the specified namespace with WLDF.\n+   *\n+   * @param clusterName name of the WebLogic cluster to be scaled in the domain\n+   * @param domainUid domainUid of the domain to be scaled\n+   * @param domainNamespace domain namespace in which the domain exists\n+   * @param domainHomeLocation domain home location of the domain\n+   * @param scalingAction scaling action, accepted value: scaleUp or scaleDown\n+   * @param scalingSize number of servers to be scaled up or down\n+   * @param opNamespace namespace of WebLogic operator\n+   * @param opServiceAccount service account of operator\n+   * @param myWebAppName web app name deployed to the domain used in the WLDF policy expression\n+   * @param curlCommand curl command to call the web app used in the WLDF policy expression\n+   * @return true if scaling the cluster succeeds, false otherwise\n+   * @throws ApiException if Kubernetes client API call fails\n+   * @throws IOException if an I/O error occurs\n+   * @throws InterruptedException if any thread has interrupted the current thread\n+   */\n+  public static boolean scaleClusterWithWLDF(String clusterName,\n+                                             String domainUid,\n+                                             String domainNamespace,\n+                                             String domainHomeLocation,\n+                                             String scalingAction,\n+                                             int scalingSize,\n+                                             String opNamespace,\n+                                             String opServiceAccount,\n+                                             String myWebAppName,\n+                                             String curlCommand)\n+      throws ApiException, IOException, InterruptedException {\n+\n+    // create RBAC API objects for WLDF script\n+    logger.info(\"Creating RBAC API objects for WLDF script\");\n+    if (!createRbacApiObjectsForWLDFScript(domainNamespace, opNamespace)) {\n+      return false;\n+    }\n+\n+    // copy scalingAction.sh to Admin Server pod\n+    // NOTE: you must copy scalingAction.sh to $DOMAIN_HOME/bin/scripts on admin server pod\n+    String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+    V1Pod adminPod = Kubernetes.getPod(domainNamespace, null, adminServerPodName);\n+    if (adminPod == null) {\n+      logger.info(\"The admin pod {0} does not exist in namespace {1}!\", adminServerPodName, domainNamespace);\n+      return false;\n+    }\n+\n+    // create $DOMAIN_HOME/bin/scripts directory on admin server pod\n+    logger.info(\"Creating directory {0}/bin/scripts on admin server pod\", domainHomeLocation);\n+    ExecResult result = exec(adminPod, null, true,\n+        \"/bin/sh\", \"-c\", \"mkdir -p \" + domainHomeLocation + \"/bin/scripts\");\n+    if (result.exitValue() != 0) {\n+      return false;\n+    }\n+\n+    logger.info(\"Copying scalingAction.sh to admin server pod\");\n+    try {\n+      copyFileToPod(domainNamespace, adminServerPodName, null,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4MjY2OQ=="}, "originalCommit": {"oid": "06b6fc6c6497c7a0680da21e7372c3f2ea579ccc"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODQwOTcxOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Domain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODozNjo0MFrOGjOB1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODo1Njo1MFrOGjOkhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4MzE4OA==", "bodyText": "I don't understand the flow here. Why are we exec'ing a scaling action and then also calling a wldf script? I don't understand the use case being tested.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1724#discussion_r439583188", "createdAt": "2020-06-12T18:36:40Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Domain.java", "diffHunk": "@@ -292,4 +324,231 @@ public static boolean scaleClusterWithRestApi(String domainUid,\n \n     return Command.withParams(params).execute();\n   }\n+\n+  /**\n+   * Scale the cluster of the domain in the specified namespace with WLDF.\n+   *\n+   * @param clusterName name of the WebLogic cluster to be scaled in the domain\n+   * @param domainUid domainUid of the domain to be scaled\n+   * @param domainNamespace domain namespace in which the domain exists\n+   * @param domainHomeLocation domain home location of the domain\n+   * @param scalingAction scaling action, accepted value: scaleUp or scaleDown\n+   * @param scalingSize number of servers to be scaled up or down\n+   * @param opNamespace namespace of WebLogic operator\n+   * @param opServiceAccount service account of operator\n+   * @param myWebAppName web app name deployed to the domain used in the WLDF policy expression\n+   * @param curlCommand curl command to call the web app used in the WLDF policy expression\n+   * @return true if scaling the cluster succeeds, false otherwise\n+   * @throws ApiException if Kubernetes client API call fails\n+   * @throws IOException if an I/O error occurs\n+   * @throws InterruptedException if any thread has interrupted the current thread\n+   */\n+  public static boolean scaleClusterWithWLDF(String clusterName,\n+                                             String domainUid,\n+                                             String domainNamespace,\n+                                             String domainHomeLocation,\n+                                             String scalingAction,\n+                                             int scalingSize,\n+                                             String opNamespace,\n+                                             String opServiceAccount,\n+                                             String myWebAppName,\n+                                             String curlCommand)\n+      throws ApiException, IOException, InterruptedException {\n+\n+    // create RBAC API objects for WLDF script\n+    logger.info(\"Creating RBAC API objects for WLDF script\");\n+    if (!createRbacApiObjectsForWLDFScript(domainNamespace, opNamespace)) {\n+      return false;\n+    }\n+\n+    // copy scalingAction.sh to Admin Server pod\n+    // NOTE: you must copy scalingAction.sh to $DOMAIN_HOME/bin/scripts on admin server pod\n+    String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+    V1Pod adminPod = Kubernetes.getPod(domainNamespace, null, adminServerPodName);\n+    if (adminPod == null) {\n+      logger.info(\"The admin pod {0} does not exist in namespace {1}!\", adminServerPodName, domainNamespace);\n+      return false;\n+    }\n+\n+    // create $DOMAIN_HOME/bin/scripts directory on admin server pod\n+    logger.info(\"Creating directory {0}/bin/scripts on admin server pod\", domainHomeLocation);\n+    ExecResult result = exec(adminPod, null, true,\n+        \"/bin/sh\", \"-c\", \"mkdir -p \" + domainHomeLocation + \"/bin/scripts\");\n+    if (result.exitValue() != 0) {\n+      return false;\n+    }\n+\n+    logger.info(\"Copying scalingAction.sh to admin server pod\");\n+    try {\n+      copyFileToPod(domainNamespace, adminServerPodName, null,\n+          Paths.get(PROJECT_ROOT + \"/../src/scripts/scaling/scalingAction.sh\"),\n+          Paths.get(domainHomeLocation + \"/bin/scripts/scalingAction.sh\"));\n+    } catch (ApiException apex) {\n+      logger.severe(\"Got ApiException while copying file to admin pod {0}\", apex.getResponseBody());\n+      return false;\n+    } catch (IOException ioex) {\n+      logger.severe(\"Got IOException while copying file to admin pod {0}\", ioex.getStackTrace());\n+      return false;\n+    }\n+\n+    logger.info(\"Adding execute mode for scalingAction.sh\");\n+    result = exec(adminPod, null, true,\n+        \"/bin/sh\", \"-c\", \"chmod +x \" + domainHomeLocation + \"/bin/scripts/scalingAction.sh\");\n+    if (result.exitValue() != 0) {\n+      return false;\n+    }\n+\n+    // copy wldf.py and callpyscript.sh to Admin Server pod\n+    logger.info(\"Copying wldf.py and callpyscript.sh to admin server pod\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06b6fc6c6497c7a0680da21e7372c3f2ea579ccc"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU5MjA3MQ==", "bodyText": "We need to create WLDF policy rule and action through wlst. wldf.py is to create the WLDF Policy rule and set the script action to call scalingAction.sh.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1724#discussion_r439592071", "createdAt": "2020-06-12T18:56:50Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Domain.java", "diffHunk": "@@ -292,4 +324,231 @@ public static boolean scaleClusterWithRestApi(String domainUid,\n \n     return Command.withParams(params).execute();\n   }\n+\n+  /**\n+   * Scale the cluster of the domain in the specified namespace with WLDF.\n+   *\n+   * @param clusterName name of the WebLogic cluster to be scaled in the domain\n+   * @param domainUid domainUid of the domain to be scaled\n+   * @param domainNamespace domain namespace in which the domain exists\n+   * @param domainHomeLocation domain home location of the domain\n+   * @param scalingAction scaling action, accepted value: scaleUp or scaleDown\n+   * @param scalingSize number of servers to be scaled up or down\n+   * @param opNamespace namespace of WebLogic operator\n+   * @param opServiceAccount service account of operator\n+   * @param myWebAppName web app name deployed to the domain used in the WLDF policy expression\n+   * @param curlCommand curl command to call the web app used in the WLDF policy expression\n+   * @return true if scaling the cluster succeeds, false otherwise\n+   * @throws ApiException if Kubernetes client API call fails\n+   * @throws IOException if an I/O error occurs\n+   * @throws InterruptedException if any thread has interrupted the current thread\n+   */\n+  public static boolean scaleClusterWithWLDF(String clusterName,\n+                                             String domainUid,\n+                                             String domainNamespace,\n+                                             String domainHomeLocation,\n+                                             String scalingAction,\n+                                             int scalingSize,\n+                                             String opNamespace,\n+                                             String opServiceAccount,\n+                                             String myWebAppName,\n+                                             String curlCommand)\n+      throws ApiException, IOException, InterruptedException {\n+\n+    // create RBAC API objects for WLDF script\n+    logger.info(\"Creating RBAC API objects for WLDF script\");\n+    if (!createRbacApiObjectsForWLDFScript(domainNamespace, opNamespace)) {\n+      return false;\n+    }\n+\n+    // copy scalingAction.sh to Admin Server pod\n+    // NOTE: you must copy scalingAction.sh to $DOMAIN_HOME/bin/scripts on admin server pod\n+    String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+    V1Pod adminPod = Kubernetes.getPod(domainNamespace, null, adminServerPodName);\n+    if (adminPod == null) {\n+      logger.info(\"The admin pod {0} does not exist in namespace {1}!\", adminServerPodName, domainNamespace);\n+      return false;\n+    }\n+\n+    // create $DOMAIN_HOME/bin/scripts directory on admin server pod\n+    logger.info(\"Creating directory {0}/bin/scripts on admin server pod\", domainHomeLocation);\n+    ExecResult result = exec(adminPod, null, true,\n+        \"/bin/sh\", \"-c\", \"mkdir -p \" + domainHomeLocation + \"/bin/scripts\");\n+    if (result.exitValue() != 0) {\n+      return false;\n+    }\n+\n+    logger.info(\"Copying scalingAction.sh to admin server pod\");\n+    try {\n+      copyFileToPod(domainNamespace, adminServerPodName, null,\n+          Paths.get(PROJECT_ROOT + \"/../src/scripts/scaling/scalingAction.sh\"),\n+          Paths.get(domainHomeLocation + \"/bin/scripts/scalingAction.sh\"));\n+    } catch (ApiException apex) {\n+      logger.severe(\"Got ApiException while copying file to admin pod {0}\", apex.getResponseBody());\n+      return false;\n+    } catch (IOException ioex) {\n+      logger.severe(\"Got IOException while copying file to admin pod {0}\", ioex.getStackTrace());\n+      return false;\n+    }\n+\n+    logger.info(\"Adding execute mode for scalingAction.sh\");\n+    result = exec(adminPod, null, true,\n+        \"/bin/sh\", \"-c\", \"chmod +x \" + domainHomeLocation + \"/bin/scripts/scalingAction.sh\");\n+    if (result.exitValue() != 0) {\n+      return false;\n+    }\n+\n+    // copy wldf.py and callpyscript.sh to Admin Server pod\n+    logger.info(\"Copying wldf.py and callpyscript.sh to admin server pod\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4MzE4OA=="}, "originalCommit": {"oid": "06b6fc6c6497c7a0680da21e7372c3f2ea579ccc"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODkxNDc2OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMjoyMToxMFrOGjTASQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQyMjozMTo0N1rOGjTJ_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY2NDcxMw==", "bodyText": "why do we need to generate zip for each app if multiple app names are provided? it will zip all of them into one zip file with name of first provided app name dir.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1724#discussion_r439664713", "createdAt": "2020-06-12T22:21:10Z", "author": {"login": "marinakog"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "diffHunk": "@@ -628,29 +631,41 @@ public static String createMiiImageAndVerify(String miiImageNameBase,\n \n       if (archiveAppsList.size() != 0 && archiveAppsList.get(0) != null) {\n         assertTrue(archiveApp(defaultAppParams()\n-                .srcDirList(archiveAppsList)));\n+            .srcDirList(archiveAppsList)));\n         //archive provided ear or war file\n         String appName = archiveAppsList.get(0).substring(archiveAppsList.get(0).lastIndexOf(\"/\") + 1,\n-                appSrcDirList.get(0).lastIndexOf(\".\"));\n+            appSrcDirList.get(0).lastIndexOf(\".\"));\n \n         // build the archive list\n         String zipAppFile = String.format(\"%s/%s.zip\", ARCHIVE_DIR, appName);\n         archiveList.add(zipAppFile);\n \n       }\n+\n       if (buildAppDirList.size() != 0 && buildAppDirList.get(0) != null) {\n         // build an application archive using what is in resources/apps/APP_NAME\n-        assertTrue(buildAppArchive(defaultAppParams()\n-                        .srcDirList(buildAppDirList)),\n-                String.format(\"Failed to create app archive for %s\", buildAppDirList.get(0)));\n-\n-        // build the archive list\n-        String zipFile = String.format(\"%s/%s.zip\", ARCHIVE_DIR, buildAppDirList.get(0));\n-        archiveList.add(zipFile);\n+        String zipFile = \"\";\n+        if (oneArchiveContainsMultiApps) {\n+          assertTrue(buildAppArchive(defaultAppParams()\n+                  .srcDirList(buildAppDirList)),\n+              String.format(\"Failed to create app archive for %s\", buildAppDirList.get(0)));\n+          zipFile = String.format(\"%s/%s.zip\", ARCHIVE_DIR, buildAppDirList.get(0));\n+          // build the archive list\n+          archiveList.add(zipFile);\n+        } else {\n+          for (String appName : buildAppDirList) {\n+            assertTrue(buildAppArchive(defaultAppParams()\n+                    .srcDirList(Collections.singletonList(appName))\n+                    .appName(appName)),\n+                String.format(\"Failed to create app archive for %s\", appName));\n+            zipFile = String.format(\"%s/%s.zip\", ARCHIVE_DIR, appName);\n+            // build the archive list\n+            archiveList.add(zipFile);\n+          }\n+        }\n       }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebc9ac7d3af6647d9a9b1e6d3bfcf4e21caed56f"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY2NzE5Ng==", "bodyText": "I need each app has one ear file. In the current logic in develop branch, it will build the multiple apps in one ear file. It will not work for me.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1724#discussion_r439667196", "createdAt": "2020-06-12T22:31:47Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "diffHunk": "@@ -628,29 +631,41 @@ public static String createMiiImageAndVerify(String miiImageNameBase,\n \n       if (archiveAppsList.size() != 0 && archiveAppsList.get(0) != null) {\n         assertTrue(archiveApp(defaultAppParams()\n-                .srcDirList(archiveAppsList)));\n+            .srcDirList(archiveAppsList)));\n         //archive provided ear or war file\n         String appName = archiveAppsList.get(0).substring(archiveAppsList.get(0).lastIndexOf(\"/\") + 1,\n-                appSrcDirList.get(0).lastIndexOf(\".\"));\n+            appSrcDirList.get(0).lastIndexOf(\".\"));\n \n         // build the archive list\n         String zipAppFile = String.format(\"%s/%s.zip\", ARCHIVE_DIR, appName);\n         archiveList.add(zipAppFile);\n \n       }\n+\n       if (buildAppDirList.size() != 0 && buildAppDirList.get(0) != null) {\n         // build an application archive using what is in resources/apps/APP_NAME\n-        assertTrue(buildAppArchive(defaultAppParams()\n-                        .srcDirList(buildAppDirList)),\n-                String.format(\"Failed to create app archive for %s\", buildAppDirList.get(0)));\n-\n-        // build the archive list\n-        String zipFile = String.format(\"%s/%s.zip\", ARCHIVE_DIR, buildAppDirList.get(0));\n-        archiveList.add(zipFile);\n+        String zipFile = \"\";\n+        if (oneArchiveContainsMultiApps) {\n+          assertTrue(buildAppArchive(defaultAppParams()\n+                  .srcDirList(buildAppDirList)),\n+              String.format(\"Failed to create app archive for %s\", buildAppDirList.get(0)));\n+          zipFile = String.format(\"%s/%s.zip\", ARCHIVE_DIR, buildAppDirList.get(0));\n+          // build the archive list\n+          archiveList.add(zipFile);\n+        } else {\n+          for (String appName : buildAppDirList) {\n+            assertTrue(buildAppArchive(defaultAppParams()\n+                    .srcDirList(Collections.singletonList(appName))\n+                    .appName(appName)),\n+                String.format(\"Failed to create app archive for %s\", appName));\n+            zipFile = String.format(\"%s/%s.zip\", ARCHIVE_DIR, appName);\n+            // build the archive list\n+            archiveList.add(zipFile);\n+          }\n+        }\n       }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY2NDcxMw=="}, "originalCommit": {"oid": "ebc9ac7d3af6647d9a9b1e6d3bfcf4e21caed56f"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzQ2Mjk3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNjozMjozNVrOGkjt9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzoxMTowMlrOGklLiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk4NzEyNA==", "bodyText": "do we still need this?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1724#discussion_r440987124", "createdAt": "2020-06-16T16:32:35Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -130,6 +130,11 @@\n     try {\n       Configuration.setDefaultApiClient(ClientBuilder.defaultClient());\n       apiClient = Configuration.getDefaultApiClient();\n+      // disable connection and read write timeout to force the internal HTTP client\n+      // to keep a long running connection with the server to fix SSL connection closed issue\n+      apiClient.setConnectTimeout(0);\n+      apiClient.setReadTimeout(0);\n+      apiClient.setWriteTimeout(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebc9ac7d3af6647d9a9b1e6d3bfcf4e21caed56f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxMTA4MQ==", "bodyText": "we don't have solution yet.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1724#discussion_r441011081", "createdAt": "2020-06-16T17:11:02Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -130,6 +130,11 @@\n     try {\n       Configuration.setDefaultApiClient(ClientBuilder.defaultClient());\n       apiClient = Configuration.getDefaultApiClient();\n+      // disable connection and read write timeout to force the internal HTTP client\n+      // to keep a long running connection with the server to fix SSL connection closed issue\n+      apiClient.setConnectTimeout(0);\n+      apiClient.setReadTimeout(0);\n+      apiClient.setWriteTimeout(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk4NzEyNA=="}, "originalCommit": {"oid": "ebc9ac7d3af6647d9a9b1e6d3bfcf4e21caed56f"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzQ5NjIxOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Domain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNjo0MDoyM1rOGkkDKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzozMTowOFrOGkl6OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk5MjU1NQ==", "bodyText": "Why not use the WLSTUtils.executeWLSTScript(...)?\nYou don't need to use a intermediate script like callpyscript.sh if you use above", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1724#discussion_r440992555", "createdAt": "2020-06-16T16:40:23Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Domain.java", "diffHunk": "@@ -292,4 +324,231 @@ public static boolean scaleClusterWithRestApi(String domainUid,\n \n     return Command.withParams(params).execute();\n   }\n+\n+  /**\n+   * Scale the cluster of the domain in the specified namespace with WLDF.\n+   *\n+   * @param clusterName name of the WebLogic cluster to be scaled in the domain\n+   * @param domainUid domainUid of the domain to be scaled\n+   * @param domainNamespace domain namespace in which the domain exists\n+   * @param domainHomeLocation domain home location of the domain\n+   * @param scalingAction scaling action, accepted value: scaleUp or scaleDown\n+   * @param scalingSize number of servers to be scaled up or down\n+   * @param opNamespace namespace of WebLogic operator\n+   * @param opServiceAccount service account of operator\n+   * @param myWebAppName web app name deployed to the domain used in the WLDF policy expression\n+   * @param curlCommand curl command to call the web app used in the WLDF policy expression\n+   * @return true if scaling the cluster succeeds, false otherwise\n+   * @throws ApiException if Kubernetes client API call fails\n+   * @throws IOException if an I/O error occurs\n+   * @throws InterruptedException if any thread has interrupted the current thread\n+   */\n+  public static boolean scaleClusterWithWLDF(String clusterName,\n+                                             String domainUid,\n+                                             String domainNamespace,\n+                                             String domainHomeLocation,\n+                                             String scalingAction,\n+                                             int scalingSize,\n+                                             String opNamespace,\n+                                             String opServiceAccount,\n+                                             String myWebAppName,\n+                                             String curlCommand)\n+      throws ApiException, IOException, InterruptedException {\n+\n+    // create RBAC API objects for WLDF script\n+    logger.info(\"Creating RBAC API objects for WLDF script\");\n+    if (!createRbacApiObjectsForWLDFScript(domainNamespace, opNamespace)) {\n+      return false;\n+    }\n+\n+    // copy scalingAction.sh to Admin Server pod\n+    // NOTE: you must copy scalingAction.sh to $DOMAIN_HOME/bin/scripts on admin server pod\n+    String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+    V1Pod adminPod = Kubernetes.getPod(domainNamespace, null, adminServerPodName);\n+    if (adminPod == null) {\n+      logger.info(\"The admin pod {0} does not exist in namespace {1}!\", adminServerPodName, domainNamespace);\n+      return false;\n+    }\n+\n+    // create $DOMAIN_HOME/bin/scripts directory on admin server pod\n+    logger.info(\"Creating directory {0}/bin/scripts on admin server pod\", domainHomeLocation);\n+    ExecResult result = exec(adminPod, null, true,\n+        \"/bin/sh\", \"-c\", \"mkdir -p \" + domainHomeLocation + \"/bin/scripts\");\n+    if (result.exitValue() != 0) {\n+      return false;\n+    }\n+\n+    logger.info(\"Copying scalingAction.sh to admin server pod\");\n+    try {\n+      copyFileToPod(domainNamespace, adminServerPodName, null,\n+          Paths.get(PROJECT_ROOT + \"/../src/scripts/scaling/scalingAction.sh\"),\n+          Paths.get(domainHomeLocation + \"/bin/scripts/scalingAction.sh\"));\n+    } catch (ApiException apex) {\n+      logger.severe(\"Got ApiException while copying file to admin pod {0}\", apex.getResponseBody());\n+      return false;\n+    } catch (IOException ioex) {\n+      logger.severe(\"Got IOException while copying file to admin pod {0}\", ioex.getStackTrace());\n+      return false;\n+    }\n+\n+    logger.info(\"Adding execute mode for scalingAction.sh\");\n+    result = exec(adminPod, null, true,\n+        \"/bin/sh\", \"-c\", \"chmod +x \" + domainHomeLocation + \"/bin/scripts/scalingAction.sh\");\n+    if (result.exitValue() != 0) {\n+      return false;\n+    }\n+\n+    // copy wldf.py and callpyscript.sh to Admin Server pod\n+    logger.info(\"Copying wldf.py and callpyscript.sh to admin server pod\");\n+    try {\n+      copyFileToPod(domainNamespace, adminServerPodName, null,\n+          Paths.get(RESOURCE_DIR, \"python-scripts\", \"wldf.py\"),\n+          Paths.get(\"/u01/oracle/wldf.py\"));\n+\n+      copyFileToPod(domainNamespace, adminServerPodName, null,\n+          Paths.get(RESOURCE_DIR, \"bash-scripts\", \"callpyscript.sh\"),\n+          Paths.get(\"/u01/oracle/callpyscript.sh\"));\n+    } catch (ApiException apex) {\n+      logger.severe(\"Got ApiException while copying file to admin pod {0}\", apex.getResponseBody());\n+      return false;\n+    } catch (IOException ioex) {\n+      logger.severe(\"Got IOException while copying file to admin pod {0}\", ioex.getStackTrace());\n+      return false;\n+    }\n+\n+    logger.info(\"Adding execute mode for callpyscript.sh\");\n+    result = exec(adminPod, null, true,\n+        \"/bin/sh\", \"-c\", \"chmod +x /u01/oracle/callpyscript.sh\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebc9ac7d3af6647d9a9b1e6d3bfcf4e21caed56f"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAyMzAzMg==", "bodyText": "in wild.py, we need to get something environment variables like KUBERNETES_SERVICE_HOST, INTERNAL_OPERATOR_CERT from the admin pod. I tried to use  WLSTUtils.executeWLSTScript(...) but I can not get those environment variables.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1724#discussion_r441023032", "createdAt": "2020-06-16T17:31:08Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Domain.java", "diffHunk": "@@ -292,4 +324,231 @@ public static boolean scaleClusterWithRestApi(String domainUid,\n \n     return Command.withParams(params).execute();\n   }\n+\n+  /**\n+   * Scale the cluster of the domain in the specified namespace with WLDF.\n+   *\n+   * @param clusterName name of the WebLogic cluster to be scaled in the domain\n+   * @param domainUid domainUid of the domain to be scaled\n+   * @param domainNamespace domain namespace in which the domain exists\n+   * @param domainHomeLocation domain home location of the domain\n+   * @param scalingAction scaling action, accepted value: scaleUp or scaleDown\n+   * @param scalingSize number of servers to be scaled up or down\n+   * @param opNamespace namespace of WebLogic operator\n+   * @param opServiceAccount service account of operator\n+   * @param myWebAppName web app name deployed to the domain used in the WLDF policy expression\n+   * @param curlCommand curl command to call the web app used in the WLDF policy expression\n+   * @return true if scaling the cluster succeeds, false otherwise\n+   * @throws ApiException if Kubernetes client API call fails\n+   * @throws IOException if an I/O error occurs\n+   * @throws InterruptedException if any thread has interrupted the current thread\n+   */\n+  public static boolean scaleClusterWithWLDF(String clusterName,\n+                                             String domainUid,\n+                                             String domainNamespace,\n+                                             String domainHomeLocation,\n+                                             String scalingAction,\n+                                             int scalingSize,\n+                                             String opNamespace,\n+                                             String opServiceAccount,\n+                                             String myWebAppName,\n+                                             String curlCommand)\n+      throws ApiException, IOException, InterruptedException {\n+\n+    // create RBAC API objects for WLDF script\n+    logger.info(\"Creating RBAC API objects for WLDF script\");\n+    if (!createRbacApiObjectsForWLDFScript(domainNamespace, opNamespace)) {\n+      return false;\n+    }\n+\n+    // copy scalingAction.sh to Admin Server pod\n+    // NOTE: you must copy scalingAction.sh to $DOMAIN_HOME/bin/scripts on admin server pod\n+    String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+    V1Pod adminPod = Kubernetes.getPod(domainNamespace, null, adminServerPodName);\n+    if (adminPod == null) {\n+      logger.info(\"The admin pod {0} does not exist in namespace {1}!\", adminServerPodName, domainNamespace);\n+      return false;\n+    }\n+\n+    // create $DOMAIN_HOME/bin/scripts directory on admin server pod\n+    logger.info(\"Creating directory {0}/bin/scripts on admin server pod\", domainHomeLocation);\n+    ExecResult result = exec(adminPod, null, true,\n+        \"/bin/sh\", \"-c\", \"mkdir -p \" + domainHomeLocation + \"/bin/scripts\");\n+    if (result.exitValue() != 0) {\n+      return false;\n+    }\n+\n+    logger.info(\"Copying scalingAction.sh to admin server pod\");\n+    try {\n+      copyFileToPod(domainNamespace, adminServerPodName, null,\n+          Paths.get(PROJECT_ROOT + \"/../src/scripts/scaling/scalingAction.sh\"),\n+          Paths.get(domainHomeLocation + \"/bin/scripts/scalingAction.sh\"));\n+    } catch (ApiException apex) {\n+      logger.severe(\"Got ApiException while copying file to admin pod {0}\", apex.getResponseBody());\n+      return false;\n+    } catch (IOException ioex) {\n+      logger.severe(\"Got IOException while copying file to admin pod {0}\", ioex.getStackTrace());\n+      return false;\n+    }\n+\n+    logger.info(\"Adding execute mode for scalingAction.sh\");\n+    result = exec(adminPod, null, true,\n+        \"/bin/sh\", \"-c\", \"chmod +x \" + domainHomeLocation + \"/bin/scripts/scalingAction.sh\");\n+    if (result.exitValue() != 0) {\n+      return false;\n+    }\n+\n+    // copy wldf.py and callpyscript.sh to Admin Server pod\n+    logger.info(\"Copying wldf.py and callpyscript.sh to admin server pod\");\n+    try {\n+      copyFileToPod(domainNamespace, adminServerPodName, null,\n+          Paths.get(RESOURCE_DIR, \"python-scripts\", \"wldf.py\"),\n+          Paths.get(\"/u01/oracle/wldf.py\"));\n+\n+      copyFileToPod(domainNamespace, adminServerPodName, null,\n+          Paths.get(RESOURCE_DIR, \"bash-scripts\", \"callpyscript.sh\"),\n+          Paths.get(\"/u01/oracle/callpyscript.sh\"));\n+    } catch (ApiException apex) {\n+      logger.severe(\"Got ApiException while copying file to admin pod {0}\", apex.getResponseBody());\n+      return false;\n+    } catch (IOException ioex) {\n+      logger.severe(\"Got IOException while copying file to admin pod {0}\", ioex.getStackTrace());\n+      return false;\n+    }\n+\n+    logger.info(\"Adding execute mode for callpyscript.sh\");\n+    result = exec(adminPod, null, true,\n+        \"/bin/sh\", \"-c\", \"chmod +x /u01/oracle/callpyscript.sh\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk5MjU1NQ=="}, "originalCommit": {"oid": "ebc9ac7d3af6647d9a9b1e6d3bfcf4e21caed56f"}, "originalPosition": 150}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4321, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}