{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1NjMyNjA5", "number": 1961, "title": "Add a testcase for -wdtModelHome option to the imagetool", "bodyText": "Added a  test case to use Image Tool's new --wdtModelHome to specify a custom location in the image, instead of the default location /u01/wdt/models, for the WDT model files.\nThe test does the following\n\n\nExtended the WebLogicImageTool action to\na) add a new parameter wdtModelHome, to specify the desired wdt model home\nb) add --wdtModelHome option in the WIT command line to pass the location to WIT.\n\n\nAdded a test case that\na) uses the new --wdtModelHome option to create an image where the wdt models are in a custom location.\nb) creates a domain resource that sets spec.configuration.model.modelHome to the custom location that is specified in 2.a).\nc) creates the domain resource and verify the server pods are created according to the spec and comesup\n\n\nJenkins Results\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/2222/", "createdAt": "2020-09-30T16:26:26Z", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961", "merged": true, "mergeCommit": {"oid": "c7dac11f04343983acda60bde685886a0f45f030"}, "closed": true, "closedAt": "2020-10-02T15:55:17Z", "author": {"login": "sankarpn"}, "timelineItems": {"totalCount": 36, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdMDt-4AH2gAyNDk1NjMyNjA5OjVlZWFhZDc5ZTdjYzI0N2Q0NjcxZGIyZWMwMjg0ODg2YmNhZTE0YmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOZuIDgFqTUwMDc3NDUzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5eeaad79e7cc247d4671db2ec0284886bcae14bf", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5eeaad79e7cc247d4671db2ec0284886bcae14bf", "committedDate": "2020-09-24T16:24:16Z", "message": "add wdtModelHome parameter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8b4f38a44844ae7bee9c421b8c36f32ee3b1681", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b8b4f38a44844ae7bee9c421b8c36f32ee3b1681", "committedDate": "2020-09-24T19:21:43Z", "message": "Adding testcase for custom wdt model home"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fdea868214378eaf471502d0a170cf3bc6d0e39", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0fdea868214378eaf471502d0a170cf3bc6d0e39", "committedDate": "2020-09-24T19:44:11Z", "message": "fix model home"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab877c7a3ef4ce51264725899cb34ed431fa1e08", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ab877c7a3ef4ce51264725899cb34ed431fa1e08", "committedDate": "2020-09-24T21:03:24Z", "message": "fix wdtmodelhome location"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3179be8ff0f4edc3ef6b9180206d95f6113074d0", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3179be8ff0f4edc3ef6b9180206d95f6113074d0", "committedDate": "2020-09-24T23:00:19Z", "message": "remove @Test annotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "293145574a17823ad62dca89d8177a97811f3807", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/293145574a17823ad62dca89d8177a97811f3807", "committedDate": "2020-09-24T23:14:53Z", "message": "log domain uid and image"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cecde4fe2979b80a81c17c9ec05a4c557da6fbf0", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/cecde4fe2979b80a81c17c9ec05a4c557da6fbf0", "committedDate": "2020-09-25T21:57:45Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into witmodelhomeoption"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8682053cd7729b1f422da41781ffaebe7d6609f", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e8682053cd7729b1f422da41781ffaebe7d6609f", "committedDate": "2020-09-25T22:07:53Z", "message": "fix image name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "913e5e940a20cb2a6743d931adb02601f5479b4b", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/913e5e940a20cb2a6743d931adb02601f5479b4b", "committedDate": "2020-09-25T22:44:20Z", "message": "use wls pod for pv manipulation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95d8a40d1e52e690e0472445cc9d4a63ede51c67", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/95d8a40d1e52e690e0472445cc9d4a63ede51c67", "committedDate": "2020-09-25T22:51:17Z", "message": "change pv name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7c3c1b5feaea670fe4a4119ff549d8394d8d6b9", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f7c3c1b5feaea670fe4a4119ff549d8394d8d6b9", "committedDate": "2020-09-25T23:02:54Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34fcceb0d1bf62d45f4bf96c634959e2cde84870", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/34fcceb0d1bf62d45f4bf96c634959e2cde84870", "committedDate": "2020-09-25T23:13:39Z", "message": "change pv permission to oracle:root"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "015fb601942fb0064a0376302d0153d410ed8d08", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/015fb601942fb0064a0376302d0153d410ed8d08", "committedDate": "2020-09-25T23:44:43Z", "message": "use variable to store location model home"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d946c72435882d144596e410f26673aec71ff3f1", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d946c72435882d144596e410f26673aec71ff3f1", "committedDate": "2020-09-25T23:45:34Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c82c63cdc1e5bfc6dcbf6c9e3a7a393d4b4a6253", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c82c63cdc1e5bfc6dcbf6c9e3a7a393d4b4a6253", "committedDate": "2020-09-28T19:39:34Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into witmodelhomeoption"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3907f1292192af5caacb95c5bca0b5e0b689c26", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f3907f1292192af5caacb95c5bca0b5e0b689c26", "committedDate": "2020-09-28T19:39:43Z", "message": "add modelfile to the image"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b378fcd95bd53c86b7594e22dc5f0ab4b5bd6677", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b378fcd95bd53c86b7594e22dc5f0ab4b5bd6677", "committedDate": "2020-09-28T19:53:57Z", "message": "supply modelfile in the image building process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f10ba99fe7edbfeeb6cf4c6c50f66e1e5e68e2a", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3f10ba99fe7edbfeeb6cf4c6c50f66e1e5e68e2a", "committedDate": "2020-09-28T20:16:16Z", "message": "fix image push"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15dad7dfc3d83a773aacaa3310b1f6102471f433", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/15dad7dfc3d83a773aacaa3310b1f6102471f433", "committedDate": "2020-09-28T23:53:55Z", "message": "fix comments and javadocs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a73750dc83aa67879abb4f89151cc6b09a22cef", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0a73750dc83aa67879abb4f89151cc6b09a22cef", "committedDate": "2020-09-28T23:54:23Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into witmodelhomeoption"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0cfdb5e4491afed2c8f195c5fbecb2d304ba8c68", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0cfdb5e4491afed2c8f195c5fbecb2d304ba8c68", "committedDate": "2020-09-29T16:24:38Z", "message": "fix log message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dad5f2516ced7eab6586d6b3aaad00cb7e175fb2", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/dad5f2516ced7eab6586d6b3aaad00cb7e175fb2", "committedDate": "2020-09-29T17:56:55Z", "message": "fix image check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b6c144404efa43b25ea309956f2e79496b2351a", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5b6c144404efa43b25ea309956f2e79496b2351a", "committedDate": "2020-09-29T19:37:39Z", "message": "list images"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f44fdd34a8437131c339b8399e1bb629055f02c5", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f44fdd34a8437131c339b8399e1bb629055f02c5", "committedDate": "2020-09-29T20:30:04Z", "message": "fix image name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69acea974f2b9a941e6243320c71074988ea2658", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/69acea974f2b9a941e6243320c71074988ea2658", "committedDate": "2020-09-30T16:20:36Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into witmodelhomeoption"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNDA4NDYw", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#pullrequestreview-500408460", "createdAt": "2020-10-01T14:29:18Z", "commit": {"oid": "69acea974f2b9a941e6243320c71074988ea2658"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDoyOToxOFrOHbNKIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDo0Njo1NFrOHbN-jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI4OTE4Ng==", "bodyText": "see if these lines can be replaced with below and remove try, catch\n      Command.withParams(new CommandParams()\n          .command(cmd)\n          .redirect(false)).execute()", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498289186", "createdAt": "2020-10-01T14:29:18Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -155,72 +193,116 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     // create secret for admin credentials\n     logger.info(\"Creating secret for admin credentials\");\n     adminSecretName = \"weblogic-credentials\";\n-    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n \n     // create model encryption secret\n     logger.info(\"Creating encryption secret\");\n     encryptionSecretName = \"encryptionsecret\";\n     createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n \n     // create the PV and PVC to store application and model files\n-    createPV(pvName, domainUid, \"ItMiiDomainModelInPV\");\n-    createPVC(pvName, pvcName, domainUid, domainNamespace);\n+    createPV(pvName, domainUid1, \"ItMiiDomainModelInPV\");\n+    createPVC(pvName, pvcName, domainUid1, domainNamespace);\n \n     // build the clusterview application\n     Path distDir = buildApplication(Paths.get(APP_DIR, \"clusterview\"),\n         null, null, \"dist\", domainNamespace);\n     clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n     assertTrue(clusterViewAppPath.toFile().exists(), \"Application archive is not available\");\n \n-    V1Pod webLogicPod = setupPVPod(domainNamespace);\n+    logger.info(\"Setting up WebLogic pod to access PV\");\n+    V1Pod pvPod = setupWebLogicPod(domainNamespace);\n \n+    ExecResult exec = null;\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/applications\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/applications\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/applications\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/applications\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69acea974f2b9a941e6243320c71074988ea2658"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI4OTQwMw==", "bodyText": "same as above", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498289403", "createdAt": "2020-10-01T14:29:35Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -155,72 +193,116 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     // create secret for admin credentials\n     logger.info(\"Creating secret for admin credentials\");\n     adminSecretName = \"weblogic-credentials\";\n-    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n \n     // create model encryption secret\n     logger.info(\"Creating encryption secret\");\n     encryptionSecretName = \"encryptionsecret\";\n     createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n \n     // create the PV and PVC to store application and model files\n-    createPV(pvName, domainUid, \"ItMiiDomainModelInPV\");\n-    createPVC(pvName, pvcName, domainUid, domainNamespace);\n+    createPV(pvName, domainUid1, \"ItMiiDomainModelInPV\");\n+    createPVC(pvName, pvcName, domainUid1, domainNamespace);\n \n     // build the clusterview application\n     Path distDir = buildApplication(Paths.get(APP_DIR, \"clusterview\"),\n         null, null, \"dist\", domainNamespace);\n     clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n     assertTrue(clusterViewAppPath.toFile().exists(), \"Application archive is not available\");\n \n-    V1Pod webLogicPod = setupPVPod(domainNamespace);\n+    logger.info(\"Setting up WebLogic pod to access PV\");\n+    V1Pod pvPod = setupWebLogicPod(domainNamespace);\n \n+    ExecResult exec = null;\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/applications\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/applications\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/applications\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/applications\");\n+      if (exec.stdout() != null) {\n+        logger.info(\"Exec stdout {0}\", exec.stdout());\n+      }\n+      if (exec.stderr() != null) {\n+        logger.info(\"Exec stderr {0}\", exec.stderr());\n+      }\n     } catch (IOException | ApiException | InterruptedException ex) {\n       logger.warning(ex.getMessage());\n     }\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/model\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/model\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/model\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/model\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69acea974f2b9a941e6243320c71074988ea2658"}, "originalPosition": 215}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI5MTYyNQ==", "bodyText": "replace with assertDoesNotThrow(() -> copyFileToPod()) and remove try, catch", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498291625", "createdAt": "2020-10-01T14:32:31Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -155,72 +193,116 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     // create secret for admin credentials\n     logger.info(\"Creating secret for admin credentials\");\n     adminSecretName = \"weblogic-credentials\";\n-    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n \n     // create model encryption secret\n     logger.info(\"Creating encryption secret\");\n     encryptionSecretName = \"encryptionsecret\";\n     createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n \n     // create the PV and PVC to store application and model files\n-    createPV(pvName, domainUid, \"ItMiiDomainModelInPV\");\n-    createPVC(pvName, pvcName, domainUid, domainNamespace);\n+    createPV(pvName, domainUid1, \"ItMiiDomainModelInPV\");\n+    createPVC(pvName, pvcName, domainUid1, domainNamespace);\n \n     // build the clusterview application\n     Path distDir = buildApplication(Paths.get(APP_DIR, \"clusterview\"),\n         null, null, \"dist\", domainNamespace);\n     clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n     assertTrue(clusterViewAppPath.toFile().exists(), \"Application archive is not available\");\n \n-    V1Pod webLogicPod = setupPVPod(domainNamespace);\n+    logger.info(\"Setting up WebLogic pod to access PV\");\n+    V1Pod pvPod = setupWebLogicPod(domainNamespace);\n \n+    ExecResult exec = null;\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/applications\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/applications\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/applications\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/applications\");\n+      if (exec.stdout() != null) {\n+        logger.info(\"Exec stdout {0}\", exec.stdout());\n+      }\n+      if (exec.stderr() != null) {\n+        logger.info(\"Exec stderr {0}\", exec.stderr());\n+      }\n     } catch (IOException | ApiException | InterruptedException ex) {\n       logger.warning(ex.getMessage());\n     }\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/model\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/model\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/model\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/model\");\n+      if (exec.stdout() != null) {\n+        logger.info(\"Exec stdout {0}\", exec.stdout());\n+      }\n+      if (exec.stderr() != null) {\n+        logger.info(\"Exec stderr {0}\", exec.stderr());\n+      }\n     } catch (IOException | ApiException | InterruptedException ex) {\n       logger.warning(ex.getMessage());\n     }\n \n     try {\n       //copy the model file to PV using the temp pod - we don't have access to PVROOT in Jenkins env\n       logger.info(\"Copying model file {0} to pv directory {1}\",\n-          Paths.get(MODEL_DIR, modelFile).toString(), \"/shared/model\");\n-      Kubernetes.copyFileToPod(domainNamespace, webLogicPod.getMetadata().getName(), null,\n-          Paths.get(MODEL_DIR, modelFile), Paths.get(\"shared\", \"model\", modelFile));\n+          Paths.get(MODEL_DIR, modelFile).toString(), modelMountPath + \"/model\");\n+      Kubernetes.copyFileToPod(domainNamespace, pvPod.getMetadata().getName(), null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69acea974f2b9a941e6243320c71074988ea2658"}, "originalPosition": 233}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI5MjAyNA==", "bodyText": "same as above", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498292024", "createdAt": "2020-10-01T14:33:02Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -155,72 +193,116 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     // create secret for admin credentials\n     logger.info(\"Creating secret for admin credentials\");\n     adminSecretName = \"weblogic-credentials\";\n-    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n \n     // create model encryption secret\n     logger.info(\"Creating encryption secret\");\n     encryptionSecretName = \"encryptionsecret\";\n     createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n \n     // create the PV and PVC to store application and model files\n-    createPV(pvName, domainUid, \"ItMiiDomainModelInPV\");\n-    createPVC(pvName, pvcName, domainUid, domainNamespace);\n+    createPV(pvName, domainUid1, \"ItMiiDomainModelInPV\");\n+    createPVC(pvName, pvcName, domainUid1, domainNamespace);\n \n     // build the clusterview application\n     Path distDir = buildApplication(Paths.get(APP_DIR, \"clusterview\"),\n         null, null, \"dist\", domainNamespace);\n     clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n     assertTrue(clusterViewAppPath.toFile().exists(), \"Application archive is not available\");\n \n-    V1Pod webLogicPod = setupPVPod(domainNamespace);\n+    logger.info(\"Setting up WebLogic pod to access PV\");\n+    V1Pod pvPod = setupWebLogicPod(domainNamespace);\n \n+    ExecResult exec = null;\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/applications\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/applications\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/applications\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/applications\");\n+      if (exec.stdout() != null) {\n+        logger.info(\"Exec stdout {0}\", exec.stdout());\n+      }\n+      if (exec.stderr() != null) {\n+        logger.info(\"Exec stderr {0}\", exec.stderr());\n+      }\n     } catch (IOException | ApiException | InterruptedException ex) {\n       logger.warning(ex.getMessage());\n     }\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/model\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/model\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/model\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/model\");\n+      if (exec.stdout() != null) {\n+        logger.info(\"Exec stdout {0}\", exec.stdout());\n+      }\n+      if (exec.stderr() != null) {\n+        logger.info(\"Exec stderr {0}\", exec.stderr());\n+      }\n     } catch (IOException | ApiException | InterruptedException ex) {\n       logger.warning(ex.getMessage());\n     }\n \n     try {\n       //copy the model file to PV using the temp pod - we don't have access to PVROOT in Jenkins env\n       logger.info(\"Copying model file {0} to pv directory {1}\",\n-          Paths.get(MODEL_DIR, modelFile).toString(), \"/shared/model\");\n-      Kubernetes.copyFileToPod(domainNamespace, webLogicPod.getMetadata().getName(), null,\n-          Paths.get(MODEL_DIR, modelFile), Paths.get(\"shared\", \"model\", modelFile));\n+          Paths.get(MODEL_DIR, modelFile).toString(), modelMountPath + \"/model\");\n+      Kubernetes.copyFileToPod(domainNamespace, pvPod.getMetadata().getName(), null,\n+          Paths.get(MODEL_DIR, modelFile), Paths.get(modelMountPath + \"/model\", modelFile));\n     } catch (IOException | ApiException ex) {\n       logger.warning(ex.getMessage());\n     }\n     try {\n       logger.info(\"Copying application file {0} to pv directory {1}\",\n-          clusterViewAppPath.toString(), \"/shared/applications\");\n-      Kubernetes.copyFileToPod(domainNamespace, webLogicPod.getMetadata().getName(), null,\n-          clusterViewAppPath, Paths.get(\"shared\", \"applications\", \"clusterview.war\"));\n+          clusterViewAppPath.toString(), modelMountPath + \"/applications\");\n+      Kubernetes.copyFileToPod(domainNamespace, pvPod.getMetadata().getName(), null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69acea974f2b9a941e6243320c71074988ea2658"}, "originalPosition": 244}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI5Mjg4Mg==", "bodyText": "same as other", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498292882", "createdAt": "2020-10-01T14:34:12Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -155,72 +193,116 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     // create secret for admin credentials\n     logger.info(\"Creating secret for admin credentials\");\n     adminSecretName = \"weblogic-credentials\";\n-    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n \n     // create model encryption secret\n     logger.info(\"Creating encryption secret\");\n     encryptionSecretName = \"encryptionsecret\";\n     createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n \n     // create the PV and PVC to store application and model files\n-    createPV(pvName, domainUid, \"ItMiiDomainModelInPV\");\n-    createPVC(pvName, pvcName, domainUid, domainNamespace);\n+    createPV(pvName, domainUid1, \"ItMiiDomainModelInPV\");\n+    createPVC(pvName, pvcName, domainUid1, domainNamespace);\n \n     // build the clusterview application\n     Path distDir = buildApplication(Paths.get(APP_DIR, \"clusterview\"),\n         null, null, \"dist\", domainNamespace);\n     clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n     assertTrue(clusterViewAppPath.toFile().exists(), \"Application archive is not available\");\n \n-    V1Pod webLogicPod = setupPVPod(domainNamespace);\n+    logger.info(\"Setting up WebLogic pod to access PV\");\n+    V1Pod pvPod = setupWebLogicPod(domainNamespace);\n \n+    ExecResult exec = null;\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/applications\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/applications\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/applications\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/applications\");\n+      if (exec.stdout() != null) {\n+        logger.info(\"Exec stdout {0}\", exec.stdout());\n+      }\n+      if (exec.stderr() != null) {\n+        logger.info(\"Exec stderr {0}\", exec.stderr());\n+      }\n     } catch (IOException | ApiException | InterruptedException ex) {\n       logger.warning(ex.getMessage());\n     }\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/model\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/model\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/model\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/model\");\n+      if (exec.stdout() != null) {\n+        logger.info(\"Exec stdout {0}\", exec.stdout());\n+      }\n+      if (exec.stderr() != null) {\n+        logger.info(\"Exec stderr {0}\", exec.stderr());\n+      }\n     } catch (IOException | ApiException | InterruptedException ex) {\n       logger.warning(ex.getMessage());\n     }\n \n     try {\n       //copy the model file to PV using the temp pod - we don't have access to PVROOT in Jenkins env\n       logger.info(\"Copying model file {0} to pv directory {1}\",\n-          Paths.get(MODEL_DIR, modelFile).toString(), \"/shared/model\");\n-      Kubernetes.copyFileToPod(domainNamespace, webLogicPod.getMetadata().getName(), null,\n-          Paths.get(MODEL_DIR, modelFile), Paths.get(\"shared\", \"model\", modelFile));\n+          Paths.get(MODEL_DIR, modelFile).toString(), modelMountPath + \"/model\");\n+      Kubernetes.copyFileToPod(domainNamespace, pvPod.getMetadata().getName(), null,\n+          Paths.get(MODEL_DIR, modelFile), Paths.get(modelMountPath + \"/model\", modelFile));\n     } catch (IOException | ApiException ex) {\n       logger.warning(ex.getMessage());\n     }\n     try {\n       logger.info(\"Copying application file {0} to pv directory {1}\",\n-          clusterViewAppPath.toString(), \"/shared/applications\");\n-      Kubernetes.copyFileToPod(domainNamespace, webLogicPod.getMetadata().getName(), null,\n-          clusterViewAppPath, Paths.get(\"shared\", \"applications\", \"clusterview.war\"));\n+          clusterViewAppPath.toString(), modelMountPath + \"/applications\");\n+      Kubernetes.copyFileToPod(domainNamespace, pvPod.getMetadata().getName(), null,\n+          clusterViewAppPath, Paths.get(modelMountPath + \"/applications\", \"clusterview.war\"));\n     } catch (IOException | ApiException ex) {\n       logger.warning(ex.getMessage());\n     }\n \n+    try {\n+      logger.info(\"Changing file ownership {0} to oracle:root in PV\", modelMountPath);\n+      Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"chown -R oracle:root \" + modelMountPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69acea974f2b9a941e6243320c71074988ea2658"}, "originalPosition": 252}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI5NDE2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Test domain creation from model file stored in PV.https://oracle.github.io/weblogic-kubernetes-operator\n          \n          \n            \n               * Test domain creation from model file stored in PV. https://oracle.github.io/weblogic-kubernetes-operator", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498294160", "createdAt": "2020-10-01T14:35:49Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -155,72 +193,116 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     // create secret for admin credentials\n     logger.info(\"Creating secret for admin credentials\");\n     adminSecretName = \"weblogic-credentials\";\n-    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n \n     // create model encryption secret\n     logger.info(\"Creating encryption secret\");\n     encryptionSecretName = \"encryptionsecret\";\n     createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n \n     // create the PV and PVC to store application and model files\n-    createPV(pvName, domainUid, \"ItMiiDomainModelInPV\");\n-    createPVC(pvName, pvcName, domainUid, domainNamespace);\n+    createPV(pvName, domainUid1, \"ItMiiDomainModelInPV\");\n+    createPVC(pvName, pvcName, domainUid1, domainNamespace);\n \n     // build the clusterview application\n     Path distDir = buildApplication(Paths.get(APP_DIR, \"clusterview\"),\n         null, null, \"dist\", domainNamespace);\n     clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n     assertTrue(clusterViewAppPath.toFile().exists(), \"Application archive is not available\");\n \n-    V1Pod webLogicPod = setupPVPod(domainNamespace);\n+    logger.info(\"Setting up WebLogic pod to access PV\");\n+    V1Pod pvPod = setupWebLogicPod(domainNamespace);\n \n+    ExecResult exec = null;\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/applications\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/applications\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/applications\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/applications\");\n+      if (exec.stdout() != null) {\n+        logger.info(\"Exec stdout {0}\", exec.stdout());\n+      }\n+      if (exec.stderr() != null) {\n+        logger.info(\"Exec stderr {0}\", exec.stderr());\n+      }\n     } catch (IOException | ApiException | InterruptedException ex) {\n       logger.warning(ex.getMessage());\n     }\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/model\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/model\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/model\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/model\");\n+      if (exec.stdout() != null) {\n+        logger.info(\"Exec stdout {0}\", exec.stdout());\n+      }\n+      if (exec.stderr() != null) {\n+        logger.info(\"Exec stderr {0}\", exec.stderr());\n+      }\n     } catch (IOException | ApiException | InterruptedException ex) {\n       logger.warning(ex.getMessage());\n     }\n \n     try {\n       //copy the model file to PV using the temp pod - we don't have access to PVROOT in Jenkins env\n       logger.info(\"Copying model file {0} to pv directory {1}\",\n-          Paths.get(MODEL_DIR, modelFile).toString(), \"/shared/model\");\n-      Kubernetes.copyFileToPod(domainNamespace, webLogicPod.getMetadata().getName(), null,\n-          Paths.get(MODEL_DIR, modelFile), Paths.get(\"shared\", \"model\", modelFile));\n+          Paths.get(MODEL_DIR, modelFile).toString(), modelMountPath + \"/model\");\n+      Kubernetes.copyFileToPod(domainNamespace, pvPod.getMetadata().getName(), null,\n+          Paths.get(MODEL_DIR, modelFile), Paths.get(modelMountPath + \"/model\", modelFile));\n     } catch (IOException | ApiException ex) {\n       logger.warning(ex.getMessage());\n     }\n     try {\n       logger.info(\"Copying application file {0} to pv directory {1}\",\n-          clusterViewAppPath.toString(), \"/shared/applications\");\n-      Kubernetes.copyFileToPod(domainNamespace, webLogicPod.getMetadata().getName(), null,\n-          clusterViewAppPath, Paths.get(\"shared\", \"applications\", \"clusterview.war\"));\n+          clusterViewAppPath.toString(), modelMountPath + \"/applications\");\n+      Kubernetes.copyFileToPod(domainNamespace, pvPod.getMetadata().getName(), null,\n+          clusterViewAppPath, Paths.get(modelMountPath + \"/applications\", \"clusterview.war\"));\n     } catch (IOException | ApiException ex) {\n       logger.warning(ex.getMessage());\n     }\n \n+    try {\n+      logger.info(\"Changing file ownership {0} to oracle:root in PV\", modelMountPath);\n+      Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"chown -R oracle:root \" + modelMountPath);\n+    } catch (IOException | ApiException | InterruptedException ex) {\n+      logger.warning(ex.getMessage());\n+    }\n   }\n \n   /**\n-   * Test domain creation from model file stored in PV.\n-   * https://oracle.github.io/weblogic-kubernetes-operator\n-   *       /userguide/managing-domains/domain-resource/#domain-spec-elements\n-   * 1. Create the domain custom resource using mii with no domain and specifying a PV location for modelHome\n-   * 2. Verify the domain creation is successful and application is accessible.\n+   * Test domain creation from model file stored in PV.https://oracle.github.io/weblogic-kubernetes-operator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69acea974f2b9a941e6243320c71074988ea2658"}, "originalPosition": 264}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwMjYwNQ==", "bodyText": "looks like this is only for debugging purposes, it can be removed as there is an assert in the next line", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498302605", "createdAt": "2020-10-01T14:46:54Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -366,15 +443,28 @@ private static void buildMIIandPushToRepo() {\n     checkDirectory(WIT_BUILD_DIR);\n     Map<String, String> env = new HashMap<>();\n     env.put(\"WLSIMG_BLDDIR\", WIT_BUILD_DIR);\n-    createImage(defaultWitParams()\n-        .modelImageName(MII_BASIC_IMAGE_NAME)\n-        .modelImageTag(miiImageTag)\n+    WitParams defaultWitParams = defaultWitParams();\n+    if (customWDTHome != null) {\n+      defaultWitParams.wdtModelHome(customWDTHome);\n+    }\n+    createImage(defaultWitParams\n+        .modelImageName(imageName)\n+        .modelImageTag(imageTag)\n         .modelFiles(modelList)\n         .wdtModelOnly(true)\n         .wdtVersion(WDT_VERSION)\n         .env(env)\n         .redirect(true));\n+    Command.defaultCommandParams()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69acea974f2b9a941e6243320c71074988ea2658"}, "originalPosition": 462}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb051b6f664cd7302eb52c6a87564ece51613f47", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/bb051b6f664cd7302eb52c6a87564ece51613f47", "committedDate": "2020-10-01T15:56:18Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into witmodelhomeoption"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02296697fa2dbe3e3adc2d0a9a6dae58d128fda3", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/02296697fa2dbe3e3adc2d0a9a6dae58d128fda3", "committedDate": "2020-10-01T16:16:42Z", "message": "address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfc7fcf2073cf954a9c559fbfe573cc949e6d9f2", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/dfc7fcf2073cf954a9c559fbfe573cc949e6d9f2", "committedDate": "2020-10-01T17:57:13Z", "message": "add the pod exec and copy commands to common util file"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNjA5MjY4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#pullrequestreview-500609268", "createdAt": "2020-10-01T18:24:32Z", "commit": {"oid": "dfc7fcf2073cf954a9c559fbfe573cc949e6d9f2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxODoyNDozMlrOHbWHvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxODoyNDozMlrOHbWHvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQzNjAyOQ==", "bodyText": "You can use existing FileUtils.copyFileToPod(String namespace,\nString pod,\nString container,\nPath srcPath,\nPath destPath)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498436029", "createdAt": "2020-10-01T18:24:32Z", "author": {"login": "maggiehe00"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "diffHunk": "@@ -1305,6 +1306,55 @@ public static void createDomainAndVerify(Domain domain, String domainNamespace)\n     return ingressHostList;\n   }\n \n+\n+  /**\n+   * Execute command inside a pod and assert the execution.\n+   *\n+   * @param pod V1Pod object\n+   * @param containerName name of the container inside the pod\n+   * @param redirectToStdout if true redirect to stdout and stderr\n+   * @param command the command to execute inside the pod\n+   */\n+  public static void execInPod(V1Pod pod, String containerName, boolean redirectToStdout, String command) {\n+    LoggingFacade logger = getLogger();\n+    ExecResult exec = null;\n+    try {\n+      logger.info(\"Executing command {0}\", command);\n+      exec = Exec.exec(pod, containerName, redirectToStdout, \"/bin/sh\", \"-c\", command);\n+      // checking for exitValue 0 for success fails sometimes as k8s exec api returns non-zero\n+      // exit value even on success, so checking for exitValue non-zero and stderr not empty for failure,\n+      // otherwise its success\n+      assertFalse(exec.exitValue() != 0 && exec.stderr() != null && !exec.stderr().isEmpty(),\n+          String.format(\"Command %s failed with exit value %s, stderr %s, stdout %s\",\n+              command, exec.exitValue(), exec.stderr(), exec.stdout()));\n+    } catch (IOException | ApiException | InterruptedException ex) {\n+      logger.warning(ex.getMessage());\n+    }\n+  }\n+\n+\n+  /**\n+   * Copy a file to the pod.\n+   *\n+   * @param namespace the namespace in which the pod exists\n+   * @param podName name of the pod\n+   * @param containerName name of the container inside the pod\n+   * @param srcPath source path of the file to copy\n+   * @param dstPath destination path for the file inside the pod\n+   */\n+  public static void copyFileToPod(String namespace, String podName,\n+      String containerName, Path srcPath, Path dstPath) {\n+    LoggingFacade logger = getLogger();\n+    try {\n+      logger.info(\"Copying file {0} inside pod location {1}\", srcPath, dstPath);\n+      Kubernetes.copyFileToPod(namespace, podName, containerName, srcPath, dstPath);\n+    } catch (ApiException | IOException ex) {\n+      logger.warning(ex.getMessage());\n+    }\n+  }\n+\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfc7fcf2073cf954a9c559fbfe573cc949e6d9f2"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "797d98a8a01b59af4731744408bf2ae3d3bb0415", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/797d98a8a01b59af4731744408bf2ae3d3bb0415", "committedDate": "2020-10-01T19:17:42Z", "message": "use file util from FileUtils"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNjUzNjcz", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#pullrequestreview-500653673", "createdAt": "2020-10-01T19:27:52Z", "commit": {"oid": "797d98a8a01b59af4731744408bf2ae3d3bb0415"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzYwNzQw", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#pullrequestreview-500760740", "createdAt": "2020-10-01T22:29:59Z", "commit": {"oid": "797d98a8a01b59af4731744408bf2ae3d3bb0415"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzYyMzg3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#pullrequestreview-500762387", "createdAt": "2020-10-01T22:34:10Z", "commit": {"oid": "797d98a8a01b59af4731744408bf2ae3d3bb0415"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMjozNDoxMFrOHbcwhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMjozNDoxMFrOHbcwhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0NDc3Mw==", "bodyText": "WebLogic domain ( we have just one right?)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498544773", "createdAt": "2020-10-01T22:34:10Z", "author": {"login": "marinakog"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -134,19 +158,30 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     assertNotNull(namespaces.get(0), \"Namespace list is null\");\n     String opNamespace = namespaces.get(0);\n \n-    // get a unique domain namespace\n-    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domains\");\n     assertNotNull(namespaces.get(1), \"Namespace list is null\");\n     domainNamespace = namespaces.get(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "797d98a8a01b59af4731744408bf2ae3d3bb0415"}, "originalPosition": 158}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cbbac7877903e53359716a6183669dd72521aaf", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7cbbac7877903e53359716a6183669dd72521aaf", "committedDate": "2020-10-01T22:37:55Z", "message": "fix merge conflicts\nMerge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into witmodelhomeoption"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzc0NTMx", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#pullrequestreview-500774531", "createdAt": "2020-10-01T23:07:21Z", "commit": {"oid": "7cbbac7877903e53359716a6183669dd72521aaf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMzowNzoyMVrOHbdUgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMzowNzoyMVrOHbdUgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU1Mzk4Ng==", "bodyText": "Fix the bullet numbering", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498553986", "createdAt": "2020-10-01T23:07:21Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -156,72 +182,87 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     // create secret for admin credentials\n     logger.info(\"Creating secret for admin credentials\");\n     adminSecretName = \"weblogic-credentials\";\n-    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n \n     // create model encryption secret\n     logger.info(\"Creating encryption secret\");\n     encryptionSecretName = \"encryptionsecret\";\n     createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n \n     // create the PV and PVC to store application and model files\n-    createPV(pvName, domainUid, \"ItMiiDomainModelInPV\");\n-    createPVC(pvName, pvcName, domainUid, domainNamespace);\n+    createPV(pvName, domainUid1, \"ItMiiDomainModelInPV\");\n+    createPVC(pvName, pvcName, domainUid1, domainNamespace);\n \n     // build the clusterview application\n     Path distDir = buildApplication(Paths.get(APP_DIR, \"clusterview\"),\n         null, null, \"dist\", domainNamespace);\n     clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n     assertTrue(clusterViewAppPath.toFile().exists(), \"Application archive is not available\");\n \n-    V1Pod webLogicPod = setupPVPod(domainNamespace);\n+    logger.info(\"Setting up WebLogic pod to access PV\");\n+    V1Pod pvPod = setupWebLogicPod(domainNamespace);\n \n-    try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/applications\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/applications\");\n-    } catch (IOException | ApiException | InterruptedException ex) {\n-      logger.warning(ex.getMessage());\n-    }\n-    try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/model\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/model\");\n-    } catch (IOException | ApiException | InterruptedException ex) {\n-      logger.warning(ex.getMessage());\n-    }\n+    logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/applications\");\n+    execInPod(pvPod, null, true, \"mkdir -p \" + modelMountPath + \"/applications\");\n \n-    try {\n-      //copy the model file to PV using the temp pod - we don't have access to PVROOT in Jenkins env\n-      logger.info(\"Copying model file {0} to pv directory {1}\",\n-          Paths.get(MODEL_DIR, modelFile).toString(), \"/shared/model\");\n-      Kubernetes.copyFileToPod(domainNamespace, webLogicPod.getMetadata().getName(), null,\n-          Paths.get(MODEL_DIR, modelFile), Paths.get(\"shared\", \"model\", modelFile));\n-    } catch (IOException | ApiException ex) {\n-      logger.warning(ex.getMessage());\n-    }\n-    try {\n-      logger.info(\"Copying application file {0} to pv directory {1}\",\n-          clusterViewAppPath.toString(), \"/shared/applications\");\n-      Kubernetes.copyFileToPod(domainNamespace, webLogicPod.getMetadata().getName(), null,\n-          clusterViewAppPath, Paths.get(\"shared\", \"applications\", \"clusterview.war\"));\n-    } catch (IOException | ApiException ex) {\n-      logger.warning(ex.getMessage());\n-    }\n+    logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/model\");\n+    execInPod(pvPod, null, true, \"mkdir -p \" + modelMountPath + \"/model\");\n+\n+    //copy the model file to PV using the temp pod - we don't have access to PVROOT in Jenkins env\n+    logger.info(\"Copying model file {0} to pv directory {1}\",\n+        Paths.get(MODEL_DIR, modelFile).toString(), modelMountPath + \"/model\", modelFile);\n+    assertDoesNotThrow(() -> copyFileToPod(domainNamespace, pvPod.getMetadata().getName(), null,\n+        Paths.get(MODEL_DIR, modelFile), Paths.get(modelMountPath + \"/model\", modelFile)),\n+        \"Copying file to pod failed\");\n \n+    logger.info(\"Copying application file {0} to pv directory {1}\",\n+        clusterViewAppPath.toString(), modelMountPath + \"/applications\", \"clusterview.war\");\n+    assertDoesNotThrow(() -> copyFileToPod(domainNamespace, pvPod.getMetadata().getName(), null,\n+        clusterViewAppPath, Paths.get(modelMountPath + \"/applications\", \"clusterview.war\")),\n+        \"Copying file to pod failed\");\n+\n+    logger.info(\"Changing file ownership {0} to oracle:root in PV\", modelMountPath);\n+    execInPod(pvPod, null, true, \"chown -R oracle:root \" + modelMountPath);\n   }\n \n   /**\n-   * Test domain creation from model file stored in PV.\n-   * https://oracle.github.io/weblogic-kubernetes-operator\n-   *       /userguide/managing-domains/domain-resource/#domain-spec-elements\n-   * 1. Create the domain custom resource using mii with no domain and specifying a PV location for modelHome\n-   * 2. Verify the domain creation is successful and application is accessible.\n+   * Test domain creation from model file stored in PV. https://oracle.github.io/weblogic-kubernetes-operator\n+       /userguide/managing-domains/domain-resource/#domain-spec-elements\n+    1.Create the domain custom resource using mii with no domain and specifying a PV location for modelHome", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cbbac7877903e53359716a6183669dd72521aaf"}, "originalPosition": 264}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4208, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}