{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3NjI2NDc1", "number": 2003, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNjo0NzozM1rOEwWDoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNToxNzo0NlrOEw0VPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MTI4NDgwOnYy", "diffSide": "RIGHT", "path": "docs-source/content/security/openshift.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNjo0NzozM1rOHl16xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNjo0NzozM1rOHl16xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ0Mjc1OA==", "bodyText": "group which -> group, which", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2003#discussion_r509442758", "createdAt": "2020-10-21T16:47:33Z", "author": {"login": "rosemarymarano"}, "path": "docs-source/content/security/openshift.md", "diffHunk": "@@ -5,14 +5,111 @@ weight: 7\n description: \"OpenShift information for the operator\"\n ---\n \n-#### OpenShift `anyuid` security context\n-\n-The Docker images that Oracle publishes default to the container user\n-as `oracle`, which is UID `1000` and GID `1000`. When running the\n-Oracle images or layered images that retain the default user as\n-`oracle` with OpenShift, the `anyuid` security context constraint\n-is required to ensure proper access to the file system within the\n-Docker image. This means that the administrator must:\n+#### Security requirements to run WebLogic in OpenShift\n+\n+WebLogic Server Docker images obtained from Oracle Container Registry have an `oracle` user with\n+UID 1000 and it is in a group which is also called `oracle` and has GID 1000.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33fe4dc4d51e83deb31f2d2b39dbd1b15dd73630"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MTI4NzMyOnYy", "diffSide": "RIGHT", "path": "docs-source/content/security/openshift.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNjo0ODoxMVrOHl18Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNjo0ODoxMVrOHl18Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ0MzE2Mg==", "bodyText": "WebLogic Kubernetes Operator -> WebLogic Server Kubernetes Operator (official name)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2003#discussion_r509443162", "createdAt": "2020-10-21T16:48:11Z", "author": {"login": "rosemarymarano"}, "path": "docs-source/content/security/openshift.md", "diffHunk": "@@ -5,14 +5,111 @@ weight: 7\n description: \"OpenShift information for the operator\"\n ---\n \n-#### OpenShift `anyuid` security context\n-\n-The Docker images that Oracle publishes default to the container user\n-as `oracle`, which is UID `1000` and GID `1000`. When running the\n-Oracle images or layered images that retain the default user as\n-`oracle` with OpenShift, the `anyuid` security context constraint\n-is required to ensure proper access to the file system within the\n-Docker image. This means that the administrator must:\n+#### Security requirements to run WebLogic in OpenShift\n+\n+WebLogic Server Docker images obtained from Oracle Container Registry have an `oracle` user with\n+UID 1000 and it is in a group which is also called `oracle` and has GID 1000.\n+The WebLogic Kubernetes Operator Docker images use the same UID and GID.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33fe4dc4d51e83deb31f2d2b39dbd1b15dd73630"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MTI5NjU4OnYy", "diffSide": "RIGHT", "path": "docs-source/content/security/openshift.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNjo1MDoyNFrOHl2CCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNjo1MDoyNFrOHl2CCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ0NDYxNw==", "bodyText": "WebLogic images -> WebLogic Server images", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2003#discussion_r509444617", "createdAt": "2020-10-21T16:50:24Z", "author": {"login": "rosemarymarano"}, "path": "docs-source/content/security/openshift.md", "diffHunk": "@@ -5,14 +5,111 @@ weight: 7\n description: \"OpenShift information for the operator\"\n ---\n \n-#### OpenShift `anyuid` security context\n-\n-The Docker images that Oracle publishes default to the container user\n-as `oracle`, which is UID `1000` and GID `1000`. When running the\n-Oracle images or layered images that retain the default user as\n-`oracle` with OpenShift, the `anyuid` security context constraint\n-is required to ensure proper access to the file system within the\n-Docker image. This means that the administrator must:\n+#### Security requirements to run WebLogic in OpenShift\n+\n+WebLogic Server Docker images obtained from Oracle Container Registry have an `oracle` user with\n+UID 1000 and it is in a group which is also called `oracle` and has GID 1000.\n+The WebLogic Kubernetes Operator Docker images use the same UID and GID.\n+\n+OpenShift, by default, allocates a high, random UID for each container and this\n+UID may not have the necessary permissions to run the programs in the container.\n+\n+Since August 2020, the standard WebLogic Server images that are published in\n+Oracle Container Registry set the file system group ownership to\n+allow the high UIDs allocated by OpenShift to have the necessary permissions.\n+\n+Here is an excerpt from a standard WebLogic [Dockerfile](https://github.com/oracle/docker-images/blob/master/OracleWebLogic/dockerfiles/12.2.1.4/Dockerfile.generic#L89)\n+that demonstrates how the file system group ownership is configured in the standard WebLogic images:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33fe4dc4d51e83deb31f2d2b39dbd1b15dd73630"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MTMwNDE5OnYy", "diffSide": "RIGHT", "path": "docs-source/content/security/openshift.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNjo1MjoyMFrOHl2G3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNjo1MjoyMFrOHl2G3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ0NTg1Mg==", "bodyText": "the WebLogic Operator -> the operator", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2003#discussion_r509445852", "createdAt": "2020-10-21T16:52:20Z", "author": {"login": "rosemarymarano"}, "path": "docs-source/content/security/openshift.md", "diffHunk": "@@ -5,14 +5,111 @@ weight: 7\n description: \"OpenShift information for the operator\"\n ---\n \n-#### OpenShift `anyuid` security context\n-\n-The Docker images that Oracle publishes default to the container user\n-as `oracle`, which is UID `1000` and GID `1000`. When running the\n-Oracle images or layered images that retain the default user as\n-`oracle` with OpenShift, the `anyuid` security context constraint\n-is required to ensure proper access to the file system within the\n-Docker image. This means that the administrator must:\n+#### Security requirements to run WebLogic in OpenShift\n+\n+WebLogic Server Docker images obtained from Oracle Container Registry have an `oracle` user with\n+UID 1000 and it is in a group which is also called `oracle` and has GID 1000.\n+The WebLogic Kubernetes Operator Docker images use the same UID and GID.\n+\n+OpenShift, by default, allocates a high, random UID for each container and this\n+UID may not have the necessary permissions to run the programs in the container.\n+\n+Since August 2020, the standard WebLogic Server images that are published in\n+Oracle Container Registry set the file system group ownership to\n+allow the high UIDs allocated by OpenShift to have the necessary permissions.\n+\n+Here is an excerpt from a standard WebLogic [Dockerfile](https://github.com/oracle/docker-images/blob/master/OracleWebLogic/dockerfiles/12.2.1.4/Dockerfile.generic#L89)\n+that demonstrates how the file system group ownership is configured in the standard WebLogic images:\n+\n+```bash\n+# Setup filesystem and oracle user\n+# Adjust file permissions, go to /u01 as user 'oracle' to proceed with WLS installation\n+# ------------------------------------------------------------\n+RUN mkdir -p /u01 && \\\n+    chmod 775 /u01 && \\\n+    useradd -b /u01 -d /u01/oracle -m -s /bin/bash oracle && \\\n+    chown oracle:root /u01\n+\n+COPY --from=builder --chown=oracle:root /u01 /u01\n+```\n+\n+However, if you build your own image, or obtain an image from another source, it\n+may not have the necessary permissions.  You may need to configure similar file\n+system permissions to allow your image to work in OpenShift.\n+\n+Alternatively, you may choose to configure OpenShift to allow use of UID 1000.  This\n+can be done using a Security Context Constraint.  Oracle recommends that you define\n+a custom Security Context Constraint that has just the permissions that are required\n+and apply that to WebLogic pods.  If you prefer, you can use the built-in `anyuid`\n+Security Context Constraint, but you should be aware that it provides more permissions\n+than are needed, and is therefore a less secure option.\n+\n+#### Create a custom Security Context Constraint\n+\n+To create a custom security context constraint, create a YAML file with the following\n+content.  This example assumes that your OpenShift project is called `weblogic` and\n+that the service account you will use to run the WebLogic Operator and domains", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33fe4dc4d51e83deb31f2d2b39dbd1b15dd73630"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MTQzOTA4OnYy", "diffSide": "RIGHT", "path": "docs-source/content/security/openshift.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzoyMDozOVrOHl3d2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzoyMDozOVrOHl3d2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ2ODEyMQ==", "bodyText": "Security Context Constraint -> Security Context Constraint (SCC)\nI checked the capitalization of this term in the OpenShift docs and this is what I found: it does not need to be capitalized. It can be capitalized prior to providing its abbreviation, SCC, but otherwise, can be used lower case. (They are not 100% consistent in their docs, but that's my takeaway from them.)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2003#discussion_r509468121", "createdAt": "2020-10-21T17:20:39Z", "author": {"login": "rosemarymarano"}, "path": "docs-source/content/security/openshift.md", "diffHunk": "@@ -5,14 +5,111 @@ weight: 7\n description: \"OpenShift information for the operator\"\n ---\n \n-#### OpenShift `anyuid` security context\n-\n-The Docker images that Oracle publishes default to the container user\n-as `oracle`, which is UID `1000` and GID `1000`. When running the\n-Oracle images or layered images that retain the default user as\n-`oracle` with OpenShift, the `anyuid` security context constraint\n-is required to ensure proper access to the file system within the\n-Docker image. This means that the administrator must:\n+#### Security requirements to run WebLogic in OpenShift\n+\n+WebLogic Server Docker images obtained from Oracle Container Registry have an `oracle` user with\n+UID 1000 and it is in a group which is also called `oracle` and has GID 1000.\n+The WebLogic Kubernetes Operator Docker images use the same UID and GID.\n+\n+OpenShift, by default, allocates a high, random UID for each container and this\n+UID may not have the necessary permissions to run the programs in the container.\n+\n+Since August 2020, the standard WebLogic Server images that are published in\n+Oracle Container Registry set the file system group ownership to\n+allow the high UIDs allocated by OpenShift to have the necessary permissions.\n+\n+Here is an excerpt from a standard WebLogic [Dockerfile](https://github.com/oracle/docker-images/blob/master/OracleWebLogic/dockerfiles/12.2.1.4/Dockerfile.generic#L89)\n+that demonstrates how the file system group ownership is configured in the standard WebLogic images:\n+\n+```bash\n+# Setup filesystem and oracle user\n+# Adjust file permissions, go to /u01 as user 'oracle' to proceed with WLS installation\n+# ------------------------------------------------------------\n+RUN mkdir -p /u01 && \\\n+    chmod 775 /u01 && \\\n+    useradd -b /u01 -d /u01/oracle -m -s /bin/bash oracle && \\\n+    chown oracle:root /u01\n+\n+COPY --from=builder --chown=oracle:root /u01 /u01\n+```\n+\n+However, if you build your own image, or obtain an image from another source, it\n+may not have the necessary permissions.  You may need to configure similar file\n+system permissions to allow your image to work in OpenShift.\n+\n+Alternatively, you may choose to configure OpenShift to allow use of UID 1000.  This\n+can be done using a Security Context Constraint.  Oracle recommends that you define", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33fe4dc4d51e83deb31f2d2b39dbd1b15dd73630"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MTQ1NzE0OnYy", "diffSide": "RIGHT", "path": "docs-source/content/security/openshift.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzoyMzo0NlrOHl3plA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzoyMzo0NlrOHl3plA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ3MTEyNA==", "bodyText": "Security Context Constraint -> security context constraint", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2003#discussion_r509471124", "createdAt": "2020-10-21T17:23:46Z", "author": {"login": "rosemarymarano"}, "path": "docs-source/content/security/openshift.md", "diffHunk": "@@ -5,14 +5,111 @@ weight: 7\n description: \"OpenShift information for the operator\"\n ---\n \n-#### OpenShift `anyuid` security context\n-\n-The Docker images that Oracle publishes default to the container user\n-as `oracle`, which is UID `1000` and GID `1000`. When running the\n-Oracle images or layered images that retain the default user as\n-`oracle` with OpenShift, the `anyuid` security context constraint\n-is required to ensure proper access to the file system within the\n-Docker image. This means that the administrator must:\n+#### Security requirements to run WebLogic in OpenShift\n+\n+WebLogic Server Docker images obtained from Oracle Container Registry have an `oracle` user with\n+UID 1000 and it is in a group which is also called `oracle` and has GID 1000.\n+The WebLogic Kubernetes Operator Docker images use the same UID and GID.\n+\n+OpenShift, by default, allocates a high, random UID for each container and this\n+UID may not have the necessary permissions to run the programs in the container.\n+\n+Since August 2020, the standard WebLogic Server images that are published in\n+Oracle Container Registry set the file system group ownership to\n+allow the high UIDs allocated by OpenShift to have the necessary permissions.\n+\n+Here is an excerpt from a standard WebLogic [Dockerfile](https://github.com/oracle/docker-images/blob/master/OracleWebLogic/dockerfiles/12.2.1.4/Dockerfile.generic#L89)\n+that demonstrates how the file system group ownership is configured in the standard WebLogic images:\n+\n+```bash\n+# Setup filesystem and oracle user\n+# Adjust file permissions, go to /u01 as user 'oracle' to proceed with WLS installation\n+# ------------------------------------------------------------\n+RUN mkdir -p /u01 && \\\n+    chmod 775 /u01 && \\\n+    useradd -b /u01 -d /u01/oracle -m -s /bin/bash oracle && \\\n+    chown oracle:root /u01\n+\n+COPY --from=builder --chown=oracle:root /u01 /u01\n+```\n+\n+However, if you build your own image, or obtain an image from another source, it\n+may not have the necessary permissions.  You may need to configure similar file\n+system permissions to allow your image to work in OpenShift.\n+\n+Alternatively, you may choose to configure OpenShift to allow use of UID 1000.  This\n+can be done using a Security Context Constraint.  Oracle recommends that you define\n+a custom Security Context Constraint that has just the permissions that are required\n+and apply that to WebLogic pods.  If you prefer, you can use the built-in `anyuid`\n+Security Context Constraint, but you should be aware that it provides more permissions\n+than are needed, and is therefore a less secure option.\n+\n+#### Create a custom Security Context Constraint\n+\n+To create a custom security context constraint, create a YAML file with the following\n+content.  This example assumes that your OpenShift project is called `weblogic` and\n+that the service account you will use to run the WebLogic Operator and domains\n+is called `weblogic-operator`.  You should change these\n+in the `groups` and `users` sections to match your environment.\n+\n+```yaml\n+kind: SecurityContextConstraints\n+apiVersion: v1\n+metadata:\n+  name: uid1000\n+allowHostDirVolumePlugin: false\n+allowHostIPC: false\n+allowHostNetwork: false\n+allowHostPID: false\n+allowHostPorts: false\n+allowPrivilegeEscalation: true\n+allowPrivilegedContainer: false\n+fsGroup:\n+  type: MustRunAs\n+groups:\n+- system:serviceaccounts:weblogic\n+readOnlyRootFilesystem: false\n+requiredDropCapabilities:\n+- KILL\n+- MKNOD\n+- SETUID\n+- SETGID\n+runAsUser:\n+  type: MustRunAs\n+  uid: 1000\n+seLinuxContext:\n+  type: MustRunAs\n+supplementalGroups:\n+  type: RunAsAny\n+users:\n+- system:serviceaccount:weblogic:weblogic-operator\n+volumes:\n+- configMap\n+- downwardAPI\n+- emptyDir\n+- persistentVolumeClaim\n+- projected\n+- secret\n+```\n+\n+Assuming you called that file `uid1000.yaml`, you can create the Security Context Constraint", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33fe4dc4d51e83deb31f2d2b39dbd1b15dd73630"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MTQ2MTI0OnYy", "diffSide": "RIGHT", "path": "docs-source/content/security/openshift.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzoyNDozMVrOHl3saQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzoyNDozMVrOHl3saQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ3MTg0OQ==", "bodyText": "the WebLogic Operator -> the operator (or WebLogic Server Kubernetes Operator)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2003#discussion_r509471849", "createdAt": "2020-10-21T17:24:31Z", "author": {"login": "rosemarymarano"}, "path": "docs-source/content/security/openshift.md", "diffHunk": "@@ -5,14 +5,111 @@ weight: 7\n description: \"OpenShift information for the operator\"\n ---\n \n-#### OpenShift `anyuid` security context\n-\n-The Docker images that Oracle publishes default to the container user\n-as `oracle`, which is UID `1000` and GID `1000`. When running the\n-Oracle images or layered images that retain the default user as\n-`oracle` with OpenShift, the `anyuid` security context constraint\n-is required to ensure proper access to the file system within the\n-Docker image. This means that the administrator must:\n+#### Security requirements to run WebLogic in OpenShift\n+\n+WebLogic Server Docker images obtained from Oracle Container Registry have an `oracle` user with\n+UID 1000 and it is in a group which is also called `oracle` and has GID 1000.\n+The WebLogic Kubernetes Operator Docker images use the same UID and GID.\n+\n+OpenShift, by default, allocates a high, random UID for each container and this\n+UID may not have the necessary permissions to run the programs in the container.\n+\n+Since August 2020, the standard WebLogic Server images that are published in\n+Oracle Container Registry set the file system group ownership to\n+allow the high UIDs allocated by OpenShift to have the necessary permissions.\n+\n+Here is an excerpt from a standard WebLogic [Dockerfile](https://github.com/oracle/docker-images/blob/master/OracleWebLogic/dockerfiles/12.2.1.4/Dockerfile.generic#L89)\n+that demonstrates how the file system group ownership is configured in the standard WebLogic images:\n+\n+```bash\n+# Setup filesystem and oracle user\n+# Adjust file permissions, go to /u01 as user 'oracle' to proceed with WLS installation\n+# ------------------------------------------------------------\n+RUN mkdir -p /u01 && \\\n+    chmod 775 /u01 && \\\n+    useradd -b /u01 -d /u01/oracle -m -s /bin/bash oracle && \\\n+    chown oracle:root /u01\n+\n+COPY --from=builder --chown=oracle:root /u01 /u01\n+```\n+\n+However, if you build your own image, or obtain an image from another source, it\n+may not have the necessary permissions.  You may need to configure similar file\n+system permissions to allow your image to work in OpenShift.\n+\n+Alternatively, you may choose to configure OpenShift to allow use of UID 1000.  This\n+can be done using a Security Context Constraint.  Oracle recommends that you define\n+a custom Security Context Constraint that has just the permissions that are required\n+and apply that to WebLogic pods.  If you prefer, you can use the built-in `anyuid`\n+Security Context Constraint, but you should be aware that it provides more permissions\n+than are needed, and is therefore a less secure option.\n+\n+#### Create a custom Security Context Constraint\n+\n+To create a custom security context constraint, create a YAML file with the following\n+content.  This example assumes that your OpenShift project is called `weblogic` and\n+that the service account you will use to run the WebLogic Operator and domains\n+is called `weblogic-operator`.  You should change these\n+in the `groups` and `users` sections to match your environment.\n+\n+```yaml\n+kind: SecurityContextConstraints\n+apiVersion: v1\n+metadata:\n+  name: uid1000\n+allowHostDirVolumePlugin: false\n+allowHostIPC: false\n+allowHostNetwork: false\n+allowHostPID: false\n+allowHostPorts: false\n+allowPrivilegeEscalation: true\n+allowPrivilegedContainer: false\n+fsGroup:\n+  type: MustRunAs\n+groups:\n+- system:serviceaccounts:weblogic\n+readOnlyRootFilesystem: false\n+requiredDropCapabilities:\n+- KILL\n+- MKNOD\n+- SETUID\n+- SETGID\n+runAsUser:\n+  type: MustRunAs\n+  uid: 1000\n+seLinuxContext:\n+  type: MustRunAs\n+supplementalGroups:\n+  type: RunAsAny\n+users:\n+- system:serviceaccount:weblogic:weblogic-operator\n+volumes:\n+- configMap\n+- downwardAPI\n+- emptyDir\n+- persistentVolumeClaim\n+- projected\n+- secret\n+```\n+\n+Assuming you called that file `uid1000.yaml`, you can create the Security Context Constraint\n+using the following command:\n+\n+```bash\n+$ oc create -f uid1000.yaml\n+```\n+\n+After you have created the security context constraint, you can install the WebLogic Operator.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33fe4dc4d51e83deb31f2d2b39dbd1b15dd73630"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MTQ2OTUxOnYy", "diffSide": "RIGHT", "path": "docs-source/content/security/openshift.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzoyNTo1NVrOHl3yCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzoyNTo1NVrOHl3yCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ3MzI4OQ==", "bodyText": "service account that you granted permission to -> service account to which you granted permission\nthe example above -> the preceding example", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2003#discussion_r509473289", "createdAt": "2020-10-21T17:25:55Z", "author": {"login": "rosemarymarano"}, "path": "docs-source/content/security/openshift.md", "diffHunk": "@@ -5,14 +5,111 @@ weight: 7\n description: \"OpenShift information for the operator\"\n ---\n \n-#### OpenShift `anyuid` security context\n-\n-The Docker images that Oracle publishes default to the container user\n-as `oracle`, which is UID `1000` and GID `1000`. When running the\n-Oracle images or layered images that retain the default user as\n-`oracle` with OpenShift, the `anyuid` security context constraint\n-is required to ensure proper access to the file system within the\n-Docker image. This means that the administrator must:\n+#### Security requirements to run WebLogic in OpenShift\n+\n+WebLogic Server Docker images obtained from Oracle Container Registry have an `oracle` user with\n+UID 1000 and it is in a group which is also called `oracle` and has GID 1000.\n+The WebLogic Kubernetes Operator Docker images use the same UID and GID.\n+\n+OpenShift, by default, allocates a high, random UID for each container and this\n+UID may not have the necessary permissions to run the programs in the container.\n+\n+Since August 2020, the standard WebLogic Server images that are published in\n+Oracle Container Registry set the file system group ownership to\n+allow the high UIDs allocated by OpenShift to have the necessary permissions.\n+\n+Here is an excerpt from a standard WebLogic [Dockerfile](https://github.com/oracle/docker-images/blob/master/OracleWebLogic/dockerfiles/12.2.1.4/Dockerfile.generic#L89)\n+that demonstrates how the file system group ownership is configured in the standard WebLogic images:\n+\n+```bash\n+# Setup filesystem and oracle user\n+# Adjust file permissions, go to /u01 as user 'oracle' to proceed with WLS installation\n+# ------------------------------------------------------------\n+RUN mkdir -p /u01 && \\\n+    chmod 775 /u01 && \\\n+    useradd -b /u01 -d /u01/oracle -m -s /bin/bash oracle && \\\n+    chown oracle:root /u01\n+\n+COPY --from=builder --chown=oracle:root /u01 /u01\n+```\n+\n+However, if you build your own image, or obtain an image from another source, it\n+may not have the necessary permissions.  You may need to configure similar file\n+system permissions to allow your image to work in OpenShift.\n+\n+Alternatively, you may choose to configure OpenShift to allow use of UID 1000.  This\n+can be done using a Security Context Constraint.  Oracle recommends that you define\n+a custom Security Context Constraint that has just the permissions that are required\n+and apply that to WebLogic pods.  If you prefer, you can use the built-in `anyuid`\n+Security Context Constraint, but you should be aware that it provides more permissions\n+than are needed, and is therefore a less secure option.\n+\n+#### Create a custom Security Context Constraint\n+\n+To create a custom security context constraint, create a YAML file with the following\n+content.  This example assumes that your OpenShift project is called `weblogic` and\n+that the service account you will use to run the WebLogic Operator and domains\n+is called `weblogic-operator`.  You should change these\n+in the `groups` and `users` sections to match your environment.\n+\n+```yaml\n+kind: SecurityContextConstraints\n+apiVersion: v1\n+metadata:\n+  name: uid1000\n+allowHostDirVolumePlugin: false\n+allowHostIPC: false\n+allowHostNetwork: false\n+allowHostPID: false\n+allowHostPorts: false\n+allowPrivilegeEscalation: true\n+allowPrivilegedContainer: false\n+fsGroup:\n+  type: MustRunAs\n+groups:\n+- system:serviceaccounts:weblogic\n+readOnlyRootFilesystem: false\n+requiredDropCapabilities:\n+- KILL\n+- MKNOD\n+- SETUID\n+- SETGID\n+runAsUser:\n+  type: MustRunAs\n+  uid: 1000\n+seLinuxContext:\n+  type: MustRunAs\n+supplementalGroups:\n+  type: RunAsAny\n+users:\n+- system:serviceaccount:weblogic:weblogic-operator\n+volumes:\n+- configMap\n+- downwardAPI\n+- emptyDir\n+- persistentVolumeClaim\n+- projected\n+- secret\n+```\n+\n+Assuming you called that file `uid1000.yaml`, you can create the Security Context Constraint\n+using the following command:\n+\n+```bash\n+$ oc create -f uid1000.yaml\n+```\n+\n+After you have created the security context constraint, you can install the WebLogic Operator.\n+Make sure you use the same service account that you granted permission to in the security\n+context constraint (`weblogic-operator` in the example above).  The operator will then run", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33fe4dc4d51e83deb31f2d2b39dbd1b15dd73630"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MTQ3MjQ3OnYy", "diffSide": "RIGHT", "path": "docs-source/content/security/openshift.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzoyNjoyNlrOHl30CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzoyNjoyNlrOHl30CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ3MzgwMQ==", "bodyText": "Domain  -> domain", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2003#discussion_r509473801", "createdAt": "2020-10-21T17:26:26Z", "author": {"login": "rosemarymarano"}, "path": "docs-source/content/security/openshift.md", "diffHunk": "@@ -5,14 +5,111 @@ weight: 7\n description: \"OpenShift information for the operator\"\n ---\n \n-#### OpenShift `anyuid` security context\n-\n-The Docker images that Oracle publishes default to the container user\n-as `oracle`, which is UID `1000` and GID `1000`. When running the\n-Oracle images or layered images that retain the default user as\n-`oracle` with OpenShift, the `anyuid` security context constraint\n-is required to ensure proper access to the file system within the\n-Docker image. This means that the administrator must:\n+#### Security requirements to run WebLogic in OpenShift\n+\n+WebLogic Server Docker images obtained from Oracle Container Registry have an `oracle` user with\n+UID 1000 and it is in a group which is also called `oracle` and has GID 1000.\n+The WebLogic Kubernetes Operator Docker images use the same UID and GID.\n+\n+OpenShift, by default, allocates a high, random UID for each container and this\n+UID may not have the necessary permissions to run the programs in the container.\n+\n+Since August 2020, the standard WebLogic Server images that are published in\n+Oracle Container Registry set the file system group ownership to\n+allow the high UIDs allocated by OpenShift to have the necessary permissions.\n+\n+Here is an excerpt from a standard WebLogic [Dockerfile](https://github.com/oracle/docker-images/blob/master/OracleWebLogic/dockerfiles/12.2.1.4/Dockerfile.generic#L89)\n+that demonstrates how the file system group ownership is configured in the standard WebLogic images:\n+\n+```bash\n+# Setup filesystem and oracle user\n+# Adjust file permissions, go to /u01 as user 'oracle' to proceed with WLS installation\n+# ------------------------------------------------------------\n+RUN mkdir -p /u01 && \\\n+    chmod 775 /u01 && \\\n+    useradd -b /u01 -d /u01/oracle -m -s /bin/bash oracle && \\\n+    chown oracle:root /u01\n+\n+COPY --from=builder --chown=oracle:root /u01 /u01\n+```\n+\n+However, if you build your own image, or obtain an image from another source, it\n+may not have the necessary permissions.  You may need to configure similar file\n+system permissions to allow your image to work in OpenShift.\n+\n+Alternatively, you may choose to configure OpenShift to allow use of UID 1000.  This\n+can be done using a Security Context Constraint.  Oracle recommends that you define\n+a custom Security Context Constraint that has just the permissions that are required\n+and apply that to WebLogic pods.  If you prefer, you can use the built-in `anyuid`\n+Security Context Constraint, but you should be aware that it provides more permissions\n+than are needed, and is therefore a less secure option.\n+\n+#### Create a custom Security Context Constraint\n+\n+To create a custom security context constraint, create a YAML file with the following\n+content.  This example assumes that your OpenShift project is called `weblogic` and\n+that the service account you will use to run the WebLogic Operator and domains\n+is called `weblogic-operator`.  You should change these\n+in the `groups` and `users` sections to match your environment.\n+\n+```yaml\n+kind: SecurityContextConstraints\n+apiVersion: v1\n+metadata:\n+  name: uid1000\n+allowHostDirVolumePlugin: false\n+allowHostIPC: false\n+allowHostNetwork: false\n+allowHostPID: false\n+allowHostPorts: false\n+allowPrivilegeEscalation: true\n+allowPrivilegedContainer: false\n+fsGroup:\n+  type: MustRunAs\n+groups:\n+- system:serviceaccounts:weblogic\n+readOnlyRootFilesystem: false\n+requiredDropCapabilities:\n+- KILL\n+- MKNOD\n+- SETUID\n+- SETGID\n+runAsUser:\n+  type: MustRunAs\n+  uid: 1000\n+seLinuxContext:\n+  type: MustRunAs\n+supplementalGroups:\n+  type: RunAsAny\n+users:\n+- system:serviceaccount:weblogic:weblogic-operator\n+volumes:\n+- configMap\n+- downwardAPI\n+- emptyDir\n+- persistentVolumeClaim\n+- projected\n+- secret\n+```\n+\n+Assuming you called that file `uid1000.yaml`, you can create the Security Context Constraint\n+using the following command:\n+\n+```bash\n+$ oc create -f uid1000.yaml\n+```\n+\n+After you have created the security context constraint, you can install the WebLogic Operator.\n+Make sure you use the same service account that you granted permission to in the security\n+context constraint (`weblogic-operator` in the example above).  The operator will then run\n+with UID 1000, and any WebLogic Domain it creates will also run with UID 1000.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33fe4dc4d51e83deb31f2d2b39dbd1b15dd73630"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MTQ4NTY3OnYy", "diffSide": "RIGHT", "path": "docs-source/content/security/openshift.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzoyODo0MVrOHl39FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNzoyODo0MVrOHl39FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQ3NjExNg==", "bodyText": "however this security context constraint actually grants more permissions than are actually needed. -> you can remove both instances of \"actually\", or at a minimum, remove the latter one.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2003#discussion_r509476116", "createdAt": "2020-10-21T17:28:41Z", "author": {"login": "rosemarymarano"}, "path": "docs-source/content/security/openshift.md", "diffHunk": "@@ -5,14 +5,111 @@ weight: 7\n description: \"OpenShift information for the operator\"\n ---\n \n-#### OpenShift `anyuid` security context\n-\n-The Docker images that Oracle publishes default to the container user\n-as `oracle`, which is UID `1000` and GID `1000`. When running the\n-Oracle images or layered images that retain the default user as\n-`oracle` with OpenShift, the `anyuid` security context constraint\n-is required to ensure proper access to the file system within the\n-Docker image. This means that the administrator must:\n+#### Security requirements to run WebLogic in OpenShift\n+\n+WebLogic Server Docker images obtained from Oracle Container Registry have an `oracle` user with\n+UID 1000 and it is in a group which is also called `oracle` and has GID 1000.\n+The WebLogic Kubernetes Operator Docker images use the same UID and GID.\n+\n+OpenShift, by default, allocates a high, random UID for each container and this\n+UID may not have the necessary permissions to run the programs in the container.\n+\n+Since August 2020, the standard WebLogic Server images that are published in\n+Oracle Container Registry set the file system group ownership to\n+allow the high UIDs allocated by OpenShift to have the necessary permissions.\n+\n+Here is an excerpt from a standard WebLogic [Dockerfile](https://github.com/oracle/docker-images/blob/master/OracleWebLogic/dockerfiles/12.2.1.4/Dockerfile.generic#L89)\n+that demonstrates how the file system group ownership is configured in the standard WebLogic images:\n+\n+```bash\n+# Setup filesystem and oracle user\n+# Adjust file permissions, go to /u01 as user 'oracle' to proceed with WLS installation\n+# ------------------------------------------------------------\n+RUN mkdir -p /u01 && \\\n+    chmod 775 /u01 && \\\n+    useradd -b /u01 -d /u01/oracle -m -s /bin/bash oracle && \\\n+    chown oracle:root /u01\n+\n+COPY --from=builder --chown=oracle:root /u01 /u01\n+```\n+\n+However, if you build your own image, or obtain an image from another source, it\n+may not have the necessary permissions.  You may need to configure similar file\n+system permissions to allow your image to work in OpenShift.\n+\n+Alternatively, you may choose to configure OpenShift to allow use of UID 1000.  This\n+can be done using a Security Context Constraint.  Oracle recommends that you define\n+a custom Security Context Constraint that has just the permissions that are required\n+and apply that to WebLogic pods.  If you prefer, you can use the built-in `anyuid`\n+Security Context Constraint, but you should be aware that it provides more permissions\n+than are needed, and is therefore a less secure option.\n+\n+#### Create a custom Security Context Constraint\n+\n+To create a custom security context constraint, create a YAML file with the following\n+content.  This example assumes that your OpenShift project is called `weblogic` and\n+that the service account you will use to run the WebLogic Operator and domains\n+is called `weblogic-operator`.  You should change these\n+in the `groups` and `users` sections to match your environment.\n+\n+```yaml\n+kind: SecurityContextConstraints\n+apiVersion: v1\n+metadata:\n+  name: uid1000\n+allowHostDirVolumePlugin: false\n+allowHostIPC: false\n+allowHostNetwork: false\n+allowHostPID: false\n+allowHostPorts: false\n+allowPrivilegeEscalation: true\n+allowPrivilegedContainer: false\n+fsGroup:\n+  type: MustRunAs\n+groups:\n+- system:serviceaccounts:weblogic\n+readOnlyRootFilesystem: false\n+requiredDropCapabilities:\n+- KILL\n+- MKNOD\n+- SETUID\n+- SETGID\n+runAsUser:\n+  type: MustRunAs\n+  uid: 1000\n+seLinuxContext:\n+  type: MustRunAs\n+supplementalGroups:\n+  type: RunAsAny\n+users:\n+- system:serviceaccount:weblogic:weblogic-operator\n+volumes:\n+- configMap\n+- downwardAPI\n+- emptyDir\n+- persistentVolumeClaim\n+- projected\n+- secret\n+```\n+\n+Assuming you called that file `uid1000.yaml`, you can create the Security Context Constraint\n+using the following command:\n+\n+```bash\n+$ oc create -f uid1000.yaml\n+```\n+\n+After you have created the security context constraint, you can install the WebLogic Operator.\n+Make sure you use the same service account that you granted permission to in the security\n+context constraint (`weblogic-operator` in the example above).  The operator will then run\n+with UID 1000, and any WebLogic Domain it creates will also run with UID 1000.\n+\n+#### Use the `anyuid` Security Context Constraint\n+\n+The built-in `anyuid` security context constraint\n+will also ensure proper access to the file system within the\n+Docker image, however this security context constraint actually grants more permissions\n+than are actually needed. This means that the administrator must:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33fe4dc4d51e83deb31f2d2b39dbd1b15dd73630"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjI0NTA4OnYy", "diffSide": "RIGHT", "path": "docs-source/content/security/openshift.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNToxNzo0NlrOHmm_XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxODoxNDo1NFrOHmuHwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI0Njc0OA==", "bodyText": "This is no longer true. Now the images have user oracle that is part of the root group. We did this precisely so that the images would work better with OpenShift. I'm going to keep reading, but my guess is that much of the rest of this content is affected by this change. Looping in @mriccell.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2003#discussion_r510246748", "createdAt": "2020-10-22T15:17:46Z", "author": {"login": "rjeberhard"}, "path": "docs-source/content/security/openshift.md", "diffHunk": "@@ -5,14 +5,111 @@ weight: 7\n description: \"OpenShift information for the operator\"\n ---\n \n-#### OpenShift `anyuid` security context\n-\n-The Docker images that Oracle publishes default to the container user\n-as `oracle`, which is UID `1000` and GID `1000`. When running the\n-Oracle images or layered images that retain the default user as\n-`oracle` with OpenShift, the `anyuid` security context constraint\n-is required to ensure proper access to the file system within the\n-Docker image. This means that the administrator must:\n+#### Security requirements to run WebLogic in OpenShift\n+\n+WebLogic Server Docker images obtained from Oracle Container Registry have an `oracle` user with\n+UID 1000 and it is in a group, which is also called `oracle` and has GID 1000.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c535a2929c9b9d4a8283ffa6b374b14eb43cfec"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM2MzU4NQ==", "bodyText": "updated as discussed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2003#discussion_r510363585", "createdAt": "2020-10-22T18:14:54Z", "author": {"login": "markxnelson"}, "path": "docs-source/content/security/openshift.md", "diffHunk": "@@ -5,14 +5,111 @@ weight: 7\n description: \"OpenShift information for the operator\"\n ---\n \n-#### OpenShift `anyuid` security context\n-\n-The Docker images that Oracle publishes default to the container user\n-as `oracle`, which is UID `1000` and GID `1000`. When running the\n-Oracle images or layered images that retain the default user as\n-`oracle` with OpenShift, the `anyuid` security context constraint\n-is required to ensure proper access to the file system within the\n-Docker image. This means that the administrator must:\n+#### Security requirements to run WebLogic in OpenShift\n+\n+WebLogic Server Docker images obtained from Oracle Container Registry have an `oracle` user with\n+UID 1000 and it is in a group, which is also called `oracle` and has GID 1000.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI0Njc0OA=="}, "originalCommit": {"oid": "6c535a2929c9b9d4a8283ffa6b374b14eb43cfec"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3863, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}