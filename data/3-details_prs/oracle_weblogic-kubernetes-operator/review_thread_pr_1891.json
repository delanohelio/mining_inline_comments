{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1NjYzMTM1", "number": 1891, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxODo1Mzo1N1rOEebT2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxOToxNzoyNVrOEfC6lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzQwMTg0OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/TestConstants.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxODo1Mzo1N1rOHKEoSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzo0MzowOVrOHKN6sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyMzY1OQ==", "bodyText": "any specific reason for using version in the constant name? can it be APACHE_IMAGE_NAME so that the constant name doesn't need to be changed if the version is different?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1891#discussion_r480323659", "createdAt": "2020-08-31T18:53:57Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/TestConstants.java", "diffHunk": "@@ -93,7 +93,12 @@\n   public static final String VOYAGER_CHART_NAME = \"voyager\";\n   public static final String VOYAGER_CHART_VERSION = \"12.0.0\";\n \n-  // ELK Stack and WebLogic Logging Exporter constants\n+  // Apache constants\n+  public static final String APACHE_IMAGE_12213 = \"phx.ocir.io/weblogick8s/oracle/apache:12.2.1.3\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ad4a3b108e424b2af503db7540e071621dca7c2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3NTgyNg==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1891#discussion_r480475826", "createdAt": "2020-08-31T23:43:09Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/TestConstants.java", "diffHunk": "@@ -93,7 +93,12 @@\n   public static final String VOYAGER_CHART_NAME = \"voyager\";\n   public static final String VOYAGER_CHART_VERSION = \"12.0.0\";\n \n-  // ELK Stack and WebLogic Logging Exporter constants\n+  // Apache constants\n+  public static final String APACHE_IMAGE_12213 = \"phx.ocir.io/weblogick8s/oracle/apache:12.2.1.3\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMyMzY1OQ=="}, "originalCommit": {"oid": "9ad4a3b108e424b2af503db7540e071621dca7c2"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzUyOTgwOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTwoDomainsLoadBalancers.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOToyMjoxNFrOHKF1WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzo0MzoxN1rOHKN60g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM0MzM4NA==", "bodyText": "log a message, logger.info(\"curl request {0}\", curlRequest);", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1891#discussion_r480343384", "createdAt": "2020-08-31T19:22:14Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTwoDomainsLoadBalancers.java", "diffHunk": "@@ -1308,34 +1443,25 @@ private void verifyClusterLoadbalancing(String domainUid, String protocol, int l\n     // verify each managed server can see other member in the cluster\n     verifyServerCommunication(curlRequest, managedServers);\n \n-    boolean hostRouting = false;\n-    //access application in managed servers through Traefik load balancer and bind domain in the JNDI tree\n+    boolean containsCorrectDomainUid = false;\n     logger.info(\"Verifying the requests are routed to correct domain and cluster\");\n-    String curlCmd = String.format(\"curl --silent --show-error -ks --noproxy '*' \"\n-            + \"-H 'host: %s' %s://%s:%s/clusterview/ClusterViewServlet\"\n-            + \"\\\"?user=\" + ADMIN_USERNAME_DEFAULT\n-            + \"&password=\" + ADMIN_PASSWORD_DEFAULT + \"\\\"\",\n-        domainUid + \".\" + defaultNamespace + \".\" + \"cluster-1.test\", protocol, K8S_NODEPORT_HOST, lbPort, domainUid);\n-\n-    // call the webapp and verify the bound domain name to determine\n-    // the requests are sent to the correct cluster members.\n     for (int i = 0; i < 10; i++) {\n       ExecResult result;\n       try {\n-        logger.info(curlCmd);\n-        result = ExecCommand.exec(curlCmd, true);\n+        logger.info(curlRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ad4a3b108e424b2af503db7540e071621dca7c2"}, "originalPosition": 406}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3NTg1OA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1891#discussion_r480475858", "createdAt": "2020-08-31T23:43:17Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTwoDomainsLoadBalancers.java", "diffHunk": "@@ -1308,34 +1443,25 @@ private void verifyClusterLoadbalancing(String domainUid, String protocol, int l\n     // verify each managed server can see other member in the cluster\n     verifyServerCommunication(curlRequest, managedServers);\n \n-    boolean hostRouting = false;\n-    //access application in managed servers through Traefik load balancer and bind domain in the JNDI tree\n+    boolean containsCorrectDomainUid = false;\n     logger.info(\"Verifying the requests are routed to correct domain and cluster\");\n-    String curlCmd = String.format(\"curl --silent --show-error -ks --noproxy '*' \"\n-            + \"-H 'host: %s' %s://%s:%s/clusterview/ClusterViewServlet\"\n-            + \"\\\"?user=\" + ADMIN_USERNAME_DEFAULT\n-            + \"&password=\" + ADMIN_PASSWORD_DEFAULT + \"\\\"\",\n-        domainUid + \".\" + defaultNamespace + \".\" + \"cluster-1.test\", protocol, K8S_NODEPORT_HOST, lbPort, domainUid);\n-\n-    // call the webapp and verify the bound domain name to determine\n-    // the requests are sent to the correct cluster members.\n     for (int i = 0; i < 10; i++) {\n       ExecResult result;\n       try {\n-        logger.info(curlCmd);\n-        result = ExecCommand.exec(curlCmd, true);\n+        logger.info(curlRequest);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM0MzM4NA=="}, "originalCommit": {"oid": "9ad4a3b108e424b2af503db7540e071621dca7c2"}, "originalPosition": 406}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzU3ODE3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTwoDomainsLoadBalancers.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTozMDoyMVrOHKGSow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzo0MzozMFrOHKN7CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM1MDg4Mw==", "bodyText": "what is default sample?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1891#discussion_r480350883", "createdAt": "2020-08-31T19:30:21Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTwoDomainsLoadBalancers.java", "diffHunk": "@@ -412,7 +469,43 @@ public void testVoyagerHostHttpRoutingAcrossDomains() {\n     logger.info(\"Verifying http traffic\");\n     for (String domainUid : domainUids) {\n       String ingressName = domainUid + \"-ingress-host-routing\";\n-      verifyClusterLoadbalancing(domainUid, \"http\", getVoyagerLbNodePort(ingressName));\n+      verifyClusterLoadbalancing(domainUid, defaultNamespace, \"http\", getVoyagerLbNodePort(ingressName),\n+          replicaCount, true, \"\");\n+    }\n+  }\n+\n+  /**\n+   * Verify Apache load balancer default sample through HTTP channel.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ad4a3b108e424b2af503db7540e071621dca7c2"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3NTkxMg==", "bodyText": "added more doc", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1891#discussion_r480475912", "createdAt": "2020-08-31T23:43:30Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTwoDomainsLoadBalancers.java", "diffHunk": "@@ -412,7 +469,43 @@ public void testVoyagerHostHttpRoutingAcrossDomains() {\n     logger.info(\"Verifying http traffic\");\n     for (String domainUid : domainUids) {\n       String ingressName = domainUid + \"-ingress-host-routing\";\n-      verifyClusterLoadbalancing(domainUid, \"http\", getVoyagerLbNodePort(ingressName));\n+      verifyClusterLoadbalancing(domainUid, defaultNamespace, \"http\", getVoyagerLbNodePort(ingressName),\n+          replicaCount, true, \"\");\n+    }\n+  }\n+\n+  /**\n+   * Verify Apache load balancer default sample through HTTP channel.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM1MDg4Mw=="}, "originalCommit": {"oid": "9ad4a3b108e424b2af503db7540e071621dca7c2"}, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzU4MDMyOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTwoDomainsLoadBalancers.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTozMDo0NVrOHKGT9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzo0MzozOVrOHKN7Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM1MTIyMQ==", "bodyText": "what is custom sample? explain the use case", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1891#discussion_r480351221", "createdAt": "2020-08-31T19:30:45Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTwoDomainsLoadBalancers.java", "diffHunk": "@@ -412,7 +469,43 @@ public void testVoyagerHostHttpRoutingAcrossDomains() {\n     logger.info(\"Verifying http traffic\");\n     for (String domainUid : domainUids) {\n       String ingressName = domainUid + \"-ingress-host-routing\";\n-      verifyClusterLoadbalancing(domainUid, \"http\", getVoyagerLbNodePort(ingressName));\n+      verifyClusterLoadbalancing(domainUid, defaultNamespace, \"http\", getVoyagerLbNodePort(ingressName),\n+          replicaCount, true, \"\");\n+    }\n+  }\n+\n+  /**\n+   * Verify Apache load balancer default sample through HTTP channel.\n+   */\n+  @Order(8)\n+  @Test\n+  @DisplayName(\"verify Apache load balancer default sample through HTTP channel\")\n+  public void testApacheDefaultSample() {\n+\n+    // verify Apache default sample\n+    logger.info(\"Verifying Apache default sample\");\n+    int httpNodePort = getApacheNodePort(domain1Namespace, \"http\");\n+    verifyClusterLoadbalancing(domain1Uid, domain1Namespace, \"http\", httpNodePort, 3, false, \"/weblogic\");\n+  }\n+\n+  /**\n+   * Verify Apache load balancer custom sample through HTTP and HTTPS channel.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ad4a3b108e424b2af503db7540e071621dca7c2"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3NTk2Mg==", "bodyText": "added more doc", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1891#discussion_r480475962", "createdAt": "2020-08-31T23:43:39Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTwoDomainsLoadBalancers.java", "diffHunk": "@@ -412,7 +469,43 @@ public void testVoyagerHostHttpRoutingAcrossDomains() {\n     logger.info(\"Verifying http traffic\");\n     for (String domainUid : domainUids) {\n       String ingressName = domainUid + \"-ingress-host-routing\";\n-      verifyClusterLoadbalancing(domainUid, \"http\", getVoyagerLbNodePort(ingressName));\n+      verifyClusterLoadbalancing(domainUid, defaultNamespace, \"http\", getVoyagerLbNodePort(ingressName),\n+          replicaCount, true, \"\");\n+    }\n+  }\n+\n+  /**\n+   * Verify Apache load balancer default sample through HTTP channel.\n+   */\n+  @Order(8)\n+  @Test\n+  @DisplayName(\"verify Apache load balancer default sample through HTTP channel\")\n+  public void testApacheDefaultSample() {\n+\n+    // verify Apache default sample\n+    logger.info(\"Verifying Apache default sample\");\n+    int httpNodePort = getApacheNodePort(domain1Namespace, \"http\");\n+    verifyClusterLoadbalancing(domain1Uid, domain1Namespace, \"http\", httpNodePort, 3, false, \"/weblogic\");\n+  }\n+\n+  /**\n+   * Verify Apache load balancer custom sample through HTTP and HTTPS channel.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM1MTIyMQ=="}, "originalCommit": {"oid": "9ad4a3b108e424b2af503db7540e071621dca7c2"}, "originalPosition": 209}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMzYxMjY2OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTozODo0MlrOHKGoGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQyMzo0NDoxNVrOHKN78g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM1NjM3Nw==", "bodyText": "are these values going to be replaced?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1891#discussion_r480356377", "createdAt": "2020-08-31T19:38:42Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "diffHunk": "@@ -605,6 +612,172 @@ public static HelmParams installAndVerifyVoyager(String voyagerNamespace,\n     return voyagerHelmParams;\n   }\n \n+  /**\n+   * Install Apache and wait up to five minutes until the Apache pod is ready.\n+   *\n+   * @param apacheNamespace the namespace in which the Apache will be installed\n+   * @param image the image name of Apache webtier\n+   * @param httpNodePort the http nodeport of Apache\n+   * @param httpsNodePort the https nodeport of Apache\n+   * @param domainUid the uid of the domain to which Apache will route the services\n+   * @return the Apache Helm installation parameters\n+   */\n+  public static HelmParams installAndVerifyApache(String apacheNamespace,\n+                                                  String image,\n+                                                  int httpNodePort,\n+                                                  int httpsNodePort,\n+                                                  String domainUid) throws IOException {\n+    return installAndVerifyApache(apacheNamespace, image, httpNodePort, httpsNodePort, domainUid,\n+        null, null, null);\n+  }\n+\n+  /**\n+   * Install Apache and wait up to five minutes until the Apache pod is ready.\n+   *\n+   * @param apacheNamespace the namespace in which the Apache will be installed\n+   * @param image the image name of Apache webtier\n+   * @param httpNodePort the http nodeport of Apache\n+   * @param httpsNodePort the https nodeport of Apache\n+   * @param domainUid the uid of the domain to which Apache will route the services\n+   * @param volumePath the path to put your own custom_mod_wl_apache.conf file\n+   * @param virtualHostName the VirtualHostName of the Apache HTTP server which is used to enable custom SSL config\n+   * @param clusterNamePortMap the map with clusterName as key and cluster port number as value\n+   * @return the Apache Helm installation parameters\n+   */\n+  public static HelmParams installAndVerifyApache(String apacheNamespace,\n+                                                  String image,\n+                                                  int httpNodePort,\n+                                                  int httpsNodePort,\n+                                                  String domainUid,\n+                                                  String volumePath,\n+                                                  String virtualHostName,\n+                                                  LinkedHashMap<String, String> clusterNamePortMap)\n+      throws IOException {\n+\n+    LoggingFacade logger = getLogger();\n+\n+    // Create Docker registry secret in the apache namespace to pull the Apache webtier image from repository\n+    if (!secretExists(REPO_SECRET_NAME, apacheNamespace)) {\n+      logger.info(\"Creating Docker registry secret in namespace {0}\", apacheNamespace);\n+      createDockerRegistrySecret(apacheNamespace);\n+    }\n+\n+    // map with secret\n+    Map<String, Object> secretNameMap = new HashMap<>();\n+    secretNameMap.put(\"name\", REPO_SECRET_NAME);\n+\n+    // Helm install parameters\n+    HelmParams apacheHelmParams = new HelmParams()\n+        .releaseName(APACHE_RELEASE_NAME + \"-\" + apacheNamespace.substring(3))\n+        .namespace(apacheNamespace)\n+        .chartDir(APACHE_SAMPLE_CHART_DIR);\n+\n+    // Apache chart values to override\n+    ApacheParams apacheParams = new ApacheParams()\n+        .helmParams(apacheHelmParams)\n+        .imagePullSecrets(secretNameMap)\n+        .image(image)\n+        .imagePullPolicy(\"Always\")\n+        .domainUID(domainUid);\n+\n+    if (httpNodePort >= 0 && httpsNodePort >= 0) {\n+      apacheParams\n+          .httpNodePort(httpNodePort)\n+          .httpsNodePort(httpsNodePort);\n+    }\n+\n+    if (volumePath != null && clusterNamePortMap != null) {\n+      // create a custom Apache plugin configuration file named custom_mod_wl_apache.conf\n+      Path customConf = Paths.get(volumePath, \"custom_mod_wl_apache.conf\");\n+      ArrayList<String> lines = new ArrayList<>();\n+      lines.add(\"<IfModule mod_weblogic.c>\");\n+      lines.add(\"WebLogicHost ${WEBLOGIC_HOST}\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ad4a3b108e424b2af503db7540e071621dca7c2"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM1Njg3NA==", "bodyText": "add more comments in this method to explain how it works", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1891#discussion_r480356874", "createdAt": "2020-08-31T19:39:44Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "diffHunk": "@@ -605,6 +612,172 @@ public static HelmParams installAndVerifyVoyager(String voyagerNamespace,\n     return voyagerHelmParams;\n   }\n \n+  /**\n+   * Install Apache and wait up to five minutes until the Apache pod is ready.\n+   *\n+   * @param apacheNamespace the namespace in which the Apache will be installed\n+   * @param image the image name of Apache webtier\n+   * @param httpNodePort the http nodeport of Apache\n+   * @param httpsNodePort the https nodeport of Apache\n+   * @param domainUid the uid of the domain to which Apache will route the services\n+   * @return the Apache Helm installation parameters\n+   */\n+  public static HelmParams installAndVerifyApache(String apacheNamespace,\n+                                                  String image,\n+                                                  int httpNodePort,\n+                                                  int httpsNodePort,\n+                                                  String domainUid) throws IOException {\n+    return installAndVerifyApache(apacheNamespace, image, httpNodePort, httpsNodePort, domainUid,\n+        null, null, null);\n+  }\n+\n+  /**\n+   * Install Apache and wait up to five minutes until the Apache pod is ready.\n+   *\n+   * @param apacheNamespace the namespace in which the Apache will be installed\n+   * @param image the image name of Apache webtier\n+   * @param httpNodePort the http nodeport of Apache\n+   * @param httpsNodePort the https nodeport of Apache\n+   * @param domainUid the uid of the domain to which Apache will route the services\n+   * @param volumePath the path to put your own custom_mod_wl_apache.conf file\n+   * @param virtualHostName the VirtualHostName of the Apache HTTP server which is used to enable custom SSL config\n+   * @param clusterNamePortMap the map with clusterName as key and cluster port number as value\n+   * @return the Apache Helm installation parameters\n+   */\n+  public static HelmParams installAndVerifyApache(String apacheNamespace,\n+                                                  String image,\n+                                                  int httpNodePort,\n+                                                  int httpsNodePort,\n+                                                  String domainUid,\n+                                                  String volumePath,\n+                                                  String virtualHostName,\n+                                                  LinkedHashMap<String, String> clusterNamePortMap)\n+      throws IOException {\n+\n+    LoggingFacade logger = getLogger();\n+\n+    // Create Docker registry secret in the apache namespace to pull the Apache webtier image from repository\n+    if (!secretExists(REPO_SECRET_NAME, apacheNamespace)) {\n+      logger.info(\"Creating Docker registry secret in namespace {0}\", apacheNamespace);\n+      createDockerRegistrySecret(apacheNamespace);\n+    }\n+\n+    // map with secret\n+    Map<String, Object> secretNameMap = new HashMap<>();\n+    secretNameMap.put(\"name\", REPO_SECRET_NAME);\n+\n+    // Helm install parameters\n+    HelmParams apacheHelmParams = new HelmParams()\n+        .releaseName(APACHE_RELEASE_NAME + \"-\" + apacheNamespace.substring(3))\n+        .namespace(apacheNamespace)\n+        .chartDir(APACHE_SAMPLE_CHART_DIR);\n+\n+    // Apache chart values to override\n+    ApacheParams apacheParams = new ApacheParams()\n+        .helmParams(apacheHelmParams)\n+        .imagePullSecrets(secretNameMap)\n+        .image(image)\n+        .imagePullPolicy(\"Always\")\n+        .domainUID(domainUid);\n+\n+    if (httpNodePort >= 0 && httpsNodePort >= 0) {\n+      apacheParams\n+          .httpNodePort(httpNodePort)\n+          .httpsNodePort(httpsNodePort);\n+    }\n+\n+    if (volumePath != null && clusterNamePortMap != null) {\n+      // create a custom Apache plugin configuration file named custom_mod_wl_apache.conf\n+      Path customConf = Paths.get(volumePath, \"custom_mod_wl_apache.conf\");\n+      ArrayList<String> lines = new ArrayList<>();\n+      lines.add(\"<IfModule mod_weblogic.c>\");\n+      lines.add(\"WebLogicHost ${WEBLOGIC_HOST}\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM1NjM3Nw=="}, "originalCommit": {"oid": "9ad4a3b108e424b2af503db7540e071621dca7c2"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3NjE0Ng==", "bodyText": "this is not going to be replaced.\nAlso added more comments in the code.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1891#discussion_r480476146", "createdAt": "2020-08-31T23:44:15Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "diffHunk": "@@ -605,6 +612,172 @@ public static HelmParams installAndVerifyVoyager(String voyagerNamespace,\n     return voyagerHelmParams;\n   }\n \n+  /**\n+   * Install Apache and wait up to five minutes until the Apache pod is ready.\n+   *\n+   * @param apacheNamespace the namespace in which the Apache will be installed\n+   * @param image the image name of Apache webtier\n+   * @param httpNodePort the http nodeport of Apache\n+   * @param httpsNodePort the https nodeport of Apache\n+   * @param domainUid the uid of the domain to which Apache will route the services\n+   * @return the Apache Helm installation parameters\n+   */\n+  public static HelmParams installAndVerifyApache(String apacheNamespace,\n+                                                  String image,\n+                                                  int httpNodePort,\n+                                                  int httpsNodePort,\n+                                                  String domainUid) throws IOException {\n+    return installAndVerifyApache(apacheNamespace, image, httpNodePort, httpsNodePort, domainUid,\n+        null, null, null);\n+  }\n+\n+  /**\n+   * Install Apache and wait up to five minutes until the Apache pod is ready.\n+   *\n+   * @param apacheNamespace the namespace in which the Apache will be installed\n+   * @param image the image name of Apache webtier\n+   * @param httpNodePort the http nodeport of Apache\n+   * @param httpsNodePort the https nodeport of Apache\n+   * @param domainUid the uid of the domain to which Apache will route the services\n+   * @param volumePath the path to put your own custom_mod_wl_apache.conf file\n+   * @param virtualHostName the VirtualHostName of the Apache HTTP server which is used to enable custom SSL config\n+   * @param clusterNamePortMap the map with clusterName as key and cluster port number as value\n+   * @return the Apache Helm installation parameters\n+   */\n+  public static HelmParams installAndVerifyApache(String apacheNamespace,\n+                                                  String image,\n+                                                  int httpNodePort,\n+                                                  int httpsNodePort,\n+                                                  String domainUid,\n+                                                  String volumePath,\n+                                                  String virtualHostName,\n+                                                  LinkedHashMap<String, String> clusterNamePortMap)\n+      throws IOException {\n+\n+    LoggingFacade logger = getLogger();\n+\n+    // Create Docker registry secret in the apache namespace to pull the Apache webtier image from repository\n+    if (!secretExists(REPO_SECRET_NAME, apacheNamespace)) {\n+      logger.info(\"Creating Docker registry secret in namespace {0}\", apacheNamespace);\n+      createDockerRegistrySecret(apacheNamespace);\n+    }\n+\n+    // map with secret\n+    Map<String, Object> secretNameMap = new HashMap<>();\n+    secretNameMap.put(\"name\", REPO_SECRET_NAME);\n+\n+    // Helm install parameters\n+    HelmParams apacheHelmParams = new HelmParams()\n+        .releaseName(APACHE_RELEASE_NAME + \"-\" + apacheNamespace.substring(3))\n+        .namespace(apacheNamespace)\n+        .chartDir(APACHE_SAMPLE_CHART_DIR);\n+\n+    // Apache chart values to override\n+    ApacheParams apacheParams = new ApacheParams()\n+        .helmParams(apacheHelmParams)\n+        .imagePullSecrets(secretNameMap)\n+        .image(image)\n+        .imagePullPolicy(\"Always\")\n+        .domainUID(domainUid);\n+\n+    if (httpNodePort >= 0 && httpsNodePort >= 0) {\n+      apacheParams\n+          .httpNodePort(httpNodePort)\n+          .httpsNodePort(httpsNodePort);\n+    }\n+\n+    if (volumePath != null && clusterNamePortMap != null) {\n+      // create a custom Apache plugin configuration file named custom_mod_wl_apache.conf\n+      Path customConf = Paths.get(volumePath, \"custom_mod_wl_apache.conf\");\n+      ArrayList<String> lines = new ArrayList<>();\n+      lines.add(\"<IfModule mod_weblogic.c>\");\n+      lines.add(\"WebLogicHost ${WEBLOGIC_HOST}\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM1NjM3Nw=="}, "originalCommit": {"oid": "9ad4a3b108e424b2af503db7540e071621dca7c2"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTY4NTI4OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTwoDomainsLoadBalancers.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyMToxNlrOHLC0Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyMToxNlrOHLC0Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MjU1OA==", "bodyText": "We should not put any open ended question in the  test description, rather says for fin cluster we need to follow these steps.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1891#discussion_r481342558", "createdAt": "2020-09-01T18:21:16Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItTwoDomainsLoadBalancers.java", "diffHunk": "@@ -244,6 +256,34 @@ public static void initAll(@Namespaces(6) List<String> namespaces) {\n       logger.info(\"Using image {0}\", kindRepoImage);\n       image = kindRepoImage;\n       isUseSecret = false;\n+\n+      // We do not know why the kind clusters can't pull Apache webtier image from OCIR using the image pull secret.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39e5e8fb9a54cf744d8b255d3dbaf05e3d3375a8"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTcwMTkyOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/extensions/ImageBuilders.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyNjoyMlrOHLC_DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo0MDowOVrOHLDcOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0NTI5Mw==", "bodyText": "Do not put open ended question in description on publicly available class.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1891#discussion_r481345293", "createdAt": "2020-09-01T18:26:22Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/extensions/ImageBuilders.java", "diffHunk": "@@ -133,6 +135,44 @@ public void beforeAll(ExtensionContext context) {\n         assertFalse(operatorImage.isEmpty(), \"Image name can not be empty\");\n         assertTrue(Operator.buildImage(operatorImage), \"docker build failed for Operator\");\n \n+        // docker login to OCR if OCR_USERNAME and OCR_PASSWORD is provided in env var\n+        if (!OCR_USERNAME.equals(REPO_DUMMY_VALUE)) {\n+          withStandardRetryPolicy\n+              .conditionEvaluationListener(\n+                  condition -> logger.info(\"Waiting for docker login to be successful\"\n+                          + \"(elapsed time {0} ms, remaining time {1} ms)\",\n+                      condition.getElapsedTimeInMS(),\n+                      condition.getRemainingTimeInMS()))\n+              .until(() -> dockerLogin(OCR_REGISTRY, OCR_USERNAME, OCR_PASSWORD));\n+        }\n+\n+        // The following code is for pulling WLS images if running tests in Kind cluster\n+        if (KIND_REPO != null) {\n+          // We can't figure out why the kind clusters can't pull images from OCR using the image pull secret. There", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39e5e8fb9a54cf744d8b255d3dbaf05e3d3375a8"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1Mjc2MA==", "bodyText": "This was added by Ryan. @xiancao please change the wording to\nkind clusters can't pull the images from OCR using the image pull secret....", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1891#discussion_r481352760", "createdAt": "2020-09-01T18:40:09Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/extensions/ImageBuilders.java", "diffHunk": "@@ -133,6 +135,44 @@ public void beforeAll(ExtensionContext context) {\n         assertFalse(operatorImage.isEmpty(), \"Image name can not be empty\");\n         assertTrue(Operator.buildImage(operatorImage), \"docker build failed for Operator\");\n \n+        // docker login to OCR if OCR_USERNAME and OCR_PASSWORD is provided in env var\n+        if (!OCR_USERNAME.equals(REPO_DUMMY_VALUE)) {\n+          withStandardRetryPolicy\n+              .conditionEvaluationListener(\n+                  condition -> logger.info(\"Waiting for docker login to be successful\"\n+                          + \"(elapsed time {0} ms, remaining time {1} ms)\",\n+                      condition.getElapsedTimeInMS(),\n+                      condition.getRemainingTimeInMS()))\n+              .until(() -> dockerLogin(OCR_REGISTRY, OCR_USERNAME, OCR_PASSWORD));\n+        }\n+\n+        // The following code is for pulling WLS images if running tests in Kind cluster\n+        if (KIND_REPO != null) {\n+          // We can't figure out why the kind clusters can't pull images from OCR using the image pull secret. There", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0NTI5Mw=="}, "originalCommit": {"oid": "39e5e8fb9a54cf744d8b255d3dbaf05e3d3375a8"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTg5MDc2OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/extensions/ImageBuilders.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxOToxNzoyNVrOHLE0PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxOToxNzoyNVrOHLE0PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3NTI5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      // The kind clusters can't pull images from OCR using the image pull secret. \n          \n          \n            \n                      // The kind clusters can't pull images from OCR using the image pull secret. It may be a containerd bug, we are going to workaround the issue", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1891#discussion_r481375292", "createdAt": "2020-09-01T19:17:25Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/extensions/ImageBuilders.java", "diffHunk": "@@ -148,8 +148,7 @@ public void beforeAll(ExtensionContext context) {\n \n         // The following code is for pulling WLS images if running tests in Kind cluster\n         if (KIND_REPO != null) {\n-          // We can't figure out why the kind clusters can't pull images from OCR using the image pull secret. There\n-          // is some evidence it may be a containerd bug. Therefore, we are going to \"give up\" and workaround the issue.\n+          // The kind clusters can't pull images from OCR using the image pull secret. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69c7c22d25b7481ee49227db9d22e39727a784f0"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3913, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}