{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3NzgwODYy", "number": 2075, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNDo0Nzo1NVrOE_L9JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMjoyMDoxM1rOE_a9GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NjkxNjIwOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNDo0Nzo1NVrOH8wTew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNzo1OToyNFrOH85H7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ2ODAyNw==", "bodyText": "Also verify startServer.sh can not start the admin server.  Invoke the script after shutting down the admin server thru parch command.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r533468027", "createdAt": "2020-12-01T14:47:55Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -252,7 +280,8 @@ public void beforeEach() {\n    * Make sure that Only the Administration server is stopped. \n    * Restart the Administration server by patching the resource definition with \n    *  spec/adminServer/serverStartPolicy set to IF_NEEDED.\n-   * Make sure that the Administration server is in RUNNING state. \n+   * Make sure that the Administration server is in RUNNING state.\n+   * Verify that the sample script, stopServer.sh can not shutdown admin server", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c3df9ba24c4905a523bafdaf056b26771ce1b6f"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYxMjUyNg==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r533612526", "createdAt": "2020-12-01T17:59:24Z", "author": {"login": "hzhao-github"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -252,7 +280,8 @@ public void beforeEach() {\n    * Make sure that Only the Administration server is stopped. \n    * Restart the Administration server by patching the resource definition with \n    *  spec/adminServer/serverStartPolicy set to IF_NEEDED.\n-   * Make sure that the Administration server is in RUNNING state. \n+   * Make sure that the Administration server is in RUNNING state.\n+   * Verify that the sample script, stopServer.sh can not shutdown admin server", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ2ODAyNw=="}, "originalCommit": {"oid": "7c3df9ba24c4905a523bafdaf056b26771ce1b6f"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Njk0MjAxOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNDo1MTo1NlrOH8wjlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMToyMjo1NlrOH9ASZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ3MjE0OQ==", "bodyText": "Can we move this common utility setupSample()  to beforeAll() method of the class.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r533472149", "createdAt": "2020-12-01T14:51:56Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -291,15 +320,23 @@ public void testAdminServerRestart() {\n     checkPodReadyAndServiceExists(adminServerPodName, \n             domainUid, domainNamespace);\n     logger.info(\"AdminServer restart success\");\n+\n+    //copy the samples directory to a temporary location\n+    setupSample();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c3df9ba24c4905a523bafdaf056b26771ce1b6f"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcyOTg5Mw==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r533729893", "createdAt": "2020-12-01T21:22:56Z", "author": {"login": "hzhao-github"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -291,15 +320,23 @@ public void testAdminServerRestart() {\n     checkPodReadyAndServiceExists(adminServerPodName, \n             domainUid, domainNamespace);\n     logger.info(\"AdminServer restart success\");\n+\n+    //copy the samples directory to a temporary location\n+    setupSample();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ3MjE0OQ=="}, "originalCommit": {"oid": "7c3df9ba24c4905a523bafdaf056b26771ce1b6f"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Njk4Nzg4OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNTowMDo1NFrOH8xAEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNzo1OTo0MFrOH85InQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ3OTQ0MQ==", "bodyText": "Remove the line#460:  logger.info(\"!!! Domain shutdown (NEVER) success !!!\");\nModify the line #492 logger.info(\"!!! Domain restart (IF_NEEDED) success !!!\"); into\nlogger.info(\"startDomain.sh successfully started the domain\");", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r533479441", "createdAt": "2020-12-01T15:00:54Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -400,8 +443,12 @@ public void testDomainRestart() {\n     String configServerPodName = domainUid + \"-config-cluster-server1\";\n     String standaloneServerPodName = domainUid + \"-standalone-managed\";\n \n-    patchServerStartPolicy(\"/spec/serverStartPolicy\", \"NEVER\");\n-    logger.info(\"Domain is patched to stop entire WebLogic domain\");\n+    //copy the samples directory to a temporary location\n+    setupSample();\n+\n+    // Verify all WebLogic server instance pods are shut down after stopDomain script execution\n+    logger.info(\"Stop entire WebLogic domain using the script\");\n+    executeLifecycleScript(STOP_DOMAIN_SCRIPT, DOMAIN, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c3df9ba24c4905a523bafdaf056b26771ce1b6f"}, "originalPosition": 237}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYxMjcwMQ==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r533612701", "createdAt": "2020-12-01T17:59:40Z", "author": {"login": "hzhao-github"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -400,8 +443,12 @@ public void testDomainRestart() {\n     String configServerPodName = domainUid + \"-config-cluster-server1\";\n     String standaloneServerPodName = domainUid + \"-standalone-managed\";\n \n-    patchServerStartPolicy(\"/spec/serverStartPolicy\", \"NEVER\");\n-    logger.info(\"Domain is patched to stop entire WebLogic domain\");\n+    //copy the samples directory to a temporary location\n+    setupSample();\n+\n+    // Verify all WebLogic server instance pods are shut down after stopDomain script execution\n+    logger.info(\"Stop entire WebLogic domain using the script\");\n+    executeLifecycleScript(STOP_DOMAIN_SCRIPT, DOMAIN, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ3OTQ0MQ=="}, "originalCommit": {"oid": "7c3df9ba24c4905a523bafdaf056b26771ce1b6f"}, "originalPosition": 237}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzE5MDY0OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNTo0MToxNVrOH8y96A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNzo1NzoxMFrOH85CUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUxMTY1Ng==", "bodyText": "Line # 496 Modify the line \"Add a second managed server\" to \"The domain custom resource has a second configured manged server with serverStartPolicy IF_NEEDED.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r533511656", "createdAt": "2020-12-01T15:41:15Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -454,29 +500,39 @@ public void testDomainRestart() {\n    * by patching the resource definition with \n    *  spec/managedServers/1/serverStartPolicy set to ALWAYS.\n    * Make sure that managed server config-cluster-server2 is up and running\n+   * Verify that if server start policy is ALWAYS and the server is selected", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c3df9ba24c4905a523bafdaf056b26771ce1b6f"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUxNzc0MQ==", "bodyText": "The purpose of this method testConfigClusterStartServerUsingAlways\nMake sure when the serverStartPolicy is set to ALWAYS, it overrides the replica count. It means Operator always start the server.  On the other hand,  IF_NEEDED serverStartPolicy is constrained by replica count.\nSo in this usecases, we need not use the start/stop server script.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r533517741", "createdAt": "2020-12-01T15:48:42Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -454,29 +500,39 @@ public void testDomainRestart() {\n    * by patching the resource definition with \n    *  spec/managedServers/1/serverStartPolicy set to ALWAYS.\n    * Make sure that managed server config-cluster-server2 is up and running\n+   * Verify that if server start policy is ALWAYS and the server is selected", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUxMTY1Ng=="}, "originalCommit": {"oid": "7c3df9ba24c4905a523bafdaf056b26771ce1b6f"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYxMTA5MQ==", "bodyText": "I understand that. That's why I just inserted\nString result = executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName);\nassertTrue(result.contains(\"No changes needed\"), \"startServer.sh shouldn't make changes\");\n\nto\n// Verify that if server start policy is ALWAYS and the server is selected\n// to start based on the replica count, it means that server is already started or is\n// in the process of starting. In this case, script exits without making any changes.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r533611091", "createdAt": "2020-12-01T17:57:10Z", "author": {"login": "hzhao-github"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -454,29 +500,39 @@ public void testDomainRestart() {\n    * by patching the resource definition with \n    *  spec/managedServers/1/serverStartPolicy set to ALWAYS.\n    * Make sure that managed server config-cluster-server2 is up and running\n+   * Verify that if server start policy is ALWAYS and the server is selected", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUxMTY1Ng=="}, "originalCommit": {"oid": "7c3df9ba24c4905a523bafdaf056b26771ce1b6f"}, "originalPosition": 259}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzM0NzgyOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjoxMjoyOFrOH80frg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNzo1Nzo1MlrOH85EAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUzNjY4Ng==", "bodyText": "See the comment for testConfigClusterStartServerUsingAlways(), the same is applicable to this method", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r533536686", "createdAt": "2020-12-01T16:12:28Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -492,15 +548,18 @@ public void testConfigClusterStartServerUsingAlways() {\n    * by patching the resource definition with \n    *  spec/managedServers/2/serverStartPolicy set to ALWAYS.\n    * Make sure that managed server managed-server2 is up and running\n+   * Verify that if server start policy is ALWAYS and the server is selected", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c3df9ba24c4905a523bafdaf056b26771ce1b6f"}, "originalPosition": 305}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYxMTUyMQ==", "bodyText": "same reason as above", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r533611521", "createdAt": "2020-12-01T17:57:52Z", "author": {"login": "hzhao-github"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -492,15 +548,18 @@ public void testConfigClusterStartServerUsingAlways() {\n    * by patching the resource definition with \n    *  spec/managedServers/2/serverStartPolicy set to ALWAYS.\n    * Make sure that managed server managed-server2 is up and running\n+   * Verify that if server start policy is ALWAYS and the server is selected", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUzNjY4Ng=="}, "originalCommit": {"oid": "7c3df9ba24c4905a523bafdaf056b26771ce1b6f"}, "originalPosition": 305}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzM4NzY3OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjoyMDozN1rOH804Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjowNTo1MFrOH9BqVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU0MzAxMA==", "bodyText": "Remove the line 696 :  https://bug.****/pls/bug/webbug_print.show?c_rptno=31833260. The BUG has been resolved.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r533543010", "createdAt": "2020-12-01T16:20:37Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -624,36 +687,45 @@ public void testDynamicClusterReplicaCountIsMaintained() {\n    * Make sure that ONLY the specified managed server is stopped. \n    * Restart the independent managed server by patching the resource definition \n    * with spec/managedServers/0/serverStartPolicy set to ALWAYS.\n-   * Make sure that the specified managed server is in RUNNING state.\n+   * Make sure that the specified managed server is in RUNNING state\n+   * Verify that if server start policy is ALWAYS and the server is selected\n+   * to start based on the replica count, it means that server is already started or is\n+   * in the process of starting. In this case, script exits without making any changes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c3df9ba24c4905a523bafdaf056b26771ce1b6f"}, "originalPosition": 453}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1MjQwNQ==", "bodyText": "This line has not been deleted in your recent commit", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r533752405", "createdAt": "2020-12-01T22:05:50Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -624,36 +687,45 @@ public void testDynamicClusterReplicaCountIsMaintained() {\n    * Make sure that ONLY the specified managed server is stopped. \n    * Restart the independent managed server by patching the resource definition \n    * with spec/managedServers/0/serverStartPolicy set to ALWAYS.\n-   * Make sure that the specified managed server is in RUNNING state.\n+   * Make sure that the specified managed server is in RUNNING state\n+   * Verify that if server start policy is ALWAYS and the server is selected\n+   * to start based on the replica count, it means that server is already started or is\n+   * in the process of starting. In this case, script exits without making any changes.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU0MzAxMA=="}, "originalCommit": {"oid": "7c3df9ba24c4905a523bafdaf056b26771ce1b6f"}, "originalPosition": 453}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzM5NzY3OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjoyMjo0M1rOH80-nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjoyMjo0M1rOH80-nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU0NDYwNA==", "bodyText": "Do not use patch method (patchServerStartPolicy)  to stop/start independent managed server.  Use the script to stop/start managed server.\nModify the method name from testStandaloneManagedRestartAlways() to testStandaloneManagedRestart()", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r533544604", "createdAt": "2020-12-01T16:22:43Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -624,36 +687,45 @@ public void testDynamicClusterReplicaCountIsMaintained() {\n    * Make sure that ONLY the specified managed server is stopped. \n    * Restart the independent managed server by patching the resource definition \n    * with spec/managedServers/0/serverStartPolicy set to ALWAYS.\n-   * Make sure that the specified managed server is in RUNNING state.\n+   * Make sure that the specified managed server is in RUNNING state\n+   * Verify that if server start policy is ALWAYS and the server is selected\n+   * to start based on the replica count, it means that server is already started or is\n+   * in the process of starting. In this case, script exits without making any changes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c3df9ba24c4905a523bafdaf056b26771ce1b6f"}, "originalPosition": 453}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzQxOTMzOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjoyNzowNVrOH81LuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjoyNzowNVrOH81LuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU0Nzk2MA==", "bodyText": "I think, the test testStandaloneManagedRestartAlways() covers this usecase. We can delete this method.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r533547960", "createdAt": "2020-12-01T16:27:05Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -663,36 +735,175 @@ public void testStandaloneManagedRestartAlways() {\n    * Make sure that ONLY the specified managed server is stopped. \n    * Restart the independent managed server by patching the resource definition \n    * with spec/managedServers/0/serverStartPolicy set to IF_NEEDED.\n-   * Make sure that the specified managed server is in RUNNING state.\n+   * Make sure that the specified managed server is in RUNNING state", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c3df9ba24c4905a523bafdaf056b26771ce1b6f"}, "originalPosition": 507}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzQyMzM4OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjoyODowMVrOH81OVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjoyNDoxM1rOH9CO8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU0ODYzMA==", "bodyText": "non-exist --> non-existing", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r533548630", "createdAt": "2020-12-01T16:28:01Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -663,36 +735,175 @@ public void testStandaloneManagedRestartAlways() {\n    * Make sure that ONLY the specified managed server is stopped. \n    * Restart the independent managed server by patching the resource definition \n    * with spec/managedServers/0/serverStartPolicy set to IF_NEEDED.\n-   * Make sure that the specified managed server is in RUNNING state.\n+   * Make sure that the specified managed server is in RUNNING state\n+   * Verify that if server start policy is IF_NEEDED and the server is selected\n+   * to start based on the replica count, it means that server is already started or is\n+   * in the process of starting. In this case, script exits without making any changes.\n    */\n-\n   // The usecase fails NEVER->IF_NEEDED\n   // https://bug.oraclecorp.com/pls/bug/webbug_print.show?c_rptno=31833260\n   @Test\n   @DisplayName(\"Restart the standalone managed server with serverStartPolicy\")\n   public void testStandaloneManagedRestartIfNeeded() {\n-\n-    String configServerPodName = domainUid + \"-standalone-managed\";\n+    String serverName = \"standalone-managed\";\n+    String serverPodName = domainUid + \"-\" + serverName;\n \n     // Make sure that configured managed server is ready \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server is RUNNING\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n     logger.info(\"Domain is patched to shutdown standalone managed server\");\n \n-    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    checkPodDeleted(serverPodName, domainUid, domainNamespace);\n     logger.info(\"Standalone managed server shutdown success\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n     logger.info(\"Domain is patched to start standalone managed server\");\n \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server restart success\");\n+\n+    //copy the samples directory to a temporary location\n+    setupSample();\n+\n+    // Verify that if server start policy is IF_NEEDED and the server is selected\n+    // to start based on the replica count, it means that server is already started or is\n+    // in the process of starting. In this case, script exits without making any changes.\n+    String result = executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName);\n+    assertTrue(result.contains(\"No changes needed\"), \"startServer.sh shouldn't make changes\");\n+  }\n+\n+  /**\n+   * Negative test to verify:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c3df9ba24c4905a523bafdaf056b26771ce1b6f"}, "originalPosition": 559}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYxMjIyMg==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r533612222", "createdAt": "2020-12-01T17:58:57Z", "author": {"login": "hzhao-github"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -663,36 +735,175 @@ public void testStandaloneManagedRestartAlways() {\n    * Make sure that ONLY the specified managed server is stopped. \n    * Restart the independent managed server by patching the resource definition \n    * with spec/managedServers/0/serverStartPolicy set to IF_NEEDED.\n-   * Make sure that the specified managed server is in RUNNING state.\n+   * Make sure that the specified managed server is in RUNNING state\n+   * Verify that if server start policy is IF_NEEDED and the server is selected\n+   * to start based on the replica count, it means that server is already started or is\n+   * in the process of starting. In this case, script exits without making any changes.\n    */\n-\n   // The usecase fails NEVER->IF_NEEDED\n   // https://bug.oraclecorp.com/pls/bug/webbug_print.show?c_rptno=31833260\n   @Test\n   @DisplayName(\"Restart the standalone managed server with serverStartPolicy\")\n   public void testStandaloneManagedRestartIfNeeded() {\n-\n-    String configServerPodName = domainUid + \"-standalone-managed\";\n+    String serverName = \"standalone-managed\";\n+    String serverPodName = domainUid + \"-\" + serverName;\n \n     // Make sure that configured managed server is ready \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server is RUNNING\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n     logger.info(\"Domain is patched to shutdown standalone managed server\");\n \n-    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    checkPodDeleted(serverPodName, domainUid, domainNamespace);\n     logger.info(\"Standalone managed server shutdown success\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n     logger.info(\"Domain is patched to start standalone managed server\");\n \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server restart success\");\n+\n+    //copy the samples directory to a temporary location\n+    setupSample();\n+\n+    // Verify that if server start policy is IF_NEEDED and the server is selected\n+    // to start based on the replica count, it means that server is already started or is\n+    // in the process of starting. In this case, script exits without making any changes.\n+    String result = executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName);\n+    assertTrue(result.contains(\"No changes needed\"), \"startServer.sh shouldn't make changes\");\n+  }\n+\n+  /**\n+   * Negative test to verify:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU0ODYzMA=="}, "originalCommit": {"oid": "7c3df9ba24c4905a523bafdaf056b26771ce1b6f"}, "originalPosition": 559}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1MDcwMQ==", "bodyText": "There are few more occurrences of the word \"non-exist server\"  such as line # 773, 779, 788", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r533750701", "createdAt": "2020-12-01T22:02:36Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -663,36 +735,175 @@ public void testStandaloneManagedRestartAlways() {\n    * Make sure that ONLY the specified managed server is stopped. \n    * Restart the independent managed server by patching the resource definition \n    * with spec/managedServers/0/serverStartPolicy set to IF_NEEDED.\n-   * Make sure that the specified managed server is in RUNNING state.\n+   * Make sure that the specified managed server is in RUNNING state\n+   * Verify that if server start policy is IF_NEEDED and the server is selected\n+   * to start based on the replica count, it means that server is already started or is\n+   * in the process of starting. In this case, script exits without making any changes.\n    */\n-\n   // The usecase fails NEVER->IF_NEEDED\n   // https://bug.oraclecorp.com/pls/bug/webbug_print.show?c_rptno=31833260\n   @Test\n   @DisplayName(\"Restart the standalone managed server with serverStartPolicy\")\n   public void testStandaloneManagedRestartIfNeeded() {\n-\n-    String configServerPodName = domainUid + \"-standalone-managed\";\n+    String serverName = \"standalone-managed\";\n+    String serverPodName = domainUid + \"-\" + serverName;\n \n     // Make sure that configured managed server is ready \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server is RUNNING\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n     logger.info(\"Domain is patched to shutdown standalone managed server\");\n \n-    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    checkPodDeleted(serverPodName, domainUid, domainNamespace);\n     logger.info(\"Standalone managed server shutdown success\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n     logger.info(\"Domain is patched to start standalone managed server\");\n \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server restart success\");\n+\n+    //copy the samples directory to a temporary location\n+    setupSample();\n+\n+    // Verify that if server start policy is IF_NEEDED and the server is selected\n+    // to start based on the replica count, it means that server is already started or is\n+    // in the process of starting. In this case, script exits without making any changes.\n+    String result = executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName);\n+    assertTrue(result.contains(\"No changes needed\"), \"startServer.sh shouldn't make changes\");\n+  }\n+\n+  /**\n+   * Negative test to verify:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU0ODYzMA=="}, "originalCommit": {"oid": "7c3df9ba24c4905a523bafdaf056b26771ce1b6f"}, "originalPosition": 559}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc2MTc3Ng==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r533761776", "createdAt": "2020-12-01T22:24:13Z", "author": {"login": "hzhao-github"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -663,36 +735,175 @@ public void testStandaloneManagedRestartAlways() {\n    * Make sure that ONLY the specified managed server is stopped. \n    * Restart the independent managed server by patching the resource definition \n    * with spec/managedServers/0/serverStartPolicy set to IF_NEEDED.\n-   * Make sure that the specified managed server is in RUNNING state.\n+   * Make sure that the specified managed server is in RUNNING state\n+   * Verify that if server start policy is IF_NEEDED and the server is selected\n+   * to start based on the replica count, it means that server is already started or is\n+   * in the process of starting. In this case, script exits without making any changes.\n    */\n-\n   // The usecase fails NEVER->IF_NEEDED\n   // https://bug.oraclecorp.com/pls/bug/webbug_print.show?c_rptno=31833260\n   @Test\n   @DisplayName(\"Restart the standalone managed server with serverStartPolicy\")\n   public void testStandaloneManagedRestartIfNeeded() {\n-\n-    String configServerPodName = domainUid + \"-standalone-managed\";\n+    String serverName = \"standalone-managed\";\n+    String serverPodName = domainUid + \"-\" + serverName;\n \n     // Make sure that configured managed server is ready \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server is RUNNING\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n     logger.info(\"Domain is patched to shutdown standalone managed server\");\n \n-    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    checkPodDeleted(serverPodName, domainUid, domainNamespace);\n     logger.info(\"Standalone managed server shutdown success\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n     logger.info(\"Domain is patched to start standalone managed server\");\n \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server restart success\");\n+\n+    //copy the samples directory to a temporary location\n+    setupSample();\n+\n+    // Verify that if server start policy is IF_NEEDED and the server is selected\n+    // to start based on the replica count, it means that server is already started or is\n+    // in the process of starting. In this case, script exits without making any changes.\n+    String result = executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName);\n+    assertTrue(result.contains(\"No changes needed\"), \"startServer.sh shouldn't make changes\");\n+  }\n+\n+  /**\n+   * Negative test to verify:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU0ODYzMA=="}, "originalCommit": {"oid": "7c3df9ba24c4905a523bafdaf056b26771ce1b6f"}, "originalPosition": 559}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzQyODY5OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjoyOToxMlrOH81RvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODoxNjozN1rOH85xDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU0OTUwMA==", "bodyText": "Modify the description for DisplayName()", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r533549500", "createdAt": "2020-12-01T16:29:12Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -663,36 +735,175 @@ public void testStandaloneManagedRestartAlways() {\n    * Make sure that ONLY the specified managed server is stopped. \n    * Restart the independent managed server by patching the resource definition \n    * with spec/managedServers/0/serverStartPolicy set to IF_NEEDED.\n-   * Make sure that the specified managed server is in RUNNING state.\n+   * Make sure that the specified managed server is in RUNNING state\n+   * Verify that if server start policy is IF_NEEDED and the server is selected\n+   * to start based on the replica count, it means that server is already started or is\n+   * in the process of starting. In this case, script exits without making any changes.\n    */\n-\n   // The usecase fails NEVER->IF_NEEDED\n   // https://bug.oraclecorp.com/pls/bug/webbug_print.show?c_rptno=31833260\n   @Test\n   @DisplayName(\"Restart the standalone managed server with serverStartPolicy\")\n   public void testStandaloneManagedRestartIfNeeded() {\n-\n-    String configServerPodName = domainUid + \"-standalone-managed\";\n+    String serverName = \"standalone-managed\";\n+    String serverPodName = domainUid + \"-\" + serverName;\n \n     // Make sure that configured managed server is ready \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server is RUNNING\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n     logger.info(\"Domain is patched to shutdown standalone managed server\");\n \n-    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    checkPodDeleted(serverPodName, domainUid, domainNamespace);\n     logger.info(\"Standalone managed server shutdown success\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n     logger.info(\"Domain is patched to start standalone managed server\");\n \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server restart success\");\n+\n+    //copy the samples directory to a temporary location\n+    setupSample();\n+\n+    // Verify that if server start policy is IF_NEEDED and the server is selected\n+    // to start based on the replica count, it means that server is already started or is\n+    // in the process of starting. In this case, script exits without making any changes.\n+    String result = executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName);\n+    assertTrue(result.contains(\"No changes needed\"), \"startServer.sh shouldn't make changes\");\n+  }\n+\n+  /**\n+   * Negative test to verify:\n+   * (a) the sample script can not stop or start a non-exist server\n+   * (b) the sample script can not stop or start a non-exist cluster\n+   * (c) the sample script can not stop or start a non-exist domain.\n+   */\n+  @Test\n+  @DisplayName(\"Restart the configured cluster with serverStartPolicy\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c3df9ba24c4905a523bafdaf056b26771ce1b6f"}, "originalPosition": 565}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYyMzA1Mw==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r533623053", "createdAt": "2020-12-01T18:16:37Z", "author": {"login": "hzhao-github"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -663,36 +735,175 @@ public void testStandaloneManagedRestartAlways() {\n    * Make sure that ONLY the specified managed server is stopped. \n    * Restart the independent managed server by patching the resource definition \n    * with spec/managedServers/0/serverStartPolicy set to IF_NEEDED.\n-   * Make sure that the specified managed server is in RUNNING state.\n+   * Make sure that the specified managed server is in RUNNING state\n+   * Verify that if server start policy is IF_NEEDED and the server is selected\n+   * to start based on the replica count, it means that server is already started or is\n+   * in the process of starting. In this case, script exits without making any changes.\n    */\n-\n   // The usecase fails NEVER->IF_NEEDED\n   // https://bug.oraclecorp.com/pls/bug/webbug_print.show?c_rptno=31833260\n   @Test\n   @DisplayName(\"Restart the standalone managed server with serverStartPolicy\")\n   public void testStandaloneManagedRestartIfNeeded() {\n-\n-    String configServerPodName = domainUid + \"-standalone-managed\";\n+    String serverName = \"standalone-managed\";\n+    String serverPodName = domainUid + \"-\" + serverName;\n \n     // Make sure that configured managed server is ready \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server is RUNNING\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n     logger.info(\"Domain is patched to shutdown standalone managed server\");\n \n-    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    checkPodDeleted(serverPodName, domainUid, domainNamespace);\n     logger.info(\"Standalone managed server shutdown success\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n     logger.info(\"Domain is patched to start standalone managed server\");\n \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server restart success\");\n+\n+    //copy the samples directory to a temporary location\n+    setupSample();\n+\n+    // Verify that if server start policy is IF_NEEDED and the server is selected\n+    // to start based on the replica count, it means that server is already started or is\n+    // in the process of starting. In this case, script exits without making any changes.\n+    String result = executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName);\n+    assertTrue(result.contains(\"No changes needed\"), \"startServer.sh shouldn't make changes\");\n+  }\n+\n+  /**\n+   * Negative test to verify:\n+   * (a) the sample script can not stop or start a non-exist server\n+   * (b) the sample script can not stop or start a non-exist cluster\n+   * (c) the sample script can not stop or start a non-exist domain.\n+   */\n+  @Test\n+  @DisplayName(\"Restart the configured cluster with serverStartPolicy\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU0OTUwMA=="}, "originalCommit": {"oid": "7c3df9ba24c4905a523bafdaf056b26771ce1b6f"}, "originalPosition": 565}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzQyOTYzOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjoyOToyNVrOH81SXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODoxODoxMVrOH850vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU0OTY2Mw==", "bodyText": "Modify the description for DisplayName()\nModify method name to testStartMSBeyondLimitNeg to testStartMangedServerBeyondMaxClusyterLimit()\nAdd a method for DynamicCluster size limit.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r533549663", "createdAt": "2020-12-01T16:29:25Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -663,36 +735,175 @@ public void testStandaloneManagedRestartAlways() {\n    * Make sure that ONLY the specified managed server is stopped. \n    * Restart the independent managed server by patching the resource definition \n    * with spec/managedServers/0/serverStartPolicy set to IF_NEEDED.\n-   * Make sure that the specified managed server is in RUNNING state.\n+   * Make sure that the specified managed server is in RUNNING state\n+   * Verify that if server start policy is IF_NEEDED and the server is selected\n+   * to start based on the replica count, it means that server is already started or is\n+   * in the process of starting. In this case, script exits without making any changes.\n    */\n-\n   // The usecase fails NEVER->IF_NEEDED\n   // https://bug.oraclecorp.com/pls/bug/webbug_print.show?c_rptno=31833260\n   @Test\n   @DisplayName(\"Restart the standalone managed server with serverStartPolicy\")\n   public void testStandaloneManagedRestartIfNeeded() {\n-\n-    String configServerPodName = domainUid + \"-standalone-managed\";\n+    String serverName = \"standalone-managed\";\n+    String serverPodName = domainUid + \"-\" + serverName;\n \n     // Make sure that configured managed server is ready \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server is RUNNING\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n     logger.info(\"Domain is patched to shutdown standalone managed server\");\n \n-    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    checkPodDeleted(serverPodName, domainUid, domainNamespace);\n     logger.info(\"Standalone managed server shutdown success\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n     logger.info(\"Domain is patched to start standalone managed server\");\n \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server restart success\");\n+\n+    //copy the samples directory to a temporary location\n+    setupSample();\n+\n+    // Verify that if server start policy is IF_NEEDED and the server is selected\n+    // to start based on the replica count, it means that server is already started or is\n+    // in the process of starting. In this case, script exits without making any changes.\n+    String result = executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName);\n+    assertTrue(result.contains(\"No changes needed\"), \"startServer.sh shouldn't make changes\");\n+  }\n+\n+  /**\n+   * Negative test to verify:\n+   * (a) the sample script can not stop or start a non-exist server\n+   * (b) the sample script can not stop or start a non-exist cluster\n+   * (c) the sample script can not stop or start a non-exist domain.\n+   */\n+  @Test\n+  @DisplayName(\"Restart the configured cluster with serverStartPolicy\")\n+  public void testRestartWrongComponentNeg() {\n+    //copy the samples directory to a temporary location\n+    setupSample();\n+    String wrongServerName = \"ms1\";\n+    String regex = \".*\" + wrongServerName + \".*\\\\s*is not part\";\n+\n+    // verify that the script can not stop a non-exist server\n+    String result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_SERVER_SCRIPT, SERVER_LIFECYCLE, wrongServerName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a server that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist server\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, wrongServerName, \"\", false),\n+      String.format(\"Failed to run %s\", START_SERVER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't start a server that doesn't exist\");\n+\n+    // verify that the script can not stop a non-exist cluster\n+    String wrongClusterName = \"cluster-3\";\n+    regex = \".*\" + wrongClusterName + \".*\\\\s*not part of domain\";\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_CLUSTER_SCRIPT, CLUSTER_LIFECYCLE, wrongClusterName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(result.contains(\"cluster cluster-3 is not part of domain\"),\n+        \"The script shouldn't stop a cluster that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist cluster\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_CLUSTER_SCRIPT, CLUSTER_LIFECYCLE, wrongClusterName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(result.contains(\"cluster cluster-3 is not part of domain\"),\n+        \"The script shouldn't start a cluster that doesn't exist\");\n+\n+    // verify that the script can not stop a non-exist domain\n+    String domainName = \"mii-start-policy\" + \"-123\";\n+    regex = \".*\" + domainName + \".*\\\\s*not found\";\n+    result = assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_DOMAIN_SCRIPT, DOMAIN, null, \"\", false, domainName),\n+        String.format(\"Failed to run %s\", STOP_DOMAIN_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a domain that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist domain\n+    result = assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_DOMAIN_SCRIPT, DOMAIN, null, \"\", false, domainName),\n+        String.format(\"Failed to run %s\", START_DOMAIN_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't start a domain that doesn't exist\");\n+  }\n+\n+  /**\n+   * Negative test to verify that the sample script can not start a server that exceeds the max cluster size\n+   * e.g. the max cluster size is 2, the sample script can't start server 3\n+   */\n+  @Test\n+  @DisplayName(\"Restart the configured cluster with serverStartPolicy\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c3df9ba24c4905a523bafdaf056b26771ce1b6f"}, "originalPosition": 620}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYyMzk5OA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r533623998", "createdAt": "2020-12-01T18:18:11Z", "author": {"login": "hzhao-github"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -663,36 +735,175 @@ public void testStandaloneManagedRestartAlways() {\n    * Make sure that ONLY the specified managed server is stopped. \n    * Restart the independent managed server by patching the resource definition \n    * with spec/managedServers/0/serverStartPolicy set to IF_NEEDED.\n-   * Make sure that the specified managed server is in RUNNING state.\n+   * Make sure that the specified managed server is in RUNNING state\n+   * Verify that if server start policy is IF_NEEDED and the server is selected\n+   * to start based on the replica count, it means that server is already started or is\n+   * in the process of starting. In this case, script exits without making any changes.\n    */\n-\n   // The usecase fails NEVER->IF_NEEDED\n   // https://bug.oraclecorp.com/pls/bug/webbug_print.show?c_rptno=31833260\n   @Test\n   @DisplayName(\"Restart the standalone managed server with serverStartPolicy\")\n   public void testStandaloneManagedRestartIfNeeded() {\n-\n-    String configServerPodName = domainUid + \"-standalone-managed\";\n+    String serverName = \"standalone-managed\";\n+    String serverPodName = domainUid + \"-\" + serverName;\n \n     // Make sure that configured managed server is ready \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server is RUNNING\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n     logger.info(\"Domain is patched to shutdown standalone managed server\");\n \n-    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    checkPodDeleted(serverPodName, domainUid, domainNamespace);\n     logger.info(\"Standalone managed server shutdown success\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n     logger.info(\"Domain is patched to start standalone managed server\");\n \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server restart success\");\n+\n+    //copy the samples directory to a temporary location\n+    setupSample();\n+\n+    // Verify that if server start policy is IF_NEEDED and the server is selected\n+    // to start based on the replica count, it means that server is already started or is\n+    // in the process of starting. In this case, script exits without making any changes.\n+    String result = executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName);\n+    assertTrue(result.contains(\"No changes needed\"), \"startServer.sh shouldn't make changes\");\n+  }\n+\n+  /**\n+   * Negative test to verify:\n+   * (a) the sample script can not stop or start a non-exist server\n+   * (b) the sample script can not stop or start a non-exist cluster\n+   * (c) the sample script can not stop or start a non-exist domain.\n+   */\n+  @Test\n+  @DisplayName(\"Restart the configured cluster with serverStartPolicy\")\n+  public void testRestartWrongComponentNeg() {\n+    //copy the samples directory to a temporary location\n+    setupSample();\n+    String wrongServerName = \"ms1\";\n+    String regex = \".*\" + wrongServerName + \".*\\\\s*is not part\";\n+\n+    // verify that the script can not stop a non-exist server\n+    String result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_SERVER_SCRIPT, SERVER_LIFECYCLE, wrongServerName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a server that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist server\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, wrongServerName, \"\", false),\n+      String.format(\"Failed to run %s\", START_SERVER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't start a server that doesn't exist\");\n+\n+    // verify that the script can not stop a non-exist cluster\n+    String wrongClusterName = \"cluster-3\";\n+    regex = \".*\" + wrongClusterName + \".*\\\\s*not part of domain\";\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_CLUSTER_SCRIPT, CLUSTER_LIFECYCLE, wrongClusterName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(result.contains(\"cluster cluster-3 is not part of domain\"),\n+        \"The script shouldn't stop a cluster that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist cluster\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_CLUSTER_SCRIPT, CLUSTER_LIFECYCLE, wrongClusterName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(result.contains(\"cluster cluster-3 is not part of domain\"),\n+        \"The script shouldn't start a cluster that doesn't exist\");\n+\n+    // verify that the script can not stop a non-exist domain\n+    String domainName = \"mii-start-policy\" + \"-123\";\n+    regex = \".*\" + domainName + \".*\\\\s*not found\";\n+    result = assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_DOMAIN_SCRIPT, DOMAIN, null, \"\", false, domainName),\n+        String.format(\"Failed to run %s\", STOP_DOMAIN_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a domain that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist domain\n+    result = assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_DOMAIN_SCRIPT, DOMAIN, null, \"\", false, domainName),\n+        String.format(\"Failed to run %s\", START_DOMAIN_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't start a domain that doesn't exist\");\n+  }\n+\n+  /**\n+   * Negative test to verify that the sample script can not start a server that exceeds the max cluster size\n+   * e.g. the max cluster size is 2, the sample script can't start server 3\n+   */\n+  @Test\n+  @DisplayName(\"Restart the configured cluster with serverStartPolicy\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU0OTY2Mw=="}, "originalCommit": {"oid": "7c3df9ba24c4905a523bafdaf056b26771ce1b6f"}, "originalPosition": 620}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzQzNDQxOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjozMDoyNVrOH81VPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODoyMDowMVrOH855aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU1MDM5OQ==", "bodyText": "Add the BUG number to the description", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r533550399", "createdAt": "2020-12-01T16:30:25Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -663,36 +735,175 @@ public void testStandaloneManagedRestartAlways() {\n    * Make sure that ONLY the specified managed server is stopped. \n    * Restart the independent managed server by patching the resource definition \n    * with spec/managedServers/0/serverStartPolicy set to IF_NEEDED.\n-   * Make sure that the specified managed server is in RUNNING state.\n+   * Make sure that the specified managed server is in RUNNING state\n+   * Verify that if server start policy is IF_NEEDED and the server is selected\n+   * to start based on the replica count, it means that server is already started or is\n+   * in the process of starting. In this case, script exits without making any changes.\n    */\n-\n   // The usecase fails NEVER->IF_NEEDED\n   // https://bug.oraclecorp.com/pls/bug/webbug_print.show?c_rptno=31833260\n   @Test\n   @DisplayName(\"Restart the standalone managed server with serverStartPolicy\")\n   public void testStandaloneManagedRestartIfNeeded() {\n-\n-    String configServerPodName = domainUid + \"-standalone-managed\";\n+    String serverName = \"standalone-managed\";\n+    String serverPodName = domainUid + \"-\" + serverName;\n \n     // Make sure that configured managed server is ready \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server is RUNNING\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n     logger.info(\"Domain is patched to shutdown standalone managed server\");\n \n-    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    checkPodDeleted(serverPodName, domainUid, domainNamespace);\n     logger.info(\"Standalone managed server shutdown success\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n     logger.info(\"Domain is patched to start standalone managed server\");\n \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server restart success\");\n+\n+    //copy the samples directory to a temporary location\n+    setupSample();\n+\n+    // Verify that if server start policy is IF_NEEDED and the server is selected\n+    // to start based on the replica count, it means that server is already started or is\n+    // in the process of starting. In this case, script exits without making any changes.\n+    String result = executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName);\n+    assertTrue(result.contains(\"No changes needed\"), \"startServer.sh shouldn't make changes\");\n+  }\n+\n+  /**\n+   * Negative test to verify:\n+   * (a) the sample script can not stop or start a non-exist server\n+   * (b) the sample script can not stop or start a non-exist cluster\n+   * (c) the sample script can not stop or start a non-exist domain.\n+   */\n+  @Test\n+  @DisplayName(\"Restart the configured cluster with serverStartPolicy\")\n+  public void testRestartWrongComponentNeg() {\n+    //copy the samples directory to a temporary location\n+    setupSample();\n+    String wrongServerName = \"ms1\";\n+    String regex = \".*\" + wrongServerName + \".*\\\\s*is not part\";\n+\n+    // verify that the script can not stop a non-exist server\n+    String result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_SERVER_SCRIPT, SERVER_LIFECYCLE, wrongServerName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a server that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist server\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, wrongServerName, \"\", false),\n+      String.format(\"Failed to run %s\", START_SERVER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't start a server that doesn't exist\");\n+\n+    // verify that the script can not stop a non-exist cluster\n+    String wrongClusterName = \"cluster-3\";\n+    regex = \".*\" + wrongClusterName + \".*\\\\s*not part of domain\";\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_CLUSTER_SCRIPT, CLUSTER_LIFECYCLE, wrongClusterName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(result.contains(\"cluster cluster-3 is not part of domain\"),\n+        \"The script shouldn't stop a cluster that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist cluster\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_CLUSTER_SCRIPT, CLUSTER_LIFECYCLE, wrongClusterName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(result.contains(\"cluster cluster-3 is not part of domain\"),\n+        \"The script shouldn't start a cluster that doesn't exist\");\n+\n+    // verify that the script can not stop a non-exist domain\n+    String domainName = \"mii-start-policy\" + \"-123\";\n+    regex = \".*\" + domainName + \".*\\\\s*not found\";\n+    result = assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_DOMAIN_SCRIPT, DOMAIN, null, \"\", false, domainName),\n+        String.format(\"Failed to run %s\", STOP_DOMAIN_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a domain that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist domain\n+    result = assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_DOMAIN_SCRIPT, DOMAIN, null, \"\", false, domainName),\n+        String.format(\"Failed to run %s\", START_DOMAIN_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't start a domain that doesn't exist\");\n+  }\n+\n+  /**\n+   * Negative test to verify that the sample script can not start a server that exceeds the max cluster size\n+   * e.g. the max cluster size is 2, the sample script can't start server 3\n+   */\n+  @Test\n+  @DisplayName(\"Restart the configured cluster with serverStartPolicy\")\n+  public void testStartMSBeyondLimitNeg() {\n+    String serverName = \"config-cluster-server3\";\n+    String regex = \".*\" + serverName + \".*\\\\s*is not part\";\n+\n+    //copy the samples directory to a temporary location\n+    setupSample();\n+\n+    // verify that the script can not start a server that exceeds the max cluster size\n+    String result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName, \"\", false),\n+        String.format(\"Failed to run %s\", START_SERVER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a server that is beyong the limit\");\n+  }\n+\n+  /**\n+   * Negative test to verify that after the admin server is stopped, the sample script can start or stop a server.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c3df9ba24c4905a523bafdaf056b26771ce1b6f"}, "originalPosition": 636}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYyNTE5Mg==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r533625192", "createdAt": "2020-12-01T18:20:01Z", "author": {"login": "hzhao-github"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -663,36 +735,175 @@ public void testStandaloneManagedRestartAlways() {\n    * Make sure that ONLY the specified managed server is stopped. \n    * Restart the independent managed server by patching the resource definition \n    * with spec/managedServers/0/serverStartPolicy set to IF_NEEDED.\n-   * Make sure that the specified managed server is in RUNNING state.\n+   * Make sure that the specified managed server is in RUNNING state\n+   * Verify that if server start policy is IF_NEEDED and the server is selected\n+   * to start based on the replica count, it means that server is already started or is\n+   * in the process of starting. In this case, script exits without making any changes.\n    */\n-\n   // The usecase fails NEVER->IF_NEEDED\n   // https://bug.oraclecorp.com/pls/bug/webbug_print.show?c_rptno=31833260\n   @Test\n   @DisplayName(\"Restart the standalone managed server with serverStartPolicy\")\n   public void testStandaloneManagedRestartIfNeeded() {\n-\n-    String configServerPodName = domainUid + \"-standalone-managed\";\n+    String serverName = \"standalone-managed\";\n+    String serverPodName = domainUid + \"-\" + serverName;\n \n     // Make sure that configured managed server is ready \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server is RUNNING\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n     logger.info(\"Domain is patched to shutdown standalone managed server\");\n \n-    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    checkPodDeleted(serverPodName, domainUid, domainNamespace);\n     logger.info(\"Standalone managed server shutdown success\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n     logger.info(\"Domain is patched to start standalone managed server\");\n \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server restart success\");\n+\n+    //copy the samples directory to a temporary location\n+    setupSample();\n+\n+    // Verify that if server start policy is IF_NEEDED and the server is selected\n+    // to start based on the replica count, it means that server is already started or is\n+    // in the process of starting. In this case, script exits without making any changes.\n+    String result = executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName);\n+    assertTrue(result.contains(\"No changes needed\"), \"startServer.sh shouldn't make changes\");\n+  }\n+\n+  /**\n+   * Negative test to verify:\n+   * (a) the sample script can not stop or start a non-exist server\n+   * (b) the sample script can not stop or start a non-exist cluster\n+   * (c) the sample script can not stop or start a non-exist domain.\n+   */\n+  @Test\n+  @DisplayName(\"Restart the configured cluster with serverStartPolicy\")\n+  public void testRestartWrongComponentNeg() {\n+    //copy the samples directory to a temporary location\n+    setupSample();\n+    String wrongServerName = \"ms1\";\n+    String regex = \".*\" + wrongServerName + \".*\\\\s*is not part\";\n+\n+    // verify that the script can not stop a non-exist server\n+    String result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_SERVER_SCRIPT, SERVER_LIFECYCLE, wrongServerName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a server that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist server\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, wrongServerName, \"\", false),\n+      String.format(\"Failed to run %s\", START_SERVER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't start a server that doesn't exist\");\n+\n+    // verify that the script can not stop a non-exist cluster\n+    String wrongClusterName = \"cluster-3\";\n+    regex = \".*\" + wrongClusterName + \".*\\\\s*not part of domain\";\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_CLUSTER_SCRIPT, CLUSTER_LIFECYCLE, wrongClusterName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(result.contains(\"cluster cluster-3 is not part of domain\"),\n+        \"The script shouldn't stop a cluster that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist cluster\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_CLUSTER_SCRIPT, CLUSTER_LIFECYCLE, wrongClusterName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(result.contains(\"cluster cluster-3 is not part of domain\"),\n+        \"The script shouldn't start a cluster that doesn't exist\");\n+\n+    // verify that the script can not stop a non-exist domain\n+    String domainName = \"mii-start-policy\" + \"-123\";\n+    regex = \".*\" + domainName + \".*\\\\s*not found\";\n+    result = assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_DOMAIN_SCRIPT, DOMAIN, null, \"\", false, domainName),\n+        String.format(\"Failed to run %s\", STOP_DOMAIN_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a domain that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist domain\n+    result = assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_DOMAIN_SCRIPT, DOMAIN, null, \"\", false, domainName),\n+        String.format(\"Failed to run %s\", START_DOMAIN_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't start a domain that doesn't exist\");\n+  }\n+\n+  /**\n+   * Negative test to verify that the sample script can not start a server that exceeds the max cluster size\n+   * e.g. the max cluster size is 2, the sample script can't start server 3\n+   */\n+  @Test\n+  @DisplayName(\"Restart the configured cluster with serverStartPolicy\")\n+  public void testStartMSBeyondLimitNeg() {\n+    String serverName = \"config-cluster-server3\";\n+    String regex = \".*\" + serverName + \".*\\\\s*is not part\";\n+\n+    //copy the samples directory to a temporary location\n+    setupSample();\n+\n+    // verify that the script can not start a server that exceeds the max cluster size\n+    String result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName, \"\", false),\n+        String.format(\"Failed to run %s\", START_SERVER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a server that is beyong the limit\");\n+  }\n+\n+  /**\n+   * Negative test to verify that after the admin server is stopped, the sample script can start or stop a server.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU1MDM5OQ=="}, "originalCommit": {"oid": "7c3df9ba24c4905a523bafdaf056b26771ce1b6f"}, "originalPosition": 636}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzQ0MTMwOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjozMTo1NlrOH81Zeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxODo0MzowNFrOH86xQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU1MTQ4Mg==", "bodyText": "Change the description\nIn the absence of Administration Server, sample script can start/stop a managed server.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r533551482", "createdAt": "2020-12-01T16:31:56Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -663,36 +735,175 @@ public void testStandaloneManagedRestartAlways() {\n    * Make sure that ONLY the specified managed server is stopped. \n    * Restart the independent managed server by patching the resource definition \n    * with spec/managedServers/0/serverStartPolicy set to IF_NEEDED.\n-   * Make sure that the specified managed server is in RUNNING state.\n+   * Make sure that the specified managed server is in RUNNING state\n+   * Verify that if server start policy is IF_NEEDED and the server is selected\n+   * to start based on the replica count, it means that server is already started or is\n+   * in the process of starting. In this case, script exits without making any changes.\n    */\n-\n   // The usecase fails NEVER->IF_NEEDED\n   // https://bug.oraclecorp.com/pls/bug/webbug_print.show?c_rptno=31833260\n   @Test\n   @DisplayName(\"Restart the standalone managed server with serverStartPolicy\")\n   public void testStandaloneManagedRestartIfNeeded() {\n-\n-    String configServerPodName = domainUid + \"-standalone-managed\";\n+    String serverName = \"standalone-managed\";\n+    String serverPodName = domainUid + \"-\" + serverName;\n \n     // Make sure that configured managed server is ready \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server is RUNNING\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n     logger.info(\"Domain is patched to shutdown standalone managed server\");\n \n-    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    checkPodDeleted(serverPodName, domainUid, domainNamespace);\n     logger.info(\"Standalone managed server shutdown success\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n     logger.info(\"Domain is patched to start standalone managed server\");\n \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server restart success\");\n+\n+    //copy the samples directory to a temporary location\n+    setupSample();\n+\n+    // Verify that if server start policy is IF_NEEDED and the server is selected\n+    // to start based on the replica count, it means that server is already started or is\n+    // in the process of starting. In this case, script exits without making any changes.\n+    String result = executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName);\n+    assertTrue(result.contains(\"No changes needed\"), \"startServer.sh shouldn't make changes\");\n+  }\n+\n+  /**\n+   * Negative test to verify:\n+   * (a) the sample script can not stop or start a non-exist server\n+   * (b) the sample script can not stop or start a non-exist cluster\n+   * (c) the sample script can not stop or start a non-exist domain.\n+   */\n+  @Test\n+  @DisplayName(\"Restart the configured cluster with serverStartPolicy\")\n+  public void testRestartWrongComponentNeg() {\n+    //copy the samples directory to a temporary location\n+    setupSample();\n+    String wrongServerName = \"ms1\";\n+    String regex = \".*\" + wrongServerName + \".*\\\\s*is not part\";\n+\n+    // verify that the script can not stop a non-exist server\n+    String result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_SERVER_SCRIPT, SERVER_LIFECYCLE, wrongServerName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a server that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist server\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, wrongServerName, \"\", false),\n+      String.format(\"Failed to run %s\", START_SERVER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't start a server that doesn't exist\");\n+\n+    // verify that the script can not stop a non-exist cluster\n+    String wrongClusterName = \"cluster-3\";\n+    regex = \".*\" + wrongClusterName + \".*\\\\s*not part of domain\";\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_CLUSTER_SCRIPT, CLUSTER_LIFECYCLE, wrongClusterName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(result.contains(\"cluster cluster-3 is not part of domain\"),\n+        \"The script shouldn't stop a cluster that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist cluster\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_CLUSTER_SCRIPT, CLUSTER_LIFECYCLE, wrongClusterName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(result.contains(\"cluster cluster-3 is not part of domain\"),\n+        \"The script shouldn't start a cluster that doesn't exist\");\n+\n+    // verify that the script can not stop a non-exist domain\n+    String domainName = \"mii-start-policy\" + \"-123\";\n+    regex = \".*\" + domainName + \".*\\\\s*not found\";\n+    result = assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_DOMAIN_SCRIPT, DOMAIN, null, \"\", false, domainName),\n+        String.format(\"Failed to run %s\", STOP_DOMAIN_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a domain that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist domain\n+    result = assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_DOMAIN_SCRIPT, DOMAIN, null, \"\", false, domainName),\n+        String.format(\"Failed to run %s\", START_DOMAIN_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't start a domain that doesn't exist\");\n+  }\n+\n+  /**\n+   * Negative test to verify that the sample script can not start a server that exceeds the max cluster size\n+   * e.g. the max cluster size is 2, the sample script can't start server 3\n+   */\n+  @Test\n+  @DisplayName(\"Restart the configured cluster with serverStartPolicy\")\n+  public void testStartMSBeyondLimitNeg() {\n+    String serverName = \"config-cluster-server3\";\n+    String regex = \".*\" + serverName + \".*\\\\s*is not part\";\n+\n+    //copy the samples directory to a temporary location\n+    setupSample();\n+\n+    // verify that the script can not start a server that exceeds the max cluster size\n+    String result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName, \"\", false),\n+        String.format(\"Failed to run %s\", START_SERVER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a server that is beyong the limit\");\n+  }\n+\n+  /**\n+   * Negative test to verify that after the admin server is stopped, the sample script can start or stop a server.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c3df9ba24c4905a523bafdaf056b26771ce1b6f"}, "originalPosition": 636}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzYzOTQ5MA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r533639490", "createdAt": "2020-12-01T18:43:04Z", "author": {"login": "hzhao-github"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -663,36 +735,175 @@ public void testStandaloneManagedRestartAlways() {\n    * Make sure that ONLY the specified managed server is stopped. \n    * Restart the independent managed server by patching the resource definition \n    * with spec/managedServers/0/serverStartPolicy set to IF_NEEDED.\n-   * Make sure that the specified managed server is in RUNNING state.\n+   * Make sure that the specified managed server is in RUNNING state\n+   * Verify that if server start policy is IF_NEEDED and the server is selected\n+   * to start based on the replica count, it means that server is already started or is\n+   * in the process of starting. In this case, script exits without making any changes.\n    */\n-\n   // The usecase fails NEVER->IF_NEEDED\n   // https://bug.oraclecorp.com/pls/bug/webbug_print.show?c_rptno=31833260\n   @Test\n   @DisplayName(\"Restart the standalone managed server with serverStartPolicy\")\n   public void testStandaloneManagedRestartIfNeeded() {\n-\n-    String configServerPodName = domainUid + \"-standalone-managed\";\n+    String serverName = \"standalone-managed\";\n+    String serverPodName = domainUid + \"-\" + serverName;\n \n     // Make sure that configured managed server is ready \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server is RUNNING\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n     logger.info(\"Domain is patched to shutdown standalone managed server\");\n \n-    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    checkPodDeleted(serverPodName, domainUid, domainNamespace);\n     logger.info(\"Standalone managed server shutdown success\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n     logger.info(\"Domain is patched to start standalone managed server\");\n \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server restart success\");\n+\n+    //copy the samples directory to a temporary location\n+    setupSample();\n+\n+    // Verify that if server start policy is IF_NEEDED and the server is selected\n+    // to start based on the replica count, it means that server is already started or is\n+    // in the process of starting. In this case, script exits without making any changes.\n+    String result = executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName);\n+    assertTrue(result.contains(\"No changes needed\"), \"startServer.sh shouldn't make changes\");\n+  }\n+\n+  /**\n+   * Negative test to verify:\n+   * (a) the sample script can not stop or start a non-exist server\n+   * (b) the sample script can not stop or start a non-exist cluster\n+   * (c) the sample script can not stop or start a non-exist domain.\n+   */\n+  @Test\n+  @DisplayName(\"Restart the configured cluster with serverStartPolicy\")\n+  public void testRestartWrongComponentNeg() {\n+    //copy the samples directory to a temporary location\n+    setupSample();\n+    String wrongServerName = \"ms1\";\n+    String regex = \".*\" + wrongServerName + \".*\\\\s*is not part\";\n+\n+    // verify that the script can not stop a non-exist server\n+    String result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_SERVER_SCRIPT, SERVER_LIFECYCLE, wrongServerName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a server that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist server\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, wrongServerName, \"\", false),\n+      String.format(\"Failed to run %s\", START_SERVER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't start a server that doesn't exist\");\n+\n+    // verify that the script can not stop a non-exist cluster\n+    String wrongClusterName = \"cluster-3\";\n+    regex = \".*\" + wrongClusterName + \".*\\\\s*not part of domain\";\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_CLUSTER_SCRIPT, CLUSTER_LIFECYCLE, wrongClusterName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(result.contains(\"cluster cluster-3 is not part of domain\"),\n+        \"The script shouldn't stop a cluster that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist cluster\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_CLUSTER_SCRIPT, CLUSTER_LIFECYCLE, wrongClusterName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(result.contains(\"cluster cluster-3 is not part of domain\"),\n+        \"The script shouldn't start a cluster that doesn't exist\");\n+\n+    // verify that the script can not stop a non-exist domain\n+    String domainName = \"mii-start-policy\" + \"-123\";\n+    regex = \".*\" + domainName + \".*\\\\s*not found\";\n+    result = assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_DOMAIN_SCRIPT, DOMAIN, null, \"\", false, domainName),\n+        String.format(\"Failed to run %s\", STOP_DOMAIN_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a domain that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist domain\n+    result = assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_DOMAIN_SCRIPT, DOMAIN, null, \"\", false, domainName),\n+        String.format(\"Failed to run %s\", START_DOMAIN_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't start a domain that doesn't exist\");\n+  }\n+\n+  /**\n+   * Negative test to verify that the sample script can not start a server that exceeds the max cluster size\n+   * e.g. the max cluster size is 2, the sample script can't start server 3\n+   */\n+  @Test\n+  @DisplayName(\"Restart the configured cluster with serverStartPolicy\")\n+  public void testStartMSBeyondLimitNeg() {\n+    String serverName = \"config-cluster-server3\";\n+    String regex = \".*\" + serverName + \".*\\\\s*is not part\";\n+\n+    //copy the samples directory to a temporary location\n+    setupSample();\n+\n+    // verify that the script can not start a server that exceeds the max cluster size\n+    String result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName, \"\", false),\n+        String.format(\"Failed to run %s\", START_SERVER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a server that is beyong the limit\");\n+  }\n+\n+  /**\n+   * Negative test to verify that after the admin server is stopped, the sample script can start or stop a server.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU1MTQ4Mg=="}, "originalCommit": {"oid": "7c3df9ba24c4905a523bafdaf056b26771ce1b6f"}, "originalPosition": 636}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzczMDM3OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNzozNjo1MFrOH84N2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxOTo1OTozOVrOH89h7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU5NzY1OA==", "bodyText": "why is this a negative test? if you can start/stop a manager server without admin server, then it is a positive test.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r533597658", "createdAt": "2020-12-01T17:36:50Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -663,36 +735,175 @@ public void testStandaloneManagedRestartAlways() {\n    * Make sure that ONLY the specified managed server is stopped. \n    * Restart the independent managed server by patching the resource definition \n    * with spec/managedServers/0/serverStartPolicy set to IF_NEEDED.\n-   * Make sure that the specified managed server is in RUNNING state.\n+   * Make sure that the specified managed server is in RUNNING state\n+   * Verify that if server start policy is IF_NEEDED and the server is selected\n+   * to start based on the replica count, it means that server is already started or is\n+   * in the process of starting. In this case, script exits without making any changes.\n    */\n-\n   // The usecase fails NEVER->IF_NEEDED\n   // https://bug.oraclecorp.com/pls/bug/webbug_print.show?c_rptno=31833260\n   @Test\n   @DisplayName(\"Restart the standalone managed server with serverStartPolicy\")\n   public void testStandaloneManagedRestartIfNeeded() {\n-\n-    String configServerPodName = domainUid + \"-standalone-managed\";\n+    String serverName = \"standalone-managed\";\n+    String serverPodName = domainUid + \"-\" + serverName;\n \n     // Make sure that configured managed server is ready \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server is RUNNING\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n     logger.info(\"Domain is patched to shutdown standalone managed server\");\n \n-    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    checkPodDeleted(serverPodName, domainUid, domainNamespace);\n     logger.info(\"Standalone managed server shutdown success\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n     logger.info(\"Domain is patched to start standalone managed server\");\n \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server restart success\");\n+\n+    //copy the samples directory to a temporary location\n+    setupSample();\n+\n+    // Verify that if server start policy is IF_NEEDED and the server is selected\n+    // to start based on the replica count, it means that server is already started or is\n+    // in the process of starting. In this case, script exits without making any changes.\n+    String result = executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName);\n+    assertTrue(result.contains(\"No changes needed\"), \"startServer.sh shouldn't make changes\");\n+  }\n+\n+  /**\n+   * Negative test to verify:\n+   * (a) the sample script can not stop or start a non-exist server\n+   * (b) the sample script can not stop or start a non-exist cluster\n+   * (c) the sample script can not stop or start a non-exist domain.\n+   */\n+  @Test\n+  @DisplayName(\"Restart the configured cluster with serverStartPolicy\")\n+  public void testRestartWrongComponentNeg() {\n+    //copy the samples directory to a temporary location\n+    setupSample();\n+    String wrongServerName = \"ms1\";\n+    String regex = \".*\" + wrongServerName + \".*\\\\s*is not part\";\n+\n+    // verify that the script can not stop a non-exist server\n+    String result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_SERVER_SCRIPT, SERVER_LIFECYCLE, wrongServerName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a server that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist server\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, wrongServerName, \"\", false),\n+      String.format(\"Failed to run %s\", START_SERVER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't start a server that doesn't exist\");\n+\n+    // verify that the script can not stop a non-exist cluster\n+    String wrongClusterName = \"cluster-3\";\n+    regex = \".*\" + wrongClusterName + \".*\\\\s*not part of domain\";\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_CLUSTER_SCRIPT, CLUSTER_LIFECYCLE, wrongClusterName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(result.contains(\"cluster cluster-3 is not part of domain\"),\n+        \"The script shouldn't stop a cluster that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist cluster\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_CLUSTER_SCRIPT, CLUSTER_LIFECYCLE, wrongClusterName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(result.contains(\"cluster cluster-3 is not part of domain\"),\n+        \"The script shouldn't start a cluster that doesn't exist\");\n+\n+    // verify that the script can not stop a non-exist domain\n+    String domainName = \"mii-start-policy\" + \"-123\";\n+    regex = \".*\" + domainName + \".*\\\\s*not found\";\n+    result = assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_DOMAIN_SCRIPT, DOMAIN, null, \"\", false, domainName),\n+        String.format(\"Failed to run %s\", STOP_DOMAIN_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a domain that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist domain\n+    result = assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_DOMAIN_SCRIPT, DOMAIN, null, \"\", false, domainName),\n+        String.format(\"Failed to run %s\", START_DOMAIN_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't start a domain that doesn't exist\");\n+  }\n+\n+  /**\n+   * Negative test to verify that the sample script can not start a server that exceeds the max cluster size\n+   * e.g. the max cluster size is 2, the sample script can't start server 3\n+   */\n+  @Test\n+  @DisplayName(\"Restart the configured cluster with serverStartPolicy\")\n+  public void testStartMSBeyondLimitNeg() {\n+    String serverName = \"config-cluster-server3\";\n+    String regex = \".*\" + serverName + \".*\\\\s*is not part\";\n+\n+    //copy the samples directory to a temporary location\n+    setupSample();\n+\n+    // verify that the script can not start a server that exceeds the max cluster size\n+    String result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName, \"\", false),\n+        String.format(\"Failed to run %s\", START_SERVER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a server that is beyong the limit\");\n+  }\n+\n+  /**\n+   * Negative test to verify that after the admin server is stopped, the sample script can start or stop a server.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c3df9ba24c4905a523bafdaf056b26771ce1b6f"}, "originalPosition": 636}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzY4NDcxNw==", "bodyText": "yea. you are right, it's not a negative test. fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r533684717", "createdAt": "2020-12-01T19:59:39Z", "author": {"login": "hzhao-github"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -663,36 +735,175 @@ public void testStandaloneManagedRestartAlways() {\n    * Make sure that ONLY the specified managed server is stopped. \n    * Restart the independent managed server by patching the resource definition \n    * with spec/managedServers/0/serverStartPolicy set to IF_NEEDED.\n-   * Make sure that the specified managed server is in RUNNING state.\n+   * Make sure that the specified managed server is in RUNNING state\n+   * Verify that if server start policy is IF_NEEDED and the server is selected\n+   * to start based on the replica count, it means that server is already started or is\n+   * in the process of starting. In this case, script exits without making any changes.\n    */\n-\n   // The usecase fails NEVER->IF_NEEDED\n   // https://bug.oraclecorp.com/pls/bug/webbug_print.show?c_rptno=31833260\n   @Test\n   @DisplayName(\"Restart the standalone managed server with serverStartPolicy\")\n   public void testStandaloneManagedRestartIfNeeded() {\n-\n-    String configServerPodName = domainUid + \"-standalone-managed\";\n+    String serverName = \"standalone-managed\";\n+    String serverPodName = domainUid + \"-\" + serverName;\n \n     // Make sure that configured managed server is ready \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server is RUNNING\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n     logger.info(\"Domain is patched to shutdown standalone managed server\");\n \n-    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    checkPodDeleted(serverPodName, domainUid, domainNamespace);\n     logger.info(\"Standalone managed server shutdown success\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n     logger.info(\"Domain is patched to start standalone managed server\");\n \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server restart success\");\n+\n+    //copy the samples directory to a temporary location\n+    setupSample();\n+\n+    // Verify that if server start policy is IF_NEEDED and the server is selected\n+    // to start based on the replica count, it means that server is already started or is\n+    // in the process of starting. In this case, script exits without making any changes.\n+    String result = executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName);\n+    assertTrue(result.contains(\"No changes needed\"), \"startServer.sh shouldn't make changes\");\n+  }\n+\n+  /**\n+   * Negative test to verify:\n+   * (a) the sample script can not stop or start a non-exist server\n+   * (b) the sample script can not stop or start a non-exist cluster\n+   * (c) the sample script can not stop or start a non-exist domain.\n+   */\n+  @Test\n+  @DisplayName(\"Restart the configured cluster with serverStartPolicy\")\n+  public void testRestartWrongComponentNeg() {\n+    //copy the samples directory to a temporary location\n+    setupSample();\n+    String wrongServerName = \"ms1\";\n+    String regex = \".*\" + wrongServerName + \".*\\\\s*is not part\";\n+\n+    // verify that the script can not stop a non-exist server\n+    String result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_SERVER_SCRIPT, SERVER_LIFECYCLE, wrongServerName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a server that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist server\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, wrongServerName, \"\", false),\n+      String.format(\"Failed to run %s\", START_SERVER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't start a server that doesn't exist\");\n+\n+    // verify that the script can not stop a non-exist cluster\n+    String wrongClusterName = \"cluster-3\";\n+    regex = \".*\" + wrongClusterName + \".*\\\\s*not part of domain\";\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_CLUSTER_SCRIPT, CLUSTER_LIFECYCLE, wrongClusterName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(result.contains(\"cluster cluster-3 is not part of domain\"),\n+        \"The script shouldn't stop a cluster that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist cluster\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_CLUSTER_SCRIPT, CLUSTER_LIFECYCLE, wrongClusterName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(result.contains(\"cluster cluster-3 is not part of domain\"),\n+        \"The script shouldn't start a cluster that doesn't exist\");\n+\n+    // verify that the script can not stop a non-exist domain\n+    String domainName = \"mii-start-policy\" + \"-123\";\n+    regex = \".*\" + domainName + \".*\\\\s*not found\";\n+    result = assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_DOMAIN_SCRIPT, DOMAIN, null, \"\", false, domainName),\n+        String.format(\"Failed to run %s\", STOP_DOMAIN_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a domain that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist domain\n+    result = assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_DOMAIN_SCRIPT, DOMAIN, null, \"\", false, domainName),\n+        String.format(\"Failed to run %s\", START_DOMAIN_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't start a domain that doesn't exist\");\n+  }\n+\n+  /**\n+   * Negative test to verify that the sample script can not start a server that exceeds the max cluster size\n+   * e.g. the max cluster size is 2, the sample script can't start server 3\n+   */\n+  @Test\n+  @DisplayName(\"Restart the configured cluster with serverStartPolicy\")\n+  public void testStartMSBeyondLimitNeg() {\n+    String serverName = \"config-cluster-server3\";\n+    String regex = \".*\" + serverName + \".*\\\\s*is not part\";\n+\n+    //copy the samples directory to a temporary location\n+    setupSample();\n+\n+    // verify that the script can not start a server that exceeds the max cluster size\n+    String result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName, \"\", false),\n+        String.format(\"Failed to run %s\", START_SERVER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a server that is beyong the limit\");\n+  }\n+\n+  /**\n+   * Negative test to verify that after the admin server is stopped, the sample script can start or stop a server.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU5NzY1OA=="}, "originalCommit": {"oid": "7c3df9ba24c4905a523bafdaf056b26771ce1b6f"}, "originalPosition": 636}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODcyMzAzOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjowNzo0NlrOH9BuLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjozNzo0MVrOH9Cp5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1MzM5MA==", "bodyText": "Change the name to testRestartNonExistingComponent()", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r533753390", "createdAt": "2020-12-01T22:07:46Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -663,36 +714,172 @@ public void testStandaloneManagedRestartAlways() {\n    * Make sure that ONLY the specified managed server is stopped. \n    * Restart the independent managed server by patching the resource definition \n    * with spec/managedServers/0/serverStartPolicy set to IF_NEEDED.\n-   * Make sure that the specified managed server is in RUNNING state.\n+   * Make sure that the specified managed server is in RUNNING state\n+   * Verify that if server start policy is IF_NEEDED and the server is selected\n+   * to start based on the replica count, it means that server is already started or is\n+   * in the process of starting. In this case, script exits without making any changes.\n    */\n-\n   // The usecase fails NEVER->IF_NEEDED\n   // https://bug.oraclecorp.com/pls/bug/webbug_print.show?c_rptno=31833260\n   @Test\n   @DisplayName(\"Restart the standalone managed server with serverStartPolicy\")\n   public void testStandaloneManagedRestartIfNeeded() {\n-\n-    String configServerPodName = domainUid + \"-standalone-managed\";\n+    String serverName = \"standalone-managed\";\n+    String serverPodName = domainUid + \"-\" + serverName;\n \n     // Make sure that configured managed server is ready \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server is RUNNING\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n     logger.info(\"Domain is patched to shutdown standalone managed server\");\n \n-    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    checkPodDeleted(serverPodName, domainUid, domainNamespace);\n     logger.info(\"Standalone managed server shutdown success\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n     logger.info(\"Domain is patched to start standalone managed server\");\n \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server restart success\");\n+\n+    // Verify that if server start policy is IF_NEEDED and the server is selected\n+    // to start based on the replica count, it means that server is already started or is\n+    // in the process of starting. In this case, script exits without making any changes.\n+    String result = executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName);\n+    assertTrue(result.contains(\"No changes needed\"), \"startServer.sh shouldn't make changes\");\n+  }\n+\n+  /**\n+   * Negative test to verify:\n+   * (a) the sample script can not stop or start a non-existing server\n+   * (b) the sample script can not stop or start a non-existing cluster\n+   * (c) the sample script can not stop or start a non-existing domain.\n+   */\n+  @Test\n+  @DisplayName(\"Verify that the sample script can not stop or start non-existing components\")\n+  public void testRestartWrongComponent() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edaccac9c8b5ccbbd0c0d3e86702e7e9b658c2dd"}, "originalPosition": 594}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc2ODY3OQ==", "bodyText": "changed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r533768679", "createdAt": "2020-12-01T22:37:41Z", "author": {"login": "hzhao-github"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -663,36 +714,172 @@ public void testStandaloneManagedRestartAlways() {\n    * Make sure that ONLY the specified managed server is stopped. \n    * Restart the independent managed server by patching the resource definition \n    * with spec/managedServers/0/serverStartPolicy set to IF_NEEDED.\n-   * Make sure that the specified managed server is in RUNNING state.\n+   * Make sure that the specified managed server is in RUNNING state\n+   * Verify that if server start policy is IF_NEEDED and the server is selected\n+   * to start based on the replica count, it means that server is already started or is\n+   * in the process of starting. In this case, script exits without making any changes.\n    */\n-\n   // The usecase fails NEVER->IF_NEEDED\n   // https://bug.oraclecorp.com/pls/bug/webbug_print.show?c_rptno=31833260\n   @Test\n   @DisplayName(\"Restart the standalone managed server with serverStartPolicy\")\n   public void testStandaloneManagedRestartIfNeeded() {\n-\n-    String configServerPodName = domainUid + \"-standalone-managed\";\n+    String serverName = \"standalone-managed\";\n+    String serverPodName = domainUid + \"-\" + serverName;\n \n     // Make sure that configured managed server is ready \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server is RUNNING\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n     logger.info(\"Domain is patched to shutdown standalone managed server\");\n \n-    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    checkPodDeleted(serverPodName, domainUid, domainNamespace);\n     logger.info(\"Standalone managed server shutdown success\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n     logger.info(\"Domain is patched to start standalone managed server\");\n \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server restart success\");\n+\n+    // Verify that if server start policy is IF_NEEDED and the server is selected\n+    // to start based on the replica count, it means that server is already started or is\n+    // in the process of starting. In this case, script exits without making any changes.\n+    String result = executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName);\n+    assertTrue(result.contains(\"No changes needed\"), \"startServer.sh shouldn't make changes\");\n+  }\n+\n+  /**\n+   * Negative test to verify:\n+   * (a) the sample script can not stop or start a non-existing server\n+   * (b) the sample script can not stop or start a non-existing cluster\n+   * (c) the sample script can not stop or start a non-existing domain.\n+   */\n+  @Test\n+  @DisplayName(\"Verify that the sample script can not stop or start non-existing components\")\n+  public void testRestartWrongComponent() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1MzM5MA=="}, "originalCommit": {"oid": "edaccac9c8b5ccbbd0c0d3e86702e7e9b658c2dd"}, "originalPosition": 594}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODcyNTU0OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjowODo0NFrOH9Bv7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjozNzozMlrOH9Cpnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1MzgzNw==", "bodyText": "typo:  testStartMangedServerBeyondMaxClusyterLimit() --> testStartMangedServerBeyondMaxClusterLimit()", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r533753837", "createdAt": "2020-12-01T22:08:44Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -663,36 +714,172 @@ public void testStandaloneManagedRestartAlways() {\n    * Make sure that ONLY the specified managed server is stopped. \n    * Restart the independent managed server by patching the resource definition \n    * with spec/managedServers/0/serverStartPolicy set to IF_NEEDED.\n-   * Make sure that the specified managed server is in RUNNING state.\n+   * Make sure that the specified managed server is in RUNNING state\n+   * Verify that if server start policy is IF_NEEDED and the server is selected\n+   * to start based on the replica count, it means that server is already started or is\n+   * in the process of starting. In this case, script exits without making any changes.\n    */\n-\n   // The usecase fails NEVER->IF_NEEDED\n   // https://bug.oraclecorp.com/pls/bug/webbug_print.show?c_rptno=31833260\n   @Test\n   @DisplayName(\"Restart the standalone managed server with serverStartPolicy\")\n   public void testStandaloneManagedRestartIfNeeded() {\n-\n-    String configServerPodName = domainUid + \"-standalone-managed\";\n+    String serverName = \"standalone-managed\";\n+    String serverPodName = domainUid + \"-\" + serverName;\n \n     // Make sure that configured managed server is ready \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server is RUNNING\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n     logger.info(\"Domain is patched to shutdown standalone managed server\");\n \n-    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    checkPodDeleted(serverPodName, domainUid, domainNamespace);\n     logger.info(\"Standalone managed server shutdown success\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n     logger.info(\"Domain is patched to start standalone managed server\");\n \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server restart success\");\n+\n+    // Verify that if server start policy is IF_NEEDED and the server is selected\n+    // to start based on the replica count, it means that server is already started or is\n+    // in the process of starting. In this case, script exits without making any changes.\n+    String result = executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName);\n+    assertTrue(result.contains(\"No changes needed\"), \"startServer.sh shouldn't make changes\");\n+  }\n+\n+  /**\n+   * Negative test to verify:\n+   * (a) the sample script can not stop or start a non-existing server\n+   * (b) the sample script can not stop or start a non-existing cluster\n+   * (c) the sample script can not stop or start a non-existing domain.\n+   */\n+  @Test\n+  @DisplayName(\"Verify that the sample script can not stop or start non-existing components\")\n+  public void testRestartWrongComponent() {\n+    String wrongServerName = \"ms1\";\n+    String regex = \".*\" + wrongServerName + \".*\\\\s*is not part\";\n+\n+    // verify that the script can not stop a non-exist server\n+    String result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_SERVER_SCRIPT, SERVER_LIFECYCLE, wrongServerName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a server that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist server\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, wrongServerName, \"\", false),\n+      String.format(\"Failed to run %s\", START_SERVER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't start a server that doesn't exist\");\n+\n+    // verify that the script can not stop a non-exist cluster\n+    String wrongClusterName = \"cluster-3\";\n+    regex = \".*\" + wrongClusterName + \".*\\\\s*not part of domain\";\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_CLUSTER_SCRIPT, CLUSTER_LIFECYCLE, wrongClusterName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(result.contains(\"cluster cluster-3 is not part of domain\"),\n+        \"The script shouldn't stop a cluster that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist cluster\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_CLUSTER_SCRIPT, CLUSTER_LIFECYCLE, wrongClusterName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(result.contains(\"cluster cluster-3 is not part of domain\"),\n+        \"The script shouldn't start a cluster that doesn't exist\");\n+\n+    // verify that the script can not stop a non-exist domain\n+    String domainName = \"mii-start-policy\" + \"-123\";\n+    regex = \".*\" + domainName + \".*\\\\s*not found\";\n+    result = assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_DOMAIN_SCRIPT, DOMAIN, null, \"\", false, domainName),\n+        String.format(\"Failed to run %s\", STOP_DOMAIN_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a domain that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist domain\n+    result = assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_DOMAIN_SCRIPT, DOMAIN, null, \"\", false, domainName),\n+        String.format(\"Failed to run %s\", START_DOMAIN_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't start a domain that doesn't exist\");\n+  }\n+\n+  /**\n+   * Negative test to verify that the sample script can not start a server that exceeds the max cluster size\n+   * e.g. the max cluster size is 2, the sample script can't start server 3\n+   */\n+  @Test\n+  @DisplayName(\"Verify that the sample script can not start a server that exceeds the max cluster size\")\n+  public void testStartMangedServerBeyondMaxClusyterLimit() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edaccac9c8b5ccbbd0c0d3e86702e7e9b658c2dd"}, "originalPosition": 647}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc2ODYwNw==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r533768607", "createdAt": "2020-12-01T22:37:32Z", "author": {"login": "hzhao-github"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -663,36 +714,172 @@ public void testStandaloneManagedRestartAlways() {\n    * Make sure that ONLY the specified managed server is stopped. \n    * Restart the independent managed server by patching the resource definition \n    * with spec/managedServers/0/serverStartPolicy set to IF_NEEDED.\n-   * Make sure that the specified managed server is in RUNNING state.\n+   * Make sure that the specified managed server is in RUNNING state\n+   * Verify that if server start policy is IF_NEEDED and the server is selected\n+   * to start based on the replica count, it means that server is already started or is\n+   * in the process of starting. In this case, script exits without making any changes.\n    */\n-\n   // The usecase fails NEVER->IF_NEEDED\n   // https://bug.oraclecorp.com/pls/bug/webbug_print.show?c_rptno=31833260\n   @Test\n   @DisplayName(\"Restart the standalone managed server with serverStartPolicy\")\n   public void testStandaloneManagedRestartIfNeeded() {\n-\n-    String configServerPodName = domainUid + \"-standalone-managed\";\n+    String serverName = \"standalone-managed\";\n+    String serverPodName = domainUid + \"-\" + serverName;\n \n     // Make sure that configured managed server is ready \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server is RUNNING\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n     logger.info(\"Domain is patched to shutdown standalone managed server\");\n \n-    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    checkPodDeleted(serverPodName, domainUid, domainNamespace);\n     logger.info(\"Standalone managed server shutdown success\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n     logger.info(\"Domain is patched to start standalone managed server\");\n \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server restart success\");\n+\n+    // Verify that if server start policy is IF_NEEDED and the server is selected\n+    // to start based on the replica count, it means that server is already started or is\n+    // in the process of starting. In this case, script exits without making any changes.\n+    String result = executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName);\n+    assertTrue(result.contains(\"No changes needed\"), \"startServer.sh shouldn't make changes\");\n+  }\n+\n+  /**\n+   * Negative test to verify:\n+   * (a) the sample script can not stop or start a non-existing server\n+   * (b) the sample script can not stop or start a non-existing cluster\n+   * (c) the sample script can not stop or start a non-existing domain.\n+   */\n+  @Test\n+  @DisplayName(\"Verify that the sample script can not stop or start non-existing components\")\n+  public void testRestartWrongComponent() {\n+    String wrongServerName = \"ms1\";\n+    String regex = \".*\" + wrongServerName + \".*\\\\s*is not part\";\n+\n+    // verify that the script can not stop a non-exist server\n+    String result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_SERVER_SCRIPT, SERVER_LIFECYCLE, wrongServerName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a server that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist server\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, wrongServerName, \"\", false),\n+      String.format(\"Failed to run %s\", START_SERVER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't start a server that doesn't exist\");\n+\n+    // verify that the script can not stop a non-exist cluster\n+    String wrongClusterName = \"cluster-3\";\n+    regex = \".*\" + wrongClusterName + \".*\\\\s*not part of domain\";\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_CLUSTER_SCRIPT, CLUSTER_LIFECYCLE, wrongClusterName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(result.contains(\"cluster cluster-3 is not part of domain\"),\n+        \"The script shouldn't stop a cluster that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist cluster\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_CLUSTER_SCRIPT, CLUSTER_LIFECYCLE, wrongClusterName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(result.contains(\"cluster cluster-3 is not part of domain\"),\n+        \"The script shouldn't start a cluster that doesn't exist\");\n+\n+    // verify that the script can not stop a non-exist domain\n+    String domainName = \"mii-start-policy\" + \"-123\";\n+    regex = \".*\" + domainName + \".*\\\\s*not found\";\n+    result = assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_DOMAIN_SCRIPT, DOMAIN, null, \"\", false, domainName),\n+        String.format(\"Failed to run %s\", STOP_DOMAIN_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a domain that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist domain\n+    result = assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_DOMAIN_SCRIPT, DOMAIN, null, \"\", false, domainName),\n+        String.format(\"Failed to run %s\", START_DOMAIN_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't start a domain that doesn't exist\");\n+  }\n+\n+  /**\n+   * Negative test to verify that the sample script can not start a server that exceeds the max cluster size\n+   * e.g. the max cluster size is 2, the sample script can't start server 3\n+   */\n+  @Test\n+  @DisplayName(\"Verify that the sample script can not start a server that exceeds the max cluster size\")\n+  public void testStartMangedServerBeyondMaxClusyterLimit() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1MzgzNw=="}, "originalCommit": {"oid": "edaccac9c8b5ccbbd0c0d3e86702e7e9b658c2dd"}, "originalPosition": 647}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODczNjc5OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjoxMjoxMFrOH9B2-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzoxOTozOVrOH9lvZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1NTY0Mw==", "bodyText": "testServerRestartMSWithoutAdmin --> testServerRestartManagedServerWithoutAdmin", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r533755643", "createdAt": "2020-12-01T22:12:10Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -663,36 +714,172 @@ public void testStandaloneManagedRestartAlways() {\n    * Make sure that ONLY the specified managed server is stopped. \n    * Restart the independent managed server by patching the resource definition \n    * with spec/managedServers/0/serverStartPolicy set to IF_NEEDED.\n-   * Make sure that the specified managed server is in RUNNING state.\n+   * Make sure that the specified managed server is in RUNNING state\n+   * Verify that if server start policy is IF_NEEDED and the server is selected\n+   * to start based on the replica count, it means that server is already started or is\n+   * in the process of starting. In this case, script exits without making any changes.\n    */\n-\n   // The usecase fails NEVER->IF_NEEDED\n   // https://bug.oraclecorp.com/pls/bug/webbug_print.show?c_rptno=31833260\n   @Test\n   @DisplayName(\"Restart the standalone managed server with serverStartPolicy\")\n   public void testStandaloneManagedRestartIfNeeded() {\n-\n-    String configServerPodName = domainUid + \"-standalone-managed\";\n+    String serverName = \"standalone-managed\";\n+    String serverPodName = domainUid + \"-\" + serverName;\n \n     // Make sure that configured managed server is ready \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server is RUNNING\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n     logger.info(\"Domain is patched to shutdown standalone managed server\");\n \n-    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    checkPodDeleted(serverPodName, domainUid, domainNamespace);\n     logger.info(\"Standalone managed server shutdown success\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n     logger.info(\"Domain is patched to start standalone managed server\");\n \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server restart success\");\n+\n+    // Verify that if server start policy is IF_NEEDED and the server is selected\n+    // to start based on the replica count, it means that server is already started or is\n+    // in the process of starting. In this case, script exits without making any changes.\n+    String result = executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName);\n+    assertTrue(result.contains(\"No changes needed\"), \"startServer.sh shouldn't make changes\");\n+  }\n+\n+  /**\n+   * Negative test to verify:\n+   * (a) the sample script can not stop or start a non-existing server\n+   * (b) the sample script can not stop or start a non-existing cluster\n+   * (c) the sample script can not stop or start a non-existing domain.\n+   */\n+  @Test\n+  @DisplayName(\"Verify that the sample script can not stop or start non-existing components\")\n+  public void testRestartWrongComponent() {\n+    String wrongServerName = \"ms1\";\n+    String regex = \".*\" + wrongServerName + \".*\\\\s*is not part\";\n+\n+    // verify that the script can not stop a non-exist server\n+    String result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_SERVER_SCRIPT, SERVER_LIFECYCLE, wrongServerName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a server that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist server\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, wrongServerName, \"\", false),\n+      String.format(\"Failed to run %s\", START_SERVER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't start a server that doesn't exist\");\n+\n+    // verify that the script can not stop a non-exist cluster\n+    String wrongClusterName = \"cluster-3\";\n+    regex = \".*\" + wrongClusterName + \".*\\\\s*not part of domain\";\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_CLUSTER_SCRIPT, CLUSTER_LIFECYCLE, wrongClusterName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(result.contains(\"cluster cluster-3 is not part of domain\"),\n+        \"The script shouldn't stop a cluster that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist cluster\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_CLUSTER_SCRIPT, CLUSTER_LIFECYCLE, wrongClusterName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(result.contains(\"cluster cluster-3 is not part of domain\"),\n+        \"The script shouldn't start a cluster that doesn't exist\");\n+\n+    // verify that the script can not stop a non-exist domain\n+    String domainName = \"mii-start-policy\" + \"-123\";\n+    regex = \".*\" + domainName + \".*\\\\s*not found\";\n+    result = assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_DOMAIN_SCRIPT, DOMAIN, null, \"\", false, domainName),\n+        String.format(\"Failed to run %s\", STOP_DOMAIN_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a domain that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist domain\n+    result = assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_DOMAIN_SCRIPT, DOMAIN, null, \"\", false, domainName),\n+        String.format(\"Failed to run %s\", START_DOMAIN_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't start a domain that doesn't exist\");\n+  }\n+\n+  /**\n+   * Negative test to verify that the sample script can not start a server that exceeds the max cluster size\n+   * e.g. the max cluster size is 2, the sample script can't start server 3\n+   */\n+  @Test\n+  @DisplayName(\"Verify that the sample script can not start a server that exceeds the max cluster size\")\n+  public void testStartMangedServerBeyondMaxClusyterLimit() {\n+    String configServerName = \"config-cluster-server3\";\n+    String dynServerName = \"managed-server6\";\n+\n+    // verify that the script can not start a server in config cluster that exceeds the max cluster size\n+    String regex = \".*\" + configServerName + \".*\\\\s*is not part\";\n+    String result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, configServerName, \"\", false),\n+        String.format(\"Failed to run %s\", START_SERVER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a server that is beyong the limit\");\n+\n+    // verify that the script can not start a server in dynamic cluster that exceeds the max cluster size\n+    regex = \".*outside the range of allowed servers\";\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, dynServerName, \"\", false),\n+        String.format(\"Failed to run %s\", START_SERVER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a server that is beyong the limit\");\n+  }\n+\n+  /**\n+   * Verify that after the admin server is stopped, the sample script can start or stop a server.\n+   */\n+  @Disabled(\"Due to the bug OWLS-86251\")\n+  @Test\n+  @DisplayName(\"In the absence of Administration Server, sample script can start/stop a managed server\")\n+  public void testServerRestartMSWithoutAdmin() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edaccac9c8b5ccbbd0c0d3e86702e7e9b658c2dd"}, "originalPosition": 672}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1ODgzMA==", "bodyText": "Add a test to start/stop a manged server form a dynamic cluster.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r533758830", "createdAt": "2020-12-01T22:18:22Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -663,36 +714,172 @@ public void testStandaloneManagedRestartAlways() {\n    * Make sure that ONLY the specified managed server is stopped. \n    * Restart the independent managed server by patching the resource definition \n    * with spec/managedServers/0/serverStartPolicy set to IF_NEEDED.\n-   * Make sure that the specified managed server is in RUNNING state.\n+   * Make sure that the specified managed server is in RUNNING state\n+   * Verify that if server start policy is IF_NEEDED and the server is selected\n+   * to start based on the replica count, it means that server is already started or is\n+   * in the process of starting. In this case, script exits without making any changes.\n    */\n-\n   // The usecase fails NEVER->IF_NEEDED\n   // https://bug.oraclecorp.com/pls/bug/webbug_print.show?c_rptno=31833260\n   @Test\n   @DisplayName(\"Restart the standalone managed server with serverStartPolicy\")\n   public void testStandaloneManagedRestartIfNeeded() {\n-\n-    String configServerPodName = domainUid + \"-standalone-managed\";\n+    String serverName = \"standalone-managed\";\n+    String serverPodName = domainUid + \"-\" + serverName;\n \n     // Make sure that configured managed server is ready \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server is RUNNING\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n     logger.info(\"Domain is patched to shutdown standalone managed server\");\n \n-    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    checkPodDeleted(serverPodName, domainUid, domainNamespace);\n     logger.info(\"Standalone managed server shutdown success\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n     logger.info(\"Domain is patched to start standalone managed server\");\n \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server restart success\");\n+\n+    // Verify that if server start policy is IF_NEEDED and the server is selected\n+    // to start based on the replica count, it means that server is already started or is\n+    // in the process of starting. In this case, script exits without making any changes.\n+    String result = executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName);\n+    assertTrue(result.contains(\"No changes needed\"), \"startServer.sh shouldn't make changes\");\n+  }\n+\n+  /**\n+   * Negative test to verify:\n+   * (a) the sample script can not stop or start a non-existing server\n+   * (b) the sample script can not stop or start a non-existing cluster\n+   * (c) the sample script can not stop or start a non-existing domain.\n+   */\n+  @Test\n+  @DisplayName(\"Verify that the sample script can not stop or start non-existing components\")\n+  public void testRestartWrongComponent() {\n+    String wrongServerName = \"ms1\";\n+    String regex = \".*\" + wrongServerName + \".*\\\\s*is not part\";\n+\n+    // verify that the script can not stop a non-exist server\n+    String result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_SERVER_SCRIPT, SERVER_LIFECYCLE, wrongServerName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a server that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist server\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, wrongServerName, \"\", false),\n+      String.format(\"Failed to run %s\", START_SERVER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't start a server that doesn't exist\");\n+\n+    // verify that the script can not stop a non-exist cluster\n+    String wrongClusterName = \"cluster-3\";\n+    regex = \".*\" + wrongClusterName + \".*\\\\s*not part of domain\";\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_CLUSTER_SCRIPT, CLUSTER_LIFECYCLE, wrongClusterName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(result.contains(\"cluster cluster-3 is not part of domain\"),\n+        \"The script shouldn't stop a cluster that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist cluster\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_CLUSTER_SCRIPT, CLUSTER_LIFECYCLE, wrongClusterName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(result.contains(\"cluster cluster-3 is not part of domain\"),\n+        \"The script shouldn't start a cluster that doesn't exist\");\n+\n+    // verify that the script can not stop a non-exist domain\n+    String domainName = \"mii-start-policy\" + \"-123\";\n+    regex = \".*\" + domainName + \".*\\\\s*not found\";\n+    result = assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_DOMAIN_SCRIPT, DOMAIN, null, \"\", false, domainName),\n+        String.format(\"Failed to run %s\", STOP_DOMAIN_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a domain that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist domain\n+    result = assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_DOMAIN_SCRIPT, DOMAIN, null, \"\", false, domainName),\n+        String.format(\"Failed to run %s\", START_DOMAIN_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't start a domain that doesn't exist\");\n+  }\n+\n+  /**\n+   * Negative test to verify that the sample script can not start a server that exceeds the max cluster size\n+   * e.g. the max cluster size is 2, the sample script can't start server 3\n+   */\n+  @Test\n+  @DisplayName(\"Verify that the sample script can not start a server that exceeds the max cluster size\")\n+  public void testStartMangedServerBeyondMaxClusyterLimit() {\n+    String configServerName = \"config-cluster-server3\";\n+    String dynServerName = \"managed-server6\";\n+\n+    // verify that the script can not start a server in config cluster that exceeds the max cluster size\n+    String regex = \".*\" + configServerName + \".*\\\\s*is not part\";\n+    String result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, configServerName, \"\", false),\n+        String.format(\"Failed to run %s\", START_SERVER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a server that is beyong the limit\");\n+\n+    // verify that the script can not start a server in dynamic cluster that exceeds the max cluster size\n+    regex = \".*outside the range of allowed servers\";\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, dynServerName, \"\", false),\n+        String.format(\"Failed to run %s\", START_SERVER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a server that is beyong the limit\");\n+  }\n+\n+  /**\n+   * Verify that after the admin server is stopped, the sample script can start or stop a server.\n+   */\n+  @Disabled(\"Due to the bug OWLS-86251\")\n+  @Test\n+  @DisplayName(\"In the absence of Administration Server, sample script can start/stop a managed server\")\n+  public void testServerRestartMSWithoutAdmin() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1NTY0Mw=="}, "originalCommit": {"oid": "edaccac9c8b5ccbbd0c0d3e86702e7e9b658c2dd"}, "originalPosition": 672}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM0MzUyNg==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r534343526", "createdAt": "2020-12-02T17:19:39Z", "author": {"login": "hzhao-github"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -663,36 +714,172 @@ public void testStandaloneManagedRestartAlways() {\n    * Make sure that ONLY the specified managed server is stopped. \n    * Restart the independent managed server by patching the resource definition \n    * with spec/managedServers/0/serverStartPolicy set to IF_NEEDED.\n-   * Make sure that the specified managed server is in RUNNING state.\n+   * Make sure that the specified managed server is in RUNNING state\n+   * Verify that if server start policy is IF_NEEDED and the server is selected\n+   * to start based on the replica count, it means that server is already started or is\n+   * in the process of starting. In this case, script exits without making any changes.\n    */\n-\n   // The usecase fails NEVER->IF_NEEDED\n   // https://bug.oraclecorp.com/pls/bug/webbug_print.show?c_rptno=31833260\n   @Test\n   @DisplayName(\"Restart the standalone managed server with serverStartPolicy\")\n   public void testStandaloneManagedRestartIfNeeded() {\n-\n-    String configServerPodName = domainUid + \"-standalone-managed\";\n+    String serverName = \"standalone-managed\";\n+    String serverPodName = domainUid + \"-\" + serverName;\n \n     // Make sure that configured managed server is ready \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server is RUNNING\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n     logger.info(\"Domain is patched to shutdown standalone managed server\");\n \n-    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    checkPodDeleted(serverPodName, domainUid, domainNamespace);\n     logger.info(\"Standalone managed server shutdown success\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n     logger.info(\"Domain is patched to start standalone managed server\");\n \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server restart success\");\n+\n+    // Verify that if server start policy is IF_NEEDED and the server is selected\n+    // to start based on the replica count, it means that server is already started or is\n+    // in the process of starting. In this case, script exits without making any changes.\n+    String result = executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName);\n+    assertTrue(result.contains(\"No changes needed\"), \"startServer.sh shouldn't make changes\");\n+  }\n+\n+  /**\n+   * Negative test to verify:\n+   * (a) the sample script can not stop or start a non-existing server\n+   * (b) the sample script can not stop or start a non-existing cluster\n+   * (c) the sample script can not stop or start a non-existing domain.\n+   */\n+  @Test\n+  @DisplayName(\"Verify that the sample script can not stop or start non-existing components\")\n+  public void testRestartWrongComponent() {\n+    String wrongServerName = \"ms1\";\n+    String regex = \".*\" + wrongServerName + \".*\\\\s*is not part\";\n+\n+    // verify that the script can not stop a non-exist server\n+    String result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_SERVER_SCRIPT, SERVER_LIFECYCLE, wrongServerName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a server that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist server\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, wrongServerName, \"\", false),\n+      String.format(\"Failed to run %s\", START_SERVER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't start a server that doesn't exist\");\n+\n+    // verify that the script can not stop a non-exist cluster\n+    String wrongClusterName = \"cluster-3\";\n+    regex = \".*\" + wrongClusterName + \".*\\\\s*not part of domain\";\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_CLUSTER_SCRIPT, CLUSTER_LIFECYCLE, wrongClusterName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(result.contains(\"cluster cluster-3 is not part of domain\"),\n+        \"The script shouldn't stop a cluster that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist cluster\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_CLUSTER_SCRIPT, CLUSTER_LIFECYCLE, wrongClusterName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(result.contains(\"cluster cluster-3 is not part of domain\"),\n+        \"The script shouldn't start a cluster that doesn't exist\");\n+\n+    // verify that the script can not stop a non-exist domain\n+    String domainName = \"mii-start-policy\" + \"-123\";\n+    regex = \".*\" + domainName + \".*\\\\s*not found\";\n+    result = assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_DOMAIN_SCRIPT, DOMAIN, null, \"\", false, domainName),\n+        String.format(\"Failed to run %s\", STOP_DOMAIN_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a domain that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist domain\n+    result = assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_DOMAIN_SCRIPT, DOMAIN, null, \"\", false, domainName),\n+        String.format(\"Failed to run %s\", START_DOMAIN_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't start a domain that doesn't exist\");\n+  }\n+\n+  /**\n+   * Negative test to verify that the sample script can not start a server that exceeds the max cluster size\n+   * e.g. the max cluster size is 2, the sample script can't start server 3\n+   */\n+  @Test\n+  @DisplayName(\"Verify that the sample script can not start a server that exceeds the max cluster size\")\n+  public void testStartMangedServerBeyondMaxClusyterLimit() {\n+    String configServerName = \"config-cluster-server3\";\n+    String dynServerName = \"managed-server6\";\n+\n+    // verify that the script can not start a server in config cluster that exceeds the max cluster size\n+    String regex = \".*\" + configServerName + \".*\\\\s*is not part\";\n+    String result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, configServerName, \"\", false),\n+        String.format(\"Failed to run %s\", START_SERVER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a server that is beyong the limit\");\n+\n+    // verify that the script can not start a server in dynamic cluster that exceeds the max cluster size\n+    regex = \".*outside the range of allowed servers\";\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, dynServerName, \"\", false),\n+        String.format(\"Failed to run %s\", START_SERVER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a server that is beyong the limit\");\n+  }\n+\n+  /**\n+   * Verify that after the admin server is stopped, the sample script can start or stop a server.\n+   */\n+  @Disabled(\"Due to the bug OWLS-86251\")\n+  @Test\n+  @DisplayName(\"In the absence of Administration Server, sample script can start/stop a managed server\")\n+  public void testServerRestartMSWithoutAdmin() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1NTY0Mw=="}, "originalCommit": {"oid": "edaccac9c8b5ccbbd0c0d3e86702e7e9b658c2dd"}, "originalPosition": 672}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODc1MDg1OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjoxNjozM1rOH9B_5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMjozOTozMlrOH9Ctnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1NzkyNA==", "bodyText": "Describe the configuration details with usecase as follows ...\nCurrently, the domain resource has a configured cluster with two managed servers and a dynamic cluster with MaxClusterSize set to 5.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r533757924", "createdAt": "2020-12-01T22:16:33Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -663,36 +714,172 @@ public void testStandaloneManagedRestartAlways() {\n    * Make sure that ONLY the specified managed server is stopped. \n    * Restart the independent managed server by patching the resource definition \n    * with spec/managedServers/0/serverStartPolicy set to IF_NEEDED.\n-   * Make sure that the specified managed server is in RUNNING state.\n+   * Make sure that the specified managed server is in RUNNING state\n+   * Verify that if server start policy is IF_NEEDED and the server is selected\n+   * to start based on the replica count, it means that server is already started or is\n+   * in the process of starting. In this case, script exits without making any changes.\n    */\n-\n   // The usecase fails NEVER->IF_NEEDED\n   // https://bug.oraclecorp.com/pls/bug/webbug_print.show?c_rptno=31833260\n   @Test\n   @DisplayName(\"Restart the standalone managed server with serverStartPolicy\")\n   public void testStandaloneManagedRestartIfNeeded() {\n-\n-    String configServerPodName = domainUid + \"-standalone-managed\";\n+    String serverName = \"standalone-managed\";\n+    String serverPodName = domainUid + \"-\" + serverName;\n \n     // Make sure that configured managed server is ready \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server is RUNNING\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n     logger.info(\"Domain is patched to shutdown standalone managed server\");\n \n-    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    checkPodDeleted(serverPodName, domainUid, domainNamespace);\n     logger.info(\"Standalone managed server shutdown success\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n     logger.info(\"Domain is patched to start standalone managed server\");\n \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server restart success\");\n+\n+    // Verify that if server start policy is IF_NEEDED and the server is selected\n+    // to start based on the replica count, it means that server is already started or is\n+    // in the process of starting. In this case, script exits without making any changes.\n+    String result = executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName);\n+    assertTrue(result.contains(\"No changes needed\"), \"startServer.sh shouldn't make changes\");\n+  }\n+\n+  /**\n+   * Negative test to verify:\n+   * (a) the sample script can not stop or start a non-existing server\n+   * (b) the sample script can not stop or start a non-existing cluster\n+   * (c) the sample script can not stop or start a non-existing domain.\n+   */\n+  @Test\n+  @DisplayName(\"Verify that the sample script can not stop or start non-existing components\")\n+  public void testRestartWrongComponent() {\n+    String wrongServerName = \"ms1\";\n+    String regex = \".*\" + wrongServerName + \".*\\\\s*is not part\";\n+\n+    // verify that the script can not stop a non-exist server\n+    String result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_SERVER_SCRIPT, SERVER_LIFECYCLE, wrongServerName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a server that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist server\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, wrongServerName, \"\", false),\n+      String.format(\"Failed to run %s\", START_SERVER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't start a server that doesn't exist\");\n+\n+    // verify that the script can not stop a non-exist cluster\n+    String wrongClusterName = \"cluster-3\";\n+    regex = \".*\" + wrongClusterName + \".*\\\\s*not part of domain\";\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_CLUSTER_SCRIPT, CLUSTER_LIFECYCLE, wrongClusterName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(result.contains(\"cluster cluster-3 is not part of domain\"),\n+        \"The script shouldn't stop a cluster that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist cluster\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_CLUSTER_SCRIPT, CLUSTER_LIFECYCLE, wrongClusterName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(result.contains(\"cluster cluster-3 is not part of domain\"),\n+        \"The script shouldn't start a cluster that doesn't exist\");\n+\n+    // verify that the script can not stop a non-exist domain\n+    String domainName = \"mii-start-policy\" + \"-123\";\n+    regex = \".*\" + domainName + \".*\\\\s*not found\";\n+    result = assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_DOMAIN_SCRIPT, DOMAIN, null, \"\", false, domainName),\n+        String.format(\"Failed to run %s\", STOP_DOMAIN_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a domain that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist domain\n+    result = assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_DOMAIN_SCRIPT, DOMAIN, null, \"\", false, domainName),\n+        String.format(\"Failed to run %s\", START_DOMAIN_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't start a domain that doesn't exist\");\n+  }\n+\n+  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edaccac9c8b5ccbbd0c0d3e86702e7e9b658c2dd"}, "originalPosition": 641}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc2OTYzMQ==", "bodyText": "added", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r533769631", "createdAt": "2020-12-01T22:39:32Z", "author": {"login": "hzhao-github"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -663,36 +714,172 @@ public void testStandaloneManagedRestartAlways() {\n    * Make sure that ONLY the specified managed server is stopped. \n    * Restart the independent managed server by patching the resource definition \n    * with spec/managedServers/0/serverStartPolicy set to IF_NEEDED.\n-   * Make sure that the specified managed server is in RUNNING state.\n+   * Make sure that the specified managed server is in RUNNING state\n+   * Verify that if server start policy is IF_NEEDED and the server is selected\n+   * to start based on the replica count, it means that server is already started or is\n+   * in the process of starting. In this case, script exits without making any changes.\n    */\n-\n   // The usecase fails NEVER->IF_NEEDED\n   // https://bug.oraclecorp.com/pls/bug/webbug_print.show?c_rptno=31833260\n   @Test\n   @DisplayName(\"Restart the standalone managed server with serverStartPolicy\")\n   public void testStandaloneManagedRestartIfNeeded() {\n-\n-    String configServerPodName = domainUid + \"-standalone-managed\";\n+    String serverName = \"standalone-managed\";\n+    String serverPodName = domainUid + \"-\" + serverName;\n \n     // Make sure that configured managed server is ready \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server is RUNNING\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"NEVER\");\n     logger.info(\"Domain is patched to shutdown standalone managed server\");\n \n-    checkPodDeleted(configServerPodName, domainUid, domainNamespace);\n+    checkPodDeleted(serverPodName, domainUid, domainNamespace);\n     logger.info(\"Standalone managed server shutdown success\");\n \n-    patchServerStartPolicy(\n-        \"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n+    patchServerStartPolicy(\"/spec/managedServers/0/serverStartPolicy\", \"IF_NEEDED\");\n     logger.info(\"Domain is patched to start standalone managed server\");\n \n-    checkPodReadyAndServiceExists(configServerPodName,\n+    checkPodReadyAndServiceExists(serverPodName,\n         domainUid, domainNamespace);\n     logger.info(\"Standalone managed server restart success\");\n+\n+    // Verify that if server start policy is IF_NEEDED and the server is selected\n+    // to start based on the replica count, it means that server is already started or is\n+    // in the process of starting. In this case, script exits without making any changes.\n+    String result = executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName);\n+    assertTrue(result.contains(\"No changes needed\"), \"startServer.sh shouldn't make changes\");\n+  }\n+\n+  /**\n+   * Negative test to verify:\n+   * (a) the sample script can not stop or start a non-existing server\n+   * (b) the sample script can not stop or start a non-existing cluster\n+   * (c) the sample script can not stop or start a non-existing domain.\n+   */\n+  @Test\n+  @DisplayName(\"Verify that the sample script can not stop or start non-existing components\")\n+  public void testRestartWrongComponent() {\n+    String wrongServerName = \"ms1\";\n+    String regex = \".*\" + wrongServerName + \".*\\\\s*is not part\";\n+\n+    // verify that the script can not stop a non-exist server\n+    String result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_SERVER_SCRIPT, SERVER_LIFECYCLE, wrongServerName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a server that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist server\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, wrongServerName, \"\", false),\n+      String.format(\"Failed to run %s\", START_SERVER_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't start a server that doesn't exist\");\n+\n+    // verify that the script can not stop a non-exist cluster\n+    String wrongClusterName = \"cluster-3\";\n+    regex = \".*\" + wrongClusterName + \".*\\\\s*not part of domain\";\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_CLUSTER_SCRIPT, CLUSTER_LIFECYCLE, wrongClusterName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(result.contains(\"cluster cluster-3 is not part of domain\"),\n+        \"The script shouldn't stop a cluster that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist cluster\n+    result =  assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_CLUSTER_SCRIPT, CLUSTER_LIFECYCLE, wrongClusterName, \"\", false),\n+        String.format(\"Failed to run %s\", STOP_CLUSTER_SCRIPT));\n+    assertTrue(result.contains(\"cluster cluster-3 is not part of domain\"),\n+        \"The script shouldn't start a cluster that doesn't exist\");\n+\n+    // verify that the script can not stop a non-exist domain\n+    String domainName = \"mii-start-policy\" + \"-123\";\n+    regex = \".*\" + domainName + \".*\\\\s*not found\";\n+    result = assertDoesNotThrow(() ->\n+        executeLifecycleScript(STOP_DOMAIN_SCRIPT, DOMAIN, null, \"\", false, domainName),\n+        String.format(\"Failed to run %s\", STOP_DOMAIN_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't stop a domain that doesn't exist\");\n+\n+    // verify that the script can not start a non-exist domain\n+    result = assertDoesNotThrow(() ->\n+        executeLifecycleScript(START_DOMAIN_SCRIPT, DOMAIN, null, \"\", false, domainName),\n+        String.format(\"Failed to run %s\", START_DOMAIN_SCRIPT));\n+    assertTrue(verifyExecuteResult(result, regex),\"The script shouldn't start a domain that doesn't exist\");\n+  }\n+\n+  /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc1NzkyNA=="}, "originalCommit": {"oid": "edaccac9c8b5ccbbd0c0d3e86702e7e9b658c2dd"}, "originalPosition": 641}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTM2ODM1OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMjoxNzoxNFrOH9HpyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzoyMTowNVrOH9lzdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg1MDU2OA==", "bodyText": "unused variable serverPodName2", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r533850568", "createdAt": "2020-12-02T02:17:14Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -752,6 +746,27 @@ public void testStandaloneManagedRestartIfNeeded() {\n     assertTrue(result.contains(\"No changes needed\"), \"startServer.sh shouldn't make changes\");\n   }\n \n+  /**\n+   * Start a dynamic cluster managed server within the max cluster size\n+   * and verify the replica count increased.\n+   */\n+  @Test\n+  @DisplayName(\"Start a dynamic cluster managed server within the max cluster size and verify replica number increased\")\n+  public void testDynamicClusterReplicaCountIncrease() {\n+    String serverName = \"managed-server3\";\n+    String serverPodName = domainUid + \"-\" + serverName;\n+    String serverPodName2 = domainUid + \"-managed-server2\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "529a07722a1ef4f294a783ba82ad47813aa4be8b"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM0NDU2Nw==", "bodyText": "it's used at the line 761", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r534344567", "createdAt": "2020-12-02T17:21:05Z", "author": {"login": "hzhao-github"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -752,6 +746,27 @@ public void testStandaloneManagedRestartIfNeeded() {\n     assertTrue(result.contains(\"No changes needed\"), \"startServer.sh shouldn't make changes\");\n   }\n \n+  /**\n+   * Start a dynamic cluster managed server within the max cluster size\n+   * and verify the replica count increased.\n+   */\n+  @Test\n+  @DisplayName(\"Start a dynamic cluster managed server within the max cluster size and verify replica number increased\")\n+  public void testDynamicClusterReplicaCountIncrease() {\n+    String serverName = \"managed-server3\";\n+    String serverPodName = domainUid + \"-\" + serverName;\n+    String serverPodName2 = domainUid + \"-managed-server2\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg1MDU2OA=="}, "originalCommit": {"oid": "529a07722a1ef4f294a783ba82ad47813aa4be8b"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTM3MzY5OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMjoyMDoxM1rOH9HtBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzoyNDozMlrOH9l9OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg1MTM5Nw==", "bodyText": "Here we do not check the repilca count. Here we can check the stdout of the startupScript which indicate that replica count has been increased OR we can create a method to get the updated replica count from the domain resource.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r533851397", "createdAt": "2020-12-02T02:20:13Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -752,6 +746,27 @@ public void testStandaloneManagedRestartIfNeeded() {\n     assertTrue(result.contains(\"No changes needed\"), \"startServer.sh shouldn't make changes\");\n   }\n \n+  /**\n+   * Start a dynamic cluster managed server within the max cluster size\n+   * and verify the replica count increased.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "529a07722a1ef4f294a783ba82ad47813aa4be8b"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM0NzA2NA==", "bodyText": "changed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2075#discussion_r534347064", "createdAt": "2020-12-02T17:24:32Z", "author": {"login": "hzhao-github"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItServerStartPolicy.java", "diffHunk": "@@ -752,6 +746,27 @@ public void testStandaloneManagedRestartIfNeeded() {\n     assertTrue(result.contains(\"No changes needed\"), \"startServer.sh shouldn't make changes\");\n   }\n \n+  /**\n+   * Start a dynamic cluster managed server within the max cluster size\n+   * and verify the replica count increased.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg1MTM5Nw=="}, "originalCommit": {"oid": "529a07722a1ef4f294a783ba82ad47813aa4be8b"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3780, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}