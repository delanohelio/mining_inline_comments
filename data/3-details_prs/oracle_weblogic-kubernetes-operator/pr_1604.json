{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5ODYyMDc2", "number": 1604, "title": "Support for Kubernetes exec command", "bodyText": "Added support for executing commands in a container of a pod using Kubernetes client 'exec' API.\nAdded a simple test that uses the 'exec' API to execute readState.sh script, to testCreateMiiDomain, to verify WebLogic server status.", "createdAt": "2020-04-28T03:34:57Z", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1604", "merged": true, "mergeCommit": {"oid": "75a9407f5ebeca28d16982330b7369fbb210fdf4"}, "closed": true, "closedAt": "2020-05-01T14:50:48Z", "author": {"login": "lennyphan"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABca7YJMgH2gAyNDA5ODYyMDc2OjE3Y2JkNDkwZjlmMTliOTgxZDBlMDNlODRmYmFjNTA2YjFmYTg1MTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcdC3h8gFqTQwNDIwMTI1OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "17cbd490f9f19b981d0e03e84fbac506b1fa8510", "author": {"user": {"login": "lennyphan", "name": "Lenny Phan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/17cbd490f9f19b981d0e03e84fbac506b1fa8510", "committedDate": "2020-04-25T00:58:53Z", "message": "Add support for Kubernetes exec API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ec6710fa3f4ed9ac70a18ff8dc8d61d4a41798e", "author": {"user": {"login": "lennyphan", "name": "Lenny Phan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7ec6710fa3f4ed9ac70a18ff8dc8d61d4a41798e", "committedDate": "2020-04-25T01:14:02Z", "message": "merge from develop branch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f1172f7878b175a231a9dbe894cf8a81ff92acc", "author": {"user": {"login": "lennyphan", "name": "Lenny Phan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3f1172f7878b175a231a9dbe894cf8a81ff92acc", "committedDate": "2020-04-27T21:22:46Z", "message": "Update processing input stream and adding ExecResult return type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c0c96d487975fd52836134ff67ab27520bb09d2", "author": {"user": {"login": "lennyphan", "name": "Lenny Phan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8c0c96d487975fd52836134ff67ab27520bb09d2", "committedDate": "2020-04-27T21:25:42Z", "message": "Merge remote-tracking branch 'origin/develop' into test-exec-cmd\n\nMerge latest from develop branch."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13d1f50918ba4c9f71074ef949d7074215a66e66", "author": {"user": {"login": "lennyphan", "name": "Lenny Phan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/13d1f50918ba4c9f71074ef949d7074215a66e66", "committedDate": "2020-04-27T22:13:17Z", "message": "clean up reading output thread join"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f70b000f5a5726b8250f5bc953ef3c334c4499ad", "author": {"user": {"login": "lennyphan", "name": "Lenny Phan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f70b000f5a5726b8250f5bc953ef3c334c4499ad", "committedDate": "2020-04-28T01:08:48Z", "message": "add test to call exec"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8644f41c1ff804e07dd24397fc1f6abe72a8dc32", "author": {"user": {"login": "lennyphan", "name": "Lenny Phan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8644f41c1ff804e07dd24397fc1f6abe72a8dc32", "committedDate": "2020-04-28T03:24:22Z", "message": "update copyright"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxODU0NDQw", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1604#pullrequestreview-401854440", "createdAt": "2020-04-28T13:49:49Z", "commit": {"oid": "8644f41c1ff804e07dd24397fc1f6abe72a8dc32"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMzo0OTo0OVrOGNVACw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMzo1NTo1MVrOGNVSlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYyODc0Nw==", "bodyText": "In general we would not want the test code directly works with low-level Kubernetes objects. But I am not worried about this here because this method is a sample to demonstrate and test the new functionality, which eventually may not needed.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1604#discussion_r416628747", "createdAt": "2020-04-28T13:49:49Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -757,4 +767,23 @@ private void checkServiceCreated(String serviceName, String domNamespace) {\n \n   }\n \n+  private void checkServerReadyStatusByExec(String podName, String namespace) {\n+    final V1Pod pod = assertDoesNotThrow(() -> oracle.weblogic.kubernetes.assertions.impl.Kubernetes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8644f41c1ff804e07dd24397fc1f6abe72a8dc32"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYzMTk0Mg==", "bodyText": "I don't know how long it takes for the phase to be updated to \"terminating\", and how long it will stay in that phase. Wondering if this check may hit a window, and as a result, reports a false failure.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1604#discussion_r416631942", "createdAt": "2020-04-28T13:53:53Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -491,9 +507,15 @@ public static boolean deleteNamespace(String name) {\n     }\n \n     if (response.getObject() != null) {\n-      logger.info(\n-          \"Received after-deletion status of the requested object, will be deleting namespace\"\n-              + \" in background!\");\n+      V1Namespace namespace = (V1Namespace) response.getObject();\n+      String phase = namespace.getStatus().getPhase();\n+      logger.fine(\n+          \"Deletion of namespace \" + namespace.getMetadata().getName() + \" is in phase: \" + phase);\n+      if (!phase.equals(\"Terminating\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8644f41c1ff804e07dd24397fc1f6abe72a8dc32"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYzMzQ5NQ==", "bodyText": "It seems that if the redirectToStdout is false, the following code will still make a copy of the original  input stream while the original input stream can be directly used.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1604#discussion_r416633495", "createdAt": "2020-04-28T13:55:51Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -1327,5 +1352,149 @@ public static boolean deleteClusterRoleBinding(String name) {\n     return true;\n   }\n \n+  // --------------------------- Exec   ---------------------------\n+\n+  /**\n+   * Execute a command in a container.\n+   *\n+   * @param pod The pod where the command is run\n+   * @param containerName The container in the Pod where the command is run. If no container\n+   *     name is provided than the first container in the Pod is used.\n+   * @param redirectToStdout copy Process output to stdout\n+   * @param command The command to run\n+   * @return result of command execution\n+   * @throws IOException if an I/O error occurs.\n+   * @throws ApiException if Kubernetes client API call fails\n+   * @throws InterruptedException if any thread has interrupted the current thread\n+   */\n+  public static ExecResult exec(V1Pod pod, String containerName, boolean redirectToStdout,\n+      String... command)\n+      throws IOException, ApiException, InterruptedException {\n+\n+    // Execute command using Kubernetes API\n+    KubernetesExec kubernetesExec = createKubernetesExec(pod, containerName);\n+    final Process proc = kubernetesExec.exec(command);\n+\n+    final CopyingOutputStream copyOut =\n+        redirectToStdout ? new CopyingOutputStream(System.out) : new CopyingOutputStream(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8644f41c1ff804e07dd24397fc1f6abe72a8dc32"}, "originalPosition": 123}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxODU5Nzc0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1604#pullrequestreview-401859774", "createdAt": "2020-04-28T13:55:12Z", "commit": {"oid": "8644f41c1ff804e07dd24397fc1f6abe72a8dc32"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMzo1NToxMlrOGNVQeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNDowNjo1MFrOGNV0tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYzMjk1Mg==", "bodyText": "equals? or contains? just checking", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1604#discussion_r416632952", "createdAt": "2020-04-28T13:55:12Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -757,4 +767,23 @@ private void checkServiceCreated(String serviceName, String domNamespace) {\n \n   }\n \n+  private void checkServerReadyStatusByExec(String podName, String namespace) {\n+    final V1Pod pod = assertDoesNotThrow(() -> oracle.weblogic.kubernetes.assertions.impl.Kubernetes\n+        .getPod(namespace, null, podName));\n+\n+    if (pod != null) {\n+      ExecResult execResult = assertDoesNotThrow(\n+          () -> execCommand(pod, null, true, READ_STATE_COMMAND));\n+      if (execResult.exitValue() == 0) {\n+        logger.info(\"execResult: \" + execResult);\n+        assertEquals(\"RUNNING\", execResult.stdout(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8644f41c1ff804e07dd24397fc1f6abe72a8dc32"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYzMzE2MA==", "bodyText": "fix this javadoc please", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1604#discussion_r416633160", "createdAt": "2020-04-28T13:55:27Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -495,7 +499,7 @@ public static boolean buildAppArchive(AppParams params) {\n    * @param registryName registry name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8644f41c1ff804e07dd24397fc1f6abe72a8dc32"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYzMzY5Nw==", "bodyText": "is run -> is to be run", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1604#discussion_r416633697", "createdAt": "2020-04-28T13:56:06Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -531,6 +535,27 @@ public static JsonObject createDockerConfigJson(String username, String password\n     return Docker.createDockerConfigJson(username, password, email, registry);\n   }\n \n+  // ----------------------- Execute a Command   ---------------------------\n+\n+  /**\n+   * Execute a command in a container.\n+   *\n+   * @param pod The pod where the command is run", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8644f41c1ff804e07dd24397fc1f6abe72a8dc32"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYzMzg4Mg==", "bodyText": "is run -> is to be run", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1604#discussion_r416633882", "createdAt": "2020-04-28T13:56:18Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -531,6 +535,27 @@ public static JsonObject createDockerConfigJson(String username, String password\n     return Docker.createDockerConfigJson(username, password, email, registry);\n   }\n \n+  // ----------------------- Execute a Command   ---------------------------\n+\n+  /**\n+   * Execute a command in a container.\n+   *\n+   * @param pod The pod where the command is run\n+   * @param containerName The container in the Pod where the command is run. If no container", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8644f41c1ff804e07dd24397fc1f6abe72a8dc32"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYzNDI2Mw==", "bodyText": "process - no capital", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1604#discussion_r416634263", "createdAt": "2020-04-28T13:56:44Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -531,6 +535,27 @@ public static JsonObject createDockerConfigJson(String username, String password\n     return Docker.createDockerConfigJson(username, password, email, registry);\n   }\n \n+  // ----------------------- Execute a Command   ---------------------------\n+\n+  /**\n+   * Execute a command in a container.\n+   *\n+   * @param pod The pod where the command is run\n+   * @param containerName The container in the Pod where the command is run. If no container\n+   *     name is provided than the first container in the Pod is used.\n+   * @param redirectToStdout copy Process output to stdout", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8644f41c1ff804e07dd24397fc1f6abe72a8dc32"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYzNDg2MQ==", "bodyText": "same comments as in other file", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1604#discussion_r416634861", "createdAt": "2020-04-28T13:57:26Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Exec.java", "diffHunk": "@@ -0,0 +1,33 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.actions.impl;\n+\n+import java.io.IOException;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1Pod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+\n+public class Exec {\n+\n+  /**\n+   * Execute a command in a container.\n+   *\n+   * @param pod The pod where the command is run", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8644f41c1ff804e07dd24397fc1f6abe72a8dc32"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYzNTgzMA==", "bodyText": "this is unreliable - you need to wait until it is gone, but just terminating.\nit could get stuck in terminating forever if there is a bad finalizer", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1604#discussion_r416635830", "createdAt": "2020-04-28T13:58:35Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -491,9 +507,15 @@ public static boolean deleteNamespace(String name) {\n     }\n \n     if (response.getObject() != null) {\n-      logger.info(\n-          \"Received after-deletion status of the requested object, will be deleting namespace\"\n-              + \" in background!\");\n+      V1Namespace namespace = (V1Namespace) response.getObject();\n+      String phase = namespace.getStatus().getPhase();\n+      logger.fine(\n+          \"Deletion of namespace \" + namespace.getMetadata().getName() + \" is in phase: \" + phase);\n+      if (!phase.equals(\"Terminating\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8644f41c1ff804e07dd24397fc1f6abe72a8dc32"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYzNjg3Nw==", "bodyText": "same", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1604#discussion_r416636877", "createdAt": "2020-04-28T13:59:59Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -1327,5 +1352,149 @@ public static boolean deleteClusterRoleBinding(String name) {\n     return true;\n   }\n \n+  // --------------------------- Exec   ---------------------------\n+\n+  /**\n+   * Execute a command in a container.\n+   *\n+   * @param pod The pod where the command is run", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8644f41c1ff804e07dd24397fc1f6abe72a8dc32"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYzNzY4NQ==", "bodyText": "process does not need capital all through here", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1604#discussion_r416637685", "createdAt": "2020-04-28T14:00:58Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -1327,5 +1352,149 @@ public static boolean deleteClusterRoleBinding(String name) {\n     return true;\n   }\n \n+  // --------------------------- Exec   ---------------------------\n+\n+  /**\n+   * Execute a command in a container.\n+   *\n+   * @param pod The pod where the command is run\n+   * @param containerName The container in the Pod where the command is run. If no container\n+   *     name is provided than the first container in the Pod is used.\n+   * @param redirectToStdout copy Process output to stdout\n+   * @param command The command to run\n+   * @return result of command execution\n+   * @throws IOException if an I/O error occurs.\n+   * @throws ApiException if Kubernetes client API call fails\n+   * @throws InterruptedException if any thread has interrupted the current thread\n+   */\n+  public static ExecResult exec(V1Pod pod, String containerName, boolean redirectToStdout,\n+      String... command)\n+      throws IOException, ApiException, InterruptedException {\n+\n+    // Execute command using Kubernetes API\n+    KubernetesExec kubernetesExec = createKubernetesExec(pod, containerName);\n+    final Process proc = kubernetesExec.exec(command);\n+\n+    final CopyingOutputStream copyOut =\n+        redirectToStdout ? new CopyingOutputStream(System.out) : new CopyingOutputStream(null);\n+\n+    // Start a thread to begin reading the output stream of the command\n+    Thread out = null;\n+    try {\n+      out =\n+          new Thread(\n+              () -> {\n+                try {\n+                  ByteStreams.copy(proc.getInputStream(), copyOut);\n+                } catch (IOException ex) {\n+                  logger.warning(\"Exception reading from input stream.\", ex);\n+                }\n+              });\n+      out.start();\n+\n+      // wait for the Process, which represents the executing command, to terminate", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8644f41c1ff804e07dd24397fc1f6abe72a8dc32"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYzODA5Nw==", "bodyText": "same", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1604#discussion_r416638097", "createdAt": "2020-04-28T14:01:30Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -1327,5 +1352,149 @@ public static boolean deleteClusterRoleBinding(String name) {\n     return true;\n   }\n \n+  // --------------------------- Exec   ---------------------------\n+\n+  /**\n+   * Execute a command in a container.\n+   *\n+   * @param pod The pod where the command is run\n+   * @param containerName The container in the Pod where the command is run. If no container\n+   *     name is provided than the first container in the Pod is used.\n+   * @param redirectToStdout copy Process output to stdout\n+   * @param command The command to run\n+   * @return result of command execution\n+   * @throws IOException if an I/O error occurs.\n+   * @throws ApiException if Kubernetes client API call fails\n+   * @throws InterruptedException if any thread has interrupted the current thread\n+   */\n+  public static ExecResult exec(V1Pod pod, String containerName, boolean redirectToStdout,\n+      String... command)\n+      throws IOException, ApiException, InterruptedException {\n+\n+    // Execute command using Kubernetes API\n+    KubernetesExec kubernetesExec = createKubernetesExec(pod, containerName);\n+    final Process proc = kubernetesExec.exec(command);\n+\n+    final CopyingOutputStream copyOut =\n+        redirectToStdout ? new CopyingOutputStream(System.out) : new CopyingOutputStream(null);\n+\n+    // Start a thread to begin reading the output stream of the command\n+    Thread out = null;\n+    try {\n+      out =\n+          new Thread(\n+              () -> {\n+                try {\n+                  ByteStreams.copy(proc.getInputStream(), copyOut);\n+                } catch (IOException ex) {\n+                  logger.warning(\"Exception reading from input stream.\", ex);\n+                }\n+              });\n+      out.start();\n+\n+      // wait for the Process, which represents the executing command, to terminate\n+      proc.waitFor();\n+\n+      // wait for reading thread to finish any last remaining output\n+      if (out != null) {\n+        out.join();\n+      }\n+\n+      // Read data from Process's stdout\n+      String stdout = read(copyOut.getInputStream());\n+\n+      // Read from Process's stderr, if data available\n+      String stderr = (proc.getErrorStream().available() != 0) ? read(proc.getErrorStream()) : null;\n+\n+      return new ExecResult(proc.exitValue(), stdout, stderr);\n+    } finally {\n+      if (proc != null) {\n+        proc.destroy();\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Create an object which can execute commands in Kubertenes container.\n+   *\n+   * @param pod The pod where the command is run", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8644f41c1ff804e07dd24397fc1f6abe72a8dc32"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYzOTkyOA==", "bodyText": "an inline class that implements an abstract class defined in a different file seems really cumbersome", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1604#discussion_r416639928", "createdAt": "2020-04-28T14:03:56Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -1327,5 +1352,149 @@ public static boolean deleteClusterRoleBinding(String name) {\n     return true;\n   }\n \n+  // --------------------------- Exec   ---------------------------\n+\n+  /**\n+   * Execute a command in a container.\n+   *\n+   * @param pod The pod where the command is run\n+   * @param containerName The container in the Pod where the command is run. If no container\n+   *     name is provided than the first container in the Pod is used.\n+   * @param redirectToStdout copy Process output to stdout\n+   * @param command The command to run\n+   * @return result of command execution\n+   * @throws IOException if an I/O error occurs.\n+   * @throws ApiException if Kubernetes client API call fails\n+   * @throws InterruptedException if any thread has interrupted the current thread\n+   */\n+  public static ExecResult exec(V1Pod pod, String containerName, boolean redirectToStdout,\n+      String... command)\n+      throws IOException, ApiException, InterruptedException {\n+\n+    // Execute command using Kubernetes API\n+    KubernetesExec kubernetesExec = createKubernetesExec(pod, containerName);\n+    final Process proc = kubernetesExec.exec(command);\n+\n+    final CopyingOutputStream copyOut =\n+        redirectToStdout ? new CopyingOutputStream(System.out) : new CopyingOutputStream(null);\n+\n+    // Start a thread to begin reading the output stream of the command\n+    Thread out = null;\n+    try {\n+      out =\n+          new Thread(\n+              () -> {\n+                try {\n+                  ByteStreams.copy(proc.getInputStream(), copyOut);\n+                } catch (IOException ex) {\n+                  logger.warning(\"Exception reading from input stream.\", ex);\n+                }\n+              });\n+      out.start();\n+\n+      // wait for the Process, which represents the executing command, to terminate\n+      proc.waitFor();\n+\n+      // wait for reading thread to finish any last remaining output\n+      if (out != null) {\n+        out.join();\n+      }\n+\n+      // Read data from Process's stdout\n+      String stdout = read(copyOut.getInputStream());\n+\n+      // Read from Process's stderr, if data available\n+      String stderr = (proc.getErrorStream().available() != 0) ? read(proc.getErrorStream()) : null;\n+\n+      return new ExecResult(proc.exitValue(), stdout, stderr);\n+    } finally {\n+      if (proc != null) {\n+        proc.destroy();\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Create an object which can execute commands in Kubertenes container.\n+   *\n+   * @param pod The pod where the command is run\n+   * @param containerName The container in the Pod where the command is run. If no container\n+   *     name is provided than the first container in the Pod is used.\n+   * @return object for executing a command in a container of the pod\n+   */\n+  public static KubernetesExec createKubernetesExec(V1Pod pod, String containerName) {\n+    KubernetesExec kubernetesExec = EXEC_FACTORY.create(pod, containerName);\n+    kubernetesExec.setStdin(stdin);\n+    kubernetesExec.setTty(tty);\n+    return kubernetesExec;\n+  }\n+\n   //------------------------\n+\n+  /**\n+   * KubernetesExec object for executing a command in the container of a pod.\n+   */\n+  public static class KubernetesExecImpl extends KubernetesExec {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8644f41c1ff804e07dd24397fc1f6abe72a8dc32"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY0MDkwNQ==", "bodyText": "fluent pattern does not use \"set\" prefix\nalso this field name is bad - i read \"stdin\" and i assume you mean the stdin - but you really mean something like \"do you want to have a stdin\" or something?? choose a better name", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1604#discussion_r416640905", "createdAt": "2020-04-28T14:05:13Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/KubernetesExec.java", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.actions.impl.primitive;\n+\n+import java.io.IOException;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+\n+/** A base class for an object which can execute a command in an Kubertenes containers. */\n+public abstract class KubernetesExec {\n+  private boolean stdin = true;\n+  private boolean tty = true;\n+\n+  boolean isStdin() {\n+    return stdin;\n+  }\n+\n+  public void setStdin(boolean stdin) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8644f41c1ff804e07dd24397fc1f6abe72a8dc32"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY0MTA4NA==", "bodyText": "is -> has ??", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1604#discussion_r416641084", "createdAt": "2020-04-28T14:05:28Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/KubernetesExec.java", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.actions.impl.primitive;\n+\n+import java.io.IOException;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+\n+/** A base class for an object which can execute a command in an Kubertenes containers. */\n+public abstract class KubernetesExec {\n+  private boolean stdin = true;\n+  private boolean tty = true;\n+\n+  boolean isStdin() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8644f41c1ff804e07dd24397fc1f6abe72a8dc32"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY0MTYzMw==", "bodyText": "javadoc does not seem to describe what this abstract method is actually for", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1604#discussion_r416641633", "createdAt": "2020-04-28T14:06:10Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/KubernetesExec.java", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.actions.impl.primitive;\n+\n+import java.io.IOException;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+\n+/** A base class for an object which can execute a command in an Kubertenes containers. */\n+public abstract class KubernetesExec {\n+  private boolean stdin = true;\n+  private boolean tty = true;\n+\n+  boolean isStdin() {\n+    return stdin;\n+  }\n+\n+  public void setStdin(boolean stdin) {\n+    this.stdin = stdin;\n+  }\n+\n+  boolean isTty() {\n+    return tty;\n+  }\n+\n+  public void setTty(boolean tty) {\n+    this.tty = tty;\n+  }\n+\n+  /**\n+   * Execute a command in a container.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8644f41c1ff804e07dd24397fc1f6abe72a8dc32"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjY0MjIzMA==", "bodyText": "way to much OOP going on here -- use the simple functional pattern with static methods and fluent api instead of all this", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1604#discussion_r416642230", "createdAt": "2020-04-28T14:06:50Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/KubernetesExecFactory.java", "diffHunk": "@@ -0,0 +1,18 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.actions.impl.primitive;\n+\n+import io.kubernetes.client.openapi.models.V1Pod;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8644f41c1ff804e07dd24397fc1f6abe72a8dc32"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "631fb8d521fa11a10efd7978e5cb7c44020c612b", "author": {"user": {"login": "lennyphan", "name": "Lenny Phan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/631fb8d521fa11a10efd7978e5cb7c44020c612b", "committedDate": "2020-04-29T02:45:59Z", "message": "First code review changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ae34c0403e0168df27c3da36a3ed3a8ef502731", "author": {"user": {"login": "lennyphan", "name": "Lenny Phan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6ae34c0403e0168df27c3da36a3ed3a8ef502731", "committedDate": "2020-04-29T02:46:54Z", "message": "Merge remote-tracking branch 'origin/develop' into test-exec-cmd\n\nMerge more changes from develop before push."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyOTQzNTI0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1604#pullrequestreview-402943524", "createdAt": "2020-04-29T18:47:36Z", "commit": {"oid": "6ae34c0403e0168df27c3da36a3ed3a8ef502731"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMTc3MjAz", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1604#pullrequestreview-403177203", "createdAt": "2020-04-30T03:24:30Z", "commit": {"oid": "6ae34c0403e0168df27c3da36a3ed3a8ef502731"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMzoyNDozMFrOGOYXVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMzoyNDozMFrOGOYXVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzczMjQzNw==", "bodyText": "Why do we need multiple setters for \"pod\"?  And, are we doing fluent API or not?  This class seems to mix both.  For example line 50 and 64.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1604#discussion_r417732437", "createdAt": "2020-04-30T03:24:30Z", "author": {"login": "ddsharpe"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/KubernetesExec.java", "diffHunk": "@@ -0,0 +1,134 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.actions.impl.primitive;\n+\n+import java.io.IOException;\n+\n+import io.kubernetes.client.Exec;\n+import io.kubernetes.client.openapi.ApiClient;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1Pod;\n+\n+/**\n+ * KubernetesExec object for executing a command in the container of a pod.\n+ */\n+public class KubernetesExec {\n+  // the Kubernetes api client to dispatch the \"exec\" command\n+  private ApiClient apiClient;\n+\n+  // The Kubernetes pod where the command is to be run\n+  private V1Pod pod;\n+\n+  // the container in which the command is to be run\n+  private String containerName;\n+\n+  // If true, pass a stdin stream into the container\n+  private boolean passStdinAsStream;\n+\n+  // If true, stdin is a TTY (only applies if stdin is true)\n+  private boolean stdinIsTty;\n+\n+  public KubernetesExec apiClient(ApiClient apiClient) {\n+    this.apiClient = apiClient;\n+    return this;\n+  }\n+\n+  /**\n+   * Get the API client for these exec operations.\n+   *\n+   * @return The API client that will be used.\n+   */\n+  public ApiClient getApiClient() {\n+    return apiClient;\n+  }\n+\n+  public void setApiClient(ApiClient apiClient) {\n+    this.apiClient = apiClient;\n+  }\n+\n+  public KubernetesExec pod(V1Pod pod) {\n+    this.pod = pod;\n+    return this;\n+  }\n+\n+  /**\n+   * Get the Kubernetes pod where the command is to be run.\n+   *\n+   * @return Kubernetes pod object\n+   */\n+  public V1Pod getPod() {\n+    return pod;\n+  }\n+\n+  public void setPod(V1Pod pod) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ae34c0403e0168df27c3da36a3ed3a8ef502731"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d25691e8df77ab190322d15f23f36d55ff528fe", "author": {"user": {"login": "lennyphan", "name": "Lenny Phan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0d25691e8df77ab190322d15f23f36d55ff528fe", "committedDate": "2020-04-30T04:23:57Z", "message": "Remove set/get methods in KubernetesExec"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MDAzNDg2", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1604#pullrequestreview-404003486", "createdAt": "2020-05-01T03:22:28Z", "commit": {"oid": "0d25691e8df77ab190322d15f23f36d55ff528fe"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMzoyMjoyOVrOGPBGAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMzoyMzowOVrOGPBGdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM5OTc0NQ==", "bodyText": "is run -> is to be run\nsame on next line", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1604#discussion_r418399745", "createdAt": "2020-05-01T03:22:29Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -1327,5 +1352,149 @@ public static boolean deleteClusterRoleBinding(String name) {\n     return true;\n   }\n \n+  // --------------------------- Exec   ---------------------------\n+\n+  /**\n+   * Execute a command in a container.\n+   *\n+   * @param pod The pod where the command is run\n+   * @param containerName The container in the Pod where the command is run. If no container\n+   *     name is provided than the first container in the Pod is used.\n+   * @param redirectToStdout copy Process output to stdout\n+   * @param command The command to run\n+   * @return result of command execution\n+   * @throws IOException if an I/O error occurs.\n+   * @throws ApiException if Kubernetes client API call fails\n+   * @throws InterruptedException if any thread has interrupted the current thread\n+   */\n+  public static ExecResult exec(V1Pod pod, String containerName, boolean redirectToStdout,\n+      String... command)\n+      throws IOException, ApiException, InterruptedException {\n+\n+    // Execute command using Kubernetes API\n+    KubernetesExec kubernetesExec = createKubernetesExec(pod, containerName);\n+    final Process proc = kubernetesExec.exec(command);\n+\n+    final CopyingOutputStream copyOut =\n+        redirectToStdout ? new CopyingOutputStream(System.out) : new CopyingOutputStream(null);\n+\n+    // Start a thread to begin reading the output stream of the command\n+    Thread out = null;\n+    try {\n+      out =\n+          new Thread(\n+              () -> {\n+                try {\n+                  ByteStreams.copy(proc.getInputStream(), copyOut);\n+                } catch (IOException ex) {\n+                  logger.warning(\"Exception reading from input stream.\", ex);\n+                }\n+              });\n+      out.start();\n+\n+      // wait for the Process, which represents the executing command, to terminate\n+      proc.waitFor();\n+\n+      // wait for reading thread to finish any last remaining output\n+      if (out != null) {\n+        out.join();\n+      }\n+\n+      // Read data from Process's stdout\n+      String stdout = read(copyOut.getInputStream());\n+\n+      // Read from Process's stderr, if data available\n+      String stderr = (proc.getErrorStream().available() != 0) ? read(proc.getErrorStream()) : null;\n+\n+      return new ExecResult(proc.exitValue(), stdout, stderr);\n+    } finally {\n+      if (proc != null) {\n+        proc.destroy();\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Create an object which can execute commands in Kubertenes container.\n+   *\n+   * @param pod The pod where the command is run", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYzODA5Nw=="}, "originalCommit": {"oid": "8644f41c1ff804e07dd24397fc1f6abe72a8dc32"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM5OTg2Mw==", "bodyText": "this method names seems too generic - what does read mean?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1604#discussion_r418399863", "createdAt": "2020-05-01T03:23:09Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -1327,5 +1368,127 @@ public static boolean deleteClusterRoleBinding(String name) {\n     return true;\n   }\n \n+  // --------------------------- Exec   ---------------------------\n+\n+  /**\n+   * Execute a command in a container.\n+   *\n+   * @param pod The pod where the command is to be run\n+   * @param containerName The container in the Pod where the command is to be run. If no\n+   *     container name is provided than the first container in the Pod is used.\n+   * @param redirectToStdout copy process output to stdout\n+   * @param command The command to run\n+   * @return result of command execution\n+   * @throws IOException if an I/O error occurs.\n+   * @throws ApiException if Kubernetes client API call fails\n+   * @throws InterruptedException if any thread has interrupted the current thread\n+   */\n+  public static ExecResult exec(V1Pod pod, String containerName, boolean redirectToStdout,\n+      String... command)\n+      throws IOException, ApiException, InterruptedException {\n+\n+    // Execute command using Kubernetes API\n+    KubernetesExec kubernetesExec = createKubernetesExec(pod, containerName);\n+    final Process proc = kubernetesExec.exec(command);\n+\n+    final CopyingOutputStream copyOut =\n+        redirectToStdout ? new CopyingOutputStream(System.out) : new CopyingOutputStream(null);\n+\n+    // Start a thread to begin reading the output stream of the command\n+    Thread out = null;\n+    try {\n+      out =\n+          new Thread(\n+              () -> {\n+                try {\n+                  ByteStreams.copy(proc.getInputStream(), copyOut);\n+                } catch (IOException ex) {\n+                  // \"Pipe broken\" is expected when process is finished so don't log\n+                  if (ex.getMessage() != null && !ex.getMessage().contains(\"Pipe broken\")) {\n+                    logger.warning(\"Exception reading from input stream.\", ex);\n+                  }\n+                }\n+              });\n+      out.start();\n+\n+      // wait for the process, which represents the executing command, to terminate\n+      proc.waitFor();\n+\n+      // wait for reading thread to finish any last remaining output\n+      if (out != null) {\n+        out.join();\n+      }\n+\n+      // Read data from process's stdout\n+      String stdout = read(copyOut.getInputStream());\n+\n+      // Read from process's stderr, if data available\n+      String stderr = (proc.getErrorStream().available() != 0) ? read(proc.getErrorStream()) : null;\n+\n+      return new ExecResult(proc.exitValue(), stdout, stderr);\n+    } finally {\n+      if (proc != null) {\n+        proc.destroy();\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Create an object which can execute commands in a Kubernetes container.\n+   *\n+   * @param pod The pod where the command is run\n+   * @param containerName The container in the Pod where the command is run. If no container\n+   *     name is provided than the first container in the Pod is used.\n+   * @return object for executing a command in a container of the pod\n+   */\n+  public static KubernetesExec createKubernetesExec(V1Pod pod, String containerName) {\n+    return new KubernetesExec()\n+        .apiClient(apiClient) // the Kubernetes api client to dispatch the \"exec\" command\n+        .pod(pod) // The pod where the command is to be run\n+        .containerName(containerName) // the container in which the command is to be run\n+        .passStdinAsStream() // pass a stdin stream into the container\n+        .stdinIsTty(); // stdin is a TTY (only applies if stdin is true)\n+  }\n+\n   //------------------------\n+\n+  private static String read(InputStream is) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d25691e8df77ab190322d15f23f36d55ff528fe"}, "originalPosition": 208}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b92b73b69d80c49b03e8b79989ea3194ddf3964", "author": {"user": {"login": "lennyphan", "name": "Lenny Phan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/2b92b73b69d80c49b03e8b79989ea3194ddf3964", "committedDate": "2020-05-01T04:14:25Z", "message": "minor changes from latest review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MTgwNDE0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1604#pullrequestreview-404180414", "createdAt": "2020-05-01T14:13:11Z", "commit": {"oid": "2b92b73b69d80c49b03e8b79989ea3194ddf3964"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDoxMzoxMVrOGPKyhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNDoxMzoxMVrOGPKyhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU1ODU5Ng==", "bodyText": "Javadoc in this class is VERY sparse.  Please increase the coverage", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1604#discussion_r418558596", "createdAt": "2020-05-01T14:13:11Z", "author": {"login": "ddsharpe"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/KubernetesExec.java", "diffHunk": "@@ -0,0 +1,69 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.actions.impl.primitive;\n+\n+import java.io.IOException;\n+\n+import io.kubernetes.client.Exec;\n+import io.kubernetes.client.openapi.ApiClient;\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1Pod;\n+\n+/**\n+ * KubernetesExec object for executing a command in the container of a pod.\n+ */\n+public class KubernetesExec {\n+  // the Kubernetes api client to dispatch the \"exec\" command\n+  private ApiClient apiClient;\n+\n+  // The Kubernetes pod where the command is to be run\n+  private V1Pod pod;\n+\n+  // the container in which the command is to be run\n+  private String containerName;\n+\n+  // If true, pass a stdin stream into the container\n+  private boolean passStdinAsStream;\n+\n+  // If true, stdin is a TTY (only applies if stdin is true)\n+  private boolean stdinIsTty;\n+\n+  public KubernetesExec apiClient(ApiClient apiClient) {\n+    this.apiClient = apiClient;\n+    return this;\n+  }\n+\n+  public KubernetesExec pod(V1Pod pod) {\n+    this.pod = pod;\n+    return this;\n+  }\n+\n+\n+  public KubernetesExec containerName(String containerName) {\n+    this.containerName = containerName;\n+    return this;\n+  }\n+\n+  public KubernetesExec passStdinAsStream() {\n+    this.passStdinAsStream = true;\n+    return this;\n+  }\n+\n+  public KubernetesExec stdinIsTty() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b92b73b69d80c49b03e8b79989ea3194ddf3964"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d6311cf2f5d141157a51d0762b6f59b1a6b6a1c", "author": {"user": {"login": "lennyphan", "name": "Lenny Phan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5d6311cf2f5d141157a51d0762b6f59b1a6b6a1c", "committedDate": "2020-05-01T14:46:21Z", "message": "Boost java description of methods"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MjAxMjU5", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1604#pullrequestreview-404201259", "createdAt": "2020-05-01T14:50:21Z", "commit": {"oid": "5d6311cf2f5d141157a51d0762b6f59b1a6b6a1c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4717, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}