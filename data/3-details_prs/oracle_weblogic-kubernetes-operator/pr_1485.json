{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxOTE4NzIz", "number": 1485, "title": "OWLS-80458  New Upgrade Usecase ", "bodyText": "Here are highlights of changes  addressed on this PR\n(a) Added new Upgrade usecas from Release 2.5.0\n(b) Removed the old upgrade Usecases  form Releases ( 2.0, 2.0.1, 2.1, 2.2.0, 2.2.1, 2.3.0)\nAbove older release does not support Helm v3+. Those release only  support Helm v2+\nHowever Opeartor Release v 3.0 will ONLY support v3,\nSo only supported upgrade Usecase is from Op 2.5.0 to any Release above ( e.g. 3.0 )\n(c) Remove apiVersion of Domain Object Checking after Upgrade\nIt takes 7-8 min to update the apiVersion.  Instead added check for Domain CRD version\nupgrade to the latest release.\n(d)  Added method to save the logs for K8s resources after test is complete.\nTest tun on External Jenkins\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-quicktest/1199/", "createdAt": "2020-03-21T21:26:04Z", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485", "merged": true, "mergeCommit": {"oid": "0c5058c4a16609fd400948303ac7db36aa1e7d39"}, "closed": true, "closedAt": "2020-03-26T20:53:51Z", "author": {"login": "anpanigr"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcPiSFIAH2gAyMzkxOTE4NzIzOjE4ZDcxZjg2ODUzOTliZjE3ZTU0Yjg3N2NiNmFhNDRiZjNiOGRjMzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRifOCAH2gAyMzkxOTE4NzIzOjI4YTQwNjM4MmZjN2U0YzM1YmI1ZGFjYWY1ZGU1Yjc0M2UyODAyZmQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "18d71f8685399bf17e54b877cb6aa44bf3b8dc35", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/18d71f8685399bf17e54b877cb6aa44bf3b8dc35", "committedDate": "2020-03-20T15:31:28Z", "message": "Added Upgrade Test 2.5.0 to latest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67ccfa229ce63767974e8ccc6fdcc3444e67328c", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/67ccfa229ce63767974e8ccc6fdcc3444e67328c", "committedDate": "2020-03-20T15:41:44Z", "message": "Resolution to checkstyle Error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "329b0f32f7d62e502fc3be61b5716c8157572c68", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/329b0f32f7d62e502fc3be61b5716c8157572c68", "committedDate": "2020-03-20T21:58:05Z", "message": "Added provison for logging, comment ApiVersion Check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4OTU1Nzk1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#pullrequestreview-378955795", "createdAt": "2020-03-21T22:13:10Z", "commit": {"oid": "329b0f32f7d62e502fc3be61b5716c8157572c68"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92a004172d5de002c28729452793b488a3fd7f82", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/92a004172d5de002c28729452793b488a3fd7f82", "committedDate": "2020-03-23T23:25:42Z", "message": "Modified Upgrade Test to use DomainOnPv; add extra parameter to skip the domain image build"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89f9470e812ac564a0208f837bfc153e6ab53657", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/89f9470e812ac564a0208f837bfc153e6ab53657", "committedDate": "2020-03-23T23:26:23Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into OWLS-80458"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMzQ0MDg1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#pullrequestreview-380344085", "createdAt": "2020-03-24T14:08:37Z", "commit": {"oid": "89f9470e812ac564a0208f837bfc153e6ab53657"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDowODozN1rOF6x77g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDowODozN1rOF6x77g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE3OTg4Ng==", "bodyText": "Why are we switching from Domain in Image to Domain in PV?  If we need to test Domain in PV here, we should ADD it (or add a copy of this test for PV), not remove Domain in Image.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397179886", "createdAt": "2020-03-24T14:08:37Z", "author": {"login": "ddsharpe"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -322,15 +272,11 @@ private void setupOperatorAndDomain(String operatorGitRelease, String operatorRe\n     domNs.add(DOM_NS);\n     operatorMap.put(\"domainNamespaces\", domNs);\n     operator = TestUtils.createOperator(operatorMap, Operator.RestCertType.LEGACY);\n-    // TestUtils.exec(\"kubectl get all --all-namespaces\", true);\n-\n-    // Map<String, Object> wlstDomainMap = TestUtils.loadYaml(DOMAININIMAGE_WLST_YAML);\n-    Map<String, Object> wlstDomainMap = createDomainInImageMap(getNewSuffixCount(), false, testClassName);\n+    Map<String, Object> wlstDomainMap = createDomainMap(getNewSuffixCount(),testClassName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f9470e812ac564a0208f837bfc153e6ab53657"}, "originalPosition": 314}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMzcyNDQ2", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#pullrequestreview-380372446", "createdAt": "2020-03-24T14:36:56Z", "commit": {"oid": "89f9470e812ac564a0208f837bfc153e6ab53657"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDozNjo1NlrOF6zRUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDozNjo1NlrOF6zRUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwMTc0NQ==", "bodyText": "can you get the version from develop crd instead of adding a property here, we will have to change this value for every release.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397201745", "createdAt": "2020-03-24T14:36:56Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/resources/OperatorIT.properties", "diffHunk": "@@ -16,6 +16,7 @@ oracledbImageTag = 12.2.0.1-slim\n oracledbImageName = container-registry.oracle.com/database/enterprise\n OCR_SERVER=container-registry.oracle.com\n DOMAIN_API_VERSION = weblogic.oracle/v7\n+CRD_VERSION = v7", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f9470e812ac564a0208f837bfc153e6ab53657"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMzc1NjY5", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#pullrequestreview-380375669", "createdAt": "2020-03-24T14:40:10Z", "commit": {"oid": "89f9470e812ac564a0208f837bfc153e6ab53657"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDo0MDoxMFrOF6zbBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDo0NjowMFrOF6zt1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwNDIzMA==", "bodyText": "remove this method as its not used", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397204230", "createdAt": "2020-03-24T14:40:10Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -238,41 +141,74 @@ public void testOperatorUpgradeFrom2_3_0() throws Exception {\n    * @param restart boolean parameter used to determine if a restart of domain is checked\n    * @throws Exception when upgrade fails or basic usecase testing or scaling fails.\n    */\n-  private void upgradeOperator(boolean restart) throws Exception {\n+  private void upgradeOperator() throws Exception {\n     operator.callHelmUpgrade(\"image=\" + OP_TARGET_RELEASE);\n-    if (restart) {\n-      checkDomainRollingRestarted();\n-    }\n-    checkOperatorVersion();\n+    checkDomainNotRestarted();\n+    checkCrdVersion();\n+    // checkDomainApiVersion(); Not Needed \n     testClusterScaling(operator, domain, false);\n   }\n \n   /**\n-   * checks the expected version of the upgraded operator in a loop. In Jenkins it takes nearly 8\n-   * minutes to show the updated value of the domain CRD.\n+   * Checks Expected/Upgraded ApiVersion of the Domain Object in a loop. \n+   * In Jenkins it takes nearly 8 minutes to show the updated value \n+   * \n+   * The .apiVersion of the domain will not be updated until the domain is \n+   * written again (e.g. by the operator when updating status)\n+   * This contributes to long time period. We can skip this check \n    *\n    * @throws Exception when version does not match\n    */\n-  private void checkOperatorVersion() throws Exception {\n+  private void checkDomainApiVersion() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f9470e812ac564a0208f837bfc153e6ab53657"}, "originalPosition": 229}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwNzQyMQ==", "bodyText": "use BaseTest.getMaxIterationsPod() and BaseTest.getWaitTimePod() - these are controlled from properties file or env var. we use these across the tests if we check for something in loop.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397207421", "createdAt": "2020-03-24T14:44:00Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -238,41 +141,74 @@ public void testOperatorUpgradeFrom2_3_0() throws Exception {\n    * @param restart boolean parameter used to determine if a restart of domain is checked\n    * @throws Exception when upgrade fails or basic usecase testing or scaling fails.\n    */\n-  private void upgradeOperator(boolean restart) throws Exception {\n+  private void upgradeOperator() throws Exception {\n     operator.callHelmUpgrade(\"image=\" + OP_TARGET_RELEASE);\n-    if (restart) {\n-      checkDomainRollingRestarted();\n-    }\n-    checkOperatorVersion();\n+    checkDomainNotRestarted();\n+    checkCrdVersion();\n+    // checkDomainApiVersion(); Not Needed \n     testClusterScaling(operator, domain, false);\n   }\n \n   /**\n-   * checks the expected version of the upgraded operator in a loop. In Jenkins it takes nearly 8\n-   * minutes to show the updated value of the domain CRD.\n+   * Checks Expected/Upgraded ApiVersion of the Domain Object in a loop. \n+   * In Jenkins it takes nearly 8 minutes to show the updated value \n+   * \n+   * The .apiVersion of the domain will not be updated until the domain is \n+   * written again (e.g. by the operator when updating status)\n+   * This contributes to long time period. We can skip this check \n    *\n    * @throws Exception when version does not match\n    */\n-  private void checkOperatorVersion() throws Exception {\n+  private void checkDomainApiVersion() throws Exception {\n     boolean result = false;\n     LoggerHelper.getLocal().log(\n         Level.INFO,\n         \"Checking for the domain apiVersion \"\n             + getDomainApiVersion()\n             + \" in a loop for up to 15 minutes\");\n-    for (int i = 0; i < 900; i = i + 10) {\n+    for (int i = 0; i < 120; i++) {\n       ExecResult exec =\n           TestUtils.exec(\n               \"kubectl get domain -n \" + DOM_NS + \"  \" + DUID + \" -o jsonpath={.apiVersion}\", true);\n       if (exec.stdout().contains(getDomainApiVersion())) {\n-        LoggerHelper.getLocal().log(Level.INFO, \"Got the expected apiVersion\");\n+        int ttime = 10 * (i - 1); \n+        LoggerHelper.getLocal().log(Level.INFO, \"Got the expected API Version after [\" + ttime + \"] Seconds\");\n+        result = true;\n+        break;\n+      }\n+      Thread.sleep(1000 * 10);\n+    }\n+    if (!result) {\n+      throw new RuntimeException(\"FAILURE: Didn't get the expected API Version\");\n+    }\n+  }\n+\n+  /**\n+   * Checks the expected Upgraded Version of CustomResourceDefintion (CRD) \n+   * in default NameSpace in a loop. \n+   *\n+   * @throws Exception when version does not match\n+   */\n+  private void checkCrdVersion() throws Exception {\n+    boolean result = false;\n+    LoggerHelper.getLocal().log(\n+        Level.INFO,\n+        \"Checking for the CRD Version \"\n+            + getDomainApiVersion()\n+            + \" in a loop for up to 15 minutes\");\n+    for (int i = 0; i < 900; i = i + 10) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f9470e812ac564a0208f837bfc153e6ab53657"}, "originalPosition": 268}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwOTA0NQ==", "bodyText": "if rolling restart is triggered, do u see it immediately or will there be little lag? checking once immediately is enough to make sure rolling restart is not triggered?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397209045", "createdAt": "2020-03-24T14:46:00Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -293,6 +229,20 @@ private void checkDomainRollingRestarted() throws Exception {\n     }\n   }\n \n+  /**\n+   * Check whether the weblogic server instances are still RUNNING \n+   * not restarted due to Operator Upgrade\n+   *\n+   * @throws Exception If restarted\n+   */\n+  private void checkDomainNotRestarted() throws Exception {\n+    TestUtils.checkPodReady(DUID + \"-\" + domain.getAdminServerName(), DOM_NS);\n+    for (int i = 2; i >= 1; i--) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f9470e812ac564a0208f837bfc153e6ab53657"}, "originalPosition": 297}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMzY4NTg3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#pullrequestreview-380368587", "createdAt": "2020-03-24T14:33:05Z", "commit": {"oid": "89f9470e812ac564a0208f837bfc153e6ab53657"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDozMzowNlrOF6zF3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDo0ODo0N1rOF6z2ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5ODgxMw==", "bodyText": "the comment says we want to check they have not been restarted, but this just checks if they are running, not if they wer restarted.  is the comment wrong? or does the code need to be improved to check for restart?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397198813", "createdAt": "2020-03-24T14:33:06Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -293,6 +229,20 @@ private void checkDomainRollingRestarted() throws Exception {\n     }\n   }\n \n+  /**\n+   * Check whether the weblogic server instances are still RUNNING \n+   * not restarted due to Operator Upgrade\n+   *\n+   * @throws Exception If restarted\n+   */\n+  private void checkDomainNotRestarted() throws Exception {\n+    TestUtils.checkPodReady(DUID + \"-\" + domain.getAdminServerName(), DOM_NS);\n+    for (int i = 2; i >= 1; i--) {\n+      LoggerHelper.getLocal().log(Level.INFO,\n+          \"Checking if managed server pod(\" + DUID + \"--managed-server\" + i + \") is RUNNING\");\n+      TestUtils.checkPodReady(DUID + \"-managed-server\" + i, DOM_NS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f9470e812ac564a0208f837bfc153e6ab53657"}, "originalPosition": 300}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5OTkyNA==", "bodyText": "didn't we discuss this and realize that the 15 minute wait was only needed for a domain to be updated?  and that we only need to check the CRD apiVersion is udpated, not a CR (instance)?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397199924", "createdAt": "2020-03-24T14:34:29Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -238,41 +141,74 @@ public void testOperatorUpgradeFrom2_3_0() throws Exception {\n    * @param restart boolean parameter used to determine if a restart of domain is checked\n    * @throws Exception when upgrade fails or basic usecase testing or scaling fails.\n    */\n-  private void upgradeOperator(boolean restart) throws Exception {\n+  private void upgradeOperator() throws Exception {\n     operator.callHelmUpgrade(\"image=\" + OP_TARGET_RELEASE);\n-    if (restart) {\n-      checkDomainRollingRestarted();\n-    }\n-    checkOperatorVersion();\n+    checkDomainNotRestarted();\n+    checkCrdVersion();\n+    // checkDomainApiVersion(); Not Needed \n     testClusterScaling(operator, domain, false);\n   }\n \n   /**\n-   * checks the expected version of the upgraded operator in a loop. In Jenkins it takes nearly 8\n-   * minutes to show the updated value of the domain CRD.\n+   * Checks Expected/Upgraded ApiVersion of the Domain Object in a loop. \n+   * In Jenkins it takes nearly 8 minutes to show the updated value \n+   * \n+   * The .apiVersion of the domain will not be updated until the domain is \n+   * written again (e.g. by the operator when updating status)\n+   * This contributes to long time period. We can skip this check \n    *\n    * @throws Exception when version does not match\n    */\n-  private void checkOperatorVersion() throws Exception {\n+  private void checkDomainApiVersion() throws Exception {\n     boolean result = false;\n     LoggerHelper.getLocal().log(\n         Level.INFO,\n         \"Checking for the domain apiVersion \"\n             + getDomainApiVersion()\n             + \" in a loop for up to 15 minutes\");\n-    for (int i = 0; i < 900; i = i + 10) {\n+    for (int i = 0; i < 120; i++) {\n       ExecResult exec =\n           TestUtils.exec(\n               \"kubectl get domain -n \" + DOM_NS + \"  \" + DUID + \" -o jsonpath={.apiVersion}\", true);\n       if (exec.stdout().contains(getDomainApiVersion())) {\n-        LoggerHelper.getLocal().log(Level.INFO, \"Got the expected apiVersion\");\n+        int ttime = 10 * (i - 1); \n+        LoggerHelper.getLocal().log(Level.INFO, \"Got the expected API Version after [\" + ttime + \"] Seconds\");\n+        result = true;\n+        break;\n+      }\n+      Thread.sleep(1000 * 10);\n+    }\n+    if (!result) {\n+      throw new RuntimeException(\"FAILURE: Didn't get the expected API Version\");\n+    }\n+  }\n+\n+  /**\n+   * Checks the expected Upgraded Version of CustomResourceDefintion (CRD) \n+   * in default NameSpace in a loop. \n+   *\n+   * @throws Exception when version does not match\n+   */\n+  private void checkCrdVersion() throws Exception {\n+    boolean result = false;\n+    LoggerHelper.getLocal().log(\n+        Level.INFO,\n+        \"Checking for the CRD Version \"\n+            + getDomainApiVersion()\n+            + \" in a loop for up to 15 minutes\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f9470e812ac564a0208f837bfc153e6ab53657"}, "originalPosition": 267}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwMDY3Nw==", "bodyText": "does this need to be a RuntimeException? not just a regular Exception?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397200677", "createdAt": "2020-03-24T14:35:31Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -238,41 +141,74 @@ public void testOperatorUpgradeFrom2_3_0() throws Exception {\n    * @param restart boolean parameter used to determine if a restart of domain is checked\n    * @throws Exception when upgrade fails or basic usecase testing or scaling fails.\n    */\n-  private void upgradeOperator(boolean restart) throws Exception {\n+  private void upgradeOperator() throws Exception {\n     operator.callHelmUpgrade(\"image=\" + OP_TARGET_RELEASE);\n-    if (restart) {\n-      checkDomainRollingRestarted();\n-    }\n-    checkOperatorVersion();\n+    checkDomainNotRestarted();\n+    checkCrdVersion();\n+    // checkDomainApiVersion(); Not Needed \n     testClusterScaling(operator, domain, false);\n   }\n \n   /**\n-   * checks the expected version of the upgraded operator in a loop. In Jenkins it takes nearly 8\n-   * minutes to show the updated value of the domain CRD.\n+   * Checks Expected/Upgraded ApiVersion of the Domain Object in a loop. \n+   * In Jenkins it takes nearly 8 minutes to show the updated value \n+   * \n+   * The .apiVersion of the domain will not be updated until the domain is \n+   * written again (e.g. by the operator when updating status)\n+   * This contributes to long time period. We can skip this check \n    *\n    * @throws Exception when version does not match\n    */\n-  private void checkOperatorVersion() throws Exception {\n+  private void checkDomainApiVersion() throws Exception {\n     boolean result = false;\n     LoggerHelper.getLocal().log(\n         Level.INFO,\n         \"Checking for the domain apiVersion \"\n             + getDomainApiVersion()\n             + \" in a loop for up to 15 minutes\");\n-    for (int i = 0; i < 900; i = i + 10) {\n+    for (int i = 0; i < 120; i++) {\n       ExecResult exec =\n           TestUtils.exec(\n               \"kubectl get domain -n \" + DOM_NS + \"  \" + DUID + \" -o jsonpath={.apiVersion}\", true);\n       if (exec.stdout().contains(getDomainApiVersion())) {\n-        LoggerHelper.getLocal().log(Level.INFO, \"Got the expected apiVersion\");\n+        int ttime = 10 * (i - 1); \n+        LoggerHelper.getLocal().log(Level.INFO, \"Got the expected API Version after [\" + ttime + \"] Seconds\");\n+        result = true;\n+        break;\n+      }\n+      Thread.sleep(1000 * 10);\n+    }\n+    if (!result) {\n+      throw new RuntimeException(\"FAILURE: Didn't get the expected API Version\");\n+    }\n+  }\n+\n+  /**\n+   * Checks the expected Upgraded Version of CustomResourceDefintion (CRD) \n+   * in default NameSpace in a loop. \n+   *\n+   * @throws Exception when version does not match\n+   */\n+  private void checkCrdVersion() throws Exception {\n+    boolean result = false;\n+    LoggerHelper.getLocal().log(\n+        Level.INFO,\n+        \"Checking for the CRD Version \"\n+            + getDomainApiVersion()\n+            + \" in a loop for up to 15 minutes\");\n+    for (int i = 0; i < 900; i = i + 10) {\n+      ExecResult exec =\n+          TestUtils.exec(\n+              \"kubectl get crd domains.weblogic.oracle -o jsonpath='{.spec.versions[?(@.storage==true)].name}'\", true);\n+      if (exec.stdout().contains(getCrdVersion())) {\n+        LoggerHelper.getLocal().log(Level.INFO, \"Got expected CRD Version\");\n         result = true;\n         break;\n       }\n       Thread.sleep(1000 * 10);\n     }\n     if (!result) {\n-      throw new RuntimeException(\"FAILURE: Didn't get the expected operator version\");\n+      throw new RuntimeException(\"FAILURE: Didn't get expected CRD Version\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f9470e812ac564a0208f837bfc153e6ab53657"}, "originalPosition": 281}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwOTA5Ng==", "bodyText": "@rjeberhard ^^ ?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397209096", "createdAt": "2020-03-24T14:46:04Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -238,41 +141,74 @@ public void testOperatorUpgradeFrom2_3_0() throws Exception {\n    * @param restart boolean parameter used to determine if a restart of domain is checked\n    * @throws Exception when upgrade fails or basic usecase testing or scaling fails.\n    */\n-  private void upgradeOperator(boolean restart) throws Exception {\n+  private void upgradeOperator() throws Exception {\n     operator.callHelmUpgrade(\"image=\" + OP_TARGET_RELEASE);\n-    if (restart) {\n-      checkDomainRollingRestarted();\n-    }\n-    checkOperatorVersion();\n+    checkDomainNotRestarted();\n+    checkCrdVersion();\n+    // checkDomainApiVersion(); Not Needed \n     testClusterScaling(operator, domain, false);\n   }\n \n   /**\n-   * checks the expected version of the upgraded operator in a loop. In Jenkins it takes nearly 8\n-   * minutes to show the updated value of the domain CRD.\n+   * Checks Expected/Upgraded ApiVersion of the Domain Object in a loop. \n+   * In Jenkins it takes nearly 8 minutes to show the updated value \n+   * \n+   * The .apiVersion of the domain will not be updated until the domain is \n+   * written again (e.g. by the operator when updating status)\n+   * This contributes to long time period. We can skip this check \n    *\n    * @throws Exception when version does not match\n    */\n-  private void checkOperatorVersion() throws Exception {\n+  private void checkDomainApiVersion() throws Exception {\n     boolean result = false;\n     LoggerHelper.getLocal().log(\n         Level.INFO,\n         \"Checking for the domain apiVersion \"\n             + getDomainApiVersion()\n             + \" in a loop for up to 15 minutes\");\n-    for (int i = 0; i < 900; i = i + 10) {\n+    for (int i = 0; i < 120; i++) {\n       ExecResult exec =\n           TestUtils.exec(\n               \"kubectl get domain -n \" + DOM_NS + \"  \" + DUID + \" -o jsonpath={.apiVersion}\", true);\n       if (exec.stdout().contains(getDomainApiVersion())) {\n-        LoggerHelper.getLocal().log(Level.INFO, \"Got the expected apiVersion\");\n+        int ttime = 10 * (i - 1); \n+        LoggerHelper.getLocal().log(Level.INFO, \"Got the expected API Version after [\" + ttime + \"] Seconds\");\n+        result = true;\n+        break;\n+      }\n+      Thread.sleep(1000 * 10);\n+    }\n+    if (!result) {\n+      throw new RuntimeException(\"FAILURE: Didn't get the expected API Version\");\n+    }\n+  }\n+\n+  /**\n+   * Checks the expected Upgraded Version of CustomResourceDefintion (CRD) \n+   * in default NameSpace in a loop. \n+   *\n+   * @throws Exception when version does not match\n+   */\n+  private void checkCrdVersion() throws Exception {\n+    boolean result = false;\n+    LoggerHelper.getLocal().log(\n+        Level.INFO,\n+        \"Checking for the CRD Version \"\n+            + getDomainApiVersion()\n+            + \" in a loop for up to 15 minutes\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5OTkyNA=="}, "originalCommit": {"oid": "89f9470e812ac564a0208f837bfc153e6ab53657"}, "originalPosition": 267}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwOTg1Nw==", "bodyText": "oh i see you removed the call on 148 to this method -- so can this method be deleted now? not needed?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397209857", "createdAt": "2020-03-24T14:47:03Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -238,41 +141,74 @@ public void testOperatorUpgradeFrom2_3_0() throws Exception {\n    * @param restart boolean parameter used to determine if a restart of domain is checked\n    * @throws Exception when upgrade fails or basic usecase testing or scaling fails.\n    */\n-  private void upgradeOperator(boolean restart) throws Exception {\n+  private void upgradeOperator() throws Exception {\n     operator.callHelmUpgrade(\"image=\" + OP_TARGET_RELEASE);\n-    if (restart) {\n-      checkDomainRollingRestarted();\n-    }\n-    checkOperatorVersion();\n+    checkDomainNotRestarted();\n+    checkCrdVersion();\n+    // checkDomainApiVersion(); Not Needed \n     testClusterScaling(operator, domain, false);\n   }\n \n   /**\n-   * checks the expected version of the upgraded operator in a loop. In Jenkins it takes nearly 8\n-   * minutes to show the updated value of the domain CRD.\n+   * Checks Expected/Upgraded ApiVersion of the Domain Object in a loop. \n+   * In Jenkins it takes nearly 8 minutes to show the updated value \n+   * \n+   * The .apiVersion of the domain will not be updated until the domain is \n+   * written again (e.g. by the operator when updating status)\n+   * This contributes to long time period. We can skip this check \n    *\n    * @throws Exception when version does not match\n    */\n-  private void checkOperatorVersion() throws Exception {\n+  private void checkDomainApiVersion() throws Exception {\n     boolean result = false;\n     LoggerHelper.getLocal().log(\n         Level.INFO,\n         \"Checking for the domain apiVersion \"\n             + getDomainApiVersion()\n             + \" in a loop for up to 15 minutes\");\n-    for (int i = 0; i < 900; i = i + 10) {\n+    for (int i = 0; i < 120; i++) {\n       ExecResult exec =\n           TestUtils.exec(\n               \"kubectl get domain -n \" + DOM_NS + \"  \" + DUID + \" -o jsonpath={.apiVersion}\", true);\n       if (exec.stdout().contains(getDomainApiVersion())) {\n-        LoggerHelper.getLocal().log(Level.INFO, \"Got the expected apiVersion\");\n+        int ttime = 10 * (i - 1); \n+        LoggerHelper.getLocal().log(Level.INFO, \"Got the expected API Version after [\" + ttime + \"] Seconds\");\n+        result = true;\n+        break;\n+      }\n+      Thread.sleep(1000 * 10);\n+    }\n+    if (!result) {\n+      throw new RuntimeException(\"FAILURE: Didn't get the expected API Version\");\n+    }\n+  }\n+\n+  /**\n+   * Checks the expected Upgraded Version of CustomResourceDefintion (CRD) \n+   * in default NameSpace in a loop. \n+   *\n+   * @throws Exception when version does not match\n+   */\n+  private void checkCrdVersion() throws Exception {\n+    boolean result = false;\n+    LoggerHelper.getLocal().log(\n+        Level.INFO,\n+        \"Checking for the CRD Version \"\n+            + getDomainApiVersion()\n+            + \" in a loop for up to 15 minutes\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5OTkyNA=="}, "originalCommit": {"oid": "89f9470e812ac564a0208f837bfc153e6ab53657"}, "originalPosition": 267}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxMDI4Mg==", "bodyText": "none of the javadoc in this file is javadoc compliant.  can you please run javadoc and fix the errors?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397210282", "createdAt": "2020-03-24T14:47:35Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -293,6 +229,20 @@ private void checkDomainRollingRestarted() throws Exception {\n     }\n   }\n \n+  /**\n+   * Check whether the weblogic server instances are still RUNNING ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f9470e812ac564a0208f837bfc153e6ab53657"}, "originalPosition": 290}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxMTA1NA==", "bodyText": "fix this sentence", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397211054", "createdAt": "2020-03-24T14:48:29Z", "author": {"login": "markxnelson"}, "path": "kubernetes/samples/scripts/create-weblogic-domain/domain-home-in-image/create-domain.sh", "diffHunk": "@@ -34,6 +34,7 @@ function usage {\n   echo \"  -v Validate the existence of persistentVolumeClaim, optional.\"\n   echo \"  -k Keep what has been previously from cloned https://github.com/oracle/docker-images.git, optional. \"\n   echo \"     If not specified, this script will always remove existing project directory and clone again.\"\n+  echo \"  -s Skip the domain image build optional. \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f9470e812ac564a0208f837bfc153e6ab53657"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxMTMyMg==", "bodyText": "typo", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397211322", "createdAt": "2020-03-24T14:48:47Z", "author": {"login": "markxnelson"}, "path": "kubernetes/samples/scripts/create-weblogic-domain/domain-home-in-image/create-domain.sh", "diffHunk": "@@ -171,8 +175,13 @@ function getDockerSample {\n \n #\n # Function to build docker image and create WebLogic domain home\n-#\n+# Image build is skipped when -s option is specified OR image is not available\n+# e.g. If -s option is specified script will skip the image build only when \n+# image is available else build the image\n+# If -s option is NOT specified script will ALWYAS build the image", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f9470e812ac564a0208f837bfc153e6ab53657"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMzk5NTcw", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#pullrequestreview-380399570", "createdAt": "2020-03-24T15:03:32Z", "commit": {"oid": "89f9470e812ac564a0208f837bfc153e6ab53657"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTowMzozMlrOF60lLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTowNDowOFrOF60nAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIyMzIxMg==", "bodyText": "should check this actually worked by trying to get the crd again", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397223212", "createdAt": "2020-03-24T15:03:32Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -89,145 +104,33 @@ public void cleanupOperatorAndDomain() throws Exception {\n         operator.destroy();\n       }\n       TestUtils.exec(\"rm -rf \" + Paths.get(opUpgradeTmpDir).toString());\n+      TestUtils.exec(\"kubectl delete crd domains.weblogic.oracle --ignore-not-found\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f9470e812ac564a0208f837bfc153e6ab53657"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIyMzY4Mw==", "bodyText": "there is not restart param in the method signature", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397223683", "createdAt": "2020-03-24T15:04:08Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -238,41 +141,74 @@ public void testOperatorUpgradeFrom2_3_0() throws Exception {\n    * @param restart boolean parameter used to determine if a restart of domain is checked", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f9470e812ac564a0208f837bfc153e6ab53657"}, "originalPosition": 200}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ef1946602c5913a105db01fcd01b3ac9c5afa30", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7ef1946602c5913a105db01fcd01b3ac9c5afa30", "committedDate": "2020-03-24T23:28:02Z", "message": "Added Server creationTimestamp to verify upgrade, resolution to misc review comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwODA2NDY1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#pullrequestreview-380806465", "createdAt": "2020-03-25T01:34:20Z", "commit": {"oid": "89f9470e812ac564a0208f837bfc153e6ab53657"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMTozNDoyMFrOF7JKLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMTo0NTozM1rOF7JVUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2MDM2Nw==", "bodyText": "RuntimeException again?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397560367", "createdAt": "2020-03-25T01:34:20Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -238,41 +141,74 @@ public void testOperatorUpgradeFrom2_3_0() throws Exception {\n    * @param restart boolean parameter used to determine if a restart of domain is checked\n    * @throws Exception when upgrade fails or basic usecase testing or scaling fails.\n    */\n-  private void upgradeOperator(boolean restart) throws Exception {\n+  private void upgradeOperator() throws Exception {\n     operator.callHelmUpgrade(\"image=\" + OP_TARGET_RELEASE);\n-    if (restart) {\n-      checkDomainRollingRestarted();\n-    }\n-    checkOperatorVersion();\n+    checkDomainNotRestarted();\n+    checkCrdVersion();\n+    // checkDomainApiVersion(); Not Needed \n     testClusterScaling(operator, domain, false);\n   }\n \n   /**\n-   * checks the expected version of the upgraded operator in a loop. In Jenkins it takes nearly 8\n-   * minutes to show the updated value of the domain CRD.\n+   * Checks Expected/Upgraded ApiVersion of the Domain Object in a loop. \n+   * In Jenkins it takes nearly 8 minutes to show the updated value \n+   * \n+   * The .apiVersion of the domain will not be updated until the domain is \n+   * written again (e.g. by the operator when updating status)\n+   * This contributes to long time period. We can skip this check \n    *\n    * @throws Exception when version does not match\n    */\n-  private void checkOperatorVersion() throws Exception {\n+  private void checkDomainApiVersion() throws Exception {\n     boolean result = false;\n     LoggerHelper.getLocal().log(\n         Level.INFO,\n         \"Checking for the domain apiVersion \"\n             + getDomainApiVersion()\n             + \" in a loop for up to 15 minutes\");\n-    for (int i = 0; i < 900; i = i + 10) {\n+    for (int i = 0; i < 120; i++) {\n       ExecResult exec =\n           TestUtils.exec(\n               \"kubectl get domain -n \" + DOM_NS + \"  \" + DUID + \" -o jsonpath={.apiVersion}\", true);\n       if (exec.stdout().contains(getDomainApiVersion())) {\n-        LoggerHelper.getLocal().log(Level.INFO, \"Got the expected apiVersion\");\n+        int ttime = 10 * (i - 1); \n+        LoggerHelper.getLocal().log(Level.INFO, \"Got the expected API Version after [\" + ttime + \"] Seconds\");\n+        result = true;\n+        break;\n+      }\n+      Thread.sleep(1000 * 10);\n+    }\n+    if (!result) {\n+      throw new RuntimeException(\"FAILURE: Didn't get the expected API Version\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f9470e812ac564a0208f837bfc153e6ab53657"}, "originalPosition": 251}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2MDU2Mw==", "bodyText": "i could be wrong, but i think a Thread.sleep() needs to be in a try { .. } catch (InterruptedException) {} \n@rjeberhard ?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397560563", "createdAt": "2020-03-25T01:35:12Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -238,41 +141,74 @@ public void testOperatorUpgradeFrom2_3_0() throws Exception {\n    * @param restart boolean parameter used to determine if a restart of domain is checked\n    * @throws Exception when upgrade fails or basic usecase testing or scaling fails.\n    */\n-  private void upgradeOperator(boolean restart) throws Exception {\n+  private void upgradeOperator() throws Exception {\n     operator.callHelmUpgrade(\"image=\" + OP_TARGET_RELEASE);\n-    if (restart) {\n-      checkDomainRollingRestarted();\n-    }\n-    checkOperatorVersion();\n+    checkDomainNotRestarted();\n+    checkCrdVersion();\n+    // checkDomainApiVersion(); Not Needed \n     testClusterScaling(operator, domain, false);\n   }\n \n   /**\n-   * checks the expected version of the upgraded operator in a loop. In Jenkins it takes nearly 8\n-   * minutes to show the updated value of the domain CRD.\n+   * Checks Expected/Upgraded ApiVersion of the Domain Object in a loop. \n+   * In Jenkins it takes nearly 8 minutes to show the updated value \n+   * \n+   * The .apiVersion of the domain will not be updated until the domain is \n+   * written again (e.g. by the operator when updating status)\n+   * This contributes to long time period. We can skip this check \n    *\n    * @throws Exception when version does not match\n    */\n-  private void checkOperatorVersion() throws Exception {\n+  private void checkDomainApiVersion() throws Exception {\n     boolean result = false;\n     LoggerHelper.getLocal().log(\n         Level.INFO,\n         \"Checking for the domain apiVersion \"\n             + getDomainApiVersion()\n             + \" in a loop for up to 15 minutes\");\n-    for (int i = 0; i < 900; i = i + 10) {\n+    for (int i = 0; i < 120; i++) {\n       ExecResult exec =\n           TestUtils.exec(\n               \"kubectl get domain -n \" + DOM_NS + \"  \" + DUID + \" -o jsonpath={.apiVersion}\", true);\n       if (exec.stdout().contains(getDomainApiVersion())) {\n-        LoggerHelper.getLocal().log(Level.INFO, \"Got the expected apiVersion\");\n+        int ttime = 10 * (i - 1); \n+        LoggerHelper.getLocal().log(Level.INFO, \"Got the expected API Version after [\" + ttime + \"] Seconds\");\n+        result = true;\n+        break;\n+      }\n+      Thread.sleep(1000 * 10);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89f9470e812ac564a0208f837bfc153e6ab53657"}, "originalPosition": 248}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2MTQzMA==", "bodyText": "CRD's are not namespaced, they are at the cluster scope.  So deleting a CRD by definition would almost certainly interfere with other tests.\nThe original question stands though - you are no checking that it was deleted.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397561430", "createdAt": "2020-03-25T01:38:09Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -89,145 +104,33 @@ public void cleanupOperatorAndDomain() throws Exception {\n         operator.destroy();\n       }\n       TestUtils.exec(\"rm -rf \" + Paths.get(opUpgradeTmpDir).toString());\n+      TestUtils.exec(\"kubectl delete crd domains.weblogic.oracle --ignore-not-found\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIyMzIxMg=="}, "originalCommit": {"oid": "89f9470e812ac564a0208f837bfc153e6ab53657"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2MTU3Mg==", "bodyText": "log? not sop?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397561572", "createdAt": "2020-03-25T01:38:46Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -89,190 +106,82 @@ public void cleanupOperatorAndDomain() throws Exception {\n         operator.destroy();\n       }\n       TestUtils.exec(\"rm -rf \" + Paths.get(opUpgradeTmpDir).toString());\n+      TestUtils.exec(\"kubectl delete crd domains.weblogic.oracle --ignore-not-found\");\n       //ExecResult result = cleanup();\n       LoggerHelper.getLocal().log(Level.INFO, \"+++++++++++++++Done AfterTest cleanup+++++++++++++++++++++\");\n     }\n   }\n \n   /**\n-   * Test for upgrading Operator from release 2.0 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_0() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator20\";\n-    OP_DEP_NAME = \"operator-upgrade20\";\n-    OP_SA = \"operator-sa20\";\n-    DOM_NS = \"weblogic-domain20\";\n-    DUID = \"operatordomain20\";\n-    setupOperatorAndDomain(\"2.0\", \"2.0\");\n-    upgradeOperator(true);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.0.1 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_0_1() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator201\";\n-    OP_DEP_NAME = \"operator-upgrade201\";\n-    OP_SA = \"operator-sa201\";\n-    DOM_NS = \"weblogic-domain201\";\n-    DUID = \"operatordomain201\";\n-    setupOperatorAndDomain(\"release/2.0.1\", \"2.0.1\");\n-    upgradeOperator(true);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.1 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_1() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator21\";\n-    OP_DEP_NAME = \"operator-upgrade21\";\n-    OP_SA = \"operator-sa21\";\n-    DOM_NS = \"weblogic-domain21\";\n-    DUID = \"operatordomain21\";\n-    setupOperatorAndDomain(\"release/2.1\", \"2.1\");\n-    upgradeOperator(false);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.2.0 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_2_0() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator220\";\n-    OP_DEP_NAME = \"operator-upgrade220\";\n-    OP_SA = \"operator-sa220\";\n-    DOM_NS = \"weblogic-domain220\";\n-    DUID = \"operatordomain220\";\n-    setupOperatorAndDomain(\"release/2.2\", \"2.2.0\");\n-    upgradeOperator(false);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.2.1 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_2_1() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator221\";\n-    OP_DEP_NAME = \"operator-upgrade221\";\n-    OP_SA = \"operator-sa221\";\n-    DOM_NS = \"weblogic-domain221\";\n-    DUID = \"operatordomain221\";\n-    setupOperatorAndDomain(\"release/2.2.1\", \"2.2.1\");\n-    upgradeOperator(false);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.3.0 to develop branch.\n+   * Test for upgrading Operator from release 2.5.0 to develop branch.\n    *\n    * @throws Exception when upgrade fails\n    */\n   @Test\n-  public void testOperatorUpgradeFrom2_3_0() throws Exception {\n+  public void testOperatorUpgradeFrom2_5_0() throws Exception {\n     Assumptions.assumeTrue(QUICKTEST);\n     testCompletedSuccessfully = false;\n     String testMethod = new Object() {\n     }.getClass().getEnclosingMethod().getName();\n     logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator230\";\n-    OP_DEP_NAME = \"operator-upgrade230\";\n-    OP_SA = \"operator-sa230\";\n-    DOM_NS = \"weblogic-domain230\";\n-    DUID = \"operatordomain230\";\n-    setupOperatorAndDomain(\"release/2.3.0\", \"2.3.0\");\n-    upgradeOperator(false);\n+    OP_NS = \"weblogic-operator250\";\n+    DOM_NS = \"weblogic-domain250\";\n+    namespaceList.append(OP_NS);\n+    namespaceList.append(\" \").append(DOM_NS);\n+    OP_DEP_NAME = \"operator-upgrade250\";\n+    OP_SA = \"operator-sa250\";\n+    DUID = \"operatordomain250\";\n+    setupOperatorAndDomain(\"release/2.5.0\", \"2.5.0\");\n+\n+    M1_CTS = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server1\");\n+    M2_CTS = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server2\");\n+    ADMIN_CTS = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-admin-server\");\n+    upgradeOperator();\n     testCompletedSuccessfully = true;\n     LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n   }\n \n   /**\n    * Upgrades operator to develop branch by using the helm upgrade.\n    *\n-   * @param restart boolean parameter used to determine if a restart of domain is checked\n    * @throws Exception when upgrade fails or basic usecase testing or scaling fails.\n    */\n-  private void upgradeOperator(boolean restart) throws Exception {\n+  private void upgradeOperator() throws Exception {\n     operator.callHelmUpgrade(\"image=\" + OP_TARGET_RELEASE);\n-    if (restart) {\n-      checkDomainRollingRestarted();\n-    }\n-    checkOperatorVersion();\n+    checkCrdVersion();\n+    System.out.println(\"Before Upgrade M1CTS[\" + M1_CTS + \"]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ef1946602c5913a105db01fcd01b3ac9c5afa30"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2MTgzMw==", "bodyText": "enclose in try? @rjeberhard ?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397561833", "createdAt": "2020-03-25T01:39:46Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -89,190 +106,82 @@ public void cleanupOperatorAndDomain() throws Exception {\n         operator.destroy();\n       }\n       TestUtils.exec(\"rm -rf \" + Paths.get(opUpgradeTmpDir).toString());\n+      TestUtils.exec(\"kubectl delete crd domains.weblogic.oracle --ignore-not-found\");\n       //ExecResult result = cleanup();\n       LoggerHelper.getLocal().log(Level.INFO, \"+++++++++++++++Done AfterTest cleanup+++++++++++++++++++++\");\n     }\n   }\n \n   /**\n-   * Test for upgrading Operator from release 2.0 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_0() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator20\";\n-    OP_DEP_NAME = \"operator-upgrade20\";\n-    OP_SA = \"operator-sa20\";\n-    DOM_NS = \"weblogic-domain20\";\n-    DUID = \"operatordomain20\";\n-    setupOperatorAndDomain(\"2.0\", \"2.0\");\n-    upgradeOperator(true);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.0.1 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_0_1() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator201\";\n-    OP_DEP_NAME = \"operator-upgrade201\";\n-    OP_SA = \"operator-sa201\";\n-    DOM_NS = \"weblogic-domain201\";\n-    DUID = \"operatordomain201\";\n-    setupOperatorAndDomain(\"release/2.0.1\", \"2.0.1\");\n-    upgradeOperator(true);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.1 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_1() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator21\";\n-    OP_DEP_NAME = \"operator-upgrade21\";\n-    OP_SA = \"operator-sa21\";\n-    DOM_NS = \"weblogic-domain21\";\n-    DUID = \"operatordomain21\";\n-    setupOperatorAndDomain(\"release/2.1\", \"2.1\");\n-    upgradeOperator(false);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.2.0 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_2_0() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator220\";\n-    OP_DEP_NAME = \"operator-upgrade220\";\n-    OP_SA = \"operator-sa220\";\n-    DOM_NS = \"weblogic-domain220\";\n-    DUID = \"operatordomain220\";\n-    setupOperatorAndDomain(\"release/2.2\", \"2.2.0\");\n-    upgradeOperator(false);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.2.1 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_2_1() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator221\";\n-    OP_DEP_NAME = \"operator-upgrade221\";\n-    OP_SA = \"operator-sa221\";\n-    DOM_NS = \"weblogic-domain221\";\n-    DUID = \"operatordomain221\";\n-    setupOperatorAndDomain(\"release/2.2.1\", \"2.2.1\");\n-    upgradeOperator(false);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.3.0 to develop branch.\n+   * Test for upgrading Operator from release 2.5.0 to develop branch.\n    *\n    * @throws Exception when upgrade fails\n    */\n   @Test\n-  public void testOperatorUpgradeFrom2_3_0() throws Exception {\n+  public void testOperatorUpgradeFrom2_5_0() throws Exception {\n     Assumptions.assumeTrue(QUICKTEST);\n     testCompletedSuccessfully = false;\n     String testMethod = new Object() {\n     }.getClass().getEnclosingMethod().getName();\n     logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator230\";\n-    OP_DEP_NAME = \"operator-upgrade230\";\n-    OP_SA = \"operator-sa230\";\n-    DOM_NS = \"weblogic-domain230\";\n-    DUID = \"operatordomain230\";\n-    setupOperatorAndDomain(\"release/2.3.0\", \"2.3.0\");\n-    upgradeOperator(false);\n+    OP_NS = \"weblogic-operator250\";\n+    DOM_NS = \"weblogic-domain250\";\n+    namespaceList.append(OP_NS);\n+    namespaceList.append(\" \").append(DOM_NS);\n+    OP_DEP_NAME = \"operator-upgrade250\";\n+    OP_SA = \"operator-sa250\";\n+    DUID = \"operatordomain250\";\n+    setupOperatorAndDomain(\"release/2.5.0\", \"2.5.0\");\n+\n+    M1_CTS = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server1\");\n+    M2_CTS = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server2\");\n+    ADMIN_CTS = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-admin-server\");\n+    upgradeOperator();\n     testCompletedSuccessfully = true;\n     LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n   }\n \n   /**\n    * Upgrades operator to develop branch by using the helm upgrade.\n    *\n-   * @param restart boolean parameter used to determine if a restart of domain is checked\n    * @throws Exception when upgrade fails or basic usecase testing or scaling fails.\n    */\n-  private void upgradeOperator(boolean restart) throws Exception {\n+  private void upgradeOperator() throws Exception {\n     operator.callHelmUpgrade(\"image=\" + OP_TARGET_RELEASE);\n-    if (restart) {\n-      checkDomainRollingRestarted();\n-    }\n-    checkOperatorVersion();\n+    checkCrdVersion();\n+    System.out.println(\"Before Upgrade M1CTS[\" + M1_CTS + \"]\");\n+    System.out.println(\"Before Upgrade M2CTS[\" + M2_CTS + \"]\");\n+    System.out.println(\"Before Upgrade ADMINCTS[\" + ADMIN_CTS + \"]\");\n+    checkDomainNotRestarted();\n     testClusterScaling(operator, domain, false);\n   }\n \n   /**\n-   * checks the expected version of the upgraded operator in a loop. In Jenkins it takes nearly 8\n-   * minutes to show the updated value of the domain CRD.\n+   * Checks the expected Upgraded Version of CustomResourceDefintion (CRD) \n+   * in default NameSpace in a loop. \n    *\n    * @throws Exception when version does not match\n    */\n-  private void checkOperatorVersion() throws Exception {\n+  private void checkCrdVersion() throws Exception {\n     boolean result = false;\n     LoggerHelper.getLocal().log(\n         Level.INFO,\n-        \"Checking for the domain apiVersion \"\n+        \"Checking for the CRD Version \"\n             + getDomainApiVersion()\n             + \" in a loop for up to 15 minutes\");\n-    for (int i = 0; i < 900; i = i + 10) {\n+    for (int i = 0; i < BaseTest.getMaxIterationsPod(); i++) {\n       ExecResult exec =\n           TestUtils.exec(\n-              \"kubectl get domain -n \" + DOM_NS + \"  \" + DUID + \" -o jsonpath={.apiVersion}\", true);\n-      if (exec.stdout().contains(getDomainApiVersion())) {\n-        LoggerHelper.getLocal().log(Level.INFO, \"Got the expected apiVersion\");\n+              \"kubectl get crd domains.weblogic.oracle -o jsonpath='{.spec.versions[?(@.storage==true)].name}'\", true);\n+      if (exec.stdout().contains(getCrdVersion())) {\n+        LoggerHelper.getLocal().log(Level.INFO, \"Got expected CRD Version\");\n         result = true;\n         break;\n       }\n-      Thread.sleep(1000 * 10);\n+      Thread.sleep(BaseTest.getWaitTimePod() * 1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ef1946602c5913a105db01fcd01b3ac9c5afa30"}, "originalPosition": 274}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2MTkwNg==", "bodyText": "Please spell \"WebLogic\" right too", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397561906", "createdAt": "2020-03-25T01:40:05Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -293,6 +229,20 @@ private void checkDomainRollingRestarted() throws Exception {\n     }\n   }\n \n+  /**\n+   * Check whether the weblogic server instances are still RUNNING ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxMDI4Mg=="}, "originalCommit": {"oid": "89f9470e812ac564a0208f837bfc153e6ab53657"}, "originalPosition": 290}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2MTk5NQ==", "bodyText": "log not sop?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397561995", "createdAt": "2020-03-25T01:40:33Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -293,6 +202,29 @@ private void checkDomainRollingRestarted() throws Exception {\n     }\n   }\n \n+  /**\n+   * Check whether the weblogic server instances are still RUNNING \n+   * not restarted due to Operator Upgrade by comparing the creationTimestamp\n+   * before and after upgrade\n+   *\n+   * @throws Exception If restarted\n+   */\n+  private void checkDomainNotRestarted() throws Exception {\n+    TestUtils.checkPodReady(DUID + \"-\" + domain.getAdminServerName(), DOM_NS);\n+    for (int i = 2; i >= 1; i--) {\n+     TestUtils.checkPodReady(DUID + \"-managed-server\" + i, DOM_NS);\n+    }\n+    String m1 = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server1\");\n+    String m2 = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server2\");\n+    String admin = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-admin-server\");\n+    System.out.println(\"After Upgrade M1CTS[\" + m1 + \"]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ef1946602c5913a105db01fcd01b3ac9c5afa30"}, "originalPosition": 301}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2MjE4MA==", "bodyText": "missing javadoc", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397562180", "createdAt": "2020-03-25T01:41:21Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/utils/TestUtils.java", "diffHunk": "@@ -1980,4 +1980,36 @@ public static ExecResult kubectlpatch(String domainUid, String domainNS, String\n     return exec(cmd, true);\n   }\n \n+  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ef1946602c5913a105db01fcd01b3ac9c5afa30"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2MjI1NA==", "bodyText": "log not sop", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397562254", "createdAt": "2020-03-25T01:41:39Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/utils/TestUtils.java", "diffHunk": "@@ -1980,4 +1980,36 @@ public static ExecResult kubectlpatch(String domainUid, String domainNS, String\n     return exec(cmd, true);\n   }\n \n+  /**\n+   * @param namesapce\n+   * @param pod name\n+   * @return creationTimestamp of the Pod \n+   * @throws Exception on failure\n+   */\n+  public static String getCreationTimeStamp(String namespace, String pod) throws Exception {\n+    String kcmd = \"kubectl get pod \"\n+              + pod \n+              + \" --namespace \"\n+              + namespace\n+              + \" -o jsonpath='{.metadata.creationTimestamp}'\";\n+    System.out.println(\"KUBECTL CMD \" + kcmd);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ef1946602c5913a105db01fcd01b3ac9c5afa30"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2MjMyNg==", "bodyText": "missing javadoc.\ntypo in param name", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397562326", "createdAt": "2020-03-25T01:41:55Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/utils/TestUtils.java", "diffHunk": "@@ -1980,4 +1980,36 @@ public static ExecResult kubectlpatch(String domainUid, String domainNS, String\n     return exec(cmd, true);\n   }\n \n+  /**\n+   * @param namesapce\n+   * @param pod name\n+   * @return creationTimestamp of the Pod \n+   * @throws Exception on failure\n+   */\n+  public static String getCreationTimeStamp(String namespace, String pod) throws Exception {\n+    String kcmd = \"kubectl get pod \"\n+              + pod \n+              + \" --namespace \"\n+              + namespace\n+              + \" -o jsonpath='{.metadata.creationTimestamp}'\";\n+    System.out.println(\"KUBECTL CMD \" + kcmd);\n+    ExecResult result = ExecCommand.exec(kcmd);\n+    return result.stdout().trim();\n+  }\n+\n+  /**\n+   * @param namesapce", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ef1946602c5913a105db01fcd01b3ac9c5afa30"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2Mjg4Mg==", "bodyText": "what's an M1CTS?  think of the person reading this log message, who is probably not you. how do they know what this means?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397562882", "createdAt": "2020-03-25T01:44:08Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -293,6 +202,29 @@ private void checkDomainRollingRestarted() throws Exception {\n     }\n   }\n \n+  /**\n+   * Check whether the weblogic server instances are still RUNNING \n+   * not restarted due to Operator Upgrade by comparing the creationTimestamp\n+   * before and after upgrade\n+   *\n+   * @throws Exception If restarted\n+   */\n+  private void checkDomainNotRestarted() throws Exception {\n+    TestUtils.checkPodReady(DUID + \"-\" + domain.getAdminServerName(), DOM_NS);\n+    for (int i = 2; i >= 1; i--) {\n+     TestUtils.checkPodReady(DUID + \"-managed-server\" + i, DOM_NS);\n+    }\n+    String m1 = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server1\");\n+    String m2 = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server2\");\n+    String admin = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-admin-server\");\n+    System.out.println(\"After Upgrade M1CTS[\" + m1 + \"]\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2MTk5NQ=="}, "originalCommit": {"oid": "7ef1946602c5913a105db01fcd01b3ac9c5afa30"}, "originalPosition": 301}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2MzA3MQ==", "bodyText": "same comment as below - what does M1CTS mean to the person who has to read this log message?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397563071", "createdAt": "2020-03-25T01:44:54Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -89,190 +106,82 @@ public void cleanupOperatorAndDomain() throws Exception {\n         operator.destroy();\n       }\n       TestUtils.exec(\"rm -rf \" + Paths.get(opUpgradeTmpDir).toString());\n+      TestUtils.exec(\"kubectl delete crd domains.weblogic.oracle --ignore-not-found\");\n       //ExecResult result = cleanup();\n       LoggerHelper.getLocal().log(Level.INFO, \"+++++++++++++++Done AfterTest cleanup+++++++++++++++++++++\");\n     }\n   }\n \n   /**\n-   * Test for upgrading Operator from release 2.0 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_0() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator20\";\n-    OP_DEP_NAME = \"operator-upgrade20\";\n-    OP_SA = \"operator-sa20\";\n-    DOM_NS = \"weblogic-domain20\";\n-    DUID = \"operatordomain20\";\n-    setupOperatorAndDomain(\"2.0\", \"2.0\");\n-    upgradeOperator(true);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.0.1 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_0_1() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator201\";\n-    OP_DEP_NAME = \"operator-upgrade201\";\n-    OP_SA = \"operator-sa201\";\n-    DOM_NS = \"weblogic-domain201\";\n-    DUID = \"operatordomain201\";\n-    setupOperatorAndDomain(\"release/2.0.1\", \"2.0.1\");\n-    upgradeOperator(true);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.1 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_1() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator21\";\n-    OP_DEP_NAME = \"operator-upgrade21\";\n-    OP_SA = \"operator-sa21\";\n-    DOM_NS = \"weblogic-domain21\";\n-    DUID = \"operatordomain21\";\n-    setupOperatorAndDomain(\"release/2.1\", \"2.1\");\n-    upgradeOperator(false);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.2.0 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_2_0() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator220\";\n-    OP_DEP_NAME = \"operator-upgrade220\";\n-    OP_SA = \"operator-sa220\";\n-    DOM_NS = \"weblogic-domain220\";\n-    DUID = \"operatordomain220\";\n-    setupOperatorAndDomain(\"release/2.2\", \"2.2.0\");\n-    upgradeOperator(false);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.2.1 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_2_1() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator221\";\n-    OP_DEP_NAME = \"operator-upgrade221\";\n-    OP_SA = \"operator-sa221\";\n-    DOM_NS = \"weblogic-domain221\";\n-    DUID = \"operatordomain221\";\n-    setupOperatorAndDomain(\"release/2.2.1\", \"2.2.1\");\n-    upgradeOperator(false);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.3.0 to develop branch.\n+   * Test for upgrading Operator from release 2.5.0 to develop branch.\n    *\n    * @throws Exception when upgrade fails\n    */\n   @Test\n-  public void testOperatorUpgradeFrom2_3_0() throws Exception {\n+  public void testOperatorUpgradeFrom2_5_0() throws Exception {\n     Assumptions.assumeTrue(QUICKTEST);\n     testCompletedSuccessfully = false;\n     String testMethod = new Object() {\n     }.getClass().getEnclosingMethod().getName();\n     logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator230\";\n-    OP_DEP_NAME = \"operator-upgrade230\";\n-    OP_SA = \"operator-sa230\";\n-    DOM_NS = \"weblogic-domain230\";\n-    DUID = \"operatordomain230\";\n-    setupOperatorAndDomain(\"release/2.3.0\", \"2.3.0\");\n-    upgradeOperator(false);\n+    OP_NS = \"weblogic-operator250\";\n+    DOM_NS = \"weblogic-domain250\";\n+    namespaceList.append(OP_NS);\n+    namespaceList.append(\" \").append(DOM_NS);\n+    OP_DEP_NAME = \"operator-upgrade250\";\n+    OP_SA = \"operator-sa250\";\n+    DUID = \"operatordomain250\";\n+    setupOperatorAndDomain(\"release/2.5.0\", \"2.5.0\");\n+\n+    M1_CTS = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server1\");\n+    M2_CTS = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server2\");\n+    ADMIN_CTS = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-admin-server\");\n+    upgradeOperator();\n     testCompletedSuccessfully = true;\n     LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n   }\n \n   /**\n    * Upgrades operator to develop branch by using the helm upgrade.\n    *\n-   * @param restart boolean parameter used to determine if a restart of domain is checked\n    * @throws Exception when upgrade fails or basic usecase testing or scaling fails.\n    */\n-  private void upgradeOperator(boolean restart) throws Exception {\n+  private void upgradeOperator() throws Exception {\n     operator.callHelmUpgrade(\"image=\" + OP_TARGET_RELEASE);\n-    if (restart) {\n-      checkDomainRollingRestarted();\n-    }\n-    checkOperatorVersion();\n+    checkCrdVersion();\n+    System.out.println(\"Before Upgrade M1CTS[\" + M1_CTS + \"]\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2MTU3Mg=="}, "originalCommit": {"oid": "7ef1946602c5913a105db01fcd01b3ac9c5afa30"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2MzIxNw==", "bodyText": "its kinda weird to get these here, and then print them in the upgradeOperator() method", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397563217", "createdAt": "2020-03-25T01:45:33Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -89,190 +106,82 @@ public void cleanupOperatorAndDomain() throws Exception {\n         operator.destroy();\n       }\n       TestUtils.exec(\"rm -rf \" + Paths.get(opUpgradeTmpDir).toString());\n+      TestUtils.exec(\"kubectl delete crd domains.weblogic.oracle --ignore-not-found\");\n       //ExecResult result = cleanup();\n       LoggerHelper.getLocal().log(Level.INFO, \"+++++++++++++++Done AfterTest cleanup+++++++++++++++++++++\");\n     }\n   }\n \n   /**\n-   * Test for upgrading Operator from release 2.0 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_0() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator20\";\n-    OP_DEP_NAME = \"operator-upgrade20\";\n-    OP_SA = \"operator-sa20\";\n-    DOM_NS = \"weblogic-domain20\";\n-    DUID = \"operatordomain20\";\n-    setupOperatorAndDomain(\"2.0\", \"2.0\");\n-    upgradeOperator(true);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.0.1 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_0_1() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator201\";\n-    OP_DEP_NAME = \"operator-upgrade201\";\n-    OP_SA = \"operator-sa201\";\n-    DOM_NS = \"weblogic-domain201\";\n-    DUID = \"operatordomain201\";\n-    setupOperatorAndDomain(\"release/2.0.1\", \"2.0.1\");\n-    upgradeOperator(true);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.1 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_1() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator21\";\n-    OP_DEP_NAME = \"operator-upgrade21\";\n-    OP_SA = \"operator-sa21\";\n-    DOM_NS = \"weblogic-domain21\";\n-    DUID = \"operatordomain21\";\n-    setupOperatorAndDomain(\"release/2.1\", \"2.1\");\n-    upgradeOperator(false);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.2.0 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_2_0() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator220\";\n-    OP_DEP_NAME = \"operator-upgrade220\";\n-    OP_SA = \"operator-sa220\";\n-    DOM_NS = \"weblogic-domain220\";\n-    DUID = \"operatordomain220\";\n-    setupOperatorAndDomain(\"release/2.2\", \"2.2.0\");\n-    upgradeOperator(false);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.2.1 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_2_1() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator221\";\n-    OP_DEP_NAME = \"operator-upgrade221\";\n-    OP_SA = \"operator-sa221\";\n-    DOM_NS = \"weblogic-domain221\";\n-    DUID = \"operatordomain221\";\n-    setupOperatorAndDomain(\"release/2.2.1\", \"2.2.1\");\n-    upgradeOperator(false);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.3.0 to develop branch.\n+   * Test for upgrading Operator from release 2.5.0 to develop branch.\n    *\n    * @throws Exception when upgrade fails\n    */\n   @Test\n-  public void testOperatorUpgradeFrom2_3_0() throws Exception {\n+  public void testOperatorUpgradeFrom2_5_0() throws Exception {\n     Assumptions.assumeTrue(QUICKTEST);\n     testCompletedSuccessfully = false;\n     String testMethod = new Object() {\n     }.getClass().getEnclosingMethod().getName();\n     logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator230\";\n-    OP_DEP_NAME = \"operator-upgrade230\";\n-    OP_SA = \"operator-sa230\";\n-    DOM_NS = \"weblogic-domain230\";\n-    DUID = \"operatordomain230\";\n-    setupOperatorAndDomain(\"release/2.3.0\", \"2.3.0\");\n-    upgradeOperator(false);\n+    OP_NS = \"weblogic-operator250\";\n+    DOM_NS = \"weblogic-domain250\";\n+    namespaceList.append(OP_NS);\n+    namespaceList.append(\" \").append(DOM_NS);\n+    OP_DEP_NAME = \"operator-upgrade250\";\n+    OP_SA = \"operator-sa250\";\n+    DUID = \"operatordomain250\";\n+    setupOperatorAndDomain(\"release/2.5.0\", \"2.5.0\");\n+\n+    M1_CTS = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ef1946602c5913a105db01fcd01b3ac9c5afa30"}, "originalPosition": 214}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "780f714a8c454f54dab4fa5bd7253201f093bd08", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/780f714a8c454f54dab4fa5bd7253201f093bd08", "committedDate": "2020-03-25T04:38:19Z", "message": "addressed more review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxMjUzNzAw", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#pullrequestreview-381253700", "createdAt": "2020-03-25T15:19:53Z", "commit": {"oid": "780f714a8c454f54dab4fa5bd7253201f093bd08"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNToxOTo1M1rOF7gRQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNToyMDo1N1rOF7gUeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzOTAxMQ==", "bodyText": "i cant see the update - still appears to say weblogic", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397939011", "createdAt": "2020-03-25T15:19:53Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -293,6 +229,20 @@ private void checkDomainRollingRestarted() throws Exception {\n     }\n   }\n \n+  /**\n+   * Check whether the weblogic server instances are still RUNNING ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxMDI4Mg=="}, "originalCommit": {"oid": "89f9470e812ac564a0208f837bfc153e6ab53657"}, "originalPosition": 290}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzOTQzNw==", "bodyText": "WebLogic spelled wrong", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397939437", "createdAt": "2020-03-25T15:20:27Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -293,9 +209,31 @@ private void checkDomainRollingRestarted() throws Exception {\n     }\n   }\n \n+  /**\n+   * Check whether the weblogic server instances are still RUNNING \n+   * not restarted due to Operator Upgrade by comparing the creationTimestamp\n+   * before and after upgrade\n+   *\n+   * @throws Exception If restarted\n+   */\n+  private void checkDomainNotRestarted() throws Exception {\n+    TestUtils.checkPodReady(DUID + \"-\" + domain.getAdminServerName(), DOM_NS);\n+    for (int i = 2; i >= 1; i--) {\n+      TestUtils.checkPodReady(DUID + \"-managed-server\" + i, DOM_NS);\n+    }\n+    String m1 = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server1\");\n+    String m2 = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server2\");\n+    String admin = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-admin-server\");\n+    System.out.println(\"After Upgrade CreateTimeStamp for managed-server1 pod [\" + m1 + \"]\");\n+    System.out.println(\"After Upgrade CreateTimeStamp for managed-server2 pod [\" + m2 + \"]\");\n+    System.out.println(\"After Upgrade CreateTimeStamp for admin-server pod [\" + admin + \"]\");\n+    Assertions.assertEquals(Managed1_CreateTimeStamp, m1);\n+    Assertions.assertEquals(Managed2_CreateTimeStamp, m2);\n+    Assertions.assertEquals(Admin_CreateTimeStamp, admin);\n+  }\n \n   /**\n-   * Creates operator based on operatorRelease passed to it and then creates a WebLogic domain\n+   * Creates operator based on operatorRelease passed to it and then creates a Weblogic domain", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "780f714a8c454f54dab4fa5bd7253201f093bd08"}, "originalPosition": 328}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzOTY3OQ==", "bodyText": "its still missing.....", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397939679", "createdAt": "2020-03-25T15:20:47Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/utils/TestUtils.java", "diffHunk": "@@ -1980,4 +1980,36 @@ public static ExecResult kubectlpatch(String domainUid, String domainNS, String\n     return exec(cmd, true);\n   }\n \n+  /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2MjE4MA=="}, "originalCommit": {"oid": "7ef1946602c5913a105db01fcd01b3ac9c5afa30"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzOTgzMg==", "bodyText": "write javadoc", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397939832", "createdAt": "2020-03-25T15:20:57Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/utils/TestUtils.java", "diffHunk": "@@ -1980,4 +1980,37 @@ public static ExecResult kubectlpatch(String domainUid, String domainNS, String\n     return exec(cmd, true);\n   }\n \n+  /**\n+   * @param namespace\n+   * @param pod \n+   *\n+   * @return creationTimestamp of the Pod \n+   * @throws Exception on failure\n+   */\n+  public static String getCreationTimeStamp(String namespace, String pod) throws Exception {\n+    String kcmd = \"kubectl get pod \"\n+              + pod \n+              + \" --namespace \"\n+              + namespace\n+              + \" -o jsonpath='{.metadata.creationTimestamp}'\";\n+    ExecResult result = ExecCommand.exec(kcmd);\n+    return result.stdout().trim();\n+  }\n+\n+  /**\n+   * @param namespace", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "780f714a8c454f54dab4fa5bd7253201f093bd08"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05411e0dbee3b2e986ac29affca2ff4a101d648d", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/05411e0dbee3b2e986ac29affca2ff4a101d648d", "committedDate": "2020-03-25T16:43:52Z", "message": "Resolution to more triage Comment, replace TestUtils.exec with ExecCommand.exec during crd cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1b000ce2953ba9768c182d1765629a22ad52e80", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a1b000ce2953ba9768c182d1765629a22ad52e80", "committedDate": "2020-03-25T22:48:14Z", "message": "Modified the variable Names"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNjAyMjM0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#pullrequestreview-381602234", "createdAt": "2020-03-25T23:10:44Z", "commit": {"oid": "a1b000ce2953ba9768c182d1765629a22ad52e80"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMzoxMDo0NFrOF7xxYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMzoxMzoxNVrOF7x0jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyNTc2Mg==", "bodyText": "yeah, i know it is an exception, you are meant to explain why", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r398225762", "createdAt": "2020-03-25T23:10:44Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -49,11 +54,24 @@\n    */\n   @BeforeAll\n   public static void staticPrepare() throws Exception {\n+    namespaceList = new StringBuffer();\n     testClassName = new Object() {\n     }.getClass().getEnclosingClass().getSimpleName();\n     initialize(APP_PROPS_FILE, testClassName);\n   }\n \n+  /**\n+   * Releases k8s cluster lease, archives result, pv directories.\n+   *\n+   * @throws Exception exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1b000ce2953ba9768c182d1765629a22ad52e80"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyNjAzMw==", "bodyText": "CRD's are not namespaced resoruces, so this doc is wrong.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r398226033", "createdAt": "2020-03-25T23:11:34Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -89,211 +106,110 @@ public void cleanupOperatorAndDomain() throws Exception {\n         operator.destroy();\n       }\n       TestUtils.exec(\"rm -rf \" + Paths.get(opUpgradeTmpDir).toString());\n-      //ExecResult result = cleanup();\n+      TestUtils.exec(\"kubectl delete crd domains.weblogic.oracle --ignore-not-found\");\n+      // Make sure domain CRD is deleted form k8s \n+      ExecResult result = ExecCommand.exec(\"kubectl get crd domains.weblogic.oracle\",true);\n+      Assertions.assertEquals(1, result.exitValue());\n       LoggerHelper.getLocal().log(Level.INFO, \"+++++++++++++++Done AfterTest cleanup+++++++++++++++++++++\");\n     }\n   }\n \n   /**\n-   * Test for upgrading Operator from release 2.0 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_0() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator20\";\n-    OP_DEP_NAME = \"operator-upgrade20\";\n-    OP_SA = \"operator-sa20\";\n-    DOM_NS = \"weblogic-domain20\";\n-    DUID = \"operatordomain20\";\n-    setupOperatorAndDomain(\"2.0\", \"2.0\");\n-    upgradeOperator(true);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.0.1 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_0_1() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator201\";\n-    OP_DEP_NAME = \"operator-upgrade201\";\n-    OP_SA = \"operator-sa201\";\n-    DOM_NS = \"weblogic-domain201\";\n-    DUID = \"operatordomain201\";\n-    setupOperatorAndDomain(\"release/2.0.1\", \"2.0.1\");\n-    upgradeOperator(true);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.1 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_1() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator21\";\n-    OP_DEP_NAME = \"operator-upgrade21\";\n-    OP_SA = \"operator-sa21\";\n-    DOM_NS = \"weblogic-domain21\";\n-    DUID = \"operatordomain21\";\n-    setupOperatorAndDomain(\"release/2.1\", \"2.1\");\n-    upgradeOperator(false);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.2.0 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_2_0() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator220\";\n-    OP_DEP_NAME = \"operator-upgrade220\";\n-    OP_SA = \"operator-sa220\";\n-    DOM_NS = \"weblogic-domain220\";\n-    DUID = \"operatordomain220\";\n-    setupOperatorAndDomain(\"release/2.2\", \"2.2.0\");\n-    upgradeOperator(false);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.2.1 to develop branch.\n+   * Test for upgrading Operator from release 2.5.0 to develop branch.\n    *\n    * @throws Exception when upgrade fails\n    */\n   @Test\n-  public void testOperatorUpgradeFrom2_2_1() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator221\";\n-    OP_DEP_NAME = \"operator-upgrade221\";\n-    OP_SA = \"operator-sa221\";\n-    DOM_NS = \"weblogic-domain221\";\n-    DUID = \"operatordomain221\";\n-    setupOperatorAndDomain(\"release/2.2.1\", \"2.2.1\");\n-    upgradeOperator(false);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.3.0 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_3_0() throws Exception {\n+  public void testOperatorUpgradeFrom2_5_0() throws Exception {\n     Assumptions.assumeTrue(QUICKTEST);\n     testCompletedSuccessfully = false;\n     String testMethod = new Object() {\n     }.getClass().getEnclosingMethod().getName();\n     logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator230\";\n-    OP_DEP_NAME = \"operator-upgrade230\";\n-    OP_SA = \"operator-sa230\";\n-    DOM_NS = \"weblogic-domain230\";\n-    DUID = \"operatordomain230\";\n-    setupOperatorAndDomain(\"release/2.3.0\", \"2.3.0\");\n-    upgradeOperator(false);\n+    OP_NS = \"weblogic-operator250\";\n+    DOM_NS = \"weblogic-domain250\";\n+    namespaceList.append(OP_NS);\n+    namespaceList.append(\" \").append(DOM_NS);\n+    OP_DEP_NAME = \"operator-upgrade250\";\n+    OP_SA = \"operator-sa250\";\n+    DUID = \"operatordomain250\";\n+    setupOperatorAndDomain(\"release/2.5.0\", \"2.5.0\");\n+\n+    // Save the CreateTimeStamp for the server pod(s) to compare with \n+    // CreateTimeStamp after upgrade to make sure the pod(s) are not re-stated\n+    managed1CreateTimeStamp = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server1\");\n+    managed2CreateTimeStamp = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server2\");\n+    adminCreateTimeStamp = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-admin-server\");\n+    upgradeOperator();\n     testCompletedSuccessfully = true;\n     LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n   }\n \n   /**\n    * Upgrades operator to develop branch by using the helm upgrade.\n    *\n-   * @param restart boolean parameter used to determine if a restart of domain is checked\n    * @throws Exception when upgrade fails or basic usecase testing or scaling fails.\n    */\n-  private void upgradeOperator(boolean restart) throws Exception {\n+  private void upgradeOperator() throws Exception {\n     operator.callHelmUpgrade(\"image=\" + OP_TARGET_RELEASE);\n-    if (restart) {\n-      checkDomainRollingRestarted();\n-    }\n-    checkOperatorVersion();\n+    checkCrdVersion();\n+    checkDomainNotRestarted();\n     testClusterScaling(operator, domain, false);\n   }\n \n   /**\n-   * checks the expected version of the upgraded operator in a loop. In Jenkins it takes nearly 8\n-   * minutes to show the updated value of the domain CRD.\n+   * Checks the expected Upgraded Version of CustomResourceDefintion (CRD) ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1b000ce2953ba9768c182d1765629a22ad52e80"}, "originalPosition": 261}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyNjI2NQ==", "bodyText": "include in the message what you did get, and what you expected to get", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r398226265", "createdAt": "2020-03-25T23:12:15Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -89,211 +106,110 @@ public void cleanupOperatorAndDomain() throws Exception {\n         operator.destroy();\n       }\n       TestUtils.exec(\"rm -rf \" + Paths.get(opUpgradeTmpDir).toString());\n-      //ExecResult result = cleanup();\n+      TestUtils.exec(\"kubectl delete crd domains.weblogic.oracle --ignore-not-found\");\n+      // Make sure domain CRD is deleted form k8s \n+      ExecResult result = ExecCommand.exec(\"kubectl get crd domains.weblogic.oracle\",true);\n+      Assertions.assertEquals(1, result.exitValue());\n       LoggerHelper.getLocal().log(Level.INFO, \"+++++++++++++++Done AfterTest cleanup+++++++++++++++++++++\");\n     }\n   }\n \n   /**\n-   * Test for upgrading Operator from release 2.0 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_0() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator20\";\n-    OP_DEP_NAME = \"operator-upgrade20\";\n-    OP_SA = \"operator-sa20\";\n-    DOM_NS = \"weblogic-domain20\";\n-    DUID = \"operatordomain20\";\n-    setupOperatorAndDomain(\"2.0\", \"2.0\");\n-    upgradeOperator(true);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.0.1 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_0_1() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator201\";\n-    OP_DEP_NAME = \"operator-upgrade201\";\n-    OP_SA = \"operator-sa201\";\n-    DOM_NS = \"weblogic-domain201\";\n-    DUID = \"operatordomain201\";\n-    setupOperatorAndDomain(\"release/2.0.1\", \"2.0.1\");\n-    upgradeOperator(true);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.1 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_1() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator21\";\n-    OP_DEP_NAME = \"operator-upgrade21\";\n-    OP_SA = \"operator-sa21\";\n-    DOM_NS = \"weblogic-domain21\";\n-    DUID = \"operatordomain21\";\n-    setupOperatorAndDomain(\"release/2.1\", \"2.1\");\n-    upgradeOperator(false);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.2.0 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_2_0() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator220\";\n-    OP_DEP_NAME = \"operator-upgrade220\";\n-    OP_SA = \"operator-sa220\";\n-    DOM_NS = \"weblogic-domain220\";\n-    DUID = \"operatordomain220\";\n-    setupOperatorAndDomain(\"release/2.2\", \"2.2.0\");\n-    upgradeOperator(false);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.2.1 to develop branch.\n+   * Test for upgrading Operator from release 2.5.0 to develop branch.\n    *\n    * @throws Exception when upgrade fails\n    */\n   @Test\n-  public void testOperatorUpgradeFrom2_2_1() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator221\";\n-    OP_DEP_NAME = \"operator-upgrade221\";\n-    OP_SA = \"operator-sa221\";\n-    DOM_NS = \"weblogic-domain221\";\n-    DUID = \"operatordomain221\";\n-    setupOperatorAndDomain(\"release/2.2.1\", \"2.2.1\");\n-    upgradeOperator(false);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.3.0 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_3_0() throws Exception {\n+  public void testOperatorUpgradeFrom2_5_0() throws Exception {\n     Assumptions.assumeTrue(QUICKTEST);\n     testCompletedSuccessfully = false;\n     String testMethod = new Object() {\n     }.getClass().getEnclosingMethod().getName();\n     logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator230\";\n-    OP_DEP_NAME = \"operator-upgrade230\";\n-    OP_SA = \"operator-sa230\";\n-    DOM_NS = \"weblogic-domain230\";\n-    DUID = \"operatordomain230\";\n-    setupOperatorAndDomain(\"release/2.3.0\", \"2.3.0\");\n-    upgradeOperator(false);\n+    OP_NS = \"weblogic-operator250\";\n+    DOM_NS = \"weblogic-domain250\";\n+    namespaceList.append(OP_NS);\n+    namespaceList.append(\" \").append(DOM_NS);\n+    OP_DEP_NAME = \"operator-upgrade250\";\n+    OP_SA = \"operator-sa250\";\n+    DUID = \"operatordomain250\";\n+    setupOperatorAndDomain(\"release/2.5.0\", \"2.5.0\");\n+\n+    // Save the CreateTimeStamp for the server pod(s) to compare with \n+    // CreateTimeStamp after upgrade to make sure the pod(s) are not re-stated\n+    managed1CreateTimeStamp = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server1\");\n+    managed2CreateTimeStamp = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server2\");\n+    adminCreateTimeStamp = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-admin-server\");\n+    upgradeOperator();\n     testCompletedSuccessfully = true;\n     LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n   }\n \n   /**\n    * Upgrades operator to develop branch by using the helm upgrade.\n    *\n-   * @param restart boolean parameter used to determine if a restart of domain is checked\n    * @throws Exception when upgrade fails or basic usecase testing or scaling fails.\n    */\n-  private void upgradeOperator(boolean restart) throws Exception {\n+  private void upgradeOperator() throws Exception {\n     operator.callHelmUpgrade(\"image=\" + OP_TARGET_RELEASE);\n-    if (restart) {\n-      checkDomainRollingRestarted();\n-    }\n-    checkOperatorVersion();\n+    checkCrdVersion();\n+    checkDomainNotRestarted();\n     testClusterScaling(operator, domain, false);\n   }\n \n   /**\n-   * checks the expected version of the upgraded operator in a loop. In Jenkins it takes nearly 8\n-   * minutes to show the updated value of the domain CRD.\n+   * Checks the expected Upgraded Version of CustomResourceDefintion (CRD) \n+   * in default NameSpace in a loop. \n    *\n    * @throws Exception when version does not match\n    */\n-  private void checkOperatorVersion() throws Exception {\n+  private void checkCrdVersion() throws Exception {\n     boolean result = false;\n     LoggerHelper.getLocal().log(\n         Level.INFO,\n-        \"Checking for the domain apiVersion \"\n-            + getDomainApiVersion()\n-            + \" in a loop for up to 15 minutes\");\n-    for (int i = 0; i < 900; i = i + 10) {\n+        \"Checking for the CRD Version \"\n+            + getCrdVersion()\n+            + \" in a loop \");\n+    for (int i = 0; i < BaseTest.getMaxIterationsPod(); i++) {\n       ExecResult exec =\n           TestUtils.exec(\n-              \"kubectl get domain -n \" + DOM_NS + \"  \" + DUID + \" -o jsonpath={.apiVersion}\", true);\n-      if (exec.stdout().contains(getDomainApiVersion())) {\n-        LoggerHelper.getLocal().log(Level.INFO, \"Got the expected apiVersion\");\n+              \"kubectl get crd domains.weblogic.oracle -o jsonpath='{.spec.versions[?(@.storage==true)].name}'\", true);\n+      if (exec.stdout().contains(getCrdVersion())) {\n+        LoggerHelper.getLocal().log(Level.INFO, \"Got expected CRD Version\");\n         result = true;\n         break;\n       }\n-      Thread.sleep(1000 * 10);\n+      try { \n+        Thread.sleep(BaseTest.getWaitTimePod() * 1000); \n+      } catch (InterruptedException e) {\n+        LoggerHelper.getLocal().log(Level.INFO,\"Got InterruptedException \" + e);\n+      } \n     }\n     if (!result) {\n-      throw new RuntimeException(\"FAILURE: Didn't get the expected operator version\");\n+      throw new Exception(\"FAILURE: Didn't get expected CRD Version\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1b000ce2953ba9768c182d1765629a22ad52e80"}, "originalPosition": 299}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyNjU3Mw==", "bodyText": "@ddsharpe", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r398226573", "createdAt": "2020-03-25T23:13:15Z", "author": {"login": "markxnelson"}, "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -322,15 +272,11 @@ private void setupOperatorAndDomain(String operatorGitRelease, String operatorRe\n     domNs.add(DOM_NS);\n     operatorMap.put(\"domainNamespaces\", domNs);\n     operator = TestUtils.createOperator(operatorMap, Operator.RestCertType.LEGACY);\n-    // TestUtils.exec(\"kubectl get all --all-namespaces\", true);\n-\n-    // Map<String, Object> wlstDomainMap = TestUtils.loadYaml(DOMAININIMAGE_WLST_YAML);\n-    Map<String, Object> wlstDomainMap = createDomainInImageMap(getNewSuffixCount(), false, testClassName);\n+    Map<String, Object> wlstDomainMap = createDomainMap(getNewSuffixCount(),testClassName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE3OTg4Ng=="}, "originalCommit": {"oid": "89f9470e812ac564a0208f837bfc153e6ab53657"}, "originalPosition": 314}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a408d4fcb446e2421136bede3b78df784ffea5a", "author": {"user": null}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0a408d4fcb446e2421136bede3b78df784ffea5a", "committedDate": "2020-03-26T00:17:08Z", "message": "Added more info to Exception"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMzgwODAy", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#pullrequestreview-382380802", "createdAt": "2020-03-26T20:14:51Z", "commit": {"oid": "0a408d4fcb446e2421136bede3b78df784ffea5a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28a406382fc7e4c35bb5dacaf5de5b743e2802fd", "author": {"user": {"login": "markxnelson", "name": "Mark Nelson"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/28a406382fc7e4c35bb5dacaf5de5b743e2802fd", "committedDate": "2020-03-26T20:53:40Z", "message": "Merge branch 'develop' into OWLS-80458"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4884, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}