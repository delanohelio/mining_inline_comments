{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5NzU5MDE1", "number": 1663, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzozNTo1OVrOD9zTjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMjozNDoxOFrOD9_tnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTMwMzE4OnYy", "diffSide": "RIGHT", "path": "operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzozNTo1OVrOGXgwQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTozNTo0M1rOGXzgiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMwNzA3Mg==", "bodyText": "The problem with the call to 'normalize' is that it puts control of the internals of domain matching outside the domain classes. We should really fix this by correcting the equals methods to use the effective values of things rather than the raw fields.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1663#discussion_r427307072", "createdAt": "2020-05-19T13:35:59Z", "author": {"login": "russgold"}, "path": "operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java", "diffHunk": "@@ -513,6 +513,7 @@ public void makeRightDomainPresence(\n           // change just by looking at metadata.generation.\n \n           // Has the spec actually changed? We will get watch events for status updates\n+          DomainPresenceControl.normalizeDomainSpec(current.getSpec());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29f097e075a9d59a4239b569a60ef39b37334d9f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYxNDM0NA==", "bodyText": "Removed DomainPresenceControl class and used effective default values for 'image' and 'imagePullPolicy' directly in DomainSpec class.  DomainSpec.equals() method uses those effective values rather than raw fields by calling getImage() and getImagePullPolicy().", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1663#discussion_r427614344", "createdAt": "2020-05-19T21:35:43Z", "author": {"login": "lennyphan"}, "path": "operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java", "diffHunk": "@@ -513,6 +513,7 @@ public void makeRightDomainPresence(\n           // change just by looking at metadata.generation.\n \n           // Has the spec actually changed? We will get watch events for status updates\n+          DomainPresenceControl.normalizeDomainSpec(current.getSpec());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMwNzA3Mg=="}, "originalCommit": {"oid": "29f097e075a9d59a4239b569a60ef39b37334d9f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTMyODE0OnYy", "diffSide": "RIGHT", "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/RollingHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzo0MTozMVrOGXhANA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTozNjoyM1rOGXzhtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMxMTE1Ng==", "bodyText": "Functional programming structures can be much easier to read. In this case,\n   Optional.ofNullable(servers.poll()).ifPresent(serverToRestart -> restarts.add(serverToRestart));\n\nmakes it clearer that you are adding the result of the call to servers.poll() to the collection when it exists. It takes some getting used to, but the result is easier-to-read code.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1663#discussion_r427311156", "createdAt": "2020-05-19T13:41:31Z", "author": {"login": "russgold"}, "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/RollingHelper.java", "diffHunk": "@@ -208,31 +208,18 @@ public NextAction apply(Packet packet) {\n \n       LOGGER.info(MessageKeys.ROLLING_SERVERS, dom.getDomainUid(), servers, readyServers);\n \n-      int countToRestartNow = Math.max(1, countReady - dom.getMinAvailable(clusterName));\n+      int countToRestartNow = countReady - dom.getMinAvailable(clusterName);\n       Collection<StepAndPacket> restarts = new ArrayList<>();\n       for (int i = 0; i < countToRestartNow; i++) {\n-        restarts.add(new StepAndPacket(new RestartOneClusteredServerStep(servers, null), packet));\n+        StepAndPacket serverToRestart = servers.poll();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29f097e075a9d59a4239b569a60ef39b37334d9f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYxNDY0Nw==", "bodyText": "Updated with your functional programming structure.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1663#discussion_r427614647", "createdAt": "2020-05-19T21:36:23Z", "author": {"login": "lennyphan"}, "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/RollingHelper.java", "diffHunk": "@@ -208,31 +208,18 @@ public NextAction apply(Packet packet) {\n \n       LOGGER.info(MessageKeys.ROLLING_SERVERS, dom.getDomainUid(), servers, readyServers);\n \n-      int countToRestartNow = Math.max(1, countReady - dom.getMinAvailable(clusterName));\n+      int countToRestartNow = countReady - dom.getMinAvailable(clusterName);\n       Collection<StepAndPacket> restarts = new ArrayList<>();\n       for (int i = 0; i < countToRestartNow; i++) {\n-        restarts.add(new StepAndPacket(new RestartOneClusteredServerStep(servers, null), packet));\n+        StepAndPacket serverToRestart = servers.poll();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMxMTE1Ng=="}, "originalCommit": {"oid": "29f097e075a9d59a4239b569a60ef39b37334d9f"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTM2Mjc4OnYy", "diffSide": "RIGHT", "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/RollingHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzo0OTowMFrOGXhWIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTozNjo1NFrOGXzikw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMxNjc3MA==", "bodyText": "Please avoid magic numbers in the code - constants are clearer. In addition, nested ternaries can be hard to read. This would be easier to follow as a set of if's, choosing the simplest case first, such as:\n    if (!restarts.isEmpty()) {\n        doForkJoin(this, packet, restarts);\n    } else if (!servers.isEmpty()) {\n        doDelay(this, packet, DELAY_IN_SECONDS, TimeUnit.SECONDS);\n    } else {\n        doNext(packet);\n    }", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1663#discussion_r427316770", "createdAt": "2020-05-19T13:49:00Z", "author": {"login": "russgold"}, "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/RollingHelper.java", "diffHunk": "@@ -208,31 +208,18 @@ public NextAction apply(Packet packet) {\n \n       LOGGER.info(MessageKeys.ROLLING_SERVERS, dom.getDomainUid(), servers, readyServers);\n \n-      int countToRestartNow = Math.max(1, countReady - dom.getMinAvailable(clusterName));\n+      int countToRestartNow = countReady - dom.getMinAvailable(clusterName);\n       Collection<StepAndPacket> restarts = new ArrayList<>();\n       for (int i = 0; i < countToRestartNow; i++) {\n-        restarts.add(new StepAndPacket(new RestartOneClusteredServerStep(servers, null), packet));\n+        StepAndPacket serverToRestart = servers.poll();\n+        if (serverToRestart != null) {\n+          restarts.add(serverToRestart);\n+        }\n       }\n-      return doForkJoin(getNext(), packet, restarts);\n-    }\n-  }\n-\n-  private static class RestartOneClusteredServerStep extends Step {\n-    private final Queue<StepAndPacket> servers;\n-\n-    public RestartOneClusteredServerStep(Queue<StepAndPacket> servers, Step next) {\n-      super(next);\n-      this.servers = servers;\n-    }\n \n-    @Override\n-    public NextAction apply(Packet packet) {\n-      StepAndPacket serverToRestart = servers.poll();\n-      if (serverToRestart != null) {\n-        Collection<StepAndPacket> col = Collections.singleton(serverToRestart);\n-        return doForkJoin(this, packet, col);\n-      }\n-      return doNext(packet);\n+      return restarts.isEmpty()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29f097e075a9d59a4239b569a60ef39b37334d9f"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYxNDg2Nw==", "bodyText": "Updated with your suggestion to make it easier to read.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1663#discussion_r427614867", "createdAt": "2020-05-19T21:36:54Z", "author": {"login": "lennyphan"}, "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/RollingHelper.java", "diffHunk": "@@ -208,31 +208,18 @@ public NextAction apply(Packet packet) {\n \n       LOGGER.info(MessageKeys.ROLLING_SERVERS, dom.getDomainUid(), servers, readyServers);\n \n-      int countToRestartNow = Math.max(1, countReady - dom.getMinAvailable(clusterName));\n+      int countToRestartNow = countReady - dom.getMinAvailable(clusterName);\n       Collection<StepAndPacket> restarts = new ArrayList<>();\n       for (int i = 0; i < countToRestartNow; i++) {\n-        restarts.add(new StepAndPacket(new RestartOneClusteredServerStep(servers, null), packet));\n+        StepAndPacket serverToRestart = servers.poll();\n+        if (serverToRestart != null) {\n+          restarts.add(serverToRestart);\n+        }\n       }\n-      return doForkJoin(getNext(), packet, restarts);\n-    }\n-  }\n-\n-  private static class RestartOneClusteredServerStep extends Step {\n-    private final Queue<StepAndPacket> servers;\n-\n-    public RestartOneClusteredServerStep(Queue<StepAndPacket> servers, Step next) {\n-      super(next);\n-      this.servers = servers;\n-    }\n \n-    @Override\n-    public NextAction apply(Packet packet) {\n-      StepAndPacket serverToRestart = servers.poll();\n-      if (serverToRestart != null) {\n-        Collection<StepAndPacket> col = Collections.singleton(serverToRestart);\n-        return doForkJoin(this, packet, col);\n-      }\n-      return doNext(packet);\n+      return restarts.isEmpty()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMxNjc3MA=="}, "originalCommit": {"oid": "29f097e075a9d59a4239b569a60ef39b37334d9f"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzMzNTk2OnYy", "diffSide": "RIGHT", "path": "operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMjozNDoxOFrOGX0_Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNDozODozMVrOGX6-hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYzODUzOQ==", "bodyText": "You can remove the entire if", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1663#discussion_r427638539", "createdAt": "2020-05-19T22:34:18Z", "author": {"login": "rjeberhard"}, "path": "operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java", "diffHunk": "@@ -490,7 +490,6 @@ public void makeRightDomainPresence(\n     DomainSpec spec = null;\n     if (domain != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9204abbd7c488dc4df18619bf64294e64446bcbf"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0NjA1Mw==", "bodyText": "Is it ever possible for 'domain == null' ?  We seem to be verifying domain is not null in a few different places so just wanted to make sure I understand correctly.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1663#discussion_r427646053", "createdAt": "2020-05-19T22:56:23Z", "author": {"login": "lennyphan"}, "path": "operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java", "diffHunk": "@@ -490,7 +490,6 @@ public void makeRightDomainPresence(\n     DomainSpec spec = null;\n     if (domain != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYzODUzOQ=="}, "originalCommit": {"oid": "9204abbd7c488dc4df18619bf64294e64446bcbf"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzczNjcwOA==", "bodyText": "Removed the entire if and moved it closer to where we compare DomainSpec equality.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1663#discussion_r427736708", "createdAt": "2020-05-20T04:38:31Z", "author": {"login": "lennyphan"}, "path": "operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java", "diffHunk": "@@ -490,7 +490,6 @@ public void makeRightDomainPresence(\n     DomainSpec spec = null;\n     if (domain != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYzODUzOQ=="}, "originalCommit": {"oid": "9204abbd7c488dc4df18619bf64294e64446bcbf"}, "originalPosition": 2}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4583, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}