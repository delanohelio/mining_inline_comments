{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0MDgxODU3", "number": 1853, "title": "Add a test to change WebLogic credentials", "bodyText": "This PR adds a test for WebLogic server admin credentials change test for domains running in persistent volumes.\nJenkins test results\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/1500/\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/1498/\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/1493/\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/1492/", "createdAt": "2020-08-06T14:57:39Z", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853", "merged": true, "mergeCommit": {"oid": "1db20d8b46d0c4ca31cc113d6e69f3d1a0e42709"}, "closed": true, "closedAt": "2020-08-20T19:02:15Z", "author": {"login": "sankarpn"}, "timelineItems": {"totalCount": 64, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7uCaegH2gAyNDY0MDgxODU3OjVjZmEwNTdjMTYxMDZkNmQ1MTllNTk3ZTM1OWVlMjJhNTg2YjFiYzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdAyiofgH2gAyNDY0MDgxODU3OmUyMTI4YzczNWY0MTdjNjA1MjUyODRlZDllNDdjZjdmOWU0OTE1MjA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5cfa057c16106d6d519e597e359ee22a586b1bc6", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5cfa057c16106d6d519e597e359ee22a586b1bc6", "committedDate": "2020-08-04T22:05:53Z", "message": "Adding test to change the admin credentials for domain running in PV"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9ab68aadd505ca30dcee2aa89bf9418e1a83c79", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c9ab68aadd505ca30dcee2aa89bf9418e1a83c79", "committedDate": "2020-08-04T22:44:35Z", "message": "Fx the test name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b644cfe75bce29d6079ce6a5cd7db499012f6cc2", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b644cfe75bce29d6079ce6a5cd7db499012f6cc2", "committedDate": "2020-08-05T00:50:06Z", "message": "fix secret name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1050c6e0d48c11563ac3966569c52c035f3fea3f", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/1050c6e0d48c11563ac3966569c52c035f3fea3f", "committedDate": "2020-08-05T01:05:58Z", "message": "add restartVersion instead of replace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "469996e3c58c2c00980e799f48a5b981046778b4", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/469996e3c58c2c00980e799f48a5b981046778b4", "committedDate": "2020-08-05T04:57:34Z", "message": "fix json"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac4d4c04f0d02141dfb10a6647c593be508f9f55", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ac4d4c04f0d02141dfb10a6647c593be508f9f55", "committedDate": "2020-08-05T05:27:02Z", "message": "change the method order"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf29335177bc724f36d8021aa454bde1f7ecb144", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/bf29335177bc724f36d8021aa454bde1f7ecb144", "committedDate": "2020-08-05T14:25:23Z", "message": "fix managed server names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "994208d392c41c62507574d7c70c76f5c110614b", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/994208d392c41c62507574d7c70c76f5c110614b", "committedDate": "2020-08-05T14:55:30Z", "message": "Fix assertionerror class for invalid login"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c467dbedf2231165c7154641d8f995cdbe71ee90", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c467dbedf2231165c7154641d8f995cdbe71ee90", "committedDate": "2020-08-05T15:56:21Z", "message": "Fix comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66640b254e66995588ca34d57d3a9f9b3f5e6b65", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/66640b254e66995588ca34d57d3a9f9b3f5e6b65", "committedDate": "2020-08-06T14:52:27Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into credential-change-pv-domain"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNjc3NjEx", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#pullrequestreview-462677611", "createdAt": "2020-08-06T16:25:00Z", "commit": {"oid": "66640b254e66995588ca34d57d3a9f9b3f5e6b65"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNjoyNTowMVrOG869IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNjo1NDoyMlrOG88Afw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUzMzY2NA==", "bodyText": "getting t3channel port here, fix the log message", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r466533664", "createdAt": "2020-08-06T16:25:01Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIntrospectVersion.java", "diffHunk": "@@ -731,6 +737,162 @@ public void testCreateNewCluster() {\n \n   }\n \n+  /**\n+   * Test changes the WebLogic credentials and verifies the servers can startup and function with changed credentials.\n+   * a. Creates new WebLogic credentials using WLST.\n+   * b. Creates new Kubernetes secret for WebLogic credentials.\n+   * c. Patch the Domain Resource with new credentials, restartVerion and introspectVersion.\n+   * d. Verifies the servers in the domain restarted and accessing the admin server console with new password works.\n+   * e. Verifies the the admin server console access with old credentials fail.\n+   */\n+  @Order(3)\n+  @Test\n+  @DisplayName(\"Test change WebLogic admin credentials for domain running in persistent volume\")\n+  public void testCredentialChange() {\n+\n+    final String domainUid = \"mydomain\";\n+\n+    final String adminServerName = \"admin-server\";\n+    final String adminServerPodName = domainUid + \"-\" + adminServerName;\n+\n+    final String managedServerNameBase = \"ms-\";\n+    String managedServerPodNamePrefix = domainUid + \"-\" + managedServerNameBase;\n+\n+    int replicaCount = 3;\n+\n+    logger.info(\"Getting node port for default channel\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66640b254e66995588ca34d57d3a9f9b3f5e6b65"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUzMzg5Mg==", "bodyText": "add assert, port should not be -1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r466533892", "createdAt": "2020-08-06T16:25:21Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIntrospectVersion.java", "diffHunk": "@@ -731,6 +737,162 @@ public void testCreateNewCluster() {\n \n   }\n \n+  /**\n+   * Test changes the WebLogic credentials and verifies the servers can startup and function with changed credentials.\n+   * a. Creates new WebLogic credentials using WLST.\n+   * b. Creates new Kubernetes secret for WebLogic credentials.\n+   * c. Patch the Domain Resource with new credentials, restartVerion and introspectVersion.\n+   * d. Verifies the servers in the domain restarted and accessing the admin server console with new password works.\n+   * e. Verifies the the admin server console access with old credentials fail.\n+   */\n+  @Order(3)\n+  @Test\n+  @DisplayName(\"Test change WebLogic admin credentials for domain running in persistent volume\")\n+  public void testCredentialChange() {\n+\n+    final String domainUid = \"mydomain\";\n+\n+    final String adminServerName = \"admin-server\";\n+    final String adminServerPodName = domainUid + \"-\" + adminServerName;\n+\n+    final String managedServerNameBase = \"ms-\";\n+    String managedServerPodNamePrefix = domainUid + \"-\" + managedServerNameBase;\n+\n+    int replicaCount = 3;\n+\n+    logger.info(\"Getting node port for default channel\");\n+    int adminServerT3Port = getServiceNodePort(introDomainNamespace, adminServerPodName + \"-external\", \"t3channel\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66640b254e66995588ca34d57d3a9f9b3f5e6b65"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUzNDIwOQ==", "bodyText": "typo - change, does the comment apply to the use case?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r466534209", "createdAt": "2020-08-06T16:25:56Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIntrospectVersion.java", "diffHunk": "@@ -731,6 +737,162 @@ public void testCreateNewCluster() {\n \n   }\n \n+  /**\n+   * Test changes the WebLogic credentials and verifies the servers can startup and function with changed credentials.\n+   * a. Creates new WebLogic credentials using WLST.\n+   * b. Creates new Kubernetes secret for WebLogic credentials.\n+   * c. Patch the Domain Resource with new credentials, restartVerion and introspectVersion.\n+   * d. Verifies the servers in the domain restarted and accessing the admin server console with new password works.\n+   * e. Verifies the the admin server console access with old credentials fail.\n+   */\n+  @Order(3)\n+  @Test\n+  @DisplayName(\"Test change WebLogic admin credentials for domain running in persistent volume\")\n+  public void testCredentialChange() {\n+\n+    final String domainUid = \"mydomain\";\n+\n+    final String adminServerName = \"admin-server\";\n+    final String adminServerPodName = domainUid + \"-\" + adminServerName;\n+\n+    final String managedServerNameBase = \"ms-\";\n+    String managedServerPodNamePrefix = domainUid + \"-\" + managedServerNameBase;\n+\n+    int replicaCount = 3;\n+\n+    logger.info(\"Getting node port for default channel\");\n+    int adminServerT3Port = getServiceNodePort(introDomainNamespace, adminServerPodName + \"-external\", \"t3channel\");\n+\n+    // get the pod creation time stamps\n+    LinkedHashMap<String, DateTime> pods = new LinkedHashMap<>();\n+    // get the creation time of the admin server pod before patching\n+    DateTime adminPodCreationTime = getPodCreationTime(introDomainNamespace, adminServerPodName);\n+    pods.put(adminServerPodName, adminPodCreationTime);\n+    // get the creation time of the managed server pods before patching\n+    for (int i = 1; i <= replicaCount; i++) {\n+      pods.put(managedServerPodNamePrefix + i,\n+          getPodCreationTime(introDomainNamespace, managedServerPodNamePrefix + i));\n+    }\n+\n+    // create a temporary WebLogic WLST property file\n+    File wlstPropertiesFile = assertDoesNotThrow(() -> File.createTempFile(\"wlst\", \"properties\"),\n+        \"Creating WLST properties file failed\");\n+    Properties p = new Properties();\n+    p.setProperty(\"admin_host\", K8S_NODEPORT_HOST);\n+    p.setProperty(\"admin_port\", Integer.toString(adminServerT3Port));\n+    p.setProperty(\"admin_username\", ADMIN_USERNAME_DEFAULT);\n+    p.setProperty(\"admin_password\", ADMIN_PASSWORD_DEFAULT);\n+    p.setProperty(\"new_admin_user\", ADMIN_USERNAME_PATCH);\n+    p.setProperty(\"new_admin_password\", ADMIN_PASSWORD_PATCH);\n+    p.setProperty(\"test_name\", \"replace_admin_user\");\n+    assertDoesNotThrow(() -> p.store(new FileOutputStream(wlstPropertiesFile), \"wlst properties file\"),\n+        \"Failed to write the WLST properties to file\");\n+\n+    // changet the admin server port to a different value to force pod restart", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66640b254e66995588ca34d57d3a9f9b3f5e6b65"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU0MjM2Ng==", "bodyText": "getServiceNodePort() doesn't throw Exception, check port returned is not -1.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r466542366", "createdAt": "2020-08-06T16:39:56Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIntrospectVersion.java", "diffHunk": "@@ -731,6 +737,162 @@ public void testCreateNewCluster() {\n \n   }\n \n+  /**\n+   * Test changes the WebLogic credentials and verifies the servers can startup and function with changed credentials.\n+   * a. Creates new WebLogic credentials using WLST.\n+   * b. Creates new Kubernetes secret for WebLogic credentials.\n+   * c. Patch the Domain Resource with new credentials, restartVerion and introspectVersion.\n+   * d. Verifies the servers in the domain restarted and accessing the admin server console with new password works.\n+   * e. Verifies the the admin server console access with old credentials fail.\n+   */\n+  @Order(3)\n+  @Test\n+  @DisplayName(\"Test change WebLogic admin credentials for domain running in persistent volume\")\n+  public void testCredentialChange() {\n+\n+    final String domainUid = \"mydomain\";\n+\n+    final String adminServerName = \"admin-server\";\n+    final String adminServerPodName = domainUid + \"-\" + adminServerName;\n+\n+    final String managedServerNameBase = \"ms-\";\n+    String managedServerPodNamePrefix = domainUid + \"-\" + managedServerNameBase;\n+\n+    int replicaCount = 3;\n+\n+    logger.info(\"Getting node port for default channel\");\n+    int adminServerT3Port = getServiceNodePort(introDomainNamespace, adminServerPodName + \"-external\", \"t3channel\");\n+\n+    // get the pod creation time stamps\n+    LinkedHashMap<String, DateTime> pods = new LinkedHashMap<>();\n+    // get the creation time of the admin server pod before patching\n+    DateTime adminPodCreationTime = getPodCreationTime(introDomainNamespace, adminServerPodName);\n+    pods.put(adminServerPodName, adminPodCreationTime);\n+    // get the creation time of the managed server pods before patching\n+    for (int i = 1; i <= replicaCount; i++) {\n+      pods.put(managedServerPodNamePrefix + i,\n+          getPodCreationTime(introDomainNamespace, managedServerPodNamePrefix + i));\n+    }\n+\n+    // create a temporary WebLogic WLST property file\n+    File wlstPropertiesFile = assertDoesNotThrow(() -> File.createTempFile(\"wlst\", \"properties\"),\n+        \"Creating WLST properties file failed\");\n+    Properties p = new Properties();\n+    p.setProperty(\"admin_host\", K8S_NODEPORT_HOST);\n+    p.setProperty(\"admin_port\", Integer.toString(adminServerT3Port));\n+    p.setProperty(\"admin_username\", ADMIN_USERNAME_DEFAULT);\n+    p.setProperty(\"admin_password\", ADMIN_PASSWORD_DEFAULT);\n+    p.setProperty(\"new_admin_user\", ADMIN_USERNAME_PATCH);\n+    p.setProperty(\"new_admin_password\", ADMIN_PASSWORD_PATCH);\n+    p.setProperty(\"test_name\", \"replace_admin_user\");\n+    assertDoesNotThrow(() -> p.store(new FileOutputStream(wlstPropertiesFile), \"wlst properties file\"),\n+        \"Failed to write the WLST properties to file\");\n+\n+    // changet the admin server port to a different value to force pod restart\n+    logger.info(\"Creating a new WebLogic user/password {0}/{1} in default security realm\",\n+        ADMIN_USERNAME_PATCH, ADMIN_PASSWORD_PATCH);\n+    Path configScript = Paths.get(RESOURCE_DIR, \"python-scripts\", \"introspect_version_script.py\");\n+    executeWLSTScript(configScript, wlstPropertiesFile.toPath(), introDomainNamespace);\n+\n+    // create a new secret for admin credentials\n+    logger.info(\"Create a new secret that contains new WebLogic admin credentials\");\n+    String newWlSecretName = \"weblogic-credentials-new\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        newWlSecretName,\n+        introDomainNamespace,\n+        ADMIN_USERNAME_PATCH,\n+        ADMIN_PASSWORD_PATCH),\n+        String.format(\"createSecret failed for %s\", newWlSecretName));\n+\n+    // delete the old secret\n+    logger.info(\"Deleting the old secret\");\n+    deleteSecret(wlSecretName, introDomainNamespace);\n+\n+    String introspectVersion = assertDoesNotThrow(() -> getNextIntrospectVersion(domainUid, introDomainNamespace));\n+    String oldVersion = assertDoesNotThrow(()\n+        -> getDomainCustomResource(domainUid, introDomainNamespace).getSpec().getRestartVersion());\n+    int newVersion = oldVersion == null ? 1 : Integer.valueOf(oldVersion) + 1;\n+\n+    logger.info(\"patch the domain resource with new WebLogic secret, restartVersion and introspectVersion\");\n+    String patchStr\n+        = \"[\"\n+        + \"{\\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/spec/webLogicCredentialsSecret/name\\\", \"\n+        + \"\\\"value\\\": \\\"\" + newWlSecretName + \"\\\"},\"\n+        + \"{\\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/spec/introspectVersion\\\", \"\n+        + \"\\\"value\\\": \\\"\" + introspectVersion + \"\\\"},\"\n+        + \"{\\\"op\\\": \\\"add\\\", \\\"path\\\": \\\"/spec/restartVersion\\\", \"\n+        + \"\\\"value\\\": \\\"\" + newVersion + \"\\\"}\"\n+        + \"]\";\n+    logger.info(\"Updating domain configuration using patch string: {0}\\n\", patchStr);\n+    V1Patch patch = new V1Patch(patchStr);\n+    assertTrue(patchDomainCustomResource(domainUid, introDomainNamespace, patch, V1Patch.PATCH_FORMAT_JSON_PATCH),\n+        \"Failed to patch domain\");\n+\n+    //verify the introspector pod is created and runs\n+    String introspectPodName = domainUid + \"-\" + \"introspect-domain-job\";\n+\n+    checkPodExists(introspectPodName, domainUid, introDomainNamespace);\n+    checkPodDoesNotExist(introspectPodName, domainUid, introDomainNamespace);\n+\n+    //verify the pods are restarted\n+    verifyRollingRestartOccurred(pods, 1, introDomainNamespace);\n+\n+    // verify the admin server service created\n+    checkServiceExists(adminServerPodName, introDomainNamespace);\n+\n+    // verify admin server pod is ready\n+    checkPodReady(adminServerPodName, domainUid, introDomainNamespace);\n+\n+    // verify new cluster managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Checking managed server service {0} is created in namespace {1}\",\n+          managedServerPodNamePrefix + i, introDomainNamespace);\n+      checkServiceExists(managedServerPodNamePrefix + i, introDomainNamespace);\n+    }\n+\n+    // verify new cluster managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Waiting for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPodNamePrefix + i, introDomainNamespace);\n+      checkPodReady(managedServerPodNamePrefix + i, domainUid, introDomainNamespace);\n+    }\n+\n+    logger.info(\"Getting the list of servers using the listServers\");\n+    String baseUri = \"http://\" + K8S_NODEPORT_HOST + \":\" + adminServerT3Port + \"/clusterview/\";\n+    String serverListUri = \"ClusterViewServlet?listServers=true\";\n+    HttpResponse<String> response = null;\n+    for (int i = 0; i < 5; i++) {\n+      assertDoesNotThrow(() -> TimeUnit.SECONDS.sleep(10));\n+      response = assertDoesNotThrow(() -> OracleHttpClient.get(baseUri + serverListUri, true));\n+      assertEquals(200, response.statusCode(), \"Status code not equals to 200\");\n+    }\n+\n+    // verify managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Checking {0} health\", managedServerNameBase + i);\n+      assertTrue(response.body().contains(managedServerNameBase + i + \":HEALTH_OK\"),\n+          \"Didn't get \" + managedServerNameBase + i + \":HEALTH_OK\");\n+    }\n+\n+    logger.info(\"Getting node port for default channel\");\n+    int serviceNodePort = assertDoesNotThrow(() -> getServiceNodePort(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66640b254e66995588ca34d57d3a9f9b3f5e6b65"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU0NjE4Mg==", "bodyText": "succeeded", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r466546182", "createdAt": "2020-08-06T16:46:13Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIntrospectVersion.java", "diffHunk": "@@ -731,6 +737,162 @@ public void testCreateNewCluster() {\n \n   }\n \n+  /**\n+   * Test changes the WebLogic credentials and verifies the servers can startup and function with changed credentials.\n+   * a. Creates new WebLogic credentials using WLST.\n+   * b. Creates new Kubernetes secret for WebLogic credentials.\n+   * c. Patch the Domain Resource with new credentials, restartVerion and introspectVersion.\n+   * d. Verifies the servers in the domain restarted and accessing the admin server console with new password works.\n+   * e. Verifies the the admin server console access with old credentials fail.\n+   */\n+  @Order(3)\n+  @Test\n+  @DisplayName(\"Test change WebLogic admin credentials for domain running in persistent volume\")\n+  public void testCredentialChange() {\n+\n+    final String domainUid = \"mydomain\";\n+\n+    final String adminServerName = \"admin-server\";\n+    final String adminServerPodName = domainUid + \"-\" + adminServerName;\n+\n+    final String managedServerNameBase = \"ms-\";\n+    String managedServerPodNamePrefix = domainUid + \"-\" + managedServerNameBase;\n+\n+    int replicaCount = 3;\n+\n+    logger.info(\"Getting node port for default channel\");\n+    int adminServerT3Port = getServiceNodePort(introDomainNamespace, adminServerPodName + \"-external\", \"t3channel\");\n+\n+    // get the pod creation time stamps\n+    LinkedHashMap<String, DateTime> pods = new LinkedHashMap<>();\n+    // get the creation time of the admin server pod before patching\n+    DateTime adminPodCreationTime = getPodCreationTime(introDomainNamespace, adminServerPodName);\n+    pods.put(adminServerPodName, adminPodCreationTime);\n+    // get the creation time of the managed server pods before patching\n+    for (int i = 1; i <= replicaCount; i++) {\n+      pods.put(managedServerPodNamePrefix + i,\n+          getPodCreationTime(introDomainNamespace, managedServerPodNamePrefix + i));\n+    }\n+\n+    // create a temporary WebLogic WLST property file\n+    File wlstPropertiesFile = assertDoesNotThrow(() -> File.createTempFile(\"wlst\", \"properties\"),\n+        \"Creating WLST properties file failed\");\n+    Properties p = new Properties();\n+    p.setProperty(\"admin_host\", K8S_NODEPORT_HOST);\n+    p.setProperty(\"admin_port\", Integer.toString(adminServerT3Port));\n+    p.setProperty(\"admin_username\", ADMIN_USERNAME_DEFAULT);\n+    p.setProperty(\"admin_password\", ADMIN_PASSWORD_DEFAULT);\n+    p.setProperty(\"new_admin_user\", ADMIN_USERNAME_PATCH);\n+    p.setProperty(\"new_admin_password\", ADMIN_PASSWORD_PATCH);\n+    p.setProperty(\"test_name\", \"replace_admin_user\");\n+    assertDoesNotThrow(() -> p.store(new FileOutputStream(wlstPropertiesFile), \"wlst properties file\"),\n+        \"Failed to write the WLST properties to file\");\n+\n+    // changet the admin server port to a different value to force pod restart\n+    logger.info(\"Creating a new WebLogic user/password {0}/{1} in default security realm\",\n+        ADMIN_USERNAME_PATCH, ADMIN_PASSWORD_PATCH);\n+    Path configScript = Paths.get(RESOURCE_DIR, \"python-scripts\", \"introspect_version_script.py\");\n+    executeWLSTScript(configScript, wlstPropertiesFile.toPath(), introDomainNamespace);\n+\n+    // create a new secret for admin credentials\n+    logger.info(\"Create a new secret that contains new WebLogic admin credentials\");\n+    String newWlSecretName = \"weblogic-credentials-new\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        newWlSecretName,\n+        introDomainNamespace,\n+        ADMIN_USERNAME_PATCH,\n+        ADMIN_PASSWORD_PATCH),\n+        String.format(\"createSecret failed for %s\", newWlSecretName));\n+\n+    // delete the old secret\n+    logger.info(\"Deleting the old secret\");\n+    deleteSecret(wlSecretName, introDomainNamespace);\n+\n+    String introspectVersion = assertDoesNotThrow(() -> getNextIntrospectVersion(domainUid, introDomainNamespace));\n+    String oldVersion = assertDoesNotThrow(()\n+        -> getDomainCustomResource(domainUid, introDomainNamespace).getSpec().getRestartVersion());\n+    int newVersion = oldVersion == null ? 1 : Integer.valueOf(oldVersion) + 1;\n+\n+    logger.info(\"patch the domain resource with new WebLogic secret, restartVersion and introspectVersion\");\n+    String patchStr\n+        = \"[\"\n+        + \"{\\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/spec/webLogicCredentialsSecret/name\\\", \"\n+        + \"\\\"value\\\": \\\"\" + newWlSecretName + \"\\\"},\"\n+        + \"{\\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/spec/introspectVersion\\\", \"\n+        + \"\\\"value\\\": \\\"\" + introspectVersion + \"\\\"},\"\n+        + \"{\\\"op\\\": \\\"add\\\", \\\"path\\\": \\\"/spec/restartVersion\\\", \"\n+        + \"\\\"value\\\": \\\"\" + newVersion + \"\\\"}\"\n+        + \"]\";\n+    logger.info(\"Updating domain configuration using patch string: {0}\\n\", patchStr);\n+    V1Patch patch = new V1Patch(patchStr);\n+    assertTrue(patchDomainCustomResource(domainUid, introDomainNamespace, patch, V1Patch.PATCH_FORMAT_JSON_PATCH),\n+        \"Failed to patch domain\");\n+\n+    //verify the introspector pod is created and runs\n+    String introspectPodName = domainUid + \"-\" + \"introspect-domain-job\";\n+\n+    checkPodExists(introspectPodName, domainUid, introDomainNamespace);\n+    checkPodDoesNotExist(introspectPodName, domainUid, introDomainNamespace);\n+\n+    //verify the pods are restarted\n+    verifyRollingRestartOccurred(pods, 1, introDomainNamespace);\n+\n+    // verify the admin server service created\n+    checkServiceExists(adminServerPodName, introDomainNamespace);\n+\n+    // verify admin server pod is ready\n+    checkPodReady(adminServerPodName, domainUid, introDomainNamespace);\n+\n+    // verify new cluster managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Checking managed server service {0} is created in namespace {1}\",\n+          managedServerPodNamePrefix + i, introDomainNamespace);\n+      checkServiceExists(managedServerPodNamePrefix + i, introDomainNamespace);\n+    }\n+\n+    // verify new cluster managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Waiting for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPodNamePrefix + i, introDomainNamespace);\n+      checkPodReady(managedServerPodNamePrefix + i, domainUid, introDomainNamespace);\n+    }\n+\n+    logger.info(\"Getting the list of servers using the listServers\");\n+    String baseUri = \"http://\" + K8S_NODEPORT_HOST + \":\" + adminServerT3Port + \"/clusterview/\";\n+    String serverListUri = \"ClusterViewServlet?listServers=true\";\n+    HttpResponse<String> response = null;\n+    for (int i = 0; i < 5; i++) {\n+      assertDoesNotThrow(() -> TimeUnit.SECONDS.sleep(10));\n+      response = assertDoesNotThrow(() -> OracleHttpClient.get(baseUri + serverListUri, true));\n+      assertEquals(200, response.statusCode(), \"Status code not equals to 200\");\n+    }\n+\n+    // verify managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Checking {0} health\", managedServerNameBase + i);\n+      assertTrue(response.body().contains(managedServerNameBase + i + \":HEALTH_OK\"),\n+          \"Didn't get \" + managedServerNameBase + i + \":HEALTH_OK\");\n+    }\n+\n+    logger.info(\"Getting node port for default channel\");\n+    int serviceNodePort = assertDoesNotThrow(() -> getServiceNodePort(\n+        introDomainNamespace, adminServerPodName + \"-external\", \"default\"),\n+        \"Getting admin server node port failed\");\n+\n+    logger.info(\"Validating WebLogic admin server access by login to console\");\n+    boolean loginSuccessful = assertDoesNotThrow(()\n+        -> adminNodePortAccessible(serviceNodePort, ADMIN_USERNAME_PATCH, ADMIN_PASSWORD_PATCH),\n+        \"Access to admin server node port failed\");\n+    assertTrue(loginSuccessful, \"Console login validation failed\");\n+\n+    logger.info(\"Validating WebLogic admin server access by login to console using old credentials\");\n+    assertThrows(AssertionFailedError.class, ()\n+        -> adminNodePortAccessible(serviceNodePort, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT),\n+        \"Accessing using old user/password succedded, supposed to fail\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66640b254e66995588ca34d57d3a9f9b3f5e6b65"}, "originalPosition": 223}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU0NjgxOA==", "bodyText": "fix the assert and loginSuccessful is not captured", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r466546818", "createdAt": "2020-08-06T16:47:23Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIntrospectVersion.java", "diffHunk": "@@ -731,6 +737,162 @@ public void testCreateNewCluster() {\n \n   }\n \n+  /**\n+   * Test changes the WebLogic credentials and verifies the servers can startup and function with changed credentials.\n+   * a. Creates new WebLogic credentials using WLST.\n+   * b. Creates new Kubernetes secret for WebLogic credentials.\n+   * c. Patch the Domain Resource with new credentials, restartVerion and introspectVersion.\n+   * d. Verifies the servers in the domain restarted and accessing the admin server console with new password works.\n+   * e. Verifies the the admin server console access with old credentials fail.\n+   */\n+  @Order(3)\n+  @Test\n+  @DisplayName(\"Test change WebLogic admin credentials for domain running in persistent volume\")\n+  public void testCredentialChange() {\n+\n+    final String domainUid = \"mydomain\";\n+\n+    final String adminServerName = \"admin-server\";\n+    final String adminServerPodName = domainUid + \"-\" + adminServerName;\n+\n+    final String managedServerNameBase = \"ms-\";\n+    String managedServerPodNamePrefix = domainUid + \"-\" + managedServerNameBase;\n+\n+    int replicaCount = 3;\n+\n+    logger.info(\"Getting node port for default channel\");\n+    int adminServerT3Port = getServiceNodePort(introDomainNamespace, adminServerPodName + \"-external\", \"t3channel\");\n+\n+    // get the pod creation time stamps\n+    LinkedHashMap<String, DateTime> pods = new LinkedHashMap<>();\n+    // get the creation time of the admin server pod before patching\n+    DateTime adminPodCreationTime = getPodCreationTime(introDomainNamespace, adminServerPodName);\n+    pods.put(adminServerPodName, adminPodCreationTime);\n+    // get the creation time of the managed server pods before patching\n+    for (int i = 1; i <= replicaCount; i++) {\n+      pods.put(managedServerPodNamePrefix + i,\n+          getPodCreationTime(introDomainNamespace, managedServerPodNamePrefix + i));\n+    }\n+\n+    // create a temporary WebLogic WLST property file\n+    File wlstPropertiesFile = assertDoesNotThrow(() -> File.createTempFile(\"wlst\", \"properties\"),\n+        \"Creating WLST properties file failed\");\n+    Properties p = new Properties();\n+    p.setProperty(\"admin_host\", K8S_NODEPORT_HOST);\n+    p.setProperty(\"admin_port\", Integer.toString(adminServerT3Port));\n+    p.setProperty(\"admin_username\", ADMIN_USERNAME_DEFAULT);\n+    p.setProperty(\"admin_password\", ADMIN_PASSWORD_DEFAULT);\n+    p.setProperty(\"new_admin_user\", ADMIN_USERNAME_PATCH);\n+    p.setProperty(\"new_admin_password\", ADMIN_PASSWORD_PATCH);\n+    p.setProperty(\"test_name\", \"replace_admin_user\");\n+    assertDoesNotThrow(() -> p.store(new FileOutputStream(wlstPropertiesFile), \"wlst properties file\"),\n+        \"Failed to write the WLST properties to file\");\n+\n+    // changet the admin server port to a different value to force pod restart\n+    logger.info(\"Creating a new WebLogic user/password {0}/{1} in default security realm\",\n+        ADMIN_USERNAME_PATCH, ADMIN_PASSWORD_PATCH);\n+    Path configScript = Paths.get(RESOURCE_DIR, \"python-scripts\", \"introspect_version_script.py\");\n+    executeWLSTScript(configScript, wlstPropertiesFile.toPath(), introDomainNamespace);\n+\n+    // create a new secret for admin credentials\n+    logger.info(\"Create a new secret that contains new WebLogic admin credentials\");\n+    String newWlSecretName = \"weblogic-credentials-new\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        newWlSecretName,\n+        introDomainNamespace,\n+        ADMIN_USERNAME_PATCH,\n+        ADMIN_PASSWORD_PATCH),\n+        String.format(\"createSecret failed for %s\", newWlSecretName));\n+\n+    // delete the old secret\n+    logger.info(\"Deleting the old secret\");\n+    deleteSecret(wlSecretName, introDomainNamespace);\n+\n+    String introspectVersion = assertDoesNotThrow(() -> getNextIntrospectVersion(domainUid, introDomainNamespace));\n+    String oldVersion = assertDoesNotThrow(()\n+        -> getDomainCustomResource(domainUid, introDomainNamespace).getSpec().getRestartVersion());\n+    int newVersion = oldVersion == null ? 1 : Integer.valueOf(oldVersion) + 1;\n+\n+    logger.info(\"patch the domain resource with new WebLogic secret, restartVersion and introspectVersion\");\n+    String patchStr\n+        = \"[\"\n+        + \"{\\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/spec/webLogicCredentialsSecret/name\\\", \"\n+        + \"\\\"value\\\": \\\"\" + newWlSecretName + \"\\\"},\"\n+        + \"{\\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/spec/introspectVersion\\\", \"\n+        + \"\\\"value\\\": \\\"\" + introspectVersion + \"\\\"},\"\n+        + \"{\\\"op\\\": \\\"add\\\", \\\"path\\\": \\\"/spec/restartVersion\\\", \"\n+        + \"\\\"value\\\": \\\"\" + newVersion + \"\\\"}\"\n+        + \"]\";\n+    logger.info(\"Updating domain configuration using patch string: {0}\\n\", patchStr);\n+    V1Patch patch = new V1Patch(patchStr);\n+    assertTrue(patchDomainCustomResource(domainUid, introDomainNamespace, patch, V1Patch.PATCH_FORMAT_JSON_PATCH),\n+        \"Failed to patch domain\");\n+\n+    //verify the introspector pod is created and runs\n+    String introspectPodName = domainUid + \"-\" + \"introspect-domain-job\";\n+\n+    checkPodExists(introspectPodName, domainUid, introDomainNamespace);\n+    checkPodDoesNotExist(introspectPodName, domainUid, introDomainNamespace);\n+\n+    //verify the pods are restarted\n+    verifyRollingRestartOccurred(pods, 1, introDomainNamespace);\n+\n+    // verify the admin server service created\n+    checkServiceExists(adminServerPodName, introDomainNamespace);\n+\n+    // verify admin server pod is ready\n+    checkPodReady(adminServerPodName, domainUid, introDomainNamespace);\n+\n+    // verify new cluster managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Checking managed server service {0} is created in namespace {1}\",\n+          managedServerPodNamePrefix + i, introDomainNamespace);\n+      checkServiceExists(managedServerPodNamePrefix + i, introDomainNamespace);\n+    }\n+\n+    // verify new cluster managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Waiting for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPodNamePrefix + i, introDomainNamespace);\n+      checkPodReady(managedServerPodNamePrefix + i, domainUid, introDomainNamespace);\n+    }\n+\n+    logger.info(\"Getting the list of servers using the listServers\");\n+    String baseUri = \"http://\" + K8S_NODEPORT_HOST + \":\" + adminServerT3Port + \"/clusterview/\";\n+    String serverListUri = \"ClusterViewServlet?listServers=true\";\n+    HttpResponse<String> response = null;\n+    for (int i = 0; i < 5; i++) {\n+      assertDoesNotThrow(() -> TimeUnit.SECONDS.sleep(10));\n+      response = assertDoesNotThrow(() -> OracleHttpClient.get(baseUri + serverListUri, true));\n+      assertEquals(200, response.statusCode(), \"Status code not equals to 200\");\n+    }\n+\n+    // verify managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Checking {0} health\", managedServerNameBase + i);\n+      assertTrue(response.body().contains(managedServerNameBase + i + \":HEALTH_OK\"),\n+          \"Didn't get \" + managedServerNameBase + i + \":HEALTH_OK\");\n+    }\n+\n+    logger.info(\"Getting node port for default channel\");\n+    int serviceNodePort = assertDoesNotThrow(() -> getServiceNodePort(\n+        introDomainNamespace, adminServerPodName + \"-external\", \"default\"),\n+        \"Getting admin server node port failed\");\n+\n+    logger.info(\"Validating WebLogic admin server access by login to console\");\n+    boolean loginSuccessful = assertDoesNotThrow(()\n+        -> adminNodePortAccessible(serviceNodePort, ADMIN_USERNAME_PATCH, ADMIN_PASSWORD_PATCH),\n+        \"Access to admin server node port failed\");\n+    assertTrue(loginSuccessful, \"Console login validation failed\");\n+\n+    logger.info(\"Validating WebLogic admin server access by login to console using old credentials\");\n+    assertThrows(AssertionFailedError.class, ()\n+        -> adminNodePortAccessible(serviceNodePort, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT),\n+        \"Accessing using old user/password succedded, supposed to fail\");\n+    assertTrue(loginSuccessful, \"Console login validation failed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66640b254e66995588ca34d57d3a9f9b3f5e6b65"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1MDkxMQ==", "bodyText": "are the services(t3channel external service) also recreated? can the t3channel node port be changed to something else after restart?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r466550911", "createdAt": "2020-08-06T16:54:22Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIntrospectVersion.java", "diffHunk": "@@ -731,6 +737,162 @@ public void testCreateNewCluster() {\n \n   }\n \n+  /**\n+   * Test changes the WebLogic credentials and verifies the servers can startup and function with changed credentials.\n+   * a. Creates new WebLogic credentials using WLST.\n+   * b. Creates new Kubernetes secret for WebLogic credentials.\n+   * c. Patch the Domain Resource with new credentials, restartVerion and introspectVersion.\n+   * d. Verifies the servers in the domain restarted and accessing the admin server console with new password works.\n+   * e. Verifies the the admin server console access with old credentials fail.\n+   */\n+  @Order(3)\n+  @Test\n+  @DisplayName(\"Test change WebLogic admin credentials for domain running in persistent volume\")\n+  public void testCredentialChange() {\n+\n+    final String domainUid = \"mydomain\";\n+\n+    final String adminServerName = \"admin-server\";\n+    final String adminServerPodName = domainUid + \"-\" + adminServerName;\n+\n+    final String managedServerNameBase = \"ms-\";\n+    String managedServerPodNamePrefix = domainUid + \"-\" + managedServerNameBase;\n+\n+    int replicaCount = 3;\n+\n+    logger.info(\"Getting node port for default channel\");\n+    int adminServerT3Port = getServiceNodePort(introDomainNamespace, adminServerPodName + \"-external\", \"t3channel\");\n+\n+    // get the pod creation time stamps\n+    LinkedHashMap<String, DateTime> pods = new LinkedHashMap<>();\n+    // get the creation time of the admin server pod before patching\n+    DateTime adminPodCreationTime = getPodCreationTime(introDomainNamespace, adminServerPodName);\n+    pods.put(adminServerPodName, adminPodCreationTime);\n+    // get the creation time of the managed server pods before patching\n+    for (int i = 1; i <= replicaCount; i++) {\n+      pods.put(managedServerPodNamePrefix + i,\n+          getPodCreationTime(introDomainNamespace, managedServerPodNamePrefix + i));\n+    }\n+\n+    // create a temporary WebLogic WLST property file\n+    File wlstPropertiesFile = assertDoesNotThrow(() -> File.createTempFile(\"wlst\", \"properties\"),\n+        \"Creating WLST properties file failed\");\n+    Properties p = new Properties();\n+    p.setProperty(\"admin_host\", K8S_NODEPORT_HOST);\n+    p.setProperty(\"admin_port\", Integer.toString(adminServerT3Port));\n+    p.setProperty(\"admin_username\", ADMIN_USERNAME_DEFAULT);\n+    p.setProperty(\"admin_password\", ADMIN_PASSWORD_DEFAULT);\n+    p.setProperty(\"new_admin_user\", ADMIN_USERNAME_PATCH);\n+    p.setProperty(\"new_admin_password\", ADMIN_PASSWORD_PATCH);\n+    p.setProperty(\"test_name\", \"replace_admin_user\");\n+    assertDoesNotThrow(() -> p.store(new FileOutputStream(wlstPropertiesFile), \"wlst properties file\"),\n+        \"Failed to write the WLST properties to file\");\n+\n+    // changet the admin server port to a different value to force pod restart\n+    logger.info(\"Creating a new WebLogic user/password {0}/{1} in default security realm\",\n+        ADMIN_USERNAME_PATCH, ADMIN_PASSWORD_PATCH);\n+    Path configScript = Paths.get(RESOURCE_DIR, \"python-scripts\", \"introspect_version_script.py\");\n+    executeWLSTScript(configScript, wlstPropertiesFile.toPath(), introDomainNamespace);\n+\n+    // create a new secret for admin credentials\n+    logger.info(\"Create a new secret that contains new WebLogic admin credentials\");\n+    String newWlSecretName = \"weblogic-credentials-new\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        newWlSecretName,\n+        introDomainNamespace,\n+        ADMIN_USERNAME_PATCH,\n+        ADMIN_PASSWORD_PATCH),\n+        String.format(\"createSecret failed for %s\", newWlSecretName));\n+\n+    // delete the old secret\n+    logger.info(\"Deleting the old secret\");\n+    deleteSecret(wlSecretName, introDomainNamespace);\n+\n+    String introspectVersion = assertDoesNotThrow(() -> getNextIntrospectVersion(domainUid, introDomainNamespace));\n+    String oldVersion = assertDoesNotThrow(()\n+        -> getDomainCustomResource(domainUid, introDomainNamespace).getSpec().getRestartVersion());\n+    int newVersion = oldVersion == null ? 1 : Integer.valueOf(oldVersion) + 1;\n+\n+    logger.info(\"patch the domain resource with new WebLogic secret, restartVersion and introspectVersion\");\n+    String patchStr\n+        = \"[\"\n+        + \"{\\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/spec/webLogicCredentialsSecret/name\\\", \"\n+        + \"\\\"value\\\": \\\"\" + newWlSecretName + \"\\\"},\"\n+        + \"{\\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/spec/introspectVersion\\\", \"\n+        + \"\\\"value\\\": \\\"\" + introspectVersion + \"\\\"},\"\n+        + \"{\\\"op\\\": \\\"add\\\", \\\"path\\\": \\\"/spec/restartVersion\\\", \"\n+        + \"\\\"value\\\": \\\"\" + newVersion + \"\\\"}\"\n+        + \"]\";\n+    logger.info(\"Updating domain configuration using patch string: {0}\\n\", patchStr);\n+    V1Patch patch = new V1Patch(patchStr);\n+    assertTrue(patchDomainCustomResource(domainUid, introDomainNamespace, patch, V1Patch.PATCH_FORMAT_JSON_PATCH),\n+        \"Failed to patch domain\");\n+\n+    //verify the introspector pod is created and runs\n+    String introspectPodName = domainUid + \"-\" + \"introspect-domain-job\";\n+\n+    checkPodExists(introspectPodName, domainUid, introDomainNamespace);\n+    checkPodDoesNotExist(introspectPodName, domainUid, introDomainNamespace);\n+\n+    //verify the pods are restarted\n+    verifyRollingRestartOccurred(pods, 1, introDomainNamespace);\n+\n+    // verify the admin server service created\n+    checkServiceExists(adminServerPodName, introDomainNamespace);\n+\n+    // verify admin server pod is ready\n+    checkPodReady(adminServerPodName, domainUid, introDomainNamespace);\n+\n+    // verify new cluster managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Checking managed server service {0} is created in namespace {1}\",\n+          managedServerPodNamePrefix + i, introDomainNamespace);\n+      checkServiceExists(managedServerPodNamePrefix + i, introDomainNamespace);\n+    }\n+\n+    // verify new cluster managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Waiting for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPodNamePrefix + i, introDomainNamespace);\n+      checkPodReady(managedServerPodNamePrefix + i, domainUid, introDomainNamespace);\n+    }\n+\n+    logger.info(\"Getting the list of servers using the listServers\");\n+    String baseUri = \"http://\" + K8S_NODEPORT_HOST + \":\" + adminServerT3Port + \"/clusterview/\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66640b254e66995588ca34d57d3a9f9b3f5e6b65"}, "originalPosition": 193}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82e05c37010d23b50c50f7d2b0cd640dba458886", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/82e05c37010d23b50c50f7d2b0cd640dba458886", "committedDate": "2020-08-10T16:53:13Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into credential-change-pv-domain"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b23a82487fba6fa071cb524bfe05b4d2f9267a27", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b23a82487fba6fa071cb524bfe05b4d2f9267a27", "committedDate": "2020-08-10T17:19:02Z", "message": "Address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c59d1892d24c550237628d96d2be40cc1646c4ac", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c59d1892d24c550237628d96d2be40cc1646c4ac", "committedDate": "2020-08-10T17:25:16Z", "message": "use default channel port for accessing application"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5fe59ea8340c3c301b5a1a9371166e25d93aece", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b5fe59ea8340c3c301b5a1a9371166e25d93aece", "committedDate": "2020-08-10T21:33:05Z", "message": "Lookup domain runtime only if it is admin server"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NjA4NzI1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#pullrequestreview-464608725", "createdAt": "2020-08-10T21:43:18Z", "commit": {"oid": "b5fe59ea8340c3c301b5a1a9371166e25d93aece"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMTo0MzoxOFrOG-g1Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMTo0MzoxOFrOG-g1Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwMjc5NQ==", "bodyText": "are you forcing pod restart by changing the port here?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r468202795", "createdAt": "2020-08-10T21:43:18Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIntrospectVersion.java", "diffHunk": "@@ -731,6 +737,163 @@ public void testCreateNewCluster() {\n \n   }\n \n+  /**\n+   * Test changes the WebLogic credentials and verifies the servers can startup and function with changed credentials.\n+   * a. Creates new WebLogic credentials using WLST.\n+   * b. Creates new Kubernetes secret for WebLogic credentials.\n+   * c. Patch the Domain Resource with new credentials, restartVerion and introspectVersion.\n+   * d. Verifies the servers in the domain restarted and accessing the admin server console with new password works.\n+   * e. Verifies the the admin server console access with old credentials fail.\n+   */\n+  @Order(3)\n+  @Test\n+  @DisplayName(\"Test change WebLogic admin credentials for domain running in persistent volume\")\n+  public void testCredentialChange() {\n+\n+    final String domainUid = \"mydomain\";\n+\n+    final String adminServerName = \"admin-server\";\n+    final String adminServerPodName = domainUid + \"-\" + adminServerName;\n+\n+    final String managedServerNameBase = \"ms-\";\n+    String managedServerPodNamePrefix = domainUid + \"-\" + managedServerNameBase;\n+\n+    int replicaCount = 3;\n+\n+    logger.info(\"Getting node port for T3 channel\");\n+    int adminServerT3Port = getServiceNodePort(introDomainNamespace, adminServerPodName + \"-external\", \"t3channel\");\n+    assertNotEquals(-1, adminServerT3Port, \"Couldn't get valid port for T3 channel\");\n+\n+    // get the pod creation time stamps\n+    LinkedHashMap<String, DateTime> pods = new LinkedHashMap<>();\n+    // get the creation time of the admin server pod before patching\n+    DateTime adminPodCreationTime = getPodCreationTime(introDomainNamespace, adminServerPodName);\n+    pods.put(adminServerPodName, adminPodCreationTime);\n+    // get the creation time of the managed server pods before patching\n+    for (int i = 1; i <= replicaCount; i++) {\n+      pods.put(managedServerPodNamePrefix + i,\n+          getPodCreationTime(introDomainNamespace, managedServerPodNamePrefix + i));\n+    }\n+\n+    // create a temporary WebLogic WLST property file\n+    File wlstPropertiesFile = assertDoesNotThrow(() -> File.createTempFile(\"wlst\", \"properties\"),\n+        \"Creating WLST properties file failed\");\n+    Properties p = new Properties();\n+    p.setProperty(\"admin_host\", K8S_NODEPORT_HOST);\n+    p.setProperty(\"admin_port\", Integer.toString(adminServerT3Port));\n+    p.setProperty(\"admin_username\", ADMIN_USERNAME_DEFAULT);\n+    p.setProperty(\"admin_password\", ADMIN_PASSWORD_DEFAULT);\n+    p.setProperty(\"new_admin_user\", ADMIN_USERNAME_PATCH);\n+    p.setProperty(\"new_admin_password\", ADMIN_PASSWORD_PATCH);\n+    p.setProperty(\"test_name\", \"replace_admin_user\");\n+    assertDoesNotThrow(() -> p.store(new FileOutputStream(wlstPropertiesFile), \"wlst properties file\"),\n+        \"Failed to write the WLST properties to file\");\n+\n+    // change the admin server port to a different value to force pod restart", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5fe59ea8340c3c301b5a1a9371166e25d93aece"}, "originalPosition": 124}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NjE0MTcw", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#pullrequestreview-464614170", "createdAt": "2020-08-10T21:53:41Z", "commit": {"oid": "b5fe59ea8340c3c301b5a1a9371166e25d93aece"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMTo1Mzo0MVrOG-hG9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMTo1Mzo0MVrOG-hG9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwNzM0OQ==", "bodyText": "move the code up to maintain the order", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r468207349", "createdAt": "2020-08-10T21:53:41Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIntrospectVersion.java", "diffHunk": "@@ -731,6 +737,163 @@ public void testCreateNewCluster() {\n \n   }\n \n+  /**\n+   * Test changes the WebLogic credentials and verifies the servers can startup and function with changed credentials.\n+   * a. Creates new WebLogic credentials using WLST.\n+   * b. Creates new Kubernetes secret for WebLogic credentials.\n+   * c. Patch the Domain Resource with new credentials, restartVerion and introspectVersion.\n+   * d. Verifies the servers in the domain restarted and accessing the admin server console with new password works.\n+   * e. Verifies the the admin server console access with old credentials fail.\n+   */\n+  @Order(3)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5fe59ea8340c3c301b5a1a9371166e25d93aece"}, "originalPosition": 80}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcdb3980bdf8682e6ce2ebc912551ebfb2898641", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/dcdb3980bdf8682e6ce2ebc912551ebfb2898641", "committedDate": "2020-08-11T16:58:58Z", "message": "change max-message-size to a large value\nchange the t3channel port to some arbitrary number"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6e7ee30c39f3aff302aaab02c5acef00fe0995e", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a6e7ee30c39f3aff302aaab02c5acef00fe0995e", "committedDate": "2020-08-11T19:05:12Z", "message": "fix the max-message-size"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09174776681387330c32fe0de3f33402a323a146", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/09174776681387330c32fe0de3f33402a323a146", "committedDate": "2020-08-11T19:29:45Z", "message": "log response from managed servers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "916fe48f457da69c827a940bac61434ebe87c66f", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/916fe48f457da69c827a940bac61434ebe87c66f", "committedDate": "2020-08-11T19:31:00Z", "message": "increasing the max iterations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3af2393ea45daa10c639b78b169324a00fb7dd98", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3af2393ea45daa10c639b78b169324a00fb7dd98", "committedDate": "2020-08-11T19:39:20Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into credential-change-pv-domain"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf898be0a176f545c609f6c302f5028616b558f3", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/cf898be0a176f545c609f6c302f5028616b558f3", "committedDate": "2020-08-11T21:16:35Z", "message": "Fix the JAVA_OPTIONS"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cea198d231304aa74e5aa1ad3ee875f3a365a59e", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/cea198d231304aa74e5aa1ad3ee875f3a365a59e", "committedDate": "2020-08-11T23:26:51Z", "message": "Fix the java options"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07b8f89a8c4f28566b4c66f2b5d48e19aa500089", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/07b8f89a8c4f28566b4c66f2b5d48e19aa500089", "committedDate": "2020-08-12T02:11:14Z", "message": "Add debug flags to servers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d0f0f249e494bde9d65f77aa6fd146572c4e6be", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5d0f0f249e494bde9d65f77aa6fd146572c4e6be", "committedDate": "2020-08-12T03:08:12Z", "message": "remove the system property maxmessagesize"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c610280272e6697b6543d0235549d99cfce71357", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c610280272e6697b6543d0235549d99cfce71357", "committedDate": "2020-08-12T17:35:23Z", "message": "Change the implmentation of cluster communication check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73ed653fc0eee7194446c1517f57cde439f6f4c2", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/73ed653fc0eee7194446c1517f57cde439f6f4c2", "committedDate": "2020-08-12T19:35:05Z", "message": "fix iterations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9664357758828094fd2cffa9298dddde7d904ff6", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/9664357758828094fd2cffa9298dddde7d904ff6", "committedDate": "2020-08-13T01:44:02Z", "message": "Merge branch 'develop' into credential-change-pv-domain"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fa676dd8008e30d24aecf0d27342e9c77bae4f9", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/4fa676dd8008e30d24aecf0d27342e9c77bae4f9", "committedDate": "2020-08-13T15:42:00Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into credential-change-pv-domain"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6735f901219f7191d6a7ef11408da30d5f7276fa", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6735f901219f7191d6a7ef11408da30d5f7276fa", "committedDate": "2020-08-13T18:14:02Z", "message": "fix replicaCount"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9607e015d68354a65737c917d6fe411fcb6d47da", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/9607e015d68354a65737c917d6fe411fcb6d47da", "committedDate": "2020-08-13T18:18:40Z", "message": "Adding more debug messages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1188d28313db1a3e87dfcb6a9be89815d81da321", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/1188d28313db1a3e87dfcb6a9be89815d81da321", "committedDate": "2020-08-13T19:45:24Z", "message": "Fix server names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "832a5a8471ec2ec8ea01007291f3a88345a4ed9f", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/832a5a8471ec2ec8ea01007291f3a88345a4ed9f", "committedDate": "2020-08-13T20:48:27Z", "message": "Refactor the server health checks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e0479b801c3ee7710aecda9230951335df4460e", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7e0479b801c3ee7710aecda9230951335df4460e", "committedDate": "2020-08-13T20:54:14Z", "message": "fix comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f85973fde7a3ef821317bb9c6fb00fab1900fea0", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f85973fde7a3ef821317bb9c6fb00fab1900fea0", "committedDate": "2020-08-13T22:01:11Z", "message": "Fix the server count"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e23df101ba44bf37ae2bbfc1c80ea52b28d17a3", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3e23df101ba44bf37ae2bbfc1c80ea52b28d17a3", "committedDate": "2020-08-14T00:07:46Z", "message": "Enable cmo.setResolveDNSName(true) for custom nap"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09db971405341a004a8aa2bcf8988760319d493b", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/09db971405341a004a8aa2bcf8988760319d493b", "committedDate": "2020-08-14T00:37:35Z", "message": "log dns resolv.conf file as well"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8307f9c5e0c916c9e66f4117c65fd2cae1296bb3", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8307f9c5e0c916c9e66f4117c65fd2cae1296bb3", "committedDate": "2020-08-14T02:42:59Z", "message": "Add more debug flags"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b83d2cc43a073de42565b3c9297e18e12b73309", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/4b83d2cc43a073de42565b3c9297e18e12b73309", "committedDate": "2020-08-14T02:54:49Z", "message": "Add a random objects to JNDI tree"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7d0880932d67eb0003afe9f99c5a6b2a1cac1c2", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e7d0880932d67eb0003afe9f99c5a6b2a1cac1c2", "committedDate": "2020-08-14T05:24:05Z", "message": "Fix dns logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a19f6b7b8abe3b325c57b973c8e6e5ad59d128e", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5a19f6b7b8abe3b325c57b973c8e6e5ad59d128e", "committedDate": "2020-08-15T21:52:36Z", "message": "Use MBean server connection instead of heartbeats to detect server health"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a67bfce1664f94e062d154abeeedb4627fb4c40f", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a67bfce1664f94e062d154abeeedb4627fb4c40f", "committedDate": "2020-08-15T23:34:42Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into credential-change-pv-domain"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "140adf8e31072eb70cfeab6b92b165500f5c203c", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/140adf8e31072eb70cfeab6b92b165500f5c203c", "committedDate": "2020-08-15T23:43:29Z", "message": "Fix the curl request url"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ede28635873ea3c34c4d2b476dded496605f9d7c", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ede28635873ea3c34c4d2b476dded496605f9d7c", "committedDate": "2020-08-17T21:56:34Z", "message": "Refactored the server communication verification by MBeanServerConnection\nto the individual servers instead of relying on cluster heartbeats"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8f93c5d80a6700a547a913a6fbd655f9157cee2", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e8f93c5d80a6700a547a913a6fbd655f9157cee2", "committedDate": "2020-08-17T21:57:34Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into credential-change-pv-domain"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2cf0f227692e53f561cb2b03c19c5884c641a41", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b2cf0f227692e53f561cb2b03c19c5884c641a41", "committedDate": "2020-08-17T23:02:16Z", "message": "Fix the URL"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60a909a0e681b538ecf8c04ded4e0f49a185628e", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/60a909a0e681b538ecf8c04ded4e0f49a185628e", "committedDate": "2020-08-17T23:27:40Z", "message": "Remove DNS entries logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9f5c3a784b41a110290425f908f1397c56e27a3", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a9f5c3a784b41a110290425f908f1397c56e27a3", "committedDate": "2020-08-17T23:49:19Z", "message": "Fix url"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb922e899b725e176d16f31c1a55b2f8aae3fd1d", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/fb922e899b725e176d16f31c1a55b2f8aae3fd1d", "committedDate": "2020-08-18T00:06:18Z", "message": "Fix null urls"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "035bd5802513a8acf7e11b134a7f111c9863d563", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/035bd5802513a8acf7e11b134a7f111c9863d563", "committedDate": "2020-08-18T00:26:50Z", "message": "Fix url"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2784c88f05768d67b8c11d486640fceebffe825", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e2784c88f05768d67b8c11d486640fceebffe825", "committedDate": "2020-08-18T03:49:50Z", "message": "Fix comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "192d5d03d82988abb703edd073e7e3728d4d593e", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/192d5d03d82988abb703edd073e7e3728d4d593e", "committedDate": "2020-08-18T04:47:53Z", "message": "fix typo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5ODg4Mzg4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#pullrequestreview-469888388", "createdAt": "2020-08-18T23:06:40Z", "commit": {"oid": "192d5d03d82988abb703edd073e7e3728d4d593e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMzowNjo0MFrOHCppYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMzowNjo0MFrOHCppYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU0MTUzNg==", "bodyText": "do we need all of these debug flags?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r472541536", "createdAt": "2020-08-18T23:06:40Z", "author": {"login": "marinakog"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItConfigDistributionStrategy.java", "diffHunk": "@@ -856,10 +856,12 @@ private void createDomain() {\n             .serverPod(new ServerPod() //serverpod\n                 .addEnvItem(new V1EnvVar()\n                     .name(\"JAVA_OPTIONS\")\n-                    .value(\"-Dweblogic.debug.DebugSituationalConfig=true\"))\n-                .addEnvItem(new V1EnvVar()\n-                    .name(\"JAVA_OPTIONS\")\n-                    .value(\"-Dweblogic.debug.DebugSituationalConfigDumpXml=true\"))\n+                    .value(\"-Dweblogic.debug.DebugSituationalConfig=true \"\n+                        + \"-Dweblogic.debug.DebugSituationalConfigDumpXml=true \"\n+                        + \"-Dweblogic.kernel.debug=true \"\n+                        + \"-Dweblogic.debug.DebugMessaging=true \"\n+                        + \"-Dweblogic.debug.DebugConnection=true \"\n+                        + \"-Dweblogic.ResolveDNSName=true\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "192d5d03d82988abb703edd073e7e3728d4d593e"}, "originalPosition": 94}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbe0947d4912698c4672d0f8e802f2654817215d", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/cbe0947d4912698c4672d0f8e802f2654817215d", "committedDate": "2020-08-19T16:02:03Z", "message": "Undoing the changes for ItLoadbalancer.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0691f37926d1298f0660b2f4b2f6bf69c5014aca", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0691f37926d1298f0660b2f4b2f6bf69c5014aca", "committedDate": "2020-08-19T17:16:13Z", "message": "Checking if the server is running"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNTk3MzM1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#pullrequestreview-470597335", "createdAt": "2020-08-19T15:53:18Z", "commit": {"oid": "192d5d03d82988abb703edd073e7e3728d4d593e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTo1MzoxOFrOHDN1Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzoyNjoxMlrOHDR_vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEzNDQzNA==", "bodyText": "0 can be used to pick the free port at run time, this change can be made in next PR", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r473134434", "createdAt": "2020-08-19T15:53:18Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIntrospectVersion.java", "diffHunk": "@@ -162,8 +166,8 @@ public static void initAll(@Namespaces(3) List<String> namespaces) {\n     installAndVerifyOperator(opNamespace, introDomainNamespace);\n \n     // get a free node port for NGINX\n-    nodeportshttp = getNextFreePort(30305, 30405);\n-    int nodeportshttps = getNextFreePort(30443, 30543);\n+    nodeportshttp = getNextFreePort(30109, 30405);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "192d5d03d82988abb703edd073e7e3728d4d593e"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE1MTc4Ng==", "bodyText": "print ClusterViewServlet instead of ITTESTS in the entire class", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r473151786", "createdAt": "2020-08-19T16:19:52Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/resources/apps/clusterview/src/java/oracle/weblogic/kubernetes/applications/clusterview/ClusterViewServlet.java", "diffHunk": "@@ -58,42 +64,27 @@ public void init(ServletConfig config) throws ServletException {\n           .newProxyInstance(localMBeanServer, runtimeserviceObjectName);\n       serverRuntime = runtimeService.getServerRuntime();\n       System.out.println(\"ITTESTS:>>>>Found server runtime mbean server for server: \" + serverRuntime.getName());\n+    } catch (MalformedObjectNameException | NamingException ex) {\n+      System.out.println(\"ITTESTS:>>>>ClusterViewServlet.init() threw exception\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbe0947d4912698c4672d0f8e802f2654817215d"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE2MTgwNQ==", "bodyText": "log message 'Getting the list of servers using the listServers' needs to be modified. Also add more details in log and/or comment what is being checked when the call is made to the servlet here.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r473161805", "createdAt": "2020-08-19T16:29:00Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItConfigDistributionStrategy.java", "diffHunk": "@@ -256,7 +256,7 @@ public void afterEach() {\n \n     logger.info(\"Getting the list of servers using the listServers\");\n     String baseUri = \"http://\" + K8S_NODEPORT_HOST + \":\" + serviceNodePort + \"/clusterview/\";\n-    String serverListUri = \"ClusterViewServlet?listServers=true\";\n+    String serverListUri = \"ClusterViewServlet?user=\" + ADMIN_USERNAME_DEFAULT + \"&password=\" + ADMIN_PASSWORD_DEFAULT;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbe0947d4912698c4672d0f8e802f2654817215d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE5OTMzMg==", "bodyText": "call verifyMemberHealth method instead of iterating 5 times?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r473199332", "createdAt": "2020-08-19T17:20:20Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItConfigDistributionStrategy.java", "diffHunk": "@@ -256,7 +256,7 @@ public void afterEach() {\n \n     logger.info(\"Getting the list of servers using the listServers\");\n     String baseUri = \"http://\" + K8S_NODEPORT_HOST + \":\" + serviceNodePort + \"/clusterview/\";\n-    String serverListUri = \"ClusterViewServlet?listServers=true\";\n+    String serverListUri = \"ClusterViewServlet?user=\" + ADMIN_USERNAME_DEFAULT + \"&password=\" + ADMIN_PASSWORD_DEFAULT;\n     for (int i = 0; i < 5; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0691f37926d1298f0660b2f4b2f6bf69c5014aca"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwMjYyMA==", "bodyText": "how about calling verifyMemberHealth before making any config changes are made to make sure the cluster health is good, servers can communicate with each other? This comment applies to initAll method at the end, but I can't add it there, so posting here.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#discussion_r473202620", "createdAt": "2020-08-19T17:26:12Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIntrospectVersion.java", "diffHunk": "@@ -594,40 +584,171 @@ public void testDomainIntrospectVersionRolling() {\n         \"Getting admin server port failed\"),\n         \"Updated admin server port is not equal to expected value\");\n \n-    logger.info(\"Getting node port for default channel\");\n-    int adminServerNodePort = assertDoesNotThrow(()\n-        -> getServiceNodePort(introDomainNamespace, adminServerPodName + \"-external\", \"default\"),\n-        \"Getting admin server node port failed\");\n-\n-    //access application from admin server to validate the new port\n-    String url = \"http://\" + K8S_NODEPORT_HOST + \":\" + adminServerNodePort + \"/testwebapp/index.jsp\";\n-    assertEquals(200,\n-        assertDoesNotThrow(() -> OracleHttpClient.get(url, true),\n-            \"Accessing sample application on admin server failed\")\n-            .statusCode(), \"Status code not equals to 200\");\n-\n-    logger.info(\"Getting the list of servers using the listServers\");\n-    String baseUri = \"http://\" + K8S_NODEPORT_HOST + \":\" + adminServerNodePort + \"/clusterview/\";\n-    String serverListUri = \"ClusterViewServlet?listServers=true\";\n-    for (int i = 0; i < 5; i++) {\n-      assertDoesNotThrow(() -> TimeUnit.SECONDS.sleep(30));\n-      HttpResponse<String> response = assertDoesNotThrow(() -> OracleHttpClient.get(baseUri + serverListUri, true));\n-      assertEquals(200, response.statusCode(), \"Status code not equals to 200\");\n+    List<String> managedServerNames = new ArrayList<String>();\n+    for (int i = 1; i <= replicaCount; i++) {\n+      managedServerNames.add(managedServerNameBase + i);\n     }\n \n+    //verify admin server accessibility and the health of cluster members\n+    verifyMemberHealth(adminServerPodName, managedServerNames, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n+\n     //access application in managed servers through NGINX load balancer\n     logger.info(\"Accessing the clusterview app through NGINX load balancer\");\n     String curlRequest = String.format(\"curl --silent --show-error --noproxy '*' \"\n-            + \"-H 'host: %s' http://%s:%s/clusterview/ClusterViewServlet\",\n+        + \"-H 'host: %s' http://%s:%s/clusterview/ClusterViewServlet\"\n+        + \"\\\"?user=\" + ADMIN_USERNAME_DEFAULT\n+        + \"&password=\" + ADMIN_PASSWORD_DEFAULT + \"\\\"\",\n         domainUid + \".\" + introDomainNamespace + \".\" + clusterName + \".test\", K8S_NODEPORT_HOST, nodeportshttp);\n-    List<String> managedServers = new ArrayList<>();\n+\n+    // verify each managed server can see other member in the cluster\n+    verifyServerCommunication(curlRequest, managedServerNames);\n+  }\n+\n+  /**\n+   * Test changes the WebLogic credentials and verifies the servers can startup and function with changed credentials.\n+   * a. Creates new WebLogic credentials using WLST.\n+   * b. Creates new Kubernetes secret for WebLogic credentials.\n+   * c. Patch the Domain Resource with new credentials, restartVerion and introspectVersion.\n+   * d. Verifies the servers in the domain restarted and accessing the admin server console with new password works.\n+   * e. Verifies the the admin server console access with old credentials fail.\n+   */\n+  @Order(3)\n+  @Test\n+  @DisplayName(\"Test change WebLogic admin credentials for domain running in persistent volume\")\n+  public void testCredentialChange() {\n+\n+    final String domainUid = \"mydomain\";\n+\n+    final String adminServerName = \"admin-server\";\n+    final String adminServerPodName = domainUid + \"-\" + adminServerName;\n+\n+    final String managedServerNameBase = \"ms-\";\n+    String managedServerPodNamePrefix = domainUid + \"-\" + managedServerNameBase;\n+\n+    int replicaCount = 3;\n+\n+    logger.info(\"Getting node port for T3 channel\");\n+    int adminServerT3Port = getServiceNodePort(introDomainNamespace, adminServerPodName + \"-external\", \"t3channel\");\n+    assertNotEquals(-1, adminServerT3Port, \"Couldn't get valid port for T3 channel\");\n+\n+    // get the pod creation time stamps\n+    LinkedHashMap<String, DateTime> pods = new LinkedHashMap<>();\n+    // get the creation time of the admin server pod before patching\n+    DateTime adminPodCreationTime = getPodCreationTime(introDomainNamespace, adminServerPodName);\n+    pods.put(adminServerPodName, adminPodCreationTime);\n+    // get the creation time of the managed server pods before patching\n     for (int i = 1; i <= replicaCount; i++) {\n-      managedServers.add(managedServerNameBase + i);\n+      pods.put(managedServerPodNamePrefix + i,\n+          getPodCreationTime(introDomainNamespace, managedServerPodNamePrefix + i));\n     }\n-    assertThat(verifyClusterMemberCommunication(curlRequest, managedServers, 20))\n-        .as(\"Verify all managed servers can see each other\")\n-        .withFailMessage(\"managed servers cannot see other\")\n-        .isTrue();\n+\n+    // create a temporary WebLogic WLST property file\n+    File wlstPropertiesFile = assertDoesNotThrow(() -> File.createTempFile(\"wlst\", \"properties\"),\n+        \"Creating WLST properties file failed\");\n+    Properties p = new Properties();\n+    p.setProperty(\"admin_host\", K8S_NODEPORT_HOST);\n+    p.setProperty(\"admin_port\", Integer.toString(adminServerT3Port));\n+    p.setProperty(\"admin_username\", ADMIN_USERNAME_DEFAULT);\n+    p.setProperty(\"admin_password\", ADMIN_PASSWORD_DEFAULT);\n+    p.setProperty(\"new_admin_user\", ADMIN_USERNAME_PATCH);\n+    p.setProperty(\"new_admin_password\", ADMIN_PASSWORD_PATCH);\n+    p.setProperty(\"test_name\", \"replace_admin_user\");\n+    assertDoesNotThrow(() -> p.store(new FileOutputStream(wlstPropertiesFile), \"wlst properties file\"),\n+        \"Failed to write the WLST properties to file\");\n+\n+    // change the admin server port to a different value to force pod restart\n+    logger.info(\"Creating a new WebLogic user/password {0}/{1} in default security realm\",\n+        ADMIN_USERNAME_PATCH, ADMIN_PASSWORD_PATCH);\n+    Path configScript = Paths.get(RESOURCE_DIR, \"python-scripts\", \"introspect_version_script.py\");\n+    executeWLSTScript(configScript, wlstPropertiesFile.toPath(), introDomainNamespace);\n+\n+    // create a new secret for admin credentials\n+    logger.info(\"Create a new secret that contains new WebLogic admin credentials\");\n+    String newWlSecretName = \"weblogic-credentials-new\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(\n+        newWlSecretName,\n+        introDomainNamespace,\n+        ADMIN_USERNAME_PATCH,\n+        ADMIN_PASSWORD_PATCH),\n+        String.format(\"createSecret failed for %s\", newWlSecretName));\n+\n+    // delete the old secret\n+    logger.info(\"Deleting the old secret\");\n+    deleteSecret(wlSecretName, introDomainNamespace);\n+\n+    String introspectVersion = assertDoesNotThrow(() -> getNextIntrospectVersion(domainUid, introDomainNamespace));\n+    String oldVersion = assertDoesNotThrow(()\n+        -> getDomainCustomResource(domainUid, introDomainNamespace).getSpec().getRestartVersion());\n+    int newVersion = oldVersion == null ? 1 : Integer.valueOf(oldVersion) + 1;\n+\n+    logger.info(\"patch the domain resource with new WebLogic secret, restartVersion and introspectVersion\");\n+    String patchStr\n+        = \"[\"\n+        + \"{\\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/spec/webLogicCredentialsSecret/name\\\", \"\n+        + \"\\\"value\\\": \\\"\" + newWlSecretName + \"\\\"},\"\n+        + \"{\\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/spec/introspectVersion\\\", \"\n+        + \"\\\"value\\\": \\\"\" + introspectVersion + \"\\\"},\"\n+        + \"{\\\"op\\\": \\\"add\\\", \\\"path\\\": \\\"/spec/restartVersion\\\", \"\n+        + \"\\\"value\\\": \\\"\" + newVersion + \"\\\"}\"\n+        + \"]\";\n+    logger.info(\"Updating domain configuration using patch string: {0}\\n\", patchStr);\n+    V1Patch patch = new V1Patch(patchStr);\n+    assertTrue(patchDomainCustomResource(domainUid, introDomainNamespace, patch, V1Patch.PATCH_FORMAT_JSON_PATCH),\n+        \"Failed to patch domain\");\n+\n+    //verify the introspector pod is created and runs\n+    String introspectPodName = domainUid + \"-\" + \"introspect-domain-job\";\n+\n+    checkPodExists(introspectPodName, domainUid, introDomainNamespace);\n+    checkPodDoesNotExist(introspectPodName, domainUid, introDomainNamespace);\n+\n+    //verify the pods are restarted\n+    verifyRollingRestartOccurred(pods, 1, introDomainNamespace);\n+\n+    // verify the admin server service created\n+    checkServiceExists(adminServerPodName, introDomainNamespace);\n+\n+    // verify admin server pod is ready\n+    checkPodReady(adminServerPodName, domainUid, introDomainNamespace);\n+\n+    // verify new cluster managed server services created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Checking managed server service {0} is created in namespace {1}\",\n+          managedServerPodNamePrefix + i, introDomainNamespace);\n+      checkServiceExists(managedServerPodNamePrefix + i, introDomainNamespace);\n+    }\n+\n+    // verify new cluster managed server pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Waiting for managed server pod {0} to be ready in namespace {1}\",\n+          managedServerPodNamePrefix + i, introDomainNamespace);\n+      checkPodReady(managedServerPodNamePrefix + i, domainUid, introDomainNamespace);\n+    }\n+\n+    logger.info(\"Getting node port for default channel\");\n+    int serviceNodePort = assertDoesNotThrow(() -> getServiceNodePort(\n+        introDomainNamespace, adminServerPodName + \"-external\", \"default\"),\n+        \"Getting admin server node port failed\");\n+    assertNotEquals(-1, serviceNodePort, \"Couldn't get valid node port for default channel\");\n+\n+    logger.info(\"Validating WebLogic admin server access by login to console\");\n+    boolean loginSuccessful = assertDoesNotThrow(()\n+        -> adminNodePortAccessible(serviceNodePort, ADMIN_USERNAME_PATCH, ADMIN_PASSWORD_PATCH),\n+        \"Access to admin server node port failed\");\n+    assertTrue(loginSuccessful, \"Console login validation failed\");\n+\n+    logger.info(\"Validating WebLogic admin server access by login to console using old credentials\");\n+    assertThrows(AssertionFailedError.class, ()\n+        -> adminNodePortAccessible(serviceNodePort, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT),\n+        \"Accessing using old user/password succeeded, supposed to fail\");\n+\n+    List<String> managedServerNames = new ArrayList<String>();\n+    for (int i = 1; i <= replicaCount; i++) {\n+      managedServerNames.add(managedServerNameBase + i);\n+    }\n+\n+    //verify admin server accessibility and the health of cluster members\n+    verifyMemberHealth(adminServerPodName, managedServerNames, ADMIN_USERNAME_PATCH, ADMIN_PASSWORD_PATCH);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0691f37926d1298f0660b2f4b2f6bf69c5014aca"}, "originalPosition": 379}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47b3ebe41b9825a972e0fbaf1a938d957f803d0b", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/47b3ebe41b9825a972e0fbaf1a938d957f803d0b", "committedDate": "2020-08-19T17:31:12Z", "message": "Deleted ItLoadbalancer.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d6c2199bce7bfc5d8290e1b09716a808221fe8f", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/2d6c2199bce7bfc5d8290e1b09716a808221fe8f", "committedDate": "2020-08-19T18:53:22Z", "message": "Fix comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7d576f76d754281bb19a147d3c386ad097e4bc6", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c7d576f76d754281bb19a147d3c386ad097e4bc6", "committedDate": "2020-08-19T21:35:10Z", "message": "Deploy application before accessing it"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMDA0OTk5", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#pullrequestreview-471004999", "createdAt": "2020-08-19T22:21:12Z", "commit": {"oid": "c7d576f76d754281bb19a147d3c386ad097e4bc6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMDMyMTQz", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#pullrequestreview-471032143", "createdAt": "2020-08-19T23:32:08Z", "commit": {"oid": "c7d576f76d754281bb19a147d3c386ad097e4bc6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNzM0OTY5", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1853#pullrequestreview-471734969", "createdAt": "2020-08-20T15:29:34Z", "commit": {"oid": "c7d576f76d754281bb19a147d3c386ad097e4bc6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2128c735f417c60525284ed9e47cf7f9e491520", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e2128c735f417c60525284ed9e47cf7f9e491520", "committedDate": "2020-08-20T16:10:19Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into credential-change-pv-domain"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4355, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}