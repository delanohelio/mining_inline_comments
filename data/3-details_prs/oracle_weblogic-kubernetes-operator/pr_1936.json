{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwOTc4NTIw", "number": 1936, "title": "Model and application archives In persistent persistent volume", "bodyText": "Add tests to create domain from modelHome property and model file, application archives stored in persistent volume.\nJenkins Results\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/2044/", "createdAt": "2020-09-22T14:23:58Z", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1936", "merged": true, "mergeCommit": {"oid": "04b1b4be5f466969a5998788766081697f26acd4"}, "closed": true, "closedAt": "2020-09-23T19:45:38Z", "author": {"login": "sankarpn"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdKLvhAAH2gAyNDkwOTc4NTIwOjIyZWQxNGU4Y2JiYTA3NjUzNDI3ZDA4YTQwZWNhM2ZmNTcxMGJjNjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLuDkaAFqTQ5NDc2NjQwMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "22ed14e8cbba07653427d08a40eca3ff5710bc66", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/22ed14e8cbba07653427d08a40eca3ff5710bc66", "committedDate": "2020-09-18T20:37:20Z", "message": "Adding tests for model in pv for MII domain"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d2547ce0a676acf646fc3410beaf27eac726c72", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8d2547ce0a676acf646fc3410beaf27eac726c72", "committedDate": "2020-09-21T18:10:19Z", "message": "add docker login"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca806ca7198c567f35b8d1e14a0d4164f8c0b16f", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ca806ca7198c567f35b8d1e14a0d4164f8c0b16f", "committedDate": "2020-09-21T18:27:54Z", "message": "use oracle image instead of wls image"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56fdbb14fa8d10a12d0b6e9287595774c2c6c0ba", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/56fdbb14fa8d10a12d0b6e9287595774c2c6c0ba", "committedDate": "2020-09-21T18:31:24Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "514b52c81ccb108c381c870e3899b309f54c8f4d", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/514b52c81ccb108c381c870e3899b309f54c8f4d", "committedDate": "2020-09-21T18:40:20Z", "message": "fix wdt model file location"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "553a38efb329512c3bf2faa9ff02889a8d1fe26d", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/553a38efb329512c3bf2faa9ff02889a8d1fe26d", "committedDate": "2020-09-21T19:00:06Z", "message": "fix the model home to point to a directory rather than a file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17b9e0a27aa607ffa99436e461fa2c70394fdd58", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/17b9e0a27aa607ffa99436e461fa2c70394fdd58", "committedDate": "2020-09-21T20:26:07Z", "message": "add a application archive"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da3c436ab7e505f7a2072e2181eea2d166d289fd", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/da3c436ab7e505f7a2072e2181eea2d166d289fd", "committedDate": "2020-09-21T20:34:09Z", "message": "fix model file name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86cfd595b5ed0b908227e12893d59b9e530505bd", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/86cfd595b5ed0b908227e12893d59b9e530505bd", "committedDate": "2020-09-21T20:35:58Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22f8e777ef1c3742f034fee534c373a4c366bb60", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/22f8e777ef1c3742f034fee534c373a4c366bb60", "committedDate": "2020-09-21T20:53:32Z", "message": "create different directories for application and model file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d631fd7e84a78a98c0321ce70d6e6c74b82a4882", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d631fd7e84a78a98c0321ce70d6e6c74b82a4882", "committedDate": "2020-09-21T21:04:18Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a9a02dbcb6eb245b04121dcdcccfcce24043f92", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6a9a02dbcb6eb245b04121dcdcccfcce24043f92", "committedDate": "2020-09-21T21:43:29Z", "message": "verify servers health"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b209cb72b8160b2820654c76cc1442c4cda214cf", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b209cb72b8160b2820654c76cc1442c4cda214cf", "committedDate": "2020-09-21T21:49:23Z", "message": "fix checkstyle violations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b59e708b26ae99d836803993a6f436f0645bbce2", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b59e708b26ae99d836803993a6f436f0645bbce2", "committedDate": "2020-09-21T22:07:42Z", "message": "add admin-server in app target"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2e1ffb3cdc943fa496b9f39ed99737650481d8e", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b2e1ffb3cdc943fa496b9f39ed99737650481d8e", "committedDate": "2020-09-21T22:24:49Z", "message": "fix user names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c6e7bd9654150ed413e4d42051e8dd3977854fb", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/9c6e7bd9654150ed413e4d42051e8dd3977854fb", "committedDate": "2020-09-22T14:16:15Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into modelinpv"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f58f440b5b4cbce8c668b953f5bddd6c57127742", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f58f440b5b4cbce8c668b953f5bddd6c57127742", "committedDate": "2020-09-22T15:18:08Z", "message": "Merge branch 'develop' into modelinpv"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c56a97d562178d9b2546ad0bc86bb527b9f1a20", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/1c56a97d562178d9b2546ad0bc86bb527b9f1a20", "committedDate": "2020-09-22T15:25:03Z", "message": "moved the tests to integration-tests directory"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzNzA0NDc4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1936#pullrequestreview-493704478", "createdAt": "2020-09-22T17:46:21Z", "commit": {"oid": "1c56a97d562178d9b2546ad0bc86bb527b9f1a20"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNzo0NjoyMlrOHWFk8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNzo1OTo0NVrOHWGEiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkyMjA5Ng==", "bodyText": "Re-phrase the sentence\nCopy the model file and application files to PV", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1936#discussion_r492922096", "createdAt": "2020-09-22T17:46:22Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -0,0 +1,447 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.IOException;\n+import java.net.http.HttpResponse;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1PersistentVolumeClaimVolumeSource;\n+import io.kubernetes.client.openapi.models.V1Pod;\n+import io.kubernetes.client.openapi.models.V1PodSpec;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1Volume;\n+import io.kubernetes.client.openapi.models.V1VolumeMount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.Exec;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.OracleHttpClient;\n+import oracle.weblogic.kubernetes.utils.TestUtils;\n+import org.awaitility.core.ConditionFactory;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_DUMMY_VALUE;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_PASSWORD;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_REGISTRY;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_USERNAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WDT_VERSION;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WIT_BUILD_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createImage;\n+import static oracle.weblogic.kubernetes.actions.TestActions.defaultWitParams;\n+import static oracle.weblogic.kubernetes.actions.TestActions.dockerLogin;\n+import static oracle.weblogic.kubernetes.actions.TestActions.dockerPush;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podReady;\n+import static oracle.weblogic.kubernetes.utils.BuildApplication.buildApplication;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createPV;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createPVC;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.checkDirectory;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This tests in this class verify creating a domain from model and application archive files stored in the persistent\n+ * volume.\n+ */\n+@DisplayName(\"Verify MII domain can be created from model file in PV location\")\n+@IntegrationTest\n+public class ItMiiDomainModelInPV {\n+\n+  private static String domainNamespace = null;\n+\n+  // domain constants\n+  private static String domainUid = \"domain1\";\n+  private static String adminServerName = \"admin-server\";\n+  private static String clusterName = \"cluster-1\";\n+  private static int replicaCount = 2;\n+  private static String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private static String managedServerPodNamePrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private static String miiImage;\n+  private static String miiImageTag;\n+  private static String adminSecretName;\n+  private static String encryptionSecretName;\n+\n+  private static String pvName = domainUid + \"-pv\"; // name of the persistent volume\n+  private static String pvcName = domainUid + \"-pvc\"; // name of the persistent volume claim\n+\n+  private static Path clusterViewAppPath;\n+  private static String modelFile = \"modelinpv-with-war.yaml\";\n+\n+  // create standard, reusable retry/backoff policy\n+  private static final ConditionFactory withStandardRetryPolicy\n+      = with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(15, MINUTES).await();\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * 1. Get namespaces for operator and WebLogic domain.\n+   * 2. Create operator.\n+   * 3. Build a MII with no domain and push it\n+   * to repository.\n+   * 4. Create WebLogic credential and model encryption secrets\n+   * 5. Create PV and PVC to store model and\n+   * application files.\n+   * 6. Copy the files to model and application files to PV.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c56a97d562178d9b2546ad0bc86bb527b9f1a20"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkyNTY1Ng==", "bodyText": "Re-phrase\nsetup a temporary pod to access PV location to store model and application files", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1936#discussion_r492925656", "createdAt": "2020-09-22T17:52:20Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -0,0 +1,447 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.IOException;\n+import java.net.http.HttpResponse;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1PersistentVolumeClaimVolumeSource;\n+import io.kubernetes.client.openapi.models.V1Pod;\n+import io.kubernetes.client.openapi.models.V1PodSpec;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1Volume;\n+import io.kubernetes.client.openapi.models.V1VolumeMount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.Exec;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.OracleHttpClient;\n+import oracle.weblogic.kubernetes.utils.TestUtils;\n+import org.awaitility.core.ConditionFactory;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_DUMMY_VALUE;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_PASSWORD;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_REGISTRY;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_USERNAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WDT_VERSION;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WIT_BUILD_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createImage;\n+import static oracle.weblogic.kubernetes.actions.TestActions.defaultWitParams;\n+import static oracle.weblogic.kubernetes.actions.TestActions.dockerLogin;\n+import static oracle.weblogic.kubernetes.actions.TestActions.dockerPush;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podReady;\n+import static oracle.weblogic.kubernetes.utils.BuildApplication.buildApplication;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createPV;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createPVC;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.checkDirectory;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This tests in this class verify creating a domain from model and application archive files stored in the persistent\n+ * volume.\n+ */\n+@DisplayName(\"Verify MII domain can be created from model file in PV location\")\n+@IntegrationTest\n+public class ItMiiDomainModelInPV {\n+\n+  private static String domainNamespace = null;\n+\n+  // domain constants\n+  private static String domainUid = \"domain1\";\n+  private static String adminServerName = \"admin-server\";\n+  private static String clusterName = \"cluster-1\";\n+  private static int replicaCount = 2;\n+  private static String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private static String managedServerPodNamePrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private static String miiImage;\n+  private static String miiImageTag;\n+  private static String adminSecretName;\n+  private static String encryptionSecretName;\n+\n+  private static String pvName = domainUid + \"-pv\"; // name of the persistent volume\n+  private static String pvcName = domainUid + \"-pvc\"; // name of the persistent volume claim\n+\n+  private static Path clusterViewAppPath;\n+  private static String modelFile = \"modelinpv-with-war.yaml\";\n+\n+  // create standard, reusable retry/backoff policy\n+  private static final ConditionFactory withStandardRetryPolicy\n+      = with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(15, MINUTES).await();\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * 1. Get namespaces for operator and WebLogic domain.\n+   * 2. Create operator.\n+   * 3. Build a MII with no domain and push it\n+   * to repository.\n+   * 4. Create WebLogic credential and model encryption secrets\n+   * 5. Create PV and PVC to store model and\n+   * application files.\n+   * 6. Copy the files to model and application files to PV.\n+   *\n+   * @param namespaces list of namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    String opNamespace = namespaces.get(0);\n+\n+    // get a unique domain namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    miiImageTag = TestUtils.getDateAndTimeStamp();\n+    miiImage = MII_BASIC_IMAGE_NAME + \":\" + miiImageTag;\n+\n+    // build a new MII image with no domain\n+    buildMIIandPushToRepo();\n+\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    createDockerRegistrySecret(domainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+    adminSecretName = \"weblogic-credentials\";\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create model encryption secret\n+    logger.info(\"Creating encryption secret\");\n+    encryptionSecretName = \"encryptionsecret\";\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+\n+    // create the PV and PVC to store application and model files\n+    createPV(pvName, domainUid, \"ItMiiDomainModelInPV\");\n+    createPVC(pvName, pvcName, domainUid, domainNamespace);\n+\n+    // build the clusterview application\n+    Path distDir = buildApplication(Paths.get(APP_DIR, \"clusterview\"),\n+        null, null, \"dist\", domainNamespace);\n+    clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n+    assertTrue(clusterViewAppPath.toFile().exists(), \"Application archive is not available\");\n+\n+    V1Pod webLogicPod = setupPVPod(domainNamespace);\n+\n+    try {\n+      logger.info(\"Creating directory {0} in PV\", \"/shared/applications\");\n+      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/applications\");\n+    } catch (IOException | ApiException | InterruptedException ex) {\n+      logger.warning(ex.getMessage());\n+    }\n+    try {\n+      logger.info(\"Creating directory {0} in PV\", \"/shared/model\");\n+      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/model\");\n+    } catch (IOException | ApiException | InterruptedException ex) {\n+      logger.warning(ex.getMessage());\n+    }\n+\n+    try {\n+      //copy the model file to PV using the temp pod - we don't have access to PVROOT in Jenkins env\n+      logger.info(\"Copying model file {0} to pv directory {1}\",\n+          Paths.get(MODEL_DIR, modelFile).toString(), \"/shared/model\");\n+      Kubernetes.copyFileToPod(domainNamespace, webLogicPod.getMetadata().getName(), null,\n+          Paths.get(MODEL_DIR, modelFile), Paths.get(\"shared\", \"model\", modelFile));\n+    } catch (IOException | ApiException ex) {\n+      logger.warning(ex.getMessage());\n+    }\n+    try {\n+      logger.info(\"Copying application file {0} to pv directory {1}\",\n+          clusterViewAppPath.toString(), \"/shared/applications\");\n+      Kubernetes.copyFileToPod(domainNamespace, webLogicPod.getMetadata().getName(), null,\n+          clusterViewAppPath, Paths.get(\"shared\", \"applications\", \"clusterview.war\"));\n+    } catch (IOException | ApiException ex) {\n+      logger.warning(ex.getMessage());\n+    }\n+\n+  }\n+\n+  /**\n+   * Test domain creation from model file stored in PV.\n+   * 1. Create the domain custom resource using mii with no domain and specifying a PV location for modelHome\n+   * 2. Verify the domain creation is successful and application is accessible.\n+   */\n+  @Test\n+  @DisplayName(\"Create MII domain with model and application file from PV\")\n+  public void testCreateDomainWithModelInPV() {\n+\n+    // create domain custom resource and verify all the pods came up\n+    Domain domain = buildDomainResource();\n+    createVerifyDomain(domain);\n+\n+    List<String> managedServerNames = new ArrayList<String>();\n+    for (int i = 1; i <= replicaCount; i++) {\n+      managedServerNames.add(MANAGED_SERVER_NAME_BASE + i);\n+    }\n+\n+    //verify admin server accessibility and the health of cluster members\n+    verifyMemberHealth(adminServerPodName, managedServerNames, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n+\n+  }\n+\n+  // create custom domain resource with model file in modelHome\n+  private Domain buildDomainResource() {\n+    logger.info(\"Creating domain custom resource\");\n+    Domain domain = new Domain()\n+        .apiVersion(DOMAIN_API_VERSION)\n+        .kind(\"Domain\")\n+        .metadata(new V1ObjectMeta()\n+            .name(domainUid)\n+            .namespace(domainNamespace))\n+        .spec(new DomainSpec()\n+            .domainUid(domainUid)\n+            .domainHomeSourceType(\"FromModel\")\n+            .image(miiImage)\n+            .addImagePullSecretsItem(new V1LocalObjectReference()\n+                .name(REPO_SECRET_NAME))\n+            .webLogicCredentialsSecret(new V1SecretReference()\n+                .name(adminSecretName)\n+                .namespace(domainNamespace))\n+            .includeServerOutInPodLog(true)\n+            .serverStartPolicy(\"IF_NEEDED\")\n+            .serverPod(new ServerPod()\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"JAVA_OPTIONS\")\n+                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"USER_MEM_ARGS\")\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \"))\n+                .addVolumesItem(new V1Volume()\n+                    .name(pvName)\n+                    .persistentVolumeClaim(new V1PersistentVolumeClaimVolumeSource()\n+                        .claimName(pvcName)))\n+                .addVolumeMountsItem(new V1VolumeMount()\n+                    .mountPath(\"/shared\")\n+                    .name(pvName)))\n+            .adminServer(new AdminServer()\n+                .serverStartState(\"RUNNING\")\n+                .adminService(new AdminService()\n+                    .addChannelsItem(new Channel()\n+                        .channelName(\"default\")\n+                        .nodePort(0))))\n+            .addClustersItem(new Cluster()\n+                .clusterName(clusterName)\n+                .replicas(replicaCount)\n+                .serverStartState(\"RUNNING\"))\n+            .configuration(new Configuration()\n+                .model(new Model()\n+                    .withModelHome(\"/shared/model\")\n+                    .domainType(WLS_DOMAIN_TYPE)\n+                    .runtimeEncryptionSecret(encryptionSecretName))));\n+    return domain;\n+  }\n+\n+  // create domain resource and verify all the server pods are ready\n+  private void createVerifyDomain(Domain domain) {\n+    // create model in image domain\n+    logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+        domainUid, domainNamespace, miiImage);\n+    createDomainAndVerify(domain, domainNamespace);\n+\n+    // check that admin service/pod exists in the domain namespace\n+    logger.info(\"Checking that admin service/pod {0} exists in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReadyAndServiceExists(adminServerPodName, domainUid, domainNamespace);\n+\n+    for (int i = 1; i <= replicaCount; i++) {\n+      String managedServerPodName = managedServerPodNamePrefix + i;\n+\n+      // check that ms service/pod exists in the domain namespace\n+      logger.info(\"Checking that clustered ms service/pod {0} exists in namespace {1}\",\n+          managedServerPodName, domainNamespace);\n+      checkPodReadyAndServiceExists(managedServerPodName, domainUid, domainNamespace);\n+    }\n+\n+  }\n+\n+  private static void verifyMemberHealth(String adminServerPodName, List<String> managedServerNames,\n+      String user, String password) {\n+\n+    logger.info(\"Getting node port for default channel\");\n+    int serviceNodePort = assertDoesNotThrow(()\n+        -> getServiceNodePort(domainNamespace, adminServerPodName + \"-external\", \"default\"),\n+        \"Getting admin server node port failed\");\n+\n+    logger.info(\"Checking the health of servers in cluster\");\n+    String url = \"http://\" + K8S_NODEPORT_HOST + \":\" + serviceNodePort\n+        + \"/clusterview/ClusterViewServlet?user=\" + user + \"&password=\" + password;\n+\n+    withStandardRetryPolicy.conditionEvaluationListener(\n+        condition -> logger.info(\"Verifying the health of all cluster members\"\n+            + \"(elapsed time {0} ms, remaining time {1} ms)\",\n+            condition.getElapsedTimeInMS(),\n+            condition.getRemainingTimeInMS()))\n+        .until((Callable<Boolean>) () -> {\n+          HttpResponse<String> response = assertDoesNotThrow(() -> OracleHttpClient.get(url, true));\n+          assertEquals(200, response.statusCode(), \"Status code not equals to 200\");\n+          boolean health = true;\n+          for (String managedServer : managedServerNames) {\n+            health = health && response.body().contains(managedServer + \":HEALTH_OK\");\n+            if (health) {\n+              logger.info(managedServer + \" is healthy\");\n+            } else {\n+              logger.info(managedServer + \" health is not OK or server not found\");\n+            }\n+          }\n+          return health;\n+        });\n+  }\n+\n+  // setup a temporary to access PV location to store model and application files", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c56a97d562178d9b2546ad0bc86bb527b9f1a20"}, "originalPosition": 355}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkyOTM3MA==", "bodyText": "re-phrase  This tests in this class --> This test class\nCan you add a reference to Public Doc", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1936#discussion_r492929370", "createdAt": "2020-09-22T17:58:27Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -0,0 +1,447 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.IOException;\n+import java.net.http.HttpResponse;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1PersistentVolumeClaimVolumeSource;\n+import io.kubernetes.client.openapi.models.V1Pod;\n+import io.kubernetes.client.openapi.models.V1PodSpec;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1Volume;\n+import io.kubernetes.client.openapi.models.V1VolumeMount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.Exec;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.OracleHttpClient;\n+import oracle.weblogic.kubernetes.utils.TestUtils;\n+import org.awaitility.core.ConditionFactory;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_DUMMY_VALUE;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_PASSWORD;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_REGISTRY;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_USERNAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WDT_VERSION;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WIT_BUILD_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createImage;\n+import static oracle.weblogic.kubernetes.actions.TestActions.defaultWitParams;\n+import static oracle.weblogic.kubernetes.actions.TestActions.dockerLogin;\n+import static oracle.weblogic.kubernetes.actions.TestActions.dockerPush;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podReady;\n+import static oracle.weblogic.kubernetes.utils.BuildApplication.buildApplication;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createPV;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createPVC;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.checkDirectory;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This tests in this class verify creating a domain from model and application archive files stored in the persistent", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c56a97d562178d9b2546ad0bc86bb527b9f1a20"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkzMDE4NQ==", "bodyText": "testCreateDomainWithModelInPV --> testMiiDomainWithModelAmdApplicationInPV", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1936#discussion_r492930185", "createdAt": "2020-09-22T17:59:45Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -0,0 +1,447 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.IOException;\n+import java.net.http.HttpResponse;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1PersistentVolumeClaimVolumeSource;\n+import io.kubernetes.client.openapi.models.V1Pod;\n+import io.kubernetes.client.openapi.models.V1PodSpec;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1Volume;\n+import io.kubernetes.client.openapi.models.V1VolumeMount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.Exec;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.OracleHttpClient;\n+import oracle.weblogic.kubernetes.utils.TestUtils;\n+import org.awaitility.core.ConditionFactory;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_DUMMY_VALUE;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_PASSWORD;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_REGISTRY;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_USERNAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WDT_VERSION;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WIT_BUILD_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createImage;\n+import static oracle.weblogic.kubernetes.actions.TestActions.defaultWitParams;\n+import static oracle.weblogic.kubernetes.actions.TestActions.dockerLogin;\n+import static oracle.weblogic.kubernetes.actions.TestActions.dockerPush;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podReady;\n+import static oracle.weblogic.kubernetes.utils.BuildApplication.buildApplication;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createPV;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createPVC;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.checkDirectory;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This tests in this class verify creating a domain from model and application archive files stored in the persistent\n+ * volume.\n+ */\n+@DisplayName(\"Verify MII domain can be created from model file in PV location\")\n+@IntegrationTest\n+public class ItMiiDomainModelInPV {\n+\n+  private static String domainNamespace = null;\n+\n+  // domain constants\n+  private static String domainUid = \"domain1\";\n+  private static String adminServerName = \"admin-server\";\n+  private static String clusterName = \"cluster-1\";\n+  private static int replicaCount = 2;\n+  private static String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private static String managedServerPodNamePrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private static String miiImage;\n+  private static String miiImageTag;\n+  private static String adminSecretName;\n+  private static String encryptionSecretName;\n+\n+  private static String pvName = domainUid + \"-pv\"; // name of the persistent volume\n+  private static String pvcName = domainUid + \"-pvc\"; // name of the persistent volume claim\n+\n+  private static Path clusterViewAppPath;\n+  private static String modelFile = \"modelinpv-with-war.yaml\";\n+\n+  // create standard, reusable retry/backoff policy\n+  private static final ConditionFactory withStandardRetryPolicy\n+      = with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(15, MINUTES).await();\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * 1. Get namespaces for operator and WebLogic domain.\n+   * 2. Create operator.\n+   * 3. Build a MII with no domain and push it\n+   * to repository.\n+   * 4. Create WebLogic credential and model encryption secrets\n+   * 5. Create PV and PVC to store model and\n+   * application files.\n+   * 6. Copy the files to model and application files to PV.\n+   *\n+   * @param namespaces list of namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    String opNamespace = namespaces.get(0);\n+\n+    // get a unique domain namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    miiImageTag = TestUtils.getDateAndTimeStamp();\n+    miiImage = MII_BASIC_IMAGE_NAME + \":\" + miiImageTag;\n+\n+    // build a new MII image with no domain\n+    buildMIIandPushToRepo();\n+\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    createDockerRegistrySecret(domainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+    adminSecretName = \"weblogic-credentials\";\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create model encryption secret\n+    logger.info(\"Creating encryption secret\");\n+    encryptionSecretName = \"encryptionsecret\";\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+\n+    // create the PV and PVC to store application and model files\n+    createPV(pvName, domainUid, \"ItMiiDomainModelInPV\");\n+    createPVC(pvName, pvcName, domainUid, domainNamespace);\n+\n+    // build the clusterview application\n+    Path distDir = buildApplication(Paths.get(APP_DIR, \"clusterview\"),\n+        null, null, \"dist\", domainNamespace);\n+    clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n+    assertTrue(clusterViewAppPath.toFile().exists(), \"Application archive is not available\");\n+\n+    V1Pod webLogicPod = setupPVPod(domainNamespace);\n+\n+    try {\n+      logger.info(\"Creating directory {0} in PV\", \"/shared/applications\");\n+      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/applications\");\n+    } catch (IOException | ApiException | InterruptedException ex) {\n+      logger.warning(ex.getMessage());\n+    }\n+    try {\n+      logger.info(\"Creating directory {0} in PV\", \"/shared/model\");\n+      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/model\");\n+    } catch (IOException | ApiException | InterruptedException ex) {\n+      logger.warning(ex.getMessage());\n+    }\n+\n+    try {\n+      //copy the model file to PV using the temp pod - we don't have access to PVROOT in Jenkins env\n+      logger.info(\"Copying model file {0} to pv directory {1}\",\n+          Paths.get(MODEL_DIR, modelFile).toString(), \"/shared/model\");\n+      Kubernetes.copyFileToPod(domainNamespace, webLogicPod.getMetadata().getName(), null,\n+          Paths.get(MODEL_DIR, modelFile), Paths.get(\"shared\", \"model\", modelFile));\n+    } catch (IOException | ApiException ex) {\n+      logger.warning(ex.getMessage());\n+    }\n+    try {\n+      logger.info(\"Copying application file {0} to pv directory {1}\",\n+          clusterViewAppPath.toString(), \"/shared/applications\");\n+      Kubernetes.copyFileToPod(domainNamespace, webLogicPod.getMetadata().getName(), null,\n+          clusterViewAppPath, Paths.get(\"shared\", \"applications\", \"clusterview.war\"));\n+    } catch (IOException | ApiException ex) {\n+      logger.warning(ex.getMessage());\n+    }\n+\n+  }\n+\n+  /**\n+   * Test domain creation from model file stored in PV.\n+   * 1. Create the domain custom resource using mii with no domain and specifying a PV location for modelHome\n+   * 2. Verify the domain creation is successful and application is accessible.\n+   */\n+  @Test\n+  @DisplayName(\"Create MII domain with model and application file from PV\")\n+  public void testCreateDomainWithModelInPV() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c56a97d562178d9b2546ad0bc86bb527b9f1a20"}, "originalPosition": 231}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01b150ebdfd6b1a2c929642cb37e47e166b40ebf", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/01b150ebdfd6b1a2c929642cb37e47e166b40ebf", "committedDate": "2020-09-22T18:27:18Z", "message": "address Pani's comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzNzU4Njgz", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1936#pullrequestreview-493758683", "createdAt": "2020-09-22T18:58:03Z", "commit": {"oid": "01b150ebdfd6b1a2c929642cb37e47e166b40ebf"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxODo1ODowM1rOHWINIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOTowMjowNlrOHWIW5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk2NTE1NQ==", "bodyText": "This is not what I was expecting. We could just copy the files into a host directory that is mapped by the PV to a directory inside the pod, instead of using a pod to copy the files into the pod.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1936#discussion_r492965155", "createdAt": "2020-09-22T18:58:03Z", "author": {"login": "doxiao"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -0,0 +1,445 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.IOException;\n+import java.net.http.HttpResponse;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1PersistentVolumeClaimVolumeSource;\n+import io.kubernetes.client.openapi.models.V1Pod;\n+import io.kubernetes.client.openapi.models.V1PodSpec;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1Volume;\n+import io.kubernetes.client.openapi.models.V1VolumeMount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.Exec;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.OracleHttpClient;\n+import oracle.weblogic.kubernetes.utils.TestUtils;\n+import org.awaitility.core.ConditionFactory;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_DUMMY_VALUE;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_PASSWORD;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_REGISTRY;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_USERNAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WDT_VERSION;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WIT_BUILD_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createImage;\n+import static oracle.weblogic.kubernetes.actions.TestActions.defaultWitParams;\n+import static oracle.weblogic.kubernetes.actions.TestActions.dockerLogin;\n+import static oracle.weblogic.kubernetes.actions.TestActions.dockerPush;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podReady;\n+import static oracle.weblogic.kubernetes.utils.BuildApplication.buildApplication;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createPV;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createPVC;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.checkDirectory;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verify creating a domain from model and application archive files stored in the persistent\n+ * volume.\n+ */\n+@DisplayName(\"Verify MII domain can be created from model file in PV location\")\n+@IntegrationTest\n+public class ItMiiDomainModelInPV {\n+\n+  private static String domainNamespace = null;\n+\n+  // domain constants\n+  private static String domainUid = \"domain1\";\n+  private static String adminServerName = \"admin-server\";\n+  private static String clusterName = \"cluster-1\";\n+  private static int replicaCount = 2;\n+  private static String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private static String managedServerPodNamePrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private static String miiImage;\n+  private static String miiImageTag;\n+  private static String adminSecretName;\n+  private static String encryptionSecretName;\n+\n+  private static String pvName = domainUid + \"-pv\"; // name of the persistent volume\n+  private static String pvcName = domainUid + \"-pvc\"; // name of the persistent volume claim\n+\n+  private static Path clusterViewAppPath;\n+  private static String modelFile = \"modelinpv-with-war.yaml\";\n+\n+  // create standard, reusable retry/backoff policy\n+  private static final ConditionFactory withStandardRetryPolicy\n+      = with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(15, MINUTES).await();\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * 1. Get namespaces for operator and WebLogic domain.\n+   * 2. Create operator.\n+   * 3. Build a MII with no domain and push it to repository.\n+   * 4. Create WebLogic credential and model encryption secrets\n+   * 5. Create PV and PVC to store model and application files.\n+   * 6. Copy the model file and application files to PV.\n+   *\n+   * @param namespaces list of namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    String opNamespace = namespaces.get(0);\n+\n+    // get a unique domain namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    miiImageTag = TestUtils.getDateAndTimeStamp();\n+    miiImage = MII_BASIC_IMAGE_NAME + \":\" + miiImageTag;\n+\n+    // build a new MII image with no domain\n+    buildMIIandPushToRepo();\n+\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    createDockerRegistrySecret(domainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+    adminSecretName = \"weblogic-credentials\";\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create model encryption secret\n+    logger.info(\"Creating encryption secret\");\n+    encryptionSecretName = \"encryptionsecret\";\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+\n+    // create the PV and PVC to store application and model files\n+    createPV(pvName, domainUid, \"ItMiiDomainModelInPV\");\n+    createPVC(pvName, pvcName, domainUid, domainNamespace);\n+\n+    // build the clusterview application\n+    Path distDir = buildApplication(Paths.get(APP_DIR, \"clusterview\"),\n+        null, null, \"dist\", domainNamespace);\n+    clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n+    assertTrue(clusterViewAppPath.toFile().exists(), \"Application archive is not available\");\n+\n+    V1Pod webLogicPod = setupPVPod(domainNamespace);\n+\n+    try {\n+      logger.info(\"Creating directory {0} in PV\", \"/shared/applications\");\n+      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/applications\");\n+    } catch (IOException | ApiException | InterruptedException ex) {\n+      logger.warning(ex.getMessage());\n+    }\n+    try {\n+      logger.info(\"Creating directory {0} in PV\", \"/shared/model\");\n+      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/model\");\n+    } catch (IOException | ApiException | InterruptedException ex) {\n+      logger.warning(ex.getMessage());\n+    }\n+\n+    try {\n+      //copy the model file to PV using the temp pod - we don't have access to PVROOT in Jenkins env", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01b150ebdfd6b1a2c929642cb37e47e166b40ebf"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk2NzY1Mg==", "bodyText": "This method looks similar to CommonMiiTestUtils.createDomainResource(). Can we use that one (make it public first), and add additional things on top of the domain created by that method?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1936#discussion_r492967652", "createdAt": "2020-09-22T19:02:06Z", "author": {"login": "doxiao"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -0,0 +1,445 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.io.IOException;\n+import java.net.http.HttpResponse;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1Container;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1PersistentVolumeClaimVolumeSource;\n+import io.kubernetes.client.openapi.models.V1Pod;\n+import io.kubernetes.client.openapi.models.V1PodSpec;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import io.kubernetes.client.openapi.models.V1Volume;\n+import io.kubernetes.client.openapi.models.V1VolumeMount;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.Exec;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.OracleHttpClient;\n+import oracle.weblogic.kubernetes.utils.TestUtils;\n+import org.awaitility.core.ConditionFactory;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_DUMMY_VALUE;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_PASSWORD;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_REGISTRY;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_USERNAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WDT_VERSION;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WIT_BUILD_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createImage;\n+import static oracle.weblogic.kubernetes.actions.TestActions.defaultWitParams;\n+import static oracle.weblogic.kubernetes.actions.TestActions.dockerLogin;\n+import static oracle.weblogic.kubernetes.actions.TestActions.dockerPush;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.podReady;\n+import static oracle.weblogic.kubernetes.utils.BuildApplication.buildApplication;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createPV;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createPVC;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.checkDirectory;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verify creating a domain from model and application archive files stored in the persistent\n+ * volume.\n+ */\n+@DisplayName(\"Verify MII domain can be created from model file in PV location\")\n+@IntegrationTest\n+public class ItMiiDomainModelInPV {\n+\n+  private static String domainNamespace = null;\n+\n+  // domain constants\n+  private static String domainUid = \"domain1\";\n+  private static String adminServerName = \"admin-server\";\n+  private static String clusterName = \"cluster-1\";\n+  private static int replicaCount = 2;\n+  private static String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private static String managedServerPodNamePrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  private static String miiImage;\n+  private static String miiImageTag;\n+  private static String adminSecretName;\n+  private static String encryptionSecretName;\n+\n+  private static String pvName = domainUid + \"-pv\"; // name of the persistent volume\n+  private static String pvcName = domainUid + \"-pvc\"; // name of the persistent volume claim\n+\n+  private static Path clusterViewAppPath;\n+  private static String modelFile = \"modelinpv-with-war.yaml\";\n+\n+  // create standard, reusable retry/backoff policy\n+  private static final ConditionFactory withStandardRetryPolicy\n+      = with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(15, MINUTES).await();\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * 1. Get namespaces for operator and WebLogic domain.\n+   * 2. Create operator.\n+   * 3. Build a MII with no domain and push it to repository.\n+   * 4. Create WebLogic credential and model encryption secrets\n+   * 5. Create PV and PVC to store model and application files.\n+   * 6. Copy the model file and application files to PV.\n+   *\n+   * @param namespaces list of namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    String opNamespace = namespaces.get(0);\n+\n+    // get a unique domain namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    miiImageTag = TestUtils.getDateAndTimeStamp();\n+    miiImage = MII_BASIC_IMAGE_NAME + \":\" + miiImageTag;\n+\n+    // build a new MII image with no domain\n+    buildMIIandPushToRepo();\n+\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Creating docker registry secret in namespace {0}\", domainNamespace);\n+    createDockerRegistrySecret(domainNamespace);\n+\n+    // create secret for admin credentials\n+    logger.info(\"Creating secret for admin credentials\");\n+    adminSecretName = \"weblogic-credentials\";\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+\n+    // create model encryption secret\n+    logger.info(\"Creating encryption secret\");\n+    encryptionSecretName = \"encryptionsecret\";\n+    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n+\n+    // create the PV and PVC to store application and model files\n+    createPV(pvName, domainUid, \"ItMiiDomainModelInPV\");\n+    createPVC(pvName, pvcName, domainUid, domainNamespace);\n+\n+    // build the clusterview application\n+    Path distDir = buildApplication(Paths.get(APP_DIR, \"clusterview\"),\n+        null, null, \"dist\", domainNamespace);\n+    clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n+    assertTrue(clusterViewAppPath.toFile().exists(), \"Application archive is not available\");\n+\n+    V1Pod webLogicPod = setupPVPod(domainNamespace);\n+\n+    try {\n+      logger.info(\"Creating directory {0} in PV\", \"/shared/applications\");\n+      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/applications\");\n+    } catch (IOException | ApiException | InterruptedException ex) {\n+      logger.warning(ex.getMessage());\n+    }\n+    try {\n+      logger.info(\"Creating directory {0} in PV\", \"/shared/model\");\n+      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/model\");\n+    } catch (IOException | ApiException | InterruptedException ex) {\n+      logger.warning(ex.getMessage());\n+    }\n+\n+    try {\n+      //copy the model file to PV using the temp pod - we don't have access to PVROOT in Jenkins env\n+      logger.info(\"Copying model file {0} to pv directory {1}\",\n+          Paths.get(MODEL_DIR, modelFile).toString(), \"/shared/model\");\n+      Kubernetes.copyFileToPod(domainNamespace, webLogicPod.getMetadata().getName(), null,\n+          Paths.get(MODEL_DIR, modelFile), Paths.get(\"shared\", \"model\", modelFile));\n+    } catch (IOException | ApiException ex) {\n+      logger.warning(ex.getMessage());\n+    }\n+    try {\n+      logger.info(\"Copying application file {0} to pv directory {1}\",\n+          clusterViewAppPath.toString(), \"/shared/applications\");\n+      Kubernetes.copyFileToPod(domainNamespace, webLogicPod.getMetadata().getName(), null,\n+          clusterViewAppPath, Paths.get(\"shared\", \"applications\", \"clusterview.war\"));\n+    } catch (IOException | ApiException ex) {\n+      logger.warning(ex.getMessage());\n+    }\n+\n+  }\n+\n+  /**\n+   * Test domain creation from model file stored in PV.\n+   * 1. Create the domain custom resource using mii with no domain and specifying a PV location for modelHome\n+   * 2. Verify the domain creation is successful and application is accessible.\n+   */\n+  @Test\n+  @DisplayName(\"Create MII domain with model and application file from PV\")\n+  public void testMiiDomainWithModelAndApplicationInPV() {\n+\n+    // create domain custom resource and verify all the pods came up\n+    Domain domain = buildDomainResource();\n+    createVerifyDomain(domain);\n+\n+    List<String> managedServerNames = new ArrayList<String>();\n+    for (int i = 1; i <= replicaCount; i++) {\n+      managedServerNames.add(MANAGED_SERVER_NAME_BASE + i);\n+    }\n+\n+    //verify admin server accessibility and the health of cluster members\n+    verifyMemberHealth(adminServerPodName, managedServerNames, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n+\n+  }\n+\n+  // create custom domain resource with model file in modelHome\n+  private Domain buildDomainResource() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01b150ebdfd6b1a2c929642cb37e47e166b40ebf"}, "originalPosition": 246}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23585ba06e5d5976a0f32b3da4e001d2f4c48740", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/23585ba06e5d5976a0f32b3da4e001d2f4c48740", "committedDate": "2020-09-22T21:11:19Z", "message": "use CommonMiiTestUtils.createDomainResource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee35421ee63c7d6b6dcaf0e8528ac1ebd70df537", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ee35421ee63c7d6b6dcaf0e8528ac1ebd70df537", "committedDate": "2020-09-22T21:23:54Z", "message": "add pv to server pod"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22ce6cbb79384e3a12d35b6154fb876f1a0cf892", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/22ce6cbb79384e3a12d35b6154fb876f1a0cf892", "committedDate": "2020-09-22T21:55:17Z", "message": "fix javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ee27530597aa428ee855f60924687867eaa5e3f", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0ee27530597aa428ee855f60924687867eaa5e3f", "committedDate": "2020-09-23T00:36:42Z", "message": "add public doc in test method javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzOTM2NDkx", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1936#pullrequestreview-493936491", "createdAt": "2020-09-23T00:43:34Z", "commit": {"oid": "0ee27530597aa428ee855f60924687867eaa5e3f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NzY2NDAy", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1936#pullrequestreview-494766402", "createdAt": "2020-09-23T15:09:56Z", "commit": {"oid": "0ee27530597aa428ee855f60924687867eaa5e3f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4166, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}