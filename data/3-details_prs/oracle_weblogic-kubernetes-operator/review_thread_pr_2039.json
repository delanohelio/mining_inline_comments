{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2OTcyNzA1", "number": 2039, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzo1NTo1NlrOE24mOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODowMTo1N1rOE24vuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTg1ODQ4OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorUpgrade.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzo1NTo1NlrOHv6vCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzo1NTo1NlrOHv6vCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAwNzQzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Check application availability while the operator upgrade is happening and once after the ugprade is complete\n          \n          \n            \n               * Check application availability while the operator upgrade is happening and once the ugprade is complete", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2039#discussion_r520007433", "createdAt": "2020-11-09T17:55:56Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorUpgrade.java", "diffHunk": "@@ -402,4 +461,90 @@ private void checkDomainStarted(String domainUid, String domainNamespace) {\n     };\n   }\n \n+  private void deployAndAccessApplication(String namespace) {\n+    logger.info(\"Getting node port for admin server default channel\");\n+    int serviceNodePort = assertDoesNotThrow(() ->\n+            getServiceNodePort(namespace, getExternalServicePodName(adminServerPodName,\n+                TestConstants.OLD_DEFAULT_EXTERNAL_SERVICE_NAME_SUFFIX), \"default\"),\n+        \"Getting admin server node port failed\");\n+    assertNotEquals(-1, serviceNodePort, \"admin server default node port is not valid\");\n+\n+    Path archivePath = Paths.get(ITTESTS_DIR, \"../src/integration-tests/apps/testwebapp.war\");\n+    logger.info(\"Deploying application {0} to domain {1} cluster target cluster-1 in namespace {2}\",\n+        archivePath, domainUid, namespace);\n+    ExecResult result = DeployUtil.deployUsingRest(K8S_NODEPORT_HOST,\n+        String.valueOf(serviceNodePort),\n+        ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT,\n+        \"cluster-1\", archivePath, null, \"testwebapp\");\n+    assertNotNull(result, \"Application deployment failed\");\n+    logger.info(\"Application deployment returned {0}\", result.toString());\n+    assertEquals(\"202\", result.stdout(), \"Deployment didn't return HTTP status code 202\");\n+\n+    // check if the application is accessible inside of a server pod using quick retry policy\n+    logger.info(\"Check and wait for the application to become ready\");\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkAppIsRunning(withQuickRetryPolicy, namespace, managedServerPodNamePrefix + i,\n+          \"8001\", \"testwebapp/index.jsp\", managedServerPodNamePrefix + i);\n+    }\n+  }\n+\n+  /**\n+   * Check application availability while the operator upgrade is happening and once after the ugprade is complete", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81c9c7a918201f1d213e0e26878d4434922592b2"}, "originalPosition": 250}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTg2ODE5OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorUpgrade.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzo1ODoyM1rOHv607A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODozNjoxMFrOHv8LEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAwODk0MA==", "bodyText": "Is there a reason for the delay here?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2039#discussion_r520008940", "createdAt": "2020-11-09T17:58:23Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorUpgrade.java", "diffHunk": "@@ -402,4 +461,90 @@ private void checkDomainStarted(String domainUid, String domainNamespace) {\n     };\n   }\n \n+  private void deployAndAccessApplication(String namespace) {\n+    logger.info(\"Getting node port for admin server default channel\");\n+    int serviceNodePort = assertDoesNotThrow(() ->\n+            getServiceNodePort(namespace, getExternalServicePodName(adminServerPodName,\n+                TestConstants.OLD_DEFAULT_EXTERNAL_SERVICE_NAME_SUFFIX), \"default\"),\n+        \"Getting admin server node port failed\");\n+    assertNotEquals(-1, serviceNodePort, \"admin server default node port is not valid\");\n+\n+    Path archivePath = Paths.get(ITTESTS_DIR, \"../src/integration-tests/apps/testwebapp.war\");\n+    logger.info(\"Deploying application {0} to domain {1} cluster target cluster-1 in namespace {2}\",\n+        archivePath, domainUid, namespace);\n+    ExecResult result = DeployUtil.deployUsingRest(K8S_NODEPORT_HOST,\n+        String.valueOf(serviceNodePort),\n+        ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT,\n+        \"cluster-1\", archivePath, null, \"testwebapp\");\n+    assertNotNull(result, \"Application deployment failed\");\n+    logger.info(\"Application deployment returned {0}\", result.toString());\n+    assertEquals(\"202\", result.stdout(), \"Deployment didn't return HTTP status code 202\");\n+\n+    // check if the application is accessible inside of a server pod using quick retry policy\n+    logger.info(\"Check and wait for the application to become ready\");\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkAppIsRunning(withQuickRetryPolicy, namespace, managedServerPodNamePrefix + i,\n+          \"8001\", \"testwebapp/index.jsp\", managedServerPodNamePrefix + i);\n+    }\n+  }\n+\n+  /**\n+   * Check application availability while the operator upgrade is happening and once after the ugprade is complete\n+   * by accessing the application inside the managed server pods.\n+   */\n+  private static void collectAppAvailability(\n+      String domainNamespace,\n+      String operatorNamespace,\n+      List<Integer> appAvailability,\n+      String managedServerPrefix,\n+      int replicaCount,\n+      String internalPort,\n+      String appPath\n+  ) {\n+    // Access the pod periodically to check application's availability while upgrade is happening\n+    // and after upgrade is complete.\n+    // appAccessedAfterUpgrade is used to access the app once after upgrade is complete\n+    boolean appAccessedAfterUpgrade = false;\n+    while (!appAccessedAfterUpgrade) {\n+      boolean isUpgradeComplete = checkHelmReleaseRevision(OPERATOR_RELEASE_NAME, operatorNamespace, \"2\");\n+      // upgrade is not complete or app is not accessed after upgrade\n+      if (!isUpgradeComplete || !appAccessedAfterUpgrade) {\n+        for (int i = 1; i <= replicaCount; i++) {\n+          if (appAccessibleInPod(\n+              domainNamespace,\n+              managedServerPrefix + i,\n+              internalPort,\n+              appPath,\n+              managedServerPrefix + i)) {\n+            appAvailability.add(1);\n+            logger.fine(\"application is accessible in pod \" + managedServerPrefix + i);\n+          } else {\n+            appAvailability.add(0);\n+            logger.fine(\"application is not accessible in pod \" + managedServerPrefix + i);\n+          }\n+        }\n+      }\n+      if (isUpgradeComplete) {\n+        logger.info(\"Upgrade is complete and app is accessed after upgrade\");\n+        appAccessedAfterUpgrade = true;\n+      }\n+\n+      try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81c9c7a918201f1d213e0e26878d4434922592b2"}, "originalPosition": 290}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAzMDk5NQ==", "bodyText": "This can be removed as upgrade is not taking much time. This was added to introduce some delay if the other thread is going to take long time.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2039#discussion_r520030995", "createdAt": "2020-11-09T18:36:10Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorUpgrade.java", "diffHunk": "@@ -402,4 +461,90 @@ private void checkDomainStarted(String domainUid, String domainNamespace) {\n     };\n   }\n \n+  private void deployAndAccessApplication(String namespace) {\n+    logger.info(\"Getting node port for admin server default channel\");\n+    int serviceNodePort = assertDoesNotThrow(() ->\n+            getServiceNodePort(namespace, getExternalServicePodName(adminServerPodName,\n+                TestConstants.OLD_DEFAULT_EXTERNAL_SERVICE_NAME_SUFFIX), \"default\"),\n+        \"Getting admin server node port failed\");\n+    assertNotEquals(-1, serviceNodePort, \"admin server default node port is not valid\");\n+\n+    Path archivePath = Paths.get(ITTESTS_DIR, \"../src/integration-tests/apps/testwebapp.war\");\n+    logger.info(\"Deploying application {0} to domain {1} cluster target cluster-1 in namespace {2}\",\n+        archivePath, domainUid, namespace);\n+    ExecResult result = DeployUtil.deployUsingRest(K8S_NODEPORT_HOST,\n+        String.valueOf(serviceNodePort),\n+        ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT,\n+        \"cluster-1\", archivePath, null, \"testwebapp\");\n+    assertNotNull(result, \"Application deployment failed\");\n+    logger.info(\"Application deployment returned {0}\", result.toString());\n+    assertEquals(\"202\", result.stdout(), \"Deployment didn't return HTTP status code 202\");\n+\n+    // check if the application is accessible inside of a server pod using quick retry policy\n+    logger.info(\"Check and wait for the application to become ready\");\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkAppIsRunning(withQuickRetryPolicy, namespace, managedServerPodNamePrefix + i,\n+          \"8001\", \"testwebapp/index.jsp\", managedServerPodNamePrefix + i);\n+    }\n+  }\n+\n+  /**\n+   * Check application availability while the operator upgrade is happening and once after the ugprade is complete\n+   * by accessing the application inside the managed server pods.\n+   */\n+  private static void collectAppAvailability(\n+      String domainNamespace,\n+      String operatorNamespace,\n+      List<Integer> appAvailability,\n+      String managedServerPrefix,\n+      int replicaCount,\n+      String internalPort,\n+      String appPath\n+  ) {\n+    // Access the pod periodically to check application's availability while upgrade is happening\n+    // and after upgrade is complete.\n+    // appAccessedAfterUpgrade is used to access the app once after upgrade is complete\n+    boolean appAccessedAfterUpgrade = false;\n+    while (!appAccessedAfterUpgrade) {\n+      boolean isUpgradeComplete = checkHelmReleaseRevision(OPERATOR_RELEASE_NAME, operatorNamespace, \"2\");\n+      // upgrade is not complete or app is not accessed after upgrade\n+      if (!isUpgradeComplete || !appAccessedAfterUpgrade) {\n+        for (int i = 1; i <= replicaCount; i++) {\n+          if (appAccessibleInPod(\n+              domainNamespace,\n+              managedServerPrefix + i,\n+              internalPort,\n+              appPath,\n+              managedServerPrefix + i)) {\n+            appAvailability.add(1);\n+            logger.fine(\"application is accessible in pod \" + managedServerPrefix + i);\n+          } else {\n+            appAvailability.add(0);\n+            logger.fine(\"application is not accessible in pod \" + managedServerPrefix + i);\n+          }\n+        }\n+      }\n+      if (isUpgradeComplete) {\n+        logger.info(\"Upgrade is complete and app is accessed after upgrade\");\n+        appAccessedAfterUpgrade = true;\n+      }\n+\n+      try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAwODk0MA=="}, "originalCommit": {"oid": "81c9c7a918201f1d213e0e26878d4434922592b2"}, "originalPosition": 290}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTg4MjgxOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorUpgrade.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODowMTo1N1rOHv69vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOTozMjoxMFrOHv-dLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAxMTE5Ng==", "bodyText": "what is the point of checking for both null and not null? If its null isn't it the next statement going to throw NPE?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2039#discussion_r520011196", "createdAt": "2020-11-09T18:01:57Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorUpgrade.java", "diffHunk": "@@ -169,7 +190,9 @@ public void testOperatorUpgradeFrom3_0_2(@Namespaces(3) List<String> namespaces)\n    */\n   @AfterEach\n   public void tearDown() {\n-    if (System.getenv(\"SKIP_CLEANUP\") == null) {\n+    if (System.getenv(\"SKIP_CLEANUP\") == null\n+        || (System.getenv(\"SKIP_CLEANUP\") != null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81c9c7a918201f1d213e0e26878d4434922592b2"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA2ODM5Nw==", "bodyText": "clarified on slack", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2039#discussion_r520068397", "createdAt": "2020-11-09T19:32:10Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorUpgrade.java", "diffHunk": "@@ -169,7 +190,9 @@ public void testOperatorUpgradeFrom3_0_2(@Namespaces(3) List<String> namespaces)\n    */\n   @AfterEach\n   public void tearDown() {\n-    if (System.getenv(\"SKIP_CLEANUP\") == null) {\n+    if (System.getenv(\"SKIP_CLEANUP\") == null\n+        || (System.getenv(\"SKIP_CLEANUP\") != null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAxMTE5Ng=="}, "originalCommit": {"oid": "81c9c7a918201f1d213e0e26878d4434922592b2"}, "originalPosition": 110}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3732, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}