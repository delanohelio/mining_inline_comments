{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxODQ1MDYw", "number": 1979, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMjo0MToyMVrOEtBN6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNTo0ODoyN1rOEuD3mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjQxMzIyOnYy", "diffSide": "RIGHT", "path": "kubernetes/charts/weblogic-operator/values.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMjo0MToyMVrOHgkr0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMjo0MToyMVrOHgkr0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzkxNzUyMQ==", "bodyText": "the Kubernetes' limit -> the Kubernetes limit (no apostrophe needed)\nkubernetes appends additional 5 -> Kubernetes appends five additional", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1979#discussion_r503917521", "createdAt": "2020-10-13T12:41:21Z", "author": {"login": "rosemarymarano"}, "path": "kubernetes/charts/weblogic-operator/values.yaml", "diffHunk": "@@ -167,3 +167,21 @@ externalDebugHttpPort: 30999\n # such as \"name, claimName, volumeName\", or leave it commented out to use \n # the default list of field names.\n # dns1123Fields: \"\"\n+\n+# introspectorJobNameSuffix overrides the default suffix that the operator uses\n+# to append to the domainUID to form the name of the domain introspector job name.\n+# Note that the resultant job name should not be more than 58 characters due to\n+# the Kubernetes' limit to the name of a job and kubernetes appends additional 5", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ffb51f64f589e25491f47ea81179f661e5ddf01"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjQyMDMxOnYy", "diffSide": "RIGHT", "path": "kubernetes/charts/weblogic-operator/values.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMjo0MzowMFrOHgkwMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMjo0MzowMFrOHgkwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzkxODY0MQ==", "bodyText": "admin server name -> admin server name, (a comma helps the readability of this long sentence)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1979#discussion_r503918641", "createdAt": "2020-10-13T12:43:00Z", "author": {"login": "rosemarymarano"}, "path": "kubernetes/charts/weblogic-operator/values.yaml", "diffHunk": "@@ -167,3 +167,21 @@ externalDebugHttpPort: 30999\n # such as \"name, claimName, volumeName\", or leave it commented out to use \n # the default list of field names.\n # dns1123Fields: \"\"\n+\n+# introspectorJobNameSuffix overrides the default suffix that the operator uses\n+# to append to the domainUID to form the name of the domain introspector job name.\n+# Note that the resultant job name should not be more than 58 characters due to\n+# the Kubernetes' limit to the name of a job and kubernetes appends additional 5\n+# characters to the name of the pod that is created by the job controller.\n+# The default suffix is '-introspector'.\n+# The default suffix in pre-3.1.0 is \"-introspect-domain-job\"\n+# introspectorJobNameSuffix: \"-introspector\"\n+\n+# externalServiceNameSuffix overrides the default suffix that the operator uses\n+# to append to the domainUID and the WebLogic admin server name to form the name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ffb51f64f589e25491f47ea81179f661e5ddf01"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjQyMjMxOnYy", "diffSide": "RIGHT", "path": "kubernetes/charts/weblogic-operator/values.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMjo0MzozMlrOHgkxdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMjo0MzozMlrOHgkxdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzkxODk2NA==", "bodyText": "Kubernetes' -> Kubernetes", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1979#discussion_r503918964", "createdAt": "2020-10-13T12:43:32Z", "author": {"login": "rosemarymarano"}, "path": "kubernetes/charts/weblogic-operator/values.yaml", "diffHunk": "@@ -167,3 +167,21 @@ externalDebugHttpPort: 30999\n # such as \"name, claimName, volumeName\", or leave it commented out to use \n # the default list of field names.\n # dns1123Fields: \"\"\n+\n+# introspectorJobNameSuffix overrides the default suffix that the operator uses\n+# to append to the domainUID to form the name of the domain introspector job name.\n+# Note that the resultant job name should not be more than 58 characters due to\n+# the Kubernetes' limit to the name of a job and kubernetes appends additional 5\n+# characters to the name of the pod that is created by the job controller.\n+# The default suffix is '-introspector'.\n+# The default suffix in pre-3.1.0 is \"-introspect-domain-job\"\n+# introspectorJobNameSuffix: \"-introspector\"\n+\n+# externalServiceNameSuffix overrides the default suffix that the operator uses\n+# to append to the domainUID and the WebLogic admin server name to form the name\n+# of the domain's admin server external service.\n+# Note that the resultant name should not be more than 63 characters due to\n+# the Kubernetes' limit to the name of a service.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ffb51f64f589e25491f47ea81179f661e5ddf01"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzE5NTQ4OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItConfigDistributionStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNToyMjoyMVrOHgsQ1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOTo1MDozOFrOHg23Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA0MTY4Nw==", "bodyText": "Minor nit: Would getIntrospectJobName would be more accurate? The runtime pod name is generated by k8s using a decoration of the JobName...", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1979#discussion_r504041687", "createdAt": "2020-10-13T15:22:21Z", "author": {"login": "tbarnes-us"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItConfigDistributionStrategy.java", "diffHunk": "@@ -767,7 +768,7 @@ private void verifyPodsStateNotChanged() {\n   private void verifyIntrospectorRuns() {\n     //verify the introspector pod is created and runs\n     logger.info(\"Verifying introspector pod is created, runs and deleted\");\n-    String introspectPodName = domainUid + \"-\" + \"introspect-domain-job\";\n+    String introspectPodName = getIntrospectPodName(domainUid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe5c03f4b03543c6358e194a97276af4ade1c898"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIxNTM5NQ==", "bodyText": "LGTM now", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1979#discussion_r504215395", "createdAt": "2020-10-13T19:50:38Z", "author": {"login": "tbarnes-us"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItConfigDistributionStrategy.java", "diffHunk": "@@ -767,7 +768,7 @@ private void verifyPodsStateNotChanged() {\n   private void verifyIntrospectorRuns() {\n     //verify the introspector pod is created and runs\n     logger.info(\"Verifying introspector pod is created, runs and deleted\");\n-    String introspectPodName = domainUid + \"-\" + \"introspect-domain-job\";\n+    String introspectPodName = getIntrospectPodName(domainUid);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA0MTY4Nw=="}, "originalCommit": {"oid": "fe5c03f4b03543c6358e194a97276af4ade1c898"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzQyMzMyOnYy", "diffSide": "RIGHT", "path": "operator/src/main/java/oracle/kubernetes/weblogic/domain/model/Domain.java", "isResolved": true, "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNjowODo0N1rOHgud6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMzoyMDo0NFrOHiHdTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA3NzgwMA==", "bodyText": "I think there's a significant risk that service names in a cluster may unexpectedly become too long when a WL cluster configuration is changed to allow more servers.  For example, from <9 to >9 servers, or from <99 to >100 servers...", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1979#discussion_r504077800", "createdAt": "2020-10-13T16:08:47Z", "author": {"login": "tbarnes-us"}, "path": "operator/src/main/java/oracle/kubernetes/weblogic/domain/model/Domain.java", "diffHunk": "@@ -628,10 +653,65 @@ public boolean equals(Object other) {\n       verifyNoAlternateSecretNamespaceSpecified();\n       addMissingModelConfigMap(kubernetesResources);\n       verifyIstioExposingDefaultChannel();\n+      verifyIntrospectorJobName();\n \n       return failures;\n     }\n \n+    private void verifyIntrospectorJobName() {\n+      // K8S adds a 5 character suffix to an introspector job name\n+      if (LegalNames.toJobIntrospectorName(getDomainUid()).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH - 5) {\n+        failures.add(DomainValidationMessages.exceedMaxIntrospectorJobName(getDomainUid()));\n+      }\n+    }\n+\n+    private void verifyGeneratedResourceNames(WlsDomainConfig wlsDomainConfig) {\n+      checkGeneratedServerServiceName(wlsDomainConfig.getAdminServerName());\n+      if (isExternalServiceConfigured(getSpec())) {\n+        checkGeneratedExternalServiceName(wlsDomainConfig.getAdminServerName());\n+      }\n+\n+      // domain level serverConfigs do not contain servers in dynamic clusters\n+      wlsDomainConfig.getServerConfigs()\n+          .values()\n+          .stream()\n+          .map(WlsServerConfig::getName)\n+          .forEach(this::checkGeneratedServerServiceName);\n+      wlsDomainConfig.getClusterConfigs()\n+          .values()\n+          .iterator()\n+          .forEachRemaining(wlsClusterConfig\n+              // serverConfigs contains configured and dynamic servers in the cluster\n+              -> wlsClusterConfig.getServerConfigs().forEach(wlsServerConfig\n+                  -> this.checkGeneratedServerServiceName(wlsServerConfig.getName())));\n+      wlsDomainConfig.getClusterConfigs()\n+          .values()\n+          .iterator()\n+          .forEachRemaining(wlsClusterConfig -> this.checkGeneratedClusterServiceName(wlsClusterConfig.getName()));\n+    }\n+\n+    private void checkGeneratedExternalServiceName(String adminServerName) {\n+      if (LegalNames.toExternalServiceName(getDomainUid(), adminServerName).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH) {\n+        failures.add(DomainValidationMessages.exceedMaxExternalServiceName(getDomainUid(), adminServerName));\n+      }\n+    }\n+\n+    private void checkGeneratedServerServiceName(String serverName) {\n+      if (LegalNames.toServerServiceName(getDomainUid(), serverName).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH) {\n+        failures.add(DomainValidationMessages.exceedMaxServerServiceName(getDomainUid(), serverName));\n+      }\n+    }\n+\n+    private void checkGeneratedClusterServiceName(String clusterName) {\n+      if (LegalNames.toClusterServiceName(getDomainUid(), clusterName).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH) {\n+        failures.add(DomainValidationMessages.exceedMaxClusterServiceName(getDomainUid(), clusterName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe5c03f4b03543c6358e194a97276af4ade1c898"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA5NTIzNQ==", "bodyText": "This comment isn't quite in the right place - it belongs on the service name check for server service names within a cluster.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1979#discussion_r504095235", "createdAt": "2020-10-13T16:31:51Z", "author": {"login": "tbarnes-us"}, "path": "operator/src/main/java/oracle/kubernetes/weblogic/domain/model/Domain.java", "diffHunk": "@@ -628,10 +653,65 @@ public boolean equals(Object other) {\n       verifyNoAlternateSecretNamespaceSpecified();\n       addMissingModelConfigMap(kubernetesResources);\n       verifyIstioExposingDefaultChannel();\n+      verifyIntrospectorJobName();\n \n       return failures;\n     }\n \n+    private void verifyIntrospectorJobName() {\n+      // K8S adds a 5 character suffix to an introspector job name\n+      if (LegalNames.toJobIntrospectorName(getDomainUid()).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH - 5) {\n+        failures.add(DomainValidationMessages.exceedMaxIntrospectorJobName(getDomainUid()));\n+      }\n+    }\n+\n+    private void verifyGeneratedResourceNames(WlsDomainConfig wlsDomainConfig) {\n+      checkGeneratedServerServiceName(wlsDomainConfig.getAdminServerName());\n+      if (isExternalServiceConfigured(getSpec())) {\n+        checkGeneratedExternalServiceName(wlsDomainConfig.getAdminServerName());\n+      }\n+\n+      // domain level serverConfigs do not contain servers in dynamic clusters\n+      wlsDomainConfig.getServerConfigs()\n+          .values()\n+          .stream()\n+          .map(WlsServerConfig::getName)\n+          .forEach(this::checkGeneratedServerServiceName);\n+      wlsDomainConfig.getClusterConfigs()\n+          .values()\n+          .iterator()\n+          .forEachRemaining(wlsClusterConfig\n+              // serverConfigs contains configured and dynamic servers in the cluster\n+              -> wlsClusterConfig.getServerConfigs().forEach(wlsServerConfig\n+                  -> this.checkGeneratedServerServiceName(wlsServerConfig.getName())));\n+      wlsDomainConfig.getClusterConfigs()\n+          .values()\n+          .iterator()\n+          .forEachRemaining(wlsClusterConfig -> this.checkGeneratedClusterServiceName(wlsClusterConfig.getName()));\n+    }\n+\n+    private void checkGeneratedExternalServiceName(String adminServerName) {\n+      if (LegalNames.toExternalServiceName(getDomainUid(), adminServerName).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH) {\n+        failures.add(DomainValidationMessages.exceedMaxExternalServiceName(getDomainUid(), adminServerName));\n+      }\n+    }\n+\n+    private void checkGeneratedServerServiceName(String serverName) {\n+      if (LegalNames.toServerServiceName(getDomainUid(), serverName).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH) {\n+        failures.add(DomainValidationMessages.exceedMaxServerServiceName(getDomainUid(), serverName));\n+      }\n+    }\n+\n+    private void checkGeneratedClusterServiceName(String clusterName) {\n+      if (LegalNames.toClusterServiceName(getDomainUid(), clusterName).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH) {\n+        failures.add(DomainValidationMessages.exceedMaxClusterServiceName(getDomainUid(), clusterName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA3NzgwMA=="}, "originalCommit": {"oid": "fe5c03f4b03543c6358e194a97276af4ade1c898"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE1MzczNQ==", "bodyText": "I assume when that happens, the introspector will be rerun, and the validation of server service name happens after the introspector is completed, so we should be able to catch this and fail the domain update then with a clear validation error message in the domain resource.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1979#discussion_r504153735", "createdAt": "2020-10-13T18:03:25Z", "author": {"login": "doxiao"}, "path": "operator/src/main/java/oracle/kubernetes/weblogic/domain/model/Domain.java", "diffHunk": "@@ -628,10 +653,65 @@ public boolean equals(Object other) {\n       verifyNoAlternateSecretNamespaceSpecified();\n       addMissingModelConfigMap(kubernetesResources);\n       verifyIstioExposingDefaultChannel();\n+      verifyIntrospectorJobName();\n \n       return failures;\n     }\n \n+    private void verifyIntrospectorJobName() {\n+      // K8S adds a 5 character suffix to an introspector job name\n+      if (LegalNames.toJobIntrospectorName(getDomainUid()).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH - 5) {\n+        failures.add(DomainValidationMessages.exceedMaxIntrospectorJobName(getDomainUid()));\n+      }\n+    }\n+\n+    private void verifyGeneratedResourceNames(WlsDomainConfig wlsDomainConfig) {\n+      checkGeneratedServerServiceName(wlsDomainConfig.getAdminServerName());\n+      if (isExternalServiceConfigured(getSpec())) {\n+        checkGeneratedExternalServiceName(wlsDomainConfig.getAdminServerName());\n+      }\n+\n+      // domain level serverConfigs do not contain servers in dynamic clusters\n+      wlsDomainConfig.getServerConfigs()\n+          .values()\n+          .stream()\n+          .map(WlsServerConfig::getName)\n+          .forEach(this::checkGeneratedServerServiceName);\n+      wlsDomainConfig.getClusterConfigs()\n+          .values()\n+          .iterator()\n+          .forEachRemaining(wlsClusterConfig\n+              // serverConfigs contains configured and dynamic servers in the cluster\n+              -> wlsClusterConfig.getServerConfigs().forEach(wlsServerConfig\n+                  -> this.checkGeneratedServerServiceName(wlsServerConfig.getName())));\n+      wlsDomainConfig.getClusterConfigs()\n+          .values()\n+          .iterator()\n+          .forEachRemaining(wlsClusterConfig -> this.checkGeneratedClusterServiceName(wlsClusterConfig.getName()));\n+    }\n+\n+    private void checkGeneratedExternalServiceName(String adminServerName) {\n+      if (LegalNames.toExternalServiceName(getDomainUid(), adminServerName).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH) {\n+        failures.add(DomainValidationMessages.exceedMaxExternalServiceName(getDomainUid(), adminServerName));\n+      }\n+    }\n+\n+    private void checkGeneratedServerServiceName(String serverName) {\n+      if (LegalNames.toServerServiceName(getDomainUid(), serverName).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH) {\n+        failures.add(DomainValidationMessages.exceedMaxServerServiceName(getDomainUid(), serverName));\n+      }\n+    }\n+\n+    private void checkGeneratedClusterServiceName(String clusterName) {\n+      if (LegalNames.toClusterServiceName(getDomainUid(), clusterName).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH) {\n+        failures.add(DomainValidationMessages.exceedMaxClusterServiceName(getDomainUid(), clusterName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA3NzgwMA=="}, "originalCommit": {"oid": "fe5c03f4b03543c6358e194a97276af4ade1c898"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE1OTAxNA==", "bodyText": "In my opinion, there's a risk that this could happen:\n\nAll testing passes at size 5.\nCluster goes into production and works fine.\nCluster size is increased from 5 to 15 and fails (perhaps in testing).\nIntrusive post-production changes needed to accomodate the change - including the potential to lose data due to server name changes (for example, cluster-targeted file stores files and database store tables are named automatically after server names).", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1979#discussion_r504159014", "createdAt": "2020-10-13T18:11:57Z", "author": {"login": "tbarnes-us"}, "path": "operator/src/main/java/oracle/kubernetes/weblogic/domain/model/Domain.java", "diffHunk": "@@ -628,10 +653,65 @@ public boolean equals(Object other) {\n       verifyNoAlternateSecretNamespaceSpecified();\n       addMissingModelConfigMap(kubernetesResources);\n       verifyIstioExposingDefaultChannel();\n+      verifyIntrospectorJobName();\n \n       return failures;\n     }\n \n+    private void verifyIntrospectorJobName() {\n+      // K8S adds a 5 character suffix to an introspector job name\n+      if (LegalNames.toJobIntrospectorName(getDomainUid()).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH - 5) {\n+        failures.add(DomainValidationMessages.exceedMaxIntrospectorJobName(getDomainUid()));\n+      }\n+    }\n+\n+    private void verifyGeneratedResourceNames(WlsDomainConfig wlsDomainConfig) {\n+      checkGeneratedServerServiceName(wlsDomainConfig.getAdminServerName());\n+      if (isExternalServiceConfigured(getSpec())) {\n+        checkGeneratedExternalServiceName(wlsDomainConfig.getAdminServerName());\n+      }\n+\n+      // domain level serverConfigs do not contain servers in dynamic clusters\n+      wlsDomainConfig.getServerConfigs()\n+          .values()\n+          .stream()\n+          .map(WlsServerConfig::getName)\n+          .forEach(this::checkGeneratedServerServiceName);\n+      wlsDomainConfig.getClusterConfigs()\n+          .values()\n+          .iterator()\n+          .forEachRemaining(wlsClusterConfig\n+              // serverConfigs contains configured and dynamic servers in the cluster\n+              -> wlsClusterConfig.getServerConfigs().forEach(wlsServerConfig\n+                  -> this.checkGeneratedServerServiceName(wlsServerConfig.getName())));\n+      wlsDomainConfig.getClusterConfigs()\n+          .values()\n+          .iterator()\n+          .forEachRemaining(wlsClusterConfig -> this.checkGeneratedClusterServiceName(wlsClusterConfig.getName()));\n+    }\n+\n+    private void checkGeneratedExternalServiceName(String adminServerName) {\n+      if (LegalNames.toExternalServiceName(getDomainUid(), adminServerName).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH) {\n+        failures.add(DomainValidationMessages.exceedMaxExternalServiceName(getDomainUid(), adminServerName));\n+      }\n+    }\n+\n+    private void checkGeneratedServerServiceName(String serverName) {\n+      if (LegalNames.toServerServiceName(getDomainUid(), serverName).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH) {\n+        failures.add(DomainValidationMessages.exceedMaxServerServiceName(getDomainUid(), serverName));\n+      }\n+    }\n+\n+    private void checkGeneratedClusterServiceName(String clusterName) {\n+      if (LegalNames.toClusterServiceName(getDomainUid(), clusterName).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH) {\n+        failures.add(DomainValidationMessages.exceedMaxClusterServiceName(getDomainUid(), clusterName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA3NzgwMA=="}, "originalCommit": {"oid": "fe5c03f4b03543c6358e194a97276af4ade1c898"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE3MzYzOQ==", "bodyText": "This is a valid and good concern. We could reserve 2 more characters in server service name check to handle this. Alternatively, can customer shortens the domainUID to avoid the issues that you are concerned? DomainUID is only a K8S side artifact that does not have anything to do with the webLogic server side.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1979#discussion_r504173639", "createdAt": "2020-10-13T18:33:42Z", "author": {"login": "doxiao"}, "path": "operator/src/main/java/oracle/kubernetes/weblogic/domain/model/Domain.java", "diffHunk": "@@ -628,10 +653,65 @@ public boolean equals(Object other) {\n       verifyNoAlternateSecretNamespaceSpecified();\n       addMissingModelConfigMap(kubernetesResources);\n       verifyIstioExposingDefaultChannel();\n+      verifyIntrospectorJobName();\n \n       return failures;\n     }\n \n+    private void verifyIntrospectorJobName() {\n+      // K8S adds a 5 character suffix to an introspector job name\n+      if (LegalNames.toJobIntrospectorName(getDomainUid()).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH - 5) {\n+        failures.add(DomainValidationMessages.exceedMaxIntrospectorJobName(getDomainUid()));\n+      }\n+    }\n+\n+    private void verifyGeneratedResourceNames(WlsDomainConfig wlsDomainConfig) {\n+      checkGeneratedServerServiceName(wlsDomainConfig.getAdminServerName());\n+      if (isExternalServiceConfigured(getSpec())) {\n+        checkGeneratedExternalServiceName(wlsDomainConfig.getAdminServerName());\n+      }\n+\n+      // domain level serverConfigs do not contain servers in dynamic clusters\n+      wlsDomainConfig.getServerConfigs()\n+          .values()\n+          .stream()\n+          .map(WlsServerConfig::getName)\n+          .forEach(this::checkGeneratedServerServiceName);\n+      wlsDomainConfig.getClusterConfigs()\n+          .values()\n+          .iterator()\n+          .forEachRemaining(wlsClusterConfig\n+              // serverConfigs contains configured and dynamic servers in the cluster\n+              -> wlsClusterConfig.getServerConfigs().forEach(wlsServerConfig\n+                  -> this.checkGeneratedServerServiceName(wlsServerConfig.getName())));\n+      wlsDomainConfig.getClusterConfigs()\n+          .values()\n+          .iterator()\n+          .forEachRemaining(wlsClusterConfig -> this.checkGeneratedClusterServiceName(wlsClusterConfig.getName()));\n+    }\n+\n+    private void checkGeneratedExternalServiceName(String adminServerName) {\n+      if (LegalNames.toExternalServiceName(getDomainUid(), adminServerName).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH) {\n+        failures.add(DomainValidationMessages.exceedMaxExternalServiceName(getDomainUid(), adminServerName));\n+      }\n+    }\n+\n+    private void checkGeneratedServerServiceName(String serverName) {\n+      if (LegalNames.toServerServiceName(getDomainUid(), serverName).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH) {\n+        failures.add(DomainValidationMessages.exceedMaxServerServiceName(getDomainUid(), serverName));\n+      }\n+    }\n+\n+    private void checkGeneratedClusterServiceName(String clusterName) {\n+      if (LegalNames.toClusterServiceName(getDomainUid(), clusterName).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH) {\n+        failures.add(DomainValidationMessages.exceedMaxClusterServiceName(getDomainUid(), clusterName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA3NzgwMA=="}, "originalCommit": {"oid": "fe5c03f4b03543c6358e194a97276af4ade1c898"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE3NTc0Mg==", "bodyText": "Yes, shortening the domainUID would work-around it - but it's not certain that will always be practical.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1979#discussion_r504175742", "createdAt": "2020-10-13T18:37:23Z", "author": {"login": "tbarnes-us"}, "path": "operator/src/main/java/oracle/kubernetes/weblogic/domain/model/Domain.java", "diffHunk": "@@ -628,10 +653,65 @@ public boolean equals(Object other) {\n       verifyNoAlternateSecretNamespaceSpecified();\n       addMissingModelConfigMap(kubernetesResources);\n       verifyIstioExposingDefaultChannel();\n+      verifyIntrospectorJobName();\n \n       return failures;\n     }\n \n+    private void verifyIntrospectorJobName() {\n+      // K8S adds a 5 character suffix to an introspector job name\n+      if (LegalNames.toJobIntrospectorName(getDomainUid()).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH - 5) {\n+        failures.add(DomainValidationMessages.exceedMaxIntrospectorJobName(getDomainUid()));\n+      }\n+    }\n+\n+    private void verifyGeneratedResourceNames(WlsDomainConfig wlsDomainConfig) {\n+      checkGeneratedServerServiceName(wlsDomainConfig.getAdminServerName());\n+      if (isExternalServiceConfigured(getSpec())) {\n+        checkGeneratedExternalServiceName(wlsDomainConfig.getAdminServerName());\n+      }\n+\n+      // domain level serverConfigs do not contain servers in dynamic clusters\n+      wlsDomainConfig.getServerConfigs()\n+          .values()\n+          .stream()\n+          .map(WlsServerConfig::getName)\n+          .forEach(this::checkGeneratedServerServiceName);\n+      wlsDomainConfig.getClusterConfigs()\n+          .values()\n+          .iterator()\n+          .forEachRemaining(wlsClusterConfig\n+              // serverConfigs contains configured and dynamic servers in the cluster\n+              -> wlsClusterConfig.getServerConfigs().forEach(wlsServerConfig\n+                  -> this.checkGeneratedServerServiceName(wlsServerConfig.getName())));\n+      wlsDomainConfig.getClusterConfigs()\n+          .values()\n+          .iterator()\n+          .forEachRemaining(wlsClusterConfig -> this.checkGeneratedClusterServiceName(wlsClusterConfig.getName()));\n+    }\n+\n+    private void checkGeneratedExternalServiceName(String adminServerName) {\n+      if (LegalNames.toExternalServiceName(getDomainUid(), adminServerName).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH) {\n+        failures.add(DomainValidationMessages.exceedMaxExternalServiceName(getDomainUid(), adminServerName));\n+      }\n+    }\n+\n+    private void checkGeneratedServerServiceName(String serverName) {\n+      if (LegalNames.toServerServiceName(getDomainUid(), serverName).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH) {\n+        failures.add(DomainValidationMessages.exceedMaxServerServiceName(getDomainUid(), serverName));\n+      }\n+    }\n+\n+    private void checkGeneratedClusterServiceName(String clusterName) {\n+      if (LegalNames.toClusterServiceName(getDomainUid(), clusterName).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH) {\n+        failures.add(DomainValidationMessages.exceedMaxClusterServiceName(getDomainUid(), clusterName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA3NzgwMA=="}, "originalCommit": {"oid": "fe5c03f4b03543c6358e194a97276af4ade1c898"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI3Mjc0Mg==", "bodyText": "I'm fine with reducing the maximum domainUID size by approximately 2 characters to account for dynamic clusters that grow to over 100 members. My hope is that there won't be any more need for set-asides like this as we want the maximum to stay subjectively \"reasonable.\"", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1979#discussion_r504272742", "createdAt": "2020-10-13T21:36:09Z", "author": {"login": "rjeberhard"}, "path": "operator/src/main/java/oracle/kubernetes/weblogic/domain/model/Domain.java", "diffHunk": "@@ -628,10 +653,65 @@ public boolean equals(Object other) {\n       verifyNoAlternateSecretNamespaceSpecified();\n       addMissingModelConfigMap(kubernetesResources);\n       verifyIstioExposingDefaultChannel();\n+      verifyIntrospectorJobName();\n \n       return failures;\n     }\n \n+    private void verifyIntrospectorJobName() {\n+      // K8S adds a 5 character suffix to an introspector job name\n+      if (LegalNames.toJobIntrospectorName(getDomainUid()).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH - 5) {\n+        failures.add(DomainValidationMessages.exceedMaxIntrospectorJobName(getDomainUid()));\n+      }\n+    }\n+\n+    private void verifyGeneratedResourceNames(WlsDomainConfig wlsDomainConfig) {\n+      checkGeneratedServerServiceName(wlsDomainConfig.getAdminServerName());\n+      if (isExternalServiceConfigured(getSpec())) {\n+        checkGeneratedExternalServiceName(wlsDomainConfig.getAdminServerName());\n+      }\n+\n+      // domain level serverConfigs do not contain servers in dynamic clusters\n+      wlsDomainConfig.getServerConfigs()\n+          .values()\n+          .stream()\n+          .map(WlsServerConfig::getName)\n+          .forEach(this::checkGeneratedServerServiceName);\n+      wlsDomainConfig.getClusterConfigs()\n+          .values()\n+          .iterator()\n+          .forEachRemaining(wlsClusterConfig\n+              // serverConfigs contains configured and dynamic servers in the cluster\n+              -> wlsClusterConfig.getServerConfigs().forEach(wlsServerConfig\n+                  -> this.checkGeneratedServerServiceName(wlsServerConfig.getName())));\n+      wlsDomainConfig.getClusterConfigs()\n+          .values()\n+          .iterator()\n+          .forEachRemaining(wlsClusterConfig -> this.checkGeneratedClusterServiceName(wlsClusterConfig.getName()));\n+    }\n+\n+    private void checkGeneratedExternalServiceName(String adminServerName) {\n+      if (LegalNames.toExternalServiceName(getDomainUid(), adminServerName).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH) {\n+        failures.add(DomainValidationMessages.exceedMaxExternalServiceName(getDomainUid(), adminServerName));\n+      }\n+    }\n+\n+    private void checkGeneratedServerServiceName(String serverName) {\n+      if (LegalNames.toServerServiceName(getDomainUid(), serverName).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH) {\n+        failures.add(DomainValidationMessages.exceedMaxServerServiceName(getDomainUid(), serverName));\n+      }\n+    }\n+\n+    private void checkGeneratedClusterServiceName(String clusterName) {\n+      if (LegalNames.toClusterServiceName(getDomainUid(), clusterName).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH) {\n+        failures.add(DomainValidationMessages.exceedMaxClusterServiceName(getDomainUid(), clusterName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA3NzgwMA=="}, "originalCommit": {"oid": "fe5c03f4b03543c6358e194a97276af4ade1c898"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI3OTAxOQ==", "bodyText": "Cool. The key is to change the max size dynamically so that an increased cluster size won't cause trouble.  So decrease the current max by 2 for cluster sizes 1-9, and decrease by 1 for sizes 10-99...", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1979#discussion_r504279019", "createdAt": "2020-10-13T21:50:16Z", "author": {"login": "tbarnes-us"}, "path": "operator/src/main/java/oracle/kubernetes/weblogic/domain/model/Domain.java", "diffHunk": "@@ -628,10 +653,65 @@ public boolean equals(Object other) {\n       verifyNoAlternateSecretNamespaceSpecified();\n       addMissingModelConfigMap(kubernetesResources);\n       verifyIstioExposingDefaultChannel();\n+      verifyIntrospectorJobName();\n \n       return failures;\n     }\n \n+    private void verifyIntrospectorJobName() {\n+      // K8S adds a 5 character suffix to an introspector job name\n+      if (LegalNames.toJobIntrospectorName(getDomainUid()).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH - 5) {\n+        failures.add(DomainValidationMessages.exceedMaxIntrospectorJobName(getDomainUid()));\n+      }\n+    }\n+\n+    private void verifyGeneratedResourceNames(WlsDomainConfig wlsDomainConfig) {\n+      checkGeneratedServerServiceName(wlsDomainConfig.getAdminServerName());\n+      if (isExternalServiceConfigured(getSpec())) {\n+        checkGeneratedExternalServiceName(wlsDomainConfig.getAdminServerName());\n+      }\n+\n+      // domain level serverConfigs do not contain servers in dynamic clusters\n+      wlsDomainConfig.getServerConfigs()\n+          .values()\n+          .stream()\n+          .map(WlsServerConfig::getName)\n+          .forEach(this::checkGeneratedServerServiceName);\n+      wlsDomainConfig.getClusterConfigs()\n+          .values()\n+          .iterator()\n+          .forEachRemaining(wlsClusterConfig\n+              // serverConfigs contains configured and dynamic servers in the cluster\n+              -> wlsClusterConfig.getServerConfigs().forEach(wlsServerConfig\n+                  -> this.checkGeneratedServerServiceName(wlsServerConfig.getName())));\n+      wlsDomainConfig.getClusterConfigs()\n+          .values()\n+          .iterator()\n+          .forEachRemaining(wlsClusterConfig -> this.checkGeneratedClusterServiceName(wlsClusterConfig.getName()));\n+    }\n+\n+    private void checkGeneratedExternalServiceName(String adminServerName) {\n+      if (LegalNames.toExternalServiceName(getDomainUid(), adminServerName).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH) {\n+        failures.add(DomainValidationMessages.exceedMaxExternalServiceName(getDomainUid(), adminServerName));\n+      }\n+    }\n+\n+    private void checkGeneratedServerServiceName(String serverName) {\n+      if (LegalNames.toServerServiceName(getDomainUid(), serverName).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH) {\n+        failures.add(DomainValidationMessages.exceedMaxServerServiceName(getDomainUid(), serverName));\n+      }\n+    }\n+\n+    private void checkGeneratedClusterServiceName(String clusterName) {\n+      if (LegalNames.toClusterServiceName(getDomainUid(), clusterName).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH) {\n+        failures.add(DomainValidationMessages.exceedMaxClusterServiceName(getDomainUid(), clusterName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA3NzgwMA=="}, "originalCommit": {"oid": "fe5c03f4b03543c6358e194a97276af4ade1c898"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY4NzA0MA==", "bodyText": "I agree with where this is going.\nWith the changes in this PR, we enforce the limits at two different levels: 1) we specifies the maximum domainUID size in the domain spec, when this limit is exceeded, helm install will fail. We have similar restrictions to the new suffix values at the helm level; 2) the operator checks the resultant names that take into account of not only the domainUID, but also WebLogic server/cluster names as well as the suffixes.\nI think the reasonable thing to do is to keep the maximum domainUID size (in the spec schema) as high as possible, and leave the flexibility to the choices of suffix values and WebLogic configurations. In order to achieve this, I started to think that we need to allow a custom infix for cluster service names. Once we do that, custom would have almost a full control over the length of the resource names. We could keep the maximum domainUID size to 58 (63 minus the 5 characters that the K8S adds to the job name), instead of 45 (to account for the default suffix plus 5) right now,  as a general limit. Customers have the option to have short or even empty suffixes if needed to leave rooms for other configuration names. The checks in domain validation eventually makes sure that the resultant names are valid although the domainUID size limit in the spec would relatively higher than we current have in this PR.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1979#discussion_r504687040", "createdAt": "2020-10-14T13:42:45Z", "author": {"login": "doxiao"}, "path": "operator/src/main/java/oracle/kubernetes/weblogic/domain/model/Domain.java", "diffHunk": "@@ -628,10 +653,65 @@ public boolean equals(Object other) {\n       verifyNoAlternateSecretNamespaceSpecified();\n       addMissingModelConfigMap(kubernetesResources);\n       verifyIstioExposingDefaultChannel();\n+      verifyIntrospectorJobName();\n \n       return failures;\n     }\n \n+    private void verifyIntrospectorJobName() {\n+      // K8S adds a 5 character suffix to an introspector job name\n+      if (LegalNames.toJobIntrospectorName(getDomainUid()).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH - 5) {\n+        failures.add(DomainValidationMessages.exceedMaxIntrospectorJobName(getDomainUid()));\n+      }\n+    }\n+\n+    private void verifyGeneratedResourceNames(WlsDomainConfig wlsDomainConfig) {\n+      checkGeneratedServerServiceName(wlsDomainConfig.getAdminServerName());\n+      if (isExternalServiceConfigured(getSpec())) {\n+        checkGeneratedExternalServiceName(wlsDomainConfig.getAdminServerName());\n+      }\n+\n+      // domain level serverConfigs do not contain servers in dynamic clusters\n+      wlsDomainConfig.getServerConfigs()\n+          .values()\n+          .stream()\n+          .map(WlsServerConfig::getName)\n+          .forEach(this::checkGeneratedServerServiceName);\n+      wlsDomainConfig.getClusterConfigs()\n+          .values()\n+          .iterator()\n+          .forEachRemaining(wlsClusterConfig\n+              // serverConfigs contains configured and dynamic servers in the cluster\n+              -> wlsClusterConfig.getServerConfigs().forEach(wlsServerConfig\n+                  -> this.checkGeneratedServerServiceName(wlsServerConfig.getName())));\n+      wlsDomainConfig.getClusterConfigs()\n+          .values()\n+          .iterator()\n+          .forEachRemaining(wlsClusterConfig -> this.checkGeneratedClusterServiceName(wlsClusterConfig.getName()));\n+    }\n+\n+    private void checkGeneratedExternalServiceName(String adminServerName) {\n+      if (LegalNames.toExternalServiceName(getDomainUid(), adminServerName).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH) {\n+        failures.add(DomainValidationMessages.exceedMaxExternalServiceName(getDomainUid(), adminServerName));\n+      }\n+    }\n+\n+    private void checkGeneratedServerServiceName(String serverName) {\n+      if (LegalNames.toServerServiceName(getDomainUid(), serverName).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH) {\n+        failures.add(DomainValidationMessages.exceedMaxServerServiceName(getDomainUid(), serverName));\n+      }\n+    }\n+\n+    private void checkGeneratedClusterServiceName(String clusterName) {\n+      if (LegalNames.toClusterServiceName(getDomainUid(), clusterName).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH) {\n+        failures.add(DomainValidationMessages.exceedMaxClusterServiceName(getDomainUid(), clusterName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA3NzgwMA=="}, "originalCommit": {"oid": "fe5c03f4b03543c6358e194a97276af4ade1c898"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc2MDg0NA==", "bodyText": "I'm fine with adding support for configuring the cluster infix - it's not critical IMO, but OTOH, now's a good time since 'the patient is open'.\nAs for increasing the spec schema max, I don't have a strong opinion but prefer leaving it at 45. That matches the old effective maximum, is relatively 'roomy', and itself only leaves a relatively minimal 23 characters for cluster or server names plus infix decorations.\nAs for implementing a dynamic max size for clustered server names based on cluster size, an additional consideration is backward compatibility for small clusters that are already at their max. Perhaps it's OK to introduce small backward compatibility issues like this, but, if not, then we could offer configurables to switch back to old behavior: for example 'maxServerServiceNameSizeSmallClusters' and 'maxServerServiceNameSizeMediumClusters'.\nIf there's time available, it'd be nice if postfix and infix values could be configured on a per domain basis as overrides for the current per operator settings. This would allow a problem domain to be handled without affecting other domains that might already be deployed - and could be especially helpful in production.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1979#discussion_r504760844", "createdAt": "2020-10-14T15:14:32Z", "author": {"login": "tbarnes-us"}, "path": "operator/src/main/java/oracle/kubernetes/weblogic/domain/model/Domain.java", "diffHunk": "@@ -628,10 +653,65 @@ public boolean equals(Object other) {\n       verifyNoAlternateSecretNamespaceSpecified();\n       addMissingModelConfigMap(kubernetesResources);\n       verifyIstioExposingDefaultChannel();\n+      verifyIntrospectorJobName();\n \n       return failures;\n     }\n \n+    private void verifyIntrospectorJobName() {\n+      // K8S adds a 5 character suffix to an introspector job name\n+      if (LegalNames.toJobIntrospectorName(getDomainUid()).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH - 5) {\n+        failures.add(DomainValidationMessages.exceedMaxIntrospectorJobName(getDomainUid()));\n+      }\n+    }\n+\n+    private void verifyGeneratedResourceNames(WlsDomainConfig wlsDomainConfig) {\n+      checkGeneratedServerServiceName(wlsDomainConfig.getAdminServerName());\n+      if (isExternalServiceConfigured(getSpec())) {\n+        checkGeneratedExternalServiceName(wlsDomainConfig.getAdminServerName());\n+      }\n+\n+      // domain level serverConfigs do not contain servers in dynamic clusters\n+      wlsDomainConfig.getServerConfigs()\n+          .values()\n+          .stream()\n+          .map(WlsServerConfig::getName)\n+          .forEach(this::checkGeneratedServerServiceName);\n+      wlsDomainConfig.getClusterConfigs()\n+          .values()\n+          .iterator()\n+          .forEachRemaining(wlsClusterConfig\n+              // serverConfigs contains configured and dynamic servers in the cluster\n+              -> wlsClusterConfig.getServerConfigs().forEach(wlsServerConfig\n+                  -> this.checkGeneratedServerServiceName(wlsServerConfig.getName())));\n+      wlsDomainConfig.getClusterConfigs()\n+          .values()\n+          .iterator()\n+          .forEachRemaining(wlsClusterConfig -> this.checkGeneratedClusterServiceName(wlsClusterConfig.getName()));\n+    }\n+\n+    private void checkGeneratedExternalServiceName(String adminServerName) {\n+      if (LegalNames.toExternalServiceName(getDomainUid(), adminServerName).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH) {\n+        failures.add(DomainValidationMessages.exceedMaxExternalServiceName(getDomainUid(), adminServerName));\n+      }\n+    }\n+\n+    private void checkGeneratedServerServiceName(String serverName) {\n+      if (LegalNames.toServerServiceName(getDomainUid(), serverName).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH) {\n+        failures.add(DomainValidationMessages.exceedMaxServerServiceName(getDomainUid(), serverName));\n+      }\n+    }\n+\n+    private void checkGeneratedClusterServiceName(String clusterName) {\n+      if (LegalNames.toClusterServiceName(getDomainUid(), clusterName).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH) {\n+        failures.add(DomainValidationMessages.exceedMaxClusterServiceName(getDomainUid(), clusterName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA3NzgwMA=="}, "originalCommit": {"oid": "fe5c03f4b03543c6358e194a97276af4ade1c898"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc3NjUwMA==", "bodyText": "I also think it is a good time to add customizable cluster infix after all the discussions.\nThe old effective maximum is 36 (not 45), because we have a longer introspector job name suffix.\nI am inclining to not introducing more knobs for backwards compatibility for this. But if we really want to, I marginally prefer adding a boolean to enable/disable the additional calculation for extending cluster size.\nPer domain suffix configuration is nice and more flexible for sure, it time permits.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1979#discussion_r504776500", "createdAt": "2020-10-14T15:34:48Z", "author": {"login": "doxiao"}, "path": "operator/src/main/java/oracle/kubernetes/weblogic/domain/model/Domain.java", "diffHunk": "@@ -628,10 +653,65 @@ public boolean equals(Object other) {\n       verifyNoAlternateSecretNamespaceSpecified();\n       addMissingModelConfigMap(kubernetesResources);\n       verifyIstioExposingDefaultChannel();\n+      verifyIntrospectorJobName();\n \n       return failures;\n     }\n \n+    private void verifyIntrospectorJobName() {\n+      // K8S adds a 5 character suffix to an introspector job name\n+      if (LegalNames.toJobIntrospectorName(getDomainUid()).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH - 5) {\n+        failures.add(DomainValidationMessages.exceedMaxIntrospectorJobName(getDomainUid()));\n+      }\n+    }\n+\n+    private void verifyGeneratedResourceNames(WlsDomainConfig wlsDomainConfig) {\n+      checkGeneratedServerServiceName(wlsDomainConfig.getAdminServerName());\n+      if (isExternalServiceConfigured(getSpec())) {\n+        checkGeneratedExternalServiceName(wlsDomainConfig.getAdminServerName());\n+      }\n+\n+      // domain level serverConfigs do not contain servers in dynamic clusters\n+      wlsDomainConfig.getServerConfigs()\n+          .values()\n+          .stream()\n+          .map(WlsServerConfig::getName)\n+          .forEach(this::checkGeneratedServerServiceName);\n+      wlsDomainConfig.getClusterConfigs()\n+          .values()\n+          .iterator()\n+          .forEachRemaining(wlsClusterConfig\n+              // serverConfigs contains configured and dynamic servers in the cluster\n+              -> wlsClusterConfig.getServerConfigs().forEach(wlsServerConfig\n+                  -> this.checkGeneratedServerServiceName(wlsServerConfig.getName())));\n+      wlsDomainConfig.getClusterConfigs()\n+          .values()\n+          .iterator()\n+          .forEachRemaining(wlsClusterConfig -> this.checkGeneratedClusterServiceName(wlsClusterConfig.getName()));\n+    }\n+\n+    private void checkGeneratedExternalServiceName(String adminServerName) {\n+      if (LegalNames.toExternalServiceName(getDomainUid(), adminServerName).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH) {\n+        failures.add(DomainValidationMessages.exceedMaxExternalServiceName(getDomainUid(), adminServerName));\n+      }\n+    }\n+\n+    private void checkGeneratedServerServiceName(String serverName) {\n+      if (LegalNames.toServerServiceName(getDomainUid(), serverName).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH) {\n+        failures.add(DomainValidationMessages.exceedMaxServerServiceName(getDomainUid(), serverName));\n+      }\n+    }\n+\n+    private void checkGeneratedClusterServiceName(String clusterName) {\n+      if (LegalNames.toClusterServiceName(getDomainUid(), clusterName).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH) {\n+        failures.add(DomainValidationMessages.exceedMaxClusterServiceName(getDomainUid(), clusterName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA3NzgwMA=="}, "originalCommit": {"oid": "fe5c03f4b03543c6358e194a97276af4ade1c898"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgyNjI4Nw==", "bodyText": "I'm fine with a boolean assuming we choose to worry about backward compat in this area in the first place. I think the two of us have reached a basic agreement on all points.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1979#discussion_r504826287", "createdAt": "2020-10-14T16:48:19Z", "author": {"login": "tbarnes-us"}, "path": "operator/src/main/java/oracle/kubernetes/weblogic/domain/model/Domain.java", "diffHunk": "@@ -628,10 +653,65 @@ public boolean equals(Object other) {\n       verifyNoAlternateSecretNamespaceSpecified();\n       addMissingModelConfigMap(kubernetesResources);\n       verifyIstioExposingDefaultChannel();\n+      verifyIntrospectorJobName();\n \n       return failures;\n     }\n \n+    private void verifyIntrospectorJobName() {\n+      // K8S adds a 5 character suffix to an introspector job name\n+      if (LegalNames.toJobIntrospectorName(getDomainUid()).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH - 5) {\n+        failures.add(DomainValidationMessages.exceedMaxIntrospectorJobName(getDomainUid()));\n+      }\n+    }\n+\n+    private void verifyGeneratedResourceNames(WlsDomainConfig wlsDomainConfig) {\n+      checkGeneratedServerServiceName(wlsDomainConfig.getAdminServerName());\n+      if (isExternalServiceConfigured(getSpec())) {\n+        checkGeneratedExternalServiceName(wlsDomainConfig.getAdminServerName());\n+      }\n+\n+      // domain level serverConfigs do not contain servers in dynamic clusters\n+      wlsDomainConfig.getServerConfigs()\n+          .values()\n+          .stream()\n+          .map(WlsServerConfig::getName)\n+          .forEach(this::checkGeneratedServerServiceName);\n+      wlsDomainConfig.getClusterConfigs()\n+          .values()\n+          .iterator()\n+          .forEachRemaining(wlsClusterConfig\n+              // serverConfigs contains configured and dynamic servers in the cluster\n+              -> wlsClusterConfig.getServerConfigs().forEach(wlsServerConfig\n+                  -> this.checkGeneratedServerServiceName(wlsServerConfig.getName())));\n+      wlsDomainConfig.getClusterConfigs()\n+          .values()\n+          .iterator()\n+          .forEachRemaining(wlsClusterConfig -> this.checkGeneratedClusterServiceName(wlsClusterConfig.getName()));\n+    }\n+\n+    private void checkGeneratedExternalServiceName(String adminServerName) {\n+      if (LegalNames.toExternalServiceName(getDomainUid(), adminServerName).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH) {\n+        failures.add(DomainValidationMessages.exceedMaxExternalServiceName(getDomainUid(), adminServerName));\n+      }\n+    }\n+\n+    private void checkGeneratedServerServiceName(String serverName) {\n+      if (LegalNames.toServerServiceName(getDomainUid(), serverName).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH) {\n+        failures.add(DomainValidationMessages.exceedMaxServerServiceName(getDomainUid(), serverName));\n+      }\n+    }\n+\n+    private void checkGeneratedClusterServiceName(String clusterName) {\n+      if (LegalNames.toClusterServiceName(getDomainUid(), clusterName).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH) {\n+        failures.add(DomainValidationMessages.exceedMaxClusterServiceName(getDomainUid(), clusterName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA3NzgwMA=="}, "originalCommit": {"oid": "fe5c03f4b03543c6358e194a97276af4ade1c898"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUzNTgyMw==", "bodyText": "Added code to adjust the upper limit based on the current cluster size with a new flag clusterSizePaddingValidationEnabled to enable additional padding validation.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1979#discussion_r505535823", "createdAt": "2020-10-15T13:20:44Z", "author": {"login": "doxiao"}, "path": "operator/src/main/java/oracle/kubernetes/weblogic/domain/model/Domain.java", "diffHunk": "@@ -628,10 +653,65 @@ public boolean equals(Object other) {\n       verifyNoAlternateSecretNamespaceSpecified();\n       addMissingModelConfigMap(kubernetesResources);\n       verifyIstioExposingDefaultChannel();\n+      verifyIntrospectorJobName();\n \n       return failures;\n     }\n \n+    private void verifyIntrospectorJobName() {\n+      // K8S adds a 5 character suffix to an introspector job name\n+      if (LegalNames.toJobIntrospectorName(getDomainUid()).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH - 5) {\n+        failures.add(DomainValidationMessages.exceedMaxIntrospectorJobName(getDomainUid()));\n+      }\n+    }\n+\n+    private void verifyGeneratedResourceNames(WlsDomainConfig wlsDomainConfig) {\n+      checkGeneratedServerServiceName(wlsDomainConfig.getAdminServerName());\n+      if (isExternalServiceConfigured(getSpec())) {\n+        checkGeneratedExternalServiceName(wlsDomainConfig.getAdminServerName());\n+      }\n+\n+      // domain level serverConfigs do not contain servers in dynamic clusters\n+      wlsDomainConfig.getServerConfigs()\n+          .values()\n+          .stream()\n+          .map(WlsServerConfig::getName)\n+          .forEach(this::checkGeneratedServerServiceName);\n+      wlsDomainConfig.getClusterConfigs()\n+          .values()\n+          .iterator()\n+          .forEachRemaining(wlsClusterConfig\n+              // serverConfigs contains configured and dynamic servers in the cluster\n+              -> wlsClusterConfig.getServerConfigs().forEach(wlsServerConfig\n+                  -> this.checkGeneratedServerServiceName(wlsServerConfig.getName())));\n+      wlsDomainConfig.getClusterConfigs()\n+          .values()\n+          .iterator()\n+          .forEachRemaining(wlsClusterConfig -> this.checkGeneratedClusterServiceName(wlsClusterConfig.getName()));\n+    }\n+\n+    private void checkGeneratedExternalServiceName(String adminServerName) {\n+      if (LegalNames.toExternalServiceName(getDomainUid(), adminServerName).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH) {\n+        failures.add(DomainValidationMessages.exceedMaxExternalServiceName(getDomainUid(), adminServerName));\n+      }\n+    }\n+\n+    private void checkGeneratedServerServiceName(String serverName) {\n+      if (LegalNames.toServerServiceName(getDomainUid(), serverName).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH) {\n+        failures.add(DomainValidationMessages.exceedMaxServerServiceName(getDomainUid(), serverName));\n+      }\n+    }\n+\n+    private void checkGeneratedClusterServiceName(String clusterName) {\n+      if (LegalNames.toClusterServiceName(getDomainUid(), clusterName).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH) {\n+        failures.add(DomainValidationMessages.exceedMaxClusterServiceName(getDomainUid(), clusterName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA3NzgwMA=="}, "originalCommit": {"oid": "fe5c03f4b03543c6358e194a97276af4ade1c898"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzQ1Mjc3OnYy", "diffSide": "RIGHT", "path": "operator/src/main/resources/Operator.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNjoxNTo1MFrOHguwNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOTo1MDo1NFrOHg237Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA4MjQ4Nw==", "bodyText": "For each of these, it might be helpful for the administrator to also include the maximum allowed length as well as the 'combination' that is exceeding the length.\nFor example:\nThe DomainUID ''{0}'' and cluster name ''{1}'' combination ''{2}'' exceeds maximum allowed length ''{3}''.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1979#discussion_r504082487", "createdAt": "2020-10-13T16:15:50Z", "author": {"login": "tbarnes-us"}, "path": "operator/src/main/resources/Operator.properties", "diffHunk": "@@ -208,6 +208,10 @@ exposing it.\n WLSDO-0014=The domain {0} introspect job failed, it will automatically retry in {1} seconds. Current number of  \\\n   retries = {2}\n WLSDO-0015=\"Retrying failed domain {0} introspect job, retry {1} of a maximum {2}.\"\n+WLSDO-0016=DomainUID ''{0}'' exceeds maximum allowed length.\n+WLSDO-0017=DomainUID ''{0}'' and cluster name ''{1}'' combination exceeds maximum allowed length.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe5c03f4b03543c6358e194a97276af4ade1c898"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIxNTUzMw==", "bodyText": "LGTM now", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1979#discussion_r504215533", "createdAt": "2020-10-13T19:50:54Z", "author": {"login": "tbarnes-us"}, "path": "operator/src/main/resources/Operator.properties", "diffHunk": "@@ -208,6 +208,10 @@ exposing it.\n WLSDO-0014=The domain {0} introspect job failed, it will automatically retry in {1} seconds. Current number of  \\\n   retries = {2}\n WLSDO-0015=\"Retrying failed domain {0} introspect job, retry {1} of a maximum {2}.\"\n+WLSDO-0016=DomainUID ''{0}'' exceeds maximum allowed length.\n+WLSDO-0017=DomainUID ''{0}'' and cluster name ''{1}'' combination exceeds maximum allowed length.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDA4MjQ4Nw=="}, "originalCommit": {"oid": "fe5c03f4b03543c6358e194a97276af4ade1c898"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODI3Njk4OnYy", "diffSide": "RIGHT", "path": "docs-source/out", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOTo0NjozMlrOHg2uuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOTo1MTowN1rOHg24bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIxMzE3OQ==", "bodyText": "This file looks like it was accidentally checked in.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1979#discussion_r504213179", "createdAt": "2020-10-13T19:46:32Z", "author": {"login": "tbarnes-us"}, "path": "docs-source/out", "diffHunk": "@@ -0,0 +1,351 @@\n+diff --git a/docs-source/content/faq/namespace-management.md b/docs-source/content/faq/namespace-management.md", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d305fc4c9258fa777b72bbf4cefc6c1ec9516761"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIxNTY2Mw==", "bodyText": "LGTM now", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1979#discussion_r504215663", "createdAt": "2020-10-13T19:51:07Z", "author": {"login": "tbarnes-us"}, "path": "docs-source/out", "diffHunk": "@@ -0,0 +1,351 @@\n+diff --git a/docs-source/content/faq/namespace-management.md b/docs-source/content/faq/namespace-management.md", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIxMzE3OQ=="}, "originalCommit": {"oid": "d305fc4c9258fa777b72bbf4cefc6c1ec9516761"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NzMzMzM2OnYy", "diffSide": "RIGHT", "path": "operator/src/main/java/oracle/kubernetes/weblogic/domain/model/Domain.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNTo0ODoyN1rOHiOftA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNjo1NjozNVrOHiRSLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY1MTEyNA==", "bodyText": "The limit should not be adjusted downward for clusters greater than size 99.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1979#discussion_r505651124", "createdAt": "2020-10-15T15:48:27Z", "author": {"login": "tbarnes-us"}, "path": "operator/src/main/java/oracle/kubernetes/weblogic/domain/model/Domain.java", "diffHunk": "@@ -628,10 +654,84 @@ public boolean equals(Object other) {\n       verifyNoAlternateSecretNamespaceSpecified();\n       addMissingModelConfigMap(kubernetesResources);\n       verifyIstioExposingDefaultChannel();\n+      verifyIntrospectorJobName();\n \n       return failures;\n     }\n \n+    private void verifyIntrospectorJobName() {\n+      // K8S adds a 5 character suffix to an introspector job name\n+      if (LegalNames.toJobIntrospectorName(getDomainUid()).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH - 5) {\n+        failures.add(DomainValidationMessages.exceedMaxIntrospectorJobName(\n+            getDomainUid(),\n+            LegalNames.toJobIntrospectorName(getDomainUid()),\n+            LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH - 5));\n+      }\n+    }\n+\n+    private void verifyGeneratedResourceNames(WlsDomainConfig wlsDomainConfig) {\n+      checkGeneratedServerServiceName(wlsDomainConfig.getAdminServerName(), -1);\n+      if (isExternalServiceConfigured(getSpec())) {\n+        checkGeneratedExternalServiceName(wlsDomainConfig.getAdminServerName());\n+      }\n+\n+      // domain level serverConfigs do not contain servers in dynamic clusters\n+      wlsDomainConfig.getServerConfigs()\n+          .values()\n+          .stream()\n+          .map(WlsServerConfig::getName)\n+          .forEach(serverName -> checkGeneratedServerServiceName(serverName, -1));\n+      wlsDomainConfig.getClusterConfigs()\n+          .values()\n+          .iterator()\n+          .forEachRemaining(wlsClusterConfig\n+              // serverConfigs contains configured and dynamic servers in the cluster\n+              -> wlsClusterConfig.getServerConfigs().forEach(wlsServerConfig\n+                  -> this.checkGeneratedServerServiceName(\n+                      wlsServerConfig.getName(), wlsClusterConfig.getServerConfigs().size())));\n+      wlsDomainConfig.getClusterConfigs()\n+          .values()\n+          .iterator()\n+          .forEachRemaining(wlsClusterConfig -> this.checkGeneratedClusterServiceName(wlsClusterConfig.getName()));\n+    }\n+\n+    private void checkGeneratedExternalServiceName(String adminServerName) {\n+      if (LegalNames.toExternalServiceName(getDomainUid(), adminServerName).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH) {\n+        failures.add(DomainValidationMessages.exceedMaxExternalServiceName(\n+            getDomainUid(),\n+            adminServerName,\n+            LegalNames.toExternalServiceName(getDomainUid(), adminServerName),\n+            LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH));\n+      }\n+    }\n+\n+    private void checkGeneratedServerServiceName(String serverName, int clusterSize) {\n+      int limit = LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH;\n+      if (Main.Namespaces.isClusterSizePaddingValidation() && clusterSize > 0) {\n+        limit = clusterSize >= 10 ? limit - 1 : limit - 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19132586efc8d3d8b386bb12e7356058dd8ea56c"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY5NjgxMw==", "bodyText": "Make sense. thanks.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1979#discussion_r505696813", "createdAt": "2020-10-15T16:56:35Z", "author": {"login": "doxiao"}, "path": "operator/src/main/java/oracle/kubernetes/weblogic/domain/model/Domain.java", "diffHunk": "@@ -628,10 +654,84 @@ public boolean equals(Object other) {\n       verifyNoAlternateSecretNamespaceSpecified();\n       addMissingModelConfigMap(kubernetesResources);\n       verifyIstioExposingDefaultChannel();\n+      verifyIntrospectorJobName();\n \n       return failures;\n     }\n \n+    private void verifyIntrospectorJobName() {\n+      // K8S adds a 5 character suffix to an introspector job name\n+      if (LegalNames.toJobIntrospectorName(getDomainUid()).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH - 5) {\n+        failures.add(DomainValidationMessages.exceedMaxIntrospectorJobName(\n+            getDomainUid(),\n+            LegalNames.toJobIntrospectorName(getDomainUid()),\n+            LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH - 5));\n+      }\n+    }\n+\n+    private void verifyGeneratedResourceNames(WlsDomainConfig wlsDomainConfig) {\n+      checkGeneratedServerServiceName(wlsDomainConfig.getAdminServerName(), -1);\n+      if (isExternalServiceConfigured(getSpec())) {\n+        checkGeneratedExternalServiceName(wlsDomainConfig.getAdminServerName());\n+      }\n+\n+      // domain level serverConfigs do not contain servers in dynamic clusters\n+      wlsDomainConfig.getServerConfigs()\n+          .values()\n+          .stream()\n+          .map(WlsServerConfig::getName)\n+          .forEach(serverName -> checkGeneratedServerServiceName(serverName, -1));\n+      wlsDomainConfig.getClusterConfigs()\n+          .values()\n+          .iterator()\n+          .forEachRemaining(wlsClusterConfig\n+              // serverConfigs contains configured and dynamic servers in the cluster\n+              -> wlsClusterConfig.getServerConfigs().forEach(wlsServerConfig\n+                  -> this.checkGeneratedServerServiceName(\n+                      wlsServerConfig.getName(), wlsClusterConfig.getServerConfigs().size())));\n+      wlsDomainConfig.getClusterConfigs()\n+          .values()\n+          .iterator()\n+          .forEachRemaining(wlsClusterConfig -> this.checkGeneratedClusterServiceName(wlsClusterConfig.getName()));\n+    }\n+\n+    private void checkGeneratedExternalServiceName(String adminServerName) {\n+      if (LegalNames.toExternalServiceName(getDomainUid(), adminServerName).length()\n+          > LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH) {\n+        failures.add(DomainValidationMessages.exceedMaxExternalServiceName(\n+            getDomainUid(),\n+            adminServerName,\n+            LegalNames.toExternalServiceName(getDomainUid(), adminServerName),\n+            LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH));\n+      }\n+    }\n+\n+    private void checkGeneratedServerServiceName(String serverName, int clusterSize) {\n+      int limit = LegalNames.LEGAL_DNS_LABEL_NAME_MAX_LENGTH;\n+      if (Main.Namespaces.isClusterSizePaddingValidation() && clusterSize > 0) {\n+        limit = clusterSize >= 10 ? limit - 1 : limit - 2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY1MTEyNA=="}, "originalCommit": {"oid": "19132586efc8d3d8b386bb12e7356058dd8ea56c"}, "originalPosition": 110}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4054, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}