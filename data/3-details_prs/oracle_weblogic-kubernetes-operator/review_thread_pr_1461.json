{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0OTY0ODk2", "number": 1461, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODo1MjozNFrODl52cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODo1NDo0MlrODl547g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDcxNzMwOnYy", "diffSide": "RIGHT", "path": "docs-source/content/faq/domain-secret-mismatch.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODo1MjozNFrOFzDnBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODo1NjoxNFrOFzDuKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA4MDgzNg==", "bodyText": "It looks a little odd that this a numbered list, since the list contains just one entry.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1461#discussion_r389080836", "createdAt": "2020-03-06T18:52:34Z", "author": {"login": "tbarnes-us"}, "path": "docs-source/content/faq/domain-secret-mismatch.md", "diffHunk": "@@ -54,9 +54,9 @@ may have different images under the same tag in their individual, local Docker r\n The simplest solution is to set `imagePullPolicy` to `Always`; however, the better solution would be to design your development\n pipeline to generate new Docker image tags on every build and to never reuse an existing tag.\n \n-### Domain on a persistent volume\n+#### Domain on a persistent volume\n \n-#### 1. Completely replacing the domain directory\n+##### 1. Completely replacing the domain directory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f34368d0635a2ad8848bba5f1c3bb4e22b146adf"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA4MjY2Nw==", "bodyText": "Good point. Maybe each entry, this one and the two above it, can be bulleted items. I'll confirm with @rjeberhard", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1461#discussion_r389082667", "createdAt": "2020-03-06T18:56:14Z", "author": {"login": "rosemarymarano"}, "path": "docs-source/content/faq/domain-secret-mismatch.md", "diffHunk": "@@ -54,9 +54,9 @@ may have different images under the same tag in their individual, local Docker r\n The simplest solution is to set `imagePullPolicy` to `Always`; however, the better solution would be to design your development\n pipeline to generate new Docker image tags on every build and to never reuse an existing tag.\n \n-### Domain on a persistent volume\n+#### Domain on a persistent volume\n \n-#### 1. Completely replacing the domain directory\n+##### 1. Completely replacing the domain directory", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA4MDgzNg=="}, "originalCommit": {"oid": "f34368d0635a2ad8848bba5f1c3bb4e22b146adf"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDcyMzY2OnYy", "diffSide": "RIGHT", "path": "docs-source/content/faq/external-clients.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODo1NDo0MlrOFzDrRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODo1NzoxOVrOFzDv_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA4MTkyNw==", "bodyText": "'for a remote client use' sounds a little odd to me 'for remote client use' sounds better to me", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1461#discussion_r389081927", "createdAt": "2020-03-06T18:54:42Z", "author": {"login": "tbarnes-us"}, "path": "docs-source/content/faq/external-clients.md", "diffHunk": "@@ -1,57 +1,57 @@\n ---\n-title: \"External WebLogic Clients\"\n+title: \"External WebLogic clients\"\n date: 2019-11-21T21:23:03Z\n draft: false\n weight: 80\n ---\n \n-### Approaches\n+#### Approaches\n \n-There are two supported approaches for giving external WebLogic EJB or JMS clients access to a Kubernetes hosted WebLogic cluster: [Load Balancer Tunneling](#load-balancer-tunneling) and [Kubernetes NodePorts](#kubernetes-nodeports).\n+There are two supported approaches for giving external WebLogic EJB or JMS clients access to a Kubernetes hosted WebLogic cluster: [Load balancer tunneling](#load-balancer-tunneling) and [Kubernetes NodePorts](#kubernetes-nodeports).\n \n {{% notice note %}}\n This FAQ is for remote EJB and JMS clients - not JTA clients. The operator does not currently support external WebLogic JTA access to a WebLogic cluster, as (A) external JTA access requires each server in the cluster to be individually addressable by the client, but this conflicts with (B) the current operator requirement that a network channel in a cluster have the same port across all servers in the cluster.\n {{% /notice %}}\n \n-#### Load Balancer Tunneling\n+##### Load balancer tunneling\n \n-The Load Balancer Tunneling approach for giving external WebLogic EJB or JMS clients access to a Kubernetes hosted WebLogic cluster involves configuring a network channel on the desired WebLogic cluster that accepts T3 protocol traffic that's tunnelled over HTTP, deploying a load balancer that redirects external HTTP network traffic to the desired WebLogic network channel, and ensuring that EJB and JMS clients specify a URL that resolves the load balancer's network address.  \n+The load balancer tunneling approach for giving external WebLogic EJB or JMS clients access to a Kubernetes hosted WebLogic cluster involves configuring a network channel on the desired WebLogic cluster that accepts T3 protocol traffic that's tunneled over HTTP, deploying a load balancer that redirects external HTTP network traffic to the desired WebLogic network channel, and ensuring that EJB and JMS clients specify a URL that resolves the load balancer's network address.  \n \n-Here are the specific steps:\n+Here are the steps:\n \n-- Configure a custom channel for the T3 protocol in WebLogic that (A) enables HTTP Tunneling, and (B) specifies an external address and port that correspond to the address and port remote clients will use to access the load balancer.  See  [Adding a WebLogic Custom Channel](#adding-a-weblogic-custom-channel) for samples and details.\n+- Configure a custom channel for the T3 protocol in WebLogic that (A) enables HTTP tunneling, and (B) specifies an external address and port that correspond to the address and port remote clients will use to access the load balancer.  See  [Adding a WebLogic custom channel](#adding-a-weblogic-custom-channel) for samples and details.\n \n-- Set up a load balancer that redirects HTTP traffic to the custom channel. For a discussion of load balancers, see [Ingress]({{<relref \"/userguide/managing-domains/ingress/_index.md\">}}). If you're also using OKE/OCI to host your Kubernetes cluster, also see [Using an OCI Load Balancer]({{<relref \"/faq/oci-lb\">}}).\n+- Set up a load balancer that redirects HTTP traffic to the custom channel. For more information on load balancers, see [Ingress]({{<relref \"/userguide/managing-domains/ingress/_index.md\">}}). If you're also using OKE/OCI to host your Kubernetes cluster, also see [Using an OCI Load Balancer]({{<relref \"/faq/oci-lb\">}}).\n \n - __Important__: Ensure that the load balancer configures the HTTP flow to be 'sticky' - for example, a Traefik load balancer has a `sticky sessions` option. This ensures that all of the packets of a tunneling client connection flow to the same pod, otherwise the connection will stall when its packets are load balanced to a different pod.\n \n - Remote clients can then access the custom channel using an `http://` URL instead of a `t3://` URL.\n \n-- Review the [Security Notes](#security-notes) below.\n+- Review the [Security notes](#security-notes).\n \n-#### Kubernetes NodePorts\n+##### Kubernetes NodePorts\n \n-The Kubernetes NodePorts approach for giving external WebLogic EJB or JMS clients access to a Kubernetes hosted WebLogic cluster involves configuring a network channel on the desired WebLogic cluster that accepts T3 protocol traffic, and deploying Kubernetes NodePort that redirects external network traffic on the Kubernetes nodes to the network channel.\n+The Kubernetes NodePorts approach for giving external WebLogic EJB or JMS clients access to a Kubernetes hosted WebLogic cluster involves configuring a network channel on the desired WebLogic cluster that accepts T3 protocol traffic, and deploying a Kubernetes NodePort that redirects external network traffic on the Kubernetes nodes to the network channel.\n \n-Here are the specific steps:\n+Here are the steps:\n \n-- Configure a custom channel for the T3 protocol in WebLogic that specifies an external address and port that are suitable for remote client use.  See [Adding a WebLogic Custom Channel](#adding-a-weblogic-custom-channel).\n+- Configure a custom channel for the T3 protocol in WebLogic that specifies an external address and port that are suitable for a remote client use.  See [Adding a WebLogic Custom Channel](#adding-a-weblogic-custom-channel).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f34368d0635a2ad8848bba5f1c3bb4e22b146adf"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA4MzEzNQ==", "bodyText": "Yep, I screwed that one up. I'll fix it.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1461#discussion_r389083135", "createdAt": "2020-03-06T18:57:19Z", "author": {"login": "rosemarymarano"}, "path": "docs-source/content/faq/external-clients.md", "diffHunk": "@@ -1,57 +1,57 @@\n ---\n-title: \"External WebLogic Clients\"\n+title: \"External WebLogic clients\"\n date: 2019-11-21T21:23:03Z\n draft: false\n weight: 80\n ---\n \n-### Approaches\n+#### Approaches\n \n-There are two supported approaches for giving external WebLogic EJB or JMS clients access to a Kubernetes hosted WebLogic cluster: [Load Balancer Tunneling](#load-balancer-tunneling) and [Kubernetes NodePorts](#kubernetes-nodeports).\n+There are two supported approaches for giving external WebLogic EJB or JMS clients access to a Kubernetes hosted WebLogic cluster: [Load balancer tunneling](#load-balancer-tunneling) and [Kubernetes NodePorts](#kubernetes-nodeports).\n \n {{% notice note %}}\n This FAQ is for remote EJB and JMS clients - not JTA clients. The operator does not currently support external WebLogic JTA access to a WebLogic cluster, as (A) external JTA access requires each server in the cluster to be individually addressable by the client, but this conflicts with (B) the current operator requirement that a network channel in a cluster have the same port across all servers in the cluster.\n {{% /notice %}}\n \n-#### Load Balancer Tunneling\n+##### Load balancer tunneling\n \n-The Load Balancer Tunneling approach for giving external WebLogic EJB or JMS clients access to a Kubernetes hosted WebLogic cluster involves configuring a network channel on the desired WebLogic cluster that accepts T3 protocol traffic that's tunnelled over HTTP, deploying a load balancer that redirects external HTTP network traffic to the desired WebLogic network channel, and ensuring that EJB and JMS clients specify a URL that resolves the load balancer's network address.  \n+The load balancer tunneling approach for giving external WebLogic EJB or JMS clients access to a Kubernetes hosted WebLogic cluster involves configuring a network channel on the desired WebLogic cluster that accepts T3 protocol traffic that's tunneled over HTTP, deploying a load balancer that redirects external HTTP network traffic to the desired WebLogic network channel, and ensuring that EJB and JMS clients specify a URL that resolves the load balancer's network address.  \n \n-Here are the specific steps:\n+Here are the steps:\n \n-- Configure a custom channel for the T3 protocol in WebLogic that (A) enables HTTP Tunneling, and (B) specifies an external address and port that correspond to the address and port remote clients will use to access the load balancer.  See  [Adding a WebLogic Custom Channel](#adding-a-weblogic-custom-channel) for samples and details.\n+- Configure a custom channel for the T3 protocol in WebLogic that (A) enables HTTP tunneling, and (B) specifies an external address and port that correspond to the address and port remote clients will use to access the load balancer.  See  [Adding a WebLogic custom channel](#adding-a-weblogic-custom-channel) for samples and details.\n \n-- Set up a load balancer that redirects HTTP traffic to the custom channel. For a discussion of load balancers, see [Ingress]({{<relref \"/userguide/managing-domains/ingress/_index.md\">}}). If you're also using OKE/OCI to host your Kubernetes cluster, also see [Using an OCI Load Balancer]({{<relref \"/faq/oci-lb\">}}).\n+- Set up a load balancer that redirects HTTP traffic to the custom channel. For more information on load balancers, see [Ingress]({{<relref \"/userguide/managing-domains/ingress/_index.md\">}}). If you're also using OKE/OCI to host your Kubernetes cluster, also see [Using an OCI Load Balancer]({{<relref \"/faq/oci-lb\">}}).\n \n - __Important__: Ensure that the load balancer configures the HTTP flow to be 'sticky' - for example, a Traefik load balancer has a `sticky sessions` option. This ensures that all of the packets of a tunneling client connection flow to the same pod, otherwise the connection will stall when its packets are load balanced to a different pod.\n \n - Remote clients can then access the custom channel using an `http://` URL instead of a `t3://` URL.\n \n-- Review the [Security Notes](#security-notes) below.\n+- Review the [Security notes](#security-notes).\n \n-#### Kubernetes NodePorts\n+##### Kubernetes NodePorts\n \n-The Kubernetes NodePorts approach for giving external WebLogic EJB or JMS clients access to a Kubernetes hosted WebLogic cluster involves configuring a network channel on the desired WebLogic cluster that accepts T3 protocol traffic, and deploying Kubernetes NodePort that redirects external network traffic on the Kubernetes nodes to the network channel.\n+The Kubernetes NodePorts approach for giving external WebLogic EJB or JMS clients access to a Kubernetes hosted WebLogic cluster involves configuring a network channel on the desired WebLogic cluster that accepts T3 protocol traffic, and deploying a Kubernetes NodePort that redirects external network traffic on the Kubernetes nodes to the network channel.\n \n-Here are the specific steps:\n+Here are the steps:\n \n-- Configure a custom channel for the T3 protocol in WebLogic that specifies an external address and port that are suitable for remote client use.  See [Adding a WebLogic Custom Channel](#adding-a-weblogic-custom-channel).\n+- Configure a custom channel for the T3 protocol in WebLogic that specifies an external address and port that are suitable for a remote client use.  See [Adding a WebLogic Custom Channel](#adding-a-weblogic-custom-channel).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA4MTkyNw=="}, "originalCommit": {"oid": "f34368d0635a2ad8848bba5f1c3bb4e22b146adf"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4607, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}