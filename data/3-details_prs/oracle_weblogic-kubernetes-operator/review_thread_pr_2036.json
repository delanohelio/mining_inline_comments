{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2ODc3MTIz", "number": 2036, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzowNDowMVrOE23QVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzowNDo1OVrOE23SNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTYzODYzOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDedicatedMode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzowNDowMVrOHv4paQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzo0Mzo0MFrOHv6RRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk3MzIyNQ==", "bodyText": "Is it possible to add t3channel to the existing MII domain used in the dedicated mode tests and use that to deploy the application using WLST instead of adding new domain? It saves time by not bringing up a new domain.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2036#discussion_r519973225", "createdAt": "2020-11-09T17:04:01Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDedicatedMode.java", "diffHunk": "@@ -289,6 +326,197 @@ public void testDedicatedModeNoCrd() {\n     }\n   }\n \n+  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c30adcb693b423532e0a88302bb6ed0ef0bb49a8"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk5OTgxNQ==", "bodyText": "I don't want to modify the common model file used for this image MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG because it is shared by many tests.\nSince anyway this test is running alone, the time it take to run this test shouldn't matter IMO.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2036#discussion_r519999815", "createdAt": "2020-11-09T17:43:40Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDedicatedMode.java", "diffHunk": "@@ -289,6 +326,197 @@ public void testDedicatedModeNoCrd() {\n     }\n   }\n \n+  /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk3MzIyNQ=="}, "originalCommit": {"oid": "c30adcb693b423532e0a88302bb6ed0ef0bb49a8"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTY0MTA1OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDedicatedMode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzowNDozMFrOHv4qwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzo0NDo0NVrOHv6UCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk3MzU2OQ==", "bodyText": "move this into an util class", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2036#discussion_r519973569", "createdAt": "2020-11-09T17:04:30Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDedicatedMode.java", "diffHunk": "@@ -397,6 +625,45 @@ private void verifyDomainNotRunning(String domainNamespace) {\n     }\n   }\n \n+  private static void verifyMemberHealth(String adminServerPodName, List<String> managedServerNames,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c30adcb693b423532e0a88302bb6ed0ef0bb49a8"}, "originalPosition": 290}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAwMDUyMA==", "bodyText": "This method uses a specific app deployed in the test method. Its not a member for util class.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2036#discussion_r520000520", "createdAt": "2020-11-09T17:44:45Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDedicatedMode.java", "diffHunk": "@@ -397,6 +625,45 @@ private void verifyDomainNotRunning(String domainNamespace) {\n     }\n   }\n \n+  private static void verifyMemberHealth(String adminServerPodName, List<String> managedServerNames,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk3MzU2OQ=="}, "originalCommit": {"oid": "c30adcb693b423532e0a88302bb6ed0ef0bb49a8"}, "originalPosition": 290}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTY0MzQxOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDedicatedMode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzowNDo1OVrOHv4sHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzo0NDo1N1rOHv6Udw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk3MzkxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                logger.info(\"techannel channel node port: {0}\", t3ChannelNodePort);\n          \n          \n            \n                logger.info(\"t3channel channel node port: {0}\", t3ChannelNodePort);", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2036#discussion_r519973919", "createdAt": "2020-11-09T17:04:59Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDedicatedMode.java", "diffHunk": "@@ -289,6 +326,197 @@ public void testDedicatedModeNoCrd() {\n     }\n   }\n \n+  /**\n+   * Test t3 channel access by deploying a app using WLST.\n+   * Test Creates a domain in persistent volume using WLST.\n+   * Verifies that the pods comes up and sample application deployment works.\n+   */\n+  @Order(6)\n+  @Test\n+  @DisplayName(\"Test admin server t3 channel access by deploying a application\")\n+  public void testAdminServerT3Channel() {\n+\n+    // create pull secrets for WebLogic image when running in non Kind Kubernetes cluster\n+    // this secret is used only for non-kind cluster\n+    createSecretForBaseImages(domain1Namespace);\n+\n+    // build the clusterview application\n+    Path distDir = BuildApplication.buildApplication(Paths.get(APP_DIR, \"clusterview\"), null, null,\n+        \"dist\", domain1Namespace);\n+    assertTrue(Paths.get(distDir.toString(),\n+        \"clusterview.war\").toFile().exists(),\n+        \"Application archive is not available\");\n+    Path clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n+\n+    final String domainUid = \"t3channeldomain\";\n+    final String clusterName = \"mycluster\";\n+\n+    final String adminServerName = \"admin-server\";\n+    final String adminServerPodName = domainUid + \"-\" + adminServerName;\n+\n+    final String managedServerNameBase = \"ms-\";\n+    String managedServerPodNamePrefix = domainUid + \"-\" + managedServerNameBase;\n+    final int managedServerPort = 8001;\n+\n+    int replicaCount = 2;\n+\n+    // in general the node port range has to be between 30,000 to 32,767\n+    // to avoid port conflict because of the delay in using it, the port here\n+    // starts with 30100\n+    final int t3ChannelPort = getNextFreePort(30172, 32767);\n+\n+    final String pvName = domainUid + \"-pv\"; // name of the persistent volume\n+    final String pvcName = domainUid + \"-pvc\"; // name of the persistent volume claim\n+\n+    // create WebLogic domain credential secret\n+    String wlSecretName = \"t3weblogic-credentials\";\n+    createSecretWithUsernamePassword(wlSecretName, domain1Namespace,\n+        ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n+\n+    // create persistent volume and persistent volume claim for domain\n+    // these resources should be labeled with domainUid for cleanup after testing\n+    createPV(pvName, domainUid, this.getClass().getSimpleName());\n+    createPVC(pvName, pvcName, domainUid, domain1Namespace);\n+\n+    // create a temporary WebLogic domain property file\n+    File domainPropertiesFile = assertDoesNotThrow(() ->\n+            File.createTempFile(\"domain\", \"properties\"),\n+        \"Failed to create domain properties file\");\n+    Properties p = new Properties();\n+    p.setProperty(\"domain_path\", \"/shared/domains\");\n+    p.setProperty(\"domain_name\", domainUid);\n+    p.setProperty(\"cluster_name\", clusterName);\n+    p.setProperty(\"admin_server_name\", adminServerName);\n+    p.setProperty(\"managed_server_port\", Integer.toString(managedServerPort));\n+    p.setProperty(\"admin_server_port\", \"7001\");\n+    p.setProperty(\"admin_username\", ADMIN_USERNAME_DEFAULT);\n+    p.setProperty(\"admin_password\", ADMIN_PASSWORD_DEFAULT);\n+    p.setProperty(\"admin_t3_public_address\", K8S_NODEPORT_HOST);\n+    p.setProperty(\"admin_t3_channel_port\", Integer.toString(t3ChannelPort));\n+    p.setProperty(\"number_of_ms\", \"2\");\n+    p.setProperty(\"managed_server_name_base\", managedServerNameBase);\n+    p.setProperty(\"domain_logs\", \"/shared/logs\");\n+    p.setProperty(\"production_mode_enabled\", \"true\");\n+    assertDoesNotThrow(() ->\n+            p.store(new FileOutputStream(domainPropertiesFile), \"domain properties file\"),\n+        \"Failed to write domain properties file\");\n+\n+    // WLST script for creating domain\n+    Path wlstScript = Paths.get(RESOURCE_DIR, \"python-scripts\", \"wlst-create-domain-onpv.py\");\n+\n+    logger.info(\"Preparing to run create domain job using WLST\");\n+\n+    List<Path> domainScriptFiles = new ArrayList<>();\n+    domainScriptFiles.add(wlstScript);\n+    domainScriptFiles.add(domainPropertiesFile.toPath());\n+\n+    logger.info(\"Creating a config map to hold domain creation scripts\");\n+    String domainScriptConfigMapName = \"create-domain-scripts-cm\";\n+    assertDoesNotThrow(\n+        () -> createConfigMapForDomainCreation(\n+            domainScriptConfigMapName, domainScriptFiles, domain1Namespace, this.getClass().getSimpleName()),\n+        \"Create configmap for domain creation failed\");\n+\n+    // create a V1Container with specific scripts and properties for creating domain\n+    V1Container jobCreationContainer = new V1Container()\n+        .addCommandItem(\"/bin/sh\")\n+        .addArgsItem(\"/u01/oracle/oracle_common/common/bin/wlst.sh\")\n+        .addArgsItem(\"/u01/weblogic/\" + wlstScript.getFileName()) //wlst.sh script\n+        .addArgsItem(\"-skipWLSModuleScanning\")\n+        .addArgsItem(\"-loadProperties\")\n+        .addArgsItem(\"/u01/weblogic/\" + domainPropertiesFile.getName()); //domain property file\n+\n+    logger.info(\"Running a Kubernetes job to create the domain\");\n+    createDomainJob(WEBLOGIC_IMAGE_TO_USE_IN_SPEC, pvName, pvcName, domainScriptConfigMapName,\n+        domain1Namespace, jobCreationContainer);\n+\n+    // create a domain custom resource configuration object\n+    logger.info(\"Creating domain custom resource\");\n+    Domain domain = new Domain()\n+        .apiVersion(DOMAIN_API_VERSION)\n+        .kind(\"Domain\")\n+        .metadata(new V1ObjectMeta()\n+            .name(domainUid)\n+            .namespace(domain1Namespace))\n+        .spec(new DomainSpec()\n+            .domainUid(domainUid)\n+            .domainHome(\"/shared/domains/\" + domainUid)  // point to domain home in pv\n+            .domainHomeSourceType(\"PersistentVolume\") // set the domain home source type as pv\n+            .image(WEBLOGIC_IMAGE_TO_USE_IN_SPEC)\n+            .imagePullPolicy(\"IfNotPresent\")\n+            .imagePullSecrets(Arrays.asList(\n+                new V1LocalObjectReference()\n+                    .name(BASE_IMAGES_REPO_SECRET)))  // this secret is used only in non-kind cluster\n+            .webLogicCredentialsSecret(new V1SecretReference()\n+                .name(wlSecretName)\n+                .namespace(domain1Namespace))\n+            .includeServerOutInPodLog(true)\n+            .logHomeEnabled(Boolean.TRUE)\n+            .logHome(\"/shared/logs/\" + domainUid)\n+            .dataHome(\"\")\n+            .serverStartPolicy(\"IF_NEEDED\")\n+            .serverPod(new ServerPod() //serverpod\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"USER_MEM_ARGS\")\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \"))\n+                .addVolumesItem(new V1Volume()\n+                    .name(pvName)\n+                    .persistentVolumeClaim(new V1PersistentVolumeClaimVolumeSource()\n+                        .claimName(pvcName)))\n+                .addVolumeMountsItem(new V1VolumeMount()\n+                    .mountPath(\"/shared\")\n+                    .name(pvName)))\n+            .adminServer(new AdminServer() //admin server\n+                .serverStartState(\"RUNNING\")\n+                .adminService(new AdminService()\n+                    .addChannelsItem(new Channel()\n+                        .channelName(\"default\")\n+                        .nodePort(0))\n+                    .addChannelsItem(new Channel()\n+                        .channelName(\"T3Channel\")\n+                        .nodePort(t3ChannelPort))))\n+            .addClustersItem(new Cluster() //cluster\n+                .clusterName(clusterName)\n+                .replicas(replicaCount)\n+                .serverStartState(\"RUNNING\")));\n+\n+    // verify the domain custom resource is created\n+    createDomainAndVerify(domain, domain1Namespace);\n+\n+    // verify the admin server service and pod created\n+    checkPodReadyAndServiceExists(adminServerPodName, domainUid, domain1Namespace);\n+\n+    // verify managed server services and pods created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Checking managed server service and pod {0} is created in namespace {1}\",\n+          managedServerPodNamePrefix + i, domain1Namespace);\n+      checkPodReadyAndServiceExists(managedServerPodNamePrefix + i, domainUid, domain1Namespace);\n+    }\n+\n+    // deploy application and verify all servers functions normally\n+    logger.info(\"Getting node port for T3 channel\");\n+    int t3ChannelNodePort = assertDoesNotThrow(()\n+        -> getServiceNodePort(domain1Namespace, getExternalServicePodName(adminServerPodName), \"t3channel\"),\n+        \"Getting admin server t3channel node port failed\");\n+    logger.info(\"techannel channel node port: {0}\", t3ChannelNodePort);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c30adcb693b423532e0a88302bb6ed0ef0bb49a8"}, "originalPosition": 264}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAwMDYzMQ==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2036#discussion_r520000631", "createdAt": "2020-11-09T17:44:57Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDedicatedMode.java", "diffHunk": "@@ -289,6 +326,197 @@ public void testDedicatedModeNoCrd() {\n     }\n   }\n \n+  /**\n+   * Test t3 channel access by deploying a app using WLST.\n+   * Test Creates a domain in persistent volume using WLST.\n+   * Verifies that the pods comes up and sample application deployment works.\n+   */\n+  @Order(6)\n+  @Test\n+  @DisplayName(\"Test admin server t3 channel access by deploying a application\")\n+  public void testAdminServerT3Channel() {\n+\n+    // create pull secrets for WebLogic image when running in non Kind Kubernetes cluster\n+    // this secret is used only for non-kind cluster\n+    createSecretForBaseImages(domain1Namespace);\n+\n+    // build the clusterview application\n+    Path distDir = BuildApplication.buildApplication(Paths.get(APP_DIR, \"clusterview\"), null, null,\n+        \"dist\", domain1Namespace);\n+    assertTrue(Paths.get(distDir.toString(),\n+        \"clusterview.war\").toFile().exists(),\n+        \"Application archive is not available\");\n+    Path clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n+\n+    final String domainUid = \"t3channeldomain\";\n+    final String clusterName = \"mycluster\";\n+\n+    final String adminServerName = \"admin-server\";\n+    final String adminServerPodName = domainUid + \"-\" + adminServerName;\n+\n+    final String managedServerNameBase = \"ms-\";\n+    String managedServerPodNamePrefix = domainUid + \"-\" + managedServerNameBase;\n+    final int managedServerPort = 8001;\n+\n+    int replicaCount = 2;\n+\n+    // in general the node port range has to be between 30,000 to 32,767\n+    // to avoid port conflict because of the delay in using it, the port here\n+    // starts with 30100\n+    final int t3ChannelPort = getNextFreePort(30172, 32767);\n+\n+    final String pvName = domainUid + \"-pv\"; // name of the persistent volume\n+    final String pvcName = domainUid + \"-pvc\"; // name of the persistent volume claim\n+\n+    // create WebLogic domain credential secret\n+    String wlSecretName = \"t3weblogic-credentials\";\n+    createSecretWithUsernamePassword(wlSecretName, domain1Namespace,\n+        ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n+\n+    // create persistent volume and persistent volume claim for domain\n+    // these resources should be labeled with domainUid for cleanup after testing\n+    createPV(pvName, domainUid, this.getClass().getSimpleName());\n+    createPVC(pvName, pvcName, domainUid, domain1Namespace);\n+\n+    // create a temporary WebLogic domain property file\n+    File domainPropertiesFile = assertDoesNotThrow(() ->\n+            File.createTempFile(\"domain\", \"properties\"),\n+        \"Failed to create domain properties file\");\n+    Properties p = new Properties();\n+    p.setProperty(\"domain_path\", \"/shared/domains\");\n+    p.setProperty(\"domain_name\", domainUid);\n+    p.setProperty(\"cluster_name\", clusterName);\n+    p.setProperty(\"admin_server_name\", adminServerName);\n+    p.setProperty(\"managed_server_port\", Integer.toString(managedServerPort));\n+    p.setProperty(\"admin_server_port\", \"7001\");\n+    p.setProperty(\"admin_username\", ADMIN_USERNAME_DEFAULT);\n+    p.setProperty(\"admin_password\", ADMIN_PASSWORD_DEFAULT);\n+    p.setProperty(\"admin_t3_public_address\", K8S_NODEPORT_HOST);\n+    p.setProperty(\"admin_t3_channel_port\", Integer.toString(t3ChannelPort));\n+    p.setProperty(\"number_of_ms\", \"2\");\n+    p.setProperty(\"managed_server_name_base\", managedServerNameBase);\n+    p.setProperty(\"domain_logs\", \"/shared/logs\");\n+    p.setProperty(\"production_mode_enabled\", \"true\");\n+    assertDoesNotThrow(() ->\n+            p.store(new FileOutputStream(domainPropertiesFile), \"domain properties file\"),\n+        \"Failed to write domain properties file\");\n+\n+    // WLST script for creating domain\n+    Path wlstScript = Paths.get(RESOURCE_DIR, \"python-scripts\", \"wlst-create-domain-onpv.py\");\n+\n+    logger.info(\"Preparing to run create domain job using WLST\");\n+\n+    List<Path> domainScriptFiles = new ArrayList<>();\n+    domainScriptFiles.add(wlstScript);\n+    domainScriptFiles.add(domainPropertiesFile.toPath());\n+\n+    logger.info(\"Creating a config map to hold domain creation scripts\");\n+    String domainScriptConfigMapName = \"create-domain-scripts-cm\";\n+    assertDoesNotThrow(\n+        () -> createConfigMapForDomainCreation(\n+            domainScriptConfigMapName, domainScriptFiles, domain1Namespace, this.getClass().getSimpleName()),\n+        \"Create configmap for domain creation failed\");\n+\n+    // create a V1Container with specific scripts and properties for creating domain\n+    V1Container jobCreationContainer = new V1Container()\n+        .addCommandItem(\"/bin/sh\")\n+        .addArgsItem(\"/u01/oracle/oracle_common/common/bin/wlst.sh\")\n+        .addArgsItem(\"/u01/weblogic/\" + wlstScript.getFileName()) //wlst.sh script\n+        .addArgsItem(\"-skipWLSModuleScanning\")\n+        .addArgsItem(\"-loadProperties\")\n+        .addArgsItem(\"/u01/weblogic/\" + domainPropertiesFile.getName()); //domain property file\n+\n+    logger.info(\"Running a Kubernetes job to create the domain\");\n+    createDomainJob(WEBLOGIC_IMAGE_TO_USE_IN_SPEC, pvName, pvcName, domainScriptConfigMapName,\n+        domain1Namespace, jobCreationContainer);\n+\n+    // create a domain custom resource configuration object\n+    logger.info(\"Creating domain custom resource\");\n+    Domain domain = new Domain()\n+        .apiVersion(DOMAIN_API_VERSION)\n+        .kind(\"Domain\")\n+        .metadata(new V1ObjectMeta()\n+            .name(domainUid)\n+            .namespace(domain1Namespace))\n+        .spec(new DomainSpec()\n+            .domainUid(domainUid)\n+            .domainHome(\"/shared/domains/\" + domainUid)  // point to domain home in pv\n+            .domainHomeSourceType(\"PersistentVolume\") // set the domain home source type as pv\n+            .image(WEBLOGIC_IMAGE_TO_USE_IN_SPEC)\n+            .imagePullPolicy(\"IfNotPresent\")\n+            .imagePullSecrets(Arrays.asList(\n+                new V1LocalObjectReference()\n+                    .name(BASE_IMAGES_REPO_SECRET)))  // this secret is used only in non-kind cluster\n+            .webLogicCredentialsSecret(new V1SecretReference()\n+                .name(wlSecretName)\n+                .namespace(domain1Namespace))\n+            .includeServerOutInPodLog(true)\n+            .logHomeEnabled(Boolean.TRUE)\n+            .logHome(\"/shared/logs/\" + domainUid)\n+            .dataHome(\"\")\n+            .serverStartPolicy(\"IF_NEEDED\")\n+            .serverPod(new ServerPod() //serverpod\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"USER_MEM_ARGS\")\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \"))\n+                .addVolumesItem(new V1Volume()\n+                    .name(pvName)\n+                    .persistentVolumeClaim(new V1PersistentVolumeClaimVolumeSource()\n+                        .claimName(pvcName)))\n+                .addVolumeMountsItem(new V1VolumeMount()\n+                    .mountPath(\"/shared\")\n+                    .name(pvName)))\n+            .adminServer(new AdminServer() //admin server\n+                .serverStartState(\"RUNNING\")\n+                .adminService(new AdminService()\n+                    .addChannelsItem(new Channel()\n+                        .channelName(\"default\")\n+                        .nodePort(0))\n+                    .addChannelsItem(new Channel()\n+                        .channelName(\"T3Channel\")\n+                        .nodePort(t3ChannelPort))))\n+            .addClustersItem(new Cluster() //cluster\n+                .clusterName(clusterName)\n+                .replicas(replicaCount)\n+                .serverStartState(\"RUNNING\")));\n+\n+    // verify the domain custom resource is created\n+    createDomainAndVerify(domain, domain1Namespace);\n+\n+    // verify the admin server service and pod created\n+    checkPodReadyAndServiceExists(adminServerPodName, domainUid, domain1Namespace);\n+\n+    // verify managed server services and pods created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Checking managed server service and pod {0} is created in namespace {1}\",\n+          managedServerPodNamePrefix + i, domain1Namespace);\n+      checkPodReadyAndServiceExists(managedServerPodNamePrefix + i, domainUid, domain1Namespace);\n+    }\n+\n+    // deploy application and verify all servers functions normally\n+    logger.info(\"Getting node port for T3 channel\");\n+    int t3ChannelNodePort = assertDoesNotThrow(()\n+        -> getServiceNodePort(domain1Namespace, getExternalServicePodName(adminServerPodName), \"t3channel\"),\n+        \"Getting admin server t3channel node port failed\");\n+    logger.info(\"techannel channel node port: {0}\", t3ChannelNodePort);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk3MzkxOQ=="}, "originalCommit": {"oid": "c30adcb693b423532e0a88302bb6ed0ef0bb49a8"}, "originalPosition": 264}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3729, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}