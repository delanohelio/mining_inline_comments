{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2ODIzMTMy", "number": 1866, "title": "Verify fields that cause servers to be restarted", "bodyText": "This PR is to test fields on the domain that cause WebLogic server instance pods to be rolling restarted.\nJenkins parallel test passed at:\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/1149 (running time 7min 18 sec)\nJenkins sequential test passed at:\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/1150 (running time 18 min)", "createdAt": "2020-08-12T14:52:08Z", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1866", "merged": true, "mergeCommit": {"oid": "488c588a5327e0b7d432a207e909018e72412fa5"}, "closed": true, "closedAt": "2020-08-13T14:52:49Z", "author": {"login": "maggiehe00"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc4FEhFAH2gAyNDY2ODIzMTMyOjYwNzJhODMzNGM2YzE0M2UzM2ZmZDVhODNiOWMzYTY5MjUzYzdiMDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-UBALgFqTQ2NjM0MzA0NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6072a8334c6c143e33ffd5a83b9c3a69253c7b09", "author": {"user": {"login": "maggiehe00", "name": "Maggie He"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6072a8334c6c143e33ffd5a83b9c3a69253c7b09", "committedDate": "2020-07-24T14:40:18Z", "message": "First cut for pod restart"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13bfbb3730f0ded92ecaa9a86bec8c439e76a44b", "author": {"user": {"login": "maggiehe00", "name": "Maggie He"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/13bfbb3730f0ded92ecaa9a86bec8c439e76a44b", "committedDate": "2020-07-30T14:38:28Z", "message": "keep the change in ItDomainInImageWdt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbf6971711be379e01331a6617e4926ef96c3161", "author": {"user": {"login": "maggiehe00", "name": "Maggie He"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/dbf6971711be379e01331a6617e4926ef96c3161", "committedDate": "2020-08-04T14:34:35Z", "message": "move the test to ItPodsRestart"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd82bfd5f76c2ae8f880c1751fb6a7214f7dc619", "author": {"user": {"login": "maggiehe00", "name": "Maggie He"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/cd82bfd5f76c2ae8f880c1751fb6a7214f7dc619", "committedDate": "2020-08-05T19:07:25Z", "message": "revert some ealier change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a18112e4c08680c4c14da8f93a2695f355a260d", "author": {"user": {"login": "maggiehe00", "name": "Maggie He"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3a18112e4c08680c4c14da8f93a2695f355a260d", "committedDate": "2020-08-05T20:05:27Z", "message": "Merge remote-tracking branch 'origin/develop' into podrestart"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ade757bdae8721b6698f91bd3aeee1b0edcb1663", "author": {"user": {"login": "maggiehe00", "name": "Maggie He"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ade757bdae8721b6698f91bd3aeee1b0edcb1663", "committedDate": "2020-08-06T20:19:39Z", "message": "Move the field change verification right after patch domain"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c447618d3807dfcc74e571343a4bc41242de025", "author": {"user": {"login": "maggiehe00", "name": "Maggie He"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5c447618d3807dfcc74e571343a4bc41242de025", "committedDate": "2020-08-07T18:18:48Z", "message": "remove the order"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08a8901ffcfd969a504b646f648ed06eda7ba873", "author": {"user": {"login": "maggiehe00", "name": "Maggie He"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/08a8901ffcfd969a504b646f648ed06eda7ba873", "committedDate": "2020-08-11T23:17:51Z", "message": "Merge remote-tracking branch 'origin/develop' into podrestart"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe16c0bad1f24bda5b26e5707513114ef25ad99c", "author": {"user": {"login": "maggiehe00", "name": "Maggie He"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/fe16c0bad1f24bda5b26e5707513114ef25ad99c", "committedDate": "2020-08-12T05:06:53Z", "message": "minor change"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MTI2Mjg4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1866#pullrequestreview-466126288", "createdAt": "2020-08-12T17:29:00Z", "commit": {"oid": "fe16c0bad1f24bda5b26e5707513114ef25ad99c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzoyOTowMFrOG_rW8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzoyOTozNVrOG_rYOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQyMzg1Nw==", "bodyText": "remove the empty line here.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1866#discussion_r469423857", "createdAt": "2020-08-12T17:29:00Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonPatchTestUtils.java", "diffHunk": "@@ -180,4 +180,26 @@ public static void checkPodRestartVersionUpdated(\n         String.format(\"Label weblogic.domainRestartVersion of pod %s in namespace %s has not been updated\",\n             podName, namespace));\n   }\n+\n+  /**\n+   * Patch the domain with the given string.\n+   *\n+   * @param domainUid unique domain identifier\n+   * @param domainNamespace the Kubernetes namespace where the domain is\n+   * @param patchStr the string for patching\n+   * @return true if successful, false otherwise\n+   */\n+  public static boolean patchDomainResource(String domainUid, String domainNamespace, StringBuffer patchStr) {\n+\n+    LoggingFacade logger = getLogger();\n+    logger.info(\"Modify domain resource for domain {0} in namespace {1} using patch string: {2}\",\n+        domainUid, domainNamespace, patchStr.toString());\n+\n+    V1Patch patch = new V1Patch(new String(patchStr));\n+\n+    return patchDomainCustomResource(domainUid, domainNamespace, patch, V1Patch.PATCH_FORMAT_JSON_PATCH);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe16c0bad1f24bda5b26e5707513114ef25ad99c"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQyNDE4NQ==", "bodyText": "remove empty line here", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1866#discussion_r469424185", "createdAt": "2020-08-12T17:29:35Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "diffHunk": "@@ -222,8 +206,288 @@ public void testServerPodsRestartByChangingResource() {\n     assertEquals(requests.get(\"cpu\").getNumber().compareTo(cpuRequest), 0,\n         String.format(\"server pod compute resources requests was not updated correctly, set cpu request to %s, got %s\",\n             cpuRequest, requests.get(\"cpu\").getNumber()));\n+\n+    // verify the server pods are rolling restarted and back to ready state\n+    logger.info(\"Verifying rolling restart occurred for domain {0} in namespace {1}\",\n+        domainUid, domainNamespace);\n+    assertTrue(assertDoesNotThrow(\n+        () -> verifyRollingRestartOccurred(podsWithTimeStamps, 1, domainNamespace),\n+        \"More than one pod was restarted at same time\"),\n+        String.format(\"Rolling restart failed for domain %s in namespace %s\", domainUid, domainNamespace));\n+\n+  }\n+\n+  /**\n+   * Modify the domain scope property on the domain resource.\n+   * Verify all pods are restarted and back to ready state.\n+   * The resource tested: includeServerOutInPodLog: true --> includeServerOutInPodLog: false.\n+   */\n+  @Test\n+  @DisplayName(\"Verify server pods are restarted by changing IncludeServerOutInPodLog\")\n+  @Slow\n+  public void testServerPodsRestartByChangingIncludeServerOutInPodLog() {\n+    // get the original domain resource before update\n+    Domain domain1 = assertDoesNotThrow(() -> getDomainCustomResource(domainUid, domainNamespace),\n+        String.format(\"getDomainCustomResource failed with ApiException when tried to get domain %s in namespace %s\",\n+            domainUid, domainNamespace));\n+    assertNotNull(domain1, domain1 + \" is null\");\n+    assertNotNull(domain1.getSpec(), domain1 + \"/spec is null\");\n+\n+    // get the map with server pods and their original creation timestamps\n+    podsWithTimeStamps = getPodsWithTimeStamps();\n+\n+    //print out the original IncludeServerOutInPodLog\n+    Boolean includeServerOutInPodLog = domain1.getSpec().getIncludeServerOutInPodLog();\n+    logger.info(\"Original IncludeServerOutInPodLog is: {0}\", includeServerOutInPodLog);\n+\n+    //change includeServerOutInPodLog: true --> includeServerOutInPodLog: false\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/includeServerOutInPodLog\\\",\")\n+        .append(\"\\\"value\\\": \")\n+        .append(false)\n+        .append(\"}]\");\n+    logger.info(\"PatchStr for includeServerOutInPodLog: {0}\", patchStr.toString());\n+\n+    boolean cmPatched = patchDomainResource(domainUid, domainNamespace, patchStr);\n+    assertTrue(cmPatched, \"patchDomainCustomResource(IncludeServerOutInPodLog) failed\");\n+\n+    domain1 = assertDoesNotThrow(() -> getDomainCustomResource(domainUid, domainNamespace),\n+        String.format(\"getDomainCustomResource failed with ApiException when tried to get domain %s in namespace %s\",\n+            domainUid, domainNamespace));\n+    assertNotNull(domain1, domain1 + \" is null\");\n+    assertNotNull(domain1.getSpec(), domain1 + \"/spec is null\");\n+\n+    includeServerOutInPodLog = domain1.getSpec().getIncludeServerOutInPodLog();\n+    logger.info(\"In the new patched domain IncludeServerOutInPodLog is: {0}\",\n+        includeServerOutInPodLog);\n+    assertFalse(includeServerOutInPodLog, \"IncludeServerOutInPodLog was not updated\");\n+\n+    // verify the server pods are rolling restarted and back to ready state\n+    logger.info(\"Verifying rolling restart occurred for domain {0} in namespace {1}\",\n+        domainUid, domainNamespace);\n+    assertTrue(assertDoesNotThrow(\n+        () -> verifyRollingRestartOccurred(podsWithTimeStamps, 1, domainNamespace),\n+        \"More than one pod was restarted at same time\"),\n+        String.format(\"Rolling restart failed for domain %s in namespace %s\", domainUid, domainNamespace));\n+\n+  }\n+\n+  /**\n+   * Modify domain scope serverPod env property on the domain resource.\n+   * Verify all pods are restarted and back to ready state.\n+   * The env property tested: \"-Dweblogic.StdoutDebugEnabled=false\" --> \"-Dweblogic.StdoutDebugEnabled=true\".\n+   */\n+  @Test\n+  @DisplayName(\"Verify server pods are restarted by changing serverPod env property\")\n+  @Slow\n+  public void testServerPodsRestartByChangingEnvProperty() {\n+    // get the original domain resource before update\n+    Domain domain1 = assertDoesNotThrow(() -> getDomainCustomResource(domainUid, domainNamespace),\n+        String.format(\"getDomainCustomResource failed with ApiException when tried to get domain %s in namespace %s\",\n+            domainUid, domainNamespace));\n+    assertNotNull(domain1, domain1 + \" is null\");\n+    assertNotNull(domain1.getSpec(), domain1 + \" /spec/serverPod is null\");\n+    assertNotNull(domain1.getSpec().getServerPod(), domain1 + \" /spec/serverPod is null\");\n+    assertNotNull(domain1.getSpec().getServerPod().getEnv(), domain1 + \"/spec/serverPod/env is null\");\n+\n+    // get the map with server pods and their original creation timestamps\n+    podsWithTimeStamps = getPodsWithTimeStamps();\n+\n+    //print out the original env\n+    List<V1EnvVar> envList = domain1.getSpec().getServerPod().getEnv();\n+    envList.forEach(env -> {\n+      logger.info(\"The name is: {0}, value is: {1}\", env.getName(), env.getValue());\n+      if (env.getName().equalsIgnoreCase(\"JAVA_OPTIONS\")\n+          && env.getValue().equalsIgnoreCase(\"-Dweblogic.StdoutDebugEnabled=false\")) {\n+        logger.info(\"Change JAVA_OPTIONS to -Dweblogic.StdoutDebugEnabled=true\");\n+        StringBuffer patchStr = null;\n+        patchStr = new StringBuffer(\"[{\");\n+        patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+            .append(\" \\\"path\\\": \\\"/spec/serverPod/env/0/value\\\",\")\n+            .append(\"\\\"value\\\": \\\"\")\n+            .append(\"-Dweblogic.StdoutDebugEnabled=true\")\n+            .append(\"\\\"}]\");\n+        logger.info(\"PatchStr for JAVA_OPTIONS {0}\", patchStr.toString());\n+\n+        boolean cmPatched = patchDomainResource(domainUid, domainNamespace, patchStr);\n+        assertTrue(cmPatched, \"patchDomainCustomResource(StdoutDebugEnabled=true) failed\");\n+      }\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe16c0bad1f24bda5b26e5707513114ef25ad99c"}, "originalPosition": 197}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MTM4MzEw", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1866#pullrequestreview-466138310", "createdAt": "2020-08-12T17:45:25Z", "commit": {"oid": "fe16c0bad1f24bda5b26e5707513114ef25ad99c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzo0NToyNVrOG_r7ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzo0NToyNVrOG_r7ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQzMzI3NA==", "bodyText": "If the domain1 is Null, it will throw a NPE. We can change the statement to\nassertNotNull(domain1, \"Got Null Domain Resource after patching \");", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1866#discussion_r469433274", "createdAt": "2020-08-12T17:45:25Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "diffHunk": "@@ -222,8 +206,288 @@ public void testServerPodsRestartByChangingResource() {\n     assertEquals(requests.get(\"cpu\").getNumber().compareTo(cpuRequest), 0,\n         String.format(\"server pod compute resources requests was not updated correctly, set cpu request to %s, got %s\",\n             cpuRequest, requests.get(\"cpu\").getNumber()));\n+\n+    // verify the server pods are rolling restarted and back to ready state\n+    logger.info(\"Verifying rolling restart occurred for domain {0} in namespace {1}\",\n+        domainUid, domainNamespace);\n+    assertTrue(assertDoesNotThrow(\n+        () -> verifyRollingRestartOccurred(podsWithTimeStamps, 1, domainNamespace),\n+        \"More than one pod was restarted at same time\"),\n+        String.format(\"Rolling restart failed for domain %s in namespace %s\", domainUid, domainNamespace));\n+\n+  }\n+\n+  /**\n+   * Modify the domain scope property on the domain resource.\n+   * Verify all pods are restarted and back to ready state.\n+   * The resource tested: includeServerOutInPodLog: true --> includeServerOutInPodLog: false.\n+   */\n+  @Test\n+  @DisplayName(\"Verify server pods are restarted by changing IncludeServerOutInPodLog\")\n+  @Slow\n+  public void testServerPodsRestartByChangingIncludeServerOutInPodLog() {\n+    // get the original domain resource before update\n+    Domain domain1 = assertDoesNotThrow(() -> getDomainCustomResource(domainUid, domainNamespace),\n+        String.format(\"getDomainCustomResource failed with ApiException when tried to get domain %s in namespace %s\",\n+            domainUid, domainNamespace));\n+    assertNotNull(domain1, domain1 + \" is null\");\n+    assertNotNull(domain1.getSpec(), domain1 + \"/spec is null\");\n+\n+    // get the map with server pods and their original creation timestamps\n+    podsWithTimeStamps = getPodsWithTimeStamps();\n+\n+    //print out the original IncludeServerOutInPodLog\n+    Boolean includeServerOutInPodLog = domain1.getSpec().getIncludeServerOutInPodLog();\n+    logger.info(\"Original IncludeServerOutInPodLog is: {0}\", includeServerOutInPodLog);\n+\n+    //change includeServerOutInPodLog: true --> includeServerOutInPodLog: false\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/includeServerOutInPodLog\\\",\")\n+        .append(\"\\\"value\\\": \")\n+        .append(false)\n+        .append(\"}]\");\n+    logger.info(\"PatchStr for includeServerOutInPodLog: {0}\", patchStr.toString());\n+\n+    boolean cmPatched = patchDomainResource(domainUid, domainNamespace, patchStr);\n+    assertTrue(cmPatched, \"patchDomainCustomResource(IncludeServerOutInPodLog) failed\");\n+\n+    domain1 = assertDoesNotThrow(() -> getDomainCustomResource(domainUid, domainNamespace),\n+        String.format(\"getDomainCustomResource failed with ApiException when tried to get domain %s in namespace %s\",\n+            domainUid, domainNamespace));\n+    assertNotNull(domain1, domain1 + \" is null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe16c0bad1f24bda5b26e5707513114ef25ad99c"}, "originalPosition": 138}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MTM4NDQz", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1866#pullrequestreview-466138443", "createdAt": "2020-08-12T17:45:36Z", "commit": {"oid": "fe16c0bad1f24bda5b26e5707513114ef25ad99c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzo0NTozN1rOG_r8SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzo0NTozN1rOG_r8SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQzMzQxNg==", "bodyText": "If the domain1 is Null, it will throw a NPE. We can change the statement to\nassertNotNull(domain1, \"Got Null Domain Resource after patching \");\nCheck same thing for all occurrences", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1866#discussion_r469433416", "createdAt": "2020-08-12T17:45:37Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItPodsRestart.java", "diffHunk": "@@ -222,8 +206,288 @@ public void testServerPodsRestartByChangingResource() {\n     assertEquals(requests.get(\"cpu\").getNumber().compareTo(cpuRequest), 0,\n         String.format(\"server pod compute resources requests was not updated correctly, set cpu request to %s, got %s\",\n             cpuRequest, requests.get(\"cpu\").getNumber()));\n+\n+    // verify the server pods are rolling restarted and back to ready state\n+    logger.info(\"Verifying rolling restart occurred for domain {0} in namespace {1}\",\n+        domainUid, domainNamespace);\n+    assertTrue(assertDoesNotThrow(\n+        () -> verifyRollingRestartOccurred(podsWithTimeStamps, 1, domainNamespace),\n+        \"More than one pod was restarted at same time\"),\n+        String.format(\"Rolling restart failed for domain %s in namespace %s\", domainUid, domainNamespace));\n+\n+  }\n+\n+  /**\n+   * Modify the domain scope property on the domain resource.\n+   * Verify all pods are restarted and back to ready state.\n+   * The resource tested: includeServerOutInPodLog: true --> includeServerOutInPodLog: false.\n+   */\n+  @Test\n+  @DisplayName(\"Verify server pods are restarted by changing IncludeServerOutInPodLog\")\n+  @Slow\n+  public void testServerPodsRestartByChangingIncludeServerOutInPodLog() {\n+    // get the original domain resource before update\n+    Domain domain1 = assertDoesNotThrow(() -> getDomainCustomResource(domainUid, domainNamespace),\n+        String.format(\"getDomainCustomResource failed with ApiException when tried to get domain %s in namespace %s\",\n+            domainUid, domainNamespace));\n+    assertNotNull(domain1, domain1 + \" is null\");\n+    assertNotNull(domain1.getSpec(), domain1 + \"/spec is null\");\n+\n+    // get the map with server pods and their original creation timestamps\n+    podsWithTimeStamps = getPodsWithTimeStamps();\n+\n+    //print out the original IncludeServerOutInPodLog\n+    Boolean includeServerOutInPodLog = domain1.getSpec().getIncludeServerOutInPodLog();\n+    logger.info(\"Original IncludeServerOutInPodLog is: {0}\", includeServerOutInPodLog);\n+\n+    //change includeServerOutInPodLog: true --> includeServerOutInPodLog: false\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/includeServerOutInPodLog\\\",\")\n+        .append(\"\\\"value\\\": \")\n+        .append(false)\n+        .append(\"}]\");\n+    logger.info(\"PatchStr for includeServerOutInPodLog: {0}\", patchStr.toString());\n+\n+    boolean cmPatched = patchDomainResource(domainUid, domainNamespace, patchStr);\n+    assertTrue(cmPatched, \"patchDomainCustomResource(IncludeServerOutInPodLog) failed\");\n+\n+    domain1 = assertDoesNotThrow(() -> getDomainCustomResource(domainUid, domainNamespace),\n+        String.format(\"getDomainCustomResource failed with ApiException when tried to get domain %s in namespace %s\",\n+            domainUid, domainNamespace));\n+    assertNotNull(domain1, domain1 + \" is null\");\n+    assertNotNull(domain1.getSpec(), domain1 + \"/spec is null\");\n+\n+    includeServerOutInPodLog = domain1.getSpec().getIncludeServerOutInPodLog();\n+    logger.info(\"In the new patched domain IncludeServerOutInPodLog is: {0}\",\n+        includeServerOutInPodLog);\n+    assertFalse(includeServerOutInPodLog, \"IncludeServerOutInPodLog was not updated\");\n+\n+    // verify the server pods are rolling restarted and back to ready state\n+    logger.info(\"Verifying rolling restart occurred for domain {0} in namespace {1}\",\n+        domainUid, domainNamespace);\n+    assertTrue(assertDoesNotThrow(\n+        () -> verifyRollingRestartOccurred(podsWithTimeStamps, 1, domainNamespace),\n+        \"More than one pod was restarted at same time\"),\n+        String.format(\"Rolling restart failed for domain %s in namespace %s\", domainUid, domainNamespace));\n+\n+  }\n+\n+  /**\n+   * Modify domain scope serverPod env property on the domain resource.\n+   * Verify all pods are restarted and back to ready state.\n+   * The env property tested: \"-Dweblogic.StdoutDebugEnabled=false\" --> \"-Dweblogic.StdoutDebugEnabled=true\".\n+   */\n+  @Test\n+  @DisplayName(\"Verify server pods are restarted by changing serverPod env property\")\n+  @Slow\n+  public void testServerPodsRestartByChangingEnvProperty() {\n+    // get the original domain resource before update\n+    Domain domain1 = assertDoesNotThrow(() -> getDomainCustomResource(domainUid, domainNamespace),\n+        String.format(\"getDomainCustomResource failed with ApiException when tried to get domain %s in namespace %s\",\n+            domainUid, domainNamespace));\n+    assertNotNull(domain1, domain1 + \" is null\");\n+    assertNotNull(domain1.getSpec(), domain1 + \" /spec/serverPod is null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe16c0bad1f24bda5b26e5707513114ef25ad99c"}, "originalPosition": 170}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MTU3MzI0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1866#pullrequestreview-466157324", "createdAt": "2020-08-12T18:12:03Z", "commit": {"oid": "fe16c0bad1f24bda5b26e5707513114ef25ad99c"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ac28977025f655c5a3a08c0fea91a46913c9206", "author": {"user": {"login": "maggiehe00", "name": "Maggie He"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0ac28977025f655c5a3a08c0fea91a46913c9206", "committedDate": "2020-08-12T21:33:36Z", "message": "address the review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01f2260adcbe7b26a18e3b0c86922a335b0b6306", "author": {"user": {"login": "maggiehe00", "name": "Maggie He"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/01f2260adcbe7b26a18e3b0c86922a335b0b6306", "committedDate": "2020-08-12T21:39:16Z", "message": "minor change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20762b6bbc744b9c86373e9a35ade86e44749063", "author": {"user": {"login": "maggiehe00", "name": "Maggie He"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/20762b6bbc744b9c86373e9a35ade86e44749063", "committedDate": "2020-08-12T21:40:41Z", "message": "Merge remote-tracking branch 'origin/develop' into podrestart"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MzE2NjI2", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1866#pullrequestreview-466316626", "createdAt": "2020-08-12T22:21:15Z", "commit": {"oid": "20762b6bbc744b9c86373e9a35ade86e44749063"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MzQzMDQ1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1866#pullrequestreview-466343045", "createdAt": "2020-08-12T23:28:35Z", "commit": {"oid": "20762b6bbc744b9c86373e9a35ade86e44749063"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4377, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}