{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1NjMyNjA5", "number": 1961, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDoyOToxOFrOEpgGYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMzowNzoyMVrOEpp5tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTUyOTk0OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDoyOToxOFrOHbNKIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxODowMTo0NVrOHbVZhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI4OTE4Ng==", "bodyText": "see if these lines can be replaced with below and remove try, catch\n      Command.withParams(new CommandParams()\n          .command(cmd)\n          .redirect(false)).execute()", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498289186", "createdAt": "2020-10-01T14:29:18Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -155,72 +193,116 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     // create secret for admin credentials\n     logger.info(\"Creating secret for admin credentials\");\n     adminSecretName = \"weblogic-credentials\";\n-    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n \n     // create model encryption secret\n     logger.info(\"Creating encryption secret\");\n     encryptionSecretName = \"encryptionsecret\";\n     createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n \n     // create the PV and PVC to store application and model files\n-    createPV(pvName, domainUid, \"ItMiiDomainModelInPV\");\n-    createPVC(pvName, pvcName, domainUid, domainNamespace);\n+    createPV(pvName, domainUid1, \"ItMiiDomainModelInPV\");\n+    createPVC(pvName, pvcName, domainUid1, domainNamespace);\n \n     // build the clusterview application\n     Path distDir = buildApplication(Paths.get(APP_DIR, \"clusterview\"),\n         null, null, \"dist\", domainNamespace);\n     clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n     assertTrue(clusterViewAppPath.toFile().exists(), \"Application archive is not available\");\n \n-    V1Pod webLogicPod = setupPVPod(domainNamespace);\n+    logger.info(\"Setting up WebLogic pod to access PV\");\n+    V1Pod pvPod = setupWebLogicPod(domainNamespace);\n \n+    ExecResult exec = null;\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/applications\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/applications\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/applications\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/applications\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69acea974f2b9a941e6243320c71074988ea2658"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM2MzcyOA==", "bodyText": "I am executing this command inside a pod. How  can I use Command.execute() ?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498363728", "createdAt": "2020-10-01T16:13:32Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -155,72 +193,116 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     // create secret for admin credentials\n     logger.info(\"Creating secret for admin credentials\");\n     adminSecretName = \"weblogic-credentials\";\n-    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n \n     // create model encryption secret\n     logger.info(\"Creating encryption secret\");\n     encryptionSecretName = \"encryptionsecret\";\n     createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n \n     // create the PV and PVC to store application and model files\n-    createPV(pvName, domainUid, \"ItMiiDomainModelInPV\");\n-    createPVC(pvName, pvcName, domainUid, domainNamespace);\n+    createPV(pvName, domainUid1, \"ItMiiDomainModelInPV\");\n+    createPVC(pvName, pvcName, domainUid1, domainNamespace);\n \n     // build the clusterview application\n     Path distDir = buildApplication(Paths.get(APP_DIR, \"clusterview\"),\n         null, null, \"dist\", domainNamespace);\n     clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n     assertTrue(clusterViewAppPath.toFile().exists(), \"Application archive is not available\");\n \n-    V1Pod webLogicPod = setupPVPod(domainNamespace);\n+    logger.info(\"Setting up WebLogic pod to access PV\");\n+    V1Pod pvPod = setupWebLogicPod(domainNamespace);\n \n+    ExecResult exec = null;\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/applications\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/applications\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/applications\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/applications\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI4OTE4Ng=="}, "originalCommit": {"oid": "69acea974f2b9a941e6243320c71074988ea2658"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQyNDE5Ng==", "bodyText": "Moved the exec command to CommonTestUtils and checking for non zero exit value, non null/empty stderr to assert the exec is successful.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498424196", "createdAt": "2020-10-01T18:01:45Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -155,72 +193,116 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     // create secret for admin credentials\n     logger.info(\"Creating secret for admin credentials\");\n     adminSecretName = \"weblogic-credentials\";\n-    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n \n     // create model encryption secret\n     logger.info(\"Creating encryption secret\");\n     encryptionSecretName = \"encryptionsecret\";\n     createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n \n     // create the PV and PVC to store application and model files\n-    createPV(pvName, domainUid, \"ItMiiDomainModelInPV\");\n-    createPVC(pvName, pvcName, domainUid, domainNamespace);\n+    createPV(pvName, domainUid1, \"ItMiiDomainModelInPV\");\n+    createPVC(pvName, pvcName, domainUid1, domainNamespace);\n \n     // build the clusterview application\n     Path distDir = buildApplication(Paths.get(APP_DIR, \"clusterview\"),\n         null, null, \"dist\", domainNamespace);\n     clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n     assertTrue(clusterViewAppPath.toFile().exists(), \"Application archive is not available\");\n \n-    V1Pod webLogicPod = setupPVPod(domainNamespace);\n+    logger.info(\"Setting up WebLogic pod to access PV\");\n+    V1Pod pvPod = setupWebLogicPod(domainNamespace);\n \n+    ExecResult exec = null;\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/applications\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/applications\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/applications\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/applications\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI4OTE4Ng=="}, "originalCommit": {"oid": "69acea974f2b9a941e6243320c71074988ea2658"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTUzMTMyOnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDoyOTozNVrOHbNK-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxODowMTo1OFrOHbVaBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI4OTQwMw==", "bodyText": "same as above", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498289403", "createdAt": "2020-10-01T14:29:35Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -155,72 +193,116 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     // create secret for admin credentials\n     logger.info(\"Creating secret for admin credentials\");\n     adminSecretName = \"weblogic-credentials\";\n-    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n \n     // create model encryption secret\n     logger.info(\"Creating encryption secret\");\n     encryptionSecretName = \"encryptionsecret\";\n     createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n \n     // create the PV and PVC to store application and model files\n-    createPV(pvName, domainUid, \"ItMiiDomainModelInPV\");\n-    createPVC(pvName, pvcName, domainUid, domainNamespace);\n+    createPV(pvName, domainUid1, \"ItMiiDomainModelInPV\");\n+    createPVC(pvName, pvcName, domainUid1, domainNamespace);\n \n     // build the clusterview application\n     Path distDir = buildApplication(Paths.get(APP_DIR, \"clusterview\"),\n         null, null, \"dist\", domainNamespace);\n     clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n     assertTrue(clusterViewAppPath.toFile().exists(), \"Application archive is not available\");\n \n-    V1Pod webLogicPod = setupPVPod(domainNamespace);\n+    logger.info(\"Setting up WebLogic pod to access PV\");\n+    V1Pod pvPod = setupWebLogicPod(domainNamespace);\n \n+    ExecResult exec = null;\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/applications\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/applications\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/applications\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/applications\");\n+      if (exec.stdout() != null) {\n+        logger.info(\"Exec stdout {0}\", exec.stdout());\n+      }\n+      if (exec.stderr() != null) {\n+        logger.info(\"Exec stderr {0}\", exec.stderr());\n+      }\n     } catch (IOException | ApiException | InterruptedException ex) {\n       logger.warning(ex.getMessage());\n     }\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/model\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/model\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/model\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/model\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69acea974f2b9a941e6243320c71074988ea2658"}, "originalPosition": 215}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQyNDMyNw==", "bodyText": "Moved the exec command to CommonTestUtils and checking for non zero exit value, non null/empty stderr to assert the exec is successful.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498424327", "createdAt": "2020-10-01T18:01:58Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -155,72 +193,116 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     // create secret for admin credentials\n     logger.info(\"Creating secret for admin credentials\");\n     adminSecretName = \"weblogic-credentials\";\n-    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n \n     // create model encryption secret\n     logger.info(\"Creating encryption secret\");\n     encryptionSecretName = \"encryptionsecret\";\n     createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n \n     // create the PV and PVC to store application and model files\n-    createPV(pvName, domainUid, \"ItMiiDomainModelInPV\");\n-    createPVC(pvName, pvcName, domainUid, domainNamespace);\n+    createPV(pvName, domainUid1, \"ItMiiDomainModelInPV\");\n+    createPVC(pvName, pvcName, domainUid1, domainNamespace);\n \n     // build the clusterview application\n     Path distDir = buildApplication(Paths.get(APP_DIR, \"clusterview\"),\n         null, null, \"dist\", domainNamespace);\n     clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n     assertTrue(clusterViewAppPath.toFile().exists(), \"Application archive is not available\");\n \n-    V1Pod webLogicPod = setupPVPod(domainNamespace);\n+    logger.info(\"Setting up WebLogic pod to access PV\");\n+    V1Pod pvPod = setupWebLogicPod(domainNamespace);\n \n+    ExecResult exec = null;\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/applications\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/applications\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/applications\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/applications\");\n+      if (exec.stdout() != null) {\n+        logger.info(\"Exec stdout {0}\", exec.stdout());\n+      }\n+      if (exec.stderr() != null) {\n+        logger.info(\"Exec stderr {0}\", exec.stderr());\n+      }\n     } catch (IOException | ApiException | InterruptedException ex) {\n       logger.warning(ex.getMessage());\n     }\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/model\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/model\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/model\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/model\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI4OTQwMw=="}, "originalCommit": {"oid": "69acea974f2b9a941e6243320c71074988ea2658"}, "originalPosition": 215}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTU0NDg0OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDozMjozMVrOHbNTqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxODoxMjo0NVrOHbVvog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI5MTYyNQ==", "bodyText": "replace with assertDoesNotThrow(() -> copyFileToPod()) and remove try, catch", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498291625", "createdAt": "2020-10-01T14:32:31Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -155,72 +193,116 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     // create secret for admin credentials\n     logger.info(\"Creating secret for admin credentials\");\n     adminSecretName = \"weblogic-credentials\";\n-    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n \n     // create model encryption secret\n     logger.info(\"Creating encryption secret\");\n     encryptionSecretName = \"encryptionsecret\";\n     createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n \n     // create the PV and PVC to store application and model files\n-    createPV(pvName, domainUid, \"ItMiiDomainModelInPV\");\n-    createPVC(pvName, pvcName, domainUid, domainNamespace);\n+    createPV(pvName, domainUid1, \"ItMiiDomainModelInPV\");\n+    createPVC(pvName, pvcName, domainUid1, domainNamespace);\n \n     // build the clusterview application\n     Path distDir = buildApplication(Paths.get(APP_DIR, \"clusterview\"),\n         null, null, \"dist\", domainNamespace);\n     clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n     assertTrue(clusterViewAppPath.toFile().exists(), \"Application archive is not available\");\n \n-    V1Pod webLogicPod = setupPVPod(domainNamespace);\n+    logger.info(\"Setting up WebLogic pod to access PV\");\n+    V1Pod pvPod = setupWebLogicPod(domainNamespace);\n \n+    ExecResult exec = null;\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/applications\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/applications\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/applications\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/applications\");\n+      if (exec.stdout() != null) {\n+        logger.info(\"Exec stdout {0}\", exec.stdout());\n+      }\n+      if (exec.stderr() != null) {\n+        logger.info(\"Exec stderr {0}\", exec.stderr());\n+      }\n     } catch (IOException | ApiException | InterruptedException ex) {\n       logger.warning(ex.getMessage());\n     }\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/model\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/model\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/model\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/model\");\n+      if (exec.stdout() != null) {\n+        logger.info(\"Exec stdout {0}\", exec.stdout());\n+      }\n+      if (exec.stderr() != null) {\n+        logger.info(\"Exec stderr {0}\", exec.stderr());\n+      }\n     } catch (IOException | ApiException | InterruptedException ex) {\n       logger.warning(ex.getMessage());\n     }\n \n     try {\n       //copy the model file to PV using the temp pod - we don't have access to PVROOT in Jenkins env\n       logger.info(\"Copying model file {0} to pv directory {1}\",\n-          Paths.get(MODEL_DIR, modelFile).toString(), \"/shared/model\");\n-      Kubernetes.copyFileToPod(domainNamespace, webLogicPod.getMetadata().getName(), null,\n-          Paths.get(MODEL_DIR, modelFile), Paths.get(\"shared\", \"model\", modelFile));\n+          Paths.get(MODEL_DIR, modelFile).toString(), modelMountPath + \"/model\");\n+      Kubernetes.copyFileToPod(domainNamespace, pvPod.getMetadata().getName(), null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69acea974f2b9a941e6243320c71074988ea2658"}, "originalPosition": 233}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM2NDYyMA==", "bodyText": "The copy command above some times generates exceptions which are harmless, If I put the copy command in assertDoesNotThrow its going to fail intermittently. With try catch I can simply ignore the exceptions.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498364620", "createdAt": "2020-10-01T16:14:57Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -155,72 +193,116 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     // create secret for admin credentials\n     logger.info(\"Creating secret for admin credentials\");\n     adminSecretName = \"weblogic-credentials\";\n-    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n \n     // create model encryption secret\n     logger.info(\"Creating encryption secret\");\n     encryptionSecretName = \"encryptionsecret\";\n     createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n \n     // create the PV and PVC to store application and model files\n-    createPV(pvName, domainUid, \"ItMiiDomainModelInPV\");\n-    createPVC(pvName, pvcName, domainUid, domainNamespace);\n+    createPV(pvName, domainUid1, \"ItMiiDomainModelInPV\");\n+    createPVC(pvName, pvcName, domainUid1, domainNamespace);\n \n     // build the clusterview application\n     Path distDir = buildApplication(Paths.get(APP_DIR, \"clusterview\"),\n         null, null, \"dist\", domainNamespace);\n     clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n     assertTrue(clusterViewAppPath.toFile().exists(), \"Application archive is not available\");\n \n-    V1Pod webLogicPod = setupPVPod(domainNamespace);\n+    logger.info(\"Setting up WebLogic pod to access PV\");\n+    V1Pod pvPod = setupWebLogicPod(domainNamespace);\n \n+    ExecResult exec = null;\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/applications\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/applications\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/applications\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/applications\");\n+      if (exec.stdout() != null) {\n+        logger.info(\"Exec stdout {0}\", exec.stdout());\n+      }\n+      if (exec.stderr() != null) {\n+        logger.info(\"Exec stderr {0}\", exec.stderr());\n+      }\n     } catch (IOException | ApiException | InterruptedException ex) {\n       logger.warning(ex.getMessage());\n     }\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/model\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/model\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/model\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/model\");\n+      if (exec.stdout() != null) {\n+        logger.info(\"Exec stdout {0}\", exec.stdout());\n+      }\n+      if (exec.stderr() != null) {\n+        logger.info(\"Exec stderr {0}\", exec.stderr());\n+      }\n     } catch (IOException | ApiException | InterruptedException ex) {\n       logger.warning(ex.getMessage());\n     }\n \n     try {\n       //copy the model file to PV using the temp pod - we don't have access to PVROOT in Jenkins env\n       logger.info(\"Copying model file {0} to pv directory {1}\",\n-          Paths.get(MODEL_DIR, modelFile).toString(), \"/shared/model\");\n-      Kubernetes.copyFileToPod(domainNamespace, webLogicPod.getMetadata().getName(), null,\n-          Paths.get(MODEL_DIR, modelFile), Paths.get(\"shared\", \"model\", modelFile));\n+          Paths.get(MODEL_DIR, modelFile).toString(), modelMountPath + \"/model\");\n+      Kubernetes.copyFileToPod(domainNamespace, pvPod.getMetadata().getName(), null,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI5MTYyNQ=="}, "originalCommit": {"oid": "69acea974f2b9a941e6243320c71074988ea2658"}, "originalPosition": 233}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM3ODM4MQ==", "bodyText": "If exceptions are harmless, how about catching them in Kubernetes.copyFileToPod() method itself and ignore/log them?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498378381", "createdAt": "2020-10-01T16:38:04Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -155,72 +193,116 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     // create secret for admin credentials\n     logger.info(\"Creating secret for admin credentials\");\n     adminSecretName = \"weblogic-credentials\";\n-    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n \n     // create model encryption secret\n     logger.info(\"Creating encryption secret\");\n     encryptionSecretName = \"encryptionsecret\";\n     createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n \n     // create the PV and PVC to store application and model files\n-    createPV(pvName, domainUid, \"ItMiiDomainModelInPV\");\n-    createPVC(pvName, pvcName, domainUid, domainNamespace);\n+    createPV(pvName, domainUid1, \"ItMiiDomainModelInPV\");\n+    createPVC(pvName, pvcName, domainUid1, domainNamespace);\n \n     // build the clusterview application\n     Path distDir = buildApplication(Paths.get(APP_DIR, \"clusterview\"),\n         null, null, \"dist\", domainNamespace);\n     clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n     assertTrue(clusterViewAppPath.toFile().exists(), \"Application archive is not available\");\n \n-    V1Pod webLogicPod = setupPVPod(domainNamespace);\n+    logger.info(\"Setting up WebLogic pod to access PV\");\n+    V1Pod pvPod = setupWebLogicPod(domainNamespace);\n \n+    ExecResult exec = null;\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/applications\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/applications\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/applications\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/applications\");\n+      if (exec.stdout() != null) {\n+        logger.info(\"Exec stdout {0}\", exec.stdout());\n+      }\n+      if (exec.stderr() != null) {\n+        logger.info(\"Exec stderr {0}\", exec.stderr());\n+      }\n     } catch (IOException | ApiException | InterruptedException ex) {\n       logger.warning(ex.getMessage());\n     }\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/model\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/model\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/model\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/model\");\n+      if (exec.stdout() != null) {\n+        logger.info(\"Exec stdout {0}\", exec.stdout());\n+      }\n+      if (exec.stderr() != null) {\n+        logger.info(\"Exec stderr {0}\", exec.stderr());\n+      }\n     } catch (IOException | ApiException | InterruptedException ex) {\n       logger.warning(ex.getMessage());\n     }\n \n     try {\n       //copy the model file to PV using the temp pod - we don't have access to PVROOT in Jenkins env\n       logger.info(\"Copying model file {0} to pv directory {1}\",\n-          Paths.get(MODEL_DIR, modelFile).toString(), \"/shared/model\");\n-      Kubernetes.copyFileToPod(domainNamespace, webLogicPod.getMetadata().getName(), null,\n-          Paths.get(MODEL_DIR, modelFile), Paths.get(\"shared\", \"model\", modelFile));\n+          Paths.get(MODEL_DIR, modelFile).toString(), modelMountPath + \"/model\");\n+      Kubernetes.copyFileToPod(domainNamespace, pvPod.getMetadata().getName(), null,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI5MTYyNQ=="}, "originalCommit": {"oid": "69acea974f2b9a941e6243320c71074988ea2658"}, "originalPosition": 233}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQyOTg1OA==", "bodyText": "There are many IT files using the Kubernetes.copyFileToPod() method. I don't want to touch those files in this PR. Moved the copy command from test class to CommonTestUtils", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498429858", "createdAt": "2020-10-01T18:12:45Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -155,72 +193,116 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     // create secret for admin credentials\n     logger.info(\"Creating secret for admin credentials\");\n     adminSecretName = \"weblogic-credentials\";\n-    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n \n     // create model encryption secret\n     logger.info(\"Creating encryption secret\");\n     encryptionSecretName = \"encryptionsecret\";\n     createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n \n     // create the PV and PVC to store application and model files\n-    createPV(pvName, domainUid, \"ItMiiDomainModelInPV\");\n-    createPVC(pvName, pvcName, domainUid, domainNamespace);\n+    createPV(pvName, domainUid1, \"ItMiiDomainModelInPV\");\n+    createPVC(pvName, pvcName, domainUid1, domainNamespace);\n \n     // build the clusterview application\n     Path distDir = buildApplication(Paths.get(APP_DIR, \"clusterview\"),\n         null, null, \"dist\", domainNamespace);\n     clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n     assertTrue(clusterViewAppPath.toFile().exists(), \"Application archive is not available\");\n \n-    V1Pod webLogicPod = setupPVPod(domainNamespace);\n+    logger.info(\"Setting up WebLogic pod to access PV\");\n+    V1Pod pvPod = setupWebLogicPod(domainNamespace);\n \n+    ExecResult exec = null;\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/applications\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/applications\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/applications\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/applications\");\n+      if (exec.stdout() != null) {\n+        logger.info(\"Exec stdout {0}\", exec.stdout());\n+      }\n+      if (exec.stderr() != null) {\n+        logger.info(\"Exec stderr {0}\", exec.stderr());\n+      }\n     } catch (IOException | ApiException | InterruptedException ex) {\n       logger.warning(ex.getMessage());\n     }\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/model\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/model\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/model\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/model\");\n+      if (exec.stdout() != null) {\n+        logger.info(\"Exec stdout {0}\", exec.stdout());\n+      }\n+      if (exec.stderr() != null) {\n+        logger.info(\"Exec stderr {0}\", exec.stderr());\n+      }\n     } catch (IOException | ApiException | InterruptedException ex) {\n       logger.warning(ex.getMessage());\n     }\n \n     try {\n       //copy the model file to PV using the temp pod - we don't have access to PVROOT in Jenkins env\n       logger.info(\"Copying model file {0} to pv directory {1}\",\n-          Paths.get(MODEL_DIR, modelFile).toString(), \"/shared/model\");\n-      Kubernetes.copyFileToPod(domainNamespace, webLogicPod.getMetadata().getName(), null,\n-          Paths.get(MODEL_DIR, modelFile), Paths.get(\"shared\", \"model\", modelFile));\n+          Paths.get(MODEL_DIR, modelFile).toString(), modelMountPath + \"/model\");\n+      Kubernetes.copyFileToPod(domainNamespace, pvPod.getMetadata().getName(), null,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI5MTYyNQ=="}, "originalCommit": {"oid": "69acea974f2b9a941e6243320c71074988ea2658"}, "originalPosition": 233}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTU0NzM0OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDozMzowMlrOHbNVOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDozMzowMlrOHbNVOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI5MjAyNA==", "bodyText": "same as above", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498292024", "createdAt": "2020-10-01T14:33:02Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -155,72 +193,116 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     // create secret for admin credentials\n     logger.info(\"Creating secret for admin credentials\");\n     adminSecretName = \"weblogic-credentials\";\n-    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n \n     // create model encryption secret\n     logger.info(\"Creating encryption secret\");\n     encryptionSecretName = \"encryptionsecret\";\n     createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n \n     // create the PV and PVC to store application and model files\n-    createPV(pvName, domainUid, \"ItMiiDomainModelInPV\");\n-    createPVC(pvName, pvcName, domainUid, domainNamespace);\n+    createPV(pvName, domainUid1, \"ItMiiDomainModelInPV\");\n+    createPVC(pvName, pvcName, domainUid1, domainNamespace);\n \n     // build the clusterview application\n     Path distDir = buildApplication(Paths.get(APP_DIR, \"clusterview\"),\n         null, null, \"dist\", domainNamespace);\n     clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n     assertTrue(clusterViewAppPath.toFile().exists(), \"Application archive is not available\");\n \n-    V1Pod webLogicPod = setupPVPod(domainNamespace);\n+    logger.info(\"Setting up WebLogic pod to access PV\");\n+    V1Pod pvPod = setupWebLogicPod(domainNamespace);\n \n+    ExecResult exec = null;\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/applications\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/applications\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/applications\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/applications\");\n+      if (exec.stdout() != null) {\n+        logger.info(\"Exec stdout {0}\", exec.stdout());\n+      }\n+      if (exec.stderr() != null) {\n+        logger.info(\"Exec stderr {0}\", exec.stderr());\n+      }\n     } catch (IOException | ApiException | InterruptedException ex) {\n       logger.warning(ex.getMessage());\n     }\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/model\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/model\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/model\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/model\");\n+      if (exec.stdout() != null) {\n+        logger.info(\"Exec stdout {0}\", exec.stdout());\n+      }\n+      if (exec.stderr() != null) {\n+        logger.info(\"Exec stderr {0}\", exec.stderr());\n+      }\n     } catch (IOException | ApiException | InterruptedException ex) {\n       logger.warning(ex.getMessage());\n     }\n \n     try {\n       //copy the model file to PV using the temp pod - we don't have access to PVROOT in Jenkins env\n       logger.info(\"Copying model file {0} to pv directory {1}\",\n-          Paths.get(MODEL_DIR, modelFile).toString(), \"/shared/model\");\n-      Kubernetes.copyFileToPod(domainNamespace, webLogicPod.getMetadata().getName(), null,\n-          Paths.get(MODEL_DIR, modelFile), Paths.get(\"shared\", \"model\", modelFile));\n+          Paths.get(MODEL_DIR, modelFile).toString(), modelMountPath + \"/model\");\n+      Kubernetes.copyFileToPod(domainNamespace, pvPod.getMetadata().getName(), null,\n+          Paths.get(MODEL_DIR, modelFile), Paths.get(modelMountPath + \"/model\", modelFile));\n     } catch (IOException | ApiException ex) {\n       logger.warning(ex.getMessage());\n     }\n     try {\n       logger.info(\"Copying application file {0} to pv directory {1}\",\n-          clusterViewAppPath.toString(), \"/shared/applications\");\n-      Kubernetes.copyFileToPod(domainNamespace, webLogicPod.getMetadata().getName(), null,\n-          clusterViewAppPath, Paths.get(\"shared\", \"applications\", \"clusterview.war\"));\n+          clusterViewAppPath.toString(), modelMountPath + \"/applications\");\n+      Kubernetes.copyFileToPod(domainNamespace, pvPod.getMetadata().getName(), null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69acea974f2b9a941e6243320c71074988ea2658"}, "originalPosition": 244}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTU1MjU5OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDozNDoxMlrOHbNYkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDozNDoxMlrOHbNYkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI5Mjg4Mg==", "bodyText": "same as other", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498292882", "createdAt": "2020-10-01T14:34:12Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -155,72 +193,116 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     // create secret for admin credentials\n     logger.info(\"Creating secret for admin credentials\");\n     adminSecretName = \"weblogic-credentials\";\n-    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n \n     // create model encryption secret\n     logger.info(\"Creating encryption secret\");\n     encryptionSecretName = \"encryptionsecret\";\n     createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n \n     // create the PV and PVC to store application and model files\n-    createPV(pvName, domainUid, \"ItMiiDomainModelInPV\");\n-    createPVC(pvName, pvcName, domainUid, domainNamespace);\n+    createPV(pvName, domainUid1, \"ItMiiDomainModelInPV\");\n+    createPVC(pvName, pvcName, domainUid1, domainNamespace);\n \n     // build the clusterview application\n     Path distDir = buildApplication(Paths.get(APP_DIR, \"clusterview\"),\n         null, null, \"dist\", domainNamespace);\n     clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n     assertTrue(clusterViewAppPath.toFile().exists(), \"Application archive is not available\");\n \n-    V1Pod webLogicPod = setupPVPod(domainNamespace);\n+    logger.info(\"Setting up WebLogic pod to access PV\");\n+    V1Pod pvPod = setupWebLogicPod(domainNamespace);\n \n+    ExecResult exec = null;\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/applications\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/applications\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/applications\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/applications\");\n+      if (exec.stdout() != null) {\n+        logger.info(\"Exec stdout {0}\", exec.stdout());\n+      }\n+      if (exec.stderr() != null) {\n+        logger.info(\"Exec stderr {0}\", exec.stderr());\n+      }\n     } catch (IOException | ApiException | InterruptedException ex) {\n       logger.warning(ex.getMessage());\n     }\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/model\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/model\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/model\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/model\");\n+      if (exec.stdout() != null) {\n+        logger.info(\"Exec stdout {0}\", exec.stdout());\n+      }\n+      if (exec.stderr() != null) {\n+        logger.info(\"Exec stderr {0}\", exec.stderr());\n+      }\n     } catch (IOException | ApiException | InterruptedException ex) {\n       logger.warning(ex.getMessage());\n     }\n \n     try {\n       //copy the model file to PV using the temp pod - we don't have access to PVROOT in Jenkins env\n       logger.info(\"Copying model file {0} to pv directory {1}\",\n-          Paths.get(MODEL_DIR, modelFile).toString(), \"/shared/model\");\n-      Kubernetes.copyFileToPod(domainNamespace, webLogicPod.getMetadata().getName(), null,\n-          Paths.get(MODEL_DIR, modelFile), Paths.get(\"shared\", \"model\", modelFile));\n+          Paths.get(MODEL_DIR, modelFile).toString(), modelMountPath + \"/model\");\n+      Kubernetes.copyFileToPod(domainNamespace, pvPod.getMetadata().getName(), null,\n+          Paths.get(MODEL_DIR, modelFile), Paths.get(modelMountPath + \"/model\", modelFile));\n     } catch (IOException | ApiException ex) {\n       logger.warning(ex.getMessage());\n     }\n     try {\n       logger.info(\"Copying application file {0} to pv directory {1}\",\n-          clusterViewAppPath.toString(), \"/shared/applications\");\n-      Kubernetes.copyFileToPod(domainNamespace, webLogicPod.getMetadata().getName(), null,\n-          clusterViewAppPath, Paths.get(\"shared\", \"applications\", \"clusterview.war\"));\n+          clusterViewAppPath.toString(), modelMountPath + \"/applications\");\n+      Kubernetes.copyFileToPod(domainNamespace, pvPod.getMetadata().getName(), null,\n+          clusterViewAppPath, Paths.get(modelMountPath + \"/applications\", \"clusterview.war\"));\n     } catch (IOException | ApiException ex) {\n       logger.warning(ex.getMessage());\n     }\n \n+    try {\n+      logger.info(\"Changing file ownership {0} to oracle:root in PV\", modelMountPath);\n+      Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"chown -R oracle:root \" + modelMountPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69acea974f2b9a941e6243320c71074988ea2658"}, "originalPosition": 252}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTU2MDc5OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDozNTo0OVrOHbNdkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNjoxODoxNVrOHbR41w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI5NDE2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Test domain creation from model file stored in PV.https://oracle.github.io/weblogic-kubernetes-operator\n          \n          \n            \n               * Test domain creation from model file stored in PV. https://oracle.github.io/weblogic-kubernetes-operator", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498294160", "createdAt": "2020-10-01T14:35:49Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -155,72 +193,116 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     // create secret for admin credentials\n     logger.info(\"Creating secret for admin credentials\");\n     adminSecretName = \"weblogic-credentials\";\n-    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n \n     // create model encryption secret\n     logger.info(\"Creating encryption secret\");\n     encryptionSecretName = \"encryptionsecret\";\n     createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n \n     // create the PV and PVC to store application and model files\n-    createPV(pvName, domainUid, \"ItMiiDomainModelInPV\");\n-    createPVC(pvName, pvcName, domainUid, domainNamespace);\n+    createPV(pvName, domainUid1, \"ItMiiDomainModelInPV\");\n+    createPVC(pvName, pvcName, domainUid1, domainNamespace);\n \n     // build the clusterview application\n     Path distDir = buildApplication(Paths.get(APP_DIR, \"clusterview\"),\n         null, null, \"dist\", domainNamespace);\n     clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n     assertTrue(clusterViewAppPath.toFile().exists(), \"Application archive is not available\");\n \n-    V1Pod webLogicPod = setupPVPod(domainNamespace);\n+    logger.info(\"Setting up WebLogic pod to access PV\");\n+    V1Pod pvPod = setupWebLogicPod(domainNamespace);\n \n+    ExecResult exec = null;\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/applications\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/applications\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/applications\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/applications\");\n+      if (exec.stdout() != null) {\n+        logger.info(\"Exec stdout {0}\", exec.stdout());\n+      }\n+      if (exec.stderr() != null) {\n+        logger.info(\"Exec stderr {0}\", exec.stderr());\n+      }\n     } catch (IOException | ApiException | InterruptedException ex) {\n       logger.warning(ex.getMessage());\n     }\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/model\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/model\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/model\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/model\");\n+      if (exec.stdout() != null) {\n+        logger.info(\"Exec stdout {0}\", exec.stdout());\n+      }\n+      if (exec.stderr() != null) {\n+        logger.info(\"Exec stderr {0}\", exec.stderr());\n+      }\n     } catch (IOException | ApiException | InterruptedException ex) {\n       logger.warning(ex.getMessage());\n     }\n \n     try {\n       //copy the model file to PV using the temp pod - we don't have access to PVROOT in Jenkins env\n       logger.info(\"Copying model file {0} to pv directory {1}\",\n-          Paths.get(MODEL_DIR, modelFile).toString(), \"/shared/model\");\n-      Kubernetes.copyFileToPod(domainNamespace, webLogicPod.getMetadata().getName(), null,\n-          Paths.get(MODEL_DIR, modelFile), Paths.get(\"shared\", \"model\", modelFile));\n+          Paths.get(MODEL_DIR, modelFile).toString(), modelMountPath + \"/model\");\n+      Kubernetes.copyFileToPod(domainNamespace, pvPod.getMetadata().getName(), null,\n+          Paths.get(MODEL_DIR, modelFile), Paths.get(modelMountPath + \"/model\", modelFile));\n     } catch (IOException | ApiException ex) {\n       logger.warning(ex.getMessage());\n     }\n     try {\n       logger.info(\"Copying application file {0} to pv directory {1}\",\n-          clusterViewAppPath.toString(), \"/shared/applications\");\n-      Kubernetes.copyFileToPod(domainNamespace, webLogicPod.getMetadata().getName(), null,\n-          clusterViewAppPath, Paths.get(\"shared\", \"applications\", \"clusterview.war\"));\n+          clusterViewAppPath.toString(), modelMountPath + \"/applications\");\n+      Kubernetes.copyFileToPod(domainNamespace, pvPod.getMetadata().getName(), null,\n+          clusterViewAppPath, Paths.get(modelMountPath + \"/applications\", \"clusterview.war\"));\n     } catch (IOException | ApiException ex) {\n       logger.warning(ex.getMessage());\n     }\n \n+    try {\n+      logger.info(\"Changing file ownership {0} to oracle:root in PV\", modelMountPath);\n+      Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"chown -R oracle:root \" + modelMountPath);\n+    } catch (IOException | ApiException | InterruptedException ex) {\n+      logger.warning(ex.getMessage());\n+    }\n   }\n \n   /**\n-   * Test domain creation from model file stored in PV.\n-   * https://oracle.github.io/weblogic-kubernetes-operator\n-   *       /userguide/managing-domains/domain-resource/#domain-spec-elements\n-   * 1. Create the domain custom resource using mii with no domain and specifying a PV location for modelHome\n-   * 2. Verify the domain creation is successful and application is accessible.\n+   * Test domain creation from model file stored in PV.https://oracle.github.io/weblogic-kubernetes-operator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69acea974f2b9a941e6243320c71074988ea2658"}, "originalPosition": 264}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM2NjY3OQ==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498366679", "createdAt": "2020-10-01T16:18:15Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -155,72 +193,116 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     // create secret for admin credentials\n     logger.info(\"Creating secret for admin credentials\");\n     adminSecretName = \"weblogic-credentials\";\n-    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n \n     // create model encryption secret\n     logger.info(\"Creating encryption secret\");\n     encryptionSecretName = \"encryptionsecret\";\n     createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n \n     // create the PV and PVC to store application and model files\n-    createPV(pvName, domainUid, \"ItMiiDomainModelInPV\");\n-    createPVC(pvName, pvcName, domainUid, domainNamespace);\n+    createPV(pvName, domainUid1, \"ItMiiDomainModelInPV\");\n+    createPVC(pvName, pvcName, domainUid1, domainNamespace);\n \n     // build the clusterview application\n     Path distDir = buildApplication(Paths.get(APP_DIR, \"clusterview\"),\n         null, null, \"dist\", domainNamespace);\n     clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n     assertTrue(clusterViewAppPath.toFile().exists(), \"Application archive is not available\");\n \n-    V1Pod webLogicPod = setupPVPod(domainNamespace);\n+    logger.info(\"Setting up WebLogic pod to access PV\");\n+    V1Pod pvPod = setupWebLogicPod(domainNamespace);\n \n+    ExecResult exec = null;\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/applications\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/applications\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/applications\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/applications\");\n+      if (exec.stdout() != null) {\n+        logger.info(\"Exec stdout {0}\", exec.stdout());\n+      }\n+      if (exec.stderr() != null) {\n+        logger.info(\"Exec stderr {0}\", exec.stderr());\n+      }\n     } catch (IOException | ApiException | InterruptedException ex) {\n       logger.warning(ex.getMessage());\n     }\n     try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/model\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/model\");\n+      logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/model\");\n+      exec = Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"mkdir -p \" + modelMountPath + \"/model\");\n+      if (exec.stdout() != null) {\n+        logger.info(\"Exec stdout {0}\", exec.stdout());\n+      }\n+      if (exec.stderr() != null) {\n+        logger.info(\"Exec stderr {0}\", exec.stderr());\n+      }\n     } catch (IOException | ApiException | InterruptedException ex) {\n       logger.warning(ex.getMessage());\n     }\n \n     try {\n       //copy the model file to PV using the temp pod - we don't have access to PVROOT in Jenkins env\n       logger.info(\"Copying model file {0} to pv directory {1}\",\n-          Paths.get(MODEL_DIR, modelFile).toString(), \"/shared/model\");\n-      Kubernetes.copyFileToPod(domainNamespace, webLogicPod.getMetadata().getName(), null,\n-          Paths.get(MODEL_DIR, modelFile), Paths.get(\"shared\", \"model\", modelFile));\n+          Paths.get(MODEL_DIR, modelFile).toString(), modelMountPath + \"/model\");\n+      Kubernetes.copyFileToPod(domainNamespace, pvPod.getMetadata().getName(), null,\n+          Paths.get(MODEL_DIR, modelFile), Paths.get(modelMountPath + \"/model\", modelFile));\n     } catch (IOException | ApiException ex) {\n       logger.warning(ex.getMessage());\n     }\n     try {\n       logger.info(\"Copying application file {0} to pv directory {1}\",\n-          clusterViewAppPath.toString(), \"/shared/applications\");\n-      Kubernetes.copyFileToPod(domainNamespace, webLogicPod.getMetadata().getName(), null,\n-          clusterViewAppPath, Paths.get(\"shared\", \"applications\", \"clusterview.war\"));\n+          clusterViewAppPath.toString(), modelMountPath + \"/applications\");\n+      Kubernetes.copyFileToPod(domainNamespace, pvPod.getMetadata().getName(), null,\n+          clusterViewAppPath, Paths.get(modelMountPath + \"/applications\", \"clusterview.war\"));\n     } catch (IOException | ApiException ex) {\n       logger.warning(ex.getMessage());\n     }\n \n+    try {\n+      logger.info(\"Changing file ownership {0} to oracle:root in PV\", modelMountPath);\n+      Exec.exec(pvPod, null, false, \"/bin/sh\", \"-c\", \"chown -R oracle:root \" + modelMountPath);\n+    } catch (IOException | ApiException | InterruptedException ex) {\n+      logger.warning(ex.getMessage());\n+    }\n   }\n \n   /**\n-   * Test domain creation from model file stored in PV.\n-   * https://oracle.github.io/weblogic-kubernetes-operator\n-   *       /userguide/managing-domains/domain-resource/#domain-spec-elements\n-   * 1. Create the domain custom resource using mii with no domain and specifying a PV location for modelHome\n-   * 2. Verify the domain creation is successful and application is accessible.\n+   * Test domain creation from model file stored in PV.https://oracle.github.io/weblogic-kubernetes-operator", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI5NDE2MA=="}, "originalCommit": {"oid": "69acea974f2b9a941e6243320c71074988ea2658"}, "originalPosition": 264}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTYxMzU3OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDo0Njo1NFrOHbN-jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNjoxODoyMlrOHbR5Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwMjYwNQ==", "bodyText": "looks like this is only for debugging purposes, it can be removed as there is an assert in the next line", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498302605", "createdAt": "2020-10-01T14:46:54Z", "author": {"login": "vanajamukkara"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -366,15 +443,28 @@ private static void buildMIIandPushToRepo() {\n     checkDirectory(WIT_BUILD_DIR);\n     Map<String, String> env = new HashMap<>();\n     env.put(\"WLSIMG_BLDDIR\", WIT_BUILD_DIR);\n-    createImage(defaultWitParams()\n-        .modelImageName(MII_BASIC_IMAGE_NAME)\n-        .modelImageTag(miiImageTag)\n+    WitParams defaultWitParams = defaultWitParams();\n+    if (customWDTHome != null) {\n+      defaultWitParams.wdtModelHome(customWDTHome);\n+    }\n+    createImage(defaultWitParams\n+        .modelImageName(imageName)\n+        .modelImageTag(imageTag)\n         .modelFiles(modelList)\n         .wdtModelOnly(true)\n         .wdtVersion(WDT_VERSION)\n         .env(env)\n         .redirect(true));\n+    Command.defaultCommandParams()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69acea974f2b9a941e6243320c71074988ea2658"}, "originalPosition": 462}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODM2Njc0Mw==", "bodyText": "removed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498366743", "createdAt": "2020-10-01T16:18:22Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -366,15 +443,28 @@ private static void buildMIIandPushToRepo() {\n     checkDirectory(WIT_BUILD_DIR);\n     Map<String, String> env = new HashMap<>();\n     env.put(\"WLSIMG_BLDDIR\", WIT_BUILD_DIR);\n-    createImage(defaultWitParams()\n-        .modelImageName(MII_BASIC_IMAGE_NAME)\n-        .modelImageTag(miiImageTag)\n+    WitParams defaultWitParams = defaultWitParams();\n+    if (customWDTHome != null) {\n+      defaultWitParams.wdtModelHome(customWDTHome);\n+    }\n+    createImage(defaultWitParams\n+        .modelImageName(imageName)\n+        .modelImageTag(imageTag)\n         .modelFiles(modelList)\n         .wdtModelOnly(true)\n         .wdtVersion(WDT_VERSION)\n         .env(env)\n         .redirect(true));\n+    Command.defaultCommandParams()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODMwMjYwNQ=="}, "originalCommit": {"oid": "69acea974f2b9a941e6243320c71074988ea2658"}, "originalPosition": 462}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDQyMzE1OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxODoyNDozMlrOHbWHvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOToxODo1MlrOHbXyng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQzNjAyOQ==", "bodyText": "You can use existing FileUtils.copyFileToPod(String namespace,\nString pod,\nString container,\nPath srcPath,\nPath destPath)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498436029", "createdAt": "2020-10-01T18:24:32Z", "author": {"login": "maggiehe00"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "diffHunk": "@@ -1305,6 +1306,55 @@ public static void createDomainAndVerify(Domain domain, String domainNamespace)\n     return ingressHostList;\n   }\n \n+\n+  /**\n+   * Execute command inside a pod and assert the execution.\n+   *\n+   * @param pod V1Pod object\n+   * @param containerName name of the container inside the pod\n+   * @param redirectToStdout if true redirect to stdout and stderr\n+   * @param command the command to execute inside the pod\n+   */\n+  public static void execInPod(V1Pod pod, String containerName, boolean redirectToStdout, String command) {\n+    LoggingFacade logger = getLogger();\n+    ExecResult exec = null;\n+    try {\n+      logger.info(\"Executing command {0}\", command);\n+      exec = Exec.exec(pod, containerName, redirectToStdout, \"/bin/sh\", \"-c\", command);\n+      // checking for exitValue 0 for success fails sometimes as k8s exec api returns non-zero\n+      // exit value even on success, so checking for exitValue non-zero and stderr not empty for failure,\n+      // otherwise its success\n+      assertFalse(exec.exitValue() != 0 && exec.stderr() != null && !exec.stderr().isEmpty(),\n+          String.format(\"Command %s failed with exit value %s, stderr %s, stdout %s\",\n+              command, exec.exitValue(), exec.stderr(), exec.stdout()));\n+    } catch (IOException | ApiException | InterruptedException ex) {\n+      logger.warning(ex.getMessage());\n+    }\n+  }\n+\n+\n+  /**\n+   * Copy a file to the pod.\n+   *\n+   * @param namespace the namespace in which the pod exists\n+   * @param podName name of the pod\n+   * @param containerName name of the container inside the pod\n+   * @param srcPath source path of the file to copy\n+   * @param dstPath destination path for the file inside the pod\n+   */\n+  public static void copyFileToPod(String namespace, String podName,\n+      String containerName, Path srcPath, Path dstPath) {\n+    LoggingFacade logger = getLogger();\n+    try {\n+      logger.info(\"Copying file {0} inside pod location {1}\", srcPath, dstPath);\n+      Kubernetes.copyFileToPod(namespace, podName, containerName, srcPath, dstPath);\n+    } catch (ApiException | IOException ex) {\n+      logger.warning(ex.getMessage());\n+    }\n+  }\n+\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfc7fcf2073cf954a9c559fbfe573cc949e6d9f2"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ2MzM5MA==", "bodyText": "Using  it from FileUtils", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498463390", "createdAt": "2020-10-01T19:18:52Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "diffHunk": "@@ -1305,6 +1306,55 @@ public static void createDomainAndVerify(Domain domain, String domainNamespace)\n     return ingressHostList;\n   }\n \n+\n+  /**\n+   * Execute command inside a pod and assert the execution.\n+   *\n+   * @param pod V1Pod object\n+   * @param containerName name of the container inside the pod\n+   * @param redirectToStdout if true redirect to stdout and stderr\n+   * @param command the command to execute inside the pod\n+   */\n+  public static void execInPod(V1Pod pod, String containerName, boolean redirectToStdout, String command) {\n+    LoggingFacade logger = getLogger();\n+    ExecResult exec = null;\n+    try {\n+      logger.info(\"Executing command {0}\", command);\n+      exec = Exec.exec(pod, containerName, redirectToStdout, \"/bin/sh\", \"-c\", command);\n+      // checking for exitValue 0 for success fails sometimes as k8s exec api returns non-zero\n+      // exit value even on success, so checking for exitValue non-zero and stderr not empty for failure,\n+      // otherwise its success\n+      assertFalse(exec.exitValue() != 0 && exec.stderr() != null && !exec.stderr().isEmpty(),\n+          String.format(\"Command %s failed with exit value %s, stderr %s, stdout %s\",\n+              command, exec.exitValue(), exec.stderr(), exec.stdout()));\n+    } catch (IOException | ApiException | InterruptedException ex) {\n+      logger.warning(ex.getMessage());\n+    }\n+  }\n+\n+\n+  /**\n+   * Copy a file to the pod.\n+   *\n+   * @param namespace the namespace in which the pod exists\n+   * @param podName name of the pod\n+   * @param containerName name of the container inside the pod\n+   * @param srcPath source path of the file to copy\n+   * @param dstPath destination path for the file inside the pod\n+   */\n+  public static void copyFileToPod(String namespace, String podName,\n+      String containerName, Path srcPath, Path dstPath) {\n+    LoggingFacade logger = getLogger();\n+    try {\n+      logger.info(\"Copying file {0} inside pod location {1}\", srcPath, dstPath);\n+      Kubernetes.copyFileToPod(namespace, podName, containerName, srcPath, dstPath);\n+    } catch (ApiException | IOException ex) {\n+      logger.warning(ex.getMessage());\n+    }\n+  }\n+\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQzNjAyOQ=="}, "originalCommit": {"oid": "dfc7fcf2073cf954a9c559fbfe573cc949e6d9f2"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTA3Nzc1OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMjozNDoxMFrOHbcwhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNTo1MDo0NlrOHbyyUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0NDc3Mw==", "bodyText": "WebLogic domain ( we have just one right?)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498544773", "createdAt": "2020-10-01T22:34:10Z", "author": {"login": "marinakog"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -134,19 +158,30 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     assertNotNull(namespaces.get(0), \"Namespace list is null\");\n     String opNamespace = namespaces.get(0);\n \n-    // get a unique domain namespace\n-    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domains\");\n     assertNotNull(namespaces.get(1), \"Namespace list is null\");\n     domainNamespace = namespaces.get(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "797d98a8a01b59af4731744408bf2ae3d3bb0415"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkwNTY4Mw==", "bodyText": "no there are 2 domains created, its parameterized test", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498905683", "createdAt": "2020-10-02T15:50:46Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -134,19 +158,30 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     assertNotNull(namespaces.get(0), \"Namespace list is null\");\n     String opNamespace = namespaces.get(0);\n \n-    // get a unique domain namespace\n-    logger.info(\"Getting a unique namespace for WebLogic domain\");\n+    // get a unique domain1 namespace\n+    logger.info(\"Getting a unique namespace for WebLogic domains\");\n     assertNotNull(namespaces.get(1), \"Namespace list is null\");\n     domainNamespace = namespaces.get(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU0NDc3Mw=="}, "originalCommit": {"oid": "797d98a8a01b59af4731744408bf2ae3d3bb0415"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTEzNTg5OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMzowNzoyMVrOHbdUgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNTo1MTozNVrOHbyz5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU1Mzk4Ng==", "bodyText": "Fix the bullet numbering", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498553986", "createdAt": "2020-10-01T23:07:21Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -156,72 +182,87 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     // create secret for admin credentials\n     logger.info(\"Creating secret for admin credentials\");\n     adminSecretName = \"weblogic-credentials\";\n-    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n \n     // create model encryption secret\n     logger.info(\"Creating encryption secret\");\n     encryptionSecretName = \"encryptionsecret\";\n     createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n \n     // create the PV and PVC to store application and model files\n-    createPV(pvName, domainUid, \"ItMiiDomainModelInPV\");\n-    createPVC(pvName, pvcName, domainUid, domainNamespace);\n+    createPV(pvName, domainUid1, \"ItMiiDomainModelInPV\");\n+    createPVC(pvName, pvcName, domainUid1, domainNamespace);\n \n     // build the clusterview application\n     Path distDir = buildApplication(Paths.get(APP_DIR, \"clusterview\"),\n         null, null, \"dist\", domainNamespace);\n     clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n     assertTrue(clusterViewAppPath.toFile().exists(), \"Application archive is not available\");\n \n-    V1Pod webLogicPod = setupPVPod(domainNamespace);\n+    logger.info(\"Setting up WebLogic pod to access PV\");\n+    V1Pod pvPod = setupWebLogicPod(domainNamespace);\n \n-    try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/applications\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/applications\");\n-    } catch (IOException | ApiException | InterruptedException ex) {\n-      logger.warning(ex.getMessage());\n-    }\n-    try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/model\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/model\");\n-    } catch (IOException | ApiException | InterruptedException ex) {\n-      logger.warning(ex.getMessage());\n-    }\n+    logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/applications\");\n+    execInPod(pvPod, null, true, \"mkdir -p \" + modelMountPath + \"/applications\");\n \n-    try {\n-      //copy the model file to PV using the temp pod - we don't have access to PVROOT in Jenkins env\n-      logger.info(\"Copying model file {0} to pv directory {1}\",\n-          Paths.get(MODEL_DIR, modelFile).toString(), \"/shared/model\");\n-      Kubernetes.copyFileToPod(domainNamespace, webLogicPod.getMetadata().getName(), null,\n-          Paths.get(MODEL_DIR, modelFile), Paths.get(\"shared\", \"model\", modelFile));\n-    } catch (IOException | ApiException ex) {\n-      logger.warning(ex.getMessage());\n-    }\n-    try {\n-      logger.info(\"Copying application file {0} to pv directory {1}\",\n-          clusterViewAppPath.toString(), \"/shared/applications\");\n-      Kubernetes.copyFileToPod(domainNamespace, webLogicPod.getMetadata().getName(), null,\n-          clusterViewAppPath, Paths.get(\"shared\", \"applications\", \"clusterview.war\"));\n-    } catch (IOException | ApiException ex) {\n-      logger.warning(ex.getMessage());\n-    }\n+    logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/model\");\n+    execInPod(pvPod, null, true, \"mkdir -p \" + modelMountPath + \"/model\");\n+\n+    //copy the model file to PV using the temp pod - we don't have access to PVROOT in Jenkins env\n+    logger.info(\"Copying model file {0} to pv directory {1}\",\n+        Paths.get(MODEL_DIR, modelFile).toString(), modelMountPath + \"/model\", modelFile);\n+    assertDoesNotThrow(() -> copyFileToPod(domainNamespace, pvPod.getMetadata().getName(), null,\n+        Paths.get(MODEL_DIR, modelFile), Paths.get(modelMountPath + \"/model\", modelFile)),\n+        \"Copying file to pod failed\");\n \n+    logger.info(\"Copying application file {0} to pv directory {1}\",\n+        clusterViewAppPath.toString(), modelMountPath + \"/applications\", \"clusterview.war\");\n+    assertDoesNotThrow(() -> copyFileToPod(domainNamespace, pvPod.getMetadata().getName(), null,\n+        clusterViewAppPath, Paths.get(modelMountPath + \"/applications\", \"clusterview.war\")),\n+        \"Copying file to pod failed\");\n+\n+    logger.info(\"Changing file ownership {0} to oracle:root in PV\", modelMountPath);\n+    execInPod(pvPod, null, true, \"chown -R oracle:root \" + modelMountPath);\n   }\n \n   /**\n-   * Test domain creation from model file stored in PV.\n-   * https://oracle.github.io/weblogic-kubernetes-operator\n-   *       /userguide/managing-domains/domain-resource/#domain-spec-elements\n-   * 1. Create the domain custom resource using mii with no domain and specifying a PV location for modelHome\n-   * 2. Verify the domain creation is successful and application is accessible.\n+   * Test domain creation from model file stored in PV. https://oracle.github.io/weblogic-kubernetes-operator\n+       /userguide/managing-domains/domain-resource/#domain-spec-elements\n+    1.Create the domain custom resource using mii with no domain and specifying a PV location for modelHome", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cbbac7877903e53359716a6183669dd72521aaf"}, "originalPosition": 264}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkwNjA4NQ==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1961#discussion_r498906085", "createdAt": "2020-10-02T15:51:35Z", "author": {"login": "sankarpn"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomainModelInPV.java", "diffHunk": "@@ -156,72 +182,87 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     // create secret for admin credentials\n     logger.info(\"Creating secret for admin credentials\");\n     adminSecretName = \"weblogic-credentials\";\n-    createSecretWithUsernamePassword(adminSecretName, domainNamespace, \"weblogic\", \"welcome1\");\n+    createSecretWithUsernamePassword(adminSecretName, domainNamespace, ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n \n     // create model encryption secret\n     logger.info(\"Creating encryption secret\");\n     encryptionSecretName = \"encryptionsecret\";\n     createSecretWithUsernamePassword(encryptionSecretName, domainNamespace, \"weblogicenc\", \"weblogicenc\");\n \n     // create the PV and PVC to store application and model files\n-    createPV(pvName, domainUid, \"ItMiiDomainModelInPV\");\n-    createPVC(pvName, pvcName, domainUid, domainNamespace);\n+    createPV(pvName, domainUid1, \"ItMiiDomainModelInPV\");\n+    createPVC(pvName, pvcName, domainUid1, domainNamespace);\n \n     // build the clusterview application\n     Path distDir = buildApplication(Paths.get(APP_DIR, \"clusterview\"),\n         null, null, \"dist\", domainNamespace);\n     clusterViewAppPath = Paths.get(distDir.toString(), \"clusterview.war\");\n     assertTrue(clusterViewAppPath.toFile().exists(), \"Application archive is not available\");\n \n-    V1Pod webLogicPod = setupPVPod(domainNamespace);\n+    logger.info(\"Setting up WebLogic pod to access PV\");\n+    V1Pod pvPod = setupWebLogicPod(domainNamespace);\n \n-    try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/applications\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/applications\");\n-    } catch (IOException | ApiException | InterruptedException ex) {\n-      logger.warning(ex.getMessage());\n-    }\n-    try {\n-      logger.info(\"Creating directory {0} in PV\", \"/shared/model\");\n-      Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"-c\", \"mkdir /shared/model\");\n-    } catch (IOException | ApiException | InterruptedException ex) {\n-      logger.warning(ex.getMessage());\n-    }\n+    logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/applications\");\n+    execInPod(pvPod, null, true, \"mkdir -p \" + modelMountPath + \"/applications\");\n \n-    try {\n-      //copy the model file to PV using the temp pod - we don't have access to PVROOT in Jenkins env\n-      logger.info(\"Copying model file {0} to pv directory {1}\",\n-          Paths.get(MODEL_DIR, modelFile).toString(), \"/shared/model\");\n-      Kubernetes.copyFileToPod(domainNamespace, webLogicPod.getMetadata().getName(), null,\n-          Paths.get(MODEL_DIR, modelFile), Paths.get(\"shared\", \"model\", modelFile));\n-    } catch (IOException | ApiException ex) {\n-      logger.warning(ex.getMessage());\n-    }\n-    try {\n-      logger.info(\"Copying application file {0} to pv directory {1}\",\n-          clusterViewAppPath.toString(), \"/shared/applications\");\n-      Kubernetes.copyFileToPod(domainNamespace, webLogicPod.getMetadata().getName(), null,\n-          clusterViewAppPath, Paths.get(\"shared\", \"applications\", \"clusterview.war\"));\n-    } catch (IOException | ApiException ex) {\n-      logger.warning(ex.getMessage());\n-    }\n+    logger.info(\"Creating directory {0} in PV\", modelMountPath + \"/model\");\n+    execInPod(pvPod, null, true, \"mkdir -p \" + modelMountPath + \"/model\");\n+\n+    //copy the model file to PV using the temp pod - we don't have access to PVROOT in Jenkins env\n+    logger.info(\"Copying model file {0} to pv directory {1}\",\n+        Paths.get(MODEL_DIR, modelFile).toString(), modelMountPath + \"/model\", modelFile);\n+    assertDoesNotThrow(() -> copyFileToPod(domainNamespace, pvPod.getMetadata().getName(), null,\n+        Paths.get(MODEL_DIR, modelFile), Paths.get(modelMountPath + \"/model\", modelFile)),\n+        \"Copying file to pod failed\");\n \n+    logger.info(\"Copying application file {0} to pv directory {1}\",\n+        clusterViewAppPath.toString(), modelMountPath + \"/applications\", \"clusterview.war\");\n+    assertDoesNotThrow(() -> copyFileToPod(domainNamespace, pvPod.getMetadata().getName(), null,\n+        clusterViewAppPath, Paths.get(modelMountPath + \"/applications\", \"clusterview.war\")),\n+        \"Copying file to pod failed\");\n+\n+    logger.info(\"Changing file ownership {0} to oracle:root in PV\", modelMountPath);\n+    execInPod(pvPod, null, true, \"chown -R oracle:root \" + modelMountPath);\n   }\n \n   /**\n-   * Test domain creation from model file stored in PV.\n-   * https://oracle.github.io/weblogic-kubernetes-operator\n-   *       /userguide/managing-domains/domain-resource/#domain-spec-elements\n-   * 1. Create the domain custom resource using mii with no domain and specifying a PV location for modelHome\n-   * 2. Verify the domain creation is successful and application is accessible.\n+   * Test domain creation from model file stored in PV. https://oracle.github.io/weblogic-kubernetes-operator\n+       /userguide/managing-domains/domain-resource/#domain-spec-elements\n+    1.Create the domain custom resource using mii with no domain and specifying a PV location for modelHome", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODU1Mzk4Ng=="}, "originalCommit": {"oid": "7cbbac7877903e53359716a6183669dd72521aaf"}, "originalPosition": 264}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4029, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}