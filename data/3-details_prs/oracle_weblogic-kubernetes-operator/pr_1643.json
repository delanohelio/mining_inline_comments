{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2OTg1NDU1", "number": 1643, "title": "Async http client change", "bodyText": "Changes for async invocation of HTTP requests to read health of server instances using JDK11 java client (instead of JAX-RS HttpClient).", "createdAt": "2020-05-12T21:40:38Z", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643", "merged": true, "mergeCommit": {"oid": "9d2841e6c7a512603fcb360035ebb834da3f62ad"}, "closed": true, "closedAt": "2020-05-20T21:46:46Z", "author": {"login": "ankedia"}, "timelineItems": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcgR4EMgH2gAyNDE2OTg1NDU1OjVhZTU4OTVhM2FkZDBjOWUxNDdiNzVlM2RlMDFmNTk5YTJiYjVjOTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjLm2GgH2gAyNDE2OTg1NDU1Ojg0NTk0NjU2Y2M0NTE0ZDk3OTAwODZiNGRiZmRjOTAyY2Q1OTdjMDQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5ae5895a3add0c9e147b75e3de01f599a2bb5c93", "author": {"user": {"login": "ankedia", "name": "Anil Kedia"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5ae5895a3add0c9e147b75e3de01f599a2bb5c93", "committedDate": "2020-05-11T16:01:17Z", "message": "changes for using JDK11 http client and async invocation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b64c011b70e23b30bce6c8d9873d2b5a147c4fc", "author": {"user": {"login": "ankedia", "name": "Anil Kedia"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3b64c011b70e23b30bce6c8d9873d2b5a147c4fc", "committedDate": "2020-05-11T20:29:17Z", "message": "Add constant for timeout seconds"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f946f7ed845d48269b098e19f05c21460842b113", "author": {"user": {"login": "ankedia", "name": "Anil Kedia"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f946f7ed845d48269b098e19f05c21460842b113", "committedDate": "2020-05-12T12:37:58Z", "message": "minor change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a83c6f7efb636c941861a91663bc74111546607b", "author": {"user": {"login": "ankedia", "name": "Anil Kedia"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a83c6f7efb636c941861a91663bc74111546607b", "committedDate": "2020-05-12T15:29:14Z", "message": "added new files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3b8d8da9229bee6434d93b2817fc9142f66d6e3", "author": {"user": {"login": "russgold", "name": "Russell Gold"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b3b8d8da9229bee6434d93b2817fc9142f66d6e3", "committedDate": "2020-05-12T15:53:39Z", "message": "added initial tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb78c0195f4f554bb78d59bf1f6114984263bf60", "author": {"user": {"login": "ankedia", "name": "Anil Kedia"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/eb78c0195f4f554bb78d59bf1f6114984263bf60", "committedDate": "2020-05-12T21:09:44Z", "message": "Merge branch 'async-http-client-change' of https://github.com/oracle/weblogic-kubernetes-operator into async-http-client-change"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNDU2MDEw", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#pullrequestreview-410456010", "createdAt": "2020-05-12T22:04:29Z", "commit": {"oid": "f946f7ed845d48269b098e19f05c21460842b113"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjowNDoyOVrOGUanEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjowNDoyOVrOGUanEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2MDY4OA==", "bodyText": "Very small thing ;)... This constant must be many places.  Do we need another? I bet it's available on the HTTP client classes.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r424060688", "createdAt": "2020-05-12T22:04:29Z", "author": {"login": "rjeberhard"}, "path": "operator/src/main/java/oracle/kubernetes/operator/ProcessingConstants.java", "diffHunk": "@@ -34,4 +34,8 @@\n   public static final String DOMAIN_INTROSPECT_VERSION = \"weblogic.domainIntrospectVersion\";\n   public static final String DOMAIN_INPUTS_HASH = \"weblogic.domainInputsHash\";\n   public static final String REMAINING_SERVERS_HEALTH_TO_READ = \"serverHealthRead\";\n+  \n+  public static final String KEY = \"encodedCredentials\";\n+  public static final String RESULT = \"httpResult\";\n+  public static final int HTTP_OK = 200;  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f946f7ed845d48269b098e19f05c21460842b113"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNDU2MzE1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#pullrequestreview-410456315", "createdAt": "2020-05-12T22:05:05Z", "commit": {"oid": "f946f7ed845d48269b098e19f05c21460842b113"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjowNTowNVrOGUaoIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjowNTowNVrOGUaoIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2MDk2Mw==", "bodyText": "New file... \"2018, 2020,\" -> \"2020,\"", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r424060963", "createdAt": "2020-05-12T22:05:05Z", "author": {"login": "rjeberhard"}, "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/HttpClientFactory.java", "diffHunk": "@@ -0,0 +1,9 @@\n+// Copyright (c) 2018, 2020, Oracle Corporation and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f946f7ed845d48269b098e19f05c21460842b113"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNDU4Nzk3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#pullrequestreview-410458797", "createdAt": "2020-05-12T22:10:09Z", "commit": {"oid": "f946f7ed845d48269b098e19f05c21460842b113"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjoxMDowOVrOGUawFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjoxMDowOVrOGUawFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2Mjk5OA==", "bodyText": "Same... new file.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r424062998", "createdAt": "2020-05-12T22:10:09Z", "author": {"login": "rjeberhard"}, "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/HttpClientPool.java", "diffHunk": "@@ -0,0 +1,118 @@\n+// Copyright (c) 2017, 2020, Oracle Corporation and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f946f7ed845d48269b098e19f05c21460842b113"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNDU5MzE1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#pullrequestreview-410459315", "createdAt": "2020-05-12T22:11:06Z", "commit": {"oid": "f946f7ed845d48269b098e19f05c21460842b113"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjoxMTowNlrOGUaxzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjoxMTowNlrOGUaxzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2MzQzOQ==", "bodyText": "This is copy/paste from K8s master logic... Not needed here.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r424063439", "createdAt": "2020-05-12T22:11:06Z", "author": {"login": "rjeberhard"}, "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/HttpClientPool.java", "diffHunk": "@@ -0,0 +1,118 @@\n+// Copyright (c) 2017, 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator.helpers;\n+\n+import java.net.http.HttpClient;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.SynchronousQueue;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import oracle.kubernetes.operator.logging.LoggingFacade;\n+import oracle.kubernetes.operator.logging.LoggingFactory;\n+import oracle.kubernetes.operator.logging.MessageKeys;\n+import oracle.kubernetes.operator.work.Container;\n+import oracle.kubernetes.operator.work.ContainerResolver;\n+\n+public class HttpClientPool extends Pool<HttpClient> {\n+  private static final LoggingFacade LOGGER = LoggingFactory.getLogger(\"Operator\", \"Operator\");\n+  private static final HttpClientFactory FACTORY = new DefaultClientFactory();\n+  private static HttpClientPool SINGLETON = new HttpClientPool();\n+  private static ThreadFactory threadFactory;\n+  private final AtomicBoolean isFirst = new AtomicBoolean(true);\n+\n+  // HttpClient instance that will be shared\n+  private final AtomicReference<HttpClient> instance = new AtomicReference<>();\n+\n+  public static void initialize(ThreadFactory threadFactory) {\n+    HttpClientPool.threadFactory = threadFactory;\n+  }\n+\n+  private static Runnable wrapRunnable(Runnable r) {\n+    return new Runnable() {\n+      @Override\n+      public void run() {\n+        try {\n+          r.run();\n+        } catch (Throwable t) {\n+          // These will almost always be spurious exceptions\n+          LOGGER.finer(MessageKeys.EXCEPTION, t);\n+        }\n+      }\n+    };\n+  }\n+\n+  public static HttpClientPool getInstance() {\n+    return SINGLETON;\n+  }\n+\n+  @Override\n+  protected HttpClient create() {\n+    return instance.updateAndGet(\n+        prev -> {\n+          return prev != null ? prev : getHttpClient();\n+        });\n+  }\n+\n+  private HttpClient getHttpClient() {\n+    LOGGER.entering();\n+\n+    HttpClient httpClient = null;\n+    try {\n+      HttpClientFactory factory = null;\n+      Container c = ContainerResolver.getInstance().getContainer();\n+      if (c != null) {\n+        factory = c.getSpi(HttpClientFactory.class);\n+      }\n+      if (factory == null) {\n+        factory = FACTORY;\n+      }\n+\n+      httpClient = factory.get();\n+    } catch (Throwable e) {\n+      LOGGER.warning(MessageKeys.EXCEPTION, e);\n+    }\n+\n+    if (isFirst.compareAndSet(true, false)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f946f7ed845d48269b098e19f05c21460842b113"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNDYxMzYw", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#pullrequestreview-410461360", "createdAt": "2020-05-12T22:15:18Z", "commit": {"oid": "f946f7ed845d48269b098e19f05c21460842b113"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjoxNToxOFrOGUa4bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjoxNToxOFrOGUa4bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2NTEzNQ==", "bodyText": "Trying to figure out what you're doing here.  I thought you wanted to pool HttpClient instances, but you are creating a single instance and returning it every time.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r424065135", "createdAt": "2020-05-12T22:15:18Z", "author": {"login": "rjeberhard"}, "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/HttpClientPool.java", "diffHunk": "@@ -0,0 +1,118 @@\n+// Copyright (c) 2017, 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator.helpers;\n+\n+import java.net.http.HttpClient;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.SynchronousQueue;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import oracle.kubernetes.operator.logging.LoggingFacade;\n+import oracle.kubernetes.operator.logging.LoggingFactory;\n+import oracle.kubernetes.operator.logging.MessageKeys;\n+import oracle.kubernetes.operator.work.Container;\n+import oracle.kubernetes.operator.work.ContainerResolver;\n+\n+public class HttpClientPool extends Pool<HttpClient> {\n+  private static final LoggingFacade LOGGER = LoggingFactory.getLogger(\"Operator\", \"Operator\");\n+  private static final HttpClientFactory FACTORY = new DefaultClientFactory();\n+  private static HttpClientPool SINGLETON = new HttpClientPool();\n+  private static ThreadFactory threadFactory;\n+  private final AtomicBoolean isFirst = new AtomicBoolean(true);\n+\n+  // HttpClient instance that will be shared\n+  private final AtomicReference<HttpClient> instance = new AtomicReference<>();\n+\n+  public static void initialize(ThreadFactory threadFactory) {\n+    HttpClientPool.threadFactory = threadFactory;\n+  }\n+\n+  private static Runnable wrapRunnable(Runnable r) {\n+    return new Runnable() {\n+      @Override\n+      public void run() {\n+        try {\n+          r.run();\n+        } catch (Throwable t) {\n+          // These will almost always be spurious exceptions\n+          LOGGER.finer(MessageKeys.EXCEPTION, t);\n+        }\n+      }\n+    };\n+  }\n+\n+  public static HttpClientPool getInstance() {\n+    return SINGLETON;\n+  }\n+\n+  @Override\n+  protected HttpClient create() {\n+    return instance.updateAndGet(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f946f7ed845d48269b098e19f05c21460842b113"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNDYzNTM5", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#pullrequestreview-410463539", "createdAt": "2020-05-12T22:20:02Z", "commit": {"oid": "f946f7ed845d48269b098e19f05c21460842b113"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjoyMDowMlrOGUa_Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjoyMDowMlrOGUa_Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2Njg4Nw==", "bodyText": "probably want Throwable here", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r424066887", "createdAt": "2020-05-12T22:20:02Z", "author": {"login": "rjeberhard"}, "path": "operator/src/main/java/oracle/kubernetes/operator/steps/ReadHealthStep.java", "diffHunk": "@@ -128,47 +242,62 @@ public NextAction apply(Packet packet) {\n           serverConfig = findServerConfig(cluster, serverName);\n         }\n \n-        if (httpClient == null) {\n+        if (encodedCredentials == null) {\n           LOGGER.info(\n               (LoggingFilter) packet.get(LoggingFilter.LOGGING_FILTER_PACKET_KEY),\n               MessageKeys.WLS_HEALTH_READ_FAILED_NO_HTTPCLIENT,\n               packet.get(ProcessingConstants.SERVER_NAME));\n         } else {\n \n           String serviceUrl =\n-              HttpClient.getServiceUrl(\n+              getServiceUrl(\n                   service,\n                   pod,\n                   serverConfig.getAdminProtocolChannelName(),\n                   serverConfig.getListenPort());\n           if (serviceUrl != null) {\n-            Result result =\n-                httpClient.executePostUrlOnServiceClusterIP(\n-                    getRetrieveHealthSearchUrl(),\n-                    serviceUrl,\n-                    getRetrieveHealthSearchPayload(),\n-                    false);\n-\n-            Pair<String, ServerHealth> pair = createServerHealthFromResult(result);\n-\n-            String state = pair.getLeft();\n-            if (state != null && !state.isEmpty()) {\n-              ConcurrentMap<String, String> serverStateMap =\n-                  (ConcurrentMap<String, String>) packet.get(SERVER_STATE_MAP);\n-              info.updateLastKnownServerStatus(serverName, state);\n-              serverStateMap.put(serverName, state);\n-            }\n-\n-            @SuppressWarnings(\"unchecked\")\n-            ConcurrentMap<String, ServerHealth> serverHealthMap =\n-                (ConcurrentMap<String, ServerHealth>)\n-                    packet.get(ProcessingConstants.SERVER_HEALTH_MAP);\n-\n-            serverHealthMap.put(\n-                (String) packet.get(ProcessingConstants.SERVER_NAME), pair.getRight());\n-            AtomicInteger remainingServersHealthToRead =\n-                packet.getValue(ProcessingConstants.REMAINING_SERVERS_HEALTH_TO_READ);\n-            remainingServersHealthToRead.getAndDecrement();\n+            return doSuspend(\n+                (fiber) -> {\n+                  try {\n+                    String url = serviceUrl + getRetrieveHealthSearchUrl();\n+                    HttpRequest request =\n+                        HttpRequest.newBuilder()\n+                            .uri(URI.create(url))\n+                            .timeout(Duration.ofSeconds(HTTP_TIMEOUT_SECONDS))\n+                            .header(\"Authorization\", \"Basic \" + encodedCredentials)\n+                            .header(\"Accept\", \"application/json\")\n+                            .header(\"Content-Type\", \"application/json\")\n+                            .header(\"X-Requested-By\", \"WebLogic Operator\")\n+                            .POST(\n+                                HttpRequest.BodyPublishers.ofString(\n+                                    getRetrieveHealthSearchPayload()))\n+                            .build();\n+                    httpClient\n+                        .sendAsync(request, HttpResponse.BodyHandlers.ofString())\n+                        .thenApply(\n+                            response ->\n+                                new Result(\n+                                    response.body(),\n+                                    response.statusCode(),\n+                                    response.statusCode() == ProcessingConstants.HTTP_OK))\n+                        .whenComplete(\n+                            (input, exception) -> {\n+                              if (exception != null) {\n+                                LOGGER.severe(\n+                                    MessageKeys.HTTP_METHOD_FAILED,\n+                                    \"POST\",\n+                                    url,\n+                                    input.getResponse());\n+                              } else {\n+                                packet.put(ProcessingConstants.RESULT, input);\n+                              }\n+                              fiber.resume(packet);\n+                            });\n+                  } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f946f7ed845d48269b098e19f05c21460842b113"}, "originalPosition": 257}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNDYzODk0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#pullrequestreview-410463894", "createdAt": "2020-05-12T22:20:52Z", "commit": {"oid": "f946f7ed845d48269b098e19f05c21460842b113"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjoyMDo1MlrOGUbAgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjoyMDo1MlrOGUbAgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2NzIwMg==", "bodyText": "Is there any support for a timeout?  What if the response never comes back?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r424067202", "createdAt": "2020-05-12T22:20:52Z", "author": {"login": "rjeberhard"}, "path": "operator/src/main/java/oracle/kubernetes/operator/steps/ReadHealthStep.java", "diffHunk": "@@ -128,47 +242,62 @@ public NextAction apply(Packet packet) {\n           serverConfig = findServerConfig(cluster, serverName);\n         }\n \n-        if (httpClient == null) {\n+        if (encodedCredentials == null) {\n           LOGGER.info(\n               (LoggingFilter) packet.get(LoggingFilter.LOGGING_FILTER_PACKET_KEY),\n               MessageKeys.WLS_HEALTH_READ_FAILED_NO_HTTPCLIENT,\n               packet.get(ProcessingConstants.SERVER_NAME));\n         } else {\n \n           String serviceUrl =\n-              HttpClient.getServiceUrl(\n+              getServiceUrl(\n                   service,\n                   pod,\n                   serverConfig.getAdminProtocolChannelName(),\n                   serverConfig.getListenPort());\n           if (serviceUrl != null) {\n-            Result result =\n-                httpClient.executePostUrlOnServiceClusterIP(\n-                    getRetrieveHealthSearchUrl(),\n-                    serviceUrl,\n-                    getRetrieveHealthSearchPayload(),\n-                    false);\n-\n-            Pair<String, ServerHealth> pair = createServerHealthFromResult(result);\n-\n-            String state = pair.getLeft();\n-            if (state != null && !state.isEmpty()) {\n-              ConcurrentMap<String, String> serverStateMap =\n-                  (ConcurrentMap<String, String>) packet.get(SERVER_STATE_MAP);\n-              info.updateLastKnownServerStatus(serverName, state);\n-              serverStateMap.put(serverName, state);\n-            }\n-\n-            @SuppressWarnings(\"unchecked\")\n-            ConcurrentMap<String, ServerHealth> serverHealthMap =\n-                (ConcurrentMap<String, ServerHealth>)\n-                    packet.get(ProcessingConstants.SERVER_HEALTH_MAP);\n-\n-            serverHealthMap.put(\n-                (String) packet.get(ProcessingConstants.SERVER_NAME), pair.getRight());\n-            AtomicInteger remainingServersHealthToRead =\n-                packet.getValue(ProcessingConstants.REMAINING_SERVERS_HEALTH_TO_READ);\n-            remainingServersHealthToRead.getAndDecrement();\n+            return doSuspend(\n+                (fiber) -> {\n+                  try {\n+                    String url = serviceUrl + getRetrieveHealthSearchUrl();\n+                    HttpRequest request =\n+                        HttpRequest.newBuilder()\n+                            .uri(URI.create(url))\n+                            .timeout(Duration.ofSeconds(HTTP_TIMEOUT_SECONDS))\n+                            .header(\"Authorization\", \"Basic \" + encodedCredentials)\n+                            .header(\"Accept\", \"application/json\")\n+                            .header(\"Content-Type\", \"application/json\")\n+                            .header(\"X-Requested-By\", \"WebLogic Operator\")\n+                            .POST(\n+                                HttpRequest.BodyPublishers.ofString(\n+                                    getRetrieveHealthSearchPayload()))\n+                            .build();\n+                    httpClient\n+                        .sendAsync(request, HttpResponse.BodyHandlers.ofString())\n+                        .thenApply(\n+                            response ->\n+                                new Result(\n+                                    response.body(),\n+                                    response.statusCode(),\n+                                    response.statusCode() == ProcessingConstants.HTTP_OK))\n+                        .whenComplete(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f946f7ed845d48269b098e19f05c21460842b113"}, "originalPosition": 244}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNDY0ODM2", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#pullrequestreview-410464836", "createdAt": "2020-05-12T22:22:51Z", "commit": {"oid": "f946f7ed845d48269b098e19f05c21460842b113"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjoyMjo1MVrOGUbDkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjoyMjo1MVrOGUbDkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2Nzk4Ng==", "bodyText": "I know you probably copied this method, but this text doesn't describe what the method is doing. It looks like it's figuring out the URL of where the server can receive admin traffic.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r424067986", "createdAt": "2020-05-12T22:22:51Z", "author": {"login": "rjeberhard"}, "path": "operator/src/main/java/oracle/kubernetes/operator/steps/ReadHealthStep.java", "diffHunk": "@@ -183,15 +312,114 @@ public NextAction apply(Packet packet) {\n       }\n     }\n \n+    /**\n+     * Returns the URL to access the Service; using the Service clusterIP and port. If the service", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f946f7ed845d48269b098e19f05c21460842b113"}, "originalPosition": 270}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNDcwNzY3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#pullrequestreview-410470767", "createdAt": "2020-05-12T22:36:21Z", "commit": {"oid": "f946f7ed845d48269b098e19f05c21460842b113"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjozNjoyMlrOGUbWjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjozNjoyMlrOGUbWjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3Mjg0NQ==", "bodyText": "The EncodeCredentialsForServerStep is just creating a readSecret step and then call doNext(). Can it be removed and instead we call SecretHelper.getSecretData() here?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r424072845", "createdAt": "2020-05-12T22:36:22Z", "author": {"login": "alai8"}, "path": "operator/src/main/java/oracle/kubernetes/operator/steps/ReadHealthStep.java", "diffHunk": "@@ -89,13 +103,110 @@ public NextAction apply(Packet packet) {\n     V1Pod pod = info.getServerPod(serverName);\n     if (service != null) {\n       Step getClient =\n-          HttpClient.createAuthenticatedClientForServer(\n-              namespace, secretName, new ReadHealthWithHttpClientStep(service, pod, getNext()));\n+          getEncodedCredentialsForServer(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f946f7ed845d48269b098e19f05c21460842b113"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c527e827dc7d08ce31bec5f8959cfdd04f0f1182", "author": {"user": {"login": "ankedia", "name": "Anil Kedia"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c527e827dc7d08ce31bec5f8959cfdd04f0f1182", "committedDate": "2020-05-12T23:43:51Z", "message": "Review changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e5a979059dd1d5e015ad2bb427fadc3faeb1d4b", "author": {"user": {"login": "ankedia", "name": "Anil Kedia"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8e5a979059dd1d5e015ad2bb427fadc3faeb1d4b", "committedDate": "2020-05-13T04:39:08Z", "message": "delete unit testing related WIP files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d387c1b124fd7d662b493c7f02d29d860f28ca7", "author": {"user": {"login": "ankedia", "name": "Anil Kedia"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7d387c1b124fd7d662b493c7f02d29d860f28ca7", "committedDate": "2020-05-14T00:13:22Z", "message": "changes based on PR review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d89a9516ac2edf6fd03acd9e3e0e64d66d10964", "author": {"user": {"login": "russgold", "name": "Russell Gold"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/2d89a9516ac2edf6fd03acd9e3e0e64d66d10964", "committedDate": "2020-05-14T19:18:18Z", "message": "Create steps for async http calls"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "027ef27b06a9d7037a15f5b9ccd1b915d0e1ca80", "author": {"user": {"login": "russgold", "name": "Russell Gold"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/027ef27b06a9d7037a15f5b9ccd1b915d0e1ca80", "committedDate": "2020-05-15T18:05:37Z", "message": "Use steps to execute asynchronous http request"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dca3bbd002a4aa7c3cf6eb459bb55e75788388b7", "author": {"user": {"login": "russgold", "name": "Russell Gold"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/dca3bbd002a4aa7c3cf6eb459bb55e75788388b7", "committedDate": "2020-05-15T18:12:44Z", "message": "remove obsolete Result classes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNzc4MjI0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#pullrequestreview-413778224", "createdAt": "2020-05-18T16:59:43Z", "commit": {"oid": "dca3bbd002a4aa7c3cf6eb459bb55e75788388b7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNjo1OTo0M1rOGW_8Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNjo1OTo0M1rOGW_8Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc2OTQzMQ==", "bodyText": "If you merge in latest from develop, do changes to this file and the tgz file go away? These shouldn't be part of your change.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r426769431", "createdAt": "2020-05-18T16:59:43Z", "author": {"login": "rjeberhard"}, "path": "docs/charts/index.yaml", "diffHunk": "@@ -2,68 +2,68 @@ apiVersion: v1\n entries:\n   weblogic-operator:\n   - apiVersion: v1\n-    created: 2020-03-21T22:03:53.042035124Z\n+    created: 2020-05-14T14:50:06.509204738-04:00", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dca3bbd002a4aa7c3cf6eb459bb55e75788388b7"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNzc4NTg4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#pullrequestreview-413778588", "createdAt": "2020-05-18T17:00:13Z", "commit": {"oid": "dca3bbd002a4aa7c3cf6eb459bb55e75788388b7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzowMDoxM1rOGW_9QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzowMDoxM1rOGW_9QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc2OTcyOQ==", "bodyText": "You need a better constant name.  Why not ENCODED_CREDENTIALS?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r426769729", "createdAt": "2020-05-18T17:00:13Z", "author": {"login": "rjeberhard"}, "path": "operator/src/main/java/oracle/kubernetes/operator/ProcessingConstants.java", "diffHunk": "@@ -34,4 +34,6 @@\n   public static final String DOMAIN_INTROSPECT_VERSION = \"weblogic.domainIntrospectVersion\";\n   public static final String DOMAIN_INPUTS_HASH = \"weblogic.domainInputsHash\";\n   public static final String REMAINING_SERVERS_HEALTH_TO_READ = \"serverHealthRead\";\n+\n+  public static final String KEY = \"encodedCredentials\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dca3bbd002a4aa7c3cf6eb459bb55e75788388b7"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNzc5MDc4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#pullrequestreview-413779078", "createdAt": "2020-05-18T17:00:53Z", "commit": {"oid": "dca3bbd002a4aa7c3cf6eb459bb55e75788388b7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzowMDo1NFrOGW_-sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzowMDo1NFrOGW_-sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3MDA5OQ==", "bodyText": "JavaDoc.  What is the \"cont\" parameter?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r426770099", "createdAt": "2020-05-18T17:00:54Z", "author": {"login": "rjeberhard"}, "path": "operator/src/main/java/oracle/kubernetes/operator/calls/AsyncRequestStep.java", "diffHunk": "@@ -123,6 +126,90 @@ public void listenTimeoutDoubled() {\n     timeoutSeconds *= 2;\n   }\n \n+  class AsyncRequestStepProcessing {\n+\n+    final Packet packet;\n+    final RetryStrategy retryStrategy;\n+    final String cont;\n+    final AtomicBoolean didResume = new AtomicBoolean(false);\n+    final ApiClient client;\n+\n+    public AsyncRequestStepProcessing(Packet packet, RetryStrategy retry, String cont) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dca3bbd002a4aa7c3cf6eb459bb55e75788388b7"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNzgxMzYy", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#pullrequestreview-413781362", "createdAt": "2020-05-18T17:04:13Z", "commit": {"oid": "dca3bbd002a4aa7c3cf6eb459bb55e75788388b7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzowNDoxM1rOGXAFag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzowNDoxM1rOGXAFag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3MTgxOA==", "bodyText": "I think this class is unnecessary because you don't actually pool HttpClient.  Instead, you can share a single instance.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r426771818", "createdAt": "2020-05-18T17:04:13Z", "author": {"login": "rjeberhard"}, "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/HttpClientPool.java", "diffHunk": "@@ -0,0 +1,114 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dca3bbd002a4aa7c3cf6eb459bb55e75788388b7"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNzg1MDM1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#pullrequestreview-413785035", "createdAt": "2020-05-18T17:09:37Z", "commit": {"oid": "dca3bbd002a4aa7c3cf6eb459bb55e75788388b7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzowOTozN1rOGXAQ6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzowOTozN1rOGXAQ6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3NDc2Mw==", "bodyText": "What is the full set of tasks in the steps for this fiber? This says that if the HTTP request times-out, then the full fiber stops.  If this fiber is only reading the status for one server than this is fine. If the fiber is running through a set of servers then none of them will have status updated. If might make more sense to resume the fiber and have the next step (that processes the result) handle that there is no data.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r426774763", "createdAt": "2020-05-18T17:09:37Z", "author": {"login": "rjeberhard"}, "path": "operator/src/main/java/oracle/kubernetes/operator/http/HttpAsyncRequestStep.java", "diffHunk": "@@ -0,0 +1,122 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator.http;\n+\n+import java.net.HttpURLConnection;\n+import java.net.URI;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import oracle.kubernetes.operator.helpers.HttpClientPool;\n+import oracle.kubernetes.operator.logging.LoggingFacade;\n+import oracle.kubernetes.operator.logging.LoggingFactory;\n+import oracle.kubernetes.operator.logging.MessageKeys;\n+import oracle.kubernetes.operator.work.AsyncFiber;\n+import oracle.kubernetes.operator.work.NextAction;\n+import oracle.kubernetes.operator.work.Packet;\n+import oracle.kubernetes.operator.work.Step;\n+\n+/**\n+ * An asynchronous step to handle http requests.\n+ */\n+public class HttpAsyncRequestStep extends Step {\n+\n+  interface FutureFactory {\n+    CompletableFuture<HttpResponse<String>> createFuture(HttpRequest request);\n+  }\n+\n+  private static final LoggingFacade LOGGER = LoggingFactory.getLogger(\"Operator\", \"Operator\");\n+  private static FutureFactory DEFAULT_FACTORY = HttpAsyncRequestStep::createFuture;\n+\n+  private static final long DEFAULT_TIMEOUT_SECONDS = 5;\n+\n+  private static FutureFactory factory = DEFAULT_FACTORY;\n+  private final HttpRequest request;\n+  private long timeoutSeconds = DEFAULT_TIMEOUT_SECONDS;\n+\n+  private HttpAsyncRequestStep(HttpRequest request, HttpResponseStep responseStep) {\n+    super(responseStep);\n+    this.request = request;\n+  }\n+\n+  /**\n+   * Creates a step to send a GET request to a server. If a response is received, processing\n+   * continues with the response step. If none is received within the timeout, the fiber is terminated.\n+   * @param url the URL of the targeted server\n+   * @param responseStep the step to handle the response\n+   * @return a new step to run as part of a fiber, linked to the response step\n+   */\n+  public static HttpAsyncRequestStep createGetRequest(String url, HttpResponseStep responseStep) {\n+    HttpRequest request = HttpRequest.newBuilder(URI.create(url)).GET().build();\n+    return create(request, responseStep);\n+  }\n+\n+  /**\n+   * Creates a step to send a request to a server. If a response is received, processing\n+   * continues with the response step. If none is received within the timeout, the fiber is terminated.\n+   * @param request the http request to send\n+   * @param responseStep the step to handle the response\n+   * @return a new step to run as part of a fiber, linked to the response step\n+   */\n+  public static HttpAsyncRequestStep create(HttpRequest request, HttpResponseStep responseStep) {\n+    return new HttpAsyncRequestStep(request, responseStep);\n+  }\n+\n+  /**\n+   * Overrides the default timeout for this request.\n+   * @param timeoutSeconds the new timeout, in seconds\n+   * @return this step\n+   */\n+  public HttpAsyncRequestStep withTimeoutSeconds(long timeoutSeconds) {\n+    this.timeoutSeconds = timeoutSeconds;\n+    return this;\n+  }\n+\n+  @Override\n+  public NextAction apply(Packet packet) {\n+    AsyncProcessing processing = new AsyncProcessing(packet);\n+    return doSuspend(processing::process);\n+  }\n+\n+  class AsyncProcessing {\n+    private Packet packet;\n+    private CompletableFuture<HttpResponse<String>> future;\n+\n+    AsyncProcessing(Packet packet) {\n+      this.packet = packet;\n+    }\n+\n+    void process(AsyncFiber fiber) {\n+      future = factory.createFuture(request);\n+      future.whenComplete((response, throwable) -> resume(fiber, response, throwable));\n+      fiber.scheduleOnce(timeoutSeconds, TimeUnit.SECONDS, () -> checkTimeout(fiber));\n+    }\n+\n+    private void checkTimeout(AsyncFiber fiber) {\n+      if (!future.isDone()) {\n+        fiber.terminate(new RuntimeException(\"timeout\"), packet);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dca3bbd002a4aa7c3cf6eb459bb55e75788388b7"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNzg2MDc0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#pullrequestreview-413786074", "createdAt": "2020-05-18T17:11:11Z", "commit": {"oid": "dca3bbd002a4aa7c3cf6eb459bb55e75788388b7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzoxMToxMVrOGXAUPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzoxMToxMVrOGXAUPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3NTYxNA==", "bodyText": "Looks like this code already handles no response.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#discussion_r426775614", "createdAt": "2020-05-18T17:11:11Z", "author": {"login": "rjeberhard"}, "path": "operator/src/main/java/oracle/kubernetes/operator/http/HttpResponseStep.java", "diffHunk": "@@ -0,0 +1,65 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator.http;\n+\n+import java.net.HttpURLConnection;\n+import java.net.http.HttpResponse;\n+import java.util.Optional;\n+\n+import oracle.kubernetes.operator.work.Component;\n+import oracle.kubernetes.operator.work.NextAction;\n+import oracle.kubernetes.operator.work.Packet;\n+import oracle.kubernetes.operator.work.Step;\n+\n+public abstract class HttpResponseStep extends Step {\n+  static final String RESPONSE = \"httpResponse\";\n+\n+  public HttpResponseStep(Step next) {\n+    super(next);\n+  }\n+\n+  @Override\n+  public NextAction apply(Packet packet) {\n+    return Optional.ofNullable(getResponse(packet)).map(r -> doApply(packet, r)).orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dca3bbd002a4aa7c3cf6eb459bb55e75788388b7"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4521b7a3409374478ec4312c1906b63ac45bf8a6", "author": {"user": {"login": "russgold", "name": "Russell Gold"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/4521b7a3409374478ec4312c1906b63ac45bf8a6", "committedDate": "2020-05-18T19:25:15Z", "message": "Skip response processing on timeout and continue the fiber."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3486e3a3a9d085c8af79dcfd4aa313b43456a602", "author": {"user": {"login": "russgold", "name": "Russell Gold"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3486e3a3a9d085c8af79dcfd4aa313b43456a602", "committedDate": "2020-05-18T22:09:18Z", "message": "revert to starting values of generated files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba303f07be1311d54db3b4b775919af3d2eb4e29", "author": {"user": {"login": "ankedia", "name": "Anil Kedia"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ba303f07be1311d54db3b4b775919af3d2eb4e29", "committedDate": "2020-05-18T22:58:39Z", "message": "Changes based on PR review comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8da758660512f8ad59449a428b3decfd547c5f03", "author": {"user": {"login": "ankedia", "name": "Anil Kedia"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8da758660512f8ad59449a428b3decfd547c5f03", "committedDate": "2020-05-18T23:00:05Z", "message": "Merge branch 'async-http-client-change' of https://github.com/oracle/weblogic-kubernetes-operator into async-http-client-change"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NDM4NDc5", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1643#pullrequestreview-415438479", "createdAt": "2020-05-20T15:10:00Z", "commit": {"oid": "8da758660512f8ad59449a428b3decfd547c5f03"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fdbcccd4473100fec4b102eb37e430f87a903a2a", "author": {"user": {"login": "ankedia", "name": "Anil Kedia"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/fdbcccd4473100fec4b102eb37e430f87a903a2a", "committedDate": "2020-05-20T16:04:05Z", "message": "Reduce log serverity level from warning to fine"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84594656cc4514d9790086b4dbfdc902cd597c04", "author": {"user": {"login": "ankedia", "name": "Anil Kedia"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/84594656cc4514d9790086b4dbfdc902cd597c04", "committedDate": "2020-05-20T16:24:49Z", "message": "changed statusUpdateInitialShortDelay from 3 to 5"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4783, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}