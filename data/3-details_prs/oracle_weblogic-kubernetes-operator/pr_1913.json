{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1NTg4NzA4", "number": 1913, "title": "Added integration test cases for Dedicated namespace scenarios", "bodyText": "Test cases:\nTest case 1 - Set \"dedicated\" to true, make sure that the domains deployed in the operator's namespace come up\nTest case 2 - Set \"dedicated\" to true, set the domainNamespaces to something that does not contain the operator's namespace. make sure that the domains in the operator's targetNamespaces do not come up (because when dedicated is set to true, the operator's domainNamespaces value is ignored).\nTest case 3 - Run scaling the cluster with \"dedicated\" set to true\n4.    Negative tests\n\nThe CRD is not present or is deleted, verify that Operator fails with error\nThe CRD is present but is a lower than expected version, verify that Operator fails with error\n\nPassed Jekins jobs:\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/2258/  (parallel)\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/2249/  (sequential)\nWith the latest change on 10/06/2020, results of running Jenkins jobs\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/2273/  (parallel)\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/2274/  (sequential)", "createdAt": "2020-09-12T00:15:37Z", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1913", "merged": true, "mergeCommit": {"oid": "3e5401d6ac18e06de2ed202a644b61682a7f918c"}, "closed": true, "closedAt": "2020-10-07T16:45:17Z", "author": {"login": "hzhao-github"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHqvpvAH2gAyNDg1NTg4NzA4OjIyNmJiZTc1YjgzYmUxZmZlM2M1NjVlMDYwM2IyNDMyNTljM2ZiMzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdQPkNagFqTUwNDA2MDQ2MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "226bbe75b83be1ffe3c565e0603b243259c3fb36", "author": {"user": {"login": "hzhao-github", "name": "Huiling Zhao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/226bbe75b83be1ffe3c565e0603b243259c3fb36", "committedDate": "2020-09-11T01:02:46Z", "message": "Added integration test cases for Dedicated namespace scenarios jenkins-ignore"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4NzM1NDM4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1913#pullrequestreview-488735438", "createdAt": "2020-09-15T14:19:48Z", "commit": {"oid": "226bbe75b83be1ffe3c565e0603b243259c3fb36"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNDoxOTo0OFrOHSEQ7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNDozMjowNFrOHSE32Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcwNjI4Ng==", "bodyText": "you are not installing operator here, remove the log message", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1913#discussion_r488706286", "createdAt": "2020-09-15T14:19:48Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDedicatedMode.java", "diffHunk": "@@ -0,0 +1,403 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+/**\n+ * Integration test cases for \"Dedicated\" namespace scenarios\n+ * 1. Set \"dedicated\" to true, verify that the domains deployed in the operator's namespace come up.\n+ * 2. Set \"dedicated\" to true, verify that the domains not deployed in the operator's namespace does not come up.\n+ * 3. Scale the cluster with \"dedicated\" set to true\n+ * 4. Negative tests\n+ *    1) The CRD is not present or is deleted, verify that Operator fails with error\n+ *    2) The CRD is present but is a lower than expected version, verify that Operator fails with error\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test Operator and WebLogic domain with Dedicated set to true\")\n+@IntegrationTest\n+class ItDedicatedMode {\n+  // namespace constants\n+  private static String opNamespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+\n+  // domain constants\n+  private final String domainUid = \"domain1\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPodPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  // operator constants\n+  private static HelmParams opHelmParams;\n+  private static String opServiceAccount;\n+  private static final String domainNamespaceSelectionStrategy = \"Dedicated\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Get namespaces for operator and domain2.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism.\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // in the dedicated mode, the operator only manages domains in the operator's own namespace\n+    domain1Namespace = opNamespace;\n+\n+    // get a new unique domainNamespace\n+    logger.info(\"Assigning a unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(1);\n+\n+    logger.info(\"Installing and verifying operator\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "226bbe75b83be1ffe3c565e0603b243259c3fb36"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcwODE3OQ==", "bodyText": "that domains not deployed or that a domain not deployed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1913#discussion_r488708179", "createdAt": "2020-09-15T14:22:07Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDedicatedMode.java", "diffHunk": "@@ -0,0 +1,403 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+/**\n+ * Integration test cases for \"Dedicated\" namespace scenarios\n+ * 1. Set \"dedicated\" to true, verify that the domains deployed in the operator's namespace come up.\n+ * 2. Set \"dedicated\" to true, verify that the domains not deployed in the operator's namespace does not come up.\n+ * 3. Scale the cluster with \"dedicated\" set to true\n+ * 4. Negative tests\n+ *    1) The CRD is not present or is deleted, verify that Operator fails with error\n+ *    2) The CRD is present but is a lower than expected version, verify that Operator fails with error\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test Operator and WebLogic domain with Dedicated set to true\")\n+@IntegrationTest\n+class ItDedicatedMode {\n+  // namespace constants\n+  private static String opNamespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+\n+  // domain constants\n+  private final String domainUid = \"domain1\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPodPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  // operator constants\n+  private static HelmParams opHelmParams;\n+  private static String opServiceAccount;\n+  private static final String domainNamespaceSelectionStrategy = \"Dedicated\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Get namespaces for operator and domain2.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism.\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // in the dedicated mode, the operator only manages domains in the operator's own namespace\n+    domain1Namespace = opNamespace;\n+\n+    // get a new unique domainNamespace\n+    logger.info(\"Assigning a unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(1);\n+\n+    logger.info(\"Installing and verifying operator\");\n+    opServiceAccount = opNamespace + \"-sa\";\n+    opHelmParams =\n+        new HelmParams().releaseName(OPERATOR_RELEASE_NAME)\n+            .namespace(opNamespace)\n+            .chartDir(OPERATOR_CHART_DIR);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+  }\n+\n+  /**\n+   * Set \"dedicated\" to true and set the domainNamespaces to something that does not contain the operator's namespace,\n+   * make sure that the domains in the operator's target namespaces do not come up\n+   * because when dedicated is set to true, the operator's domainNamespaces value is ignored.\n+   * 1) Create CRD.\n+   * 2) Install an Operator with namespace=op-ns, domainNamespaces=wls-ns\n+   *    and domainNamespaceSelectionStrategy=Dedicated.\n+   * 3) Verify the Operator is up and running.\n+   * 4) Create WebLogic Domain its namespace=wls-ns.\n+   * 5) Verify that domain whose namespace = wls-ns does not come up.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"Set dedicated to true and verify that a domains not deployed in operator's namespace doesn't come up\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "226bbe75b83be1ffe3c565e0603b243259c3fb36"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcxMDI2NQ==", "bodyText": "this is not needed, remove", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1913#discussion_r488710265", "createdAt": "2020-09-15T14:24:46Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDedicatedMode.java", "diffHunk": "@@ -0,0 +1,403 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+/**\n+ * Integration test cases for \"Dedicated\" namespace scenarios\n+ * 1. Set \"dedicated\" to true, verify that the domains deployed in the operator's namespace come up.\n+ * 2. Set \"dedicated\" to true, verify that the domains not deployed in the operator's namespace does not come up.\n+ * 3. Scale the cluster with \"dedicated\" set to true\n+ * 4. Negative tests\n+ *    1) The CRD is not present or is deleted, verify that Operator fails with error\n+ *    2) The CRD is present but is a lower than expected version, verify that Operator fails with error\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test Operator and WebLogic domain with Dedicated set to true\")\n+@IntegrationTest\n+class ItDedicatedMode {\n+  // namespace constants\n+  private static String opNamespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+\n+  // domain constants\n+  private final String domainUid = \"domain1\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPodPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  // operator constants\n+  private static HelmParams opHelmParams;\n+  private static String opServiceAccount;\n+  private static final String domainNamespaceSelectionStrategy = \"Dedicated\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Get namespaces for operator and domain2.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism.\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // in the dedicated mode, the operator only manages domains in the operator's own namespace\n+    domain1Namespace = opNamespace;\n+\n+    // get a new unique domainNamespace\n+    logger.info(\"Assigning a unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(1);\n+\n+    logger.info(\"Installing and verifying operator\");\n+    opServiceAccount = opNamespace + \"-sa\";\n+    opHelmParams =\n+        new HelmParams().releaseName(OPERATOR_RELEASE_NAME)\n+            .namespace(opNamespace)\n+            .chartDir(OPERATOR_CHART_DIR);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+  }\n+\n+  /**\n+   * Set \"dedicated\" to true and set the domainNamespaces to something that does not contain the operator's namespace,\n+   * make sure that the domains in the operator's target namespaces do not come up\n+   * because when dedicated is set to true, the operator's domainNamespaces value is ignored.\n+   * 1) Create CRD.\n+   * 2) Install an Operator with namespace=op-ns, domainNamespaces=wls-ns\n+   *    and domainNamespaceSelectionStrategy=Dedicated.\n+   * 3) Verify the Operator is up and running.\n+   * 4) Create WebLogic Domain its namespace=wls-ns.\n+   * 5) Verify that domain whose namespace = wls-ns does not come up.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"Set dedicated to true and verify that a domains not deployed in operator's namespace doesn't come up\")\n+  public void testDedicatedModeDiffNamespace() {\n+    // install and verify operator\n+    logger.info(\"Installing and verifying operator\");\n+    installAndVerifyOperator(opNamespace, opNamespace + \"-sa\",\n+        true, 0, opHelmParams, domainNamespaceSelectionStrategy,\n+        false, domain2Namespace);\n+\n+    // create and verify the domain\n+    logger.info(\"Creating and verifying model in image domain\");\n+    createDomain(domain2Namespace);\n+\n+    try {\n+      Thread.sleep(30 * 1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "226bbe75b83be1ffe3c565e0603b243259c3fb36"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcxMDk4NA==", "bodyText": "by", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1913#discussion_r488710984", "createdAt": "2020-09-15T14:25:39Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDedicatedMode.java", "diffHunk": "@@ -0,0 +1,403 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+/**\n+ * Integration test cases for \"Dedicated\" namespace scenarios\n+ * 1. Set \"dedicated\" to true, verify that the domains deployed in the operator's namespace come up.\n+ * 2. Set \"dedicated\" to true, verify that the domains not deployed in the operator's namespace does not come up.\n+ * 3. Scale the cluster with \"dedicated\" set to true\n+ * 4. Negative tests\n+ *    1) The CRD is not present or is deleted, verify that Operator fails with error\n+ *    2) The CRD is present but is a lower than expected version, verify that Operator fails with error\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test Operator and WebLogic domain with Dedicated set to true\")\n+@IntegrationTest\n+class ItDedicatedMode {\n+  // namespace constants\n+  private static String opNamespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+\n+  // domain constants\n+  private final String domainUid = \"domain1\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPodPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  // operator constants\n+  private static HelmParams opHelmParams;\n+  private static String opServiceAccount;\n+  private static final String domainNamespaceSelectionStrategy = \"Dedicated\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Get namespaces for operator and domain2.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism.\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // in the dedicated mode, the operator only manages domains in the operator's own namespace\n+    domain1Namespace = opNamespace;\n+\n+    // get a new unique domainNamespace\n+    logger.info(\"Assigning a unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(1);\n+\n+    logger.info(\"Installing and verifying operator\");\n+    opServiceAccount = opNamespace + \"-sa\";\n+    opHelmParams =\n+        new HelmParams().releaseName(OPERATOR_RELEASE_NAME)\n+            .namespace(opNamespace)\n+            .chartDir(OPERATOR_CHART_DIR);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+  }\n+\n+  /**\n+   * Set \"dedicated\" to true and set the domainNamespaces to something that does not contain the operator's namespace,\n+   * make sure that the domains in the operator's target namespaces do not come up\n+   * because when dedicated is set to true, the operator's domainNamespaces value is ignored.\n+   * 1) Create CRD.\n+   * 2) Install an Operator with namespace=op-ns, domainNamespaces=wls-ns\n+   *    and domainNamespaceSelectionStrategy=Dedicated.\n+   * 3) Verify the Operator is up and running.\n+   * 4) Create WebLogic Domain its namespace=wls-ns.\n+   * 5) Verify that domain whose namespace = wls-ns does not come up.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"Set dedicated to true and verify that a domains not deployed in operator's namespace doesn't come up\")\n+  public void testDedicatedModeDiffNamespace() {\n+    // install and verify operator\n+    logger.info(\"Installing and verifying operator\");\n+    installAndVerifyOperator(opNamespace, opNamespace + \"-sa\",\n+        true, 0, opHelmParams, domainNamespaceSelectionStrategy,\n+        false, domain2Namespace);\n+\n+    // create and verify the domain\n+    logger.info(\"Creating and verifying model in image domain\");\n+    createDomain(domain2Namespace);\n+\n+    try {\n+      Thread.sleep(30 * 1000);\n+    } catch (Exception ex) {\n+      //ignore\n+    }\n+\n+    verifyDomainNotRunning(domain2Namespace);\n+  }\n+\n+  /**\n+   * Set \"dedicated\" to true, make sure that the domains deployed in the operator's namespace come up.\n+   * 1) Create a namespace (e.g. op-wls-ns) that is used b y both Operator and WebLogic domain.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "226bbe75b83be1ffe3c565e0603b243259c3fb36"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcxMjk0Nw==", "bodyText": "you are not creating the CRD as part of the test, so no need of this step here ...", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1913#discussion_r488712947", "createdAt": "2020-09-15T14:28:02Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDedicatedMode.java", "diffHunk": "@@ -0,0 +1,403 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+/**\n+ * Integration test cases for \"Dedicated\" namespace scenarios\n+ * 1. Set \"dedicated\" to true, verify that the domains deployed in the operator's namespace come up.\n+ * 2. Set \"dedicated\" to true, verify that the domains not deployed in the operator's namespace does not come up.\n+ * 3. Scale the cluster with \"dedicated\" set to true\n+ * 4. Negative tests\n+ *    1) The CRD is not present or is deleted, verify that Operator fails with error\n+ *    2) The CRD is present but is a lower than expected version, verify that Operator fails with error\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test Operator and WebLogic domain with Dedicated set to true\")\n+@IntegrationTest\n+class ItDedicatedMode {\n+  // namespace constants\n+  private static String opNamespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+\n+  // domain constants\n+  private final String domainUid = \"domain1\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPodPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  // operator constants\n+  private static HelmParams opHelmParams;\n+  private static String opServiceAccount;\n+  private static final String domainNamespaceSelectionStrategy = \"Dedicated\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Get namespaces for operator and domain2.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism.\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // in the dedicated mode, the operator only manages domains in the operator's own namespace\n+    domain1Namespace = opNamespace;\n+\n+    // get a new unique domainNamespace\n+    logger.info(\"Assigning a unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(1);\n+\n+    logger.info(\"Installing and verifying operator\");\n+    opServiceAccount = opNamespace + \"-sa\";\n+    opHelmParams =\n+        new HelmParams().releaseName(OPERATOR_RELEASE_NAME)\n+            .namespace(opNamespace)\n+            .chartDir(OPERATOR_CHART_DIR);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+  }\n+\n+  /**\n+   * Set \"dedicated\" to true and set the domainNamespaces to something that does not contain the operator's namespace,\n+   * make sure that the domains in the operator's target namespaces do not come up\n+   * because when dedicated is set to true, the operator's domainNamespaces value is ignored.\n+   * 1) Create CRD.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "226bbe75b83be1ffe3c565e0603b243259c3fb36"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcxMzM0MA==", "bodyText": "same as above", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1913#discussion_r488713340", "createdAt": "2020-09-15T14:28:30Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDedicatedMode.java", "diffHunk": "@@ -0,0 +1,403 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+/**\n+ * Integration test cases for \"Dedicated\" namespace scenarios\n+ * 1. Set \"dedicated\" to true, verify that the domains deployed in the operator's namespace come up.\n+ * 2. Set \"dedicated\" to true, verify that the domains not deployed in the operator's namespace does not come up.\n+ * 3. Scale the cluster with \"dedicated\" set to true\n+ * 4. Negative tests\n+ *    1) The CRD is not present or is deleted, verify that Operator fails with error\n+ *    2) The CRD is present but is a lower than expected version, verify that Operator fails with error\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test Operator and WebLogic domain with Dedicated set to true\")\n+@IntegrationTest\n+class ItDedicatedMode {\n+  // namespace constants\n+  private static String opNamespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+\n+  // domain constants\n+  private final String domainUid = \"domain1\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPodPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  // operator constants\n+  private static HelmParams opHelmParams;\n+  private static String opServiceAccount;\n+  private static final String domainNamespaceSelectionStrategy = \"Dedicated\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Get namespaces for operator and domain2.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism.\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // in the dedicated mode, the operator only manages domains in the operator's own namespace\n+    domain1Namespace = opNamespace;\n+\n+    // get a new unique domainNamespace\n+    logger.info(\"Assigning a unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(1);\n+\n+    logger.info(\"Installing and verifying operator\");\n+    opServiceAccount = opNamespace + \"-sa\";\n+    opHelmParams =\n+        new HelmParams().releaseName(OPERATOR_RELEASE_NAME)\n+            .namespace(opNamespace)\n+            .chartDir(OPERATOR_CHART_DIR);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+  }\n+\n+  /**\n+   * Set \"dedicated\" to true and set the domainNamespaces to something that does not contain the operator's namespace,\n+   * make sure that the domains in the operator's target namespaces do not come up\n+   * because when dedicated is set to true, the operator's domainNamespaces value is ignored.\n+   * 1) Create CRD.\n+   * 2) Install an Operator with namespace=op-ns, domainNamespaces=wls-ns\n+   *    and domainNamespaceSelectionStrategy=Dedicated.\n+   * 3) Verify the Operator is up and running.\n+   * 4) Create WebLogic Domain its namespace=wls-ns.\n+   * 5) Verify that domain whose namespace = wls-ns does not come up.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"Set dedicated to true and verify that a domains not deployed in operator's namespace doesn't come up\")\n+  public void testDedicatedModeDiffNamespace() {\n+    // install and verify operator\n+    logger.info(\"Installing and verifying operator\");\n+    installAndVerifyOperator(opNamespace, opNamespace + \"-sa\",\n+        true, 0, opHelmParams, domainNamespaceSelectionStrategy,\n+        false, domain2Namespace);\n+\n+    // create and verify the domain\n+    logger.info(\"Creating and verifying model in image domain\");\n+    createDomain(domain2Namespace);\n+\n+    try {\n+      Thread.sleep(30 * 1000);\n+    } catch (Exception ex) {\n+      //ignore\n+    }\n+\n+    verifyDomainNotRunning(domain2Namespace);\n+  }\n+\n+  /**\n+   * Set \"dedicated\" to true, make sure that the domains deployed in the operator's namespace come up.\n+   * 1) Create a namespace (e.g. op-wls-ns) that is used b y both Operator and WebLogic domain.\n+   * 2) Create CRD.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "226bbe75b83be1ffe3c565e0603b243259c3fb36"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcxNjI0OQ==", "bodyText": "where are you installing the operator with same namespace for both operator and domain namespaces?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1913#discussion_r488716249", "createdAt": "2020-09-15T14:32:04Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDedicatedMode.java", "diffHunk": "@@ -0,0 +1,403 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+/**\n+ * Integration test cases for \"Dedicated\" namespace scenarios\n+ * 1. Set \"dedicated\" to true, verify that the domains deployed in the operator's namespace come up.\n+ * 2. Set \"dedicated\" to true, verify that the domains not deployed in the operator's namespace does not come up.\n+ * 3. Scale the cluster with \"dedicated\" set to true\n+ * 4. Negative tests\n+ *    1) The CRD is not present or is deleted, verify that Operator fails with error\n+ *    2) The CRD is present but is a lower than expected version, verify that Operator fails with error\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test Operator and WebLogic domain with Dedicated set to true\")\n+@IntegrationTest\n+class ItDedicatedMode {\n+  // namespace constants\n+  private static String opNamespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+\n+  // domain constants\n+  private final String domainUid = \"domain1\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPodPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  // operator constants\n+  private static HelmParams opHelmParams;\n+  private static String opServiceAccount;\n+  private static final String domainNamespaceSelectionStrategy = \"Dedicated\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Get namespaces for operator and domain2.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism.\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // in the dedicated mode, the operator only manages domains in the operator's own namespace\n+    domain1Namespace = opNamespace;\n+\n+    // get a new unique domainNamespace\n+    logger.info(\"Assigning a unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(1);\n+\n+    logger.info(\"Installing and verifying operator\");\n+    opServiceAccount = opNamespace + \"-sa\";\n+    opHelmParams =\n+        new HelmParams().releaseName(OPERATOR_RELEASE_NAME)\n+            .namespace(opNamespace)\n+            .chartDir(OPERATOR_CHART_DIR);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+  }\n+\n+  /**\n+   * Set \"dedicated\" to true and set the domainNamespaces to something that does not contain the operator's namespace,\n+   * make sure that the domains in the operator's target namespaces do not come up\n+   * because when dedicated is set to true, the operator's domainNamespaces value is ignored.\n+   * 1) Create CRD.\n+   * 2) Install an Operator with namespace=op-ns, domainNamespaces=wls-ns\n+   *    and domainNamespaceSelectionStrategy=Dedicated.\n+   * 3) Verify the Operator is up and running.\n+   * 4) Create WebLogic Domain its namespace=wls-ns.\n+   * 5) Verify that domain whose namespace = wls-ns does not come up.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"Set dedicated to true and verify that a domains not deployed in operator's namespace doesn't come up\")\n+  public void testDedicatedModeDiffNamespace() {\n+    // install and verify operator\n+    logger.info(\"Installing and verifying operator\");\n+    installAndVerifyOperator(opNamespace, opNamespace + \"-sa\",\n+        true, 0, opHelmParams, domainNamespaceSelectionStrategy,\n+        false, domain2Namespace);\n+\n+    // create and verify the domain\n+    logger.info(\"Creating and verifying model in image domain\");\n+    createDomain(domain2Namespace);\n+\n+    try {\n+      Thread.sleep(30 * 1000);\n+    } catch (Exception ex) {\n+      //ignore\n+    }\n+\n+    verifyDomainNotRunning(domain2Namespace);\n+  }\n+\n+  /**\n+   * Set \"dedicated\" to true, make sure that the domains deployed in the operator's namespace come up.\n+   * 1) Create a namespace (e.g. op-wls-ns) that is used b y both Operator and WebLogic domain.\n+   * 2) Create CRD.\n+   * 3) Install an Operator with namespace=op-wls-ns, domainNamespaces=op-wls-ns", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "226bbe75b83be1ffe3c565e0603b243259c3fb36"}, "originalPosition": 165}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63d654b02eb00a8eac98bc381b6f06f609e66806", "author": {"user": {"login": "hzhao-github", "name": "Huiling Zhao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/63d654b02eb00a8eac98bc381b6f06f609e66806", "committedDate": "2020-09-17T16:49:35Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into dedicated-mode-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db039f107eb57745ae66ebb1d2a8f240099dec36", "author": {"user": {"login": "hzhao-github", "name": "Huiling Zhao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/db039f107eb57745ae66ebb1d2a8f240099dec36", "committedDate": "2020-09-17T18:18:05Z", "message": "Syncup with JIRA OWLS-84517 and changes based on comments jenkins-ignore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4daa2aeb1372ed1282f6641f693035af6ce69ab1", "author": {"user": {"login": "hzhao-github", "name": "Huiling Zhao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/4daa2aeb1372ed1282f6641f693035af6ce69ab1", "committedDate": "2020-09-17T18:25:16Z", "message": "Delete index.yaml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "420636399cc1dc4c518aa9123c4538ffb1c5a0c4", "author": {"user": {"login": "hzhao-github", "name": "Huiling Zhao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/420636399cc1dc4c518aa9123c4538ffb1c5a0c4", "committedDate": "2020-09-17T18:45:39Z", "message": "Remove binary files that are wrongly checked in jenkins-ignore"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwOTk1MDU4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1913#pullrequestreview-490995058", "createdAt": "2020-09-17T21:16:37Z", "commit": {"oid": "420636399cc1dc4c518aa9123c4538ffb1c5a0c4"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMToxNjozN1rOHT11Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTozMzo1OVrOHT2UWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU2Njk3OA==", "bodyText": "set \"dedicated\" to true --> Please explain which Helm attribute you are setting to true.\nYou may refer to the public doc link", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1913#discussion_r490566978", "createdAt": "2020-09-17T21:16:37Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDedicatedMode.java", "diffHunk": "@@ -0,0 +1,391 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+/**\n+ * Integration test cases for \"Dedicated\" namespace scenarios\n+ * 1. Set \"dedicated\" to true, verify that the domains deployed in the operator's namespace come up.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "420636399cc1dc4c518aa9123c4538ffb1c5a0c4"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU2NzkxMA==", "bodyText": "put the indention as a), b)  instead of 1), 2)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1913#discussion_r490567910", "createdAt": "2020-09-17T21:18:41Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDedicatedMode.java", "diffHunk": "@@ -0,0 +1,391 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+/**\n+ * Integration test cases for \"Dedicated\" namespace scenarios\n+ * 1. Set \"dedicated\" to true, verify that the domains deployed in the operator's namespace come up.\n+ * 2. Set \"dedicated\" to true, verify that the domains not deployed in the operator's namespace does not come up.\n+ * 3. Scale the cluster with \"dedicated\" set to true\n+ * 4. Negative tests\n+ *    1) The CRD is not present or is deleted, verify that Operator fails with error", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "420636399cc1dc4c518aa9123c4538ffb1c5a0c4"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU2ODc1Mg==", "bodyText": "explain what \"dedicated\" refers to ?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1913#discussion_r490568752", "createdAt": "2020-09-17T21:20:30Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDedicatedMode.java", "diffHunk": "@@ -0,0 +1,391 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+/**\n+ * Integration test cases for \"Dedicated\" namespace scenarios\n+ * 1. Set \"dedicated\" to true, verify that the domains deployed in the operator's namespace come up.\n+ * 2. Set \"dedicated\" to true, verify that the domains not deployed in the operator's namespace does not come up.\n+ * 3. Scale the cluster with \"dedicated\" set to true\n+ * 4. Negative tests\n+ *    1) The CRD is not present or is deleted, verify that Operator fails with error\n+ *    2) The CRD is present but is a lower than expected version, verify that Operator fails with error\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test Operator and WebLogic domain with Dedicated set to true\")\n+@IntegrationTest\n+class ItDedicatedMode {\n+  // namespace constants\n+  private static String opNamespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+\n+  // domain constants\n+  private final String domainUid = \"domain1\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPodPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  // operator constants\n+  private static HelmParams opHelmParams;\n+  private static String opServiceAccount;\n+  private static final String domainNamespaceSelectionStrategy = \"Dedicated\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Get namespaces for operator and domain2.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism.\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // in the dedicated mode, the operator only manages domains in the operator's own namespace\n+    domain1Namespace = opNamespace;\n+\n+    // get a new unique domainNamespace\n+    logger.info(\"Assigning a unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(1);\n+\n+    // Variables for Operator\n+    opServiceAccount = opNamespace + \"-sa\";\n+    opHelmParams =\n+        new HelmParams().releaseName(OPERATOR_RELEASE_NAME)\n+            .namespace(opNamespace)\n+            .chartDir(OPERATOR_CHART_DIR);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+  }\n+\n+  /**\n+   * Set \"dedicated\" to true and set the domainNamespaces to something that does not contain the operator's namespace,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "420636399cc1dc4c518aa9123c4538ffb1c5a0c4"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU2OTIxNw==", "bodyText": "Do we need a number indention. The steps are obvious in order.\nRemove \"==\" symbol in the description.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1913#discussion_r490569217", "createdAt": "2020-09-17T21:21:35Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDedicatedMode.java", "diffHunk": "@@ -0,0 +1,391 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+/**\n+ * Integration test cases for \"Dedicated\" namespace scenarios\n+ * 1. Set \"dedicated\" to true, verify that the domains deployed in the operator's namespace come up.\n+ * 2. Set \"dedicated\" to true, verify that the domains not deployed in the operator's namespace does not come up.\n+ * 3. Scale the cluster with \"dedicated\" set to true\n+ * 4. Negative tests\n+ *    1) The CRD is not present or is deleted, verify that Operator fails with error\n+ *    2) The CRD is present but is a lower than expected version, verify that Operator fails with error\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test Operator and WebLogic domain with Dedicated set to true\")\n+@IntegrationTest\n+class ItDedicatedMode {\n+  // namespace constants\n+  private static String opNamespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+\n+  // domain constants\n+  private final String domainUid = \"domain1\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPodPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  // operator constants\n+  private static HelmParams opHelmParams;\n+  private static String opServiceAccount;\n+  private static final String domainNamespaceSelectionStrategy = \"Dedicated\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Get namespaces for operator and domain2.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism.\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // in the dedicated mode, the operator only manages domains in the operator's own namespace\n+    domain1Namespace = opNamespace;\n+\n+    // get a new unique domainNamespace\n+    logger.info(\"Assigning a unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(1);\n+\n+    // Variables for Operator\n+    opServiceAccount = opNamespace + \"-sa\";\n+    opHelmParams =\n+        new HelmParams().releaseName(OPERATOR_RELEASE_NAME)\n+            .namespace(opNamespace)\n+            .chartDir(OPERATOR_CHART_DIR);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+  }\n+\n+  /**\n+   * Set \"dedicated\" to true and set the domainNamespaces to something that does not contain the operator's namespace,\n+   * make sure that the domains in the operator's target namespaces do not come up\n+   * because when dedicated is set to true, the operator's domainNamespaces value is ignored.\n+   * 1) Install an Operator with namespace=op-ns, domainNamespaces=wls-ns", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "420636399cc1dc4c518aa9123c4538ffb1c5a0c4"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3MDM2Mw==", "bodyText": "Create WebLogic Domain its namespace=wls-ns  --> Create WebLogic Domain in a namespace wls-ns.  No == symbol in the description.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1913#discussion_r490570363", "createdAt": "2020-09-17T21:24:02Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDedicatedMode.java", "diffHunk": "@@ -0,0 +1,391 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+/**\n+ * Integration test cases for \"Dedicated\" namespace scenarios\n+ * 1. Set \"dedicated\" to true, verify that the domains deployed in the operator's namespace come up.\n+ * 2. Set \"dedicated\" to true, verify that the domains not deployed in the operator's namespace does not come up.\n+ * 3. Scale the cluster with \"dedicated\" set to true\n+ * 4. Negative tests\n+ *    1) The CRD is not present or is deleted, verify that Operator fails with error\n+ *    2) The CRD is present but is a lower than expected version, verify that Operator fails with error\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test Operator and WebLogic domain with Dedicated set to true\")\n+@IntegrationTest\n+class ItDedicatedMode {\n+  // namespace constants\n+  private static String opNamespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+\n+  // domain constants\n+  private final String domainUid = \"domain1\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPodPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  // operator constants\n+  private static HelmParams opHelmParams;\n+  private static String opServiceAccount;\n+  private static final String domainNamespaceSelectionStrategy = \"Dedicated\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Get namespaces for operator and domain2.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism.\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // in the dedicated mode, the operator only manages domains in the operator's own namespace\n+    domain1Namespace = opNamespace;\n+\n+    // get a new unique domainNamespace\n+    logger.info(\"Assigning a unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(1);\n+\n+    // Variables for Operator\n+    opServiceAccount = opNamespace + \"-sa\";\n+    opHelmParams =\n+        new HelmParams().releaseName(OPERATOR_RELEASE_NAME)\n+            .namespace(opNamespace)\n+            .chartDir(OPERATOR_CHART_DIR);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+  }\n+\n+  /**\n+   * Set \"dedicated\" to true and set the domainNamespaces to something that does not contain the operator's namespace,\n+   * make sure that the domains in the operator's target namespaces do not come up\n+   * because when dedicated is set to true, the operator's domainNamespaces value is ignored.\n+   * 1) Install an Operator with namespace=op-ns, domainNamespaces=wls-ns\n+   *    and domainNamespaceSelectionStrategy=Dedicated.\n+   * 2) Verify the Operator is up and running.\n+   * 3) Create WebLogic Domain its namespace=wls-ns.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "420636399cc1dc4c518aa9123c4538ffb1c5a0c4"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3MTgwNg==", "bodyText": "Remove number indentations.  The namespaces are generated dynamically.  Do not  hard-code the namespace like ' op-wls-ns'", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1913#discussion_r490571806", "createdAt": "2020-09-17T21:27:06Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDedicatedMode.java", "diffHunk": "@@ -0,0 +1,391 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+/**\n+ * Integration test cases for \"Dedicated\" namespace scenarios\n+ * 1. Set \"dedicated\" to true, verify that the domains deployed in the operator's namespace come up.\n+ * 2. Set \"dedicated\" to true, verify that the domains not deployed in the operator's namespace does not come up.\n+ * 3. Scale the cluster with \"dedicated\" set to true\n+ * 4. Negative tests\n+ *    1) The CRD is not present or is deleted, verify that Operator fails with error\n+ *    2) The CRD is present but is a lower than expected version, verify that Operator fails with error\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test Operator and WebLogic domain with Dedicated set to true\")\n+@IntegrationTest\n+class ItDedicatedMode {\n+  // namespace constants\n+  private static String opNamespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+\n+  // domain constants\n+  private final String domainUid = \"domain1\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPodPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  // operator constants\n+  private static HelmParams opHelmParams;\n+  private static String opServiceAccount;\n+  private static final String domainNamespaceSelectionStrategy = \"Dedicated\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Get namespaces for operator and domain2.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism.\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // in the dedicated mode, the operator only manages domains in the operator's own namespace\n+    domain1Namespace = opNamespace;\n+\n+    // get a new unique domainNamespace\n+    logger.info(\"Assigning a unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(1);\n+\n+    // Variables for Operator\n+    opServiceAccount = opNamespace + \"-sa\";\n+    opHelmParams =\n+        new HelmParams().releaseName(OPERATOR_RELEASE_NAME)\n+            .namespace(opNamespace)\n+            .chartDir(OPERATOR_CHART_DIR);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+  }\n+\n+  /**\n+   * Set \"dedicated\" to true and set the domainNamespaces to something that does not contain the operator's namespace,\n+   * make sure that the domains in the operator's target namespaces do not come up\n+   * because when dedicated is set to true, the operator's domainNamespaces value is ignored.\n+   * 1) Install an Operator with namespace=op-ns, domainNamespaces=wls-ns\n+   *    and domainNamespaceSelectionStrategy=Dedicated.\n+   * 2) Verify the Operator is up and running.\n+   * 3) Create WebLogic Domain its namespace=wls-ns.\n+   * 4) Verify that domain whose namespace = wls-ns does not come up.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"Set dedicated to true and verify that a domain not deployed in operator's namespace doesn't come up\")\n+  public void testDedicatedModeDiffNamespace() {\n+    // install and verify operator\n+    logger.info(\"Installing and verifying operator\");\n+    installAndVerifyOperator(opNamespace, opNamespace + \"-sa\",\n+        true, 0, opHelmParams, domainNamespaceSelectionStrategy,\n+        false, domain2Namespace);\n+\n+    // create and verify the domain\n+    logger.info(\"Creating and verifying model in image domain\");\n+    createDomain(domain2Namespace);\n+\n+    verifyDomainNotRunning(domain2Namespace);\n+  }\n+\n+  /**\n+   * Set \"dedicated\" to true, make sure that the domains deployed in the operator's namespace come up.\n+   * 1) Using the Operator's namespace, op-wls-ns, create a WebLogic Domain", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "420636399cc1dc4c518aa9123c4538ffb1c5a0c4"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3MjcyMw==", "bodyText": "Need more description of the usecase. It is too generic. If we generate javadoc, it MUST provide the exact detail of the usecase.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1913#discussion_r490572723", "createdAt": "2020-09-17T21:29:11Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDedicatedMode.java", "diffHunk": "@@ -0,0 +1,391 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+/**\n+ * Integration test cases for \"Dedicated\" namespace scenarios\n+ * 1. Set \"dedicated\" to true, verify that the domains deployed in the operator's namespace come up.\n+ * 2. Set \"dedicated\" to true, verify that the domains not deployed in the operator's namespace does not come up.\n+ * 3. Scale the cluster with \"dedicated\" set to true\n+ * 4. Negative tests\n+ *    1) The CRD is not present or is deleted, verify that Operator fails with error\n+ *    2) The CRD is present but is a lower than expected version, verify that Operator fails with error\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test Operator and WebLogic domain with Dedicated set to true\")\n+@IntegrationTest\n+class ItDedicatedMode {\n+  // namespace constants\n+  private static String opNamespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+\n+  // domain constants\n+  private final String domainUid = \"domain1\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPodPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  // operator constants\n+  private static HelmParams opHelmParams;\n+  private static String opServiceAccount;\n+  private static final String domainNamespaceSelectionStrategy = \"Dedicated\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Get namespaces for operator and domain2.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism.\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // in the dedicated mode, the operator only manages domains in the operator's own namespace\n+    domain1Namespace = opNamespace;\n+\n+    // get a new unique domainNamespace\n+    logger.info(\"Assigning a unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(1);\n+\n+    // Variables for Operator\n+    opServiceAccount = opNamespace + \"-sa\";\n+    opHelmParams =\n+        new HelmParams().releaseName(OPERATOR_RELEASE_NAME)\n+            .namespace(opNamespace)\n+            .chartDir(OPERATOR_CHART_DIR);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+  }\n+\n+  /**\n+   * Set \"dedicated\" to true and set the domainNamespaces to something that does not contain the operator's namespace,\n+   * make sure that the domains in the operator's target namespaces do not come up\n+   * because when dedicated is set to true, the operator's domainNamespaces value is ignored.\n+   * 1) Install an Operator with namespace=op-ns, domainNamespaces=wls-ns\n+   *    and domainNamespaceSelectionStrategy=Dedicated.\n+   * 2) Verify the Operator is up and running.\n+   * 3) Create WebLogic Domain its namespace=wls-ns.\n+   * 4) Verify that domain whose namespace = wls-ns does not come up.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"Set dedicated to true and verify that a domain not deployed in operator's namespace doesn't come up\")\n+  public void testDedicatedModeDiffNamespace() {\n+    // install and verify operator\n+    logger.info(\"Installing and verifying operator\");\n+    installAndVerifyOperator(opNamespace, opNamespace + \"-sa\",\n+        true, 0, opHelmParams, domainNamespaceSelectionStrategy,\n+        false, domain2Namespace);\n+\n+    // create and verify the domain\n+    logger.info(\"Creating and verifying model in image domain\");\n+    createDomain(domain2Namespace);\n+\n+    verifyDomainNotRunning(domain2Namespace);\n+  }\n+\n+  /**\n+   * Set \"dedicated\" to true, make sure that the domains deployed in the operator's namespace come up.\n+   * 1) Using the Operator's namespace, op-wls-ns, create a WebLogic Domain\n+   * 2) Verify that the WebLogic domain whose namespace = op-wls-ns comes up.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"Set dedicated to true and verify that the domain deployed in the operator's namespace comes up\")\n+  public void testDedicatedModeSameNamespace() {\n+    // create and verify the domain\n+    logger.info(\"Creating and verifying model in image domain\");\n+    createDomain(domain1Namespace);\n+    verifyDomainRunning(domain1Namespace);\n+  }\n+\n+  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "420636399cc1dc4c518aa9123c4538ffb1c5a0c4"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3MzExMA==", "bodyText": "More detail description needed.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1913#discussion_r490573110", "createdAt": "2020-09-17T21:30:01Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDedicatedMode.java", "diffHunk": "@@ -0,0 +1,391 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+/**\n+ * Integration test cases for \"Dedicated\" namespace scenarios\n+ * 1. Set \"dedicated\" to true, verify that the domains deployed in the operator's namespace come up.\n+ * 2. Set \"dedicated\" to true, verify that the domains not deployed in the operator's namespace does not come up.\n+ * 3. Scale the cluster with \"dedicated\" set to true\n+ * 4. Negative tests\n+ *    1) The CRD is not present or is deleted, verify that Operator fails with error\n+ *    2) The CRD is present but is a lower than expected version, verify that Operator fails with error\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test Operator and WebLogic domain with Dedicated set to true\")\n+@IntegrationTest\n+class ItDedicatedMode {\n+  // namespace constants\n+  private static String opNamespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+\n+  // domain constants\n+  private final String domainUid = \"domain1\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPodPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  // operator constants\n+  private static HelmParams opHelmParams;\n+  private static String opServiceAccount;\n+  private static final String domainNamespaceSelectionStrategy = \"Dedicated\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Get namespaces for operator and domain2.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism.\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // in the dedicated mode, the operator only manages domains in the operator's own namespace\n+    domain1Namespace = opNamespace;\n+\n+    // get a new unique domainNamespace\n+    logger.info(\"Assigning a unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(1);\n+\n+    // Variables for Operator\n+    opServiceAccount = opNamespace + \"-sa\";\n+    opHelmParams =\n+        new HelmParams().releaseName(OPERATOR_RELEASE_NAME)\n+            .namespace(opNamespace)\n+            .chartDir(OPERATOR_CHART_DIR);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+  }\n+\n+  /**\n+   * Set \"dedicated\" to true and set the domainNamespaces to something that does not contain the operator's namespace,\n+   * make sure that the domains in the operator's target namespaces do not come up\n+   * because when dedicated is set to true, the operator's domainNamespaces value is ignored.\n+   * 1) Install an Operator with namespace=op-ns, domainNamespaces=wls-ns\n+   *    and domainNamespaceSelectionStrategy=Dedicated.\n+   * 2) Verify the Operator is up and running.\n+   * 3) Create WebLogic Domain its namespace=wls-ns.\n+   * 4) Verify that domain whose namespace = wls-ns does not come up.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"Set dedicated to true and verify that a domain not deployed in operator's namespace doesn't come up\")\n+  public void testDedicatedModeDiffNamespace() {\n+    // install and verify operator\n+    logger.info(\"Installing and verifying operator\");\n+    installAndVerifyOperator(opNamespace, opNamespace + \"-sa\",\n+        true, 0, opHelmParams, domainNamespaceSelectionStrategy,\n+        false, domain2Namespace);\n+\n+    // create and verify the domain\n+    logger.info(\"Creating and verifying model in image domain\");\n+    createDomain(domain2Namespace);\n+\n+    verifyDomainNotRunning(domain2Namespace);\n+  }\n+\n+  /**\n+   * Set \"dedicated\" to true, make sure that the domains deployed in the operator's namespace come up.\n+   * 1) Using the Operator's namespace, op-wls-ns, create a WebLogic Domain\n+   * 2) Verify that the WebLogic domain whose namespace = op-wls-ns comes up.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"Set dedicated to true and verify that the domain deployed in the operator's namespace comes up\")\n+  public void testDedicatedModeSameNamespace() {\n+    // create and verify the domain\n+    logger.info(\"Creating and verifying model in image domain\");\n+    createDomain(domain1Namespace);\n+    verifyDomainRunning(domain1Namespace);\n+  }\n+\n+  /**\n+   * Scale up cluster-1 in domain1Namespace and verify it succeeds.\n+   */\n+  @Test\n+  @Order(3)\n+  @DisplayName(\"Scale up cluster-1 in domain1Namespace and verify it succeeds\")\n+  public void testDedicatedModeSameNamespaceScale() {\n+    // scale the cluster and check domain can be managed from the operator\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    logger.info(\"externalRestHttpsPort {0}\", externalRestHttpsPort);\n+\n+    logger.info(\"scaling the cluster from {0} servers to {1} servers\", replicaCount, replicaCount + 1);\n+    scaleAndVerifyCluster(clusterName, domainUid, domain1Namespace,\n+        managedServerPodPrefix, replicaCount, replicaCount + 1,\n+        true, externalRestHttpsPort, opNamespace, opNamespace + \"-sa\",\n+        false, \"\", \"\", 0, \"\",\n+        \"\", null, null);\n+  }\n+\n+  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "420636399cc1dc4c518aa9123c4538ffb1c5a0c4"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3MzMzOQ==", "bodyText": "More Description needed.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1913#discussion_r490573339", "createdAt": "2020-09-17T21:30:28Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDedicatedMode.java", "diffHunk": "@@ -0,0 +1,391 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+/**\n+ * Integration test cases for \"Dedicated\" namespace scenarios\n+ * 1. Set \"dedicated\" to true, verify that the domains deployed in the operator's namespace come up.\n+ * 2. Set \"dedicated\" to true, verify that the domains not deployed in the operator's namespace does not come up.\n+ * 3. Scale the cluster with \"dedicated\" set to true\n+ * 4. Negative tests\n+ *    1) The CRD is not present or is deleted, verify that Operator fails with error\n+ *    2) The CRD is present but is a lower than expected version, verify that Operator fails with error\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test Operator and WebLogic domain with Dedicated set to true\")\n+@IntegrationTest\n+class ItDedicatedMode {\n+  // namespace constants\n+  private static String opNamespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+\n+  // domain constants\n+  private final String domainUid = \"domain1\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPodPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  // operator constants\n+  private static HelmParams opHelmParams;\n+  private static String opServiceAccount;\n+  private static final String domainNamespaceSelectionStrategy = \"Dedicated\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Get namespaces for operator and domain2.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism.\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // in the dedicated mode, the operator only manages domains in the operator's own namespace\n+    domain1Namespace = opNamespace;\n+\n+    // get a new unique domainNamespace\n+    logger.info(\"Assigning a unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(1);\n+\n+    // Variables for Operator\n+    opServiceAccount = opNamespace + \"-sa\";\n+    opHelmParams =\n+        new HelmParams().releaseName(OPERATOR_RELEASE_NAME)\n+            .namespace(opNamespace)\n+            .chartDir(OPERATOR_CHART_DIR);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+  }\n+\n+  /**\n+   * Set \"dedicated\" to true and set the domainNamespaces to something that does not contain the operator's namespace,\n+   * make sure that the domains in the operator's target namespaces do not come up\n+   * because when dedicated is set to true, the operator's domainNamespaces value is ignored.\n+   * 1) Install an Operator with namespace=op-ns, domainNamespaces=wls-ns\n+   *    and domainNamespaceSelectionStrategy=Dedicated.\n+   * 2) Verify the Operator is up and running.\n+   * 3) Create WebLogic Domain its namespace=wls-ns.\n+   * 4) Verify that domain whose namespace = wls-ns does not come up.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"Set dedicated to true and verify that a domain not deployed in operator's namespace doesn't come up\")\n+  public void testDedicatedModeDiffNamespace() {\n+    // install and verify operator\n+    logger.info(\"Installing and verifying operator\");\n+    installAndVerifyOperator(opNamespace, opNamespace + \"-sa\",\n+        true, 0, opHelmParams, domainNamespaceSelectionStrategy,\n+        false, domain2Namespace);\n+\n+    // create and verify the domain\n+    logger.info(\"Creating and verifying model in image domain\");\n+    createDomain(domain2Namespace);\n+\n+    verifyDomainNotRunning(domain2Namespace);\n+  }\n+\n+  /**\n+   * Set \"dedicated\" to true, make sure that the domains deployed in the operator's namespace come up.\n+   * 1) Using the Operator's namespace, op-wls-ns, create a WebLogic Domain\n+   * 2) Verify that the WebLogic domain whose namespace = op-wls-ns comes up.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"Set dedicated to true and verify that the domain deployed in the operator's namespace comes up\")\n+  public void testDedicatedModeSameNamespace() {\n+    // create and verify the domain\n+    logger.info(\"Creating and verifying model in image domain\");\n+    createDomain(domain1Namespace);\n+    verifyDomainRunning(domain1Namespace);\n+  }\n+\n+  /**\n+   * Scale up cluster-1 in domain1Namespace and verify it succeeds.\n+   */\n+  @Test\n+  @Order(3)\n+  @DisplayName(\"Scale up cluster-1 in domain1Namespace and verify it succeeds\")\n+  public void testDedicatedModeSameNamespaceScale() {\n+    // scale the cluster and check domain can be managed from the operator\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    logger.info(\"externalRestHttpsPort {0}\", externalRestHttpsPort);\n+\n+    logger.info(\"scaling the cluster from {0} servers to {1} servers\", replicaCount, replicaCount + 1);\n+    scaleAndVerifyCluster(clusterName, domainUid, domain1Namespace,\n+        managedServerPodPrefix, replicaCount, replicaCount + 1,\n+        true, externalRestHttpsPort, opNamespace, opNamespace + \"-sa\",\n+        false, \"\", \"\", 0, \"\",\n+        \"\", null, null);\n+  }\n+\n+  /**\n+   * Test when a CRD with a lower than expected version is present,\n+   * Operator fails with error if it has not permission to overwrite the CRD.\n+   */\n+  @Test\n+  @Order(4)\n+  @Disabled(\"Disable the test because the Operator has permission to overwrite the CRD\")\n+  @DisplayName(\"Create a CRD with a lower than expected version and verify that Operator fails with error\")\n+  public void testDedicatedModeNlowerVersionCrd() {\n+    // delete existing CRD\n+    new Command()\n+        .withParams(new CommandParams()\n+            .command(\"kubectl delete crd domains.weblogic.oracle --ignore-not-found\"))\n+        .execute();\n+\n+    // install a lower version of CRD, v2.6.0\n+    new Command()\n+        .withParams(new CommandParams()\n+            .command(\"kubectl create -f \" + ITTESTS_DIR + \"/../kubernetes/crd/domain-v1beta1-crdv7-260.yaml\"))\n+        .execute();\n+\n+    try {\n+      // install latest version of operator and verify\n+      logger.info(\"Installing and verifying operator\");\n+      installAndVerifyOperator(opNamespace, opNamespace + \"-sa\",\n+          false, 0, opHelmParams, domainNamespaceSelectionStrategy,\n+          false, domain2Namespace);\n+\n+      // we expect installAndVerifyOperator fails with a lower than expected version of CRD\n+      fail(\"Installing the Operator should fail with a lower than expected version of CRD\");\n+    } catch (Exception ex) {\n+      logger.info(\"Installing the Operator with a lower than expected version of CRD failed as expected\");\n+    } finally {\n+      // restore the test env\n+      uninstallOperatorAndVerify();\n+    }\n+  }\n+\n+  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "420636399cc1dc4c518aa9123c4538ffb1c5a0c4"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3NDkzNw==", "bodyText": "Use the utility CommonTestUtils.checkPodReadyAndServiceExists", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1913#discussion_r490574937", "createdAt": "2020-09-17T21:33:59Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDedicatedMode.java", "diffHunk": "@@ -0,0 +1,391 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+/**\n+ * Integration test cases for \"Dedicated\" namespace scenarios\n+ * 1. Set \"dedicated\" to true, verify that the domains deployed in the operator's namespace come up.\n+ * 2. Set \"dedicated\" to true, verify that the domains not deployed in the operator's namespace does not come up.\n+ * 3. Scale the cluster with \"dedicated\" set to true\n+ * 4. Negative tests\n+ *    1) The CRD is not present or is deleted, verify that Operator fails with error\n+ *    2) The CRD is present but is a lower than expected version, verify that Operator fails with error\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test Operator and WebLogic domain with Dedicated set to true\")\n+@IntegrationTest\n+class ItDedicatedMode {\n+  // namespace constants\n+  private static String opNamespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+\n+  // domain constants\n+  private final String domainUid = \"domain1\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPodPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  // operator constants\n+  private static HelmParams opHelmParams;\n+  private static String opServiceAccount;\n+  private static final String domainNamespaceSelectionStrategy = \"Dedicated\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Get namespaces for operator and domain2.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism.\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // in the dedicated mode, the operator only manages domains in the operator's own namespace\n+    domain1Namespace = opNamespace;\n+\n+    // get a new unique domainNamespace\n+    logger.info(\"Assigning a unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(1);\n+\n+    // Variables for Operator\n+    opServiceAccount = opNamespace + \"-sa\";\n+    opHelmParams =\n+        new HelmParams().releaseName(OPERATOR_RELEASE_NAME)\n+            .namespace(opNamespace)\n+            .chartDir(OPERATOR_CHART_DIR);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+  }\n+\n+  /**\n+   * Set \"dedicated\" to true and set the domainNamespaces to something that does not contain the operator's namespace,\n+   * make sure that the domains in the operator's target namespaces do not come up\n+   * because when dedicated is set to true, the operator's domainNamespaces value is ignored.\n+   * 1) Install an Operator with namespace=op-ns, domainNamespaces=wls-ns\n+   *    and domainNamespaceSelectionStrategy=Dedicated.\n+   * 2) Verify the Operator is up and running.\n+   * 3) Create WebLogic Domain its namespace=wls-ns.\n+   * 4) Verify that domain whose namespace = wls-ns does not come up.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"Set dedicated to true and verify that a domain not deployed in operator's namespace doesn't come up\")\n+  public void testDedicatedModeDiffNamespace() {\n+    // install and verify operator\n+    logger.info(\"Installing and verifying operator\");\n+    installAndVerifyOperator(opNamespace, opNamespace + \"-sa\",\n+        true, 0, opHelmParams, domainNamespaceSelectionStrategy,\n+        false, domain2Namespace);\n+\n+    // create and verify the domain\n+    logger.info(\"Creating and verifying model in image domain\");\n+    createDomain(domain2Namespace);\n+\n+    verifyDomainNotRunning(domain2Namespace);\n+  }\n+\n+  /**\n+   * Set \"dedicated\" to true, make sure that the domains deployed in the operator's namespace come up.\n+   * 1) Using the Operator's namespace, op-wls-ns, create a WebLogic Domain\n+   * 2) Verify that the WebLogic domain whose namespace = op-wls-ns comes up.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"Set dedicated to true and verify that the domain deployed in the operator's namespace comes up\")\n+  public void testDedicatedModeSameNamespace() {\n+    // create and verify the domain\n+    logger.info(\"Creating and verifying model in image domain\");\n+    createDomain(domain1Namespace);\n+    verifyDomainRunning(domain1Namespace);\n+  }\n+\n+  /**\n+   * Scale up cluster-1 in domain1Namespace and verify it succeeds.\n+   */\n+  @Test\n+  @Order(3)\n+  @DisplayName(\"Scale up cluster-1 in domain1Namespace and verify it succeeds\")\n+  public void testDedicatedModeSameNamespaceScale() {\n+    // scale the cluster and check domain can be managed from the operator\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    logger.info(\"externalRestHttpsPort {0}\", externalRestHttpsPort);\n+\n+    logger.info(\"scaling the cluster from {0} servers to {1} servers\", replicaCount, replicaCount + 1);\n+    scaleAndVerifyCluster(clusterName, domainUid, domain1Namespace,\n+        managedServerPodPrefix, replicaCount, replicaCount + 1,\n+        true, externalRestHttpsPort, opNamespace, opNamespace + \"-sa\",\n+        false, \"\", \"\", 0, \"\",\n+        \"\", null, null);\n+  }\n+\n+  /**\n+   * Test when a CRD with a lower than expected version is present,\n+   * Operator fails with error if it has not permission to overwrite the CRD.\n+   */\n+  @Test\n+  @Order(4)\n+  @Disabled(\"Disable the test because the Operator has permission to overwrite the CRD\")\n+  @DisplayName(\"Create a CRD with a lower than expected version and verify that Operator fails with error\")\n+  public void testDedicatedModeNlowerVersionCrd() {\n+    // delete existing CRD\n+    new Command()\n+        .withParams(new CommandParams()\n+            .command(\"kubectl delete crd domains.weblogic.oracle --ignore-not-found\"))\n+        .execute();\n+\n+    // install a lower version of CRD, v2.6.0\n+    new Command()\n+        .withParams(new CommandParams()\n+            .command(\"kubectl create -f \" + ITTESTS_DIR + \"/../kubernetes/crd/domain-v1beta1-crdv7-260.yaml\"))\n+        .execute();\n+\n+    try {\n+      // install latest version of operator and verify\n+      logger.info(\"Installing and verifying operator\");\n+      installAndVerifyOperator(opNamespace, opNamespace + \"-sa\",\n+          false, 0, opHelmParams, domainNamespaceSelectionStrategy,\n+          false, domain2Namespace);\n+\n+      // we expect installAndVerifyOperator fails with a lower than expected version of CRD\n+      fail(\"Installing the Operator should fail with a lower than expected version of CRD\");\n+    } catch (Exception ex) {\n+      logger.info(\"Installing the Operator with a lower than expected version of CRD failed as expected\");\n+    } finally {\n+      // restore the test env\n+      uninstallOperatorAndVerify();\n+    }\n+  }\n+\n+  /**\n+   * Test when she CRD is not present or is deleted,\n+   * Operator fails with error if it has not permission to create the CRD.\n+   */\n+  @Test\n+  @Order(5)\n+  @Disabled(\"Disable the test because the Operator has permission to create the CRD\")\n+  @DisplayName(\"Delete the CRD and verify that Operator fails with error\")\n+  public void testDedicatedModeNoCrd() {\n+    // delete existing CRD\n+    logger.info(\"Delete existing CRD\");\n+    new Command()\n+        .withParams(new CommandParams()\n+            .command(\"kubectl delete crd domains.weblogic.oracle --ignore-not-found\"))\n+        .execute();\n+\n+    try {\n+      // install and verify operator\n+      logger.info(\"Installing and verifying operator\");\n+      installAndVerifyOperator(opNamespace, opNamespace + \"-sa\",\n+          false, 0, opHelmParams, domainNamespaceSelectionStrategy,\n+          false, domain2Namespace);\n+\n+      // we expect installAndVerifyOperator fails when the CRD misses\n+      fail(\"Installing the Operator should fail when the CRD misses\");\n+    } catch (Exception ex) {\n+      logger.info(\"Installing the Operator failed as expected when the CRD misses\");\n+    } finally {\n+      // restore the test env\n+      uninstallOperatorAndVerify();\n+    }\n+  }\n+\n+  private void createDomain(String domainNamespace) {\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(adminSecretName, domainNamespace,\n+        \"weblogic\", \"welcome1\"),\n+          String.format(\"create secret for admin credentials failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(encryptionSecretName, domainNamespace,\n+        \"weblogicenc\", \"weblogicenc\"),\n+          String.format(\"create encryption secret failed for %s\", encryptionSecretName));\n+\n+    // create domain and verify\n+    logger.info(\"Create model in image domain {0} in namespace {1} using docker image {2}\",\n+        domainNamespace, domainUid, domainNamespace);\n+    createDomainCrAndVerify(domainNamespace, adminSecretName, encryptionSecretName);\n+  }\n+\n+  private void createDomainCrAndVerify(String domainNamespace,\n+                                       String adminSecretName,\n+                                       String encryptionSecretName) {\n+    // get the pre-built image created by IntegrationTestWatcher\n+    String miiImage = MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG;\n+\n+    // construct a list of oracle.weblogic.domain.Cluster objects to be used in the domain custom resource\n+    List<Cluster> clusters = new ArrayList<>();\n+    clusters.add(new Cluster()\n+        .clusterName(clusterName)\n+        .replicas(replicaCount)\n+        .serverStartState(\"RUNNING\"));\n+\n+    // create the domain CR\n+    Domain domain = new Domain()\n+        .apiVersion(DOMAIN_API_VERSION)\n+        .kind(\"Domain\")\n+        .metadata(new V1ObjectMeta()\n+            .name(domainUid)\n+            .namespace(domainNamespace))\n+        .spec(new DomainSpec()\n+            .domainUid(domainUid)\n+            .domainHomeSourceType(\"FromModel\")\n+            .image(miiImage)\n+            .addImagePullSecretsItem(new V1LocalObjectReference()\n+                .name(REPO_SECRET_NAME))\n+            .webLogicCredentialsSecret(new V1SecretReference()\n+                .name(adminSecretName)\n+                .namespace(domainNamespace))\n+            .includeServerOutInPodLog(true)\n+            .serverStartPolicy(\"IF_NEEDED\")\n+            .serverPod(new ServerPod()\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"JAVA_OPTIONS\")\n+                    .value(\"-Dweblogic.StdoutDebugEnabled=false\"))\n+                .addEnvItem(new V1EnvVar()\n+                    .name(\"USER_MEM_ARGS\")\n+                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n+            .adminServer(new AdminServer()\n+                .serverStartState(\"RUNNING\"))\n+            .clusters(clusters)\n+            .configuration(new Configuration()\n+                .model(new Model()\n+                    .domainType(WLS_DOMAIN_TYPE)\n+                    .runtimeEncryptionSecret(encryptionSecretName))));\n+\n+    // create model in image domain\n+    logger.info(\"Creating model in image domain {0} in namespace {1} using docker image {2}\",\n+        domainUid, domainNamespace, miiImage);\n+    createDomainAndVerify(domain, domainNamespace);\n+  }\n+\n+  private void verifyDomainRunning(String domainNamespace) {\n+    // check that admin service exists in the domain namespace\n+    logger.info(\"Checking that admin service {0} exists in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n+\n+    // check that admin server pod is ready\n+    logger.info(\"Checking that admin server pod {0} is ready in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+\n+    // check for managed server pods existence in the domain namespace\n+    for (int i = 1; i <= replicaCount; i++) {\n+      String managedServerPodName = managedServerPodPrefix + i;\n+\n+      // check that the managed server service exists in the domain namespace\n+      logger.info(\"Checking that managed server service {0} exists in namespace {1}\",\n+          managedServerPodName, domainNamespace);\n+      checkServiceExists(managedServerPodName, domainNamespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "420636399cc1dc4c518aa9123c4538ffb1c5a0c4"}, "originalPosition": 350}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b324adb769acf87c84cee7b976d0450e5afeb155", "author": {"user": {"login": "hzhao-github", "name": "Huiling Zhao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b324adb769acf87c84cee7b976d0450e5afeb155", "committedDate": "2020-09-18T20:30:40Z", "message": "Changes based on the comments jenkins-ignore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03f92a184d01f0b6bb080875ade584e4d84ec741", "author": {"user": {"login": "hzhao-github", "name": "Huiling Zhao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/03f92a184d01f0b6bb080875ade584e4d84ec741", "committedDate": "2020-09-18T20:39:43Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into dedicated-mode-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13fd295f3a313dcf15ccc7f688fa0f400b2a2fb4", "author": {"user": {"login": "hzhao-github", "name": "Huiling Zhao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/13fd295f3a313dcf15ccc7f688fa0f400b2a2fb4", "committedDate": "2020-09-18T21:00:50Z", "message": "Syncup with develop branch jenkins-ignore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9bbd01736cba622a973f865e56fa710f569f457", "author": {"user": {"login": "hzhao-github", "name": "Huiling Zhao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a9bbd01736cba622a973f865e56fa710f569f457", "committedDate": "2020-09-20T18:00:34Z", "message": "Changed javadoc jenkins-ignore"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyNzkxMTM5", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1913#pullrequestreview-492791139", "createdAt": "2020-09-21T16:34:05Z", "commit": {"oid": "a9bbd01736cba622a973f865e56fa710f569f457"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNjozNDowNVrOHVZRzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNjo1Mjo0N1rOHVZ9nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE5NjMwMg==", "bodyText": "do you mean the domains which are not in the operator's target namespaces do not come up.?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1913#discussion_r492196302", "createdAt": "2020-09-21T16:34:05Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDedicatedMode.java", "diffHunk": "@@ -0,0 +1,385 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+/**\n+ * The current class verifies various use cases related to domainNamespaceSelectionStrategy.\n+ * For more detail regarding the feature, please refer to\n+ * https://github.com/oracle/weblogic-kubernetes-operator/blob/develop/docs-source/content/\n+ * userguide/managing-operators/using-the-operator/using-helm.md#overall-operator-information.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test Operator and WebLogic domain with Dedicated set to true\")\n+@IntegrationTest\n+class ItDedicatedMode {\n+  // namespace constants\n+  private static String opNamespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+\n+  // domain constants\n+  private final String domainUid = \"domain1\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPodPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  // operator constants\n+  private static HelmParams opHelmParams;\n+  private static String opServiceAccount;\n+  private static final String domainNamespaceSelectionStrategy = \"Dedicated\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Get namespaces for operator and domain2.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism.\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // in the dedicated mode, the operator only manages domains in the operator's own namespace\n+    domain1Namespace = opNamespace;\n+\n+    // get a new unique domainNamespace\n+    logger.info(\"Assigning a unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(1);\n+\n+    // Variables for Operator\n+    opServiceAccount = opNamespace + \"-sa\";\n+    opHelmParams =\n+        new HelmParams().releaseName(OPERATOR_RELEASE_NAME)\n+            .namespace(opNamespace)\n+            .chartDir(OPERATOR_CHART_DIR);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+  }\n+\n+  /**\n+   * When installing the Operator via helm install,\n+   * set the Operator Helm Chart parameter domainNamespaceSelectionStrategy to Dedicated and\n+   * set domainNamespaces to something that is different from the operator's namespace.\n+   * Make sure that the domains is not in the operator's target namespaces do not come up.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9bbd01736cba622a973f865e56fa710f569f457"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIwMDAzNg==", "bodyText": "disabling the test as we can't test on kind cluster?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1913#discussion_r492200036", "createdAt": "2020-09-21T16:40:15Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDedicatedMode.java", "diffHunk": "@@ -0,0 +1,385 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+/**\n+ * The current class verifies various use cases related to domainNamespaceSelectionStrategy.\n+ * For more detail regarding the feature, please refer to\n+ * https://github.com/oracle/weblogic-kubernetes-operator/blob/develop/docs-source/content/\n+ * userguide/managing-operators/using-the-operator/using-helm.md#overall-operator-information.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test Operator and WebLogic domain with Dedicated set to true\")\n+@IntegrationTest\n+class ItDedicatedMode {\n+  // namespace constants\n+  private static String opNamespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+\n+  // domain constants\n+  private final String domainUid = \"domain1\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPodPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  // operator constants\n+  private static HelmParams opHelmParams;\n+  private static String opServiceAccount;\n+  private static final String domainNamespaceSelectionStrategy = \"Dedicated\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Get namespaces for operator and domain2.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism.\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // in the dedicated mode, the operator only manages domains in the operator's own namespace\n+    domain1Namespace = opNamespace;\n+\n+    // get a new unique domainNamespace\n+    logger.info(\"Assigning a unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(1);\n+\n+    // Variables for Operator\n+    opServiceAccount = opNamespace + \"-sa\";\n+    opHelmParams =\n+        new HelmParams().releaseName(OPERATOR_RELEASE_NAME)\n+            .namespace(opNamespace)\n+            .chartDir(OPERATOR_CHART_DIR);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+  }\n+\n+  /**\n+   * When installing the Operator via helm install,\n+   * set the Operator Helm Chart parameter domainNamespaceSelectionStrategy to Dedicated and\n+   * set domainNamespaces to something that is different from the operator's namespace.\n+   * Make sure that the domains is not in the operator's target namespaces do not come up.\n+   *   Install an Operator with a namespace and set domainNamespaces in a different namespace\n+   *     from the Operator's namespace, also set domainNamespaceSelectionStrategy to Dedicated\n+   *     for the Operator Helm Chart.\n+   *   Verify the Operator is up and running.\n+   *   Create WebLogic Domain in a namespace that is different from the Operator's namespace.\n+   *   Verify that the domain does not come up.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"Set domainNamespaceSelectionStrategy to Dedicated for the Operator Helm Chart and \"\n+      + \"verify that a domain not deployed in operator's namespace doesn't come up\")\n+  public void testDedicatedModeDiffNamespace() {\n+    // install and verify operator\n+    logger.info(\"Installing and verifying operator\");\n+    installAndVerifyOperator(opNamespace, opNamespace + \"-sa\",\n+        true, 0, opHelmParams, domainNamespaceSelectionStrategy,\n+        false, domain2Namespace);\n+\n+    // create and verify the domain\n+    logger.info(\"Creating and verifying model in image domain\");\n+    createDomain(domain2Namespace);\n+    verifyDomainNotRunning(domain2Namespace);\n+  }\n+\n+  /**\n+   * When installing the Operator via helm install,\n+   * set domainNamespaceSelectionStrategy to Dedicated for the Operator Helm Chart.\n+   * Make sure that the domains in the operator's target namespaces comes up.\n+   *   Operator is installed in the test case testDedicatedModeDiffNamespace.\n+   *   Create a WebLogic Domain with the same namespace as Operator's namespace.\n+   *   Verify that the WebLogic domain whose namespace is same as Operator's namespace comes up.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"Set domainNamespaceSelectionStrategy to Dedicated for the Operator Helm Chart and \"\n+      + \"verify that the domain deployed in the operator's namespace comes up\")\n+  public void testDedicatedModeSameNamespace() {\n+    // create and verify the domain\n+    logger.info(\"Creating and verifying model in image domain\");\n+    createDomain(domain1Namespace);\n+    verifyDomainRunning(domain1Namespace);\n+  }\n+\n+  /**\n+   * Test that when domainNamespaceSelectionStrategy is set to Dedicated for the Operator Helm Chart,\n+   * scaling up cluster-1 in domain1Namespace succeeds.\n+   */\n+  @Test\n+  @Order(3)\n+  @DisplayName(\"Scale up cluster-1 in domain1Namespace and verify it succeeds\")\n+  public void testDedicatedModeSameNamespaceScale() {\n+    // scale the cluster and check domain can be managed from the operator\n+    int externalRestHttpsPort = getServiceNodePort(opNamespace, \"external-weblogic-operator-svc\");\n+    logger.info(\"externalRestHttpsPort {0}\", externalRestHttpsPort);\n+\n+    logger.info(\"scaling the cluster from {0} servers to {1} servers\", replicaCount, replicaCount + 1);\n+    scaleAndVerifyCluster(clusterName, domainUid, domain1Namespace,\n+        managedServerPodPrefix, replicaCount, replicaCount + 1,\n+        true, externalRestHttpsPort, opNamespace, opNamespace + \"-sa\",\n+        false, \"\", \"\", 0, \"\",\n+        \"\", null, null);\n+  }\n+\n+  /**\n+   * Test when domainNamespaceSelectionStrategy is set to Dedicated for the Operator Helm Chart and\n+   * the CRD with a lower than expected version is present, Operator fails with error\n+   * if it has no permission to overwrite the CRD.\n+   */\n+  @Test\n+  @Order(4)\n+  @Disabled(\"Disable the test because the Operator has permission to overwrite the CRD\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9bbd01736cba622a973f865e56fa710f569f457"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIwMzc4NA==", "bodyText": "you can add/update the existing opParams\n    if (domainNamespaceSelectionStrategy != null) {\n          opParams.domainNamespaceSelectionStrategy(domainNamespaceSelectionStrategy);\n    }", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1913#discussion_r492203784", "createdAt": "2020-09-21T16:46:26Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "diffHunk": "@@ -372,6 +398,14 @@ public static HelmParams installAndVerifyOperator(String opNamespace,\n         .domainNamespaces(Arrays.asList(domainNamespace))\n         .serviceAccount(opServiceAccount);\n \n+    if (domainNamespaceSelectionStrategy != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9bbd01736cba622a973f865e56fa710f569f457"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIwNzUxNg==", "bodyText": "are you using domainNamespace in this method when domainNamespaceSelectionStrategy is set?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1913#discussion_r492207516", "createdAt": "2020-09-21T16:52:47Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDedicatedMode.java", "diffHunk": "@@ -0,0 +1,385 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.MANAGED_SERVER_NAME_BASE;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WLS_DOMAIN_TYPE;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deleteServiceAccount;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDomainAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+/**\n+ * The current class verifies various use cases related to domainNamespaceSelectionStrategy.\n+ * For more detail regarding the feature, please refer to\n+ * https://github.com/oracle/weblogic-kubernetes-operator/blob/develop/docs-source/content/\n+ * userguide/managing-operators/using-the-operator/using-helm.md#overall-operator-information.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test Operator and WebLogic domain with Dedicated set to true\")\n+@IntegrationTest\n+class ItDedicatedMode {\n+  // namespace constants\n+  private static String opNamespace = null;\n+  private static String domain1Namespace = null;\n+  private static String domain2Namespace = null;\n+\n+  // domain constants\n+  private final String domainUid = \"domain1\";\n+  private final String clusterName = \"cluster-1\";\n+  private final int replicaCount = 2;\n+  private final String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+  private final String managedServerPodPrefix = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE;\n+\n+  // operator constants\n+  private static HelmParams opHelmParams;\n+  private static String opServiceAccount;\n+  private static final String domainNamespaceSelectionStrategy = \"Dedicated\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Get namespaces for operator and domain2.\n+   *\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   *                   JUnit engine parameter resolution mechanism.\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // get a unique operator namespace\n+    logger.info(\"Getting a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    // in the dedicated mode, the operator only manages domains in the operator's own namespace\n+    domain1Namespace = opNamespace;\n+\n+    // get a new unique domainNamespace\n+    logger.info(\"Assigning a unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domain2Namespace = namespaces.get(1);\n+\n+    // Variables for Operator\n+    opServiceAccount = opNamespace + \"-sa\";\n+    opHelmParams =\n+        new HelmParams().releaseName(OPERATOR_RELEASE_NAME)\n+            .namespace(opNamespace)\n+            .chartDir(OPERATOR_CHART_DIR);\n+  }\n+\n+  @AfterAll\n+  public void tearDownAll() {\n+  }\n+\n+  /**\n+   * When installing the Operator via helm install,\n+   * set the Operator Helm Chart parameter domainNamespaceSelectionStrategy to Dedicated and\n+   * set domainNamespaces to something that is different from the operator's namespace.\n+   * Make sure that the domains is not in the operator's target namespaces do not come up.\n+   *   Install an Operator with a namespace and set domainNamespaces in a different namespace\n+   *     from the Operator's namespace, also set domainNamespaceSelectionStrategy to Dedicated\n+   *     for the Operator Helm Chart.\n+   *   Verify the Operator is up and running.\n+   *   Create WebLogic Domain in a namespace that is different from the Operator's namespace.\n+   *   Verify that the domain does not come up.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"Set domainNamespaceSelectionStrategy to Dedicated for the Operator Helm Chart and \"\n+      + \"verify that a domain not deployed in operator's namespace doesn't come up\")\n+  public void testDedicatedModeDiffNamespace() {\n+    // install and verify operator\n+    logger.info(\"Installing and verifying operator\");\n+    installAndVerifyOperator(opNamespace, opNamespace + \"-sa\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9bbd01736cba622a973f865e56fa710f569f457"}, "originalPosition": 142}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0eb695755c07b28ad71d018f08b6de2e8378d881", "author": {"user": {"login": "hzhao-github", "name": "Huiling Zhao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0eb695755c07b28ad71d018f08b6de2e8378d881", "committedDate": "2020-09-21T20:33:29Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into dedicated-mode-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "937bbbfc732a8a3a0210b86b6c1102652257c6df", "author": {"user": {"login": "hzhao-github", "name": "Huiling Zhao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/937bbbfc732a8a3a0210b86b6c1102652257c6df", "committedDate": "2020-09-21T20:34:43Z", "message": "Syncup w develop and changes based on the comments jenkins-ignore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe118ddd826ecab8c0c86188d8b318a1e8874fb4", "author": {"user": {"login": "hzhao-github", "name": "Huiling Zhao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/fe118ddd826ecab8c0c86188d8b318a1e8874fb4", "committedDate": "2020-09-23T22:46:53Z", "message": "Added creating CRD jenkins-ignore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db92c12e1b742f102db530a2f072749d743b056e", "author": {"user": {"login": "hzhao-github", "name": "Huiling Zhao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/db92c12e1b742f102db530a2f072749d743b056e", "committedDate": "2020-09-30T20:26:55Z", "message": "Disable scaling test and syncup with develop branch jenkins-ignore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fe8b11f85482199aee25a5ec13cf457db6d8caf", "author": {"user": {"login": "hzhao-github", "name": "Huiling Zhao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8fe8b11f85482199aee25a5ec13cf457db6d8caf", "committedDate": "2020-10-02T01:42:42Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into dedicated-mode-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "237a7f50b12cc6ebb89aa529238c5f44379db177", "author": {"user": {"login": "hzhao-github", "name": "Huiling Zhao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/237a7f50b12cc6ebb89aa529238c5f44379db177", "committedDate": "2020-10-02T18:05:19Z", "message": "Syncup with develop branch jenkins-ignore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "369c5e81504fdf72bb5c455436e22f40bd6eb82a", "author": {"user": {"login": "hzhao-github", "name": "Huiling Zhao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/369c5e81504fdf72bb5c455436e22f40bd6eb82a", "committedDate": "2020-10-02T18:23:36Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into dedicated-mode-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1120015b40dc7f4ae4e358721e8b6eb53ad9581e", "author": {"user": {"login": "hzhao-github", "name": "Huiling Zhao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/1120015b40dc7f4ae4e358721e8b6eb53ad9581e", "committedDate": "2020-10-02T18:45:27Z", "message": "Syncup with develop branch jenkins-ignore"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMjExNDY4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1913#pullrequestreview-502211468", "createdAt": "2020-10-05T16:11:01Z", "commit": {"oid": "1120015b40dc7f4ae4e358721e8b6eb53ad9581e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c31c2609d38909c7fd9ccbeb02146e42b9b3587", "author": {"user": {"login": "hzhao-github", "name": "Huiling Zhao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7c31c2609d38909c7fd9ccbeb02146e42b9b3587", "committedDate": "2020-10-05T18:19:20Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into dedicated-mode-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d28cc9c91fcbec2a0b480acf3b5ebf80b0f37115", "author": {"user": {"login": "hzhao-github", "name": "Huiling Zhao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d28cc9c91fcbec2a0b480acf3b5ebf80b0f37115", "committedDate": "2020-10-05T18:39:09Z", "message": "Added this test suite to sequential run only jenkins-ignore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6142231d261cca85d88279e2cd5c742ee38326dd", "author": {"user": {"login": "hzhao-github", "name": "Huiling Zhao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6142231d261cca85d88279e2cd5c742ee38326dd", "committedDate": "2020-10-06T17:45:51Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into dedicated-mode-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a93e472d5e89e45373bdbbc944a137d6ac9d0be", "author": {"user": {"login": "hzhao-github", "name": "Huiling Zhao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3a93e472d5e89e45373bdbbc944a137d6ac9d0be", "committedDate": "2020-10-06T17:46:41Z", "message": "Fixed an error in kindtest.sh jenkins-ignore"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MDYwNDYx", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1913#pullrequestreview-504060461", "createdAt": "2020-10-07T16:28:09Z", "commit": {"oid": "3a93e472d5e89e45373bdbbc944a137d6ac9d0be"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4138, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}