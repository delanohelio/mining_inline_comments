{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNTk3ODcy", "number": 1550, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjozMzoxOVrODwu-Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMDo0NToyOFrODxYcqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDI3ODE5OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItWITValidation.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjozMzoxOVrOGD5Rqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMDo0NjoxMVrOGE0rsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNzMyMg==", "bodyText": "@ddsharpe, is there a bug for this?  Generally, I don't want to obscure problems by having the tests workaround something that doesn't work.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1550#discussion_r406737322", "createdAt": "2020-04-10T12:33:19Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItWITValidation.java", "diffHunk": "@@ -12,20 +12,28 @@\n import org.junit.jupiter.api.DisplayName;\n import org.junit.jupiter.api.Test;\n \n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ARCHIVE_DIR;\n import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;\n import static oracle.weblogic.kubernetes.actions.ActionConstants.WIT_BUILD_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.buildAppArchive;\n import static oracle.weblogic.kubernetes.actions.TestActions.createMIIImage;\n+import static oracle.weblogic.kubernetes.actions.TestActions.withAppParams;\n import static oracle.weblogic.kubernetes.actions.TestActions.withWITParams;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.dockerImageExists;\n import static oracle.weblogic.kubernetes.utils.FileUtils.checkDirectory;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.assertj.core.api.Assertions.assertThat;\n \n @DisplayName(\"Simple validation of basic WIT functions\")\n class ItWITValidation implements LoggedTest {\n   private static final String WDT_MODEL_FILE = \"model1-wls.yaml\";\n   private static final String IMAGE_NAME = \"test-mii-image-2\";\n   private static final String IMAGE_TAG = \"v1\";\n   \n+  // Name of the directory under resources/apps for an application\n+  // Note: use \"_\" instead of \"-\" in app directories names because\n+  // WDT does not like \"-\" to be in the name of an archive file", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf7d35b48504c6cac6547af3c83b9d561591db2c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgwOTU0MA==", "bodyText": "@rjeberhard it is not a known issue.  I just ran a quick test and do not see any issues.\n./createDomain.sh -oracle_home ~/Oracle/Middleware12.2.1.3.0 -domain_parent . -model_file ~/Desktop/demo/my_domain.yaml -archive_file ~/Desktop/demo/my-domain.zip  -variable_file ~/Desktop/demo/my_domain1.10.properties", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1550#discussion_r406809540", "createdAt": "2020-04-10T15:29:50Z", "author": {"login": "ddsharpe"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItWITValidation.java", "diffHunk": "@@ -12,20 +12,28 @@\n import org.junit.jupiter.api.DisplayName;\n import org.junit.jupiter.api.Test;\n \n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ARCHIVE_DIR;\n import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;\n import static oracle.weblogic.kubernetes.actions.ActionConstants.WIT_BUILD_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.buildAppArchive;\n import static oracle.weblogic.kubernetes.actions.TestActions.createMIIImage;\n+import static oracle.weblogic.kubernetes.actions.TestActions.withAppParams;\n import static oracle.weblogic.kubernetes.actions.TestActions.withWITParams;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.dockerImageExists;\n import static oracle.weblogic.kubernetes.utils.FileUtils.checkDirectory;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.assertj.core.api.Assertions.assertThat;\n \n @DisplayName(\"Simple validation of basic WIT functions\")\n class ItWITValidation implements LoggedTest {\n   private static final String WDT_MODEL_FILE = \"model1-wls.yaml\";\n   private static final String IMAGE_NAME = \"test-mii-image-2\";\n   private static final String IMAGE_TAG = \"v1\";\n   \n+  // Name of the directory under resources/apps for an application\n+  // Note: use \"_\" instead of \"-\" in app directories names because\n+  // WDT does not like \"-\" to be in the name of an archive file", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNzMyMg=="}, "originalCommit": {"oid": "cf7d35b48504c6cac6547af3c83b9d561591db2c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzMDg1MQ==", "bodyText": "I recall that before I changed \"-\" to \"_\" in the sourcePath in my model file, the following caused an error.\nappDeployments:\nApplication:\nmyear:\nSourcePath: wlsdeploy/applications/sample_app.ear\nModuleType: ear\nTarget: 'cluster-1'", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1550#discussion_r406830851", "createdAt": "2020-04-10T16:19:30Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItWITValidation.java", "diffHunk": "@@ -12,20 +12,28 @@\n import org.junit.jupiter.api.DisplayName;\n import org.junit.jupiter.api.Test;\n \n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ARCHIVE_DIR;\n import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;\n import static oracle.weblogic.kubernetes.actions.ActionConstants.WIT_BUILD_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.buildAppArchive;\n import static oracle.weblogic.kubernetes.actions.TestActions.createMIIImage;\n+import static oracle.weblogic.kubernetes.actions.TestActions.withAppParams;\n import static oracle.weblogic.kubernetes.actions.TestActions.withWITParams;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.dockerImageExists;\n import static oracle.weblogic.kubernetes.utils.FileUtils.checkDirectory;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.assertj.core.api.Assertions.assertThat;\n \n @DisplayName(\"Simple validation of basic WIT functions\")\n class ItWITValidation implements LoggedTest {\n   private static final String WDT_MODEL_FILE = \"model1-wls.yaml\";\n   private static final String IMAGE_NAME = \"test-mii-image-2\";\n   private static final String IMAGE_TAG = \"v1\";\n   \n+  // Name of the directory under resources/apps for an application\n+  // Note: use \"_\" instead of \"-\" in app directories names because\n+  // WDT does not like \"-\" to be in the name of an archive file", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNzMyMg=="}, "originalCommit": {"oid": "cf7d35b48504c6cac6547af3c83b9d561591db2c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg3NDkzMg==", "bodyText": "Somehow WDT failed to parse the model yams file when the resourcePath contains \"-\". It seems that WDT considered -a as an option token and printed out this error:\n####<Apr 10, 2020 6:00:40 PM>     <The WebLogic Deploy Tooling validateModel version is 1.7.2:master.10eaf6e:Mar 20, 2020 23:24 UTC>\nline 31:53 token recognition error at: '-a'\n####<Apr 10, 2020 6:00:40 PM>     <Parse error for file /u01/wdt/models/model1-wls.yaml at line 31 position 55: extraneous input 'pp.ear' expecting {COMMENT, NEWLINE}>\n####<Apr 10, 2020 6:00:40 PM>   <__perform_model_file_validation>  <validateModel failed to load the model file /u01/wdt/models/model1-wls.yaml: Unable to parse model from file /u01/wdt/models/model1-wls.yaml : The YAML parser encountered 1 error(s) while parsing /u01/wdt/models/model1-wls.yaml>\n####<Apr 10, 2020 6:00:40 PM>     <validateModel encountered an unexpected validation error: Unable to parse model from file /u01/wdt/models/model1-wls.yaml : The YAML parser encountered 1 error(s) while parsing /u01/wdt/models/model1-wls.yaml>", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1550#discussion_r406874932", "createdAt": "2020-04-10T18:04:39Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItWITValidation.java", "diffHunk": "@@ -12,20 +12,28 @@\n import org.junit.jupiter.api.DisplayName;\n import org.junit.jupiter.api.Test;\n \n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ARCHIVE_DIR;\n import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;\n import static oracle.weblogic.kubernetes.actions.ActionConstants.WIT_BUILD_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.buildAppArchive;\n import static oracle.weblogic.kubernetes.actions.TestActions.createMIIImage;\n+import static oracle.weblogic.kubernetes.actions.TestActions.withAppParams;\n import static oracle.weblogic.kubernetes.actions.TestActions.withWITParams;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.dockerImageExists;\n import static oracle.weblogic.kubernetes.utils.FileUtils.checkDirectory;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.assertj.core.api.Assertions.assertThat;\n \n @DisplayName(\"Simple validation of basic WIT functions\")\n class ItWITValidation implements LoggedTest {\n   private static final String WDT_MODEL_FILE = \"model1-wls.yaml\";\n   private static final String IMAGE_NAME = \"test-mii-image-2\";\n   private static final String IMAGE_TAG = \"v1\";\n   \n+  // Name of the directory under resources/apps for an application\n+  // Note: use \"_\" instead of \"-\" in app directories names because\n+  // WDT does not like \"-\" to be in the name of an archive file", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNzMyMg=="}, "originalCommit": {"oid": "cf7d35b48504c6cac6547af3c83b9d561591db2c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg3ODYxNw==", "bodyText": "We could handle this by converting \"-\" to \"_\" in the AppBuilder action, but it is easier just not to have \"-\" in the app name.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1550#discussion_r406878617", "createdAt": "2020-04-10T18:13:55Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItWITValidation.java", "diffHunk": "@@ -12,20 +12,28 @@\n import org.junit.jupiter.api.DisplayName;\n import org.junit.jupiter.api.Test;\n \n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ARCHIVE_DIR;\n import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;\n import static oracle.weblogic.kubernetes.actions.ActionConstants.WIT_BUILD_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.buildAppArchive;\n import static oracle.weblogic.kubernetes.actions.TestActions.createMIIImage;\n+import static oracle.weblogic.kubernetes.actions.TestActions.withAppParams;\n import static oracle.weblogic.kubernetes.actions.TestActions.withWITParams;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.dockerImageExists;\n import static oracle.weblogic.kubernetes.utils.FileUtils.checkDirectory;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.assertj.core.api.Assertions.assertThat;\n \n @DisplayName(\"Simple validation of basic WIT functions\")\n class ItWITValidation implements LoggedTest {\n   private static final String WDT_MODEL_FILE = \"model1-wls.yaml\";\n   private static final String IMAGE_NAME = \"test-mii-image-2\";\n   private static final String IMAGE_TAG = \"v1\";\n   \n+  // Name of the directory under resources/apps for an application\n+  // Note: use \"_\" instead of \"-\" in app directories names because\n+  // WDT does not like \"-\" to be in the name of an archive file", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNzMyMg=="}, "originalCommit": {"oid": "cf7d35b48504c6cac6547af3c83b9d561591db2c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcwMTk0OQ==", "bodyText": "Once I added \"\" around the value of sourcePath, the \"-\" in the application ear file path worked.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1550#discussion_r407701949", "createdAt": "2020-04-13T20:29:36Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItWITValidation.java", "diffHunk": "@@ -12,20 +12,28 @@\n import org.junit.jupiter.api.DisplayName;\n import org.junit.jupiter.api.Test;\n \n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ARCHIVE_DIR;\n import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;\n import static oracle.weblogic.kubernetes.actions.ActionConstants.WIT_BUILD_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.buildAppArchive;\n import static oracle.weblogic.kubernetes.actions.TestActions.createMIIImage;\n+import static oracle.weblogic.kubernetes.actions.TestActions.withAppParams;\n import static oracle.weblogic.kubernetes.actions.TestActions.withWITParams;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.dockerImageExists;\n import static oracle.weblogic.kubernetes.utils.FileUtils.checkDirectory;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.assertj.core.api.Assertions.assertThat;\n \n @DisplayName(\"Simple validation of basic WIT functions\")\n class ItWITValidation implements LoggedTest {\n   private static final String WDT_MODEL_FILE = \"model1-wls.yaml\";\n   private static final String IMAGE_NAME = \"test-mii-image-2\";\n   private static final String IMAGE_TAG = \"v1\";\n   \n+  // Name of the directory under resources/apps for an application\n+  // Note: use \"_\" instead of \"-\" in app directories names because\n+  // WDT does not like \"-\" to be in the name of an archive file", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNzMyMg=="}, "originalCommit": {"oid": "cf7d35b48504c6cac6547af3c83b9d561591db2c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcxMDY0MA==", "bodyText": "This comment is still here :).  Let's change \"sample_app\" to use \"sample-app\" just to prove that it is fixed.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1550#discussion_r407710640", "createdAt": "2020-04-13T20:46:11Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItWITValidation.java", "diffHunk": "@@ -12,20 +12,28 @@\n import org.junit.jupiter.api.DisplayName;\n import org.junit.jupiter.api.Test;\n \n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ARCHIVE_DIR;\n import static oracle.weblogic.kubernetes.actions.ActionConstants.MODEL_DIR;\n import static oracle.weblogic.kubernetes.actions.ActionConstants.WIT_BUILD_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.buildAppArchive;\n import static oracle.weblogic.kubernetes.actions.TestActions.createMIIImage;\n+import static oracle.weblogic.kubernetes.actions.TestActions.withAppParams;\n import static oracle.weblogic.kubernetes.actions.TestActions.withWITParams;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.dockerImageExists;\n import static oracle.weblogic.kubernetes.utils.FileUtils.checkDirectory;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.assertj.core.api.Assertions.assertThat;\n \n @DisplayName(\"Simple validation of basic WIT functions\")\n class ItWITValidation implements LoggedTest {\n   private static final String WDT_MODEL_FILE = \"model1-wls.yaml\";\n   private static final String IMAGE_NAME = \"test-mii-image-2\";\n   private static final String IMAGE_TAG = \"v1\";\n   \n+  // Name of the directory under resources/apps for an application\n+  // Note: use \"_\" instead of \"-\" in app directories names because\n+  // WDT does not like \"-\" to be in the name of an archive file", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNzMyMg=="}, "originalCommit": {"oid": "cf7d35b48504c6cac6547af3c83b9d561591db2c"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDI4MDkwOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItWITValidation.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjozNDoyNVrOGD5TQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzoyMjowNVrOGD6Vkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNzczMQ==", "bodyText": "It feels like the use of withAppParams() is disguising what is being built and tested.  I'll look below to see what this method does, but it's not clear what these statements do.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1550#discussion_r406737731", "createdAt": "2020-04-10T12:34:25Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItWITValidation.java", "diffHunk": "@@ -34,7 +42,21 @@ public void testCreatingMIIImage() {\n \n     // build the model file list\n     List<String> modelList = Collections.singletonList(MODEL_DIR + \"/\" + WDT_MODEL_FILE);\n-\n+    \n+    // build an application archive using what is in resources/apps/APP_NAME\n+    boolean archiveBuilt = buildAppArchive(\n+        withAppParams()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf7d35b48504c6cac6547af3c83b9d561591db2c"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0NjMxMw==", "bodyText": "withAppParams() method is a way of getting an instance of params without using the impl directly in the test code. The particular one just returns a new instance.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1550#discussion_r406746313", "createdAt": "2020-04-10T12:59:21Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItWITValidation.java", "diffHunk": "@@ -34,7 +42,21 @@ public void testCreatingMIIImage() {\n \n     // build the model file list\n     List<String> modelList = Collections.singletonList(MODEL_DIR + \"/\" + WDT_MODEL_FILE);\n-\n+    \n+    // build an application archive using what is in resources/apps/APP_NAME\n+    boolean archiveBuilt = buildAppArchive(\n+        withAppParams()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNzczMQ=="}, "originalCommit": {"oid": "cf7d35b48504c6cac6547af3c83b9d561591db2c"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0NjcxMQ==", "bodyText": "Will it help if I add more explanation in the javadoc?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1550#discussion_r406746711", "createdAt": "2020-04-10T13:00:18Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItWITValidation.java", "diffHunk": "@@ -34,7 +42,21 @@ public void testCreatingMIIImage() {\n \n     // build the model file list\n     List<String> modelList = Collections.singletonList(MODEL_DIR + \"/\" + WDT_MODEL_FILE);\n-\n+    \n+    // build an application archive using what is in resources/apps/APP_NAME\n+    boolean archiveBuilt = buildAppArchive(\n+        withAppParams()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNzczMQ=="}, "originalCommit": {"oid": "cf7d35b48504c6cac6547af3c83b9d561591db2c"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0ODcxMg==", "bodyText": "this feels too magical - i assume it is setting some defaults, we should either not do that, or change the name to something like withDefaultAppParams() so it is clear what is happening", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1550#discussion_r406748712", "createdAt": "2020-04-10T13:05:49Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItWITValidation.java", "diffHunk": "@@ -34,7 +42,21 @@ public void testCreatingMIIImage() {\n \n     // build the model file list\n     List<String> modelList = Collections.singletonList(MODEL_DIR + \"/\" + WDT_MODEL_FILE);\n-\n+    \n+    // build an application archive using what is in resources/apps/APP_NAME\n+    boolean archiveBuilt = buildAppArchive(\n+        withAppParams()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNzczMQ=="}, "originalCommit": {"oid": "cf7d35b48504c6cac6547af3c83b9d561591db2c"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc1NDcwNw==", "bodyText": "I'll change the method name to defaultAppParams to be a little bit more clear. this method also hides things that a test writer does not need to know, for example, the version of the installers and etc. All parameters that a test writer cares need to be set once he/she gets an AppParams instance.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1550#discussion_r406754707", "createdAt": "2020-04-10T13:22:05Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItWITValidation.java", "diffHunk": "@@ -34,7 +42,21 @@ public void testCreatingMIIImage() {\n \n     // build the model file list\n     List<String> modelList = Collections.singletonList(MODEL_DIR + \"/\" + WDT_MODEL_FILE);\n-\n+    \n+    // build an application archive using what is in resources/apps/APP_NAME\n+    boolean archiveBuilt = buildAppArchive(\n+        withAppParams()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNzczMQ=="}, "originalCommit": {"oid": "cf7d35b48504c6cac6547af3c83b9d561591db2c"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDM2MzQ3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/AppBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzowOTowOFrOGD6CqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNDowMjo1NFrOGD7WrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0OTg2NQ==", "bodyText": "these are not accurate -- that closure is doing more than this\nplease make the descriptions as accurate as possible", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1550#discussion_r406749865", "createdAt": "2020-04-10T13:09:08Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/AppBuilder.java", "diffHunk": "@@ -0,0 +1,152 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.actions.impl;\n+\n+import java.io.IOException;\n+\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ARCHIVE_DIR;\n+import static oracle.weblogic.kubernetes.actions.impl.primitive.Command.defaultCommandParams;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.checkDirectory;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.cleanupDirectory;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.copyFolder;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.catchThrowable;\n+\n+/**\n+ *  Implementation of actions that build an application archive file.\n+ */\n+\n+public class AppBuilder {\n+  private static final String ARCHIVE_SRC_DIR = ARCHIVE_DIR + \"/wlsdeploy/applications\";\n+  \n+  private AppParams params;\n+\n+  /**\n+   * Create an AppParams instance with the default values.\n+   * @return an AppParams instance \n+   */\n+  public static AppParams defaultAppParams() {\n+    return new AppParams().defaults();\n+  }\n+\n+  /**\n+   * Set up the AppBuilder with given parameters.\n+   * @return the AppBuilder instance \n+   */\n+  public static AppBuilder withParams(AppParams params) {\n+    return new AppBuilder().params(params);\n+  }\n+\n+  private AppBuilder params(AppParams params) {\n+    this.params = params;\n+    return this;\n+  }\n+\n+  /**\n+   * Build an application archive using a pre-populated AppParams instance.\n+   * @return true if the command succeeds \n+   */\n+  public boolean build() {\n+    // prepare the archive directory and copy over the app src\n+    Throwable throwable = catchThrowable(\n+        () -> { \n+        cleanupDirectory(ARCHIVE_DIR);\n+        checkDirectory(ARCHIVE_SRC_DIR);\n+        copyFolder(\n+            APP_DIR + \"/\" + params.srcDir(), \n+            ARCHIVE_SRC_DIR);\n+        });\n+        \n+    assertThat(throwable)\n+        .as(\"Create directory \" + ARCHIVE_DIR)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf7d35b48504c6cac6547af3c83b9d561591db2c"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3MTM3Mw==", "bodyText": "good catch. fixed.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1550#discussion_r406771373", "createdAt": "2020-04-10T14:02:54Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/AppBuilder.java", "diffHunk": "@@ -0,0 +1,152 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.actions.impl;\n+\n+import java.io.IOException;\n+\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ARCHIVE_DIR;\n+import static oracle.weblogic.kubernetes.actions.impl.primitive.Command.defaultCommandParams;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.checkDirectory;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.cleanupDirectory;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.copyFolder;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.catchThrowable;\n+\n+/**\n+ *  Implementation of actions that build an application archive file.\n+ */\n+\n+public class AppBuilder {\n+  private static final String ARCHIVE_SRC_DIR = ARCHIVE_DIR + \"/wlsdeploy/applications\";\n+  \n+  private AppParams params;\n+\n+  /**\n+   * Create an AppParams instance with the default values.\n+   * @return an AppParams instance \n+   */\n+  public static AppParams defaultAppParams() {\n+    return new AppParams().defaults();\n+  }\n+\n+  /**\n+   * Set up the AppBuilder with given parameters.\n+   * @return the AppBuilder instance \n+   */\n+  public static AppBuilder withParams(AppParams params) {\n+    return new AppBuilder().params(params);\n+  }\n+\n+  private AppBuilder params(AppParams params) {\n+    this.params = params;\n+    return this;\n+  }\n+\n+  /**\n+   * Build an application archive using a pre-populated AppParams instance.\n+   * @return true if the command succeeds \n+   */\n+  public boolean build() {\n+    // prepare the archive directory and copy over the app src\n+    Throwable throwable = catchThrowable(\n+        () -> { \n+        cleanupDirectory(ARCHIVE_DIR);\n+        checkDirectory(ARCHIVE_SRC_DIR);\n+        copyFolder(\n+            APP_DIR + \"/\" + params.srcDir(), \n+            ARCHIVE_SRC_DIR);\n+        });\n+        \n+    assertThat(throwable)\n+        .as(\"Create directory \" + ARCHIVE_DIR)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0OTg2NQ=="}, "originalCommit": {"oid": "cf7d35b48504c6cac6547af3c83b9d561591db2c"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDM2NjI3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/AppBuilder.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzoxMDowNlrOGD6EKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNDowMzoyNFrOGD7Xaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc1MDI0OA==", "bodyText": "include the exception in the fail message, so we know why it failed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1550#discussion_r406750248", "createdAt": "2020-04-10T13:10:06Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/AppBuilder.java", "diffHunk": "@@ -0,0 +1,152 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.actions.impl;\n+\n+import java.io.IOException;\n+\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ARCHIVE_DIR;\n+import static oracle.weblogic.kubernetes.actions.impl.primitive.Command.defaultCommandParams;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.checkDirectory;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.cleanupDirectory;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.copyFolder;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.catchThrowable;\n+\n+/**\n+ *  Implementation of actions that build an application archive file.\n+ */\n+\n+public class AppBuilder {\n+  private static final String ARCHIVE_SRC_DIR = ARCHIVE_DIR + \"/wlsdeploy/applications\";\n+  \n+  private AppParams params;\n+\n+  /**\n+   * Create an AppParams instance with the default values.\n+   * @return an AppParams instance \n+   */\n+  public static AppParams defaultAppParams() {\n+    return new AppParams().defaults();\n+  }\n+\n+  /**\n+   * Set up the AppBuilder with given parameters.\n+   * @return the AppBuilder instance \n+   */\n+  public static AppBuilder withParams(AppParams params) {\n+    return new AppBuilder().params(params);\n+  }\n+\n+  private AppBuilder params(AppParams params) {\n+    this.params = params;\n+    return this;\n+  }\n+\n+  /**\n+   * Build an application archive using a pre-populated AppParams instance.\n+   * @return true if the command succeeds \n+   */\n+  public boolean build() {\n+    // prepare the archive directory and copy over the app src\n+    Throwable throwable = catchThrowable(\n+        () -> { \n+        cleanupDirectory(ARCHIVE_DIR);\n+        checkDirectory(ARCHIVE_SRC_DIR);\n+        copyFolder(\n+            APP_DIR + \"/\" + params.srcDir(), \n+            ARCHIVE_SRC_DIR);\n+        });\n+        \n+    assertThat(throwable)\n+        .as(\"Create directory \" + ARCHIVE_DIR)\n+        .withFailMessage(\"Failed to get the directory \" + ARCHIVE_DIR + \" ready\")\n+        .isNull();\n+\n+    // build the app archive \n+    Exception exception = null;\n+    String jarPath = String.format(\"%s.ear\", params.srcDir());\n+    try {\n+      boolean jarBuilt = buildJarArchive(jarPath, ARCHIVE_SRC_DIR);\n+      assertThat(jarBuilt)\n+          .as(\"Create app ear file \" + jarPath)\n+          .withFailMessage(\"Failed to create the app ear file \" + jarPath) \n+          .isTrue();\n+    } catch (Exception e) {\n+      exception = e;\n+    }\n+    \n+    assertThat(exception)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf7d35b48504c6cac6547af3c83b9d561591db2c"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc1MDMyMQ==", "bodyText": "applies to multiple places", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1550#discussion_r406750321", "createdAt": "2020-04-10T13:10:20Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/AppBuilder.java", "diffHunk": "@@ -0,0 +1,152 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.actions.impl;\n+\n+import java.io.IOException;\n+\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ARCHIVE_DIR;\n+import static oracle.weblogic.kubernetes.actions.impl.primitive.Command.defaultCommandParams;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.checkDirectory;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.cleanupDirectory;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.copyFolder;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.catchThrowable;\n+\n+/**\n+ *  Implementation of actions that build an application archive file.\n+ */\n+\n+public class AppBuilder {\n+  private static final String ARCHIVE_SRC_DIR = ARCHIVE_DIR + \"/wlsdeploy/applications\";\n+  \n+  private AppParams params;\n+\n+  /**\n+   * Create an AppParams instance with the default values.\n+   * @return an AppParams instance \n+   */\n+  public static AppParams defaultAppParams() {\n+    return new AppParams().defaults();\n+  }\n+\n+  /**\n+   * Set up the AppBuilder with given parameters.\n+   * @return the AppBuilder instance \n+   */\n+  public static AppBuilder withParams(AppParams params) {\n+    return new AppBuilder().params(params);\n+  }\n+\n+  private AppBuilder params(AppParams params) {\n+    this.params = params;\n+    return this;\n+  }\n+\n+  /**\n+   * Build an application archive using a pre-populated AppParams instance.\n+   * @return true if the command succeeds \n+   */\n+  public boolean build() {\n+    // prepare the archive directory and copy over the app src\n+    Throwable throwable = catchThrowable(\n+        () -> { \n+        cleanupDirectory(ARCHIVE_DIR);\n+        checkDirectory(ARCHIVE_SRC_DIR);\n+        copyFolder(\n+            APP_DIR + \"/\" + params.srcDir(), \n+            ARCHIVE_SRC_DIR);\n+        });\n+        \n+    assertThat(throwable)\n+        .as(\"Create directory \" + ARCHIVE_DIR)\n+        .withFailMessage(\"Failed to get the directory \" + ARCHIVE_DIR + \" ready\")\n+        .isNull();\n+\n+    // build the app archive \n+    Exception exception = null;\n+    String jarPath = String.format(\"%s.ear\", params.srcDir());\n+    try {\n+      boolean jarBuilt = buildJarArchive(jarPath, ARCHIVE_SRC_DIR);\n+      assertThat(jarBuilt)\n+          .as(\"Create app ear file \" + jarPath)\n+          .withFailMessage(\"Failed to create the app ear file \" + jarPath) \n+          .isTrue();\n+    } catch (Exception e) {\n+      exception = e;\n+    }\n+    \n+    assertThat(exception)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc1MDI0OA=="}, "originalCommit": {"oid": "cf7d35b48504c6cac6547af3c83b9d561591db2c"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3MTU2Mw==", "bodyText": "Changed the assertion to fail in two places.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1550#discussion_r406771563", "createdAt": "2020-04-10T14:03:24Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/AppBuilder.java", "diffHunk": "@@ -0,0 +1,152 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.actions.impl;\n+\n+import java.io.IOException;\n+\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ARCHIVE_DIR;\n+import static oracle.weblogic.kubernetes.actions.impl.primitive.Command.defaultCommandParams;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.checkDirectory;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.cleanupDirectory;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.copyFolder;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.catchThrowable;\n+\n+/**\n+ *  Implementation of actions that build an application archive file.\n+ */\n+\n+public class AppBuilder {\n+  private static final String ARCHIVE_SRC_DIR = ARCHIVE_DIR + \"/wlsdeploy/applications\";\n+  \n+  private AppParams params;\n+\n+  /**\n+   * Create an AppParams instance with the default values.\n+   * @return an AppParams instance \n+   */\n+  public static AppParams defaultAppParams() {\n+    return new AppParams().defaults();\n+  }\n+\n+  /**\n+   * Set up the AppBuilder with given parameters.\n+   * @return the AppBuilder instance \n+   */\n+  public static AppBuilder withParams(AppParams params) {\n+    return new AppBuilder().params(params);\n+  }\n+\n+  private AppBuilder params(AppParams params) {\n+    this.params = params;\n+    return this;\n+  }\n+\n+  /**\n+   * Build an application archive using a pre-populated AppParams instance.\n+   * @return true if the command succeeds \n+   */\n+  public boolean build() {\n+    // prepare the archive directory and copy over the app src\n+    Throwable throwable = catchThrowable(\n+        () -> { \n+        cleanupDirectory(ARCHIVE_DIR);\n+        checkDirectory(ARCHIVE_SRC_DIR);\n+        copyFolder(\n+            APP_DIR + \"/\" + params.srcDir(), \n+            ARCHIVE_SRC_DIR);\n+        });\n+        \n+    assertThat(throwable)\n+        .as(\"Create directory \" + ARCHIVE_DIR)\n+        .withFailMessage(\"Failed to get the directory \" + ARCHIVE_DIR + \" ready\")\n+        .isNull();\n+\n+    // build the app archive \n+    Exception exception = null;\n+    String jarPath = String.format(\"%s.ear\", params.srcDir());\n+    try {\n+      boolean jarBuilt = buildJarArchive(jarPath, ARCHIVE_SRC_DIR);\n+      assertThat(jarBuilt)\n+          .as(\"Create app ear file \" + jarPath)\n+          .withFailMessage(\"Failed to create the app ear file \" + jarPath) \n+          .isTrue();\n+    } catch (Exception e) {\n+      exception = e;\n+    }\n+    \n+    assertThat(exception)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc1MDI0OA=="}, "originalCommit": {"oid": "cf7d35b48504c6cac6547af3c83b9d561591db2c"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDM3NTAwOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/FileUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzoxMzo1NFrOGD6JXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNDowMzozNFrOGD7Xsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc1MTU4Mg==", "bodyText": "this feel like it could be a simple check and a throw IllegalArgsException - assertions are really for tests", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1550#discussion_r406751582", "createdAt": "2020-04-10T13:13:54Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/FileUtils.java", "diffHunk": "@@ -55,4 +63,55 @@ public static boolean doesFileExist(String fileName) {\n     }\n     return false;\n   }\n+  \n+  /**\n+   * Remove the given directory and its contents.\n+   *\n+   * @param dir the directory to be cleaned up\n+   */\n+  public static void cleanupDirectory(String dir) throws IOException {\n+    File file = new File(dir);\n+    logger.info(\"Cleaning up directory \" + dir);\n+    if (!file.exists()) {\n+      // nothing to do\n+      return;\n+    }\n+\n+    assertThat(file.isDirectory())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf7d35b48504c6cac6547af3c83b9d561591db2c"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3MTYzNA==", "bodyText": "done.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1550#discussion_r406771634", "createdAt": "2020-04-10T14:03:34Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/FileUtils.java", "diffHunk": "@@ -55,4 +63,55 @@ public static boolean doesFileExist(String fileName) {\n     }\n     return false;\n   }\n+  \n+  /**\n+   * Remove the given directory and its contents.\n+   *\n+   * @param dir the directory to be cleaned up\n+   */\n+  public static void cleanupDirectory(String dir) throws IOException {\n+    File file = new File(dir);\n+    logger.info(\"Cleaning up directory \" + dir);\n+    if (!file.exists()) {\n+      // nothing to do\n+      return;\n+    }\n+\n+    assertThat(file.isDirectory())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc1MTU4Mg=="}, "originalCommit": {"oid": "cf7d35b48504c6cac6547af3c83b9d561591db2c"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDM3NjU4OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/FileUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzoxNDoyNVrOGD6KUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzoxNDoyNVrOGD6KUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc1MTgyNw==", "bodyText": "nice comment", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1550#discussion_r406751827", "createdAt": "2020-04-10T13:14:25Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/FileUtils.java", "diffHunk": "@@ -55,4 +63,55 @@ public static boolean doesFileExist(String fileName) {\n     }\n     return false;\n   }\n+  \n+  /**\n+   * Remove the given directory and its contents.\n+   *\n+   * @param dir the directory to be cleaned up\n+   */\n+  public static void cleanupDirectory(String dir) throws IOException {\n+    File file = new File(dir);\n+    logger.info(\"Cleaning up directory \" + dir);\n+    if (!file.exists()) {\n+      // nothing to do\n+      return;\n+    }\n+\n+    assertThat(file.isDirectory())\n+        .as(\"Make sure the given name is a directory\")\n+        .withFailMessage(\"Cannot clean up something that is not a directory\")\n+        .isTrue();\n+\n+    Files.walk(Paths.get(dir))\n+        .sorted(Comparator.reverseOrder())\n+        .map(Path::toFile)\n+        .forEach(File::delete);\n+\n+  }\n+  \n+  /**\n+   * Copy files from source directory to destination directory.\n+   *\n+   * @param srcDir source directory\n+   * @param destDir target directory\n+   * @throws IOException if the operation encounters an issue\n+   */\n+  public static void copyFolder(String srcDir, String destDir) throws IOException {\n+    Path srcPath = Paths.get(srcDir);\n+    Path destPath = Paths.get(destDir);\n+    try (Stream<Path> stream = Files.walk(srcPath)) {\n+      stream.forEach(source -> {\n+        try {\n+          copy(source, destPath.resolve(srcPath.relativize(source)));\n+        } catch (IOException e) {\n+          // cannot throw non runtime exception. the caller checks throwable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf7d35b48504c6cac6547af3c83b9d561591db2c"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDc3MTkyOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/AppBuilder.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTozNzoxMFrOGD94VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMzo0NjowNlrOGEIbog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxMjc1Ng==", "bodyText": "assertions are for tests, when implementing an action, i think we can just use the normal try/catch\n@rjeberhard thoughts?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1550#discussion_r406812756", "createdAt": "2020-04-10T15:37:10Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/AppBuilder.java", "diffHunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.actions.impl;\n+\n+import java.io.IOException;\n+\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ARCHIVE_DIR;\n+import static oracle.weblogic.kubernetes.actions.impl.primitive.Command.defaultCommandParams;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.checkDirectory;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.cleanupDirectory;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.copyFolder;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.catchThrowable;\n+import static org.assertj.core.api.Assertions.fail;\n+\n+/**\n+ *  Implementation of actions that build an application archive file.\n+ */\n+\n+public class AppBuilder {\n+  private static final String ARCHIVE_SRC_DIR = ARCHIVE_DIR + \"/wlsdeploy/applications\";\n+  \n+  private AppParams params;\n+\n+  /**\n+   * Create an AppParams instance with the default values.\n+   * @return an AppParams instance \n+   */\n+  public static AppParams defaultAppParams() {\n+    return new AppParams().defaults();\n+  }\n+\n+  /**\n+   * Set up the AppBuilder with given parameters.\n+   * @return the AppBuilder instance \n+   */\n+  public static AppBuilder withParams(AppParams params) {\n+    return new AppBuilder().params(params);\n+  }\n+\n+  private AppBuilder params(AppParams params) {\n+    this.params = params;\n+    return this;\n+  }\n+\n+  /**\n+   * Build an application archive using a pre-populated AppParams instance.\n+   * @return true if the command succeeds \n+   */\n+  public boolean build() {\n+    // prepare the archive directory and copy over the app src\n+    Throwable throwable = catchThrowable(\n+        () -> { \n+        cleanupDirectory(ARCHIVE_DIR);\n+        checkDirectory(ARCHIVE_SRC_DIR);\n+        copyFolder(\n+            APP_DIR + \"/\" + params.srcDir(), \n+            ARCHIVE_SRC_DIR);\n+        });\n+        \n+    assertThat(throwable)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f936754f79192ac3b8e9a14e0c4964ee2926ff5d"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxMzAwOQ==", "bodyText": "i don't like tests relying on assertions hidden away in actions/helper methods", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1550#discussion_r406813009", "createdAt": "2020-04-10T15:37:39Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/AppBuilder.java", "diffHunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.actions.impl;\n+\n+import java.io.IOException;\n+\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ARCHIVE_DIR;\n+import static oracle.weblogic.kubernetes.actions.impl.primitive.Command.defaultCommandParams;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.checkDirectory;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.cleanupDirectory;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.copyFolder;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.catchThrowable;\n+import static org.assertj.core.api.Assertions.fail;\n+\n+/**\n+ *  Implementation of actions that build an application archive file.\n+ */\n+\n+public class AppBuilder {\n+  private static final String ARCHIVE_SRC_DIR = ARCHIVE_DIR + \"/wlsdeploy/applications\";\n+  \n+  private AppParams params;\n+\n+  /**\n+   * Create an AppParams instance with the default values.\n+   * @return an AppParams instance \n+   */\n+  public static AppParams defaultAppParams() {\n+    return new AppParams().defaults();\n+  }\n+\n+  /**\n+   * Set up the AppBuilder with given parameters.\n+   * @return the AppBuilder instance \n+   */\n+  public static AppBuilder withParams(AppParams params) {\n+    return new AppBuilder().params(params);\n+  }\n+\n+  private AppBuilder params(AppParams params) {\n+    this.params = params;\n+    return this;\n+  }\n+\n+  /**\n+   * Build an application archive using a pre-populated AppParams instance.\n+   * @return true if the command succeeds \n+   */\n+  public boolean build() {\n+    // prepare the archive directory and copy over the app src\n+    Throwable throwable = catchThrowable(\n+        () -> { \n+        cleanupDirectory(ARCHIVE_DIR);\n+        checkDirectory(ARCHIVE_SRC_DIR);\n+        copyFolder(\n+            APP_DIR + \"/\" + params.srcDir(), \n+            ARCHIVE_SRC_DIR);\n+        });\n+        \n+    assertThat(throwable)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxMjc1Ng=="}, "originalCommit": {"oid": "f936754f79192ac3b8e9a14e0c4964ee2926ff5d"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxODkxMA==", "bodyText": "Agreed.  The test should deal with the exception.  Let \"build()\" throw it.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1550#discussion_r406818910", "createdAt": "2020-04-10T15:51:20Z", "author": {"login": "ddsharpe"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/AppBuilder.java", "diffHunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.actions.impl;\n+\n+import java.io.IOException;\n+\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ARCHIVE_DIR;\n+import static oracle.weblogic.kubernetes.actions.impl.primitive.Command.defaultCommandParams;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.checkDirectory;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.cleanupDirectory;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.copyFolder;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.catchThrowable;\n+import static org.assertj.core.api.Assertions.fail;\n+\n+/**\n+ *  Implementation of actions that build an application archive file.\n+ */\n+\n+public class AppBuilder {\n+  private static final String ARCHIVE_SRC_DIR = ARCHIVE_DIR + \"/wlsdeploy/applications\";\n+  \n+  private AppParams params;\n+\n+  /**\n+   * Create an AppParams instance with the default values.\n+   * @return an AppParams instance \n+   */\n+  public static AppParams defaultAppParams() {\n+    return new AppParams().defaults();\n+  }\n+\n+  /**\n+   * Set up the AppBuilder with given parameters.\n+   * @return the AppBuilder instance \n+   */\n+  public static AppBuilder withParams(AppParams params) {\n+    return new AppBuilder().params(params);\n+  }\n+\n+  private AppBuilder params(AppParams params) {\n+    this.params = params;\n+    return this;\n+  }\n+\n+  /**\n+   * Build an application archive using a pre-populated AppParams instance.\n+   * @return true if the command succeeds \n+   */\n+  public boolean build() {\n+    // prepare the archive directory and copy over the app src\n+    Throwable throwable = catchThrowable(\n+        () -> { \n+        cleanupDirectory(ARCHIVE_DIR);\n+        checkDirectory(ARCHIVE_SRC_DIR);\n+        copyFolder(\n+            APP_DIR + \"/\" + params.srcDir(), \n+            ARCHIVE_SRC_DIR);\n+        });\n+        \n+    assertThat(throwable)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxMjc1Ng=="}, "originalCommit": {"oid": "f936754f79192ac3b8e9a14e0c4964ee2926ff5d"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NTYzNA==", "bodyText": "Removed all assertion in the actions.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1550#discussion_r406985634", "createdAt": "2020-04-10T23:46:06Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/AppBuilder.java", "diffHunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.actions.impl;\n+\n+import java.io.IOException;\n+\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ARCHIVE_DIR;\n+import static oracle.weblogic.kubernetes.actions.impl.primitive.Command.defaultCommandParams;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.checkDirectory;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.cleanupDirectory;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.copyFolder;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.catchThrowable;\n+import static org.assertj.core.api.Assertions.fail;\n+\n+/**\n+ *  Implementation of actions that build an application archive file.\n+ */\n+\n+public class AppBuilder {\n+  private static final String ARCHIVE_SRC_DIR = ARCHIVE_DIR + \"/wlsdeploy/applications\";\n+  \n+  private AppParams params;\n+\n+  /**\n+   * Create an AppParams instance with the default values.\n+   * @return an AppParams instance \n+   */\n+  public static AppParams defaultAppParams() {\n+    return new AppParams().defaults();\n+  }\n+\n+  /**\n+   * Set up the AppBuilder with given parameters.\n+   * @return the AppBuilder instance \n+   */\n+  public static AppBuilder withParams(AppParams params) {\n+    return new AppBuilder().params(params);\n+  }\n+\n+  private AppBuilder params(AppParams params) {\n+    this.params = params;\n+    return this;\n+  }\n+\n+  /**\n+   * Build an application archive using a pre-populated AppParams instance.\n+   * @return true if the command succeeds \n+   */\n+  public boolean build() {\n+    // prepare the archive directory and copy over the app src\n+    Throwable throwable = catchThrowable(\n+        () -> { \n+        cleanupDirectory(ARCHIVE_DIR);\n+        checkDirectory(ARCHIVE_SRC_DIR);\n+        copyFolder(\n+            APP_DIR + \"/\" + params.srcDir(), \n+            ARCHIVE_SRC_DIR);\n+        });\n+        \n+    assertThat(throwable)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxMjc1Ng=="}, "originalCommit": {"oid": "f936754f79192ac3b8e9a14e0c4964ee2926ff5d"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDc5OTg0OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/FileUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTo0NzoxMlrOGD-JcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNjoyMDoyMFrOGD_AUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxNzEzNw==", "bodyText": "we have commons-io in the pom, so you could do this with just one call to FileUtils.deleteDirectory(file)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1550#discussion_r406817137", "createdAt": "2020-04-10T15:47:12Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/FileUtils.java", "diffHunk": "@@ -55,4 +62,54 @@ public static boolean doesFileExist(String fileName) {\n     }\n     return false;\n   }\n+  \n+  /**\n+   * Remove the given directory and its contents.\n+   *\n+   * @param dir the directory to be cleaned up\n+   */\n+  public static void cleanupDirectory(String dir) throws IOException {\n+    File file = new File(dir);\n+    logger.info(\"Cleaning up directory \" + dir);\n+    if (!file.exists()) {\n+      // nothing to do\n+      return;\n+    }\n+\n+    if (!file.isDirectory()) {\n+      throw new IllegalArgumentException(\"The parameter \" + dir + \" should be a directory.\");\n+    }\n+\n+    Files.walk(Paths.get(dir))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f936754f79192ac3b8e9a14e0c4964ee2926ff5d"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzMTE4Nw==", "bodyText": "That is good to know. I'll change it.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1550#discussion_r406831187", "createdAt": "2020-04-10T16:20:20Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/FileUtils.java", "diffHunk": "@@ -55,4 +62,54 @@ public static boolean doesFileExist(String fileName) {\n     }\n     return false;\n   }\n+  \n+  /**\n+   * Remove the given directory and its contents.\n+   *\n+   * @param dir the directory to be cleaned up\n+   */\n+  public static void cleanupDirectory(String dir) throws IOException {\n+    File file = new File(dir);\n+    logger.info(\"Cleaning up directory \" + dir);\n+    if (!file.exists()) {\n+      // nothing to do\n+      return;\n+    }\n+\n+    if (!file.isDirectory()) {\n+      throw new IllegalArgumentException(\"The parameter \" + dir + \" should be a directory.\");\n+    }\n+\n+    Files.walk(Paths.get(dir))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxNzEzNw=="}, "originalCommit": {"oid": "f936754f79192ac3b8e9a14e0c4964ee2926ff5d"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDgxNDY2OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/AppBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTo1MjozN1rOGD-ShA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTo1MjozN1rOGD-ShA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxOTQ2MA==", "bodyText": "Same, throw an exception if something fails in an action (not a run-time exception, something that the test must catch)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1550#discussion_r406819460", "createdAt": "2020-04-10T15:52:37Z", "author": {"login": "ddsharpe"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/AppBuilder.java", "diffHunk": "@@ -0,0 +1,145 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.actions.impl;\n+\n+import java.io.IOException;\n+\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.APP_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ARCHIVE_DIR;\n+import static oracle.weblogic.kubernetes.actions.impl.primitive.Command.defaultCommandParams;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.checkDirectory;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.cleanupDirectory;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.copyFolder;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.catchThrowable;\n+import static org.assertj.core.api.Assertions.fail;\n+\n+/**\n+ *  Implementation of actions that build an application archive file.\n+ */\n+\n+public class AppBuilder {\n+  private static final String ARCHIVE_SRC_DIR = ARCHIVE_DIR + \"/wlsdeploy/applications\";\n+  \n+  private AppParams params;\n+\n+  /**\n+   * Create an AppParams instance with the default values.\n+   * @return an AppParams instance \n+   */\n+  public static AppParams defaultAppParams() {\n+    return new AppParams().defaults();\n+  }\n+\n+  /**\n+   * Set up the AppBuilder with given parameters.\n+   * @return the AppBuilder instance \n+   */\n+  public static AppBuilder withParams(AppParams params) {\n+    return new AppBuilder().params(params);\n+  }\n+\n+  private AppBuilder params(AppParams params) {\n+    this.params = params;\n+    return this;\n+  }\n+\n+  /**\n+   * Build an application archive using a pre-populated AppParams instance.\n+   * @return true if the command succeeds \n+   */\n+  public boolean build() {\n+    // prepare the archive directory and copy over the app src\n+    Throwable throwable = catchThrowable(\n+        () -> { \n+        cleanupDirectory(ARCHIVE_DIR);\n+        checkDirectory(ARCHIVE_SRC_DIR);\n+        copyFolder(\n+            APP_DIR + \"/\" + params.srcDir(), \n+            ARCHIVE_SRC_DIR);\n+        });\n+        \n+    assertThat(throwable)\n+        .as(String.format(\n+            \"Prepare archive directory %s, and copy app sources over\",\n+            ARCHIVE_DIR))\n+        .withFailMessage(\"Failed to get the directory \" + ARCHIVE_DIR + \" ready\")\n+        .isNull();\n+\n+    // build the app archive \n+    Exception exception = null;\n+    String jarPath = String.format(\"%s.ear\", params.srcDir());\n+    try {\n+      boolean jarBuilt = buildJarArchive(jarPath, ARCHIVE_SRC_DIR);\n+      assertThat(jarBuilt)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f936754f79192ac3b8e9a14e0c4964ee2926ff5d"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTA0MTcyOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/FileUtils.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzoxNjoyN1rOGEAceA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzoyNjo0NFrOGEAssQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1NDc3Ng==", "bodyText": "um what is going on here? this is an infinite recursion?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1550#discussion_r406854776", "createdAt": "2020-04-10T17:16:27Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/FileUtils.java", "diffHunk": "@@ -55,4 +62,50 @@ public static boolean doesFileExist(String fileName) {\n     }\n     return false;\n   }\n+  \n+  /**\n+   * Remove the contents of the given directory.\n+   *\n+   * @param dir the directory to be cleaned up\n+   */\n+  public static void cleanupDirectory(String dir) throws IOException {\n+    File file = new File(dir);\n+    logger.info(\"Cleaning up directory \" + dir);\n+    if (!file.exists()) {\n+      // nothing to do\n+      return;\n+    }\n+\n+    if (!file.isDirectory()) {\n+      throw new IllegalArgumentException(\"The parameter \" + dir + \" should be a directory.\");\n+    }\n+    cleanDirectory(file);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "972a60284b9875f32faaaf7576cb3cb6bcc80c49"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1ODE2NA==", "bodyText": "hmm, I don't see recursiveness here. cleanDirectory is common-io FileUtils.cleanDirectory().  The method calls this is cleanupDirectory().", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1550#discussion_r406858164", "createdAt": "2020-04-10T17:24:48Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/FileUtils.java", "diffHunk": "@@ -55,4 +62,50 @@ public static boolean doesFileExist(String fileName) {\n     }\n     return false;\n   }\n+  \n+  /**\n+   * Remove the contents of the given directory.\n+   *\n+   * @param dir the directory to be cleaned up\n+   */\n+  public static void cleanupDirectory(String dir) throws IOException {\n+    File file = new File(dir);\n+    logger.info(\"Cleaning up directory \" + dir);\n+    if (!file.exists()) {\n+      // nothing to do\n+      return;\n+    }\n+\n+    if (!file.isDirectory()) {\n+      throw new IllegalArgumentException(\"The parameter \" + dir + \" should be a directory.\");\n+    }\n+    cleanDirectory(file);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1NDc3Ng=="}, "originalCommit": {"oid": "972a60284b9875f32faaaf7576cb3cb6bcc80c49"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1ODY3OA==", "bodyText": "And I tested the change:).", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1550#discussion_r406858678", "createdAt": "2020-04-10T17:26:04Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/FileUtils.java", "diffHunk": "@@ -55,4 +62,50 @@ public static boolean doesFileExist(String fileName) {\n     }\n     return false;\n   }\n+  \n+  /**\n+   * Remove the contents of the given directory.\n+   *\n+   * @param dir the directory to be cleaned up\n+   */\n+  public static void cleanupDirectory(String dir) throws IOException {\n+    File file = new File(dir);\n+    logger.info(\"Cleaning up directory \" + dir);\n+    if (!file.exists()) {\n+      // nothing to do\n+      return;\n+    }\n+\n+    if (!file.isDirectory()) {\n+      throw new IllegalArgumentException(\"The parameter \" + dir + \" should be a directory.\");\n+    }\n+    cleanDirectory(file);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1NDc3Ng=="}, "originalCommit": {"oid": "972a60284b9875f32faaaf7576cb3cb6bcc80c49"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1ODkyOQ==", "bodyText": "oh sorry, my bad -- those names were so close :)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1550#discussion_r406858929", "createdAt": "2020-04-10T17:26:44Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/FileUtils.java", "diffHunk": "@@ -55,4 +62,50 @@ public static boolean doesFileExist(String fileName) {\n     }\n     return false;\n   }\n+  \n+  /**\n+   * Remove the contents of the given directory.\n+   *\n+   * @param dir the directory to be cleaned up\n+   */\n+  public static void cleanupDirectory(String dir) throws IOException {\n+    File file = new File(dir);\n+    logger.info(\"Cleaning up directory \" + dir);\n+    if (!file.exists()) {\n+      // nothing to do\n+      return;\n+    }\n+\n+    if (!file.isDirectory()) {\n+      throw new IllegalArgumentException(\"The parameter \" + dir + \" should be a directory.\");\n+    }\n+    cleanDirectory(file);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1NDc3Ng=="}, "originalCommit": {"oid": "972a60284b9875f32faaaf7576cb3cb6bcc80c49"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTA3MzY5OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMDo0NToyOFrOGE0qOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMTo0Mjo0MFrOGE2ZQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcxMDI2Ng==", "bodyText": "Check the pattern... we're using dependency management.  The dependency goes here without the version number, but with test.  Then, there is a matching dependency in the dependency management section below where the version comes from a property.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1550#discussion_r407710266", "createdAt": "2020-04-13T20:45:28Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/pom.xml", "diffHunk": "@@ -92,6 +92,11 @@\n             <artifactId>assertj-core</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+          <groupId>commons-io</groupId>\n+          <artifactId>commons-io</artifactId>\n+          <version>2.6</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f46b08fa3365c7e0ac2477be80db46190d3d5157"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzczODY5MQ==", "bodyText": "fixed.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1550#discussion_r407738691", "createdAt": "2020-04-13T21:42:40Z", "author": {"login": "doxiao"}, "path": "new-integration-tests/pom.xml", "diffHunk": "@@ -92,6 +92,11 @@\n             <artifactId>assertj-core</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+          <groupId>commons-io</groupId>\n+          <artifactId>commons-io</artifactId>\n+          <version>2.6</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcxMDI2Ng=="}, "originalCommit": {"oid": "f46b08fa3365c7e0ac2477be80db46190d3d5157"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4755, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}