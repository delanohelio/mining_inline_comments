{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNDA0ODQ5", "number": 1609, "title": "Add support in diagnostic logging to archive PV", "bodyText": "Added changes to copy files from persistent volume used by the tests to a local file system.", "createdAt": "2020-04-28T23:05:01Z", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609", "merged": true, "mergeCommit": {"oid": "19a9c04d3a1da314514748ff31627bc834cfe25c"}, "closed": true, "closedAt": "2020-05-04T16:39:47Z", "author": {"login": "sankarpn"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABccLaTjgH2gAyNDEwNDA0ODQ5OjdmODdlOTcyMWZiZjdkZGQ3NmNlYzc2Y2U4ZjI2NTdlN2I4YWM1MDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABceCOqRAFqTQwNTE1ODQxNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7f87e9721fbf7ddd76cec76ce8f2657e7b8ac503", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7f87e9721fbf7ddd76cec76ce8f2657e7b8ac503", "committedDate": "2020-04-28T22:13:39Z", "message": "Added methods to copy persistent volume contents to the client machine\nby the use of a temporary pod. Creating a temporary pod to mount to same\nvolume used by the tests.\n\nAlso few more fixes in the logging of files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "005c529d3e82abc879eb92319e66eda4a174da0c", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/005c529d3e82abc879eb92319e66eda4a174da0c", "committedDate": "2020-04-28T22:29:45Z", "message": "Enable the cleanup method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e16aff484f9d1a9cf2c5bb643d78455433c8c79", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7e16aff484f9d1a9cf2c5bb643d78455433c8c79", "committedDate": "2020-04-28T23:00:22Z", "message": "Add javadocs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5811d1c715bee09827f987c5458bad1c640004fd", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5811d1c715bee09827f987c5458bad1c640004fd", "committedDate": "2020-04-28T23:15:20Z", "message": "Correct typo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMzA1MzE1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#pullrequestreview-402305315", "createdAt": "2020-04-29T00:39:42Z", "commit": {"oid": "5811d1c715bee09827f987c5458bad1c640004fd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMDozOTo0MlrOGNsH1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMDo1Mjo0NlrOGNsVFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwNzU3Mw==", "bodyText": "desired state of the ...", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r417007573", "createdAt": "2020-04-29T00:39:42Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/TestAssertions.java", "diffHunk": "@@ -187,4 +187,18 @@ public static boolean doesImageExist(String searchString) {\n   public static boolean isHelmReleaseDeployed(String releaseName, String namespace) {\n     return Helm.isReleaseDeployed(releaseName, namespace);\n   }\n+\n+  /**\n+   * Check if a persistent volume is in a given state.\n+   *\n+   * @param name name of the persistent volume\n+   * @param state state of the persistent volume to match", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5811d1c715bee09827f987c5458bad1c640004fd"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwNzY1Mg==", "bodyText": "feels like an enum would make sense for the state arg", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r417007652", "createdAt": "2020-04-29T00:40:02Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/TestAssertions.java", "diffHunk": "@@ -187,4 +187,18 @@ public static boolean doesImageExist(String searchString) {\n   public static boolean isHelmReleaseDeployed(String releaseName, String namespace) {\n     return Helm.isReleaseDeployed(releaseName, namespace);\n   }\n+\n+  /**\n+   * Check if a persistent volume is in a given state.\n+   *\n+   * @param name name of the persistent volume\n+   * @param state state of the persistent volume to match\n+   * @return true if state matches otherwise false\n+   */\n+  public static Callable<Boolean> isPersistentVolumeInState(String name, String state) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5811d1c715bee09827f987c5458bad1c640004fd"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwNzczOQ==", "bodyText": "desired state...", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r417007739", "createdAt": "2020-04-29T00:40:24Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Kubernetes.java", "diffHunk": "@@ -300,6 +303,25 @@ public static void listServices(String namespace, String labelSelectors) throws\n     }\n   }\n \n+  /**\n+   * Check if a persistent volume is in a given state.\n+   *\n+   * @param name name of the persistent volume\n+   * @param state state of the persistent volume to match", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5811d1c715bee09827f987c5458bad1c640004fd"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwOTAwMQ==", "bodyText": "not sure if this is reliable\nspec.volumeName and spec.storageClassName might be better\nand/or get the pv and check its claim name matches", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r417009001", "createdAt": "2020-04-29T00:44:57Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java", "diffHunk": "@@ -55,75 +83,142 @@ public static void collectLogs(Object itInstance, List namespaces) {\n    *\n    * @param namespace in which to query cluster for artifacts\n    * @param resultDir existing directory to write log files\n-   * @throws IOException when writing to log files fail\n-   * @throws ApiException when Kubernetes cluster query fails\n    */\n-  public static void generateLog(String namespace, Path resultDir) throws IOException, ApiException {\n+  public static void collectLogs(String namespace, String resultDir) {\n     logger.info(\"Collecting logs in namespace : {0}\", namespace);\n \n     // get service accounts\n-    writeToFile(Kubernetes.listServiceAccounts(namespace), resultDir.toString(), namespace + \"_sa.log\");\n+    try {\n+      writeToFile(Kubernetes.listServiceAccounts(namespace), resultDir, namespace + \"_sa.log\");\n+    } catch (Exception ex) {\n+      logger.warning(ex.getMessage());\n+    }\n \n     // get namespaces\n-    for (var ns: Kubernetes.listNamespacesAsObjects().getItems()) {\n-      if (namespace.equals(ns.getMetadata().getName())) {\n-        writeToFile(ns, resultDir.toString(), namespace + \"_ns.log\");\n+    try {\n+      for (var ns : Kubernetes.listNamespacesAsObjects().getItems()) {\n+        if (namespace.equals(ns.getMetadata().getName())) {\n+          writeToFile(ns, resultDir, namespace + \"_ns.log\");\n+        }\n       }\n+    } catch (Exception ex) {\n+      logger.warning(ex.getMessage());\n     }\n \n     // get pvc\n-    writeToFile(Kubernetes.listPersistentVolumeClaims(namespace), resultDir.toString(), namespace + \"_pvc.log\");\n-\n-    // get pv based on the weblogic.domainUID in pvc\n-    for (var pvc : Kubernetes.listPersistentVolumeClaims(namespace).getItems()) {\n-      if (pvc.getMetadata() != null\n-          && pvc.getMetadata().getLabels() != null\n-          && pvc.getMetadata().getLabels().get(\"weblogic.domainUID\") != null) {\n-        String label = pvc.getMetadata().getLabels().get(\"weblogic.domainUID\");\n-        writeToFile(Kubernetes.listPersistentVolumes(\n-            String.format(\"weblogic.domainUID in (%s)\", label)), resultDir.toString(), label + \"_pv.log\");\n+    try {\n+      writeToFile(Kubernetes.listPersistentVolumeClaims(namespace), resultDir, namespace + \"_pvc.log\");\n+    } catch (Exception ex) {\n+      logger.warning(ex.getMessage());\n+    }\n+\n+    // get pv configuration and pv files based on the weblogic.domainUid label in pvc\n+    try {\n+      for (var pvc : Kubernetes.listPersistentVolumeClaims(namespace).getItems()) {\n+        String label = Optional.ofNullable(pvc)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5811d1c715bee09827f987c5458bad1c640004fd"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwOTIzNg==", "bodyText": "let's improve the file names to make it easier for someone looking at them to know what they are, e.g. namespace.list.service-accounts.log  and so on..\nnamespace, get/list/whatever, type, name", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r417009236", "createdAt": "2020-04-29T00:46:01Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java", "diffHunk": "@@ -55,75 +83,142 @@ public static void collectLogs(Object itInstance, List namespaces) {\n    *\n    * @param namespace in which to query cluster for artifacts\n    * @param resultDir existing directory to write log files\n-   * @throws IOException when writing to log files fail\n-   * @throws ApiException when Kubernetes cluster query fails\n    */\n-  public static void generateLog(String namespace, Path resultDir) throws IOException, ApiException {\n+  public static void collectLogs(String namespace, String resultDir) {\n     logger.info(\"Collecting logs in namespace : {0}\", namespace);\n \n     // get service accounts\n-    writeToFile(Kubernetes.listServiceAccounts(namespace), resultDir.toString(), namespace + \"_sa.log\");\n+    try {\n+      writeToFile(Kubernetes.listServiceAccounts(namespace), resultDir, namespace + \"_sa.log\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5811d1c715bee09827f987c5458bad1c640004fd"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwOTYxNA==", "bodyText": "include namespace, name, in the log message", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r417009614", "createdAt": "2020-04-29T00:47:30Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java", "diffHunk": "@@ -55,75 +83,142 @@ public static void collectLogs(Object itInstance, List namespaces) {\n    *\n    * @param namespace in which to query cluster for artifacts\n    * @param resultDir existing directory to write log files\n-   * @throws IOException when writing to log files fail\n-   * @throws ApiException when Kubernetes cluster query fails\n    */\n-  public static void generateLog(String namespace, Path resultDir) throws IOException, ApiException {\n+  public static void collectLogs(String namespace, String resultDir) {\n     logger.info(\"Collecting logs in namespace : {0}\", namespace);\n \n     // get service accounts\n-    writeToFile(Kubernetes.listServiceAccounts(namespace), resultDir.toString(), namespace + \"_sa.log\");\n+    try {\n+      writeToFile(Kubernetes.listServiceAccounts(namespace), resultDir, namespace + \"_sa.log\");\n+    } catch (Exception ex) {\n+      logger.warning(ex.getMessage());\n+    }\n \n     // get namespaces\n-    for (var ns: Kubernetes.listNamespacesAsObjects().getItems()) {\n-      if (namespace.equals(ns.getMetadata().getName())) {\n-        writeToFile(ns, resultDir.toString(), namespace + \"_ns.log\");\n+    try {\n+      for (var ns : Kubernetes.listNamespacesAsObjects().getItems()) {\n+        if (namespace.equals(ns.getMetadata().getName())) {\n+          writeToFile(ns, resultDir, namespace + \"_ns.log\");\n+        }\n       }\n+    } catch (Exception ex) {\n+      logger.warning(ex.getMessage());\n     }\n \n     // get pvc\n-    writeToFile(Kubernetes.listPersistentVolumeClaims(namespace), resultDir.toString(), namespace + \"_pvc.log\");\n-\n-    // get pv based on the weblogic.domainUID in pvc\n-    for (var pvc : Kubernetes.listPersistentVolumeClaims(namespace).getItems()) {\n-      if (pvc.getMetadata() != null\n-          && pvc.getMetadata().getLabels() != null\n-          && pvc.getMetadata().getLabels().get(\"weblogic.domainUID\") != null) {\n-        String label = pvc.getMetadata().getLabels().get(\"weblogic.domainUID\");\n-        writeToFile(Kubernetes.listPersistentVolumes(\n-            String.format(\"weblogic.domainUID in (%s)\", label)), resultDir.toString(), label + \"_pv.log\");\n+    try {\n+      writeToFile(Kubernetes.listPersistentVolumeClaims(namespace), resultDir, namespace + \"_pvc.log\");\n+    } catch (Exception ex) {\n+      logger.warning(ex.getMessage());\n+    }\n+\n+    // get pv configuration and pv files based on the weblogic.domainUid label in pvc\n+    try {\n+      for (var pvc : Kubernetes.listPersistentVolumeClaims(namespace).getItems()) {\n+        String label = Optional.ofNullable(pvc)\n+            .map(metadata -> metadata.getMetadata())\n+            .map(labels -> labels.getLabels())\n+            .map(labels -> labels.get(\"weblogic.domainUid\")).get();\n+\n+        // get the persistent volumes based on label weblogic.domainUid\n+        V1PersistentVolumeList pvList = Kubernetes\n+            .listPersistentVolumes(String.format(\"weblogic.domainUid = %s\", label));\n+        // write the persistent volume configurations to log\n+        writeToFile(pvList, resultDir, label + \"_pv.log\");\n+\n+        // dump files stored in persistent volumes to\n+        // RESULT_DIR/PVC_NAME/PV_NAME location\n+        for (var pv : pvList.getItems()) {\n+          String claimName = pvc.getMetadata().getName();\n+          String pvName = pv.getMetadata().getName();\n+          String hostPath = pv.getSpec().getHostPath().getPath();\n+          try {\n+            copyFromPV(namespace, hostPath,\n+                Files.createDirectories(\n+                    Paths.get(resultDir, claimName, pvName)));\n+          } catch (ApiException apex) {\n+            logger.warning(apex.getResponseBody());\n+          } catch (Exception ex) {\n+            ex.printStackTrace();\n+            logger.warning(ex.getMessage());\n+          }\n+        }\n+        logger.info(\"Done archiving the persistent volumes\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5811d1c715bee09827f987c5458bad1c640004fd"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwOTg5OQ==", "bodyText": "pv's are not namespaced - explain what the namespace param is for more clearly", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r417009899", "createdAt": "2020-04-29T00:48:52Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java", "diffHunk": "@@ -137,4 +232,162 @@ private static void writeToFile(Object obj, String resultDir, String fileName) t\n     }\n   }\n \n-}\n+  /**\n+   * Copy files from persistent volume to local folder.\n+   * @param namespace name of the namespace", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5811d1c715bee09827f987c5458bad1c640004fd"}, "originalPosition": 260}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMDE2Mg==", "bodyText": "what does hostPath mean in this context?  there is a storage provider in k8s called HostPath -- are you talking about that? if not, pick a better/different name to avoid confusion", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r417010162", "createdAt": "2020-04-29T00:49:41Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java", "diffHunk": "@@ -137,4 +232,162 @@ private static void writeToFile(Object obj, String resultDir, String fileName) t\n     }\n   }\n \n-}\n+  /**\n+   * Copy files from persistent volume to local folder.\n+   * @param namespace name of the namespace\n+   * @param hostPath the persistent volume host path", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5811d1c715bee09827f987c5458bad1c640004fd"}, "originalPosition": 261}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMDIzNQ==", "bodyText": "why do you need ns? why not just use default?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r417010235", "createdAt": "2020-04-29T00:50:04Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java", "diffHunk": "@@ -137,4 +232,162 @@ private static void writeToFile(Object obj, String resultDir, String fileName) t\n     }\n   }\n \n-}\n+  /**\n+   * Copy files from persistent volume to local folder.\n+   * @param namespace name of the namespace\n+   * @param hostPath the persistent volume host path\n+   * @param destinationPath destination folder to copy the files to\n+   * @throws ApiException when pod interaction fails\n+   */\n+  private static void copyFromPV(String namespace, String hostPath, Path destinationPath) throws ApiException {\n+    V1Pod pvPod = null;\n+    try {\n+      // create a temporary pod to get access to the interested persistent volume\n+      pvPod = setupPVPod(namespace, hostPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5811d1c715bee09827f987c5458bad1c640004fd"}, "originalPosition": 269}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMDMzMQ==", "bodyText": "you are not creating a PV right?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r417010331", "createdAt": "2020-04-29T00:50:27Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java", "diffHunk": "@@ -137,4 +232,162 @@ private static void writeToFile(Object obj, String resultDir, String fileName) t\n     }\n   }\n \n-}\n+  /**\n+   * Copy files from persistent volume to local folder.\n+   * @param namespace name of the namespace\n+   * @param hostPath the persistent volume host path\n+   * @param destinationPath destination folder to copy the files to\n+   * @throws ApiException when pod interaction fails\n+   */\n+  private static void copyFromPV(String namespace, String hostPath, Path destinationPath) throws ApiException {\n+    V1Pod pvPod = null;\n+    try {\n+      // create a temporary pod to get access to the interested persistent volume\n+      pvPod = setupPVPod(namespace, hostPath);\n+      copyDirectoryFromPod(pvPod, hostPath, destinationPath);\n+    } finally {\n+      // remove the temporary pod\n+      if (pvPod != null) {\n+        cleanupPVPod(namespace);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Creates temporary pod with persistent volume claim and persistent volume using host path.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5811d1c715bee09827f987c5458bad1c640004fd"}, "originalPosition": 280}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMDM1NQ==", "bodyText": "what namespace?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r417010355", "createdAt": "2020-04-29T00:50:33Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java", "diffHunk": "@@ -137,4 +232,162 @@ private static void writeToFile(Object obj, String resultDir, String fileName) t\n     }\n   }\n \n-}\n+  /**\n+   * Copy files from persistent volume to local folder.\n+   * @param namespace name of the namespace\n+   * @param hostPath the persistent volume host path\n+   * @param destinationPath destination folder to copy the files to\n+   * @throws ApiException when pod interaction fails\n+   */\n+  private static void copyFromPV(String namespace, String hostPath, Path destinationPath) throws ApiException {\n+    V1Pod pvPod = null;\n+    try {\n+      // create a temporary pod to get access to the interested persistent volume\n+      pvPod = setupPVPod(namespace, hostPath);\n+      copyDirectoryFromPod(pvPod, hostPath, destinationPath);\n+    } finally {\n+      // remove the temporary pod\n+      if (pvPod != null) {\n+        cleanupPVPod(namespace);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Creates temporary pod with persistent volume claim and persistent volume using host path.\n+   *\n+   * @param namespace name of the namespace", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5811d1c715bee09827f987c5458bad1c640004fd"}, "originalPosition": 282}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMDM3MA==", "bodyText": "same", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r417010370", "createdAt": "2020-04-29T00:50:37Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java", "diffHunk": "@@ -137,4 +232,162 @@ private static void writeToFile(Object obj, String resultDir, String fileName) t\n     }\n   }\n \n-}\n+  /**\n+   * Copy files from persistent volume to local folder.\n+   * @param namespace name of the namespace\n+   * @param hostPath the persistent volume host path\n+   * @param destinationPath destination folder to copy the files to\n+   * @throws ApiException when pod interaction fails\n+   */\n+  private static void copyFromPV(String namespace, String hostPath, Path destinationPath) throws ApiException {\n+    V1Pod pvPod = null;\n+    try {\n+      // create a temporary pod to get access to the interested persistent volume\n+      pvPod = setupPVPod(namespace, hostPath);\n+      copyDirectoryFromPod(pvPod, hostPath, destinationPath);\n+    } finally {\n+      // remove the temporary pod\n+      if (pvPod != null) {\n+        cleanupPVPod(namespace);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Creates temporary pod with persistent volume claim and persistent volume using host path.\n+   *\n+   * @param namespace name of the namespace\n+   * @param hostPath host path from ineterested persistent volume", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5811d1c715bee09827f987c5458bad1c640004fd"}, "originalPosition": 283}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMDUxNQ==", "bodyText": "i am lost here - why are you creating a PV?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r417010515", "createdAt": "2020-04-29T00:51:09Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java", "diffHunk": "@@ -137,4 +232,162 @@ private static void writeToFile(Object obj, String resultDir, String fileName) t\n     }\n   }\n \n-}\n+  /**\n+   * Copy files from persistent volume to local folder.\n+   * @param namespace name of the namespace\n+   * @param hostPath the persistent volume host path\n+   * @param destinationPath destination folder to copy the files to\n+   * @throws ApiException when pod interaction fails\n+   */\n+  private static void copyFromPV(String namespace, String hostPath, Path destinationPath) throws ApiException {\n+    V1Pod pvPod = null;\n+    try {\n+      // create a temporary pod to get access to the interested persistent volume\n+      pvPod = setupPVPod(namespace, hostPath);\n+      copyDirectoryFromPod(pvPod, hostPath, destinationPath);\n+    } finally {\n+      // remove the temporary pod\n+      if (pvPod != null) {\n+        cleanupPVPod(namespace);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Creates temporary pod with persistent volume claim and persistent volume using host path.\n+   *\n+   * @param namespace name of the namespace\n+   * @param hostPath host path from ineterested persistent volume\n+   * @return V1Pod pod object\n+   * @throws ApiException when create pod fails\n+   */\n+  private static V1Pod setupPVPod(String namespace, String hostPath) throws ApiException {\n+\n+    ConditionFactory withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(5, SECONDS)\n+        .atMost(1, MINUTES).await();\n+\n+    // create a pvc and pv to get access to the host path of the target pv\n+    final String pvcName = \"pv-pod-pvc-\" + namespace;\n+    final String pvName = \"pv-pod-pv-\" + namespace;\n+\n+    V1PersistentVolume v1pv = new V1PersistentVolume()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5811d1c715bee09827f987c5458bad1c640004fd"}, "originalPosition": 297}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMDc1OQ==", "bodyText": "i don't understand what this method is doing. javadoc says it is copying from a pv, so the pv must already exist, right?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r417010759", "createdAt": "2020-04-29T00:51:52Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java", "diffHunk": "@@ -137,4 +232,162 @@ private static void writeToFile(Object obj, String resultDir, String fileName) t\n     }\n   }\n \n-}\n+  /**\n+   * Copy files from persistent volume to local folder.\n+   * @param namespace name of the namespace\n+   * @param hostPath the persistent volume host path\n+   * @param destinationPath destination folder to copy the files to\n+   * @throws ApiException when pod interaction fails\n+   */\n+  private static void copyFromPV(String namespace, String hostPath, Path destinationPath) throws ApiException {\n+    V1Pod pvPod = null;\n+    try {\n+      // create a temporary pod to get access to the interested persistent volume\n+      pvPod = setupPVPod(namespace, hostPath);\n+      copyDirectoryFromPod(pvPod, hostPath, destinationPath);\n+    } finally {\n+      // remove the temporary pod\n+      if (pvPod != null) {\n+        cleanupPVPod(namespace);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Creates temporary pod with persistent volume claim and persistent volume using host path.\n+   *\n+   * @param namespace name of the namespace\n+   * @param hostPath host path from ineterested persistent volume\n+   * @return V1Pod pod object\n+   * @throws ApiException when create pod fails\n+   */\n+  private static V1Pod setupPVPod(String namespace, String hostPath) throws ApiException {\n+\n+    ConditionFactory withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(5, SECONDS)\n+        .atMost(1, MINUTES).await();\n+\n+    // create a pvc and pv to get access to the host path of the target pv\n+    final String pvcName = \"pv-pod-pvc-\" + namespace;\n+    final String pvName = \"pv-pod-pv-\" + namespace;\n+\n+    V1PersistentVolume v1pv = new V1PersistentVolume()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMDUxNQ=="}, "originalCommit": {"oid": "5811d1c715bee09827f987c5458bad1c640004fd"}, "originalPosition": 297}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMDg0Mw==", "bodyText": "don't use nginx... use oraclelinux:7-slim", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r417010843", "createdAt": "2020-04-29T00:52:14Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java", "diffHunk": "@@ -137,4 +232,162 @@ private static void writeToFile(Object obj, String resultDir, String fileName) t\n     }\n   }\n \n-}\n+  /**\n+   * Copy files from persistent volume to local folder.\n+   * @param namespace name of the namespace\n+   * @param hostPath the persistent volume host path\n+   * @param destinationPath destination folder to copy the files to\n+   * @throws ApiException when pod interaction fails\n+   */\n+  private static void copyFromPV(String namespace, String hostPath, Path destinationPath) throws ApiException {\n+    V1Pod pvPod = null;\n+    try {\n+      // create a temporary pod to get access to the interested persistent volume\n+      pvPod = setupPVPod(namespace, hostPath);\n+      copyDirectoryFromPod(pvPod, hostPath, destinationPath);\n+    } finally {\n+      // remove the temporary pod\n+      if (pvPod != null) {\n+        cleanupPVPod(namespace);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Creates temporary pod with persistent volume claim and persistent volume using host path.\n+   *\n+   * @param namespace name of the namespace\n+   * @param hostPath host path from ineterested persistent volume\n+   * @return V1Pod pod object\n+   * @throws ApiException when create pod fails\n+   */\n+  private static V1Pod setupPVPod(String namespace, String hostPath) throws ApiException {\n+\n+    ConditionFactory withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(5, SECONDS)\n+        .atMost(1, MINUTES).await();\n+\n+    // create a pvc and pv to get access to the host path of the target pv\n+    final String pvcName = \"pv-pod-pvc-\" + namespace;\n+    final String pvName = \"pv-pod-pv-\" + namespace;\n+\n+    V1PersistentVolume v1pv = new V1PersistentVolume()\n+        .spec(new V1PersistentVolumeSpec()\n+            .addAccessModesItem(\"ReadWriteMany\")\n+            .storageClassName(namespace + \"-weblogic-domain-storage-class\")\n+            .putCapacityItem(\"storage\", Quantity.fromString(\"2Gi\"))\n+            .persistentVolumeReclaimPolicy(\"Recycle\")\n+            .hostPath(new V1HostPathVolumeSource().path(hostPath)))\n+        .metadata(new V1ObjectMetaBuilder()\n+            .withName(pvName)\n+            .build());\n+    TestActions.createPersistentVolume(v1pv);\n+\n+    V1PersistentVolumeClaim v1pvc = new V1PersistentVolumeClaim()\n+        .spec(new V1PersistentVolumeClaimSpec()\n+            .volumeName(pvName)\n+            .addAccessModesItem(\"ReadWriteMany\")\n+            .storageClassName(namespace + \"-weblogic-domain-storage-class\")\n+            .resources(new V1ResourceRequirements()\n+                .putRequestsItem(\"storage\", Quantity.fromString(\"2Gi\"))))\n+        .metadata(new V1ObjectMetaBuilder()\n+            .withName(pvcName)\n+            .withNamespace(namespace)\n+            .build());\n+    TestActions.createPersistentVolumeClaim(v1pvc);\n+\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pv to be bound, \"\n+                + \"(elapsed time {0} , remaining time {1}\",\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(isPersistentVolumeInState(pvName, \"Bound\"));\n+\n+    final String podName = \"pv-pod-\" + namespace;\n+    V1Pod podBody = new V1Pod()\n+        .spec(new V1PodSpec()\n+            .containers(Arrays.asList(\n+                new V1Container()\n+                    .name(\"pv-container\")\n+                    .image(\"nginx\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5811d1c715bee09827f987c5458bad1c640004fd"}, "originalPosition": 336}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMDg5MQ==", "bodyText": "what?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r417010891", "createdAt": "2020-04-29T00:52:31Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java", "diffHunk": "@@ -137,4 +232,162 @@ private static void writeToFile(Object obj, String resultDir, String fileName) t\n     }\n   }\n \n-}\n+  /**\n+   * Copy files from persistent volume to local folder.\n+   * @param namespace name of the namespace\n+   * @param hostPath the persistent volume host path\n+   * @param destinationPath destination folder to copy the files to\n+   * @throws ApiException when pod interaction fails\n+   */\n+  private static void copyFromPV(String namespace, String hostPath, Path destinationPath) throws ApiException {\n+    V1Pod pvPod = null;\n+    try {\n+      // create a temporary pod to get access to the interested persistent volume\n+      pvPod = setupPVPod(namespace, hostPath);\n+      copyDirectoryFromPod(pvPod, hostPath, destinationPath);\n+    } finally {\n+      // remove the temporary pod\n+      if (pvPod != null) {\n+        cleanupPVPod(namespace);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Creates temporary pod with persistent volume claim and persistent volume using host path.\n+   *\n+   * @param namespace name of the namespace\n+   * @param hostPath host path from ineterested persistent volume\n+   * @return V1Pod pod object\n+   * @throws ApiException when create pod fails\n+   */\n+  private static V1Pod setupPVPod(String namespace, String hostPath) throws ApiException {\n+\n+    ConditionFactory withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(5, SECONDS)\n+        .atMost(1, MINUTES).await();\n+\n+    // create a pvc and pv to get access to the host path of the target pv\n+    final String pvcName = \"pv-pod-pvc-\" + namespace;\n+    final String pvName = \"pv-pod-pv-\" + namespace;\n+\n+    V1PersistentVolume v1pv = new V1PersistentVolume()\n+        .spec(new V1PersistentVolumeSpec()\n+            .addAccessModesItem(\"ReadWriteMany\")\n+            .storageClassName(namespace + \"-weblogic-domain-storage-class\")\n+            .putCapacityItem(\"storage\", Quantity.fromString(\"2Gi\"))\n+            .persistentVolumeReclaimPolicy(\"Recycle\")\n+            .hostPath(new V1HostPathVolumeSource().path(hostPath)))\n+        .metadata(new V1ObjectMetaBuilder()\n+            .withName(pvName)\n+            .build());\n+    TestActions.createPersistentVolume(v1pv);\n+\n+    V1PersistentVolumeClaim v1pvc = new V1PersistentVolumeClaim()\n+        .spec(new V1PersistentVolumeClaimSpec()\n+            .volumeName(pvName)\n+            .addAccessModesItem(\"ReadWriteMany\")\n+            .storageClassName(namespace + \"-weblogic-domain-storage-class\")\n+            .resources(new V1ResourceRequirements()\n+                .putRequestsItem(\"storage\", Quantity.fromString(\"2Gi\"))))\n+        .metadata(new V1ObjectMetaBuilder()\n+            .withName(pvcName)\n+            .withNamespace(namespace)\n+            .build());\n+    TestActions.createPersistentVolumeClaim(v1pvc);\n+\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pv to be bound, \"\n+                + \"(elapsed time {0} , remaining time {1}\",\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(isPersistentVolumeInState(pvName, \"Bound\"));\n+\n+    final String podName = \"pv-pod-\" + namespace;\n+    V1Pod podBody = new V1Pod()\n+        .spec(new V1PodSpec()\n+            .containers(Arrays.asList(\n+                new V1Container()\n+                    .name(\"pv-container\")\n+                    .image(\"nginx\")\n+                    .imagePullPolicy(\"IfNotPresent\")\n+                    .volumeMounts(Arrays.asList(\n+                        new V1VolumeMount()\n+                            .name(pvName)\n+                            .mountPath(\"/shared\")))))\n+            .volumes(Arrays.asList(\n+                new V1Volume()\n+                    .name(pvName)\n+                    .persistentVolumeClaim(\n+                        new V1PersistentVolumeClaimVolumeSource()\n+                            .claimName(pvcName)))))\n+        .metadata(new V1ObjectMeta().name(podName))\n+        .apiVersion(\"v1\")\n+        .kind(\"Pod\");\n+    V1Pod pvPod = Kubernetes.createPod(namespace, podBody);\n+\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for {0} to be ready in namespace {1}, \"\n+                + \"(elapsed time {2} , remaining time {3}\",\n+                podName,\n+                namespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(podReady(podName, null, namespace));\n+    return pvPod;\n+  }\n+\n+  /**\n+   * Delete the temporary pv pod.\n+   * @param namespace name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5811d1c715bee09827f987c5458bad1c640004fd"}, "originalPosition": 367}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMDk2Ng==", "bodyText": "fix wording", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r417010966", "createdAt": "2020-04-29T00:52:46Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java", "diffHunk": "@@ -137,4 +232,162 @@ private static void writeToFile(Object obj, String resultDir, String fileName) t\n     }\n   }\n \n-}\n+  /**\n+   * Copy files from persistent volume to local folder.\n+   * @param namespace name of the namespace\n+   * @param hostPath the persistent volume host path\n+   * @param destinationPath destination folder to copy the files to\n+   * @throws ApiException when pod interaction fails\n+   */\n+  private static void copyFromPV(String namespace, String hostPath, Path destinationPath) throws ApiException {\n+    V1Pod pvPod = null;\n+    try {\n+      // create a temporary pod to get access to the interested persistent volume\n+      pvPod = setupPVPod(namespace, hostPath);\n+      copyDirectoryFromPod(pvPod, hostPath, destinationPath);\n+    } finally {\n+      // remove the temporary pod\n+      if (pvPod != null) {\n+        cleanupPVPod(namespace);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Creates temporary pod with persistent volume claim and persistent volume using host path.\n+   *\n+   * @param namespace name of the namespace\n+   * @param hostPath host path from ineterested persistent volume\n+   * @return V1Pod pod object\n+   * @throws ApiException when create pod fails\n+   */\n+  private static V1Pod setupPVPod(String namespace, String hostPath) throws ApiException {\n+\n+    ConditionFactory withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(5, SECONDS)\n+        .atMost(1, MINUTES).await();\n+\n+    // create a pvc and pv to get access to the host path of the target pv\n+    final String pvcName = \"pv-pod-pvc-\" + namespace;\n+    final String pvName = \"pv-pod-pv-\" + namespace;\n+\n+    V1PersistentVolume v1pv = new V1PersistentVolume()\n+        .spec(new V1PersistentVolumeSpec()\n+            .addAccessModesItem(\"ReadWriteMany\")\n+            .storageClassName(namespace + \"-weblogic-domain-storage-class\")\n+            .putCapacityItem(\"storage\", Quantity.fromString(\"2Gi\"))\n+            .persistentVolumeReclaimPolicy(\"Recycle\")\n+            .hostPath(new V1HostPathVolumeSource().path(hostPath)))\n+        .metadata(new V1ObjectMetaBuilder()\n+            .withName(pvName)\n+            .build());\n+    TestActions.createPersistentVolume(v1pv);\n+\n+    V1PersistentVolumeClaim v1pvc = new V1PersistentVolumeClaim()\n+        .spec(new V1PersistentVolumeClaimSpec()\n+            .volumeName(pvName)\n+            .addAccessModesItem(\"ReadWriteMany\")\n+            .storageClassName(namespace + \"-weblogic-domain-storage-class\")\n+            .resources(new V1ResourceRequirements()\n+                .putRequestsItem(\"storage\", Quantity.fromString(\"2Gi\"))))\n+        .metadata(new V1ObjectMetaBuilder()\n+            .withName(pvcName)\n+            .withNamespace(namespace)\n+            .build());\n+    TestActions.createPersistentVolumeClaim(v1pvc);\n+\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pv to be bound, \"\n+                + \"(elapsed time {0} , remaining time {1}\",\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(isPersistentVolumeInState(pvName, \"Bound\"));\n+\n+    final String podName = \"pv-pod-\" + namespace;\n+    V1Pod podBody = new V1Pod()\n+        .spec(new V1PodSpec()\n+            .containers(Arrays.asList(\n+                new V1Container()\n+                    .name(\"pv-container\")\n+                    .image(\"nginx\")\n+                    .imagePullPolicy(\"IfNotPresent\")\n+                    .volumeMounts(Arrays.asList(\n+                        new V1VolumeMount()\n+                            .name(pvName)\n+                            .mountPath(\"/shared\")))))\n+            .volumes(Arrays.asList(\n+                new V1Volume()\n+                    .name(pvName)\n+                    .persistentVolumeClaim(\n+                        new V1PersistentVolumeClaimVolumeSource()\n+                            .claimName(pvcName)))))\n+        .metadata(new V1ObjectMeta().name(podName))\n+        .apiVersion(\"v1\")\n+        .kind(\"Pod\");\n+    V1Pod pvPod = Kubernetes.createPod(namespace, podBody);\n+\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for {0} to be ready in namespace {1}, \"\n+                + \"(elapsed time {2} , remaining time {3}\",\n+                podName,\n+                namespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(podReady(podName, null, namespace));\n+    return pvPod;\n+  }\n+\n+  /**\n+   * Delete the temporary pv pod.\n+   * @param namespace name\n+   * @throws ApiException when pod deletion fails\n+   */\n+  private static void cleanupPVPod(String namespace) throws ApiException {\n+    Kubernetes.deletePod(\"pv-pod-\" + namespace, namespace);\n+    Kubernetes.deletePvc(\"pv-pod-pvc-\" + namespace, namespace);\n+    Kubernetes.deletePv(\"pv-pod-pv-\" + namespace);\n+  }\n+\n+  // there is currently a bug in the copy API which leaves i/o stream left open", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5811d1c715bee09827f987c5458bad1c640004fd"}, "originalPosition": 376}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "837254b9d20390bef8b5b0a71f4e49c91f04702c", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/837254b9d20390bef8b5b0a71f4e49c91f04702c", "committedDate": "2020-04-29T15:24:12Z", "message": "Addressing review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7c177d1c8b1b7e26d13c21751612793d2a440c9", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a7c177d1c8b1b7e26d13c21751612793d2a440c9", "committedDate": "2020-04-30T01:03:27Z", "message": "Addressing the review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fe9120d2a8d83200f9ef249319bb4885b26258c", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3fe9120d2a8d83200f9ef249319bb4885b26258c", "committedDate": "2020-04-30T01:06:12Z", "message": "Removed the persistent volume related assertions since it is no loner\nneeded"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "219bb78e3c0ebd5e8755ae8c0601b2173fe58ec5", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/219bb78e3c0ebd5e8755ae8c0601b2173fe58ec5", "committedDate": "2020-04-30T03:54:35Z", "message": "Change the pod container image to use oraclelinux instead of nginx\nand wait for temp pod to be deleted"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1080ae2db8a04dd3c4bef5ce9c795c06c5b7e06", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d1080ae2db8a04dd3c4bef5ce9c795c06c5b7e06", "committedDate": "2020-04-30T04:01:59Z", "message": "javadoc fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "383dbe1674776ef486ad2cc6ad76494df761e77b", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/383dbe1674776ef486ad2cc6ad76494df761e77b", "committedDate": "2020-04-30T16:54:41Z", "message": "fic formatting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MDA1MDc2", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#pullrequestreview-404005076", "createdAt": "2020-05-01T03:30:59Z", "commit": {"oid": "383dbe1674776ef486ad2cc6ad76494df761e77b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "455940531f491342c7f57b41a3cd6a917b046323", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/455940531f491342c7f57b41a3cd6a917b046323", "committedDate": "2020-05-01T20:00:01Z", "message": "Merge branch 'develop' into archive-pv"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7a7769a59b170a958036f0988b749d90907a186", "author": {"user": {"login": "sankarpn", "name": "Sankar Periyathambi Neelakandan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f7a7769a59b170a958036f0988b749d90907a186", "committedDate": "2020-05-04T16:19:27Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into archive-pv"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1MTU4NDE3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#pullrequestreview-405158417", "createdAt": "2020-05-04T16:39:38Z", "commit": {"oid": "f7a7769a59b170a958036f0988b749d90907a186"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4725, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}