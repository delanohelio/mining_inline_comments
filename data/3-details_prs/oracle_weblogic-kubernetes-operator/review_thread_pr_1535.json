{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MzcxNjEx", "number": 1535, "reviewThreads": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMjowNTozMlrODum6XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDowNDowOFrODvSOng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTk4NjIxOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMjowNTozMlrOGArENA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNTo0NDoxMlrOGBeDbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM1ODc3Mg==", "bodyText": "-> \"Created a new namespace called ...\"\nDoesn't the logger facade in the operator support String formats like \"blah blah {0}\"?  Shouldn't we use the logging facade in operator rather than java.util.logging directly?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r403358772", "createdAt": "2020-04-03T22:05:32Z", "author": {"login": "ddsharpe"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -65,69 +64,89 @@ public void testInstallingOperator() {\n     // the kubernetes deployment.  this will complete quickly, and will either be\n     // successful or not.\n \n-    // get a new unique namespace\n-    final String namespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+    // get a new unique opNamespace\n+    final String opNamespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", opNamespace));\n+\n+    final String domainNamespace1 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace1));\n+\n+    final String domainNamespace2 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n         \"Failed to create unique namespace due to ApiException\");\n-    logger.info(String.format(\"Got a new namespace called %s\", namespace));\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3MzI4Ng==", "bodyText": "this is the logger injected by LoggedTest isn't it?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r403373286", "createdAt": "2020-04-03T22:52:00Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -65,69 +64,89 @@ public void testInstallingOperator() {\n     // the kubernetes deployment.  this will complete quickly, and will either be\n     // successful or not.\n \n-    // get a new unique namespace\n-    final String namespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+    // get a new unique opNamespace\n+    final String opNamespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", opNamespace));\n+\n+    final String domainNamespace1 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace1));\n+\n+    final String domainNamespace2 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n         \"Failed to create unique namespace due to ApiException\");\n-    logger.info(String.format(\"Got a new namespace called %s\", namespace));\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace2));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM1ODc3Mg=="}, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5NjEyOQ==", "bodyText": "oh it's both - it is injected, but it as a JUL", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r403396129", "createdAt": "2020-04-04T00:33:14Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -65,69 +64,89 @@ public void testInstallingOperator() {\n     // the kubernetes deployment.  this will complete quickly, and will either be\n     // successful or not.\n \n-    // get a new unique namespace\n-    final String namespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+    // get a new unique opNamespace\n+    final String opNamespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", opNamespace));\n+\n+    final String domainNamespace1 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace1));\n+\n+    final String domainNamespace2 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n         \"Failed to create unique namespace due to ApiException\");\n-    logger.info(String.format(\"Got a new namespace called %s\", namespace));\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace2));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM1ODc3Mg=="}, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5NjI4MA==", "bodyText": "@ddsharpe we should fix that in LoggedTest", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r403396280", "createdAt": "2020-04-04T00:33:58Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -65,69 +64,89 @@ public void testInstallingOperator() {\n     // the kubernetes deployment.  this will complete quickly, and will either be\n     // successful or not.\n \n-    // get a new unique namespace\n-    final String namespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+    // get a new unique opNamespace\n+    final String opNamespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", opNamespace));\n+\n+    final String domainNamespace1 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace1));\n+\n+    final String domainNamespace2 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n         \"Failed to create unique namespace due to ApiException\");\n-    logger.info(String.format(\"Got a new namespace called %s\", namespace));\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace2));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM1ODc3Mg=="}, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYzOTYxMQ==", "bodyText": "@ddsharpe will change the message. For logger, it should be fixed in LoggedTest as Mark said.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r403639611", "createdAt": "2020-04-05T02:32:51Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -65,69 +64,89 @@ public void testInstallingOperator() {\n     // the kubernetes deployment.  this will complete quickly, and will either be\n     // successful or not.\n \n-    // get a new unique namespace\n-    final String namespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+    // get a new unique opNamespace\n+    final String opNamespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", opNamespace));\n+\n+    final String domainNamespace1 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace1));\n+\n+    final String domainNamespace2 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n         \"Failed to create unique namespace due to ApiException\");\n-    logger.info(String.format(\"Got a new namespace called %s\", namespace));\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace2));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM1ODc3Mg=="}, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE5NDE1OA==", "bodyText": "changed the message", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r404194158", "createdAt": "2020-04-06T15:44:12Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -65,69 +64,89 @@ public void testInstallingOperator() {\n     // the kubernetes deployment.  this will complete quickly, and will either be\n     // successful or not.\n \n-    // get a new unique namespace\n-    final String namespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+    // get a new unique opNamespace\n+    final String opNamespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", opNamespace));\n+\n+    final String domainNamespace1 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace1));\n+\n+    final String domainNamespace2 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n         \"Failed to create unique namespace due to ApiException\");\n-    logger.info(String.format(\"Got a new namespace called %s\", namespace));\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace2));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM1ODc3Mg=="}, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTk4OTA2OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMjowNjo1N1rOGArF5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNTo0NDoyMlrOGBeD5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM1OTIwNw==", "bodyText": "Every assertion should have a short message that would help someone debug the issue should it occur.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r403359207", "createdAt": "2020-04-03T22:06:57Z", "author": {"login": "ddsharpe"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -65,69 +64,89 @@ public void testInstallingOperator() {\n     // the kubernetes deployment.  this will complete quickly, and will either be\n     // successful or not.\n \n-    // get a new unique namespace\n-    final String namespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+    // get a new unique opNamespace\n+    final String opNamespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", opNamespace));\n+\n+    final String domainNamespace1 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace1));\n+\n+    final String domainNamespace2 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n         \"Failed to create unique namespace due to ApiException\");\n-    logger.info(String.format(\"Got a new namespace called %s\", namespace));\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace2));\n \n-    // Create a service account for the unique namespace\n-    final String serviceAccountName = namespace + \"-sa\";\n-    assertDoesNotThrow(\n-        () -> TestActions.createServiceAccount(new V1ServiceAccount()\n-            .metadata(new V1ObjectMeta().namespace(namespace).name(serviceAccountName))));\n+    // Create a service account for the unique opNamespace\n+    final String serviceAccountName = opNamespace + \"-sa\";\n+    assertDoesNotThrow(() -> TestActions.createServiceAccount(new V1ServiceAccount()\n+        .metadata(new V1ObjectMeta().namespace(opNamespace).name(serviceAccountName))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMDc2OA==", "bodyText": "here are some better options:\nimport static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatCode;\nimport static org.assertj.core.api.Assertions.catchThrowable;\n\n  ...\n\n  @Test\n  @DisplayName(\"Test something else\")\n  public void testThereWasNoException() {\n    // this test will fail because it does throw an exception!\n\n    assertThatCode(() ->\n        createSecret(\"bob\", // name\n            \"weblogic\", // username\n            \"welcome1\", // password\n            \"default\")) //namespace\n        .as(\"Test that createSecret does not throw an exception\")\n        .withFailMessage(\"OMG! createSecret() threw an unexpected exception\")\n        .doesNotThrowAnyException();\n  }\n\n  @Test\n  @DisplayName(\"Test catching an exception\")\n  public void testCatchingAnException() {\n    // this test will pass because it does throw an exception of\n    // the expected type, and with the expected message\n\n    // when i call createSecret()\n    Throwable thrown = catchThrowable(() ->\n        createSecret(\"bob\", // name\n            \"weblogic\", // username\n            \"welcome1\", // password\n            \"default\"));\n\n    // then\n    assertThat(thrown)\n        .as(\"Test that createSecret does not throw an APIException\")\n        .withFailMessage(\"OMG! createSecret() threw an APIException\")\n        // you can check what kind of exception it is\n        .isInstanceOf(ApiException.class)\n        // and you can also check the message contains some string...\n        .hasMessageContaining(\"Failed to connect\");\n  }\n\n\nalso import static ...TestActions so you don't need to say TestActions.whatever()", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r403400768", "createdAt": "2020-04-04T00:59:12Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -65,69 +64,89 @@ public void testInstallingOperator() {\n     // the kubernetes deployment.  this will complete quickly, and will either be\n     // successful or not.\n \n-    // get a new unique namespace\n-    final String namespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+    // get a new unique opNamespace\n+    final String opNamespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", opNamespace));\n+\n+    final String domainNamespace1 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace1));\n+\n+    final String domainNamespace2 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n         \"Failed to create unique namespace due to ApiException\");\n-    logger.info(String.format(\"Got a new namespace called %s\", namespace));\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace2));\n \n-    // Create a service account for the unique namespace\n-    final String serviceAccountName = namespace + \"-sa\";\n-    assertDoesNotThrow(\n-        () -> TestActions.createServiceAccount(new V1ServiceAccount()\n-            .metadata(new V1ObjectMeta().namespace(namespace).name(serviceAccountName))));\n+    // Create a service account for the unique opNamespace\n+    final String serviceAccountName = opNamespace + \"-sa\";\n+    assertDoesNotThrow(() -> TestActions.createServiceAccount(new V1ServiceAccount()\n+        .metadata(new V1ObjectMeta().namespace(opNamespace).name(serviceAccountName))));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM1OTIwNw=="}, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYzOTczNA==", "bodyText": "will fix the assertions to have a message. Thanks @markxnelson for the assertions test in the other PR.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r403639734", "createdAt": "2020-04-05T02:34:23Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -65,69 +64,89 @@ public void testInstallingOperator() {\n     // the kubernetes deployment.  this will complete quickly, and will either be\n     // successful or not.\n \n-    // get a new unique namespace\n-    final String namespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+    // get a new unique opNamespace\n+    final String opNamespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", opNamespace));\n+\n+    final String domainNamespace1 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace1));\n+\n+    final String domainNamespace2 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n         \"Failed to create unique namespace due to ApiException\");\n-    logger.info(String.format(\"Got a new namespace called %s\", namespace));\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace2));\n \n-    // Create a service account for the unique namespace\n-    final String serviceAccountName = namespace + \"-sa\";\n-    assertDoesNotThrow(\n-        () -> TestActions.createServiceAccount(new V1ServiceAccount()\n-            .metadata(new V1ObjectMeta().namespace(namespace).name(serviceAccountName))));\n+    // Create a service account for the unique opNamespace\n+    final String serviceAccountName = opNamespace + \"-sa\";\n+    assertDoesNotThrow(() -> TestActions.createServiceAccount(new V1ServiceAccount()\n+        .metadata(new V1ObjectMeta().namespace(opNamespace).name(serviceAccountName))));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM1OTIwNw=="}, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE5NDI3OQ==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r404194279", "createdAt": "2020-04-06T15:44:22Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -65,69 +64,89 @@ public void testInstallingOperator() {\n     // the kubernetes deployment.  this will complete quickly, and will either be\n     // successful or not.\n \n-    // get a new unique namespace\n-    final String namespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+    // get a new unique opNamespace\n+    final String opNamespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", opNamespace));\n+\n+    final String domainNamespace1 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace1));\n+\n+    final String domainNamespace2 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n         \"Failed to create unique namespace due to ApiException\");\n-    logger.info(String.format(\"Got a new namespace called %s\", namespace));\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace2));\n \n-    // Create a service account for the unique namespace\n-    final String serviceAccountName = namespace + \"-sa\";\n-    assertDoesNotThrow(\n-        () -> TestActions.createServiceAccount(new V1ServiceAccount()\n-            .metadata(new V1ObjectMeta().namespace(namespace).name(serviceAccountName))));\n+    // Create a service account for the unique opNamespace\n+    final String serviceAccountName = opNamespace + \"-sa\";\n+    assertDoesNotThrow(() -> TestActions.createServiceAccount(new V1ServiceAccount()\n+        .metadata(new V1ObjectMeta().namespace(opNamespace).name(serviceAccountName))));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM1OTIwNw=="}, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjAwMjA0OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Helm.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMjoxMjozM1rOGArNQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjowODoyNlrOGBfImA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2MTA5MA==", "bodyText": "These combinations are easier to read and debug if they are separate. Like:\nassertNotNull(params.getRepoUrl(), \"repo URL was not provided\")\nor\nassertThat(params.getRepoUrl())\n.as(\"repo URL was not provided\")\n. isNotNull()\n.isNotEmpty();", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r403361090", "createdAt": "2020-04-03T22:12:33Z", "author": {"login": "ddsharpe"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Helm.java", "diffHunk": "@@ -5,86 +5,175 @@\n \n import java.util.HashMap;\n \n-import oracle.weblogic.kubernetes.extensions.LoggedTest;\n-\n-public class Helm implements LoggedTest {\n-\n-  private String chartName;\n-  private String releaseName;\n-  private String namespace;\n-  private String repoUrl;\n-  private HashMap<String, Object> values;\n-\n-  public Helm chartName(String chartName) {\n-    this.chartName = chartName;\n-    return this;\n-  }\n-\n-  public Helm releaseName(String releaseName) {\n-    this.releaseName = releaseName;\n-    return this;\n-  }\n-\n-  public Helm namespace(String namespace) {\n-    this.namespace = namespace;\n-    return this;\n-  }\n-\n-  public Helm repoUrl(String repoUrl) {\n-    this.repoUrl = repoUrl;\n-    return this;\n-  }\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class Helm {\n+\n+  /**\n+   * install helm chart\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean install(HelmParams params) {\n+    String namespace = params.getNamespace();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure releaseName is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getRepoUrl() != null && params.getChartName() == null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY0MDU3Ng==", "bodyText": "@ddsharpe here I need to check chartName is also provided only when repoUrl is provided. Otherwise chartName is not required.\nWhen repoUrl is provided, here its adding a chart repository, for that both repoUrl  and chartName are required. hence the combination.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r403640576", "createdAt": "2020-04-05T02:46:47Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Helm.java", "diffHunk": "@@ -5,86 +5,175 @@\n \n import java.util.HashMap;\n \n-import oracle.weblogic.kubernetes.extensions.LoggedTest;\n-\n-public class Helm implements LoggedTest {\n-\n-  private String chartName;\n-  private String releaseName;\n-  private String namespace;\n-  private String repoUrl;\n-  private HashMap<String, Object> values;\n-\n-  public Helm chartName(String chartName) {\n-    this.chartName = chartName;\n-    return this;\n-  }\n-\n-  public Helm releaseName(String releaseName) {\n-    this.releaseName = releaseName;\n-    return this;\n-  }\n-\n-  public Helm namespace(String namespace) {\n-    this.namespace = namespace;\n-    return this;\n-  }\n-\n-  public Helm repoUrl(String repoUrl) {\n-    this.repoUrl = repoUrl;\n-    return this;\n-  }\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class Helm {\n+\n+  /**\n+   * install helm chart\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean install(HelmParams params) {\n+    String namespace = params.getNamespace();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure releaseName is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getRepoUrl() != null && params.getChartName() == null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2MTA5MA=="}, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY0MjU0NQ==", "bodyText": "checking for more readable ways to do this", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r403642545", "createdAt": "2020-04-05T03:16:26Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Helm.java", "diffHunk": "@@ -5,86 +5,175 @@\n \n import java.util.HashMap;\n \n-import oracle.weblogic.kubernetes.extensions.LoggedTest;\n-\n-public class Helm implements LoggedTest {\n-\n-  private String chartName;\n-  private String releaseName;\n-  private String namespace;\n-  private String repoUrl;\n-  private HashMap<String, Object> values;\n-\n-  public Helm chartName(String chartName) {\n-    this.chartName = chartName;\n-    return this;\n-  }\n-\n-  public Helm releaseName(String releaseName) {\n-    this.releaseName = releaseName;\n-    return this;\n-  }\n-\n-  public Helm namespace(String namespace) {\n-    this.namespace = namespace;\n-    return this;\n-  }\n-\n-  public Helm repoUrl(String repoUrl) {\n-    this.repoUrl = repoUrl;\n-    return this;\n-  }\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class Helm {\n+\n+  /**\n+   * install helm chart\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean install(HelmParams params) {\n+    String namespace = params.getNamespace();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure releaseName is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getRepoUrl() != null && params.getChartName() == null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2MTA5MA=="}, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIxMTg2NA==", "bodyText": "@markxnelson @rjeberhard any suggestions please ^^ ?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r404211864", "createdAt": "2020-04-06T16:08:26Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Helm.java", "diffHunk": "@@ -5,86 +5,175 @@\n \n import java.util.HashMap;\n \n-import oracle.weblogic.kubernetes.extensions.LoggedTest;\n-\n-public class Helm implements LoggedTest {\n-\n-  private String chartName;\n-  private String releaseName;\n-  private String namespace;\n-  private String repoUrl;\n-  private HashMap<String, Object> values;\n-\n-  public Helm chartName(String chartName) {\n-    this.chartName = chartName;\n-    return this;\n-  }\n-\n-  public Helm releaseName(String releaseName) {\n-    this.releaseName = releaseName;\n-    return this;\n-  }\n-\n-  public Helm namespace(String namespace) {\n-    this.namespace = namespace;\n-    return this;\n-  }\n-\n-  public Helm repoUrl(String repoUrl) {\n-    this.repoUrl = repoUrl;\n-    return this;\n-  }\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class Helm {\n+\n+  /**\n+   * install helm chart\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean install(HelmParams params) {\n+    String namespace = params.getNamespace();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure releaseName is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getRepoUrl() != null && params.getChartName() == null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2MTA5MA=="}, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjAwMjkxOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Helm.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMjoxMjo1MVrOGArNrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwMjo1MDo1OVrOGA8SGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2MTE5OQ==", "bodyText": "same as previous (combo check)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r403361199", "createdAt": "2020-04-03T22:12:51Z", "author": {"login": "ddsharpe"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Helm.java", "diffHunk": "@@ -5,86 +5,175 @@\n \n import java.util.HashMap;\n \n-import oracle.weblogic.kubernetes.extensions.LoggedTest;\n-\n-public class Helm implements LoggedTest {\n-\n-  private String chartName;\n-  private String releaseName;\n-  private String namespace;\n-  private String repoUrl;\n-  private HashMap<String, Object> values;\n-\n-  public Helm chartName(String chartName) {\n-    this.chartName = chartName;\n-    return this;\n-  }\n-\n-  public Helm releaseName(String releaseName) {\n-    this.releaseName = releaseName;\n-    return this;\n-  }\n-\n-  public Helm namespace(String namespace) {\n-    this.namespace = namespace;\n-    return this;\n-  }\n-\n-  public Helm repoUrl(String repoUrl) {\n-    this.repoUrl = repoUrl;\n-    return this;\n-  }\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class Helm {\n+\n+  /**\n+   * install helm chart\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean install(HelmParams params) {\n+    String namespace = params.getNamespace();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure releaseName is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getRepoUrl() != null && params.getChartName() == null)\n+        .as(\"make sure chart name is not empty or null when repo url is provided\")\n+        .isFalse();\n+\n+    assertThat(params.getRepoUrl() == null && params.getChartDir() == null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY0MDg1Ng==", "bodyText": "helm install command uses repo url or chart dir, at least one of these must be provided. Both are not required, hence the combination.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r403640856", "createdAt": "2020-04-05T02:50:59Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Helm.java", "diffHunk": "@@ -5,86 +5,175 @@\n \n import java.util.HashMap;\n \n-import oracle.weblogic.kubernetes.extensions.LoggedTest;\n-\n-public class Helm implements LoggedTest {\n-\n-  private String chartName;\n-  private String releaseName;\n-  private String namespace;\n-  private String repoUrl;\n-  private HashMap<String, Object> values;\n-\n-  public Helm chartName(String chartName) {\n-    this.chartName = chartName;\n-    return this;\n-  }\n-\n-  public Helm releaseName(String releaseName) {\n-    this.releaseName = releaseName;\n-    return this;\n-  }\n-\n-  public Helm namespace(String namespace) {\n-    this.namespace = namespace;\n-    return this;\n-  }\n-\n-  public Helm repoUrl(String repoUrl) {\n-    this.repoUrl = repoUrl;\n-    return this;\n-  }\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class Helm {\n+\n+  /**\n+   * install helm chart\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean install(HelmParams params) {\n+    String namespace = params.getNamespace();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure releaseName is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getRepoUrl() != null && params.getChartName() == null)\n+        .as(\"make sure chart name is not empty or null when repo url is provided\")\n+        .isFalse();\n+\n+    assertThat(params.getRepoUrl() == null && params.getChartDir() == null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2MTE5OQ=="}, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjAwMzEwOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Helm.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMjoxMjo1OVrOGArN0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMjoxMjo1OVrOGArN0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2MTIzMg==", "bodyText": "combo check", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r403361232", "createdAt": "2020-04-03T22:12:59Z", "author": {"login": "ddsharpe"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Helm.java", "diffHunk": "@@ -5,86 +5,175 @@\n \n import java.util.HashMap;\n \n-import oracle.weblogic.kubernetes.extensions.LoggedTest;\n-\n-public class Helm implements LoggedTest {\n-\n-  private String chartName;\n-  private String releaseName;\n-  private String namespace;\n-  private String repoUrl;\n-  private HashMap<String, Object> values;\n-\n-  public Helm chartName(String chartName) {\n-    this.chartName = chartName;\n-    return this;\n-  }\n-\n-  public Helm releaseName(String releaseName) {\n-    this.releaseName = releaseName;\n-    return this;\n-  }\n-\n-  public Helm namespace(String namespace) {\n-    this.namespace = namespace;\n-    return this;\n-  }\n-\n-  public Helm repoUrl(String repoUrl) {\n-    this.repoUrl = repoUrl;\n-    return this;\n-  }\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class Helm {\n+\n+  /**\n+   * install helm chart\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean install(HelmParams params) {\n+    String namespace = params.getNamespace();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure releaseName is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getRepoUrl() != null && params.getChartName() == null)\n+        .as(\"make sure chart name is not empty or null when repo url is provided\")\n+        .isFalse();\n+\n+    assertThat(params.getRepoUrl() == null && params.getChartDir() == null)\n+        .as(\"make sure repo url, chart name and chart dir are not empty or null. \"\n+            + \"repo url, chart name or chart dir must be provided\")\n+        .isFalse();\n+\n+    //chart reference to be used in helm install\n+    String chartRef = params.getChartDir();\n+\n+    // use repo url as chart reference if provided\n+    if (params.getChartName() != null && params.getRepoUrl() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjAxNTc0OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Helm.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMjoxODozN1rOGArVHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjowMDowNlrOGBexoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2MzEwMA==", "bodyText": "Its not a big deal, but this seems harder to read than necessary.  Why not use String.format?\nString upgradeCmd = \"helm upgrade {0} {1} --namespace {3}\";\nappendValues( params.getValues(),\nString.format(upgradeCmd, params.getReleaseName(), chartDir, params.getNamespace());", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r403363100", "createdAt": "2020-04-03T22:18:37Z", "author": {"login": "ddsharpe"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Helm.java", "diffHunk": "@@ -5,86 +5,175 @@\n \n import java.util.HashMap;\n \n-import oracle.weblogic.kubernetes.extensions.LoggedTest;\n-\n-public class Helm implements LoggedTest {\n-\n-  private String chartName;\n-  private String releaseName;\n-  private String namespace;\n-  private String repoUrl;\n-  private HashMap<String, Object> values;\n-\n-  public Helm chartName(String chartName) {\n-    this.chartName = chartName;\n-    return this;\n-  }\n-\n-  public Helm releaseName(String releaseName) {\n-    this.releaseName = releaseName;\n-    return this;\n-  }\n-\n-  public Helm namespace(String namespace) {\n-    this.namespace = namespace;\n-    return this;\n-  }\n-\n-  public Helm repoUrl(String repoUrl) {\n-    this.repoUrl = repoUrl;\n-    return this;\n-  }\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class Helm {\n+\n+  /**\n+   * install helm chart\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean install(HelmParams params) {\n+    String namespace = params.getNamespace();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure releaseName is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getRepoUrl() != null && params.getChartName() == null)\n+        .as(\"make sure chart name is not empty or null when repo url is provided\")\n+        .isFalse();\n+\n+    assertThat(params.getRepoUrl() == null && params.getChartDir() == null)\n+        .as(\"make sure repo url, chart name and chart dir are not empty or null. \"\n+            + \"repo url, chart name or chart dir must be provided\")\n+        .isFalse();\n+\n+    //chart reference to be used in helm install\n+    String chartRef = params.getChartDir();\n+\n+    // use repo url as chart reference if provided\n+    if (params.getChartName() != null && params.getRepoUrl() != null) {\n+      Helm.addRepo(params.getChartName(), params.getRepoUrl());\n+      chartRef = params.getRepoUrl();\n+    }\n+\n+    logger.info(String.format(\"Installing application in namespace %s using chart %s\",\n+        namespace, chartRef));\n+\n+    // build helm install command\n+    StringBuffer installCmd = new StringBuffer(\"helm install \")\n+        .append(params.getReleaseName()).append(\" \").append(chartRef)\n+        .append(\" --namespace \").append(params.getNamespace());\n \n-  public Helm values(HashMap<String, Object> values) {\n-    this.values = values;\n-    return this;\n-  }\n+    // add all the parameters\n+    appendValues(params.getValues(), installCmd);\n \n-  public String getChartName() {\n-    return chartName;\n-  }\n+    installCmd.append(\" && helm list\");\n+    // run the command\n+    return exec(installCmd.toString());\n \n-  public String getReleaseName() {\n-    return releaseName;\n   }\n \n-  public String getNamespace() {\n-    return namespace;\n+  /**\n+   * upgrade a helm release\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean upgrade(HelmParams params) {\n+    String namespace = params.getNamespace();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure releaseName is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getChartDir())\n+        .as(\"make sure chart dir is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    //chart reference to be used in helm upgrade\n+    String chartDir = params.getChartDir();\n+\n+    logger.info(String.format(\"Upgrade application in namespace %s using chart %s\",\n+        namespace, chartDir));\n+\n+    // build helm upgrade command\n+    StringBuffer upgradeCmd = new StringBuffer(\"helm upgrade \")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwNDc1Mw==", "bodyText": "yeah i think String.format() would be a lot cleaner to read", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r403404753", "createdAt": "2020-04-04T01:25:59Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Helm.java", "diffHunk": "@@ -5,86 +5,175 @@\n \n import java.util.HashMap;\n \n-import oracle.weblogic.kubernetes.extensions.LoggedTest;\n-\n-public class Helm implements LoggedTest {\n-\n-  private String chartName;\n-  private String releaseName;\n-  private String namespace;\n-  private String repoUrl;\n-  private HashMap<String, Object> values;\n-\n-  public Helm chartName(String chartName) {\n-    this.chartName = chartName;\n-    return this;\n-  }\n-\n-  public Helm releaseName(String releaseName) {\n-    this.releaseName = releaseName;\n-    return this;\n-  }\n-\n-  public Helm namespace(String namespace) {\n-    this.namespace = namespace;\n-    return this;\n-  }\n-\n-  public Helm repoUrl(String repoUrl) {\n-    this.repoUrl = repoUrl;\n-    return this;\n-  }\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class Helm {\n+\n+  /**\n+   * install helm chart\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean install(HelmParams params) {\n+    String namespace = params.getNamespace();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure releaseName is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getRepoUrl() != null && params.getChartName() == null)\n+        .as(\"make sure chart name is not empty or null when repo url is provided\")\n+        .isFalse();\n+\n+    assertThat(params.getRepoUrl() == null && params.getChartDir() == null)\n+        .as(\"make sure repo url, chart name and chart dir are not empty or null. \"\n+            + \"repo url, chart name or chart dir must be provided\")\n+        .isFalse();\n+\n+    //chart reference to be used in helm install\n+    String chartRef = params.getChartDir();\n+\n+    // use repo url as chart reference if provided\n+    if (params.getChartName() != null && params.getRepoUrl() != null) {\n+      Helm.addRepo(params.getChartName(), params.getRepoUrl());\n+      chartRef = params.getRepoUrl();\n+    }\n+\n+    logger.info(String.format(\"Installing application in namespace %s using chart %s\",\n+        namespace, chartRef));\n+\n+    // build helm install command\n+    StringBuffer installCmd = new StringBuffer(\"helm install \")\n+        .append(params.getReleaseName()).append(\" \").append(chartRef)\n+        .append(\" --namespace \").append(params.getNamespace());\n \n-  public Helm values(HashMap<String, Object> values) {\n-    this.values = values;\n-    return this;\n-  }\n+    // add all the parameters\n+    appendValues(params.getValues(), installCmd);\n \n-  public String getChartName() {\n-    return chartName;\n-  }\n+    installCmd.append(\" && helm list\");\n+    // run the command\n+    return exec(installCmd.toString());\n \n-  public String getReleaseName() {\n-    return releaseName;\n   }\n \n-  public String getNamespace() {\n-    return namespace;\n+  /**\n+   * upgrade a helm release\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean upgrade(HelmParams params) {\n+    String namespace = params.getNamespace();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure releaseName is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getChartDir())\n+        .as(\"make sure chart dir is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    //chart reference to be used in helm upgrade\n+    String chartDir = params.getChartDir();\n+\n+    logger.info(String.format(\"Upgrade application in namespace %s using chart %s\",\n+        namespace, chartDir));\n+\n+    // build helm upgrade command\n+    StringBuffer upgradeCmd = new StringBuffer(\"helm upgrade \")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2MzEwMA=="}, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY0MTY2NQ==", "bodyText": "will modify to use String.format()", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r403641665", "createdAt": "2020-04-05T03:03:28Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Helm.java", "diffHunk": "@@ -5,86 +5,175 @@\n \n import java.util.HashMap;\n \n-import oracle.weblogic.kubernetes.extensions.LoggedTest;\n-\n-public class Helm implements LoggedTest {\n-\n-  private String chartName;\n-  private String releaseName;\n-  private String namespace;\n-  private String repoUrl;\n-  private HashMap<String, Object> values;\n-\n-  public Helm chartName(String chartName) {\n-    this.chartName = chartName;\n-    return this;\n-  }\n-\n-  public Helm releaseName(String releaseName) {\n-    this.releaseName = releaseName;\n-    return this;\n-  }\n-\n-  public Helm namespace(String namespace) {\n-    this.namespace = namespace;\n-    return this;\n-  }\n-\n-  public Helm repoUrl(String repoUrl) {\n-    this.repoUrl = repoUrl;\n-    return this;\n-  }\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class Helm {\n+\n+  /**\n+   * install helm chart\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean install(HelmParams params) {\n+    String namespace = params.getNamespace();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure releaseName is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getRepoUrl() != null && params.getChartName() == null)\n+        .as(\"make sure chart name is not empty or null when repo url is provided\")\n+        .isFalse();\n+\n+    assertThat(params.getRepoUrl() == null && params.getChartDir() == null)\n+        .as(\"make sure repo url, chart name and chart dir are not empty or null. \"\n+            + \"repo url, chart name or chart dir must be provided\")\n+        .isFalse();\n+\n+    //chart reference to be used in helm install\n+    String chartRef = params.getChartDir();\n+\n+    // use repo url as chart reference if provided\n+    if (params.getChartName() != null && params.getRepoUrl() != null) {\n+      Helm.addRepo(params.getChartName(), params.getRepoUrl());\n+      chartRef = params.getRepoUrl();\n+    }\n+\n+    logger.info(String.format(\"Installing application in namespace %s using chart %s\",\n+        namespace, chartRef));\n+\n+    // build helm install command\n+    StringBuffer installCmd = new StringBuffer(\"helm install \")\n+        .append(params.getReleaseName()).append(\" \").append(chartRef)\n+        .append(\" --namespace \").append(params.getNamespace());\n \n-  public Helm values(HashMap<String, Object> values) {\n-    this.values = values;\n-    return this;\n-  }\n+    // add all the parameters\n+    appendValues(params.getValues(), installCmd);\n \n-  public String getChartName() {\n-    return chartName;\n-  }\n+    installCmd.append(\" && helm list\");\n+    // run the command\n+    return exec(installCmd.toString());\n \n-  public String getReleaseName() {\n-    return releaseName;\n   }\n \n-  public String getNamespace() {\n-    return namespace;\n+  /**\n+   * upgrade a helm release\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean upgrade(HelmParams params) {\n+    String namespace = params.getNamespace();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure releaseName is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getChartDir())\n+        .as(\"make sure chart dir is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    //chart reference to be used in helm upgrade\n+    String chartDir = params.getChartDir();\n+\n+    logger.info(String.format(\"Upgrade application in namespace %s using chart %s\",\n+        namespace, chartDir));\n+\n+    // build helm upgrade command\n+    StringBuffer upgradeCmd = new StringBuffer(\"helm upgrade \")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2MzEwMA=="}, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIwNTk4NA==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r404205984", "createdAt": "2020-04-06T16:00:06Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Helm.java", "diffHunk": "@@ -5,86 +5,175 @@\n \n import java.util.HashMap;\n \n-import oracle.weblogic.kubernetes.extensions.LoggedTest;\n-\n-public class Helm implements LoggedTest {\n-\n-  private String chartName;\n-  private String releaseName;\n-  private String namespace;\n-  private String repoUrl;\n-  private HashMap<String, Object> values;\n-\n-  public Helm chartName(String chartName) {\n-    this.chartName = chartName;\n-    return this;\n-  }\n-\n-  public Helm releaseName(String releaseName) {\n-    this.releaseName = releaseName;\n-    return this;\n-  }\n-\n-  public Helm namespace(String namespace) {\n-    this.namespace = namespace;\n-    return this;\n-  }\n-\n-  public Helm repoUrl(String repoUrl) {\n-    this.repoUrl = repoUrl;\n-    return this;\n-  }\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class Helm {\n+\n+  /**\n+   * install helm chart\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean install(HelmParams params) {\n+    String namespace = params.getNamespace();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure releaseName is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getRepoUrl() != null && params.getChartName() == null)\n+        .as(\"make sure chart name is not empty or null when repo url is provided\")\n+        .isFalse();\n+\n+    assertThat(params.getRepoUrl() == null && params.getChartDir() == null)\n+        .as(\"make sure repo url, chart name and chart dir are not empty or null. \"\n+            + \"repo url, chart name or chart dir must be provided\")\n+        .isFalse();\n+\n+    //chart reference to be used in helm install\n+    String chartRef = params.getChartDir();\n+\n+    // use repo url as chart reference if provided\n+    if (params.getChartName() != null && params.getRepoUrl() != null) {\n+      Helm.addRepo(params.getChartName(), params.getRepoUrl());\n+      chartRef = params.getRepoUrl();\n+    }\n+\n+    logger.info(String.format(\"Installing application in namespace %s using chart %s\",\n+        namespace, chartRef));\n+\n+    // build helm install command\n+    StringBuffer installCmd = new StringBuffer(\"helm install \")\n+        .append(params.getReleaseName()).append(\" \").append(chartRef)\n+        .append(\" --namespace \").append(params.getNamespace());\n \n-  public Helm values(HashMap<String, Object> values) {\n-    this.values = values;\n-    return this;\n-  }\n+    // add all the parameters\n+    appendValues(params.getValues(), installCmd);\n \n-  public String getChartName() {\n-    return chartName;\n-  }\n+    installCmd.append(\" && helm list\");\n+    // run the command\n+    return exec(installCmd.toString());\n \n-  public String getReleaseName() {\n-    return releaseName;\n   }\n \n-  public String getNamespace() {\n-    return namespace;\n+  /**\n+   * upgrade a helm release\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean upgrade(HelmParams params) {\n+    String namespace = params.getNamespace();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure releaseName is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getChartDir())\n+        .as(\"make sure chart dir is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    //chart reference to be used in helm upgrade\n+    String chartDir = params.getChartDir();\n+\n+    logger.info(String.format(\"Upgrade application in namespace %s using chart %s\",\n+        namespace, chartDir));\n+\n+    // build helm upgrade command\n+    StringBuffer upgradeCmd = new StringBuffer(\"helm upgrade \")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2MzEwMA=="}, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjA4NzkzOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMjo1Mzo0MFrOGAr-ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjowMDozNlrOGBezLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3MzcyNg==", "bodyText": "@rjeberhard @ddsharpe interested in your opinion on this --- seems like assertions in the finally is somehow wrong -- if these are important, should they not be part of the test itself?   not sure about assertions in a finally block.....", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r403373726", "createdAt": "2020-04-03T22:53:40Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -65,69 +64,89 @@ public void testInstallingOperator() {\n     // the kubernetes deployment.  this will complete quickly, and will either be\n     // successful or not.\n \n-    // get a new unique namespace\n-    final String namespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+    // get a new unique opNamespace\n+    final String opNamespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", opNamespace));\n+\n+    final String domainNamespace1 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace1));\n+\n+    final String domainNamespace2 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n         \"Failed to create unique namespace due to ApiException\");\n-    logger.info(String.format(\"Got a new namespace called %s\", namespace));\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace2));\n \n-    // Create a service account for the unique namespace\n-    final String serviceAccountName = namespace + \"-sa\";\n-    assertDoesNotThrow(\n-        () -> TestActions.createServiceAccount(new V1ServiceAccount()\n-            .metadata(new V1ObjectMeta().namespace(namespace).name(serviceAccountName))));\n+    // Create a service account for the unique opNamespace\n+    final String serviceAccountName = opNamespace + \"-sa\";\n+    assertDoesNotThrow(() -> TestActions.createServiceAccount(new V1ServiceAccount()\n+        .metadata(new V1ObjectMeta().namespace(opNamespace).name(serviceAccountName))));\n     logger.info(\"Created service account: \" + serviceAccountName);\n \n     OperatorParams opParams =\n         new OperatorParams().releaseName(\"weblogic-operator\")\n-            .namespace(namespace)\n-            .image(\"weblogic-kubernetes-operator:test_itsimpleoperator\")\n-            .domainNamespaces(Arrays.asList(\"domainns1\", \"domainns2\"))\n-            .serviceAccount(\"opns1-sa\");\n+            .namespace(opNamespace)\n+            .chartDir(\"../kubernetes/charts/weblogic-operator\")\n+            .image(\"phx.ocir.io/weblogick8s/weblogic-kubernetes-operator:develop\")\n+            .domainNamespaces(Arrays.asList(domainNamespace1, domainNamespace2))\n+            .serviceAccount(serviceAccountName);\n \n-    //ToDO: use Junit 5 assertions\n     try {\n-      installOperator(opParams);\n-    } catch (ApiException e) {\n-      e.printStackTrace();\n-      fail(\"Failed to install Operator due to exception\" + e.getMessage());\n-    }\n+      assertThat(installOperator(opParams)).as(\"Operator installation failed\").isTrue();\n+      logger.info(String.format(\"Operator installed in namespace %s\", opNamespace));\n+\n+      // we can use a standard JUnit assertion to check on the result\n+      // assertEquals(true, success, \"Operator successfully installed in opNamespace \" + opNamespace);\n+\n+      // this is an example of waiting for an async operation to complete.\n+      // after the previous step was completed, kubernetes will try to pull the image,\n+      // start the pod, check the readiness/health probes, etc.  this will take some\n+      // period of time and either the operator will come to a running state, or it\n+      // will not.\n+      // in this example, we first wait 30 seconds, since it is unlikely this operation\n+      // will complete in less than 30 seconds, then we check if the operator is running.\n+      with().pollDelay(30, SECONDS)\n+          // we check again every 10 seconds.\n+          .and().with().pollInterval(10, SECONDS)\n+          // this listener lets us report some status with each poll\n+          .conditionEvaluationListener(\n+              condition -> logger.info(()\n+                  -> String.format(\"Waiting for operator to be running (elapsed time %dms, remaining time %dms)\",\n+                  condition.getElapsedTimeInMS(),\n+                  condition.getRemainingTimeInMS())))\n+          // and here we can set the maximum time we are prepared to wait\n+          .await().atMost(5, MINUTES)\n+          // operatorIsRunning() is one of our custom, reusable assertions\n+          .until(operatorIsRunning(opNamespace));\n+    } finally {\n+\n+      // uninstall operator release\n+      assertThat(TestActions.uninstallOperator(opParams))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEzOTQ4Mg==", "bodyText": "Hmmm... I agree that that does seem incorrect.  If the point is to test uninstallation then this should be a test; otherwise, I'd have clean-up in an extension or \"after\" lifecycle method.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r404139482", "createdAt": "2020-04-06T14:33:16Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -65,69 +64,89 @@ public void testInstallingOperator() {\n     // the kubernetes deployment.  this will complete quickly, and will either be\n     // successful or not.\n \n-    // get a new unique namespace\n-    final String namespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+    // get a new unique opNamespace\n+    final String opNamespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", opNamespace));\n+\n+    final String domainNamespace1 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace1));\n+\n+    final String domainNamespace2 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n         \"Failed to create unique namespace due to ApiException\");\n-    logger.info(String.format(\"Got a new namespace called %s\", namespace));\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace2));\n \n-    // Create a service account for the unique namespace\n-    final String serviceAccountName = namespace + \"-sa\";\n-    assertDoesNotThrow(\n-        () -> TestActions.createServiceAccount(new V1ServiceAccount()\n-            .metadata(new V1ObjectMeta().namespace(namespace).name(serviceAccountName))));\n+    // Create a service account for the unique opNamespace\n+    final String serviceAccountName = opNamespace + \"-sa\";\n+    assertDoesNotThrow(() -> TestActions.createServiceAccount(new V1ServiceAccount()\n+        .metadata(new V1ObjectMeta().namespace(opNamespace).name(serviceAccountName))));\n     logger.info(\"Created service account: \" + serviceAccountName);\n \n     OperatorParams opParams =\n         new OperatorParams().releaseName(\"weblogic-operator\")\n-            .namespace(namespace)\n-            .image(\"weblogic-kubernetes-operator:test_itsimpleoperator\")\n-            .domainNamespaces(Arrays.asList(\"domainns1\", \"domainns2\"))\n-            .serviceAccount(\"opns1-sa\");\n+            .namespace(opNamespace)\n+            .chartDir(\"../kubernetes/charts/weblogic-operator\")\n+            .image(\"phx.ocir.io/weblogick8s/weblogic-kubernetes-operator:develop\")\n+            .domainNamespaces(Arrays.asList(domainNamespace1, domainNamespace2))\n+            .serviceAccount(serviceAccountName);\n \n-    //ToDO: use Junit 5 assertions\n     try {\n-      installOperator(opParams);\n-    } catch (ApiException e) {\n-      e.printStackTrace();\n-      fail(\"Failed to install Operator due to exception\" + e.getMessage());\n-    }\n+      assertThat(installOperator(opParams)).as(\"Operator installation failed\").isTrue();\n+      logger.info(String.format(\"Operator installed in namespace %s\", opNamespace));\n+\n+      // we can use a standard JUnit assertion to check on the result\n+      // assertEquals(true, success, \"Operator successfully installed in opNamespace \" + opNamespace);\n+\n+      // this is an example of waiting for an async operation to complete.\n+      // after the previous step was completed, kubernetes will try to pull the image,\n+      // start the pod, check the readiness/health probes, etc.  this will take some\n+      // period of time and either the operator will come to a running state, or it\n+      // will not.\n+      // in this example, we first wait 30 seconds, since it is unlikely this operation\n+      // will complete in less than 30 seconds, then we check if the operator is running.\n+      with().pollDelay(30, SECONDS)\n+          // we check again every 10 seconds.\n+          .and().with().pollInterval(10, SECONDS)\n+          // this listener lets us report some status with each poll\n+          .conditionEvaluationListener(\n+              condition -> logger.info(()\n+                  -> String.format(\"Waiting for operator to be running (elapsed time %dms, remaining time %dms)\",\n+                  condition.getElapsedTimeInMS(),\n+                  condition.getRemainingTimeInMS())))\n+          // and here we can set the maximum time we are prepared to wait\n+          .await().atMost(5, MINUTES)\n+          // operatorIsRunning() is one of our custom, reusable assertions\n+          .until(operatorIsRunning(opNamespace));\n+    } finally {\n+\n+      // uninstall operator release\n+      assertThat(TestActions.uninstallOperator(opParams))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3MzcyNg=="}, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIwNjM4Mw==", "bodyText": "moved to after lifecycle method.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r404206383", "createdAt": "2020-04-06T16:00:36Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -65,69 +64,89 @@ public void testInstallingOperator() {\n     // the kubernetes deployment.  this will complete quickly, and will either be\n     // successful or not.\n \n-    // get a new unique namespace\n-    final String namespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+    // get a new unique opNamespace\n+    final String opNamespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", opNamespace));\n+\n+    final String domainNamespace1 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace1));\n+\n+    final String domainNamespace2 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n         \"Failed to create unique namespace due to ApiException\");\n-    logger.info(String.format(\"Got a new namespace called %s\", namespace));\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace2));\n \n-    // Create a service account for the unique namespace\n-    final String serviceAccountName = namespace + \"-sa\";\n-    assertDoesNotThrow(\n-        () -> TestActions.createServiceAccount(new V1ServiceAccount()\n-            .metadata(new V1ObjectMeta().namespace(namespace).name(serviceAccountName))));\n+    // Create a service account for the unique opNamespace\n+    final String serviceAccountName = opNamespace + \"-sa\";\n+    assertDoesNotThrow(() -> TestActions.createServiceAccount(new V1ServiceAccount()\n+        .metadata(new V1ObjectMeta().namespace(opNamespace).name(serviceAccountName))));\n     logger.info(\"Created service account: \" + serviceAccountName);\n \n     OperatorParams opParams =\n         new OperatorParams().releaseName(\"weblogic-operator\")\n-            .namespace(namespace)\n-            .image(\"weblogic-kubernetes-operator:test_itsimpleoperator\")\n-            .domainNamespaces(Arrays.asList(\"domainns1\", \"domainns2\"))\n-            .serviceAccount(\"opns1-sa\");\n+            .namespace(opNamespace)\n+            .chartDir(\"../kubernetes/charts/weblogic-operator\")\n+            .image(\"phx.ocir.io/weblogick8s/weblogic-kubernetes-operator:develop\")\n+            .domainNamespaces(Arrays.asList(domainNamespace1, domainNamespace2))\n+            .serviceAccount(serviceAccountName);\n \n-    //ToDO: use Junit 5 assertions\n     try {\n-      installOperator(opParams);\n-    } catch (ApiException e) {\n-      e.printStackTrace();\n-      fail(\"Failed to install Operator due to exception\" + e.getMessage());\n-    }\n+      assertThat(installOperator(opParams)).as(\"Operator installation failed\").isTrue();\n+      logger.info(String.format(\"Operator installed in namespace %s\", opNamespace));\n+\n+      // we can use a standard JUnit assertion to check on the result\n+      // assertEquals(true, success, \"Operator successfully installed in opNamespace \" + opNamespace);\n+\n+      // this is an example of waiting for an async operation to complete.\n+      // after the previous step was completed, kubernetes will try to pull the image,\n+      // start the pod, check the readiness/health probes, etc.  this will take some\n+      // period of time and either the operator will come to a running state, or it\n+      // will not.\n+      // in this example, we first wait 30 seconds, since it is unlikely this operation\n+      // will complete in less than 30 seconds, then we check if the operator is running.\n+      with().pollDelay(30, SECONDS)\n+          // we check again every 10 seconds.\n+          .and().with().pollInterval(10, SECONDS)\n+          // this listener lets us report some status with each poll\n+          .conditionEvaluationListener(\n+              condition -> logger.info(()\n+                  -> String.format(\"Waiting for operator to be running (elapsed time %dms, remaining time %dms)\",\n+                  condition.getElapsedTimeInMS(),\n+                  condition.getRemainingTimeInMS())))\n+          // and here we can set the maximum time we are prepared to wait\n+          .await().atMost(5, MINUTES)\n+          // operatorIsRunning() is one of our custom, reusable assertions\n+          .until(operatorIsRunning(opNamespace));\n+    } finally {\n+\n+      // uninstall operator release\n+      assertThat(TestActions.uninstallOperator(opParams))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3MzcyNg=="}, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjA5MTQzOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Operator.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMjo1NToxNVrOGAsAlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjowMjoyNlrOGBe4Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3NDIyOQ==", "bodyText": "i need to take a much closer look at this, my gut reaction is that inheritance here is not the best solution", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r403374229", "createdAt": "2020-04-03T22:55:15Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Operator.java", "diffHunk": "@@ -3,69 +3,10 @@\n \n package oracle.weblogic.kubernetes.actions.impl;\n \n-import io.kubernetes.client.openapi.ApiException;\n import oracle.weblogic.kubernetes.actions.impl.primitive.Helm;\n-import oracle.weblogic.kubernetes.extensions.LoggedTest;\n-\n-import static org.assertj.core.api.Assertions.assertThat;\n-\n-public class Operator implements LoggedTest {\n-\n-  /**\n-   * The URL of the Operator's Helm Repository.\n-   */\n-  //Question - is this URL correct?\n-  private static String OPERATOR_HELM_REPO_URL = \"https://oracle.github.io/weblogic-kubernetes-operator/charts\";\n-\n-  /**\n-   * The name of the Operator's Helm Chart (in the repository).\n-   */\n-  private static String OPERATOR_CHART_NAME = \"weblogic-operator/weblogic-operator\";\n-\n-  /**\n-   * Install WebLogic Kubernetes Operator.\n-   *\n-   * @param params operator parameters for helm values\n-   * @return true if the operator is successfully installed, false otherwise.\n-   * @throws ApiException - if Kubernetes client API call fails\n-   */\n-  public static boolean install(OperatorParams params) throws ApiException {\n-\n-    String namespace = params.getNamespace();\n-    String serviceAccount = params.getServiceAccount();\n-\n-    // assertions for required parameters\n-    assertThat(namespace)\n-        .as(\"make sure namespace is not empty or null\")\n-        .isNotNull()\n-        .isNotEmpty();\n-\n-    assertThat(params.getReleaseName())\n-        .as(\"make sure releaseName is not empty or null\")\n-        .isNotNull()\n-        .isNotEmpty();\n-\n-    boolean success = false;\n-    if (new Helm().chartName(OPERATOR_CHART_NAME).repoUrl(OPERATOR_HELM_REPO_URL).addRepo()) {\n-      logger.info(String.format(\"Installing Operator in namespace %s\", namespace));\n-      success = new Helm().chartName(OPERATOR_CHART_NAME)\n-                        .releaseName(params.getReleaseName())\n-                        .namespace(namespace)\n-                        .values(params.getValues())\n-                        .install();\n-    }\n-    return success;\n-  }\n-\n-  public static boolean upgrade(OperatorParams params) {\n-    return true;\n-  }\n \n+public class Operator extends Helm {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwNDA1Nw==", "bodyText": "seems like an operator is much more than just a set of helm params\nmaybe we could implement HelmRelease\nor have a variable that is a HelmParams\ni think an action impl should never extend a primitive\nthey should use primitives, not \"be\" them... imo", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r403404057", "createdAt": "2020-04-04T01:20:07Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Operator.java", "diffHunk": "@@ -3,69 +3,10 @@\n \n package oracle.weblogic.kubernetes.actions.impl;\n \n-import io.kubernetes.client.openapi.ApiException;\n import oracle.weblogic.kubernetes.actions.impl.primitive.Helm;\n-import oracle.weblogic.kubernetes.extensions.LoggedTest;\n-\n-import static org.assertj.core.api.Assertions.assertThat;\n-\n-public class Operator implements LoggedTest {\n-\n-  /**\n-   * The URL of the Operator's Helm Repository.\n-   */\n-  //Question - is this URL correct?\n-  private static String OPERATOR_HELM_REPO_URL = \"https://oracle.github.io/weblogic-kubernetes-operator/charts\";\n-\n-  /**\n-   * The name of the Operator's Helm Chart (in the repository).\n-   */\n-  private static String OPERATOR_CHART_NAME = \"weblogic-operator/weblogic-operator\";\n-\n-  /**\n-   * Install WebLogic Kubernetes Operator.\n-   *\n-   * @param params operator parameters for helm values\n-   * @return true if the operator is successfully installed, false otherwise.\n-   * @throws ApiException - if Kubernetes client API call fails\n-   */\n-  public static boolean install(OperatorParams params) throws ApiException {\n-\n-    String namespace = params.getNamespace();\n-    String serviceAccount = params.getServiceAccount();\n-\n-    // assertions for required parameters\n-    assertThat(namespace)\n-        .as(\"make sure namespace is not empty or null\")\n-        .isNotNull()\n-        .isNotEmpty();\n-\n-    assertThat(params.getReleaseName())\n-        .as(\"make sure releaseName is not empty or null\")\n-        .isNotNull()\n-        .isNotEmpty();\n-\n-    boolean success = false;\n-    if (new Helm().chartName(OPERATOR_CHART_NAME).repoUrl(OPERATOR_HELM_REPO_URL).addRepo()) {\n-      logger.info(String.format(\"Installing Operator in namespace %s\", namespace));\n-      success = new Helm().chartName(OPERATOR_CHART_NAME)\n-                        .releaseName(params.getReleaseName())\n-                        .namespace(namespace)\n-                        .values(params.getValues())\n-                        .install();\n-    }\n-    return success;\n-  }\n-\n-  public static boolean upgrade(OperatorParams params) {\n-    return true;\n-  }\n \n+public class Operator extends Helm {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3NDIyOQ=="}, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE0NDUzMg==", "bodyText": "Agree.  HelmParams or the other choice seems more appropriate.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r404144532", "createdAt": "2020-04-06T14:39:52Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Operator.java", "diffHunk": "@@ -3,69 +3,10 @@\n \n package oracle.weblogic.kubernetes.actions.impl;\n \n-import io.kubernetes.client.openapi.ApiException;\n import oracle.weblogic.kubernetes.actions.impl.primitive.Helm;\n-import oracle.weblogic.kubernetes.extensions.LoggedTest;\n-\n-import static org.assertj.core.api.Assertions.assertThat;\n-\n-public class Operator implements LoggedTest {\n-\n-  /**\n-   * The URL of the Operator's Helm Repository.\n-   */\n-  //Question - is this URL correct?\n-  private static String OPERATOR_HELM_REPO_URL = \"https://oracle.github.io/weblogic-kubernetes-operator/charts\";\n-\n-  /**\n-   * The name of the Operator's Helm Chart (in the repository).\n-   */\n-  private static String OPERATOR_CHART_NAME = \"weblogic-operator/weblogic-operator\";\n-\n-  /**\n-   * Install WebLogic Kubernetes Operator.\n-   *\n-   * @param params operator parameters for helm values\n-   * @return true if the operator is successfully installed, false otherwise.\n-   * @throws ApiException - if Kubernetes client API call fails\n-   */\n-  public static boolean install(OperatorParams params) throws ApiException {\n-\n-    String namespace = params.getNamespace();\n-    String serviceAccount = params.getServiceAccount();\n-\n-    // assertions for required parameters\n-    assertThat(namespace)\n-        .as(\"make sure namespace is not empty or null\")\n-        .isNotNull()\n-        .isNotEmpty();\n-\n-    assertThat(params.getReleaseName())\n-        .as(\"make sure releaseName is not empty or null\")\n-        .isNotNull()\n-        .isNotEmpty();\n-\n-    boolean success = false;\n-    if (new Helm().chartName(OPERATOR_CHART_NAME).repoUrl(OPERATOR_HELM_REPO_URL).addRepo()) {\n-      logger.info(String.format(\"Installing Operator in namespace %s\", namespace));\n-      success = new Helm().chartName(OPERATOR_CHART_NAME)\n-                        .releaseName(params.getReleaseName())\n-                        .namespace(namespace)\n-                        .values(params.getValues())\n-                        .install();\n-    }\n-    return success;\n-  }\n-\n-  public static boolean upgrade(OperatorParams params) {\n-    return true;\n-  }\n \n+public class Operator extends Helm {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3NDIyOQ=="}, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIwNzYzNQ==", "bodyText": "Agree. Removed inheritance and modified impl classes to call Helm instead.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r404207635", "createdAt": "2020-04-06T16:02:26Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Operator.java", "diffHunk": "@@ -3,69 +3,10 @@\n \n package oracle.weblogic.kubernetes.actions.impl;\n \n-import io.kubernetes.client.openapi.ApiException;\n import oracle.weblogic.kubernetes.actions.impl.primitive.Helm;\n-import oracle.weblogic.kubernetes.extensions.LoggedTest;\n-\n-import static org.assertj.core.api.Assertions.assertThat;\n-\n-public class Operator implements LoggedTest {\n-\n-  /**\n-   * The URL of the Operator's Helm Repository.\n-   */\n-  //Question - is this URL correct?\n-  private static String OPERATOR_HELM_REPO_URL = \"https://oracle.github.io/weblogic-kubernetes-operator/charts\";\n-\n-  /**\n-   * The name of the Operator's Helm Chart (in the repository).\n-   */\n-  private static String OPERATOR_CHART_NAME = \"weblogic-operator/weblogic-operator\";\n-\n-  /**\n-   * Install WebLogic Kubernetes Operator.\n-   *\n-   * @param params operator parameters for helm values\n-   * @return true if the operator is successfully installed, false otherwise.\n-   * @throws ApiException - if Kubernetes client API call fails\n-   */\n-  public static boolean install(OperatorParams params) throws ApiException {\n-\n-    String namespace = params.getNamespace();\n-    String serviceAccount = params.getServiceAccount();\n-\n-    // assertions for required parameters\n-    assertThat(namespace)\n-        .as(\"make sure namespace is not empty or null\")\n-        .isNotNull()\n-        .isNotEmpty();\n-\n-    assertThat(params.getReleaseName())\n-        .as(\"make sure releaseName is not empty or null\")\n-        .isNotNull()\n-        .isNotEmpty();\n-\n-    boolean success = false;\n-    if (new Helm().chartName(OPERATOR_CHART_NAME).repoUrl(OPERATOR_HELM_REPO_URL).addRepo()) {\n-      logger.info(String.format(\"Installing Operator in namespace %s\", namespace));\n-      success = new Helm().chartName(OPERATOR_CHART_NAME)\n-                        .releaseName(params.getReleaseName())\n-                        .namespace(namespace)\n-                        .values(params.getValues())\n-                        .install();\n-    }\n-    return success;\n-  }\n-\n-  public static boolean upgrade(OperatorParams params) {\n-    return true;\n-  }\n \n+public class Operator extends Helm {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3NDIyOQ=="}, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjA5MTczOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/OperatorParams.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMjo1NToyNlrOGAsAxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjowMjo1NFrOGBe5jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3NDI3OQ==", "bodyText": "same here", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r403374279", "createdAt": "2020-04-03T22:55:26Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/OperatorParams.java", "diffHunk": "@@ -7,9 +7,11 @@\n import java.util.List;\n import java.util.Objects;\n \n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+\n // All parameters needed to install Operator from test\n \n-public class OperatorParams {\n+public class OperatorParams extends HelmParams {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIwODAxNQ==", "bodyText": "Removed inheritance", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r404208015", "createdAt": "2020-04-06T16:02:54Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/OperatorParams.java", "diffHunk": "@@ -7,9 +7,11 @@\n import java.util.List;\n import java.util.Objects;\n \n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+\n // All parameters needed to install Operator from test\n \n-public class OperatorParams {\n+public class OperatorParams extends HelmParams {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3NDI3OQ=="}, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjIyMjE1OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMDoxNjowOVrOGAtJ1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjowMzowM1rOGBe56w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5Mjk4Mg==", "bodyText": "the as() describes what the test is, it is not the failure message", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r403392982", "createdAt": "2020-04-04T00:16:09Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -65,69 +64,89 @@ public void testInstallingOperator() {\n     // the kubernetes deployment.  this will complete quickly, and will either be\n     // successful or not.\n \n-    // get a new unique namespace\n-    final String namespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+    // get a new unique opNamespace\n+    final String opNamespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", opNamespace));\n+\n+    final String domainNamespace1 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace1));\n+\n+    final String domainNamespace2 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n         \"Failed to create unique namespace due to ApiException\");\n-    logger.info(String.format(\"Got a new namespace called %s\", namespace));\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace2));\n \n-    // Create a service account for the unique namespace\n-    final String serviceAccountName = namespace + \"-sa\";\n-    assertDoesNotThrow(\n-        () -> TestActions.createServiceAccount(new V1ServiceAccount()\n-            .metadata(new V1ObjectMeta().namespace(namespace).name(serviceAccountName))));\n+    // Create a service account for the unique opNamespace\n+    final String serviceAccountName = opNamespace + \"-sa\";\n+    assertDoesNotThrow(() -> TestActions.createServiceAccount(new V1ServiceAccount()\n+        .metadata(new V1ObjectMeta().namespace(opNamespace).name(serviceAccountName))));\n     logger.info(\"Created service account: \" + serviceAccountName);\n \n     OperatorParams opParams =\n         new OperatorParams().releaseName(\"weblogic-operator\")\n-            .namespace(namespace)\n-            .image(\"weblogic-kubernetes-operator:test_itsimpleoperator\")\n-            .domainNamespaces(Arrays.asList(\"domainns1\", \"domainns2\"))\n-            .serviceAccount(\"opns1-sa\");\n+            .namespace(opNamespace)\n+            .chartDir(\"../kubernetes/charts/weblogic-operator\")\n+            .image(\"phx.ocir.io/weblogick8s/weblogic-kubernetes-operator:develop\")\n+            .domainNamespaces(Arrays.asList(domainNamespace1, domainNamespace2))\n+            .serviceAccount(serviceAccountName);\n \n-    //ToDO: use Junit 5 assertions\n     try {\n-      installOperator(opParams);\n-    } catch (ApiException e) {\n-      e.printStackTrace();\n-      fail(\"Failed to install Operator due to exception\" + e.getMessage());\n-    }\n+      assertThat(installOperator(opParams)).as(\"Operator installation failed\").isTrue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5NTczMA==", "bodyText": "for example:\n @Test\n  @DisplayName(\"Test something\")\n  @Slow\n  public void testTrueIsTrue() {\n    int x = 1 + 5;\n    assertThat(true)\n        .as(\"Test that true is true\")\n        .withFailMessage(\"OMG! True was not true\")\n        .isEqualTo(false);\n  }\n\nwhich yields:\n[INFO] -------------------------------------------------------\n[INFO]  T E S T S\n[INFO] -------------------------------------------------------\n[INFO] Running oracle.weblogic.kubernetes.Mark\n<04-03-2020 20:29:08> <INFO> <oracle.weblogic.kubernetes.extensions.LoggedTest beforeEachTest> <About to execute [Test something] in oracle.weblogic.kubernetes.Mark.testTrueIsTrue()>\n<04-03-2020 20:29:08> <INFO> <oracle.weblogic.kubernetes.extensions.Timing afterTestExecution> <Method [testTrueIsTrue] took 52 ms.>\n<04-03-2020 20:29:08> <INFO> <oracle.weblogic.kubernetes.extensions.LoggedTest afterEachTest> <Finished executing [Test something] in oracle.weblogic.kubernetes.Mark.testTrueIsTrue()>\n[ERROR] Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.136 s <<< FAILURE! - in oracle.weblogic.kubernetes.Mark\n[ERROR] oracle.weblogic.kubernetes.Mark.testTrueIsTrue  Time elapsed: 0.115 s  <<< FAILURE!\njava.lang.AssertionError: [Test that true is true] OMG! True was not true\n        at oracle.weblogic.kubernetes.Mark.testTrueIsTrue(Mark.java:25)\n        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n   (etc)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r403395730", "createdAt": "2020-04-04T00:30:27Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -65,69 +64,89 @@ public void testInstallingOperator() {\n     // the kubernetes deployment.  this will complete quickly, and will either be\n     // successful or not.\n \n-    // get a new unique namespace\n-    final String namespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+    // get a new unique opNamespace\n+    final String opNamespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", opNamespace));\n+\n+    final String domainNamespace1 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace1));\n+\n+    final String domainNamespace2 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n         \"Failed to create unique namespace due to ApiException\");\n-    logger.info(String.format(\"Got a new namespace called %s\", namespace));\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace2));\n \n-    // Create a service account for the unique namespace\n-    final String serviceAccountName = namespace + \"-sa\";\n-    assertDoesNotThrow(\n-        () -> TestActions.createServiceAccount(new V1ServiceAccount()\n-            .metadata(new V1ObjectMeta().namespace(namespace).name(serviceAccountName))));\n+    // Create a service account for the unique opNamespace\n+    final String serviceAccountName = opNamespace + \"-sa\";\n+    assertDoesNotThrow(() -> TestActions.createServiceAccount(new V1ServiceAccount()\n+        .metadata(new V1ObjectMeta().namespace(opNamespace).name(serviceAccountName))));\n     logger.info(\"Created service account: \" + serviceAccountName);\n \n     OperatorParams opParams =\n         new OperatorParams().releaseName(\"weblogic-operator\")\n-            .namespace(namespace)\n-            .image(\"weblogic-kubernetes-operator:test_itsimpleoperator\")\n-            .domainNamespaces(Arrays.asList(\"domainns1\", \"domainns2\"))\n-            .serviceAccount(\"opns1-sa\");\n+            .namespace(opNamespace)\n+            .chartDir(\"../kubernetes/charts/weblogic-operator\")\n+            .image(\"phx.ocir.io/weblogick8s/weblogic-kubernetes-operator:develop\")\n+            .domainNamespaces(Arrays.asList(domainNamespace1, domainNamespace2))\n+            .serviceAccount(serviceAccountName);\n \n-    //ToDO: use Junit 5 assertions\n     try {\n-      installOperator(opParams);\n-    } catch (ApiException e) {\n-      e.printStackTrace();\n-      fail(\"Failed to install Operator due to exception\" + e.getMessage());\n-    }\n+      assertThat(installOperator(opParams)).as(\"Operator installation failed\").isTrue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5Mjk4Mg=="}, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY0MTc4Nw==", "bodyText": "will fix the assertions", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r403641787", "createdAt": "2020-04-05T03:04:57Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -65,69 +64,89 @@ public void testInstallingOperator() {\n     // the kubernetes deployment.  this will complete quickly, and will either be\n     // successful or not.\n \n-    // get a new unique namespace\n-    final String namespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+    // get a new unique opNamespace\n+    final String opNamespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", opNamespace));\n+\n+    final String domainNamespace1 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace1));\n+\n+    final String domainNamespace2 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n         \"Failed to create unique namespace due to ApiException\");\n-    logger.info(String.format(\"Got a new namespace called %s\", namespace));\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace2));\n \n-    // Create a service account for the unique namespace\n-    final String serviceAccountName = namespace + \"-sa\";\n-    assertDoesNotThrow(\n-        () -> TestActions.createServiceAccount(new V1ServiceAccount()\n-            .metadata(new V1ObjectMeta().namespace(namespace).name(serviceAccountName))));\n+    // Create a service account for the unique opNamespace\n+    final String serviceAccountName = opNamespace + \"-sa\";\n+    assertDoesNotThrow(() -> TestActions.createServiceAccount(new V1ServiceAccount()\n+        .metadata(new V1ObjectMeta().namespace(opNamespace).name(serviceAccountName))));\n     logger.info(\"Created service account: \" + serviceAccountName);\n \n     OperatorParams opParams =\n         new OperatorParams().releaseName(\"weblogic-operator\")\n-            .namespace(namespace)\n-            .image(\"weblogic-kubernetes-operator:test_itsimpleoperator\")\n-            .domainNamespaces(Arrays.asList(\"domainns1\", \"domainns2\"))\n-            .serviceAccount(\"opns1-sa\");\n+            .namespace(opNamespace)\n+            .chartDir(\"../kubernetes/charts/weblogic-operator\")\n+            .image(\"phx.ocir.io/weblogick8s/weblogic-kubernetes-operator:develop\")\n+            .domainNamespaces(Arrays.asList(domainNamespace1, domainNamespace2))\n+            .serviceAccount(serviceAccountName);\n \n-    //ToDO: use Junit 5 assertions\n     try {\n-      installOperator(opParams);\n-    } catch (ApiException e) {\n-      e.printStackTrace();\n-      fail(\"Failed to install Operator due to exception\" + e.getMessage());\n-    }\n+      assertThat(installOperator(opParams)).as(\"Operator installation failed\").isTrue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5Mjk4Mg=="}, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIwODEwNw==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r404208107", "createdAt": "2020-04-06T16:03:03Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -65,69 +64,89 @@ public void testInstallingOperator() {\n     // the kubernetes deployment.  this will complete quickly, and will either be\n     // successful or not.\n \n-    // get a new unique namespace\n-    final String namespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+    // get a new unique opNamespace\n+    final String opNamespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", opNamespace));\n+\n+    final String domainNamespace1 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace1));\n+\n+    final String domainNamespace2 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n         \"Failed to create unique namespace due to ApiException\");\n-    logger.info(String.format(\"Got a new namespace called %s\", namespace));\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace2));\n \n-    // Create a service account for the unique namespace\n-    final String serviceAccountName = namespace + \"-sa\";\n-    assertDoesNotThrow(\n-        () -> TestActions.createServiceAccount(new V1ServiceAccount()\n-            .metadata(new V1ObjectMeta().namespace(namespace).name(serviceAccountName))));\n+    // Create a service account for the unique opNamespace\n+    final String serviceAccountName = opNamespace + \"-sa\";\n+    assertDoesNotThrow(() -> TestActions.createServiceAccount(new V1ServiceAccount()\n+        .metadata(new V1ObjectMeta().namespace(opNamespace).name(serviceAccountName))));\n     logger.info(\"Created service account: \" + serviceAccountName);\n \n     OperatorParams opParams =\n         new OperatorParams().releaseName(\"weblogic-operator\")\n-            .namespace(namespace)\n-            .image(\"weblogic-kubernetes-operator:test_itsimpleoperator\")\n-            .domainNamespaces(Arrays.asList(\"domainns1\", \"domainns2\"))\n-            .serviceAccount(\"opns1-sa\");\n+            .namespace(opNamespace)\n+            .chartDir(\"../kubernetes/charts/weblogic-operator\")\n+            .image(\"phx.ocir.io/weblogick8s/weblogic-kubernetes-operator:develop\")\n+            .domainNamespaces(Arrays.asList(domainNamespace1, domainNamespace2))\n+            .serviceAccount(serviceAccountName);\n \n-    //ToDO: use Junit 5 assertions\n     try {\n-      installOperator(opParams);\n-    } catch (ApiException e) {\n-      e.printStackTrace();\n-      fail(\"Failed to install Operator due to exception\" + e.getMessage());\n-    }\n+      assertThat(installOperator(opParams)).as(\"Operator installation failed\").isTrue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5Mjk4Mg=="}, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjI0NDYxOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMDozMTo1M1rOGAtVWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjowMzoxMVrOGBe6KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5NTkyOA==", "bodyText": "nitpick - start each new fluent method on a new line please, like this\nnew V1ObejctMeta()\n  .namespace(opNamespace)\n  .name(serviceAccountName)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r403395928", "createdAt": "2020-04-04T00:31:53Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -65,69 +64,89 @@ public void testInstallingOperator() {\n     // the kubernetes deployment.  this will complete quickly, and will either be\n     // successful or not.\n \n-    // get a new unique namespace\n-    final String namespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+    // get a new unique opNamespace\n+    final String opNamespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", opNamespace));\n+\n+    final String domainNamespace1 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace1));\n+\n+    final String domainNamespace2 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n         \"Failed to create unique namespace due to ApiException\");\n-    logger.info(String.format(\"Got a new namespace called %s\", namespace));\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace2));\n \n-    // Create a service account for the unique namespace\n-    final String serviceAccountName = namespace + \"-sa\";\n-    assertDoesNotThrow(\n-        () -> TestActions.createServiceAccount(new V1ServiceAccount()\n-            .metadata(new V1ObjectMeta().namespace(namespace).name(serviceAccountName))));\n+    // Create a service account for the unique opNamespace\n+    final String serviceAccountName = opNamespace + \"-sa\";\n+    assertDoesNotThrow(() -> TestActions.createServiceAccount(new V1ServiceAccount()\n+        .metadata(new V1ObjectMeta().namespace(opNamespace).name(serviceAccountName))));\n     logger.info(\"Created service account: \" + serviceAccountName);\n \n     OperatorParams opParams =\n         new OperatorParams().releaseName(\"weblogic-operator\")\n-            .namespace(namespace)\n-            .image(\"weblogic-kubernetes-operator:test_itsimpleoperator\")\n-            .domainNamespaces(Arrays.asList(\"domainns1\", \"domainns2\"))\n-            .serviceAccount(\"opns1-sa\");\n+            .namespace(opNamespace)\n+            .chartDir(\"../kubernetes/charts/weblogic-operator\")\n+            .image(\"phx.ocir.io/weblogick8s/weblogic-kubernetes-operator:develop\")\n+            .domainNamespaces(Arrays.asList(domainNamespace1, domainNamespace2))\n+            .serviceAccount(serviceAccountName);\n \n-    //ToDO: use Junit 5 assertions\n     try {\n-      installOperator(opParams);\n-    } catch (ApiException e) {\n-      e.printStackTrace();\n-      fail(\"Failed to install Operator due to exception\" + e.getMessage());\n-    }\n+      assertThat(installOperator(opParams)).as(\"Operator installation failed\").isTrue();\n+      logger.info(String.format(\"Operator installed in namespace %s\", opNamespace));\n+\n+      // we can use a standard JUnit assertion to check on the result\n+      // assertEquals(true, success, \"Operator successfully installed in opNamespace \" + opNamespace);\n+\n+      // this is an example of waiting for an async operation to complete.\n+      // after the previous step was completed, kubernetes will try to pull the image,\n+      // start the pod, check the readiness/health probes, etc.  this will take some\n+      // period of time and either the operator will come to a running state, or it\n+      // will not.\n+      // in this example, we first wait 30 seconds, since it is unlikely this operation\n+      // will complete in less than 30 seconds, then we check if the operator is running.\n+      with().pollDelay(30, SECONDS)\n+          // we check again every 10 seconds.\n+          .and().with().pollInterval(10, SECONDS)\n+          // this listener lets us report some status with each poll\n+          .conditionEvaluationListener(\n+              condition -> logger.info(()\n+                  -> String.format(\"Waiting for operator to be running (elapsed time %dms, remaining time %dms)\",\n+                  condition.getElapsedTimeInMS(),\n+                  condition.getRemainingTimeInMS())))\n+          // and here we can set the maximum time we are prepared to wait\n+          .await().atMost(5, MINUTES)\n+          // operatorIsRunning() is one of our custom, reusable assertions\n+          .until(operatorIsRunning(opNamespace));\n+    } finally {\n+\n+      // uninstall operator release\n+      assertThat(TestActions.uninstallOperator(opParams))\n+          .as(\"Operator uninstall failed\")\n+          .isTrue();\n+\n+      // Delete service account from unique opNamespace\n+      assertDoesNotThrow(\n+          () -> TestActions.deleteServiceAccount(new V1ServiceAccount()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY0MTc4OQ==", "bodyText": "will do", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r403641789", "createdAt": "2020-04-05T03:05:06Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -65,69 +64,89 @@ public void testInstallingOperator() {\n     // the kubernetes deployment.  this will complete quickly, and will either be\n     // successful or not.\n \n-    // get a new unique namespace\n-    final String namespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+    // get a new unique opNamespace\n+    final String opNamespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", opNamespace));\n+\n+    final String domainNamespace1 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace1));\n+\n+    final String domainNamespace2 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n         \"Failed to create unique namespace due to ApiException\");\n-    logger.info(String.format(\"Got a new namespace called %s\", namespace));\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace2));\n \n-    // Create a service account for the unique namespace\n-    final String serviceAccountName = namespace + \"-sa\";\n-    assertDoesNotThrow(\n-        () -> TestActions.createServiceAccount(new V1ServiceAccount()\n-            .metadata(new V1ObjectMeta().namespace(namespace).name(serviceAccountName))));\n+    // Create a service account for the unique opNamespace\n+    final String serviceAccountName = opNamespace + \"-sa\";\n+    assertDoesNotThrow(() -> TestActions.createServiceAccount(new V1ServiceAccount()\n+        .metadata(new V1ObjectMeta().namespace(opNamespace).name(serviceAccountName))));\n     logger.info(\"Created service account: \" + serviceAccountName);\n \n     OperatorParams opParams =\n         new OperatorParams().releaseName(\"weblogic-operator\")\n-            .namespace(namespace)\n-            .image(\"weblogic-kubernetes-operator:test_itsimpleoperator\")\n-            .domainNamespaces(Arrays.asList(\"domainns1\", \"domainns2\"))\n-            .serviceAccount(\"opns1-sa\");\n+            .namespace(opNamespace)\n+            .chartDir(\"../kubernetes/charts/weblogic-operator\")\n+            .image(\"phx.ocir.io/weblogick8s/weblogic-kubernetes-operator:develop\")\n+            .domainNamespaces(Arrays.asList(domainNamespace1, domainNamespace2))\n+            .serviceAccount(serviceAccountName);\n \n-    //ToDO: use Junit 5 assertions\n     try {\n-      installOperator(opParams);\n-    } catch (ApiException e) {\n-      e.printStackTrace();\n-      fail(\"Failed to install Operator due to exception\" + e.getMessage());\n-    }\n+      assertThat(installOperator(opParams)).as(\"Operator installation failed\").isTrue();\n+      logger.info(String.format(\"Operator installed in namespace %s\", opNamespace));\n+\n+      // we can use a standard JUnit assertion to check on the result\n+      // assertEquals(true, success, \"Operator successfully installed in opNamespace \" + opNamespace);\n+\n+      // this is an example of waiting for an async operation to complete.\n+      // after the previous step was completed, kubernetes will try to pull the image,\n+      // start the pod, check the readiness/health probes, etc.  this will take some\n+      // period of time and either the operator will come to a running state, or it\n+      // will not.\n+      // in this example, we first wait 30 seconds, since it is unlikely this operation\n+      // will complete in less than 30 seconds, then we check if the operator is running.\n+      with().pollDelay(30, SECONDS)\n+          // we check again every 10 seconds.\n+          .and().with().pollInterval(10, SECONDS)\n+          // this listener lets us report some status with each poll\n+          .conditionEvaluationListener(\n+              condition -> logger.info(()\n+                  -> String.format(\"Waiting for operator to be running (elapsed time %dms, remaining time %dms)\",\n+                  condition.getElapsedTimeInMS(),\n+                  condition.getRemainingTimeInMS())))\n+          // and here we can set the maximum time we are prepared to wait\n+          .await().atMost(5, MINUTES)\n+          // operatorIsRunning() is one of our custom, reusable assertions\n+          .until(operatorIsRunning(opNamespace));\n+    } finally {\n+\n+      // uninstall operator release\n+      assertThat(TestActions.uninstallOperator(opParams))\n+          .as(\"Operator uninstall failed\")\n+          .isTrue();\n+\n+      // Delete service account from unique opNamespace\n+      assertDoesNotThrow(\n+          () -> TestActions.deleteServiceAccount(new V1ServiceAccount()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5NTkyOA=="}, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIwODE2OQ==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r404208169", "createdAt": "2020-04-06T16:03:11Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -65,69 +64,89 @@ public void testInstallingOperator() {\n     // the kubernetes deployment.  this will complete quickly, and will either be\n     // successful or not.\n \n-    // get a new unique namespace\n-    final String namespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+    // get a new unique opNamespace\n+    final String opNamespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", opNamespace));\n+\n+    final String domainNamespace1 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace1));\n+\n+    final String domainNamespace2 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n         \"Failed to create unique namespace due to ApiException\");\n-    logger.info(String.format(\"Got a new namespace called %s\", namespace));\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace2));\n \n-    // Create a service account for the unique namespace\n-    final String serviceAccountName = namespace + \"-sa\";\n-    assertDoesNotThrow(\n-        () -> TestActions.createServiceAccount(new V1ServiceAccount()\n-            .metadata(new V1ObjectMeta().namespace(namespace).name(serviceAccountName))));\n+    // Create a service account for the unique opNamespace\n+    final String serviceAccountName = opNamespace + \"-sa\";\n+    assertDoesNotThrow(() -> TestActions.createServiceAccount(new V1ServiceAccount()\n+        .metadata(new V1ObjectMeta().namespace(opNamespace).name(serviceAccountName))));\n     logger.info(\"Created service account: \" + serviceAccountName);\n \n     OperatorParams opParams =\n         new OperatorParams().releaseName(\"weblogic-operator\")\n-            .namespace(namespace)\n-            .image(\"weblogic-kubernetes-operator:test_itsimpleoperator\")\n-            .domainNamespaces(Arrays.asList(\"domainns1\", \"domainns2\"))\n-            .serviceAccount(\"opns1-sa\");\n+            .namespace(opNamespace)\n+            .chartDir(\"../kubernetes/charts/weblogic-operator\")\n+            .image(\"phx.ocir.io/weblogick8s/weblogic-kubernetes-operator:develop\")\n+            .domainNamespaces(Arrays.asList(domainNamespace1, domainNamespace2))\n+            .serviceAccount(serviceAccountName);\n \n-    //ToDO: use Junit 5 assertions\n     try {\n-      installOperator(opParams);\n-    } catch (ApiException e) {\n-      e.printStackTrace();\n-      fail(\"Failed to install Operator due to exception\" + e.getMessage());\n-    }\n+      assertThat(installOperator(opParams)).as(\"Operator installation failed\").isTrue();\n+      logger.info(String.format(\"Operator installed in namespace %s\", opNamespace));\n+\n+      // we can use a standard JUnit assertion to check on the result\n+      // assertEquals(true, success, \"Operator successfully installed in opNamespace \" + opNamespace);\n+\n+      // this is an example of waiting for an async operation to complete.\n+      // after the previous step was completed, kubernetes will try to pull the image,\n+      // start the pod, check the readiness/health probes, etc.  this will take some\n+      // period of time and either the operator will come to a running state, or it\n+      // will not.\n+      // in this example, we first wait 30 seconds, since it is unlikely this operation\n+      // will complete in less than 30 seconds, then we check if the operator is running.\n+      with().pollDelay(30, SECONDS)\n+          // we check again every 10 seconds.\n+          .and().with().pollInterval(10, SECONDS)\n+          // this listener lets us report some status with each poll\n+          .conditionEvaluationListener(\n+              condition -> logger.info(()\n+                  -> String.format(\"Waiting for operator to be running (elapsed time %dms, remaining time %dms)\",\n+                  condition.getElapsedTimeInMS(),\n+                  condition.getRemainingTimeInMS())))\n+          // and here we can set the maximum time we are prepared to wait\n+          .await().atMost(5, MINUTES)\n+          // operatorIsRunning() is one of our custom, reusable assertions\n+          .until(operatorIsRunning(opNamespace));\n+    } finally {\n+\n+      // uninstall operator release\n+      assertThat(TestActions.uninstallOperator(opParams))\n+          .as(\"Operator uninstall failed\")\n+          .isTrue();\n+\n+      // Delete service account from unique opNamespace\n+      assertDoesNotThrow(\n+          () -> TestActions.deleteServiceAccount(new V1ServiceAccount()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5NTkyOA=="}, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjMwODU0OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/TraefikParams.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMToyMDoyNlrOGAt1QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMToyMDoyNlrOGAt1QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwNDA5Nw==", "bodyText": "same comment about inheritance", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r403404097", "createdAt": "2020-04-04T01:20:26Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/TraefikParams.java", "diffHunk": "@@ -5,13 +5,13 @@\n \n import java.util.HashMap;\n \n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+\n // All parameters needed to install Traefik Operator\n \n-public class TraefikParams {\n+public class TraefikParams extends HelmParams {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjMxMDkzOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Helm.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMToyMzowMlrOGAt2fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwMzowNTozN1rOGA8V2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwNDQxNQ==", "bodyText": "i think this is not ideal - if it fails, how will we know which of the two commands failed?\ni think it would be better to run each one separately and then inspect the results\ni know is it \"more work\" - but i think it is much clearer and will produce more reliable code to do if we do it that way", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r403404415", "createdAt": "2020-04-04T01:23:02Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Helm.java", "diffHunk": "@@ -5,86 +5,175 @@\n \n import java.util.HashMap;\n \n-import oracle.weblogic.kubernetes.extensions.LoggedTest;\n-\n-public class Helm implements LoggedTest {\n-\n-  private String chartName;\n-  private String releaseName;\n-  private String namespace;\n-  private String repoUrl;\n-  private HashMap<String, Object> values;\n-\n-  public Helm chartName(String chartName) {\n-    this.chartName = chartName;\n-    return this;\n-  }\n-\n-  public Helm releaseName(String releaseName) {\n-    this.releaseName = releaseName;\n-    return this;\n-  }\n-\n-  public Helm namespace(String namespace) {\n-    this.namespace = namespace;\n-    return this;\n-  }\n-\n-  public Helm repoUrl(String repoUrl) {\n-    this.repoUrl = repoUrl;\n-    return this;\n-  }\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class Helm {\n+\n+  /**\n+   * install helm chart\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean install(HelmParams params) {\n+    String namespace = params.getNamespace();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure releaseName is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getRepoUrl() != null && params.getChartName() == null)\n+        .as(\"make sure chart name is not empty or null when repo url is provided\")\n+        .isFalse();\n+\n+    assertThat(params.getRepoUrl() == null && params.getChartDir() == null)\n+        .as(\"make sure repo url, chart name and chart dir are not empty or null. \"\n+            + \"repo url, chart name or chart dir must be provided\")\n+        .isFalse();\n+\n+    //chart reference to be used in helm install\n+    String chartRef = params.getChartDir();\n+\n+    // use repo url as chart reference if provided\n+    if (params.getChartName() != null && params.getRepoUrl() != null) {\n+      Helm.addRepo(params.getChartName(), params.getRepoUrl());\n+      chartRef = params.getRepoUrl();\n+    }\n+\n+    logger.info(String.format(\"Installing application in namespace %s using chart %s\",\n+        namespace, chartRef));\n+\n+    // build helm install command\n+    StringBuffer installCmd = new StringBuffer(\"helm install \")\n+        .append(params.getReleaseName()).append(\" \").append(chartRef)\n+        .append(\" --namespace \").append(params.getNamespace());\n \n-  public Helm values(HashMap<String, Object> values) {\n-    this.values = values;\n-    return this;\n-  }\n+    // add all the parameters\n+    appendValues(params.getValues(), installCmd);\n \n-  public String getChartName() {\n-    return chartName;\n-  }\n+    installCmd.append(\" && helm list\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY0MTgxNg==", "bodyText": "will do", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r403641816", "createdAt": "2020-04-05T03:05:37Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Helm.java", "diffHunk": "@@ -5,86 +5,175 @@\n \n import java.util.HashMap;\n \n-import oracle.weblogic.kubernetes.extensions.LoggedTest;\n-\n-public class Helm implements LoggedTest {\n-\n-  private String chartName;\n-  private String releaseName;\n-  private String namespace;\n-  private String repoUrl;\n-  private HashMap<String, Object> values;\n-\n-  public Helm chartName(String chartName) {\n-    this.chartName = chartName;\n-    return this;\n-  }\n-\n-  public Helm releaseName(String releaseName) {\n-    this.releaseName = releaseName;\n-    return this;\n-  }\n-\n-  public Helm namespace(String namespace) {\n-    this.namespace = namespace;\n-    return this;\n-  }\n-\n-  public Helm repoUrl(String repoUrl) {\n-    this.repoUrl = repoUrl;\n-    return this;\n-  }\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class Helm {\n+\n+  /**\n+   * install helm chart\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean install(HelmParams params) {\n+    String namespace = params.getNamespace();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure releaseName is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getRepoUrl() != null && params.getChartName() == null)\n+        .as(\"make sure chart name is not empty or null when repo url is provided\")\n+        .isFalse();\n+\n+    assertThat(params.getRepoUrl() == null && params.getChartDir() == null)\n+        .as(\"make sure repo url, chart name and chart dir are not empty or null. \"\n+            + \"repo url, chart name or chart dir must be provided\")\n+        .isFalse();\n+\n+    //chart reference to be used in helm install\n+    String chartRef = params.getChartDir();\n+\n+    // use repo url as chart reference if provided\n+    if (params.getChartName() != null && params.getRepoUrl() != null) {\n+      Helm.addRepo(params.getChartName(), params.getRepoUrl());\n+      chartRef = params.getRepoUrl();\n+    }\n+\n+    logger.info(String.format(\"Installing application in namespace %s using chart %s\",\n+        namespace, chartRef));\n+\n+    // build helm install command\n+    StringBuffer installCmd = new StringBuffer(\"helm install \")\n+        .append(params.getReleaseName()).append(\" \").append(chartRef)\n+        .append(\" --namespace \").append(params.getNamespace());\n \n-  public Helm values(HashMap<String, Object> values) {\n-    this.values = values;\n-    return this;\n-  }\n+    // add all the parameters\n+    appendValues(params.getValues(), installCmd);\n \n-  public String getChartName() {\n-    return chartName;\n-  }\n+    installCmd.append(\" && helm list\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwNDQxNQ=="}, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjMxMTQ4OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Helm.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMToyMzoyOVrOGAt2wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMToyMzoyOVrOGAt2wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwNDQ4MQ==", "bodyText": "captials and periods please", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r403404481", "createdAt": "2020-04-04T01:23:29Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Helm.java", "diffHunk": "@@ -5,86 +5,175 @@\n \n import java.util.HashMap;\n \n-import oracle.weblogic.kubernetes.extensions.LoggedTest;\n-\n-public class Helm implements LoggedTest {\n-\n-  private String chartName;\n-  private String releaseName;\n-  private String namespace;\n-  private String repoUrl;\n-  private HashMap<String, Object> values;\n-\n-  public Helm chartName(String chartName) {\n-    this.chartName = chartName;\n-    return this;\n-  }\n-\n-  public Helm releaseName(String releaseName) {\n-    this.releaseName = releaseName;\n-    return this;\n-  }\n-\n-  public Helm namespace(String namespace) {\n-    this.namespace = namespace;\n-    return this;\n-  }\n-\n-  public Helm repoUrl(String repoUrl) {\n-    this.repoUrl = repoUrl;\n-    return this;\n-  }\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class Helm {\n+\n+  /**\n+   * install helm chart\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean install(HelmParams params) {\n+    String namespace = params.getNamespace();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure releaseName is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getRepoUrl() != null && params.getChartName() == null)\n+        .as(\"make sure chart name is not empty or null when repo url is provided\")\n+        .isFalse();\n+\n+    assertThat(params.getRepoUrl() == null && params.getChartDir() == null)\n+        .as(\"make sure repo url, chart name and chart dir are not empty or null. \"\n+            + \"repo url, chart name or chart dir must be provided\")\n+        .isFalse();\n+\n+    //chart reference to be used in helm install\n+    String chartRef = params.getChartDir();\n+\n+    // use repo url as chart reference if provided\n+    if (params.getChartName() != null && params.getRepoUrl() != null) {\n+      Helm.addRepo(params.getChartName(), params.getRepoUrl());\n+      chartRef = params.getRepoUrl();\n+    }\n+\n+    logger.info(String.format(\"Installing application in namespace %s using chart %s\",\n+        namespace, chartRef));\n+\n+    // build helm install command\n+    StringBuffer installCmd = new StringBuffer(\"helm install \")\n+        .append(params.getReleaseName()).append(\" \").append(chartRef)\n+        .append(\" --namespace \").append(params.getNamespace());\n \n-  public Helm values(HashMap<String, Object> values) {\n-    this.values = values;\n-    return this;\n-  }\n+    // add all the parameters\n+    appendValues(params.getValues(), installCmd);\n \n-  public String getChartName() {\n-    return chartName;\n-  }\n+    installCmd.append(\" && helm list\");\n+    // run the command\n+    return exec(installCmd.toString());\n \n-  public String getReleaseName() {\n-    return releaseName;\n   }\n \n-  public String getNamespace() {\n-    return namespace;\n+  /**\n+   * upgrade a helm release", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjMxMjEzOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Helm.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMToyMzo1OVrOGAt3Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMToyMzo1OVrOGAt3Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwNDU1OA==", "bodyText": "nitpick: if you say it returns true on success, no need to say false otherwise, that is pretty clear :)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r403404558", "createdAt": "2020-04-04T01:23:59Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Helm.java", "diffHunk": "@@ -5,86 +5,175 @@\n \n import java.util.HashMap;\n \n-import oracle.weblogic.kubernetes.extensions.LoggedTest;\n-\n-public class Helm implements LoggedTest {\n-\n-  private String chartName;\n-  private String releaseName;\n-  private String namespace;\n-  private String repoUrl;\n-  private HashMap<String, Object> values;\n-\n-  public Helm chartName(String chartName) {\n-    this.chartName = chartName;\n-    return this;\n-  }\n-\n-  public Helm releaseName(String releaseName) {\n-    this.releaseName = releaseName;\n-    return this;\n-  }\n-\n-  public Helm namespace(String namespace) {\n-    this.namespace = namespace;\n-    return this;\n-  }\n-\n-  public Helm repoUrl(String repoUrl) {\n-    this.repoUrl = repoUrl;\n-    return this;\n-  }\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class Helm {\n+\n+  /**\n+   * install helm chart\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean install(HelmParams params) {\n+    String namespace = params.getNamespace();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure releaseName is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getRepoUrl() != null && params.getChartName() == null)\n+        .as(\"make sure chart name is not empty or null when repo url is provided\")\n+        .isFalse();\n+\n+    assertThat(params.getRepoUrl() == null && params.getChartDir() == null)\n+        .as(\"make sure repo url, chart name and chart dir are not empty or null. \"\n+            + \"repo url, chart name or chart dir must be provided\")\n+        .isFalse();\n+\n+    //chart reference to be used in helm install\n+    String chartRef = params.getChartDir();\n+\n+    // use repo url as chart reference if provided\n+    if (params.getChartName() != null && params.getRepoUrl() != null) {\n+      Helm.addRepo(params.getChartName(), params.getRepoUrl());\n+      chartRef = params.getRepoUrl();\n+    }\n+\n+    logger.info(String.format(\"Installing application in namespace %s using chart %s\",\n+        namespace, chartRef));\n+\n+    // build helm install command\n+    StringBuffer installCmd = new StringBuffer(\"helm install \")\n+        .append(params.getReleaseName()).append(\" \").append(chartRef)\n+        .append(\" --namespace \").append(params.getNamespace());\n \n-  public Helm values(HashMap<String, Object> values) {\n-    this.values = values;\n-    return this;\n-  }\n+    // add all the parameters\n+    appendValues(params.getValues(), installCmd);\n \n-  public String getChartName() {\n-    return chartName;\n-  }\n+    installCmd.append(\" && helm list\");\n+    // run the command\n+    return exec(installCmd.toString());\n \n-  public String getReleaseName() {\n-    return releaseName;\n   }\n \n-  public String getNamespace() {\n-    return namespace;\n+  /**\n+   * upgrade a helm release\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjMxMjYzOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Helm.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMToyNDoyNVrOGAt3Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMToyNDoyNVrOGAt3Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwNDYxMQ==", "bodyText": "these are really nice", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r403404611", "createdAt": "2020-04-04T01:24:25Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Helm.java", "diffHunk": "@@ -5,86 +5,175 @@\n \n import java.util.HashMap;\n \n-import oracle.weblogic.kubernetes.extensions.LoggedTest;\n-\n-public class Helm implements LoggedTest {\n-\n-  private String chartName;\n-  private String releaseName;\n-  private String namespace;\n-  private String repoUrl;\n-  private HashMap<String, Object> values;\n-\n-  public Helm chartName(String chartName) {\n-    this.chartName = chartName;\n-    return this;\n-  }\n-\n-  public Helm releaseName(String releaseName) {\n-    this.releaseName = releaseName;\n-    return this;\n-  }\n-\n-  public Helm namespace(String namespace) {\n-    this.namespace = namespace;\n-    return this;\n-  }\n-\n-  public Helm repoUrl(String repoUrl) {\n-    this.repoUrl = repoUrl;\n-    return this;\n-  }\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class Helm {\n+\n+  /**\n+   * install helm chart\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean install(HelmParams params) {\n+    String namespace = params.getNamespace();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure releaseName is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getRepoUrl() != null && params.getChartName() == null)\n+        .as(\"make sure chart name is not empty or null when repo url is provided\")\n+        .isFalse();\n+\n+    assertThat(params.getRepoUrl() == null && params.getChartDir() == null)\n+        .as(\"make sure repo url, chart name and chart dir are not empty or null. \"\n+            + \"repo url, chart name or chart dir must be provided\")\n+        .isFalse();\n+\n+    //chart reference to be used in helm install\n+    String chartRef = params.getChartDir();\n+\n+    // use repo url as chart reference if provided\n+    if (params.getChartName() != null && params.getRepoUrl() != null) {\n+      Helm.addRepo(params.getChartName(), params.getRepoUrl());\n+      chartRef = params.getRepoUrl();\n+    }\n+\n+    logger.info(String.format(\"Installing application in namespace %s using chart %s\",\n+        namespace, chartRef));\n+\n+    // build helm install command\n+    StringBuffer installCmd = new StringBuffer(\"helm install \")\n+        .append(params.getReleaseName()).append(\" \").append(chartRef)\n+        .append(\" --namespace \").append(params.getNamespace());\n \n-  public Helm values(HashMap<String, Object> values) {\n-    this.values = values;\n-    return this;\n-  }\n+    // add all the parameters\n+    appendValues(params.getValues(), installCmd);\n \n-  public String getChartName() {\n-    return chartName;\n-  }\n+    installCmd.append(\" && helm list\");\n+    // run the command\n+    return exec(installCmd.toString());\n \n-  public String getReleaseName() {\n-    return releaseName;\n   }\n \n-  public String getNamespace() {\n-    return namespace;\n+  /**\n+   * upgrade a helm release\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean upgrade(HelmParams params) {\n+    String namespace = params.getNamespace();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjMxNDAyOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Helm.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMToyNjozNlrOGAt4Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjoxMzo1NlrOGBfYWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwNDgwMg==", "bodyText": "same comment as before", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r403404802", "createdAt": "2020-04-04T01:26:36Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Helm.java", "diffHunk": "@@ -5,86 +5,175 @@\n \n import java.util.HashMap;\n \n-import oracle.weblogic.kubernetes.extensions.LoggedTest;\n-\n-public class Helm implements LoggedTest {\n-\n-  private String chartName;\n-  private String releaseName;\n-  private String namespace;\n-  private String repoUrl;\n-  private HashMap<String, Object> values;\n-\n-  public Helm chartName(String chartName) {\n-    this.chartName = chartName;\n-    return this;\n-  }\n-\n-  public Helm releaseName(String releaseName) {\n-    this.releaseName = releaseName;\n-    return this;\n-  }\n-\n-  public Helm namespace(String namespace) {\n-    this.namespace = namespace;\n-    return this;\n-  }\n-\n-  public Helm repoUrl(String repoUrl) {\n-    this.repoUrl = repoUrl;\n-    return this;\n-  }\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class Helm {\n+\n+  /**\n+   * install helm chart\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean install(HelmParams params) {\n+    String namespace = params.getNamespace();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure releaseName is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getRepoUrl() != null && params.getChartName() == null)\n+        .as(\"make sure chart name is not empty or null when repo url is provided\")\n+        .isFalse();\n+\n+    assertThat(params.getRepoUrl() == null && params.getChartDir() == null)\n+        .as(\"make sure repo url, chart name and chart dir are not empty or null. \"\n+            + \"repo url, chart name or chart dir must be provided\")\n+        .isFalse();\n+\n+    //chart reference to be used in helm install\n+    String chartRef = params.getChartDir();\n+\n+    // use repo url as chart reference if provided\n+    if (params.getChartName() != null && params.getRepoUrl() != null) {\n+      Helm.addRepo(params.getChartName(), params.getRepoUrl());\n+      chartRef = params.getRepoUrl();\n+    }\n+\n+    logger.info(String.format(\"Installing application in namespace %s using chart %s\",\n+        namespace, chartRef));\n+\n+    // build helm install command\n+    StringBuffer installCmd = new StringBuffer(\"helm install \")\n+        .append(params.getReleaseName()).append(\" \").append(chartRef)\n+        .append(\" --namespace \").append(params.getNamespace());\n \n-  public Helm values(HashMap<String, Object> values) {\n-    this.values = values;\n-    return this;\n-  }\n+    // add all the parameters\n+    appendValues(params.getValues(), installCmd);\n \n-  public String getChartName() {\n-    return chartName;\n-  }\n+    installCmd.append(\" && helm list\");\n+    // run the command\n+    return exec(installCmd.toString());\n \n-  public String getReleaseName() {\n-    return releaseName;\n   }\n \n-  public String getNamespace() {\n-    return namespace;\n+  /**\n+   * upgrade a helm release\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean upgrade(HelmParams params) {\n+    String namespace = params.getNamespace();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure releaseName is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getChartDir())\n+        .as(\"make sure chart dir is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    //chart reference to be used in helm upgrade\n+    String chartDir = params.getChartDir();\n+\n+    logger.info(String.format(\"Upgrade application in namespace %s using chart %s\",\n+        namespace, chartDir));\n+\n+    // build helm upgrade command\n+    StringBuffer upgradeCmd = new StringBuffer(\"helm upgrade \")\n+        .append(params.getReleaseName()).append(\" \").append(chartDir)\n+        .append(\" --namespace \").append(params.getNamespace());\n+\n+    // add all the parameters\n+    appendValues(params.getValues(), upgradeCmd);\n+\n+    upgradeCmd.append(\" && helm list\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIxNTg5Ng==", "bodyText": "modified", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r404215896", "createdAt": "2020-04-06T16:13:56Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Helm.java", "diffHunk": "@@ -5,86 +5,175 @@\n \n import java.util.HashMap;\n \n-import oracle.weblogic.kubernetes.extensions.LoggedTest;\n-\n-public class Helm implements LoggedTest {\n-\n-  private String chartName;\n-  private String releaseName;\n-  private String namespace;\n-  private String repoUrl;\n-  private HashMap<String, Object> values;\n-\n-  public Helm chartName(String chartName) {\n-    this.chartName = chartName;\n-    return this;\n-  }\n-\n-  public Helm releaseName(String releaseName) {\n-    this.releaseName = releaseName;\n-    return this;\n-  }\n-\n-  public Helm namespace(String namespace) {\n-    this.namespace = namespace;\n-    return this;\n-  }\n-\n-  public Helm repoUrl(String repoUrl) {\n-    this.repoUrl = repoUrl;\n-    return this;\n-  }\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class Helm {\n+\n+  /**\n+   * install helm chart\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean install(HelmParams params) {\n+    String namespace = params.getNamespace();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure releaseName is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getRepoUrl() != null && params.getChartName() == null)\n+        .as(\"make sure chart name is not empty or null when repo url is provided\")\n+        .isFalse();\n+\n+    assertThat(params.getRepoUrl() == null && params.getChartDir() == null)\n+        .as(\"make sure repo url, chart name and chart dir are not empty or null. \"\n+            + \"repo url, chart name or chart dir must be provided\")\n+        .isFalse();\n+\n+    //chart reference to be used in helm install\n+    String chartRef = params.getChartDir();\n+\n+    // use repo url as chart reference if provided\n+    if (params.getChartName() != null && params.getRepoUrl() != null) {\n+      Helm.addRepo(params.getChartName(), params.getRepoUrl());\n+      chartRef = params.getRepoUrl();\n+    }\n+\n+    logger.info(String.format(\"Installing application in namespace %s using chart %s\",\n+        namespace, chartRef));\n+\n+    // build helm install command\n+    StringBuffer installCmd = new StringBuffer(\"helm install \")\n+        .append(params.getReleaseName()).append(\" \").append(chartRef)\n+        .append(\" --namespace \").append(params.getNamespace());\n \n-  public Helm values(HashMap<String, Object> values) {\n-    this.values = values;\n-    return this;\n-  }\n+    // add all the parameters\n+    appendValues(params.getValues(), installCmd);\n \n-  public String getChartName() {\n-    return chartName;\n-  }\n+    installCmd.append(\" && helm list\");\n+    // run the command\n+    return exec(installCmd.toString());\n \n-  public String getReleaseName() {\n-    return releaseName;\n   }\n \n-  public String getNamespace() {\n-    return namespace;\n+  /**\n+   * upgrade a helm release\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean upgrade(HelmParams params) {\n+    String namespace = params.getNamespace();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure releaseName is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getChartDir())\n+        .as(\"make sure chart dir is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    //chart reference to be used in helm upgrade\n+    String chartDir = params.getChartDir();\n+\n+    logger.info(String.format(\"Upgrade application in namespace %s using chart %s\",\n+        namespace, chartDir));\n+\n+    // build helm upgrade command\n+    StringBuffer upgradeCmd = new StringBuffer(\"helm upgrade \")\n+        .append(params.getReleaseName()).append(\" \").append(chartDir)\n+        .append(\" --namespace \").append(params.getNamespace());\n+\n+    // add all the parameters\n+    appendValues(params.getValues(), upgradeCmd);\n+\n+    upgradeCmd.append(\" && helm list\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwNDgwMg=="}, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjMxNDMxOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Helm.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMToyNjo1OVrOGAt4Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMToyNjo1OVrOGAt4Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwNDgzOA==", "bodyText": "capitals, period.\nHelm has a capital H", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r403404838", "createdAt": "2020-04-04T01:26:59Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Helm.java", "diffHunk": "@@ -5,86 +5,175 @@\n \n import java.util.HashMap;\n \n-import oracle.weblogic.kubernetes.extensions.LoggedTest;\n-\n-public class Helm implements LoggedTest {\n-\n-  private String chartName;\n-  private String releaseName;\n-  private String namespace;\n-  private String repoUrl;\n-  private HashMap<String, Object> values;\n-\n-  public Helm chartName(String chartName) {\n-    this.chartName = chartName;\n-    return this;\n-  }\n-\n-  public Helm releaseName(String releaseName) {\n-    this.releaseName = releaseName;\n-    return this;\n-  }\n-\n-  public Helm namespace(String namespace) {\n-    this.namespace = namespace;\n-    return this;\n-  }\n-\n-  public Helm repoUrl(String repoUrl) {\n-    this.repoUrl = repoUrl;\n-    return this;\n-  }\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class Helm {\n+\n+  /**\n+   * install helm chart\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean install(HelmParams params) {\n+    String namespace = params.getNamespace();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure releaseName is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getRepoUrl() != null && params.getChartName() == null)\n+        .as(\"make sure chart name is not empty or null when repo url is provided\")\n+        .isFalse();\n+\n+    assertThat(params.getRepoUrl() == null && params.getChartDir() == null)\n+        .as(\"make sure repo url, chart name and chart dir are not empty or null. \"\n+            + \"repo url, chart name or chart dir must be provided\")\n+        .isFalse();\n+\n+    //chart reference to be used in helm install\n+    String chartRef = params.getChartDir();\n+\n+    // use repo url as chart reference if provided\n+    if (params.getChartName() != null && params.getRepoUrl() != null) {\n+      Helm.addRepo(params.getChartName(), params.getRepoUrl());\n+      chartRef = params.getRepoUrl();\n+    }\n+\n+    logger.info(String.format(\"Installing application in namespace %s using chart %s\",\n+        namespace, chartRef));\n+\n+    // build helm install command\n+    StringBuffer installCmd = new StringBuffer(\"helm install \")\n+        .append(params.getReleaseName()).append(\" \").append(chartRef)\n+        .append(\" --namespace \").append(params.getNamespace());\n \n-  public Helm values(HashMap<String, Object> values) {\n-    this.values = values;\n-    return this;\n-  }\n+    // add all the parameters\n+    appendValues(params.getValues(), installCmd);\n \n-  public String getChartName() {\n-    return chartName;\n-  }\n+    installCmd.append(\" && helm list\");\n+    // run the command\n+    return exec(installCmd.toString());\n \n-  public String getReleaseName() {\n-    return releaseName;\n   }\n \n-  public String getNamespace() {\n-    return namespace;\n+  /**\n+   * upgrade a helm release\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean upgrade(HelmParams params) {\n+    String namespace = params.getNamespace();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure releaseName is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getChartDir())\n+        .as(\"make sure chart dir is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    //chart reference to be used in helm upgrade\n+    String chartDir = params.getChartDir();\n+\n+    logger.info(String.format(\"Upgrade application in namespace %s using chart %s\",\n+        namespace, chartDir));\n+\n+    // build helm upgrade command\n+    StringBuffer upgradeCmd = new StringBuffer(\"helm upgrade \")\n+        .append(params.getReleaseName()).append(\" \").append(chartDir)\n+        .append(\" --namespace \").append(params.getNamespace());\n+\n+    // add all the parameters\n+    appendValues(params.getValues(), upgradeCmd);\n+\n+    upgradeCmd.append(\" && helm list\");\n+    // run the command\n+    return exec(upgradeCmd.toString());\n   }\n \n-  public String getRepoUrl() {\n-    return repoUrl;\n+  /**\n+   * uninstall a helm release", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjMxNDU1OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Helm.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMToyNzoxOVrOGAt4SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMToyNzoxOVrOGAt4SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwNDg3Mg==", "bodyText": "cap, period", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r403404872", "createdAt": "2020-04-04T01:27:19Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Helm.java", "diffHunk": "@@ -5,86 +5,175 @@\n \n import java.util.HashMap;\n \n-import oracle.weblogic.kubernetes.extensions.LoggedTest;\n-\n-public class Helm implements LoggedTest {\n-\n-  private String chartName;\n-  private String releaseName;\n-  private String namespace;\n-  private String repoUrl;\n-  private HashMap<String, Object> values;\n-\n-  public Helm chartName(String chartName) {\n-    this.chartName = chartName;\n-    return this;\n-  }\n-\n-  public Helm releaseName(String releaseName) {\n-    this.releaseName = releaseName;\n-    return this;\n-  }\n-\n-  public Helm namespace(String namespace) {\n-    this.namespace = namespace;\n-    return this;\n-  }\n-\n-  public Helm repoUrl(String repoUrl) {\n-    this.repoUrl = repoUrl;\n-    return this;\n-  }\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class Helm {\n+\n+  /**\n+   * install helm chart\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean install(HelmParams params) {\n+    String namespace = params.getNamespace();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure releaseName is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getRepoUrl() != null && params.getChartName() == null)\n+        .as(\"make sure chart name is not empty or null when repo url is provided\")\n+        .isFalse();\n+\n+    assertThat(params.getRepoUrl() == null && params.getChartDir() == null)\n+        .as(\"make sure repo url, chart name and chart dir are not empty or null. \"\n+            + \"repo url, chart name or chart dir must be provided\")\n+        .isFalse();\n+\n+    //chart reference to be used in helm install\n+    String chartRef = params.getChartDir();\n+\n+    // use repo url as chart reference if provided\n+    if (params.getChartName() != null && params.getRepoUrl() != null) {\n+      Helm.addRepo(params.getChartName(), params.getRepoUrl());\n+      chartRef = params.getRepoUrl();\n+    }\n+\n+    logger.info(String.format(\"Installing application in namespace %s using chart %s\",\n+        namespace, chartRef));\n+\n+    // build helm install command\n+    StringBuffer installCmd = new StringBuffer(\"helm install \")\n+        .append(params.getReleaseName()).append(\" \").append(chartRef)\n+        .append(\" --namespace \").append(params.getNamespace());\n \n-  public Helm values(HashMap<String, Object> values) {\n-    this.values = values;\n-    return this;\n-  }\n+    // add all the parameters\n+    appendValues(params.getValues(), installCmd);\n \n-  public String getChartName() {\n-    return chartName;\n-  }\n+    installCmd.append(\" && helm list\");\n+    // run the command\n+    return exec(installCmd.toString());\n \n-  public String getReleaseName() {\n-    return releaseName;\n   }\n \n-  public String getNamespace() {\n-    return namespace;\n+  /**\n+   * upgrade a helm release\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean upgrade(HelmParams params) {\n+    String namespace = params.getNamespace();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure releaseName is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getChartDir())\n+        .as(\"make sure chart dir is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    //chart reference to be used in helm upgrade\n+    String chartDir = params.getChartDir();\n+\n+    logger.info(String.format(\"Upgrade application in namespace %s using chart %s\",\n+        namespace, chartDir));\n+\n+    // build helm upgrade command\n+    StringBuffer upgradeCmd = new StringBuffer(\"helm upgrade \")\n+        .append(params.getReleaseName()).append(\" \").append(chartDir)\n+        .append(\" --namespace \").append(params.getNamespace());\n+\n+    // add all the parameters\n+    appendValues(params.getValues(), upgradeCmd);\n+\n+    upgradeCmd.append(\" && helm list\");\n+    // run the command\n+    return exec(upgradeCmd.toString());\n   }\n \n-  public String getRepoUrl() {\n-    return repoUrl;\n+  /**\n+   * uninstall a helm release\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean uninstall(HelmParams params) {\n+    // assertions for required parameters\n+    assertThat(params.getNamespace())\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure releaseName is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    return exec(\"helm uninstall \" + params.getReleaseName()\n+        + \" -n \" + params.getNamespace());\n   }\n \n-  public HashMap<String, Object> getValues() {\n-    return values;\n+  /**\n+   * Add a chart repository\n+   * @param chartName the name of the chart\n+   * @param repoUrl reposiroty url\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean addRepo(String chartName, String repoUrl) {\n+    String addRepoCmd = \"helm add repo \" + chartName + \" \" + repoUrl;\n+    return exec(addRepoCmd);\n   }\n \n-  public boolean install() {\n-    StringBuffer installCmd = new StringBuffer(\"helm install \")\n-                              .append(releaseName).append(\" \").append(chartName);\n+  /**\n+   * append the values to the given string buffer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjMxNDc4OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Helm.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMToyNzoyOVrOGAt4ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMToyNzoyOVrOGAt4ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwNDkwMQ==", "bodyText": "period", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r403404901", "createdAt": "2020-04-04T01:27:29Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Helm.java", "diffHunk": "@@ -5,86 +5,175 @@\n \n import java.util.HashMap;\n \n-import oracle.weblogic.kubernetes.extensions.LoggedTest;\n-\n-public class Helm implements LoggedTest {\n-\n-  private String chartName;\n-  private String releaseName;\n-  private String namespace;\n-  private String repoUrl;\n-  private HashMap<String, Object> values;\n-\n-  public Helm chartName(String chartName) {\n-    this.chartName = chartName;\n-    return this;\n-  }\n-\n-  public Helm releaseName(String releaseName) {\n-    this.releaseName = releaseName;\n-    return this;\n-  }\n-\n-  public Helm namespace(String namespace) {\n-    this.namespace = namespace;\n-    return this;\n-  }\n-\n-  public Helm repoUrl(String repoUrl) {\n-    this.repoUrl = repoUrl;\n-    return this;\n-  }\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class Helm {\n+\n+  /**\n+   * install helm chart\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean install(HelmParams params) {\n+    String namespace = params.getNamespace();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure releaseName is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getRepoUrl() != null && params.getChartName() == null)\n+        .as(\"make sure chart name is not empty or null when repo url is provided\")\n+        .isFalse();\n+\n+    assertThat(params.getRepoUrl() == null && params.getChartDir() == null)\n+        .as(\"make sure repo url, chart name and chart dir are not empty or null. \"\n+            + \"repo url, chart name or chart dir must be provided\")\n+        .isFalse();\n+\n+    //chart reference to be used in helm install\n+    String chartRef = params.getChartDir();\n+\n+    // use repo url as chart reference if provided\n+    if (params.getChartName() != null && params.getRepoUrl() != null) {\n+      Helm.addRepo(params.getChartName(), params.getRepoUrl());\n+      chartRef = params.getRepoUrl();\n+    }\n+\n+    logger.info(String.format(\"Installing application in namespace %s using chart %s\",\n+        namespace, chartRef));\n+\n+    // build helm install command\n+    StringBuffer installCmd = new StringBuffer(\"helm install \")\n+        .append(params.getReleaseName()).append(\" \").append(chartRef)\n+        .append(\" --namespace \").append(params.getNamespace());\n \n-  public Helm values(HashMap<String, Object> values) {\n-    this.values = values;\n-    return this;\n-  }\n+    // add all the parameters\n+    appendValues(params.getValues(), installCmd);\n \n-  public String getChartName() {\n-    return chartName;\n-  }\n+    installCmd.append(\" && helm list\");\n+    // run the command\n+    return exec(installCmd.toString());\n \n-  public String getReleaseName() {\n-    return releaseName;\n   }\n \n-  public String getNamespace() {\n-    return namespace;\n+  /**\n+   * upgrade a helm release\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean upgrade(HelmParams params) {\n+    String namespace = params.getNamespace();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure releaseName is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getChartDir())\n+        .as(\"make sure chart dir is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    //chart reference to be used in helm upgrade\n+    String chartDir = params.getChartDir();\n+\n+    logger.info(String.format(\"Upgrade application in namespace %s using chart %s\",\n+        namespace, chartDir));\n+\n+    // build helm upgrade command\n+    StringBuffer upgradeCmd = new StringBuffer(\"helm upgrade \")\n+        .append(params.getReleaseName()).append(\" \").append(chartDir)\n+        .append(\" --namespace \").append(params.getNamespace());\n+\n+    // add all the parameters\n+    appendValues(params.getValues(), upgradeCmd);\n+\n+    upgradeCmd.append(\" && helm list\");\n+    // run the command\n+    return exec(upgradeCmd.toString());\n   }\n \n-  public String getRepoUrl() {\n-    return repoUrl;\n+  /**\n+   * uninstall a helm release\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean uninstall(HelmParams params) {\n+    // assertions for required parameters\n+    assertThat(params.getNamespace())\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure releaseName is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    return exec(\"helm uninstall \" + params.getReleaseName()\n+        + \" -n \" + params.getNamespace());\n   }\n \n-  public HashMap<String, Object> getValues() {\n-    return values;\n+  /**\n+   * Add a chart repository\n+   * @param chartName the name of the chart\n+   * @param repoUrl reposiroty url\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean addRepo(String chartName, String repoUrl) {\n+    String addRepoCmd = \"helm add repo \" + chartName + \" \" + repoUrl;\n+    return exec(addRepoCmd);\n   }\n \n-  public boolean install() {\n-    StringBuffer installCmd = new StringBuffer(\"helm install \")\n-                              .append(releaseName).append(\" \").append(chartName);\n+  /**\n+   * append the values to the given string buffer\n+   * @param values hash map with key, value pairs\n+   * @param command the command to append to\n+   */\n+  private static void appendValues(HashMap<String, Object> values, StringBuffer command) {\n     values.forEach((key, value) ->\n-                    installCmd.append(\" --set \")\n-                              .append(key)\n-                              .append(\"=\")\n-                              .append(value.toString().replaceAll(\"\\\\[\",\"{\").replaceAll(\"\\\\]\",\"}\")));\n-    logger.info(\"Running helm install command \" + installCmd);\n-    return true;\n-  }\n-\n-  public boolean upgrade() {\n-    return true;\n-  }\n-\n-  public boolean delete() {\n-    return true;\n+        command.append(\" --set \\\"\")\n+            .append(key)\n+            .append(\"=\")\n+            .append(value.toString().replaceAll(\"\\\\[\", \"{\").replaceAll(\"\\\\]\", \"}\").replace(\" \",\"\"))\n+            .append(\"\\\"\"));\n   }\n \n-  public boolean addRepo() {\n-    String addRepoCmd = \"helm add repo \" + chartName + \" \" + repoUrl;\n-    // execute addRepoCmd\n+  /**\n+   * Executes the given command", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 220}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjMxNTQyOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Helm.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMToyODoxMlrOGAt4sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMToyODoxMlrOGAt4sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwNDk3OA==", "bodyText": "nitpick: if this method \"executes\" a command, then it is probably nicer to say \"the command to execute\"", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r403404978", "createdAt": "2020-04-04T01:28:12Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Helm.java", "diffHunk": "@@ -5,86 +5,175 @@\n \n import java.util.HashMap;\n \n-import oracle.weblogic.kubernetes.extensions.LoggedTest;\n-\n-public class Helm implements LoggedTest {\n-\n-  private String chartName;\n-  private String releaseName;\n-  private String namespace;\n-  private String repoUrl;\n-  private HashMap<String, Object> values;\n-\n-  public Helm chartName(String chartName) {\n-    this.chartName = chartName;\n-    return this;\n-  }\n-\n-  public Helm releaseName(String releaseName) {\n-    this.releaseName = releaseName;\n-    return this;\n-  }\n-\n-  public Helm namespace(String namespace) {\n-    this.namespace = namespace;\n-    return this;\n-  }\n-\n-  public Helm repoUrl(String repoUrl) {\n-    this.repoUrl = repoUrl;\n-    return this;\n-  }\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class Helm {\n+\n+  /**\n+   * install helm chart\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean install(HelmParams params) {\n+    String namespace = params.getNamespace();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure releaseName is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getRepoUrl() != null && params.getChartName() == null)\n+        .as(\"make sure chart name is not empty or null when repo url is provided\")\n+        .isFalse();\n+\n+    assertThat(params.getRepoUrl() == null && params.getChartDir() == null)\n+        .as(\"make sure repo url, chart name and chart dir are not empty or null. \"\n+            + \"repo url, chart name or chart dir must be provided\")\n+        .isFalse();\n+\n+    //chart reference to be used in helm install\n+    String chartRef = params.getChartDir();\n+\n+    // use repo url as chart reference if provided\n+    if (params.getChartName() != null && params.getRepoUrl() != null) {\n+      Helm.addRepo(params.getChartName(), params.getRepoUrl());\n+      chartRef = params.getRepoUrl();\n+    }\n+\n+    logger.info(String.format(\"Installing application in namespace %s using chart %s\",\n+        namespace, chartRef));\n+\n+    // build helm install command\n+    StringBuffer installCmd = new StringBuffer(\"helm install \")\n+        .append(params.getReleaseName()).append(\" \").append(chartRef)\n+        .append(\" --namespace \").append(params.getNamespace());\n \n-  public Helm values(HashMap<String, Object> values) {\n-    this.values = values;\n-    return this;\n-  }\n+    // add all the parameters\n+    appendValues(params.getValues(), installCmd);\n \n-  public String getChartName() {\n-    return chartName;\n-  }\n+    installCmd.append(\" && helm list\");\n+    // run the command\n+    return exec(installCmd.toString());\n \n-  public String getReleaseName() {\n-    return releaseName;\n   }\n \n-  public String getNamespace() {\n-    return namespace;\n+  /**\n+   * upgrade a helm release\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean upgrade(HelmParams params) {\n+    String namespace = params.getNamespace();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure releaseName is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getChartDir())\n+        .as(\"make sure chart dir is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    //chart reference to be used in helm upgrade\n+    String chartDir = params.getChartDir();\n+\n+    logger.info(String.format(\"Upgrade application in namespace %s using chart %s\",\n+        namespace, chartDir));\n+\n+    // build helm upgrade command\n+    StringBuffer upgradeCmd = new StringBuffer(\"helm upgrade \")\n+        .append(params.getReleaseName()).append(\" \").append(chartDir)\n+        .append(\" --namespace \").append(params.getNamespace());\n+\n+    // add all the parameters\n+    appendValues(params.getValues(), upgradeCmd);\n+\n+    upgradeCmd.append(\" && helm list\");\n+    // run the command\n+    return exec(upgradeCmd.toString());\n   }\n \n-  public String getRepoUrl() {\n-    return repoUrl;\n+  /**\n+   * uninstall a helm release\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean uninstall(HelmParams params) {\n+    // assertions for required parameters\n+    assertThat(params.getNamespace())\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure releaseName is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    return exec(\"helm uninstall \" + params.getReleaseName()\n+        + \" -n \" + params.getNamespace());\n   }\n \n-  public HashMap<String, Object> getValues() {\n-    return values;\n+  /**\n+   * Add a chart repository\n+   * @param chartName the name of the chart\n+   * @param repoUrl reposiroty url\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean addRepo(String chartName, String repoUrl) {\n+    String addRepoCmd = \"helm add repo \" + chartName + \" \" + repoUrl;\n+    return exec(addRepoCmd);\n   }\n \n-  public boolean install() {\n-    StringBuffer installCmd = new StringBuffer(\"helm install \")\n-                              .append(releaseName).append(\" \").append(chartName);\n+  /**\n+   * append the values to the given string buffer\n+   * @param values hash map with key, value pairs\n+   * @param command the command to append to\n+   */\n+  private static void appendValues(HashMap<String, Object> values, StringBuffer command) {\n     values.forEach((key, value) ->\n-                    installCmd.append(\" --set \")\n-                              .append(key)\n-                              .append(\"=\")\n-                              .append(value.toString().replaceAll(\"\\\\[\",\"{\").replaceAll(\"\\\\]\",\"}\")));\n-    logger.info(\"Running helm install command \" + installCmd);\n-    return true;\n-  }\n-\n-  public boolean upgrade() {\n-    return true;\n-  }\n-\n-  public boolean delete() {\n-    return true;\n+        command.append(\" --set \\\"\")\n+            .append(key)\n+            .append(\"=\")\n+            .append(value.toString().replaceAll(\"\\\\[\", \"{\").replaceAll(\"\\\\]\", \"}\").replace(\" \",\"\"))\n+            .append(\"\\\"\"));\n   }\n \n-  public boolean addRepo() {\n-    String addRepoCmd = \"helm add repo \" + chartName + \" \" + repoUrl;\n-    // execute addRepoCmd\n+  /**\n+   * Executes the given command\n+   * @param command the command to run", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 221}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjMxNjc1OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Helm.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMToyOTowNlrOGAt5SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDowNTozMVrOGBn4RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwNTEyOA==", "bodyText": "These feel like the should maybe be debug level messages, not info\n@rjeberhard @ddsharpe what do you think?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r403405128", "createdAt": "2020-04-04T01:29:06Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Helm.java", "diffHunk": "@@ -5,86 +5,175 @@\n \n import java.util.HashMap;\n \n-import oracle.weblogic.kubernetes.extensions.LoggedTest;\n-\n-public class Helm implements LoggedTest {\n-\n-  private String chartName;\n-  private String releaseName;\n-  private String namespace;\n-  private String repoUrl;\n-  private HashMap<String, Object> values;\n-\n-  public Helm chartName(String chartName) {\n-    this.chartName = chartName;\n-    return this;\n-  }\n-\n-  public Helm releaseName(String releaseName) {\n-    this.releaseName = releaseName;\n-    return this;\n-  }\n-\n-  public Helm namespace(String namespace) {\n-    this.namespace = namespace;\n-    return this;\n-  }\n-\n-  public Helm repoUrl(String repoUrl) {\n-    this.repoUrl = repoUrl;\n-    return this;\n-  }\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class Helm {\n+\n+  /**\n+   * install helm chart\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean install(HelmParams params) {\n+    String namespace = params.getNamespace();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure releaseName is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getRepoUrl() != null && params.getChartName() == null)\n+        .as(\"make sure chart name is not empty or null when repo url is provided\")\n+        .isFalse();\n+\n+    assertThat(params.getRepoUrl() == null && params.getChartDir() == null)\n+        .as(\"make sure repo url, chart name and chart dir are not empty or null. \"\n+            + \"repo url, chart name or chart dir must be provided\")\n+        .isFalse();\n+\n+    //chart reference to be used in helm install\n+    String chartRef = params.getChartDir();\n+\n+    // use repo url as chart reference if provided\n+    if (params.getChartName() != null && params.getRepoUrl() != null) {\n+      Helm.addRepo(params.getChartName(), params.getRepoUrl());\n+      chartRef = params.getRepoUrl();\n+    }\n+\n+    logger.info(String.format(\"Installing application in namespace %s using chart %s\",\n+        namespace, chartRef));\n+\n+    // build helm install command\n+    StringBuffer installCmd = new StringBuffer(\"helm install \")\n+        .append(params.getReleaseName()).append(\" \").append(chartRef)\n+        .append(\" --namespace \").append(params.getNamespace());\n \n-  public Helm values(HashMap<String, Object> values) {\n-    this.values = values;\n-    return this;\n-  }\n+    // add all the parameters\n+    appendValues(params.getValues(), installCmd);\n \n-  public String getChartName() {\n-    return chartName;\n-  }\n+    installCmd.append(\" && helm list\");\n+    // run the command\n+    return exec(installCmd.toString());\n \n-  public String getReleaseName() {\n-    return releaseName;\n   }\n \n-  public String getNamespace() {\n-    return namespace;\n+  /**\n+   * upgrade a helm release\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean upgrade(HelmParams params) {\n+    String namespace = params.getNamespace();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure releaseName is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getChartDir())\n+        .as(\"make sure chart dir is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    //chart reference to be used in helm upgrade\n+    String chartDir = params.getChartDir();\n+\n+    logger.info(String.format(\"Upgrade application in namespace %s using chart %s\",\n+        namespace, chartDir));\n+\n+    // build helm upgrade command\n+    StringBuffer upgradeCmd = new StringBuffer(\"helm upgrade \")\n+        .append(params.getReleaseName()).append(\" \").append(chartDir)\n+        .append(\" --namespace \").append(params.getNamespace());\n+\n+    // add all the parameters\n+    appendValues(params.getValues(), upgradeCmd);\n+\n+    upgradeCmd.append(\" && helm list\");\n+    // run the command\n+    return exec(upgradeCmd.toString());\n   }\n \n-  public String getRepoUrl() {\n-    return repoUrl;\n+  /**\n+   * uninstall a helm release\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean uninstall(HelmParams params) {\n+    // assertions for required parameters\n+    assertThat(params.getNamespace())\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure releaseName is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    return exec(\"helm uninstall \" + params.getReleaseName()\n+        + \" -n \" + params.getNamespace());\n   }\n \n-  public HashMap<String, Object> getValues() {\n-    return values;\n+  /**\n+   * Add a chart repository\n+   * @param chartName the name of the chart\n+   * @param repoUrl reposiroty url\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean addRepo(String chartName, String repoUrl) {\n+    String addRepoCmd = \"helm add repo \" + chartName + \" \" + repoUrl;\n+    return exec(addRepoCmd);\n   }\n \n-  public boolean install() {\n-    StringBuffer installCmd = new StringBuffer(\"helm install \")\n-                              .append(releaseName).append(\" \").append(chartName);\n+  /**\n+   * append the values to the given string buffer\n+   * @param values hash map with key, value pairs\n+   * @param command the command to append to\n+   */\n+  private static void appendValues(HashMap<String, Object> values, StringBuffer command) {\n     values.forEach((key, value) ->\n-                    installCmd.append(\" --set \")\n-                              .append(key)\n-                              .append(\"=\")\n-                              .append(value.toString().replaceAll(\"\\\\[\",\"{\").replaceAll(\"\\\\]\",\"}\")));\n-    logger.info(\"Running helm install command \" + installCmd);\n-    return true;\n-  }\n-\n-  public boolean upgrade() {\n-    return true;\n-  }\n-\n-  public boolean delete() {\n-    return true;\n+        command.append(\" --set \\\"\")\n+            .append(key)\n+            .append(\"=\")\n+            .append(value.toString().replaceAll(\"\\\\[\", \"{\").replaceAll(\"\\\\]\", \"}\").replace(\" \",\"\"))\n+            .append(\"\\\"\"));\n   }\n \n-  public boolean addRepo() {\n-    String addRepoCmd = \"helm add repo \" + chartName + \" \" + repoUrl;\n-    // execute addRepoCmd\n+  /**\n+   * Executes the given command\n+   * @param command the command to run\n+   * @return true on success, false otherwise\n+   */\n+  private static boolean exec(String command) {\n+    logger.info(\"Running command - \\n\" + command);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 225}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1NTE0MA==", "bodyText": "Let's get some tests running and then prune these back.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r404355140", "createdAt": "2020-04-06T20:05:31Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Helm.java", "diffHunk": "@@ -5,86 +5,175 @@\n \n import java.util.HashMap;\n \n-import oracle.weblogic.kubernetes.extensions.LoggedTest;\n-\n-public class Helm implements LoggedTest {\n-\n-  private String chartName;\n-  private String releaseName;\n-  private String namespace;\n-  private String repoUrl;\n-  private HashMap<String, Object> values;\n-\n-  public Helm chartName(String chartName) {\n-    this.chartName = chartName;\n-    return this;\n-  }\n-\n-  public Helm releaseName(String releaseName) {\n-    this.releaseName = releaseName;\n-    return this;\n-  }\n-\n-  public Helm namespace(String namespace) {\n-    this.namespace = namespace;\n-    return this;\n-  }\n-\n-  public Helm repoUrl(String repoUrl) {\n-    this.repoUrl = repoUrl;\n-    return this;\n-  }\n+import oracle.weblogic.kubernetes.utils.ExecCommand;\n+import oracle.weblogic.kubernetes.utils.ExecResult;\n+\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class Helm {\n+\n+  /**\n+   * install helm chart\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean install(HelmParams params) {\n+    String namespace = params.getNamespace();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure releaseName is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getRepoUrl() != null && params.getChartName() == null)\n+        .as(\"make sure chart name is not empty or null when repo url is provided\")\n+        .isFalse();\n+\n+    assertThat(params.getRepoUrl() == null && params.getChartDir() == null)\n+        .as(\"make sure repo url, chart name and chart dir are not empty or null. \"\n+            + \"repo url, chart name or chart dir must be provided\")\n+        .isFalse();\n+\n+    //chart reference to be used in helm install\n+    String chartRef = params.getChartDir();\n+\n+    // use repo url as chart reference if provided\n+    if (params.getChartName() != null && params.getRepoUrl() != null) {\n+      Helm.addRepo(params.getChartName(), params.getRepoUrl());\n+      chartRef = params.getRepoUrl();\n+    }\n+\n+    logger.info(String.format(\"Installing application in namespace %s using chart %s\",\n+        namespace, chartRef));\n+\n+    // build helm install command\n+    StringBuffer installCmd = new StringBuffer(\"helm install \")\n+        .append(params.getReleaseName()).append(\" \").append(chartRef)\n+        .append(\" --namespace \").append(params.getNamespace());\n \n-  public Helm values(HashMap<String, Object> values) {\n-    this.values = values;\n-    return this;\n-  }\n+    // add all the parameters\n+    appendValues(params.getValues(), installCmd);\n \n-  public String getChartName() {\n-    return chartName;\n-  }\n+    installCmd.append(\" && helm list\");\n+    // run the command\n+    return exec(installCmd.toString());\n \n-  public String getReleaseName() {\n-    return releaseName;\n   }\n \n-  public String getNamespace() {\n-    return namespace;\n+  /**\n+   * upgrade a helm release\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean upgrade(HelmParams params) {\n+    String namespace = params.getNamespace();\n+\n+    // assertions for required parameters\n+    assertThat(namespace)\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure releaseName is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getChartDir())\n+        .as(\"make sure chart dir is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    //chart reference to be used in helm upgrade\n+    String chartDir = params.getChartDir();\n+\n+    logger.info(String.format(\"Upgrade application in namespace %s using chart %s\",\n+        namespace, chartDir));\n+\n+    // build helm upgrade command\n+    StringBuffer upgradeCmd = new StringBuffer(\"helm upgrade \")\n+        .append(params.getReleaseName()).append(\" \").append(chartDir)\n+        .append(\" --namespace \").append(params.getNamespace());\n+\n+    // add all the parameters\n+    appendValues(params.getValues(), upgradeCmd);\n+\n+    upgradeCmd.append(\" && helm list\");\n+    // run the command\n+    return exec(upgradeCmd.toString());\n   }\n \n-  public String getRepoUrl() {\n-    return repoUrl;\n+  /**\n+   * uninstall a helm release\n+   * @param params the parameters to helm as values\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean uninstall(HelmParams params) {\n+    // assertions for required parameters\n+    assertThat(params.getNamespace())\n+        .as(\"make sure namespace is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    assertThat(params.getReleaseName())\n+        .as(\"make sure releaseName is not empty or null\")\n+        .isNotNull()\n+        .isNotEmpty();\n+\n+    return exec(\"helm uninstall \" + params.getReleaseName()\n+        + \" -n \" + params.getNamespace());\n   }\n \n-  public HashMap<String, Object> getValues() {\n-    return values;\n+  /**\n+   * Add a chart repository\n+   * @param chartName the name of the chart\n+   * @param repoUrl reposiroty url\n+   * @return true on success, false otherwise\n+   */\n+  public static boolean addRepo(String chartName, String repoUrl) {\n+    String addRepoCmd = \"helm add repo \" + chartName + \" \" + repoUrl;\n+    return exec(addRepoCmd);\n   }\n \n-  public boolean install() {\n-    StringBuffer installCmd = new StringBuffer(\"helm install \")\n-                              .append(releaseName).append(\" \").append(chartName);\n+  /**\n+   * append the values to the given string buffer\n+   * @param values hash map with key, value pairs\n+   * @param command the command to append to\n+   */\n+  private static void appendValues(HashMap<String, Object> values, StringBuffer command) {\n     values.forEach((key, value) ->\n-                    installCmd.append(\" --set \")\n-                              .append(key)\n-                              .append(\"=\")\n-                              .append(value.toString().replaceAll(\"\\\\[\",\"{\").replaceAll(\"\\\\]\",\"}\")));\n-    logger.info(\"Running helm install command \" + installCmd);\n-    return true;\n-  }\n-\n-  public boolean upgrade() {\n-    return true;\n-  }\n-\n-  public boolean delete() {\n-    return true;\n+        command.append(\" --set \\\"\")\n+            .append(key)\n+            .append(\"=\")\n+            .append(value.toString().replaceAll(\"\\\\[\", \"{\").replaceAll(\"\\\\]\", \"}\").replace(\" \",\"\"))\n+            .append(\"\\\"\"));\n   }\n \n-  public boolean addRepo() {\n-    String addRepoCmd = \"helm add repo \" + chartName + \" \" + repoUrl;\n-    // execute addRepoCmd\n+  /**\n+   * Executes the given command\n+   * @param command the command to run\n+   * @return true on success, false otherwise\n+   */\n+  private static boolean exec(String command) {\n+    logger.info(\"Running command - \\n\" + command);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwNTEyOA=="}, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 225}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjMxNjgyOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/HelmParams.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMToyOToxN1rOGAt5UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMToyOToxN1rOGAt5UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwNTEzNg==", "bodyText": "capital H", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r403405136", "createdAt": "2020-04-04T01:29:17Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/HelmParams.java", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.actions.impl.primitive;\n+\n+import java.util.HashMap;\n+\n+// All common parameters needed to install a helm application", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjMxNzE5OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/HelmParams.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMToyOTo0NFrOGAt5gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjoxNDo0OVrOGBfaxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwNTE4NQ==", "bodyText": "why an abstract class?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r403405185", "createdAt": "2020-04-04T01:29:44Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/HelmParams.java", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.actions.impl.primitive;\n+\n+import java.util.HashMap;\n+\n+// All common parameters needed to install a helm application\n+\n+public abstract class HelmParams {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIxNjUxNg==", "bodyText": "Now as I removed inheritance, don't need the abstract method in this class anymore and this class is not abstract now.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r404216516", "createdAt": "2020-04-06T16:14:49Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/HelmParams.java", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.actions.impl.primitive;\n+\n+import java.util.HashMap;\n+\n+// All common parameters needed to install a helm application\n+\n+public abstract class HelmParams {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwNTE4NQ=="}, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNzczNDY4OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNDozMTo1MFrOGBao6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNDozMTo1MFrOGBao6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEzODIxNw==", "bodyText": "This is the part I was discussing in the channel... Depending on the sort of cluster, the image may need to be pushed or not.  But, I guess this can wait and need not be part of this pull request.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r404138217", "createdAt": "2020-04-06T14:31:50Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -65,69 +64,89 @@ public void testInstallingOperator() {\n     // the kubernetes deployment.  this will complete quickly, and will either be\n     // successful or not.\n \n-    // get a new unique namespace\n-    final String namespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+    // get a new unique opNamespace\n+    final String opNamespace = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", opNamespace));\n+\n+    final String domainNamespace1 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n+        \"Failed to create unique namespace due to ApiException\");\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace1));\n+\n+    final String domainNamespace2 = assertDoesNotThrow(TestActions::createUniqueNamespace,\n         \"Failed to create unique namespace due to ApiException\");\n-    logger.info(String.format(\"Got a new namespace called %s\", namespace));\n+    logger.info(String.format(\"Got a new namespace called %s\", domainNamespace2));\n \n-    // Create a service account for the unique namespace\n-    final String serviceAccountName = namespace + \"-sa\";\n-    assertDoesNotThrow(\n-        () -> TestActions.createServiceAccount(new V1ServiceAccount()\n-            .metadata(new V1ObjectMeta().namespace(namespace).name(serviceAccountName))));\n+    // Create a service account for the unique opNamespace\n+    final String serviceAccountName = opNamespace + \"-sa\";\n+    assertDoesNotThrow(() -> TestActions.createServiceAccount(new V1ServiceAccount()\n+        .metadata(new V1ObjectMeta().namespace(opNamespace).name(serviceAccountName))));\n     logger.info(\"Created service account: \" + serviceAccountName);\n \n     OperatorParams opParams =\n         new OperatorParams().releaseName(\"weblogic-operator\")\n-            .namespace(namespace)\n-            .image(\"weblogic-kubernetes-operator:test_itsimpleoperator\")\n-            .domainNamespaces(Arrays.asList(\"domainns1\", \"domainns2\"))\n-            .serviceAccount(\"opns1-sa\");\n+            .namespace(opNamespace)\n+            .chartDir(\"../kubernetes/charts/weblogic-operator\")\n+            .image(\"phx.ocir.io/weblogick8s/weblogic-kubernetes-operator:develop\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNzc1Njk4OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNDozNjoxNVrOGBa2ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjoxNjoxMlrOGBfeVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE0MTczMQ==", "bodyText": "You don't need the formatting here (the hyphen)... that will generated Javadoc that starts with this symbol.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r404141731", "createdAt": "2020-04-06T14:36:15Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -64,24 +64,24 @@ public static boolean scaleDomain(String domainUID, String clusterName, int numO\n   }\n \n   /**\n-   * Delete the Operator release.\n+   * Uninstall the Operator release.\n    *\n    * @param name      operator release name\n    * @param namespace the name of the namespace\n    * @return true on success, false otherwise\n    */\n \n-  public static boolean deleteOperator(String name, String namespace) {\n-    return Operator.delete(name, namespace);\n+  public static boolean uninstallOperator(OperatorParams params) {\n+    return Operator.uninstall(params);\n   }\n \n   // ----------------------   domain  -----------------------------------\n \n   /**\n    * Create domain custom resource from the given domain yaml file.\n    *\n-   * @param domainUID - unique domain identifier\n-   * @param namespace - name of namespace\n+   * @param domainUID  - unique domain identifier", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIxNzQyOA==", "bodyText": "removed the formatting", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r404217428", "createdAt": "2020-04-06T16:16:12Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -64,24 +64,24 @@ public static boolean scaleDomain(String domainUID, String clusterName, int numO\n   }\n \n   /**\n-   * Delete the Operator release.\n+   * Uninstall the Operator release.\n    *\n    * @param name      operator release name\n    * @param namespace the name of the namespace\n    * @return true on success, false otherwise\n    */\n \n-  public static boolean deleteOperator(String name, String namespace) {\n-    return Operator.delete(name, namespace);\n+  public static boolean uninstallOperator(OperatorParams params) {\n+    return Operator.uninstall(params);\n   }\n \n   // ----------------------   domain  -----------------------------------\n \n   /**\n    * Create domain custom resource from the given domain yaml file.\n    *\n-   * @param domainUID - unique domain identifier\n-   * @param namespace - name of namespace\n+   * @param domainUID  - unique domain identifier", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE0MTczMQ=="}, "originalCommit": {"oid": "058add457c39d2dea572e95fe4ce5fad091016b0"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTA3OTM3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDowMzowMVrOGBnzLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDo1NTowMFrOGBphJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1MzgzOQ==", "bodyText": "what class should it be?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r404353839", "createdAt": "2020-04-06T20:03:01Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -116,18 +148,70 @@ public void testInstallingOperator() {\n         // and here we can set the maximum time we are prepared to wait\n         .await().atMost(5, MINUTES)\n         // operatorIsRunning() is one of our custom, reusable assertions\n-        .until(operatorIsRunning(namespace));\n-\n-    // Delete service account from unique namespace\n-    assertDoesNotThrow(\n-        () -> TestActions.deleteServiceAccount(new V1ServiceAccount()\n-            .metadata(new V1ObjectMeta().namespace(namespace).name(serviceAccountName))));\n-    logger.info(\"Deleted service account \" + serviceAccountName);\n-\n-    // Delete namespace\n-    assertDoesNotThrow(\n-        () -> TestActions.deleteNamespace(namespace));\n-    logger.info(\"Deleted namespace: \" + namespace);\n+        .until(operatorIsRunning(opNamespace));\n+\n+  }\n+\n+  @AfterEach\n+  public void tearDown() {\n+    // uninstall operator release\n+    if (opHelmParams != null) {\n+      assertThat(uninstallOperator(opHelmParams))\n+          .as(\"Test uninstallOperator returns true\")\n+          .withFailMessage(\"uninstallOperator() did not return true\")\n+          .isTrue();\n+    }\n+\n+    // Delete service account from unique opNamespace\n+    if (serviceAccount != null) {\n+      assertThatCode(\n+          () -> deleteServiceAccount(serviceAccount))\n+          .as(\"Test that deleteServiceAccount doesn not throw an exception\")\n+          .withFailMessage(\"deleteServiceAccount() threw an exception\")\n+          .doesNotThrowAnyException();\n+    }\n+    // Delete domain namespaces\n+    if (domainNamespace1 != null) {\n+      assertThatCode(\n+          () -> deleteNamespace(domainNamespace1))\n+          .as(\"Test that deleteNamespace doesn not throw an exception\")\n+          .withFailMessage(\"deleteNamespace() threw an exception\")\n+          .doesNotThrowAnyException();\n+      logger.info(\"Deleted namespace: \" + domainNamespace1);\n+    }\n+\n+    if (domainNamespace2 != null) {\n+      assertThatCode(\n+          () -> deleteNamespace(domainNamespace2))\n+          .as(\"Test that deleteNamespace doesn not throw an exception\")\n+          .withFailMessage(\"deleteNamespace() threw an exception\")\n+          .doesNotThrowAnyException();\n+      logger.info(\"Deleted namespace: \" + domainNamespace2);\n+    }\n+\n+    // Delete opNamespace\n+    if (opNamespace != null) {\n+      assertThatCode(\n+          () -> deleteNamespace(opNamespace))\n+          .as(\"Test that deleteNamespace doesn not throw an exception\")\n+          .withFailMessage(\"deleteNamespace() threw an exception\")\n+          .doesNotThrowAnyException();\n+      logger.info(\"Deleted namespace: \" + opNamespace);\n+    }\n+\n+  }\n+\n+  private String createUniqueNamespaceInTryBlock() {\n+    String namespace = null;\n+    try {\n+      namespace = createUniqueNamespace();\n+    } catch (Exception e) {\n+      assertThat(e)\n+          .as(\"Test that createUniqueNamespace does not throw an exception\")\n+          .withFailMessage(\"createUniqueNamespace() threw an unexpected exception\")\n+          .isNotInstanceOf(Exception.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ccf1c2315351f5912ff421efaf94c724dfe23c"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1OTExNg==", "bodyText": "Oh, I just realized what this is... You're forcing an assert to fail because e will of course be an exception.  Shouldn't this just wrap the createUniqueNamespece() with the assertDoesNotThrow?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r404359116", "createdAt": "2020-04-06T20:13:02Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -116,18 +148,70 @@ public void testInstallingOperator() {\n         // and here we can set the maximum time we are prepared to wait\n         .await().atMost(5, MINUTES)\n         // operatorIsRunning() is one of our custom, reusable assertions\n-        .until(operatorIsRunning(namespace));\n-\n-    // Delete service account from unique namespace\n-    assertDoesNotThrow(\n-        () -> TestActions.deleteServiceAccount(new V1ServiceAccount()\n-            .metadata(new V1ObjectMeta().namespace(namespace).name(serviceAccountName))));\n-    logger.info(\"Deleted service account \" + serviceAccountName);\n-\n-    // Delete namespace\n-    assertDoesNotThrow(\n-        () -> TestActions.deleteNamespace(namespace));\n-    logger.info(\"Deleted namespace: \" + namespace);\n+        .until(operatorIsRunning(opNamespace));\n+\n+  }\n+\n+  @AfterEach\n+  public void tearDown() {\n+    // uninstall operator release\n+    if (opHelmParams != null) {\n+      assertThat(uninstallOperator(opHelmParams))\n+          .as(\"Test uninstallOperator returns true\")\n+          .withFailMessage(\"uninstallOperator() did not return true\")\n+          .isTrue();\n+    }\n+\n+    // Delete service account from unique opNamespace\n+    if (serviceAccount != null) {\n+      assertThatCode(\n+          () -> deleteServiceAccount(serviceAccount))\n+          .as(\"Test that deleteServiceAccount doesn not throw an exception\")\n+          .withFailMessage(\"deleteServiceAccount() threw an exception\")\n+          .doesNotThrowAnyException();\n+    }\n+    // Delete domain namespaces\n+    if (domainNamespace1 != null) {\n+      assertThatCode(\n+          () -> deleteNamespace(domainNamespace1))\n+          .as(\"Test that deleteNamespace doesn not throw an exception\")\n+          .withFailMessage(\"deleteNamespace() threw an exception\")\n+          .doesNotThrowAnyException();\n+      logger.info(\"Deleted namespace: \" + domainNamespace1);\n+    }\n+\n+    if (domainNamespace2 != null) {\n+      assertThatCode(\n+          () -> deleteNamespace(domainNamespace2))\n+          .as(\"Test that deleteNamespace doesn not throw an exception\")\n+          .withFailMessage(\"deleteNamespace() threw an exception\")\n+          .doesNotThrowAnyException();\n+      logger.info(\"Deleted namespace: \" + domainNamespace2);\n+    }\n+\n+    // Delete opNamespace\n+    if (opNamespace != null) {\n+      assertThatCode(\n+          () -> deleteNamespace(opNamespace))\n+          .as(\"Test that deleteNamespace doesn not throw an exception\")\n+          .withFailMessage(\"deleteNamespace() threw an exception\")\n+          .doesNotThrowAnyException();\n+      logger.info(\"Deleted namespace: \" + opNamespace);\n+    }\n+\n+  }\n+\n+  private String createUniqueNamespaceInTryBlock() {\n+    String namespace = null;\n+    try {\n+      namespace = createUniqueNamespace();\n+    } catch (Exception e) {\n+      assertThat(e)\n+          .as(\"Test that createUniqueNamespace does not throw an exception\")\n+          .withFailMessage(\"createUniqueNamespace() threw an unexpected exception\")\n+          .isNotInstanceOf(Exception.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1MzgzOQ=="}, "originalCommit": {"oid": "21ccf1c2315351f5912ff421efaf94c724dfe23c"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2NjI0Mg==", "bodyText": "createUniqueNamespace() throws ApiException. I am bit confused, why check for instanceOf? It should fail irrespective of any type of exception right?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r404366242", "createdAt": "2020-04-06T20:26:03Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -116,18 +148,70 @@ public void testInstallingOperator() {\n         // and here we can set the maximum time we are prepared to wait\n         .await().atMost(5, MINUTES)\n         // operatorIsRunning() is one of our custom, reusable assertions\n-        .until(operatorIsRunning(namespace));\n-\n-    // Delete service account from unique namespace\n-    assertDoesNotThrow(\n-        () -> TestActions.deleteServiceAccount(new V1ServiceAccount()\n-            .metadata(new V1ObjectMeta().namespace(namespace).name(serviceAccountName))));\n-    logger.info(\"Deleted service account \" + serviceAccountName);\n-\n-    // Delete namespace\n-    assertDoesNotThrow(\n-        () -> TestActions.deleteNamespace(namespace));\n-    logger.info(\"Deleted namespace: \" + namespace);\n+        .until(operatorIsRunning(opNamespace));\n+\n+  }\n+\n+  @AfterEach\n+  public void tearDown() {\n+    // uninstall operator release\n+    if (opHelmParams != null) {\n+      assertThat(uninstallOperator(opHelmParams))\n+          .as(\"Test uninstallOperator returns true\")\n+          .withFailMessage(\"uninstallOperator() did not return true\")\n+          .isTrue();\n+    }\n+\n+    // Delete service account from unique opNamespace\n+    if (serviceAccount != null) {\n+      assertThatCode(\n+          () -> deleteServiceAccount(serviceAccount))\n+          .as(\"Test that deleteServiceAccount doesn not throw an exception\")\n+          .withFailMessage(\"deleteServiceAccount() threw an exception\")\n+          .doesNotThrowAnyException();\n+    }\n+    // Delete domain namespaces\n+    if (domainNamespace1 != null) {\n+      assertThatCode(\n+          () -> deleteNamespace(domainNamespace1))\n+          .as(\"Test that deleteNamespace doesn not throw an exception\")\n+          .withFailMessage(\"deleteNamespace() threw an exception\")\n+          .doesNotThrowAnyException();\n+      logger.info(\"Deleted namespace: \" + domainNamespace1);\n+    }\n+\n+    if (domainNamespace2 != null) {\n+      assertThatCode(\n+          () -> deleteNamespace(domainNamespace2))\n+          .as(\"Test that deleteNamespace doesn not throw an exception\")\n+          .withFailMessage(\"deleteNamespace() threw an exception\")\n+          .doesNotThrowAnyException();\n+      logger.info(\"Deleted namespace: \" + domainNamespace2);\n+    }\n+\n+    // Delete opNamespace\n+    if (opNamespace != null) {\n+      assertThatCode(\n+          () -> deleteNamespace(opNamespace))\n+          .as(\"Test that deleteNamespace doesn not throw an exception\")\n+          .withFailMessage(\"deleteNamespace() threw an exception\")\n+          .doesNotThrowAnyException();\n+      logger.info(\"Deleted namespace: \" + opNamespace);\n+    }\n+\n+  }\n+\n+  private String createUniqueNamespaceInTryBlock() {\n+    String namespace = null;\n+    try {\n+      namespace = createUniqueNamespace();\n+    } catch (Exception e) {\n+      assertThat(e)\n+          .as(\"Test that createUniqueNamespace does not throw an exception\")\n+          .withFailMessage(\"createUniqueNamespace() threw an unexpected exception\")\n+          .isNotInstanceOf(Exception.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1MzgzOQ=="}, "originalCommit": {"oid": "21ccf1c2315351f5912ff421efaf94c724dfe23c"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM4MTk4OQ==", "bodyText": "Just saw Ryan's comment. We can use PR#1537 as this PR is closed, we have the same code.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r404381989", "createdAt": "2020-04-06T20:55:00Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -116,18 +148,70 @@ public void testInstallingOperator() {\n         // and here we can set the maximum time we are prepared to wait\n         .await().atMost(5, MINUTES)\n         // operatorIsRunning() is one of our custom, reusable assertions\n-        .until(operatorIsRunning(namespace));\n-\n-    // Delete service account from unique namespace\n-    assertDoesNotThrow(\n-        () -> TestActions.deleteServiceAccount(new V1ServiceAccount()\n-            .metadata(new V1ObjectMeta().namespace(namespace).name(serviceAccountName))));\n-    logger.info(\"Deleted service account \" + serviceAccountName);\n-\n-    // Delete namespace\n-    assertDoesNotThrow(\n-        () -> TestActions.deleteNamespace(namespace));\n-    logger.info(\"Deleted namespace: \" + namespace);\n+        .until(operatorIsRunning(opNamespace));\n+\n+  }\n+\n+  @AfterEach\n+  public void tearDown() {\n+    // uninstall operator release\n+    if (opHelmParams != null) {\n+      assertThat(uninstallOperator(opHelmParams))\n+          .as(\"Test uninstallOperator returns true\")\n+          .withFailMessage(\"uninstallOperator() did not return true\")\n+          .isTrue();\n+    }\n+\n+    // Delete service account from unique opNamespace\n+    if (serviceAccount != null) {\n+      assertThatCode(\n+          () -> deleteServiceAccount(serviceAccount))\n+          .as(\"Test that deleteServiceAccount doesn not throw an exception\")\n+          .withFailMessage(\"deleteServiceAccount() threw an exception\")\n+          .doesNotThrowAnyException();\n+    }\n+    // Delete domain namespaces\n+    if (domainNamespace1 != null) {\n+      assertThatCode(\n+          () -> deleteNamespace(domainNamespace1))\n+          .as(\"Test that deleteNamespace doesn not throw an exception\")\n+          .withFailMessage(\"deleteNamespace() threw an exception\")\n+          .doesNotThrowAnyException();\n+      logger.info(\"Deleted namespace: \" + domainNamespace1);\n+    }\n+\n+    if (domainNamespace2 != null) {\n+      assertThatCode(\n+          () -> deleteNamespace(domainNamespace2))\n+          .as(\"Test that deleteNamespace doesn not throw an exception\")\n+          .withFailMessage(\"deleteNamespace() threw an exception\")\n+          .doesNotThrowAnyException();\n+      logger.info(\"Deleted namespace: \" + domainNamespace2);\n+    }\n+\n+    // Delete opNamespace\n+    if (opNamespace != null) {\n+      assertThatCode(\n+          () -> deleteNamespace(opNamespace))\n+          .as(\"Test that deleteNamespace doesn not throw an exception\")\n+          .withFailMessage(\"deleteNamespace() threw an exception\")\n+          .doesNotThrowAnyException();\n+      logger.info(\"Deleted namespace: \" + opNamespace);\n+    }\n+\n+  }\n+\n+  private String createUniqueNamespaceInTryBlock() {\n+    String namespace = null;\n+    try {\n+      namespace = createUniqueNamespace();\n+    } catch (Exception e) {\n+      assertThat(e)\n+          .as(\"Test that createUniqueNamespace does not throw an exception\")\n+          .withFailMessage(\"createUniqueNamespace() threw an unexpected exception\")\n+          .isNotInstanceOf(Exception.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1MzgzOQ=="}, "originalCommit": {"oid": "21ccf1c2315351f5912ff421efaf94c724dfe23c"}, "originalPosition": 216}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTA4MzE4OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDowNDowOFrOGBn1iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMDowODozMlrOGBn-QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1NDQ0Mw==", "bodyText": "Why the strange name?  It's because you don't want the same name as TestActions.createUninqueNamespace(), correct :(?  The \"InTryBlock\" portion of the name looks strange.  Can this just be createNamespace()?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r404354443", "createdAt": "2020-04-06T20:04:08Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -116,18 +148,70 @@ public void testInstallingOperator() {\n         // and here we can set the maximum time we are prepared to wait\n         .await().atMost(5, MINUTES)\n         // operatorIsRunning() is one of our custom, reusable assertions\n-        .until(operatorIsRunning(namespace));\n-\n-    // Delete service account from unique namespace\n-    assertDoesNotThrow(\n-        () -> TestActions.deleteServiceAccount(new V1ServiceAccount()\n-            .metadata(new V1ObjectMeta().namespace(namespace).name(serviceAccountName))));\n-    logger.info(\"Deleted service account \" + serviceAccountName);\n-\n-    // Delete namespace\n-    assertDoesNotThrow(\n-        () -> TestActions.deleteNamespace(namespace));\n-    logger.info(\"Deleted namespace: \" + namespace);\n+        .until(operatorIsRunning(opNamespace));\n+\n+  }\n+\n+  @AfterEach\n+  public void tearDown() {\n+    // uninstall operator release\n+    if (opHelmParams != null) {\n+      assertThat(uninstallOperator(opHelmParams))\n+          .as(\"Test uninstallOperator returns true\")\n+          .withFailMessage(\"uninstallOperator() did not return true\")\n+          .isTrue();\n+    }\n+\n+    // Delete service account from unique opNamespace\n+    if (serviceAccount != null) {\n+      assertThatCode(\n+          () -> deleteServiceAccount(serviceAccount))\n+          .as(\"Test that deleteServiceAccount doesn not throw an exception\")\n+          .withFailMessage(\"deleteServiceAccount() threw an exception\")\n+          .doesNotThrowAnyException();\n+    }\n+    // Delete domain namespaces\n+    if (domainNamespace1 != null) {\n+      assertThatCode(\n+          () -> deleteNamespace(domainNamespace1))\n+          .as(\"Test that deleteNamespace doesn not throw an exception\")\n+          .withFailMessage(\"deleteNamespace() threw an exception\")\n+          .doesNotThrowAnyException();\n+      logger.info(\"Deleted namespace: \" + domainNamespace1);\n+    }\n+\n+    if (domainNamespace2 != null) {\n+      assertThatCode(\n+          () -> deleteNamespace(domainNamespace2))\n+          .as(\"Test that deleteNamespace doesn not throw an exception\")\n+          .withFailMessage(\"deleteNamespace() threw an exception\")\n+          .doesNotThrowAnyException();\n+      logger.info(\"Deleted namespace: \" + domainNamespace2);\n+    }\n+\n+    // Delete opNamespace\n+    if (opNamespace != null) {\n+      assertThatCode(\n+          () -> deleteNamespace(opNamespace))\n+          .as(\"Test that deleteNamespace doesn not throw an exception\")\n+          .withFailMessage(\"deleteNamespace() threw an exception\")\n+          .doesNotThrowAnyException();\n+      logger.info(\"Deleted namespace: \" + opNamespace);\n+    }\n+\n+  }\n+\n+  private String createUniqueNamespaceInTryBlock() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ccf1c2315351f5912ff421efaf94c724dfe23c"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1NjY3Mw==", "bodyText": "yes, will change it", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1535#discussion_r404356673", "createdAt": "2020-04-06T20:08:32Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -116,18 +148,70 @@ public void testInstallingOperator() {\n         // and here we can set the maximum time we are prepared to wait\n         .await().atMost(5, MINUTES)\n         // operatorIsRunning() is one of our custom, reusable assertions\n-        .until(operatorIsRunning(namespace));\n-\n-    // Delete service account from unique namespace\n-    assertDoesNotThrow(\n-        () -> TestActions.deleteServiceAccount(new V1ServiceAccount()\n-            .metadata(new V1ObjectMeta().namespace(namespace).name(serviceAccountName))));\n-    logger.info(\"Deleted service account \" + serviceAccountName);\n-\n-    // Delete namespace\n-    assertDoesNotThrow(\n-        () -> TestActions.deleteNamespace(namespace));\n-    logger.info(\"Deleted namespace: \" + namespace);\n+        .until(operatorIsRunning(opNamespace));\n+\n+  }\n+\n+  @AfterEach\n+  public void tearDown() {\n+    // uninstall operator release\n+    if (opHelmParams != null) {\n+      assertThat(uninstallOperator(opHelmParams))\n+          .as(\"Test uninstallOperator returns true\")\n+          .withFailMessage(\"uninstallOperator() did not return true\")\n+          .isTrue();\n+    }\n+\n+    // Delete service account from unique opNamespace\n+    if (serviceAccount != null) {\n+      assertThatCode(\n+          () -> deleteServiceAccount(serviceAccount))\n+          .as(\"Test that deleteServiceAccount doesn not throw an exception\")\n+          .withFailMessage(\"deleteServiceAccount() threw an exception\")\n+          .doesNotThrowAnyException();\n+    }\n+    // Delete domain namespaces\n+    if (domainNamespace1 != null) {\n+      assertThatCode(\n+          () -> deleteNamespace(domainNamespace1))\n+          .as(\"Test that deleteNamespace doesn not throw an exception\")\n+          .withFailMessage(\"deleteNamespace() threw an exception\")\n+          .doesNotThrowAnyException();\n+      logger.info(\"Deleted namespace: \" + domainNamespace1);\n+    }\n+\n+    if (domainNamespace2 != null) {\n+      assertThatCode(\n+          () -> deleteNamespace(domainNamespace2))\n+          .as(\"Test that deleteNamespace doesn not throw an exception\")\n+          .withFailMessage(\"deleteNamespace() threw an exception\")\n+          .doesNotThrowAnyException();\n+      logger.info(\"Deleted namespace: \" + domainNamespace2);\n+    }\n+\n+    // Delete opNamespace\n+    if (opNamespace != null) {\n+      assertThatCode(\n+          () -> deleteNamespace(opNamespace))\n+          .as(\"Test that deleteNamespace doesn not throw an exception\")\n+          .withFailMessage(\"deleteNamespace() threw an exception\")\n+          .doesNotThrowAnyException();\n+      logger.info(\"Deleted namespace: \" + opNamespace);\n+    }\n+\n+  }\n+\n+  private String createUniqueNamespaceInTryBlock() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM1NDQ0Mw=="}, "originalCommit": {"oid": "21ccf1c2315351f5912ff421efaf94c724dfe23c"}, "originalPosition": 208}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4735, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}