{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MzQ4ODU5", "number": 1589, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjo1NToxMlrOD1wrbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMzo0MToyN1rOD1x9RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3Njk4NjY4OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjo1NToxMlrOGLWWTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNTo0OTo1MVrOGLeEDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU1MzY3OA==", "bodyText": "please include the namespace in the message too", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1589#discussion_r414553678", "createdAt": "2020-04-24T12:55:12Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -148,6 +146,39 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n                 .name(serviceAccountName))));\n     logger.info(\"Created service account: {0}\", serviceAccountName);\n \n+    // get Operator image name\n+    String operatorImage = getOperatorImageName();\n+    assertFalse(operatorImage.isEmpty(), \"Operator image name can not be empty\");\n+    logger.info(\"Operator image name {0}\", operatorImage);\n+\n+    // Create docker registry secret in the operator namespace to pull the image from repository\n+    if (System.getenv(\"REPO_REGISTRY\") != null && System.getenv(\"REPO_USERNAME\") != null\n+        && System.getenv(\"REPO_PASSWORD\") != null && System.getenv(\"REPO_EMAIL\") != null) {\n+      repoRegistry = System.getenv(\"REPO_REGISTRY\");\n+      repoUserName = System.getenv(\"REPO_USERNAME\");\n+      repoPassword = System.getenv(\"REPO_PASSWORD\");\n+      repoEmail = System.getenv(\"REPO_EMAIL\");\n+    }\n+    logger.info(\"Creating docker registry secret in namespace {0}\", opNamespace);\n+    JsonObject dockerConfigJsonObject = createDockerConfigJson(\n+        repoUserName, repoPassword, repoEmail, repoRegistry);\n+    dockerConfigJson = dockerConfigJsonObject.toString();\n+\n+    // Create the V1Secret configuration\n+    V1Secret repoSecret = new V1Secret()\n+        .metadata(new V1ObjectMeta()\n+            .name(repoSecretName)\n+            .namespace(opNamespace))\n+        .type(\"kubernetes.io/dockerconfigjson\")\n+        .putDataItem(\".dockerconfigjson\", dockerConfigJson.getBytes());\n+\n+    boolean secretCreated = assertDoesNotThrow(() -> createSecret(repoSecret),\n+        String.format(\"createSecret failed for %s\", repoSecretName));\n+    assertTrue(secretCreated, String.format(\"createSecret failed while creating secret %s\", repoSecretName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b4a09f765d538795d550c9db956ca49b6f9bc67"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY4MDA3OA==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1589#discussion_r414680078", "createdAt": "2020-04-24T15:49:51Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -148,6 +146,39 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n                 .name(serviceAccountName))));\n     logger.info(\"Created service account: {0}\", serviceAccountName);\n \n+    // get Operator image name\n+    String operatorImage = getOperatorImageName();\n+    assertFalse(operatorImage.isEmpty(), \"Operator image name can not be empty\");\n+    logger.info(\"Operator image name {0}\", operatorImage);\n+\n+    // Create docker registry secret in the operator namespace to pull the image from repository\n+    if (System.getenv(\"REPO_REGISTRY\") != null && System.getenv(\"REPO_USERNAME\") != null\n+        && System.getenv(\"REPO_PASSWORD\") != null && System.getenv(\"REPO_EMAIL\") != null) {\n+      repoRegistry = System.getenv(\"REPO_REGISTRY\");\n+      repoUserName = System.getenv(\"REPO_USERNAME\");\n+      repoPassword = System.getenv(\"REPO_PASSWORD\");\n+      repoEmail = System.getenv(\"REPO_EMAIL\");\n+    }\n+    logger.info(\"Creating docker registry secret in namespace {0}\", opNamespace);\n+    JsonObject dockerConfigJsonObject = createDockerConfigJson(\n+        repoUserName, repoPassword, repoEmail, repoRegistry);\n+    dockerConfigJson = dockerConfigJsonObject.toString();\n+\n+    // Create the V1Secret configuration\n+    V1Secret repoSecret = new V1Secret()\n+        .metadata(new V1ObjectMeta()\n+            .name(repoSecretName)\n+            .namespace(opNamespace))\n+        .type(\"kubernetes.io/dockerconfigjson\")\n+        .putDataItem(\".dockerconfigjson\", dockerConfigJson.getBytes());\n+\n+    boolean secretCreated = assertDoesNotThrow(() -> createSecret(repoSecret),\n+        String.format(\"createSecret failed for %s\", repoSecretName));\n+    assertTrue(secretCreated, String.format(\"createSecret failed while creating secret %s\", repoSecretName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU1MzY3OA=="}, "originalCommit": {"oid": "7b4a09f765d538795d550c9db956ca49b6f9bc67"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3Njk5Mjk4OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjo1NjozNlrOGLWZ6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNTo1MDoxMVrOGLeE9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU1NDYwMQ==", "bodyText": "is this all duplicated? maybe refactor it?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1589#discussion_r414554601", "createdAt": "2020-04-24T12:56:36Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -86,131 +77,135 @@ public void testInstallingOperator(@Namespaces(3) List<String> namespaces) {\n     domainNamespace2 = namespaces.get(2);\n \n     // Create a service account for the unique opNamespace\n-    final String serviceAccountName = opNamespace + \"-sa\";\n-    serviceAccount = new V1ServiceAccount()\n+    logger.info(\"Creating service account\");\n+    String serviceAccountName = opNamespace + \"-sa\";\n+    assertDoesNotThrow(() -> createServiceAccount(new V1ServiceAccount()\n         .metadata(\n             new V1ObjectMeta()\n                 .namespace(opNamespace)\n-                .name(serviceAccountName));\n-\n-    assertThatCode(\n-        () -> createServiceAccount(serviceAccount))\n-        .as(\"Test that createServiceAccount doesn not throw an exception\")\n-        .withFailMessage(\"createServiceAccount() threw an exception\")\n-        .doesNotThrowAnyException();\n-    logger.info(\"Created service account: \" + serviceAccountName);\n+                .name(serviceAccountName))));\n+    logger.info(\"Created service account: {0}\", serviceAccountName);\n+\n+    String image = getOperatorImageName();\n+    assertFalse(image.isEmpty(), \"Operator image name can not be empty\");\n+    logger.info(\"Operator image name {0}\", image);\n+\n+    // Create docker registry secret in the operator namespace to pull the image from repository\n+    String repoRegistry = \"dummy\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b4a09f765d538795d550c9db956ca49b6f9bc67"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU4Mzg2NA==", "bodyText": "I'm okay with doing the refactoring in a separate step because I was going to come after and have a third \"strategy\" for kind.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1589#discussion_r414583864", "createdAt": "2020-04-24T13:39:58Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -86,131 +77,135 @@ public void testInstallingOperator(@Namespaces(3) List<String> namespaces) {\n     domainNamespace2 = namespaces.get(2);\n \n     // Create a service account for the unique opNamespace\n-    final String serviceAccountName = opNamespace + \"-sa\";\n-    serviceAccount = new V1ServiceAccount()\n+    logger.info(\"Creating service account\");\n+    String serviceAccountName = opNamespace + \"-sa\";\n+    assertDoesNotThrow(() -> createServiceAccount(new V1ServiceAccount()\n         .metadata(\n             new V1ObjectMeta()\n                 .namespace(opNamespace)\n-                .name(serviceAccountName));\n-\n-    assertThatCode(\n-        () -> createServiceAccount(serviceAccount))\n-        .as(\"Test that createServiceAccount doesn not throw an exception\")\n-        .withFailMessage(\"createServiceAccount() threw an exception\")\n-        .doesNotThrowAnyException();\n-    logger.info(\"Created service account: \" + serviceAccountName);\n+                .name(serviceAccountName))));\n+    logger.info(\"Created service account: {0}\", serviceAccountName);\n+\n+    String image = getOperatorImageName();\n+    assertFalse(image.isEmpty(), \"Operator image name can not be empty\");\n+    logger.info(\"Operator image name {0}\", image);\n+\n+    // Create docker registry secret in the operator namespace to pull the image from repository\n+    String repoRegistry = \"dummy\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU1NDYwMQ=="}, "originalCommit": {"oid": "7b4a09f765d538795d550c9db956ca49b6f9bc67"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY4MDMxMA==", "bodyText": "I moved to TestConstants.java", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1589#discussion_r414680310", "createdAt": "2020-04-24T15:50:11Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -86,131 +77,135 @@ public void testInstallingOperator(@Namespaces(3) List<String> namespaces) {\n     domainNamespace2 = namespaces.get(2);\n \n     // Create a service account for the unique opNamespace\n-    final String serviceAccountName = opNamespace + \"-sa\";\n-    serviceAccount = new V1ServiceAccount()\n+    logger.info(\"Creating service account\");\n+    String serviceAccountName = opNamespace + \"-sa\";\n+    assertDoesNotThrow(() -> createServiceAccount(new V1ServiceAccount()\n         .metadata(\n             new V1ObjectMeta()\n                 .namespace(opNamespace)\n-                .name(serviceAccountName));\n-\n-    assertThatCode(\n-        () -> createServiceAccount(serviceAccount))\n-        .as(\"Test that createServiceAccount doesn not throw an exception\")\n-        .withFailMessage(\"createServiceAccount() threw an exception\")\n-        .doesNotThrowAnyException();\n-    logger.info(\"Created service account: \" + serviceAccountName);\n+                .name(serviceAccountName))));\n+    logger.info(\"Created service account: {0}\", serviceAccountName);\n+\n+    String image = getOperatorImageName();\n+    assertFalse(image.isEmpty(), \"Operator image name can not be empty\");\n+    logger.info(\"Operator image name {0}\", image);\n+\n+    // Create docker registry secret in the operator namespace to pull the image from repository\n+    String repoRegistry = \"dummy\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU1NDYwMQ=="}, "originalCommit": {"oid": "7b4a09f765d538795d550c9db956ca49b6f9bc67"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NzAwMDU2OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/extensions/ImageBuilders.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjo1ODoyOFrOGLWeXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNTo1MDoxN1rOGLeFOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU1NTc0Mw==", "bodyText": "remove if not needed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1589#discussion_r414555743", "createdAt": "2020-04-24T12:58:28Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/extensions/ImageBuilders.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.extensions;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import oracle.weblogic.kubernetes.actions.impl.Operator;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+import static oracle.weblogic.kubernetes.actions.TestActions.dockerLogin;\n+import static oracle.weblogic.kubernetes.actions.TestActions.dockerPush;\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.extension.ExtensionContext.Namespace.GLOBAL;\n+\n+//import static org.junit.jupiter.api.Assertions.assertTrue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b4a09f765d538795d550c9db956ca49b6f9bc67"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY4MDM3Ng==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1589#discussion_r414680376", "createdAt": "2020-04-24T15:50:17Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/extensions/ImageBuilders.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.extensions;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import oracle.weblogic.kubernetes.actions.impl.Operator;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+import static oracle.weblogic.kubernetes.actions.TestActions.dockerLogin;\n+import static oracle.weblogic.kubernetes.actions.TestActions.dockerPush;\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.extension.ExtensionContext.Namespace.GLOBAL;\n+\n+//import static org.junit.jupiter.api.Assertions.assertTrue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU1NTc0Mw=="}, "originalCommit": {"oid": "7b4a09f765d538795d550c9db956ca49b6f9bc67"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NzAwNTI3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/extensions/ImageBuilders.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjo1OTo0MFrOGLWhNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjo1OTo0MFrOGLWhNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU1NjQ3MQ==", "bodyText": "very nice", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1589#discussion_r414556471", "createdAt": "2020-04-24T12:59:40Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/extensions/ImageBuilders.java", "diffHunk": "@@ -0,0 +1,89 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.extensions;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import oracle.weblogic.kubernetes.actions.impl.Operator;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+import static oracle.weblogic.kubernetes.actions.TestActions.dockerLogin;\n+import static oracle.weblogic.kubernetes.actions.TestActions.dockerPush;\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.extension.ExtensionContext.Namespace.GLOBAL;\n+\n+//import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Class to build the required images for the tests.\n+ */\n+public class ImageBuilders implements BeforeAllCallback, ExtensionContext.Store.CloseableResource {\n+  private static final AtomicBoolean started = new AtomicBoolean(false);\n+  private static final CountDownLatch initializationLatch = new CountDownLatch(1);\n+\n+  @Override\n+  public void beforeAll(ExtensionContext context) {\n+    /* The pattern is that we have initialization code that we want to run once to completion", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b4a09f765d538795d550c9db956ca49b6f9bc67"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NzE2OTI0OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMzozNTo0OVrOGLYA2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNTo1MDoyNlrOGLeFlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU4MDk1NQ==", "bodyText": "This is a little weird in that it doesn't take the value of any variable unless all are set.  You could check each value in line like this:\nrepoRegistry = Optional.ofNullable(System.getenv(\"REPO_REGISTRY\")).orElse(\"dummy\");", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1589#discussion_r414580955", "createdAt": "2020-04-24T13:35:49Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -148,6 +146,39 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n                 .name(serviceAccountName))));\n     logger.info(\"Created service account: {0}\", serviceAccountName);\n \n+    // get Operator image name\n+    String operatorImage = getOperatorImageName();\n+    assertFalse(operatorImage.isEmpty(), \"Operator image name can not be empty\");\n+    logger.info(\"Operator image name {0}\", operatorImage);\n+\n+    // Create docker registry secret in the operator namespace to pull the image from repository\n+    if (System.getenv(\"REPO_REGISTRY\") != null && System.getenv(\"REPO_USERNAME\") != null\n+        && System.getenv(\"REPO_PASSWORD\") != null && System.getenv(\"REPO_EMAIL\") != null) {\n+      repoRegistry = System.getenv(\"REPO_REGISTRY\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b4a09f765d538795d550c9db956ca49b6f9bc67"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY4MDQ3MA==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1589#discussion_r414680470", "createdAt": "2020-04-24T15:50:26Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -148,6 +146,39 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n                 .name(serviceAccountName))));\n     logger.info(\"Created service account: {0}\", serviceAccountName);\n \n+    // get Operator image name\n+    String operatorImage = getOperatorImageName();\n+    assertFalse(operatorImage.isEmpty(), \"Operator image name can not be empty\");\n+    logger.info(\"Operator image name {0}\", operatorImage);\n+\n+    // Create docker registry secret in the operator namespace to pull the image from repository\n+    if (System.getenv(\"REPO_REGISTRY\") != null && System.getenv(\"REPO_USERNAME\") != null\n+        && System.getenv(\"REPO_PASSWORD\") != null && System.getenv(\"REPO_EMAIL\") != null) {\n+      repoRegistry = System.getenv(\"REPO_REGISTRY\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU4MDk1NQ=="}, "originalCommit": {"oid": "7b4a09f765d538795d550c9db956ca49b6f9bc67"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NzE5NjIwOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Operator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMzo0MToyN1rOGLYQlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNTo1MDozM1rOGLeF5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU4NDk4Mw==", "bodyText": "Can you Optional.ofNullable(...).orElse(...) pattern here too.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1589#discussion_r414584983", "createdAt": "2020-04-24T13:41:27Z", "author": {"login": "rjeberhard"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Operator.java", "diffHunk": "@@ -40,4 +52,53 @@ public static boolean uninstall(HelmParams params) {\n   public static boolean scaleDomain(String domainUid, String clusterName, int numOfServers) {\n     return true;\n   }\n+\n+  /**\n+   * Image Name for the Operator. Uses branch name for tag in local runs\n+   * and branch name, build id for tag in Jenkins runs.\n+   * @return image name\n+   */\n+  public static String getImageName() {\n+    String image = \"\";\n+    String imageName = System.getenv(\"IMAGE_NAME_OPERATOR\") != null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b4a09f765d538795d550c9db956ca49b6f9bc67"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDY4MDU0OA==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1589#discussion_r414680548", "createdAt": "2020-04-24T15:50:33Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Operator.java", "diffHunk": "@@ -40,4 +52,53 @@ public static boolean uninstall(HelmParams params) {\n   public static boolean scaleDomain(String domainUid, String clusterName, int numOfServers) {\n     return true;\n   }\n+\n+  /**\n+   * Image Name for the Operator. Uses branch name for tag in local runs\n+   * and branch name, build id for tag in Jenkins runs.\n+   * @return image name\n+   */\n+  public static String getImageName() {\n+    String image = \"\";\n+    String imageName = System.getenv(\"IMAGE_NAME_OPERATOR\") != null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU4NDk4Mw=="}, "originalCommit": {"oid": "7b4a09f765d538795d550c9db956ca49b6f9bc67"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4463, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}