{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwMTYxNDU1", "number": 1879, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMzozMzoyM1rOEZ-uTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyNzo0OFrOEfByrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Njc3NTE2OnYy", "diffSide": "RIGHT", "path": "operator/src/main/java/oracle/kubernetes/operator/Main.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMzozMzoyM1rOHDHmhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDowNjoxMlrOHDJDLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAzMjMyNw==", "bodyText": "Why compute absent up here, if it is used below? Unless there is a very good reason, it should be computed when you need it - you can even remove the local variable that way.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1879#discussion_r473032327", "createdAt": "2020-08-19T13:33:23Z", "author": {"login": "russgold"}, "path": "operator/src/main/java/oracle/kubernetes/operator/Main.java", "diffHunk": "@@ -840,6 +840,7 @@ public NextAction onSuccess(Packet packet, CallResponse<DomainList> callResponse\n         for (Domain dom : callResponse.getResult().getItems()) {\n           String domainUid = dom.getDomainUid();\n           domainUids.add(domainUid);\n+          boolean absent = dpis.get(domainUid) == null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24f025773c2e7f49ed5c2ec4b5a359f8cf1ff7ec"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA1NjA0NQ==", "bodyText": "The line after the current assignment will change the content of the map, therefore we need to catch the old value before it.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1879#discussion_r473056045", "createdAt": "2020-08-19T14:06:12Z", "author": {"login": "doxiao"}, "path": "operator/src/main/java/oracle/kubernetes/operator/Main.java", "diffHunk": "@@ -840,6 +840,7 @@ public NextAction onSuccess(Packet packet, CallResponse<DomainList> callResponse\n         for (Domain dom : callResponse.getResult().getItems()) {\n           String domainUid = dom.getDomainUid();\n           domainUids.add(domainUid);\n+          boolean absent = dpis.get(domainUid) == null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAzMjMyNw=="}, "originalCommit": {"oid": "24f025773c2e7f49ed5c2ec4b5a359f8cf1ff7ec"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTYwNjAwOnYy", "diffSide": "RIGHT", "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/PodStepContext.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMzoxNzoxNFrOHF5sdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzozMzo1M1rOHGiueQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk1MDE5OA==", "bodyText": "would the domain status be updated when we stop a server, or scale down a cluster?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1879#discussion_r475950198", "createdAt": "2020-08-24T23:17:14Z", "author": {"login": "alai8"}, "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/PodStepContext.java", "diffHunk": "@@ -330,9 +332,11 @@ private Step patchCurrentPod(V1Pod currentPod, Step next) {\n     KubernetesUtils.addPatches(\n         patchBuilder, \"/metadata/annotations/\", getAnnotations(currentPod), getPodAnnotations());\n \n-    return new CallBuilder()\n-        .patchPodAsync(getPodName(), getNamespace(), getDomainUid(),\n-            new V1Patch(patchBuilder.build().toString()), patchResponse(next));\n+    return Step.chain(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad4d062302f6d9f193bf960bf5dc9f9816ab1b49"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ5OTQ3Mg==", "bodyText": "Once the domain is started, the operator periodically checks the server's state and health condition, and update the domain status/condition accordingly. Right now, we don't have a progressing REASON for cluster scaling down; the condition we are adding here is for managed server starting only.\nI am looking into the scaling down code path to see if we need to add additional Progressing step or not.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1879#discussion_r476499472", "createdAt": "2020-08-25T14:36:40Z", "author": {"login": "doxiao"}, "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/PodStepContext.java", "diffHunk": "@@ -330,9 +332,11 @@ private Step patchCurrentPod(V1Pod currentPod, Step next) {\n     KubernetesUtils.addPatches(\n         patchBuilder, \"/metadata/annotations/\", getAnnotations(currentPod), getPodAnnotations());\n \n-    return new CallBuilder()\n-        .patchPodAsync(getPodName(), getNamespace(), getDomainUid(),\n-            new V1Patch(patchBuilder.build().toString()), patchResponse(next));\n+    return Step.chain(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk1MDE5OA=="}, "originalCommit": {"oid": "ad4d062302f6d9f193bf960bf5dc9f9816ab1b49"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYyMjQ1Nw==", "bodyText": "I added ProgressingStep to scaling down code path to match what we had without the changes in this PR. I thought about adding a new reason (for example \"managedServersScalingDown\") for this, but I decided to use what we used before this change. Ryan, your thoughts on this?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1879#discussion_r476622457", "createdAt": "2020-08-25T17:33:53Z", "author": {"login": "doxiao"}, "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/PodStepContext.java", "diffHunk": "@@ -330,9 +332,11 @@ private Step patchCurrentPod(V1Pod currentPod, Step next) {\n     KubernetesUtils.addPatches(\n         patchBuilder, \"/metadata/annotations/\", getAnnotations(currentPod), getPodAnnotations());\n \n-    return new CallBuilder()\n-        .patchPodAsync(getPodName(), getNamespace(), getDomainUid(),\n-            new V1Patch(patchBuilder.build().toString()), patchResponse(next));\n+    return Step.chain(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTk1MDE5OA=="}, "originalCommit": {"oid": "ad4d062302f6d9f193bf960bf5dc9f9816ab1b49"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NjUwOTAyOnYy", "diffSide": "RIGHT", "path": "operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMzoxMzo0NlrOHGDJgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjoxMjoxMlrOHGfc6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjEwNTA4OQ==", "bodyText": "Should these be ConcurrentHashMap instead of regular HashMap?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1879#discussion_r476105089", "createdAt": "2020-08-25T03:13:46Z", "author": {"login": "ankedia"}, "path": "operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java", "diffHunk": "@@ -669,6 +671,23 @@ private void internalMakeRightDomainPresence() {\n             willInterrupt);\n     }\n \n+    private void populateServerStateHealthFromDomain(Packet packet) {\n+      Map<String, ServerHealth> serverHealth = new HashMap<String, ServerHealth>();\n+      Map<String, String> serverState = new HashMap<String, String>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad4d062302f6d9f193bf960bf5dc9f9816ab1b49"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ4NzMwNw==", "bodyText": "yes, good catch! Changed to ConcurrentHashMap.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1879#discussion_r476487307", "createdAt": "2020-08-25T14:20:56Z", "author": {"login": "doxiao"}, "path": "operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java", "diffHunk": "@@ -669,6 +671,23 @@ private void internalMakeRightDomainPresence() {\n             willInterrupt);\n     }\n \n+    private void populateServerStateHealthFromDomain(Packet packet) {\n+      Map<String, ServerHealth> serverHealth = new HashMap<String, ServerHealth>();\n+      Map<String, String> serverState = new HashMap<String, String>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjEwNTA4OQ=="}, "originalCommit": {"oid": "ad4d062302f6d9f193bf960bf5dc9f9816ab1b49"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU0MTU2Mw==", "bodyText": "I'm trying to understand the reason for adding populateServerStateHealthFromDomain() method. It looks like SERVER_STATE_MAP and SERVER_HEALTH_MAP are also created/added later in runDomainPlan -> createSteps -> createDomainUpPlan -> DomainStatusStep -> scheduleDomainStatusUpdating . Did I miss something?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1879#discussion_r476541563", "createdAt": "2020-08-25T15:32:37Z", "author": {"login": "ankedia"}, "path": "operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java", "diffHunk": "@@ -669,6 +671,23 @@ private void internalMakeRightDomainPresence() {\n             willInterrupt);\n     }\n \n+    private void populateServerStateHealthFromDomain(Packet packet) {\n+      Map<String, ServerHealth> serverHealth = new HashMap<String, ServerHealth>();\n+      Map<String, String> serverState = new HashMap<String, String>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjEwNTA4OQ=="}, "originalCommit": {"oid": "ad4d062302f6d9f193bf960bf5dc9f9816ab1b49"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2ODgwOQ==", "bodyText": "The scheduleDomainStatusUpdating creates a new packet for periodically domain status update, which is not the same packet that operator creates here in internalMakeRightDomainPresence.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1879#discussion_r476568809", "createdAt": "2020-08-25T16:12:12Z", "author": {"login": "doxiao"}, "path": "operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java", "diffHunk": "@@ -669,6 +671,23 @@ private void internalMakeRightDomainPresence() {\n             willInterrupt);\n     }\n \n+    private void populateServerStateHealthFromDomain(Packet packet) {\n+      Map<String, ServerHealth> serverHealth = new HashMap<String, ServerHealth>();\n+      Map<String, String> serverState = new HashMap<String, String>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjEwNTA4OQ=="}, "originalCommit": {"oid": "ad4d062302f6d9f193bf960bf5dc9f9816ab1b49"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MTE4NzI4OnYy", "diffSide": "RIGHT", "path": "operator/src/main/java/oracle/kubernetes/operator/DomainStatusUpdater.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMzoyMjo1NlrOHGwoDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMzoxMDo0OVrOHJ4JoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg1MDE5MA==", "bodyText": "I understand that the ProgressingStep is a private static class, but I think it is better to have this method to unit test code.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1879#discussion_r476850190", "createdAt": "2020-08-25T23:22:56Z", "author": {"login": "alai8"}, "path": "operator/src/main/java/oracle/kubernetes/operator/DomainStatusUpdater.java", "diffHunk": "@@ -611,6 +611,16 @@ void modifyStatus(DomainStatus status) {\n     }\n   }\n \n+  /**\n+   * A utility method for unit testing.\n+   */\n+  public static Step excludeProgressingStep(Step step) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9b8b92aa3aaffaa163298e537579da732f6ac22"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDExOTIwMQ==", "bodyText": "I initially had this method in the test code, and made the ProcessingStep public. I changed to the current implementation because I slightly preferred keeping the class private. But I am okay with either approach.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1879#discussion_r480119201", "createdAt": "2020-08-31T13:10:49Z", "author": {"login": "doxiao"}, "path": "operator/src/main/java/oracle/kubernetes/operator/DomainStatusUpdater.java", "diffHunk": "@@ -611,6 +611,16 @@ void modifyStatus(DomainStatus status) {\n     }\n   }\n \n+  /**\n+   * A utility method for unit testing.\n+   */\n+  public static Step excludeProgressingStep(Step step) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg1MDE5MA=="}, "originalCommit": {"oid": "f9b8b92aa3aaffaa163298e537579da732f6ac22"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NDIxMjk3OnYy", "diffSide": "RIGHT", "path": "operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNDoxNjowMlrOHHORbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNToyOToxMlrOHJ9iQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMzNTkxOA==", "bodyText": "Aren't we already updating these maps in ServerStatusReader? Why copy the logic to here?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1879#discussion_r477335918", "createdAt": "2020-08-26T14:16:02Z", "author": {"login": "russgold"}, "path": "operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java", "diffHunk": "@@ -669,6 +671,27 @@ private void internalMakeRightDomainPresence() {\n             willInterrupt);\n     }\n \n+    private void populateServerStateHealthFromDomain(Packet packet) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9b8b92aa3aaffaa163298e537579da732f6ac22"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDEzNzg2OA==", "bodyText": "The domain status contains DomainConditions and ServerStatus. The ServerStatus contains the WebLogic servers' state and health information, which is updated based on what is in the two maps (serverState and serverHealth) in the packet. The domain conditions are only handled by the domain status update steps in DomainStatusUpdater.\nPrior to the code change in this PR, the server status update is already triggered from two code paths: make-right code path and ServerStatusReader/update  code path (see the places where the DomainStatusUpdater.createStatusUpdateStep is called). If I understand the logic correctly, the update in the make-right is to record possible cluster scale-up and scale-down changes. The update in the ServerStatusReader is to record state/health changes on the WebLogic server processes. The two code paths do NOT share the same packet instances and the contents. The ServerStatusReader populates the maps based on the responses that the reader gets, and add them to the packet. The make-right code does not populate the maps,  and therefore no maps are added to the packet. As a result, when the operator does a full recheck of an idle domain (running but no activities), the make-right code path will update the domain status to remove the server state and health, and the next update from the ServerStatusReader will update the states and health again, and put the actual state and health back. This behavior will repeat due to the periodical ServerStatusReader server status update logic and make-right full recheck logic, thus the domain version number keeps to be bumped up.\nThe solution in this PR is to populate the packet in the make-right code path with the current known state/health that the operator gets from the domain object, so that the logic starts with the correct initial server status.\nI agree that it is hard to unit test the combined behavior and end results from the code paths. I have been trying to find a way to test only the make-right code path instead, for example checking if the maps in the packet are populated correctly.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1879#discussion_r480137868", "createdAt": "2020-08-31T13:40:09Z", "author": {"login": "doxiao"}, "path": "operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java", "diffHunk": "@@ -669,6 +671,27 @@ private void internalMakeRightDomainPresence() {\n             willInterrupt);\n     }\n \n+    private void populateServerStateHealthFromDomain(Packet packet) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMzNTkxOA=="}, "originalCommit": {"oid": "f9b8b92aa3aaffaa163298e537579da732f6ac22"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE0MDcxMw==", "bodyText": "Could the make-right code path simply leave the per-server status alone by copying the content from the current status, if any?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1879#discussion_r480140713", "createdAt": "2020-08-31T13:44:42Z", "author": {"login": "rjeberhard"}, "path": "operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java", "diffHunk": "@@ -669,6 +671,27 @@ private void internalMakeRightDomainPresence() {\n             willInterrupt);\n     }\n \n+    private void populateServerStateHealthFromDomain(Packet packet) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMzNTkxOA=="}, "originalCommit": {"oid": "f9b8b92aa3aaffaa163298e537579da732f6ac22"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE0NDE0NQ==", "bodyText": "A better solution, then, would probably be to encapsulate the logic, possibly in the ServerStatus itself. Both paths could then use that logic, and it could be unit-testable.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1879#discussion_r480144145", "createdAt": "2020-08-31T13:50:10Z", "author": {"login": "russgold"}, "path": "operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java", "diffHunk": "@@ -669,6 +671,27 @@ private void internalMakeRightDomainPresence() {\n             willInterrupt);\n     }\n \n+    private void populateServerStateHealthFromDomain(Packet packet) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMzNTkxOA=="}, "originalCommit": {"oid": "f9b8b92aa3aaffaa163298e537579da732f6ac22"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE0Njg3OA==", "bodyText": "@rjeberhard That is the change in the PR does; get the current status from the domain object. We need to populate the maps in the packet with those status contents because the remaining logic around this uses that information to determine the behavior.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1879#discussion_r480146878", "createdAt": "2020-08-31T13:54:35Z", "author": {"login": "doxiao"}, "path": "operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java", "diffHunk": "@@ -669,6 +671,27 @@ private void internalMakeRightDomainPresence() {\n             willInterrupt);\n     }\n \n+    private void populateServerStateHealthFromDomain(Packet packet) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMzNTkxOA=="}, "originalCommit": {"oid": "f9b8b92aa3aaffaa163298e537579da732f6ac22"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE0OTYwMg==", "bodyText": "@russgold are you suggesting that both code paths read the status from the servers, and populate the maps with the responses?  Readers reaches out to each servers to get its state and health information, and I am not sure if we would want to do that in the make-right code path.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1879#discussion_r480149602", "createdAt": "2020-08-31T13:58:50Z", "author": {"login": "doxiao"}, "path": "operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java", "diffHunk": "@@ -669,6 +671,27 @@ private void internalMakeRightDomainPresence() {\n             willInterrupt);\n     }\n \n+    private void populateServerStateHealthFromDomain(Packet packet) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMzNTkxOA=="}, "originalCommit": {"oid": "f9b8b92aa3aaffaa163298e537579da732f6ac22"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIwNzQyNQ==", "bodyText": "I'm suggesting that both paths do what they need to do, but that the logic be encapsulated in ServerStatus, where it can be unit tested.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1879#discussion_r480207425", "createdAt": "2020-08-31T15:29:12Z", "author": {"login": "russgold"}, "path": "operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java", "diffHunk": "@@ -669,6 +671,27 @@ private void internalMakeRightDomainPresence() {\n             willInterrupt);\n     }\n \n+    private void populateServerStateHealthFromDomain(Packet packet) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMzNTkxOA=="}, "originalCommit": {"oid": "f9b8b92aa3aaffaa163298e537579da732f6ac22"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTcwNjY5OnYy", "diffSide": "RIGHT", "path": "operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyNzo0OFrOHLDB9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxOTo0MzoxN1rOHLFoKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0NjAzOA==", "bodyText": "Wouldn't it make sense to add the new step into createSteps, in the branch where we aren't shutting down the domain?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1879#discussion_r481346038", "createdAt": "2020-09-01T18:27:48Z", "author": {"login": "russgold"}, "path": "operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java", "diffHunk": "@@ -659,12 +703,11 @@ private void internalMakeRightDomainPresence() {\n               Component.createFor(liveInfo, delegate.getVersion(),\n                   PodAwaiterStepFactory.class, delegate.getPodAwaiterStepFactory(getNamespace()),\n                   V1SubjectRulesReviewStatus.class, delegate.getSubjectRulesReviewStatus(getNamespace())));\n-\n       runDomainPlan(\n             getDomain(),\n             getDomainUid(),\n             getNamespace(),\n-            new StepAndPacket(createSteps(), packet),\n+            new StepAndPacket(createPopulatePacketServerMapsStep(createSteps()), packet),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19aed9af3f3557b09508a45eaa97fea218fec528"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM4MjMyNA==", "bodyText": "I thought about that, but noticed that createSteps is called in other places outside of the make-right code path.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1879#discussion_r481382324", "createdAt": "2020-09-01T19:31:19Z", "author": {"login": "doxiao"}, "path": "operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java", "diffHunk": "@@ -659,12 +703,11 @@ private void internalMakeRightDomainPresence() {\n               Component.createFor(liveInfo, delegate.getVersion(),\n                   PodAwaiterStepFactory.class, delegate.getPodAwaiterStepFactory(getNamespace()),\n                   V1SubjectRulesReviewStatus.class, delegate.getSubjectRulesReviewStatus(getNamespace())));\n-\n       runDomainPlan(\n             getDomain(),\n             getDomainUid(),\n             getNamespace(),\n-            new StepAndPacket(createSteps(), packet),\n+            new StepAndPacket(createPopulatePacketServerMapsStep(createSteps()), packet),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0NjAzOA=="}, "originalCommit": {"oid": "19aed9af3f3557b09508a45eaa97fea218fec528"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM4NjQzNA==", "bodyText": "Only in the case where createSteps is called from the make-right code path (internalMakeRightDomainPresence method), the packet does not already have the server maps;", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1879#discussion_r481386434", "createdAt": "2020-09-01T19:39:11Z", "author": {"login": "doxiao"}, "path": "operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java", "diffHunk": "@@ -659,12 +703,11 @@ private void internalMakeRightDomainPresence() {\n               Component.createFor(liveInfo, delegate.getVersion(),\n                   PodAwaiterStepFactory.class, delegate.getPodAwaiterStepFactory(getNamespace()),\n                   V1SubjectRulesReviewStatus.class, delegate.getSubjectRulesReviewStatus(getNamespace())));\n-\n       runDomainPlan(\n             getDomain(),\n             getDomainUid(),\n             getNamespace(),\n-            new StepAndPacket(createSteps(), packet),\n+            new StepAndPacket(createPopulatePacketServerMapsStep(createSteps()), packet),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0NjAzOA=="}, "originalCommit": {"oid": "19aed9af3f3557b09508a45eaa97fea218fec528"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM4ODU4NQ==", "bodyText": "Then pull that whole line,\nnew StepAndPacket(createPopulatePacketServerMapsStep(createSteps()), packet)\n\ninto its own method, such as createDomainPlanSteps. There is otherwise too much going on in that code block.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1879#discussion_r481388585", "createdAt": "2020-09-01T19:43:17Z", "author": {"login": "russgold"}, "path": "operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java", "diffHunk": "@@ -659,12 +703,11 @@ private void internalMakeRightDomainPresence() {\n               Component.createFor(liveInfo, delegate.getVersion(),\n                   PodAwaiterStepFactory.class, delegate.getPodAwaiterStepFactory(getNamespace()),\n                   V1SubjectRulesReviewStatus.class, delegate.getSubjectRulesReviewStatus(getNamespace())));\n-\n       runDomainPlan(\n             getDomain(),\n             getDomainUid(),\n             getNamespace(),\n-            new StepAndPacket(createSteps(), packet),\n+            new StepAndPacket(createPopulatePacketServerMapsStep(createSteps()), packet),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0NjAzOA=="}, "originalCommit": {"oid": "19aed9af3f3557b09508a45eaa97fea218fec528"}, "originalPosition": 107}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4223, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}