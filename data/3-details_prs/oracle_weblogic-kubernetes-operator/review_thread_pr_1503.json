{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0NDA5NTU1", "number": 1503, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMTo0ODozMlrODr2Mew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMTo0ODozMlrODr2Mew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzAzMjkxOnYy", "diffSide": "RIGHT", "path": "operator/src/main/java/oracle/kubernetes/utils/OperatorUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMTo0ODozMlrOF8bvGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQwMDoyNDoyNlrOF9FNOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkxMzMwNw==", "bodyText": "How about something more generous than 6 - like 20?  The numbers we're padding come from the customer and there's not much need to be stingy here.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1503#discussion_r398913307", "createdAt": "2020-03-26T21:48:32Z", "author": {"login": "tbarnes-us"}, "path": "operator/src/main/java/oracle/kubernetes/utils/OperatorUtils.java", "diffHunk": "@@ -19,4 +19,62 @@ public static String joinListGrammatically(final List<String> list) {\n             .concat(list.get(list.size() - 1))\n         : list.get(0);\n   }\n+\n+  /**\n+   * Compare the 'numero lexi sorting name' as defined in {@link #getSortingString(String)} of the\n+   * given 2 Strings.\n+   *\n+   * @param str1 First string for comparison\n+   * @param str2 Second string for comparison\n+   * @return a negative integer, zero, or a positive integer as the sorting name of str1 * is less\n+   *     than, equal to, or greater than the sorting name of str2.\n+   */\n+  public static int compareSortingStrings(String str1, String str2) {\n+    if (str1 == null || str2 == null) {\n+      if (str2 != null) {\n+        return -1;\n+      } else if (str1 != null) {\n+        return 1;\n+      }\n+      return 0;\n+    }\n+    return getSortingString(str1).compareTo(getSortingString(str2));\n+  }\n+\n+  /**\n+   * The 'numero lexi sorting name' is a munged version of a\n+   * string that 'zero fills' its numeric portions. This can\n+   * be used to ensure \"member2foo\" sorts before \"member12foo\"\n+   * as these would munge to \"member000002foo\" and \"member000012foo\".\n+   *\n+   * <p>Handles up to 6 digits... - otherwise it doesn't zero fill...\n+   */\n+  public static String getSortingString(String orig) {\n+    String ret = \"\";\n+    String word = \"\";\n+    char lastCh = 0;\n+    for (char ch : orig.toCharArray()) {\n+      if (word.length() != 0\n+          && Character.isDigit(ch) ^ Character.isDigit(lastCh)) {\n+        ret += getSortingWord(word);\n+        word = \"\";\n+      }\n+      word += ch;\n+      lastCh = ch;\n+    }\n+    ret += getSortingWord(word);\n+    return ret;\n+  }\n+\n+  private static String getSortingWord(String word) {\n+    if (word.length() == 0) {\n+      return word;\n+    }\n+    if (Character.isDigit(word.charAt(0))) {\n+      for (int i = word.length(); i < 6; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d28da93bc40b6949e258dde5892adab395a7661"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU5Mjc2MQ==", "bodyText": "done. Yes, we should be more generous.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1503#discussion_r399592761", "createdAt": "2020-03-28T00:24:26Z", "author": {"login": "alai8"}, "path": "operator/src/main/java/oracle/kubernetes/utils/OperatorUtils.java", "diffHunk": "@@ -19,4 +19,62 @@ public static String joinListGrammatically(final List<String> list) {\n             .concat(list.get(list.size() - 1))\n         : list.get(0);\n   }\n+\n+  /**\n+   * Compare the 'numero lexi sorting name' as defined in {@link #getSortingString(String)} of the\n+   * given 2 Strings.\n+   *\n+   * @param str1 First string for comparison\n+   * @param str2 Second string for comparison\n+   * @return a negative integer, zero, or a positive integer as the sorting name of str1 * is less\n+   *     than, equal to, or greater than the sorting name of str2.\n+   */\n+  public static int compareSortingStrings(String str1, String str2) {\n+    if (str1 == null || str2 == null) {\n+      if (str2 != null) {\n+        return -1;\n+      } else if (str1 != null) {\n+        return 1;\n+      }\n+      return 0;\n+    }\n+    return getSortingString(str1).compareTo(getSortingString(str2));\n+  }\n+\n+  /**\n+   * The 'numero lexi sorting name' is a munged version of a\n+   * string that 'zero fills' its numeric portions. This can\n+   * be used to ensure \"member2foo\" sorts before \"member12foo\"\n+   * as these would munge to \"member000002foo\" and \"member000012foo\".\n+   *\n+   * <p>Handles up to 6 digits... - otherwise it doesn't zero fill...\n+   */\n+  public static String getSortingString(String orig) {\n+    String ret = \"\";\n+    String word = \"\";\n+    char lastCh = 0;\n+    for (char ch : orig.toCharArray()) {\n+      if (word.length() != 0\n+          && Character.isDigit(ch) ^ Character.isDigit(lastCh)) {\n+        ret += getSortingWord(word);\n+        word = \"\";\n+      }\n+      word += ch;\n+      lastCh = ch;\n+    }\n+    ret += getSortingWord(word);\n+    return ret;\n+  }\n+\n+  private static String getSortingWord(String word) {\n+    if (word.length() == 0) {\n+      return word;\n+    }\n+    if (Character.isDigit(word.charAt(0))) {\n+      for (int i = word.length(); i < 6; i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkxMzMwNw=="}, "originalCommit": {"oid": "1d28da93bc40b6949e258dde5892adab395a7661"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4660, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}