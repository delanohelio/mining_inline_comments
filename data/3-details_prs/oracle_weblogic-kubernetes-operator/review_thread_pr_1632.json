{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0OTQ0NjU4", "number": 1632, "reviewThreads": {"totalCount": 57, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMjoxMzo1M1rOD6cI4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDoxMTo0N1rOD7q4Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjA1MDI2OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMjoxMzo1M1rOGSSK6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMzoxMDo0MVrOGSk_SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgyNTI1Ng==", "bodyText": "IMO this kind of randomness belongs more in a stress test than in most QA tests....  Is this randomness deliberate? It means repeatability between test runs is gone - requiring a change to the test source code to make it repeatable when debugging.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r421825256", "createdAt": "2020-05-07T22:13:53Z", "author": {"login": "tbarnes-us"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -290,76 +303,115 @@ public void testCreateMiiDomain() {\n         adminServerPodName, domainNamespace);\n     checkPodCreated(adminServerPodName);\n \n-    // check managed server pods exists\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodCreated(managedServerPrefix + i);\n-    }\n-\n     // check admin server pod is ready\n     logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkPodReady(adminServerPodName);\n \n-    // check managed server pods are ready\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodReady(managedServerPrefix + i);\n-    }\n-\n+    // check admin service is created\n     logger.info(\"Check admin service {0} is created in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkServiceCreated(adminServerPodName);\n \n-    // check managed server services created\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkServiceCreated(managedServerPrefix + i);\n+    // check the readiness for the managed servers in each cluster\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+      for (int j = 1; j <= replicaCount; j++) {\n+        String managedServerPodName =\n+            domainUid + \"-\" + CLUSTER_NAME_PREFIX + i + managedServerNameBase + j;\n+\n+        // check managed server pod is created\n+        logger.info(\"Check for managed server pod {0} is created in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkPodCreated(managedServerPodName);\n+\n+        // check managed server pod is ready\n+        logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkPodReady(managedServerPodName);\n+\n+        // check managed server service is created\n+        logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkServiceCreated(managedServerPodName);\n+      }\n     }\n   }\n \n   @Test\n   @Order(2)\n-  @DisplayName(\"Create an ingress for a WebLogic domain in the specified domain namespace\")\n+  @DisplayName(\"Create an ingress for each cluster of the WebLogic domain in the specified domain namespace\")\n   public void testCreateIngress() {\n \n-    // create an ingress in domain namespace\n-    assertThat(assertDoesNotThrow(() -> createIngress(domainNamespace, domainUid, clusterName, managedServerPort)))\n-            .as(\"createIngress succeeds\")\n-            .withFailMessage(String.format(\"failed to create an ingress for domain %s in namespace %s\",\n-                domainUid, domainNamespace))\n-            .isTrue();\n-\n-    // check the ingress is created\n-    String ingressName = domainUid + \"-nginx\";\n-    assertThat(assertDoesNotThrow(() -> getIngressList(domainNamespace)))\n-        .as(String.format(\"found the ingress %s in namespace %s\", ingressName, domainNamespace))\n-        .withFailMessage(String.format(\"can not find ingress %s in namespace %s\", ingressName, domainNamespace))\n-        .contains(ingressName);\n-\n-    logger.info(\"ingress is created in namespace {0}\", domainNamespace);\n+    // create an ingress for each cluster of the domain in the domain namespace\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+\n+      String clusterName = CLUSTER_NAME_PREFIX + i;\n+      String ingressName = domainUid + \"-\" + clusterName + \"-nginx\";\n+\n+      logger.info(\"Creating ingress {0} for cluster {1} of domain {2} in namespace {3}\",\n+          ingressName, clusterName, domainUid, domainNamespace);\n+      assertThat(createIngress(ingressName, domainNamespace, domainUid, clusterName,\n+          MANAGED_SERVER_PORT, domainUid + \".\" + clusterName + \".test\"))\n+          .as(\"Test createIngress succeeds\")\n+          .withFailMessage(String.format(\"failed to create an ingress for cluster %s of domain %s in namespace %s\",\n+              clusterName, domainUid, domainNamespace))\n+          .isTrue();\n+\n+      // check the ingress is created\n+      assertThat(assertDoesNotThrow(() -> getIngressList(domainNamespace)))\n+          .as(String.format(\"Test the ingress %s is created in namespace %s\", ingressName, domainNamespace))\n+          .withFailMessage(String.format(\"can not find ingress %s in namespace %s\", ingressName, domainNamespace))\n+          .contains(ingressName);\n+\n+      logger.info(\"ingress {0} for cluster {1} of domain {2} is created in namespace {3}\",\n+          ingressName, clusterName, domainUid, domainNamespace);\n+    }\n   }\n \n   @Test\n   @Order(3)\n-  @DisplayName(\"Verify the application can be accessed through the ingress controller\")\n+  @DisplayName(\"Verify the application can be accessed through the ingress controller for each cluster in the domain\")\n   public void testSampleAppThroughIngressController() {\n \n-    List<String> managedServerNames = new ArrayList<>();\n-    for (int i = 1; i <= replicaCount; i++) {\n-      managedServerNames.add(managedServerNameBase + i);\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+      String clusterName = CLUSTER_NAME_PREFIX + i;\n+\n+      expectedServerNamesInAppResponse.clear();\n+      for (int j = 1; j <= replicaCount; j++) {\n+        expectedServerNamesInAppResponse.add(clusterName + managedServerNameBase + j);\n+      }\n+\n+      // check that NGINX can access the sample apps from all managed servers in the cluster of the domain\n+      curlCmd = getCurlCmd(clusterName);\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"verify NGINX can access the sample app from all managed servers in the domain\")\n+          .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n+          .isTrue();\n     }\n+  }\n \n-    // check that NGINX can access the sample apps from all managed servers in the domain\n-    String curlCmd = String.format(\"curl --silent --noproxy '*' -H 'host: %s' http://%s:%s/sample-war/index.jsp\",\n-        domainUid + \".test\", K8S_NODEPORT_HOST, nodeportshttp);\n-    assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, managedServerNames, 50))\n-        .as(\"NGINX can access the sample app from all managed servers in the domain\")\n-        .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n-        .isTrue();\n+  @Test\n+  @Order(4)\n+  @DisplayName(\"Verify scale domain with domainUid with multiple clusters in domainNamespace\")\n+  public void testScaleDomainWithMultiClusters() {\n+\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+      String clusterName = CLUSTER_NAME_PREFIX + i;\n+\n+      // set the expected server name list which should return by the app response before scale\n+      expectedServerNamesInAppResponse.clear();\n+      for (int j = 1; j <= replicaCount; j++) {\n+        expectedServerNamesInAppResponse.add(clusterName + managedServerNameBase + j);\n+      }\n+      logger.info(\"expected server name list which should be in the sample app response: {0} before scale\",\n+          expectedServerNamesInAppResponse);\n+\n+      // get a random integer between [0 - 5]\n+      int numberOfServers = new Random().nextInt(6);\n+      logger.info(\"scaling the cluster {0} of domain {1} in namespace {2} to {3} servers\",\n+          clusterName, domainUid, domainNamespace, numberOfServers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fd7ae1262d33d59bd584f51db15d4430a0fd2b4"}, "originalPosition": 284}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgyNjEyMw==", "bodyText": "Also, 5 servers seems like a lot on the surface for this kind of test - it potentially slows the test down forever more, particularly on systems that might not have enough CPU/memory to handle that many servers quickly.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r421826123", "createdAt": "2020-05-07T22:15:59Z", "author": {"login": "tbarnes-us"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -290,76 +303,115 @@ public void testCreateMiiDomain() {\n         adminServerPodName, domainNamespace);\n     checkPodCreated(adminServerPodName);\n \n-    // check managed server pods exists\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodCreated(managedServerPrefix + i);\n-    }\n-\n     // check admin server pod is ready\n     logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkPodReady(adminServerPodName);\n \n-    // check managed server pods are ready\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodReady(managedServerPrefix + i);\n-    }\n-\n+    // check admin service is created\n     logger.info(\"Check admin service {0} is created in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkServiceCreated(adminServerPodName);\n \n-    // check managed server services created\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkServiceCreated(managedServerPrefix + i);\n+    // check the readiness for the managed servers in each cluster\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+      for (int j = 1; j <= replicaCount; j++) {\n+        String managedServerPodName =\n+            domainUid + \"-\" + CLUSTER_NAME_PREFIX + i + managedServerNameBase + j;\n+\n+        // check managed server pod is created\n+        logger.info(\"Check for managed server pod {0} is created in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkPodCreated(managedServerPodName);\n+\n+        // check managed server pod is ready\n+        logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkPodReady(managedServerPodName);\n+\n+        // check managed server service is created\n+        logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkServiceCreated(managedServerPodName);\n+      }\n     }\n   }\n \n   @Test\n   @Order(2)\n-  @DisplayName(\"Create an ingress for a WebLogic domain in the specified domain namespace\")\n+  @DisplayName(\"Create an ingress for each cluster of the WebLogic domain in the specified domain namespace\")\n   public void testCreateIngress() {\n \n-    // create an ingress in domain namespace\n-    assertThat(assertDoesNotThrow(() -> createIngress(domainNamespace, domainUid, clusterName, managedServerPort)))\n-            .as(\"createIngress succeeds\")\n-            .withFailMessage(String.format(\"failed to create an ingress for domain %s in namespace %s\",\n-                domainUid, domainNamespace))\n-            .isTrue();\n-\n-    // check the ingress is created\n-    String ingressName = domainUid + \"-nginx\";\n-    assertThat(assertDoesNotThrow(() -> getIngressList(domainNamespace)))\n-        .as(String.format(\"found the ingress %s in namespace %s\", ingressName, domainNamespace))\n-        .withFailMessage(String.format(\"can not find ingress %s in namespace %s\", ingressName, domainNamespace))\n-        .contains(ingressName);\n-\n-    logger.info(\"ingress is created in namespace {0}\", domainNamespace);\n+    // create an ingress for each cluster of the domain in the domain namespace\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+\n+      String clusterName = CLUSTER_NAME_PREFIX + i;\n+      String ingressName = domainUid + \"-\" + clusterName + \"-nginx\";\n+\n+      logger.info(\"Creating ingress {0} for cluster {1} of domain {2} in namespace {3}\",\n+          ingressName, clusterName, domainUid, domainNamespace);\n+      assertThat(createIngress(ingressName, domainNamespace, domainUid, clusterName,\n+          MANAGED_SERVER_PORT, domainUid + \".\" + clusterName + \".test\"))\n+          .as(\"Test createIngress succeeds\")\n+          .withFailMessage(String.format(\"failed to create an ingress for cluster %s of domain %s in namespace %s\",\n+              clusterName, domainUid, domainNamespace))\n+          .isTrue();\n+\n+      // check the ingress is created\n+      assertThat(assertDoesNotThrow(() -> getIngressList(domainNamespace)))\n+          .as(String.format(\"Test the ingress %s is created in namespace %s\", ingressName, domainNamespace))\n+          .withFailMessage(String.format(\"can not find ingress %s in namespace %s\", ingressName, domainNamespace))\n+          .contains(ingressName);\n+\n+      logger.info(\"ingress {0} for cluster {1} of domain {2} is created in namespace {3}\",\n+          ingressName, clusterName, domainUid, domainNamespace);\n+    }\n   }\n \n   @Test\n   @Order(3)\n-  @DisplayName(\"Verify the application can be accessed through the ingress controller\")\n+  @DisplayName(\"Verify the application can be accessed through the ingress controller for each cluster in the domain\")\n   public void testSampleAppThroughIngressController() {\n \n-    List<String> managedServerNames = new ArrayList<>();\n-    for (int i = 1; i <= replicaCount; i++) {\n-      managedServerNames.add(managedServerNameBase + i);\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+      String clusterName = CLUSTER_NAME_PREFIX + i;\n+\n+      expectedServerNamesInAppResponse.clear();\n+      for (int j = 1; j <= replicaCount; j++) {\n+        expectedServerNamesInAppResponse.add(clusterName + managedServerNameBase + j);\n+      }\n+\n+      // check that NGINX can access the sample apps from all managed servers in the cluster of the domain\n+      curlCmd = getCurlCmd(clusterName);\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"verify NGINX can access the sample app from all managed servers in the domain\")\n+          .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n+          .isTrue();\n     }\n+  }\n \n-    // check that NGINX can access the sample apps from all managed servers in the domain\n-    String curlCmd = String.format(\"curl --silent --noproxy '*' -H 'host: %s' http://%s:%s/sample-war/index.jsp\",\n-        domainUid + \".test\", K8S_NODEPORT_HOST, nodeportshttp);\n-    assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, managedServerNames, 50))\n-        .as(\"NGINX can access the sample app from all managed servers in the domain\")\n-        .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n-        .isTrue();\n+  @Test\n+  @Order(4)\n+  @DisplayName(\"Verify scale domain with domainUid with multiple clusters in domainNamespace\")\n+  public void testScaleDomainWithMultiClusters() {\n+\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+      String clusterName = CLUSTER_NAME_PREFIX + i;\n+\n+      // set the expected server name list which should return by the app response before scale\n+      expectedServerNamesInAppResponse.clear();\n+      for (int j = 1; j <= replicaCount; j++) {\n+        expectedServerNamesInAppResponse.add(clusterName + managedServerNameBase + j);\n+      }\n+      logger.info(\"expected server name list which should be in the sample app response: {0} before scale\",\n+          expectedServerNamesInAppResponse);\n+\n+      // get a random integer between [0 - 5]\n+      int numberOfServers = new Random().nextInt(6);\n+      logger.info(\"scaling the cluster {0} of domain {1} in namespace {2} to {3} servers\",\n+          clusterName, domainUid, domainNamespace, numberOfServers);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgyNTI1Ng=="}, "originalCommit": {"oid": "8fd7ae1262d33d59bd584f51db15d4430a0fd2b4"}, "originalPosition": 284}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzMDY0NQ==", "bodyText": "You are right. Changed the logic a little bit.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r421930645", "createdAt": "2020-05-08T04:27:26Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -290,76 +303,115 @@ public void testCreateMiiDomain() {\n         adminServerPodName, domainNamespace);\n     checkPodCreated(adminServerPodName);\n \n-    // check managed server pods exists\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodCreated(managedServerPrefix + i);\n-    }\n-\n     // check admin server pod is ready\n     logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkPodReady(adminServerPodName);\n \n-    // check managed server pods are ready\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodReady(managedServerPrefix + i);\n-    }\n-\n+    // check admin service is created\n     logger.info(\"Check admin service {0} is created in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkServiceCreated(adminServerPodName);\n \n-    // check managed server services created\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkServiceCreated(managedServerPrefix + i);\n+    // check the readiness for the managed servers in each cluster\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+      for (int j = 1; j <= replicaCount; j++) {\n+        String managedServerPodName =\n+            domainUid + \"-\" + CLUSTER_NAME_PREFIX + i + managedServerNameBase + j;\n+\n+        // check managed server pod is created\n+        logger.info(\"Check for managed server pod {0} is created in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkPodCreated(managedServerPodName);\n+\n+        // check managed server pod is ready\n+        logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkPodReady(managedServerPodName);\n+\n+        // check managed server service is created\n+        logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkServiceCreated(managedServerPodName);\n+      }\n     }\n   }\n \n   @Test\n   @Order(2)\n-  @DisplayName(\"Create an ingress for a WebLogic domain in the specified domain namespace\")\n+  @DisplayName(\"Create an ingress for each cluster of the WebLogic domain in the specified domain namespace\")\n   public void testCreateIngress() {\n \n-    // create an ingress in domain namespace\n-    assertThat(assertDoesNotThrow(() -> createIngress(domainNamespace, domainUid, clusterName, managedServerPort)))\n-            .as(\"createIngress succeeds\")\n-            .withFailMessage(String.format(\"failed to create an ingress for domain %s in namespace %s\",\n-                domainUid, domainNamespace))\n-            .isTrue();\n-\n-    // check the ingress is created\n-    String ingressName = domainUid + \"-nginx\";\n-    assertThat(assertDoesNotThrow(() -> getIngressList(domainNamespace)))\n-        .as(String.format(\"found the ingress %s in namespace %s\", ingressName, domainNamespace))\n-        .withFailMessage(String.format(\"can not find ingress %s in namespace %s\", ingressName, domainNamespace))\n-        .contains(ingressName);\n-\n-    logger.info(\"ingress is created in namespace {0}\", domainNamespace);\n+    // create an ingress for each cluster of the domain in the domain namespace\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+\n+      String clusterName = CLUSTER_NAME_PREFIX + i;\n+      String ingressName = domainUid + \"-\" + clusterName + \"-nginx\";\n+\n+      logger.info(\"Creating ingress {0} for cluster {1} of domain {2} in namespace {3}\",\n+          ingressName, clusterName, domainUid, domainNamespace);\n+      assertThat(createIngress(ingressName, domainNamespace, domainUid, clusterName,\n+          MANAGED_SERVER_PORT, domainUid + \".\" + clusterName + \".test\"))\n+          .as(\"Test createIngress succeeds\")\n+          .withFailMessage(String.format(\"failed to create an ingress for cluster %s of domain %s in namespace %s\",\n+              clusterName, domainUid, domainNamespace))\n+          .isTrue();\n+\n+      // check the ingress is created\n+      assertThat(assertDoesNotThrow(() -> getIngressList(domainNamespace)))\n+          .as(String.format(\"Test the ingress %s is created in namespace %s\", ingressName, domainNamespace))\n+          .withFailMessage(String.format(\"can not find ingress %s in namespace %s\", ingressName, domainNamespace))\n+          .contains(ingressName);\n+\n+      logger.info(\"ingress {0} for cluster {1} of domain {2} is created in namespace {3}\",\n+          ingressName, clusterName, domainUid, domainNamespace);\n+    }\n   }\n \n   @Test\n   @Order(3)\n-  @DisplayName(\"Verify the application can be accessed through the ingress controller\")\n+  @DisplayName(\"Verify the application can be accessed through the ingress controller for each cluster in the domain\")\n   public void testSampleAppThroughIngressController() {\n \n-    List<String> managedServerNames = new ArrayList<>();\n-    for (int i = 1; i <= replicaCount; i++) {\n-      managedServerNames.add(managedServerNameBase + i);\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+      String clusterName = CLUSTER_NAME_PREFIX + i;\n+\n+      expectedServerNamesInAppResponse.clear();\n+      for (int j = 1; j <= replicaCount; j++) {\n+        expectedServerNamesInAppResponse.add(clusterName + managedServerNameBase + j);\n+      }\n+\n+      // check that NGINX can access the sample apps from all managed servers in the cluster of the domain\n+      curlCmd = getCurlCmd(clusterName);\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"verify NGINX can access the sample app from all managed servers in the domain\")\n+          .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n+          .isTrue();\n     }\n+  }\n \n-    // check that NGINX can access the sample apps from all managed servers in the domain\n-    String curlCmd = String.format(\"curl --silent --noproxy '*' -H 'host: %s' http://%s:%s/sample-war/index.jsp\",\n-        domainUid + \".test\", K8S_NODEPORT_HOST, nodeportshttp);\n-    assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, managedServerNames, 50))\n-        .as(\"NGINX can access the sample app from all managed servers in the domain\")\n-        .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n-        .isTrue();\n+  @Test\n+  @Order(4)\n+  @DisplayName(\"Verify scale domain with domainUid with multiple clusters in domainNamespace\")\n+  public void testScaleDomainWithMultiClusters() {\n+\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+      String clusterName = CLUSTER_NAME_PREFIX + i;\n+\n+      // set the expected server name list which should return by the app response before scale\n+      expectedServerNamesInAppResponse.clear();\n+      for (int j = 1; j <= replicaCount; j++) {\n+        expectedServerNamesInAppResponse.add(clusterName + managedServerNameBase + j);\n+      }\n+      logger.info(\"expected server name list which should be in the sample app response: {0} before scale\",\n+          expectedServerNamesInAppResponse);\n+\n+      // get a random integer between [0 - 5]\n+      int numberOfServers = new Random().nextInt(6);\n+      logger.info(\"scaling the cluster {0} of domain {1} in namespace {2} to {3} servers\",\n+          clusterName, domainUid, domainNamespace, numberOfServers);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgyNTI1Ng=="}, "originalCommit": {"oid": "8fd7ae1262d33d59bd584f51db15d4430a0fd2b4"}, "originalPosition": 284}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjEzMzU3Ng==", "bodyText": "LGTM", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422133576", "createdAt": "2020-05-08T13:10:41Z", "author": {"login": "tbarnes-us"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -290,76 +303,115 @@ public void testCreateMiiDomain() {\n         adminServerPodName, domainNamespace);\n     checkPodCreated(adminServerPodName);\n \n-    // check managed server pods exists\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodCreated(managedServerPrefix + i);\n-    }\n-\n     // check admin server pod is ready\n     logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkPodReady(adminServerPodName);\n \n-    // check managed server pods are ready\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodReady(managedServerPrefix + i);\n-    }\n-\n+    // check admin service is created\n     logger.info(\"Check admin service {0} is created in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkServiceCreated(adminServerPodName);\n \n-    // check managed server services created\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkServiceCreated(managedServerPrefix + i);\n+    // check the readiness for the managed servers in each cluster\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+      for (int j = 1; j <= replicaCount; j++) {\n+        String managedServerPodName =\n+            domainUid + \"-\" + CLUSTER_NAME_PREFIX + i + managedServerNameBase + j;\n+\n+        // check managed server pod is created\n+        logger.info(\"Check for managed server pod {0} is created in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkPodCreated(managedServerPodName);\n+\n+        // check managed server pod is ready\n+        logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkPodReady(managedServerPodName);\n+\n+        // check managed server service is created\n+        logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkServiceCreated(managedServerPodName);\n+      }\n     }\n   }\n \n   @Test\n   @Order(2)\n-  @DisplayName(\"Create an ingress for a WebLogic domain in the specified domain namespace\")\n+  @DisplayName(\"Create an ingress for each cluster of the WebLogic domain in the specified domain namespace\")\n   public void testCreateIngress() {\n \n-    // create an ingress in domain namespace\n-    assertThat(assertDoesNotThrow(() -> createIngress(domainNamespace, domainUid, clusterName, managedServerPort)))\n-            .as(\"createIngress succeeds\")\n-            .withFailMessage(String.format(\"failed to create an ingress for domain %s in namespace %s\",\n-                domainUid, domainNamespace))\n-            .isTrue();\n-\n-    // check the ingress is created\n-    String ingressName = domainUid + \"-nginx\";\n-    assertThat(assertDoesNotThrow(() -> getIngressList(domainNamespace)))\n-        .as(String.format(\"found the ingress %s in namespace %s\", ingressName, domainNamespace))\n-        .withFailMessage(String.format(\"can not find ingress %s in namespace %s\", ingressName, domainNamespace))\n-        .contains(ingressName);\n-\n-    logger.info(\"ingress is created in namespace {0}\", domainNamespace);\n+    // create an ingress for each cluster of the domain in the domain namespace\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+\n+      String clusterName = CLUSTER_NAME_PREFIX + i;\n+      String ingressName = domainUid + \"-\" + clusterName + \"-nginx\";\n+\n+      logger.info(\"Creating ingress {0} for cluster {1} of domain {2} in namespace {3}\",\n+          ingressName, clusterName, domainUid, domainNamespace);\n+      assertThat(createIngress(ingressName, domainNamespace, domainUid, clusterName,\n+          MANAGED_SERVER_PORT, domainUid + \".\" + clusterName + \".test\"))\n+          .as(\"Test createIngress succeeds\")\n+          .withFailMessage(String.format(\"failed to create an ingress for cluster %s of domain %s in namespace %s\",\n+              clusterName, domainUid, domainNamespace))\n+          .isTrue();\n+\n+      // check the ingress is created\n+      assertThat(assertDoesNotThrow(() -> getIngressList(domainNamespace)))\n+          .as(String.format(\"Test the ingress %s is created in namespace %s\", ingressName, domainNamespace))\n+          .withFailMessage(String.format(\"can not find ingress %s in namespace %s\", ingressName, domainNamespace))\n+          .contains(ingressName);\n+\n+      logger.info(\"ingress {0} for cluster {1} of domain {2} is created in namespace {3}\",\n+          ingressName, clusterName, domainUid, domainNamespace);\n+    }\n   }\n \n   @Test\n   @Order(3)\n-  @DisplayName(\"Verify the application can be accessed through the ingress controller\")\n+  @DisplayName(\"Verify the application can be accessed through the ingress controller for each cluster in the domain\")\n   public void testSampleAppThroughIngressController() {\n \n-    List<String> managedServerNames = new ArrayList<>();\n-    for (int i = 1; i <= replicaCount; i++) {\n-      managedServerNames.add(managedServerNameBase + i);\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+      String clusterName = CLUSTER_NAME_PREFIX + i;\n+\n+      expectedServerNamesInAppResponse.clear();\n+      for (int j = 1; j <= replicaCount; j++) {\n+        expectedServerNamesInAppResponse.add(clusterName + managedServerNameBase + j);\n+      }\n+\n+      // check that NGINX can access the sample apps from all managed servers in the cluster of the domain\n+      curlCmd = getCurlCmd(clusterName);\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"verify NGINX can access the sample app from all managed servers in the domain\")\n+          .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n+          .isTrue();\n     }\n+  }\n \n-    // check that NGINX can access the sample apps from all managed servers in the domain\n-    String curlCmd = String.format(\"curl --silent --noproxy '*' -H 'host: %s' http://%s:%s/sample-war/index.jsp\",\n-        domainUid + \".test\", K8S_NODEPORT_HOST, nodeportshttp);\n-    assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, managedServerNames, 50))\n-        .as(\"NGINX can access the sample app from all managed servers in the domain\")\n-        .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n-        .isTrue();\n+  @Test\n+  @Order(4)\n+  @DisplayName(\"Verify scale domain with domainUid with multiple clusters in domainNamespace\")\n+  public void testScaleDomainWithMultiClusters() {\n+\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+      String clusterName = CLUSTER_NAME_PREFIX + i;\n+\n+      // set the expected server name list which should return by the app response before scale\n+      expectedServerNamesInAppResponse.clear();\n+      for (int j = 1; j <= replicaCount; j++) {\n+        expectedServerNamesInAppResponse.add(clusterName + managedServerNameBase + j);\n+      }\n+      logger.info(\"expected server name list which should be in the sample app response: {0} before scale\",\n+          expectedServerNamesInAppResponse);\n+\n+      // get a random integer between [0 - 5]\n+      int numberOfServers = new Random().nextInt(6);\n+      logger.info(\"scaling the cluster {0} of domain {1} in namespace {2} to {3} servers\",\n+          clusterName, domainUid, domainNamespace, numberOfServers);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgyNTI1Ng=="}, "originalCommit": {"oid": "8fd7ae1262d33d59bd584f51db15d4430a0fd2b4"}, "originalPosition": 284}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyODY3NDE5OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNTo1NjoxN1rOGSqgdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxMzo1MDo1MVrOGS7P-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIyMzk4OA==", "bodyText": "can we change this file name to something that tells which test is using it ?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422223988", "createdAt": "2020-05-08T15:56:17Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -107,28 +109,30 @@\n class ItSimpleNginxValidation implements LoggedTest {\n \n   // mii constants\n-  private static final String WDT_MODEL_FILE = \"model1-wls.yaml\";\n+  private static final String WDT_MODEL_FILE = \"model2-wls.yaml\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae35744a863fab02f14e859110aeb3e4bddd4db8"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyODI1Mg==", "bodyText": "that's a great idea!", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422428252", "createdAt": "2020-05-09T00:19:57Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -107,28 +109,30 @@\n class ItSimpleNginxValidation implements LoggedTest {\n \n   // mii constants\n-  private static final String WDT_MODEL_FILE = \"model1-wls.yaml\";\n+  private static final String WDT_MODEL_FILE = \"model2-wls.yaml\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIyMzk4OA=="}, "originalCommit": {"oid": "ae35744a863fab02f14e859110aeb3e4bddd4db8"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ5ODI5OQ==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422498299", "createdAt": "2020-05-09T13:50:51Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -107,28 +109,30 @@\n class ItSimpleNginxValidation implements LoggedTest {\n \n   // mii constants\n-  private static final String WDT_MODEL_FILE = \"model1-wls.yaml\";\n+  private static final String WDT_MODEL_FILE = \"model2-wls.yaml\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIyMzk4OA=="}, "originalCommit": {"oid": "ae35744a863fab02f14e859110aeb3e4bddd4db8"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTMyMjY4OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxOToyMjozM1rOGSwzhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMjo1OTo1NlrOGS4CZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMyNzE3NA==", "bodyText": "Creating Ingress {0} for cluster {1} succeeded.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422327174", "createdAt": "2020-05-08T19:22:33Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -293,76 +304,110 @@ public void testCreateMiiDomain() {\n         adminServerPodName, domainNamespace);\n     checkPodCreated(adminServerPodName);\n \n-    // check managed server pods exists\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodCreated(managedServerPrefix + i);\n-    }\n-\n     // check admin server pod is ready\n     logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkPodReady(adminServerPodName);\n \n-    // check managed server pods are ready\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodReady(managedServerPrefix + i);\n-    }\n-\n+    // check admin service is created\n     logger.info(\"Check admin service {0} is created in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkServiceCreated(adminServerPodName);\n \n-    // check managed server services created\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkServiceCreated(managedServerPrefix + i);\n+    // check the readiness for the managed servers in each cluster\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+      for (int j = 1; j <= replicaCount; j++) {\n+        String managedServerPodName =\n+            domainUid + \"-\" + CLUSTER_NAME_PREFIX + i + managedServerNameBase + j;\n+\n+        // check managed server pod is created\n+        logger.info(\"Check for managed server pod {0} is created in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkPodCreated(managedServerPodName);\n+\n+        // check managed server pod is ready\n+        logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkPodReady(managedServerPodName);\n+\n+        // check managed server service is created\n+        logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkServiceCreated(managedServerPodName);\n+      }\n     }\n   }\n \n   @Test\n   @Order(2)\n-  @DisplayName(\"Create an ingress for a WebLogic domain in the specified domain namespace\")\n+  @DisplayName(\"Create an ingress for each cluster of the WebLogic domain in the specified domain namespace\")\n   public void testCreateIngress() {\n \n-    // create an ingress in domain namespace\n-    assertThat(assertDoesNotThrow(() -> createIngress(domainNamespace, domainUid, clusterName, managedServerPort)))\n-            .as(\"createIngress succeeds\")\n-            .withFailMessage(String.format(\"failed to create an ingress for domain %s in namespace %s\",\n-                domainUid, domainNamespace))\n-            .isTrue();\n-\n-    // check the ingress is created\n-    String ingressName = domainUid + \"-nginx\";\n-    assertThat(assertDoesNotThrow(() -> getIngressList(domainNamespace)))\n-        .as(String.format(\"found the ingress %s in namespace %s\", ingressName, domainNamespace))\n-        .withFailMessage(String.format(\"can not find ingress %s in namespace %s\", ingressName, domainNamespace))\n-        .contains(ingressName);\n-\n-    logger.info(\"ingress is created in namespace {0}\", domainNamespace);\n+    // create an ingress for each cluster of the domain in the domain namespace\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+\n+      String clusterName = CLUSTER_NAME_PREFIX + i;\n+      String ingressName = domainUid + \"-\" + clusterName + \"-nginx\";\n+\n+      logger.info(\"Creating ingress {0} for cluster {1} of domain {2} in namespace {3}\",\n+          ingressName, clusterName, domainUid, domainNamespace);\n+      assertThat(createIngress(ingressName, domainNamespace, domainUid, clusterName,\n+          MANAGED_SERVER_PORT, domainUid + \".\" + clusterName + \".test\"))\n+          .as(\"Test createIngress succeeds\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0NTY3MQ==", "bodyText": "Descriptable.as() java doc is here: https://joel-costigliola.github.io/assertj/core-8/api/org/assertj/core/api/Descriptable.html#as-java.lang.String-java.lang.Object...-\nThe msg in as() sets the description of the assertion that is going to be called after.\nIt is not the message printed if the assertion passes.\nIf the assertion fails, in your case, we will get the message something like:\n[Creating Ingress  for cluster  succeeded] {failed to create an ingress for cluster  of domain <domain_name> in namespace }\nIt will be confusing.\nHow about change to:\nChecking that ingress {0} for cluster {1} was created successfully.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422445671", "createdAt": "2020-05-09T02:59:56Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -293,76 +304,110 @@ public void testCreateMiiDomain() {\n         adminServerPodName, domainNamespace);\n     checkPodCreated(adminServerPodName);\n \n-    // check managed server pods exists\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodCreated(managedServerPrefix + i);\n-    }\n-\n     // check admin server pod is ready\n     logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkPodReady(adminServerPodName);\n \n-    // check managed server pods are ready\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodReady(managedServerPrefix + i);\n-    }\n-\n+    // check admin service is created\n     logger.info(\"Check admin service {0} is created in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkServiceCreated(adminServerPodName);\n \n-    // check managed server services created\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkServiceCreated(managedServerPrefix + i);\n+    // check the readiness for the managed servers in each cluster\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+      for (int j = 1; j <= replicaCount; j++) {\n+        String managedServerPodName =\n+            domainUid + \"-\" + CLUSTER_NAME_PREFIX + i + managedServerNameBase + j;\n+\n+        // check managed server pod is created\n+        logger.info(\"Check for managed server pod {0} is created in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkPodCreated(managedServerPodName);\n+\n+        // check managed server pod is ready\n+        logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkPodReady(managedServerPodName);\n+\n+        // check managed server service is created\n+        logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkServiceCreated(managedServerPodName);\n+      }\n     }\n   }\n \n   @Test\n   @Order(2)\n-  @DisplayName(\"Create an ingress for a WebLogic domain in the specified domain namespace\")\n+  @DisplayName(\"Create an ingress for each cluster of the WebLogic domain in the specified domain namespace\")\n   public void testCreateIngress() {\n \n-    // create an ingress in domain namespace\n-    assertThat(assertDoesNotThrow(() -> createIngress(domainNamespace, domainUid, clusterName, managedServerPort)))\n-            .as(\"createIngress succeeds\")\n-            .withFailMessage(String.format(\"failed to create an ingress for domain %s in namespace %s\",\n-                domainUid, domainNamespace))\n-            .isTrue();\n-\n-    // check the ingress is created\n-    String ingressName = domainUid + \"-nginx\";\n-    assertThat(assertDoesNotThrow(() -> getIngressList(domainNamespace)))\n-        .as(String.format(\"found the ingress %s in namespace %s\", ingressName, domainNamespace))\n-        .withFailMessage(String.format(\"can not find ingress %s in namespace %s\", ingressName, domainNamespace))\n-        .contains(ingressName);\n-\n-    logger.info(\"ingress is created in namespace {0}\", domainNamespace);\n+    // create an ingress for each cluster of the domain in the domain namespace\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+\n+      String clusterName = CLUSTER_NAME_PREFIX + i;\n+      String ingressName = domainUid + \"-\" + clusterName + \"-nginx\";\n+\n+      logger.info(\"Creating ingress {0} for cluster {1} of domain {2} in namespace {3}\",\n+          ingressName, clusterName, domainUid, domainNamespace);\n+      assertThat(createIngress(ingressName, domainNamespace, domainUid, clusterName,\n+          MANAGED_SERVER_PORT, domainUid + \".\" + clusterName + \".test\"))\n+          .as(\"Test createIngress succeeds\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMyNzE3NA=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 198}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTM0MjI5OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxOToyODo1N1rOGSw_jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNDozMjowMVrOGS7gmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMzMDI1NQ==", "bodyText": "Ingress found in namespace....", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422330255", "createdAt": "2020-05-08T19:28:57Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -293,76 +304,110 @@ public void testCreateMiiDomain() {\n         adminServerPodName, domainNamespace);\n     checkPodCreated(adminServerPodName);\n \n-    // check managed server pods exists\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodCreated(managedServerPrefix + i);\n-    }\n-\n     // check admin server pod is ready\n     logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkPodReady(adminServerPodName);\n \n-    // check managed server pods are ready\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodReady(managedServerPrefix + i);\n-    }\n-\n+    // check admin service is created\n     logger.info(\"Check admin service {0} is created in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkServiceCreated(adminServerPodName);\n \n-    // check managed server services created\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkServiceCreated(managedServerPrefix + i);\n+    // check the readiness for the managed servers in each cluster\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+      for (int j = 1; j <= replicaCount; j++) {\n+        String managedServerPodName =\n+            domainUid + \"-\" + CLUSTER_NAME_PREFIX + i + managedServerNameBase + j;\n+\n+        // check managed server pod is created\n+        logger.info(\"Check for managed server pod {0} is created in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkPodCreated(managedServerPodName);\n+\n+        // check managed server pod is ready\n+        logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkPodReady(managedServerPodName);\n+\n+        // check managed server service is created\n+        logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkServiceCreated(managedServerPodName);\n+      }\n     }\n   }\n \n   @Test\n   @Order(2)\n-  @DisplayName(\"Create an ingress for a WebLogic domain in the specified domain namespace\")\n+  @DisplayName(\"Create an ingress for each cluster of the WebLogic domain in the specified domain namespace\")\n   public void testCreateIngress() {\n \n-    // create an ingress in domain namespace\n-    assertThat(assertDoesNotThrow(() -> createIngress(domainNamespace, domainUid, clusterName, managedServerPort)))\n-            .as(\"createIngress succeeds\")\n-            .withFailMessage(String.format(\"failed to create an ingress for domain %s in namespace %s\",\n-                domainUid, domainNamespace))\n-            .isTrue();\n-\n-    // check the ingress is created\n-    String ingressName = domainUid + \"-nginx\";\n-    assertThat(assertDoesNotThrow(() -> getIngressList(domainNamespace)))\n-        .as(String.format(\"found the ingress %s in namespace %s\", ingressName, domainNamespace))\n-        .withFailMessage(String.format(\"can not find ingress %s in namespace %s\", ingressName, domainNamespace))\n-        .contains(ingressName);\n-\n-    logger.info(\"ingress is created in namespace {0}\", domainNamespace);\n+    // create an ingress for each cluster of the domain in the domain namespace\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+\n+      String clusterName = CLUSTER_NAME_PREFIX + i;\n+      String ingressName = domainUid + \"-\" + clusterName + \"-nginx\";\n+\n+      logger.info(\"Creating ingress {0} for cluster {1} of domain {2} in namespace {3}\",\n+          ingressName, clusterName, domainUid, domainNamespace);\n+      assertThat(createIngress(ingressName, domainNamespace, domainUid, clusterName,\n+          MANAGED_SERVER_PORT, domainUid + \".\" + clusterName + \".test\"))\n+          .as(\"Test createIngress succeeds\")\n+          .withFailMessage(String.format(\"failed to create an ingress for cluster %s of domain %s in namespace %s\",\n+              clusterName, domainUid, domainNamespace))\n+          .isTrue();\n+\n+      // check the ingress is created\n+      assertThat(assertDoesNotThrow(() -> getIngressList(domainNamespace)))\n+          .as(String.format(\"Test the ingress %s is created in namespace %s\", ingressName, domainNamespace))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 205}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwMjU1NA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422502554", "createdAt": "2020-05-09T14:32:01Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -293,76 +304,110 @@ public void testCreateMiiDomain() {\n         adminServerPodName, domainNamespace);\n     checkPodCreated(adminServerPodName);\n \n-    // check managed server pods exists\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodCreated(managedServerPrefix + i);\n-    }\n-\n     // check admin server pod is ready\n     logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkPodReady(adminServerPodName);\n \n-    // check managed server pods are ready\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodReady(managedServerPrefix + i);\n-    }\n-\n+    // check admin service is created\n     logger.info(\"Check admin service {0} is created in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkServiceCreated(adminServerPodName);\n \n-    // check managed server services created\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkServiceCreated(managedServerPrefix + i);\n+    // check the readiness for the managed servers in each cluster\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+      for (int j = 1; j <= replicaCount; j++) {\n+        String managedServerPodName =\n+            domainUid + \"-\" + CLUSTER_NAME_PREFIX + i + managedServerNameBase + j;\n+\n+        // check managed server pod is created\n+        logger.info(\"Check for managed server pod {0} is created in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkPodCreated(managedServerPodName);\n+\n+        // check managed server pod is ready\n+        logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkPodReady(managedServerPodName);\n+\n+        // check managed server service is created\n+        logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkServiceCreated(managedServerPodName);\n+      }\n     }\n   }\n \n   @Test\n   @Order(2)\n-  @DisplayName(\"Create an ingress for a WebLogic domain in the specified domain namespace\")\n+  @DisplayName(\"Create an ingress for each cluster of the WebLogic domain in the specified domain namespace\")\n   public void testCreateIngress() {\n \n-    // create an ingress in domain namespace\n-    assertThat(assertDoesNotThrow(() -> createIngress(domainNamespace, domainUid, clusterName, managedServerPort)))\n-            .as(\"createIngress succeeds\")\n-            .withFailMessage(String.format(\"failed to create an ingress for domain %s in namespace %s\",\n-                domainUid, domainNamespace))\n-            .isTrue();\n-\n-    // check the ingress is created\n-    String ingressName = domainUid + \"-nginx\";\n-    assertThat(assertDoesNotThrow(() -> getIngressList(domainNamespace)))\n-        .as(String.format(\"found the ingress %s in namespace %s\", ingressName, domainNamespace))\n-        .withFailMessage(String.format(\"can not find ingress %s in namespace %s\", ingressName, domainNamespace))\n-        .contains(ingressName);\n-\n-    logger.info(\"ingress is created in namespace {0}\", domainNamespace);\n+    // create an ingress for each cluster of the domain in the domain namespace\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+\n+      String clusterName = CLUSTER_NAME_PREFIX + i;\n+      String ingressName = domainUid + \"-\" + clusterName + \"-nginx\";\n+\n+      logger.info(\"Creating ingress {0} for cluster {1} of domain {2} in namespace {3}\",\n+          ingressName, clusterName, domainUid, domainNamespace);\n+      assertThat(createIngress(ingressName, domainNamespace, domainUid, clusterName,\n+          MANAGED_SERVER_PORT, domainUid + \".\" + clusterName + \".test\"))\n+          .as(\"Test createIngress succeeds\")\n+          .withFailMessage(String.format(\"failed to create an ingress for cluster %s of domain %s in namespace %s\",\n+              clusterName, domainUid, domainNamespace))\n+          .isTrue();\n+\n+      // check the ingress is created\n+      assertThat(assertDoesNotThrow(() -> getIngressList(domainNamespace)))\n+          .as(String.format(\"Test the ingress %s is created in namespace %s\", ingressName, domainNamespace))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMzMDI1NQ=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 205}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTQ5ODI0OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMDoyMzo1NFrOGSyg7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNDozNDoyNFrOGS7hlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM1NTE4Mg==", "bodyText": "Does this need to be a separate test? All it does is to create ingress resource / controller. Is it testing any operator code?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422355182", "createdAt": "2020-05-08T20:23:54Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -293,76 +304,110 @@ public void testCreateMiiDomain() {\n         adminServerPodName, domainNamespace);\n     checkPodCreated(adminServerPodName);\n \n-    // check managed server pods exists\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodCreated(managedServerPrefix + i);\n-    }\n-\n     // check admin server pod is ready\n     logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkPodReady(adminServerPodName);\n \n-    // check managed server pods are ready\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodReady(managedServerPrefix + i);\n-    }\n-\n+    // check admin service is created\n     logger.info(\"Check admin service {0} is created in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkServiceCreated(adminServerPodName);\n \n-    // check managed server services created\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkServiceCreated(managedServerPrefix + i);\n+    // check the readiness for the managed servers in each cluster\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+      for (int j = 1; j <= replicaCount; j++) {\n+        String managedServerPodName =\n+            domainUid + \"-\" + CLUSTER_NAME_PREFIX + i + managedServerNameBase + j;\n+\n+        // check managed server pod is created\n+        logger.info(\"Check for managed server pod {0} is created in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkPodCreated(managedServerPodName);\n+\n+        // check managed server pod is ready\n+        logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkPodReady(managedServerPodName);\n+\n+        // check managed server service is created\n+        logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkServiceCreated(managedServerPodName);\n+      }\n     }\n   }\n \n   @Test\n   @Order(2)\n-  @DisplayName(\"Create an ingress for a WebLogic domain in the specified domain namespace\")\n+  @DisplayName(\"Create an ingress for each cluster of the WebLogic domain in the specified domain namespace\")\n   public void testCreateIngress() {\n \n-    // create an ingress in domain namespace\n-    assertThat(assertDoesNotThrow(() -> createIngress(domainNamespace, domainUid, clusterName, managedServerPort)))\n-            .as(\"createIngress succeeds\")\n-            .withFailMessage(String.format(\"failed to create an ingress for domain %s in namespace %s\",\n-                domainUid, domainNamespace))\n-            .isTrue();\n-\n-    // check the ingress is created\n-    String ingressName = domainUid + \"-nginx\";\n-    assertThat(assertDoesNotThrow(() -> getIngressList(domainNamespace)))\n-        .as(String.format(\"found the ingress %s in namespace %s\", ingressName, domainNamespace))\n-        .withFailMessage(String.format(\"can not find ingress %s in namespace %s\", ingressName, domainNamespace))\n-        .contains(ingressName);\n-\n-    logger.info(\"ingress is created in namespace {0}\", domainNamespace);\n+    // create an ingress for each cluster of the domain in the domain namespace", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwMjgwNg==", "bodyText": "The test is about Nginx validation. I think this is a valid test.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422502806", "createdAt": "2020-05-09T14:34:24Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -293,76 +304,110 @@ public void testCreateMiiDomain() {\n         adminServerPodName, domainNamespace);\n     checkPodCreated(adminServerPodName);\n \n-    // check managed server pods exists\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodCreated(managedServerPrefix + i);\n-    }\n-\n     // check admin server pod is ready\n     logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkPodReady(adminServerPodName);\n \n-    // check managed server pods are ready\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodReady(managedServerPrefix + i);\n-    }\n-\n+    // check admin service is created\n     logger.info(\"Check admin service {0} is created in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkServiceCreated(adminServerPodName);\n \n-    // check managed server services created\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkServiceCreated(managedServerPrefix + i);\n+    // check the readiness for the managed servers in each cluster\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+      for (int j = 1; j <= replicaCount; j++) {\n+        String managedServerPodName =\n+            domainUid + \"-\" + CLUSTER_NAME_PREFIX + i + managedServerNameBase + j;\n+\n+        // check managed server pod is created\n+        logger.info(\"Check for managed server pod {0} is created in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkPodCreated(managedServerPodName);\n+\n+        // check managed server pod is ready\n+        logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkPodReady(managedServerPodName);\n+\n+        // check managed server service is created\n+        logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkServiceCreated(managedServerPodName);\n+      }\n     }\n   }\n \n   @Test\n   @Order(2)\n-  @DisplayName(\"Create an ingress for a WebLogic domain in the specified domain namespace\")\n+  @DisplayName(\"Create an ingress for each cluster of the WebLogic domain in the specified domain namespace\")\n   public void testCreateIngress() {\n \n-    // create an ingress in domain namespace\n-    assertThat(assertDoesNotThrow(() -> createIngress(domainNamespace, domainUid, clusterName, managedServerPort)))\n-            .as(\"createIngress succeeds\")\n-            .withFailMessage(String.format(\"failed to create an ingress for domain %s in namespace %s\",\n-                domainUid, domainNamespace))\n-            .isTrue();\n-\n-    // check the ingress is created\n-    String ingressName = domainUid + \"-nginx\";\n-    assertThat(assertDoesNotThrow(() -> getIngressList(domainNamespace)))\n-        .as(String.format(\"found the ingress %s in namespace %s\", ingressName, domainNamespace))\n-        .withFailMessage(String.format(\"can not find ingress %s in namespace %s\", ingressName, domainNamespace))\n-        .contains(ingressName);\n-\n-    logger.info(\"ingress is created in namespace {0}\", domainNamespace);\n+    // create an ingress for each cluster of the domain in the domain namespace", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM1NTE4Mg=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTUwNTk4OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMDoyNjoxNFrOGSylpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNDozNDozNVrOGS7hpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM1NjM5MA==", "bodyText": "is the test name testAppAccessThroughIngressController may be more appropriate?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422356390", "createdAt": "2020-05-08T20:26:14Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -293,76 +304,110 @@ public void testCreateMiiDomain() {\n         adminServerPodName, domainNamespace);\n     checkPodCreated(adminServerPodName);\n \n-    // check managed server pods exists\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodCreated(managedServerPrefix + i);\n-    }\n-\n     // check admin server pod is ready\n     logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkPodReady(adminServerPodName);\n \n-    // check managed server pods are ready\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodReady(managedServerPrefix + i);\n-    }\n-\n+    // check admin service is created\n     logger.info(\"Check admin service {0} is created in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkServiceCreated(adminServerPodName);\n \n-    // check managed server services created\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkServiceCreated(managedServerPrefix + i);\n+    // check the readiness for the managed servers in each cluster\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+      for (int j = 1; j <= replicaCount; j++) {\n+        String managedServerPodName =\n+            domainUid + \"-\" + CLUSTER_NAME_PREFIX + i + managedServerNameBase + j;\n+\n+        // check managed server pod is created\n+        logger.info(\"Check for managed server pod {0} is created in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkPodCreated(managedServerPodName);\n+\n+        // check managed server pod is ready\n+        logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkPodReady(managedServerPodName);\n+\n+        // check managed server service is created\n+        logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkServiceCreated(managedServerPodName);\n+      }\n     }\n   }\n \n   @Test\n   @Order(2)\n-  @DisplayName(\"Create an ingress for a WebLogic domain in the specified domain namespace\")\n+  @DisplayName(\"Create an ingress for each cluster of the WebLogic domain in the specified domain namespace\")\n   public void testCreateIngress() {\n \n-    // create an ingress in domain namespace\n-    assertThat(assertDoesNotThrow(() -> createIngress(domainNamespace, domainUid, clusterName, managedServerPort)))\n-            .as(\"createIngress succeeds\")\n-            .withFailMessage(String.format(\"failed to create an ingress for domain %s in namespace %s\",\n-                domainUid, domainNamespace))\n-            .isTrue();\n-\n-    // check the ingress is created\n-    String ingressName = domainUid + \"-nginx\";\n-    assertThat(assertDoesNotThrow(() -> getIngressList(domainNamespace)))\n-        .as(String.format(\"found the ingress %s in namespace %s\", ingressName, domainNamespace))\n-        .withFailMessage(String.format(\"can not find ingress %s in namespace %s\", ingressName, domainNamespace))\n-        .contains(ingressName);\n-\n-    logger.info(\"ingress is created in namespace {0}\", domainNamespace);\n+    // create an ingress for each cluster of the domain in the domain namespace\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+\n+      String clusterName = CLUSTER_NAME_PREFIX + i;\n+      String ingressName = domainUid + \"-\" + clusterName + \"-nginx\";\n+\n+      logger.info(\"Creating ingress {0} for cluster {1} of domain {2} in namespace {3}\",\n+          ingressName, clusterName, domainUid, domainNamespace);\n+      assertThat(createIngress(ingressName, domainNamespace, domainUid, clusterName,\n+          MANAGED_SERVER_PORT, domainUid + \".\" + clusterName + \".test\"))\n+          .as(\"Test createIngress succeeds\")\n+          .withFailMessage(String.format(\"failed to create an ingress for cluster %s of domain %s in namespace %s\",\n+              clusterName, domainUid, domainNamespace))\n+          .isTrue();\n+\n+      // check the ingress is created\n+      assertThat(assertDoesNotThrow(() -> getIngressList(domainNamespace)))\n+          .as(String.format(\"Test the ingress %s is created in namespace %s\", ingressName, domainNamespace))\n+          .withFailMessage(String.format(\"can not find ingress %s in namespace %s\", ingressName, domainNamespace))\n+          .contains(ingressName);\n+\n+      logger.info(\"ingress {0} for cluster {1} of domain {2} is created in namespace {3}\",\n+          ingressName, clusterName, domainUid, domainNamespace);\n+    }\n   }\n \n   @Test\n   @Order(3)\n-  @DisplayName(\"Verify the application can be accessed through the ingress controller\")\n+  @DisplayName(\"Verify the application can be accessed through the ingress controller for each cluster in the domain\")\n   public void testSampleAppThroughIngressController() {\n \n-    List<String> managedServerNames = new ArrayList<>();\n-    for (int i = 1; i <= replicaCount; i++) {\n-      managedServerNames.add(managedServerNameBase + i);\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 223}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwMjgyMw==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422502823", "createdAt": "2020-05-09T14:34:35Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -293,76 +304,110 @@ public void testCreateMiiDomain() {\n         adminServerPodName, domainNamespace);\n     checkPodCreated(adminServerPodName);\n \n-    // check managed server pods exists\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodCreated(managedServerPrefix + i);\n-    }\n-\n     // check admin server pod is ready\n     logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkPodReady(adminServerPodName);\n \n-    // check managed server pods are ready\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodReady(managedServerPrefix + i);\n-    }\n-\n+    // check admin service is created\n     logger.info(\"Check admin service {0} is created in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkServiceCreated(adminServerPodName);\n \n-    // check managed server services created\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkServiceCreated(managedServerPrefix + i);\n+    // check the readiness for the managed servers in each cluster\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+      for (int j = 1; j <= replicaCount; j++) {\n+        String managedServerPodName =\n+            domainUid + \"-\" + CLUSTER_NAME_PREFIX + i + managedServerNameBase + j;\n+\n+        // check managed server pod is created\n+        logger.info(\"Check for managed server pod {0} is created in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkPodCreated(managedServerPodName);\n+\n+        // check managed server pod is ready\n+        logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkPodReady(managedServerPodName);\n+\n+        // check managed server service is created\n+        logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkServiceCreated(managedServerPodName);\n+      }\n     }\n   }\n \n   @Test\n   @Order(2)\n-  @DisplayName(\"Create an ingress for a WebLogic domain in the specified domain namespace\")\n+  @DisplayName(\"Create an ingress for each cluster of the WebLogic domain in the specified domain namespace\")\n   public void testCreateIngress() {\n \n-    // create an ingress in domain namespace\n-    assertThat(assertDoesNotThrow(() -> createIngress(domainNamespace, domainUid, clusterName, managedServerPort)))\n-            .as(\"createIngress succeeds\")\n-            .withFailMessage(String.format(\"failed to create an ingress for domain %s in namespace %s\",\n-                domainUid, domainNamespace))\n-            .isTrue();\n-\n-    // check the ingress is created\n-    String ingressName = domainUid + \"-nginx\";\n-    assertThat(assertDoesNotThrow(() -> getIngressList(domainNamespace)))\n-        .as(String.format(\"found the ingress %s in namespace %s\", ingressName, domainNamespace))\n-        .withFailMessage(String.format(\"can not find ingress %s in namespace %s\", ingressName, domainNamespace))\n-        .contains(ingressName);\n-\n-    logger.info(\"ingress is created in namespace {0}\", domainNamespace);\n+    // create an ingress for each cluster of the domain in the domain namespace\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+\n+      String clusterName = CLUSTER_NAME_PREFIX + i;\n+      String ingressName = domainUid + \"-\" + clusterName + \"-nginx\";\n+\n+      logger.info(\"Creating ingress {0} for cluster {1} of domain {2} in namespace {3}\",\n+          ingressName, clusterName, domainUid, domainNamespace);\n+      assertThat(createIngress(ingressName, domainNamespace, domainUid, clusterName,\n+          MANAGED_SERVER_PORT, domainUid + \".\" + clusterName + \".test\"))\n+          .as(\"Test createIngress succeeds\")\n+          .withFailMessage(String.format(\"failed to create an ingress for cluster %s of domain %s in namespace %s\",\n+              clusterName, domainUid, domainNamespace))\n+          .isTrue();\n+\n+      // check the ingress is created\n+      assertThat(assertDoesNotThrow(() -> getIngressList(domainNamespace)))\n+          .as(String.format(\"Test the ingress %s is created in namespace %s\", ingressName, domainNamespace))\n+          .withFailMessage(String.format(\"can not find ingress %s in namespace %s\", ingressName, domainNamespace))\n+          .contains(ingressName);\n+\n+      logger.info(\"ingress {0} for cluster {1} of domain {2} is created in namespace {3}\",\n+          ingressName, clusterName, domainUid, domainNamespace);\n+    }\n   }\n \n   @Test\n   @Order(3)\n-  @DisplayName(\"Verify the application can be accessed through the ingress controller\")\n+  @DisplayName(\"Verify the application can be accessed through the ingress controller for each cluster in the domain\")\n   public void testSampleAppThroughIngressController() {\n \n-    List<String> managedServerNames = new ArrayList<>();\n-    for (int i = 1; i <= replicaCount; i++) {\n-      managedServerNames.add(managedServerNameBase + i);\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM1NjM5MA=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 223}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTYxMjc5OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/TestUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMTowMTo1NVrOGSzk9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNDozNDo0OFrOGS7hvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM3MjU5Nw==", "bodyText": "we should log exception messages, otherwise we don't know what went wrong.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422372597", "createdAt": "2020-05-08T21:01:55Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/TestUtils.java", "diffHunk": "@@ -58,6 +59,10 @@ public static boolean callWebAppAndCheckForServerNameInResponse(\n           });\n         } catch (Exception e) {\n           logger.info(\"Got exception while running command: \" + curlCmd);\n+          if (result != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwMjg0Ng==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422502846", "createdAt": "2020-05-09T14:34:48Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/TestUtils.java", "diffHunk": "@@ -58,6 +59,10 @@ public static boolean callWebAppAndCheckForServerNameInResponse(\n           });\n         } catch (Exception e) {\n           logger.info(\"Got exception while running command: \" + curlCmd);\n+          if (result != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM3MjU5Nw=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTk2NjcxOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDowODo0M1rOGS21fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMzo0MjoyOFrOGS4N2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNTk4Mw==", "bodyText": "check that", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422425983", "createdAt": "2020-05-09T00:08:43Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -293,76 +304,110 @@ public void testCreateMiiDomain() {\n         adminServerPodName, domainNamespace);\n     checkPodCreated(adminServerPodName);\n \n-    // check managed server pods exists\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodCreated(managedServerPrefix + i);\n-    }\n-\n     // check admin server pod is ready\n     logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkPodReady(adminServerPodName);\n \n-    // check managed server pods are ready\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodReady(managedServerPrefix + i);\n-    }\n-\n+    // check admin service is created\n     logger.info(\"Check admin service {0} is created in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkServiceCreated(adminServerPodName);\n \n-    // check managed server services created\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkServiceCreated(managedServerPrefix + i);\n+    // check the readiness for the managed servers in each cluster\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+      for (int j = 1; j <= replicaCount; j++) {\n+        String managedServerPodName =\n+            domainUid + \"-\" + CLUSTER_NAME_PREFIX + i + managedServerNameBase + j;\n+\n+        // check managed server pod is created\n+        logger.info(\"Check for managed server pod {0} is created in namespace {1}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0ODYwMw==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422448603", "createdAt": "2020-05-09T03:42:28Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -293,76 +304,110 @@ public void testCreateMiiDomain() {\n         adminServerPodName, domainNamespace);\n     checkPodCreated(adminServerPodName);\n \n-    // check managed server pods exists\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodCreated(managedServerPrefix + i);\n-    }\n-\n     // check admin server pod is ready\n     logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkPodReady(adminServerPodName);\n \n-    // check managed server pods are ready\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodReady(managedServerPrefix + i);\n-    }\n-\n+    // check admin service is created\n     logger.info(\"Check admin service {0} is created in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkServiceCreated(adminServerPodName);\n \n-    // check managed server services created\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkServiceCreated(managedServerPrefix + i);\n+    // check the readiness for the managed servers in each cluster\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+      for (int j = 1; j <= replicaCount; j++) {\n+        String managedServerPodName =\n+            domainUid + \"-\" + CLUSTER_NAME_PREFIX + i + managedServerNameBase + j;\n+\n+        // check managed server pod is created\n+        logger.info(\"Check for managed server pod {0} is created in namespace {1}\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNTk4Mw=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTk2OTQxOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDoxMDoyMVrOGS226w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNDozODo1M1rOGS7jZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNjM0Nw==", "bodyText": "was", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422426347", "createdAt": "2020-05-09T00:10:21Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -293,76 +304,110 @@ public void testCreateMiiDomain() {\n         adminServerPodName, domainNamespace);\n     checkPodCreated(adminServerPodName);\n \n-    // check managed server pods exists\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodCreated(managedServerPrefix + i);\n-    }\n-\n     // check admin server pod is ready\n     logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkPodReady(adminServerPodName);\n \n-    // check managed server pods are ready\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodReady(managedServerPrefix + i);\n-    }\n-\n+    // check admin service is created\n     logger.info(\"Check admin service {0} is created in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkServiceCreated(adminServerPodName);\n \n-    // check managed server services created\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkServiceCreated(managedServerPrefix + i);\n+    // check the readiness for the managed servers in each cluster\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+      for (int j = 1; j <= replicaCount; j++) {\n+        String managedServerPodName =\n+            domainUid + \"-\" + CLUSTER_NAME_PREFIX + i + managedServerNameBase + j;\n+\n+        // check managed server pod is created\n+        logger.info(\"Check for managed server pod {0} is created in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkPodCreated(managedServerPodName);\n+\n+        // check managed server pod is ready\n+        logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkPodReady(managedServerPodName);\n+\n+        // check managed server service is created\n+        logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkServiceCreated(managedServerPodName);\n+      }\n     }\n   }\n \n   @Test\n   @Order(2)\n-  @DisplayName(\"Create an ingress for a WebLogic domain in the specified domain namespace\")\n+  @DisplayName(\"Create an ingress for each cluster of the WebLogic domain in the specified domain namespace\")\n   public void testCreateIngress() {\n \n-    // create an ingress in domain namespace\n-    assertThat(assertDoesNotThrow(() -> createIngress(domainNamespace, domainUid, clusterName, managedServerPort)))\n-            .as(\"createIngress succeeds\")\n-            .withFailMessage(String.format(\"failed to create an ingress for domain %s in namespace %s\",\n-                domainUid, domainNamespace))\n-            .isTrue();\n-\n-    // check the ingress is created\n-    String ingressName = domainUid + \"-nginx\";\n-    assertThat(assertDoesNotThrow(() -> getIngressList(domainNamespace)))\n-        .as(String.format(\"found the ingress %s in namespace %s\", ingressName, domainNamespace))\n-        .withFailMessage(String.format(\"can not find ingress %s in namespace %s\", ingressName, domainNamespace))\n-        .contains(ingressName);\n-\n-    logger.info(\"ingress is created in namespace {0}\", domainNamespace);\n+    // create an ingress for each cluster of the domain in the domain namespace\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+\n+      String clusterName = CLUSTER_NAME_PREFIX + i;\n+      String ingressName = domainUid + \"-\" + clusterName + \"-nginx\";\n+\n+      logger.info(\"Creating ingress {0} for cluster {1} of domain {2} in namespace {3}\",\n+          ingressName, clusterName, domainUid, domainNamespace);\n+      assertThat(createIngress(ingressName, domainNamespace, domainUid, clusterName,\n+          MANAGED_SERVER_PORT, domainUid + \".\" + clusterName + \".test\"))\n+          .as(\"Test createIngress succeeds\")\n+          .withFailMessage(String.format(\"failed to create an ingress for cluster %s of domain %s in namespace %s\",\n+              clusterName, domainUid, domainNamespace))\n+          .isTrue();\n+\n+      // check the ingress is created", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwMzI3MA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422503270", "createdAt": "2020-05-09T14:38:53Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -293,76 +304,110 @@ public void testCreateMiiDomain() {\n         adminServerPodName, domainNamespace);\n     checkPodCreated(adminServerPodName);\n \n-    // check managed server pods exists\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodCreated(managedServerPrefix + i);\n-    }\n-\n     // check admin server pod is ready\n     logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkPodReady(adminServerPodName);\n \n-    // check managed server pods are ready\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodReady(managedServerPrefix + i);\n-    }\n-\n+    // check admin service is created\n     logger.info(\"Check admin service {0} is created in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkServiceCreated(adminServerPodName);\n \n-    // check managed server services created\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkServiceCreated(managedServerPrefix + i);\n+    // check the readiness for the managed servers in each cluster\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+      for (int j = 1; j <= replicaCount; j++) {\n+        String managedServerPodName =\n+            domainUid + \"-\" + CLUSTER_NAME_PREFIX + i + managedServerNameBase + j;\n+\n+        // check managed server pod is created\n+        logger.info(\"Check for managed server pod {0} is created in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkPodCreated(managedServerPodName);\n+\n+        // check managed server pod is ready\n+        logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkPodReady(managedServerPodName);\n+\n+        // check managed server service is created\n+        logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkServiceCreated(managedServerPodName);\n+      }\n     }\n   }\n \n   @Test\n   @Order(2)\n-  @DisplayName(\"Create an ingress for a WebLogic domain in the specified domain namespace\")\n+  @DisplayName(\"Create an ingress for each cluster of the WebLogic domain in the specified domain namespace\")\n   public void testCreateIngress() {\n \n-    // create an ingress in domain namespace\n-    assertThat(assertDoesNotThrow(() -> createIngress(domainNamespace, domainUid, clusterName, managedServerPort)))\n-            .as(\"createIngress succeeds\")\n-            .withFailMessage(String.format(\"failed to create an ingress for domain %s in namespace %s\",\n-                domainUid, domainNamespace))\n-            .isTrue();\n-\n-    // check the ingress is created\n-    String ingressName = domainUid + \"-nginx\";\n-    assertThat(assertDoesNotThrow(() -> getIngressList(domainNamespace)))\n-        .as(String.format(\"found the ingress %s in namespace %s\", ingressName, domainNamespace))\n-        .withFailMessage(String.format(\"can not find ingress %s in namespace %s\", ingressName, domainNamespace))\n-        .contains(ingressName);\n-\n-    logger.info(\"ingress is created in namespace {0}\", domainNamespace);\n+    // create an ingress for each cluster of the domain in the domain namespace\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+\n+      String clusterName = CLUSTER_NAME_PREFIX + i;\n+      String ingressName = domainUid + \"-\" + clusterName + \"-nginx\";\n+\n+      logger.info(\"Creating ingress {0} for cluster {1} of domain {2} in namespace {3}\",\n+          ingressName, clusterName, domainUid, domainNamespace);\n+      assertThat(createIngress(ingressName, domainNamespace, domainUid, clusterName,\n+          MANAGED_SERVER_PORT, domainUid + \".\" + clusterName + \".test\"))\n+          .as(\"Test createIngress succeeds\")\n+          .withFailMessage(String.format(\"failed to create an ingress for cluster %s of domain %s in namespace %s\",\n+              clusterName, domainUid, domainNamespace))\n+          .isTrue();\n+\n+      // check the ingress is created", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNjM0Nw=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 203}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTk2OTU2OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDoxMDoyOFrOGS23Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNDozOTowMVrOGS7jcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNjM3MQ==", "bodyText": "was", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422426371", "createdAt": "2020-05-09T00:10:28Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -293,76 +304,110 @@ public void testCreateMiiDomain() {\n         adminServerPodName, domainNamespace);\n     checkPodCreated(adminServerPodName);\n \n-    // check managed server pods exists\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodCreated(managedServerPrefix + i);\n-    }\n-\n     // check admin server pod is ready\n     logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkPodReady(adminServerPodName);\n \n-    // check managed server pods are ready\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodReady(managedServerPrefix + i);\n-    }\n-\n+    // check admin service is created\n     logger.info(\"Check admin service {0} is created in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkServiceCreated(adminServerPodName);\n \n-    // check managed server services created\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkServiceCreated(managedServerPrefix + i);\n+    // check the readiness for the managed servers in each cluster\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+      for (int j = 1; j <= replicaCount; j++) {\n+        String managedServerPodName =\n+            domainUid + \"-\" + CLUSTER_NAME_PREFIX + i + managedServerNameBase + j;\n+\n+        // check managed server pod is created\n+        logger.info(\"Check for managed server pod {0} is created in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkPodCreated(managedServerPodName);\n+\n+        // check managed server pod is ready\n+        logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkPodReady(managedServerPodName);\n+\n+        // check managed server service is created\n+        logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkServiceCreated(managedServerPodName);\n+      }\n     }\n   }\n \n   @Test\n   @Order(2)\n-  @DisplayName(\"Create an ingress for a WebLogic domain in the specified domain namespace\")\n+  @DisplayName(\"Create an ingress for each cluster of the WebLogic domain in the specified domain namespace\")\n   public void testCreateIngress() {\n \n-    // create an ingress in domain namespace\n-    assertThat(assertDoesNotThrow(() -> createIngress(domainNamespace, domainUid, clusterName, managedServerPort)))\n-            .as(\"createIngress succeeds\")\n-            .withFailMessage(String.format(\"failed to create an ingress for domain %s in namespace %s\",\n-                domainUid, domainNamespace))\n-            .isTrue();\n-\n-    // check the ingress is created\n-    String ingressName = domainUid + \"-nginx\";\n-    assertThat(assertDoesNotThrow(() -> getIngressList(domainNamespace)))\n-        .as(String.format(\"found the ingress %s in namespace %s\", ingressName, domainNamespace))\n-        .withFailMessage(String.format(\"can not find ingress %s in namespace %s\", ingressName, domainNamespace))\n-        .contains(ingressName);\n-\n-    logger.info(\"ingress is created in namespace {0}\", domainNamespace);\n+    // create an ingress for each cluster of the domain in the domain namespace\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+\n+      String clusterName = CLUSTER_NAME_PREFIX + i;\n+      String ingressName = domainUid + \"-\" + clusterName + \"-nginx\";\n+\n+      logger.info(\"Creating ingress {0} for cluster {1} of domain {2} in namespace {3}\",\n+          ingressName, clusterName, domainUid, domainNamespace);\n+      assertThat(createIngress(ingressName, domainNamespace, domainUid, clusterName,\n+          MANAGED_SERVER_PORT, domainUid + \".\" + clusterName + \".test\"))\n+          .as(\"Test createIngress succeeds\")\n+          .withFailMessage(String.format(\"failed to create an ingress for cluster %s of domain %s in namespace %s\",\n+              clusterName, domainUid, domainNamespace))\n+          .isTrue();\n+\n+      // check the ingress is created\n+      assertThat(assertDoesNotThrow(() -> getIngressList(domainNamespace)))\n+          .as(String.format(\"Test the ingress %s is created in namespace %s\", ingressName, domainNamespace))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 205}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwMzI4MQ==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422503281", "createdAt": "2020-05-09T14:39:01Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -293,76 +304,110 @@ public void testCreateMiiDomain() {\n         adminServerPodName, domainNamespace);\n     checkPodCreated(adminServerPodName);\n \n-    // check managed server pods exists\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodCreated(managedServerPrefix + i);\n-    }\n-\n     // check admin server pod is ready\n     logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkPodReady(adminServerPodName);\n \n-    // check managed server pods are ready\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodReady(managedServerPrefix + i);\n-    }\n-\n+    // check admin service is created\n     logger.info(\"Check admin service {0} is created in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkServiceCreated(adminServerPodName);\n \n-    // check managed server services created\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkServiceCreated(managedServerPrefix + i);\n+    // check the readiness for the managed servers in each cluster\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+      for (int j = 1; j <= replicaCount; j++) {\n+        String managedServerPodName =\n+            domainUid + \"-\" + CLUSTER_NAME_PREFIX + i + managedServerNameBase + j;\n+\n+        // check managed server pod is created\n+        logger.info(\"Check for managed server pod {0} is created in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkPodCreated(managedServerPodName);\n+\n+        // check managed server pod is ready\n+        logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkPodReady(managedServerPodName);\n+\n+        // check managed server service is created\n+        logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkServiceCreated(managedServerPodName);\n+      }\n     }\n   }\n \n   @Test\n   @Order(2)\n-  @DisplayName(\"Create an ingress for a WebLogic domain in the specified domain namespace\")\n+  @DisplayName(\"Create an ingress for each cluster of the WebLogic domain in the specified domain namespace\")\n   public void testCreateIngress() {\n \n-    // create an ingress in domain namespace\n-    assertThat(assertDoesNotThrow(() -> createIngress(domainNamespace, domainUid, clusterName, managedServerPort)))\n-            .as(\"createIngress succeeds\")\n-            .withFailMessage(String.format(\"failed to create an ingress for domain %s in namespace %s\",\n-                domainUid, domainNamespace))\n-            .isTrue();\n-\n-    // check the ingress is created\n-    String ingressName = domainUid + \"-nginx\";\n-    assertThat(assertDoesNotThrow(() -> getIngressList(domainNamespace)))\n-        .as(String.format(\"found the ingress %s in namespace %s\", ingressName, domainNamespace))\n-        .withFailMessage(String.format(\"can not find ingress %s in namespace %s\", ingressName, domainNamespace))\n-        .contains(ingressName);\n-\n-    logger.info(\"ingress is created in namespace {0}\", domainNamespace);\n+    // create an ingress for each cluster of the domain in the domain namespace\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+\n+      String clusterName = CLUSTER_NAME_PREFIX + i;\n+      String ingressName = domainUid + \"-\" + clusterName + \"-nginx\";\n+\n+      logger.info(\"Creating ingress {0} for cluster {1} of domain {2} in namespace {3}\",\n+          ingressName, clusterName, domainUid, domainNamespace);\n+      assertThat(createIngress(ingressName, domainNamespace, domainUid, clusterName,\n+          MANAGED_SERVER_PORT, domainUid + \".\" + clusterName + \".test\"))\n+          .as(\"Test createIngress succeeds\")\n+          .withFailMessage(String.format(\"failed to create an ingress for cluster %s of domain %s in namespace %s\",\n+              clusterName, domainUid, domainNamespace))\n+          .isTrue();\n+\n+      // check the ingress is created\n+      assertThat(assertDoesNotThrow(() -> getIngressList(domainNamespace)))\n+          .as(String.format(\"Test the ingress %s is created in namespace %s\", ingressName, domainNamespace))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNjM3MQ=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 205}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTk2OTc1OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDoxMDozN1rOGS23Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNDozOTowOVrOGS7jgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNjM5OA==", "bodyText": "was", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422426398", "createdAt": "2020-05-09T00:10:37Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -293,76 +304,110 @@ public void testCreateMiiDomain() {\n         adminServerPodName, domainNamespace);\n     checkPodCreated(adminServerPodName);\n \n-    // check managed server pods exists\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodCreated(managedServerPrefix + i);\n-    }\n-\n     // check admin server pod is ready\n     logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkPodReady(adminServerPodName);\n \n-    // check managed server pods are ready\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodReady(managedServerPrefix + i);\n-    }\n-\n+    // check admin service is created\n     logger.info(\"Check admin service {0} is created in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkServiceCreated(adminServerPodName);\n \n-    // check managed server services created\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkServiceCreated(managedServerPrefix + i);\n+    // check the readiness for the managed servers in each cluster\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+      for (int j = 1; j <= replicaCount; j++) {\n+        String managedServerPodName =\n+            domainUid + \"-\" + CLUSTER_NAME_PREFIX + i + managedServerNameBase + j;\n+\n+        // check managed server pod is created\n+        logger.info(\"Check for managed server pod {0} is created in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkPodCreated(managedServerPodName);\n+\n+        // check managed server pod is ready\n+        logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkPodReady(managedServerPodName);\n+\n+        // check managed server service is created\n+        logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkServiceCreated(managedServerPodName);\n+      }\n     }\n   }\n \n   @Test\n   @Order(2)\n-  @DisplayName(\"Create an ingress for a WebLogic domain in the specified domain namespace\")\n+  @DisplayName(\"Create an ingress for each cluster of the WebLogic domain in the specified domain namespace\")\n   public void testCreateIngress() {\n \n-    // create an ingress in domain namespace\n-    assertThat(assertDoesNotThrow(() -> createIngress(domainNamespace, domainUid, clusterName, managedServerPort)))\n-            .as(\"createIngress succeeds\")\n-            .withFailMessage(String.format(\"failed to create an ingress for domain %s in namespace %s\",\n-                domainUid, domainNamespace))\n-            .isTrue();\n-\n-    // check the ingress is created\n-    String ingressName = domainUid + \"-nginx\";\n-    assertThat(assertDoesNotThrow(() -> getIngressList(domainNamespace)))\n-        .as(String.format(\"found the ingress %s in namespace %s\", ingressName, domainNamespace))\n-        .withFailMessage(String.format(\"can not find ingress %s in namespace %s\", ingressName, domainNamespace))\n-        .contains(ingressName);\n-\n-    logger.info(\"ingress is created in namespace {0}\", domainNamespace);\n+    // create an ingress for each cluster of the domain in the domain namespace\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+\n+      String clusterName = CLUSTER_NAME_PREFIX + i;\n+      String ingressName = domainUid + \"-\" + clusterName + \"-nginx\";\n+\n+      logger.info(\"Creating ingress {0} for cluster {1} of domain {2} in namespace {3}\",\n+          ingressName, clusterName, domainUid, domainNamespace);\n+      assertThat(createIngress(ingressName, domainNamespace, domainUid, clusterName,\n+          MANAGED_SERVER_PORT, domainUid + \".\" + clusterName + \".test\"))\n+          .as(\"Test createIngress succeeds\")\n+          .withFailMessage(String.format(\"failed to create an ingress for cluster %s of domain %s in namespace %s\",\n+              clusterName, domainUid, domainNamespace))\n+          .isTrue();\n+\n+      // check the ingress is created\n+      assertThat(assertDoesNotThrow(() -> getIngressList(domainNamespace)))\n+          .as(String.format(\"Test the ingress %s is created in namespace %s\", ingressName, domainNamespace))\n+          .withFailMessage(String.format(\"can not find ingress %s in namespace %s\", ingressName, domainNamespace))\n+          .contains(ingressName);\n+\n+      logger.info(\"ingress {0} for cluster {1} of domain {2} is created in namespace {3}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwMzI5OA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422503298", "createdAt": "2020-05-09T14:39:09Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -293,76 +304,110 @@ public void testCreateMiiDomain() {\n         adminServerPodName, domainNamespace);\n     checkPodCreated(adminServerPodName);\n \n-    // check managed server pods exists\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodCreated(managedServerPrefix + i);\n-    }\n-\n     // check admin server pod is ready\n     logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkPodReady(adminServerPodName);\n \n-    // check managed server pods are ready\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodReady(managedServerPrefix + i);\n-    }\n-\n+    // check admin service is created\n     logger.info(\"Check admin service {0} is created in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkServiceCreated(adminServerPodName);\n \n-    // check managed server services created\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkServiceCreated(managedServerPrefix + i);\n+    // check the readiness for the managed servers in each cluster\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+      for (int j = 1; j <= replicaCount; j++) {\n+        String managedServerPodName =\n+            domainUid + \"-\" + CLUSTER_NAME_PREFIX + i + managedServerNameBase + j;\n+\n+        // check managed server pod is created\n+        logger.info(\"Check for managed server pod {0} is created in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkPodCreated(managedServerPodName);\n+\n+        // check managed server pod is ready\n+        logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkPodReady(managedServerPodName);\n+\n+        // check managed server service is created\n+        logger.info(\"Check managed server service {0} is created in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkServiceCreated(managedServerPodName);\n+      }\n     }\n   }\n \n   @Test\n   @Order(2)\n-  @DisplayName(\"Create an ingress for a WebLogic domain in the specified domain namespace\")\n+  @DisplayName(\"Create an ingress for each cluster of the WebLogic domain in the specified domain namespace\")\n   public void testCreateIngress() {\n \n-    // create an ingress in domain namespace\n-    assertThat(assertDoesNotThrow(() -> createIngress(domainNamespace, domainUid, clusterName, managedServerPort)))\n-            .as(\"createIngress succeeds\")\n-            .withFailMessage(String.format(\"failed to create an ingress for domain %s in namespace %s\",\n-                domainUid, domainNamespace))\n-            .isTrue();\n-\n-    // check the ingress is created\n-    String ingressName = domainUid + \"-nginx\";\n-    assertThat(assertDoesNotThrow(() -> getIngressList(domainNamespace)))\n-        .as(String.format(\"found the ingress %s in namespace %s\", ingressName, domainNamespace))\n-        .withFailMessage(String.format(\"can not find ingress %s in namespace %s\", ingressName, domainNamespace))\n-        .contains(ingressName);\n-\n-    logger.info(\"ingress is created in namespace {0}\", domainNamespace);\n+    // create an ingress for each cluster of the domain in the domain namespace\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+\n+      String clusterName = CLUSTER_NAME_PREFIX + i;\n+      String ingressName = domainUid + \"-\" + clusterName + \"-nginx\";\n+\n+      logger.info(\"Creating ingress {0} for cluster {1} of domain {2} in namespace {3}\",\n+          ingressName, clusterName, domainUid, domainNamespace);\n+      assertThat(createIngress(ingressName, domainNamespace, domainUid, clusterName,\n+          MANAGED_SERVER_PORT, domainUid + \".\" + clusterName + \".test\"))\n+          .as(\"Test createIngress succeeds\")\n+          .withFailMessage(String.format(\"failed to create an ingress for cluster %s of domain %s in namespace %s\",\n+              clusterName, domainUid, domainNamespace))\n+          .isTrue();\n+\n+      // check the ingress is created\n+      assertThat(assertDoesNotThrow(() -> getIngressList(domainNamespace)))\n+          .as(String.format(\"Test the ingress %s is created in namespace %s\", ingressName, domainNamespace))\n+          .withFailMessage(String.format(\"can not find ingress %s in namespace %s\", ingressName, domainNamespace))\n+          .contains(ingressName);\n+\n+      logger.info(\"ingress {0} for cluster {1} of domain {2} is created in namespace {3}\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNjM5OA=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 209}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTk3MTQ5OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDoxMTo0OFrOGS24Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMzo0MjowMFrOGS4Nww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNjYzOA==", "bodyText": "method name does not seem to match what the method actually does", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422426638", "createdAt": "2020-05-09T00:11:48Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 276}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0ODU3OQ==", "bodyText": "changed it to checkPodDeleted(String podName)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422448579", "createdAt": "2020-05-09T03:42:00Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNjYzOA=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 276}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTk3MjI5OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Domain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDoxMjoxMlrOGS24dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxODowOTowNFrOGTnlkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNjc0MQ==", "bodyText": "Scaling cluster {0} in domain {1} using patch string {2}...", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422426741", "createdAt": "2020-05-09T00:12:12Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Domain.java", "diffHunk": "@@ -77,4 +82,48 @@ public static boolean patchDomainCustomResource(String domainUid, String namespa\n       String patchFormat) {\n     return Kubernetes.patchDomainCustomResource(domainUid, namespace, patch, patchFormat);\n   }\n+\n+  /**\n+   * Scale the cluster of the domain in the specified namespace.\n+   *\n+   * @param domainUid domainUid of the domain to be scaled\n+   * @param namespace namespace in which the domain resides\n+   * @param clusterName name of the WebLogic cluster to be scaled in the domain\n+   * @param numOfServers number of servers to be scaled to\n+   * @return true if success, false otherwise\n+   * @throws ApiException if Kubernetes client API call fails\n+   */\n+  public static boolean scaleDomain(String domainUid, String namespace, String clusterName, int numOfServers)\n+      throws ApiException {\n+\n+    // get the domain cluster list\n+    oracle.weblogic.domain.Domain domain = getDomainCustomResource(domainUid, namespace);\n+    List<Cluster> clusters = domain.getSpec().getClusters();\n+\n+    // get the index of the cluster with clusterName in the cluster list\n+    int index = 0;\n+    for (int i = 0; i < clusters.size(); i++) {\n+      if (clusters.get(i).getClusterName().equals(clusterName)) {\n+        index = i;\n+        break;\n+      }\n+    }\n+\n+    // construct the patch string for scaling the cluster in the domain\n+    StringBuffer patchStr = new StringBuffer(\"[{\")\n+        .append(\"\\\"op\\\": \\\"replace\\\", \")\n+        .append(\"\\\"path\\\": \\\"/spec/clusters/\")\n+        .append(index)\n+        .append(\"/replicas\\\", \")\n+        .append(\"\\\"value\\\": \")\n+        .append(numOfServers)\n+        .append(\"}]\");\n+\n+    logger.info(\"Scale domain patch String: {0}\", patchStr.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIyNDcyMA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r423224720", "createdAt": "2020-05-11T18:09:04Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Domain.java", "diffHunk": "@@ -77,4 +82,48 @@ public static boolean patchDomainCustomResource(String domainUid, String namespa\n       String patchFormat) {\n     return Kubernetes.patchDomainCustomResource(domainUid, namespace, patch, patchFormat);\n   }\n+\n+  /**\n+   * Scale the cluster of the domain in the specified namespace.\n+   *\n+   * @param domainUid domainUid of the domain to be scaled\n+   * @param namespace namespace in which the domain resides\n+   * @param clusterName name of the WebLogic cluster to be scaled in the domain\n+   * @param numOfServers number of servers to be scaled to\n+   * @return true if success, false otherwise\n+   * @throws ApiException if Kubernetes client API call fails\n+   */\n+  public static boolean scaleDomain(String domainUid, String namespace, String clusterName, int numOfServers)\n+      throws ApiException {\n+\n+    // get the domain cluster list\n+    oracle.weblogic.domain.Domain domain = getDomainCustomResource(domainUid, namespace);\n+    List<Cluster> clusters = domain.getSpec().getClusters();\n+\n+    // get the index of the cluster with clusterName in the cluster list\n+    int index = 0;\n+    for (int i = 0; i < clusters.size(); i++) {\n+      if (clusters.get(i).getClusterName().equals(clusterName)) {\n+        index = i;\n+        break;\n+      }\n+    }\n+\n+    // construct the patch string for scaling the cluster in the domain\n+    StringBuffer patchStr = new StringBuffer(\"[{\")\n+        .append(\"\\\"op\\\": \\\"replace\\\", \")\n+        .append(\"\\\"path\\\": \\\"/spec/clusters/\")\n+        .append(index)\n+        .append(\"/replicas\\\", \")\n+        .append(\"\\\"value\\\": \")\n+        .append(numOfServers)\n+        .append(\"}]\");\n+\n+    logger.info(\"Scale domain patch String: {0}\", patchStr.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNjc0MQ=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTk3NTQzOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDoxNDowNFrOGS25-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNDozOToyOFrOGS7jnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNzEzMA==", "bodyText": "check that ... was created ...", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422427130", "createdAt": "2020-05-09T00:14:04Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled\n+   * @param domainNamespace the domain namespace the domain resides\n+   * @param clusterName the WebLogic cluster name in the domain to be scaled\n+   * @param replicasBeforeScale the replicas of the WebLogic cluster before the scale\n+   * @param numberOfServers the number of servers to be scaled to\n+   * @return the replicas of the WebLogic cluster after the scale\n+   */\n+  private int scaleAndVerifyDomain(String domainUid,\n+                                   String domainNamespace,\n+                                   String clusterName,\n+                                   int replicasBeforeScale,\n+                                   int numberOfServers) {\n+\n+    String manageServerPodNamePrefix = domainUid + \"-\" + clusterName + \"-managed-server\";\n+\n+    // scale the cluster in the domain\n+    assertThat(assertDoesNotThrow(() -> scaleDomain(domainUid, domainNamespace, clusterName, numberOfServers)))\n+        .as(String.format(\"Verify scale the cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .withFailMessage(String.format(\"can not scale cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .isTrue();\n+\n+    // generate a curl command to ping the sample app through the ingress controller\n+    curlCmd = generateCurlCmd(clusterName);\n+\n+    // generate the expected server list which should be in the sample app response string\n+    List<String> expectedServerNamesInAppResponse =\n+        generateExpectedServerNamesInAppResponse(clusterName, replicasBeforeScale);\n+    logger.info(\"expected server name list which should be in the sample app response: {0} before scale\",\n+        expectedServerNamesInAppResponse);\n+\n+    if (replicasBeforeScale <= numberOfServers) {\n+\n+      // check that NGINX can access the sample apps from the original managed servers in the domain\n+      logger.info(\"Check that NGINX can access the sample app from the original managed servers in the domain \"\n+                  + \"while the domain is scaling up.\");\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"Verify NGINX can access the sample app from the original managed servers in the domain\")\n+          .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n+          .isTrue();\n+\n+      // check new managed server pods are created and wait for them to be ready\n+      for (int i = replicasBeforeScale + 1; i <= numberOfServers; i++) {\n+        String manageServerPodName = manageServerPodNamePrefix + i;\n+\n+        // check new managed server pods are created\n+        logger.info(\"Check for the new managed server pod {0} is created in namespace {1}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 340}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwMzMyNw==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422503327", "createdAt": "2020-05-09T14:39:28Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled\n+   * @param domainNamespace the domain namespace the domain resides\n+   * @param clusterName the WebLogic cluster name in the domain to be scaled\n+   * @param replicasBeforeScale the replicas of the WebLogic cluster before the scale\n+   * @param numberOfServers the number of servers to be scaled to\n+   * @return the replicas of the WebLogic cluster after the scale\n+   */\n+  private int scaleAndVerifyDomain(String domainUid,\n+                                   String domainNamespace,\n+                                   String clusterName,\n+                                   int replicasBeforeScale,\n+                                   int numberOfServers) {\n+\n+    String manageServerPodNamePrefix = domainUid + \"-\" + clusterName + \"-managed-server\";\n+\n+    // scale the cluster in the domain\n+    assertThat(assertDoesNotThrow(() -> scaleDomain(domainUid, domainNamespace, clusterName, numberOfServers)))\n+        .as(String.format(\"Verify scale the cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .withFailMessage(String.format(\"can not scale cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .isTrue();\n+\n+    // generate a curl command to ping the sample app through the ingress controller\n+    curlCmd = generateCurlCmd(clusterName);\n+\n+    // generate the expected server list which should be in the sample app response string\n+    List<String> expectedServerNamesInAppResponse =\n+        generateExpectedServerNamesInAppResponse(clusterName, replicasBeforeScale);\n+    logger.info(\"expected server name list which should be in the sample app response: {0} before scale\",\n+        expectedServerNamesInAppResponse);\n+\n+    if (replicasBeforeScale <= numberOfServers) {\n+\n+      // check that NGINX can access the sample apps from the original managed servers in the domain\n+      logger.info(\"Check that NGINX can access the sample app from the original managed servers in the domain \"\n+                  + \"while the domain is scaling up.\");\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"Verify NGINX can access the sample app from the original managed servers in the domain\")\n+          .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n+          .isTrue();\n+\n+      // check new managed server pods are created and wait for them to be ready\n+      for (int i = replicasBeforeScale + 1; i <= numberOfServers; i++) {\n+        String manageServerPodName = manageServerPodNamePrefix + i;\n+\n+        // check new managed server pods are created\n+        logger.info(\"Check for the new managed server pod {0} is created in namespace {1}\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNzEzMA=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 340}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTk3NTU3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDoxNDowOVrOGS26Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNDozOTozOVrOGS7jow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNzE0Nw==", "bodyText": "same", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422427147", "createdAt": "2020-05-09T00:14:09Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled\n+   * @param domainNamespace the domain namespace the domain resides\n+   * @param clusterName the WebLogic cluster name in the domain to be scaled\n+   * @param replicasBeforeScale the replicas of the WebLogic cluster before the scale\n+   * @param numberOfServers the number of servers to be scaled to\n+   * @return the replicas of the WebLogic cluster after the scale\n+   */\n+  private int scaleAndVerifyDomain(String domainUid,\n+                                   String domainNamespace,\n+                                   String clusterName,\n+                                   int replicasBeforeScale,\n+                                   int numberOfServers) {\n+\n+    String manageServerPodNamePrefix = domainUid + \"-\" + clusterName + \"-managed-server\";\n+\n+    // scale the cluster in the domain\n+    assertThat(assertDoesNotThrow(() -> scaleDomain(domainUid, domainNamespace, clusterName, numberOfServers)))\n+        .as(String.format(\"Verify scale the cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .withFailMessage(String.format(\"can not scale cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .isTrue();\n+\n+    // generate a curl command to ping the sample app through the ingress controller\n+    curlCmd = generateCurlCmd(clusterName);\n+\n+    // generate the expected server list which should be in the sample app response string\n+    List<String> expectedServerNamesInAppResponse =\n+        generateExpectedServerNamesInAppResponse(clusterName, replicasBeforeScale);\n+    logger.info(\"expected server name list which should be in the sample app response: {0} before scale\",\n+        expectedServerNamesInAppResponse);\n+\n+    if (replicasBeforeScale <= numberOfServers) {\n+\n+      // check that NGINX can access the sample apps from the original managed servers in the domain\n+      logger.info(\"Check that NGINX can access the sample app from the original managed servers in the domain \"\n+                  + \"while the domain is scaling up.\");\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"Verify NGINX can access the sample app from the original managed servers in the domain\")\n+          .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n+          .isTrue();\n+\n+      // check new managed server pods are created and wait for them to be ready\n+      for (int i = replicasBeforeScale + 1; i <= numberOfServers; i++) {\n+        String manageServerPodName = manageServerPodNamePrefix + i;\n+\n+        // check new managed server pods are created\n+        logger.info(\"Check for the new managed server pod {0} is created in namespace {1}\",\n+            manageServerPodName, domainNamespace);\n+        checkPodCreated(manageServerPodName);\n+\n+        // check new managed server pods are ready\n+        logger.info(\"Wait for the new managed server pod {0} to be ready in namespace {1}\",\n+            manageServerPodName, domainNamespace);\n+        checkPodReady(manageServerPodName);\n+\n+        // check new managed server services are created\n+        logger.info(\"Check for the new managed server service {0} is created in namespace {1}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 350}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwMzMzMQ==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422503331", "createdAt": "2020-05-09T14:39:39Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled\n+   * @param domainNamespace the domain namespace the domain resides\n+   * @param clusterName the WebLogic cluster name in the domain to be scaled\n+   * @param replicasBeforeScale the replicas of the WebLogic cluster before the scale\n+   * @param numberOfServers the number of servers to be scaled to\n+   * @return the replicas of the WebLogic cluster after the scale\n+   */\n+  private int scaleAndVerifyDomain(String domainUid,\n+                                   String domainNamespace,\n+                                   String clusterName,\n+                                   int replicasBeforeScale,\n+                                   int numberOfServers) {\n+\n+    String manageServerPodNamePrefix = domainUid + \"-\" + clusterName + \"-managed-server\";\n+\n+    // scale the cluster in the domain\n+    assertThat(assertDoesNotThrow(() -> scaleDomain(domainUid, domainNamespace, clusterName, numberOfServers)))\n+        .as(String.format(\"Verify scale the cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .withFailMessage(String.format(\"can not scale cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .isTrue();\n+\n+    // generate a curl command to ping the sample app through the ingress controller\n+    curlCmd = generateCurlCmd(clusterName);\n+\n+    // generate the expected server list which should be in the sample app response string\n+    List<String> expectedServerNamesInAppResponse =\n+        generateExpectedServerNamesInAppResponse(clusterName, replicasBeforeScale);\n+    logger.info(\"expected server name list which should be in the sample app response: {0} before scale\",\n+        expectedServerNamesInAppResponse);\n+\n+    if (replicasBeforeScale <= numberOfServers) {\n+\n+      // check that NGINX can access the sample apps from the original managed servers in the domain\n+      logger.info(\"Check that NGINX can access the sample app from the original managed servers in the domain \"\n+                  + \"while the domain is scaling up.\");\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"Verify NGINX can access the sample app from the original managed servers in the domain\")\n+          .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n+          .isTrue();\n+\n+      // check new managed server pods are created and wait for them to be ready\n+      for (int i = replicasBeforeScale + 1; i <= numberOfServers; i++) {\n+        String manageServerPodName = manageServerPodNamePrefix + i;\n+\n+        // check new managed server pods are created\n+        logger.info(\"Check for the new managed server pod {0} is created in namespace {1}\",\n+            manageServerPodName, domainNamespace);\n+        checkPodCreated(manageServerPodName);\n+\n+        // check new managed server pods are ready\n+        logger.info(\"Wait for the new managed server pod {0} to be ready in namespace {1}\",\n+            manageServerPodName, domainNamespace);\n+        checkPodReady(manageServerPodName);\n+\n+        // check new managed server services are created\n+        logger.info(\"Check for the new managed server service {0} is created in namespace {1}\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNzE0Nw=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 350}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTk3NTg3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Nginx.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDoxNDoyMVrOGS26OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNDozNToxMFrOGS7h5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNzE5Mw==", "bodyText": "Should be logged as a severe message", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422427193", "createdAt": "2020-05-09T00:14:21Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Nginx.java", "diffHunk": "@@ -116,8 +118,8 @@ public static boolean createIngress(String domainNamespace,\n     try {\n       Kubernetes.createIngress(domainNamespace, ingress);\n     } catch (ApiException apex) {\n-      logger.warning(apex.getResponseBody());\n-      throw apex;\n+      logger.info(\"got ApiException while calling createIngress: {0}\", apex.getResponseBody());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwMjg4Ng==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422502886", "createdAt": "2020-05-09T14:35:10Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Nginx.java", "diffHunk": "@@ -116,8 +118,8 @@ public static boolean createIngress(String domainNamespace,\n     try {\n       Kubernetes.createIngress(domainNamespace, ingress);\n     } catch (ApiException apex) {\n-      logger.warning(apex.getResponseBody());\n-      throw apex;\n+      logger.info(\"got ApiException while calling createIngress: {0}\", apex.getResponseBody());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNzE5Mw=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTk3NTk2OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDoxNDoyN1rOGS26RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNDozOTo0N1rOGS7jtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNzIwNA==", "bodyText": "was removed from", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422427204", "createdAt": "2020-05-09T00:14:27Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled\n+   * @param domainNamespace the domain namespace the domain resides\n+   * @param clusterName the WebLogic cluster name in the domain to be scaled\n+   * @param replicasBeforeScale the replicas of the WebLogic cluster before the scale\n+   * @param numberOfServers the number of servers to be scaled to\n+   * @return the replicas of the WebLogic cluster after the scale\n+   */\n+  private int scaleAndVerifyDomain(String domainUid,\n+                                   String domainNamespace,\n+                                   String clusterName,\n+                                   int replicasBeforeScale,\n+                                   int numberOfServers) {\n+\n+    String manageServerPodNamePrefix = domainUid + \"-\" + clusterName + \"-managed-server\";\n+\n+    // scale the cluster in the domain\n+    assertThat(assertDoesNotThrow(() -> scaleDomain(domainUid, domainNamespace, clusterName, numberOfServers)))\n+        .as(String.format(\"Verify scale the cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .withFailMessage(String.format(\"can not scale cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .isTrue();\n+\n+    // generate a curl command to ping the sample app through the ingress controller\n+    curlCmd = generateCurlCmd(clusterName);\n+\n+    // generate the expected server list which should be in the sample app response string\n+    List<String> expectedServerNamesInAppResponse =\n+        generateExpectedServerNamesInAppResponse(clusterName, replicasBeforeScale);\n+    logger.info(\"expected server name list which should be in the sample app response: {0} before scale\",\n+        expectedServerNamesInAppResponse);\n+\n+    if (replicasBeforeScale <= numberOfServers) {\n+\n+      // check that NGINX can access the sample apps from the original managed servers in the domain\n+      logger.info(\"Check that NGINX can access the sample app from the original managed servers in the domain \"\n+                  + \"while the domain is scaling up.\");\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"Verify NGINX can access the sample app from the original managed servers in the domain\")\n+          .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n+          .isTrue();\n+\n+      // check new managed server pods are created and wait for them to be ready\n+      for (int i = replicasBeforeScale + 1; i <= numberOfServers; i++) {\n+        String manageServerPodName = manageServerPodNamePrefix + i;\n+\n+        // check new managed server pods are created\n+        logger.info(\"Check for the new managed server pod {0} is created in namespace {1}\",\n+            manageServerPodName, domainNamespace);\n+        checkPodCreated(manageServerPodName);\n+\n+        // check new managed server pods are ready\n+        logger.info(\"Wait for the new managed server pod {0} to be ready in namespace {1}\",\n+            manageServerPodName, domainNamespace);\n+        checkPodReady(manageServerPodName);\n+\n+        // check new managed server services are created\n+        logger.info(\"Check for the new managed server service {0} is created in namespace {1}\",\n+            manageServerPodName, domainNamespace);\n+        checkServiceCreated(manageServerPodName);\n+\n+        // add the new managed server to the list\n+        expectedServerNamesInAppResponse.add(clusterName + \"-managed-server\" + i);\n+\n+      }\n+\n+      // check that NGINX can access the sample apps from new and original managed servers\n+      logger.info(\"Check that NGINX can access the sample app from the new and original managed servers \"\n+          + \"in the domain after the domain is scaled up.\");\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"Check NGINX can access the sample app from all managed servers in the domain\")\n+          .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n+          .isTrue();\n+    } else {\n+      // scale down\n+      // wait and check the pods are removed\n+      for (int i = replicasBeforeScale; i > numberOfServers; i--) {\n+        logger.info(\"Check managed server pod {0} is removed in namespace {1}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 370}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwMzM0OA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422503348", "createdAt": "2020-05-09T14:39:47Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled\n+   * @param domainNamespace the domain namespace the domain resides\n+   * @param clusterName the WebLogic cluster name in the domain to be scaled\n+   * @param replicasBeforeScale the replicas of the WebLogic cluster before the scale\n+   * @param numberOfServers the number of servers to be scaled to\n+   * @return the replicas of the WebLogic cluster after the scale\n+   */\n+  private int scaleAndVerifyDomain(String domainUid,\n+                                   String domainNamespace,\n+                                   String clusterName,\n+                                   int replicasBeforeScale,\n+                                   int numberOfServers) {\n+\n+    String manageServerPodNamePrefix = domainUid + \"-\" + clusterName + \"-managed-server\";\n+\n+    // scale the cluster in the domain\n+    assertThat(assertDoesNotThrow(() -> scaleDomain(domainUid, domainNamespace, clusterName, numberOfServers)))\n+        .as(String.format(\"Verify scale the cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .withFailMessage(String.format(\"can not scale cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .isTrue();\n+\n+    // generate a curl command to ping the sample app through the ingress controller\n+    curlCmd = generateCurlCmd(clusterName);\n+\n+    // generate the expected server list which should be in the sample app response string\n+    List<String> expectedServerNamesInAppResponse =\n+        generateExpectedServerNamesInAppResponse(clusterName, replicasBeforeScale);\n+    logger.info(\"expected server name list which should be in the sample app response: {0} before scale\",\n+        expectedServerNamesInAppResponse);\n+\n+    if (replicasBeforeScale <= numberOfServers) {\n+\n+      // check that NGINX can access the sample apps from the original managed servers in the domain\n+      logger.info(\"Check that NGINX can access the sample app from the original managed servers in the domain \"\n+                  + \"while the domain is scaling up.\");\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"Verify NGINX can access the sample app from the original managed servers in the domain\")\n+          .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n+          .isTrue();\n+\n+      // check new managed server pods are created and wait for them to be ready\n+      for (int i = replicasBeforeScale + 1; i <= numberOfServers; i++) {\n+        String manageServerPodName = manageServerPodNamePrefix + i;\n+\n+        // check new managed server pods are created\n+        logger.info(\"Check for the new managed server pod {0} is created in namespace {1}\",\n+            manageServerPodName, domainNamespace);\n+        checkPodCreated(manageServerPodName);\n+\n+        // check new managed server pods are ready\n+        logger.info(\"Wait for the new managed server pod {0} to be ready in namespace {1}\",\n+            manageServerPodName, domainNamespace);\n+        checkPodReady(manageServerPodName);\n+\n+        // check new managed server services are created\n+        logger.info(\"Check for the new managed server service {0} is created in namespace {1}\",\n+            manageServerPodName, domainNamespace);\n+        checkServiceCreated(manageServerPodName);\n+\n+        // add the new managed server to the list\n+        expectedServerNamesInAppResponse.add(clusterName + \"-managed-server\" + i);\n+\n+      }\n+\n+      // check that NGINX can access the sample apps from new and original managed servers\n+      logger.info(\"Check that NGINX can access the sample app from the new and original managed servers \"\n+          + \"in the domain after the domain is scaled up.\");\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"Check NGINX can access the sample app from all managed servers in the domain\")\n+          .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n+          .isTrue();\n+    } else {\n+      // scale down\n+      // wait and check the pods are removed\n+      for (int i = replicasBeforeScale; i > numberOfServers; i--) {\n+        logger.info(\"Check managed server pod {0} is removed in namespace {1}\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNzIwNA=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 370}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTk3NjYyOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDoxNDo1N1rOGS26rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNDo0MDowMVrOGS7jyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNzMwOQ==", "bodyText": "you are not pinging it", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422427309", "createdAt": "2020-05-09T00:14:57Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled\n+   * @param domainNamespace the domain namespace the domain resides\n+   * @param clusterName the WebLogic cluster name in the domain to be scaled\n+   * @param replicasBeforeScale the replicas of the WebLogic cluster before the scale\n+   * @param numberOfServers the number of servers to be scaled to\n+   * @return the replicas of the WebLogic cluster after the scale\n+   */\n+  private int scaleAndVerifyDomain(String domainUid,\n+                                   String domainNamespace,\n+                                   String clusterName,\n+                                   int replicasBeforeScale,\n+                                   int numberOfServers) {\n+\n+    String manageServerPodNamePrefix = domainUid + \"-\" + clusterName + \"-managed-server\";\n+\n+    // scale the cluster in the domain\n+    assertThat(assertDoesNotThrow(() -> scaleDomain(domainUid, domainNamespace, clusterName, numberOfServers)))\n+        .as(String.format(\"Verify scale the cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .withFailMessage(String.format(\"can not scale cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .isTrue();\n+\n+    // generate a curl command to ping the sample app through the ingress controller\n+    curlCmd = generateCurlCmd(clusterName);\n+\n+    // generate the expected server list which should be in the sample app response string\n+    List<String> expectedServerNamesInAppResponse =\n+        generateExpectedServerNamesInAppResponse(clusterName, replicasBeforeScale);\n+    logger.info(\"expected server name list which should be in the sample app response: {0} before scale\",\n+        expectedServerNamesInAppResponse);\n+\n+    if (replicasBeforeScale <= numberOfServers) {\n+\n+      // check that NGINX can access the sample apps from the original managed servers in the domain\n+      logger.info(\"Check that NGINX can access the sample app from the original managed servers in the domain \"\n+                  + \"while the domain is scaling up.\");\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"Verify NGINX can access the sample app from the original managed servers in the domain\")\n+          .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n+          .isTrue();\n+\n+      // check new managed server pods are created and wait for them to be ready\n+      for (int i = replicasBeforeScale + 1; i <= numberOfServers; i++) {\n+        String manageServerPodName = manageServerPodNamePrefix + i;\n+\n+        // check new managed server pods are created\n+        logger.info(\"Check for the new managed server pod {0} is created in namespace {1}\",\n+            manageServerPodName, domainNamespace);\n+        checkPodCreated(manageServerPodName);\n+\n+        // check new managed server pods are ready\n+        logger.info(\"Wait for the new managed server pod {0} to be ready in namespace {1}\",\n+            manageServerPodName, domainNamespace);\n+        checkPodReady(manageServerPodName);\n+\n+        // check new managed server services are created\n+        logger.info(\"Check for the new managed server service {0} is created in namespace {1}\",\n+            manageServerPodName, domainNamespace);\n+        checkServiceCreated(manageServerPodName);\n+\n+        // add the new managed server to the list\n+        expectedServerNamesInAppResponse.add(clusterName + \"-managed-server\" + i);\n+\n+      }\n+\n+      // check that NGINX can access the sample apps from new and original managed servers\n+      logger.info(\"Check that NGINX can access the sample app from the new and original managed servers \"\n+          + \"in the domain after the domain is scaled up.\");\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"Check NGINX can access the sample app from all managed servers in the domain\")\n+          .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n+          .isTrue();\n+    } else {\n+      // scale down\n+      // wait and check the pods are removed\n+      for (int i = replicasBeforeScale; i > numberOfServers; i--) {\n+        logger.info(\"Check managed server pod {0} is removed in namespace {1}\",\n+            manageServerPodNamePrefix + i, domainNamespace);\n+        checkPodDoesNotExist(manageServerPodNamePrefix + i);\n+        expectedServerNamesInAppResponse.remove(clusterName + \"-managed-server\" + i);\n+      }\n+\n+      // check that NGINX can access the remaining managed server in the domain\n+      logger.info(\"Check that NGINX can access the sample app from the remaining managed servers in the domain \"\n+          + \"after the domain is scaled down.\");\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"Check NGINX can access the sample app from the remaining managed server in the domain\")\n+          .withFailMessage(\"NGINX can not access the sample app from the remaining managed server\")\n+          .isTrue();\n+    }\n+\n+    return numberOfServers;\n+  }\n+\n+  /**\n+   * Generate the curl command to ping the sample app from the ingress controller.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 389}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwMzM3MA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422503370", "createdAt": "2020-05-09T14:40:01Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled\n+   * @param domainNamespace the domain namespace the domain resides\n+   * @param clusterName the WebLogic cluster name in the domain to be scaled\n+   * @param replicasBeforeScale the replicas of the WebLogic cluster before the scale\n+   * @param numberOfServers the number of servers to be scaled to\n+   * @return the replicas of the WebLogic cluster after the scale\n+   */\n+  private int scaleAndVerifyDomain(String domainUid,\n+                                   String domainNamespace,\n+                                   String clusterName,\n+                                   int replicasBeforeScale,\n+                                   int numberOfServers) {\n+\n+    String manageServerPodNamePrefix = domainUid + \"-\" + clusterName + \"-managed-server\";\n+\n+    // scale the cluster in the domain\n+    assertThat(assertDoesNotThrow(() -> scaleDomain(domainUid, domainNamespace, clusterName, numberOfServers)))\n+        .as(String.format(\"Verify scale the cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .withFailMessage(String.format(\"can not scale cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .isTrue();\n+\n+    // generate a curl command to ping the sample app through the ingress controller\n+    curlCmd = generateCurlCmd(clusterName);\n+\n+    // generate the expected server list which should be in the sample app response string\n+    List<String> expectedServerNamesInAppResponse =\n+        generateExpectedServerNamesInAppResponse(clusterName, replicasBeforeScale);\n+    logger.info(\"expected server name list which should be in the sample app response: {0} before scale\",\n+        expectedServerNamesInAppResponse);\n+\n+    if (replicasBeforeScale <= numberOfServers) {\n+\n+      // check that NGINX can access the sample apps from the original managed servers in the domain\n+      logger.info(\"Check that NGINX can access the sample app from the original managed servers in the domain \"\n+                  + \"while the domain is scaling up.\");\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"Verify NGINX can access the sample app from the original managed servers in the domain\")\n+          .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n+          .isTrue();\n+\n+      // check new managed server pods are created and wait for them to be ready\n+      for (int i = replicasBeforeScale + 1; i <= numberOfServers; i++) {\n+        String manageServerPodName = manageServerPodNamePrefix + i;\n+\n+        // check new managed server pods are created\n+        logger.info(\"Check for the new managed server pod {0} is created in namespace {1}\",\n+            manageServerPodName, domainNamespace);\n+        checkPodCreated(manageServerPodName);\n+\n+        // check new managed server pods are ready\n+        logger.info(\"Wait for the new managed server pod {0} to be ready in namespace {1}\",\n+            manageServerPodName, domainNamespace);\n+        checkPodReady(manageServerPodName);\n+\n+        // check new managed server services are created\n+        logger.info(\"Check for the new managed server service {0} is created in namespace {1}\",\n+            manageServerPodName, domainNamespace);\n+        checkServiceCreated(manageServerPodName);\n+\n+        // add the new managed server to the list\n+        expectedServerNamesInAppResponse.add(clusterName + \"-managed-server\" + i);\n+\n+      }\n+\n+      // check that NGINX can access the sample apps from new and original managed servers\n+      logger.info(\"Check that NGINX can access the sample app from the new and original managed servers \"\n+          + \"in the domain after the domain is scaled up.\");\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"Check NGINX can access the sample app from all managed servers in the domain\")\n+          .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n+          .isTrue();\n+    } else {\n+      // scale down\n+      // wait and check the pods are removed\n+      for (int i = replicasBeforeScale; i > numberOfServers; i--) {\n+        logger.info(\"Check managed server pod {0} is removed in namespace {1}\",\n+            manageServerPodNamePrefix + i, domainNamespace);\n+        checkPodDoesNotExist(manageServerPodNamePrefix + i);\n+        expectedServerNamesInAppResponse.remove(clusterName + \"-managed-server\" + i);\n+      }\n+\n+      // check that NGINX can access the remaining managed server in the domain\n+      logger.info(\"Check that NGINX can access the sample app from the remaining managed servers in the domain \"\n+          + \"after the domain is scaled down.\");\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"Check NGINX can access the sample app from the remaining managed server in the domain\")\n+          .withFailMessage(\"NGINX can not access the sample app from the remaining managed server\")\n+          .isTrue();\n+    }\n+\n+    return numberOfServers;\n+  }\n+\n+  /**\n+   * Generate the curl command to ping the sample app from the ingress controller.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNzMwOQ=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 389}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTk3ODM1OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDoxNjowNlrOGS27gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNDo0MDoxNlrOGS7j5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNzUyMA==", "bodyText": "this implies the full list is in one response - in that what you meant? don't you mean the list that you expect to see after looking at a (large) number of responses", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422427520", "createdAt": "2020-05-09T00:16:06Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled\n+   * @param domainNamespace the domain namespace the domain resides\n+   * @param clusterName the WebLogic cluster name in the domain to be scaled\n+   * @param replicasBeforeScale the replicas of the WebLogic cluster before the scale\n+   * @param numberOfServers the number of servers to be scaled to\n+   * @return the replicas of the WebLogic cluster after the scale\n+   */\n+  private int scaleAndVerifyDomain(String domainUid,\n+                                   String domainNamespace,\n+                                   String clusterName,\n+                                   int replicasBeforeScale,\n+                                   int numberOfServers) {\n+\n+    String manageServerPodNamePrefix = domainUid + \"-\" + clusterName + \"-managed-server\";\n+\n+    // scale the cluster in the domain\n+    assertThat(assertDoesNotThrow(() -> scaleDomain(domainUid, domainNamespace, clusterName, numberOfServers)))\n+        .as(String.format(\"Verify scale the cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .withFailMessage(String.format(\"can not scale cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .isTrue();\n+\n+    // generate a curl command to ping the sample app through the ingress controller\n+    curlCmd = generateCurlCmd(clusterName);\n+\n+    // generate the expected server list which should be in the sample app response string\n+    List<String> expectedServerNamesInAppResponse =\n+        generateExpectedServerNamesInAppResponse(clusterName, replicasBeforeScale);\n+    logger.info(\"expected server name list which should be in the sample app response: {0} before scale\",\n+        expectedServerNamesInAppResponse);\n+\n+    if (replicasBeforeScale <= numberOfServers) {\n+\n+      // check that NGINX can access the sample apps from the original managed servers in the domain\n+      logger.info(\"Check that NGINX can access the sample app from the original managed servers in the domain \"\n+                  + \"while the domain is scaling up.\");\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"Verify NGINX can access the sample app from the original managed servers in the domain\")\n+          .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n+          .isTrue();\n+\n+      // check new managed server pods are created and wait for them to be ready\n+      for (int i = replicasBeforeScale + 1; i <= numberOfServers; i++) {\n+        String manageServerPodName = manageServerPodNamePrefix + i;\n+\n+        // check new managed server pods are created\n+        logger.info(\"Check for the new managed server pod {0} is created in namespace {1}\",\n+            manageServerPodName, domainNamespace);\n+        checkPodCreated(manageServerPodName);\n+\n+        // check new managed server pods are ready\n+        logger.info(\"Wait for the new managed server pod {0} to be ready in namespace {1}\",\n+            manageServerPodName, domainNamespace);\n+        checkPodReady(manageServerPodName);\n+\n+        // check new managed server services are created\n+        logger.info(\"Check for the new managed server service {0} is created in namespace {1}\",\n+            manageServerPodName, domainNamespace);\n+        checkServiceCreated(manageServerPodName);\n+\n+        // add the new managed server to the list\n+        expectedServerNamesInAppResponse.add(clusterName + \"-managed-server\" + i);\n+\n+      }\n+\n+      // check that NGINX can access the sample apps from new and original managed servers\n+      logger.info(\"Check that NGINX can access the sample app from the new and original managed servers \"\n+          + \"in the domain after the domain is scaled up.\");\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"Check NGINX can access the sample app from all managed servers in the domain\")\n+          .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n+          .isTrue();\n+    } else {\n+      // scale down\n+      // wait and check the pods are removed\n+      for (int i = replicasBeforeScale; i > numberOfServers; i--) {\n+        logger.info(\"Check managed server pod {0} is removed in namespace {1}\",\n+            manageServerPodNamePrefix + i, domainNamespace);\n+        checkPodDoesNotExist(manageServerPodNamePrefix + i);\n+        expectedServerNamesInAppResponse.remove(clusterName + \"-managed-server\" + i);\n+      }\n+\n+      // check that NGINX can access the remaining managed server in the domain\n+      logger.info(\"Check that NGINX can access the sample app from the remaining managed servers in the domain \"\n+          + \"after the domain is scaled down.\");\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"Check NGINX can access the sample app from the remaining managed server in the domain\")\n+          .withFailMessage(\"NGINX can not access the sample app from the remaining managed server\")\n+          .isTrue();\n+    }\n+\n+    return numberOfServers;\n+  }\n+\n+  /**\n+   * Generate the curl command to ping the sample app from the ingress controller.\n+   *\n+   * @param clusterName WebLogic cluster name which is the backend of the ingress\n+   * @return curl command string\n+   */\n+  private String generateCurlCmd(String clusterName) {\n+    String curlCmd =\n+        String.format(\"curl --silent --show-error --noproxy '*' -H 'host: %s' http://%s:%s/sample-war/index.jsp\",\n+        domainUid + \".\" + clusterName + \".test\", K8S_NODEPORT_HOST, nodeportshttp);\n+    return curlCmd;\n+  }\n+\n+  /**\n+   * Generate an expected server name list which should be returned in the sample app response.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 402}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwMzM5Ng==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422503396", "createdAt": "2020-05-09T14:40:16Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled\n+   * @param domainNamespace the domain namespace the domain resides\n+   * @param clusterName the WebLogic cluster name in the domain to be scaled\n+   * @param replicasBeforeScale the replicas of the WebLogic cluster before the scale\n+   * @param numberOfServers the number of servers to be scaled to\n+   * @return the replicas of the WebLogic cluster after the scale\n+   */\n+  private int scaleAndVerifyDomain(String domainUid,\n+                                   String domainNamespace,\n+                                   String clusterName,\n+                                   int replicasBeforeScale,\n+                                   int numberOfServers) {\n+\n+    String manageServerPodNamePrefix = domainUid + \"-\" + clusterName + \"-managed-server\";\n+\n+    // scale the cluster in the domain\n+    assertThat(assertDoesNotThrow(() -> scaleDomain(domainUid, domainNamespace, clusterName, numberOfServers)))\n+        .as(String.format(\"Verify scale the cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .withFailMessage(String.format(\"can not scale cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .isTrue();\n+\n+    // generate a curl command to ping the sample app through the ingress controller\n+    curlCmd = generateCurlCmd(clusterName);\n+\n+    // generate the expected server list which should be in the sample app response string\n+    List<String> expectedServerNamesInAppResponse =\n+        generateExpectedServerNamesInAppResponse(clusterName, replicasBeforeScale);\n+    logger.info(\"expected server name list which should be in the sample app response: {0} before scale\",\n+        expectedServerNamesInAppResponse);\n+\n+    if (replicasBeforeScale <= numberOfServers) {\n+\n+      // check that NGINX can access the sample apps from the original managed servers in the domain\n+      logger.info(\"Check that NGINX can access the sample app from the original managed servers in the domain \"\n+                  + \"while the domain is scaling up.\");\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"Verify NGINX can access the sample app from the original managed servers in the domain\")\n+          .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n+          .isTrue();\n+\n+      // check new managed server pods are created and wait for them to be ready\n+      for (int i = replicasBeforeScale + 1; i <= numberOfServers; i++) {\n+        String manageServerPodName = manageServerPodNamePrefix + i;\n+\n+        // check new managed server pods are created\n+        logger.info(\"Check for the new managed server pod {0} is created in namespace {1}\",\n+            manageServerPodName, domainNamespace);\n+        checkPodCreated(manageServerPodName);\n+\n+        // check new managed server pods are ready\n+        logger.info(\"Wait for the new managed server pod {0} to be ready in namespace {1}\",\n+            manageServerPodName, domainNamespace);\n+        checkPodReady(manageServerPodName);\n+\n+        // check new managed server services are created\n+        logger.info(\"Check for the new managed server service {0} is created in namespace {1}\",\n+            manageServerPodName, domainNamespace);\n+        checkServiceCreated(manageServerPodName);\n+\n+        // add the new managed server to the list\n+        expectedServerNamesInAppResponse.add(clusterName + \"-managed-server\" + i);\n+\n+      }\n+\n+      // check that NGINX can access the sample apps from new and original managed servers\n+      logger.info(\"Check that NGINX can access the sample app from the new and original managed servers \"\n+          + \"in the domain after the domain is scaled up.\");\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"Check NGINX can access the sample app from all managed servers in the domain\")\n+          .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n+          .isTrue();\n+    } else {\n+      // scale down\n+      // wait and check the pods are removed\n+      for (int i = replicasBeforeScale; i > numberOfServers; i--) {\n+        logger.info(\"Check managed server pod {0} is removed in namespace {1}\",\n+            manageServerPodNamePrefix + i, domainNamespace);\n+        checkPodDoesNotExist(manageServerPodNamePrefix + i);\n+        expectedServerNamesInAppResponse.remove(clusterName + \"-managed-server\" + i);\n+      }\n+\n+      // check that NGINX can access the remaining managed server in the domain\n+      logger.info(\"Check that NGINX can access the sample app from the remaining managed servers in the domain \"\n+          + \"after the domain is scaled down.\");\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"Check NGINX can access the sample app from the remaining managed server in the domain\")\n+          .withFailMessage(\"NGINX can not access the sample app from the remaining managed server\")\n+          .isTrue();\n+    }\n+\n+    return numberOfServers;\n+  }\n+\n+  /**\n+   * Generate the curl command to ping the sample app from the ingress controller.\n+   *\n+   * @param clusterName WebLogic cluster name which is the backend of the ingress\n+   * @return curl command string\n+   */\n+  private String generateCurlCmd(String clusterName) {\n+    String curlCmd =\n+        String.format(\"curl --silent --show-error --noproxy '*' -H 'host: %s' http://%s:%s/sample-war/index.jsp\",\n+        domainUid + \".\" + clusterName + \".test\", K8S_NODEPORT_HOST, nodeportshttp);\n+    return curlCmd;\n+  }\n+\n+  /**\n+   * Generate an expected server name list which should be returned in the sample app response.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNzUyMA=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 402}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTk3ODQ1OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/resources/wdt-models/model2-wls.yaml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDoxNjowOFrOGS27iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNDozNzo1N1rOGS7jAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNzUzMQ==", "bodyText": "what is the difference between domainUid and this Name here ?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422427531", "createdAt": "2020-05-09T00:16:08Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/resources/wdt-models/model2-wls.yaml", "diffHunk": "@@ -0,0 +1,43 @@\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+domainInfo:\n+    AdminUserName: '@@SECRET:__weblogic-credentials__:username@@'\n+    AdminPassword: '@@SECRET:__weblogic-credentials__:password@@'\n+    ServerStartMode: 'prod'\n+\n+topology:\n+    Name: \"wls-domain1\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0NTg1Nw==", "bodyText": "I am not sure. I copied it from model1-wls.yaml file.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422445857", "createdAt": "2020-05-09T03:02:58Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/resources/wdt-models/model2-wls.yaml", "diffHunk": "@@ -0,0 +1,43 @@\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+domainInfo:\n+    AdminUserName: '@@SECRET:__weblogic-credentials__:username@@'\n+    AdminPassword: '@@SECRET:__weblogic-credentials__:password@@'\n+    ServerStartMode: 'prod'\n+\n+topology:\n+    Name: \"wls-domain1\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNzUzMQ=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwMzE3MQ==", "bodyText": "The domain name is set in Domain() here:\nDomain domain = new Domain()\n.apiVersion(API_VERSION)\n.kind(\"Domain\")\n.metadata(new V1ObjectMeta()\n.name(domainUid)\nIt seems the topology name in the model file does not matter.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422503171", "createdAt": "2020-05-09T14:37:57Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/resources/wdt-models/model2-wls.yaml", "diffHunk": "@@ -0,0 +1,43 @@\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+domainInfo:\n+    AdminUserName: '@@SECRET:__weblogic-credentials__:username@@'\n+    AdminPassword: '@@SECRET:__weblogic-credentials__:password@@'\n+    ServerStartMode: 'prod'\n+\n+topology:\n+    Name: \"wls-domain1\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNzUzMQ=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTk3OTUwOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDoxNjo1NFrOGS28EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNDo0MDoyNFrOGS7kAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNzY2NA==", "bodyText": "ingress names -> ingresses", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422427664", "createdAt": "2020-05-09T00:16:54Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -239,6 +243,17 @@ public static boolean uninstallNginx(HelmParams params) {\n     return Nginx.uninstall(params);\n   }\n \n+  /**\n+   * Get a list of ingress names in the specified namespace.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwMzQyNw==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422503427", "createdAt": "2020-05-09T14:40:24Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -239,6 +243,17 @@ public static boolean uninstallNginx(HelmParams params) {\n     return Nginx.uninstall(params);\n   }\n \n+  /**\n+   * Get a list of ingress names in the specified namespace.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNzY2NA=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTk3OTY5OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDoxNzowNVrOGS28LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNDo0MDozMlrOGS7kDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNzY5Mg==", "bodyText": "listIngresses", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422427692", "createdAt": "2020-05-09T00:17:05Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -239,6 +243,17 @@ public static boolean uninstallNginx(HelmParams params) {\n     return Nginx.uninstall(params);\n   }\n \n+  /**\n+   * Get a list of ingress names in the specified namespace.\n+   *\n+   * @param namespace in which to list all the ingresses\n+   * @return list of ingress names in the specified namespace\n+   * @throws ApiException if Kubernetes client API call fails\n+   */\n+  public static List<String> getIngressList(String namespace) throws ApiException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwMzQzOA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422503438", "createdAt": "2020-05-09T14:40:32Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -239,6 +243,17 @@ public static boolean uninstallNginx(HelmParams params) {\n     return Nginx.uninstall(params);\n   }\n \n+  /**\n+   * Get a list of ingress names in the specified namespace.\n+   *\n+   * @param namespace in which to list all the ingresses\n+   * @return list of ingress names in the specified namespace\n+   * @throws ApiException if Kubernetes client API call fails\n+   */\n+  public static List<String> getIngressList(String namespace) throws ApiException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNzY5Mg=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTk4MDY1OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Domain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDoxNzo0MVrOGS28pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNDo0MDo0MVrOGS7kJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNzgxMw==", "bodyText": "what is success? you submitted the async request?   it worked? something else?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422427813", "createdAt": "2020-05-09T00:17:41Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Domain.java", "diffHunk": "@@ -77,4 +82,48 @@ public static boolean patchDomainCustomResource(String domainUid, String namespa\n       String patchFormat) {\n     return Kubernetes.patchDomainCustomResource(domainUid, namespace, patch, patchFormat);\n   }\n+\n+  /**\n+   * Scale the cluster of the domain in the specified namespace.\n+   *\n+   * @param domainUid domainUid of the domain to be scaled\n+   * @param namespace namespace in which the domain resides\n+   * @param clusterName name of the WebLogic cluster to be scaled in the domain\n+   * @param numOfServers number of servers to be scaled to\n+   * @return true if success, false otherwise", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwMzQ2MA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422503460", "createdAt": "2020-05-09T14:40:41Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Domain.java", "diffHunk": "@@ -77,4 +82,48 @@ public static boolean patchDomainCustomResource(String domainUid, String namespa\n       String patchFormat) {\n     return Kubernetes.patchDomainCustomResource(domainUid, namespace, patch, patchFormat);\n   }\n+\n+  /**\n+   * Scale the cluster of the domain in the specified namespace.\n+   *\n+   * @param domainUid domainUid of the domain to be scaled\n+   * @param namespace namespace in which the domain resides\n+   * @param clusterName name of the WebLogic cluster to be scaled in the domain\n+   * @param numOfServers number of servers to be scaled to\n+   * @return true if success, false otherwise", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNzgxMw=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTk4MTAxOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Domain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDoxNzo1NFrOGS280Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNDo0MDo1NVrOGS7kPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNzg1Nw==", "bodyText": "null check", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422427857", "createdAt": "2020-05-09T00:17:54Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Domain.java", "diffHunk": "@@ -77,4 +82,48 @@ public static boolean patchDomainCustomResource(String domainUid, String namespa\n       String patchFormat) {\n     return Kubernetes.patchDomainCustomResource(domainUid, namespace, patch, patchFormat);\n   }\n+\n+  /**\n+   * Scale the cluster of the domain in the specified namespace.\n+   *\n+   * @param domainUid domainUid of the domain to be scaled\n+   * @param namespace namespace in which the domain resides\n+   * @param clusterName name of the WebLogic cluster to be scaled in the domain\n+   * @param numOfServers number of servers to be scaled to\n+   * @return true if success, false otherwise\n+   * @throws ApiException if Kubernetes client API call fails\n+   */\n+  public static boolean scaleDomain(String domainUid, String namespace, String clusterName, int numOfServers)\n+      throws ApiException {\n+\n+    // get the domain cluster list\n+    oracle.weblogic.domain.Domain domain = getDomainCustomResource(domainUid, namespace);\n+    List<Cluster> clusters = domain.getSpec().getClusters();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwMzQ4NQ==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422503485", "createdAt": "2020-05-09T14:40:55Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Domain.java", "diffHunk": "@@ -77,4 +82,48 @@ public static boolean patchDomainCustomResource(String domainUid, String namespa\n       String patchFormat) {\n     return Kubernetes.patchDomainCustomResource(domainUid, namespace, patch, patchFormat);\n   }\n+\n+  /**\n+   * Scale the cluster of the domain in the specified namespace.\n+   *\n+   * @param domainUid domainUid of the domain to be scaled\n+   * @param namespace namespace in which the domain resides\n+   * @param clusterName name of the WebLogic cluster to be scaled in the domain\n+   * @param numOfServers number of servers to be scaled to\n+   * @return true if success, false otherwise\n+   * @throws ApiException if Kubernetes client API call fails\n+   */\n+  public static boolean scaleDomain(String domainUid, String namespace, String clusterName, int numOfServers)\n+      throws ApiException {\n+\n+    // get the domain cluster list\n+    oracle.weblogic.domain.Domain domain = getDomainCustomResource(domainUid, namespace);\n+    List<Cluster> clusters = domain.getSpec().getClusters();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNzg1Nw=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTk4MTUyOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Domain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDoxODoyMlrOGS29GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNDo0MTowNFrOGS7kVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNzkyOQ==", "bodyText": "string, no cap", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422427929", "createdAt": "2020-05-09T00:18:22Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Domain.java", "diffHunk": "@@ -77,4 +82,48 @@ public static boolean patchDomainCustomResource(String domainUid, String namespa\n       String patchFormat) {\n     return Kubernetes.patchDomainCustomResource(domainUid, namespace, patch, patchFormat);\n   }\n+\n+  /**\n+   * Scale the cluster of the domain in the specified namespace.\n+   *\n+   * @param domainUid domainUid of the domain to be scaled\n+   * @param namespace namespace in which the domain resides\n+   * @param clusterName name of the WebLogic cluster to be scaled in the domain\n+   * @param numOfServers number of servers to be scaled to\n+   * @return true if success, false otherwise\n+   * @throws ApiException if Kubernetes client API call fails\n+   */\n+  public static boolean scaleDomain(String domainUid, String namespace, String clusterName, int numOfServers)\n+      throws ApiException {\n+\n+    // get the domain cluster list\n+    oracle.weblogic.domain.Domain domain = getDomainCustomResource(domainUid, namespace);\n+    List<Cluster> clusters = domain.getSpec().getClusters();\n+\n+    // get the index of the cluster with clusterName in the cluster list\n+    int index = 0;\n+    for (int i = 0; i < clusters.size(); i++) {\n+      if (clusters.get(i).getClusterName().equals(clusterName)) {\n+        index = i;\n+        break;\n+      }\n+    }\n+\n+    // construct the patch string for scaling the cluster in the domain\n+    StringBuffer patchStr = new StringBuffer(\"[{\")\n+        .append(\"\\\"op\\\": \\\"replace\\\", \")\n+        .append(\"\\\"path\\\": \\\"/spec/clusters/\")\n+        .append(index)\n+        .append(\"/replicas\\\", \")\n+        .append(\"\\\"value\\\": \")\n+        .append(numOfServers)\n+        .append(\"}]\");\n+\n+    logger.info(\"Scale domain patch String: {0}\", patchStr.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwMzUwOA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422503508", "createdAt": "2020-05-09T14:41:04Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Domain.java", "diffHunk": "@@ -77,4 +82,48 @@ public static boolean patchDomainCustomResource(String domainUid, String namespa\n       String patchFormat) {\n     return Kubernetes.patchDomainCustomResource(domainUid, namespace, patch, patchFormat);\n   }\n+\n+  /**\n+   * Scale the cluster of the domain in the specified namespace.\n+   *\n+   * @param domainUid domainUid of the domain to be scaled\n+   * @param namespace namespace in which the domain resides\n+   * @param clusterName name of the WebLogic cluster to be scaled in the domain\n+   * @param numOfServers number of servers to be scaled to\n+   * @return true if success, false otherwise\n+   * @throws ApiException if Kubernetes client API call fails\n+   */\n+  public static boolean scaleDomain(String domainUid, String namespace, String clusterName, int numOfServers)\n+      throws ApiException {\n+\n+    // get the domain cluster list\n+    oracle.weblogic.domain.Domain domain = getDomainCustomResource(domainUid, namespace);\n+    List<Cluster> clusters = domain.getSpec().getClusters();\n+\n+    // get the index of the cluster with clusterName in the cluster list\n+    int index = 0;\n+    for (int i = 0; i < clusters.size(); i++) {\n+      if (clusters.get(i).getClusterName().equals(clusterName)) {\n+        index = i;\n+        break;\n+      }\n+    }\n+\n+    // construct the patch string for scaling the cluster in the domain\n+    StringBuffer patchStr = new StringBuffer(\"[{\")\n+        .append(\"\\\"op\\\": \\\"replace\\\", \")\n+        .append(\"\\\"path\\\": \\\"/spec/clusters/\")\n+        .append(index)\n+        .append(\"/replicas\\\", \")\n+        .append(\"\\\"value\\\": \")\n+        .append(numOfServers)\n+        .append(\"}]\");\n+\n+    logger.info(\"Scale domain patch String: {0}\", patchStr.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNzkyOQ=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTk4MTU2OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDoxODoyNFrOGS29IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNDozODo0MFrOGS7jTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNzkzNw==", "bodyText": "method name message does not match. if the method simply checks if a pod exists or not why is it waiting here ?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422427937", "createdAt": "2020-05-09T00:18:24Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 279}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwMzI0NQ==", "bodyText": "changed the method name to checkPodDeleted(String podName)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422503245", "createdAt": "2020-05-09T14:38:40Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyNzkzNw=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 279}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTk4Mjc3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/TestUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDoxOTowN1rOGS29wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNDo0MToxM1rOGS7kZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyODA5OA==", "bodyText": "get rid of the extra space after \\n to avoid confusion", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422428098", "createdAt": "2020-05-09T00:19:07Z", "author": {"login": "markxnelson"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/TestUtils.java", "diffHunk": "@@ -58,6 +59,10 @@ public static boolean callWebAppAndCheckForServerNameInResponse(\n           });\n         } catch (Exception e) {\n           logger.info(\"Got exception while running command: \" + curlCmd);\n+          if (result != null) {\n+            logger.info(\"result.stdout: \\n {0}\", result.stdout());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwMzUyNg==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422503526", "createdAt": "2020-05-09T14:41:13Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/TestUtils.java", "diffHunk": "@@ -58,6 +59,10 @@ public static boolean callWebAppAndCheckForServerNameInResponse(\n           });\n         } catch (Exception e) {\n           logger.info(\"Got exception while running command: \" + curlCmd);\n+          if (result != null) {\n+            logger.info(\"result.stdout: \\n {0}\", result.stdout());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyODA5OA=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTk4ODA2OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDoyMzowMFrOGS3Akg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNDo0MToyM1rOGS7keA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyODgxOA==", "bodyText": "Scale the WebLogic cluster to specified number of servers and verify the sample app can be accessed through NGINX.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422428818", "createdAt": "2020-05-09T00:23:00Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 291}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwMzU0NA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422503544", "createdAt": "2020-05-09T14:41:23Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyODgxOA=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 291}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTk5MDE3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDoyNDoxOFrOGS3BqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxODoyMjoyNFrOGToBpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyOTA5Nw==", "bodyText": "is the domain cluster will be scaled or domain?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422429097", "createdAt": "2020-05-09T00:24:18Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 293}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1MzIxMg==", "bodyText": "cluster", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422453212", "createdAt": "2020-05-09T04:56:26Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyOTA5Nw=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 293}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcxMzQxNA==", "bodyText": "then the param domainUid description needs to be changed.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422713414", "createdAt": "2020-05-10T23:04:41Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyOTA5Nw=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 293}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIzMTkxMQ==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r423231911", "createdAt": "2020-05-11T18:22:24Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyOTA5Nw=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 293}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTk5MDg4OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDoyNDo0NlrOGS3CCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNDo0MTozNFrOGS7khw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyOTE5NQ==", "bodyText": "the namespace in which the domain exists", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422429195", "createdAt": "2020-05-09T00:24:46Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled\n+   * @param domainNamespace the domain namespace the domain resides", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 294}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwMzU1OQ==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422503559", "createdAt": "2020-05-09T14:41:34Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled\n+   * @param domainNamespace the domain namespace the domain resides", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyOTE5NQ=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 294}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTk5MjkxOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDoyNjoxM1rOGS3DGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNDo0MTo0NFrOGS7kkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyOTQ2Nw==", "bodyText": "This should be logged", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422429467", "createdAt": "2020-05-09T00:26:13Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled\n+   * @param domainNamespace the domain namespace the domain resides\n+   * @param clusterName the WebLogic cluster name in the domain to be scaled\n+   * @param replicasBeforeScale the replicas of the WebLogic cluster before the scale\n+   * @param numberOfServers the number of servers to be scaled to\n+   * @return the replicas of the WebLogic cluster after the scale\n+   */\n+  private int scaleAndVerifyDomain(String domainUid,\n+                                   String domainNamespace,\n+                                   String clusterName,\n+                                   int replicasBeforeScale,\n+                                   int numberOfServers) {\n+\n+    String manageServerPodNamePrefix = domainUid + \"-\" + clusterName + \"-managed-server\";\n+\n+    // scale the cluster in the domain", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 308}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwMzU2OA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422503568", "createdAt": "2020-05-09T14:41:44Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled\n+   * @param domainNamespace the domain namespace the domain resides\n+   * @param clusterName the WebLogic cluster name in the domain to be scaled\n+   * @param replicasBeforeScale the replicas of the WebLogic cluster before the scale\n+   * @param numberOfServers the number of servers to be scaled to\n+   * @return the replicas of the WebLogic cluster after the scale\n+   */\n+  private int scaleAndVerifyDomain(String domainUid,\n+                                   String domainNamespace,\n+                                   String clusterName,\n+                                   int replicasBeforeScale,\n+                                   int numberOfServers) {\n+\n+    String manageServerPodNamePrefix = domainUid + \"-\" + clusterName + \"-managed-server\";\n+\n+    // scale the cluster in the domain", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyOTQ2Nw=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 308}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTk5MzI1OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDoyNjozMVrOGS3DSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNDo0MTo1NVrOGS7knw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyOTUxNQ==", "bodyText": "the method name should be scaleCluster?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422429515", "createdAt": "2020-05-09T00:26:31Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled\n+   * @param domainNamespace the domain namespace the domain resides\n+   * @param clusterName the WebLogic cluster name in the domain to be scaled\n+   * @param replicasBeforeScale the replicas of the WebLogic cluster before the scale\n+   * @param numberOfServers the number of servers to be scaled to\n+   * @return the replicas of the WebLogic cluster after the scale\n+   */\n+  private int scaleAndVerifyDomain(String domainUid,\n+                                   String domainNamespace,\n+                                   String clusterName,\n+                                   int replicasBeforeScale,\n+                                   int numberOfServers) {\n+\n+    String manageServerPodNamePrefix = domainUid + \"-\" + clusterName + \"-managed-server\";\n+\n+    // scale the cluster in the domain\n+    assertThat(assertDoesNotThrow(() -> scaleDomain(domainUid, domainNamespace, clusterName, numberOfServers)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 309}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwMzU4Mw==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422503583", "createdAt": "2020-05-09T14:41:55Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled\n+   * @param domainNamespace the domain namespace the domain resides\n+   * @param clusterName the WebLogic cluster name in the domain to be scaled\n+   * @param replicasBeforeScale the replicas of the WebLogic cluster before the scale\n+   * @param numberOfServers the number of servers to be scaled to\n+   * @return the replicas of the WebLogic cluster after the scale\n+   */\n+  private int scaleAndVerifyDomain(String domainUid,\n+                                   String domainNamespace,\n+                                   String clusterName,\n+                                   int replicasBeforeScale,\n+                                   int numberOfServers) {\n+\n+    String manageServerPodNamePrefix = domainUid + \"-\" + clusterName + \"-managed-server\";\n+\n+    // scale the cluster in the domain\n+    assertThat(assertDoesNotThrow(() -> scaleDomain(domainUid, domainNamespace, clusterName, numberOfServers)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyOTUxNQ=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 309}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTk5Nzc0OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDoyOTozNFrOGS3FmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNTo0MTo1MlrOGS4qBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzMDEwNA==", "bodyText": "this message will be printed on a successful scale? If yes then it needs to say \"cluster %s of domain %s in namespace %s scaled to %s(replicasBeforeScale+numberOfServers)\"", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422430104", "createdAt": "2020-05-09T00:29:34Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled\n+   * @param domainNamespace the domain namespace the domain resides\n+   * @param clusterName the WebLogic cluster name in the domain to be scaled\n+   * @param replicasBeforeScale the replicas of the WebLogic cluster before the scale\n+   * @param numberOfServers the number of servers to be scaled to\n+   * @return the replicas of the WebLogic cluster after the scale\n+   */\n+  private int scaleAndVerifyDomain(String domainUid,\n+                                   String domainNamespace,\n+                                   String clusterName,\n+                                   int replicasBeforeScale,\n+                                   int numberOfServers) {\n+\n+    String manageServerPodNamePrefix = domainUid + \"-\" + clusterName + \"-managed-server\";\n+\n+    // scale the cluster in the domain\n+    assertThat(assertDoesNotThrow(() -> scaleDomain(domainUid, domainNamespace, clusterName, numberOfServers)))\n+        .as(String.format(\"Verify scale the cluster %s of domain %s in namespace %s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 310}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1NTgxMg==", "bodyText": "no, this message is describing what the assertion does, not a message for a successful run.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422455812", "createdAt": "2020-05-09T05:41:52Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled\n+   * @param domainNamespace the domain namespace the domain resides\n+   * @param clusterName the WebLogic cluster name in the domain to be scaled\n+   * @param replicasBeforeScale the replicas of the WebLogic cluster before the scale\n+   * @param numberOfServers the number of servers to be scaled to\n+   * @return the replicas of the WebLogic cluster after the scale\n+   */\n+  private int scaleAndVerifyDomain(String domainUid,\n+                                   String domainNamespace,\n+                                   String clusterName,\n+                                   int replicasBeforeScale,\n+                                   int numberOfServers) {\n+\n+    String manageServerPodNamePrefix = domainUid + \"-\" + clusterName + \"-managed-server\";\n+\n+    // scale the cluster in the domain\n+    assertThat(assertDoesNotThrow(() -> scaleDomain(domainUid, domainNamespace, clusterName, numberOfServers)))\n+        .as(String.format(\"Verify scale the cluster %s of domain %s in namespace %s\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzMDEwNA=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 310}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTk5ODM5OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDozMDowMVrOGS3F8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNDo0NTo1NFrOGS7mQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzMDE5Mg==", "bodyText": "Scaling of cluster failed....", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422430192", "createdAt": "2020-05-09T00:30:01Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled\n+   * @param domainNamespace the domain namespace the domain resides\n+   * @param clusterName the WebLogic cluster name in the domain to be scaled\n+   * @param replicasBeforeScale the replicas of the WebLogic cluster before the scale\n+   * @param numberOfServers the number of servers to be scaled to\n+   * @return the replicas of the WebLogic cluster after the scale\n+   */\n+  private int scaleAndVerifyDomain(String domainUid,\n+                                   String domainNamespace,\n+                                   String clusterName,\n+                                   int replicasBeforeScale,\n+                                   int numberOfServers) {\n+\n+    String manageServerPodNamePrefix = domainUid + \"-\" + clusterName + \"-managed-server\";\n+\n+    // scale the cluster in the domain\n+    assertThat(assertDoesNotThrow(() -> scaleDomain(domainUid, domainNamespace, clusterName, numberOfServers)))\n+        .as(String.format(\"Verify scale the cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .withFailMessage(String.format(\"can not scale cluster %s of domain %s in namespace %s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 312}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwNDAwMw==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422504003", "createdAt": "2020-05-09T14:45:54Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled\n+   * @param domainNamespace the domain namespace the domain resides\n+   * @param clusterName the WebLogic cluster name in the domain to be scaled\n+   * @param replicasBeforeScale the replicas of the WebLogic cluster before the scale\n+   * @param numberOfServers the number of servers to be scaled to\n+   * @return the replicas of the WebLogic cluster after the scale\n+   */\n+  private int scaleAndVerifyDomain(String domainUid,\n+                                   String domainNamespace,\n+                                   String clusterName,\n+                                   int replicasBeforeScale,\n+                                   int numberOfServers) {\n+\n+    String manageServerPodNamePrefix = domainUid + \"-\" + clusterName + \"-managed-server\";\n+\n+    // scale the cluster in the domain\n+    assertThat(assertDoesNotThrow(() -> scaleDomain(domainUid, domainNamespace, clusterName, numberOfServers)))\n+        .as(String.format(\"Verify scale the cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .withFailMessage(String.format(\"can not scale cluster %s of domain %s in namespace %s\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzMDE5Mg=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 312}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDAwMDQwOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDozMTozMlrOGS3HAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNDo0NjowNVrOGS7mVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzMDQ2NA==", "bodyText": "Checking....", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422430464", "createdAt": "2020-05-09T00:31:32Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled\n+   * @param domainNamespace the domain namespace the domain resides\n+   * @param clusterName the WebLogic cluster name in the domain to be scaled\n+   * @param replicasBeforeScale the replicas of the WebLogic cluster before the scale\n+   * @param numberOfServers the number of servers to be scaled to\n+   * @return the replicas of the WebLogic cluster after the scale\n+   */\n+  private int scaleAndVerifyDomain(String domainUid,\n+                                   String domainNamespace,\n+                                   String clusterName,\n+                                   int replicasBeforeScale,\n+                                   int numberOfServers) {\n+\n+    String manageServerPodNamePrefix = domainUid + \"-\" + clusterName + \"-managed-server\";\n+\n+    // scale the cluster in the domain\n+    assertThat(assertDoesNotThrow(() -> scaleDomain(domainUid, domainNamespace, clusterName, numberOfServers)))\n+        .as(String.format(\"Verify scale the cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .withFailMessage(String.format(\"can not scale cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .isTrue();\n+\n+    // generate a curl command to ping the sample app through the ingress controller\n+    curlCmd = generateCurlCmd(clusterName);\n+\n+    // generate the expected server list which should be in the sample app response string\n+    List<String> expectedServerNamesInAppResponse =\n+        generateExpectedServerNamesInAppResponse(clusterName, replicasBeforeScale);\n+    logger.info(\"expected server name list which should be in the sample app response: {0} before scale\",\n+        expectedServerNamesInAppResponse);\n+\n+    if (replicasBeforeScale <= numberOfServers) {\n+\n+      // check that NGINX can access the sample apps from the original managed servers in the domain\n+      logger.info(\"Check that NGINX can access the sample app from the original managed servers in the domain \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 328}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwNDAyMw==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422504023", "createdAt": "2020-05-09T14:46:05Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled\n+   * @param domainNamespace the domain namespace the domain resides\n+   * @param clusterName the WebLogic cluster name in the domain to be scaled\n+   * @param replicasBeforeScale the replicas of the WebLogic cluster before the scale\n+   * @param numberOfServers the number of servers to be scaled to\n+   * @return the replicas of the WebLogic cluster after the scale\n+   */\n+  private int scaleAndVerifyDomain(String domainUid,\n+                                   String domainNamespace,\n+                                   String clusterName,\n+                                   int replicasBeforeScale,\n+                                   int numberOfServers) {\n+\n+    String manageServerPodNamePrefix = domainUid + \"-\" + clusterName + \"-managed-server\";\n+\n+    // scale the cluster in the domain\n+    assertThat(assertDoesNotThrow(() -> scaleDomain(domainUid, domainNamespace, clusterName, numberOfServers)))\n+        .as(String.format(\"Verify scale the cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .withFailMessage(String.format(\"can not scale cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .isTrue();\n+\n+    // generate a curl command to ping the sample app through the ingress controller\n+    curlCmd = generateCurlCmd(clusterName);\n+\n+    // generate the expected server list which should be in the sample app response string\n+    List<String> expectedServerNamesInAppResponse =\n+        generateExpectedServerNamesInAppResponse(clusterName, replicasBeforeScale);\n+    logger.info(\"expected server name list which should be in the sample app response: {0} before scale\",\n+        expectedServerNamesInAppResponse);\n+\n+    if (replicasBeforeScale <= numberOfServers) {\n+\n+      // check that NGINX can access the sample apps from the original managed servers in the domain\n+      logger.info(\"Check that NGINX can access the sample app from the original managed servers in the domain \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzMDQ2NA=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 328}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDAwMjYyOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDozMzoxNlrOGS3IJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNTo1MToxM1rOGS4skw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzMDc1Ng==", "bodyText": "Verify\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      .as(\"Verify NGINX can access the sample app from the original managed servers in the domain\")\n          \n          \n            \n                      .as(\"NGINX can access the sample app from the original managed servers in the domain\")", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422430756", "createdAt": "2020-05-09T00:33:16Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled\n+   * @param domainNamespace the domain namespace the domain resides\n+   * @param clusterName the WebLogic cluster name in the domain to be scaled\n+   * @param replicasBeforeScale the replicas of the WebLogic cluster before the scale\n+   * @param numberOfServers the number of servers to be scaled to\n+   * @return the replicas of the WebLogic cluster after the scale\n+   */\n+  private int scaleAndVerifyDomain(String domainUid,\n+                                   String domainNamespace,\n+                                   String clusterName,\n+                                   int replicasBeforeScale,\n+                                   int numberOfServers) {\n+\n+    String manageServerPodNamePrefix = domainUid + \"-\" + clusterName + \"-managed-server\";\n+\n+    // scale the cluster in the domain\n+    assertThat(assertDoesNotThrow(() -> scaleDomain(domainUid, domainNamespace, clusterName, numberOfServers)))\n+        .as(String.format(\"Verify scale the cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .withFailMessage(String.format(\"can not scale cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .isTrue();\n+\n+    // generate a curl command to ping the sample app through the ingress controller\n+    curlCmd = generateCurlCmd(clusterName);\n+\n+    // generate the expected server list which should be in the sample app response string\n+    List<String> expectedServerNamesInAppResponse =\n+        generateExpectedServerNamesInAppResponse(clusterName, replicasBeforeScale);\n+    logger.info(\"expected server name list which should be in the sample app response: {0} before scale\",\n+        expectedServerNamesInAppResponse);\n+\n+    if (replicasBeforeScale <= numberOfServers) {\n+\n+      // check that NGINX can access the sample apps from the original managed servers in the domain\n+      logger.info(\"Check that NGINX can access the sample app from the original managed servers in the domain \"\n+                  + \"while the domain is scaling up.\");\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"Verify NGINX can access the sample app from the original managed servers in the domain\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 331}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1NjQ2Nw==", "bodyText": ".as() message is not for a successful assertion.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422456467", "createdAt": "2020-05-09T05:51:13Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled\n+   * @param domainNamespace the domain namespace the domain resides\n+   * @param clusterName the WebLogic cluster name in the domain to be scaled\n+   * @param replicasBeforeScale the replicas of the WebLogic cluster before the scale\n+   * @param numberOfServers the number of servers to be scaled to\n+   * @return the replicas of the WebLogic cluster after the scale\n+   */\n+  private int scaleAndVerifyDomain(String domainUid,\n+                                   String domainNamespace,\n+                                   String clusterName,\n+                                   int replicasBeforeScale,\n+                                   int numberOfServers) {\n+\n+    String manageServerPodNamePrefix = domainUid + \"-\" + clusterName + \"-managed-server\";\n+\n+    // scale the cluster in the domain\n+    assertThat(assertDoesNotThrow(() -> scaleDomain(domainUid, domainNamespace, clusterName, numberOfServers)))\n+        .as(String.format(\"Verify scale the cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .withFailMessage(String.format(\"can not scale cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .isTrue();\n+\n+    // generate a curl command to ping the sample app through the ingress controller\n+    curlCmd = generateCurlCmd(clusterName);\n+\n+    // generate the expected server list which should be in the sample app response string\n+    List<String> expectedServerNamesInAppResponse =\n+        generateExpectedServerNamesInAppResponse(clusterName, replicasBeforeScale);\n+    logger.info(\"expected server name list which should be in the sample app response: {0} before scale\",\n+        expectedServerNamesInAppResponse);\n+\n+    if (replicasBeforeScale <= numberOfServers) {\n+\n+      // check that NGINX can access the sample apps from the original managed servers in the domain\n+      logger.info(\"Check that NGINX can access the sample app from the original managed servers in the domain \"\n+                  + \"while the domain is scaling up.\");\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"Verify NGINX can access the sample app from the original managed servers in the domain\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzMDc1Ng=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 331}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDAwNDY0OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDozNDo1OFrOGS3JLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNDo0NjoxOVrOGS7mdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzMTAyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.info(\"Check for the new managed server pod {0} is created in namespace {1}\",\n          \n          \n            \n                    logger.info(\"Checking whether the new managed server pod {0} is created in namespace {1}\",", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422431020", "createdAt": "2020-05-09T00:34:58Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled\n+   * @param domainNamespace the domain namespace the domain resides\n+   * @param clusterName the WebLogic cluster name in the domain to be scaled\n+   * @param replicasBeforeScale the replicas of the WebLogic cluster before the scale\n+   * @param numberOfServers the number of servers to be scaled to\n+   * @return the replicas of the WebLogic cluster after the scale\n+   */\n+  private int scaleAndVerifyDomain(String domainUid,\n+                                   String domainNamespace,\n+                                   String clusterName,\n+                                   int replicasBeforeScale,\n+                                   int numberOfServers) {\n+\n+    String manageServerPodNamePrefix = domainUid + \"-\" + clusterName + \"-managed-server\";\n+\n+    // scale the cluster in the domain\n+    assertThat(assertDoesNotThrow(() -> scaleDomain(domainUid, domainNamespace, clusterName, numberOfServers)))\n+        .as(String.format(\"Verify scale the cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .withFailMessage(String.format(\"can not scale cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .isTrue();\n+\n+    // generate a curl command to ping the sample app through the ingress controller\n+    curlCmd = generateCurlCmd(clusterName);\n+\n+    // generate the expected server list which should be in the sample app response string\n+    List<String> expectedServerNamesInAppResponse =\n+        generateExpectedServerNamesInAppResponse(clusterName, replicasBeforeScale);\n+    logger.info(\"expected server name list which should be in the sample app response: {0} before scale\",\n+        expectedServerNamesInAppResponse);\n+\n+    if (replicasBeforeScale <= numberOfServers) {\n+\n+      // check that NGINX can access the sample apps from the original managed servers in the domain\n+      logger.info(\"Check that NGINX can access the sample app from the original managed servers in the domain \"\n+                  + \"while the domain is scaling up.\");\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"Verify NGINX can access the sample app from the original managed servers in the domain\")\n+          .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n+          .isTrue();\n+\n+      // check new managed server pods are created and wait for them to be ready\n+      for (int i = replicasBeforeScale + 1; i <= numberOfServers; i++) {\n+        String manageServerPodName = manageServerPodNamePrefix + i;\n+\n+        // check new managed server pods are created\n+        logger.info(\"Check for the new managed server pod {0} is created in namespace {1}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 340}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwNDA1Mw==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422504053", "createdAt": "2020-05-09T14:46:19Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled\n+   * @param domainNamespace the domain namespace the domain resides\n+   * @param clusterName the WebLogic cluster name in the domain to be scaled\n+   * @param replicasBeforeScale the replicas of the WebLogic cluster before the scale\n+   * @param numberOfServers the number of servers to be scaled to\n+   * @return the replicas of the WebLogic cluster after the scale\n+   */\n+  private int scaleAndVerifyDomain(String domainUid,\n+                                   String domainNamespace,\n+                                   String clusterName,\n+                                   int replicasBeforeScale,\n+                                   int numberOfServers) {\n+\n+    String manageServerPodNamePrefix = domainUid + \"-\" + clusterName + \"-managed-server\";\n+\n+    // scale the cluster in the domain\n+    assertThat(assertDoesNotThrow(() -> scaleDomain(domainUid, domainNamespace, clusterName, numberOfServers)))\n+        .as(String.format(\"Verify scale the cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .withFailMessage(String.format(\"can not scale cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .isTrue();\n+\n+    // generate a curl command to ping the sample app through the ingress controller\n+    curlCmd = generateCurlCmd(clusterName);\n+\n+    // generate the expected server list which should be in the sample app response string\n+    List<String> expectedServerNamesInAppResponse =\n+        generateExpectedServerNamesInAppResponse(clusterName, replicasBeforeScale);\n+    logger.info(\"expected server name list which should be in the sample app response: {0} before scale\",\n+        expectedServerNamesInAppResponse);\n+\n+    if (replicasBeforeScale <= numberOfServers) {\n+\n+      // check that NGINX can access the sample apps from the original managed servers in the domain\n+      logger.info(\"Check that NGINX can access the sample app from the original managed servers in the domain \"\n+                  + \"while the domain is scaling up.\");\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"Verify NGINX can access the sample app from the original managed servers in the domain\")\n+          .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n+          .isTrue();\n+\n+      // check new managed server pods are created and wait for them to be ready\n+      for (int i = replicasBeforeScale + 1; i <= numberOfServers; i++) {\n+        String manageServerPodName = manageServerPodNamePrefix + i;\n+\n+        // check new managed server pods are created\n+        logger.info(\"Check for the new managed server pod {0} is created in namespace {1}\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzMTAyMA=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 340}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDAwNTkwOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDozNjowMlrOGS3J3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNDo0NjozM1rOGS7mfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzMTE5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.info(\"Wait for the new managed server pod {0} to be ready in namespace {1}\",\n          \n          \n            \n                    logger.info(\"Checking whether the new managed server pod {0} is ready in namespace {1}\",", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422431197", "createdAt": "2020-05-09T00:36:02Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled\n+   * @param domainNamespace the domain namespace the domain resides\n+   * @param clusterName the WebLogic cluster name in the domain to be scaled\n+   * @param replicasBeforeScale the replicas of the WebLogic cluster before the scale\n+   * @param numberOfServers the number of servers to be scaled to\n+   * @return the replicas of the WebLogic cluster after the scale\n+   */\n+  private int scaleAndVerifyDomain(String domainUid,\n+                                   String domainNamespace,\n+                                   String clusterName,\n+                                   int replicasBeforeScale,\n+                                   int numberOfServers) {\n+\n+    String manageServerPodNamePrefix = domainUid + \"-\" + clusterName + \"-managed-server\";\n+\n+    // scale the cluster in the domain\n+    assertThat(assertDoesNotThrow(() -> scaleDomain(domainUid, domainNamespace, clusterName, numberOfServers)))\n+        .as(String.format(\"Verify scale the cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .withFailMessage(String.format(\"can not scale cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .isTrue();\n+\n+    // generate a curl command to ping the sample app through the ingress controller\n+    curlCmd = generateCurlCmd(clusterName);\n+\n+    // generate the expected server list which should be in the sample app response string\n+    List<String> expectedServerNamesInAppResponse =\n+        generateExpectedServerNamesInAppResponse(clusterName, replicasBeforeScale);\n+    logger.info(\"expected server name list which should be in the sample app response: {0} before scale\",\n+        expectedServerNamesInAppResponse);\n+\n+    if (replicasBeforeScale <= numberOfServers) {\n+\n+      // check that NGINX can access the sample apps from the original managed servers in the domain\n+      logger.info(\"Check that NGINX can access the sample app from the original managed servers in the domain \"\n+                  + \"while the domain is scaling up.\");\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"Verify NGINX can access the sample app from the original managed servers in the domain\")\n+          .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n+          .isTrue();\n+\n+      // check new managed server pods are created and wait for them to be ready\n+      for (int i = replicasBeforeScale + 1; i <= numberOfServers; i++) {\n+        String manageServerPodName = manageServerPodNamePrefix + i;\n+\n+        // check new managed server pods are created\n+        logger.info(\"Check for the new managed server pod {0} is created in namespace {1}\",\n+            manageServerPodName, domainNamespace);\n+        checkPodCreated(manageServerPodName);\n+\n+        // check new managed server pods are ready\n+        logger.info(\"Wait for the new managed server pod {0} to be ready in namespace {1}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 345}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwNDA2Mw==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422504063", "createdAt": "2020-05-09T14:46:33Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled\n+   * @param domainNamespace the domain namespace the domain resides\n+   * @param clusterName the WebLogic cluster name in the domain to be scaled\n+   * @param replicasBeforeScale the replicas of the WebLogic cluster before the scale\n+   * @param numberOfServers the number of servers to be scaled to\n+   * @return the replicas of the WebLogic cluster after the scale\n+   */\n+  private int scaleAndVerifyDomain(String domainUid,\n+                                   String domainNamespace,\n+                                   String clusterName,\n+                                   int replicasBeforeScale,\n+                                   int numberOfServers) {\n+\n+    String manageServerPodNamePrefix = domainUid + \"-\" + clusterName + \"-managed-server\";\n+\n+    // scale the cluster in the domain\n+    assertThat(assertDoesNotThrow(() -> scaleDomain(domainUid, domainNamespace, clusterName, numberOfServers)))\n+        .as(String.format(\"Verify scale the cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .withFailMessage(String.format(\"can not scale cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .isTrue();\n+\n+    // generate a curl command to ping the sample app through the ingress controller\n+    curlCmd = generateCurlCmd(clusterName);\n+\n+    // generate the expected server list which should be in the sample app response string\n+    List<String> expectedServerNamesInAppResponse =\n+        generateExpectedServerNamesInAppResponse(clusterName, replicasBeforeScale);\n+    logger.info(\"expected server name list which should be in the sample app response: {0} before scale\",\n+        expectedServerNamesInAppResponse);\n+\n+    if (replicasBeforeScale <= numberOfServers) {\n+\n+      // check that NGINX can access the sample apps from the original managed servers in the domain\n+      logger.info(\"Check that NGINX can access the sample app from the original managed servers in the domain \"\n+                  + \"while the domain is scaling up.\");\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"Verify NGINX can access the sample app from the original managed servers in the domain\")\n+          .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n+          .isTrue();\n+\n+      // check new managed server pods are created and wait for them to be ready\n+      for (int i = replicasBeforeScale + 1; i <= numberOfServers; i++) {\n+        String manageServerPodName = manageServerPodNamePrefix + i;\n+\n+        // check new managed server pods are created\n+        logger.info(\"Check for the new managed server pod {0} is created in namespace {1}\",\n+            manageServerPodName, domainNamespace);\n+        checkPodCreated(manageServerPodName);\n+\n+        // check new managed server pods are ready\n+        logger.info(\"Wait for the new managed server pod {0} to be ready in namespace {1}\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzMTE5Nw=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 345}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDAwNjQ5OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDozNjoyNVrOGS3KIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNDo0Njo0NFrOGS7mkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzMTI2Ng==", "bodyText": "same as above comment", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422431266", "createdAt": "2020-05-09T00:36:25Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled\n+   * @param domainNamespace the domain namespace the domain resides\n+   * @param clusterName the WebLogic cluster name in the domain to be scaled\n+   * @param replicasBeforeScale the replicas of the WebLogic cluster before the scale\n+   * @param numberOfServers the number of servers to be scaled to\n+   * @return the replicas of the WebLogic cluster after the scale\n+   */\n+  private int scaleAndVerifyDomain(String domainUid,\n+                                   String domainNamespace,\n+                                   String clusterName,\n+                                   int replicasBeforeScale,\n+                                   int numberOfServers) {\n+\n+    String manageServerPodNamePrefix = domainUid + \"-\" + clusterName + \"-managed-server\";\n+\n+    // scale the cluster in the domain\n+    assertThat(assertDoesNotThrow(() -> scaleDomain(domainUid, domainNamespace, clusterName, numberOfServers)))\n+        .as(String.format(\"Verify scale the cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .withFailMessage(String.format(\"can not scale cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .isTrue();\n+\n+    // generate a curl command to ping the sample app through the ingress controller\n+    curlCmd = generateCurlCmd(clusterName);\n+\n+    // generate the expected server list which should be in the sample app response string\n+    List<String> expectedServerNamesInAppResponse =\n+        generateExpectedServerNamesInAppResponse(clusterName, replicasBeforeScale);\n+    logger.info(\"expected server name list which should be in the sample app response: {0} before scale\",\n+        expectedServerNamesInAppResponse);\n+\n+    if (replicasBeforeScale <= numberOfServers) {\n+\n+      // check that NGINX can access the sample apps from the original managed servers in the domain\n+      logger.info(\"Check that NGINX can access the sample app from the original managed servers in the domain \"\n+                  + \"while the domain is scaling up.\");\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"Verify NGINX can access the sample app from the original managed servers in the domain\")\n+          .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n+          .isTrue();\n+\n+      // check new managed server pods are created and wait for them to be ready\n+      for (int i = replicasBeforeScale + 1; i <= numberOfServers; i++) {\n+        String manageServerPodName = manageServerPodNamePrefix + i;\n+\n+        // check new managed server pods are created\n+        logger.info(\"Check for the new managed server pod {0} is created in namespace {1}\",\n+            manageServerPodName, domainNamespace);\n+        checkPodCreated(manageServerPodName);\n+\n+        // check new managed server pods are ready\n+        logger.info(\"Wait for the new managed server pod {0} to be ready in namespace {1}\",\n+            manageServerPodName, domainNamespace);\n+        checkPodReady(manageServerPodName);\n+\n+        // check new managed server services are created\n+        logger.info(\"Check for the new managed server service {0} is created in namespace {1}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 350}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwNDA4Mg==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422504082", "createdAt": "2020-05-09T14:46:44Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled\n+   * @param domainNamespace the domain namespace the domain resides\n+   * @param clusterName the WebLogic cluster name in the domain to be scaled\n+   * @param replicasBeforeScale the replicas of the WebLogic cluster before the scale\n+   * @param numberOfServers the number of servers to be scaled to\n+   * @return the replicas of the WebLogic cluster after the scale\n+   */\n+  private int scaleAndVerifyDomain(String domainUid,\n+                                   String domainNamespace,\n+                                   String clusterName,\n+                                   int replicasBeforeScale,\n+                                   int numberOfServers) {\n+\n+    String manageServerPodNamePrefix = domainUid + \"-\" + clusterName + \"-managed-server\";\n+\n+    // scale the cluster in the domain\n+    assertThat(assertDoesNotThrow(() -> scaleDomain(domainUid, domainNamespace, clusterName, numberOfServers)))\n+        .as(String.format(\"Verify scale the cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .withFailMessage(String.format(\"can not scale cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .isTrue();\n+\n+    // generate a curl command to ping the sample app through the ingress controller\n+    curlCmd = generateCurlCmd(clusterName);\n+\n+    // generate the expected server list which should be in the sample app response string\n+    List<String> expectedServerNamesInAppResponse =\n+        generateExpectedServerNamesInAppResponse(clusterName, replicasBeforeScale);\n+    logger.info(\"expected server name list which should be in the sample app response: {0} before scale\",\n+        expectedServerNamesInAppResponse);\n+\n+    if (replicasBeforeScale <= numberOfServers) {\n+\n+      // check that NGINX can access the sample apps from the original managed servers in the domain\n+      logger.info(\"Check that NGINX can access the sample app from the original managed servers in the domain \"\n+                  + \"while the domain is scaling up.\");\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"Verify NGINX can access the sample app from the original managed servers in the domain\")\n+          .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n+          .isTrue();\n+\n+      // check new managed server pods are created and wait for them to be ready\n+      for (int i = replicasBeforeScale + 1; i <= numberOfServers; i++) {\n+        String manageServerPodName = manageServerPodNamePrefix + i;\n+\n+        // check new managed server pods are created\n+        logger.info(\"Check for the new managed server pod {0} is created in namespace {1}\",\n+            manageServerPodName, domainNamespace);\n+        checkPodCreated(manageServerPodName);\n+\n+        // check new managed server pods are ready\n+        logger.info(\"Wait for the new managed server pod {0} to be ready in namespace {1}\",\n+            manageServerPodName, domainNamespace);\n+        checkPodReady(manageServerPodName);\n+\n+        // check new managed server services are created\n+        logger.info(\"Check for the new managed server service {0} is created in namespace {1}\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzMTI2Ng=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 350}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDAwNzI3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDozNzowN1rOGS3Klg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxNDo0Njo1M1rOGS7mmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzMTM4Mg==", "bodyText": "please see my similar comment above", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422431382", "createdAt": "2020-05-09T00:37:07Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled\n+   * @param domainNamespace the domain namespace the domain resides\n+   * @param clusterName the WebLogic cluster name in the domain to be scaled\n+   * @param replicasBeforeScale the replicas of the WebLogic cluster before the scale\n+   * @param numberOfServers the number of servers to be scaled to\n+   * @return the replicas of the WebLogic cluster after the scale\n+   */\n+  private int scaleAndVerifyDomain(String domainUid,\n+                                   String domainNamespace,\n+                                   String clusterName,\n+                                   int replicasBeforeScale,\n+                                   int numberOfServers) {\n+\n+    String manageServerPodNamePrefix = domainUid + \"-\" + clusterName + \"-managed-server\";\n+\n+    // scale the cluster in the domain\n+    assertThat(assertDoesNotThrow(() -> scaleDomain(domainUid, domainNamespace, clusterName, numberOfServers)))\n+        .as(String.format(\"Verify scale the cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .withFailMessage(String.format(\"can not scale cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .isTrue();\n+\n+    // generate a curl command to ping the sample app through the ingress controller\n+    curlCmd = generateCurlCmd(clusterName);\n+\n+    // generate the expected server list which should be in the sample app response string\n+    List<String> expectedServerNamesInAppResponse =\n+        generateExpectedServerNamesInAppResponse(clusterName, replicasBeforeScale);\n+    logger.info(\"expected server name list which should be in the sample app response: {0} before scale\",\n+        expectedServerNamesInAppResponse);\n+\n+    if (replicasBeforeScale <= numberOfServers) {\n+\n+      // check that NGINX can access the sample apps from the original managed servers in the domain\n+      logger.info(\"Check that NGINX can access the sample app from the original managed servers in the domain \"\n+                  + \"while the domain is scaling up.\");\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"Verify NGINX can access the sample app from the original managed servers in the domain\")\n+          .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n+          .isTrue();\n+\n+      // check new managed server pods are created and wait for them to be ready\n+      for (int i = replicasBeforeScale + 1; i <= numberOfServers; i++) {\n+        String manageServerPodName = manageServerPodNamePrefix + i;\n+\n+        // check new managed server pods are created\n+        logger.info(\"Check for the new managed server pod {0} is created in namespace {1}\",\n+            manageServerPodName, domainNamespace);\n+        checkPodCreated(manageServerPodName);\n+\n+        // check new managed server pods are ready\n+        logger.info(\"Wait for the new managed server pod {0} to be ready in namespace {1}\",\n+            manageServerPodName, domainNamespace);\n+        checkPodReady(manageServerPodName);\n+\n+        // check new managed server services are created\n+        logger.info(\"Check for the new managed server service {0} is created in namespace {1}\",\n+            manageServerPodName, domainNamespace);\n+        checkServiceCreated(manageServerPodName);\n+\n+        // add the new managed server to the list\n+        expectedServerNamesInAppResponse.add(clusterName + \"-managed-server\" + i);\n+\n+      }\n+\n+      // check that NGINX can access the sample apps from new and original managed servers\n+      logger.info(\"Check that NGINX can access the sample app from the new and original managed servers \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 360}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjUwNDA5MA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422504090", "createdAt": "2020-05-09T14:46:53Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled\n+   * @param domainNamespace the domain namespace the domain resides\n+   * @param clusterName the WebLogic cluster name in the domain to be scaled\n+   * @param replicasBeforeScale the replicas of the WebLogic cluster before the scale\n+   * @param numberOfServers the number of servers to be scaled to\n+   * @return the replicas of the WebLogic cluster after the scale\n+   */\n+  private int scaleAndVerifyDomain(String domainUid,\n+                                   String domainNamespace,\n+                                   String clusterName,\n+                                   int replicasBeforeScale,\n+                                   int numberOfServers) {\n+\n+    String manageServerPodNamePrefix = domainUid + \"-\" + clusterName + \"-managed-server\";\n+\n+    // scale the cluster in the domain\n+    assertThat(assertDoesNotThrow(() -> scaleDomain(domainUid, domainNamespace, clusterName, numberOfServers)))\n+        .as(String.format(\"Verify scale the cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .withFailMessage(String.format(\"can not scale cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .isTrue();\n+\n+    // generate a curl command to ping the sample app through the ingress controller\n+    curlCmd = generateCurlCmd(clusterName);\n+\n+    // generate the expected server list which should be in the sample app response string\n+    List<String> expectedServerNamesInAppResponse =\n+        generateExpectedServerNamesInAppResponse(clusterName, replicasBeforeScale);\n+    logger.info(\"expected server name list which should be in the sample app response: {0} before scale\",\n+        expectedServerNamesInAppResponse);\n+\n+    if (replicasBeforeScale <= numberOfServers) {\n+\n+      // check that NGINX can access the sample apps from the original managed servers in the domain\n+      logger.info(\"Check that NGINX can access the sample app from the original managed servers in the domain \"\n+                  + \"while the domain is scaling up.\");\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"Verify NGINX can access the sample app from the original managed servers in the domain\")\n+          .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n+          .isTrue();\n+\n+      // check new managed server pods are created and wait for them to be ready\n+      for (int i = replicasBeforeScale + 1; i <= numberOfServers; i++) {\n+        String manageServerPodName = manageServerPodNamePrefix + i;\n+\n+        // check new managed server pods are created\n+        logger.info(\"Check for the new managed server pod {0} is created in namespace {1}\",\n+            manageServerPodName, domainNamespace);\n+        checkPodCreated(manageServerPodName);\n+\n+        // check new managed server pods are ready\n+        logger.info(\"Wait for the new managed server pod {0} to be ready in namespace {1}\",\n+            manageServerPodName, domainNamespace);\n+        checkPodReady(manageServerPodName);\n+\n+        // check new managed server services are created\n+        logger.info(\"Check for the new managed server service {0} is created in namespace {1}\",\n+            manageServerPodName, domainNamespace);\n+        checkServiceCreated(manageServerPodName);\n+\n+        // add the new managed server to the list\n+        expectedServerNamesInAppResponse.add(clusterName + \"-managed-server\" + i);\n+\n+      }\n+\n+      // check that NGINX can access the sample apps from new and original managed servers\n+      logger.info(\"Check that NGINX can access the sample app from the new and original managed servers \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzMTM4Mg=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 360}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDAwNzk5OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDozNzo0M1rOGS3K_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNTo1NzoyMlrOGS4uBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzMTQ4Ng==", "bodyText": "this need to be fixed as well.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422431486", "createdAt": "2020-05-09T00:37:43Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled\n+   * @param domainNamespace the domain namespace the domain resides\n+   * @param clusterName the WebLogic cluster name in the domain to be scaled\n+   * @param replicasBeforeScale the replicas of the WebLogic cluster before the scale\n+   * @param numberOfServers the number of servers to be scaled to\n+   * @return the replicas of the WebLogic cluster after the scale\n+   */\n+  private int scaleAndVerifyDomain(String domainUid,\n+                                   String domainNamespace,\n+                                   String clusterName,\n+                                   int replicasBeforeScale,\n+                                   int numberOfServers) {\n+\n+    String manageServerPodNamePrefix = domainUid + \"-\" + clusterName + \"-managed-server\";\n+\n+    // scale the cluster in the domain\n+    assertThat(assertDoesNotThrow(() -> scaleDomain(domainUid, domainNamespace, clusterName, numberOfServers)))\n+        .as(String.format(\"Verify scale the cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .withFailMessage(String.format(\"can not scale cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .isTrue();\n+\n+    // generate a curl command to ping the sample app through the ingress controller\n+    curlCmd = generateCurlCmd(clusterName);\n+\n+    // generate the expected server list which should be in the sample app response string\n+    List<String> expectedServerNamesInAppResponse =\n+        generateExpectedServerNamesInAppResponse(clusterName, replicasBeforeScale);\n+    logger.info(\"expected server name list which should be in the sample app response: {0} before scale\",\n+        expectedServerNamesInAppResponse);\n+\n+    if (replicasBeforeScale <= numberOfServers) {\n+\n+      // check that NGINX can access the sample apps from the original managed servers in the domain\n+      logger.info(\"Check that NGINX can access the sample app from the original managed servers in the domain \"\n+                  + \"while the domain is scaling up.\");\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"Verify NGINX can access the sample app from the original managed servers in the domain\")\n+          .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n+          .isTrue();\n+\n+      // check new managed server pods are created and wait for them to be ready\n+      for (int i = replicasBeforeScale + 1; i <= numberOfServers; i++) {\n+        String manageServerPodName = manageServerPodNamePrefix + i;\n+\n+        // check new managed server pods are created\n+        logger.info(\"Check for the new managed server pod {0} is created in namespace {1}\",\n+            manageServerPodName, domainNamespace);\n+        checkPodCreated(manageServerPodName);\n+\n+        // check new managed server pods are ready\n+        logger.info(\"Wait for the new managed server pod {0} to be ready in namespace {1}\",\n+            manageServerPodName, domainNamespace);\n+        checkPodReady(manageServerPodName);\n+\n+        // check new managed server services are created\n+        logger.info(\"Check for the new managed server service {0} is created in namespace {1}\",\n+            manageServerPodName, domainNamespace);\n+        checkServiceCreated(manageServerPodName);\n+\n+        // add the new managed server to the list\n+        expectedServerNamesInAppResponse.add(clusterName + \"-managed-server\" + i);\n+\n+      }\n+\n+      // check that NGINX can access the sample apps from new and original managed servers\n+      logger.info(\"Check that NGINX can access the sample app from the new and original managed servers \"\n+          + \"in the domain after the domain is scaled up.\");\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"Check NGINX can access the sample app from all managed servers in the domain\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 363}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1NjgzOQ==", "bodyText": ".as() message is not for a successful assertion.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422456839", "createdAt": "2020-05-09T05:57:22Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled\n+   * @param domainNamespace the domain namespace the domain resides\n+   * @param clusterName the WebLogic cluster name in the domain to be scaled\n+   * @param replicasBeforeScale the replicas of the WebLogic cluster before the scale\n+   * @param numberOfServers the number of servers to be scaled to\n+   * @return the replicas of the WebLogic cluster after the scale\n+   */\n+  private int scaleAndVerifyDomain(String domainUid,\n+                                   String domainNamespace,\n+                                   String clusterName,\n+                                   int replicasBeforeScale,\n+                                   int numberOfServers) {\n+\n+    String manageServerPodNamePrefix = domainUid + \"-\" + clusterName + \"-managed-server\";\n+\n+    // scale the cluster in the domain\n+    assertThat(assertDoesNotThrow(() -> scaleDomain(domainUid, domainNamespace, clusterName, numberOfServers)))\n+        .as(String.format(\"Verify scale the cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .withFailMessage(String.format(\"can not scale cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .isTrue();\n+\n+    // generate a curl command to ping the sample app through the ingress controller\n+    curlCmd = generateCurlCmd(clusterName);\n+\n+    // generate the expected server list which should be in the sample app response string\n+    List<String> expectedServerNamesInAppResponse =\n+        generateExpectedServerNamesInAppResponse(clusterName, replicasBeforeScale);\n+    logger.info(\"expected server name list which should be in the sample app response: {0} before scale\",\n+        expectedServerNamesInAppResponse);\n+\n+    if (replicasBeforeScale <= numberOfServers) {\n+\n+      // check that NGINX can access the sample apps from the original managed servers in the domain\n+      logger.info(\"Check that NGINX can access the sample app from the original managed servers in the domain \"\n+                  + \"while the domain is scaling up.\");\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"Verify NGINX can access the sample app from the original managed servers in the domain\")\n+          .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n+          .isTrue();\n+\n+      // check new managed server pods are created and wait for them to be ready\n+      for (int i = replicasBeforeScale + 1; i <= numberOfServers; i++) {\n+        String manageServerPodName = manageServerPodNamePrefix + i;\n+\n+        // check new managed server pods are created\n+        logger.info(\"Check for the new managed server pod {0} is created in namespace {1}\",\n+            manageServerPodName, domainNamespace);\n+        checkPodCreated(manageServerPodName);\n+\n+        // check new managed server pods are ready\n+        logger.info(\"Wait for the new managed server pod {0} to be ready in namespace {1}\",\n+            manageServerPodName, domainNamespace);\n+        checkPodReady(manageServerPodName);\n+\n+        // check new managed server services are created\n+        logger.info(\"Check for the new managed server service {0} is created in namespace {1}\",\n+            manageServerPodName, domainNamespace);\n+        checkServiceCreated(manageServerPodName);\n+\n+        // add the new managed server to the list\n+        expectedServerNamesInAppResponse.add(clusterName + \"-managed-server\" + i);\n+\n+      }\n+\n+      // check that NGINX can access the sample apps from new and original managed servers\n+      logger.info(\"Check that NGINX can access the sample app from the new and original managed servers \"\n+          + \"in the domain after the domain is scaled up.\");\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"Check NGINX can access the sample app from all managed servers in the domain\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzMTQ4Ng=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 363}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDAxMTQ5OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDo0MDowN1rOGS3MvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNTo1MDo1N1rOGTiZyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzMTkzMg==", "bodyText": "what will happen if replicasBeforeScale and numberOfServers are same?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422431932", "createdAt": "2020-05-09T00:40:07Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled\n+   * @param domainNamespace the domain namespace the domain resides\n+   * @param clusterName the WebLogic cluster name in the domain to be scaled\n+   * @param replicasBeforeScale the replicas of the WebLogic cluster before the scale\n+   * @param numberOfServers the number of servers to be scaled to\n+   * @return the replicas of the WebLogic cluster after the scale\n+   */\n+  private int scaleAndVerifyDomain(String domainUid,\n+                                   String domainNamespace,\n+                                   String clusterName,\n+                                   int replicasBeforeScale,\n+                                   int numberOfServers) {\n+\n+    String manageServerPodNamePrefix = domainUid + \"-\" + clusterName + \"-managed-server\";\n+\n+    // scale the cluster in the domain\n+    assertThat(assertDoesNotThrow(() -> scaleDomain(domainUid, domainNamespace, clusterName, numberOfServers)))\n+        .as(String.format(\"Verify scale the cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .withFailMessage(String.format(\"can not scale cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .isTrue();\n+\n+    // generate a curl command to ping the sample app through the ingress controller\n+    curlCmd = generateCurlCmd(clusterName);\n+\n+    // generate the expected server list which should be in the sample app response string\n+    List<String> expectedServerNamesInAppResponse =\n+        generateExpectedServerNamesInAppResponse(clusterName, replicasBeforeScale);\n+    logger.info(\"expected server name list which should be in the sample app response: {0} before scale\",\n+        expectedServerNamesInAppResponse);\n+\n+    if (replicasBeforeScale <= numberOfServers) {\n+\n+      // check that NGINX can access the sample apps from the original managed servers in the domain\n+      logger.info(\"Check that NGINX can access the sample app from the original managed servers in the domain \"\n+                  + \"while the domain is scaling up.\");\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"Verify NGINX can access the sample app from the original managed servers in the domain\")\n+          .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n+          .isTrue();\n+\n+      // check new managed server pods are created and wait for them to be ready\n+      for (int i = replicasBeforeScale + 1; i <= numberOfServers; i++) {\n+        String manageServerPodName = manageServerPodNamePrefix + i;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 337}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1Njk0MA==", "bodyText": "numberOfServers will be the the server number after the scale. Changed the name to replicasAfterScale.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422456940", "createdAt": "2020-05-09T05:58:14Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled\n+   * @param domainNamespace the domain namespace the domain resides\n+   * @param clusterName the WebLogic cluster name in the domain to be scaled\n+   * @param replicasBeforeScale the replicas of the WebLogic cluster before the scale\n+   * @param numberOfServers the number of servers to be scaled to\n+   * @return the replicas of the WebLogic cluster after the scale\n+   */\n+  private int scaleAndVerifyDomain(String domainUid,\n+                                   String domainNamespace,\n+                                   String clusterName,\n+                                   int replicasBeforeScale,\n+                                   int numberOfServers) {\n+\n+    String manageServerPodNamePrefix = domainUid + \"-\" + clusterName + \"-managed-server\";\n+\n+    // scale the cluster in the domain\n+    assertThat(assertDoesNotThrow(() -> scaleDomain(domainUid, domainNamespace, clusterName, numberOfServers)))\n+        .as(String.format(\"Verify scale the cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .withFailMessage(String.format(\"can not scale cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .isTrue();\n+\n+    // generate a curl command to ping the sample app through the ingress controller\n+    curlCmd = generateCurlCmd(clusterName);\n+\n+    // generate the expected server list which should be in the sample app response string\n+    List<String> expectedServerNamesInAppResponse =\n+        generateExpectedServerNamesInAppResponse(clusterName, replicasBeforeScale);\n+    logger.info(\"expected server name list which should be in the sample app response: {0} before scale\",\n+        expectedServerNamesInAppResponse);\n+\n+    if (replicasBeforeScale <= numberOfServers) {\n+\n+      // check that NGINX can access the sample apps from the original managed servers in the domain\n+      logger.info(\"Check that NGINX can access the sample app from the original managed servers in the domain \"\n+                  + \"while the domain is scaling up.\");\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"Verify NGINX can access the sample app from the original managed servers in the domain\")\n+          .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n+          .isTrue();\n+\n+      // check new managed server pods are created and wait for them to be ready\n+      for (int i = replicasBeforeScale + 1; i <= numberOfServers; i++) {\n+        String manageServerPodName = manageServerPodNamePrefix + i;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzMTkzMg=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 337}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcxNTQ1Nw==", "bodyText": "no, my question is if replicasBeforeScale == replicasAfterScale\nthen\nString manageServerPodName = manageServerPodNamePrefix + i;\nwon't exist isn't?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422715457", "createdAt": "2020-05-10T23:22:09Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled\n+   * @param domainNamespace the domain namespace the domain resides\n+   * @param clusterName the WebLogic cluster name in the domain to be scaled\n+   * @param replicasBeforeScale the replicas of the WebLogic cluster before the scale\n+   * @param numberOfServers the number of servers to be scaled to\n+   * @return the replicas of the WebLogic cluster after the scale\n+   */\n+  private int scaleAndVerifyDomain(String domainUid,\n+                                   String domainNamespace,\n+                                   String clusterName,\n+                                   int replicasBeforeScale,\n+                                   int numberOfServers) {\n+\n+    String manageServerPodNamePrefix = domainUid + \"-\" + clusterName + \"-managed-server\";\n+\n+    // scale the cluster in the domain\n+    assertThat(assertDoesNotThrow(() -> scaleDomain(domainUid, domainNamespace, clusterName, numberOfServers)))\n+        .as(String.format(\"Verify scale the cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .withFailMessage(String.format(\"can not scale cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .isTrue();\n+\n+    // generate a curl command to ping the sample app through the ingress controller\n+    curlCmd = generateCurlCmd(clusterName);\n+\n+    // generate the expected server list which should be in the sample app response string\n+    List<String> expectedServerNamesInAppResponse =\n+        generateExpectedServerNamesInAppResponse(clusterName, replicasBeforeScale);\n+    logger.info(\"expected server name list which should be in the sample app response: {0} before scale\",\n+        expectedServerNamesInAppResponse);\n+\n+    if (replicasBeforeScale <= numberOfServers) {\n+\n+      // check that NGINX can access the sample apps from the original managed servers in the domain\n+      logger.info(\"Check that NGINX can access the sample app from the original managed servers in the domain \"\n+                  + \"while the domain is scaling up.\");\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"Verify NGINX can access the sample app from the original managed servers in the domain\")\n+          .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n+          .isTrue();\n+\n+      // check new managed server pods are created and wait for them to be ready\n+      for (int i = replicasBeforeScale + 1; i <= numberOfServers; i++) {\n+        String manageServerPodName = manageServerPodNamePrefix + i;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzMTkzMg=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 337}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEzOTc4Ng==", "bodyText": "if replicasBeforeScale == replicasAfterScale, it will not go through this for loop.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r423139786", "createdAt": "2020-05-11T15:50:57Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -628,4 +673,149 @@ private void checkServiceCreated(String serviceName) {\n \n   }\n \n+  /**\n+   * Check pod does not exist.\n+   *\n+   * @param podName pod name to check\n+   */\n+  private void checkPodDoesNotExist(String podName) {\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pod {0} to be removed in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                podName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, domainNamespace),\n+            String.format(\"Pod %s still exists in namespace %s\", podName, domainNamespace)));\n+  }\n+\n+  /** Scale the WebLogic cluster of the domain to numberOfServers in the specified domain namespace.\n+   *  Verify the pods are created or deleted depending on the numberOfServers. Also verify\n+   *  NGINX can access the sample apps to all the servers after the scale operation.\n+   *\n+   * @param domainUid the domain with domainUid which will be scaled\n+   * @param domainNamespace the domain namespace the domain resides\n+   * @param clusterName the WebLogic cluster name in the domain to be scaled\n+   * @param replicasBeforeScale the replicas of the WebLogic cluster before the scale\n+   * @param numberOfServers the number of servers to be scaled to\n+   * @return the replicas of the WebLogic cluster after the scale\n+   */\n+  private int scaleAndVerifyDomain(String domainUid,\n+                                   String domainNamespace,\n+                                   String clusterName,\n+                                   int replicasBeforeScale,\n+                                   int numberOfServers) {\n+\n+    String manageServerPodNamePrefix = domainUid + \"-\" + clusterName + \"-managed-server\";\n+\n+    // scale the cluster in the domain\n+    assertThat(assertDoesNotThrow(() -> scaleDomain(domainUid, domainNamespace, clusterName, numberOfServers)))\n+        .as(String.format(\"Verify scale the cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .withFailMessage(String.format(\"can not scale cluster %s of domain %s in namespace %s\",\n+            clusterName, domainUid, domainNamespace))\n+        .isTrue();\n+\n+    // generate a curl command to ping the sample app through the ingress controller\n+    curlCmd = generateCurlCmd(clusterName);\n+\n+    // generate the expected server list which should be in the sample app response string\n+    List<String> expectedServerNamesInAppResponse =\n+        generateExpectedServerNamesInAppResponse(clusterName, replicasBeforeScale);\n+    logger.info(\"expected server name list which should be in the sample app response: {0} before scale\",\n+        expectedServerNamesInAppResponse);\n+\n+    if (replicasBeforeScale <= numberOfServers) {\n+\n+      // check that NGINX can access the sample apps from the original managed servers in the domain\n+      logger.info(\"Check that NGINX can access the sample app from the original managed servers in the domain \"\n+                  + \"while the domain is scaling up.\");\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, expectedServerNamesInAppResponse, 50))\n+          .as(\"Verify NGINX can access the sample app from the original managed servers in the domain\")\n+          .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n+          .isTrue();\n+\n+      // check new managed server pods are created and wait for them to be ready\n+      for (int i = replicasBeforeScale + 1; i <= numberOfServers; i++) {\n+        String manageServerPodName = manageServerPodNamePrefix + i;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzMTkzMg=="}, "originalCommit": {"oid": "35c875933e97df8c643dbc6d314d70f8b61430ee"}, "originalPosition": 337}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjE2NjMzOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/resources/wdt-models/model4-nginx-validation-wls.yaml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQyMTowMDozOFrOGTHi9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzozNDoxM1rOGTmYRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY5OTc2NQ==", "bodyText": "change file name to model-multiclusterdomain-sampleapp-wls.yaml? This model can be used for other tests if needed..", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422699765", "createdAt": "2020-05-10T21:00:38Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/resources/wdt-models/model4-nginx-validation-wls.yaml", "diffHunk": "@@ -0,0 +1,43 @@\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1451fa04dcceb8a5403026bd9bc53f47167d5d2"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIwNDkzNQ==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r423204935", "createdAt": "2020-05-11T17:34:13Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/resources/wdt-models/model4-nginx-validation-wls.yaml", "diffHunk": "@@ -0,0 +1,43 @@\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY5OTc2NQ=="}, "originalCommit": {"oid": "c1451fa04dcceb8a5403026bd9bc53f47167d5d2"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjE4NjgzOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQyMToyMzowN1rOGTHs9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzozNDoxOVrOGTmYeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcwMjMyNA==", "bodyText": "can you move this method to domain actions section", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422702324", "createdAt": "2020-05-10T21:23:07Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -68,15 +68,17 @@ public static boolean upgradeOperator(OperatorParams params) {\n   }\n \n   /**\n-   * Makes a REST call to the Operator to scale the domain.\n+   * Scale the cluster of the domain in the specified namespace .\n    *\n-   * @param domainUid domainUid of the domain\n-   * @param clusterName cluster in the domain to scale\n-   * @param numOfServers number of servers to scale upto.\n+   * @param domainUid domainUid of the domain to be scaled\n+   * @param clusterName cluster in the domain to be scaled\n+   * @param numOfServers number of servers to be scaled to.\n    * @return true on success, false otherwise\n+   * @throws ApiException if Kubernetes client API call fails\n    */\n-  public static boolean scaleDomain(String domainUid, String clusterName, int numOfServers) {\n-    return Operator.scaleDomain(domainUid, clusterName, numOfServers);\n+  public static boolean scaleCluster(String domainUid, String namespace, String clusterName, int numOfServers)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1451fa04dcceb8a5403026bd9bc53f47167d5d2"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIwNDk4NA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r423204984", "createdAt": "2020-05-11T17:34:19Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -68,15 +68,17 @@ public static boolean upgradeOperator(OperatorParams params) {\n   }\n \n   /**\n-   * Makes a REST call to the Operator to scale the domain.\n+   * Scale the cluster of the domain in the specified namespace .\n    *\n-   * @param domainUid domainUid of the domain\n-   * @param clusterName cluster in the domain to scale\n-   * @param numOfServers number of servers to scale upto.\n+   * @param domainUid domainUid of the domain to be scaled\n+   * @param clusterName cluster in the domain to be scaled\n+   * @param numOfServers number of servers to be scaled to.\n    * @return true on success, false otherwise\n+   * @throws ApiException if Kubernetes client API call fails\n    */\n-  public static boolean scaleDomain(String domainUid, String clusterName, int numOfServers) {\n-    return Operator.scaleDomain(domainUid, clusterName, numOfServers);\n+  public static boolean scaleCluster(String domainUid, String namespace, String clusterName, int numOfServers)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcwMjMyNA=="}, "originalCommit": {"oid": "c1451fa04dcceb8a5403026bd9bc53f47167d5d2"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjE5NjEyOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQyMTozMzoyOVrOGTHxew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzozNDoyN1rOGTmYvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcwMzQ4Mw==", "bodyText": "In case of scale up, verify the state of the existing servers has not changed.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r422703483", "createdAt": "2020-05-10T21:33:29Z", "author": {"login": "vanajamukkara"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -288,81 +299,114 @@ public void testCreateMiiDomain() {\n                 condition.getRemainingTimeInMS()))\n         .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n \n-    // check admin server pod exist\n-    logger.info(\"Check for admin server pod {0} existence in namespace {1}\",\n+    // check admin server pod was created\n+    logger.info(\"Checking that admin server pod {0} was created in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkPodCreated(adminServerPodName);\n \n-    // check managed server pods exists\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodCreated(managedServerPrefix + i);\n-    }\n-\n     // check admin server pod is ready\n-    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+    logger.info(\"Checking that admin server pod {0} is ready in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkPodReady(adminServerPodName);\n \n-    // check managed server pods are ready\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodReady(managedServerPrefix + i);\n-    }\n-\n-    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+    // check admin service is created\n+    logger.info(\"Checking that admin service {0} was created in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkServiceCreated(adminServerPodName);\n \n-    // check managed server services created\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkServiceCreated(managedServerPrefix + i);\n+    // check the readiness for the managed servers in each cluster\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+      for (int j = 1; j <= replicaCount; j++) {\n+        String managedServerPodName =\n+            domainUid + \"-\" + CLUSTER_NAME_PREFIX + i + managedServerNameBase + j;\n+\n+        // check managed server pod was created\n+        logger.info(\"Checking that managed server pod {0} was created in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkPodCreated(managedServerPodName);\n+\n+        // check managed server pod is ready\n+        logger.info(\"Checking that managed server pod {0} is ready in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkPodReady(managedServerPodName);\n+\n+        // check managed server service was created\n+        logger.info(\"Checking that managed server service {0} was created in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkServiceCreated(managedServerPodName);\n+      }\n     }\n   }\n \n   @Test\n   @Order(2)\n-  @DisplayName(\"Create an ingress for a WebLogic domain in the specified domain namespace\")\n+  @DisplayName(\"Create an ingress for each cluster of the WebLogic domain in the specified domain namespace\")\n   public void testCreateIngress() {\n \n-    // create an ingress in domain namespace\n-    assertThat(assertDoesNotThrow(() -> createIngress(domainNamespace, domainUid, clusterName, managedServerPort)))\n-            .as(\"createIngress succeeds\")\n-            .withFailMessage(String.format(\"failed to create an ingress for domain %s in namespace %s\",\n-                domainUid, domainNamespace))\n-            .isTrue();\n-\n-    // check the ingress is created\n-    String ingressName = domainUid + \"-nginx\";\n-    assertThat(assertDoesNotThrow(() -> getIngressList(domainNamespace)))\n-        .as(String.format(\"found the ingress %s in namespace %s\", ingressName, domainNamespace))\n-        .withFailMessage(String.format(\"can not find ingress %s in namespace %s\", ingressName, domainNamespace))\n-        .contains(ingressName);\n-\n-    logger.info(\"ingress is created in namespace {0}\", domainNamespace);\n+    // create an ingress for each cluster of the domain in the domain namespace\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+\n+      String clusterName = CLUSTER_NAME_PREFIX + i;\n+      String ingressName = domainUid + \"-\" + clusterName + \"-nginx\";\n+\n+      logger.info(\"Creating ingress {0} for cluster {1} of domain {2} in namespace {3}\",\n+          ingressName, clusterName, domainUid, domainNamespace);\n+      assertThat(createIngress(ingressName, domainNamespace, domainUid, clusterName,\n+          MANAGED_SERVER_PORT, domainUid + \".\" + clusterName + \".test\"))\n+          .as(\"Test ingress creation succeeds\", ingressName)\n+          .withFailMessage(\"Ingress creation failed for cluster {0} of domain {1} in namespace {2}\",\n+              clusterName, domainUid, domainNamespace)\n+          .isTrue();\n+\n+      // check that the ingress was found in the domain namespace\n+      assertThat(assertDoesNotThrow(() -> listIngresses(domainNamespace)))\n+          .as(\"Test ingress {0} was found in namespace {1}\", ingressName, domainNamespace)\n+          .withFailMessage(\"Ingress {0} was not found in namespace {1}\", ingressName, domainNamespace)\n+          .contains(ingressName);\n+\n+      logger.info(\"Ingress {0} for cluster {1} of domain {2} was found in namespace {3}\",\n+          ingressName, clusterName, domainUid, domainNamespace);\n+    }\n   }\n \n   @Test\n   @Order(3)\n-  @DisplayName(\"Verify the application can be accessed through the ingress controller\")\n-  public void testSampleAppThroughIngressController() {\n+  @DisplayName(\"Verify the application can be accessed through the ingress controller for each cluster in the domain\")\n+  public void testAppAccessThroughIngressController() {\n \n-    List<String> managedServerNames = new ArrayList<>();\n-    for (int i = 1; i <= replicaCount; i++) {\n-      managedServerNames.add(managedServerNameBase + i);\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+      String clusterName = CLUSTER_NAME_PREFIX + i;\n+\n+      List<String> managedServerListBeforeScale =\n+          listManagedServersBeforeScale(clusterName, replicaCount);\n+\n+      // check that NGINX can access the sample apps from all managed servers in the cluster of the domain\n+      curlCmd = generateCurlCmd(clusterName);\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, managedServerListBeforeScale, 50))\n+          .as(\"Verify NGINX can access the sample app from all managed servers in the domain\")\n+          .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n+          .isTrue();\n     }\n+  }\n \n-    // check that NGINX can access the sample apps from all managed servers in the domain\n-    String curlCmd = String.format(\"curl --silent --noproxy '*' -H 'host: %s' http://%s:%s/sample-war/index.jsp\",\n-        domainUid + \".test\", K8S_NODEPORT_HOST, nodeportshttp);\n-    assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, managedServerNames, 50))\n-        .as(\"NGINX can access the sample app from all managed servers in the domain\")\n-        .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n-        .isTrue();\n+  @Test\n+  @Order(4)\n+  @DisplayName(\"Verify scale each cluster of the domain in domain namespace\")\n+  public void testScaleClusters() {\n+\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+\n+      String clusterName = CLUSTER_NAME_PREFIX + i;\n+      int numberOfServers = 2 * i - 1;\n+\n+      // scale cluster-1 to 1 server and cluster-2 to 3 servers\n+      logger.info(\"Scaling cluster {0} of domain {1} in namespace {2} to {3} servers.\",\n+          clusterName, domainUid, domainNamespace, numberOfServers);\n+      scaleAndVerifyCluster(domainUid, domainNamespace, clusterName, replicaCount, numberOfServers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1451fa04dcceb8a5403026bd9bc53f47167d5d2"}, "originalPosition": 298}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIwNTA1NA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r423205054", "createdAt": "2020-05-11T17:34:27Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleNginxValidation.java", "diffHunk": "@@ -288,81 +299,114 @@ public void testCreateMiiDomain() {\n                 condition.getRemainingTimeInMS()))\n         .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n \n-    // check admin server pod exist\n-    logger.info(\"Check for admin server pod {0} existence in namespace {1}\",\n+    // check admin server pod was created\n+    logger.info(\"Checking that admin server pod {0} was created in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkPodCreated(adminServerPodName);\n \n-    // check managed server pods exists\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check for managed server pod {0} existence in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodCreated(managedServerPrefix + i);\n-    }\n-\n     // check admin server pod is ready\n-    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n+    logger.info(\"Checking that admin server pod {0} is ready in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkPodReady(adminServerPodName);\n \n-    // check managed server pods are ready\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodReady(managedServerPrefix + i);\n-    }\n-\n-    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+    // check admin service is created\n+    logger.info(\"Checking that admin service {0} was created in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkServiceCreated(adminServerPodName);\n \n-    // check managed server services created\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkServiceCreated(managedServerPrefix + i);\n+    // check the readiness for the managed servers in each cluster\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+      for (int j = 1; j <= replicaCount; j++) {\n+        String managedServerPodName =\n+            domainUid + \"-\" + CLUSTER_NAME_PREFIX + i + managedServerNameBase + j;\n+\n+        // check managed server pod was created\n+        logger.info(\"Checking that managed server pod {0} was created in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkPodCreated(managedServerPodName);\n+\n+        // check managed server pod is ready\n+        logger.info(\"Checking that managed server pod {0} is ready in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkPodReady(managedServerPodName);\n+\n+        // check managed server service was created\n+        logger.info(\"Checking that managed server service {0} was created in namespace {1}\",\n+            managedServerPodName, domainNamespace);\n+        checkServiceCreated(managedServerPodName);\n+      }\n     }\n   }\n \n   @Test\n   @Order(2)\n-  @DisplayName(\"Create an ingress for a WebLogic domain in the specified domain namespace\")\n+  @DisplayName(\"Create an ingress for each cluster of the WebLogic domain in the specified domain namespace\")\n   public void testCreateIngress() {\n \n-    // create an ingress in domain namespace\n-    assertThat(assertDoesNotThrow(() -> createIngress(domainNamespace, domainUid, clusterName, managedServerPort)))\n-            .as(\"createIngress succeeds\")\n-            .withFailMessage(String.format(\"failed to create an ingress for domain %s in namespace %s\",\n-                domainUid, domainNamespace))\n-            .isTrue();\n-\n-    // check the ingress is created\n-    String ingressName = domainUid + \"-nginx\";\n-    assertThat(assertDoesNotThrow(() -> getIngressList(domainNamespace)))\n-        .as(String.format(\"found the ingress %s in namespace %s\", ingressName, domainNamespace))\n-        .withFailMessage(String.format(\"can not find ingress %s in namespace %s\", ingressName, domainNamespace))\n-        .contains(ingressName);\n-\n-    logger.info(\"ingress is created in namespace {0}\", domainNamespace);\n+    // create an ingress for each cluster of the domain in the domain namespace\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+\n+      String clusterName = CLUSTER_NAME_PREFIX + i;\n+      String ingressName = domainUid + \"-\" + clusterName + \"-nginx\";\n+\n+      logger.info(\"Creating ingress {0} for cluster {1} of domain {2} in namespace {3}\",\n+          ingressName, clusterName, domainUid, domainNamespace);\n+      assertThat(createIngress(ingressName, domainNamespace, domainUid, clusterName,\n+          MANAGED_SERVER_PORT, domainUid + \".\" + clusterName + \".test\"))\n+          .as(\"Test ingress creation succeeds\", ingressName)\n+          .withFailMessage(\"Ingress creation failed for cluster {0} of domain {1} in namespace {2}\",\n+              clusterName, domainUid, domainNamespace)\n+          .isTrue();\n+\n+      // check that the ingress was found in the domain namespace\n+      assertThat(assertDoesNotThrow(() -> listIngresses(domainNamespace)))\n+          .as(\"Test ingress {0} was found in namespace {1}\", ingressName, domainNamespace)\n+          .withFailMessage(\"Ingress {0} was not found in namespace {1}\", ingressName, domainNamespace)\n+          .contains(ingressName);\n+\n+      logger.info(\"Ingress {0} for cluster {1} of domain {2} was found in namespace {3}\",\n+          ingressName, clusterName, domainUid, domainNamespace);\n+    }\n   }\n \n   @Test\n   @Order(3)\n-  @DisplayName(\"Verify the application can be accessed through the ingress controller\")\n-  public void testSampleAppThroughIngressController() {\n+  @DisplayName(\"Verify the application can be accessed through the ingress controller for each cluster in the domain\")\n+  public void testAppAccessThroughIngressController() {\n \n-    List<String> managedServerNames = new ArrayList<>();\n-    for (int i = 1; i <= replicaCount; i++) {\n-      managedServerNames.add(managedServerNameBase + i);\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+      String clusterName = CLUSTER_NAME_PREFIX + i;\n+\n+      List<String> managedServerListBeforeScale =\n+          listManagedServersBeforeScale(clusterName, replicaCount);\n+\n+      // check that NGINX can access the sample apps from all managed servers in the cluster of the domain\n+      curlCmd = generateCurlCmd(clusterName);\n+      assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, managedServerListBeforeScale, 50))\n+          .as(\"Verify NGINX can access the sample app from all managed servers in the domain\")\n+          .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n+          .isTrue();\n     }\n+  }\n \n-    // check that NGINX can access the sample apps from all managed servers in the domain\n-    String curlCmd = String.format(\"curl --silent --noproxy '*' -H 'host: %s' http://%s:%s/sample-war/index.jsp\",\n-        domainUid + \".test\", K8S_NODEPORT_HOST, nodeportshttp);\n-    assertThat(callWebAppAndCheckForServerNameInResponse(curlCmd, managedServerNames, 50))\n-        .as(\"NGINX can access the sample app from all managed servers in the domain\")\n-        .withFailMessage(\"NGINX can not access the sample app from one or more of the managed servers\")\n-        .isTrue();\n+  @Test\n+  @Order(4)\n+  @DisplayName(\"Verify scale each cluster of the domain in domain namespace\")\n+  public void testScaleClusters() {\n+\n+    for (int i = 1; i <= NUMBER_OF_CLUSTERS; i++) {\n+\n+      String clusterName = CLUSTER_NAME_PREFIX + i;\n+      int numberOfServers = 2 * i - 1;\n+\n+      // scale cluster-1 to 1 server and cluster-2 to 3 servers\n+      logger.info(\"Scaling cluster {0} of domain {1} in namespace {2} to {3} servers.\",\n+          clusterName, domainUid, domainNamespace, numberOfServers);\n+      scaleAndVerifyCluster(domainUid, domainNamespace, clusterName, replicaCount, numberOfServers);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcwMzQ4Mw=="}, "originalCommit": {"oid": "c1451fa04dcceb8a5403026bd9bc53f47167d5d2"}, "originalPosition": 298}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjgyMzA1OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMjoxOTozNlrOGTzwMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMjoxOTozNlrOGTzwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQyNDA0OQ==", "bodyText": "This is copied from Pani's junit5-cm branch.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r423424049", "createdAt": "2020-05-12T02:19:36Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/TestActions.java", "diffHunk": "@@ -594,6 +597,24 @@ public static ExecResult execCommand(V1Pod pod, String containerName, boolean re\n     return Exec.exec(pod, containerName, redirectToStdout, command);\n   }\n \n+\n+  // ----------------------   pod  ---------------------------------\n+\n+  /**\n+   * Get the creationTimestamp for a given pod with following parameters.\n+   *\n+   * @param namespace namespace in which to check for the pod existence\n+   * @param labelSelector in the format \"weblogic.domainUID in (%s)\"\n+   * @param podName name of the pod\n+   * @return creationTimestamp from metadata section of the Pod\n+   * @throws ApiException if Kubernetes client API call fails\n+   **/\n+  public static String getPodCreationTimestamp(String namespace, String labelSelector, String podName)\n+      throws ApiException {\n+    return Pod.getPodCreationTimestamp(namespace, labelSelector, podName);\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d5ee88f3365fbdf60ece0c1efdbc1130fec19c1"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjgyNDkyOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Pod.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMjoyMDo0MlrOGTzxUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMjoyMDo0MlrOGTzxUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQyNDMzOA==", "bodyText": "This file is copied from Pani's junit5-cm branch.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r423424338", "createdAt": "2020-05-12T02:20:42Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Pod.java", "diffHunk": "@@ -0,0 +1,75 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d5ee88f3365fbdf60ece0c1efdbc1130fec19c1"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjgyNzQzOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMjoyMjoxOFrOGTzy0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMjoyMjoxOFrOGTzy0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQyNDcyMQ==", "bodyText": "This method is copied from Pani's junit5-cm branch.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r423424721", "createdAt": "2020-05-12T02:22:18Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -432,6 +434,48 @@ public static boolean deletePod(String name, String namespace) {\n     return true;\n   }\n \n+  /**\n+   * Returns the V1Pod object given the following parameters.\n+   *\n+   * @param namespace in which to check for the pod existence\n+   * @param labelSelector in the format \"weblogic.domainUID in (%s)\"\n+   * @param podName name of the pod to return\n+   * @return V1Pod object if found otherwise null\n+   * @throws ApiException if Kubernetes client API call fails\n+   */\n+  public static V1Pod getPod(String namespace, String labelSelector, String podName) throws ApiException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d5ee88f3365fbdf60ece0c1efdbc1130fec19c1"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjgyODAzOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMjoyMjo0MlrOGTzzKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMjoyMjo0MlrOGTzzKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQyNDgwOQ==", "bodyText": "This method is copied from Pani's junit5-cm branch.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r423424809", "createdAt": "2020-05-12T02:22:42Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -432,6 +434,48 @@ public static boolean deletePod(String name, String namespace) {\n     return true;\n   }\n \n+  /**\n+   * Returns the V1Pod object given the following parameters.\n+   *\n+   * @param namespace in which to check for the pod existence\n+   * @param labelSelector in the format \"weblogic.domainUID in (%s)\"\n+   * @param podName name of the pod to return\n+   * @return V1Pod object if found otherwise null\n+   * @throws ApiException if Kubernetes client API call fails\n+   */\n+  public static V1Pod getPod(String namespace, String labelSelector, String podName) throws ApiException {\n+    V1PodList pods = listPods(namespace, labelSelector);\n+    for (var pod : pods.getItems()) {\n+      if (podName.equals(pod.getMetadata().getName())) {\n+        return pod;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Get the creationTimestamp for a given pod with following parameters.\n+   *\n+   * @param namespace in which to check for the pod existence\n+   * @param labelSelector in the format \"weblogic.domainUID in (%s)\"\n+   * @param podName  name of the pod\n+   * @return creationTimestamp from metadata section of the Pod\n+   * @throws ApiException if Kubernetes client API call fail\n+   */\n+  public static String getPodCreationTimestamp(String namespace, String labelSelector, String podName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d5ee88f3365fbdf60ece0c1efdbc1130fec19c1"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODg5MTkxOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMzo1OToyOVrOGUICUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNjowMzoyNVrOGUN7BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc1NjM2OA==", "bodyText": "remove the commented out code", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r423756368", "createdAt": "2020-05-12T13:59:29Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -432,6 +434,48 @@ public static boolean deletePod(String name, String namespace) {\n     return true;\n   }\n \n+  /**\n+   * Returns the V1Pod object given the following parameters.\n+   *\n+   * @param namespace in which to check for the pod existence\n+   * @param labelSelector in the format \"weblogic.domainUID in (%s)\"\n+   * @param podName name of the pod to return\n+   * @return V1Pod object if found otherwise null\n+   * @throws ApiException if Kubernetes client API call fails\n+   */\n+  public static V1Pod getPod(String namespace, String labelSelector, String podName) throws ApiException {\n+    V1PodList pods = listPods(namespace, labelSelector);\n+    for (var pod : pods.getItems()) {\n+      if (podName.equals(pod.getMetadata().getName())) {\n+        return pod;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Get the creationTimestamp for a given pod with following parameters.\n+   *\n+   * @param namespace in which to check for the pod existence\n+   * @param labelSelector in the format \"weblogic.domainUID in (%s)\"\n+   * @param podName  name of the pod\n+   * @return creationTimestamp from metadata section of the Pod\n+   * @throws ApiException if Kubernetes client API call fail\n+   */\n+  public static String getPodCreationTimestamp(String namespace, String labelSelector, String podName)\n+      throws ApiException {\n+    DateTimeFormatter dtf = DateTimeFormat.forPattern(\"HHmmss\");\n+    // DateTimeFormatter dtf = DateTimeFormat.forPattern(\"YYYYMMDDHHmmss\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d5ee88f3365fbdf60ece0c1efdbc1130fec19c1"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg1MjgwNA==", "bodyText": "I will remove it in my next PR", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r423852804", "createdAt": "2020-05-12T16:03:25Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -432,6 +434,48 @@ public static boolean deletePod(String name, String namespace) {\n     return true;\n   }\n \n+  /**\n+   * Returns the V1Pod object given the following parameters.\n+   *\n+   * @param namespace in which to check for the pod existence\n+   * @param labelSelector in the format \"weblogic.domainUID in (%s)\"\n+   * @param podName name of the pod to return\n+   * @return V1Pod object if found otherwise null\n+   * @throws ApiException if Kubernetes client API call fails\n+   */\n+  public static V1Pod getPod(String namespace, String labelSelector, String podName) throws ApiException {\n+    V1PodList pods = listPods(namespace, labelSelector);\n+    for (var pod : pods.getItems()) {\n+      if (podName.equals(pod.getMetadata().getName())) {\n+        return pod;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Get the creationTimestamp for a given pod with following parameters.\n+   *\n+   * @param namespace in which to check for the pod existence\n+   * @param labelSelector in the format \"weblogic.domainUID in (%s)\"\n+   * @param podName  name of the pod\n+   * @return creationTimestamp from metadata section of the Pod\n+   * @throws ApiException if Kubernetes client API call fail\n+   */\n+  public static String getPodCreationTimestamp(String namespace, String labelSelector, String podName)\n+      throws ApiException {\n+    DateTimeFormatter dtf = DateTimeFormat.forPattern(\"HHmmss\");\n+    // DateTimeFormatter dtf = DateTimeFormat.forPattern(\"YYYYMMDDHHmmss\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc1NjM2OA=="}, "originalCommit": {"oid": "4d5ee88f3365fbdf60ece0c1efdbc1130fec19c1"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODg5MjM4OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMzo1OTozNVrOGUICng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNjowNDowNFrOGUN8xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc1NjQ0Ng==", "bodyText": "remove the commented out code", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r423756446", "createdAt": "2020-05-12T13:59:35Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -432,6 +434,48 @@ public static boolean deletePod(String name, String namespace) {\n     return true;\n   }\n \n+  /**\n+   * Returns the V1Pod object given the following parameters.\n+   *\n+   * @param namespace in which to check for the pod existence\n+   * @param labelSelector in the format \"weblogic.domainUID in (%s)\"\n+   * @param podName name of the pod to return\n+   * @return V1Pod object if found otherwise null\n+   * @throws ApiException if Kubernetes client API call fails\n+   */\n+  public static V1Pod getPod(String namespace, String labelSelector, String podName) throws ApiException {\n+    V1PodList pods = listPods(namespace, labelSelector);\n+    for (var pod : pods.getItems()) {\n+      if (podName.equals(pod.getMetadata().getName())) {\n+        return pod;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Get the creationTimestamp for a given pod with following parameters.\n+   *\n+   * @param namespace in which to check for the pod existence\n+   * @param labelSelector in the format \"weblogic.domainUID in (%s)\"\n+   * @param podName  name of the pod\n+   * @return creationTimestamp from metadata section of the Pod\n+   * @throws ApiException if Kubernetes client API call fail\n+   */\n+  public static String getPodCreationTimestamp(String namespace, String labelSelector, String podName)\n+      throws ApiException {\n+    DateTimeFormatter dtf = DateTimeFormat.forPattern(\"HHmmss\");\n+    // DateTimeFormatter dtf = DateTimeFormat.forPattern(\"YYYYMMDDHHmmss\");\n+    V1Pod pod = getPod(namespace, labelSelector, podName);\n+    if (pod != null) {\n+      // return pod.getMetadata().getCreationTimestamp().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d5ee88f3365fbdf60ece0c1efdbc1130fec19c1"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg1MzI1Mw==", "bodyText": "I will remove it in my next PR.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r423853253", "createdAt": "2020-05-12T16:04:04Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -432,6 +434,48 @@ public static boolean deletePod(String name, String namespace) {\n     return true;\n   }\n \n+  /**\n+   * Returns the V1Pod object given the following parameters.\n+   *\n+   * @param namespace in which to check for the pod existence\n+   * @param labelSelector in the format \"weblogic.domainUID in (%s)\"\n+   * @param podName name of the pod to return\n+   * @return V1Pod object if found otherwise null\n+   * @throws ApiException if Kubernetes client API call fails\n+   */\n+  public static V1Pod getPod(String namespace, String labelSelector, String podName) throws ApiException {\n+    V1PodList pods = listPods(namespace, labelSelector);\n+    for (var pod : pods.getItems()) {\n+      if (podName.equals(pod.getMetadata().getName())) {\n+        return pod;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Get the creationTimestamp for a given pod with following parameters.\n+   *\n+   * @param namespace in which to check for the pod existence\n+   * @param labelSelector in the format \"weblogic.domainUID in (%s)\"\n+   * @param podName  name of the pod\n+   * @return creationTimestamp from metadata section of the Pod\n+   * @throws ApiException if Kubernetes client API call fail\n+   */\n+  public static String getPodCreationTimestamp(String namespace, String labelSelector, String podName)\n+      throws ApiException {\n+    DateTimeFormatter dtf = DateTimeFormat.forPattern(\"HHmmss\");\n+    // DateTimeFormatter dtf = DateTimeFormat.forPattern(\"YYYYMMDDHHmmss\");\n+    V1Pod pod = getPod(namespace, labelSelector, podName);\n+    if (pod != null) {\n+      // return pod.getMetadata().getCreationTimestamp().toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc1NjQ0Ng=="}, "originalCommit": {"oid": "4d5ee88f3365fbdf60ece0c1efdbc1130fec19c1"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODg5NTk4OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDowMDoxNVrOGUIE0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNjowNDozMlrOGUN99g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc1NzAxMA==", "bodyText": "we don't need the method name prefix since method name will be logged by default in the message", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r423757010", "createdAt": "2020-05-12T14:00:15Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -432,6 +434,48 @@ public static boolean deletePod(String name, String namespace) {\n     return true;\n   }\n \n+  /**\n+   * Returns the V1Pod object given the following parameters.\n+   *\n+   * @param namespace in which to check for the pod existence\n+   * @param labelSelector in the format \"weblogic.domainUID in (%s)\"\n+   * @param podName name of the pod to return\n+   * @return V1Pod object if found otherwise null\n+   * @throws ApiException if Kubernetes client API call fails\n+   */\n+  public static V1Pod getPod(String namespace, String labelSelector, String podName) throws ApiException {\n+    V1PodList pods = listPods(namespace, labelSelector);\n+    for (var pod : pods.getItems()) {\n+      if (podName.equals(pod.getMetadata().getName())) {\n+        return pod;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Get the creationTimestamp for a given pod with following parameters.\n+   *\n+   * @param namespace in which to check for the pod existence\n+   * @param labelSelector in the format \"weblogic.domainUID in (%s)\"\n+   * @param podName  name of the pod\n+   * @return creationTimestamp from metadata section of the Pod\n+   * @throws ApiException if Kubernetes client API call fail\n+   */\n+  public static String getPodCreationTimestamp(String namespace, String labelSelector, String podName)\n+      throws ApiException {\n+    DateTimeFormatter dtf = DateTimeFormat.forPattern(\"HHmmss\");\n+    // DateTimeFormatter dtf = DateTimeFormat.forPattern(\"YYYYMMDDHHmmss\");\n+    V1Pod pod = getPod(namespace, labelSelector, podName);\n+    if (pod != null) {\n+      // return pod.getMetadata().getCreationTimestamp().toString();\n+      return dtf.print(pod.getMetadata().getCreationTimestamp());\n+    } else {\n+      logger.info(\"getPodCreationTimestamp(): Pod doesn't exist\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d5ee88f3365fbdf60ece0c1efdbc1130fec19c1"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg1MzU1OA==", "bodyText": "I will fix it in my next PR.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r423853558", "createdAt": "2020-05-12T16:04:32Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -432,6 +434,48 @@ public static boolean deletePod(String name, String namespace) {\n     return true;\n   }\n \n+  /**\n+   * Returns the V1Pod object given the following parameters.\n+   *\n+   * @param namespace in which to check for the pod existence\n+   * @param labelSelector in the format \"weblogic.domainUID in (%s)\"\n+   * @param podName name of the pod to return\n+   * @return V1Pod object if found otherwise null\n+   * @throws ApiException if Kubernetes client API call fails\n+   */\n+  public static V1Pod getPod(String namespace, String labelSelector, String podName) throws ApiException {\n+    V1PodList pods = listPods(namespace, labelSelector);\n+    for (var pod : pods.getItems()) {\n+      if (podName.equals(pod.getMetadata().getName())) {\n+        return pod;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Get the creationTimestamp for a given pod with following parameters.\n+   *\n+   * @param namespace in which to check for the pod existence\n+   * @param labelSelector in the format \"weblogic.domainUID in (%s)\"\n+   * @param podName  name of the pod\n+   * @return creationTimestamp from metadata section of the Pod\n+   * @throws ApiException if Kubernetes client API call fail\n+   */\n+  public static String getPodCreationTimestamp(String namespace, String labelSelector, String podName)\n+      throws ApiException {\n+    DateTimeFormatter dtf = DateTimeFormat.forPattern(\"HHmmss\");\n+    // DateTimeFormatter dtf = DateTimeFormat.forPattern(\"YYYYMMDDHHmmss\");\n+    V1Pod pod = getPod(namespace, labelSelector, podName);\n+    if (pod != null) {\n+      // return pod.getMetadata().getCreationTimestamp().toString();\n+      return dtf.print(pod.getMetadata().getCreationTimestamp());\n+    } else {\n+      logger.info(\"getPodCreationTimestamp(): Pod doesn't exist\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc1NzAxMA=="}, "originalCommit": {"oid": "4d5ee88f3365fbdf60ece0c1efdbc1130fec19c1"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODkzMTg1OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Domain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDowNzo0NlrOGUIbKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNjowNDo0OVrOGUN-qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc2MjcyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Verify the original managed server pod state is not changed during scaling the cluster.\n          \n          \n            \n               * Verify the original managed server pod state is not changed after scaling.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r423762729", "createdAt": "2020-05-12T14:07:46Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Domain.java", "diffHunk": "@@ -85,4 +93,64 @@ public static boolean adminNodePortAccessible(String domainUid, String namespace\n     return true;\n   }\n \n+  /**\n+   * Verify the original managed server pod state is not changed during scaling the cluster.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d5ee88f3365fbdf60ece0c1efdbc1130fec19c1"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg1MzczNw==", "bodyText": "I will fix it in my next PR.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r423853737", "createdAt": "2020-05-12T16:04:49Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Domain.java", "diffHunk": "@@ -85,4 +93,64 @@ public static boolean adminNodePortAccessible(String domainUid, String namespace\n     return true;\n   }\n \n+  /**\n+   * Verify the original managed server pod state is not changed during scaling the cluster.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc2MjcyOQ=="}, "originalCommit": {"oid": "4d5ee88f3365fbdf60ece0c1efdbc1130fec19c1"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODkzNjk3OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Domain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDowODo1MlrOGUIeaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNjowNDo1N1rOGUN-9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc2MzU2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @return true if the managed server pod state is not change during scaling the cluster, false otherwise\n          \n          \n            \n               * @return true if the managed server pod state is not changed after cluster scaling, false otherwise", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r423763561", "createdAt": "2020-05-12T14:08:52Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Domain.java", "diffHunk": "@@ -85,4 +93,64 @@ public static boolean adminNodePortAccessible(String domainUid, String namespace\n     return true;\n   }\n \n+  /**\n+   * Verify the original managed server pod state is not changed during scaling the cluster.\n+   * @param podName the name of the managed server pod to check\n+   * @param domainUid the domain uid of the domain in which the managed server pod exists\n+   * @param domainNamespace the domain namespace in which the domain exists\n+   * @param podCreationTimestampBeforeScale the managed server pod creation time stamp before the scale\n+   * @return true if the managed server pod state is not change during scaling the cluster, false otherwise", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d5ee88f3365fbdf60ece0c1efdbc1130fec19c1"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg1MzgxNQ==", "bodyText": "I will fix it in my next PR.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r423853815", "createdAt": "2020-05-12T16:04:57Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Domain.java", "diffHunk": "@@ -85,4 +93,64 @@ public static boolean adminNodePortAccessible(String domainUid, String namespace\n     return true;\n   }\n \n+  /**\n+   * Verify the original managed server pod state is not changed during scaling the cluster.\n+   * @param podName the name of the managed server pod to check\n+   * @param domainUid the domain uid of the domain in which the managed server pod exists\n+   * @param domainNamespace the domain namespace in which the domain exists\n+   * @param podCreationTimestampBeforeScale the managed server pod creation time stamp before the scale\n+   * @return true if the managed server pod state is not change during scaling the cluster, false otherwise", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc2MzU2MQ=="}, "originalCommit": {"oid": "4d5ee88f3365fbdf60ece0c1efdbc1130fec19c1"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODk0Njk5OnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Domain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDoxMDo1MFrOGUIklw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNjowNTowNFrOGUN_Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc2NTE0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String podCreationTimeStampDuringScale;\n          \n          \n            \n                String podCreationTimeStampAfterScale;", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r423765143", "createdAt": "2020-05-12T14:10:50Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Domain.java", "diffHunk": "@@ -85,4 +93,64 @@ public static boolean adminNodePortAccessible(String domainUid, String namespace\n     return true;\n   }\n \n+  /**\n+   * Verify the original managed server pod state is not changed during scaling the cluster.\n+   * @param podName the name of the managed server pod to check\n+   * @param domainUid the domain uid of the domain in which the managed server pod exists\n+   * @param domainNamespace the domain namespace in which the domain exists\n+   * @param podCreationTimestampBeforeScale the managed server pod creation time stamp before the scale\n+   * @return true if the managed server pod state is not change during scaling the cluster, false otherwise\n+   */\n+  public static boolean podStateNotChangedDuringScalingCluster(String podName,\n+                                                               String domainUid,\n+                                                               String domainNamespace,\n+                                                               String podCreationTimestampBeforeScale) {\n+\n+    // check that the original managed server pod still exists\n+    logger.info(\"Checking that the managed server pod {0} still exists in namespace {1}\",\n+        podName, domainNamespace);\n+    assertTrue(assertDoesNotThrow(() -> doesPodExist(domainNamespace, domainUid, podName),\n+        String.format(\"podExists failed with ApiException for pod %s in namespace %s\",\n+            podName, domainNamespace)),\n+        String.format(\"pod %s does not exist in namespace %s\", podName, domainNamespace));\n+\n+    // check that the original managed server pod is in ready state\n+    logger.info(\"Checking that the managed server pod {0} is in ready state in namespace {1}\",\n+        podName, domainNamespace);\n+    assertTrue(assertDoesNotThrow(() -> isPodReady(domainNamespace, domainUid, podName),\n+        String.format(\n+            \"isPodReady failed with ApiException for pod %s in namespace %s\", podName, domainNamespace)),\n+        String.format(\"pod %s is not ready in namespace %s\", podName, domainNamespace));\n+\n+    // check that the original managed server service still exists\n+    logger.info(\"Checking that the managed server service {0} still exists in namespace {1}\",\n+        podName, domainNamespace);\n+    assertTrue(assertDoesNotThrow(() -> doesServiceExist(podName, null, domainNamespace),\n+        String.format(\"doesServiceExist failed with ApiException for pod %s in namespace %s\",\n+            podName, domainNamespace)),\n+        String.format(\"service %s does not exist in namespace %s\", podName, domainNamespace));\n+\n+    // check the pod timestamp of pod is the same as before\n+    logger.info(\"Checking that the managed server pod creation timestamp is not changed\");\n+    String podCreationTimeStampDuringScale;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d5ee88f3365fbdf60ece0c1efdbc1130fec19c1"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg1MzkxNQ==", "bodyText": "I will fix it in my next PR.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r423853915", "createdAt": "2020-05-12T16:05:04Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Domain.java", "diffHunk": "@@ -85,4 +93,64 @@ public static boolean adminNodePortAccessible(String domainUid, String namespace\n     return true;\n   }\n \n+  /**\n+   * Verify the original managed server pod state is not changed during scaling the cluster.\n+   * @param podName the name of the managed server pod to check\n+   * @param domainUid the domain uid of the domain in which the managed server pod exists\n+   * @param domainNamespace the domain namespace in which the domain exists\n+   * @param podCreationTimestampBeforeScale the managed server pod creation time stamp before the scale\n+   * @return true if the managed server pod state is not change during scaling the cluster, false otherwise\n+   */\n+  public static boolean podStateNotChangedDuringScalingCluster(String podName,\n+                                                               String domainUid,\n+                                                               String domainNamespace,\n+                                                               String podCreationTimestampBeforeScale) {\n+\n+    // check that the original managed server pod still exists\n+    logger.info(\"Checking that the managed server pod {0} still exists in namespace {1}\",\n+        podName, domainNamespace);\n+    assertTrue(assertDoesNotThrow(() -> doesPodExist(domainNamespace, domainUid, podName),\n+        String.format(\"podExists failed with ApiException for pod %s in namespace %s\",\n+            podName, domainNamespace)),\n+        String.format(\"pod %s does not exist in namespace %s\", podName, domainNamespace));\n+\n+    // check that the original managed server pod is in ready state\n+    logger.info(\"Checking that the managed server pod {0} is in ready state in namespace {1}\",\n+        podName, domainNamespace);\n+    assertTrue(assertDoesNotThrow(() -> isPodReady(domainNamespace, domainUid, podName),\n+        String.format(\n+            \"isPodReady failed with ApiException for pod %s in namespace %s\", podName, domainNamespace)),\n+        String.format(\"pod %s is not ready in namespace %s\", podName, domainNamespace));\n+\n+    // check that the original managed server service still exists\n+    logger.info(\"Checking that the managed server service {0} still exists in namespace {1}\",\n+        podName, domainNamespace);\n+    assertTrue(assertDoesNotThrow(() -> doesServiceExist(podName, null, domainNamespace),\n+        String.format(\"doesServiceExist failed with ApiException for pod %s in namespace %s\",\n+            podName, domainNamespace)),\n+        String.format(\"service %s does not exist in namespace %s\", podName, domainNamespace));\n+\n+    // check the pod timestamp of pod is the same as before\n+    logger.info(\"Checking that the managed server pod creation timestamp is not changed\");\n+    String podCreationTimeStampDuringScale;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc2NTE0Mw=="}, "originalCommit": {"oid": "4d5ee88f3365fbdf60ece0c1efdbc1130fec19c1"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODk0OTkyOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Domain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDoxMToyOVrOGUImlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNjowNToxM1rOGUN_ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc2NTY1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (Long.parseLong(podCreationTimestampBeforeScale) != Long.parseLong(podCreationTimeStampDuringScale)) {\n          \n          \n            \n                if (Long.parseLong(podCreationTimestampBeforeScale) != Long.parseLong(podCreationTimeStampAfterScale)) {", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r423765653", "createdAt": "2020-05-12T14:11:29Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Domain.java", "diffHunk": "@@ -85,4 +93,64 @@ public static boolean adminNodePortAccessible(String domainUid, String namespace\n     return true;\n   }\n \n+  /**\n+   * Verify the original managed server pod state is not changed during scaling the cluster.\n+   * @param podName the name of the managed server pod to check\n+   * @param domainUid the domain uid of the domain in which the managed server pod exists\n+   * @param domainNamespace the domain namespace in which the domain exists\n+   * @param podCreationTimestampBeforeScale the managed server pod creation time stamp before the scale\n+   * @return true if the managed server pod state is not change during scaling the cluster, false otherwise\n+   */\n+  public static boolean podStateNotChangedDuringScalingCluster(String podName,\n+                                                               String domainUid,\n+                                                               String domainNamespace,\n+                                                               String podCreationTimestampBeforeScale) {\n+\n+    // check that the original managed server pod still exists\n+    logger.info(\"Checking that the managed server pod {0} still exists in namespace {1}\",\n+        podName, domainNamespace);\n+    assertTrue(assertDoesNotThrow(() -> doesPodExist(domainNamespace, domainUid, podName),\n+        String.format(\"podExists failed with ApiException for pod %s in namespace %s\",\n+            podName, domainNamespace)),\n+        String.format(\"pod %s does not exist in namespace %s\", podName, domainNamespace));\n+\n+    // check that the original managed server pod is in ready state\n+    logger.info(\"Checking that the managed server pod {0} is in ready state in namespace {1}\",\n+        podName, domainNamespace);\n+    assertTrue(assertDoesNotThrow(() -> isPodReady(domainNamespace, domainUid, podName),\n+        String.format(\n+            \"isPodReady failed with ApiException for pod %s in namespace %s\", podName, domainNamespace)),\n+        String.format(\"pod %s is not ready in namespace %s\", podName, domainNamespace));\n+\n+    // check that the original managed server service still exists\n+    logger.info(\"Checking that the managed server service {0} still exists in namespace {1}\",\n+        podName, domainNamespace);\n+    assertTrue(assertDoesNotThrow(() -> doesServiceExist(podName, null, domainNamespace),\n+        String.format(\"doesServiceExist failed with ApiException for pod %s in namespace %s\",\n+            podName, domainNamespace)),\n+        String.format(\"service %s does not exist in namespace %s\", podName, domainNamespace));\n+\n+    // check the pod timestamp of pod is the same as before\n+    logger.info(\"Checking that the managed server pod creation timestamp is not changed\");\n+    String podCreationTimeStampDuringScale;\n+    DateTimeFormatter dtf = DateTimeFormat.forPattern(\"HHmmss\");\n+    V1Pod pod =\n+        assertDoesNotThrow(() -> getPod(domainNamespace, \"\", podName),\n+            String.format(\"getPod failed with ApiException for pod %s in namespace %s\",\n+                podName, domainNamespace));\n+    if (pod != null && pod.getMetadata() != null) {\n+      podCreationTimeStampDuringScale = dtf.print(pod.getMetadata().getCreationTimestamp());\n+    } else {\n+      logger.info(\"Pod doesn't exist or pod metadata is null\");\n+      return false;\n+    }\n+\n+    if (Long.parseLong(podCreationTimestampBeforeScale) != Long.parseLong(podCreationTimeStampDuringScale)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d5ee88f3365fbdf60ece0c1efdbc1130fec19c1"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg1NDAxOQ==", "bodyText": "I will fix it in my next PR.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r423854019", "createdAt": "2020-05-12T16:05:13Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Domain.java", "diffHunk": "@@ -85,4 +93,64 @@ public static boolean adminNodePortAccessible(String domainUid, String namespace\n     return true;\n   }\n \n+  /**\n+   * Verify the original managed server pod state is not changed during scaling the cluster.\n+   * @param podName the name of the managed server pod to check\n+   * @param domainUid the domain uid of the domain in which the managed server pod exists\n+   * @param domainNamespace the domain namespace in which the domain exists\n+   * @param podCreationTimestampBeforeScale the managed server pod creation time stamp before the scale\n+   * @return true if the managed server pod state is not change during scaling the cluster, false otherwise\n+   */\n+  public static boolean podStateNotChangedDuringScalingCluster(String podName,\n+                                                               String domainUid,\n+                                                               String domainNamespace,\n+                                                               String podCreationTimestampBeforeScale) {\n+\n+    // check that the original managed server pod still exists\n+    logger.info(\"Checking that the managed server pod {0} still exists in namespace {1}\",\n+        podName, domainNamespace);\n+    assertTrue(assertDoesNotThrow(() -> doesPodExist(domainNamespace, domainUid, podName),\n+        String.format(\"podExists failed with ApiException for pod %s in namespace %s\",\n+            podName, domainNamespace)),\n+        String.format(\"pod %s does not exist in namespace %s\", podName, domainNamespace));\n+\n+    // check that the original managed server pod is in ready state\n+    logger.info(\"Checking that the managed server pod {0} is in ready state in namespace {1}\",\n+        podName, domainNamespace);\n+    assertTrue(assertDoesNotThrow(() -> isPodReady(domainNamespace, domainUid, podName),\n+        String.format(\n+            \"isPodReady failed with ApiException for pod %s in namespace %s\", podName, domainNamespace)),\n+        String.format(\"pod %s is not ready in namespace %s\", podName, domainNamespace));\n+\n+    // check that the original managed server service still exists\n+    logger.info(\"Checking that the managed server service {0} still exists in namespace {1}\",\n+        podName, domainNamespace);\n+    assertTrue(assertDoesNotThrow(() -> doesServiceExist(podName, null, domainNamespace),\n+        String.format(\"doesServiceExist failed with ApiException for pod %s in namespace %s\",\n+            podName, domainNamespace)),\n+        String.format(\"service %s does not exist in namespace %s\", podName, domainNamespace));\n+\n+    // check the pod timestamp of pod is the same as before\n+    logger.info(\"Checking that the managed server pod creation timestamp is not changed\");\n+    String podCreationTimeStampDuringScale;\n+    DateTimeFormatter dtf = DateTimeFormat.forPattern(\"HHmmss\");\n+    V1Pod pod =\n+        assertDoesNotThrow(() -> getPod(domainNamespace, \"\", podName),\n+            String.format(\"getPod failed with ApiException for pod %s in namespace %s\",\n+                podName, domainNamespace));\n+    if (pod != null && pod.getMetadata() != null) {\n+      podCreationTimeStampDuringScale = dtf.print(pod.getMetadata().getCreationTimestamp());\n+    } else {\n+      logger.info(\"Pod doesn't exist or pod metadata is null\");\n+      return false;\n+    }\n+\n+    if (Long.parseLong(podCreationTimestampBeforeScale) != Long.parseLong(podCreationTimeStampDuringScale)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc2NTY1Mw=="}, "originalCommit": {"oid": "4d5ee88f3365fbdf60ece0c1efdbc1130fec19c1"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODk1MTIzOnYy", "diffSide": "RIGHT", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Domain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDoxMTo0N1rOGUIneg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNjowNToyMlrOGUOALw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc2NTg4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      podName, podCreationTimestampBeforeScale, podCreationTimeStampDuringScale);\n          \n          \n            \n                      podName, podCreationTimestampBeforeScale, podCreationTimeStampAfterScale);", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r423765882", "createdAt": "2020-05-12T14:11:47Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Domain.java", "diffHunk": "@@ -85,4 +93,64 @@ public static boolean adminNodePortAccessible(String domainUid, String namespace\n     return true;\n   }\n \n+  /**\n+   * Verify the original managed server pod state is not changed during scaling the cluster.\n+   * @param podName the name of the managed server pod to check\n+   * @param domainUid the domain uid of the domain in which the managed server pod exists\n+   * @param domainNamespace the domain namespace in which the domain exists\n+   * @param podCreationTimestampBeforeScale the managed server pod creation time stamp before the scale\n+   * @return true if the managed server pod state is not change during scaling the cluster, false otherwise\n+   */\n+  public static boolean podStateNotChangedDuringScalingCluster(String podName,\n+                                                               String domainUid,\n+                                                               String domainNamespace,\n+                                                               String podCreationTimestampBeforeScale) {\n+\n+    // check that the original managed server pod still exists\n+    logger.info(\"Checking that the managed server pod {0} still exists in namespace {1}\",\n+        podName, domainNamespace);\n+    assertTrue(assertDoesNotThrow(() -> doesPodExist(domainNamespace, domainUid, podName),\n+        String.format(\"podExists failed with ApiException for pod %s in namespace %s\",\n+            podName, domainNamespace)),\n+        String.format(\"pod %s does not exist in namespace %s\", podName, domainNamespace));\n+\n+    // check that the original managed server pod is in ready state\n+    logger.info(\"Checking that the managed server pod {0} is in ready state in namespace {1}\",\n+        podName, domainNamespace);\n+    assertTrue(assertDoesNotThrow(() -> isPodReady(domainNamespace, domainUid, podName),\n+        String.format(\n+            \"isPodReady failed with ApiException for pod %s in namespace %s\", podName, domainNamespace)),\n+        String.format(\"pod %s is not ready in namespace %s\", podName, domainNamespace));\n+\n+    // check that the original managed server service still exists\n+    logger.info(\"Checking that the managed server service {0} still exists in namespace {1}\",\n+        podName, domainNamespace);\n+    assertTrue(assertDoesNotThrow(() -> doesServiceExist(podName, null, domainNamespace),\n+        String.format(\"doesServiceExist failed with ApiException for pod %s in namespace %s\",\n+            podName, domainNamespace)),\n+        String.format(\"service %s does not exist in namespace %s\", podName, domainNamespace));\n+\n+    // check the pod timestamp of pod is the same as before\n+    logger.info(\"Checking that the managed server pod creation timestamp is not changed\");\n+    String podCreationTimeStampDuringScale;\n+    DateTimeFormatter dtf = DateTimeFormat.forPattern(\"HHmmss\");\n+    V1Pod pod =\n+        assertDoesNotThrow(() -> getPod(domainNamespace, \"\", podName),\n+            String.format(\"getPod failed with ApiException for pod %s in namespace %s\",\n+                podName, domainNamespace));\n+    if (pod != null && pod.getMetadata() != null) {\n+      podCreationTimeStampDuringScale = dtf.print(pod.getMetadata().getCreationTimestamp());\n+    } else {\n+      logger.info(\"Pod doesn't exist or pod metadata is null\");\n+      return false;\n+    }\n+\n+    if (Long.parseLong(podCreationTimestampBeforeScale) != Long.parseLong(podCreationTimeStampDuringScale)) {\n+      logger.info(\"The creation timestamp of managed server pod {0} is changed from {1} to {2}\",\n+          podName, podCreationTimestampBeforeScale, podCreationTimeStampDuringScale);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d5ee88f3365fbdf60ece0c1efdbc1130fec19c1"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg1NDEyNw==", "bodyText": "I will fix it in my next PR.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1632#discussion_r423854127", "createdAt": "2020-05-12T16:05:22Z", "author": {"login": "xiancao"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Domain.java", "diffHunk": "@@ -85,4 +93,64 @@ public static boolean adminNodePortAccessible(String domainUid, String namespace\n     return true;\n   }\n \n+  /**\n+   * Verify the original managed server pod state is not changed during scaling the cluster.\n+   * @param podName the name of the managed server pod to check\n+   * @param domainUid the domain uid of the domain in which the managed server pod exists\n+   * @param domainNamespace the domain namespace in which the domain exists\n+   * @param podCreationTimestampBeforeScale the managed server pod creation time stamp before the scale\n+   * @return true if the managed server pod state is not change during scaling the cluster, false otherwise\n+   */\n+  public static boolean podStateNotChangedDuringScalingCluster(String podName,\n+                                                               String domainUid,\n+                                                               String domainNamespace,\n+                                                               String podCreationTimestampBeforeScale) {\n+\n+    // check that the original managed server pod still exists\n+    logger.info(\"Checking that the managed server pod {0} still exists in namespace {1}\",\n+        podName, domainNamespace);\n+    assertTrue(assertDoesNotThrow(() -> doesPodExist(domainNamespace, domainUid, podName),\n+        String.format(\"podExists failed with ApiException for pod %s in namespace %s\",\n+            podName, domainNamespace)),\n+        String.format(\"pod %s does not exist in namespace %s\", podName, domainNamespace));\n+\n+    // check that the original managed server pod is in ready state\n+    logger.info(\"Checking that the managed server pod {0} is in ready state in namespace {1}\",\n+        podName, domainNamespace);\n+    assertTrue(assertDoesNotThrow(() -> isPodReady(domainNamespace, domainUid, podName),\n+        String.format(\n+            \"isPodReady failed with ApiException for pod %s in namespace %s\", podName, domainNamespace)),\n+        String.format(\"pod %s is not ready in namespace %s\", podName, domainNamespace));\n+\n+    // check that the original managed server service still exists\n+    logger.info(\"Checking that the managed server service {0} still exists in namespace {1}\",\n+        podName, domainNamespace);\n+    assertTrue(assertDoesNotThrow(() -> doesServiceExist(podName, null, domainNamespace),\n+        String.format(\"doesServiceExist failed with ApiException for pod %s in namespace %s\",\n+            podName, domainNamespace)),\n+        String.format(\"service %s does not exist in namespace %s\", podName, domainNamespace));\n+\n+    // check the pod timestamp of pod is the same as before\n+    logger.info(\"Checking that the managed server pod creation timestamp is not changed\");\n+    String podCreationTimeStampDuringScale;\n+    DateTimeFormatter dtf = DateTimeFormat.forPattern(\"HHmmss\");\n+    V1Pod pod =\n+        assertDoesNotThrow(() -> getPod(domainNamespace, \"\", podName),\n+            String.format(\"getPod failed with ApiException for pod %s in namespace %s\",\n+                podName, domainNamespace));\n+    if (pod != null && pod.getMetadata() != null) {\n+      podCreationTimeStampDuringScale = dtf.print(pod.getMetadata().getCreationTimestamp());\n+    } else {\n+      logger.info(\"Pod doesn't exist or pod metadata is null\");\n+      return false;\n+    }\n+\n+    if (Long.parseLong(podCreationTimestampBeforeScale) != Long.parseLong(podCreationTimeStampDuringScale)) {\n+      logger.info(\"The creation timestamp of managed server pod {0} is changed from {1} to {2}\",\n+          podName, podCreationTimestampBeforeScale, podCreationTimeStampDuringScale);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc2NTg4Mg=="}, "originalCommit": {"oid": "4d5ee88f3365fbdf60ece0c1efdbc1130fec19c1"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4526, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}