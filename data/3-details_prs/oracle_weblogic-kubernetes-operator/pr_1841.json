{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5NTYyMDg2", "number": 1841, "title": "Adding Junit5 Operator upgrade tests", "bodyText": "Adding upgrade tests for\n2.5.0 to latest\n2.6.0 to latest\n3.0.0 to latest\nexcluding upgrade test from full test as they should not be run in parallel.\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/944/\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-model-in-image-tests-10/598/", "createdAt": "2020-07-30T20:10:53Z", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1841", "merged": true, "mergeCommit": {"oid": "58609d96d1e7ad83485de7a40e0477f859509f34"}, "closed": true, "closedAt": "2020-08-04T13:35:49Z", "author": {"login": "vanajamukkara"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3jOOgAH2gAyNDU5NTYyMDg2OjdlOWE2NTVkZjVmNDEzNDA2YTlmYjMzOGZhOGMxNTI4OWQzNDEzZWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc7aCwCgH2gAyNDU5NTYyMDg2OjVjZjVmMGU3ZjA5ZGQ4NzIzMGMxNTI3Y2MzNmU1ZjIxZWEwMDBiMjI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7e9a655df5f413406a9fb338fa8c15289d3413eb", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7e9a655df5f413406a9fb338fa8c15289d3413eb", "committedDate": "2020-07-22T23:14:08Z", "message": "adding operator upgrade tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67a7813df4a43865f4a70ce71b6f3aa7e8ff4bc8", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/67a7813df4a43865f4a70ce71b6f3aa7e8ff4bc8", "committedDate": "2020-07-22T23:14:45Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into operator-upgrade-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3a1be0b10f009b648b561c52b0d3badf0004035", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a3a1be0b10f009b648b561c52b0d3badf0004035", "committedDate": "2020-07-28T21:45:18Z", "message": "adding parameterized test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b253b6c68e521b8d2f21de0905bd2a9650425c0c", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b253b6c68e521b8d2f21de0905bd2a9650425c0c", "committedDate": "2020-07-28T22:21:36Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into operator-upgrade-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e886940f2e07606f09a5f2925cc713919b74138f", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e886940f2e07606f09a5f2925cc713919b74138f", "committedDate": "2020-07-29T01:27:38Z", "message": "fix javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50dd1f44be158a7a399e4aa2e6805174944f6133", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/50dd1f44be158a7a399e4aa2e6805174944f6133", "committedDate": "2020-07-29T05:17:30Z", "message": "adding individual tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "039d81064230ad0efbf736463fefef634542c4d5", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/039d81064230ad0efbf736463fefef634542c4d5", "committedDate": "2020-07-29T09:13:30Z", "message": "comment out 250 upgrade"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb1d451ca925de8ab1e7ecc30ac9b50ae7bf03f2", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/fb1d451ca925de8ab1e7ecc30ac9b50ae7bf03f2", "committedDate": "2020-07-29T09:19:56Z", "message": "change release name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94e80f5d83a971b548e3976df0a44634f13b3d89", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/94e80f5d83a971b548e3976df0a44634f13b3d89", "committedDate": "2020-07-29T22:15:01Z", "message": "adding order for testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c10d557fefced4663b8d88d0f740f037f318f0cd", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c10d557fefced4663b8d88d0f740f037f318f0cd", "committedDate": "2020-07-29T22:32:26Z", "message": "commenting cleanup to debug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7854f3e471b02ffe82eac87482c3958bfb747851", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7854f3e471b02ffe82eac87482c3958bfb747851", "committedDate": "2020-07-29T22:34:19Z", "message": "commenting cleanup to debug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5244354738b741ae20d103903c1206f4096911ce", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5244354738b741ae20d103903c1206f4096911ce", "committedDate": "2020-07-29T23:48:23Z", "message": "adding retry for scale"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e4bbbf20883cd9a7d42cba9011d6b942173f331", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/1e4bbbf20883cd9a7d42cba9011d6b942173f331", "committedDate": "2020-07-30T00:27:15Z", "message": "adding cleanup back"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75bdda0ce92ac446718b72413caa7002690d8cb0", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/75bdda0ce92ac446718b72413caa7002690d8cb0", "committedDate": "2020-07-30T01:58:37Z", "message": "adding individual tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5da1bfa8859ca90ff11d7f71d478ff1cef168bb6", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5da1bfa8859ca90ff11d7f71d478ff1cef168bb6", "committedDate": "2020-07-30T02:05:34Z", "message": "change test names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b690e120ad30be7c7ca7e65875fa79a30400bf8", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7b690e120ad30be7c7ca7e65875fa79a30400bf8", "committedDate": "2020-07-30T10:26:18Z", "message": "check operator image name after upgrade"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NzQzOTg5", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1841#pullrequestreview-458743989", "createdAt": "2020-07-30T20:46:36Z", "commit": {"oid": "182deac1b9b3bddf93fada0d6968bfe84d5de94c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMDo0NjozN1rOG5zOcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMDo0Nzo0NVrOG5zQtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI2MTI5OA==", "bodyText": "what happens when the test fails after this stage? The subsequent tests fails without a CRD?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1841#discussion_r463261298", "createdAt": "2020-07-30T20:46:37Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorUpgrade.java", "diffHunk": "@@ -0,0 +1,387 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.annotations.tags.MustNotRunInParallel;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.CleanupUtil;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_GITHUB_CHART_REPO_URL;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.RESULTS_ROOT;\n+import static oracle.weblogic.kubernetes.TestConstants.WDT_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WDT_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.RESOURCE_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorContainerImageName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorImageName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.shutdownDomain;\n+import static oracle.weblogic.kubernetes.actions.TestActions.startDomain;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.adminNodePortAccessible;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.replaceStringInFile;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Operator upgrade tests.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Operator upgrade tests\")\n+@IntegrationTest\n+public class ItOperatorUpgrade {\n+\n+  public static final String LATEST_API_VERSION = \"v8\";\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static Map<String, Object> secretNameMap;\n+  private static LoggingFacade logger = null;\n+  private String domainUid = \"domain1\";\n+  private String adminServerPodName = domainUid + \"-admin-server\";\n+  private String managedServerPodNamePrefix = domainUid + \"-managed-server\";\n+  private int replicaCount = 2;\n+  private List<String> namespaces;\n+  private String latestOperatorImageName;\n+\n+  /**\n+   * Does some initialization of logger, conditionfactory, etc common\n+   * to all test methods.\n+   */\n+  @BeforeAll\n+  public static void init() {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(10, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+  }\n+\n+  /**\n+   * Operator upgrade from 2.5.0 to latest.\n+   * Install 2.5.0 release Operator from GitHub chart repository and create a domain.\n+   * Delete Operator and install latest Operator and verify CRD version is updated\n+   * and the domain can be managed by scaling the cluster using operator REST api.\n+   */\n+  @Test\n+  @DisplayName(\"Upgrade Operator from 2.5.0 to latest\")\n+  @MustNotRunInParallel\n+  public void testOperatorUpgradeFrom2_5_0(@Namespaces(3) List<String> namespaces) {\n+    this.namespaces = namespaces;\n+    upgradeOperator(\"2.5.0\", false);\n+  }\n+\n+  /**\n+   * Operator upgrade from 2.6.0 to latest.\n+   * Install 2.6.0 Operator from GitHub chart repository and create a domain.\n+   * Delete Operator and install latest Operator and verify CRD version is updated\n+   * and the domain can be managed by scaling the cluster using operator REST api.\n+   */\n+  @Test\n+  @DisplayName(\"Upgrade Operator from 2.6.0 to latest\")\n+  @MustNotRunInParallel\n+  public void testOperatorUpgradeFrom2_6_0(@Namespaces(3) List<String> namespaces) {\n+    this.namespaces = namespaces;\n+    upgradeOperator(\"2.6.0\", false);\n+  }\n+\n+  /**\n+   * Operator upgrade from 3.0.0 to latest.\n+   * Install 3.0.0 Operator from GitHub chart repository and create a domain.\n+   * Upgrade operator with latest Operator image and verify CRD version and image are updated\n+   * and the domain can be managed by scaling the cluster using operator REST api.\n+   */\n+  @Test\n+  @DisplayName(\"Upgrade Operator from 3.0.0 to latest\")\n+  @MustNotRunInParallel\n+  public void testOperatorUpgradeFrom3_0_0(@Namespaces(3) List<String> namespaces) {\n+    this.namespaces = namespaces;\n+    upgradeOperator(\"3.0.0\", true);\n+  }\n+\n+  /**\n+   * Cleanup Kubernetes artifacts in the namespaces used by the test and\n+   * delete CRD.\n+   */\n+  @AfterEach\n+  public void tearDown() {\n+    if (System.getenv(\"SKIP_CLEANUP\") == null) {\n+      CleanupUtil.cleanup(namespaces);\n+      new Command()\n+          .withParams(new CommandParams()\n+              .command(\"kubectl delete crd domains.weblogic.oracle --ignore-not-found\"))\n+          .execute();\n+    }\n+  }\n+\n+  private void upgradeOperator(String operatorVersion, boolean useHelmUpgrade) {\n+    logger.info(\"Assign a unique namespace for operator {0}\", operatorVersion);\n+    assertNotNull(namespaces.get(0), \"Namespace is null\");\n+    final String opNamespace1 = namespaces.get(0);\n+    logger.info(\"Assign a unique namespace for latest operator\");\n+    assertNotNull(namespaces.get(1), \"Namespace is null\");\n+    final String opNamespace2 = namespaces.get(1);\n+    logger.info(\"Assign a unique namespace for domain\");\n+    assertNotNull(namespaces.get(2), \"Namespace is null\");\n+    String domainNamespace = namespaces.get(2);\n+    latestOperatorImageName = getOperatorImageName();\n+\n+    // delete existing CRD\n+    new Command()\n+        .withParams(new CommandParams()\n+            .command(\"kubectl delete crd domains.weblogic.oracle --ignore-not-found\"))\n+        .execute();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "182deac1b9b3bddf93fada0d6968bfe84d5de94c"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI2MTg3OQ==", "bodyText": "If the tests fails here the CRD version will not be latest?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1841#discussion_r463261879", "createdAt": "2020-07-30T20:47:45Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorUpgrade.java", "diffHunk": "@@ -0,0 +1,387 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.annotations.tags.MustNotRunInParallel;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.CleanupUtil;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_GITHUB_CHART_REPO_URL;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.RESULTS_ROOT;\n+import static oracle.weblogic.kubernetes.TestConstants.WDT_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WDT_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.RESOURCE_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorContainerImageName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorImageName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.shutdownDomain;\n+import static oracle.weblogic.kubernetes.actions.TestActions.startDomain;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.adminNodePortAccessible;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.replaceStringInFile;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Operator upgrade tests.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Operator upgrade tests\")\n+@IntegrationTest\n+public class ItOperatorUpgrade {\n+\n+  public static final String LATEST_API_VERSION = \"v8\";\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static Map<String, Object> secretNameMap;\n+  private static LoggingFacade logger = null;\n+  private String domainUid = \"domain1\";\n+  private String adminServerPodName = domainUid + \"-admin-server\";\n+  private String managedServerPodNamePrefix = domainUid + \"-managed-server\";\n+  private int replicaCount = 2;\n+  private List<String> namespaces;\n+  private String latestOperatorImageName;\n+\n+  /**\n+   * Does some initialization of logger, conditionfactory, etc common\n+   * to all test methods.\n+   */\n+  @BeforeAll\n+  public static void init() {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(10, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+  }\n+\n+  /**\n+   * Operator upgrade from 2.5.0 to latest.\n+   * Install 2.5.0 release Operator from GitHub chart repository and create a domain.\n+   * Delete Operator and install latest Operator and verify CRD version is updated\n+   * and the domain can be managed by scaling the cluster using operator REST api.\n+   */\n+  @Test\n+  @DisplayName(\"Upgrade Operator from 2.5.0 to latest\")\n+  @MustNotRunInParallel\n+  public void testOperatorUpgradeFrom2_5_0(@Namespaces(3) List<String> namespaces) {\n+    this.namespaces = namespaces;\n+    upgradeOperator(\"2.5.0\", false);\n+  }\n+\n+  /**\n+   * Operator upgrade from 2.6.0 to latest.\n+   * Install 2.6.0 Operator from GitHub chart repository and create a domain.\n+   * Delete Operator and install latest Operator and verify CRD version is updated\n+   * and the domain can be managed by scaling the cluster using operator REST api.\n+   */\n+  @Test\n+  @DisplayName(\"Upgrade Operator from 2.6.0 to latest\")\n+  @MustNotRunInParallel\n+  public void testOperatorUpgradeFrom2_6_0(@Namespaces(3) List<String> namespaces) {\n+    this.namespaces = namespaces;\n+    upgradeOperator(\"2.6.0\", false);\n+  }\n+\n+  /**\n+   * Operator upgrade from 3.0.0 to latest.\n+   * Install 3.0.0 Operator from GitHub chart repository and create a domain.\n+   * Upgrade operator with latest Operator image and verify CRD version and image are updated\n+   * and the domain can be managed by scaling the cluster using operator REST api.\n+   */\n+  @Test\n+  @DisplayName(\"Upgrade Operator from 3.0.0 to latest\")\n+  @MustNotRunInParallel\n+  public void testOperatorUpgradeFrom3_0_0(@Namespaces(3) List<String> namespaces) {\n+    this.namespaces = namespaces;\n+    upgradeOperator(\"3.0.0\", true);\n+  }\n+\n+  /**\n+   * Cleanup Kubernetes artifacts in the namespaces used by the test and\n+   * delete CRD.\n+   */\n+  @AfterEach\n+  public void tearDown() {\n+    if (System.getenv(\"SKIP_CLEANUP\") == null) {\n+      CleanupUtil.cleanup(namespaces);\n+      new Command()\n+          .withParams(new CommandParams()\n+              .command(\"kubectl delete crd domains.weblogic.oracle --ignore-not-found\"))\n+          .execute();\n+    }\n+  }\n+\n+  private void upgradeOperator(String operatorVersion, boolean useHelmUpgrade) {\n+    logger.info(\"Assign a unique namespace for operator {0}\", operatorVersion);\n+    assertNotNull(namespaces.get(0), \"Namespace is null\");\n+    final String opNamespace1 = namespaces.get(0);\n+    logger.info(\"Assign a unique namespace for latest operator\");\n+    assertNotNull(namespaces.get(1), \"Namespace is null\");\n+    final String opNamespace2 = namespaces.get(1);\n+    logger.info(\"Assign a unique namespace for domain\");\n+    assertNotNull(namespaces.get(2), \"Namespace is null\");\n+    String domainNamespace = namespaces.get(2);\n+    latestOperatorImageName = getOperatorImageName();\n+\n+    // delete existing CRD\n+    new Command()\n+        .withParams(new CommandParams()\n+            .command(\"kubectl delete crd domains.weblogic.oracle --ignore-not-found\"))\n+        .execute();\n+\n+    HelmParams opHelmParams =\n+        new HelmParams().releaseName(\"weblogic-operator\")\n+            .namespace(opNamespace1)\n+            .repoUrl(OPERATOR_GITHUB_CHART_REPO_URL)\n+            .repoName(\"weblogic-operator\")\n+            .chartName(\"weblogic-operator\")\n+            .chartVersion(operatorVersion);\n+\n+    // install operator\n+    String opNamespace = opNamespace1;\n+    String opServiceAccount = opNamespace + \"-sa\";\n+    installAndVerifyOperator(opNamespace, opServiceAccount, true,\n+        0, opHelmParams, domainNamespace);\n+\n+    // create domain\n+    createDomainHomeInImageAndVerify(domainNamespace, operatorVersion);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "182deac1b9b3bddf93fada0d6968bfe84d5de94c"}, "originalPosition": 188}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4Nzk4Nzgy", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1841#pullrequestreview-458798782", "createdAt": "2020-07-30T22:23:08Z", "commit": {"oid": "182deac1b9b3bddf93fada0d6968bfe84d5de94c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMjoyMzowOFrOG513Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMjozNzoxOVrOG52NUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMwNDQ4Nw==", "bodyText": "Should we move LATEST_API_VERSION to test constants and make it configurable with env var?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1841#discussion_r463304487", "createdAt": "2020-07-30T22:23:08Z", "author": {"login": "marinakog"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorUpgrade.java", "diffHunk": "@@ -0,0 +1,387 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+\n+import oracle.weblogic.kubernetes.actions.impl.OperatorParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.HelmParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.annotations.tags.MustNotRunInParallel;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import oracle.weblogic.kubernetes.utils.CleanupUtil;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_CHART_DIR;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_GITHUB_CHART_REPO_URL;\n+import static oracle.weblogic.kubernetes.TestConstants.OPERATOR_RELEASE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.RESULTS_ROOT;\n+import static oracle.weblogic.kubernetes.TestConstants.WDT_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.WDT_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.RESOURCE_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorContainerImageName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getOperatorImageName;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.TestActions.shutdownDomain;\n+import static oracle.weblogic.kubernetes.actions.TestActions.startDomain;\n+import static oracle.weblogic.kubernetes.actions.TestActions.uninstallOperator;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.adminNodePortAccessible;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.scaleAndVerifyCluster;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.upgradeAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.replaceStringInFile;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Operator upgrade tests.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Operator upgrade tests\")\n+@IntegrationTest\n+public class ItOperatorUpgrade {\n+\n+  public static final String LATEST_API_VERSION = \"v8\";\n+  private static ConditionFactory withStandardRetryPolicy = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "182deac1b9b3bddf93fada0d6968bfe84d5de94c"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMwOTYzNw==", "bodyText": "remove commented out pvc config", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1841#discussion_r463309637", "createdAt": "2020-07-30T22:35:41Z", "author": {"login": "marinakog"}, "path": "new-integration-tests/src/test/resources/domain/domain-260.yaml", "diffHunk": "@@ -0,0 +1,113 @@\n+# Copyright (c) 2017, 2019, Oracle Corporation and/or its affiliates. All rights reserved.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# This is an example of how to define a Domain resource.\n+#\n+apiVersion: \"weblogic.oracle/v7\"\n+kind: Domain\n+metadata:\n+  name: domain1\n+  namespace: weblogic-domain260\n+  labels:\n+    weblogic.resourceVersion: domain-v2\n+    weblogic.domainUID: domain1\n+spec:\n+  # The WebLogic Domain Home\n+  domainHome: /u01/oracle/user_projects/domains/domain1\n+\n+  # If the domain home is in the image\n+  domainHomeInImage: true\n+\n+  # The WebLogic Server Docker image that the Operator uses to start the domain\n+  image: \"domain-home-in-image:12.2.1.4\"\n+\n+  # imagePullPolicy defaults to \"Always\" if image version is :latest\n+  imagePullPolicy: \"IfNotPresent\"\n+\n+  # Identify which Secret contains the credentials for pulling an image\n+  imagePullSecrets:\n+  - name: ocir-secret \n+\n+  # Identify which Secret contains the WebLogic Admin credentials (note that there is an example of\n+  # how to create that Secret at the end of this file)\n+  webLogicCredentialsSecret: \n+    name: weblogic-credentials\n+\n+  # Whether to include the server out file into the pod's stdout, default is true\n+  includeServerOutInPodLog: true\n+\n+  # Whether to enable log home\n+  logHomeEnabled: false\n+\n+  # The in-pod location for domain log, server logs, server out, and Node Manager log files\n+  logHome: /shared/logs/domain1\n+  # An (optional) in-pod location for data storage of default and custom file stores.\n+  # If not specified or the value is either not set or empty (e.g. dataHome: \"\") then the\n+  # data storage directories are determined from the WebLogic domain home configuration.\n+  dataHome: \"\"\n+\n+  # serverStartPolicy legal values are \"NEVER\", \"IF_NEEDED\", or \"ADMIN_ONLY\"\n+  # This determines which WebLogic Servers the Operator will start up when it discovers this Domain\n+  # - \"NEVER\" will not start any server in the domain\n+  # - \"ADMIN_ONLY\" will start up only the administration server (no managed servers will be started)\n+  # - \"IF_NEEDED\" will start all non-clustered servers, including the administration server and clustered servers up to the replica count\n+  serverStartPolicy: \"IF_NEEDED\"\n+\n+  serverPod:\n+    # an (optional) list of environment variable to be set on the servers\n+    env:\n+    - name: JAVA_OPTIONS\n+      value: \"-Dweblogic.StdoutDebugEnabled=false\"\n+    - name: USER_MEM_ARGS\n+      value: \"-Djava.security.egd=file:/dev/./urandom \"\n+    # volumes:\n+    # - name: weblogic-domain-storage-volume\n+    #   persistentVolumeClaim:\n+    #     claimName: domain1-weblogic-sample-pvc\n+    # volumeMounts:\n+    # - mountPath: /shared\n+    #   name: weblogic-domain-storage-volume\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "182deac1b9b3bddf93fada0d6968bfe84d5de94c"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMxMDE2Mw==", "bodyText": "hardcoded nodePort might effect runs in parallel", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1841#discussion_r463310163", "createdAt": "2020-07-30T22:37:19Z", "author": {"login": "marinakog"}, "path": "new-integration-tests/src/test/resources/domain/domain-260.yaml", "diffHunk": "@@ -0,0 +1,113 @@\n+# Copyright (c) 2017, 2019, Oracle Corporation and/or its affiliates. All rights reserved.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# This is an example of how to define a Domain resource.\n+#\n+apiVersion: \"weblogic.oracle/v7\"\n+kind: Domain\n+metadata:\n+  name: domain1\n+  namespace: weblogic-domain260\n+  labels:\n+    weblogic.resourceVersion: domain-v2\n+    weblogic.domainUID: domain1\n+spec:\n+  # The WebLogic Domain Home\n+  domainHome: /u01/oracle/user_projects/domains/domain1\n+\n+  # If the domain home is in the image\n+  domainHomeInImage: true\n+\n+  # The WebLogic Server Docker image that the Operator uses to start the domain\n+  image: \"domain-home-in-image:12.2.1.4\"\n+\n+  # imagePullPolicy defaults to \"Always\" if image version is :latest\n+  imagePullPolicy: \"IfNotPresent\"\n+\n+  # Identify which Secret contains the credentials for pulling an image\n+  imagePullSecrets:\n+  - name: ocir-secret \n+\n+  # Identify which Secret contains the WebLogic Admin credentials (note that there is an example of\n+  # how to create that Secret at the end of this file)\n+  webLogicCredentialsSecret: \n+    name: weblogic-credentials\n+\n+  # Whether to include the server out file into the pod's stdout, default is true\n+  includeServerOutInPodLog: true\n+\n+  # Whether to enable log home\n+  logHomeEnabled: false\n+\n+  # The in-pod location for domain log, server logs, server out, and Node Manager log files\n+  logHome: /shared/logs/domain1\n+  # An (optional) in-pod location for data storage of default and custom file stores.\n+  # If not specified or the value is either not set or empty (e.g. dataHome: \"\") then the\n+  # data storage directories are determined from the WebLogic domain home configuration.\n+  dataHome: \"\"\n+\n+  # serverStartPolicy legal values are \"NEVER\", \"IF_NEEDED\", or \"ADMIN_ONLY\"\n+  # This determines which WebLogic Servers the Operator will start up when it discovers this Domain\n+  # - \"NEVER\" will not start any server in the domain\n+  # - \"ADMIN_ONLY\" will start up only the administration server (no managed servers will be started)\n+  # - \"IF_NEEDED\" will start all non-clustered servers, including the administration server and clustered servers up to the replica count\n+  serverStartPolicy: \"IF_NEEDED\"\n+\n+  serverPod:\n+    # an (optional) list of environment variable to be set on the servers\n+    env:\n+    - name: JAVA_OPTIONS\n+      value: \"-Dweblogic.StdoutDebugEnabled=false\"\n+    - name: USER_MEM_ARGS\n+      value: \"-Djava.security.egd=file:/dev/./urandom \"\n+    # volumes:\n+    # - name: weblogic-domain-storage-volume\n+    #   persistentVolumeClaim:\n+    #     claimName: domain1-weblogic-sample-pvc\n+    # volumeMounts:\n+    # - mountPath: /shared\n+    #   name: weblogic-domain-storage-volume\n+\n+  # adminServer is used to configure the desired behavior for starting the administration server.\n+  adminServer:\n+    # serverStartState legal values are \"RUNNING\" or \"ADMIN\"\n+    # \"RUNNING\" means the listed server will be started up to \"RUNNING\" mode\n+    # \"ADMIN\" means the listed server will be start up to \"ADMIN\" mode\n+    serverStartState: \"RUNNING\"\n+    adminService:\n+      channels:\n+    # The Admin Server's NodePort\n+       - channelName: default\n+         nodePort: 30802\n+    # Uncomment to export the T3Channel as a service", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "182deac1b9b3bddf93fada0d6968bfe84d5de94c"}, "originalPosition": 82}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "decc5b11087cb3207d506ff3f81f8e0002d02efe", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/decc5b11087cb3207d506ff3f81f8e0002d02efe", "committedDate": "2020-07-31T01:16:49Z", "message": "use 0 for external rest port"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40c94c87e23ec5775dda4d141048955eff43233e", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/40c94c87e23ec5775dda4d141048955eff43233e", "committedDate": "2020-07-31T01:23:44Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into operator-upgrade-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59e1ba0e81291719bcea94f08ffc74caa6575109", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/59e1ba0e81291719bcea94f08ffc74caa6575109", "committedDate": "2020-07-31T01:28:59Z", "message": "adding jira in comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee08574ed0865971a4fe6bb98dede1a6ed30ec74", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ee08574ed0865971a4fe6bb98dede1a6ed30ec74", "committedDate": "2020-07-31T01:43:51Z", "message": "javadoc changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "182deac1b9b3bddf93fada0d6968bfe84d5de94c", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/182deac1b9b3bddf93fada0d6968bfe84d5de94c", "committedDate": "2020-07-31T02:58:59Z", "message": "exclude upgrade test in full test run"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMjcxODYx", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1841#pullrequestreview-460271861", "createdAt": "2020-08-03T19:05:26Z", "commit": {"oid": "5cf5f0e7f09dd87230c1527cc36e5f21ea000b22"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMjg3OTEy", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1841#pullrequestreview-460287912", "createdAt": "2020-08-03T19:33:21Z", "commit": {"oid": "5cf5f0e7f09dd87230c1527cc36e5f21ea000b22"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cf5f0e7f09dd87230c1527cc36e5f21ea000b22", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5cf5f0e7f09dd87230c1527cc36e5f21ea000b22", "committedDate": "2020-08-03T22:48:09Z", "message": "address review comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4336, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}