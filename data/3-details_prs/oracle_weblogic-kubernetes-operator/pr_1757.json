{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4MTE0OTg3", "number": 1757, "title": "converted ItMonitorintExporter tests to junit5", "bodyText": "https://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-model-in-image-tests-10/416\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/502/", "createdAt": "2020-06-22T18:42:35Z", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1757", "merged": true, "mergeCommit": {"oid": "66797048a17f7d8a7834d5056dcba4c78202e74d"}, "closed": true, "closedAt": "2020-06-26T17:13:59Z", "author": {"login": "marinakog"}, "timelineItems": {"totalCount": 76, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclcaj5AH2gAyNDM4MTE0OTg3OjRjMGYwZTM1ODMwY2M2NGUxYTQ5NzIxODViMGMwOWViYTIxMzM2MjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcu2RRKAH2gAyNDM4MTE0OTg3Ojc3MjZkOWY2NzMxZmM5NDQwZWIwYTdiNDY5NDEzYTg4OTAxOGFmNjk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4c0f0e35830cc64e1a4972185b0c09eba2133622", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/4c0f0e35830cc64e1a4972185b0c09eba2133622", "committedDate": "2020-05-27T17:07:38Z", "message": "added prom support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a6d44b33048c9e8093ddfd5be6dc3e04d7fbdc3", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3a6d44b33048c9e8093ddfd5be6dc3e04d7fbdc3", "committedDate": "2020-05-27T17:13:03Z", "message": "merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9733f9718e65f6587ff570e5dcab17022aefd94f", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/9733f9718e65f6587ff570e5dcab17022aefd94f", "committedDate": "2020-06-01T02:02:05Z", "message": "added support for coord, webhook"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83bce0092691778587c4c8f720b919d9b93f405b", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/83bce0092691778587c4c8f720b919d9b93f405b", "committedDate": "2020-06-01T02:28:06Z", "message": "merge with develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d21ca470d7aca52f0c1d8216f0e80c107c7b79f", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8d21ca470d7aca52f0c1d8216f0e80c107c7b79f", "committedDate": "2020-06-01T02:36:11Z", "message": "fixed typos"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3619c1d635d83424b5ce0900baf62bd7411b7b57", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3619c1d635d83424b5ce0900baf62bd7411b7b57", "committedDate": "2020-06-01T15:39:18Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into promtest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b663d70caf24fedd788eba4c475f1f5089dfe80", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8b663d70caf24fedd788eba4c475f1f5089dfe80", "committedDate": "2020-06-02T17:38:28Z", "message": "added support to deploy archived file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec54129757cfa6aadb61140cc278f7621eebab8e", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ec54129757cfa6aadb61140cc278f7621eebab8e", "committedDate": "2020-06-02T17:38:40Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into promtest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "953e86eefe00968e4cee5d52561f12e679324d71", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/953e86eefe00968e4cee5d52561f12e679324d71", "committedDate": "2020-06-02T18:11:34Z", "message": "fixed monexp app check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f54e67f3dd40ef1940572b6e81ca203e7ef275a2", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f54e67f3dd40ef1940572b6e81ca203e7ef275a2", "committedDate": "2020-06-02T22:43:03Z", "message": "fixed style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "274e36bb2af2eec639a0f90523faa9a5ad00c99b", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/274e36bb2af2eec639a0f90523faa9a5ad00c99b", "committedDate": "2020-06-02T22:45:26Z", "message": "fixed style1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd2a7e3b627d8221cb39635fac9cfde87f45ef1c", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/fd2a7e3b627d8221cb39635fac9cfde87f45ef1c", "committedDate": "2020-06-03T02:11:01Z", "message": "fixed push image"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15f2f56078fe2583236ac6d90b23b9915e9e1060", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/15f2f56078fe2583236ac6d90b23b9915e9e1060", "committedDate": "2020-06-03T15:10:37Z", "message": "fixed style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "336fcf99713b9352a9cae4a7fcbccfcdf2087d17", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/336fcf99713b9352a9cae4a7fcbccfcdf2087d17", "committedDate": "2020-06-03T15:10:46Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into promtest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3d918be49df6f22c650ab52cc21f79be9b2fbe0", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a3d918be49df6f22c650ab52cc21f79be9b2fbe0", "committedDate": "2020-06-03T16:10:04Z", "message": "fixed deployment delete"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8308ec0ed935b1bf89f3477a6b30ca29c7b2332a", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8308ec0ed935b1bf89f3477a6b30ca29c7b2332a", "committedDate": "2020-06-03T17:10:08Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8828d6bc3e02d9e4e8b2c382a17db5fe842e7cb", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f8828d6bc3e02d9e4e8b2c382a17db5fe842e7cb", "committedDate": "2020-06-03T17:13:25Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c0069fcdd5dd1b5c17bc523c57b421ab4210cd6", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6c0069fcdd5dd1b5c17bc523c57b421ab4210cd6", "committedDate": "2020-06-03T17:22:22Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af1b8a8538a46bca0eae23e250fc85439b71e0d6", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/af1b8a8538a46bca0eae23e250fc85439b71e0d6", "committedDate": "2020-06-04T23:18:31Z", "message": "addressed comments from review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a2a8c241214d86f1ff46ba85e3b4a146272a595", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/9a2a8c241214d86f1ff46ba85e3b4a146272a595", "committedDate": "2020-06-04T23:18:39Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into promtest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5633729bddf3c70f1ed36f67cd176dbbf3a2f82e", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5633729bddf3c70f1ed36f67cd176dbbf3a2f82e", "committedDate": "2020-06-05T00:01:54Z", "message": "checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c154d759b9e59d3c5589e99da7d3673ddb6b7aa4", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c154d759b9e59d3c5589e99da7d3673ddb6b7aa4", "committedDate": "2020-06-05T06:29:39Z", "message": "fixed logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05b7044280e0dca89df35a1e7ebd4d7b4da1f3e2", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/05b7044280e0dca89df35a1e7ebd4d7b4da1f3e2", "committedDate": "2020-06-05T19:48:41Z", "message": "modified isPodReady"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb12375980da4a7c2fd2639ebcb4bd78d2e8ac58", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/eb12375980da4a7c2fd2639ebcb4bd78d2e8ac58", "committedDate": "2020-06-05T19:50:51Z", "message": "merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf6004aba59b0987486d4f5cb8bc0edea3e4820d", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/cf6004aba59b0987486d4f5cb8bc0edea3e4820d", "committedDate": "2020-06-08T15:31:13Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into promtest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f53a37a1d6397f70bfaca98042e1b37b0e8d2c64", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f53a37a1d6397f70bfaca98042e1b37b0e8d2c64", "committedDate": "2020-06-08T15:34:59Z", "message": "moved replaceString to testutils"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b4c1de8795dd86e2deae8bfcc8ecd8715f26efa", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3b4c1de8795dd86e2deae8bfcc8ecd8715f26efa", "committedDate": "2020-06-08T17:38:39Z", "message": "fixed comments, changed map processing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42801409d9da53d46169e82743d2dc9a6acf0abc", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/42801409d9da53d46169e82743d2dc9a6acf0abc", "committedDate": "2020-06-09T15:16:02Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into promtest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "128ce9fd695305f280a85dc93002ad908c5e0b30", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/128ce9fd695305f280a85dc93002ad908c5e0b30", "committedDate": "2020-06-09T15:48:11Z", "message": "deleted unused vars, split methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1871c2db1014d65e8f410d3087a41cb1bb650c89", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/1871c2db1014d65e8f410d3087a41cb1bb650c89", "committedDate": "2020-06-09T17:22:44Z", "message": "replaced with descriptive var name, fixed processing of multiple webapps files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c43e2ac0d51de5091fc767e606b3ea388a4f254", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6c43e2ac0d51de5091fc767e606b3ea388a4f254", "committedDate": "2020-06-09T17:42:56Z", "message": "style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a15a27cbbd0a157aeb79fd9efe20015ef86d22b9", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a15a27cbbd0a157aeb79fd9efe20015ef86d22b9", "committedDate": "2020-06-09T21:14:18Z", "message": "typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7e47e3c85a81341963e7c6f4b024609f5e1b1f0", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a7e47e3c85a81341963e7c6f4b024609f5e1b1f0", "committedDate": "2020-06-09T21:37:17Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into promtest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07f8221366e971e96609e15d72ef5164b93831ed", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/07f8221366e971e96609e15d72ef5164b93831ed", "committedDate": "2020-06-14T16:03:23Z", "message": "added endtoend"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99d1d5bd8bdc9dd4b20e4c5963a5da99254941e1", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/99d1d5bd8bdc9dd4b20e4c5963a5da99254941e1", "committedDate": "2020-06-14T16:14:40Z", "message": "merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5df72cd0ed90e5e0324121f1d1bb0fab90786211", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5df72cd0ed90e5e0324121f1d1bb0fab90786211", "committedDate": "2020-06-14T17:35:27Z", "message": "merged bhavani impl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5ce0f13e152962abc1196686d0872e94c7db9cd", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a5ce0f13e152962abc1196686d0872e94c7db9cd", "committedDate": "2020-06-15T16:26:48Z", "message": "fixed scaling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5d2117b91264f08366d6d3c7f82ae734ce6f640", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e5d2117b91264f08366d6d3c7f82ae734ce6f640", "committedDate": "2020-06-15T23:47:28Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into promtest1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5da933c6c7ae6f091977a1e95f9c70caba445d7", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b5da933c6c7ae6f091977a1e95f9c70caba445d7", "committedDate": "2020-06-18T18:53:01Z", "message": "added func tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f11b85c268cf876bc290cfc47e20c1056f849346", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f11b85c268cf876bc290cfc47e20c1056f849346", "committedDate": "2020-06-18T18:54:40Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into promtest2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "806066f4dd6fffa23c696bb67fe869c759e65594", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/806066f4dd6fffa23c696bb67fe869c759e65594", "committedDate": "2020-06-19T17:58:52Z", "message": "fixed logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f30b5a426bcc615d98bd4e9acbda80ac306649f", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6f30b5a426bcc615d98bd4e9acbda80ac306649f", "committedDate": "2020-06-19T18:00:40Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into promtest2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "243eda14dc357b3a235e30ff57ef5666635a193c", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/243eda14dc357b3a235e30ff57ef5666635a193c", "committedDate": "2020-06-20T20:32:43Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4b39a34f9ac56e2508a634ab6e8194c3d3dc669", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e4b39a34f9ac56e2508a634ab6e8194c3d3dc669", "committedDate": "2020-06-20T21:06:08Z", "message": "merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bd5bfb3ee70385480b851038e7766f6665fe340", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/2bd5bfb3ee70385480b851038e7766f6665fe340", "committedDate": "2020-06-21T21:52:33Z", "message": " added fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "757f40a90e3108c4e5cb2b80dcfc4a04b58d2f87", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/757f40a90e3108c4e5cb2b80dcfc4a04b58d2f87", "committedDate": "2020-06-22T03:35:31Z", "message": "fix logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bbe9ed75398391152bbec2152819b83b03bad59", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3bbe9ed75398391152bbec2152819b83b03bad59", "committedDate": "2020-06-22T18:25:56Z", "message": "fixed test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1ODgwMjQ0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1757#pullrequestreview-435880244", "createdAt": "2020-06-23T15:07:06Z", "commit": {"oid": "3bbe9ed75398391152bbec2152819b83b03bad59"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTowNzowNlrOGntyPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTo0MzoyMlrOGnvWdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI5Nzc4OQ==", "bodyText": "Dongbo has refactored a method to use common code, please see if that is useful here.\nhttps://github.com/oracle/weblogic-kubernetes-operator/pull/1759/files#diff-563c7e0923febf5308b79abec0486d46", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1757#discussion_r444297789", "createdAt": "2020-06-23T15:07:06Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMonitoringExporter.java", "diffHunk": "@@ -226,112 +256,380 @@ public static void initAll(@Namespaces(6) List<String> namespaces) {\n     installMonitoringExporter();\n \n     // create and verify WebLogic domain image using model in image with model files\n-    String imageName = createAndVerifyDomainImage();\n+    miiImage = createAndVerifyMiiImage();\n \n-    // create and verify one cluster domain\n+    // create and verify one cluster mii domain\n     logger.info(\"Create domain and verify that it's running\");\n-    createAndVerifyDomain(imageName, domain1Uid);\n+    createAndVerifyDomain(miiImage, domain1Uid, domain1Namespace, \"FromModel\", 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bbe9ed75398391152bbec2152819b83b03bad59"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMwMjczMg==", "bodyText": "Please fix punctuation. It looks like this when javadoc is viewed.\nTest covers end to end sample, provided in the Monitoring Exporter github project . Create Prometheus, Grafana, Webhook, Coordinator create domain in Image with monitoring exporter verify access to monitoring exporter WebLogic metrics via nginx check generated by monitoring exporter WebLogic metrics via Prometheus, Grafana fire Alert using Webhook change prometheus to add different domain to monitor", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1757#discussion_r444302732", "createdAt": "2020-06-23T15:14:10Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMonitoringExporter.java", "diffHunk": "@@ -226,112 +256,380 @@ public static void initAll(@Namespaces(6) List<String> namespaces) {\n     installMonitoringExporter();\n \n     // create and verify WebLogic domain image using model in image with model files\n-    String imageName = createAndVerifyDomainImage();\n+    miiImage = createAndVerifyMiiImage();\n \n-    // create and verify one cluster domain\n+    // create and verify one cluster mii domain\n     logger.info(\"Create domain and verify that it's running\");\n-    createAndVerifyDomain(imageName, domain1Uid);\n+    createAndVerifyDomain(miiImage, domain1Uid, domain1Namespace, \"FromModel\", 1);\n \n     // get a free node port for NGINX\n-    nodeportshttp = getNextFreePort(30305, 30405);\n-    int nodeportshttps = getNextFreePort(30443, 30543);\n+    nodeportshttp1 = getNextFreePort(30305, 30405);\n+    nodeportshttp2 = getNextFreePort(30305, 30405);\n+    int nodeportshttps1 = getNextFreePort(30443, 30543);\n \n     // install and verify NGINX\n-    nginxHelmParams = installAndVerifyNginx(nginxNamespace, nodeportshttp, nodeportshttps);\n+    nginxHelmParams1 = installAndVerifyNginx(nginxNamespace1, nodeportshttp1, nodeportshttps1);\n     // create ingress for the domain\n     logger.info(\"Creating ingress for domain {0} in namespace {1}\", domain1Uid, domain1Namespace);\n-    Map<String, Integer> clusterNameMsPortMap = new HashMap<>();\n+    clusterNameMsPortMap = new HashMap<>();\n     clusterNameMsPortMap.put(clusterName, managedServerPort);\n-    ingressHostList =\n-        createIngressForDomainAndVerify(domain1Uid, domain1Namespace, clusterNameMsPortMap);\n+    ingressHost1List =\n+        createIngressForDomainAndVerify(domain1Uid, domain1Namespace,clusterNameMsPortMap, false);\n+\n+    exporterUrl = String.format(\"http://%s:%s/wls-exporter/\",K8S_NODEPORT_HOST,nodeportshttp1);\n+\n+    //create pv and pvc for monitoring\n+    HashMap<String, String> labels = new HashMap<>();\n+    labels.put(\"app\", \"monitoring\");\n+    labels.put(\"weblogic.domainUid\", domain1Uid);\n+    assertDoesNotThrow(() -> createPvAndPvc(\"prometheus\", monitoringNS, labels));\n+    assertDoesNotThrow(() -> createPvAndPvc(\"alertmanager\",monitoringNS, labels));\n+    assertDoesNotThrow(() -> createPvAndPvc(\"grafana\", monitoringNS, labels));\n \n   }\n \n   /**\n-   * Test covers the following use cases.\n+   * Test covers end to end sample, provided in the Monitoring Exporter github project .\n    * Create Prometheus, Grafana, Webhook, Coordinator\n-   * create domain Model in Image with monitoring exporter\n+   * create domain in Image with monitoring exporter\n    * verify access to monitoring exporter WebLogic metrics via nginx\n-   * check generated by monitoring exporter WebLogic metrics via Prometheus\n+   * check generated by monitoring exporter WebLogic metrics via Prometheus, Grafana\n+   * fire Alert using Webhook", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bbe9ed75398391152bbec2152819b83b03bad59"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMwNjc2Mw==", "bodyText": "The above comments can be logged as messages, easier to debug when test fails.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1757#discussion_r444306763", "createdAt": "2020-06-23T15:19:43Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMonitoringExporter.java", "diffHunk": "@@ -226,112 +256,380 @@ public static void initAll(@Namespaces(6) List<String> namespaces) {\n     installMonitoringExporter();\n \n     // create and verify WebLogic domain image using model in image with model files\n-    String imageName = createAndVerifyDomainImage();\n+    miiImage = createAndVerifyMiiImage();\n \n-    // create and verify one cluster domain\n+    // create and verify one cluster mii domain\n     logger.info(\"Create domain and verify that it's running\");\n-    createAndVerifyDomain(imageName, domain1Uid);\n+    createAndVerifyDomain(miiImage, domain1Uid, domain1Namespace, \"FromModel\", 1);\n \n     // get a free node port for NGINX\n-    nodeportshttp = getNextFreePort(30305, 30405);\n-    int nodeportshttps = getNextFreePort(30443, 30543);\n+    nodeportshttp1 = getNextFreePort(30305, 30405);\n+    nodeportshttp2 = getNextFreePort(30305, 30405);\n+    int nodeportshttps1 = getNextFreePort(30443, 30543);\n \n     // install and verify NGINX\n-    nginxHelmParams = installAndVerifyNginx(nginxNamespace, nodeportshttp, nodeportshttps);\n+    nginxHelmParams1 = installAndVerifyNginx(nginxNamespace1, nodeportshttp1, nodeportshttps1);\n     // create ingress for the domain\n     logger.info(\"Creating ingress for domain {0} in namespace {1}\", domain1Uid, domain1Namespace);\n-    Map<String, Integer> clusterNameMsPortMap = new HashMap<>();\n+    clusterNameMsPortMap = new HashMap<>();\n     clusterNameMsPortMap.put(clusterName, managedServerPort);\n-    ingressHostList =\n-        createIngressForDomainAndVerify(domain1Uid, domain1Namespace, clusterNameMsPortMap);\n+    ingressHost1List =\n+        createIngressForDomainAndVerify(domain1Uid, domain1Namespace,clusterNameMsPortMap, false);\n+\n+    exporterUrl = String.format(\"http://%s:%s/wls-exporter/\",K8S_NODEPORT_HOST,nodeportshttp1);\n+\n+    //create pv and pvc for monitoring\n+    HashMap<String, String> labels = new HashMap<>();\n+    labels.put(\"app\", \"monitoring\");\n+    labels.put(\"weblogic.domainUid\", domain1Uid);\n+    assertDoesNotThrow(() -> createPvAndPvc(\"prometheus\", monitoringNS, labels));\n+    assertDoesNotThrow(() -> createPvAndPvc(\"alertmanager\",monitoringNS, labels));\n+    assertDoesNotThrow(() -> createPvAndPvc(\"grafana\", monitoringNS, labels));\n \n   }\n \n   /**\n-   * Test covers the following use cases.\n+   * Test covers end to end sample, provided in the Monitoring Exporter github project .\n    * Create Prometheus, Grafana, Webhook, Coordinator\n-   * create domain Model in Image with monitoring exporter\n+   * create domain in Image with monitoring exporter\n    * verify access to monitoring exporter WebLogic metrics via nginx\n-   * check generated by monitoring exporter WebLogic metrics via Prometheus\n+   * check generated by monitoring exporter WebLogic metrics via Prometheus, Grafana\n+   * fire Alert using Webhook\n+   * change prometheus to add different domain to monitor\n    */\n   @Test\n-  @DisplayName(\"Install Prometheus, Grafana , Webhook, Coordinator and verify WebLogic metrics\")\n-  public void testCheckMetrics() throws Exception {\n+  @DisplayName(\"Test End to End example from MonitoringExporter github project.\")\n+  public void testEndToEndViaChart() throws Exception {\n+    wdtImage = createAndVerifyDomainInImage();\n+    try {\n+      // create and verify one cluster wdt domain\n+      logger.info(\"Create wdt domain and verify that it's running\");\n+      createAndVerifyDomain(wdtImage, domain2Uid, domain2Namespace, \"Image\", replicaCount);\n+      ingressHost2List =\n+              createIngressForDomainAndVerify(domain2Uid, domain2Namespace, clusterNameMsPortMap);\n+\n+      installPrometheusGrafana(PROMETHEUS_CHART_VERSION, GRAFANA_CHART_VERSION,\n+              domain2Namespace,\n+              domain2Uid);\n+\n+      installWebhook();\n+      installCoordinator(domain2Namespace);\n+\n+      //verify access to Monitoring Exporter\n+      verifyMonExpAppAccessThroughNginx(ingressHost2List.get(0), managedServersCount);\n+      //verify metrics via prometheus\n+      String testappPrometheusSearchKey =\n+              \"wls_servlet_invocation_total_count%7Bapp%3D%22test-webapp%22%7D%5B15s%5D\";\n+      checkMetricsViaPrometheus(testappPrometheusSearchKey, \"test-webapp\");\n+      //fire alert by scaling down\n+      fireAlert();\n+      //switch to monitor another domain", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bbe9ed75398391152bbec2152819b83b03bad59"}, "originalPosition": 238}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMwNzE4NQ==", "bodyText": "Fix javadoc", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1757#discussion_r444307185", "createdAt": "2020-06-23T15:20:20Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMonitoringExporter.java", "diffHunk": "@@ -226,112 +256,380 @@ public static void initAll(@Namespaces(6) List<String> namespaces) {\n     installMonitoringExporter();\n \n     // create and verify WebLogic domain image using model in image with model files\n-    String imageName = createAndVerifyDomainImage();\n+    miiImage = createAndVerifyMiiImage();\n \n-    // create and verify one cluster domain\n+    // create and verify one cluster mii domain\n     logger.info(\"Create domain and verify that it's running\");\n-    createAndVerifyDomain(imageName, domain1Uid);\n+    createAndVerifyDomain(miiImage, domain1Uid, domain1Namespace, \"FromModel\", 1);\n \n     // get a free node port for NGINX\n-    nodeportshttp = getNextFreePort(30305, 30405);\n-    int nodeportshttps = getNextFreePort(30443, 30543);\n+    nodeportshttp1 = getNextFreePort(30305, 30405);\n+    nodeportshttp2 = getNextFreePort(30305, 30405);\n+    int nodeportshttps1 = getNextFreePort(30443, 30543);\n \n     // install and verify NGINX\n-    nginxHelmParams = installAndVerifyNginx(nginxNamespace, nodeportshttp, nodeportshttps);\n+    nginxHelmParams1 = installAndVerifyNginx(nginxNamespace1, nodeportshttp1, nodeportshttps1);\n     // create ingress for the domain\n     logger.info(\"Creating ingress for domain {0} in namespace {1}\", domain1Uid, domain1Namespace);\n-    Map<String, Integer> clusterNameMsPortMap = new HashMap<>();\n+    clusterNameMsPortMap = new HashMap<>();\n     clusterNameMsPortMap.put(clusterName, managedServerPort);\n-    ingressHostList =\n-        createIngressForDomainAndVerify(domain1Uid, domain1Namespace, clusterNameMsPortMap);\n+    ingressHost1List =\n+        createIngressForDomainAndVerify(domain1Uid, domain1Namespace,clusterNameMsPortMap, false);\n+\n+    exporterUrl = String.format(\"http://%s:%s/wls-exporter/\",K8S_NODEPORT_HOST,nodeportshttp1);\n+\n+    //create pv and pvc for monitoring\n+    HashMap<String, String> labels = new HashMap<>();\n+    labels.put(\"app\", \"monitoring\");\n+    labels.put(\"weblogic.domainUid\", domain1Uid);\n+    assertDoesNotThrow(() -> createPvAndPvc(\"prometheus\", monitoringNS, labels));\n+    assertDoesNotThrow(() -> createPvAndPvc(\"alertmanager\",monitoringNS, labels));\n+    assertDoesNotThrow(() -> createPvAndPvc(\"grafana\", monitoringNS, labels));\n \n   }\n \n   /**\n-   * Test covers the following use cases.\n+   * Test covers end to end sample, provided in the Monitoring Exporter github project .\n    * Create Prometheus, Grafana, Webhook, Coordinator\n-   * create domain Model in Image with monitoring exporter\n+   * create domain in Image with monitoring exporter\n    * verify access to monitoring exporter WebLogic metrics via nginx\n-   * check generated by monitoring exporter WebLogic metrics via Prometheus\n+   * check generated by monitoring exporter WebLogic metrics via Prometheus, Grafana\n+   * fire Alert using Webhook\n+   * change prometheus to add different domain to monitor\n    */\n   @Test\n-  @DisplayName(\"Install Prometheus, Grafana , Webhook, Coordinator and verify WebLogic metrics\")\n-  public void testCheckMetrics() throws Exception {\n+  @DisplayName(\"Test End to End example from MonitoringExporter github project.\")\n+  public void testEndToEndViaChart() throws Exception {\n+    wdtImage = createAndVerifyDomainInImage();\n+    try {\n+      // create and verify one cluster wdt domain\n+      logger.info(\"Create wdt domain and verify that it's running\");\n+      createAndVerifyDomain(wdtImage, domain2Uid, domain2Namespace, \"Image\", replicaCount);\n+      ingressHost2List =\n+              createIngressForDomainAndVerify(domain2Uid, domain2Namespace, clusterNameMsPortMap);\n+\n+      installPrometheusGrafana(PROMETHEUS_CHART_VERSION, GRAFANA_CHART_VERSION,\n+              domain2Namespace,\n+              domain2Uid);\n+\n+      installWebhook();\n+      installCoordinator(domain2Namespace);\n+\n+      //verify access to Monitoring Exporter\n+      verifyMonExpAppAccessThroughNginx(ingressHost2List.get(0), managedServersCount);\n+      //verify metrics via prometheus\n+      String testappPrometheusSearchKey =\n+              \"wls_servlet_invocation_total_count%7Bapp%3D%22test-webapp%22%7D%5B15s%5D\";\n+      checkMetricsViaPrometheus(testappPrometheusSearchKey, \"test-webapp\");\n+      //fire alert by scaling down\n+      fireAlert();\n+      //switch to monitor another domain\n+      String oldRegex = String.format(\"regex: %s;%s;%s\", domain2Namespace, domain2Uid, clusterName);\n+      String newRegex = String.format(\"regex: %s;%s;%s\", domain1Namespace, domain1Uid, clusterName);\n+      editPrometheusCM(oldRegex, newRegex);\n+      String sessionAppPrometheusSearchKey =\n+              \"wls_servlet_invocation_total_count%7Bapp%3D%22myear%22%7D%5B15s%5D\";\n+      checkMetricsViaPrometheus(sessionAppPrometheusSearchKey, \"sessmigr\");\n+      checkPromGrafanaLatestVersion();\n+    } finally {\n+      // shutdown domain2\n+      logger.info(\"Shutting down domain2\");\n+      assertTrue(shutdownDomain(domain2Uid, domain2Namespace),\n+              String.format(\"shutdown domain %s in namespace %s failed\", domain2Uid, domain2Namespace));\n+    }\n+  }\n \n-    installPrometheusGrafana();\n-    installWebhookCoordinator();\n+  /**\n+   * Test covers end to end sample, provided in the Monitoring Exporter github project .\n+   * Create Prometheus, Grafana\n+   * create Model in Image with monitoring exporter\n+   * verify access to monitoring exporter WebLogic metrics via nginx\n+   * check generated by monitoring exporter WebLogic metrics via Prometheus, Grafana\n+   * check basic functionality of monitoring exporter\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bbe9ed75398391152bbec2152819b83b03bad59"}, "originalPosition": 263}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMxNTQxOQ==", "bodyText": "You might want to wait until the job is done and report any error if it fails. Please see createDomainJob in ItIntrospectVersion", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1757#discussion_r444315419", "createdAt": "2020-06-23T15:31:21Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMonitoringExporter.java", "diffHunk": "@@ -602,65 +921,70 @@ private static void createCoordinator(String image,\n                                         String imagePullPolicy,\n                                         String namespace,\n                                         String secretName) throws ApiException {\n-    Map labels = new HashMap<String, String>();\n-    labels.put(\"app\", \"coordinator\");\n-    coordinatorDepl = new V1Deployment()\n-        .apiVersion(\"apps/v1\")\n-        .kind(\"Deployment\")\n-        .metadata(new V1ObjectMeta()\n-            .name(\"coordinator\")\n-            .namespace(namespace)\n-            .labels(labels))\n-        .spec(new V1DeploymentSpec()\n-            .replicas(1)\n-            .selector(new V1LabelSelector()\n-                .matchLabels(labels))\n-            .strategy(new V1DeploymentStrategy()\n-            .type(\"Recreate\"))\n-            .template(new V1PodTemplateSpec()\n-                .metadata(new V1ObjectMeta()\n-                    .labels(labels))\n-                .spec(new V1PodSpec()\n-                    .containers(Arrays.asList(\n-                        new V1Container()\n-                            .image(image)\n-                            .imagePullPolicy(imagePullPolicy)\n-                            .name(\"coordinator\")\n-                    .ports(Arrays.asList(\n-                        new V1ContainerPort()\n-                        .containerPort(8999)))))\n-                    .imagePullSecrets(Arrays.asList(\n-                        new V1LocalObjectReference()\n-                            .name(secretName))))));\n-\n-    logger.info(\"Create deployment for coordinator in namespace {0}\",\n-        namespace);\n-    boolean deploymentCreated = assertDoesNotThrow(() -> Kubernetes.createDeployment(coordinatorDepl),\n-        String.format(\"Create deployment failed with ApiException for coordinator in namespace %s\",\n-            namespace));\n-    assertTrue(deploymentCreated, String.format(\n-        \"Create deployment failed with ApiException for coordinator in namespace %s \",\n-        namespace));\n-\n-    coordinatorService = new V1Service()\n-        .metadata(new V1ObjectMeta()\n-            .name(\"coordinator\")\n-            .namespace(namespace)\n-            .labels(labels))\n-        .spec(new V1ServiceSpec()\n-            .ports(Arrays.asList(\n-                new V1ServicePort()\n-                    .port(8999)\n-                    .targetPort(new IntOrString(8999))))\n-            .type(\"NodePort\")\n-            .selector(labels));\n-\n-    logger.info(\"Create service for coordinator in namespace {0}\",\n-        namespace);\n-    boolean success = assertDoesNotThrow(() -> Kubernetes.createService(coordinatorService),\n-        String.format(\"Create service failed with ApiException for coordinator in namespace %s\",\n-            namespace));\n-    assertTrue(success, \"Coordinator service creation failed\");\n+    if (coordinatorDepl == null) {\n+      Map labels = new HashMap<String, String>();\n+      labels.put(\"app\", \"coordinator\");\n+      coordinatorDepl = new V1Deployment()\n+              .apiVersion(\"apps/v1\")\n+              .kind(\"Deployment\")\n+              .metadata(new V1ObjectMeta()\n+                      .name(\"coordinator\")\n+                      .namespace(namespace)\n+                      .labels(labels))\n+              .spec(new V1DeploymentSpec()\n+                      .replicas(1)\n+                      .selector(new V1LabelSelector()\n+                              .matchLabels(labels))\n+                      .strategy(new V1DeploymentStrategy()\n+                              .type(\"Recreate\"))\n+                      .template(new V1PodTemplateSpec()\n+                              .metadata(new V1ObjectMeta()\n+                                      .labels(labels))\n+                              .spec(new V1PodSpec()\n+                                      .containers(Arrays.asList(\n+                                              new V1Container()\n+                                                      .image(image)\n+                                                      .imagePullPolicy(imagePullPolicy)\n+                                                      .name(\"coordinator\")\n+                                                      .ports(Arrays.asList(\n+                                                              new V1ContainerPort()\n+                                                                      .containerPort(8999)))))\n+                                      .imagePullSecrets(Arrays.asList(\n+                                              new V1LocalObjectReference()\n+                                                      .name(secretName))))));\n+\n+      logger.info(\"Create deployment for coordinator in namespace {0}\",\n+              namespace);\n+      boolean deploymentCreated = assertDoesNotThrow(() -> Kubernetes.createDeployment(coordinatorDepl),\n+              String.format(\"Create deployment failed with ApiException for coordinator in namespace %s\",\n+                      namespace));\n+      assertTrue(deploymentCreated, String.format(\n+              \"Create deployment failed with ApiException for coordinator in namespace %s \",\n+              namespace));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bbe9ed75398391152bbec2152819b83b03bad59"}, "originalPosition": 810}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMxNzQ2MQ==", "bodyText": "you don't need this check, podReady does both", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1757#discussion_r444317461", "createdAt": "2020-06-23T15:34:28Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMonitoringExporter.java", "diffHunk": "@@ -816,96 +1147,177 @@ private static String createAndVerifyDomainImage() {\n     // build the model file list\n     final List<String> modelList = Collections.singletonList(MODEL_DIR + \"/\" + MONEXP_MODEL_FILE);\n     miiImage =\n-        createMiiImageAndVerify(MONEXP_IMAGE_NAME, modelList, appList);\n+            createMiiImageAndVerify(MONEXP_IMAGE_NAME, modelList, appList);\n \n     // docker login and push image to docker registry if necessary\n     dockerLoginAndPushImageToRegistry(miiImage);\n \n     // create docker registry secret to pull the image from registry\n     logger.info(\"Create docker registry secret in namespace {0}\", domain1Namespace);\n     assertDoesNotThrow(() -> createDockerRegistrySecret(domain1Namespace),\n-        String.format(\"create Docker Registry Secret failed for %s\", REPO_SECRET_NAME));\n+            String.format(\"create Docker Registry Secret failed for %s\", REPO_SECRET_NAME));\n \n     return miiImage;\n   }\n \n-  private static void createAndVerifyDomain(String miiImage, String domainUid) {\n+  /**\n+   * Create and verify domain in image from endtoend sample topology with monitoring exporter.\n+   * @return image name\n+   */\n+  private static String createAndVerifyDomainInImage() {\n+    // create image with model files\n+    logger.info(\"Create image with model file with monitoring exporter app and verify\");\n+    String app1Path = String.format(\"%s/wls-exporter.war\", monitoringExporterAppDir);\n+    String app2Path = String.format(\"%s/../src/integration-tests/apps/testwebapp.war\", ITTESTS_DIR);\n+\n+    List<String> appList = new ArrayList();\n+    appList.add(app1Path);\n+    appList.add(app2Path);\n+\n+    final int t3ChannelPort = getNextFreePort(31000, 32767);  // the port range has to be between 30,000 to 32,767\n+\n+    Properties p = new Properties();\n+    p.setProperty(\"ADMIN_USER\", ADMIN_USERNAME_DEFAULT);\n+    p.setProperty(\"ADMIN_PWD\", ADMIN_PASSWORD_DEFAULT);\n+    p.setProperty(\"DOMAIN_NAME\", domain2Uid);\n+    p.setProperty(\"ADMIN_NAME\", \"admin-server\");\n+    p.setProperty(\"PRODUCTION_MODE_ENABLED\", \"true\");\n+    p.setProperty(\"CLUSTER_NAME\", clusterName);\n+    p.setProperty(\"CLUSTER_TYPE\", \"DYNAMIC\");\n+    p.setProperty(\"CONFIGURED_MANAGED_SERVER_COUNT\", \"2\");\n+    p.setProperty(\"MANAGED_SERVER_NAME_BASE\", \"managed-server\");\n+    p.setProperty(\"T3_CHANNEL_PORT\", Integer.toString(t3ChannelPort));\n+    p.setProperty(\"T3_PUBLIC_ADDRESS\", K8S_NODEPORT_HOST);\n+    p.setProperty(\"MANAGED_SERVER_PORT\", \"8001\");\n+    p.setProperty(\"SERVER_START_MODE\", \"prod\");\n+    p.setProperty(\"ADMIN_PORT\", \"7001\");\n+    p.setProperty(\"MYSQL_USER\", \"wluser1\");\n+    p.setProperty(\"MYSQL_PWD\", \"wlpwd123\");\n+    // create a temporary WebLogic domain property file as a input for WDT model file\n+    File domainPropertiesFile = assertDoesNotThrow(() ->\n+                    File.createTempFile(\"domain\", \"properties\"),\n+            \"Failed to create domain properties file\");\n+    assertDoesNotThrow(() ->\n+                    p.store(new FileOutputStream(domainPropertiesFile), \"WDT properties file\"),\n+            \"Failed to write domain properties file\");\n+\n+    final List<String> propertyList = Collections.singletonList(domainPropertiesFile.getPath());\n+\n+    // build the model file list\n+    final List<String> modelList = Collections.singletonList(monitoringExporterEndToEndDir\n+            + MONEXP_WDT_FILE);\n+\n+    wdtImage =\n+        createImageAndVerify(MONEXP_IMAGE_NAME,\n+                modelList,\n+                appList,\n+                propertyList,\n+                WLS_BASE_IMAGE_NAME,\n+                WLS_BASE_IMAGE_TAG,\n+                WLS,\n+                false,\n+                domain2Uid, true);\n+\n+\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(wdtImage);\n+\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Create docker registry secret in namespace {0}\", domain2Namespace);\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domain2Namespace),\n+        String.format(\"create Docker Registry Secret failed for %s\", REPO_SECRET_NAME));\n+\n+    return wdtImage;\n+  }\n+\n+  //create domain from provided image and verify it's start\n+  private static void createAndVerifyDomain(String miiImage,\n+                                            String domainUid,\n+                                            String namespace,\n+                                            String domainHomeSource,\n+                                            int replicaCount) {\n     // create secret for admin credentials\n     logger.info(\"Create secret for admin credentials\");\n     String adminSecretName = \"weblogic-credentials\";\n-    assertDoesNotThrow(() -> createSecretWithUsernamePassword(adminSecretName, domain1Namespace,\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(adminSecretName, namespace,\n         \"weblogic\", \"welcome1\"),\n         String.format(\"create secret for admin credentials failed for %s\", adminSecretName));\n \n     // create encryption secret\n     logger.info(\"Create encryption secret\");\n     String encryptionSecretName = \"encryptionsecret\";\n-    assertDoesNotThrow(() -> createSecretWithUsernamePassword(encryptionSecretName, domain1Namespace,\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(encryptionSecretName, namespace,\n         \"weblogicenc\", \"weblogicenc\"),\n         String.format(\"create encryption secret failed for %s\", encryptionSecretName));\n \n     // create domain and verify\n     logger.info(\"Create model in image domain {0} in namespace {1} using docker image {2}\",\n-        domainUid, domain1Namespace, miiImage);\n-    createDomainCrAndVerify(adminSecretName, REPO_SECRET_NAME, encryptionSecretName, miiImage,domainUid);\n-\n+        domainUid, namespace, miiImage);\n+    createDomainCrAndVerify(adminSecretName, REPO_SECRET_NAME, encryptionSecretName, miiImage,domainUid,\n+            namespace, domainHomeSource, replicaCount);\n+    String adminServerPodName = domainUid + \"-admin-server\";\n     // check that admin server pod exists in the domain namespace\n     logger.info(\"Checking that admin server pod {0} exists in namespace {1}\",\n-        adminServerPodName, domain1Namespace);\n-    checkPodExists(adminServerPodName, domainUid, domain1Namespace);\n+        adminServerPodName, namespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bbe9ed75398391152bbec2152819b83b03bad59"}, "originalPosition": 1005}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMxNzcyMA==", "bodyText": "this has to be done before podReady, pod will never become ready when service creation fails.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1757#discussion_r444317720", "createdAt": "2020-06-23T15:34:53Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMonitoringExporter.java", "diffHunk": "@@ -816,96 +1147,177 @@ private static String createAndVerifyDomainImage() {\n     // build the model file list\n     final List<String> modelList = Collections.singletonList(MODEL_DIR + \"/\" + MONEXP_MODEL_FILE);\n     miiImage =\n-        createMiiImageAndVerify(MONEXP_IMAGE_NAME, modelList, appList);\n+            createMiiImageAndVerify(MONEXP_IMAGE_NAME, modelList, appList);\n \n     // docker login and push image to docker registry if necessary\n     dockerLoginAndPushImageToRegistry(miiImage);\n \n     // create docker registry secret to pull the image from registry\n     logger.info(\"Create docker registry secret in namespace {0}\", domain1Namespace);\n     assertDoesNotThrow(() -> createDockerRegistrySecret(domain1Namespace),\n-        String.format(\"create Docker Registry Secret failed for %s\", REPO_SECRET_NAME));\n+            String.format(\"create Docker Registry Secret failed for %s\", REPO_SECRET_NAME));\n \n     return miiImage;\n   }\n \n-  private static void createAndVerifyDomain(String miiImage, String domainUid) {\n+  /**\n+   * Create and verify domain in image from endtoend sample topology with monitoring exporter.\n+   * @return image name\n+   */\n+  private static String createAndVerifyDomainInImage() {\n+    // create image with model files\n+    logger.info(\"Create image with model file with monitoring exporter app and verify\");\n+    String app1Path = String.format(\"%s/wls-exporter.war\", monitoringExporterAppDir);\n+    String app2Path = String.format(\"%s/../src/integration-tests/apps/testwebapp.war\", ITTESTS_DIR);\n+\n+    List<String> appList = new ArrayList();\n+    appList.add(app1Path);\n+    appList.add(app2Path);\n+\n+    final int t3ChannelPort = getNextFreePort(31000, 32767);  // the port range has to be between 30,000 to 32,767\n+\n+    Properties p = new Properties();\n+    p.setProperty(\"ADMIN_USER\", ADMIN_USERNAME_DEFAULT);\n+    p.setProperty(\"ADMIN_PWD\", ADMIN_PASSWORD_DEFAULT);\n+    p.setProperty(\"DOMAIN_NAME\", domain2Uid);\n+    p.setProperty(\"ADMIN_NAME\", \"admin-server\");\n+    p.setProperty(\"PRODUCTION_MODE_ENABLED\", \"true\");\n+    p.setProperty(\"CLUSTER_NAME\", clusterName);\n+    p.setProperty(\"CLUSTER_TYPE\", \"DYNAMIC\");\n+    p.setProperty(\"CONFIGURED_MANAGED_SERVER_COUNT\", \"2\");\n+    p.setProperty(\"MANAGED_SERVER_NAME_BASE\", \"managed-server\");\n+    p.setProperty(\"T3_CHANNEL_PORT\", Integer.toString(t3ChannelPort));\n+    p.setProperty(\"T3_PUBLIC_ADDRESS\", K8S_NODEPORT_HOST);\n+    p.setProperty(\"MANAGED_SERVER_PORT\", \"8001\");\n+    p.setProperty(\"SERVER_START_MODE\", \"prod\");\n+    p.setProperty(\"ADMIN_PORT\", \"7001\");\n+    p.setProperty(\"MYSQL_USER\", \"wluser1\");\n+    p.setProperty(\"MYSQL_PWD\", \"wlpwd123\");\n+    // create a temporary WebLogic domain property file as a input for WDT model file\n+    File domainPropertiesFile = assertDoesNotThrow(() ->\n+                    File.createTempFile(\"domain\", \"properties\"),\n+            \"Failed to create domain properties file\");\n+    assertDoesNotThrow(() ->\n+                    p.store(new FileOutputStream(domainPropertiesFile), \"WDT properties file\"),\n+            \"Failed to write domain properties file\");\n+\n+    final List<String> propertyList = Collections.singletonList(domainPropertiesFile.getPath());\n+\n+    // build the model file list\n+    final List<String> modelList = Collections.singletonList(monitoringExporterEndToEndDir\n+            + MONEXP_WDT_FILE);\n+\n+    wdtImage =\n+        createImageAndVerify(MONEXP_IMAGE_NAME,\n+                modelList,\n+                appList,\n+                propertyList,\n+                WLS_BASE_IMAGE_NAME,\n+                WLS_BASE_IMAGE_TAG,\n+                WLS,\n+                false,\n+                domain2Uid, true);\n+\n+\n+\n+    // docker login and push image to docker registry if necessary\n+    dockerLoginAndPushImageToRegistry(wdtImage);\n+\n+    // create docker registry secret to pull the image from registry\n+    logger.info(\"Create docker registry secret in namespace {0}\", domain2Namespace);\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domain2Namespace),\n+        String.format(\"create Docker Registry Secret failed for %s\", REPO_SECRET_NAME));\n+\n+    return wdtImage;\n+  }\n+\n+  //create domain from provided image and verify it's start\n+  private static void createAndVerifyDomain(String miiImage,\n+                                            String domainUid,\n+                                            String namespace,\n+                                            String domainHomeSource,\n+                                            int replicaCount) {\n     // create secret for admin credentials\n     logger.info(\"Create secret for admin credentials\");\n     String adminSecretName = \"weblogic-credentials\";\n-    assertDoesNotThrow(() -> createSecretWithUsernamePassword(adminSecretName, domain1Namespace,\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(adminSecretName, namespace,\n         \"weblogic\", \"welcome1\"),\n         String.format(\"create secret for admin credentials failed for %s\", adminSecretName));\n \n     // create encryption secret\n     logger.info(\"Create encryption secret\");\n     String encryptionSecretName = \"encryptionsecret\";\n-    assertDoesNotThrow(() -> createSecretWithUsernamePassword(encryptionSecretName, domain1Namespace,\n+    assertDoesNotThrow(() -> createSecretWithUsernamePassword(encryptionSecretName, namespace,\n         \"weblogicenc\", \"weblogicenc\"),\n         String.format(\"create encryption secret failed for %s\", encryptionSecretName));\n \n     // create domain and verify\n     logger.info(\"Create model in image domain {0} in namespace {1} using docker image {2}\",\n-        domainUid, domain1Namespace, miiImage);\n-    createDomainCrAndVerify(adminSecretName, REPO_SECRET_NAME, encryptionSecretName, miiImage,domainUid);\n-\n+        domainUid, namespace, miiImage);\n+    createDomainCrAndVerify(adminSecretName, REPO_SECRET_NAME, encryptionSecretName, miiImage,domainUid,\n+            namespace, domainHomeSource, replicaCount);\n+    String adminServerPodName = domainUid + \"-admin-server\";\n     // check that admin server pod exists in the domain namespace\n     logger.info(\"Checking that admin server pod {0} exists in namespace {1}\",\n-        adminServerPodName, domain1Namespace);\n-    checkPodExists(adminServerPodName, domainUid, domain1Namespace);\n+        adminServerPodName, namespace);\n+    checkPodExists(adminServerPodName, domainUid, namespace);\n \n     // check that admin server pod is ready\n     logger.info(\"Checking that admin server pod {0} is ready in namespace {1}\",\n-        adminServerPodName, domain1Namespace);\n-    checkPodReady(adminServerPodName, domainUid, domain1Namespace);\n+        adminServerPodName, namespace);\n+    checkPodReady(adminServerPodName, domainUid, namespace);\n \n     // check that admin service exists in the domain namespace\n     logger.info(\"Checking that admin service {0} exists in namespace {1}\",\n-        adminServerPodName, domain1Namespace);\n-    checkServiceExists(adminServerPodName, domain1Namespace);\n+        adminServerPodName, namespace);\n+    checkServiceExists(adminServerPodName, namespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bbe9ed75398391152bbec2152819b83b03bad59"}, "originalPosition": 1020}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMyMzQ0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Create a Kubernetes Config Map.\n          \n          \n            \n               * Updates a Kubernetes Config Map.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1757#discussion_r444323444", "createdAt": "2020-06-23T15:43:22Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -1117,6 +1118,50 @@ public static boolean createConfigMap(V1ConfigMap configMap) throws ApiException\n     return true;\n   }\n \n+  /**\n+   * Create a Kubernetes Config Map.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bbe9ed75398391152bbec2152819b83b03bad59"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91f7db2e9866a4047fbe8c539bb5afc62171a097", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/91f7db2e9866a4047fbe8c539bb5afc62171a097", "committedDate": "2020-06-24T01:26:34Z", "message": "merged"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "320ee7705cbfff69bfb7441ca29905e0de0e52e5", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/320ee7705cbfff69bfb7441ca29905e0de0e52e5", "committedDate": "2020-06-24T01:26:48Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into promtest2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37f2af68874410cbebc111842ac784a11412aa92", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/37f2af68874410cbebc111842ac784a11412aa92", "committedDate": "2020-06-24T15:54:39Z", "message": "addressed comments from review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bde4b29ef5417800dc5022dcedc781eceaaffb39", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/bde4b29ef5417800dc5022dcedc781eceaaffb39", "committedDate": "2020-06-24T15:54:45Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into promtest2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20f6281f572d6d9c965f4c1144e02237046a07ad", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/20f6281f572d6d9c965f4c1144e02237046a07ad", "committedDate": "2020-06-24T19:04:06Z", "message": "fixed logic for checkpod and service"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDI0ODAy", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1757#pullrequestreview-437024802", "createdAt": "2020-06-24T21:37:19Z", "commit": {"oid": "20f6281f572d6d9c965f4c1144e02237046a07ad"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDUyNDM0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1757#pullrequestreview-437052434", "createdAt": "2020-06-24T22:34:54Z", "commit": {"oid": "20f6281f572d6d9c965f4c1144e02237046a07ad"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MTUwMTU2", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1757#pullrequestreview-437150156", "createdAt": "2020-06-25T03:54:21Z", "commit": {"oid": "20f6281f572d6d9c965f4c1144e02237046a07ad"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMzo1NDoyMVrOGoqe_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMzo1NDoyMVrOGoqe_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI5MjI4NA==", "bodyText": "Can you please explain bit more detail. What is the purpose of replacing a Config Map", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1757#discussion_r445292284", "createdAt": "2020-06-25T03:54:21Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -1117,6 +1118,50 @@ public static boolean createConfigMap(V1ConfigMap configMap) throws ApiException\n     return true;\n   }\n \n+  /**\n+   * Replace a Kubernetes Config Map.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20f6281f572d6d9c965f4c1144e02237046a07ad"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MTUwOTk0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1757#pullrequestreview-437150994", "createdAt": "2020-06-25T03:57:33Z", "commit": {"oid": "20f6281f572d6d9c965f4c1144e02237046a07ad"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMzo1NzozM1rOGoqhyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMzo1NzozM1rOGoqhyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI5MzAwMg==", "bodyText": "extra blank space between the word  \"deployment\"  and \"is\"", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1757#discussion_r445293002", "createdAt": "2020-06-25T03:57:33Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Kubernetes.java", "diffHunk": "@@ -429,6 +433,74 @@ public static V1Service getService(\n     return null;\n   }\n \n+  /**\n+   * Get V1Deployment object for the given  name, label and namespace.\n+   * @param deploymentName name of the deployment to look for\n+   * @param label the key value pair with which the deployment is decorated with\n+   * @param namespace the namespace in which to check for the deployment\n+   * @return V1Deployment object if found otherwise null\n+   * @throws ApiException when there is error in querying the cluster\n+   */\n+  public static V1Deployment getDeployment(\n+          String deploymentName, Map<String, String> label, String namespace)\n+          throws ApiException {\n+    String labelSelector = null;\n+    if (label != null) {\n+      String key = label.keySet().iterator().next().toString();\n+      String value = label.get(key).toString();\n+      labelSelector = String.format(\"%s in (%s)\", key, value);\n+      logger.info(labelSelector);\n+    }\n+    V1DeploymentList v1DeploymentList = listDeployments(namespace);\n+\n+    for (V1Deployment deployment : v1DeploymentList.getItems()) {\n+      if (deployment.getMetadata().getName().equals(deploymentName.trim())\n+              && deployment.getMetadata().getNamespace().equals(namespace.trim())) {\n+        logger.info(\"Deployment Name : \" + deployment.getMetadata().getName());\n+        logger.info(\"Deployment Namespace : \" + deployment.getMetadata().getNamespace());\n+        logger.info(\"Deployment status : \" + deployment.getStatus().toString());\n+        Map<String, String> labels = deployment.getMetadata().getLabels();\n+        if (labels != null) {\n+          for (Map.Entry<String, String> entry : labels.entrySet()) {\n+            logger.log(Level.INFO, \"Label Key: {0} Label Value: {1}\",\n+                    new Object[]{entry.getKey(), entry.getValue()});\n+          }\n+        }\n+        return deployment;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Checks if an deployment  is running in a given namespace.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20f6281f572d6d9c965f4c1144e02237046a07ad"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MTUyMDgy", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1757#pullrequestreview-437152082", "createdAt": "2020-06-25T04:01:45Z", "commit": {"oid": "20f6281f572d6d9c965f4c1144e02237046a07ad"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNDowMTo0NVrOGoqlQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNDowMTo0NVrOGoqlQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI5Mzg5MA==", "bodyText": "rename the file name to exporter-config.yaml to be consistent with yaml file extension with other similar files in resource directory.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1757#discussion_r445293890", "createdAt": "2020-06-25T04:01:45Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/resources/exporter/exporter-config.yml", "diffHunk": "@@ -0,0 +1,61 @@\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20f6281f572d6d9c965f4c1144e02237046a07ad"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MTUyMzI5", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1757#pullrequestreview-437152329", "createdAt": "2020-06-25T04:02:36Z", "commit": {"oid": "20f6281f572d6d9c965f4c1144e02237046a07ad"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNDowMjozNlrOGoqmGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNDowMjozNlrOGoqmGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI5NDEwNA==", "bodyText": "Consider rename the file name to rest_domainqualtrue.yaml to be consistent with yaml file extension with other similar files in resource directory.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1757#discussion_r445294104", "createdAt": "2020-06-25T04:02:36Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/resources/exporter/rest_domainqualtrue.yml", "diffHunk": "@@ -0,0 +1,23 @@\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20f6281f572d6d9c965f4c1144e02237046a07ad"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MTUyNDUy", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1757#pullrequestreview-437152452", "createdAt": "2020-06-25T04:03:06Z", "commit": {"oid": "20f6281f572d6d9c965f4c1144e02237046a07ad"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNDowMzowNlrOGoqmkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNDowMzowNlrOGoqmkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI5NDIyNg==", "bodyText": "Same as other yaml files", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1757#discussion_r445294226", "createdAt": "2020-06-25T04:03:06Z", "author": {"login": "anpanigr"}, "path": "new-integration-tests/src/test/resources/exporter/rest_dublicatedval.yml", "diffHunk": "@@ -0,0 +1,21 @@\n+# Copyright (c) 2019, 2020, Oracle Corporation and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20f6281f572d6d9c965f4c1144e02237046a07ad"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MTUyODYz", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1757#pullrequestreview-437152863", "createdAt": "2020-06-25T04:04:36Z", "commit": {"oid": "20f6281f572d6d9c965f4c1144e02237046a07ad"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NjA2NjIw", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1757#pullrequestreview-437606620", "createdAt": "2020-06-25T15:24:53Z", "commit": {"oid": "20f6281f572d6d9c965f4c1144e02237046a07ad"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNToyNDo1M1rOGo_5Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNToyNDo1M1rOGo_5Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY0MzAyMw==", "bodyText": "Remove \"by\" from the comment above", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1757#discussion_r445643023", "createdAt": "2020-06-25T15:24:53Z", "author": {"login": "bhavaniravichandran"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMonitoringExporter.java", "diffHunk": "@@ -204,134 +231,398 @@ public static void initAll(@Namespaces(6) List<String> namespaces) {\n     assertNotNull(namespaces.get(2), \"Namespace list is null\");\n     domain2Namespace = namespaces.get(2);\n \n-    // get a unique monitoring namespace\n     logger.info(\"Get a unique namespace for monitoring\");\n     assertNotNull(namespaces.get(3), \"Namespace list is null\");\n     monitoringNS = namespaces.get(3);\n \n-    // get a unique webhook namespace\n     logger.info(\"Get a unique namespace for webhook\");\n     assertNotNull(namespaces.get(4), \"Namespace list is null\");\n     webhookNS = namespaces.get(4);\n \n-    // get a unique NGINX namespace\n     logger.info(\"Get a unique namespace for NGINX\");\n     assertNotNull(namespaces.get(5), \"Namespace list is null\");\n-    final String nginxNamespace = namespaces.get(5);\n+    final String nginxNamespace1 = namespaces.get(5);\n+    assertNotNull(namespaces.get(6), \"Namespace list is null\");\n+    final String nginxNamespace2 = namespaces.get(6);\n \n-    // install and verify operator\n+    logger.info(\"install and verify operator\");\n     installAndVerifyOperator(opNamespace, domain1Namespace,domain2Namespace);\n \n-    //install monitoring exporter\n+    logger.info(\"nstall monitoring exporter\");\n     installMonitoringExporter();\n \n-    // create and verify WebLogic domain image using model in image with model files\n-    String imageName = createAndVerifyDomainImage();\n+    logger.info(\"create and verify WebLogic domain image using model in image with model files\");\n+    miiImage = createAndVerifyMiiImage();\n \n-    // create and verify one cluster domain\n+    // create and verify one cluster mii domain\n     logger.info(\"Create domain and verify that it's running\");\n-    createAndVerifyDomain(imageName, domain1Uid);\n+    createAndVerifyDomain(miiImage, domain1Uid, domain1Namespace, \"FromModel\", 1);\n \n     // get a free node port for NGINX\n-    nodeportshttp = getNextFreePort(30305, 30405);\n-    int nodeportshttps = getNextFreePort(30443, 30543);\n+    nodeportshttp1 = getNextFreePort(30305, 30405);\n+    nodeportshttp2 = getNextFreePort(30305, 30405);\n+    int nodeportshttps1 = getNextFreePort(30443, 30543);\n \n-    // install and verify NGINX\n-    nginxHelmParams = installAndVerifyNginx(nginxNamespace, nodeportshttp, nodeportshttps);\n-    // create ingress for the domain\n+    logger.info(\"install and verify NGINX\");\n+    nginxHelmParams1 = installAndVerifyNginx(nginxNamespace1, nodeportshttp1, nodeportshttps1);\n     logger.info(\"Creating ingress for domain {0} in namespace {1}\", domain1Uid, domain1Namespace);\n-    Map<String, Integer> clusterNameMsPortMap = new HashMap<>();\n+    clusterNameMsPortMap = new HashMap<>();\n     clusterNameMsPortMap.put(clusterName, managedServerPort);\n-    ingressHostList =\n-        createIngressForDomainAndVerify(domain1Uid, domain1Namespace, clusterNameMsPortMap);\n+    ingressHost1List =\n+        createIngressForDomainAndVerify(domain1Uid, domain1Namespace,clusterNameMsPortMap, false);\n+\n+    exporterUrl = String.format(\"http://%s:%s/wls-exporter/\",K8S_NODEPORT_HOST,nodeportshttp1);\n+\n+    logger.info(\"create pv and pvc for monitoring\");\n+    HashMap<String, String> labels = new HashMap<>();\n+    labels.put(\"app\", \"monitoring\");\n+    labels.put(\"weblogic.domainUid\", domain1Uid);\n+    assertDoesNotThrow(() -> createPvAndPvc(\"prometheus\", monitoringNS, labels));\n+    assertDoesNotThrow(() -> createPvAndPvc(\"alertmanager\",monitoringNS, labels));\n+    assertDoesNotThrow(() -> createPvAndPvc(\"grafana\", monitoringNS, labels));\n \n   }\n \n   /**\n-   * Test covers the following use cases.\n-   * Create Prometheus, Grafana, Webhook, Coordinator\n-   * create domain Model in Image with monitoring exporter\n+   * Test covers end to end sample, provided in the Monitoring Exporter github project.\n+   * Create Prometheus, Grafana, Webhook, Coordinator.\n+   * Create domain in Image with monitoring exporter.\n+   * Verify access to monitoring exporter WebLogic metrics via nginx.\n+   * Check generated by monitoring exporter WebLogic metrics via Prometheus, Grafana.\n+   * Fire Alert using Webhook.\n+   * Change prometheus to add different domain to monitor.\n+   */\n+  @Test\n+  @DisplayName(\"Test End to End example from MonitoringExporter github project.\")\n+  public void testEndToEndViaChart() throws Exception {\n+    wdtImage = createAndVerifyDomainInImage();\n+    try {\n+      logger.info(\"Create wdt domain and verify that it's running\");\n+      createAndVerifyDomain(wdtImage, domain2Uid, domain2Namespace, \"Image\", replicaCount);\n+      ingressHost2List =\n+              createIngressForDomainAndVerify(domain2Uid, domain2Namespace, clusterNameMsPortMap);\n+\n+      installPrometheusGrafana(PROMETHEUS_CHART_VERSION, GRAFANA_CHART_VERSION,\n+              domain2Namespace,\n+              domain2Uid);\n+\n+      installWebhook();\n+      installCoordinator(domain2Namespace);\n+\n+      logger.info(\"verify access to Monitoring Exporter\");\n+      verifyMonExpAppAccessThroughNginx(ingressHost2List.get(0), managedServersCount);\n+      logger.info(\"verify metrics via prometheus\");\n+      String testappPrometheusSearchKey =\n+              \"wls_servlet_invocation_total_count%7Bapp%3D%22test-webapp%22%7D%5B15s%5D\";\n+      checkMetricsViaPrometheus(testappPrometheusSearchKey, \"test-webapp\");\n+      logger.info(\"fire alert by scaling down\");\n+      fireAlert();\n+      logger.info(\"switch to monitor another domain\");\n+      String oldRegex = String.format(\"regex: %s;%s;%s\", domain2Namespace, domain2Uid, clusterName);\n+      String newRegex = String.format(\"regex: %s;%s;%s\", domain1Namespace, domain1Uid, clusterName);\n+      editPrometheusCM(oldRegex, newRegex);\n+      String sessionAppPrometheusSearchKey =\n+              \"wls_servlet_invocation_total_count%7Bapp%3D%22myear%22%7D%5B15s%5D\";\n+      checkMetricsViaPrometheus(sessionAppPrometheusSearchKey, \"sessmigr\");\n+      checkPromGrafanaLatestVersion();\n+    } finally {\n+      logger.info(\"Shutting down domain2\");\n+      assertTrue(shutdownDomain(domain2Uid, domain2Namespace),\n+              String.format(\"shutdown domain %s in namespace %s failed\", domain2Uid, domain2Namespace));\n+    }\n+  }\n+\n+  /**\n+   * Test covers end to end sample, provided in the Monitoring Exporter github project .\n+   * Create Prometheus, Grafana\n+   * create Model in Image with monitoring exporter\n    * verify access to monitoring exporter WebLogic metrics via nginx\n-   * check generated by monitoring exporter WebLogic metrics via Prometheus\n+   * check generated by monitoring exporter WebLogic metrics via Prometheus, Grafana", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20f6281f572d6d9c965f4c1144e02237046a07ad"}, "originalPosition": 288}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NjA4MjQ3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1757#pullrequestreview-437608247", "createdAt": "2020-06-25T15:26:36Z", "commit": {"oid": "20f6281f572d6d9c965f4c1144e02237046a07ad"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNToyNjozNlrOGo_-Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNToyNjozNlrOGo_-Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY0NDMxMQ==", "bodyText": "Fix the javadoc. Similar to Sankar's comment earlier.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1757#discussion_r445644311", "createdAt": "2020-06-25T15:26:36Z", "author": {"login": "bhavaniravichandran"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMonitoringExporter.java", "diffHunk": "@@ -204,134 +231,398 @@ public static void initAll(@Namespaces(6) List<String> namespaces) {\n     assertNotNull(namespaces.get(2), \"Namespace list is null\");\n     domain2Namespace = namespaces.get(2);\n \n-    // get a unique monitoring namespace\n     logger.info(\"Get a unique namespace for monitoring\");\n     assertNotNull(namespaces.get(3), \"Namespace list is null\");\n     monitoringNS = namespaces.get(3);\n \n-    // get a unique webhook namespace\n     logger.info(\"Get a unique namespace for webhook\");\n     assertNotNull(namespaces.get(4), \"Namespace list is null\");\n     webhookNS = namespaces.get(4);\n \n-    // get a unique NGINX namespace\n     logger.info(\"Get a unique namespace for NGINX\");\n     assertNotNull(namespaces.get(5), \"Namespace list is null\");\n-    final String nginxNamespace = namespaces.get(5);\n+    final String nginxNamespace1 = namespaces.get(5);\n+    assertNotNull(namespaces.get(6), \"Namespace list is null\");\n+    final String nginxNamespace2 = namespaces.get(6);\n \n-    // install and verify operator\n+    logger.info(\"install and verify operator\");\n     installAndVerifyOperator(opNamespace, domain1Namespace,domain2Namespace);\n \n-    //install monitoring exporter\n+    logger.info(\"nstall monitoring exporter\");\n     installMonitoringExporter();\n \n-    // create and verify WebLogic domain image using model in image with model files\n-    String imageName = createAndVerifyDomainImage();\n+    logger.info(\"create and verify WebLogic domain image using model in image with model files\");\n+    miiImage = createAndVerifyMiiImage();\n \n-    // create and verify one cluster domain\n+    // create and verify one cluster mii domain\n     logger.info(\"Create domain and verify that it's running\");\n-    createAndVerifyDomain(imageName, domain1Uid);\n+    createAndVerifyDomain(miiImage, domain1Uid, domain1Namespace, \"FromModel\", 1);\n \n     // get a free node port for NGINX\n-    nodeportshttp = getNextFreePort(30305, 30405);\n-    int nodeportshttps = getNextFreePort(30443, 30543);\n+    nodeportshttp1 = getNextFreePort(30305, 30405);\n+    nodeportshttp2 = getNextFreePort(30305, 30405);\n+    int nodeportshttps1 = getNextFreePort(30443, 30543);\n \n-    // install and verify NGINX\n-    nginxHelmParams = installAndVerifyNginx(nginxNamespace, nodeportshttp, nodeportshttps);\n-    // create ingress for the domain\n+    logger.info(\"install and verify NGINX\");\n+    nginxHelmParams1 = installAndVerifyNginx(nginxNamespace1, nodeportshttp1, nodeportshttps1);\n     logger.info(\"Creating ingress for domain {0} in namespace {1}\", domain1Uid, domain1Namespace);\n-    Map<String, Integer> clusterNameMsPortMap = new HashMap<>();\n+    clusterNameMsPortMap = new HashMap<>();\n     clusterNameMsPortMap.put(clusterName, managedServerPort);\n-    ingressHostList =\n-        createIngressForDomainAndVerify(domain1Uid, domain1Namespace, clusterNameMsPortMap);\n+    ingressHost1List =\n+        createIngressForDomainAndVerify(domain1Uid, domain1Namespace,clusterNameMsPortMap, false);\n+\n+    exporterUrl = String.format(\"http://%s:%s/wls-exporter/\",K8S_NODEPORT_HOST,nodeportshttp1);\n+\n+    logger.info(\"create pv and pvc for monitoring\");\n+    HashMap<String, String> labels = new HashMap<>();\n+    labels.put(\"app\", \"monitoring\");\n+    labels.put(\"weblogic.domainUid\", domain1Uid);\n+    assertDoesNotThrow(() -> createPvAndPvc(\"prometheus\", monitoringNS, labels));\n+    assertDoesNotThrow(() -> createPvAndPvc(\"alertmanager\",monitoringNS, labels));\n+    assertDoesNotThrow(() -> createPvAndPvc(\"grafana\", monitoringNS, labels));\n \n   }\n \n   /**\n-   * Test covers the following use cases.\n-   * Create Prometheus, Grafana, Webhook, Coordinator\n-   * create domain Model in Image with monitoring exporter\n+   * Test covers end to end sample, provided in the Monitoring Exporter github project.\n+   * Create Prometheus, Grafana, Webhook, Coordinator.\n+   * Create domain in Image with monitoring exporter.\n+   * Verify access to monitoring exporter WebLogic metrics via nginx.\n+   * Check generated by monitoring exporter WebLogic metrics via Prometheus, Grafana.\n+   * Fire Alert using Webhook.\n+   * Change prometheus to add different domain to monitor.\n+   */\n+  @Test\n+  @DisplayName(\"Test End to End example from MonitoringExporter github project.\")\n+  public void testEndToEndViaChart() throws Exception {\n+    wdtImage = createAndVerifyDomainInImage();\n+    try {\n+      logger.info(\"Create wdt domain and verify that it's running\");\n+      createAndVerifyDomain(wdtImage, domain2Uid, domain2Namespace, \"Image\", replicaCount);\n+      ingressHost2List =\n+              createIngressForDomainAndVerify(domain2Uid, domain2Namespace, clusterNameMsPortMap);\n+\n+      installPrometheusGrafana(PROMETHEUS_CHART_VERSION, GRAFANA_CHART_VERSION,\n+              domain2Namespace,\n+              domain2Uid);\n+\n+      installWebhook();\n+      installCoordinator(domain2Namespace);\n+\n+      logger.info(\"verify access to Monitoring Exporter\");\n+      verifyMonExpAppAccessThroughNginx(ingressHost2List.get(0), managedServersCount);\n+      logger.info(\"verify metrics via prometheus\");\n+      String testappPrometheusSearchKey =\n+              \"wls_servlet_invocation_total_count%7Bapp%3D%22test-webapp%22%7D%5B15s%5D\";\n+      checkMetricsViaPrometheus(testappPrometheusSearchKey, \"test-webapp\");\n+      logger.info(\"fire alert by scaling down\");\n+      fireAlert();\n+      logger.info(\"switch to monitor another domain\");\n+      String oldRegex = String.format(\"regex: %s;%s;%s\", domain2Namespace, domain2Uid, clusterName);\n+      String newRegex = String.format(\"regex: %s;%s;%s\", domain1Namespace, domain1Uid, clusterName);\n+      editPrometheusCM(oldRegex, newRegex);\n+      String sessionAppPrometheusSearchKey =\n+              \"wls_servlet_invocation_total_count%7Bapp%3D%22myear%22%7D%5B15s%5D\";\n+      checkMetricsViaPrometheus(sessionAppPrometheusSearchKey, \"sessmigr\");\n+      checkPromGrafanaLatestVersion();\n+    } finally {\n+      logger.info(\"Shutting down domain2\");\n+      assertTrue(shutdownDomain(domain2Uid, domain2Namespace),\n+              String.format(\"shutdown domain %s in namespace %s failed\", domain2Uid, domain2Namespace));\n+    }\n+  }\n+\n+  /**\n+   * Test covers end to end sample, provided in the Monitoring Exporter github project .\n+   * Create Prometheus, Grafana\n+   * create Model in Image with monitoring exporter\n    * verify access to monitoring exporter WebLogic metrics via nginx\n-   * check generated by monitoring exporter WebLogic metrics via Prometheus\n+   * check generated by monitoring exporter WebLogic metrics via Prometheus, Grafana\n+   * check basic functionality of monitoring exporter\n    */\n   @Test\n-  @DisplayName(\"Install Prometheus, Grafana , Webhook, Coordinator and verify WebLogic metrics\")\n-  public void testCheckMetrics() throws Exception {\n+  @DisplayName(\"Test Basic Functionality of Monitoring Exporter.\")\n+  public void testBasicFunctionality() throws Exception {\n \n-    installPrometheusGrafana();\n-    installWebhookCoordinator();\n+    installPrometheusGrafana(PROMETHEUS_CHART_VERSION, GRAFANA_CHART_VERSION,\n+            domain1Namespace,\n+            domain1Uid);\n \n     //verify access to Monitoring Exporter\n-    verifyMonExpAppAccessThroughNginx();\n-    //verify metrics via prometheus\n-    String testappPrometheusSearchKey =\n-        \"weblogic_servlet_invocation_total_count%7Bapp%3D%22wlsexporter%22%7D%5B15s%5D\";\n-    checkMetricsViaPrometheus(testappPrometheusSearchKey, \"wlsexporter\");\n+    verifyMonExpAppAccessThroughNginx(ingressHost1List.get(0),1);\n+\n+    try {\n+      logger.info(\"Testing replace configuration\");\n+      replaceConfiguration();\n+      logger.info(\"Testing append configuration\");\n+      appendConfiguration();\n+      logger.info(\"Testing replace One Attribute Value AsArray configuration\");\n+      replaceOneAttributeValueAsArrayConfiguration();\n+      logger.info(\"Testing append One Attribute Value AsArray configuration\");\n+      appendArrayWithOneExistedAndOneDifferentAttributeValueAsArrayConfiguration();\n+      logger.info(\"Testing replace with empty configuration\");\n+      replaceWithEmptyConfiguration();\n+      logger.info(\"Testing append with empty configuration\");\n+      appendWithEmptyConfiguration();\n+      logger.info(\"Testing append with invalid yaml configuration\");\n+      appendWithNotYmlConfiguration();\n+      logger.info(\"Testing replace with invalid yaml configuration\");\n+      replaceWithNotYmlConfiguration();\n+      logger.info(\"Testing append with corrupted yaml configuration\");\n+      appendWithCorruptedYmlConfiguration();\n+      logger.info(\"Testing replace with corrupted yaml configuration\");\n+      replaceWithCorruptedYmlConfiguration();\n+      logger.info(\"Testing replace with dublicated values yaml configuration\");\n+      replaceWithDublicatedValuesConfiguration();\n+      logger.info(\"Testing append with corrupted yaml configuration\");\n+      appendWithDuplicatedValuesConfiguration();\n+      logger.info(\"Testing replace with name snake false yaml configuration\");\n+      replaceMetricsNameSnakeCaseFalseConfiguration();\n+      logger.info(\"Testing change with no credentials configuration\");\n+      changeConfigNoCredentials();\n+      logger.info(\"Testing change with no invalid user configuration\");\n+      changeConfigInvalidUser();\n+      logger.info(\"Testing change with no invalid pass configuration\");\n+      changeConfigInvalidPass();\n+      logger.info(\"Testing change with empty user configuration\");\n+      changeConfigEmptyUser();\n+      logger.info(\"Testing change with no empty pass configuration\");\n+      changeConfigEmptyPass();\n+      logger.info(\"Testing replace with domain qualifier configuration\");\n+      replaceMetricsDomainQualifierTrueConfiguration();\n+    } finally {\n+      //restore configuration\n+      submitConfigureForm(exporterUrl, \"replace\", RESOURCE_DIR + \"/exporter/exporter-config.yml\");\n+    }\n   }\n \n   /**\n-   * Install Prometheus, Grafana using helm chart, and verify that pods are running.\n-   * @throws ApiException when creating helm charts or pods fails\n+   * Test covers the following use cases.\n+   * Create Prometheus, Grafana from latest version of helm chart\n+   * verify access to monitoring exporter WebLogic metrics via nginx\n+   * check WebLogic metrics via Prometheus", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20f6281f572d6d9c965f4c1144e02237046a07ad"}, "originalPosition": 362}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NjA4OTQ4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1757#pullrequestreview-437608948", "createdAt": "2020-06-25T15:27:24Z", "commit": {"oid": "20f6281f572d6d9c965f4c1144e02237046a07ad"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNToyNzoyNFrOGpAAGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNToyNzoyNFrOGpAAGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY0NDgyNQ==", "bodyText": "fix the comment above - not uninstalling helm here are you?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1757#discussion_r445644825", "createdAt": "2020-06-25T15:27:24Z", "author": {"login": "bhavaniravichandran"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMonitoringExporter.java", "diffHunk": "@@ -204,134 +231,398 @@ public static void initAll(@Namespaces(6) List<String> namespaces) {\n     assertNotNull(namespaces.get(2), \"Namespace list is null\");\n     domain2Namespace = namespaces.get(2);\n \n-    // get a unique monitoring namespace\n     logger.info(\"Get a unique namespace for monitoring\");\n     assertNotNull(namespaces.get(3), \"Namespace list is null\");\n     monitoringNS = namespaces.get(3);\n \n-    // get a unique webhook namespace\n     logger.info(\"Get a unique namespace for webhook\");\n     assertNotNull(namespaces.get(4), \"Namespace list is null\");\n     webhookNS = namespaces.get(4);\n \n-    // get a unique NGINX namespace\n     logger.info(\"Get a unique namespace for NGINX\");\n     assertNotNull(namespaces.get(5), \"Namespace list is null\");\n-    final String nginxNamespace = namespaces.get(5);\n+    final String nginxNamespace1 = namespaces.get(5);\n+    assertNotNull(namespaces.get(6), \"Namespace list is null\");\n+    final String nginxNamespace2 = namespaces.get(6);\n \n-    // install and verify operator\n+    logger.info(\"install and verify operator\");\n     installAndVerifyOperator(opNamespace, domain1Namespace,domain2Namespace);\n \n-    //install monitoring exporter\n+    logger.info(\"nstall monitoring exporter\");\n     installMonitoringExporter();\n \n-    // create and verify WebLogic domain image using model in image with model files\n-    String imageName = createAndVerifyDomainImage();\n+    logger.info(\"create and verify WebLogic domain image using model in image with model files\");\n+    miiImage = createAndVerifyMiiImage();\n \n-    // create and verify one cluster domain\n+    // create and verify one cluster mii domain\n     logger.info(\"Create domain and verify that it's running\");\n-    createAndVerifyDomain(imageName, domain1Uid);\n+    createAndVerifyDomain(miiImage, domain1Uid, domain1Namespace, \"FromModel\", 1);\n \n     // get a free node port for NGINX\n-    nodeportshttp = getNextFreePort(30305, 30405);\n-    int nodeportshttps = getNextFreePort(30443, 30543);\n+    nodeportshttp1 = getNextFreePort(30305, 30405);\n+    nodeportshttp2 = getNextFreePort(30305, 30405);\n+    int nodeportshttps1 = getNextFreePort(30443, 30543);\n \n-    // install and verify NGINX\n-    nginxHelmParams = installAndVerifyNginx(nginxNamespace, nodeportshttp, nodeportshttps);\n-    // create ingress for the domain\n+    logger.info(\"install and verify NGINX\");\n+    nginxHelmParams1 = installAndVerifyNginx(nginxNamespace1, nodeportshttp1, nodeportshttps1);\n     logger.info(\"Creating ingress for domain {0} in namespace {1}\", domain1Uid, domain1Namespace);\n-    Map<String, Integer> clusterNameMsPortMap = new HashMap<>();\n+    clusterNameMsPortMap = new HashMap<>();\n     clusterNameMsPortMap.put(clusterName, managedServerPort);\n-    ingressHostList =\n-        createIngressForDomainAndVerify(domain1Uid, domain1Namespace, clusterNameMsPortMap);\n+    ingressHost1List =\n+        createIngressForDomainAndVerify(domain1Uid, domain1Namespace,clusterNameMsPortMap, false);\n+\n+    exporterUrl = String.format(\"http://%s:%s/wls-exporter/\",K8S_NODEPORT_HOST,nodeportshttp1);\n+\n+    logger.info(\"create pv and pvc for monitoring\");\n+    HashMap<String, String> labels = new HashMap<>();\n+    labels.put(\"app\", \"monitoring\");\n+    labels.put(\"weblogic.domainUid\", domain1Uid);\n+    assertDoesNotThrow(() -> createPvAndPvc(\"prometheus\", monitoringNS, labels));\n+    assertDoesNotThrow(() -> createPvAndPvc(\"alertmanager\",monitoringNS, labels));\n+    assertDoesNotThrow(() -> createPvAndPvc(\"grafana\", monitoringNS, labels));\n \n   }\n \n   /**\n-   * Test covers the following use cases.\n-   * Create Prometheus, Grafana, Webhook, Coordinator\n-   * create domain Model in Image with monitoring exporter\n+   * Test covers end to end sample, provided in the Monitoring Exporter github project.\n+   * Create Prometheus, Grafana, Webhook, Coordinator.\n+   * Create domain in Image with monitoring exporter.\n+   * Verify access to monitoring exporter WebLogic metrics via nginx.\n+   * Check generated by monitoring exporter WebLogic metrics via Prometheus, Grafana.\n+   * Fire Alert using Webhook.\n+   * Change prometheus to add different domain to monitor.\n+   */\n+  @Test\n+  @DisplayName(\"Test End to End example from MonitoringExporter github project.\")\n+  public void testEndToEndViaChart() throws Exception {\n+    wdtImage = createAndVerifyDomainInImage();\n+    try {\n+      logger.info(\"Create wdt domain and verify that it's running\");\n+      createAndVerifyDomain(wdtImage, domain2Uid, domain2Namespace, \"Image\", replicaCount);\n+      ingressHost2List =\n+              createIngressForDomainAndVerify(domain2Uid, domain2Namespace, clusterNameMsPortMap);\n+\n+      installPrometheusGrafana(PROMETHEUS_CHART_VERSION, GRAFANA_CHART_VERSION,\n+              domain2Namespace,\n+              domain2Uid);\n+\n+      installWebhook();\n+      installCoordinator(domain2Namespace);\n+\n+      logger.info(\"verify access to Monitoring Exporter\");\n+      verifyMonExpAppAccessThroughNginx(ingressHost2List.get(0), managedServersCount);\n+      logger.info(\"verify metrics via prometheus\");\n+      String testappPrometheusSearchKey =\n+              \"wls_servlet_invocation_total_count%7Bapp%3D%22test-webapp%22%7D%5B15s%5D\";\n+      checkMetricsViaPrometheus(testappPrometheusSearchKey, \"test-webapp\");\n+      logger.info(\"fire alert by scaling down\");\n+      fireAlert();\n+      logger.info(\"switch to monitor another domain\");\n+      String oldRegex = String.format(\"regex: %s;%s;%s\", domain2Namespace, domain2Uid, clusterName);\n+      String newRegex = String.format(\"regex: %s;%s;%s\", domain1Namespace, domain1Uid, clusterName);\n+      editPrometheusCM(oldRegex, newRegex);\n+      String sessionAppPrometheusSearchKey =\n+              \"wls_servlet_invocation_total_count%7Bapp%3D%22myear%22%7D%5B15s%5D\";\n+      checkMetricsViaPrometheus(sessionAppPrometheusSearchKey, \"sessmigr\");\n+      checkPromGrafanaLatestVersion();\n+    } finally {\n+      logger.info(\"Shutting down domain2\");\n+      assertTrue(shutdownDomain(domain2Uid, domain2Namespace),\n+              String.format(\"shutdown domain %s in namespace %s failed\", domain2Uid, domain2Namespace));\n+    }\n+  }\n+\n+  /**\n+   * Test covers end to end sample, provided in the Monitoring Exporter github project .\n+   * Create Prometheus, Grafana\n+   * create Model in Image with monitoring exporter\n    * verify access to monitoring exporter WebLogic metrics via nginx\n-   * check generated by monitoring exporter WebLogic metrics via Prometheus\n+   * check generated by monitoring exporter WebLogic metrics via Prometheus, Grafana\n+   * check basic functionality of monitoring exporter\n    */\n   @Test\n-  @DisplayName(\"Install Prometheus, Grafana , Webhook, Coordinator and verify WebLogic metrics\")\n-  public void testCheckMetrics() throws Exception {\n+  @DisplayName(\"Test Basic Functionality of Monitoring Exporter.\")\n+  public void testBasicFunctionality() throws Exception {\n \n-    installPrometheusGrafana();\n-    installWebhookCoordinator();\n+    installPrometheusGrafana(PROMETHEUS_CHART_VERSION, GRAFANA_CHART_VERSION,\n+            domain1Namespace,\n+            domain1Uid);\n \n     //verify access to Monitoring Exporter\n-    verifyMonExpAppAccessThroughNginx();\n-    //verify metrics via prometheus\n-    String testappPrometheusSearchKey =\n-        \"weblogic_servlet_invocation_total_count%7Bapp%3D%22wlsexporter%22%7D%5B15s%5D\";\n-    checkMetricsViaPrometheus(testappPrometheusSearchKey, \"wlsexporter\");\n+    verifyMonExpAppAccessThroughNginx(ingressHost1List.get(0),1);\n+\n+    try {\n+      logger.info(\"Testing replace configuration\");\n+      replaceConfiguration();\n+      logger.info(\"Testing append configuration\");\n+      appendConfiguration();\n+      logger.info(\"Testing replace One Attribute Value AsArray configuration\");\n+      replaceOneAttributeValueAsArrayConfiguration();\n+      logger.info(\"Testing append One Attribute Value AsArray configuration\");\n+      appendArrayWithOneExistedAndOneDifferentAttributeValueAsArrayConfiguration();\n+      logger.info(\"Testing replace with empty configuration\");\n+      replaceWithEmptyConfiguration();\n+      logger.info(\"Testing append with empty configuration\");\n+      appendWithEmptyConfiguration();\n+      logger.info(\"Testing append with invalid yaml configuration\");\n+      appendWithNotYmlConfiguration();\n+      logger.info(\"Testing replace with invalid yaml configuration\");\n+      replaceWithNotYmlConfiguration();\n+      logger.info(\"Testing append with corrupted yaml configuration\");\n+      appendWithCorruptedYmlConfiguration();\n+      logger.info(\"Testing replace with corrupted yaml configuration\");\n+      replaceWithCorruptedYmlConfiguration();\n+      logger.info(\"Testing replace with dublicated values yaml configuration\");\n+      replaceWithDublicatedValuesConfiguration();\n+      logger.info(\"Testing append with corrupted yaml configuration\");\n+      appendWithDuplicatedValuesConfiguration();\n+      logger.info(\"Testing replace with name snake false yaml configuration\");\n+      replaceMetricsNameSnakeCaseFalseConfiguration();\n+      logger.info(\"Testing change with no credentials configuration\");\n+      changeConfigNoCredentials();\n+      logger.info(\"Testing change with no invalid user configuration\");\n+      changeConfigInvalidUser();\n+      logger.info(\"Testing change with no invalid pass configuration\");\n+      changeConfigInvalidPass();\n+      logger.info(\"Testing change with empty user configuration\");\n+      changeConfigEmptyUser();\n+      logger.info(\"Testing change with no empty pass configuration\");\n+      changeConfigEmptyPass();\n+      logger.info(\"Testing replace with domain qualifier configuration\");\n+      replaceMetricsDomainQualifierTrueConfiguration();\n+    } finally {\n+      //restore configuration\n+      submitConfigureForm(exporterUrl, \"replace\", RESOURCE_DIR + \"/exporter/exporter-config.yml\");\n+    }\n   }\n \n   /**\n-   * Install Prometheus, Grafana using helm chart, and verify that pods are running.\n-   * @throws ApiException when creating helm charts or pods fails\n+   * Test covers the following use cases.\n+   * Create Prometheus, Grafana from latest version of helm chart\n+   * verify access to monitoring exporter WebLogic metrics via nginx\n+   * check WebLogic metrics via Prometheus\n    */\n-  private void installPrometheusGrafana() throws IOException, ApiException {\n-    createPvAndPvc(\"prometheus\");\n-    createPvAndPvc(\"alertmanager\");\n-    createPvAndPvc(\"grafana\");\n+  private void checkPromGrafanaLatestVersion() throws Exception {\n+    //check if helm was already created and uninstall", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20f6281f572d6d9c965f4c1144e02237046a07ad"}, "originalPosition": 369}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NjIxNTA1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1757#pullrequestreview-437621505", "createdAt": "2020-06-25T15:41:12Z", "commit": {"oid": "20f6281f572d6d9c965f4c1144e02237046a07ad"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTo0MToxMlrOGpAkRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTo0MToxMlrOGpAkRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY1NDA4Nw==", "bodyText": "remove commented code above", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1757#discussion_r445654087", "createdAt": "2020-06-25T15:41:12Z", "author": {"login": "bhavaniravichandran"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMonitoringExporter.java", "diffHunk": "@@ -1018,8 +1438,404 @@ public static boolean execCommandCheckResponse(String cmd, String searchKey) {\n    * @return true if the output matches searchKey otherwise false\n    */\n   private static Callable<Boolean> searchForKey(String cmd, String searchKey) {\n-    return () -> {\n-      return execCommandCheckResponse(cmd, searchKey);\n-    };\n+    return () -> execCommandCheckResponse(cmd, searchKey);\n+  }\n+\n+  /**\n+   * Check if executed command contains expected output.\n+   *\n+   * @param pod   V1Pod object\n+   * @param searchKey expected string in the log\n+   * @return true if the output matches searchKey otherwise false\n+   */\n+  private static Callable<Boolean> searchPodLogForKey(V1Pod pod, String searchKey) {\n+    return () -> Kubernetes.getPodLog(pod.getMetadata().getName(),\n+            pod.getMetadata().getNamespace()).contains(searchKey);\n+  }\n+\n+  /*\n+   ** uninstall Prometheus and Grafana helm charts\n+   */\n+  private void uninstallPrometheusGrafana() {\n+    if (promHelmParams != null) {\n+      Prometheus.uninstall(promHelmParams);\n+      promHelmParams = null;\n+      prometheusDomainRegexValue = null;\n+      logger.info(\"Prometheus is uninstalled\");\n+    }\n+    if (grafanaHelmParams != null) {\n+      Grafana.uninstall(grafanaHelmParams);\n+      deleteSecret(\"grafana-secret\",monitoringNS);\n+      grafanaHelmParams = null;\n+      logger.info(\"Grafana is uninstalled\");\n+    }\n+  }\n+\n+  private void changeConfigNegative(String effect, String configFile, String expectedErrorMsg)\n+          throws Exception {\n+    final WebClient webClient = new WebClient();\n+    //webClient.addRequestHeader(\"Host\", ingressHost1List.get(0));\n+    HtmlPage originalPage = webClient.getPage(exporterUrl);\n+    assertNotNull(originalPage);\n+    HtmlPage page = submitConfigureForm(exporterUrl, effect, configFile);\n+    assertTrue((page.asText()).contains(expectedErrorMsg));\n+    assertTrue(!(page.asText()).contains(\"Error 500--Internal Server Error\"));\n+  }\n+\n+  private void changeConfigNegativeAuth(\n+          String effect, String configFile, String expectedErrorMsg, String username, String password)\n+          throws Exception {\n+    try {\n+      final WebClient webClient = new WebClient();\n+      //webClient.addRequestHeader(\"Host\", ingressHost1List.get(0));\n+      //webClient.addRequestHeader(\"Location\",exporterUrl);\n+      //webClient.addRequestHeader(\"Referer\", exporterUrl);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20f6281f572d6d9c965f4c1144e02237046a07ad"}, "originalPosition": 1270}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NjI3MDI1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1757#pullrequestreview-437627025", "createdAt": "2020-06-25T15:47:24Z", "commit": {"oid": "20f6281f572d6d9c965f4c1144e02237046a07ad"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTo0NzoyNFrOGpA0xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTo0NzoyNFrOGpA0xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY1ODMxMA==", "bodyText": "Are there tabs? I see it in a lot of files actually.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1757#discussion_r445658310", "createdAt": "2020-06-25T15:47:24Z", "author": {"login": "bhavaniravichandran"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "diffHunk": "@@ -803,19 +838,19 @@ public static String createMiiImageAndVerify(String miiImageNameBase,\n    * @return image name with tag\n    */\n   public static String createImageAndVerify(String imageNameBase,\n-                                             String wdtModelFile,\n-                                             String appName,\n-                                             String modelPropFile,\n-                                             String altModelDir,\n-                                             String domainHome) {\n+                                            String wdtModelFile,\n+                                            String appName,\n+                                            String modelPropFile,\n+                                            String altModelDir,\n+                                            String domainHome) {\n \n     final List<String> wdtModelList = Collections.singletonList(MODEL_DIR + \"/\" + wdtModelFile);\n     final List<String> appSrcDirList = Collections.singletonList(appName);\n     final List<String> modelPropList = Collections.singletonList(altModelDir + \"/\" + modelPropFile);\n \n     return createImageAndVerify(\n-        imageNameBase, wdtModelList, appSrcDirList, modelPropList, WLS_BASE_IMAGE_NAME,\n-        WLS_BASE_IMAGE_TAG, WLS, false, domainHome, false);\n+            imageNameBase, wdtModelList, appSrcDirList, modelPropList, WLS_BASE_IMAGE_NAME,\n+            WLS_BASE_IMAGE_TAG, WLS, false, domainHome, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20f6281f572d6d9c965f4c1144e02237046a07ad"}, "originalPosition": 123}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NjI3NzQy", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1757#pullrequestreview-437627742", "createdAt": "2020-06-25T15:48:14Z", "commit": {"oid": "20f6281f572d6d9c965f4c1144e02237046a07ad"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTo0ODoxNFrOGpA25g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTo0ODoxNFrOGpA25g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY1ODg1NA==", "bodyText": "Looks like tabs here again.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1757#discussion_r445658854", "createdAt": "2020-06-25T15:48:14Z", "author": {"login": "bhavaniravichandran"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "diffHunk": "@@ -942,43 +977,43 @@ public static String createImageAndVerify(String imageNameBase,\n     boolean result = false;\n     if (!modelType) {  //create a domain home in image image\n       result = createImage(\n-          new WitParams()\n-              .baseImageName(baseImageName)\n-              .baseImageTag(baseImageTag)\n-              .domainType(domainType)\n-              .modelImageName(imageName)\n-              .modelImageTag(imageTag)\n-              .modelFiles(wdtModelList)\n-              .modelVariableFiles(modelPropList)\n-              .modelArchiveFiles(archiveList)\n-              .domainHome(WDT_IMAGE_DOMAINHOME_BASE_DIR + \"/\" + domainHome)\n-              .wdtModelOnly(modelType)\n-              .wdtOperation(\"CREATE\")\n-              .wdtVersion(WDT_VERSION)\n-              .env(env)\n-              .redirect(true));\n+              new WitParams()\n+                      .baseImageName(baseImageName)\n+                      .baseImageTag(baseImageTag)\n+                      .domainType(domainType)\n+                      .modelImageName(imageName)\n+                      .modelImageTag(imageTag)\n+                      .modelFiles(wdtModelList)\n+                      .modelVariableFiles(modelPropList)\n+                      .modelArchiveFiles(archiveList)\n+                      .domainHome(WDT_IMAGE_DOMAINHOME_BASE_DIR + \"/\" + domainHome)\n+                      .wdtModelOnly(modelType)\n+                      .wdtOperation(\"CREATE\")\n+                      .wdtVersion(WDT_VERSION)\n+                      .env(env)\n+                      .redirect(true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20f6281f572d6d9c965f4c1144e02237046a07ad"}, "originalPosition": 232}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NjI5Nzg2", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1757#pullrequestreview-437629786", "createdAt": "2020-06-25T15:50:32Z", "commit": {"oid": "20f6281f572d6d9c965f4c1144e02237046a07ad"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "578fa449215a9c8b7890c5137e2ecaa8379fe104", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/578fa449215a9c8b7890c5137e2ecaa8379fe104", "committedDate": "2020-06-25T18:00:06Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into promtest2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b29642ed775469e8fe23a574cbff0e2bcc8fcf40", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b29642ed775469e8fe23a574cbff0e2bcc8fcf40", "committedDate": "2020-06-25T18:39:43Z", "message": "addressed review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "122d29c67b9a8a36e5503dfcf2e145fb2a81a506", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/122d29c67b9a8a36e5503dfcf2e145fb2a81a506", "committedDate": "2020-06-25T20:19:49Z", "message": "fixed typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0324c065ed9c7d5ab397c2fb89905c6f00227a58", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0324c065ed9c7d5ab397c2fb89905c6f00227a58", "committedDate": "2020-06-25T21:12:34Z", "message": "merge"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3ODg1MTk3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1757#pullrequestreview-437885197", "createdAt": "2020-06-25T21:52:26Z", "commit": {"oid": "0324c065ed9c7d5ab397c2fb89905c6f00227a58"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "187cc3dc826ac68b4979e86cd6264d1287557ef5", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/187cc3dc826ac68b4979e86cd6264d1287557ef5", "committedDate": "2020-06-25T21:54:27Z", "message": "merge"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3ODkzNjc1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1757#pullrequestreview-437893675", "createdAt": "2020-06-25T22:09:40Z", "commit": {"oid": "187cc3dc826ac68b4979e86cd6264d1287557ef5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7726d9f6731fc9440eb0a7b469413a889018af69", "author": {"user": {"login": "marinakog", "name": "Marina Kogan"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7726d9f6731fc9440eb0a7b469413a889018af69", "committedDate": "2020-06-25T22:20:20Z", "message": "style"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4582, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}