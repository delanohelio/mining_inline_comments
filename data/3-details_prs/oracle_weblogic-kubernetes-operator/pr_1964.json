{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2NDMxODUy", "number": 1964, "title": "Add Tests for DataHome Override in Domain Custom Resource", "bodyText": "Add test cases for dataHome override in domain custom resource.\nThree use cases are added:\n\ndataHome is not specified\ndataHome is set to empty string\ndataHome is set to a custom location\n\nJenkins test result:\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/2244/\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/2250/\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/2251/", "createdAt": "2020-10-01T17:36:43Z", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1964", "merged": true, "mergeCommit": {"oid": "507ac9d065456e5e90e18885c71275d3571d1d59"}, "closed": true, "closedAt": "2020-10-05T16:49:44Z", "author": {"login": "xiancao"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdOB3EnAH2gAyNDk2NDMxODUyOjU2YmRmZGQxMGMxNmMyY2I4MWQxNGJhZmViNmIxNzdlYWQxNWFiMTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdPmSn5AFqTUwMjIyMTM3OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "56bdfdd10c16c2cb81d14bafeb6b177ead15ab15", "author": {"user": {"login": "xiancao", "name": "Xian Cao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/56bdfdd10c16c2cb81d14bafeb6b177ead15ab15", "committedDate": "2020-09-30T19:22:14Z", "message": "add tests for dataHome override"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87bbd9d5da8d9afa14685e14717c9b5934479a6c", "author": {"user": {"login": "xiancao", "name": "Xian Cao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/87bbd9d5da8d9afa14685e14717c9b5934479a6c", "committedDate": "2020-09-30T19:22:44Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into xc-owls75000"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNjUwNjkw", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1964#pullrequestreview-500650690", "createdAt": "2020-10-01T19:23:38Z", "commit": {"oid": "87bbd9d5da8d9afa14685e14717c9b5934479a6c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzAzMDk2", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1964#pullrequestreview-500703096", "createdAt": "2020-10-01T20:42:36Z", "commit": {"oid": "87bbd9d5da8d9afa14685e14717c9b5934479a6c"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMDo0MjozNlrOHbaJ9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMDo1MToxNlrOHbaZtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwMjEzNA==", "bodyText": "Move the description to javadoc section for the test method", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1964#discussion_r498502134", "createdAt": "2020-10-01T20:42:36Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItParameterizedDomain.java", "diffHunk": "@@ -444,6 +450,172 @@ public void testLivenessProbe() {\n         .isTrue();\n   }\n \n+  @Test\n+  @DisplayName(\"Test dataHome override in a domain with domain in image type\")\n+  public void testDataHomeOverrideDomainInImage() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bbd9d5da8d9afa14685e14717c9b5934479a6c"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwMjc1OQ==", "bodyText": "File store and JMS server are targeted to the WebLogic cluster cluster-1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1964#discussion_r498502759", "createdAt": "2020-10-01T20:44:03Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItParameterizedDomain.java", "diffHunk": "@@ -444,6 +450,172 @@ public void testLivenessProbe() {\n         .isTrue();\n   }\n \n+  @Test\n+  @DisplayName(\"Test dataHome override in a domain with domain in image type\")\n+  public void testDataHomeOverrideDomainInImage() {\n+    // in this domain, set dataHome to /u01/oracle/mydata in domain custom resource\n+    // the domain contains JMS and File Store configuration\n+    // File store directory is set to /u01/oracle/customFileStore/ in the model file which should be overridden\n+    // by dataHome\n+    // File store and JMS server are target to cluster-1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bbd9d5da8d9afa14685e14717c9b5934479a6c"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwNDk3NA==", "bodyText": "Move description to javadoc section\nProvide a complete sentence  [ in this domain, dataHome is not specified ]\ne.g. Create a Domain Resource with defined dataHome.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1964#discussion_r498504974", "createdAt": "2020-10-01T20:48:46Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItParameterizedDomain.java", "diffHunk": "@@ -444,6 +450,172 @@ public void testLivenessProbe() {\n         .isTrue();\n   }\n \n+  @Test\n+  @DisplayName(\"Test dataHome override in a domain with domain in image type\")\n+  public void testDataHomeOverrideDomainInImage() {\n+    // in this domain, set dataHome to /u01/oracle/mydata in domain custom resource\n+    // the domain contains JMS and File Store configuration\n+    // File store directory is set to /u01/oracle/customFileStore/ in the model file which should be overridden\n+    // by dataHome\n+    // File store and JMS server are target to cluster-1\n+    // see resource/wdt-models/wdt-singlecluster-multiapps-usingprop-wls.yaml\n+    assertDomainNotNull(domainInImage);\n+    String domainUid = domainInImage.getSpec().getDomainUid();\n+    String domainNamespace = domainInImage.getMetadata().getNamespace();\n+\n+    // check in admin server pod, there is no data file for JMS server created\n+    String dataFileToCheck = DATA_HOME_OVERRIDE + \"/\" + domainUid + \"/FILESTORE-0000000.DAT\";\n+    String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+    assertFalse(assertDoesNotThrow(\n+        () -> doesFileExistInPod(domainNamespace, adminServerPodName, dataFileToCheck),\n+        String.format(\"exception thrown when checking file %s exists in pod %s in namespace %s\",\n+            dataFileToCheck, adminServerPodName, domainNamespace)),\n+        String.format(\"%s exists in pod %s in namespace %s, expects not exist\",\n+            dataFileToCheck, adminServerPodName, domainNamespace));\n+\n+    // check in admin server pod, the default admin server data file moved to DATA_HOME_OVERRIDE\n+    String defaultAdminDataFile = DATA_HOME_OVERRIDE + \"/\" + domainUid + \"/_WLS_ADMIN-SERVER000000.DAT\";\n+    assertTrue(assertDoesNotThrow(() ->\n+        doesFileExistInPod(domainNamespace, adminServerPodName, defaultAdminDataFile),\n+        String.format(\"exception thrown when checking file %s exists in pod %s in namespace %s\",\n+            dataFileToCheck, adminServerPodName, domainNamespace)),\n+        String.format(\"can not find file %s in pod %s in namespace %s\",\n+            defaultAdminDataFile, adminServerPodName, domainNamespace));\n+\n+    // check in managed server pod, the custom data file for JMS and default managed server datafile are created\n+    // in DATA_HOME_OVERRIDE\n+    for (int i = 1; i <= replicaCount; i++) {\n+      String managedServerPodName = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE + i;\n+      String customDataFile = DATA_HOME_OVERRIDE + \"/\" + domainUid + \"/FILESTORE-0@MANAGED-SERVER\" + i + \"000000.DAT\";\n+      assertTrue(assertDoesNotThrow(() ->\n+              doesFileExistInPod(domainNamespace, managedServerPodName, customDataFile),\n+          String.format(\"exception thrown when checking file %s exists in pod %s in namespace %s\",\n+              customDataFile, managedServerPodName, domainNamespace)),\n+          String.format(\"can not find file %s in pod %s in namespace %s\",\n+              customDataFile, managedServerPodName, domainNamespace));\n+\n+      String defaultMSDataFile = DATA_HOME_OVERRIDE + \"/\" + domainUid + \"/_WLS_MANAGED-SERVER\" + i + \"000000.DAT\";\n+      assertTrue(assertDoesNotThrow(() ->\n+              doesFileExistInPod(domainNamespace, managedServerPodName, defaultMSDataFile),\n+          String.format(\"exception thrown when checking file %s exists in pod %s in namespace %s\",\n+              defaultMSDataFile, managedServerPodName, domainNamespace)),\n+          String.format(\"can not find file %s in pod %s in namespace %s\",\n+              defaultMSDataFile, managedServerPodName, domainNamespace));\n+    }\n+  }\n+\n+  @Test\n+  @DisplayName(\"Test dataHome override in a domain with model in image type\")\n+  public void testDataHomeOverrideMiiDomain() {\n+    // in this domain, dataHome is not specified", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bbd9d5da8d9afa14685e14717c9b5934479a6c"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwNTQxOA==", "bodyText": "File store and JMS server are targeted to the admin server", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1964#discussion_r498505418", "createdAt": "2020-10-01T20:49:43Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItParameterizedDomain.java", "diffHunk": "@@ -444,6 +450,172 @@ public void testLivenessProbe() {\n         .isTrue();\n   }\n \n+  @Test\n+  @DisplayName(\"Test dataHome override in a domain with domain in image type\")\n+  public void testDataHomeOverrideDomainInImage() {\n+    // in this domain, set dataHome to /u01/oracle/mydata in domain custom resource\n+    // the domain contains JMS and File Store configuration\n+    // File store directory is set to /u01/oracle/customFileStore/ in the model file which should be overridden\n+    // by dataHome\n+    // File store and JMS server are target to cluster-1\n+    // see resource/wdt-models/wdt-singlecluster-multiapps-usingprop-wls.yaml\n+    assertDomainNotNull(domainInImage);\n+    String domainUid = domainInImage.getSpec().getDomainUid();\n+    String domainNamespace = domainInImage.getMetadata().getNamespace();\n+\n+    // check in admin server pod, there is no data file for JMS server created\n+    String dataFileToCheck = DATA_HOME_OVERRIDE + \"/\" + domainUid + \"/FILESTORE-0000000.DAT\";\n+    String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+    assertFalse(assertDoesNotThrow(\n+        () -> doesFileExistInPod(domainNamespace, adminServerPodName, dataFileToCheck),\n+        String.format(\"exception thrown when checking file %s exists in pod %s in namespace %s\",\n+            dataFileToCheck, adminServerPodName, domainNamespace)),\n+        String.format(\"%s exists in pod %s in namespace %s, expects not exist\",\n+            dataFileToCheck, adminServerPodName, domainNamespace));\n+\n+    // check in admin server pod, the default admin server data file moved to DATA_HOME_OVERRIDE\n+    String defaultAdminDataFile = DATA_HOME_OVERRIDE + \"/\" + domainUid + \"/_WLS_ADMIN-SERVER000000.DAT\";\n+    assertTrue(assertDoesNotThrow(() ->\n+        doesFileExistInPod(domainNamespace, adminServerPodName, defaultAdminDataFile),\n+        String.format(\"exception thrown when checking file %s exists in pod %s in namespace %s\",\n+            dataFileToCheck, adminServerPodName, domainNamespace)),\n+        String.format(\"can not find file %s in pod %s in namespace %s\",\n+            defaultAdminDataFile, adminServerPodName, domainNamespace));\n+\n+    // check in managed server pod, the custom data file for JMS and default managed server datafile are created\n+    // in DATA_HOME_OVERRIDE\n+    for (int i = 1; i <= replicaCount; i++) {\n+      String managedServerPodName = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE + i;\n+      String customDataFile = DATA_HOME_OVERRIDE + \"/\" + domainUid + \"/FILESTORE-0@MANAGED-SERVER\" + i + \"000000.DAT\";\n+      assertTrue(assertDoesNotThrow(() ->\n+              doesFileExistInPod(domainNamespace, managedServerPodName, customDataFile),\n+          String.format(\"exception thrown when checking file %s exists in pod %s in namespace %s\",\n+              customDataFile, managedServerPodName, domainNamespace)),\n+          String.format(\"can not find file %s in pod %s in namespace %s\",\n+              customDataFile, managedServerPodName, domainNamespace));\n+\n+      String defaultMSDataFile = DATA_HOME_OVERRIDE + \"/\" + domainUid + \"/_WLS_MANAGED-SERVER\" + i + \"000000.DAT\";\n+      assertTrue(assertDoesNotThrow(() ->\n+              doesFileExistInPod(domainNamespace, managedServerPodName, defaultMSDataFile),\n+          String.format(\"exception thrown when checking file %s exists in pod %s in namespace %s\",\n+              defaultMSDataFile, managedServerPodName, domainNamespace)),\n+          String.format(\"can not find file %s in pod %s in namespace %s\",\n+              defaultMSDataFile, managedServerPodName, domainNamespace));\n+    }\n+  }\n+\n+  @Test\n+  @DisplayName(\"Test dataHome override in a domain with model in image type\")\n+  public void testDataHomeOverrideMiiDomain() {\n+    // in this domain, dataHome is not specified\n+    // the domain contains JMS and File Store configuration\n+    // File store directory is set to /u01/oracle/customFileStore/ in the model file which should not be overridden\n+    // by dataHome\n+    // File store and JMS server are target to admin server", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bbd9d5da8d9afa14685e14717c9b5934479a6c"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwNjE2NQ==", "bodyText": "Move the description to javadoc with complete sentences, as per comments on previous method", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1964#discussion_r498506165", "createdAt": "2020-10-01T20:51:16Z", "author": {"login": "anpanigr"}, "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItParameterizedDomain.java", "diffHunk": "@@ -444,6 +450,172 @@ public void testLivenessProbe() {\n         .isTrue();\n   }\n \n+  @Test\n+  @DisplayName(\"Test dataHome override in a domain with domain in image type\")\n+  public void testDataHomeOverrideDomainInImage() {\n+    // in this domain, set dataHome to /u01/oracle/mydata in domain custom resource\n+    // the domain contains JMS and File Store configuration\n+    // File store directory is set to /u01/oracle/customFileStore/ in the model file which should be overridden\n+    // by dataHome\n+    // File store and JMS server are target to cluster-1\n+    // see resource/wdt-models/wdt-singlecluster-multiapps-usingprop-wls.yaml\n+    assertDomainNotNull(domainInImage);\n+    String domainUid = domainInImage.getSpec().getDomainUid();\n+    String domainNamespace = domainInImage.getMetadata().getNamespace();\n+\n+    // check in admin server pod, there is no data file for JMS server created\n+    String dataFileToCheck = DATA_HOME_OVERRIDE + \"/\" + domainUid + \"/FILESTORE-0000000.DAT\";\n+    String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+    assertFalse(assertDoesNotThrow(\n+        () -> doesFileExistInPod(domainNamespace, adminServerPodName, dataFileToCheck),\n+        String.format(\"exception thrown when checking file %s exists in pod %s in namespace %s\",\n+            dataFileToCheck, adminServerPodName, domainNamespace)),\n+        String.format(\"%s exists in pod %s in namespace %s, expects not exist\",\n+            dataFileToCheck, adminServerPodName, domainNamespace));\n+\n+    // check in admin server pod, the default admin server data file moved to DATA_HOME_OVERRIDE\n+    String defaultAdminDataFile = DATA_HOME_OVERRIDE + \"/\" + domainUid + \"/_WLS_ADMIN-SERVER000000.DAT\";\n+    assertTrue(assertDoesNotThrow(() ->\n+        doesFileExistInPod(domainNamespace, adminServerPodName, defaultAdminDataFile),\n+        String.format(\"exception thrown when checking file %s exists in pod %s in namespace %s\",\n+            dataFileToCheck, adminServerPodName, domainNamespace)),\n+        String.format(\"can not find file %s in pod %s in namespace %s\",\n+            defaultAdminDataFile, adminServerPodName, domainNamespace));\n+\n+    // check in managed server pod, the custom data file for JMS and default managed server datafile are created\n+    // in DATA_HOME_OVERRIDE\n+    for (int i = 1; i <= replicaCount; i++) {\n+      String managedServerPodName = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE + i;\n+      String customDataFile = DATA_HOME_OVERRIDE + \"/\" + domainUid + \"/FILESTORE-0@MANAGED-SERVER\" + i + \"000000.DAT\";\n+      assertTrue(assertDoesNotThrow(() ->\n+              doesFileExistInPod(domainNamespace, managedServerPodName, customDataFile),\n+          String.format(\"exception thrown when checking file %s exists in pod %s in namespace %s\",\n+              customDataFile, managedServerPodName, domainNamespace)),\n+          String.format(\"can not find file %s in pod %s in namespace %s\",\n+              customDataFile, managedServerPodName, domainNamespace));\n+\n+      String defaultMSDataFile = DATA_HOME_OVERRIDE + \"/\" + domainUid + \"/_WLS_MANAGED-SERVER\" + i + \"000000.DAT\";\n+      assertTrue(assertDoesNotThrow(() ->\n+              doesFileExistInPod(domainNamespace, managedServerPodName, defaultMSDataFile),\n+          String.format(\"exception thrown when checking file %s exists in pod %s in namespace %s\",\n+              defaultMSDataFile, managedServerPodName, domainNamespace)),\n+          String.format(\"can not find file %s in pod %s in namespace %s\",\n+              defaultMSDataFile, managedServerPodName, domainNamespace));\n+    }\n+  }\n+\n+  @Test\n+  @DisplayName(\"Test dataHome override in a domain with model in image type\")\n+  public void testDataHomeOverrideMiiDomain() {\n+    // in this domain, dataHome is not specified\n+    // the domain contains JMS and File Store configuration\n+    // File store directory is set to /u01/oracle/customFileStore/ in the model file which should not be overridden\n+    // by dataHome\n+    // File store and JMS server are target to admin server\n+    // see resource/wdt-models/model-multiclusterdomain-sampleapp-wls.yaml\n+    assertDomainNotNull(miiDomain);\n+    String domainUid = miiDomain.getSpec().getDomainUid();\n+    String domainNamespace = miiDomain.getMetadata().getNamespace();\n+\n+    // check in admin server pod, there is a data file for JMS server created in /u01/oracle/customFileStore\n+    String dataFileToCheck = \"/u01/oracle/customFileStore/FILESTORE-0000000.DAT\";\n+    String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+    assertTrue(assertDoesNotThrow(\n+        () -> doesFileExistInPod(domainNamespace, adminServerPodName, dataFileToCheck),\n+        String.format(\"exception thrown when checking file %s exists in pod %s in namespace %s\",\n+            dataFileToCheck, adminServerPodName, domainNamespace)),\n+        String.format(\"did not find file %s in pod %s in namespace %s\",\n+            dataFileToCheck, adminServerPodName, domainNamespace));\n+\n+    // check in admin server pod, the default admin server data file is in default data store\n+    String defaultAdminDataFile =\n+        \"/u01/domains/\" + domainUid + \"/servers/admin-server/data/store/default/_WLS_ADMIN-SERVER000000.DAT\";\n+    assertTrue(assertDoesNotThrow(() ->\n+            doesFileExistInPod(domainNamespace, adminServerPodName, defaultAdminDataFile),\n+        String.format(\"exception thrown when checking file %s exists in pod %s in namespace %s\",\n+            dataFileToCheck, adminServerPodName, domainNamespace)),\n+        String.format(\"did not find file %s in pod %s in namespace %s\",\n+            defaultAdminDataFile, adminServerPodName, domainNamespace));\n+\n+    // check in managed server pod, there is no custom data file for JMS is created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      for (int j = 1; j <= NUMBER_OF_CLUSTERS_MIIDOMAIN; j++) {\n+        String managedServerPodName = domainUid + \"-cluster-\" + j + \"-\" + MANAGED_SERVER_NAME_BASE + i;\n+        String customDataFile = \"/u01/oracle/customFileStore/FILESTORE-0@MANAGED-SERVER\" + i + \"000000.DAT\";\n+        assertFalse(assertDoesNotThrow(() ->\n+                doesFileExistInPod(domainNamespace, managedServerPodName, customDataFile),\n+            String.format(\"exception thrown when checking file %s exists in pod %s in namespace %s\",\n+                customDataFile, managedServerPodName, domainNamespace)),\n+            String.format(\"found file %s in pod %s in namespace %s, expect not exist\",\n+                customDataFile, managedServerPodName, domainNamespace));\n+\n+        String defaultMSDataFile = \"/u01/domains/\" + domainUid + \"/servers/cluster-\" + j + \"-managed-server\" + i\n+            + \"/data/store/default/_WLS_CLUSTER-\" + j + \"-MANAGED-SERVER\" + i + \"000000.DAT\";\n+        assertTrue(assertDoesNotThrow(() ->\n+                doesFileExistInPod(domainNamespace, managedServerPodName, defaultMSDataFile),\n+            String.format(\"exception thrown when checking file %s exists in pod %s in namespace %s\",\n+                defaultMSDataFile, managedServerPodName, domainNamespace)),\n+            String.format(\"can not find file %s in pod %s in namespace %s\",\n+                defaultMSDataFile, managedServerPodName, domainNamespace));\n+      }\n+    }\n+  }\n+\n+  @Test\n+  @DisplayName(\"Test dataHome override in a domain with domain on PV type\")\n+  public void testDataHomeOverrideDomainOnPV() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bbd9d5da8d9afa14685e14717c9b5934479a6c"}, "originalPosition": 186}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff1c5242f38d167ce16aed6c395f7b85df5df7fc", "author": {"user": {"login": "xiancao", "name": "Xian Cao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ff1c5242f38d167ce16aed6c395f7b85df5df7fc", "committedDate": "2020-10-02T17:06:11Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into xc-owls75000"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7bfe4d66934ed46a02b889bb4d305e2f529c8c7", "author": {"user": {"login": "xiancao", "name": "Xian Cao"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a7bfe4d66934ed46a02b889bb4d305e2f529c8c7", "committedDate": "2020-10-02T18:20:08Z", "message": "address Pani's comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMjIxMzc4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1964#pullrequestreview-502221378", "createdAt": "2020-10-05T16:22:50Z", "commit": {"oid": "a7bfe4d66934ed46a02b889bb4d305e2f529c8c7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4214, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}