{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyMDE3Njky", "number": 1775, "title": "Default resources java options", "bodyText": "Changes for OWLS-80384 - Verify that operator deployment and WebLogic pods have good default cpu/memory resources.\nChanged WLS samples to use below defaults -\n\nMin and Max heap size of 256MB and 512MB\nMemory requests of 768MB and CPU request of 250m\nChanged JRF samples to use below defaults -\nMin and Max heap size of 512MB and 1024MB for admin server and 256MB and 1024MB for managed servers\nMemory requests of 1280MB and CPU request of 500m\n\nCreated first draft of FAQ document for resource requests/limits and Java options for heap size considerations.", "createdAt": "2020-06-30T13:10:08Z", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775", "merged": true, "mergeCommit": {"oid": "6b3563a10b8d08a3bef9657d2006fbdf1b11fb43"}, "closed": true, "closedAt": "2020-07-02T20:59:49Z", "author": {"login": "ankedia"}, "timelineItems": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwVPKggH2gAyNDQyMDE3NjkyOmVkZTY4ZTE3ZDA2MzdkZGFhMjY3MWM3MmM0ZjlkNjM5NmI3YWUwMzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcxEM9mgH2gAyNDQyMDE3NjkyOjAzNTRiOWQxZjUyYTcwMGMzNjZlN2FhYTUzYTcwY2I0NmRmYWJlNmU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ede68e17d0637ddaa2671c72c4f9d6396b7ae034", "author": {"user": {"login": "ankedia", "name": "Anil Kedia"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ede68e17d0637ddaa2671c72c4f9d6396b7ae034", "committedDate": "2020-06-30T12:59:01Z", "message": "Changes for OWLS-80384 - Verify that operator deployment and WebLogic pods have good default cpu/memory resources"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a23d465d277d44c2f5b22ee39ff66f06948acfa1", "author": {"user": {"login": "ankedia", "name": "Anil Kedia"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a23d465d277d44c2f5b22ee39ff66f06948acfa1", "committedDate": "2020-06-30T13:02:32Z", "message": "changes for OWLS-80384 - Verify that operator deployment and WebLogic pods have good default cpu/memory resources"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMTMxNTg0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#pullrequestreview-440131584", "createdAt": "2020-06-30T15:25:48Z", "commit": {"oid": "a23d465d277d44c2f5b22ee39ff66f06948acfa1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNToyNTo0OVrOGrB2ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNToyNTo0OVrOGrB2ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc3MjMxOA==", "bodyText": "Replace every \".s\" in this document with \"'s\".", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r447772318", "createdAt": "2020-06-30T15:25:49Z", "author": {"login": "tbarnes-us"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,84 @@\n+---\n+title: \"Considerations for Pod Resource (Memory and CPU) Requests and Limits\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: true\n+weight: 40\n+---\n+The operator creates a pod for each running WebLogic Server instance and each pod will have a container. It.s important that containers have enough resources in order for applications to run efficiently and expeditiously. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23d465d277d44c2f5b22ee39ff66f06948acfa1"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMTMzMzI4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#pullrequestreview-440133328", "createdAt": "2020-06-30T15:27:34Z", "commit": {"oid": "a23d465d277d44c2f5b22ee39ff66f06948acfa1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNToyNzozNFrOGrB7ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNToyNzozNFrOGrB7ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc3MzYzNQ==", "bodyText": "rouge -> rogue (took me a bit to figure that one out - interesting autocorrect :-) )", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r447773635", "createdAt": "2020-06-30T15:27:34Z", "author": {"login": "tbarnes-us"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,84 @@\n+---\n+title: \"Considerations for Pod Resource (Memory and CPU) Requests and Limits\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: true\n+weight: 40\n+---\n+The operator creates a pod for each running WebLogic Server instance and each pod will have a container. It.s important that containers have enough resources in order for applications to run efficiently and expeditiously. \n+\n+If a pod is scheduled on a node with limited resources, it.s possible for the node to run out of memory or CPU resources, and for applications to stop working properly or have degraded performance. It.s also possible for a rouge application to use all available memory and/or CPU, which makes other containers running on the same system unresponsive. The same problem can happen if an application has memory leak or bad configuration. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23d465d277d44c2f5b22ee39ff66f06948acfa1"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMTM3NDY0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#pullrequestreview-440137464", "createdAt": "2020-06-30T15:31:43Z", "commit": {"oid": "a23d465d277d44c2f5b22ee39ff66f06948acfa1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTozMTo0M1rOGrCIbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTozMTo0M1rOGrCIbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc3Njg3OQ==", "bodyText": "Additionally, pod.s ... --> Additionally, a pod's priority and Quality of Service (QoS) is affected by whether or not it specifies resource requests and limits.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r447776879", "createdAt": "2020-06-30T15:31:43Z", "author": {"login": "tbarnes-us"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,84 @@\n+---\n+title: \"Considerations for Pod Resource (Memory and CPU) Requests and Limits\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: true\n+weight: 40\n+---\n+The operator creates a pod for each running WebLogic Server instance and each pod will have a container. It.s important that containers have enough resources in order for applications to run efficiently and expeditiously. \n+\n+If a pod is scheduled on a node with limited resources, it.s possible for the node to run out of memory or CPU resources, and for applications to stop working properly or have degraded performance. It.s also possible for a rouge application to use all available memory and/or CPU, which makes other containers running on the same system unresponsive. The same problem can happen if an application has memory leak or bad configuration. \n+\n+A pod.s resource requests and limit parameters can be used to solve these problems. Setting resource limits prevents an application from using more than it.s share of resource. Thus, limiting resources improves reliability and stability of applications.  It also allows users to plan for the hardware capacity. Additionally, pod.s priority and the Quality of Service (QoS) that pod receives is affected by whether resource requests and limits are specified or not.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23d465d277d44c2f5b22ee39ff66f06948acfa1"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMDI4MzI5", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#pullrequestreview-440028329", "createdAt": "2020-06-30T13:43:52Z", "commit": {"oid": "a23d465d277d44c2f5b22ee39ff66f06948acfa1"}, "state": "COMMENTED", "comments": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzo0Mzo1MlrOGq9CCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjoxMjozNFrOGrD6lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY5MzMyMg==", "bodyText": "Considerations for Pod Resource (Memory and CPU) Requests and Limits -> Considerations for Pod resource (memory and CPU) requests and limits  (we use sentence capitalization instead of title capitalization; appears more user friendly)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r447693322", "createdAt": "2020-06-30T13:43:52Z", "author": {"login": "rosemarymarano"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,84 @@\n+---\n+title: \"Considerations for Pod Resource (Memory and CPU) Requests and Limits\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23d465d277d44c2f5b22ee39ff66f06948acfa1"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY5NDc1OQ==", "bodyText": "pod -> Pod (globally, if you are referring to a Kubernetes resource)\nIt.s -> It's (typo)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r447694759", "createdAt": "2020-06-30T13:45:53Z", "author": {"login": "rosemarymarano"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,84 @@\n+---\n+title: \"Considerations for Pod Resource (Memory and CPU) Requests and Limits\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: true\n+weight: 40\n+---\n+The operator creates a pod for each running WebLogic Server instance and each pod will have a container. It.s important that containers have enough resources in order for applications to run efficiently and expeditiously. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23d465d277d44c2f5b22ee39ff66f06948acfa1"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY5NjQxNQ==", "bodyText": "node -> Node (globally, if you are referring to a Kubernetes resource)\nIt.s -> It's (typo, globally)\nrouge -> rogue\nhas memory leak -> has a memory leak", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r447696415", "createdAt": "2020-06-30T13:48:10Z", "author": {"login": "rosemarymarano"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,84 @@\n+---\n+title: \"Considerations for Pod Resource (Memory and CPU) Requests and Limits\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: true\n+weight: 40\n+---\n+The operator creates a pod for each running WebLogic Server instance and each pod will have a container. It.s important that containers have enough resources in order for applications to run efficiently and expeditiously. \n+\n+If a pod is scheduled on a node with limited resources, it.s possible for the node to run out of memory or CPU resources, and for applications to stop working properly or have degraded performance. It.s also possible for a rouge application to use all available memory and/or CPU, which makes other containers running on the same system unresponsive. The same problem can happen if an application has memory leak or bad configuration. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23d465d277d44c2f5b22ee39ff66f06948acfa1"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY5OTk0NA==", "bodyText": "pod.s -> pod's (typo, globally; your apostrophes are periods)\nof resource -> of resources\nIt also allows users to plan -> Also, it lets you plan\npod.s priority and the Quality of Service (QoS) that pod receives -> the pod's priority and Quality of Service (QoS) that the pod receives\nare specified or not. -> are specified.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r447699944", "createdAt": "2020-06-30T13:52:50Z", "author": {"login": "rosemarymarano"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,84 @@\n+---\n+title: \"Considerations for Pod Resource (Memory and CPU) Requests and Limits\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: true\n+weight: 40\n+---\n+The operator creates a pod for each running WebLogic Server instance and each pod will have a container. It.s important that containers have enough resources in order for applications to run efficiently and expeditiously. \n+\n+If a pod is scheduled on a node with limited resources, it.s possible for the node to run out of memory or CPU resources, and for applications to stop working properly or have degraded performance. It.s also possible for a rouge application to use all available memory and/or CPU, which makes other containers running on the same system unresponsive. The same problem can happen if an application has memory leak or bad configuration. \n+\n+A pod.s resource requests and limit parameters can be used to solve these problems. Setting resource limits prevents an application from using more than it.s share of resource. Thus, limiting resources improves reliability and stability of applications.  It also allows users to plan for the hardware capacity. Additionally, pod.s priority and the Quality of Service (QoS) that pod receives is affected by whether resource requests and limits are specified or not.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23d465d277d44c2f5b22ee39ff66f06948acfa1"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwMDQ0NA==", "bodyText": "Prioritization -> prioritization", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r447700444", "createdAt": "2020-06-30T13:53:31Z", "author": {"login": "rosemarymarano"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,84 @@\n+---\n+title: \"Considerations for Pod Resource (Memory and CPU) Requests and Limits\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: true\n+weight: 40\n+---\n+The operator creates a pod for each running WebLogic Server instance and each pod will have a container. It.s important that containers have enough resources in order for applications to run efficiently and expeditiously. \n+\n+If a pod is scheduled on a node with limited resources, it.s possible for the node to run out of memory or CPU resources, and for applications to stop working properly or have degraded performance. It.s also possible for a rouge application to use all available memory and/or CPU, which makes other containers running on the same system unresponsive. The same problem can happen if an application has memory leak or bad configuration. \n+\n+A pod.s resource requests and limit parameters can be used to solve these problems. Setting resource limits prevents an application from using more than it.s share of resource. Thus, limiting resources improves reliability and stability of applications.  It also allows users to plan for the hardware capacity. Additionally, pod.s priority and the Quality of Service (QoS) that pod receives is affected by whether resource requests and limits are specified or not.\n+\n+## Pod Quality Of Service (QoS) and Prioritization", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23d465d277d44c2f5b22ee39ff66f06948acfa1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwMjMxOA==", "bodyText": "Pod.s Quality of Service (QoS) -> A Pod's QoS (you don't have to repeat the spelled out acronym more than once)\nwhether pod.s resource -> whether the pod's resource\nare configured or not -> are configured", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r447702318", "createdAt": "2020-06-30T13:55:52Z", "author": {"login": "rosemarymarano"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,84 @@\n+---\n+title: \"Considerations for Pod Resource (Memory and CPU) Requests and Limits\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: true\n+weight: 40\n+---\n+The operator creates a pod for each running WebLogic Server instance and each pod will have a container. It.s important that containers have enough resources in order for applications to run efficiently and expeditiously. \n+\n+If a pod is scheduled on a node with limited resources, it.s possible for the node to run out of memory or CPU resources, and for applications to stop working properly or have degraded performance. It.s also possible for a rouge application to use all available memory and/or CPU, which makes other containers running on the same system unresponsive. The same problem can happen if an application has memory leak or bad configuration. \n+\n+A pod.s resource requests and limit parameters can be used to solve these problems. Setting resource limits prevents an application from using more than it.s share of resource. Thus, limiting resources improves reliability and stability of applications.  It also allows users to plan for the hardware capacity. Additionally, pod.s priority and the Quality of Service (QoS) that pod receives is affected by whether resource requests and limits are specified or not.\n+\n+## Pod Quality Of Service (QoS) and Prioritization\n+Pod.s Quality of Service (QoS) and priority is determined based on whether pod.s resource requests and limits are configured or not and how they.re configured.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23d465d277d44c2f5b22ee39ff66f06948acfa1"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwMzg0Ng==", "bodyText": "Best Effort QoS -> Best-Effort QoS (IF you hyphenate it in the description, you must hyphenate it in the title)\nlimits, pod receives .best-effort. QoS -> limits, then the pod receives \"best-effort\" QoS\nwhere node -> where a Node", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r447703846", "createdAt": "2020-06-30T13:57:57Z", "author": {"login": "rosemarymarano"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,84 @@\n+---\n+title: \"Considerations for Pod Resource (Memory and CPU) Requests and Limits\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: true\n+weight: 40\n+---\n+The operator creates a pod for each running WebLogic Server instance and each pod will have a container. It.s important that containers have enough resources in order for applications to run efficiently and expeditiously. \n+\n+If a pod is scheduled on a node with limited resources, it.s possible for the node to run out of memory or CPU resources, and for applications to stop working properly or have degraded performance. It.s also possible for a rouge application to use all available memory and/or CPU, which makes other containers running on the same system unresponsive. The same problem can happen if an application has memory leak or bad configuration. \n+\n+A pod.s resource requests and limit parameters can be used to solve these problems. Setting resource limits prevents an application from using more than it.s share of resource. Thus, limiting resources improves reliability and stability of applications.  It also allows users to plan for the hardware capacity. Additionally, pod.s priority and the Quality of Service (QoS) that pod receives is affected by whether resource requests and limits are specified or not.\n+\n+## Pod Quality Of Service (QoS) and Prioritization\n+Pod.s Quality of Service (QoS) and priority is determined based on whether pod.s resource requests and limits are configured or not and how they.re configured.\n+\n+**Best Effort QoS**: If you don.t configure requests and limits, pod receives .best-effort. QoS and pod has the **lowest priority**. In cases where node runs out of non-shareable resources, kubelet.s out-of-resource eviction policy evicts/kills the pods with best-effort QoS first.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23d465d277d44c2f5b22ee39ff66f06948acfa1"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcxNDA4Nw==", "bodyText": "values, pod will have .Guranteed. -> values, then the Pod will have \"guaranteed\"\nand pod will be considered as of the top -> and it will be considered as the top\nsettings indicates ->  settings indicate\nresources, Kubernetes -> resources, then Kubernetes", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r447714087", "createdAt": "2020-06-30T14:11:21Z", "author": {"login": "rosemarymarano"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,84 @@\n+---\n+title: \"Considerations for Pod Resource (Memory and CPU) Requests and Limits\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: true\n+weight: 40\n+---\n+The operator creates a pod for each running WebLogic Server instance and each pod will have a container. It.s important that containers have enough resources in order for applications to run efficiently and expeditiously. \n+\n+If a pod is scheduled on a node with limited resources, it.s possible for the node to run out of memory or CPU resources, and for applications to stop working properly or have degraded performance. It.s also possible for a rouge application to use all available memory and/or CPU, which makes other containers running on the same system unresponsive. The same problem can happen if an application has memory leak or bad configuration. \n+\n+A pod.s resource requests and limit parameters can be used to solve these problems. Setting resource limits prevents an application from using more than it.s share of resource. Thus, limiting resources improves reliability and stability of applications.  It also allows users to plan for the hardware capacity. Additionally, pod.s priority and the Quality of Service (QoS) that pod receives is affected by whether resource requests and limits are specified or not.\n+\n+## Pod Quality Of Service (QoS) and Prioritization\n+Pod.s Quality of Service (QoS) and priority is determined based on whether pod.s resource requests and limits are configured or not and how they.re configured.\n+\n+**Best Effort QoS**: If you don.t configure requests and limits, pod receives .best-effort. QoS and pod has the **lowest priority**. In cases where node runs out of non-shareable resources, kubelet.s out-of-resource eviction policy evicts/kills the pods with best-effort QoS first.\n+\n+**Burstable QoS**: If you configure both resource requests and limits, and set the requests to be less than the limit, pod.s QoS will be .Burstable.. Similarly when you only configure the resource requests (without limits), the pod QoS is .Burstable.. When the node runs out of non-shareable resources, kubelet will kill .Burstable. Pods only when there are no more .best-effort. pods running. The Burstable pod receives **medium priority**.\n+\n+**Guaranteed QoS**:  If you set the requests and the limits to equal values, pod will have .Guranteed. QoS and pod will be considered as of the top most priority. These settings indicates that your pod will consume a fixed amount of memory and CPU. With this configuration, if a node runs out of shareable resources, Kubernetes will kill the best-effort and the burstable Pods first before terminating these Guaranteed QoS Pods. These are the **highest priority** pods.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23d465d277d44c2f5b22ee39ff66f06948acfa1"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcxNzIxMg==", "bodyText": "limit, pod.s QoS -> limit, then the pod's QoS\n.Burstable. -> \"burstable\" (does not need to be capitalized in the paragraph; the choice is to capitalize best-effort, burstable, and guaranteed consistently in the paras) or to keep them all lower case.)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r447717212", "createdAt": "2020-06-30T14:15:16Z", "author": {"login": "rosemarymarano"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,84 @@\n+---\n+title: \"Considerations for Pod Resource (Memory and CPU) Requests and Limits\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: true\n+weight: 40\n+---\n+The operator creates a pod for each running WebLogic Server instance and each pod will have a container. It.s important that containers have enough resources in order for applications to run efficiently and expeditiously. \n+\n+If a pod is scheduled on a node with limited resources, it.s possible for the node to run out of memory or CPU resources, and for applications to stop working properly or have degraded performance. It.s also possible for a rouge application to use all available memory and/or CPU, which makes other containers running on the same system unresponsive. The same problem can happen if an application has memory leak or bad configuration. \n+\n+A pod.s resource requests and limit parameters can be used to solve these problems. Setting resource limits prevents an application from using more than it.s share of resource. Thus, limiting resources improves reliability and stability of applications.  It also allows users to plan for the hardware capacity. Additionally, pod.s priority and the Quality of Service (QoS) that pod receives is affected by whether resource requests and limits are specified or not.\n+\n+## Pod Quality Of Service (QoS) and Prioritization\n+Pod.s Quality of Service (QoS) and priority is determined based on whether pod.s resource requests and limits are configured or not and how they.re configured.\n+\n+**Best Effort QoS**: If you don.t configure requests and limits, pod receives .best-effort. QoS and pod has the **lowest priority**. In cases where node runs out of non-shareable resources, kubelet.s out-of-resource eviction policy evicts/kills the pods with best-effort QoS first.\n+\n+**Burstable QoS**: If you configure both resource requests and limits, and set the requests to be less than the limit, pod.s QoS will be .Burstable.. Similarly when you only configure the resource requests (without limits), the pod QoS is .Burstable.. When the node runs out of non-shareable resources, kubelet will kill .Burstable. Pods only when there are no more .best-effort. pods running. The Burstable pod receives **medium priority**.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23d465d277d44c2f5b22ee39ff66f06948acfa1"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcyMjU2NQ==", "bodyText": "to set correct heap -> to set the correct heap\nIf available memory on node or memory allocated to container -> If the available memory on a Node or the memory allocated to a container\nfor specified JVM heap arguments -> for the specified JVM heap arguments\nWL process  -> WebLogic processes\nthat configured heap sizes -> that the configured heap sizes", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r447722565", "createdAt": "2020-06-30T14:22:14Z", "author": {"login": "rosemarymarano"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,84 @@\n+---\n+title: \"Considerations for Pod Resource (Memory and CPU) Requests and Limits\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: true\n+weight: 40\n+---\n+The operator creates a pod for each running WebLogic Server instance and each pod will have a container. It.s important that containers have enough resources in order for applications to run efficiently and expeditiously. \n+\n+If a pod is scheduled on a node with limited resources, it.s possible for the node to run out of memory or CPU resources, and for applications to stop working properly or have degraded performance. It.s also possible for a rouge application to use all available memory and/or CPU, which makes other containers running on the same system unresponsive. The same problem can happen if an application has memory leak or bad configuration. \n+\n+A pod.s resource requests and limit parameters can be used to solve these problems. Setting resource limits prevents an application from using more than it.s share of resource. Thus, limiting resources improves reliability and stability of applications.  It also allows users to plan for the hardware capacity. Additionally, pod.s priority and the Quality of Service (QoS) that pod receives is affected by whether resource requests and limits are specified or not.\n+\n+## Pod Quality Of Service (QoS) and Prioritization\n+Pod.s Quality of Service (QoS) and priority is determined based on whether pod.s resource requests and limits are configured or not and how they.re configured.\n+\n+**Best Effort QoS**: If you don.t configure requests and limits, pod receives .best-effort. QoS and pod has the **lowest priority**. In cases where node runs out of non-shareable resources, kubelet.s out-of-resource eviction policy evicts/kills the pods with best-effort QoS first.\n+\n+**Burstable QoS**: If you configure both resource requests and limits, and set the requests to be less than the limit, pod.s QoS will be .Burstable.. Similarly when you only configure the resource requests (without limits), the pod QoS is .Burstable.. When the node runs out of non-shareable resources, kubelet will kill .Burstable. Pods only when there are no more .best-effort. pods running. The Burstable pod receives **medium priority**.\n+\n+**Guaranteed QoS**:  If you set the requests and the limits to equal values, pod will have .Guranteed. QoS and pod will be considered as of the top most priority. These settings indicates that your pod will consume a fixed amount of memory and CPU. With this configuration, if a node runs out of shareable resources, Kubernetes will kill the best-effort and the burstable Pods first before terminating these Guaranteed QoS Pods. These are the **highest priority** pods.\n+\n+## Java heap size and pod memory request/limit considerations\n+It.s extremely important to set correct heap size for JVM-based applications.  If available memory on node or memory allocated to container is not sufficient for specified JVM heap arguments (and additional off-heap memory), it is possible for WL process to run out of memory. In order to avoid this, you will need to make sure that configured heap sizes are not too big and that the pod is scheduled on the node with sufficient memory.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23d465d277d44c2f5b22ee39ff66f06948acfa1"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc3OTQ4OQ==", "bodyText": "heap sizes (-Xms and -Xmx), JVM will -> heap sizes (-Xms and -Xmx), then the JVM will\nof container memory limit -> of the container memory limit\nof limit value -> of the limit value", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r447779489", "createdAt": "2020-06-30T15:35:25Z", "author": {"login": "rosemarymarano"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,84 @@\n+---\n+title: \"Considerations for Pod Resource (Memory and CPU) Requests and Limits\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: true\n+weight: 40\n+---\n+The operator creates a pod for each running WebLogic Server instance and each pod will have a container. It.s important that containers have enough resources in order for applications to run efficiently and expeditiously. \n+\n+If a pod is scheduled on a node with limited resources, it.s possible for the node to run out of memory or CPU resources, and for applications to stop working properly or have degraded performance. It.s also possible for a rouge application to use all available memory and/or CPU, which makes other containers running on the same system unresponsive. The same problem can happen if an application has memory leak or bad configuration. \n+\n+A pod.s resource requests and limit parameters can be used to solve these problems. Setting resource limits prevents an application from using more than it.s share of resource. Thus, limiting resources improves reliability and stability of applications.  It also allows users to plan for the hardware capacity. Additionally, pod.s priority and the Quality of Service (QoS) that pod receives is affected by whether resource requests and limits are specified or not.\n+\n+## Pod Quality Of Service (QoS) and Prioritization\n+Pod.s Quality of Service (QoS) and priority is determined based on whether pod.s resource requests and limits are configured or not and how they.re configured.\n+\n+**Best Effort QoS**: If you don.t configure requests and limits, pod receives .best-effort. QoS and pod has the **lowest priority**. In cases where node runs out of non-shareable resources, kubelet.s out-of-resource eviction policy evicts/kills the pods with best-effort QoS first.\n+\n+**Burstable QoS**: If you configure both resource requests and limits, and set the requests to be less than the limit, pod.s QoS will be .Burstable.. Similarly when you only configure the resource requests (without limits), the pod QoS is .Burstable.. When the node runs out of non-shareable resources, kubelet will kill .Burstable. Pods only when there are no more .best-effort. pods running. The Burstable pod receives **medium priority**.\n+\n+**Guaranteed QoS**:  If you set the requests and the limits to equal values, pod will have .Guranteed. QoS and pod will be considered as of the top most priority. These settings indicates that your pod will consume a fixed amount of memory and CPU. With this configuration, if a node runs out of shareable resources, Kubernetes will kill the best-effort and the burstable Pods first before terminating these Guaranteed QoS Pods. These are the **highest priority** pods.\n+\n+## Java heap size and pod memory request/limit considerations\n+It.s extremely important to set correct heap size for JVM-based applications.  If available memory on node or memory allocated to container is not sufficient for specified JVM heap arguments (and additional off-heap memory), it is possible for WL process to run out of memory. In order to avoid this, you will need to make sure that configured heap sizes are not too big and that the pod is scheduled on the node with sufficient memory.\n+With the latest Java version, it.s possible to rely on the default JVM heap settings which are safe but quite conservative. If you configure the memory limit for a container but don.t configure heap sizes (-Xms and -Xmx), JVM will configure max heap size to 25% (1/4th) of container memory limit by default. The minimum heap size is configured to 1.56% (1/64th) of limit value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23d465d277d44c2f5b22ee39ff66f06948acfa1"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc4MDc0Ng==", "bodyText": "configure default -> configure the default\nWebLogic server java process -> WebLogic Server Java processes\nusing USER_MEM_ARG -> using the USER_MEM_ARG", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r447780746", "createdAt": "2020-06-30T15:37:12Z", "author": {"login": "rosemarymarano"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,84 @@\n+---\n+title: \"Considerations for Pod Resource (Memory and CPU) Requests and Limits\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: true\n+weight: 40\n+---\n+The operator creates a pod for each running WebLogic Server instance and each pod will have a container. It.s important that containers have enough resources in order for applications to run efficiently and expeditiously. \n+\n+If a pod is scheduled on a node with limited resources, it.s possible for the node to run out of memory or CPU resources, and for applications to stop working properly or have degraded performance. It.s also possible for a rouge application to use all available memory and/or CPU, which makes other containers running on the same system unresponsive. The same problem can happen if an application has memory leak or bad configuration. \n+\n+A pod.s resource requests and limit parameters can be used to solve these problems. Setting resource limits prevents an application from using more than it.s share of resource. Thus, limiting resources improves reliability and stability of applications.  It also allows users to plan for the hardware capacity. Additionally, pod.s priority and the Quality of Service (QoS) that pod receives is affected by whether resource requests and limits are specified or not.\n+\n+## Pod Quality Of Service (QoS) and Prioritization\n+Pod.s Quality of Service (QoS) and priority is determined based on whether pod.s resource requests and limits are configured or not and how they.re configured.\n+\n+**Best Effort QoS**: If you don.t configure requests and limits, pod receives .best-effort. QoS and pod has the **lowest priority**. In cases where node runs out of non-shareable resources, kubelet.s out-of-resource eviction policy evicts/kills the pods with best-effort QoS first.\n+\n+**Burstable QoS**: If you configure both resource requests and limits, and set the requests to be less than the limit, pod.s QoS will be .Burstable.. Similarly when you only configure the resource requests (without limits), the pod QoS is .Burstable.. When the node runs out of non-shareable resources, kubelet will kill .Burstable. Pods only when there are no more .best-effort. pods running. The Burstable pod receives **medium priority**.\n+\n+**Guaranteed QoS**:  If you set the requests and the limits to equal values, pod will have .Guranteed. QoS and pod will be considered as of the top most priority. These settings indicates that your pod will consume a fixed amount of memory and CPU. With this configuration, if a node runs out of shareable resources, Kubernetes will kill the best-effort and the burstable Pods first before terminating these Guaranteed QoS Pods. These are the **highest priority** pods.\n+\n+## Java heap size and pod memory request/limit considerations\n+It.s extremely important to set correct heap size for JVM-based applications.  If available memory on node or memory allocated to container is not sufficient for specified JVM heap arguments (and additional off-heap memory), it is possible for WL process to run out of memory. In order to avoid this, you will need to make sure that configured heap sizes are not too big and that the pod is scheduled on the node with sufficient memory.\n+With the latest Java version, it.s possible to rely on the default JVM heap settings which are safe but quite conservative. If you configure the memory limit for a container but don.t configure heap sizes (-Xms and -Xmx), JVM will configure max heap size to 25% (1/4th) of container memory limit by default. The minimum heap size is configured to 1.56% (1/64th) of limit value.\n+\n+**Default heap sizes and resource request values for sample WebLogic Server Pods**:\n+The WLS samples configure default min and max heap size for WebLogic server java process to 256MB and 512MB respectively. This can be changed using USER_MEM_ARGS environment variable. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23d465d277d44c2f5b22ee39ff66f06948acfa1"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc4MTY0Mw==", "bodyText": "for node-manager process -> for the node-manager process\nusing NODEMGR_MEM_ARGS -> using the NODEMGR_MEM_ARGS", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r447781643", "createdAt": "2020-06-30T15:38:29Z", "author": {"login": "rosemarymarano"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,84 @@\n+---\n+title: \"Considerations for Pod Resource (Memory and CPU) Requests and Limits\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: true\n+weight: 40\n+---\n+The operator creates a pod for each running WebLogic Server instance and each pod will have a container. It.s important that containers have enough resources in order for applications to run efficiently and expeditiously. \n+\n+If a pod is scheduled on a node with limited resources, it.s possible for the node to run out of memory or CPU resources, and for applications to stop working properly or have degraded performance. It.s also possible for a rouge application to use all available memory and/or CPU, which makes other containers running on the same system unresponsive. The same problem can happen if an application has memory leak or bad configuration. \n+\n+A pod.s resource requests and limit parameters can be used to solve these problems. Setting resource limits prevents an application from using more than it.s share of resource. Thus, limiting resources improves reliability and stability of applications.  It also allows users to plan for the hardware capacity. Additionally, pod.s priority and the Quality of Service (QoS) that pod receives is affected by whether resource requests and limits are specified or not.\n+\n+## Pod Quality Of Service (QoS) and Prioritization\n+Pod.s Quality of Service (QoS) and priority is determined based on whether pod.s resource requests and limits are configured or not and how they.re configured.\n+\n+**Best Effort QoS**: If you don.t configure requests and limits, pod receives .best-effort. QoS and pod has the **lowest priority**. In cases where node runs out of non-shareable resources, kubelet.s out-of-resource eviction policy evicts/kills the pods with best-effort QoS first.\n+\n+**Burstable QoS**: If you configure both resource requests and limits, and set the requests to be less than the limit, pod.s QoS will be .Burstable.. Similarly when you only configure the resource requests (without limits), the pod QoS is .Burstable.. When the node runs out of non-shareable resources, kubelet will kill .Burstable. Pods only when there are no more .best-effort. pods running. The Burstable pod receives **medium priority**.\n+\n+**Guaranteed QoS**:  If you set the requests and the limits to equal values, pod will have .Guranteed. QoS and pod will be considered as of the top most priority. These settings indicates that your pod will consume a fixed amount of memory and CPU. With this configuration, if a node runs out of shareable resources, Kubernetes will kill the best-effort and the burstable Pods first before terminating these Guaranteed QoS Pods. These are the **highest priority** pods.\n+\n+## Java heap size and pod memory request/limit considerations\n+It.s extremely important to set correct heap size for JVM-based applications.  If available memory on node or memory allocated to container is not sufficient for specified JVM heap arguments (and additional off-heap memory), it is possible for WL process to run out of memory. In order to avoid this, you will need to make sure that configured heap sizes are not too big and that the pod is scheduled on the node with sufficient memory.\n+With the latest Java version, it.s possible to rely on the default JVM heap settings which are safe but quite conservative. If you configure the memory limit for a container but don.t configure heap sizes (-Xms and -Xmx), JVM will configure max heap size to 25% (1/4th) of container memory limit by default. The minimum heap size is configured to 1.56% (1/64th) of limit value.\n+\n+**Default heap sizes and resource request values for sample WebLogic Server Pods**:\n+The WLS samples configure default min and max heap size for WebLogic server java process to 256MB and 512MB respectively. This can be changed using USER_MEM_ARGS environment variable. \n+```\n+    resources:\n+      env:\n+      - name: \"USER_MEM_ARGS\"\n+        value: \"-Xms256m -Xmx512m -Djava.security.egd=file:/dev/./urandom\"\n+```        \n+\n+The default min and max heap size for node-manager process is 64MB and 100MB. This can be changed by using NODEMGR_MEM_ARGS environment variable. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23d465d277d44c2f5b22ee39ff66f06948acfa1"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc4MjM0Ng==", "bodyText": "and default CPU request -> and the default CPU request\nThe requests values -> The request values\nin resources section. -> in the resources section.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r447782346", "createdAt": "2020-06-30T15:39:31Z", "author": {"login": "rosemarymarano"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,84 @@\n+---\n+title: \"Considerations for Pod Resource (Memory and CPU) Requests and Limits\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: true\n+weight: 40\n+---\n+The operator creates a pod for each running WebLogic Server instance and each pod will have a container. It.s important that containers have enough resources in order for applications to run efficiently and expeditiously. \n+\n+If a pod is scheduled on a node with limited resources, it.s possible for the node to run out of memory or CPU resources, and for applications to stop working properly or have degraded performance. It.s also possible for a rouge application to use all available memory and/or CPU, which makes other containers running on the same system unresponsive. The same problem can happen if an application has memory leak or bad configuration. \n+\n+A pod.s resource requests and limit parameters can be used to solve these problems. Setting resource limits prevents an application from using more than it.s share of resource. Thus, limiting resources improves reliability and stability of applications.  It also allows users to plan for the hardware capacity. Additionally, pod.s priority and the Quality of Service (QoS) that pod receives is affected by whether resource requests and limits are specified or not.\n+\n+## Pod Quality Of Service (QoS) and Prioritization\n+Pod.s Quality of Service (QoS) and priority is determined based on whether pod.s resource requests and limits are configured or not and how they.re configured.\n+\n+**Best Effort QoS**: If you don.t configure requests and limits, pod receives .best-effort. QoS and pod has the **lowest priority**. In cases where node runs out of non-shareable resources, kubelet.s out-of-resource eviction policy evicts/kills the pods with best-effort QoS first.\n+\n+**Burstable QoS**: If you configure both resource requests and limits, and set the requests to be less than the limit, pod.s QoS will be .Burstable.. Similarly when you only configure the resource requests (without limits), the pod QoS is .Burstable.. When the node runs out of non-shareable resources, kubelet will kill .Burstable. Pods only when there are no more .best-effort. pods running. The Burstable pod receives **medium priority**.\n+\n+**Guaranteed QoS**:  If you set the requests and the limits to equal values, pod will have .Guranteed. QoS and pod will be considered as of the top most priority. These settings indicates that your pod will consume a fixed amount of memory and CPU. With this configuration, if a node runs out of shareable resources, Kubernetes will kill the best-effort and the burstable Pods first before terminating these Guaranteed QoS Pods. These are the **highest priority** pods.\n+\n+## Java heap size and pod memory request/limit considerations\n+It.s extremely important to set correct heap size for JVM-based applications.  If available memory on node or memory allocated to container is not sufficient for specified JVM heap arguments (and additional off-heap memory), it is possible for WL process to run out of memory. In order to avoid this, you will need to make sure that configured heap sizes are not too big and that the pod is scheduled on the node with sufficient memory.\n+With the latest Java version, it.s possible to rely on the default JVM heap settings which are safe but quite conservative. If you configure the memory limit for a container but don.t configure heap sizes (-Xms and -Xmx), JVM will configure max heap size to 25% (1/4th) of container memory limit by default. The minimum heap size is configured to 1.56% (1/64th) of limit value.\n+\n+**Default heap sizes and resource request values for sample WebLogic Server Pods**:\n+The WLS samples configure default min and max heap size for WebLogic server java process to 256MB and 512MB respectively. This can be changed using USER_MEM_ARGS environment variable. \n+```\n+    resources:\n+      env:\n+      - name: \"USER_MEM_ARGS\"\n+        value: \"-Xms256m -Xmx512m -Djava.security.egd=file:/dev/./urandom\"\n+```        \n+\n+The default min and max heap size for node-manager process is 64MB and 100MB. This can be changed by using NODEMGR_MEM_ARGS environment variable. \n+\n+The default pod memory request in WLS samples is 768MB and default CPU request is 250m. The requests values can be changed in resources section.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23d465d277d44c2f5b22ee39ff66f06948acfa1"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc4NDA5Mw==", "bodyText": "by default in samples and default -> by default in the samples and the default\nWebLogic server pod -> WebLogic Server pods (always capitalize WebLogic Server, both words; please fix globally)\ndetermine optimal -> determine the optimal", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r447784093", "createdAt": "2020-06-30T15:41:58Z", "author": {"login": "rosemarymarano"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,84 @@\n+---\n+title: \"Considerations for Pod Resource (Memory and CPU) Requests and Limits\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: true\n+weight: 40\n+---\n+The operator creates a pod for each running WebLogic Server instance and each pod will have a container. It.s important that containers have enough resources in order for applications to run efficiently and expeditiously. \n+\n+If a pod is scheduled on a node with limited resources, it.s possible for the node to run out of memory or CPU resources, and for applications to stop working properly or have degraded performance. It.s also possible for a rouge application to use all available memory and/or CPU, which makes other containers running on the same system unresponsive. The same problem can happen if an application has memory leak or bad configuration. \n+\n+A pod.s resource requests and limit parameters can be used to solve these problems. Setting resource limits prevents an application from using more than it.s share of resource. Thus, limiting resources improves reliability and stability of applications.  It also allows users to plan for the hardware capacity. Additionally, pod.s priority and the Quality of Service (QoS) that pod receives is affected by whether resource requests and limits are specified or not.\n+\n+## Pod Quality Of Service (QoS) and Prioritization\n+Pod.s Quality of Service (QoS) and priority is determined based on whether pod.s resource requests and limits are configured or not and how they.re configured.\n+\n+**Best Effort QoS**: If you don.t configure requests and limits, pod receives .best-effort. QoS and pod has the **lowest priority**. In cases where node runs out of non-shareable resources, kubelet.s out-of-resource eviction policy evicts/kills the pods with best-effort QoS first.\n+\n+**Burstable QoS**: If you configure both resource requests and limits, and set the requests to be less than the limit, pod.s QoS will be .Burstable.. Similarly when you only configure the resource requests (without limits), the pod QoS is .Burstable.. When the node runs out of non-shareable resources, kubelet will kill .Burstable. Pods only when there are no more .best-effort. pods running. The Burstable pod receives **medium priority**.\n+\n+**Guaranteed QoS**:  If you set the requests and the limits to equal values, pod will have .Guranteed. QoS and pod will be considered as of the top most priority. These settings indicates that your pod will consume a fixed amount of memory and CPU. With this configuration, if a node runs out of shareable resources, Kubernetes will kill the best-effort and the burstable Pods first before terminating these Guaranteed QoS Pods. These are the **highest priority** pods.\n+\n+## Java heap size and pod memory request/limit considerations\n+It.s extremely important to set correct heap size for JVM-based applications.  If available memory on node or memory allocated to container is not sufficient for specified JVM heap arguments (and additional off-heap memory), it is possible for WL process to run out of memory. In order to avoid this, you will need to make sure that configured heap sizes are not too big and that the pod is scheduled on the node with sufficient memory.\n+With the latest Java version, it.s possible to rely on the default JVM heap settings which are safe but quite conservative. If you configure the memory limit for a container but don.t configure heap sizes (-Xms and -Xmx), JVM will configure max heap size to 25% (1/4th) of container memory limit by default. The minimum heap size is configured to 1.56% (1/64th) of limit value.\n+\n+**Default heap sizes and resource request values for sample WebLogic Server Pods**:\n+The WLS samples configure default min and max heap size for WebLogic server java process to 256MB and 512MB respectively. This can be changed using USER_MEM_ARGS environment variable. \n+```\n+    resources:\n+      env:\n+      - name: \"USER_MEM_ARGS\"\n+        value: \"-Xms256m -Xmx512m -Djava.security.egd=file:/dev/./urandom\"\n+```        \n+\n+The default min and max heap size for node-manager process is 64MB and 100MB. This can be changed by using NODEMGR_MEM_ARGS environment variable. \n+\n+The default pod memory request in WLS samples is 768MB and default CPU request is 250m. The requests values can be changed in resources section.\n+```\n+      requests:\n+        cpu: \"250m\"\n+        memory: \"768Mi\"\n+```\n+\n+There.s no memory or CPU limit configured by default in samples and default QoS for WebLogic server pod is Burstable. If your use-case and workload requires higher QoS and priority, this can be achieved by setting memory and CPU limits. You.ll need to run tests and experiment with different memory/CPU limits to determine optimal limit values.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23d465d277d44c2f5b22ee39ff66f06948acfa1"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc4NjkwNw==", "bodyText": "specify pod memory limit, it's  -> specify a pod memory limit, then it's\nrecommended to configure heap size -> recommended that you configure the heap size\nnote . they -> note that they\n\"Thanks to it changing container memory settings will not break anything.\" I cannot figure out what it is that you want to say in this sentence, so I can't figure out how to help you clarify it, but whatever it is, it is not clear.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r447786907", "createdAt": "2020-06-30T15:46:02Z", "author": {"login": "rosemarymarano"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,84 @@\n+---\n+title: \"Considerations for Pod Resource (Memory and CPU) Requests and Limits\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: true\n+weight: 40\n+---\n+The operator creates a pod for each running WebLogic Server instance and each pod will have a container. It.s important that containers have enough resources in order for applications to run efficiently and expeditiously. \n+\n+If a pod is scheduled on a node with limited resources, it.s possible for the node to run out of memory or CPU resources, and for applications to stop working properly or have degraded performance. It.s also possible for a rouge application to use all available memory and/or CPU, which makes other containers running on the same system unresponsive. The same problem can happen if an application has memory leak or bad configuration. \n+\n+A pod.s resource requests and limit parameters can be used to solve these problems. Setting resource limits prevents an application from using more than it.s share of resource. Thus, limiting resources improves reliability and stability of applications.  It also allows users to plan for the hardware capacity. Additionally, pod.s priority and the Quality of Service (QoS) that pod receives is affected by whether resource requests and limits are specified or not.\n+\n+## Pod Quality Of Service (QoS) and Prioritization\n+Pod.s Quality of Service (QoS) and priority is determined based on whether pod.s resource requests and limits are configured or not and how they.re configured.\n+\n+**Best Effort QoS**: If you don.t configure requests and limits, pod receives .best-effort. QoS and pod has the **lowest priority**. In cases where node runs out of non-shareable resources, kubelet.s out-of-resource eviction policy evicts/kills the pods with best-effort QoS first.\n+\n+**Burstable QoS**: If you configure both resource requests and limits, and set the requests to be less than the limit, pod.s QoS will be .Burstable.. Similarly when you only configure the resource requests (without limits), the pod QoS is .Burstable.. When the node runs out of non-shareable resources, kubelet will kill .Burstable. Pods only when there are no more .best-effort. pods running. The Burstable pod receives **medium priority**.\n+\n+**Guaranteed QoS**:  If you set the requests and the limits to equal values, pod will have .Guranteed. QoS and pod will be considered as of the top most priority. These settings indicates that your pod will consume a fixed amount of memory and CPU. With this configuration, if a node runs out of shareable resources, Kubernetes will kill the best-effort and the burstable Pods first before terminating these Guaranteed QoS Pods. These are the **highest priority** pods.\n+\n+## Java heap size and pod memory request/limit considerations\n+It.s extremely important to set correct heap size for JVM-based applications.  If available memory on node or memory allocated to container is not sufficient for specified JVM heap arguments (and additional off-heap memory), it is possible for WL process to run out of memory. In order to avoid this, you will need to make sure that configured heap sizes are not too big and that the pod is scheduled on the node with sufficient memory.\n+With the latest Java version, it.s possible to rely on the default JVM heap settings which are safe but quite conservative. If you configure the memory limit for a container but don.t configure heap sizes (-Xms and -Xmx), JVM will configure max heap size to 25% (1/4th) of container memory limit by default. The minimum heap size is configured to 1.56% (1/64th) of limit value.\n+\n+**Default heap sizes and resource request values for sample WebLogic Server Pods**:\n+The WLS samples configure default min and max heap size for WebLogic server java process to 256MB and 512MB respectively. This can be changed using USER_MEM_ARGS environment variable. \n+```\n+    resources:\n+      env:\n+      - name: \"USER_MEM_ARGS\"\n+        value: \"-Xms256m -Xmx512m -Djava.security.egd=file:/dev/./urandom\"\n+```        \n+\n+The default min and max heap size for node-manager process is 64MB and 100MB. This can be changed by using NODEMGR_MEM_ARGS environment variable. \n+\n+The default pod memory request in WLS samples is 768MB and default CPU request is 250m. The requests values can be changed in resources section.\n+```\n+      requests:\n+        cpu: \"250m\"\n+        memory: \"768Mi\"\n+```\n+\n+There.s no memory or CPU limit configured by default in samples and default QoS for WebLogic server pod is Burstable. If your use-case and workload requires higher QoS and priority, this can be achieved by setting memory and CPU limits. You.ll need to run tests and experiment with different memory/CPU limits to determine optimal limit values.\n+```\n+      limits:\n+        cpu: 2\n+        memory: \"2048Mi\"\n+```\n+\n+### Configure min/max heap size in percentages using \"-XX:MinRAMPercentage\" and \"-XX:MaxRAMPercentage\"\n+If you specify pod memory limit, it's recommended to configure heap size as a percentage of the total RAM (memory) specified in the pod memory limit. These parameters allow you to fine-tune the heap size. Please note . they set the percentage, not the fixed values. Thanks to it changing container memory settings will not break anything. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23d465d277d44c2f5b22ee39ff66f06948acfa1"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc5Mjk5OA==", "bodyText": "the limit is sufficiently big -> the limit is big enough\nbut it's not too big to waste memory resource. -> but not too big, which would waste memory resource.\nSince pod memory -> Because pod memory\nif JVM's memory -> if the JVM's memory\nsum of heap -> sum of the heap\nlimit, JVM process -> limit, the JVM process\nto out-of-memory error -> to an out-of-memory error\nand WebLogic container -> and the WebLogic container\ndue to liveness probe -> due to a liveness probe\nrunning in same container -> running in the same container\nnode manager -> Node Manager\nusing .NODEMGR_JAVA_OPTIONS.  -> using the NODEMGR_JAVA_OPTIONS", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r447792998", "createdAt": "2020-06-30T15:53:43Z", "author": {"login": "rosemarymarano"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,84 @@\n+---\n+title: \"Considerations for Pod Resource (Memory and CPU) Requests and Limits\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: true\n+weight: 40\n+---\n+The operator creates a pod for each running WebLogic Server instance and each pod will have a container. It.s important that containers have enough resources in order for applications to run efficiently and expeditiously. \n+\n+If a pod is scheduled on a node with limited resources, it.s possible for the node to run out of memory or CPU resources, and for applications to stop working properly or have degraded performance. It.s also possible for a rouge application to use all available memory and/or CPU, which makes other containers running on the same system unresponsive. The same problem can happen if an application has memory leak or bad configuration. \n+\n+A pod.s resource requests and limit parameters can be used to solve these problems. Setting resource limits prevents an application from using more than it.s share of resource. Thus, limiting resources improves reliability and stability of applications.  It also allows users to plan for the hardware capacity. Additionally, pod.s priority and the Quality of Service (QoS) that pod receives is affected by whether resource requests and limits are specified or not.\n+\n+## Pod Quality Of Service (QoS) and Prioritization\n+Pod.s Quality of Service (QoS) and priority is determined based on whether pod.s resource requests and limits are configured or not and how they.re configured.\n+\n+**Best Effort QoS**: If you don.t configure requests and limits, pod receives .best-effort. QoS and pod has the **lowest priority**. In cases where node runs out of non-shareable resources, kubelet.s out-of-resource eviction policy evicts/kills the pods with best-effort QoS first.\n+\n+**Burstable QoS**: If you configure both resource requests and limits, and set the requests to be less than the limit, pod.s QoS will be .Burstable.. Similarly when you only configure the resource requests (without limits), the pod QoS is .Burstable.. When the node runs out of non-shareable resources, kubelet will kill .Burstable. Pods only when there are no more .best-effort. pods running. The Burstable pod receives **medium priority**.\n+\n+**Guaranteed QoS**:  If you set the requests and the limits to equal values, pod will have .Guranteed. QoS and pod will be considered as of the top most priority. These settings indicates that your pod will consume a fixed amount of memory and CPU. With this configuration, if a node runs out of shareable resources, Kubernetes will kill the best-effort and the burstable Pods first before terminating these Guaranteed QoS Pods. These are the **highest priority** pods.\n+\n+## Java heap size and pod memory request/limit considerations\n+It.s extremely important to set correct heap size for JVM-based applications.  If available memory on node or memory allocated to container is not sufficient for specified JVM heap arguments (and additional off-heap memory), it is possible for WL process to run out of memory. In order to avoid this, you will need to make sure that configured heap sizes are not too big and that the pod is scheduled on the node with sufficient memory.\n+With the latest Java version, it.s possible to rely on the default JVM heap settings which are safe but quite conservative. If you configure the memory limit for a container but don.t configure heap sizes (-Xms and -Xmx), JVM will configure max heap size to 25% (1/4th) of container memory limit by default. The minimum heap size is configured to 1.56% (1/64th) of limit value.\n+\n+**Default heap sizes and resource request values for sample WebLogic Server Pods**:\n+The WLS samples configure default min and max heap size for WebLogic server java process to 256MB and 512MB respectively. This can be changed using USER_MEM_ARGS environment variable. \n+```\n+    resources:\n+      env:\n+      - name: \"USER_MEM_ARGS\"\n+        value: \"-Xms256m -Xmx512m -Djava.security.egd=file:/dev/./urandom\"\n+```        \n+\n+The default min and max heap size for node-manager process is 64MB and 100MB. This can be changed by using NODEMGR_MEM_ARGS environment variable. \n+\n+The default pod memory request in WLS samples is 768MB and default CPU request is 250m. The requests values can be changed in resources section.\n+```\n+      requests:\n+        cpu: \"250m\"\n+        memory: \"768Mi\"\n+```\n+\n+There.s no memory or CPU limit configured by default in samples and default QoS for WebLogic server pod is Burstable. If your use-case and workload requires higher QoS and priority, this can be achieved by setting memory and CPU limits. You.ll need to run tests and experiment with different memory/CPU limits to determine optimal limit values.\n+```\n+      limits:\n+        cpu: 2\n+        memory: \"2048Mi\"\n+```\n+\n+### Configure min/max heap size in percentages using \"-XX:MinRAMPercentage\" and \"-XX:MaxRAMPercentage\"\n+If you specify pod memory limit, it's recommended to configure heap size as a percentage of the total RAM (memory) specified in the pod memory limit. These parameters allow you to fine-tune the heap size. Please note . they set the percentage, not the fixed values. Thanks to it changing container memory settings will not break anything. \n+```\n+    resources:\n+      env:\n+      - name: JAVA_OPTIONS\n+        value: \"--XX:MinRAMPercentage=25.0 --XX:MaxRAMPercentage=50.0 -Dweblogic.StdoutDebugEnabled=false\"\n+```\n+When configuring memory limits, it.s important to make sure that the limit is sufficiently big to accommodate the configured heap (and off-heap) requirements, but it's not too big to waste memory resource. Since pod memory will never go above the limit, if JVM's memory usage (sum of heap and native memory) goes above the limit, JVM process will be killed due to out-of-memory error and WebLogic container will be restarted due to liveness probe failure.   Additionally there's also a node-manager process that.s running in same container and it has it's own heap and off-heap requirements. You can also fine tune the node manager heap size in percentages by setting \"-XX:MinRAMPercentage\" and \"-XX:MaxRAMPercentage\" using .NODEMGR_JAVA_OPTIONS. environment variable. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23d465d277d44c2f5b22ee39ff66f06948acfa1"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc5NDg1OA==", "bodyText": "can use traditional approach -> can use the traditional approach", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r447794858", "createdAt": "2020-06-30T15:56:15Z", "author": {"login": "rosemarymarano"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,84 @@\n+---\n+title: \"Considerations for Pod Resource (Memory and CPU) Requests and Limits\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: true\n+weight: 40\n+---\n+The operator creates a pod for each running WebLogic Server instance and each pod will have a container. It.s important that containers have enough resources in order for applications to run efficiently and expeditiously. \n+\n+If a pod is scheduled on a node with limited resources, it.s possible for the node to run out of memory or CPU resources, and for applications to stop working properly or have degraded performance. It.s also possible for a rouge application to use all available memory and/or CPU, which makes other containers running on the same system unresponsive. The same problem can happen if an application has memory leak or bad configuration. \n+\n+A pod.s resource requests and limit parameters can be used to solve these problems. Setting resource limits prevents an application from using more than it.s share of resource. Thus, limiting resources improves reliability and stability of applications.  It also allows users to plan for the hardware capacity. Additionally, pod.s priority and the Quality of Service (QoS) that pod receives is affected by whether resource requests and limits are specified or not.\n+\n+## Pod Quality Of Service (QoS) and Prioritization\n+Pod.s Quality of Service (QoS) and priority is determined based on whether pod.s resource requests and limits are configured or not and how they.re configured.\n+\n+**Best Effort QoS**: If you don.t configure requests and limits, pod receives .best-effort. QoS and pod has the **lowest priority**. In cases where node runs out of non-shareable resources, kubelet.s out-of-resource eviction policy evicts/kills the pods with best-effort QoS first.\n+\n+**Burstable QoS**: If you configure both resource requests and limits, and set the requests to be less than the limit, pod.s QoS will be .Burstable.. Similarly when you only configure the resource requests (without limits), the pod QoS is .Burstable.. When the node runs out of non-shareable resources, kubelet will kill .Burstable. Pods only when there are no more .best-effort. pods running. The Burstable pod receives **medium priority**.\n+\n+**Guaranteed QoS**:  If you set the requests and the limits to equal values, pod will have .Guranteed. QoS and pod will be considered as of the top most priority. These settings indicates that your pod will consume a fixed amount of memory and CPU. With this configuration, if a node runs out of shareable resources, Kubernetes will kill the best-effort and the burstable Pods first before terminating these Guaranteed QoS Pods. These are the **highest priority** pods.\n+\n+## Java heap size and pod memory request/limit considerations\n+It.s extremely important to set correct heap size for JVM-based applications.  If available memory on node or memory allocated to container is not sufficient for specified JVM heap arguments (and additional off-heap memory), it is possible for WL process to run out of memory. In order to avoid this, you will need to make sure that configured heap sizes are not too big and that the pod is scheduled on the node with sufficient memory.\n+With the latest Java version, it.s possible to rely on the default JVM heap settings which are safe but quite conservative. If you configure the memory limit for a container but don.t configure heap sizes (-Xms and -Xmx), JVM will configure max heap size to 25% (1/4th) of container memory limit by default. The minimum heap size is configured to 1.56% (1/64th) of limit value.\n+\n+**Default heap sizes and resource request values for sample WebLogic Server Pods**:\n+The WLS samples configure default min and max heap size for WebLogic server java process to 256MB and 512MB respectively. This can be changed using USER_MEM_ARGS environment variable. \n+```\n+    resources:\n+      env:\n+      - name: \"USER_MEM_ARGS\"\n+        value: \"-Xms256m -Xmx512m -Djava.security.egd=file:/dev/./urandom\"\n+```        \n+\n+The default min and max heap size for node-manager process is 64MB and 100MB. This can be changed by using NODEMGR_MEM_ARGS environment variable. \n+\n+The default pod memory request in WLS samples is 768MB and default CPU request is 250m. The requests values can be changed in resources section.\n+```\n+      requests:\n+        cpu: \"250m\"\n+        memory: \"768Mi\"\n+```\n+\n+There.s no memory or CPU limit configured by default in samples and default QoS for WebLogic server pod is Burstable. If your use-case and workload requires higher QoS and priority, this can be achieved by setting memory and CPU limits. You.ll need to run tests and experiment with different memory/CPU limits to determine optimal limit values.\n+```\n+      limits:\n+        cpu: 2\n+        memory: \"2048Mi\"\n+```\n+\n+### Configure min/max heap size in percentages using \"-XX:MinRAMPercentage\" and \"-XX:MaxRAMPercentage\"\n+If you specify pod memory limit, it's recommended to configure heap size as a percentage of the total RAM (memory) specified in the pod memory limit. These parameters allow you to fine-tune the heap size. Please note . they set the percentage, not the fixed values. Thanks to it changing container memory settings will not break anything. \n+```\n+    resources:\n+      env:\n+      - name: JAVA_OPTIONS\n+        value: \"--XX:MinRAMPercentage=25.0 --XX:MaxRAMPercentage=50.0 -Dweblogic.StdoutDebugEnabled=false\"\n+```\n+When configuring memory limits, it.s important to make sure that the limit is sufficiently big to accommodate the configured heap (and off-heap) requirements, but it's not too big to waste memory resource. Since pod memory will never go above the limit, if JVM's memory usage (sum of heap and native memory) goes above the limit, JVM process will be killed due to out-of-memory error and WebLogic container will be restarted due to liveness probe failure.   Additionally there's also a node-manager process that.s running in same container and it has it's own heap and off-heap requirements. You can also fine tune the node manager heap size in percentages by setting \"-XX:MinRAMPercentage\" and \"-XX:MaxRAMPercentage\" using .NODEMGR_JAVA_OPTIONS. environment variable. \n+\n+### Using \"-Xms\" and \"-Xmx\" parameters when not configuring limits \n+In some cases, it.s difficult to come up with a hard limit for the container and you might only want to configure memory requests but not configure memory limits. In such scenarios, you can use traditional approach to set min/max heap size using .-Xms. and .-Xmx..", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23d465d277d44c2f5b22ee39ff66f06948acfa1"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc5ODk2Mg==", "bodyText": "applications performance -> application performance\nYou also don't want to set CPU requests -> Also you don't want to set the CPU requests\napplication don't need -> application doesn't need\nSince CPU -> Because CPU\nall CPU resources -> all the CPU resources\non node -> on the node", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r447798962", "createdAt": "2020-06-30T16:02:07Z", "author": {"login": "rosemarymarano"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,84 @@\n+---\n+title: \"Considerations for Pod Resource (Memory and CPU) Requests and Limits\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: true\n+weight: 40\n+---\n+The operator creates a pod for each running WebLogic Server instance and each pod will have a container. It.s important that containers have enough resources in order for applications to run efficiently and expeditiously. \n+\n+If a pod is scheduled on a node with limited resources, it.s possible for the node to run out of memory or CPU resources, and for applications to stop working properly or have degraded performance. It.s also possible for a rouge application to use all available memory and/or CPU, which makes other containers running on the same system unresponsive. The same problem can happen if an application has memory leak or bad configuration. \n+\n+A pod.s resource requests and limit parameters can be used to solve these problems. Setting resource limits prevents an application from using more than it.s share of resource. Thus, limiting resources improves reliability and stability of applications.  It also allows users to plan for the hardware capacity. Additionally, pod.s priority and the Quality of Service (QoS) that pod receives is affected by whether resource requests and limits are specified or not.\n+\n+## Pod Quality Of Service (QoS) and Prioritization\n+Pod.s Quality of Service (QoS) and priority is determined based on whether pod.s resource requests and limits are configured or not and how they.re configured.\n+\n+**Best Effort QoS**: If you don.t configure requests and limits, pod receives .best-effort. QoS and pod has the **lowest priority**. In cases where node runs out of non-shareable resources, kubelet.s out-of-resource eviction policy evicts/kills the pods with best-effort QoS first.\n+\n+**Burstable QoS**: If you configure both resource requests and limits, and set the requests to be less than the limit, pod.s QoS will be .Burstable.. Similarly when you only configure the resource requests (without limits), the pod QoS is .Burstable.. When the node runs out of non-shareable resources, kubelet will kill .Burstable. Pods only when there are no more .best-effort. pods running. The Burstable pod receives **medium priority**.\n+\n+**Guaranteed QoS**:  If you set the requests and the limits to equal values, pod will have .Guranteed. QoS and pod will be considered as of the top most priority. These settings indicates that your pod will consume a fixed amount of memory and CPU. With this configuration, if a node runs out of shareable resources, Kubernetes will kill the best-effort and the burstable Pods first before terminating these Guaranteed QoS Pods. These are the **highest priority** pods.\n+\n+## Java heap size and pod memory request/limit considerations\n+It.s extremely important to set correct heap size for JVM-based applications.  If available memory on node or memory allocated to container is not sufficient for specified JVM heap arguments (and additional off-heap memory), it is possible for WL process to run out of memory. In order to avoid this, you will need to make sure that configured heap sizes are not too big and that the pod is scheduled on the node with sufficient memory.\n+With the latest Java version, it.s possible to rely on the default JVM heap settings which are safe but quite conservative. If you configure the memory limit for a container but don.t configure heap sizes (-Xms and -Xmx), JVM will configure max heap size to 25% (1/4th) of container memory limit by default. The minimum heap size is configured to 1.56% (1/64th) of limit value.\n+\n+**Default heap sizes and resource request values for sample WebLogic Server Pods**:\n+The WLS samples configure default min and max heap size for WebLogic server java process to 256MB and 512MB respectively. This can be changed using USER_MEM_ARGS environment variable. \n+```\n+    resources:\n+      env:\n+      - name: \"USER_MEM_ARGS\"\n+        value: \"-Xms256m -Xmx512m -Djava.security.egd=file:/dev/./urandom\"\n+```        \n+\n+The default min and max heap size for node-manager process is 64MB and 100MB. This can be changed by using NODEMGR_MEM_ARGS environment variable. \n+\n+The default pod memory request in WLS samples is 768MB and default CPU request is 250m. The requests values can be changed in resources section.\n+```\n+      requests:\n+        cpu: \"250m\"\n+        memory: \"768Mi\"\n+```\n+\n+There.s no memory or CPU limit configured by default in samples and default QoS for WebLogic server pod is Burstable. If your use-case and workload requires higher QoS and priority, this can be achieved by setting memory and CPU limits. You.ll need to run tests and experiment with different memory/CPU limits to determine optimal limit values.\n+```\n+      limits:\n+        cpu: 2\n+        memory: \"2048Mi\"\n+```\n+\n+### Configure min/max heap size in percentages using \"-XX:MinRAMPercentage\" and \"-XX:MaxRAMPercentage\"\n+If you specify pod memory limit, it's recommended to configure heap size as a percentage of the total RAM (memory) specified in the pod memory limit. These parameters allow you to fine-tune the heap size. Please note . they set the percentage, not the fixed values. Thanks to it changing container memory settings will not break anything. \n+```\n+    resources:\n+      env:\n+      - name: JAVA_OPTIONS\n+        value: \"--XX:MinRAMPercentage=25.0 --XX:MaxRAMPercentage=50.0 -Dweblogic.StdoutDebugEnabled=false\"\n+```\n+When configuring memory limits, it.s important to make sure that the limit is sufficiently big to accommodate the configured heap (and off-heap) requirements, but it's not too big to waste memory resource. Since pod memory will never go above the limit, if JVM's memory usage (sum of heap and native memory) goes above the limit, JVM process will be killed due to out-of-memory error and WebLogic container will be restarted due to liveness probe failure.   Additionally there's also a node-manager process that.s running in same container and it has it's own heap and off-heap requirements. You can also fine tune the node manager heap size in percentages by setting \"-XX:MinRAMPercentage\" and \"-XX:MaxRAMPercentage\" using .NODEMGR_JAVA_OPTIONS. environment variable. \n+\n+### Using \"-Xms\" and \"-Xmx\" parameters when not configuring limits \n+In some cases, it.s difficult to come up with a hard limit for the container and you might only want to configure memory requests but not configure memory limits. In such scenarios, you can use traditional approach to set min/max heap size using .-Xms. and .-Xmx..\n+\n+### CPU requests and limits \n+It.s important that the containers running WebLogic applications have enough CPU resources, otherwise applications performance can suffer. You also don't want to set CPU requests and limit too high if your application don't need or use allocated CPU resources. Since CPU is a shared resource, if the amount of CPU that you reserve is more than required by your application, the CPU cycles will go unused and be wasted. If no CPU request and limit is configured, it can end up using all CPU resources available on node. This can starve other containers from using shareable CPU cycles. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23d465d277d44c2f5b22ee39ff66f06948acfa1"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc5OTg4Ng==", "bodyText": "if pod CPU limit -> if the pod CPU limit\nspecify container -> specify the container\nto incorrect number -> to an incorrect number", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r447799886", "createdAt": "2020-06-30T16:03:30Z", "author": {"login": "rosemarymarano"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,84 @@\n+---\n+title: \"Considerations for Pod Resource (Memory and CPU) Requests and Limits\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: true\n+weight: 40\n+---\n+The operator creates a pod for each running WebLogic Server instance and each pod will have a container. It.s important that containers have enough resources in order for applications to run efficiently and expeditiously. \n+\n+If a pod is scheduled on a node with limited resources, it.s possible for the node to run out of memory or CPU resources, and for applications to stop working properly or have degraded performance. It.s also possible for a rouge application to use all available memory and/or CPU, which makes other containers running on the same system unresponsive. The same problem can happen if an application has memory leak or bad configuration. \n+\n+A pod.s resource requests and limit parameters can be used to solve these problems. Setting resource limits prevents an application from using more than it.s share of resource. Thus, limiting resources improves reliability and stability of applications.  It also allows users to plan for the hardware capacity. Additionally, pod.s priority and the Quality of Service (QoS) that pod receives is affected by whether resource requests and limits are specified or not.\n+\n+## Pod Quality Of Service (QoS) and Prioritization\n+Pod.s Quality of Service (QoS) and priority is determined based on whether pod.s resource requests and limits are configured or not and how they.re configured.\n+\n+**Best Effort QoS**: If you don.t configure requests and limits, pod receives .best-effort. QoS and pod has the **lowest priority**. In cases where node runs out of non-shareable resources, kubelet.s out-of-resource eviction policy evicts/kills the pods with best-effort QoS first.\n+\n+**Burstable QoS**: If you configure both resource requests and limits, and set the requests to be less than the limit, pod.s QoS will be .Burstable.. Similarly when you only configure the resource requests (without limits), the pod QoS is .Burstable.. When the node runs out of non-shareable resources, kubelet will kill .Burstable. Pods only when there are no more .best-effort. pods running. The Burstable pod receives **medium priority**.\n+\n+**Guaranteed QoS**:  If you set the requests and the limits to equal values, pod will have .Guranteed. QoS and pod will be considered as of the top most priority. These settings indicates that your pod will consume a fixed amount of memory and CPU. With this configuration, if a node runs out of shareable resources, Kubernetes will kill the best-effort and the burstable Pods first before terminating these Guaranteed QoS Pods. These are the **highest priority** pods.\n+\n+## Java heap size and pod memory request/limit considerations\n+It.s extremely important to set correct heap size for JVM-based applications.  If available memory on node or memory allocated to container is not sufficient for specified JVM heap arguments (and additional off-heap memory), it is possible for WL process to run out of memory. In order to avoid this, you will need to make sure that configured heap sizes are not too big and that the pod is scheduled on the node with sufficient memory.\n+With the latest Java version, it.s possible to rely on the default JVM heap settings which are safe but quite conservative. If you configure the memory limit for a container but don.t configure heap sizes (-Xms and -Xmx), JVM will configure max heap size to 25% (1/4th) of container memory limit by default. The minimum heap size is configured to 1.56% (1/64th) of limit value.\n+\n+**Default heap sizes and resource request values for sample WebLogic Server Pods**:\n+The WLS samples configure default min and max heap size for WebLogic server java process to 256MB and 512MB respectively. This can be changed using USER_MEM_ARGS environment variable. \n+```\n+    resources:\n+      env:\n+      - name: \"USER_MEM_ARGS\"\n+        value: \"-Xms256m -Xmx512m -Djava.security.egd=file:/dev/./urandom\"\n+```        \n+\n+The default min and max heap size for node-manager process is 64MB and 100MB. This can be changed by using NODEMGR_MEM_ARGS environment variable. \n+\n+The default pod memory request in WLS samples is 768MB and default CPU request is 250m. The requests values can be changed in resources section.\n+```\n+      requests:\n+        cpu: \"250m\"\n+        memory: \"768Mi\"\n+```\n+\n+There.s no memory or CPU limit configured by default in samples and default QoS for WebLogic server pod is Burstable. If your use-case and workload requires higher QoS and priority, this can be achieved by setting memory and CPU limits. You.ll need to run tests and experiment with different memory/CPU limits to determine optimal limit values.\n+```\n+      limits:\n+        cpu: 2\n+        memory: \"2048Mi\"\n+```\n+\n+### Configure min/max heap size in percentages using \"-XX:MinRAMPercentage\" and \"-XX:MaxRAMPercentage\"\n+If you specify pod memory limit, it's recommended to configure heap size as a percentage of the total RAM (memory) specified in the pod memory limit. These parameters allow you to fine-tune the heap size. Please note . they set the percentage, not the fixed values. Thanks to it changing container memory settings will not break anything. \n+```\n+    resources:\n+      env:\n+      - name: JAVA_OPTIONS\n+        value: \"--XX:MinRAMPercentage=25.0 --XX:MaxRAMPercentage=50.0 -Dweblogic.StdoutDebugEnabled=false\"\n+```\n+When configuring memory limits, it.s important to make sure that the limit is sufficiently big to accommodate the configured heap (and off-heap) requirements, but it's not too big to waste memory resource. Since pod memory will never go above the limit, if JVM's memory usage (sum of heap and native memory) goes above the limit, JVM process will be killed due to out-of-memory error and WebLogic container will be restarted due to liveness probe failure.   Additionally there's also a node-manager process that.s running in same container and it has it's own heap and off-heap requirements. You can also fine tune the node manager heap size in percentages by setting \"-XX:MinRAMPercentage\" and \"-XX:MaxRAMPercentage\" using .NODEMGR_JAVA_OPTIONS. environment variable. \n+\n+### Using \"-Xms\" and \"-Xmx\" parameters when not configuring limits \n+In some cases, it.s difficult to come up with a hard limit for the container and you might only want to configure memory requests but not configure memory limits. In such scenarios, you can use traditional approach to set min/max heap size using .-Xms. and .-Xmx..\n+\n+### CPU requests and limits \n+It.s important that the containers running WebLogic applications have enough CPU resources, otherwise applications performance can suffer. You also don't want to set CPU requests and limit too high if your application don't need or use allocated CPU resources. Since CPU is a shared resource, if the amount of CPU that you reserve is more than required by your application, the CPU cycles will go unused and be wasted. If no CPU request and limit is configured, it can end up using all CPU resources available on node. This can starve other containers from using shareable CPU cycles. \n+\n+One other thing to keep in mind is that if pod CPU limit is not configured, it might lead to incorrect garbage collection (GC) strategy selection. WebLogic self-tuning work-manager uses pod CPU limit to configure the  number of threads in a default thread pool. If you don.t specify container CPU limit, the performance might be affected due to incorrect number of GC threads or wrong WebLogic server thread pool size. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23d465d277d44c2f5b22ee39ff66f06948acfa1"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgwMjQ2OQ==", "bodyText": "than core count -> than the core count\nkubernetes -> Kubernetes (always capitalized; please fix globally)\nare normally designed -> are typically designed\nconsidered as a -> considered a\napps  -> applications (globally)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r447802469", "createdAt": "2020-06-30T16:07:31Z", "author": {"login": "rosemarymarano"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,84 @@\n+---\n+title: \"Considerations for Pod Resource (Memory and CPU) Requests and Limits\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: true\n+weight: 40\n+---\n+The operator creates a pod for each running WebLogic Server instance and each pod will have a container. It.s important that containers have enough resources in order for applications to run efficiently and expeditiously. \n+\n+If a pod is scheduled on a node with limited resources, it.s possible for the node to run out of memory or CPU resources, and for applications to stop working properly or have degraded performance. It.s also possible for a rouge application to use all available memory and/or CPU, which makes other containers running on the same system unresponsive. The same problem can happen if an application has memory leak or bad configuration. \n+\n+A pod.s resource requests and limit parameters can be used to solve these problems. Setting resource limits prevents an application from using more than it.s share of resource. Thus, limiting resources improves reliability and stability of applications.  It also allows users to plan for the hardware capacity. Additionally, pod.s priority and the Quality of Service (QoS) that pod receives is affected by whether resource requests and limits are specified or not.\n+\n+## Pod Quality Of Service (QoS) and Prioritization\n+Pod.s Quality of Service (QoS) and priority is determined based on whether pod.s resource requests and limits are configured or not and how they.re configured.\n+\n+**Best Effort QoS**: If you don.t configure requests and limits, pod receives .best-effort. QoS and pod has the **lowest priority**. In cases where node runs out of non-shareable resources, kubelet.s out-of-resource eviction policy evicts/kills the pods with best-effort QoS first.\n+\n+**Burstable QoS**: If you configure both resource requests and limits, and set the requests to be less than the limit, pod.s QoS will be .Burstable.. Similarly when you only configure the resource requests (without limits), the pod QoS is .Burstable.. When the node runs out of non-shareable resources, kubelet will kill .Burstable. Pods only when there are no more .best-effort. pods running. The Burstable pod receives **medium priority**.\n+\n+**Guaranteed QoS**:  If you set the requests and the limits to equal values, pod will have .Guranteed. QoS and pod will be considered as of the top most priority. These settings indicates that your pod will consume a fixed amount of memory and CPU. With this configuration, if a node runs out of shareable resources, Kubernetes will kill the best-effort and the burstable Pods first before terminating these Guaranteed QoS Pods. These are the **highest priority** pods.\n+\n+## Java heap size and pod memory request/limit considerations\n+It.s extremely important to set correct heap size for JVM-based applications.  If available memory on node or memory allocated to container is not sufficient for specified JVM heap arguments (and additional off-heap memory), it is possible for WL process to run out of memory. In order to avoid this, you will need to make sure that configured heap sizes are not too big and that the pod is scheduled on the node with sufficient memory.\n+With the latest Java version, it.s possible to rely on the default JVM heap settings which are safe but quite conservative. If you configure the memory limit for a container but don.t configure heap sizes (-Xms and -Xmx), JVM will configure max heap size to 25% (1/4th) of container memory limit by default. The minimum heap size is configured to 1.56% (1/64th) of limit value.\n+\n+**Default heap sizes and resource request values for sample WebLogic Server Pods**:\n+The WLS samples configure default min and max heap size for WebLogic server java process to 256MB and 512MB respectively. This can be changed using USER_MEM_ARGS environment variable. \n+```\n+    resources:\n+      env:\n+      - name: \"USER_MEM_ARGS\"\n+        value: \"-Xms256m -Xmx512m -Djava.security.egd=file:/dev/./urandom\"\n+```        \n+\n+The default min and max heap size for node-manager process is 64MB and 100MB. This can be changed by using NODEMGR_MEM_ARGS environment variable. \n+\n+The default pod memory request in WLS samples is 768MB and default CPU request is 250m. The requests values can be changed in resources section.\n+```\n+      requests:\n+        cpu: \"250m\"\n+        memory: \"768Mi\"\n+```\n+\n+There.s no memory or CPU limit configured by default in samples and default QoS for WebLogic server pod is Burstable. If your use-case and workload requires higher QoS and priority, this can be achieved by setting memory and CPU limits. You.ll need to run tests and experiment with different memory/CPU limits to determine optimal limit values.\n+```\n+      limits:\n+        cpu: 2\n+        memory: \"2048Mi\"\n+```\n+\n+### Configure min/max heap size in percentages using \"-XX:MinRAMPercentage\" and \"-XX:MaxRAMPercentage\"\n+If you specify pod memory limit, it's recommended to configure heap size as a percentage of the total RAM (memory) specified in the pod memory limit. These parameters allow you to fine-tune the heap size. Please note . they set the percentage, not the fixed values. Thanks to it changing container memory settings will not break anything. \n+```\n+    resources:\n+      env:\n+      - name: JAVA_OPTIONS\n+        value: \"--XX:MinRAMPercentage=25.0 --XX:MaxRAMPercentage=50.0 -Dweblogic.StdoutDebugEnabled=false\"\n+```\n+When configuring memory limits, it.s important to make sure that the limit is sufficiently big to accommodate the configured heap (and off-heap) requirements, but it's not too big to waste memory resource. Since pod memory will never go above the limit, if JVM's memory usage (sum of heap and native memory) goes above the limit, JVM process will be killed due to out-of-memory error and WebLogic container will be restarted due to liveness probe failure.   Additionally there's also a node-manager process that.s running in same container and it has it's own heap and off-heap requirements. You can also fine tune the node manager heap size in percentages by setting \"-XX:MinRAMPercentage\" and \"-XX:MaxRAMPercentage\" using .NODEMGR_JAVA_OPTIONS. environment variable. \n+\n+### Using \"-Xms\" and \"-Xmx\" parameters when not configuring limits \n+In some cases, it.s difficult to come up with a hard limit for the container and you might only want to configure memory requests but not configure memory limits. In such scenarios, you can use traditional approach to set min/max heap size using .-Xms. and .-Xmx..\n+\n+### CPU requests and limits \n+It.s important that the containers running WebLogic applications have enough CPU resources, otherwise applications performance can suffer. You also don't want to set CPU requests and limit too high if your application don't need or use allocated CPU resources. Since CPU is a shared resource, if the amount of CPU that you reserve is more than required by your application, the CPU cycles will go unused and be wasted. If no CPU request and limit is configured, it can end up using all CPU resources available on node. This can starve other containers from using shareable CPU cycles. \n+\n+One other thing to keep in mind is that if pod CPU limit is not configured, it might lead to incorrect garbage collection (GC) strategy selection. WebLogic self-tuning work-manager uses pod CPU limit to configure the  number of threads in a default thread pool. If you don.t specify container CPU limit, the performance might be affected due to incorrect number of GC threads or wrong WebLogic server thread pool size. \n+\n+## Beware of setting resource limits too high\n+It.s important to keep in mind that if you set a value of CPU core count that.s larger than core count of the biggest node, then the pod will never be scheduled. Let.s say you have a pod that needs 4 cores but you have a kubernetes cluster that.s comprised of 2 core VMs. In this case, your pod will never be scheduled.  WebLogic applications are normally designed to take advantage of multiple cores and should be given CPU requests as such. CPUs are considered as a compressible resource. If your apps are hitting CPU limits, kubernetes will start to throttle your container. This means your CPU will be artificially restricted, giving your app potentially worse performance. However it won.t be terminated or evicted. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23d465d277d44c2f5b22ee39ff66f06948acfa1"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgwMjc4MQ==", "bodyText": "than amount -> than he amount", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r447802781", "createdAt": "2020-06-30T16:07:58Z", "author": {"login": "rosemarymarano"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,84 @@\n+---\n+title: \"Considerations for Pod Resource (Memory and CPU) Requests and Limits\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: true\n+weight: 40\n+---\n+The operator creates a pod for each running WebLogic Server instance and each pod will have a container. It.s important that containers have enough resources in order for applications to run efficiently and expeditiously. \n+\n+If a pod is scheduled on a node with limited resources, it.s possible for the node to run out of memory or CPU resources, and for applications to stop working properly or have degraded performance. It.s also possible for a rouge application to use all available memory and/or CPU, which makes other containers running on the same system unresponsive. The same problem can happen if an application has memory leak or bad configuration. \n+\n+A pod.s resource requests and limit parameters can be used to solve these problems. Setting resource limits prevents an application from using more than it.s share of resource. Thus, limiting resources improves reliability and stability of applications.  It also allows users to plan for the hardware capacity. Additionally, pod.s priority and the Quality of Service (QoS) that pod receives is affected by whether resource requests and limits are specified or not.\n+\n+## Pod Quality Of Service (QoS) and Prioritization\n+Pod.s Quality of Service (QoS) and priority is determined based on whether pod.s resource requests and limits are configured or not and how they.re configured.\n+\n+**Best Effort QoS**: If you don.t configure requests and limits, pod receives .best-effort. QoS and pod has the **lowest priority**. In cases where node runs out of non-shareable resources, kubelet.s out-of-resource eviction policy evicts/kills the pods with best-effort QoS first.\n+\n+**Burstable QoS**: If you configure both resource requests and limits, and set the requests to be less than the limit, pod.s QoS will be .Burstable.. Similarly when you only configure the resource requests (without limits), the pod QoS is .Burstable.. When the node runs out of non-shareable resources, kubelet will kill .Burstable. Pods only when there are no more .best-effort. pods running. The Burstable pod receives **medium priority**.\n+\n+**Guaranteed QoS**:  If you set the requests and the limits to equal values, pod will have .Guranteed. QoS and pod will be considered as of the top most priority. These settings indicates that your pod will consume a fixed amount of memory and CPU. With this configuration, if a node runs out of shareable resources, Kubernetes will kill the best-effort and the burstable Pods first before terminating these Guaranteed QoS Pods. These are the **highest priority** pods.\n+\n+## Java heap size and pod memory request/limit considerations\n+It.s extremely important to set correct heap size for JVM-based applications.  If available memory on node or memory allocated to container is not sufficient for specified JVM heap arguments (and additional off-heap memory), it is possible for WL process to run out of memory. In order to avoid this, you will need to make sure that configured heap sizes are not too big and that the pod is scheduled on the node with sufficient memory.\n+With the latest Java version, it.s possible to rely on the default JVM heap settings which are safe but quite conservative. If you configure the memory limit for a container but don.t configure heap sizes (-Xms and -Xmx), JVM will configure max heap size to 25% (1/4th) of container memory limit by default. The minimum heap size is configured to 1.56% (1/64th) of limit value.\n+\n+**Default heap sizes and resource request values for sample WebLogic Server Pods**:\n+The WLS samples configure default min and max heap size for WebLogic server java process to 256MB and 512MB respectively. This can be changed using USER_MEM_ARGS environment variable. \n+```\n+    resources:\n+      env:\n+      - name: \"USER_MEM_ARGS\"\n+        value: \"-Xms256m -Xmx512m -Djava.security.egd=file:/dev/./urandom\"\n+```        \n+\n+The default min and max heap size for node-manager process is 64MB and 100MB. This can be changed by using NODEMGR_MEM_ARGS environment variable. \n+\n+The default pod memory request in WLS samples is 768MB and default CPU request is 250m. The requests values can be changed in resources section.\n+```\n+      requests:\n+        cpu: \"250m\"\n+        memory: \"768Mi\"\n+```\n+\n+There.s no memory or CPU limit configured by default in samples and default QoS for WebLogic server pod is Burstable. If your use-case and workload requires higher QoS and priority, this can be achieved by setting memory and CPU limits. You.ll need to run tests and experiment with different memory/CPU limits to determine optimal limit values.\n+```\n+      limits:\n+        cpu: 2\n+        memory: \"2048Mi\"\n+```\n+\n+### Configure min/max heap size in percentages using \"-XX:MinRAMPercentage\" and \"-XX:MaxRAMPercentage\"\n+If you specify pod memory limit, it's recommended to configure heap size as a percentage of the total RAM (memory) specified in the pod memory limit. These parameters allow you to fine-tune the heap size. Please note . they set the percentage, not the fixed values. Thanks to it changing container memory settings will not break anything. \n+```\n+    resources:\n+      env:\n+      - name: JAVA_OPTIONS\n+        value: \"--XX:MinRAMPercentage=25.0 --XX:MaxRAMPercentage=50.0 -Dweblogic.StdoutDebugEnabled=false\"\n+```\n+When configuring memory limits, it.s important to make sure that the limit is sufficiently big to accommodate the configured heap (and off-heap) requirements, but it's not too big to waste memory resource. Since pod memory will never go above the limit, if JVM's memory usage (sum of heap and native memory) goes above the limit, JVM process will be killed due to out-of-memory error and WebLogic container will be restarted due to liveness probe failure.   Additionally there's also a node-manager process that.s running in same container and it has it's own heap and off-heap requirements. You can also fine tune the node manager heap size in percentages by setting \"-XX:MinRAMPercentage\" and \"-XX:MaxRAMPercentage\" using .NODEMGR_JAVA_OPTIONS. environment variable. \n+\n+### Using \"-Xms\" and \"-Xmx\" parameters when not configuring limits \n+In some cases, it.s difficult to come up with a hard limit for the container and you might only want to configure memory requests but not configure memory limits. In such scenarios, you can use traditional approach to set min/max heap size using .-Xms. and .-Xmx..\n+\n+### CPU requests and limits \n+It.s important that the containers running WebLogic applications have enough CPU resources, otherwise applications performance can suffer. You also don't want to set CPU requests and limit too high if your application don't need or use allocated CPU resources. Since CPU is a shared resource, if the amount of CPU that you reserve is more than required by your application, the CPU cycles will go unused and be wasted. If no CPU request and limit is configured, it can end up using all CPU resources available on node. This can starve other containers from using shareable CPU cycles. \n+\n+One other thing to keep in mind is that if pod CPU limit is not configured, it might lead to incorrect garbage collection (GC) strategy selection. WebLogic self-tuning work-manager uses pod CPU limit to configure the  number of threads in a default thread pool. If you don.t specify container CPU limit, the performance might be affected due to incorrect number of GC threads or wrong WebLogic server thread pool size. \n+\n+## Beware of setting resource limits too high\n+It.s important to keep in mind that if you set a value of CPU core count that.s larger than core count of the biggest node, then the pod will never be scheduled. Let.s say you have a pod that needs 4 cores but you have a kubernetes cluster that.s comprised of 2 core VMs. In this case, your pod will never be scheduled.  WebLogic applications are normally designed to take advantage of multiple cores and should be given CPU requests as such. CPUs are considered as a compressible resource. If your apps are hitting CPU limits, kubernetes will start to throttle your container. This means your CPU will be artificially restricted, giving your app potentially worse performance. However it won.t be terminated or evicted. \n+Just like CPU, if you put a memory request that.s larger than amount of memory on your nodes, the pod will never be scheduled.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23d465d277d44c2f5b22ee39ff66f06948acfa1"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgwMzM1NQ==", "bodyText": "Affinity  -> affinity\nk8s -> Kubernetes (globally)", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r447803355", "createdAt": "2020-06-30T16:08:49Z", "author": {"login": "rosemarymarano"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,84 @@\n+---\n+title: \"Considerations for Pod Resource (Memory and CPU) Requests and Limits\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: true\n+weight: 40\n+---\n+The operator creates a pod for each running WebLogic Server instance and each pod will have a container. It.s important that containers have enough resources in order for applications to run efficiently and expeditiously. \n+\n+If a pod is scheduled on a node with limited resources, it.s possible for the node to run out of memory or CPU resources, and for applications to stop working properly or have degraded performance. It.s also possible for a rouge application to use all available memory and/or CPU, which makes other containers running on the same system unresponsive. The same problem can happen if an application has memory leak or bad configuration. \n+\n+A pod.s resource requests and limit parameters can be used to solve these problems. Setting resource limits prevents an application from using more than it.s share of resource. Thus, limiting resources improves reliability and stability of applications.  It also allows users to plan for the hardware capacity. Additionally, pod.s priority and the Quality of Service (QoS) that pod receives is affected by whether resource requests and limits are specified or not.\n+\n+## Pod Quality Of Service (QoS) and Prioritization\n+Pod.s Quality of Service (QoS) and priority is determined based on whether pod.s resource requests and limits are configured or not and how they.re configured.\n+\n+**Best Effort QoS**: If you don.t configure requests and limits, pod receives .best-effort. QoS and pod has the **lowest priority**. In cases where node runs out of non-shareable resources, kubelet.s out-of-resource eviction policy evicts/kills the pods with best-effort QoS first.\n+\n+**Burstable QoS**: If you configure both resource requests and limits, and set the requests to be less than the limit, pod.s QoS will be .Burstable.. Similarly when you only configure the resource requests (without limits), the pod QoS is .Burstable.. When the node runs out of non-shareable resources, kubelet will kill .Burstable. Pods only when there are no more .best-effort. pods running. The Burstable pod receives **medium priority**.\n+\n+**Guaranteed QoS**:  If you set the requests and the limits to equal values, pod will have .Guranteed. QoS and pod will be considered as of the top most priority. These settings indicates that your pod will consume a fixed amount of memory and CPU. With this configuration, if a node runs out of shareable resources, Kubernetes will kill the best-effort and the burstable Pods first before terminating these Guaranteed QoS Pods. These are the **highest priority** pods.\n+\n+## Java heap size and pod memory request/limit considerations\n+It.s extremely important to set correct heap size for JVM-based applications.  If available memory on node or memory allocated to container is not sufficient for specified JVM heap arguments (and additional off-heap memory), it is possible for WL process to run out of memory. In order to avoid this, you will need to make sure that configured heap sizes are not too big and that the pod is scheduled on the node with sufficient memory.\n+With the latest Java version, it.s possible to rely on the default JVM heap settings which are safe but quite conservative. If you configure the memory limit for a container but don.t configure heap sizes (-Xms and -Xmx), JVM will configure max heap size to 25% (1/4th) of container memory limit by default. The minimum heap size is configured to 1.56% (1/64th) of limit value.\n+\n+**Default heap sizes and resource request values for sample WebLogic Server Pods**:\n+The WLS samples configure default min and max heap size for WebLogic server java process to 256MB and 512MB respectively. This can be changed using USER_MEM_ARGS environment variable. \n+```\n+    resources:\n+      env:\n+      - name: \"USER_MEM_ARGS\"\n+        value: \"-Xms256m -Xmx512m -Djava.security.egd=file:/dev/./urandom\"\n+```        \n+\n+The default min and max heap size for node-manager process is 64MB and 100MB. This can be changed by using NODEMGR_MEM_ARGS environment variable. \n+\n+The default pod memory request in WLS samples is 768MB and default CPU request is 250m. The requests values can be changed in resources section.\n+```\n+      requests:\n+        cpu: \"250m\"\n+        memory: \"768Mi\"\n+```\n+\n+There.s no memory or CPU limit configured by default in samples and default QoS for WebLogic server pod is Burstable. If your use-case and workload requires higher QoS and priority, this can be achieved by setting memory and CPU limits. You.ll need to run tests and experiment with different memory/CPU limits to determine optimal limit values.\n+```\n+      limits:\n+        cpu: 2\n+        memory: \"2048Mi\"\n+```\n+\n+### Configure min/max heap size in percentages using \"-XX:MinRAMPercentage\" and \"-XX:MaxRAMPercentage\"\n+If you specify pod memory limit, it's recommended to configure heap size as a percentage of the total RAM (memory) specified in the pod memory limit. These parameters allow you to fine-tune the heap size. Please note . they set the percentage, not the fixed values. Thanks to it changing container memory settings will not break anything. \n+```\n+    resources:\n+      env:\n+      - name: JAVA_OPTIONS\n+        value: \"--XX:MinRAMPercentage=25.0 --XX:MaxRAMPercentage=50.0 -Dweblogic.StdoutDebugEnabled=false\"\n+```\n+When configuring memory limits, it.s important to make sure that the limit is sufficiently big to accommodate the configured heap (and off-heap) requirements, but it's not too big to waste memory resource. Since pod memory will never go above the limit, if JVM's memory usage (sum of heap and native memory) goes above the limit, JVM process will be killed due to out-of-memory error and WebLogic container will be restarted due to liveness probe failure.   Additionally there's also a node-manager process that.s running in same container and it has it's own heap and off-heap requirements. You can also fine tune the node manager heap size in percentages by setting \"-XX:MinRAMPercentage\" and \"-XX:MaxRAMPercentage\" using .NODEMGR_JAVA_OPTIONS. environment variable. \n+\n+### Using \"-Xms\" and \"-Xmx\" parameters when not configuring limits \n+In some cases, it.s difficult to come up with a hard limit for the container and you might only want to configure memory requests but not configure memory limits. In such scenarios, you can use traditional approach to set min/max heap size using .-Xms. and .-Xmx..\n+\n+### CPU requests and limits \n+It.s important that the containers running WebLogic applications have enough CPU resources, otherwise applications performance can suffer. You also don't want to set CPU requests and limit too high if your application don't need or use allocated CPU resources. Since CPU is a shared resource, if the amount of CPU that you reserve is more than required by your application, the CPU cycles will go unused and be wasted. If no CPU request and limit is configured, it can end up using all CPU resources available on node. This can starve other containers from using shareable CPU cycles. \n+\n+One other thing to keep in mind is that if pod CPU limit is not configured, it might lead to incorrect garbage collection (GC) strategy selection. WebLogic self-tuning work-manager uses pod CPU limit to configure the  number of threads in a default thread pool. If you don.t specify container CPU limit, the performance might be affected due to incorrect number of GC threads or wrong WebLogic server thread pool size. \n+\n+## Beware of setting resource limits too high\n+It.s important to keep in mind that if you set a value of CPU core count that.s larger than core count of the biggest node, then the pod will never be scheduled. Let.s say you have a pod that needs 4 cores but you have a kubernetes cluster that.s comprised of 2 core VMs. In this case, your pod will never be scheduled.  WebLogic applications are normally designed to take advantage of multiple cores and should be given CPU requests as such. CPUs are considered as a compressible resource. If your apps are hitting CPU limits, kubernetes will start to throttle your container. This means your CPU will be artificially restricted, giving your app potentially worse performance. However it won.t be terminated or evicted. \n+Just like CPU, if you put a memory request that.s larger than amount of memory on your nodes, the pod will never be scheduled.\n+## CPU Affinity and lock contention in k8s", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23d465d277d44c2f5b22ee39ff66f06948acfa1"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgwNDIzNQ==", "bodyText": "env -> environment (globally)\nseem -> seems", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r447804235", "createdAt": "2020-06-30T16:10:09Z", "author": {"login": "rosemarymarano"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,84 @@\n+---\n+title: \"Considerations for Pod Resource (Memory and CPU) Requests and Limits\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: true\n+weight: 40\n+---\n+The operator creates a pod for each running WebLogic Server instance and each pod will have a container. It.s important that containers have enough resources in order for applications to run efficiently and expeditiously. \n+\n+If a pod is scheduled on a node with limited resources, it.s possible for the node to run out of memory or CPU resources, and for applications to stop working properly or have degraded performance. It.s also possible for a rouge application to use all available memory and/or CPU, which makes other containers running on the same system unresponsive. The same problem can happen if an application has memory leak or bad configuration. \n+\n+A pod.s resource requests and limit parameters can be used to solve these problems. Setting resource limits prevents an application from using more than it.s share of resource. Thus, limiting resources improves reliability and stability of applications.  It also allows users to plan for the hardware capacity. Additionally, pod.s priority and the Quality of Service (QoS) that pod receives is affected by whether resource requests and limits are specified or not.\n+\n+## Pod Quality Of Service (QoS) and Prioritization\n+Pod.s Quality of Service (QoS) and priority is determined based on whether pod.s resource requests and limits are configured or not and how they.re configured.\n+\n+**Best Effort QoS**: If you don.t configure requests and limits, pod receives .best-effort. QoS and pod has the **lowest priority**. In cases where node runs out of non-shareable resources, kubelet.s out-of-resource eviction policy evicts/kills the pods with best-effort QoS first.\n+\n+**Burstable QoS**: If you configure both resource requests and limits, and set the requests to be less than the limit, pod.s QoS will be .Burstable.. Similarly when you only configure the resource requests (without limits), the pod QoS is .Burstable.. When the node runs out of non-shareable resources, kubelet will kill .Burstable. Pods only when there are no more .best-effort. pods running. The Burstable pod receives **medium priority**.\n+\n+**Guaranteed QoS**:  If you set the requests and the limits to equal values, pod will have .Guranteed. QoS and pod will be considered as of the top most priority. These settings indicates that your pod will consume a fixed amount of memory and CPU. With this configuration, if a node runs out of shareable resources, Kubernetes will kill the best-effort and the burstable Pods first before terminating these Guaranteed QoS Pods. These are the **highest priority** pods.\n+\n+## Java heap size and pod memory request/limit considerations\n+It.s extremely important to set correct heap size for JVM-based applications.  If available memory on node or memory allocated to container is not sufficient for specified JVM heap arguments (and additional off-heap memory), it is possible for WL process to run out of memory. In order to avoid this, you will need to make sure that configured heap sizes are not too big and that the pod is scheduled on the node with sufficient memory.\n+With the latest Java version, it.s possible to rely on the default JVM heap settings which are safe but quite conservative. If you configure the memory limit for a container but don.t configure heap sizes (-Xms and -Xmx), JVM will configure max heap size to 25% (1/4th) of container memory limit by default. The minimum heap size is configured to 1.56% (1/64th) of limit value.\n+\n+**Default heap sizes and resource request values for sample WebLogic Server Pods**:\n+The WLS samples configure default min and max heap size for WebLogic server java process to 256MB and 512MB respectively. This can be changed using USER_MEM_ARGS environment variable. \n+```\n+    resources:\n+      env:\n+      - name: \"USER_MEM_ARGS\"\n+        value: \"-Xms256m -Xmx512m -Djava.security.egd=file:/dev/./urandom\"\n+```        \n+\n+The default min and max heap size for node-manager process is 64MB and 100MB. This can be changed by using NODEMGR_MEM_ARGS environment variable. \n+\n+The default pod memory request in WLS samples is 768MB and default CPU request is 250m. The requests values can be changed in resources section.\n+```\n+      requests:\n+        cpu: \"250m\"\n+        memory: \"768Mi\"\n+```\n+\n+There.s no memory or CPU limit configured by default in samples and default QoS for WebLogic server pod is Burstable. If your use-case and workload requires higher QoS and priority, this can be achieved by setting memory and CPU limits. You.ll need to run tests and experiment with different memory/CPU limits to determine optimal limit values.\n+```\n+      limits:\n+        cpu: 2\n+        memory: \"2048Mi\"\n+```\n+\n+### Configure min/max heap size in percentages using \"-XX:MinRAMPercentage\" and \"-XX:MaxRAMPercentage\"\n+If you specify pod memory limit, it's recommended to configure heap size as a percentage of the total RAM (memory) specified in the pod memory limit. These parameters allow you to fine-tune the heap size. Please note . they set the percentage, not the fixed values. Thanks to it changing container memory settings will not break anything. \n+```\n+    resources:\n+      env:\n+      - name: JAVA_OPTIONS\n+        value: \"--XX:MinRAMPercentage=25.0 --XX:MaxRAMPercentage=50.0 -Dweblogic.StdoutDebugEnabled=false\"\n+```\n+When configuring memory limits, it.s important to make sure that the limit is sufficiently big to accommodate the configured heap (and off-heap) requirements, but it's not too big to waste memory resource. Since pod memory will never go above the limit, if JVM's memory usage (sum of heap and native memory) goes above the limit, JVM process will be killed due to out-of-memory error and WebLogic container will be restarted due to liveness probe failure.   Additionally there's also a node-manager process that.s running in same container and it has it's own heap and off-heap requirements. You can also fine tune the node manager heap size in percentages by setting \"-XX:MinRAMPercentage\" and \"-XX:MaxRAMPercentage\" using .NODEMGR_JAVA_OPTIONS. environment variable. \n+\n+### Using \"-Xms\" and \"-Xmx\" parameters when not configuring limits \n+In some cases, it.s difficult to come up with a hard limit for the container and you might only want to configure memory requests but not configure memory limits. In such scenarios, you can use traditional approach to set min/max heap size using .-Xms. and .-Xmx..\n+\n+### CPU requests and limits \n+It.s important that the containers running WebLogic applications have enough CPU resources, otherwise applications performance can suffer. You also don't want to set CPU requests and limit too high if your application don't need or use allocated CPU resources. Since CPU is a shared resource, if the amount of CPU that you reserve is more than required by your application, the CPU cycles will go unused and be wasted. If no CPU request and limit is configured, it can end up using all CPU resources available on node. This can starve other containers from using shareable CPU cycles. \n+\n+One other thing to keep in mind is that if pod CPU limit is not configured, it might lead to incorrect garbage collection (GC) strategy selection. WebLogic self-tuning work-manager uses pod CPU limit to configure the  number of threads in a default thread pool. If you don.t specify container CPU limit, the performance might be affected due to incorrect number of GC threads or wrong WebLogic server thread pool size. \n+\n+## Beware of setting resource limits too high\n+It.s important to keep in mind that if you set a value of CPU core count that.s larger than core count of the biggest node, then the pod will never be scheduled. Let.s say you have a pod that needs 4 cores but you have a kubernetes cluster that.s comprised of 2 core VMs. In this case, your pod will never be scheduled.  WebLogic applications are normally designed to take advantage of multiple cores and should be given CPU requests as such. CPUs are considered as a compressible resource. If your apps are hitting CPU limits, kubernetes will start to throttle your container. This means your CPU will be artificially restricted, giving your app potentially worse performance. However it won.t be terminated or evicted. \n+Just like CPU, if you put a memory request that.s larger than amount of memory on your nodes, the pod will never be scheduled.\n+## CPU Affinity and lock contention in k8s\n+We observed much higher lock contention in k8s env when running some workloads in kubernetes as compared to traditional env. The lock contention seem to be caused by the lack of CPU cache affinity and/or scheduling latency when the workload moves to different CPU cores.  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23d465d277d44c2f5b22ee39ff66f06948acfa1"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgwNTQ0Ng==", "bodyText": "environment -> environments\njava -> Java (always capitalized)\nusing taskset -> using the taskset", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r447805446", "createdAt": "2020-06-30T16:11:47Z", "author": {"login": "rosemarymarano"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,84 @@\n+---\n+title: \"Considerations for Pod Resource (Memory and CPU) Requests and Limits\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: true\n+weight: 40\n+---\n+The operator creates a pod for each running WebLogic Server instance and each pod will have a container. It.s important that containers have enough resources in order for applications to run efficiently and expeditiously. \n+\n+If a pod is scheduled on a node with limited resources, it.s possible for the node to run out of memory or CPU resources, and for applications to stop working properly or have degraded performance. It.s also possible for a rouge application to use all available memory and/or CPU, which makes other containers running on the same system unresponsive. The same problem can happen if an application has memory leak or bad configuration. \n+\n+A pod.s resource requests and limit parameters can be used to solve these problems. Setting resource limits prevents an application from using more than it.s share of resource. Thus, limiting resources improves reliability and stability of applications.  It also allows users to plan for the hardware capacity. Additionally, pod.s priority and the Quality of Service (QoS) that pod receives is affected by whether resource requests and limits are specified or not.\n+\n+## Pod Quality Of Service (QoS) and Prioritization\n+Pod.s Quality of Service (QoS) and priority is determined based on whether pod.s resource requests and limits are configured or not and how they.re configured.\n+\n+**Best Effort QoS**: If you don.t configure requests and limits, pod receives .best-effort. QoS and pod has the **lowest priority**. In cases where node runs out of non-shareable resources, kubelet.s out-of-resource eviction policy evicts/kills the pods with best-effort QoS first.\n+\n+**Burstable QoS**: If you configure both resource requests and limits, and set the requests to be less than the limit, pod.s QoS will be .Burstable.. Similarly when you only configure the resource requests (without limits), the pod QoS is .Burstable.. When the node runs out of non-shareable resources, kubelet will kill .Burstable. Pods only when there are no more .best-effort. pods running. The Burstable pod receives **medium priority**.\n+\n+**Guaranteed QoS**:  If you set the requests and the limits to equal values, pod will have .Guranteed. QoS and pod will be considered as of the top most priority. These settings indicates that your pod will consume a fixed amount of memory and CPU. With this configuration, if a node runs out of shareable resources, Kubernetes will kill the best-effort and the burstable Pods first before terminating these Guaranteed QoS Pods. These are the **highest priority** pods.\n+\n+## Java heap size and pod memory request/limit considerations\n+It.s extremely important to set correct heap size for JVM-based applications.  If available memory on node or memory allocated to container is not sufficient for specified JVM heap arguments (and additional off-heap memory), it is possible for WL process to run out of memory. In order to avoid this, you will need to make sure that configured heap sizes are not too big and that the pod is scheduled on the node with sufficient memory.\n+With the latest Java version, it.s possible to rely on the default JVM heap settings which are safe but quite conservative. If you configure the memory limit for a container but don.t configure heap sizes (-Xms and -Xmx), JVM will configure max heap size to 25% (1/4th) of container memory limit by default. The minimum heap size is configured to 1.56% (1/64th) of limit value.\n+\n+**Default heap sizes and resource request values for sample WebLogic Server Pods**:\n+The WLS samples configure default min and max heap size for WebLogic server java process to 256MB and 512MB respectively. This can be changed using USER_MEM_ARGS environment variable. \n+```\n+    resources:\n+      env:\n+      - name: \"USER_MEM_ARGS\"\n+        value: \"-Xms256m -Xmx512m -Djava.security.egd=file:/dev/./urandom\"\n+```        \n+\n+The default min and max heap size for node-manager process is 64MB and 100MB. This can be changed by using NODEMGR_MEM_ARGS environment variable. \n+\n+The default pod memory request in WLS samples is 768MB and default CPU request is 250m. The requests values can be changed in resources section.\n+```\n+      requests:\n+        cpu: \"250m\"\n+        memory: \"768Mi\"\n+```\n+\n+There.s no memory or CPU limit configured by default in samples and default QoS for WebLogic server pod is Burstable. If your use-case and workload requires higher QoS and priority, this can be achieved by setting memory and CPU limits. You.ll need to run tests and experiment with different memory/CPU limits to determine optimal limit values.\n+```\n+      limits:\n+        cpu: 2\n+        memory: \"2048Mi\"\n+```\n+\n+### Configure min/max heap size in percentages using \"-XX:MinRAMPercentage\" and \"-XX:MaxRAMPercentage\"\n+If you specify pod memory limit, it's recommended to configure heap size as a percentage of the total RAM (memory) specified in the pod memory limit. These parameters allow you to fine-tune the heap size. Please note . they set the percentage, not the fixed values. Thanks to it changing container memory settings will not break anything. \n+```\n+    resources:\n+      env:\n+      - name: JAVA_OPTIONS\n+        value: \"--XX:MinRAMPercentage=25.0 --XX:MaxRAMPercentage=50.0 -Dweblogic.StdoutDebugEnabled=false\"\n+```\n+When configuring memory limits, it.s important to make sure that the limit is sufficiently big to accommodate the configured heap (and off-heap) requirements, but it's not too big to waste memory resource. Since pod memory will never go above the limit, if JVM's memory usage (sum of heap and native memory) goes above the limit, JVM process will be killed due to out-of-memory error and WebLogic container will be restarted due to liveness probe failure.   Additionally there's also a node-manager process that.s running in same container and it has it's own heap and off-heap requirements. You can also fine tune the node manager heap size in percentages by setting \"-XX:MinRAMPercentage\" and \"-XX:MaxRAMPercentage\" using .NODEMGR_JAVA_OPTIONS. environment variable. \n+\n+### Using \"-Xms\" and \"-Xmx\" parameters when not configuring limits \n+In some cases, it.s difficult to come up with a hard limit for the container and you might only want to configure memory requests but not configure memory limits. In such scenarios, you can use traditional approach to set min/max heap size using .-Xms. and .-Xmx..\n+\n+### CPU requests and limits \n+It.s important that the containers running WebLogic applications have enough CPU resources, otherwise applications performance can suffer. You also don't want to set CPU requests and limit too high if your application don't need or use allocated CPU resources. Since CPU is a shared resource, if the amount of CPU that you reserve is more than required by your application, the CPU cycles will go unused and be wasted. If no CPU request and limit is configured, it can end up using all CPU resources available on node. This can starve other containers from using shareable CPU cycles. \n+\n+One other thing to keep in mind is that if pod CPU limit is not configured, it might lead to incorrect garbage collection (GC) strategy selection. WebLogic self-tuning work-manager uses pod CPU limit to configure the  number of threads in a default thread pool. If you don.t specify container CPU limit, the performance might be affected due to incorrect number of GC threads or wrong WebLogic server thread pool size. \n+\n+## Beware of setting resource limits too high\n+It.s important to keep in mind that if you set a value of CPU core count that.s larger than core count of the biggest node, then the pod will never be scheduled. Let.s say you have a pod that needs 4 cores but you have a kubernetes cluster that.s comprised of 2 core VMs. In this case, your pod will never be scheduled.  WebLogic applications are normally designed to take advantage of multiple cores and should be given CPU requests as such. CPUs are considered as a compressible resource. If your apps are hitting CPU limits, kubernetes will start to throttle your container. This means your CPU will be artificially restricted, giving your app potentially worse performance. However it won.t be terminated or evicted. \n+Just like CPU, if you put a memory request that.s larger than amount of memory on your nodes, the pod will never be scheduled.\n+## CPU Affinity and lock contention in k8s\n+We observed much higher lock contention in k8s env when running some workloads in kubernetes as compared to traditional env. The lock contention seem to be caused by the lack of CPU cache affinity and/or scheduling latency when the workload moves to different CPU cores.  \n+\n+In traditional (non-k8s) environment, often tests are run with CPU affinity achieved by binding WLS java process to particular CPU core(s) (using taskset command). This results in reduced lock contention and better performance. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23d465d277d44c2f5b22ee39ff66f06948acfa1"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgwNjEwMQ==", "bodyText": "when CPU manager policy -> when the CPU manager policy\nQOS -> QoS", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r447806101", "createdAt": "2020-06-30T16:12:34Z", "author": {"login": "rosemarymarano"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,84 @@\n+---\n+title: \"Considerations for Pod Resource (Memory and CPU) Requests and Limits\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: true\n+weight: 40\n+---\n+The operator creates a pod for each running WebLogic Server instance and each pod will have a container. It.s important that containers have enough resources in order for applications to run efficiently and expeditiously. \n+\n+If a pod is scheduled on a node with limited resources, it.s possible for the node to run out of memory or CPU resources, and for applications to stop working properly or have degraded performance. It.s also possible for a rouge application to use all available memory and/or CPU, which makes other containers running on the same system unresponsive. The same problem can happen if an application has memory leak or bad configuration. \n+\n+A pod.s resource requests and limit parameters can be used to solve these problems. Setting resource limits prevents an application from using more than it.s share of resource. Thus, limiting resources improves reliability and stability of applications.  It also allows users to plan for the hardware capacity. Additionally, pod.s priority and the Quality of Service (QoS) that pod receives is affected by whether resource requests and limits are specified or not.\n+\n+## Pod Quality Of Service (QoS) and Prioritization\n+Pod.s Quality of Service (QoS) and priority is determined based on whether pod.s resource requests and limits are configured or not and how they.re configured.\n+\n+**Best Effort QoS**: If you don.t configure requests and limits, pod receives .best-effort. QoS and pod has the **lowest priority**. In cases where node runs out of non-shareable resources, kubelet.s out-of-resource eviction policy evicts/kills the pods with best-effort QoS first.\n+\n+**Burstable QoS**: If you configure both resource requests and limits, and set the requests to be less than the limit, pod.s QoS will be .Burstable.. Similarly when you only configure the resource requests (without limits), the pod QoS is .Burstable.. When the node runs out of non-shareable resources, kubelet will kill .Burstable. Pods only when there are no more .best-effort. pods running. The Burstable pod receives **medium priority**.\n+\n+**Guaranteed QoS**:  If you set the requests and the limits to equal values, pod will have .Guranteed. QoS and pod will be considered as of the top most priority. These settings indicates that your pod will consume a fixed amount of memory and CPU. With this configuration, if a node runs out of shareable resources, Kubernetes will kill the best-effort and the burstable Pods first before terminating these Guaranteed QoS Pods. These are the **highest priority** pods.\n+\n+## Java heap size and pod memory request/limit considerations\n+It.s extremely important to set correct heap size for JVM-based applications.  If available memory on node or memory allocated to container is not sufficient for specified JVM heap arguments (and additional off-heap memory), it is possible for WL process to run out of memory. In order to avoid this, you will need to make sure that configured heap sizes are not too big and that the pod is scheduled on the node with sufficient memory.\n+With the latest Java version, it.s possible to rely on the default JVM heap settings which are safe but quite conservative. If you configure the memory limit for a container but don.t configure heap sizes (-Xms and -Xmx), JVM will configure max heap size to 25% (1/4th) of container memory limit by default. The minimum heap size is configured to 1.56% (1/64th) of limit value.\n+\n+**Default heap sizes and resource request values for sample WebLogic Server Pods**:\n+The WLS samples configure default min and max heap size for WebLogic server java process to 256MB and 512MB respectively. This can be changed using USER_MEM_ARGS environment variable. \n+```\n+    resources:\n+      env:\n+      - name: \"USER_MEM_ARGS\"\n+        value: \"-Xms256m -Xmx512m -Djava.security.egd=file:/dev/./urandom\"\n+```        \n+\n+The default min and max heap size for node-manager process is 64MB and 100MB. This can be changed by using NODEMGR_MEM_ARGS environment variable. \n+\n+The default pod memory request in WLS samples is 768MB and default CPU request is 250m. The requests values can be changed in resources section.\n+```\n+      requests:\n+        cpu: \"250m\"\n+        memory: \"768Mi\"\n+```\n+\n+There.s no memory or CPU limit configured by default in samples and default QoS for WebLogic server pod is Burstable. If your use-case and workload requires higher QoS and priority, this can be achieved by setting memory and CPU limits. You.ll need to run tests and experiment with different memory/CPU limits to determine optimal limit values.\n+```\n+      limits:\n+        cpu: 2\n+        memory: \"2048Mi\"\n+```\n+\n+### Configure min/max heap size in percentages using \"-XX:MinRAMPercentage\" and \"-XX:MaxRAMPercentage\"\n+If you specify pod memory limit, it's recommended to configure heap size as a percentage of the total RAM (memory) specified in the pod memory limit. These parameters allow you to fine-tune the heap size. Please note . they set the percentage, not the fixed values. Thanks to it changing container memory settings will not break anything. \n+```\n+    resources:\n+      env:\n+      - name: JAVA_OPTIONS\n+        value: \"--XX:MinRAMPercentage=25.0 --XX:MaxRAMPercentage=50.0 -Dweblogic.StdoutDebugEnabled=false\"\n+```\n+When configuring memory limits, it.s important to make sure that the limit is sufficiently big to accommodate the configured heap (and off-heap) requirements, but it's not too big to waste memory resource. Since pod memory will never go above the limit, if JVM's memory usage (sum of heap and native memory) goes above the limit, JVM process will be killed due to out-of-memory error and WebLogic container will be restarted due to liveness probe failure.   Additionally there's also a node-manager process that.s running in same container and it has it's own heap and off-heap requirements. You can also fine tune the node manager heap size in percentages by setting \"-XX:MinRAMPercentage\" and \"-XX:MaxRAMPercentage\" using .NODEMGR_JAVA_OPTIONS. environment variable. \n+\n+### Using \"-Xms\" and \"-Xmx\" parameters when not configuring limits \n+In some cases, it.s difficult to come up with a hard limit for the container and you might only want to configure memory requests but not configure memory limits. In such scenarios, you can use traditional approach to set min/max heap size using .-Xms. and .-Xmx..\n+\n+### CPU requests and limits \n+It.s important that the containers running WebLogic applications have enough CPU resources, otherwise applications performance can suffer. You also don't want to set CPU requests and limit too high if your application don't need or use allocated CPU resources. Since CPU is a shared resource, if the amount of CPU that you reserve is more than required by your application, the CPU cycles will go unused and be wasted. If no CPU request and limit is configured, it can end up using all CPU resources available on node. This can starve other containers from using shareable CPU cycles. \n+\n+One other thing to keep in mind is that if pod CPU limit is not configured, it might lead to incorrect garbage collection (GC) strategy selection. WebLogic self-tuning work-manager uses pod CPU limit to configure the  number of threads in a default thread pool. If you don.t specify container CPU limit, the performance might be affected due to incorrect number of GC threads or wrong WebLogic server thread pool size. \n+\n+## Beware of setting resource limits too high\n+It.s important to keep in mind that if you set a value of CPU core count that.s larger than core count of the biggest node, then the pod will never be scheduled. Let.s say you have a pod that needs 4 cores but you have a kubernetes cluster that.s comprised of 2 core VMs. In this case, your pod will never be scheduled.  WebLogic applications are normally designed to take advantage of multiple cores and should be given CPU requests as such. CPUs are considered as a compressible resource. If your apps are hitting CPU limits, kubernetes will start to throttle your container. This means your CPU will be artificially restricted, giving your app potentially worse performance. However it won.t be terminated or evicted. \n+Just like CPU, if you put a memory request that.s larger than amount of memory on your nodes, the pod will never be scheduled.\n+## CPU Affinity and lock contention in k8s\n+We observed much higher lock contention in k8s env when running some workloads in kubernetes as compared to traditional env. The lock contention seem to be caused by the lack of CPU cache affinity and/or scheduling latency when the workload moves to different CPU cores.  \n+\n+In traditional (non-k8s) environment, often tests are run with CPU affinity achieved by binding WLS java process to particular CPU core(s) (using taskset command). This results in reduced lock contention and better performance. \n+\n+In k8s environment. when CPU manager policy is configured to be \"static\" and QOS is \"Guaranteed\" for WLS pods, we see reduced lock contention and better performance. The default CPU manager policy is \"none\" (default). Please refer to controlling CPU management policies for more details.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a23d465d277d44c2f5b22ee39ff66f06948acfa1"}, "originalPosition": 77}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0477ff166bc9e02dd33e555ab283d981f0eafeef", "author": {"user": {"login": "tbarnes-us", "name": "Tom Barnes"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0477ff166bc9e02dd33e555ab283d981f0eafeef", "committedDate": "2020-06-30T22:03:17Z", "message": "resource settings FAQ updates"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNDM5ODgx", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#pullrequestreview-440439881", "createdAt": "2020-06-30T22:54:41Z", "commit": {"oid": "0477ff166bc9e02dd33e555ab283d981f0eafeef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjo1NDo0MVrOGrRLzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjo1NDo0MVrOGrRLzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyMzUwMg==", "bodyText": "The phrasing, \"It's also possible for a rogue application...\" sounds scarier than I think we need. Customers understand that application and server usage of resources need to be controlled and limited. We might borrow phrases from the current WebLogic sizing guide.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r448023502", "createdAt": "2020-06-30T22:54:41Z", "author": {"login": "rjeberhard"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,162 @@\n+---\n+title: \"Pod Memory and CPU Resources\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: false\n+weight: 25\n+---\n+\n+### Contents\n+\n+ - [Introduction](#introduction)\n+ - [Setting resource requests and limits in a domain resource](#setting-resource-requests-and-limits-in-a-domain-resource)\n+ - [Determining pod Quality Of Service](#determining-pod-quality-of-service)\n+ - [Java heap size and memory resource considerations](#java-heap-size-and-memory-resource-considerations)\n+   - [Overview](#overview)\n+   - [Default heap sizes](#default-heap-sizes)\n+   - [Configuring heap size](#configuring-heap-size)\n+ - [CPU resource considerations](#cpu-resource-considerations)\n+ - [Operator sample heap and resource configuration](#operator-sample-heap-and-resource-configuration)\n+ - [Configuring CPU affinity](#configuring-cpu-affinity)\n+ - [Measuring JVM heap, pod CPU, and pod memory](#measuring-jvm-heap-pod-cpu-and-pod-memory)\n+ - [References](#references)\n+\n+### Introduction\n+\n+An operator creates a pod for each WebLogic Server instance and each pod will have a container. It's important that the container has enough resources in order for WebLogic to run efficiently.\n+\n+If a pod is scheduled on a node with limited resources, then it's possible for node to run out of memory or CPU resources, and for the pod's applications to stop working properly or have degraded performance. It's also possible for a rogue application to use all of a node's available memory and/or CPU, which makes other containers running on the same node unresponsive. The same problem can happen if an application has a memory leak.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0477ff166bc9e02dd33e555ab283d981f0eafeef"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNDQwNjMy", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#pullrequestreview-440440632", "createdAt": "2020-06-30T22:56:38Z", "commit": {"oid": "0477ff166bc9e02dd33e555ab283d981f0eafeef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjo1NjozOFrOGrROXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjo1NjozOFrOGrROXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyNDE1Nw==", "bodyText": "This is good. Let's also link to the standard Kubernetes doc. topics https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/ and https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource/.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r448024157", "createdAt": "2020-06-30T22:56:38Z", "author": {"login": "rjeberhard"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,162 @@\n+---\n+title: \"Pod Memory and CPU Resources\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: false\n+weight: 25\n+---\n+\n+### Contents\n+\n+ - [Introduction](#introduction)\n+ - [Setting resource requests and limits in a domain resource](#setting-resource-requests-and-limits-in-a-domain-resource)\n+ - [Determining pod Quality Of Service](#determining-pod-quality-of-service)\n+ - [Java heap size and memory resource considerations](#java-heap-size-and-memory-resource-considerations)\n+   - [Overview](#overview)\n+   - [Default heap sizes](#default-heap-sizes)\n+   - [Configuring heap size](#configuring-heap-size)\n+ - [CPU resource considerations](#cpu-resource-considerations)\n+ - [Operator sample heap and resource configuration](#operator-sample-heap-and-resource-configuration)\n+ - [Configuring CPU affinity](#configuring-cpu-affinity)\n+ - [Measuring JVM heap, pod CPU, and pod memory](#measuring-jvm-heap-pod-cpu-and-pod-memory)\n+ - [References](#references)\n+\n+### Introduction\n+\n+An operator creates a pod for each WebLogic Server instance and each pod will have a container. It's important that the container has enough resources in order for WebLogic to run efficiently.\n+\n+If a pod is scheduled on a node with limited resources, then it's possible for node to run out of memory or CPU resources, and for the pod's applications to stop working properly or have degraded performance. It's also possible for a rogue application to use all of a node's available memory and/or CPU, which makes other containers running on the same node unresponsive. The same problem can happen if an application has a memory leak.\n+\n+You can solve these problems by configuring resource requests and limits for your pods. A resource limit prevents a pod from using more than its share of a resource. Thus, it improves reliability, stability, and helps with hardware capacity planning. Additionally, resource requests and limits determine a pod's Quality of Service.\n+\n+### Setting resource requests and limits in a domain resource\n+\n+You can set Kubernetes memory and CPU requests and limits in a [domain resource]({{< relref \"/userguide/managing-domains/domain-resource\" >}}) using its `spec.serverPod.resources` stanza, and you can override the setting for individual WebLogic servers or clusters using the `serverPod.resources` element in `spec.adminServer`, `spec.clusters`, and/or `spec.managedServers`. For example: ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0477ff166bc9e02dd33e555ab283d981f0eafeef"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNDQxNTM1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#pullrequestreview-440441535", "createdAt": "2020-06-30T22:59:01Z", "commit": {"oid": "0477ff166bc9e02dd33e555ab283d981f0eafeef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjo1OTowMVrOGrRRPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMjo1OTowMVrOGrRRPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyNDg5NQ==", "bodyText": "Yes, we have serverPod.priorityClassName.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r448024895", "createdAt": "2020-06-30T22:59:01Z", "author": {"login": "rjeberhard"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,162 @@\n+---\n+title: \"Pod Memory and CPU Resources\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: false\n+weight: 25\n+---\n+\n+### Contents\n+\n+ - [Introduction](#introduction)\n+ - [Setting resource requests and limits in a domain resource](#setting-resource-requests-and-limits-in-a-domain-resource)\n+ - [Determining pod Quality Of Service](#determining-pod-quality-of-service)\n+ - [Java heap size and memory resource considerations](#java-heap-size-and-memory-resource-considerations)\n+   - [Overview](#overview)\n+   - [Default heap sizes](#default-heap-sizes)\n+   - [Configuring heap size](#configuring-heap-size)\n+ - [CPU resource considerations](#cpu-resource-considerations)\n+ - [Operator sample heap and resource configuration](#operator-sample-heap-and-resource-configuration)\n+ - [Configuring CPU affinity](#configuring-cpu-affinity)\n+ - [Measuring JVM heap, pod CPU, and pod memory](#measuring-jvm-heap-pod-cpu-and-pod-memory)\n+ - [References](#references)\n+\n+### Introduction\n+\n+An operator creates a pod for each WebLogic Server instance and each pod will have a container. It's important that the container has enough resources in order for WebLogic to run efficiently.\n+\n+If a pod is scheduled on a node with limited resources, then it's possible for node to run out of memory or CPU resources, and for the pod's applications to stop working properly or have degraded performance. It's also possible for a rogue application to use all of a node's available memory and/or CPU, which makes other containers running on the same node unresponsive. The same problem can happen if an application has a memory leak.\n+\n+You can solve these problems by configuring resource requests and limits for your pods. A resource limit prevents a pod from using more than its share of a resource. Thus, it improves reliability, stability, and helps with hardware capacity planning. Additionally, resource requests and limits determine a pod's Quality of Service.\n+\n+### Setting resource requests and limits in a domain resource\n+\n+You can set Kubernetes memory and CPU requests and limits in a [domain resource]({{< relref \"/userguide/managing-domains/domain-resource\" >}}) using its `spec.serverPod.resources` stanza, and you can override the setting for individual WebLogic servers or clusters using the `serverPod.resources` element in `spec.adminServer`, `spec.clusters`, and/or `spec.managedServers`. For example: \n+\n+```\n+  spec:\n+    serverPod:\n+      requests:\n+        cpu: \"250m\"\n+        memory: \"768Mi\"\n+      limits:\n+        cpu: \"2\"\n+        memory: \"2Gi\"\n+```\n+\n+Limits and requests for CPU resources are measured in cpu units. One cpu, in Kubernetes, is equivalent to 1 vCPU/Core for cloud providers and 1 hyperthread on bare-metal Intel processors. An `m` suffix in a CPU attribute indicates 'milli-CPU', so `250m` is 25% of a CPU. \n+\n+Memory can be expressed in various units, where one `Mi` is one IEC unit mega-byte (1024^2), and one `Gi` is one IEC unit giga-byte (1024^3).\n+\n+See also [Managing Resources for Containers](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/) in the Kubernetes documentation.\n+\n+### Determining pod Quality Of Service\n+\n+A pod's Quality of Service (QoS) is based on whether it's configured with resource requests and limits:\n+\n+- **Best Effort QoS** (lowest priority): If you don't configure requests and limits for a pod, then the pod is given a `best-effort` QoS. In cases where a node runs out of non-shareable resources, a Kubernetes `kubelet` default out-of-resource eviction policy evicts running pods with the `best-effort` QoS first.\n+\n+- **Burstable QoS** (medium priority): If you configure both resource requests and limits for a pod, and set the requests to be less than their respective limits, then the pod will be given a `burstable` QoS. Similarly, if you only configure resource requests (without limits) for a pod, then the pod QoS is also `burstable`. If a node runs out of non-shareable resources, the node's `kubelet` will evict `burstable` pods only when there are no more running `best-effort` pods.\n+\n+- **Guaranteed QoS** (highest priority): If you set a pod's requests and the limits to equal values, then the pod will have a `guaranteed` QoS. These settings indicates that your pod will consume a fixed amount of memory and CPU. With this configuration, if a node runs out of shareable resources, then a Kubernetes node's `kubelet` will evict `best-effort` and `burstable` QoS pods before terminating `guaranteed` QoS pods.\n+\n+{{% notice note %}} \n+For most use cases, Oracle recommends configuring WebLogic pods with memory and CPU requests and limits, and furthermore setting requests equal to their respective limits in order to ensure a `guaranteed` QoS.\n+{{% /notice %}}\n+\n+In newer version of Kubernetes, it is possible to fine tune scheduling and eviction policies using [Pod Priority Preemption](https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/). TBD Ryan - is it possible to change the priority class of a pod?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0477ff166bc9e02dd33e555ab283d981f0eafeef"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNDQ2MDE0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#pullrequestreview-440446014", "createdAt": "2020-06-30T23:10:51Z", "commit": {"oid": "0477ff166bc9e02dd33e555ab283d981f0eafeef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzoxMDo1MVrOGrRgKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzoxMDo1MVrOGrRgKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyODcxNA==", "bodyText": "I think the topic here is \"Importance of setting heap sizes\"", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r448028714", "createdAt": "2020-06-30T23:10:51Z", "author": {"login": "rjeberhard"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,162 @@\n+---\n+title: \"Pod Memory and CPU Resources\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: false\n+weight: 25\n+---\n+\n+### Contents\n+\n+ - [Introduction](#introduction)\n+ - [Setting resource requests and limits in a domain resource](#setting-resource-requests-and-limits-in-a-domain-resource)\n+ - [Determining pod Quality Of Service](#determining-pod-quality-of-service)\n+ - [Java heap size and memory resource considerations](#java-heap-size-and-memory-resource-considerations)\n+   - [Overview](#overview)\n+   - [Default heap sizes](#default-heap-sizes)\n+   - [Configuring heap size](#configuring-heap-size)\n+ - [CPU resource considerations](#cpu-resource-considerations)\n+ - [Operator sample heap and resource configuration](#operator-sample-heap-and-resource-configuration)\n+ - [Configuring CPU affinity](#configuring-cpu-affinity)\n+ - [Measuring JVM heap, pod CPU, and pod memory](#measuring-jvm-heap-pod-cpu-and-pod-memory)\n+ - [References](#references)\n+\n+### Introduction\n+\n+An operator creates a pod for each WebLogic Server instance and each pod will have a container. It's important that the container has enough resources in order for WebLogic to run efficiently.\n+\n+If a pod is scheduled on a node with limited resources, then it's possible for node to run out of memory or CPU resources, and for the pod's applications to stop working properly or have degraded performance. It's also possible for a rogue application to use all of a node's available memory and/or CPU, which makes other containers running on the same node unresponsive. The same problem can happen if an application has a memory leak.\n+\n+You can solve these problems by configuring resource requests and limits for your pods. A resource limit prevents a pod from using more than its share of a resource. Thus, it improves reliability, stability, and helps with hardware capacity planning. Additionally, resource requests and limits determine a pod's Quality of Service.\n+\n+### Setting resource requests and limits in a domain resource\n+\n+You can set Kubernetes memory and CPU requests and limits in a [domain resource]({{< relref \"/userguide/managing-domains/domain-resource\" >}}) using its `spec.serverPod.resources` stanza, and you can override the setting for individual WebLogic servers or clusters using the `serverPod.resources` element in `spec.adminServer`, `spec.clusters`, and/or `spec.managedServers`. For example: \n+\n+```\n+  spec:\n+    serverPod:\n+      requests:\n+        cpu: \"250m\"\n+        memory: \"768Mi\"\n+      limits:\n+        cpu: \"2\"\n+        memory: \"2Gi\"\n+```\n+\n+Limits and requests for CPU resources are measured in cpu units. One cpu, in Kubernetes, is equivalent to 1 vCPU/Core for cloud providers and 1 hyperthread on bare-metal Intel processors. An `m` suffix in a CPU attribute indicates 'milli-CPU', so `250m` is 25% of a CPU. \n+\n+Memory can be expressed in various units, where one `Mi` is one IEC unit mega-byte (1024^2), and one `Gi` is one IEC unit giga-byte (1024^3).\n+\n+See also [Managing Resources for Containers](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/) in the Kubernetes documentation.\n+\n+### Determining pod Quality Of Service\n+\n+A pod's Quality of Service (QoS) is based on whether it's configured with resource requests and limits:\n+\n+- **Best Effort QoS** (lowest priority): If you don't configure requests and limits for a pod, then the pod is given a `best-effort` QoS. In cases where a node runs out of non-shareable resources, a Kubernetes `kubelet` default out-of-resource eviction policy evicts running pods with the `best-effort` QoS first.\n+\n+- **Burstable QoS** (medium priority): If you configure both resource requests and limits for a pod, and set the requests to be less than their respective limits, then the pod will be given a `burstable` QoS. Similarly, if you only configure resource requests (without limits) for a pod, then the pod QoS is also `burstable`. If a node runs out of non-shareable resources, the node's `kubelet` will evict `burstable` pods only when there are no more running `best-effort` pods.\n+\n+- **Guaranteed QoS** (highest priority): If you set a pod's requests and the limits to equal values, then the pod will have a `guaranteed` QoS. These settings indicates that your pod will consume a fixed amount of memory and CPU. With this configuration, if a node runs out of shareable resources, then a Kubernetes node's `kubelet` will evict `best-effort` and `burstable` QoS pods before terminating `guaranteed` QoS pods.\n+\n+{{% notice note %}} \n+For most use cases, Oracle recommends configuring WebLogic pods with memory and CPU requests and limits, and furthermore setting requests equal to their respective limits in order to ensure a `guaranteed` QoS.\n+{{% /notice %}}\n+\n+In newer version of Kubernetes, it is possible to fine tune scheduling and eviction policies using [Pod Priority Preemption](https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/). TBD Ryan - is it possible to change the priority class of a pod?\n+\n+### Java heap size and memory resource considerations\n+\n+{{% notice note %}} \n+For most use cases, Oracle recommends configuring Java heap sizes for WebLogic pods instead of relying on defaults.\n+{{% /notice %}}\n+\n+#### Overview\n+\n+It's extremely important to set correct heap sizes, memory requests, and memory limits for WebLogic JVMs and Pods. \n+\n+A WebLogic JVM heap must be sufficiently sized to run its applications and services, but should not be sized too large so as not to waste memory resources.\n+\n+A pod memory limit must be sufficiently sized to accommodate the configured heap (and off-heap) requirements, but  not too big to waste memory resources. If a JVM's memory usage (sum of heap and native memory) exceeds its pod's limit, then the JVM process will be abruptly killed due to an out-of-memory error and the WebLogic container will consequently automatically restart due to a liveness probe failure.  \n+\n+{{% notice warning %}}\n+If resource requests and resource limits are set too high, then your pods may not be scheduled due to lack of node resources, will unnecessarily use up CPU shared resources that could be used by other pods, or may prevent other pods from running.\n+{{% /notice %}}\n+\n+#### Default heap sizes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0477ff166bc9e02dd33e555ab283d981f0eafeef"}, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNDQ3MTM3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#pullrequestreview-440447137", "createdAt": "2020-06-30T23:14:08Z", "commit": {"oid": "0477ff166bc9e02dd33e555ab283d981f0eafeef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzoxNDowOFrOGrRj8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzoxNDowOFrOGrRj8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAyOTY4Mg==", "bodyText": "Will readers understand \"off-heap\" requirements? I've heard this described as native memory.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r448029682", "createdAt": "2020-06-30T23:14:08Z", "author": {"login": "rjeberhard"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,162 @@\n+---\n+title: \"Pod Memory and CPU Resources\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: false\n+weight: 25\n+---\n+\n+### Contents\n+\n+ - [Introduction](#introduction)\n+ - [Setting resource requests and limits in a domain resource](#setting-resource-requests-and-limits-in-a-domain-resource)\n+ - [Determining pod Quality Of Service](#determining-pod-quality-of-service)\n+ - [Java heap size and memory resource considerations](#java-heap-size-and-memory-resource-considerations)\n+   - [Overview](#overview)\n+   - [Default heap sizes](#default-heap-sizes)\n+   - [Configuring heap size](#configuring-heap-size)\n+ - [CPU resource considerations](#cpu-resource-considerations)\n+ - [Operator sample heap and resource configuration](#operator-sample-heap-and-resource-configuration)\n+ - [Configuring CPU affinity](#configuring-cpu-affinity)\n+ - [Measuring JVM heap, pod CPU, and pod memory](#measuring-jvm-heap-pod-cpu-and-pod-memory)\n+ - [References](#references)\n+\n+### Introduction\n+\n+An operator creates a pod for each WebLogic Server instance and each pod will have a container. It's important that the container has enough resources in order for WebLogic to run efficiently.\n+\n+If a pod is scheduled on a node with limited resources, then it's possible for node to run out of memory or CPU resources, and for the pod's applications to stop working properly or have degraded performance. It's also possible for a rogue application to use all of a node's available memory and/or CPU, which makes other containers running on the same node unresponsive. The same problem can happen if an application has a memory leak.\n+\n+You can solve these problems by configuring resource requests and limits for your pods. A resource limit prevents a pod from using more than its share of a resource. Thus, it improves reliability, stability, and helps with hardware capacity planning. Additionally, resource requests and limits determine a pod's Quality of Service.\n+\n+### Setting resource requests and limits in a domain resource\n+\n+You can set Kubernetes memory and CPU requests and limits in a [domain resource]({{< relref \"/userguide/managing-domains/domain-resource\" >}}) using its `spec.serverPod.resources` stanza, and you can override the setting for individual WebLogic servers or clusters using the `serverPod.resources` element in `spec.adminServer`, `spec.clusters`, and/or `spec.managedServers`. For example: \n+\n+```\n+  spec:\n+    serverPod:\n+      requests:\n+        cpu: \"250m\"\n+        memory: \"768Mi\"\n+      limits:\n+        cpu: \"2\"\n+        memory: \"2Gi\"\n+```\n+\n+Limits and requests for CPU resources are measured in cpu units. One cpu, in Kubernetes, is equivalent to 1 vCPU/Core for cloud providers and 1 hyperthread on bare-metal Intel processors. An `m` suffix in a CPU attribute indicates 'milli-CPU', so `250m` is 25% of a CPU. \n+\n+Memory can be expressed in various units, where one `Mi` is one IEC unit mega-byte (1024^2), and one `Gi` is one IEC unit giga-byte (1024^3).\n+\n+See also [Managing Resources for Containers](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/) in the Kubernetes documentation.\n+\n+### Determining pod Quality Of Service\n+\n+A pod's Quality of Service (QoS) is based on whether it's configured with resource requests and limits:\n+\n+- **Best Effort QoS** (lowest priority): If you don't configure requests and limits for a pod, then the pod is given a `best-effort` QoS. In cases where a node runs out of non-shareable resources, a Kubernetes `kubelet` default out-of-resource eviction policy evicts running pods with the `best-effort` QoS first.\n+\n+- **Burstable QoS** (medium priority): If you configure both resource requests and limits for a pod, and set the requests to be less than their respective limits, then the pod will be given a `burstable` QoS. Similarly, if you only configure resource requests (without limits) for a pod, then the pod QoS is also `burstable`. If a node runs out of non-shareable resources, the node's `kubelet` will evict `burstable` pods only when there are no more running `best-effort` pods.\n+\n+- **Guaranteed QoS** (highest priority): If you set a pod's requests and the limits to equal values, then the pod will have a `guaranteed` QoS. These settings indicates that your pod will consume a fixed amount of memory and CPU. With this configuration, if a node runs out of shareable resources, then a Kubernetes node's `kubelet` will evict `best-effort` and `burstable` QoS pods before terminating `guaranteed` QoS pods.\n+\n+{{% notice note %}} \n+For most use cases, Oracle recommends configuring WebLogic pods with memory and CPU requests and limits, and furthermore setting requests equal to their respective limits in order to ensure a `guaranteed` QoS.\n+{{% /notice %}}\n+\n+In newer version of Kubernetes, it is possible to fine tune scheduling and eviction policies using [Pod Priority Preemption](https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/). TBD Ryan - is it possible to change the priority class of a pod?\n+\n+### Java heap size and memory resource considerations\n+\n+{{% notice note %}} \n+For most use cases, Oracle recommends configuring Java heap sizes for WebLogic pods instead of relying on defaults.\n+{{% /notice %}}\n+\n+#### Overview\n+\n+It's extremely important to set correct heap sizes, memory requests, and memory limits for WebLogic JVMs and Pods. \n+\n+A WebLogic JVM heap must be sufficiently sized to run its applications and services, but should not be sized too large so as not to waste memory resources.\n+\n+A pod memory limit must be sufficiently sized to accommodate the configured heap (and off-heap) requirements, but  not too big to waste memory resources. If a JVM's memory usage (sum of heap and native memory) exceeds its pod's limit, then the JVM process will be abruptly killed due to an out-of-memory error and the WebLogic container will consequently automatically restart due to a liveness probe failure.  \n+\n+{{% notice warning %}}\n+If resource requests and resource limits are set too high, then your pods may not be scheduled due to lack of node resources, will unnecessarily use up CPU shared resources that could be used by other pods, or may prevent other pods from running.\n+{{% /notice %}}\n+\n+#### Default heap sizes\n+\n+With the latest Java versions, Java 8 update 191 and onwards or Java 11, then if you don't configure a heap size (no '-Xms' or '-Xms') the default heap size is dynamically determined:\n+- If you configure the memory limit for a container, then the JVM default maximum heap size will be 25% (1/4th) of container memory limit and the default minimum heap size will be 1.56% (1/64th) of the limit value. \n+\n+  The default JVM heap settings in this case are often too conservative because the WebLogic JVM is the only major process running in the container.\n+\n+- If no memory limit is configured, then the JVM default maximum heap size will be  25% (1/4th) of the its node's machine RAM and the default minimum heap size will be 1.56% (1/64th) of the RAM.\n+\n+  The default JVM heap settings in this case can have undesirable behavior, including using unnecessary amounts of memory to the point where it might affect other pods that run on the same node.\n+\n+#### Configuring heap size\n+\n+If you specify pod memory limits, Oracle recommends configuring WebLogic Server heap sizes as a percentage. The JVM will interpret the percentage as a fraction of the limit. This is done using the JVM `-XX:MinRAMPercentage` and `-XX:MaxRAMPercentage` options in the `USER_MEM_ARGS` [domain resource environment variable]({{< relref \"/userguide/managing-domains/domain-resource#jvm-memory-and-java-option-environment-variables\" >}}).  For example:\n+\n+```\n+  spec:\n+    resources:\n+      env:\n+      - name: USER_MEM_ARGS\n+        value: \"--XX:MinRAMPercentage=25.0 --XX:MaxRAMPercentage=50.0 -Djava.security.egd=file:/dev/./urandom\"\n+```\n+\n+Additionally there's also a node-manager process that's running in the same container as the WebLogic Server which has its own heap and off-heap requirements. Its heap is tuned by using `-Xms` and `-Xmx` in the `NODEMGR_MEM_ARGS` environment variable. Oracle recommends setting the node manager heap memory to fixed sizes, instead of percentages, where [the default tuning]({{< relref \"/userguide/managing-domains/domain-resource#jvm-memory-and-java-option-environment-variables\" >}}) is usually sufficient.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0477ff166bc9e02dd33e555ab283d981f0eafeef"}, "originalPosition": 109}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNDQ5MjEx", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#pullrequestreview-440449211", "createdAt": "2020-06-30T23:19:55Z", "commit": {"oid": "0477ff166bc9e02dd33e555ab283d981f0eafeef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzoxOTo1NlrOGrRq-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzoxOTo1NlrOGrRq-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzMTQ4Mg==", "bodyText": "Why is it only \"usually\" recommended?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r448031482", "createdAt": "2020-06-30T23:19:56Z", "author": {"login": "rjeberhard"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,162 @@\n+---\n+title: \"Pod Memory and CPU Resources\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: false\n+weight: 25\n+---\n+\n+### Contents\n+\n+ - [Introduction](#introduction)\n+ - [Setting resource requests and limits in a domain resource](#setting-resource-requests-and-limits-in-a-domain-resource)\n+ - [Determining pod Quality Of Service](#determining-pod-quality-of-service)\n+ - [Java heap size and memory resource considerations](#java-heap-size-and-memory-resource-considerations)\n+   - [Overview](#overview)\n+   - [Default heap sizes](#default-heap-sizes)\n+   - [Configuring heap size](#configuring-heap-size)\n+ - [CPU resource considerations](#cpu-resource-considerations)\n+ - [Operator sample heap and resource configuration](#operator-sample-heap-and-resource-configuration)\n+ - [Configuring CPU affinity](#configuring-cpu-affinity)\n+ - [Measuring JVM heap, pod CPU, and pod memory](#measuring-jvm-heap-pod-cpu-and-pod-memory)\n+ - [References](#references)\n+\n+### Introduction\n+\n+An operator creates a pod for each WebLogic Server instance and each pod will have a container. It's important that the container has enough resources in order for WebLogic to run efficiently.\n+\n+If a pod is scheduled on a node with limited resources, then it's possible for node to run out of memory or CPU resources, and for the pod's applications to stop working properly or have degraded performance. It's also possible for a rogue application to use all of a node's available memory and/or CPU, which makes other containers running on the same node unresponsive. The same problem can happen if an application has a memory leak.\n+\n+You can solve these problems by configuring resource requests and limits for your pods. A resource limit prevents a pod from using more than its share of a resource. Thus, it improves reliability, stability, and helps with hardware capacity planning. Additionally, resource requests and limits determine a pod's Quality of Service.\n+\n+### Setting resource requests and limits in a domain resource\n+\n+You can set Kubernetes memory and CPU requests and limits in a [domain resource]({{< relref \"/userguide/managing-domains/domain-resource\" >}}) using its `spec.serverPod.resources` stanza, and you can override the setting for individual WebLogic servers or clusters using the `serverPod.resources` element in `spec.adminServer`, `spec.clusters`, and/or `spec.managedServers`. For example: \n+\n+```\n+  spec:\n+    serverPod:\n+      requests:\n+        cpu: \"250m\"\n+        memory: \"768Mi\"\n+      limits:\n+        cpu: \"2\"\n+        memory: \"2Gi\"\n+```\n+\n+Limits and requests for CPU resources are measured in cpu units. One cpu, in Kubernetes, is equivalent to 1 vCPU/Core for cloud providers and 1 hyperthread on bare-metal Intel processors. An `m` suffix in a CPU attribute indicates 'milli-CPU', so `250m` is 25% of a CPU. \n+\n+Memory can be expressed in various units, where one `Mi` is one IEC unit mega-byte (1024^2), and one `Gi` is one IEC unit giga-byte (1024^3).\n+\n+See also [Managing Resources for Containers](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/) in the Kubernetes documentation.\n+\n+### Determining pod Quality Of Service\n+\n+A pod's Quality of Service (QoS) is based on whether it's configured with resource requests and limits:\n+\n+- **Best Effort QoS** (lowest priority): If you don't configure requests and limits for a pod, then the pod is given a `best-effort` QoS. In cases where a node runs out of non-shareable resources, a Kubernetes `kubelet` default out-of-resource eviction policy evicts running pods with the `best-effort` QoS first.\n+\n+- **Burstable QoS** (medium priority): If you configure both resource requests and limits for a pod, and set the requests to be less than their respective limits, then the pod will be given a `burstable` QoS. Similarly, if you only configure resource requests (without limits) for a pod, then the pod QoS is also `burstable`. If a node runs out of non-shareable resources, the node's `kubelet` will evict `burstable` pods only when there are no more running `best-effort` pods.\n+\n+- **Guaranteed QoS** (highest priority): If you set a pod's requests and the limits to equal values, then the pod will have a `guaranteed` QoS. These settings indicates that your pod will consume a fixed amount of memory and CPU. With this configuration, if a node runs out of shareable resources, then a Kubernetes node's `kubelet` will evict `best-effort` and `burstable` QoS pods before terminating `guaranteed` QoS pods.\n+\n+{{% notice note %}} \n+For most use cases, Oracle recommends configuring WebLogic pods with memory and CPU requests and limits, and furthermore setting requests equal to their respective limits in order to ensure a `guaranteed` QoS.\n+{{% /notice %}}\n+\n+In newer version of Kubernetes, it is possible to fine tune scheduling and eviction policies using [Pod Priority Preemption](https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/). TBD Ryan - is it possible to change the priority class of a pod?\n+\n+### Java heap size and memory resource considerations\n+\n+{{% notice note %}} \n+For most use cases, Oracle recommends configuring Java heap sizes for WebLogic pods instead of relying on defaults.\n+{{% /notice %}}\n+\n+#### Overview\n+\n+It's extremely important to set correct heap sizes, memory requests, and memory limits for WebLogic JVMs and Pods. \n+\n+A WebLogic JVM heap must be sufficiently sized to run its applications and services, but should not be sized too large so as not to waste memory resources.\n+\n+A pod memory limit must be sufficiently sized to accommodate the configured heap (and off-heap) requirements, but  not too big to waste memory resources. If a JVM's memory usage (sum of heap and native memory) exceeds its pod's limit, then the JVM process will be abruptly killed due to an out-of-memory error and the WebLogic container will consequently automatically restart due to a liveness probe failure.  \n+\n+{{% notice warning %}}\n+If resource requests and resource limits are set too high, then your pods may not be scheduled due to lack of node resources, will unnecessarily use up CPU shared resources that could be used by other pods, or may prevent other pods from running.\n+{{% /notice %}}\n+\n+#### Default heap sizes\n+\n+With the latest Java versions, Java 8 update 191 and onwards or Java 11, then if you don't configure a heap size (no '-Xms' or '-Xms') the default heap size is dynamically determined:\n+- If you configure the memory limit for a container, then the JVM default maximum heap size will be 25% (1/4th) of container memory limit and the default minimum heap size will be 1.56% (1/64th) of the limit value. \n+\n+  The default JVM heap settings in this case are often too conservative because the WebLogic JVM is the only major process running in the container.\n+\n+- If no memory limit is configured, then the JVM default maximum heap size will be  25% (1/4th) of the its node's machine RAM and the default minimum heap size will be 1.56% (1/64th) of the RAM.\n+\n+  The default JVM heap settings in this case can have undesirable behavior, including using unnecessary amounts of memory to the point where it might affect other pods that run on the same node.\n+\n+#### Configuring heap size\n+\n+If you specify pod memory limits, Oracle recommends configuring WebLogic Server heap sizes as a percentage. The JVM will interpret the percentage as a fraction of the limit. This is done using the JVM `-XX:MinRAMPercentage` and `-XX:MaxRAMPercentage` options in the `USER_MEM_ARGS` [domain resource environment variable]({{< relref \"/userguide/managing-domains/domain-resource#jvm-memory-and-java-option-environment-variables\" >}}).  For example:\n+\n+```\n+  spec:\n+    resources:\n+      env:\n+      - name: USER_MEM_ARGS\n+        value: \"--XX:MinRAMPercentage=25.0 --XX:MaxRAMPercentage=50.0 -Djava.security.egd=file:/dev/./urandom\"\n+```\n+\n+Additionally there's also a node-manager process that's running in the same container as the WebLogic Server which has its own heap and off-heap requirements. Its heap is tuned by using `-Xms` and `-Xmx` in the `NODEMGR_MEM_ARGS` environment variable. Oracle recommends setting the node manager heap memory to fixed sizes, instead of percentages, where [the default tuning]({{< relref \"/userguide/managing-domains/domain-resource#jvm-memory-and-java-option-environment-variables\" >}}) is usually sufficient.\n+\n+{{% notice warning %}}\n+If you set `USER_MEM_ARGS` or `NODEMGR_MEM_ARGS` in your domain resource, then it is usually recommended to include `-Djava.security.egd=file:/dev/./urandom` in order to speedup boot times on systems with low entropy. This setting is included in the respective defaults for these two environment variables.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0477ff166bc9e02dd33e555ab283d981f0eafeef"}, "originalPosition": 112}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNDQ5Nzcw", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#pullrequestreview-440449770", "createdAt": "2020-06-30T23:21:32Z", "commit": {"oid": "0477ff166bc9e02dd33e555ab283d981f0eafeef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzoyMTozMlrOGrRs1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzoyMTozMlrOGrRs1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzMTk1Nw==", "bodyText": "It would be more helpful to show an example of the error when a Pod is never scheduled (it will be stuck in \"Pending\").", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r448031957", "createdAt": "2020-06-30T23:21:32Z", "author": {"login": "rjeberhard"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,162 @@\n+---\n+title: \"Pod Memory and CPU Resources\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: false\n+weight: 25\n+---\n+\n+### Contents\n+\n+ - [Introduction](#introduction)\n+ - [Setting resource requests and limits in a domain resource](#setting-resource-requests-and-limits-in-a-domain-resource)\n+ - [Determining pod Quality Of Service](#determining-pod-quality-of-service)\n+ - [Java heap size and memory resource considerations](#java-heap-size-and-memory-resource-considerations)\n+   - [Overview](#overview)\n+   - [Default heap sizes](#default-heap-sizes)\n+   - [Configuring heap size](#configuring-heap-size)\n+ - [CPU resource considerations](#cpu-resource-considerations)\n+ - [Operator sample heap and resource configuration](#operator-sample-heap-and-resource-configuration)\n+ - [Configuring CPU affinity](#configuring-cpu-affinity)\n+ - [Measuring JVM heap, pod CPU, and pod memory](#measuring-jvm-heap-pod-cpu-and-pod-memory)\n+ - [References](#references)\n+\n+### Introduction\n+\n+An operator creates a pod for each WebLogic Server instance and each pod will have a container. It's important that the container has enough resources in order for WebLogic to run efficiently.\n+\n+If a pod is scheduled on a node with limited resources, then it's possible for node to run out of memory or CPU resources, and for the pod's applications to stop working properly or have degraded performance. It's also possible for a rogue application to use all of a node's available memory and/or CPU, which makes other containers running on the same node unresponsive. The same problem can happen if an application has a memory leak.\n+\n+You can solve these problems by configuring resource requests and limits for your pods. A resource limit prevents a pod from using more than its share of a resource. Thus, it improves reliability, stability, and helps with hardware capacity planning. Additionally, resource requests and limits determine a pod's Quality of Service.\n+\n+### Setting resource requests and limits in a domain resource\n+\n+You can set Kubernetes memory and CPU requests and limits in a [domain resource]({{< relref \"/userguide/managing-domains/domain-resource\" >}}) using its `spec.serverPod.resources` stanza, and you can override the setting for individual WebLogic servers or clusters using the `serverPod.resources` element in `spec.adminServer`, `spec.clusters`, and/or `spec.managedServers`. For example: \n+\n+```\n+  spec:\n+    serverPod:\n+      requests:\n+        cpu: \"250m\"\n+        memory: \"768Mi\"\n+      limits:\n+        cpu: \"2\"\n+        memory: \"2Gi\"\n+```\n+\n+Limits and requests for CPU resources are measured in cpu units. One cpu, in Kubernetes, is equivalent to 1 vCPU/Core for cloud providers and 1 hyperthread on bare-metal Intel processors. An `m` suffix in a CPU attribute indicates 'milli-CPU', so `250m` is 25% of a CPU. \n+\n+Memory can be expressed in various units, where one `Mi` is one IEC unit mega-byte (1024^2), and one `Gi` is one IEC unit giga-byte (1024^3).\n+\n+See also [Managing Resources for Containers](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/) in the Kubernetes documentation.\n+\n+### Determining pod Quality Of Service\n+\n+A pod's Quality of Service (QoS) is based on whether it's configured with resource requests and limits:\n+\n+- **Best Effort QoS** (lowest priority): If you don't configure requests and limits for a pod, then the pod is given a `best-effort` QoS. In cases where a node runs out of non-shareable resources, a Kubernetes `kubelet` default out-of-resource eviction policy evicts running pods with the `best-effort` QoS first.\n+\n+- **Burstable QoS** (medium priority): If you configure both resource requests and limits for a pod, and set the requests to be less than their respective limits, then the pod will be given a `burstable` QoS. Similarly, if you only configure resource requests (without limits) for a pod, then the pod QoS is also `burstable`. If a node runs out of non-shareable resources, the node's `kubelet` will evict `burstable` pods only when there are no more running `best-effort` pods.\n+\n+- **Guaranteed QoS** (highest priority): If you set a pod's requests and the limits to equal values, then the pod will have a `guaranteed` QoS. These settings indicates that your pod will consume a fixed amount of memory and CPU. With this configuration, if a node runs out of shareable resources, then a Kubernetes node's `kubelet` will evict `best-effort` and `burstable` QoS pods before terminating `guaranteed` QoS pods.\n+\n+{{% notice note %}} \n+For most use cases, Oracle recommends configuring WebLogic pods with memory and CPU requests and limits, and furthermore setting requests equal to their respective limits in order to ensure a `guaranteed` QoS.\n+{{% /notice %}}\n+\n+In newer version of Kubernetes, it is possible to fine tune scheduling and eviction policies using [Pod Priority Preemption](https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/). TBD Ryan - is it possible to change the priority class of a pod?\n+\n+### Java heap size and memory resource considerations\n+\n+{{% notice note %}} \n+For most use cases, Oracle recommends configuring Java heap sizes for WebLogic pods instead of relying on defaults.\n+{{% /notice %}}\n+\n+#### Overview\n+\n+It's extremely important to set correct heap sizes, memory requests, and memory limits for WebLogic JVMs and Pods. \n+\n+A WebLogic JVM heap must be sufficiently sized to run its applications and services, but should not be sized too large so as not to waste memory resources.\n+\n+A pod memory limit must be sufficiently sized to accommodate the configured heap (and off-heap) requirements, but  not too big to waste memory resources. If a JVM's memory usage (sum of heap and native memory) exceeds its pod's limit, then the JVM process will be abruptly killed due to an out-of-memory error and the WebLogic container will consequently automatically restart due to a liveness probe failure.  \n+\n+{{% notice warning %}}\n+If resource requests and resource limits are set too high, then your pods may not be scheduled due to lack of node resources, will unnecessarily use up CPU shared resources that could be used by other pods, or may prevent other pods from running.\n+{{% /notice %}}\n+\n+#### Default heap sizes\n+\n+With the latest Java versions, Java 8 update 191 and onwards or Java 11, then if you don't configure a heap size (no '-Xms' or '-Xms') the default heap size is dynamically determined:\n+- If you configure the memory limit for a container, then the JVM default maximum heap size will be 25% (1/4th) of container memory limit and the default minimum heap size will be 1.56% (1/64th) of the limit value. \n+\n+  The default JVM heap settings in this case are often too conservative because the WebLogic JVM is the only major process running in the container.\n+\n+- If no memory limit is configured, then the JVM default maximum heap size will be  25% (1/4th) of the its node's machine RAM and the default minimum heap size will be 1.56% (1/64th) of the RAM.\n+\n+  The default JVM heap settings in this case can have undesirable behavior, including using unnecessary amounts of memory to the point where it might affect other pods that run on the same node.\n+\n+#### Configuring heap size\n+\n+If you specify pod memory limits, Oracle recommends configuring WebLogic Server heap sizes as a percentage. The JVM will interpret the percentage as a fraction of the limit. This is done using the JVM `-XX:MinRAMPercentage` and `-XX:MaxRAMPercentage` options in the `USER_MEM_ARGS` [domain resource environment variable]({{< relref \"/userguide/managing-domains/domain-resource#jvm-memory-and-java-option-environment-variables\" >}}).  For example:\n+\n+```\n+  spec:\n+    resources:\n+      env:\n+      - name: USER_MEM_ARGS\n+        value: \"--XX:MinRAMPercentage=25.0 --XX:MaxRAMPercentage=50.0 -Djava.security.egd=file:/dev/./urandom\"\n+```\n+\n+Additionally there's also a node-manager process that's running in the same container as the WebLogic Server which has its own heap and off-heap requirements. Its heap is tuned by using `-Xms` and `-Xmx` in the `NODEMGR_MEM_ARGS` environment variable. Oracle recommends setting the node manager heap memory to fixed sizes, instead of percentages, where [the default tuning]({{< relref \"/userguide/managing-domains/domain-resource#jvm-memory-and-java-option-environment-variables\" >}}) is usually sufficient.\n+\n+{{% notice warning %}}\n+If you set `USER_MEM_ARGS` or `NODEMGR_MEM_ARGS` in your domain resource, then it is usually recommended to include `-Djava.security.egd=file:/dev/./urandom` in order to speedup boot times on systems with low entropy. This setting is included in the respective defaults for these two environment variables.\n+q\n+{{% /notice %}}\n+\n+In some cases, you might only want to configure memory resource requests but not configure memory resource limits. In such scenarios, you can use the traditional fixed heap size settings (`-Xms` and `-Xmx`) in your WebLogic Server `USER_MEM_ARGS` instead of the percentage settings (`-XX:MinRAMPercentage` and `-XX:MaxRAMPercentage`).\n+\n+### CPU resource considerations\n+\n+It's important to set both a CPU request and a limit for WebLogic Server pods. This ensures that all WebLogic server pods have enough CPU resources, and, as discussed earlier, if the request and limit are set to the same value, then they get a `guaranteed` QoS. A `guaranteed` QoS ensures the pods are handled with a higher priority during scheduling and so are the least likely to be evicted.\n+\n+If a CPU request and limit are _not_ configured for a WebLogic Server pod:\n+- The pod can end up using all CPU resources available on its node and starve other containers from using shareable CPU cycles. \n+\n+- The WebLogic server JVM may choose an unsuitable garbage collection (GC) strategy.\n+\n+- A WebLogic Server self-tuning work-manager may incorrectly optimize the number of threads it allocates for the default thread pool. \n+\n+It's also important to keep in mind that if you set a value of CPU core count that's larger than core count of your biggest node, then the pod will never be scheduled. Let's say you have a pod that needs 4 cores but you have a kubernetes cluster that's comprised of 2 core VMs. In this case, your pod will never be scheduled.  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0477ff166bc9e02dd33e555ab283d981f0eafeef"}, "originalPosition": 129}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNDUwMTEz", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#pullrequestreview-440450113", "createdAt": "2020-06-30T23:22:31Z", "commit": {"oid": "0477ff166bc9e02dd33e555ab283d981f0eafeef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzoyMjozMVrOGrRt9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzoyMjozMVrOGrRt9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzMjI0Ng==", "bodyText": "This is a good idea... You can also link to OKE monitoring.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r448032246", "createdAt": "2020-06-30T23:22:31Z", "author": {"login": "rjeberhard"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,162 @@\n+---\n+title: \"Pod Memory and CPU Resources\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: false\n+weight: 25\n+---\n+\n+### Contents\n+\n+ - [Introduction](#introduction)\n+ - [Setting resource requests and limits in a domain resource](#setting-resource-requests-and-limits-in-a-domain-resource)\n+ - [Determining pod Quality Of Service](#determining-pod-quality-of-service)\n+ - [Java heap size and memory resource considerations](#java-heap-size-and-memory-resource-considerations)\n+   - [Overview](#overview)\n+   - [Default heap sizes](#default-heap-sizes)\n+   - [Configuring heap size](#configuring-heap-size)\n+ - [CPU resource considerations](#cpu-resource-considerations)\n+ - [Operator sample heap and resource configuration](#operator-sample-heap-and-resource-configuration)\n+ - [Configuring CPU affinity](#configuring-cpu-affinity)\n+ - [Measuring JVM heap, pod CPU, and pod memory](#measuring-jvm-heap-pod-cpu-and-pod-memory)\n+ - [References](#references)\n+\n+### Introduction\n+\n+An operator creates a pod for each WebLogic Server instance and each pod will have a container. It's important that the container has enough resources in order for WebLogic to run efficiently.\n+\n+If a pod is scheduled on a node with limited resources, then it's possible for node to run out of memory or CPU resources, and for the pod's applications to stop working properly or have degraded performance. It's also possible for a rogue application to use all of a node's available memory and/or CPU, which makes other containers running on the same node unresponsive. The same problem can happen if an application has a memory leak.\n+\n+You can solve these problems by configuring resource requests and limits for your pods. A resource limit prevents a pod from using more than its share of a resource. Thus, it improves reliability, stability, and helps with hardware capacity planning. Additionally, resource requests and limits determine a pod's Quality of Service.\n+\n+### Setting resource requests and limits in a domain resource\n+\n+You can set Kubernetes memory and CPU requests and limits in a [domain resource]({{< relref \"/userguide/managing-domains/domain-resource\" >}}) using its `spec.serverPod.resources` stanza, and you can override the setting for individual WebLogic servers or clusters using the `serverPod.resources` element in `spec.adminServer`, `spec.clusters`, and/or `spec.managedServers`. For example: \n+\n+```\n+  spec:\n+    serverPod:\n+      requests:\n+        cpu: \"250m\"\n+        memory: \"768Mi\"\n+      limits:\n+        cpu: \"2\"\n+        memory: \"2Gi\"\n+```\n+\n+Limits and requests for CPU resources are measured in cpu units. One cpu, in Kubernetes, is equivalent to 1 vCPU/Core for cloud providers and 1 hyperthread on bare-metal Intel processors. An `m` suffix in a CPU attribute indicates 'milli-CPU', so `250m` is 25% of a CPU. \n+\n+Memory can be expressed in various units, where one `Mi` is one IEC unit mega-byte (1024^2), and one `Gi` is one IEC unit giga-byte (1024^3).\n+\n+See also [Managing Resources for Containers](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/) in the Kubernetes documentation.\n+\n+### Determining pod Quality Of Service\n+\n+A pod's Quality of Service (QoS) is based on whether it's configured with resource requests and limits:\n+\n+- **Best Effort QoS** (lowest priority): If you don't configure requests and limits for a pod, then the pod is given a `best-effort` QoS. In cases where a node runs out of non-shareable resources, a Kubernetes `kubelet` default out-of-resource eviction policy evicts running pods with the `best-effort` QoS first.\n+\n+- **Burstable QoS** (medium priority): If you configure both resource requests and limits for a pod, and set the requests to be less than their respective limits, then the pod will be given a `burstable` QoS. Similarly, if you only configure resource requests (without limits) for a pod, then the pod QoS is also `burstable`. If a node runs out of non-shareable resources, the node's `kubelet` will evict `burstable` pods only when there are no more running `best-effort` pods.\n+\n+- **Guaranteed QoS** (highest priority): If you set a pod's requests and the limits to equal values, then the pod will have a `guaranteed` QoS. These settings indicates that your pod will consume a fixed amount of memory and CPU. With this configuration, if a node runs out of shareable resources, then a Kubernetes node's `kubelet` will evict `best-effort` and `burstable` QoS pods before terminating `guaranteed` QoS pods.\n+\n+{{% notice note %}} \n+For most use cases, Oracle recommends configuring WebLogic pods with memory and CPU requests and limits, and furthermore setting requests equal to their respective limits in order to ensure a `guaranteed` QoS.\n+{{% /notice %}}\n+\n+In newer version of Kubernetes, it is possible to fine tune scheduling and eviction policies using [Pod Priority Preemption](https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/). TBD Ryan - is it possible to change the priority class of a pod?\n+\n+### Java heap size and memory resource considerations\n+\n+{{% notice note %}} \n+For most use cases, Oracle recommends configuring Java heap sizes for WebLogic pods instead of relying on defaults.\n+{{% /notice %}}\n+\n+#### Overview\n+\n+It's extremely important to set correct heap sizes, memory requests, and memory limits for WebLogic JVMs and Pods. \n+\n+A WebLogic JVM heap must be sufficiently sized to run its applications and services, but should not be sized too large so as not to waste memory resources.\n+\n+A pod memory limit must be sufficiently sized to accommodate the configured heap (and off-heap) requirements, but  not too big to waste memory resources. If a JVM's memory usage (sum of heap and native memory) exceeds its pod's limit, then the JVM process will be abruptly killed due to an out-of-memory error and the WebLogic container will consequently automatically restart due to a liveness probe failure.  \n+\n+{{% notice warning %}}\n+If resource requests and resource limits are set too high, then your pods may not be scheduled due to lack of node resources, will unnecessarily use up CPU shared resources that could be used by other pods, or may prevent other pods from running.\n+{{% /notice %}}\n+\n+#### Default heap sizes\n+\n+With the latest Java versions, Java 8 update 191 and onwards or Java 11, then if you don't configure a heap size (no '-Xms' or '-Xms') the default heap size is dynamically determined:\n+- If you configure the memory limit for a container, then the JVM default maximum heap size will be 25% (1/4th) of container memory limit and the default minimum heap size will be 1.56% (1/64th) of the limit value. \n+\n+  The default JVM heap settings in this case are often too conservative because the WebLogic JVM is the only major process running in the container.\n+\n+- If no memory limit is configured, then the JVM default maximum heap size will be  25% (1/4th) of the its node's machine RAM and the default minimum heap size will be 1.56% (1/64th) of the RAM.\n+\n+  The default JVM heap settings in this case can have undesirable behavior, including using unnecessary amounts of memory to the point where it might affect other pods that run on the same node.\n+\n+#### Configuring heap size\n+\n+If you specify pod memory limits, Oracle recommends configuring WebLogic Server heap sizes as a percentage. The JVM will interpret the percentage as a fraction of the limit. This is done using the JVM `-XX:MinRAMPercentage` and `-XX:MaxRAMPercentage` options in the `USER_MEM_ARGS` [domain resource environment variable]({{< relref \"/userguide/managing-domains/domain-resource#jvm-memory-and-java-option-environment-variables\" >}}).  For example:\n+\n+```\n+  spec:\n+    resources:\n+      env:\n+      - name: USER_MEM_ARGS\n+        value: \"--XX:MinRAMPercentage=25.0 --XX:MaxRAMPercentage=50.0 -Djava.security.egd=file:/dev/./urandom\"\n+```\n+\n+Additionally there's also a node-manager process that's running in the same container as the WebLogic Server which has its own heap and off-heap requirements. Its heap is tuned by using `-Xms` and `-Xmx` in the `NODEMGR_MEM_ARGS` environment variable. Oracle recommends setting the node manager heap memory to fixed sizes, instead of percentages, where [the default tuning]({{< relref \"/userguide/managing-domains/domain-resource#jvm-memory-and-java-option-environment-variables\" >}}) is usually sufficient.\n+\n+{{% notice warning %}}\n+If you set `USER_MEM_ARGS` or `NODEMGR_MEM_ARGS` in your domain resource, then it is usually recommended to include `-Djava.security.egd=file:/dev/./urandom` in order to speedup boot times on systems with low entropy. This setting is included in the respective defaults for these two environment variables.\n+q\n+{{% /notice %}}\n+\n+In some cases, you might only want to configure memory resource requests but not configure memory resource limits. In such scenarios, you can use the traditional fixed heap size settings (`-Xms` and `-Xmx`) in your WebLogic Server `USER_MEM_ARGS` instead of the percentage settings (`-XX:MinRAMPercentage` and `-XX:MaxRAMPercentage`).\n+\n+### CPU resource considerations\n+\n+It's important to set both a CPU request and a limit for WebLogic Server pods. This ensures that all WebLogic server pods have enough CPU resources, and, as discussed earlier, if the request and limit are set to the same value, then they get a `guaranteed` QoS. A `guaranteed` QoS ensures the pods are handled with a higher priority during scheduling and so are the least likely to be evicted.\n+\n+If a CPU request and limit are _not_ configured for a WebLogic Server pod:\n+- The pod can end up using all CPU resources available on its node and starve other containers from using shareable CPU cycles. \n+\n+- The WebLogic server JVM may choose an unsuitable garbage collection (GC) strategy.\n+\n+- A WebLogic Server self-tuning work-manager may incorrectly optimize the number of threads it allocates for the default thread pool. \n+\n+It's also important to keep in mind that if you set a value of CPU core count that's larger than core count of your biggest node, then the pod will never be scheduled. Let's say you have a pod that needs 4 cores but you have a kubernetes cluster that's comprised of 2 core VMs. In this case, your pod will never be scheduled.  \n+\n+### Operator sample heap and resource configuration\n+\n+The operator samples configure non-default minimum and maximum heap sizes for WebLogic server JVMs of at least 256MB and 512MB respectively. You can edit a sample's template or domain resource `resources.env` `USER_MEM_ARGS` to have different values. See [Configuring heap size](#configuring-heap-size).\n+\n+Similarly, the operator samples configure CPU and memory resource requests to at least `250m` and `768Mi` respectively.\n+\n+There's no memory or CPU limit configured by default in samples and so the default QoS for sample WebLogic server pod's is `Burstable`. \n+\n+If you wish to set resource requests or limits differently on a sample domain resource or domain resource template, see [Setting resource requests and limits in a domain resource](#setting-resource-requests-and-limits-in-a-domain-resource). Or for samples that generate their domain resource using an 'inputs' file, see the `serverPodMemoryRequest`, `serverPodMemoryLimit`, `serverPodCpuRequest`, and `serverPodCpuLimit` parameters in the sample's `create-domain.sh` input file.\n+\n+### Configuring CPU affinity\n+\n+A Kubernetes hosted WebLogic server may exhibit high lock contention in comparison to an on-premise deployment. This lock contention may be due to lack of CPU cache affinity and/or scheduling latency when workloads move between different CPU cores.  \n+\n+In an on-premise deployment, CPU cache affinity, and therefore reduced lock contention, can be achieved by binding WLS java process to particular CPU core(s) (using the `taskset` command).\n+\n+In a Kubernetes deployment, similar cache affinity can be achieved by doing the following:\n+- Ensuring a pod's CPU resource request and limit are set and equal (to ensure a `guaranteed` QoS).\n+- Configuring the `kubelet` CPU manager policy to be `static` (the default is `none`). See [Control CPU Management Policies on the Node](https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies). \n+Note that some Kubernetes environments may not allow changing the CPU management policy.\n+\n+### Measuring JVM heap, pod CPU, and pod memory\n+\n+TBD Discuss/link to Grafana/Prometheus.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0477ff166bc9e02dd33e555ab283d981f0eafeef"}, "originalPosition": 154}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNDUwMzc5", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#pullrequestreview-440450379", "createdAt": "2020-06-30T23:23:16Z", "commit": {"oid": "0477ff166bc9e02dd33e555ab283d981f0eafeef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzoyMzoxNlrOGrRuyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzoyMzoxNlrOGrRuyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzMjQ1Ng==", "bodyText": "What about resource requests/limits?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r448032456", "createdAt": "2020-06-30T23:23:16Z", "author": {"login": "rjeberhard"}, "path": "kubernetes/samples/scripts/common/domain-template.yaml", "diffHunk": "@@ -63,7 +63,7 @@ spec:\n     - name: JAVA_OPTIONS\n       value: \"%JAVA_OPTIONS%\"\n     - name: USER_MEM_ARGS\n-      value: \"-Djava.security.egd=file:/dev/./urandom \"\n+      value: \"-Djava.security.egd=file:/dev/./urandom -Xms256m -Xmx512m \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0477ff166bc9e02dd33e555ab283d981f0eafeef"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNDUwNTEz", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#pullrequestreview-440450513", "createdAt": "2020-06-30T23:23:37Z", "commit": {"oid": "0477ff166bc9e02dd33e555ab283d981f0eafeef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzoyMzozN1rOGrRvRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzoyMzozN1rOGrRvRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzMjU4Mw==", "bodyText": "Remove extra space", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r448032583", "createdAt": "2020-06-30T23:23:37Z", "author": {"login": "rjeberhard"}, "path": "kubernetes/samples/scripts/common/jrf-domain-template.yaml", "diffHunk": "@@ -0,0 +1,124 @@\n+# Copyright (c) 2017, 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# This is an example of how to define a Domain resource.\n+#\n+apiVersion: \"weblogic.oracle/v8\"\n+kind: Domain\n+metadata:\n+  name: %DOMAIN_UID%\n+  namespace: %NAMESPACE%\n+  labels:\n+    weblogic.domainUID: %DOMAIN_UID%\n+spec:\n+  # The WebLogic Domain Home\n+  domainHome: %DOMAIN_HOME%\n+\n+  # The domain home source type\n+  # Set to PersistentVolume for domain-in-pv, Image for domain-in-image, or FromModel for model-in-image\n+  domainHomeSourceType: %DOMAIN_HOME_SOURCE_TYPE%\n+\n+  # The WebLogic Server Docker image that the Operator uses to start the domain\n+  image: \"%WEBLOGIC_IMAGE%\"\n+\n+  # imagePullPolicy defaults to \"Always\" if image version is :latest\n+  imagePullPolicy: \"%WEBLOGIC_IMAGE_PULL_POLICY%\"\n+\n+  # Identify which Secret contains the credentials for pulling an image\n+  %WEBLOGIC_IMAGE_PULL_SECRET_PREFIX%imagePullSecrets:\n+  %WEBLOGIC_IMAGE_PULL_SECRET_PREFIX%- name: %WEBLOGIC_IMAGE_PULL_SECRET_NAME%\n+\n+  # Identify which Secret contains the WebLogic Admin credentials (note that there is an example of\n+  # how to create that Secret at the end of this file)\n+  webLogicCredentialsSecret: \n+    name: %WEBLOGIC_CREDENTIALS_SECRET_NAME%\n+\n+  # Whether to include the server out file into the pod's stdout, default is true\n+  includeServerOutInPodLog: %INCLUDE_SERVER_OUT_IN_POD_LOG%\n+\n+  # Whether to enable log home\n+  %LOG_HOME_ON_PV_PREFIX%logHomeEnabled: %LOG_HOME_ENABLED%\n+\n+  # Whether to write HTTP access log file to log home\n+  %LOG_HOME_ON_PV_PREFIX%httpAccessLogInLogHome: %HTTP_ACCESS_LOG_IN_LOG_HOME%\n+\n+  # The in-pod location for domain log, server logs, server out, and Node Manager log files\n+  %LOG_HOME_ON_PV_PREFIX%logHome: %LOG_HOME%\n+  # An (optional) in-pod location for data storage of default and custom file stores.\n+  # If not specified or the value is either not set or empty (e.g. dataHome: \"\") then the\n+  # data storage directories are determined from the WebLogic domain home configuration.\n+  dataHome: \"%DATA_HOME%\"\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0477ff166bc9e02dd33e555ab283d981f0eafeef"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNDUwNjg2", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#pullrequestreview-440450686", "createdAt": "2020-06-30T23:24:07Z", "commit": {"oid": "0477ff166bc9e02dd33e555ab283d981f0eafeef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzoyNDowN1rOGrRvzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQyMzoyNDowN1rOGrRvzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODAzMjcxNw==", "bodyText": "Why does this look like a brand-new file?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r448032717", "createdAt": "2020-06-30T23:24:07Z", "author": {"login": "rjeberhard"}, "path": "kubernetes/samples/scripts/common/jrf-domain-template.yaml", "diffHunk": "@@ -0,0 +1,124 @@\n+# Copyright (c) 2017, 2020, Oracle Corporation and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0477ff166bc9e02dd33e555ab283d981f0eafeef"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "686e19ec6abdcac68a063443ce3172e7411d61d4", "author": {"user": {"login": "ankedia", "name": "Anil Kedia"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/686e19ec6abdcac68a063443ce3172e7411d61d4", "committedDate": "2020-07-01T03:18:13Z", "message": "removed extra space"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "748fcce5ba5dfe90929d4fbc69c032e8bd398bb9", "author": {"user": {"login": "ankedia", "name": "Anil Kedia"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/748fcce5ba5dfe90929d4fbc69c032e8bd398bb9", "committedDate": "2020-07-01T18:35:00Z", "message": "Changes for review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNzUwODM3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#pullrequestreview-441750837", "createdAt": "2020-07-02T14:47:12Z", "commit": {"oid": "748fcce5ba5dfe90929d4fbc69c032e8bd398bb9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDo0NzoxMlrOGsQNIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDo0NzoxMlrOGsQNIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA1NjAzNA==", "bodyText": "Placeholder request for @rosemarymarano to please suggest description and weight that fits in with the updates you did for other FAQ's.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r449056034", "createdAt": "2020-07-02T14:47:12Z", "author": {"login": "rjeberhard"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,177 @@\n+---\n+title: \"Pod Memory and CPU Resources\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "748fcce5ba5dfe90929d4fbc69c032e8bd398bb9"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNzU3NTk2", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#pullrequestreview-441757596", "createdAt": "2020-07-02T14:54:24Z", "commit": {"oid": "748fcce5ba5dfe90929d4fbc69c032e8bd398bb9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDo1NDoyNFrOGsQgRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDo1NDoyNFrOGsQgRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA2MDkzNA==", "bodyText": "\"An operator\" -> \"The operator\"\nI think I would say it like this, \"The operator creates a container in its own Pod for each WebLogic Server instance.\"\n\"pod container memory\" -> \"container memory\"\n\"and/or\" -> \"and\"\n\"maximum amount of resource\" -> \"maximum amount of a resource\"\nI don't think \"Quality of Service\" should be capitalized here.\nAlso, we've been matching the style in the Kubernetes doc (on their site) and capitalized the names of all resources when specifically referenced as a resource, so all \"pod\" -> \"Pod\" and \"domain resource\" -> \"Domain resource\".", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r449060934", "createdAt": "2020-07-02T14:54:24Z", "author": {"login": "rjeberhard"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,177 @@\n+---\n+title: \"Pod Memory and CPU Resources\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: false\n+weight: 25\n+---\n+\n+### Contents\n+\n+ - [Introduction](#introduction)\n+ - [Setting resource requests and limits in a domain resource](#setting-resource-requests-and-limits-in-a-domain-resource)\n+ - [Determining pod Quality Of Service](#determining-pod-quality-of-service)\n+ - [Java heap size and memory resource considerations](#java-heap-size-and-memory-resource-considerations)\n+   - [Importance of setting heap size and memory resources](#importance-of-setting-heap-size-and-memory-resources)\n+   - [Default heap sizes](#default-heap-sizes)\n+   - [Configuring heap size](#configuring-heap-size)\n+ - [CPU resource considerations](#cpu-resource-considerations)\n+ - [Operator sample heap and resource configuration](#operator-sample-heap-and-resource-configuration)\n+ - [Configuring CPU affinity](#configuring-cpu-affinity)\n+ - [Measuring JVM heap, pod CPU, and pod memory](#measuring-jvm-heap-pod-cpu-and-pod-memory)\n+ - [References](#references)\n+\n+### Introduction\n+\n+An operator creates a pod for each WebLogic Server instance and each pod will have a container. You can tune pod container memory and/or CPU usage by configuring Kubernetes resource requests and limits, and you can tune a WebLogic JVM heap usage using the `USER_MEM_ARGS` environment variable in your domain resource. A resource request sets the minimum amount of a resource that a container requires. A resource limit is the maximum amount of resource a container is given and prevents a container from using more than its share of a resource. Additionally, resource requests and limits determine a pod's Quality of Service.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "748fcce5ba5dfe90929d4fbc69c032e8bd398bb9"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNzU3OTYx", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#pullrequestreview-441757961", "createdAt": "2020-07-02T14:54:47Z", "commit": {"oid": "748fcce5ba5dfe90929d4fbc69c032e8bd398bb9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDo1NDo0N1rOGsQhYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDo1NDo0N1rOGsQhYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA2MTIxOQ==", "bodyText": "WebLogic Server instances", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r449061219", "createdAt": "2020-07-02T14:54:47Z", "author": {"login": "rjeberhard"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,177 @@\n+---\n+title: \"Pod Memory and CPU Resources\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: false\n+weight: 25\n+---\n+\n+### Contents\n+\n+ - [Introduction](#introduction)\n+ - [Setting resource requests and limits in a domain resource](#setting-resource-requests-and-limits-in-a-domain-resource)\n+ - [Determining pod Quality Of Service](#determining-pod-quality-of-service)\n+ - [Java heap size and memory resource considerations](#java-heap-size-and-memory-resource-considerations)\n+   - [Importance of setting heap size and memory resources](#importance-of-setting-heap-size-and-memory-resources)\n+   - [Default heap sizes](#default-heap-sizes)\n+   - [Configuring heap size](#configuring-heap-size)\n+ - [CPU resource considerations](#cpu-resource-considerations)\n+ - [Operator sample heap and resource configuration](#operator-sample-heap-and-resource-configuration)\n+ - [Configuring CPU affinity](#configuring-cpu-affinity)\n+ - [Measuring JVM heap, pod CPU, and pod memory](#measuring-jvm-heap-pod-cpu-and-pod-memory)\n+ - [References](#references)\n+\n+### Introduction\n+\n+An operator creates a pod for each WebLogic Server instance and each pod will have a container. You can tune pod container memory and/or CPU usage by configuring Kubernetes resource requests and limits, and you can tune a WebLogic JVM heap usage using the `USER_MEM_ARGS` environment variable in your domain resource. A resource request sets the minimum amount of a resource that a container requires. A resource limit is the maximum amount of resource a container is given and prevents a container from using more than its share of a resource. Additionally, resource requests and limits determine a pod's Quality of Service.\n+\n+This FAQ discusses tuning these parameters so WebLogic servers can run efficiently.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "748fcce5ba5dfe90929d4fbc69c032e8bd398bb9"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNzU5ODM3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#pullrequestreview-441759837", "createdAt": "2020-07-02T14:56:46Z", "commit": {"oid": "748fcce5ba5dfe90929d4fbc69c032e8bd398bb9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDo1Njo0N1rOGsQm2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDo1Njo0N1rOGsQm2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA2MjYxNw==", "bodyText": "\"in the Kubernetes documentation.\"", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r449062617", "createdAt": "2020-07-02T14:56:47Z", "author": {"login": "rjeberhard"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,177 @@\n+---\n+title: \"Pod Memory and CPU Resources\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: false\n+weight: 25\n+---\n+\n+### Contents\n+\n+ - [Introduction](#introduction)\n+ - [Setting resource requests and limits in a domain resource](#setting-resource-requests-and-limits-in-a-domain-resource)\n+ - [Determining pod Quality Of Service](#determining-pod-quality-of-service)\n+ - [Java heap size and memory resource considerations](#java-heap-size-and-memory-resource-considerations)\n+   - [Importance of setting heap size and memory resources](#importance-of-setting-heap-size-and-memory-resources)\n+   - [Default heap sizes](#default-heap-sizes)\n+   - [Configuring heap size](#configuring-heap-size)\n+ - [CPU resource considerations](#cpu-resource-considerations)\n+ - [Operator sample heap and resource configuration](#operator-sample-heap-and-resource-configuration)\n+ - [Configuring CPU affinity](#configuring-cpu-affinity)\n+ - [Measuring JVM heap, pod CPU, and pod memory](#measuring-jvm-heap-pod-cpu-and-pod-memory)\n+ - [References](#references)\n+\n+### Introduction\n+\n+An operator creates a pod for each WebLogic Server instance and each pod will have a container. You can tune pod container memory and/or CPU usage by configuring Kubernetes resource requests and limits, and you can tune a WebLogic JVM heap usage using the `USER_MEM_ARGS` environment variable in your domain resource. A resource request sets the minimum amount of a resource that a container requires. A resource limit is the maximum amount of resource a container is given and prevents a container from using more than its share of a resource. Additionally, resource requests and limits determine a pod's Quality of Service.\n+\n+This FAQ discusses tuning these parameters so WebLogic servers can run efficiently.\n+\n+### Setting resource requests and limits in a domain resource\n+\n+You can set Kubernetes memory and CPU requests and limits in a [domain resource]({{< relref \"/userguide/managing-domains/domain-resource\" >}}) using its `spec.serverPod.resources` stanza, and you can override the setting for individual WebLogic servers or clusters using the `serverPod.resources` element in `spec.adminServer`, `spec.clusters`, and/or `spec.managedServers`. For example: \n+\n+```\n+  spec:\n+    serverPod:\n+      requests:\n+        cpu: \"250m\"\n+        memory: \"768Mi\"\n+      limits:\n+        cpu: \"2\"\n+        memory: \"2Gi\"\n+```\n+\n+Limits and requests for CPU resources are measured in cpu units. One cpu, in Kubernetes, is equivalent to 1 vCPU/Core for cloud providers and 1 hyperthread on bare-metal Intel processors. An `m` suffix in a CPU attribute indicates 'milli-CPU', so `250m` is 25% of a CPU. \n+\n+Memory can be expressed in various units, where one `Mi` is one IEC unit mega-byte (1024^2), and one `Gi` is one IEC unit giga-byte (1024^3).\n+\n+See also [Managing Resources for Containers](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/), [Assign Memory Resources to Containers and Pods](https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource) and [Assign CPU Resources to Containers and Pods](https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource) in Kubernetes documentation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "748fcce5ba5dfe90929d4fbc69c032e8bd398bb9"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNzYwNzE5", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#pullrequestreview-441760719", "createdAt": "2020-07-02T14:57:45Z", "commit": {"oid": "748fcce5ba5dfe90929d4fbc69c032e8bd398bb9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDo1Nzo0NVrOGsQpXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDo1Nzo0NVrOGsQpXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA2MzI2Mw==", "bodyText": "\"a Kubernetes kubelet default out-of-resource\" -> \"the default\"", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r449063263", "createdAt": "2020-07-02T14:57:45Z", "author": {"login": "rjeberhard"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,177 @@\n+---\n+title: \"Pod Memory and CPU Resources\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: false\n+weight: 25\n+---\n+\n+### Contents\n+\n+ - [Introduction](#introduction)\n+ - [Setting resource requests and limits in a domain resource](#setting-resource-requests-and-limits-in-a-domain-resource)\n+ - [Determining pod Quality Of Service](#determining-pod-quality-of-service)\n+ - [Java heap size and memory resource considerations](#java-heap-size-and-memory-resource-considerations)\n+   - [Importance of setting heap size and memory resources](#importance-of-setting-heap-size-and-memory-resources)\n+   - [Default heap sizes](#default-heap-sizes)\n+   - [Configuring heap size](#configuring-heap-size)\n+ - [CPU resource considerations](#cpu-resource-considerations)\n+ - [Operator sample heap and resource configuration](#operator-sample-heap-and-resource-configuration)\n+ - [Configuring CPU affinity](#configuring-cpu-affinity)\n+ - [Measuring JVM heap, pod CPU, and pod memory](#measuring-jvm-heap-pod-cpu-and-pod-memory)\n+ - [References](#references)\n+\n+### Introduction\n+\n+An operator creates a pod for each WebLogic Server instance and each pod will have a container. You can tune pod container memory and/or CPU usage by configuring Kubernetes resource requests and limits, and you can tune a WebLogic JVM heap usage using the `USER_MEM_ARGS` environment variable in your domain resource. A resource request sets the minimum amount of a resource that a container requires. A resource limit is the maximum amount of resource a container is given and prevents a container from using more than its share of a resource. Additionally, resource requests and limits determine a pod's Quality of Service.\n+\n+This FAQ discusses tuning these parameters so WebLogic servers can run efficiently.\n+\n+### Setting resource requests and limits in a domain resource\n+\n+You can set Kubernetes memory and CPU requests and limits in a [domain resource]({{< relref \"/userguide/managing-domains/domain-resource\" >}}) using its `spec.serverPod.resources` stanza, and you can override the setting for individual WebLogic servers or clusters using the `serverPod.resources` element in `spec.adminServer`, `spec.clusters`, and/or `spec.managedServers`. For example: \n+\n+```\n+  spec:\n+    serverPod:\n+      requests:\n+        cpu: \"250m\"\n+        memory: \"768Mi\"\n+      limits:\n+        cpu: \"2\"\n+        memory: \"2Gi\"\n+```\n+\n+Limits and requests for CPU resources are measured in cpu units. One cpu, in Kubernetes, is equivalent to 1 vCPU/Core for cloud providers and 1 hyperthread on bare-metal Intel processors. An `m` suffix in a CPU attribute indicates 'milli-CPU', so `250m` is 25% of a CPU. \n+\n+Memory can be expressed in various units, where one `Mi` is one IEC unit mega-byte (1024^2), and one `Gi` is one IEC unit giga-byte (1024^3).\n+\n+See also [Managing Resources for Containers](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/), [Assign Memory Resources to Containers and Pods](https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource) and [Assign CPU Resources to Containers and Pods](https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource) in Kubernetes documentation.\n+\n+### Determining pod Quality Of Service\n+\n+A pod's Quality of Service (QoS) is based on whether it's configured with resource requests and limits:\n+\n+- **Best Effort QoS** (lowest priority): If you don't configure requests and limits for a pod, then the pod is given a `best-effort` QoS. In cases where a node runs out of non-shareable resources, a Kubernetes `kubelet` default out-of-resource eviction policy evicts running pods with the `best-effort` QoS first.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "748fcce5ba5dfe90929d4fbc69c032e8bd398bb9"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNzYyNzI3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#pullrequestreview-441762727", "createdAt": "2020-07-02T14:59:58Z", "commit": {"oid": "748fcce5ba5dfe90929d4fbc69c032e8bd398bb9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDo1OTo1OFrOGsQvgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDo1OTo1OFrOGsQvgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA2NDgzNQ==", "bodyText": "Neither of these priority classes sound like they apply to WebLogic Server instances. Are we recommending that customers choose either of these priority classes? If not, then we don't need to mention them.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r449064835", "createdAt": "2020-07-02T14:59:58Z", "author": {"login": "rjeberhard"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,177 @@\n+---\n+title: \"Pod Memory and CPU Resources\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: false\n+weight: 25\n+---\n+\n+### Contents\n+\n+ - [Introduction](#introduction)\n+ - [Setting resource requests and limits in a domain resource](#setting-resource-requests-and-limits-in-a-domain-resource)\n+ - [Determining pod Quality Of Service](#determining-pod-quality-of-service)\n+ - [Java heap size and memory resource considerations](#java-heap-size-and-memory-resource-considerations)\n+   - [Importance of setting heap size and memory resources](#importance-of-setting-heap-size-and-memory-resources)\n+   - [Default heap sizes](#default-heap-sizes)\n+   - [Configuring heap size](#configuring-heap-size)\n+ - [CPU resource considerations](#cpu-resource-considerations)\n+ - [Operator sample heap and resource configuration](#operator-sample-heap-and-resource-configuration)\n+ - [Configuring CPU affinity](#configuring-cpu-affinity)\n+ - [Measuring JVM heap, pod CPU, and pod memory](#measuring-jvm-heap-pod-cpu-and-pod-memory)\n+ - [References](#references)\n+\n+### Introduction\n+\n+An operator creates a pod for each WebLogic Server instance and each pod will have a container. You can tune pod container memory and/or CPU usage by configuring Kubernetes resource requests and limits, and you can tune a WebLogic JVM heap usage using the `USER_MEM_ARGS` environment variable in your domain resource. A resource request sets the minimum amount of a resource that a container requires. A resource limit is the maximum amount of resource a container is given and prevents a container from using more than its share of a resource. Additionally, resource requests and limits determine a pod's Quality of Service.\n+\n+This FAQ discusses tuning these parameters so WebLogic servers can run efficiently.\n+\n+### Setting resource requests and limits in a domain resource\n+\n+You can set Kubernetes memory and CPU requests and limits in a [domain resource]({{< relref \"/userguide/managing-domains/domain-resource\" >}}) using its `spec.serverPod.resources` stanza, and you can override the setting for individual WebLogic servers or clusters using the `serverPod.resources` element in `spec.adminServer`, `spec.clusters`, and/or `spec.managedServers`. For example: \n+\n+```\n+  spec:\n+    serverPod:\n+      requests:\n+        cpu: \"250m\"\n+        memory: \"768Mi\"\n+      limits:\n+        cpu: \"2\"\n+        memory: \"2Gi\"\n+```\n+\n+Limits and requests for CPU resources are measured in cpu units. One cpu, in Kubernetes, is equivalent to 1 vCPU/Core for cloud providers and 1 hyperthread on bare-metal Intel processors. An `m` suffix in a CPU attribute indicates 'milli-CPU', so `250m` is 25% of a CPU. \n+\n+Memory can be expressed in various units, where one `Mi` is one IEC unit mega-byte (1024^2), and one `Gi` is one IEC unit giga-byte (1024^3).\n+\n+See also [Managing Resources for Containers](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/), [Assign Memory Resources to Containers and Pods](https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource) and [Assign CPU Resources to Containers and Pods](https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource) in Kubernetes documentation.\n+\n+### Determining pod Quality Of Service\n+\n+A pod's Quality of Service (QoS) is based on whether it's configured with resource requests and limits:\n+\n+- **Best Effort QoS** (lowest priority): If you don't configure requests and limits for a pod, then the pod is given a `best-effort` QoS. In cases where a node runs out of non-shareable resources, a Kubernetes `kubelet` default out-of-resource eviction policy evicts running pods with the `best-effort` QoS first.\n+\n+- **Burstable QoS** (medium priority): If you configure both resource requests and limits for a pod, and set the requests to be less than their respective limits, then the pod will be given a `burstable` QoS. Similarly, if you only configure resource requests (without limits) for a pod, then the pod QoS is also `burstable`. If a node runs out of non-shareable resources, the node's `kubelet` will evict `burstable` pods only when there are no more running `best-effort` pods.\n+\n+- **Guaranteed QoS** (highest priority): If you set a pod's requests and the limits to equal values, then the pod will have a `guaranteed` QoS. These settings indicates that your pod will consume a fixed amount of memory and CPU. With this configuration, if a node runs out of shareable resources, then a Kubernetes node's `kubelet` will evict `best-effort` and `burstable` QoS pods before terminating `guaranteed` QoS pods.\n+\n+{{% notice note %}} \n+For most use cases, Oracle recommends configuring WebLogic pods with memory and CPU requests and limits, and furthermore setting requests equal to their respective limits in order to ensure a `guaranteed` QoS.\n+{{% /notice %}}\n+\n+{{% notice note %}} \n+In newer version of Kubernetes, it is possible to fine tune scheduling and eviction policies using [Pod Priority Preemption](https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/) in combination with the `serverPod.priorityClassName` domain resource attribute. Note that Kubernetes already ships with two PriorityClasses: `system-cluster-critical` and `system-node-critical`. These are common classes and are used to [ensure that critical components are always scheduled first](https://kubernetes.io/docs/tasks/administer-cluster/guaranteed-scheduling-critical-addon-pods/).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "748fcce5ba5dfe90929d4fbc69c032e8bd398bb9"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNzYzNDQ1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#pullrequestreview-441763445", "createdAt": "2020-07-02T15:00:41Z", "commit": {"oid": "748fcce5ba5dfe90929d4fbc69c032e8bd398bb9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNTowMDo0MVrOGsQxqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNTowMDo0MVrOGsQxqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA2NTM4NA==", "bodyText": "Does a use case exist where we wouldn't recommend this? If not, you can remove \"For most use cases,\"", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r449065384", "createdAt": "2020-07-02T15:00:41Z", "author": {"login": "rjeberhard"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,177 @@\n+---\n+title: \"Pod Memory and CPU Resources\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: false\n+weight: 25\n+---\n+\n+### Contents\n+\n+ - [Introduction](#introduction)\n+ - [Setting resource requests and limits in a domain resource](#setting-resource-requests-and-limits-in-a-domain-resource)\n+ - [Determining pod Quality Of Service](#determining-pod-quality-of-service)\n+ - [Java heap size and memory resource considerations](#java-heap-size-and-memory-resource-considerations)\n+   - [Importance of setting heap size and memory resources](#importance-of-setting-heap-size-and-memory-resources)\n+   - [Default heap sizes](#default-heap-sizes)\n+   - [Configuring heap size](#configuring-heap-size)\n+ - [CPU resource considerations](#cpu-resource-considerations)\n+ - [Operator sample heap and resource configuration](#operator-sample-heap-and-resource-configuration)\n+ - [Configuring CPU affinity](#configuring-cpu-affinity)\n+ - [Measuring JVM heap, pod CPU, and pod memory](#measuring-jvm-heap-pod-cpu-and-pod-memory)\n+ - [References](#references)\n+\n+### Introduction\n+\n+An operator creates a pod for each WebLogic Server instance and each pod will have a container. You can tune pod container memory and/or CPU usage by configuring Kubernetes resource requests and limits, and you can tune a WebLogic JVM heap usage using the `USER_MEM_ARGS` environment variable in your domain resource. A resource request sets the minimum amount of a resource that a container requires. A resource limit is the maximum amount of resource a container is given and prevents a container from using more than its share of a resource. Additionally, resource requests and limits determine a pod's Quality of Service.\n+\n+This FAQ discusses tuning these parameters so WebLogic servers can run efficiently.\n+\n+### Setting resource requests and limits in a domain resource\n+\n+You can set Kubernetes memory and CPU requests and limits in a [domain resource]({{< relref \"/userguide/managing-domains/domain-resource\" >}}) using its `spec.serverPod.resources` stanza, and you can override the setting for individual WebLogic servers or clusters using the `serverPod.resources` element in `spec.adminServer`, `spec.clusters`, and/or `spec.managedServers`. For example: \n+\n+```\n+  spec:\n+    serverPod:\n+      requests:\n+        cpu: \"250m\"\n+        memory: \"768Mi\"\n+      limits:\n+        cpu: \"2\"\n+        memory: \"2Gi\"\n+```\n+\n+Limits and requests for CPU resources are measured in cpu units. One cpu, in Kubernetes, is equivalent to 1 vCPU/Core for cloud providers and 1 hyperthread on bare-metal Intel processors. An `m` suffix in a CPU attribute indicates 'milli-CPU', so `250m` is 25% of a CPU. \n+\n+Memory can be expressed in various units, where one `Mi` is one IEC unit mega-byte (1024^2), and one `Gi` is one IEC unit giga-byte (1024^3).\n+\n+See also [Managing Resources for Containers](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/), [Assign Memory Resources to Containers and Pods](https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource) and [Assign CPU Resources to Containers and Pods](https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource) in Kubernetes documentation.\n+\n+### Determining pod Quality Of Service\n+\n+A pod's Quality of Service (QoS) is based on whether it's configured with resource requests and limits:\n+\n+- **Best Effort QoS** (lowest priority): If you don't configure requests and limits for a pod, then the pod is given a `best-effort` QoS. In cases where a node runs out of non-shareable resources, a Kubernetes `kubelet` default out-of-resource eviction policy evicts running pods with the `best-effort` QoS first.\n+\n+- **Burstable QoS** (medium priority): If you configure both resource requests and limits for a pod, and set the requests to be less than their respective limits, then the pod will be given a `burstable` QoS. Similarly, if you only configure resource requests (without limits) for a pod, then the pod QoS is also `burstable`. If a node runs out of non-shareable resources, the node's `kubelet` will evict `burstable` pods only when there are no more running `best-effort` pods.\n+\n+- **Guaranteed QoS** (highest priority): If you set a pod's requests and the limits to equal values, then the pod will have a `guaranteed` QoS. These settings indicates that your pod will consume a fixed amount of memory and CPU. With this configuration, if a node runs out of shareable resources, then a Kubernetes node's `kubelet` will evict `best-effort` and `burstable` QoS pods before terminating `guaranteed` QoS pods.\n+\n+{{% notice note %}} \n+For most use cases, Oracle recommends configuring WebLogic pods with memory and CPU requests and limits, and furthermore setting requests equal to their respective limits in order to ensure a `guaranteed` QoS.\n+{{% /notice %}}\n+\n+{{% notice note %}} \n+In newer version of Kubernetes, it is possible to fine tune scheduling and eviction policies using [Pod Priority Preemption](https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/) in combination with the `serverPod.priorityClassName` domain resource attribute. Note that Kubernetes already ships with two PriorityClasses: `system-cluster-critical` and `system-node-critical`. These are common classes and are used to [ensure that critical components are always scheduled first](https://kubernetes.io/docs/tasks/administer-cluster/guaranteed-scheduling-critical-addon-pods/).\n+{{% /notice %}}\n+\n+### Java heap size and memory resource considerations\n+\n+{{% notice note %}} \n+For most use cases, Oracle recommends configuring Java heap sizes for WebLogic pods instead of relying on defaults.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "748fcce5ba5dfe90929d4fbc69c032e8bd398bb9"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNzYzODU3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#pullrequestreview-441763857", "createdAt": "2020-07-02T15:01:08Z", "commit": {"oid": "748fcce5ba5dfe90929d4fbc69c032e8bd398bb9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNTowMTowOFrOGsQyyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNTowMTowOFrOGsQyyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA2NTY3Mg==", "bodyText": "extra space after \"but\"", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r449065672", "createdAt": "2020-07-02T15:01:08Z", "author": {"login": "rjeberhard"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,177 @@\n+---\n+title: \"Pod Memory and CPU Resources\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: false\n+weight: 25\n+---\n+\n+### Contents\n+\n+ - [Introduction](#introduction)\n+ - [Setting resource requests and limits in a domain resource](#setting-resource-requests-and-limits-in-a-domain-resource)\n+ - [Determining pod Quality Of Service](#determining-pod-quality-of-service)\n+ - [Java heap size and memory resource considerations](#java-heap-size-and-memory-resource-considerations)\n+   - [Importance of setting heap size and memory resources](#importance-of-setting-heap-size-and-memory-resources)\n+   - [Default heap sizes](#default-heap-sizes)\n+   - [Configuring heap size](#configuring-heap-size)\n+ - [CPU resource considerations](#cpu-resource-considerations)\n+ - [Operator sample heap and resource configuration](#operator-sample-heap-and-resource-configuration)\n+ - [Configuring CPU affinity](#configuring-cpu-affinity)\n+ - [Measuring JVM heap, pod CPU, and pod memory](#measuring-jvm-heap-pod-cpu-and-pod-memory)\n+ - [References](#references)\n+\n+### Introduction\n+\n+An operator creates a pod for each WebLogic Server instance and each pod will have a container. You can tune pod container memory and/or CPU usage by configuring Kubernetes resource requests and limits, and you can tune a WebLogic JVM heap usage using the `USER_MEM_ARGS` environment variable in your domain resource. A resource request sets the minimum amount of a resource that a container requires. A resource limit is the maximum amount of resource a container is given and prevents a container from using more than its share of a resource. Additionally, resource requests and limits determine a pod's Quality of Service.\n+\n+This FAQ discusses tuning these parameters so WebLogic servers can run efficiently.\n+\n+### Setting resource requests and limits in a domain resource\n+\n+You can set Kubernetes memory and CPU requests and limits in a [domain resource]({{< relref \"/userguide/managing-domains/domain-resource\" >}}) using its `spec.serverPod.resources` stanza, and you can override the setting for individual WebLogic servers or clusters using the `serverPod.resources` element in `spec.adminServer`, `spec.clusters`, and/or `spec.managedServers`. For example: \n+\n+```\n+  spec:\n+    serverPod:\n+      requests:\n+        cpu: \"250m\"\n+        memory: \"768Mi\"\n+      limits:\n+        cpu: \"2\"\n+        memory: \"2Gi\"\n+```\n+\n+Limits and requests for CPU resources are measured in cpu units. One cpu, in Kubernetes, is equivalent to 1 vCPU/Core for cloud providers and 1 hyperthread on bare-metal Intel processors. An `m` suffix in a CPU attribute indicates 'milli-CPU', so `250m` is 25% of a CPU. \n+\n+Memory can be expressed in various units, where one `Mi` is one IEC unit mega-byte (1024^2), and one `Gi` is one IEC unit giga-byte (1024^3).\n+\n+See also [Managing Resources for Containers](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/), [Assign Memory Resources to Containers and Pods](https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource) and [Assign CPU Resources to Containers and Pods](https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource) in Kubernetes documentation.\n+\n+### Determining pod Quality Of Service\n+\n+A pod's Quality of Service (QoS) is based on whether it's configured with resource requests and limits:\n+\n+- **Best Effort QoS** (lowest priority): If you don't configure requests and limits for a pod, then the pod is given a `best-effort` QoS. In cases where a node runs out of non-shareable resources, a Kubernetes `kubelet` default out-of-resource eviction policy evicts running pods with the `best-effort` QoS first.\n+\n+- **Burstable QoS** (medium priority): If you configure both resource requests and limits for a pod, and set the requests to be less than their respective limits, then the pod will be given a `burstable` QoS. Similarly, if you only configure resource requests (without limits) for a pod, then the pod QoS is also `burstable`. If a node runs out of non-shareable resources, the node's `kubelet` will evict `burstable` pods only when there are no more running `best-effort` pods.\n+\n+- **Guaranteed QoS** (highest priority): If you set a pod's requests and the limits to equal values, then the pod will have a `guaranteed` QoS. These settings indicates that your pod will consume a fixed amount of memory and CPU. With this configuration, if a node runs out of shareable resources, then a Kubernetes node's `kubelet` will evict `best-effort` and `burstable` QoS pods before terminating `guaranteed` QoS pods.\n+\n+{{% notice note %}} \n+For most use cases, Oracle recommends configuring WebLogic pods with memory and CPU requests and limits, and furthermore setting requests equal to their respective limits in order to ensure a `guaranteed` QoS.\n+{{% /notice %}}\n+\n+{{% notice note %}} \n+In newer version of Kubernetes, it is possible to fine tune scheduling and eviction policies using [Pod Priority Preemption](https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/) in combination with the `serverPod.priorityClassName` domain resource attribute. Note that Kubernetes already ships with two PriorityClasses: `system-cluster-critical` and `system-node-critical`. These are common classes and are used to [ensure that critical components are always scheduled first](https://kubernetes.io/docs/tasks/administer-cluster/guaranteed-scheduling-critical-addon-pods/).\n+{{% /notice %}}\n+\n+### Java heap size and memory resource considerations\n+\n+{{% notice note %}} \n+For most use cases, Oracle recommends configuring Java heap sizes for WebLogic pods instead of relying on defaults.\n+{{% /notice %}}\n+\n+#### Importance of setting heap size and memory resources\n+\n+It's extremely important to set correct heap sizes, memory requests, and memory limits for WebLogic JVMs and Pods. \n+\n+A WebLogic JVM heap must be sufficiently sized to run its applications and services, but should not be sized too large so as not to waste memory resources.\n+\n+A pod memory limit must be sufficiently sized to accommodate the configured heap and native memory requirements, but  not too big to waste memory resources. If a JVM's memory usage (sum of heap and native memory) exceeds its pod's limit, then the JVM process will be abruptly killed due to an out-of-memory error and the WebLogic container will consequently automatically restart due to a liveness probe failure.  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "748fcce5ba5dfe90929d4fbc69c032e8bd398bb9"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNzY1NzAy", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#pullrequestreview-441765702", "createdAt": "2020-07-02T15:03:10Z", "commit": {"oid": "748fcce5ba5dfe90929d4fbc69c032e8bd398bb9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNTowMzoxMFrOGsQ4LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNTowMzoxMFrOGsQ4LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA2NzA1Mw==", "bodyText": "Aren't they guaranteed to not be evicted?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r449067053", "createdAt": "2020-07-02T15:03:10Z", "author": {"login": "rjeberhard"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,177 @@\n+---\n+title: \"Pod Memory and CPU Resources\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: false\n+weight: 25\n+---\n+\n+### Contents\n+\n+ - [Introduction](#introduction)\n+ - [Setting resource requests and limits in a domain resource](#setting-resource-requests-and-limits-in-a-domain-resource)\n+ - [Determining pod Quality Of Service](#determining-pod-quality-of-service)\n+ - [Java heap size and memory resource considerations](#java-heap-size-and-memory-resource-considerations)\n+   - [Importance of setting heap size and memory resources](#importance-of-setting-heap-size-and-memory-resources)\n+   - [Default heap sizes](#default-heap-sizes)\n+   - [Configuring heap size](#configuring-heap-size)\n+ - [CPU resource considerations](#cpu-resource-considerations)\n+ - [Operator sample heap and resource configuration](#operator-sample-heap-and-resource-configuration)\n+ - [Configuring CPU affinity](#configuring-cpu-affinity)\n+ - [Measuring JVM heap, pod CPU, and pod memory](#measuring-jvm-heap-pod-cpu-and-pod-memory)\n+ - [References](#references)\n+\n+### Introduction\n+\n+An operator creates a pod for each WebLogic Server instance and each pod will have a container. You can tune pod container memory and/or CPU usage by configuring Kubernetes resource requests and limits, and you can tune a WebLogic JVM heap usage using the `USER_MEM_ARGS` environment variable in your domain resource. A resource request sets the minimum amount of a resource that a container requires. A resource limit is the maximum amount of resource a container is given and prevents a container from using more than its share of a resource. Additionally, resource requests and limits determine a pod's Quality of Service.\n+\n+This FAQ discusses tuning these parameters so WebLogic servers can run efficiently.\n+\n+### Setting resource requests and limits in a domain resource\n+\n+You can set Kubernetes memory and CPU requests and limits in a [domain resource]({{< relref \"/userguide/managing-domains/domain-resource\" >}}) using its `spec.serverPod.resources` stanza, and you can override the setting for individual WebLogic servers or clusters using the `serverPod.resources` element in `spec.adminServer`, `spec.clusters`, and/or `spec.managedServers`. For example: \n+\n+```\n+  spec:\n+    serverPod:\n+      requests:\n+        cpu: \"250m\"\n+        memory: \"768Mi\"\n+      limits:\n+        cpu: \"2\"\n+        memory: \"2Gi\"\n+```\n+\n+Limits and requests for CPU resources are measured in cpu units. One cpu, in Kubernetes, is equivalent to 1 vCPU/Core for cloud providers and 1 hyperthread on bare-metal Intel processors. An `m` suffix in a CPU attribute indicates 'milli-CPU', so `250m` is 25% of a CPU. \n+\n+Memory can be expressed in various units, where one `Mi` is one IEC unit mega-byte (1024^2), and one `Gi` is one IEC unit giga-byte (1024^3).\n+\n+See also [Managing Resources for Containers](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/), [Assign Memory Resources to Containers and Pods](https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource) and [Assign CPU Resources to Containers and Pods](https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource) in Kubernetes documentation.\n+\n+### Determining pod Quality Of Service\n+\n+A pod's Quality of Service (QoS) is based on whether it's configured with resource requests and limits:\n+\n+- **Best Effort QoS** (lowest priority): If you don't configure requests and limits for a pod, then the pod is given a `best-effort` QoS. In cases where a node runs out of non-shareable resources, a Kubernetes `kubelet` default out-of-resource eviction policy evicts running pods with the `best-effort` QoS first.\n+\n+- **Burstable QoS** (medium priority): If you configure both resource requests and limits for a pod, and set the requests to be less than their respective limits, then the pod will be given a `burstable` QoS. Similarly, if you only configure resource requests (without limits) for a pod, then the pod QoS is also `burstable`. If a node runs out of non-shareable resources, the node's `kubelet` will evict `burstable` pods only when there are no more running `best-effort` pods.\n+\n+- **Guaranteed QoS** (highest priority): If you set a pod's requests and the limits to equal values, then the pod will have a `guaranteed` QoS. These settings indicates that your pod will consume a fixed amount of memory and CPU. With this configuration, if a node runs out of shareable resources, then a Kubernetes node's `kubelet` will evict `best-effort` and `burstable` QoS pods before terminating `guaranteed` QoS pods.\n+\n+{{% notice note %}} \n+For most use cases, Oracle recommends configuring WebLogic pods with memory and CPU requests and limits, and furthermore setting requests equal to their respective limits in order to ensure a `guaranteed` QoS.\n+{{% /notice %}}\n+\n+{{% notice note %}} \n+In newer version of Kubernetes, it is possible to fine tune scheduling and eviction policies using [Pod Priority Preemption](https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/) in combination with the `serverPod.priorityClassName` domain resource attribute. Note that Kubernetes already ships with two PriorityClasses: `system-cluster-critical` and `system-node-critical`. These are common classes and are used to [ensure that critical components are always scheduled first](https://kubernetes.io/docs/tasks/administer-cluster/guaranteed-scheduling-critical-addon-pods/).\n+{{% /notice %}}\n+\n+### Java heap size and memory resource considerations\n+\n+{{% notice note %}} \n+For most use cases, Oracle recommends configuring Java heap sizes for WebLogic pods instead of relying on defaults.\n+{{% /notice %}}\n+\n+#### Importance of setting heap size and memory resources\n+\n+It's extremely important to set correct heap sizes, memory requests, and memory limits for WebLogic JVMs and Pods. \n+\n+A WebLogic JVM heap must be sufficiently sized to run its applications and services, but should not be sized too large so as not to waste memory resources.\n+\n+A pod memory limit must be sufficiently sized to accommodate the configured heap and native memory requirements, but  not too big to waste memory resources. If a JVM's memory usage (sum of heap and native memory) exceeds its pod's limit, then the JVM process will be abruptly killed due to an out-of-memory error and the WebLogic container will consequently automatically restart due to a liveness probe failure.  \n+\n+Oracle recommends setting minimum and maximum heap (or heap percentages) and at least a container memory request.\n+\n+{{% notice warning %}}\n+If resource requests and resource limits are set too high, then your pods may not be scheduled due to lack of node resources, will unnecessarily use up CPU shared resources that could be used by other pods, or may prevent other pods from running.\n+{{% /notice %}}\n+\n+#### Default heap sizes\n+\n+With the latest Java versions, Java 8 update 191 and onwards or Java 11, then if you don't configure a heap size (no '-Xms' or '-Xms') the default heap size is dynamically determined:\n+- If you configure the memory limit for a container, then the JVM default maximum heap size will be 25% (1/4th) of container memory limit and the default minimum heap size will be 1.56% (1/64th) of the limit value. \n+\n+  The default JVM heap settings in this case are often too conservative because the WebLogic JVM is the only major process running in the container.\n+\n+- If no memory limit is configured, then the JVM default maximum heap size will be  25% (1/4th) of the its node's machine RAM and the default minimum heap size will be 1.56% (1/64th) of the RAM.\n+\n+  The default JVM heap settings in this case can have undesirable behavior, including using unnecessary amounts of memory to the point where it might affect other pods that run on the same node.\n+\n+#### Configuring heap size\n+\n+If you specify pod memory limits, Oracle recommends configuring WebLogic Server heap sizes as a percentage. The JVM will interpret the percentage as a fraction of the limit. This is done using the JVM `-XX:MinRAMPercentage` and `-XX:MaxRAMPercentage` options in the `USER_MEM_ARGS` [domain resource environment variable]({{< relref \"/userguide/managing-domains/domain-resource#jvm-memory-and-java-option-environment-variables\" >}}).  For example:\n+\n+```\n+  spec:\n+    resources:\n+      env:\n+      - name: USER_MEM_ARGS\n+        value: \"--XX:MinRAMPercentage=25.0 --XX:MaxRAMPercentage=50.0 -Djava.security.egd=file:/dev/./urandom\"\n+```\n+\n+Additionally there's also a node-manager process that's running in the same container as the WebLogic Server which has its own heap and native memory requirements. Its heap is tuned by using `-Xms` and `-Xmx` in the `NODEMGR_MEM_ARGS` environment variable. Oracle recommends setting the node manager heap memory to fixed sizes, instead of percentages, where [the default tuning]({{< relref \"/userguide/managing-domains/domain-resource#jvm-memory-and-java-option-environment-variables\" >}}) is usually sufficient.\n+\n+{{% notice note %}}\n+Notice that the `NODEMGR_MEM_ARGS` and `USER_MEM_ARGS` environment variables both set `-Djava.security.egd=file:/dev/./urandom` by default so we have also included them in the above example for specifying a `USER_MEM_ARGS` value. This helps speed up Node Manager and WebLogic Server startup on systems with low entropy. \n+{{% /notice %}}\n+\n+In some cases, you might only want to configure memory resource requests but not configure memory resource limits. In such scenarios, you can use the traditional fixed heap size settings (`-Xms` and `-Xmx`) in your WebLogic Server `USER_MEM_ARGS` instead of the percentage settings (`-XX:MinRAMPercentage` and `-XX:MaxRAMPercentage`).\n+\n+### CPU resource considerations\n+\n+It's important to set both a CPU request and a limit for WebLogic Server pods. This ensures that all WebLogic server pods have enough CPU resources, and, as discussed earlier, if the request and limit are set to the same value, then they get a `guaranteed` QoS. A `guaranteed` QoS ensures the pods are handled with a higher priority during scheduling and so are the least likely to be evicted.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "748fcce5ba5dfe90929d4fbc69c032e8bd398bb9"}, "originalPosition": 121}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNzY2NzU1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#pullrequestreview-441766755", "createdAt": "2020-07-02T15:04:20Z", "commit": {"oid": "748fcce5ba5dfe90929d4fbc69c032e8bd398bb9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNTowNDoyMFrOGsQ7AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNTowNDoyMFrOGsQ7AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA2Nzc3Ng==", "bodyText": "\"and/or\" -> \"or\"", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r449067776", "createdAt": "2020-07-02T15:04:20Z", "author": {"login": "rjeberhard"}, "path": "docs-source/content/faq/resource-settings.md", "diffHunk": "@@ -0,0 +1,177 @@\n+---\n+title: \"Pod Memory and CPU Resources\"\n+date: 2020-06-30T08:55:00-05:00\n+draft: false\n+weight: 25\n+---\n+\n+### Contents\n+\n+ - [Introduction](#introduction)\n+ - [Setting resource requests and limits in a domain resource](#setting-resource-requests-and-limits-in-a-domain-resource)\n+ - [Determining pod Quality Of Service](#determining-pod-quality-of-service)\n+ - [Java heap size and memory resource considerations](#java-heap-size-and-memory-resource-considerations)\n+   - [Importance of setting heap size and memory resources](#importance-of-setting-heap-size-and-memory-resources)\n+   - [Default heap sizes](#default-heap-sizes)\n+   - [Configuring heap size](#configuring-heap-size)\n+ - [CPU resource considerations](#cpu-resource-considerations)\n+ - [Operator sample heap and resource configuration](#operator-sample-heap-and-resource-configuration)\n+ - [Configuring CPU affinity](#configuring-cpu-affinity)\n+ - [Measuring JVM heap, pod CPU, and pod memory](#measuring-jvm-heap-pod-cpu-and-pod-memory)\n+ - [References](#references)\n+\n+### Introduction\n+\n+An operator creates a pod for each WebLogic Server instance and each pod will have a container. You can tune pod container memory and/or CPU usage by configuring Kubernetes resource requests and limits, and you can tune a WebLogic JVM heap usage using the `USER_MEM_ARGS` environment variable in your domain resource. A resource request sets the minimum amount of a resource that a container requires. A resource limit is the maximum amount of resource a container is given and prevents a container from using more than its share of a resource. Additionally, resource requests and limits determine a pod's Quality of Service.\n+\n+This FAQ discusses tuning these parameters so WebLogic servers can run efficiently.\n+\n+### Setting resource requests and limits in a domain resource\n+\n+You can set Kubernetes memory and CPU requests and limits in a [domain resource]({{< relref \"/userguide/managing-domains/domain-resource\" >}}) using its `spec.serverPod.resources` stanza, and you can override the setting for individual WebLogic servers or clusters using the `serverPod.resources` element in `spec.adminServer`, `spec.clusters`, and/or `spec.managedServers`. For example: \n+\n+```\n+  spec:\n+    serverPod:\n+      requests:\n+        cpu: \"250m\"\n+        memory: \"768Mi\"\n+      limits:\n+        cpu: \"2\"\n+        memory: \"2Gi\"\n+```\n+\n+Limits and requests for CPU resources are measured in cpu units. One cpu, in Kubernetes, is equivalent to 1 vCPU/Core for cloud providers and 1 hyperthread on bare-metal Intel processors. An `m` suffix in a CPU attribute indicates 'milli-CPU', so `250m` is 25% of a CPU. \n+\n+Memory can be expressed in various units, where one `Mi` is one IEC unit mega-byte (1024^2), and one `Gi` is one IEC unit giga-byte (1024^3).\n+\n+See also [Managing Resources for Containers](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/), [Assign Memory Resources to Containers and Pods](https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource) and [Assign CPU Resources to Containers and Pods](https://kubernetes.io/docs/tasks/configure-pod-container/assign-cpu-resource) in Kubernetes documentation.\n+\n+### Determining pod Quality Of Service\n+\n+A pod's Quality of Service (QoS) is based on whether it's configured with resource requests and limits:\n+\n+- **Best Effort QoS** (lowest priority): If you don't configure requests and limits for a pod, then the pod is given a `best-effort` QoS. In cases where a node runs out of non-shareable resources, a Kubernetes `kubelet` default out-of-resource eviction policy evicts running pods with the `best-effort` QoS first.\n+\n+- **Burstable QoS** (medium priority): If you configure both resource requests and limits for a pod, and set the requests to be less than their respective limits, then the pod will be given a `burstable` QoS. Similarly, if you only configure resource requests (without limits) for a pod, then the pod QoS is also `burstable`. If a node runs out of non-shareable resources, the node's `kubelet` will evict `burstable` pods only when there are no more running `best-effort` pods.\n+\n+- **Guaranteed QoS** (highest priority): If you set a pod's requests and the limits to equal values, then the pod will have a `guaranteed` QoS. These settings indicates that your pod will consume a fixed amount of memory and CPU. With this configuration, if a node runs out of shareable resources, then a Kubernetes node's `kubelet` will evict `best-effort` and `burstable` QoS pods before terminating `guaranteed` QoS pods.\n+\n+{{% notice note %}} \n+For most use cases, Oracle recommends configuring WebLogic pods with memory and CPU requests and limits, and furthermore setting requests equal to their respective limits in order to ensure a `guaranteed` QoS.\n+{{% /notice %}}\n+\n+{{% notice note %}} \n+In newer version of Kubernetes, it is possible to fine tune scheduling and eviction policies using [Pod Priority Preemption](https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/) in combination with the `serverPod.priorityClassName` domain resource attribute. Note that Kubernetes already ships with two PriorityClasses: `system-cluster-critical` and `system-node-critical`. These are common classes and are used to [ensure that critical components are always scheduled first](https://kubernetes.io/docs/tasks/administer-cluster/guaranteed-scheduling-critical-addon-pods/).\n+{{% /notice %}}\n+\n+### Java heap size and memory resource considerations\n+\n+{{% notice note %}} \n+For most use cases, Oracle recommends configuring Java heap sizes for WebLogic pods instead of relying on defaults.\n+{{% /notice %}}\n+\n+#### Importance of setting heap size and memory resources\n+\n+It's extremely important to set correct heap sizes, memory requests, and memory limits for WebLogic JVMs and Pods. \n+\n+A WebLogic JVM heap must be sufficiently sized to run its applications and services, but should not be sized too large so as not to waste memory resources.\n+\n+A pod memory limit must be sufficiently sized to accommodate the configured heap and native memory requirements, but  not too big to waste memory resources. If a JVM's memory usage (sum of heap and native memory) exceeds its pod's limit, then the JVM process will be abruptly killed due to an out-of-memory error and the WebLogic container will consequently automatically restart due to a liveness probe failure.  \n+\n+Oracle recommends setting minimum and maximum heap (or heap percentages) and at least a container memory request.\n+\n+{{% notice warning %}}\n+If resource requests and resource limits are set too high, then your pods may not be scheduled due to lack of node resources, will unnecessarily use up CPU shared resources that could be used by other pods, or may prevent other pods from running.\n+{{% /notice %}}\n+\n+#### Default heap sizes\n+\n+With the latest Java versions, Java 8 update 191 and onwards or Java 11, then if you don't configure a heap size (no '-Xms' or '-Xms') the default heap size is dynamically determined:\n+- If you configure the memory limit for a container, then the JVM default maximum heap size will be 25% (1/4th) of container memory limit and the default minimum heap size will be 1.56% (1/64th) of the limit value. \n+\n+  The default JVM heap settings in this case are often too conservative because the WebLogic JVM is the only major process running in the container.\n+\n+- If no memory limit is configured, then the JVM default maximum heap size will be  25% (1/4th) of the its node's machine RAM and the default minimum heap size will be 1.56% (1/64th) of the RAM.\n+\n+  The default JVM heap settings in this case can have undesirable behavior, including using unnecessary amounts of memory to the point where it might affect other pods that run on the same node.\n+\n+#### Configuring heap size\n+\n+If you specify pod memory limits, Oracle recommends configuring WebLogic Server heap sizes as a percentage. The JVM will interpret the percentage as a fraction of the limit. This is done using the JVM `-XX:MinRAMPercentage` and `-XX:MaxRAMPercentage` options in the `USER_MEM_ARGS` [domain resource environment variable]({{< relref \"/userguide/managing-domains/domain-resource#jvm-memory-and-java-option-environment-variables\" >}}).  For example:\n+\n+```\n+  spec:\n+    resources:\n+      env:\n+      - name: USER_MEM_ARGS\n+        value: \"--XX:MinRAMPercentage=25.0 --XX:MaxRAMPercentage=50.0 -Djava.security.egd=file:/dev/./urandom\"\n+```\n+\n+Additionally there's also a node-manager process that's running in the same container as the WebLogic Server which has its own heap and native memory requirements. Its heap is tuned by using `-Xms` and `-Xmx` in the `NODEMGR_MEM_ARGS` environment variable. Oracle recommends setting the node manager heap memory to fixed sizes, instead of percentages, where [the default tuning]({{< relref \"/userguide/managing-domains/domain-resource#jvm-memory-and-java-option-environment-variables\" >}}) is usually sufficient.\n+\n+{{% notice note %}}\n+Notice that the `NODEMGR_MEM_ARGS` and `USER_MEM_ARGS` environment variables both set `-Djava.security.egd=file:/dev/./urandom` by default so we have also included them in the above example for specifying a `USER_MEM_ARGS` value. This helps speed up Node Manager and WebLogic Server startup on systems with low entropy. \n+{{% /notice %}}\n+\n+In some cases, you might only want to configure memory resource requests but not configure memory resource limits. In such scenarios, you can use the traditional fixed heap size settings (`-Xms` and `-Xmx`) in your WebLogic Server `USER_MEM_ARGS` instead of the percentage settings (`-XX:MinRAMPercentage` and `-XX:MaxRAMPercentage`).\n+\n+### CPU resource considerations\n+\n+It's important to set both a CPU request and a limit for WebLogic Server pods. This ensures that all WebLogic server pods have enough CPU resources, and, as discussed earlier, if the request and limit are set to the same value, then they get a `guaranteed` QoS. A `guaranteed` QoS ensures the pods are handled with a higher priority during scheduling and so are the least likely to be evicted.\n+\n+If a CPU request and limit are _not_ configured for a WebLogic Server pod:\n+- The pod can end up using all CPU resources available on its node and starve other containers from using shareable CPU cycles. \n+\n+- The WebLogic server JVM may choose an unsuitable garbage collection (GC) strategy.\n+\n+- A WebLogic Server self-tuning work-manager may incorrectly optimize the number of threads it allocates for the default thread pool. \n+\n+It's also important to keep in mind that if you set a value of CPU core count that's larger than core count of your biggest node, then the pod will never be scheduled. Let's say you have a pod that needs 4 cores but you have a kubernetes cluster that's comprised of 2 core VMs. In this case, your pod will never be scheduled and will have `Pending` status. For example:\n+\n+```\n+$ kubectl get pod sample-domain1-managed-server1 -n sample-domain1-ns\n+NAME                              READY   STATUS    RESTARTS   AGE\n+sample-domain1-managed-server1    0/1     Pending   0          65s\n+\n+$ kubectl describe pod sample-domain1-managed-server1 -n sample-domain1-ns\n+Events:\n+  Type     Reason            Age                From               Message\n+  ----     ------            ----               ----               -------\n+  Warning  FailedScheduling  16s (x3 over 26s)  default-scheduler  0/2 nodes are available: 2 Insufficient cpu.\n+```\n+\n+### Operator sample heap and resource configuration\n+\n+The operator samples configure non-default minimum and maximum heap sizes for WebLogic server JVMs of at least 256MB and 512MB respectively. You can edit a sample's template or domain resource `resources.env` `USER_MEM_ARGS` to have different values. See [Configuring heap size](#configuring-heap-size).\n+\n+Similarly, the operator samples configure CPU and memory resource requests to at least `250m` and `768Mi` respectively.\n+\n+There's no memory or CPU limit configured by default in samples and so the default QoS for sample WebLogic server pod's is `Burstable`. \n+\n+If you wish to set resource requests or limits differently on a sample domain resource or domain resource template, see [Setting resource requests and limits in a domain resource](#setting-resource-requests-and-limits-in-a-domain-resource). Or for samples that generate their domain resource using an 'inputs' file, see the `serverPodMemoryRequest`, `serverPodMemoryLimit`, `serverPodCpuRequest`, and `serverPodCpuLimit` parameters in the sample's `create-domain.sh` input file.\n+\n+### Configuring CPU affinity\n+\n+A Kubernetes hosted WebLogic server may exhibit high lock contention in comparison to an on-premise deployment. This lock contention may be due to lack of CPU cache affinity and/or scheduling latency when workloads move between different CPU cores.  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "748fcce5ba5dfe90929d4fbc69c032e8bd398bb9"}, "originalPosition": 156}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNzg4NDc5", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#pullrequestreview-441788479", "createdAt": "2020-07-02T15:19:26Z", "commit": {"oid": "748fcce5ba5dfe90929d4fbc69c032e8bd398bb9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNToxOToyNlrOGsRh2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNToxOToyNlrOGsRh2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA3NzcyMA==", "bodyText": "It looks like USER_MEM_ARGS here should have the urandom.  A long-standing error - can you please add it?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#discussion_r449077720", "createdAt": "2020-07-02T15:19:26Z", "author": {"login": "tbarnes-us"}, "path": "kubernetes/samples/scripts/create-weblogic-domain/manually-create-domain/domain.yaml", "diffHunk": "@@ -65,7 +65,10 @@ spec:\n     - name: JAVA_OPTIONS\n       value: \"-Dweblogic.StdoutDebugEnabled=false\"\n     - name: USER_MEM_ARGS\n-      value: \"-Xms64m -Xmx256m \"\n+      value: \"-Xms256m -Xmx512m \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "748fcce5ba5dfe90929d4fbc69c032e8bd398bb9"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "956aa90eb7fcec463ed885ffb62073a257ed2dbd", "author": {"user": {"login": "ankedia", "name": "Anil Kedia"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/956aa90eb7fcec463ed885ffb62073a257ed2dbd", "committedDate": "2020-07-02T17:13:02Z", "message": "changes for addressing PR review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxOTI3NDYw", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#pullrequestreview-441927460", "createdAt": "2020-07-02T18:22:02Z", "commit": {"oid": "956aa90eb7fcec463ed885ffb62073a257ed2dbd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxOTQyMzIy", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1775#pullrequestreview-441942322", "createdAt": "2020-07-02T18:46:52Z", "commit": {"oid": "956aa90eb7fcec463ed885ffb62073a257ed2dbd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0354b9d1f52a700c366e7aaa53a70cb46dfabe6e", "author": {"user": {"login": "rosemarymarano", "name": "Rosemary Marano"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0354b9d1f52a700c366e7aaa53a70cb46dfabe6e", "committedDate": "2020-07-02T19:42:09Z", "message": "second pass review"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4620, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}