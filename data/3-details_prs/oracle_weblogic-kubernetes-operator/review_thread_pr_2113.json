{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyMjk2NTQw", "number": 2113, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNzoyMTozMlrOFHRlqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxOTozNToxNlrOFHUkcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTcyNTIwOnYy", "diffSide": "RIGHT", "path": "kubernetes/samples/scripts/terraform/oke.create.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNzoyMTozMlrOIIruDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNzo0ODoyOFrOIIso1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk3NTgyMw==", "bodyText": "Can you put this to multiple lines or just leave \"#setup terraform\"?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r545975823", "createdAt": "2020-12-18T17:21:32Z", "author": {"login": "xiancao"}, "path": "kubernetes/samples/scripts/terraform/oke.create.sh", "diffHunk": "@@ -37,12 +37,13 @@ function setupTerraform () {\n       curl -O https://releases.hashicorp.com/terraform/0.11.10/terraform_0.11.10_darwin_amd64.zip\n       unzip terraform_0.11.10_darwin_amd64.zip\n     elif [[ \"${OSTYPE}\" == \"linux\"* ]]; then\n-       curl -O https://releases.hashicorp.com/terraform/0.11.8/terraform_0.11.8_linux_amd64.zip\n-       unzip terraform_0.11.8_linux_amd64.zip\n+#setup terraform#curl -LO --retry 3 https://releases.hashicorp.com/terraform/0.11.8/terraform_0.11.8_linux_amd64.zip#unzip -o terraform_0.11.8_linux_amd64.zip -d ${WORKSPACE}/bin/#rm terraform_0.11.8_linux_amd64.zip#chmod +x ${WORKSPACE}/bin/terraform", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b1915df960112318116beb62191b01378f9285d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk5MDg2OQ==", "bodyText": "removed commented out lines", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r545990869", "createdAt": "2020-12-18T17:48:28Z", "author": {"login": "marinakog"}, "path": "kubernetes/samples/scripts/terraform/oke.create.sh", "diffHunk": "@@ -37,12 +37,13 @@ function setupTerraform () {\n       curl -O https://releases.hashicorp.com/terraform/0.11.10/terraform_0.11.10_darwin_amd64.zip\n       unzip terraform_0.11.10_darwin_amd64.zip\n     elif [[ \"${OSTYPE}\" == \"linux\"* ]]; then\n-       curl -O https://releases.hashicorp.com/terraform/0.11.8/terraform_0.11.8_linux_amd64.zip\n-       unzip terraform_0.11.8_linux_amd64.zip\n+#setup terraform#curl -LO --retry 3 https://releases.hashicorp.com/terraform/0.11.8/terraform_0.11.8_linux_amd64.zip#unzip -o terraform_0.11.8_linux_amd64.zip -d ${WORKSPACE}/bin/#rm terraform_0.11.8_linux_amd64.zip#chmod +x ${WORKSPACE}/bin/terraform", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk3NTgyMw=="}, "originalCommit": {"oid": "3b1915df960112318116beb62191b01378f9285d"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTczMDA4OnYy", "diffSide": "RIGHT", "path": "kubernetes/samples/scripts/terraform/oke.create.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNzoyMzowOVrOIIrxDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNzo0ODo0MlrOIIspTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk3NjU4OA==", "bodyText": "add some indentation for the function body.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r545976588", "createdAt": "2020-12-18T17:23:09Z", "author": {"login": "xiancao"}, "path": "kubernetes/samples/scripts/terraform/oke.create.sh", "diffHunk": "@@ -68,6 +69,60 @@ function createCluster () {\n     terraform apply -auto-approve -var-file=${terraformVarDir}/${clusterTFVarsFile}.tfvars\n }\n \n+function createRoleBindings () {\n+kubectl -n kube-system create serviceaccount $okeclustername-sa", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b1915df960112318116beb62191b01378f9285d"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk5MDk5MQ==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r545990991", "createdAt": "2020-12-18T17:48:42Z", "author": {"login": "marinakog"}, "path": "kubernetes/samples/scripts/terraform/oke.create.sh", "diffHunk": "@@ -68,6 +69,60 @@ function createCluster () {\n     terraform apply -auto-approve -var-file=${terraformVarDir}/${clusterTFVarsFile}.tfvars\n }\n \n+function createRoleBindings () {\n+kubectl -n kube-system create serviceaccount $okeclustername-sa", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk3NjU4OA=="}, "originalCommit": {"oid": "3b1915df960112318116beb62191b01378f9285d"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTczMTcyOnYy", "diffSide": "RIGHT", "path": "kubernetes/samples/scripts/terraform/oke.create.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNzoyMzozNVrOIIryEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNzo0ODo0OVrOIIspkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk3Njg0OQ==", "bodyText": "add some indentation for the function body.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r545976849", "createdAt": "2020-12-18T17:23:35Z", "author": {"login": "xiancao"}, "path": "kubernetes/samples/scripts/terraform/oke.create.sh", "diffHunk": "@@ -68,6 +69,60 @@ function createCluster () {\n     terraform apply -auto-approve -var-file=${terraformVarDir}/${clusterTFVarsFile}.tfvars\n }\n \n+function createRoleBindings () {\n+kubectl -n kube-system create serviceaccount $okeclustername-sa\n+kubectl create clusterrolebinding add-on-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:$okeclustername-sa\n+TOKENNAME=`kubectl -n kube-system get serviceaccount/$okeclustername-sa -o jsonpath='{.secrets[0].name}'`\n+TOKEN=`kubectl -n kube-system get secret $TOKENNAME -o jsonpath='{.data.token}'| base64 --decode`\n+kubectl config set-credentials $okeclustername-sa --token=$TOKEN\n+kubectl config set-context --current --user=$okeclustername-sa\n+}\n+\n+function checkClusterRunning () {\n+\n+echo 'Confirm we have kubectl working...'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b1915df960112318116beb62191b01378f9285d"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk5MTA1Nw==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r545991057", "createdAt": "2020-12-18T17:48:49Z", "author": {"login": "marinakog"}, "path": "kubernetes/samples/scripts/terraform/oke.create.sh", "diffHunk": "@@ -68,6 +69,60 @@ function createCluster () {\n     terraform apply -auto-approve -var-file=${terraformVarDir}/${clusterTFVarsFile}.tfvars\n }\n \n+function createRoleBindings () {\n+kubectl -n kube-system create serviceaccount $okeclustername-sa\n+kubectl create clusterrolebinding add-on-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:$okeclustername-sa\n+TOKENNAME=`kubectl -n kube-system get serviceaccount/$okeclustername-sa -o jsonpath='{.secrets[0].name}'`\n+TOKEN=`kubectl -n kube-system get secret $TOKENNAME -o jsonpath='{.data.token}'| base64 --decode`\n+kubectl config set-credentials $okeclustername-sa --token=$TOKEN\n+kubectl config set-context --current --user=$okeclustername-sa\n+}\n+\n+function checkClusterRunning () {\n+\n+echo 'Confirm we have kubectl working...'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk3Njg0OQ=="}, "originalCommit": {"oid": "3b1915df960112318116beb62191b01378f9285d"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTczNzk5OnYy", "diffSide": "RIGHT", "path": "kubernetes/samples/scripts/terraform/oke.delete.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNzoyNToxN1rOIIr1zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNzo0ODo1NlrOIIsp1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk3NzgwNg==", "bodyText": "add some indentation for the function body.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r545977806", "createdAt": "2020-12-18T17:25:17Z", "author": {"login": "xiancao"}, "path": "kubernetes/samples/scripts/terraform/oke.delete.sh", "diffHunk": "@@ -0,0 +1,68 @@\n+#!/bin/bash\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# This script deletes provisioned OKE Kubernetes cluster using terraform (https://www.terraform.io/)\n+#\n+#\n+\n+set -o errexit\n+set -o pipefail\n+\n+function prop {\n+    grep \"${1}\" ${oci_property_file}| grep -v \"#\" | cut -d'=' -f2\n+}\n+\n+function cleanupLB {\n+  echo 'Clean up left over LB'\n+myvcn_id=`oci network vcn list --compartment-id $compartment_ocid  --display-name=${clusterName}_vcn | jq -r '.data[] | .id'`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b1915df960112318116beb62191b01378f9285d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk5MTEyNA==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r545991124", "createdAt": "2020-12-18T17:48:56Z", "author": {"login": "marinakog"}, "path": "kubernetes/samples/scripts/terraform/oke.delete.sh", "diffHunk": "@@ -0,0 +1,68 @@\n+#!/bin/bash\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# This script deletes provisioned OKE Kubernetes cluster using terraform (https://www.terraform.io/)\n+#\n+#\n+\n+set -o errexit\n+set -o pipefail\n+\n+function prop {\n+    grep \"${1}\" ${oci_property_file}| grep -v \"#\" | cut -d'=' -f2\n+}\n+\n+function cleanupLB {\n+  echo 'Clean up left over LB'\n+myvcn_id=`oci network vcn list --compartment-id $compartment_ocid  --display-name=${clusterName}_vcn | jq -r '.data[] | .id'`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk3NzgwNg=="}, "originalCommit": {"oid": "3b1915df960112318116beb62191b01378f9285d"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTc0MjkzOnYy", "diffSide": "RIGHT", "path": "oketest.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNzoyNjoyNVrOIIr4ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNzo0OTowM1rOIIsqFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk3ODQ2OA==", "bodyText": "delete this empty line", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r545978468", "createdAt": "2020-12-18T17:26:25Z", "author": {"login": "xiancao"}, "path": "oketest.sh", "diffHunk": "@@ -0,0 +1,194 @@\n+#!/bin/bash\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# This script provisions a OKE Kubernetes cluster using terraform (https://www.terraform.io/) and runs the new\n+# integration test suite against that cluster. Blog https://blogs.oracle.com/weblogicserver/easily-create-an-oci-container-engine-for-kubernetes-cluster-with-terraform-installer-to-run-weblogic-server\n+# provides detailed explanation for OCI properties file creation.\n+#\n+#", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b1915df960112318116beb62191b01378f9285d"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk5MTE5MQ==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r545991191", "createdAt": "2020-12-18T17:49:03Z", "author": {"login": "marinakog"}, "path": "oketest.sh", "diffHunk": "@@ -0,0 +1,194 @@\n+#!/bin/bash\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# This script provisions a OKE Kubernetes cluster using terraform (https://www.terraform.io/) and runs the new\n+# integration test suite against that cluster. Blog https://blogs.oracle.com/weblogicserver/easily-create-an-oci-container-engine-for-kubernetes-cluster-with-terraform-installer-to-run-weblogic-server\n+# provides detailed explanation for OCI properties file creation.\n+#\n+#", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk3ODQ2OA=="}, "originalCommit": {"oid": "3b1915df960112318116beb62191b01378f9285d"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTc0ODE1OnYy", "diffSide": "RIGHT", "path": "oketest.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNzoyNzozMlrOIIr7Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNzo0OToxMFrOIIsqYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk3OTE4Mg==", "bodyText": "delete this empty line", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r545979182", "createdAt": "2020-12-18T17:27:32Z", "author": {"login": "xiancao"}, "path": "oketest.sh", "diffHunk": "@@ -0,0 +1,194 @@\n+#!/bin/bash\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# This script provisions a OKE Kubernetes cluster using terraform (https://www.terraform.io/) and runs the new\n+# integration test suite against that cluster. Blog https://blogs.oracle.com/weblogicserver/easily-create-an-oci-container-engine-for-kubernetes-cluster-with-terraform-installer-to-run-weblogic-server\n+# provides detailed explanation for OCI properties file creation.\n+#\n+#\n+# As of May 6, 2020, the tests are clean on Kubernetes 1.16 with the following JDK workarounds:\n+# 1. Maven must be run with OpenJDK 11.0.7, available here: https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.7%2B10/OpenJDK11U-jdk_x64_linux_11.0.7_10.tar.gz\n+#    This is because of a critical bug fix. Unfortunately, the Oracle JDK 11.0.7 release was based on an earlier build and doesn't have the fix.\n+# 2. The WebLogic Image Tool will not accept an OpenJDK JDK. Set WIT_JAVA_HOME to an Oracle JDK Java Home.\n+#    For example, \"export WIT_JAVA_HOME=/usr/java/jdk-11.0.7\" before running this script.\n+#\n+set -o errexit\n+set -o pipefail\n+\n+script=\"${BASH_SOURCE[0]}\"\n+scriptDir=\"$( cd \"$( dirname \"${script}\" )\" && pwd )\"\n+\n+function usage {\n+  echo \"usage: ${script} [-n <terraform config files directory>] [-o <directory>] [-t <tests>] [-c <name>] [-p true|false] [-x <number_of_threads>] [-d <wdt_download_url>] [-i <wit_download_url>] [-m <maven_profile_name>] [-h]\"\n+  echo \"  -n Terraform config files directory \"\n+  echo \"  -o Output directory (optional) \"\n+  echo \"      (default: \\${WORKSPACE}/logdir/\\${BUILD_TAG}, if \\${WORKSPACE} defined, else /scratch/\\${USER}/kindtest) \"\n+  echo \"  -b  Availability Domain Name \"\n+  echo \"      (for example: VPGL:PHX-AD-1 , check limits quota with OCI admin)\"\n+  echo \"  -t Test filter (optional) \"\n+  echo \"      (default: **/It*) \"\n+  echo \"  -s Oracle Cloud Infra properties file  \"\n+  echo \"  -p Run It classes in parallel\"\n+  echo \"      (default: false) \"\n+  echo \"  -x Number of threads to run the classes in parallel\"\n+  echo \"      (default: 2) \"\n+  echo \"  -d WDT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-deploy-tooling/releases/latest) \"\n+  echo \"  -i WIT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-image-tool/releases/latest) \"\n+  echo \"  -m Run integration-tests or oke-cert \"\n+  echo \"      (default: integration-tests, supported values: oke-cert) \"\n+  echo \"  -h Help\"\n+  exit $1\n+}\n+\n+function prop {\n+    grep \"${1}\" ${oci_property_file}| grep -v \"#\" | cut -d'=' -f2\n+}\n+\n+if [[ -z \"${WORKSPACE}\" ]]; then\n+  outdir=\"/scratch/${USER}/oketest\"\n+  export WORKSPACE=${PWD}\n+else\n+  outdir=\"${WORKSPACE}/logdir/${BUILD_TAG}\"\n+fi\n+test_filter=\"**/It*\"\n+parallel_run=\"false\"\n+threads=\"2\"\n+wdt_download_url=\"https://github.com/oracle/weblogic-deploy-tooling/releases/latest\"\n+wit_download_url=\"https://github.com/oracle/weblogic-image-tool/releases/latest\"\n+maven_profile_name=\"integration-tests\"\n+\n+while getopts \":h:n:o:t:x:s:p:d:i:m:b:\" opt; do\n+  case $opt in\n+    n) terraform_script_dir_name=\"${OPTARG}\"\n+    ;;\n+    s) oci_property_file=\"${OPTARG}\"\n+    ;;\n+    b) availability_domain=\"${OPTARG}\"\n+    ;;\n+    o) outdir=\"${OPTARG}\"\n+    ;;\n+    t) test_filter=\"${OPTARG}\"\n+    ;;\n+    x) threads=\"${OPTARG}\"\n+    ;;\n+    p) parallel_run=\"${OPTARG}\"\n+    ;;\n+    d) wdt_download_url=\"${OPTARG}\"\n+    ;;\n+    i) wit_download_url=\"${OPTARG}\"\n+    ;;\n+    m) maven_profile_name=\"${OPTARG}\"\n+    ;;\n+    h) usage 0\n+    ;;\n+    d) echo \"Ignoring -d=${OPTARG}\"\n+    ;;\n+    i) echo \"Ignoring -i=${OPTARG}\"\n+    ;;\n+    *) usage 1\n+    ;;\n+  esac\n+done\n+\n+k8s_version=$(prop 'k8s.version')\n+echo \"Using Kubernetes version: ${k8s_version}\"\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b1915df960112318116beb62191b01378f9285d"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk5MTI2Ng==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r545991266", "createdAt": "2020-12-18T17:49:10Z", "author": {"login": "marinakog"}, "path": "oketest.sh", "diffHunk": "@@ -0,0 +1,194 @@\n+#!/bin/bash\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# This script provisions a OKE Kubernetes cluster using terraform (https://www.terraform.io/) and runs the new\n+# integration test suite against that cluster. Blog https://blogs.oracle.com/weblogicserver/easily-create-an-oci-container-engine-for-kubernetes-cluster-with-terraform-installer-to-run-weblogic-server\n+# provides detailed explanation for OCI properties file creation.\n+#\n+#\n+# As of May 6, 2020, the tests are clean on Kubernetes 1.16 with the following JDK workarounds:\n+# 1. Maven must be run with OpenJDK 11.0.7, available here: https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.7%2B10/OpenJDK11U-jdk_x64_linux_11.0.7_10.tar.gz\n+#    This is because of a critical bug fix. Unfortunately, the Oracle JDK 11.0.7 release was based on an earlier build and doesn't have the fix.\n+# 2. The WebLogic Image Tool will not accept an OpenJDK JDK. Set WIT_JAVA_HOME to an Oracle JDK Java Home.\n+#    For example, \"export WIT_JAVA_HOME=/usr/java/jdk-11.0.7\" before running this script.\n+#\n+set -o errexit\n+set -o pipefail\n+\n+script=\"${BASH_SOURCE[0]}\"\n+scriptDir=\"$( cd \"$( dirname \"${script}\" )\" && pwd )\"\n+\n+function usage {\n+  echo \"usage: ${script} [-n <terraform config files directory>] [-o <directory>] [-t <tests>] [-c <name>] [-p true|false] [-x <number_of_threads>] [-d <wdt_download_url>] [-i <wit_download_url>] [-m <maven_profile_name>] [-h]\"\n+  echo \"  -n Terraform config files directory \"\n+  echo \"  -o Output directory (optional) \"\n+  echo \"      (default: \\${WORKSPACE}/logdir/\\${BUILD_TAG}, if \\${WORKSPACE} defined, else /scratch/\\${USER}/kindtest) \"\n+  echo \"  -b  Availability Domain Name \"\n+  echo \"      (for example: VPGL:PHX-AD-1 , check limits quota with OCI admin)\"\n+  echo \"  -t Test filter (optional) \"\n+  echo \"      (default: **/It*) \"\n+  echo \"  -s Oracle Cloud Infra properties file  \"\n+  echo \"  -p Run It classes in parallel\"\n+  echo \"      (default: false) \"\n+  echo \"  -x Number of threads to run the classes in parallel\"\n+  echo \"      (default: 2) \"\n+  echo \"  -d WDT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-deploy-tooling/releases/latest) \"\n+  echo \"  -i WIT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-image-tool/releases/latest) \"\n+  echo \"  -m Run integration-tests or oke-cert \"\n+  echo \"      (default: integration-tests, supported values: oke-cert) \"\n+  echo \"  -h Help\"\n+  exit $1\n+}\n+\n+function prop {\n+    grep \"${1}\" ${oci_property_file}| grep -v \"#\" | cut -d'=' -f2\n+}\n+\n+if [[ -z \"${WORKSPACE}\" ]]; then\n+  outdir=\"/scratch/${USER}/oketest\"\n+  export WORKSPACE=${PWD}\n+else\n+  outdir=\"${WORKSPACE}/logdir/${BUILD_TAG}\"\n+fi\n+test_filter=\"**/It*\"\n+parallel_run=\"false\"\n+threads=\"2\"\n+wdt_download_url=\"https://github.com/oracle/weblogic-deploy-tooling/releases/latest\"\n+wit_download_url=\"https://github.com/oracle/weblogic-image-tool/releases/latest\"\n+maven_profile_name=\"integration-tests\"\n+\n+while getopts \":h:n:o:t:x:s:p:d:i:m:b:\" opt; do\n+  case $opt in\n+    n) terraform_script_dir_name=\"${OPTARG}\"\n+    ;;\n+    s) oci_property_file=\"${OPTARG}\"\n+    ;;\n+    b) availability_domain=\"${OPTARG}\"\n+    ;;\n+    o) outdir=\"${OPTARG}\"\n+    ;;\n+    t) test_filter=\"${OPTARG}\"\n+    ;;\n+    x) threads=\"${OPTARG}\"\n+    ;;\n+    p) parallel_run=\"${OPTARG}\"\n+    ;;\n+    d) wdt_download_url=\"${OPTARG}\"\n+    ;;\n+    i) wit_download_url=\"${OPTARG}\"\n+    ;;\n+    m) maven_profile_name=\"${OPTARG}\"\n+    ;;\n+    h) usage 0\n+    ;;\n+    d) echo \"Ignoring -d=${OPTARG}\"\n+    ;;\n+    i) echo \"Ignoring -i=${OPTARG}\"\n+    ;;\n+    *) usage 1\n+    ;;\n+  esac\n+done\n+\n+k8s_version=$(prop 'k8s.version')\n+echo \"Using Kubernetes version: ${k8s_version}\"\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk3OTE4Mg=="}, "originalCommit": {"oid": "3b1915df960112318116beb62191b01378f9285d"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTc0OTg1OnYy", "diffSide": "RIGHT", "path": "oketest.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNzoyODowM1rOIIr8Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNzo0OToxN1rOIIsqrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk3OTQ0Mw==", "bodyText": "delete this empty line", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r545979443", "createdAt": "2020-12-18T17:28:03Z", "author": {"login": "xiancao"}, "path": "oketest.sh", "diffHunk": "@@ -0,0 +1,194 @@\n+#!/bin/bash\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# This script provisions a OKE Kubernetes cluster using terraform (https://www.terraform.io/) and runs the new\n+# integration test suite against that cluster. Blog https://blogs.oracle.com/weblogicserver/easily-create-an-oci-container-engine-for-kubernetes-cluster-with-terraform-installer-to-run-weblogic-server\n+# provides detailed explanation for OCI properties file creation.\n+#\n+#\n+# As of May 6, 2020, the tests are clean on Kubernetes 1.16 with the following JDK workarounds:\n+# 1. Maven must be run with OpenJDK 11.0.7, available here: https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.7%2B10/OpenJDK11U-jdk_x64_linux_11.0.7_10.tar.gz\n+#    This is because of a critical bug fix. Unfortunately, the Oracle JDK 11.0.7 release was based on an earlier build and doesn't have the fix.\n+# 2. The WebLogic Image Tool will not accept an OpenJDK JDK. Set WIT_JAVA_HOME to an Oracle JDK Java Home.\n+#    For example, \"export WIT_JAVA_HOME=/usr/java/jdk-11.0.7\" before running this script.\n+#\n+set -o errexit\n+set -o pipefail\n+\n+script=\"${BASH_SOURCE[0]}\"\n+scriptDir=\"$( cd \"$( dirname \"${script}\" )\" && pwd )\"\n+\n+function usage {\n+  echo \"usage: ${script} [-n <terraform config files directory>] [-o <directory>] [-t <tests>] [-c <name>] [-p true|false] [-x <number_of_threads>] [-d <wdt_download_url>] [-i <wit_download_url>] [-m <maven_profile_name>] [-h]\"\n+  echo \"  -n Terraform config files directory \"\n+  echo \"  -o Output directory (optional) \"\n+  echo \"      (default: \\${WORKSPACE}/logdir/\\${BUILD_TAG}, if \\${WORKSPACE} defined, else /scratch/\\${USER}/kindtest) \"\n+  echo \"  -b  Availability Domain Name \"\n+  echo \"      (for example: VPGL:PHX-AD-1 , check limits quota with OCI admin)\"\n+  echo \"  -t Test filter (optional) \"\n+  echo \"      (default: **/It*) \"\n+  echo \"  -s Oracle Cloud Infra properties file  \"\n+  echo \"  -p Run It classes in parallel\"\n+  echo \"      (default: false) \"\n+  echo \"  -x Number of threads to run the classes in parallel\"\n+  echo \"      (default: 2) \"\n+  echo \"  -d WDT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-deploy-tooling/releases/latest) \"\n+  echo \"  -i WIT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-image-tool/releases/latest) \"\n+  echo \"  -m Run integration-tests or oke-cert \"\n+  echo \"      (default: integration-tests, supported values: oke-cert) \"\n+  echo \"  -h Help\"\n+  exit $1\n+}\n+\n+function prop {\n+    grep \"${1}\" ${oci_property_file}| grep -v \"#\" | cut -d'=' -f2\n+}\n+\n+if [[ -z \"${WORKSPACE}\" ]]; then\n+  outdir=\"/scratch/${USER}/oketest\"\n+  export WORKSPACE=${PWD}\n+else\n+  outdir=\"${WORKSPACE}/logdir/${BUILD_TAG}\"\n+fi\n+test_filter=\"**/It*\"\n+parallel_run=\"false\"\n+threads=\"2\"\n+wdt_download_url=\"https://github.com/oracle/weblogic-deploy-tooling/releases/latest\"\n+wit_download_url=\"https://github.com/oracle/weblogic-image-tool/releases/latest\"\n+maven_profile_name=\"integration-tests\"\n+\n+while getopts \":h:n:o:t:x:s:p:d:i:m:b:\" opt; do\n+  case $opt in\n+    n) terraform_script_dir_name=\"${OPTARG}\"\n+    ;;\n+    s) oci_property_file=\"${OPTARG}\"\n+    ;;\n+    b) availability_domain=\"${OPTARG}\"\n+    ;;\n+    o) outdir=\"${OPTARG}\"\n+    ;;\n+    t) test_filter=\"${OPTARG}\"\n+    ;;\n+    x) threads=\"${OPTARG}\"\n+    ;;\n+    p) parallel_run=\"${OPTARG}\"\n+    ;;\n+    d) wdt_download_url=\"${OPTARG}\"\n+    ;;\n+    i) wit_download_url=\"${OPTARG}\"\n+    ;;\n+    m) maven_profile_name=\"${OPTARG}\"\n+    ;;\n+    h) usage 0\n+    ;;\n+    d) echo \"Ignoring -d=${OPTARG}\"\n+    ;;\n+    i) echo \"Ignoring -i=${OPTARG}\"\n+    ;;\n+    *) usage 1\n+    ;;\n+  esac\n+done\n+\n+k8s_version=$(prop 'k8s.version')\n+echo \"Using Kubernetes version: ${k8s_version}\"\n+\n+\n+mkdir -m777 -p \"${outdir}\"\n+export RESULT_ROOT=\"${outdir}/wl_k8s_test_results\"\n+if [ -d \"${RESULT_ROOT}\" ]; then\n+  rm -Rf \"${RESULT_ROOT}/*\"\n+else\n+  mkdir -m777 \"${RESULT_ROOT}\"\n+fi\n+\n+echo \"Results will be in ${RESULT_ROOT}\"\n+\n+export PV_ROOT=\"${outdir}/k8s-pvroot\"\n+if [ -d \"${PV_ROOT}\" ]; then\n+  rm -Rf \"${PV_ROOT}/*\"\n+else\n+  mkdir -m777 \"${PV_ROOT}\"\n+fi\n+\n+echo \"Persistent volume files, if any, will be in ${PV_ROOT}\"\n+\n+echo 'Create a OKE cluster'\n+mkdir -p \"${WORKSPACE}/terraform\"\n+cp -rf ${terraform_script_dir_name}/*.tf ${WORKSPACE}/terraform/.\n+cp -rf ${WORKSPACE}/kubernetes/samples/scripts/terraform/template.tfvars ${WORKSPACE}/terraform/.\n+cp -rf ${WORKSPACE}/kubernetes/samples/scripts/terraform/*.sh ${WORKSPACE}/terraform/.\n+chmod 777 ${WORKSPACE}/terraform/*.sh\n+mkdir -p ${WORKSPACE}/terraform/terraforminstall\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b1915df960112318116beb62191b01378f9285d"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk5MTM0Mg==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r545991342", "createdAt": "2020-12-18T17:49:17Z", "author": {"login": "marinakog"}, "path": "oketest.sh", "diffHunk": "@@ -0,0 +1,194 @@\n+#!/bin/bash\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# This script provisions a OKE Kubernetes cluster using terraform (https://www.terraform.io/) and runs the new\n+# integration test suite against that cluster. Blog https://blogs.oracle.com/weblogicserver/easily-create-an-oci-container-engine-for-kubernetes-cluster-with-terraform-installer-to-run-weblogic-server\n+# provides detailed explanation for OCI properties file creation.\n+#\n+#\n+# As of May 6, 2020, the tests are clean on Kubernetes 1.16 with the following JDK workarounds:\n+# 1. Maven must be run with OpenJDK 11.0.7, available here: https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.7%2B10/OpenJDK11U-jdk_x64_linux_11.0.7_10.tar.gz\n+#    This is because of a critical bug fix. Unfortunately, the Oracle JDK 11.0.7 release was based on an earlier build and doesn't have the fix.\n+# 2. The WebLogic Image Tool will not accept an OpenJDK JDK. Set WIT_JAVA_HOME to an Oracle JDK Java Home.\n+#    For example, \"export WIT_JAVA_HOME=/usr/java/jdk-11.0.7\" before running this script.\n+#\n+set -o errexit\n+set -o pipefail\n+\n+script=\"${BASH_SOURCE[0]}\"\n+scriptDir=\"$( cd \"$( dirname \"${script}\" )\" && pwd )\"\n+\n+function usage {\n+  echo \"usage: ${script} [-n <terraform config files directory>] [-o <directory>] [-t <tests>] [-c <name>] [-p true|false] [-x <number_of_threads>] [-d <wdt_download_url>] [-i <wit_download_url>] [-m <maven_profile_name>] [-h]\"\n+  echo \"  -n Terraform config files directory \"\n+  echo \"  -o Output directory (optional) \"\n+  echo \"      (default: \\${WORKSPACE}/logdir/\\${BUILD_TAG}, if \\${WORKSPACE} defined, else /scratch/\\${USER}/kindtest) \"\n+  echo \"  -b  Availability Domain Name \"\n+  echo \"      (for example: VPGL:PHX-AD-1 , check limits quota with OCI admin)\"\n+  echo \"  -t Test filter (optional) \"\n+  echo \"      (default: **/It*) \"\n+  echo \"  -s Oracle Cloud Infra properties file  \"\n+  echo \"  -p Run It classes in parallel\"\n+  echo \"      (default: false) \"\n+  echo \"  -x Number of threads to run the classes in parallel\"\n+  echo \"      (default: 2) \"\n+  echo \"  -d WDT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-deploy-tooling/releases/latest) \"\n+  echo \"  -i WIT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-image-tool/releases/latest) \"\n+  echo \"  -m Run integration-tests or oke-cert \"\n+  echo \"      (default: integration-tests, supported values: oke-cert) \"\n+  echo \"  -h Help\"\n+  exit $1\n+}\n+\n+function prop {\n+    grep \"${1}\" ${oci_property_file}| grep -v \"#\" | cut -d'=' -f2\n+}\n+\n+if [[ -z \"${WORKSPACE}\" ]]; then\n+  outdir=\"/scratch/${USER}/oketest\"\n+  export WORKSPACE=${PWD}\n+else\n+  outdir=\"${WORKSPACE}/logdir/${BUILD_TAG}\"\n+fi\n+test_filter=\"**/It*\"\n+parallel_run=\"false\"\n+threads=\"2\"\n+wdt_download_url=\"https://github.com/oracle/weblogic-deploy-tooling/releases/latest\"\n+wit_download_url=\"https://github.com/oracle/weblogic-image-tool/releases/latest\"\n+maven_profile_name=\"integration-tests\"\n+\n+while getopts \":h:n:o:t:x:s:p:d:i:m:b:\" opt; do\n+  case $opt in\n+    n) terraform_script_dir_name=\"${OPTARG}\"\n+    ;;\n+    s) oci_property_file=\"${OPTARG}\"\n+    ;;\n+    b) availability_domain=\"${OPTARG}\"\n+    ;;\n+    o) outdir=\"${OPTARG}\"\n+    ;;\n+    t) test_filter=\"${OPTARG}\"\n+    ;;\n+    x) threads=\"${OPTARG}\"\n+    ;;\n+    p) parallel_run=\"${OPTARG}\"\n+    ;;\n+    d) wdt_download_url=\"${OPTARG}\"\n+    ;;\n+    i) wit_download_url=\"${OPTARG}\"\n+    ;;\n+    m) maven_profile_name=\"${OPTARG}\"\n+    ;;\n+    h) usage 0\n+    ;;\n+    d) echo \"Ignoring -d=${OPTARG}\"\n+    ;;\n+    i) echo \"Ignoring -i=${OPTARG}\"\n+    ;;\n+    *) usage 1\n+    ;;\n+  esac\n+done\n+\n+k8s_version=$(prop 'k8s.version')\n+echo \"Using Kubernetes version: ${k8s_version}\"\n+\n+\n+mkdir -m777 -p \"${outdir}\"\n+export RESULT_ROOT=\"${outdir}/wl_k8s_test_results\"\n+if [ -d \"${RESULT_ROOT}\" ]; then\n+  rm -Rf \"${RESULT_ROOT}/*\"\n+else\n+  mkdir -m777 \"${RESULT_ROOT}\"\n+fi\n+\n+echo \"Results will be in ${RESULT_ROOT}\"\n+\n+export PV_ROOT=\"${outdir}/k8s-pvroot\"\n+if [ -d \"${PV_ROOT}\" ]; then\n+  rm -Rf \"${PV_ROOT}/*\"\n+else\n+  mkdir -m777 \"${PV_ROOT}\"\n+fi\n+\n+echo \"Persistent volume files, if any, will be in ${PV_ROOT}\"\n+\n+echo 'Create a OKE cluster'\n+mkdir -p \"${WORKSPACE}/terraform\"\n+cp -rf ${terraform_script_dir_name}/*.tf ${WORKSPACE}/terraform/.\n+cp -rf ${WORKSPACE}/kubernetes/samples/scripts/terraform/template.tfvars ${WORKSPACE}/terraform/.\n+cp -rf ${WORKSPACE}/kubernetes/samples/scripts/terraform/*.sh ${WORKSPACE}/terraform/.\n+chmod 777 ${WORKSPACE}/terraform/*.sh\n+mkdir -p ${WORKSPACE}/terraform/terraforminstall\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk3OTQ0Mw=="}, "originalCommit": {"oid": "3b1915df960112318116beb62191b01378f9285d"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTc1MTk3OnYy", "diffSide": "RIGHT", "path": "oketest.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNzoyODoyOVrOIIr9YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNzoyODoyOVrOIIr9YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk3OTc0NA==", "bodyText": "add some indentation here.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r545979744", "createdAt": "2020-12-18T17:28:29Z", "author": {"login": "xiancao"}, "path": "oketest.sh", "diffHunk": "@@ -0,0 +1,194 @@\n+#!/bin/bash\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# This script provisions a OKE Kubernetes cluster using terraform (https://www.terraform.io/) and runs the new\n+# integration test suite against that cluster. Blog https://blogs.oracle.com/weblogicserver/easily-create-an-oci-container-engine-for-kubernetes-cluster-with-terraform-installer-to-run-weblogic-server\n+# provides detailed explanation for OCI properties file creation.\n+#\n+#\n+# As of May 6, 2020, the tests are clean on Kubernetes 1.16 with the following JDK workarounds:\n+# 1. Maven must be run with OpenJDK 11.0.7, available here: https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.7%2B10/OpenJDK11U-jdk_x64_linux_11.0.7_10.tar.gz\n+#    This is because of a critical bug fix. Unfortunately, the Oracle JDK 11.0.7 release was based on an earlier build and doesn't have the fix.\n+# 2. The WebLogic Image Tool will not accept an OpenJDK JDK. Set WIT_JAVA_HOME to an Oracle JDK Java Home.\n+#    For example, \"export WIT_JAVA_HOME=/usr/java/jdk-11.0.7\" before running this script.\n+#\n+set -o errexit\n+set -o pipefail\n+\n+script=\"${BASH_SOURCE[0]}\"\n+scriptDir=\"$( cd \"$( dirname \"${script}\" )\" && pwd )\"\n+\n+function usage {\n+  echo \"usage: ${script} [-n <terraform config files directory>] [-o <directory>] [-t <tests>] [-c <name>] [-p true|false] [-x <number_of_threads>] [-d <wdt_download_url>] [-i <wit_download_url>] [-m <maven_profile_name>] [-h]\"\n+  echo \"  -n Terraform config files directory \"\n+  echo \"  -o Output directory (optional) \"\n+  echo \"      (default: \\${WORKSPACE}/logdir/\\${BUILD_TAG}, if \\${WORKSPACE} defined, else /scratch/\\${USER}/kindtest) \"\n+  echo \"  -b  Availability Domain Name \"\n+  echo \"      (for example: VPGL:PHX-AD-1 , check limits quota with OCI admin)\"\n+  echo \"  -t Test filter (optional) \"\n+  echo \"      (default: **/It*) \"\n+  echo \"  -s Oracle Cloud Infra properties file  \"\n+  echo \"  -p Run It classes in parallel\"\n+  echo \"      (default: false) \"\n+  echo \"  -x Number of threads to run the classes in parallel\"\n+  echo \"      (default: 2) \"\n+  echo \"  -d WDT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-deploy-tooling/releases/latest) \"\n+  echo \"  -i WIT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-image-tool/releases/latest) \"\n+  echo \"  -m Run integration-tests or oke-cert \"\n+  echo \"      (default: integration-tests, supported values: oke-cert) \"\n+  echo \"  -h Help\"\n+  exit $1\n+}\n+\n+function prop {\n+    grep \"${1}\" ${oci_property_file}| grep -v \"#\" | cut -d'=' -f2\n+}\n+\n+if [[ -z \"${WORKSPACE}\" ]]; then\n+  outdir=\"/scratch/${USER}/oketest\"\n+  export WORKSPACE=${PWD}\n+else\n+  outdir=\"${WORKSPACE}/logdir/${BUILD_TAG}\"\n+fi\n+test_filter=\"**/It*\"\n+parallel_run=\"false\"\n+threads=\"2\"\n+wdt_download_url=\"https://github.com/oracle/weblogic-deploy-tooling/releases/latest\"\n+wit_download_url=\"https://github.com/oracle/weblogic-image-tool/releases/latest\"\n+maven_profile_name=\"integration-tests\"\n+\n+while getopts \":h:n:o:t:x:s:p:d:i:m:b:\" opt; do\n+  case $opt in\n+    n) terraform_script_dir_name=\"${OPTARG}\"\n+    ;;\n+    s) oci_property_file=\"${OPTARG}\"\n+    ;;\n+    b) availability_domain=\"${OPTARG}\"\n+    ;;\n+    o) outdir=\"${OPTARG}\"\n+    ;;\n+    t) test_filter=\"${OPTARG}\"\n+    ;;\n+    x) threads=\"${OPTARG}\"\n+    ;;\n+    p) parallel_run=\"${OPTARG}\"\n+    ;;\n+    d) wdt_download_url=\"${OPTARG}\"\n+    ;;\n+    i) wit_download_url=\"${OPTARG}\"\n+    ;;\n+    m) maven_profile_name=\"${OPTARG}\"\n+    ;;\n+    h) usage 0\n+    ;;\n+    d) echo \"Ignoring -d=${OPTARG}\"\n+    ;;\n+    i) echo \"Ignoring -i=${OPTARG}\"\n+    ;;\n+    *) usage 1\n+    ;;\n+  esac\n+done\n+\n+k8s_version=$(prop 'k8s.version')\n+echo \"Using Kubernetes version: ${k8s_version}\"\n+\n+\n+mkdir -m777 -p \"${outdir}\"\n+export RESULT_ROOT=\"${outdir}/wl_k8s_test_results\"\n+if [ -d \"${RESULT_ROOT}\" ]; then\n+  rm -Rf \"${RESULT_ROOT}/*\"\n+else\n+  mkdir -m777 \"${RESULT_ROOT}\"\n+fi\n+\n+echo \"Results will be in ${RESULT_ROOT}\"\n+\n+export PV_ROOT=\"${outdir}/k8s-pvroot\"\n+if [ -d \"${PV_ROOT}\" ]; then\n+  rm -Rf \"${PV_ROOT}/*\"\n+else\n+  mkdir -m777 \"${PV_ROOT}\"\n+fi\n+\n+echo \"Persistent volume files, if any, will be in ${PV_ROOT}\"\n+\n+echo 'Create a OKE cluster'\n+mkdir -p \"${WORKSPACE}/terraform\"\n+cp -rf ${terraform_script_dir_name}/*.tf ${WORKSPACE}/terraform/.\n+cp -rf ${WORKSPACE}/kubernetes/samples/scripts/terraform/template.tfvars ${WORKSPACE}/terraform/.\n+cp -rf ${WORKSPACE}/kubernetes/samples/scripts/terraform/*.sh ${WORKSPACE}/terraform/.\n+chmod 777 ${WORKSPACE}/terraform/*.sh\n+mkdir -p ${WORKSPACE}/terraform/terraforminstall\n+\n+\n+if ! sh ${WORKSPACE}/terraform/oke.create.sh ${oci_property_file} ${WORKSPACE}/terraform ; then\n+sh ${WORKSPACE}/terraform/oke.delete.sh ${oci_property_file} ${WORKSPACE}/terraform", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b1915df960112318116beb62191b01378f9285d"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTc1NjU0OnYy", "diffSide": "RIGHT", "path": "oketest.sh", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNzoyOTozM1rOIIr_1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODowMjoyNVrOIItGJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk4MDM3NQ==", "bodyText": "use same indentation in this section.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r545980375", "createdAt": "2020-12-18T17:29:33Z", "author": {"login": "xiancao"}, "path": "oketest.sh", "diffHunk": "@@ -0,0 +1,194 @@\n+#!/bin/bash\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# This script provisions a OKE Kubernetes cluster using terraform (https://www.terraform.io/) and runs the new\n+# integration test suite against that cluster. Blog https://blogs.oracle.com/weblogicserver/easily-create-an-oci-container-engine-for-kubernetes-cluster-with-terraform-installer-to-run-weblogic-server\n+# provides detailed explanation for OCI properties file creation.\n+#\n+#\n+# As of May 6, 2020, the tests are clean on Kubernetes 1.16 with the following JDK workarounds:\n+# 1. Maven must be run with OpenJDK 11.0.7, available here: https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.7%2B10/OpenJDK11U-jdk_x64_linux_11.0.7_10.tar.gz\n+#    This is because of a critical bug fix. Unfortunately, the Oracle JDK 11.0.7 release was based on an earlier build and doesn't have the fix.\n+# 2. The WebLogic Image Tool will not accept an OpenJDK JDK. Set WIT_JAVA_HOME to an Oracle JDK Java Home.\n+#    For example, \"export WIT_JAVA_HOME=/usr/java/jdk-11.0.7\" before running this script.\n+#\n+set -o errexit\n+set -o pipefail\n+\n+script=\"${BASH_SOURCE[0]}\"\n+scriptDir=\"$( cd \"$( dirname \"${script}\" )\" && pwd )\"\n+\n+function usage {\n+  echo \"usage: ${script} [-n <terraform config files directory>] [-o <directory>] [-t <tests>] [-c <name>] [-p true|false] [-x <number_of_threads>] [-d <wdt_download_url>] [-i <wit_download_url>] [-m <maven_profile_name>] [-h]\"\n+  echo \"  -n Terraform config files directory \"\n+  echo \"  -o Output directory (optional) \"\n+  echo \"      (default: \\${WORKSPACE}/logdir/\\${BUILD_TAG}, if \\${WORKSPACE} defined, else /scratch/\\${USER}/kindtest) \"\n+  echo \"  -b  Availability Domain Name \"\n+  echo \"      (for example: VPGL:PHX-AD-1 , check limits quota with OCI admin)\"\n+  echo \"  -t Test filter (optional) \"\n+  echo \"      (default: **/It*) \"\n+  echo \"  -s Oracle Cloud Infra properties file  \"\n+  echo \"  -p Run It classes in parallel\"\n+  echo \"      (default: false) \"\n+  echo \"  -x Number of threads to run the classes in parallel\"\n+  echo \"      (default: 2) \"\n+  echo \"  -d WDT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-deploy-tooling/releases/latest) \"\n+  echo \"  -i WIT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-image-tool/releases/latest) \"\n+  echo \"  -m Run integration-tests or oke-cert \"\n+  echo \"      (default: integration-tests, supported values: oke-cert) \"\n+  echo \"  -h Help\"\n+  exit $1\n+}\n+\n+function prop {\n+    grep \"${1}\" ${oci_property_file}| grep -v \"#\" | cut -d'=' -f2\n+}\n+\n+if [[ -z \"${WORKSPACE}\" ]]; then\n+  outdir=\"/scratch/${USER}/oketest\"\n+  export WORKSPACE=${PWD}\n+else\n+  outdir=\"${WORKSPACE}/logdir/${BUILD_TAG}\"\n+fi\n+test_filter=\"**/It*\"\n+parallel_run=\"false\"\n+threads=\"2\"\n+wdt_download_url=\"https://github.com/oracle/weblogic-deploy-tooling/releases/latest\"\n+wit_download_url=\"https://github.com/oracle/weblogic-image-tool/releases/latest\"\n+maven_profile_name=\"integration-tests\"\n+\n+while getopts \":h:n:o:t:x:s:p:d:i:m:b:\" opt; do\n+  case $opt in\n+    n) terraform_script_dir_name=\"${OPTARG}\"\n+    ;;\n+    s) oci_property_file=\"${OPTARG}\"\n+    ;;\n+    b) availability_domain=\"${OPTARG}\"\n+    ;;\n+    o) outdir=\"${OPTARG}\"\n+    ;;\n+    t) test_filter=\"${OPTARG}\"\n+    ;;\n+    x) threads=\"${OPTARG}\"\n+    ;;\n+    p) parallel_run=\"${OPTARG}\"\n+    ;;\n+    d) wdt_download_url=\"${OPTARG}\"\n+    ;;\n+    i) wit_download_url=\"${OPTARG}\"\n+    ;;\n+    m) maven_profile_name=\"${OPTARG}\"\n+    ;;\n+    h) usage 0\n+    ;;\n+    d) echo \"Ignoring -d=${OPTARG}\"\n+    ;;\n+    i) echo \"Ignoring -i=${OPTARG}\"\n+    ;;\n+    *) usage 1\n+    ;;\n+  esac\n+done\n+\n+k8s_version=$(prop 'k8s.version')\n+echo \"Using Kubernetes version: ${k8s_version}\"\n+\n+\n+mkdir -m777 -p \"${outdir}\"\n+export RESULT_ROOT=\"${outdir}/wl_k8s_test_results\"\n+if [ -d \"${RESULT_ROOT}\" ]; then\n+  rm -Rf \"${RESULT_ROOT}/*\"\n+else\n+  mkdir -m777 \"${RESULT_ROOT}\"\n+fi\n+\n+echo \"Results will be in ${RESULT_ROOT}\"\n+\n+export PV_ROOT=\"${outdir}/k8s-pvroot\"\n+if [ -d \"${PV_ROOT}\" ]; then\n+  rm -Rf \"${PV_ROOT}/*\"\n+else\n+  mkdir -m777 \"${PV_ROOT}\"\n+fi\n+\n+echo \"Persistent volume files, if any, will be in ${PV_ROOT}\"\n+\n+echo 'Create a OKE cluster'\n+mkdir -p \"${WORKSPACE}/terraform\"\n+cp -rf ${terraform_script_dir_name}/*.tf ${WORKSPACE}/terraform/.\n+cp -rf ${WORKSPACE}/kubernetes/samples/scripts/terraform/template.tfvars ${WORKSPACE}/terraform/.\n+cp -rf ${WORKSPACE}/kubernetes/samples/scripts/terraform/*.sh ${WORKSPACE}/terraform/.\n+chmod 777 ${WORKSPACE}/terraform/*.sh\n+mkdir -p ${WORKSPACE}/terraform/terraforminstall\n+\n+\n+if ! sh ${WORKSPACE}/terraform/oke.create.sh ${oci_property_file} ${WORKSPACE}/terraform ; then\n+sh ${WORKSPACE}/terraform/oke.delete.sh ${oci_property_file} ${WORKSPACE}/terraform\n+fi\n+\n+clusterName=$(prop 'okeclustername')\n+\n+export KUBECONFIG=${WORKSPACE}/terraform/${clusterName}_kubeconfig\n+export PATH=${WORKSPACE}/terraform/terraforminstall:$PATH\n+\n+echo \"creating storage class to setup OFSS ...\"\n+\n+echo \"getting MountTarget ID\"\n+compartment_ocid=$(prop 'compartment.ocid')\n+mount_target_id=`oci fs mount-target  list --compartment-id=$compartment_ocid  --display-name=${clusterName}-mt --availability-domain=${availability_domain} | jq -r '.data[] | .id'`\n+#export mount_target_id=$mount_target_id\n+mt_privateip_id=`oci fs mount-target  list --compartment-id=$compartment_ocid  --display-name=${clusterName}-mt --availability-domain=${availability_domain} | jq -r '.data[] | .\"private-ip-ids\"[]'`\n+\n+mt_private_ip=`oci network private-ip get --private-ip-id $mt_privateip_id | jq -r '.data | .\"ip-address\"'`\n+export NFS_SERVER=$mt_private_ip\n+echo \"Using NFS Server ${NFS_SERVER}\"\n+\n+echo \"Creating Storage Class to mount OFSS\"\n+\n+cat << EOF | kubectl apply -f -\n+kind: StorageClass\n+apiVersion: storage.k8s.io/v1beta1\n+metadata:\n+  name: oci-fss\n+provisioner: oracle.com/oci-fss\n+parameters:\n+  # Insert mount target from the FSS here\n+  mntTargetId: ${mount_target_id}\n+EOF\n+\n+echo 'Set up test running ENVVARs...'\n+NODE_IP=`kubectl get nodes -o wide| awk '{print $7}'| tail -n+3`\n+if [ -z \"$NODE_IP\" ]; then\n+\techo \"retry get node ip \";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b1915df960112318116beb62191b01378f9285d"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk5MTQyMw==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r545991423", "createdAt": "2020-12-18T17:49:24Z", "author": {"login": "marinakog"}, "path": "oketest.sh", "diffHunk": "@@ -0,0 +1,194 @@\n+#!/bin/bash\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# This script provisions a OKE Kubernetes cluster using terraform (https://www.terraform.io/) and runs the new\n+# integration test suite against that cluster. Blog https://blogs.oracle.com/weblogicserver/easily-create-an-oci-container-engine-for-kubernetes-cluster-with-terraform-installer-to-run-weblogic-server\n+# provides detailed explanation for OCI properties file creation.\n+#\n+#\n+# As of May 6, 2020, the tests are clean on Kubernetes 1.16 with the following JDK workarounds:\n+# 1. Maven must be run with OpenJDK 11.0.7, available here: https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.7%2B10/OpenJDK11U-jdk_x64_linux_11.0.7_10.tar.gz\n+#    This is because of a critical bug fix. Unfortunately, the Oracle JDK 11.0.7 release was based on an earlier build and doesn't have the fix.\n+# 2. The WebLogic Image Tool will not accept an OpenJDK JDK. Set WIT_JAVA_HOME to an Oracle JDK Java Home.\n+#    For example, \"export WIT_JAVA_HOME=/usr/java/jdk-11.0.7\" before running this script.\n+#\n+set -o errexit\n+set -o pipefail\n+\n+script=\"${BASH_SOURCE[0]}\"\n+scriptDir=\"$( cd \"$( dirname \"${script}\" )\" && pwd )\"\n+\n+function usage {\n+  echo \"usage: ${script} [-n <terraform config files directory>] [-o <directory>] [-t <tests>] [-c <name>] [-p true|false] [-x <number_of_threads>] [-d <wdt_download_url>] [-i <wit_download_url>] [-m <maven_profile_name>] [-h]\"\n+  echo \"  -n Terraform config files directory \"\n+  echo \"  -o Output directory (optional) \"\n+  echo \"      (default: \\${WORKSPACE}/logdir/\\${BUILD_TAG}, if \\${WORKSPACE} defined, else /scratch/\\${USER}/kindtest) \"\n+  echo \"  -b  Availability Domain Name \"\n+  echo \"      (for example: VPGL:PHX-AD-1 , check limits quota with OCI admin)\"\n+  echo \"  -t Test filter (optional) \"\n+  echo \"      (default: **/It*) \"\n+  echo \"  -s Oracle Cloud Infra properties file  \"\n+  echo \"  -p Run It classes in parallel\"\n+  echo \"      (default: false) \"\n+  echo \"  -x Number of threads to run the classes in parallel\"\n+  echo \"      (default: 2) \"\n+  echo \"  -d WDT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-deploy-tooling/releases/latest) \"\n+  echo \"  -i WIT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-image-tool/releases/latest) \"\n+  echo \"  -m Run integration-tests or oke-cert \"\n+  echo \"      (default: integration-tests, supported values: oke-cert) \"\n+  echo \"  -h Help\"\n+  exit $1\n+}\n+\n+function prop {\n+    grep \"${1}\" ${oci_property_file}| grep -v \"#\" | cut -d'=' -f2\n+}\n+\n+if [[ -z \"${WORKSPACE}\" ]]; then\n+  outdir=\"/scratch/${USER}/oketest\"\n+  export WORKSPACE=${PWD}\n+else\n+  outdir=\"${WORKSPACE}/logdir/${BUILD_TAG}\"\n+fi\n+test_filter=\"**/It*\"\n+parallel_run=\"false\"\n+threads=\"2\"\n+wdt_download_url=\"https://github.com/oracle/weblogic-deploy-tooling/releases/latest\"\n+wit_download_url=\"https://github.com/oracle/weblogic-image-tool/releases/latest\"\n+maven_profile_name=\"integration-tests\"\n+\n+while getopts \":h:n:o:t:x:s:p:d:i:m:b:\" opt; do\n+  case $opt in\n+    n) terraform_script_dir_name=\"${OPTARG}\"\n+    ;;\n+    s) oci_property_file=\"${OPTARG}\"\n+    ;;\n+    b) availability_domain=\"${OPTARG}\"\n+    ;;\n+    o) outdir=\"${OPTARG}\"\n+    ;;\n+    t) test_filter=\"${OPTARG}\"\n+    ;;\n+    x) threads=\"${OPTARG}\"\n+    ;;\n+    p) parallel_run=\"${OPTARG}\"\n+    ;;\n+    d) wdt_download_url=\"${OPTARG}\"\n+    ;;\n+    i) wit_download_url=\"${OPTARG}\"\n+    ;;\n+    m) maven_profile_name=\"${OPTARG}\"\n+    ;;\n+    h) usage 0\n+    ;;\n+    d) echo \"Ignoring -d=${OPTARG}\"\n+    ;;\n+    i) echo \"Ignoring -i=${OPTARG}\"\n+    ;;\n+    *) usage 1\n+    ;;\n+  esac\n+done\n+\n+k8s_version=$(prop 'k8s.version')\n+echo \"Using Kubernetes version: ${k8s_version}\"\n+\n+\n+mkdir -m777 -p \"${outdir}\"\n+export RESULT_ROOT=\"${outdir}/wl_k8s_test_results\"\n+if [ -d \"${RESULT_ROOT}\" ]; then\n+  rm -Rf \"${RESULT_ROOT}/*\"\n+else\n+  mkdir -m777 \"${RESULT_ROOT}\"\n+fi\n+\n+echo \"Results will be in ${RESULT_ROOT}\"\n+\n+export PV_ROOT=\"${outdir}/k8s-pvroot\"\n+if [ -d \"${PV_ROOT}\" ]; then\n+  rm -Rf \"${PV_ROOT}/*\"\n+else\n+  mkdir -m777 \"${PV_ROOT}\"\n+fi\n+\n+echo \"Persistent volume files, if any, will be in ${PV_ROOT}\"\n+\n+echo 'Create a OKE cluster'\n+mkdir -p \"${WORKSPACE}/terraform\"\n+cp -rf ${terraform_script_dir_name}/*.tf ${WORKSPACE}/terraform/.\n+cp -rf ${WORKSPACE}/kubernetes/samples/scripts/terraform/template.tfvars ${WORKSPACE}/terraform/.\n+cp -rf ${WORKSPACE}/kubernetes/samples/scripts/terraform/*.sh ${WORKSPACE}/terraform/.\n+chmod 777 ${WORKSPACE}/terraform/*.sh\n+mkdir -p ${WORKSPACE}/terraform/terraforminstall\n+\n+\n+if ! sh ${WORKSPACE}/terraform/oke.create.sh ${oci_property_file} ${WORKSPACE}/terraform ; then\n+sh ${WORKSPACE}/terraform/oke.delete.sh ${oci_property_file} ${WORKSPACE}/terraform\n+fi\n+\n+clusterName=$(prop 'okeclustername')\n+\n+export KUBECONFIG=${WORKSPACE}/terraform/${clusterName}_kubeconfig\n+export PATH=${WORKSPACE}/terraform/terraforminstall:$PATH\n+\n+echo \"creating storage class to setup OFSS ...\"\n+\n+echo \"getting MountTarget ID\"\n+compartment_ocid=$(prop 'compartment.ocid')\n+mount_target_id=`oci fs mount-target  list --compartment-id=$compartment_ocid  --display-name=${clusterName}-mt --availability-domain=${availability_domain} | jq -r '.data[] | .id'`\n+#export mount_target_id=$mount_target_id\n+mt_privateip_id=`oci fs mount-target  list --compartment-id=$compartment_ocid  --display-name=${clusterName}-mt --availability-domain=${availability_domain} | jq -r '.data[] | .\"private-ip-ids\"[]'`\n+\n+mt_private_ip=`oci network private-ip get --private-ip-id $mt_privateip_id | jq -r '.data | .\"ip-address\"'`\n+export NFS_SERVER=$mt_private_ip\n+echo \"Using NFS Server ${NFS_SERVER}\"\n+\n+echo \"Creating Storage Class to mount OFSS\"\n+\n+cat << EOF | kubectl apply -f -\n+kind: StorageClass\n+apiVersion: storage.k8s.io/v1beta1\n+metadata:\n+  name: oci-fss\n+provisioner: oracle.com/oci-fss\n+parameters:\n+  # Insert mount target from the FSS here\n+  mntTargetId: ${mount_target_id}\n+EOF\n+\n+echo 'Set up test running ENVVARs...'\n+NODE_IP=`kubectl get nodes -o wide| awk '{print $7}'| tail -n+3`\n+if [ -z \"$NODE_IP\" ]; then\n+\techo \"retry get node ip \";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk4MDM3NQ=="}, "originalCommit": {"oid": "3b1915df960112318116beb62191b01378f9285d"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk5ODM3Mg==", "bodyText": "change this indentation to the same as the next line.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r545998372", "createdAt": "2020-12-18T18:02:25Z", "author": {"login": "xiancao"}, "path": "oketest.sh", "diffHunk": "@@ -0,0 +1,194 @@\n+#!/bin/bash\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# This script provisions a OKE Kubernetes cluster using terraform (https://www.terraform.io/) and runs the new\n+# integration test suite against that cluster. Blog https://blogs.oracle.com/weblogicserver/easily-create-an-oci-container-engine-for-kubernetes-cluster-with-terraform-installer-to-run-weblogic-server\n+# provides detailed explanation for OCI properties file creation.\n+#\n+#\n+# As of May 6, 2020, the tests are clean on Kubernetes 1.16 with the following JDK workarounds:\n+# 1. Maven must be run with OpenJDK 11.0.7, available here: https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.7%2B10/OpenJDK11U-jdk_x64_linux_11.0.7_10.tar.gz\n+#    This is because of a critical bug fix. Unfortunately, the Oracle JDK 11.0.7 release was based on an earlier build and doesn't have the fix.\n+# 2. The WebLogic Image Tool will not accept an OpenJDK JDK. Set WIT_JAVA_HOME to an Oracle JDK Java Home.\n+#    For example, \"export WIT_JAVA_HOME=/usr/java/jdk-11.0.7\" before running this script.\n+#\n+set -o errexit\n+set -o pipefail\n+\n+script=\"${BASH_SOURCE[0]}\"\n+scriptDir=\"$( cd \"$( dirname \"${script}\" )\" && pwd )\"\n+\n+function usage {\n+  echo \"usage: ${script} [-n <terraform config files directory>] [-o <directory>] [-t <tests>] [-c <name>] [-p true|false] [-x <number_of_threads>] [-d <wdt_download_url>] [-i <wit_download_url>] [-m <maven_profile_name>] [-h]\"\n+  echo \"  -n Terraform config files directory \"\n+  echo \"  -o Output directory (optional) \"\n+  echo \"      (default: \\${WORKSPACE}/logdir/\\${BUILD_TAG}, if \\${WORKSPACE} defined, else /scratch/\\${USER}/kindtest) \"\n+  echo \"  -b  Availability Domain Name \"\n+  echo \"      (for example: VPGL:PHX-AD-1 , check limits quota with OCI admin)\"\n+  echo \"  -t Test filter (optional) \"\n+  echo \"      (default: **/It*) \"\n+  echo \"  -s Oracle Cloud Infra properties file  \"\n+  echo \"  -p Run It classes in parallel\"\n+  echo \"      (default: false) \"\n+  echo \"  -x Number of threads to run the classes in parallel\"\n+  echo \"      (default: 2) \"\n+  echo \"  -d WDT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-deploy-tooling/releases/latest) \"\n+  echo \"  -i WIT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-image-tool/releases/latest) \"\n+  echo \"  -m Run integration-tests or oke-cert \"\n+  echo \"      (default: integration-tests, supported values: oke-cert) \"\n+  echo \"  -h Help\"\n+  exit $1\n+}\n+\n+function prop {\n+    grep \"${1}\" ${oci_property_file}| grep -v \"#\" | cut -d'=' -f2\n+}\n+\n+if [[ -z \"${WORKSPACE}\" ]]; then\n+  outdir=\"/scratch/${USER}/oketest\"\n+  export WORKSPACE=${PWD}\n+else\n+  outdir=\"${WORKSPACE}/logdir/${BUILD_TAG}\"\n+fi\n+test_filter=\"**/It*\"\n+parallel_run=\"false\"\n+threads=\"2\"\n+wdt_download_url=\"https://github.com/oracle/weblogic-deploy-tooling/releases/latest\"\n+wit_download_url=\"https://github.com/oracle/weblogic-image-tool/releases/latest\"\n+maven_profile_name=\"integration-tests\"\n+\n+while getopts \":h:n:o:t:x:s:p:d:i:m:b:\" opt; do\n+  case $opt in\n+    n) terraform_script_dir_name=\"${OPTARG}\"\n+    ;;\n+    s) oci_property_file=\"${OPTARG}\"\n+    ;;\n+    b) availability_domain=\"${OPTARG}\"\n+    ;;\n+    o) outdir=\"${OPTARG}\"\n+    ;;\n+    t) test_filter=\"${OPTARG}\"\n+    ;;\n+    x) threads=\"${OPTARG}\"\n+    ;;\n+    p) parallel_run=\"${OPTARG}\"\n+    ;;\n+    d) wdt_download_url=\"${OPTARG}\"\n+    ;;\n+    i) wit_download_url=\"${OPTARG}\"\n+    ;;\n+    m) maven_profile_name=\"${OPTARG}\"\n+    ;;\n+    h) usage 0\n+    ;;\n+    d) echo \"Ignoring -d=${OPTARG}\"\n+    ;;\n+    i) echo \"Ignoring -i=${OPTARG}\"\n+    ;;\n+    *) usage 1\n+    ;;\n+  esac\n+done\n+\n+k8s_version=$(prop 'k8s.version')\n+echo \"Using Kubernetes version: ${k8s_version}\"\n+\n+\n+mkdir -m777 -p \"${outdir}\"\n+export RESULT_ROOT=\"${outdir}/wl_k8s_test_results\"\n+if [ -d \"${RESULT_ROOT}\" ]; then\n+  rm -Rf \"${RESULT_ROOT}/*\"\n+else\n+  mkdir -m777 \"${RESULT_ROOT}\"\n+fi\n+\n+echo \"Results will be in ${RESULT_ROOT}\"\n+\n+export PV_ROOT=\"${outdir}/k8s-pvroot\"\n+if [ -d \"${PV_ROOT}\" ]; then\n+  rm -Rf \"${PV_ROOT}/*\"\n+else\n+  mkdir -m777 \"${PV_ROOT}\"\n+fi\n+\n+echo \"Persistent volume files, if any, will be in ${PV_ROOT}\"\n+\n+echo 'Create a OKE cluster'\n+mkdir -p \"${WORKSPACE}/terraform\"\n+cp -rf ${terraform_script_dir_name}/*.tf ${WORKSPACE}/terraform/.\n+cp -rf ${WORKSPACE}/kubernetes/samples/scripts/terraform/template.tfvars ${WORKSPACE}/terraform/.\n+cp -rf ${WORKSPACE}/kubernetes/samples/scripts/terraform/*.sh ${WORKSPACE}/terraform/.\n+chmod 777 ${WORKSPACE}/terraform/*.sh\n+mkdir -p ${WORKSPACE}/terraform/terraforminstall\n+\n+\n+if ! sh ${WORKSPACE}/terraform/oke.create.sh ${oci_property_file} ${WORKSPACE}/terraform ; then\n+sh ${WORKSPACE}/terraform/oke.delete.sh ${oci_property_file} ${WORKSPACE}/terraform\n+fi\n+\n+clusterName=$(prop 'okeclustername')\n+\n+export KUBECONFIG=${WORKSPACE}/terraform/${clusterName}_kubeconfig\n+export PATH=${WORKSPACE}/terraform/terraforminstall:$PATH\n+\n+echo \"creating storage class to setup OFSS ...\"\n+\n+echo \"getting MountTarget ID\"\n+compartment_ocid=$(prop 'compartment.ocid')\n+mount_target_id=`oci fs mount-target  list --compartment-id=$compartment_ocid  --display-name=${clusterName}-mt --availability-domain=${availability_domain} | jq -r '.data[] | .id'`\n+#export mount_target_id=$mount_target_id\n+mt_privateip_id=`oci fs mount-target  list --compartment-id=$compartment_ocid  --display-name=${clusterName}-mt --availability-domain=${availability_domain} | jq -r '.data[] | .\"private-ip-ids\"[]'`\n+\n+mt_private_ip=`oci network private-ip get --private-ip-id $mt_privateip_id | jq -r '.data | .\"ip-address\"'`\n+export NFS_SERVER=$mt_private_ip\n+echo \"Using NFS Server ${NFS_SERVER}\"\n+\n+echo \"Creating Storage Class to mount OFSS\"\n+\n+cat << EOF | kubectl apply -f -\n+kind: StorageClass\n+apiVersion: storage.k8s.io/v1beta1\n+metadata:\n+  name: oci-fss\n+provisioner: oracle.com/oci-fss\n+parameters:\n+  # Insert mount target from the FSS here\n+  mntTargetId: ${mount_target_id}\n+EOF\n+\n+echo 'Set up test running ENVVARs...'\n+NODE_IP=`kubectl get nodes -o wide| awk '{print $7}'| tail -n+3`\n+if [ -z \"$NODE_IP\" ]; then\n+\techo \"retry get node ip \";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk4MDM3NQ=="}, "originalCommit": {"oid": "3b1915df960112318116beb62191b01378f9285d"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTc1OTg0OnYy", "diffSide": "RIGHT", "path": "oketest.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNzozMDoxNVrOIIsBjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNzo0OTozM1rOIIsrPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk4MDgxMw==", "bodyText": "add indentation in this section", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r545980813", "createdAt": "2020-12-18T17:30:15Z", "author": {"login": "xiancao"}, "path": "oketest.sh", "diffHunk": "@@ -0,0 +1,194 @@\n+#!/bin/bash\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# This script provisions a OKE Kubernetes cluster using terraform (https://www.terraform.io/) and runs the new\n+# integration test suite against that cluster. Blog https://blogs.oracle.com/weblogicserver/easily-create-an-oci-container-engine-for-kubernetes-cluster-with-terraform-installer-to-run-weblogic-server\n+# provides detailed explanation for OCI properties file creation.\n+#\n+#\n+# As of May 6, 2020, the tests are clean on Kubernetes 1.16 with the following JDK workarounds:\n+# 1. Maven must be run with OpenJDK 11.0.7, available here: https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.7%2B10/OpenJDK11U-jdk_x64_linux_11.0.7_10.tar.gz\n+#    This is because of a critical bug fix. Unfortunately, the Oracle JDK 11.0.7 release was based on an earlier build and doesn't have the fix.\n+# 2. The WebLogic Image Tool will not accept an OpenJDK JDK. Set WIT_JAVA_HOME to an Oracle JDK Java Home.\n+#    For example, \"export WIT_JAVA_HOME=/usr/java/jdk-11.0.7\" before running this script.\n+#\n+set -o errexit\n+set -o pipefail\n+\n+script=\"${BASH_SOURCE[0]}\"\n+scriptDir=\"$( cd \"$( dirname \"${script}\" )\" && pwd )\"\n+\n+function usage {\n+  echo \"usage: ${script} [-n <terraform config files directory>] [-o <directory>] [-t <tests>] [-c <name>] [-p true|false] [-x <number_of_threads>] [-d <wdt_download_url>] [-i <wit_download_url>] [-m <maven_profile_name>] [-h]\"\n+  echo \"  -n Terraform config files directory \"\n+  echo \"  -o Output directory (optional) \"\n+  echo \"      (default: \\${WORKSPACE}/logdir/\\${BUILD_TAG}, if \\${WORKSPACE} defined, else /scratch/\\${USER}/kindtest) \"\n+  echo \"  -b  Availability Domain Name \"\n+  echo \"      (for example: VPGL:PHX-AD-1 , check limits quota with OCI admin)\"\n+  echo \"  -t Test filter (optional) \"\n+  echo \"      (default: **/It*) \"\n+  echo \"  -s Oracle Cloud Infra properties file  \"\n+  echo \"  -p Run It classes in parallel\"\n+  echo \"      (default: false) \"\n+  echo \"  -x Number of threads to run the classes in parallel\"\n+  echo \"      (default: 2) \"\n+  echo \"  -d WDT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-deploy-tooling/releases/latest) \"\n+  echo \"  -i WIT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-image-tool/releases/latest) \"\n+  echo \"  -m Run integration-tests or oke-cert \"\n+  echo \"      (default: integration-tests, supported values: oke-cert) \"\n+  echo \"  -h Help\"\n+  exit $1\n+}\n+\n+function prop {\n+    grep \"${1}\" ${oci_property_file}| grep -v \"#\" | cut -d'=' -f2\n+}\n+\n+if [[ -z \"${WORKSPACE}\" ]]; then\n+  outdir=\"/scratch/${USER}/oketest\"\n+  export WORKSPACE=${PWD}\n+else\n+  outdir=\"${WORKSPACE}/logdir/${BUILD_TAG}\"\n+fi\n+test_filter=\"**/It*\"\n+parallel_run=\"false\"\n+threads=\"2\"\n+wdt_download_url=\"https://github.com/oracle/weblogic-deploy-tooling/releases/latest\"\n+wit_download_url=\"https://github.com/oracle/weblogic-image-tool/releases/latest\"\n+maven_profile_name=\"integration-tests\"\n+\n+while getopts \":h:n:o:t:x:s:p:d:i:m:b:\" opt; do\n+  case $opt in\n+    n) terraform_script_dir_name=\"${OPTARG}\"\n+    ;;\n+    s) oci_property_file=\"${OPTARG}\"\n+    ;;\n+    b) availability_domain=\"${OPTARG}\"\n+    ;;\n+    o) outdir=\"${OPTARG}\"\n+    ;;\n+    t) test_filter=\"${OPTARG}\"\n+    ;;\n+    x) threads=\"${OPTARG}\"\n+    ;;\n+    p) parallel_run=\"${OPTARG}\"\n+    ;;\n+    d) wdt_download_url=\"${OPTARG}\"\n+    ;;\n+    i) wit_download_url=\"${OPTARG}\"\n+    ;;\n+    m) maven_profile_name=\"${OPTARG}\"\n+    ;;\n+    h) usage 0\n+    ;;\n+    d) echo \"Ignoring -d=${OPTARG}\"\n+    ;;\n+    i) echo \"Ignoring -i=${OPTARG}\"\n+    ;;\n+    *) usage 1\n+    ;;\n+  esac\n+done\n+\n+k8s_version=$(prop 'k8s.version')\n+echo \"Using Kubernetes version: ${k8s_version}\"\n+\n+\n+mkdir -m777 -p \"${outdir}\"\n+export RESULT_ROOT=\"${outdir}/wl_k8s_test_results\"\n+if [ -d \"${RESULT_ROOT}\" ]; then\n+  rm -Rf \"${RESULT_ROOT}/*\"\n+else\n+  mkdir -m777 \"${RESULT_ROOT}\"\n+fi\n+\n+echo \"Results will be in ${RESULT_ROOT}\"\n+\n+export PV_ROOT=\"${outdir}/k8s-pvroot\"\n+if [ -d \"${PV_ROOT}\" ]; then\n+  rm -Rf \"${PV_ROOT}/*\"\n+else\n+  mkdir -m777 \"${PV_ROOT}\"\n+fi\n+\n+echo \"Persistent volume files, if any, will be in ${PV_ROOT}\"\n+\n+echo 'Create a OKE cluster'\n+mkdir -p \"${WORKSPACE}/terraform\"\n+cp -rf ${terraform_script_dir_name}/*.tf ${WORKSPACE}/terraform/.\n+cp -rf ${WORKSPACE}/kubernetes/samples/scripts/terraform/template.tfvars ${WORKSPACE}/terraform/.\n+cp -rf ${WORKSPACE}/kubernetes/samples/scripts/terraform/*.sh ${WORKSPACE}/terraform/.\n+chmod 777 ${WORKSPACE}/terraform/*.sh\n+mkdir -p ${WORKSPACE}/terraform/terraforminstall\n+\n+\n+if ! sh ${WORKSPACE}/terraform/oke.create.sh ${oci_property_file} ${WORKSPACE}/terraform ; then\n+sh ${WORKSPACE}/terraform/oke.delete.sh ${oci_property_file} ${WORKSPACE}/terraform\n+fi\n+\n+clusterName=$(prop 'okeclustername')\n+\n+export KUBECONFIG=${WORKSPACE}/terraform/${clusterName}_kubeconfig\n+export PATH=${WORKSPACE}/terraform/terraforminstall:$PATH\n+\n+echo \"creating storage class to setup OFSS ...\"\n+\n+echo \"getting MountTarget ID\"\n+compartment_ocid=$(prop 'compartment.ocid')\n+mount_target_id=`oci fs mount-target  list --compartment-id=$compartment_ocid  --display-name=${clusterName}-mt --availability-domain=${availability_domain} | jq -r '.data[] | .id'`\n+#export mount_target_id=$mount_target_id\n+mt_privateip_id=`oci fs mount-target  list --compartment-id=$compartment_ocid  --display-name=${clusterName}-mt --availability-domain=${availability_domain} | jq -r '.data[] | .\"private-ip-ids\"[]'`\n+\n+mt_private_ip=`oci network private-ip get --private-ip-id $mt_privateip_id | jq -r '.data | .\"ip-address\"'`\n+export NFS_SERVER=$mt_private_ip\n+echo \"Using NFS Server ${NFS_SERVER}\"\n+\n+echo \"Creating Storage Class to mount OFSS\"\n+\n+cat << EOF | kubectl apply -f -\n+kind: StorageClass\n+apiVersion: storage.k8s.io/v1beta1\n+metadata:\n+  name: oci-fss\n+provisioner: oracle.com/oci-fss\n+parameters:\n+  # Insert mount target from the FSS here\n+  mntTargetId: ${mount_target_id}\n+EOF\n+\n+echo 'Set up test running ENVVARs...'\n+NODE_IP=`kubectl get nodes -o wide| awk '{print $7}'| tail -n+3`\n+if [ -z \"$NODE_IP\" ]; then\n+\techo \"retry get node ip \";\n+    sleep 15;\n+    NODE_IP=`kubectl get nodes -o wide| awk '{print $7}'| tail -n+3`\n+fi\n+\n+export K8S_NODEPORT_HOST=$NODE_IP\n+export JAVA_HOME=\"${JAVA_HOME:-`type -p java|xargs readlink -f|xargs dirname|xargs dirname`}\"\n+\n+echo 'Clean up result root...'\n+rm -rf \"${RESULT_ROOT:?}/*\"\n+\n+cd ${WORKSPACE}\n+\n+echo 'Run tests...'\n+\n+if [ \"${maven_profile_name}\" = \"oke-cert\" ]; then\n+echo \"Running mvn -Dwdt.download.url=${wdt_download_url} -Dwit.download.url=${wit_download_url} -pl integration-tests -P ${maven_profile_name} verify\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b1915df960112318116beb62191b01378f9285d"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk5MTQ4Nw==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r545991487", "createdAt": "2020-12-18T17:49:33Z", "author": {"login": "marinakog"}, "path": "oketest.sh", "diffHunk": "@@ -0,0 +1,194 @@\n+#!/bin/bash\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# This script provisions a OKE Kubernetes cluster using terraform (https://www.terraform.io/) and runs the new\n+# integration test suite against that cluster. Blog https://blogs.oracle.com/weblogicserver/easily-create-an-oci-container-engine-for-kubernetes-cluster-with-terraform-installer-to-run-weblogic-server\n+# provides detailed explanation for OCI properties file creation.\n+#\n+#\n+# As of May 6, 2020, the tests are clean on Kubernetes 1.16 with the following JDK workarounds:\n+# 1. Maven must be run with OpenJDK 11.0.7, available here: https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.7%2B10/OpenJDK11U-jdk_x64_linux_11.0.7_10.tar.gz\n+#    This is because of a critical bug fix. Unfortunately, the Oracle JDK 11.0.7 release was based on an earlier build and doesn't have the fix.\n+# 2. The WebLogic Image Tool will not accept an OpenJDK JDK. Set WIT_JAVA_HOME to an Oracle JDK Java Home.\n+#    For example, \"export WIT_JAVA_HOME=/usr/java/jdk-11.0.7\" before running this script.\n+#\n+set -o errexit\n+set -o pipefail\n+\n+script=\"${BASH_SOURCE[0]}\"\n+scriptDir=\"$( cd \"$( dirname \"${script}\" )\" && pwd )\"\n+\n+function usage {\n+  echo \"usage: ${script} [-n <terraform config files directory>] [-o <directory>] [-t <tests>] [-c <name>] [-p true|false] [-x <number_of_threads>] [-d <wdt_download_url>] [-i <wit_download_url>] [-m <maven_profile_name>] [-h]\"\n+  echo \"  -n Terraform config files directory \"\n+  echo \"  -o Output directory (optional) \"\n+  echo \"      (default: \\${WORKSPACE}/logdir/\\${BUILD_TAG}, if \\${WORKSPACE} defined, else /scratch/\\${USER}/kindtest) \"\n+  echo \"  -b  Availability Domain Name \"\n+  echo \"      (for example: VPGL:PHX-AD-1 , check limits quota with OCI admin)\"\n+  echo \"  -t Test filter (optional) \"\n+  echo \"      (default: **/It*) \"\n+  echo \"  -s Oracle Cloud Infra properties file  \"\n+  echo \"  -p Run It classes in parallel\"\n+  echo \"      (default: false) \"\n+  echo \"  -x Number of threads to run the classes in parallel\"\n+  echo \"      (default: 2) \"\n+  echo \"  -d WDT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-deploy-tooling/releases/latest) \"\n+  echo \"  -i WIT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-image-tool/releases/latest) \"\n+  echo \"  -m Run integration-tests or oke-cert \"\n+  echo \"      (default: integration-tests, supported values: oke-cert) \"\n+  echo \"  -h Help\"\n+  exit $1\n+}\n+\n+function prop {\n+    grep \"${1}\" ${oci_property_file}| grep -v \"#\" | cut -d'=' -f2\n+}\n+\n+if [[ -z \"${WORKSPACE}\" ]]; then\n+  outdir=\"/scratch/${USER}/oketest\"\n+  export WORKSPACE=${PWD}\n+else\n+  outdir=\"${WORKSPACE}/logdir/${BUILD_TAG}\"\n+fi\n+test_filter=\"**/It*\"\n+parallel_run=\"false\"\n+threads=\"2\"\n+wdt_download_url=\"https://github.com/oracle/weblogic-deploy-tooling/releases/latest\"\n+wit_download_url=\"https://github.com/oracle/weblogic-image-tool/releases/latest\"\n+maven_profile_name=\"integration-tests\"\n+\n+while getopts \":h:n:o:t:x:s:p:d:i:m:b:\" opt; do\n+  case $opt in\n+    n) terraform_script_dir_name=\"${OPTARG}\"\n+    ;;\n+    s) oci_property_file=\"${OPTARG}\"\n+    ;;\n+    b) availability_domain=\"${OPTARG}\"\n+    ;;\n+    o) outdir=\"${OPTARG}\"\n+    ;;\n+    t) test_filter=\"${OPTARG}\"\n+    ;;\n+    x) threads=\"${OPTARG}\"\n+    ;;\n+    p) parallel_run=\"${OPTARG}\"\n+    ;;\n+    d) wdt_download_url=\"${OPTARG}\"\n+    ;;\n+    i) wit_download_url=\"${OPTARG}\"\n+    ;;\n+    m) maven_profile_name=\"${OPTARG}\"\n+    ;;\n+    h) usage 0\n+    ;;\n+    d) echo \"Ignoring -d=${OPTARG}\"\n+    ;;\n+    i) echo \"Ignoring -i=${OPTARG}\"\n+    ;;\n+    *) usage 1\n+    ;;\n+  esac\n+done\n+\n+k8s_version=$(prop 'k8s.version')\n+echo \"Using Kubernetes version: ${k8s_version}\"\n+\n+\n+mkdir -m777 -p \"${outdir}\"\n+export RESULT_ROOT=\"${outdir}/wl_k8s_test_results\"\n+if [ -d \"${RESULT_ROOT}\" ]; then\n+  rm -Rf \"${RESULT_ROOT}/*\"\n+else\n+  mkdir -m777 \"${RESULT_ROOT}\"\n+fi\n+\n+echo \"Results will be in ${RESULT_ROOT}\"\n+\n+export PV_ROOT=\"${outdir}/k8s-pvroot\"\n+if [ -d \"${PV_ROOT}\" ]; then\n+  rm -Rf \"${PV_ROOT}/*\"\n+else\n+  mkdir -m777 \"${PV_ROOT}\"\n+fi\n+\n+echo \"Persistent volume files, if any, will be in ${PV_ROOT}\"\n+\n+echo 'Create a OKE cluster'\n+mkdir -p \"${WORKSPACE}/terraform\"\n+cp -rf ${terraform_script_dir_name}/*.tf ${WORKSPACE}/terraform/.\n+cp -rf ${WORKSPACE}/kubernetes/samples/scripts/terraform/template.tfvars ${WORKSPACE}/terraform/.\n+cp -rf ${WORKSPACE}/kubernetes/samples/scripts/terraform/*.sh ${WORKSPACE}/terraform/.\n+chmod 777 ${WORKSPACE}/terraform/*.sh\n+mkdir -p ${WORKSPACE}/terraform/terraforminstall\n+\n+\n+if ! sh ${WORKSPACE}/terraform/oke.create.sh ${oci_property_file} ${WORKSPACE}/terraform ; then\n+sh ${WORKSPACE}/terraform/oke.delete.sh ${oci_property_file} ${WORKSPACE}/terraform\n+fi\n+\n+clusterName=$(prop 'okeclustername')\n+\n+export KUBECONFIG=${WORKSPACE}/terraform/${clusterName}_kubeconfig\n+export PATH=${WORKSPACE}/terraform/terraforminstall:$PATH\n+\n+echo \"creating storage class to setup OFSS ...\"\n+\n+echo \"getting MountTarget ID\"\n+compartment_ocid=$(prop 'compartment.ocid')\n+mount_target_id=`oci fs mount-target  list --compartment-id=$compartment_ocid  --display-name=${clusterName}-mt --availability-domain=${availability_domain} | jq -r '.data[] | .id'`\n+#export mount_target_id=$mount_target_id\n+mt_privateip_id=`oci fs mount-target  list --compartment-id=$compartment_ocid  --display-name=${clusterName}-mt --availability-domain=${availability_domain} | jq -r '.data[] | .\"private-ip-ids\"[]'`\n+\n+mt_private_ip=`oci network private-ip get --private-ip-id $mt_privateip_id | jq -r '.data | .\"ip-address\"'`\n+export NFS_SERVER=$mt_private_ip\n+echo \"Using NFS Server ${NFS_SERVER}\"\n+\n+echo \"Creating Storage Class to mount OFSS\"\n+\n+cat << EOF | kubectl apply -f -\n+kind: StorageClass\n+apiVersion: storage.k8s.io/v1beta1\n+metadata:\n+  name: oci-fss\n+provisioner: oracle.com/oci-fss\n+parameters:\n+  # Insert mount target from the FSS here\n+  mntTargetId: ${mount_target_id}\n+EOF\n+\n+echo 'Set up test running ENVVARs...'\n+NODE_IP=`kubectl get nodes -o wide| awk '{print $7}'| tail -n+3`\n+if [ -z \"$NODE_IP\" ]; then\n+\techo \"retry get node ip \";\n+    sleep 15;\n+    NODE_IP=`kubectl get nodes -o wide| awk '{print $7}'| tail -n+3`\n+fi\n+\n+export K8S_NODEPORT_HOST=$NODE_IP\n+export JAVA_HOME=\"${JAVA_HOME:-`type -p java|xargs readlink -f|xargs dirname|xargs dirname`}\"\n+\n+echo 'Clean up result root...'\n+rm -rf \"${RESULT_ROOT:?}/*\"\n+\n+cd ${WORKSPACE}\n+\n+echo 'Run tests...'\n+\n+if [ \"${maven_profile_name}\" = \"oke-cert\" ]; then\n+echo \"Running mvn -Dwdt.download.url=${wdt_download_url} -Dwit.download.url=${wit_download_url} -pl integration-tests -P ${maven_profile_name} verify\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk4MDgxMw=="}, "originalCommit": {"oid": "3b1915df960112318116beb62191b01378f9285d"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTc2MTAxOnYy", "diffSide": "RIGHT", "path": "oketest.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNzozMDozM1rOIIsCMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNzo0OTozOVrOIIsrbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk4MDk3Nw==", "bodyText": "add indentation in this section", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r545980977", "createdAt": "2020-12-18T17:30:33Z", "author": {"login": "xiancao"}, "path": "oketest.sh", "diffHunk": "@@ -0,0 +1,194 @@\n+#!/bin/bash\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# This script provisions a OKE Kubernetes cluster using terraform (https://www.terraform.io/) and runs the new\n+# integration test suite against that cluster. Blog https://blogs.oracle.com/weblogicserver/easily-create-an-oci-container-engine-for-kubernetes-cluster-with-terraform-installer-to-run-weblogic-server\n+# provides detailed explanation for OCI properties file creation.\n+#\n+#\n+# As of May 6, 2020, the tests are clean on Kubernetes 1.16 with the following JDK workarounds:\n+# 1. Maven must be run with OpenJDK 11.0.7, available here: https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.7%2B10/OpenJDK11U-jdk_x64_linux_11.0.7_10.tar.gz\n+#    This is because of a critical bug fix. Unfortunately, the Oracle JDK 11.0.7 release was based on an earlier build and doesn't have the fix.\n+# 2. The WebLogic Image Tool will not accept an OpenJDK JDK. Set WIT_JAVA_HOME to an Oracle JDK Java Home.\n+#    For example, \"export WIT_JAVA_HOME=/usr/java/jdk-11.0.7\" before running this script.\n+#\n+set -o errexit\n+set -o pipefail\n+\n+script=\"${BASH_SOURCE[0]}\"\n+scriptDir=\"$( cd \"$( dirname \"${script}\" )\" && pwd )\"\n+\n+function usage {\n+  echo \"usage: ${script} [-n <terraform config files directory>] [-o <directory>] [-t <tests>] [-c <name>] [-p true|false] [-x <number_of_threads>] [-d <wdt_download_url>] [-i <wit_download_url>] [-m <maven_profile_name>] [-h]\"\n+  echo \"  -n Terraform config files directory \"\n+  echo \"  -o Output directory (optional) \"\n+  echo \"      (default: \\${WORKSPACE}/logdir/\\${BUILD_TAG}, if \\${WORKSPACE} defined, else /scratch/\\${USER}/kindtest) \"\n+  echo \"  -b  Availability Domain Name \"\n+  echo \"      (for example: VPGL:PHX-AD-1 , check limits quota with OCI admin)\"\n+  echo \"  -t Test filter (optional) \"\n+  echo \"      (default: **/It*) \"\n+  echo \"  -s Oracle Cloud Infra properties file  \"\n+  echo \"  -p Run It classes in parallel\"\n+  echo \"      (default: false) \"\n+  echo \"  -x Number of threads to run the classes in parallel\"\n+  echo \"      (default: 2) \"\n+  echo \"  -d WDT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-deploy-tooling/releases/latest) \"\n+  echo \"  -i WIT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-image-tool/releases/latest) \"\n+  echo \"  -m Run integration-tests or oke-cert \"\n+  echo \"      (default: integration-tests, supported values: oke-cert) \"\n+  echo \"  -h Help\"\n+  exit $1\n+}\n+\n+function prop {\n+    grep \"${1}\" ${oci_property_file}| grep -v \"#\" | cut -d'=' -f2\n+}\n+\n+if [[ -z \"${WORKSPACE}\" ]]; then\n+  outdir=\"/scratch/${USER}/oketest\"\n+  export WORKSPACE=${PWD}\n+else\n+  outdir=\"${WORKSPACE}/logdir/${BUILD_TAG}\"\n+fi\n+test_filter=\"**/It*\"\n+parallel_run=\"false\"\n+threads=\"2\"\n+wdt_download_url=\"https://github.com/oracle/weblogic-deploy-tooling/releases/latest\"\n+wit_download_url=\"https://github.com/oracle/weblogic-image-tool/releases/latest\"\n+maven_profile_name=\"integration-tests\"\n+\n+while getopts \":h:n:o:t:x:s:p:d:i:m:b:\" opt; do\n+  case $opt in\n+    n) terraform_script_dir_name=\"${OPTARG}\"\n+    ;;\n+    s) oci_property_file=\"${OPTARG}\"\n+    ;;\n+    b) availability_domain=\"${OPTARG}\"\n+    ;;\n+    o) outdir=\"${OPTARG}\"\n+    ;;\n+    t) test_filter=\"${OPTARG}\"\n+    ;;\n+    x) threads=\"${OPTARG}\"\n+    ;;\n+    p) parallel_run=\"${OPTARG}\"\n+    ;;\n+    d) wdt_download_url=\"${OPTARG}\"\n+    ;;\n+    i) wit_download_url=\"${OPTARG}\"\n+    ;;\n+    m) maven_profile_name=\"${OPTARG}\"\n+    ;;\n+    h) usage 0\n+    ;;\n+    d) echo \"Ignoring -d=${OPTARG}\"\n+    ;;\n+    i) echo \"Ignoring -i=${OPTARG}\"\n+    ;;\n+    *) usage 1\n+    ;;\n+  esac\n+done\n+\n+k8s_version=$(prop 'k8s.version')\n+echo \"Using Kubernetes version: ${k8s_version}\"\n+\n+\n+mkdir -m777 -p \"${outdir}\"\n+export RESULT_ROOT=\"${outdir}/wl_k8s_test_results\"\n+if [ -d \"${RESULT_ROOT}\" ]; then\n+  rm -Rf \"${RESULT_ROOT}/*\"\n+else\n+  mkdir -m777 \"${RESULT_ROOT}\"\n+fi\n+\n+echo \"Results will be in ${RESULT_ROOT}\"\n+\n+export PV_ROOT=\"${outdir}/k8s-pvroot\"\n+if [ -d \"${PV_ROOT}\" ]; then\n+  rm -Rf \"${PV_ROOT}/*\"\n+else\n+  mkdir -m777 \"${PV_ROOT}\"\n+fi\n+\n+echo \"Persistent volume files, if any, will be in ${PV_ROOT}\"\n+\n+echo 'Create a OKE cluster'\n+mkdir -p \"${WORKSPACE}/terraform\"\n+cp -rf ${terraform_script_dir_name}/*.tf ${WORKSPACE}/terraform/.\n+cp -rf ${WORKSPACE}/kubernetes/samples/scripts/terraform/template.tfvars ${WORKSPACE}/terraform/.\n+cp -rf ${WORKSPACE}/kubernetes/samples/scripts/terraform/*.sh ${WORKSPACE}/terraform/.\n+chmod 777 ${WORKSPACE}/terraform/*.sh\n+mkdir -p ${WORKSPACE}/terraform/terraforminstall\n+\n+\n+if ! sh ${WORKSPACE}/terraform/oke.create.sh ${oci_property_file} ${WORKSPACE}/terraform ; then\n+sh ${WORKSPACE}/terraform/oke.delete.sh ${oci_property_file} ${WORKSPACE}/terraform\n+fi\n+\n+clusterName=$(prop 'okeclustername')\n+\n+export KUBECONFIG=${WORKSPACE}/terraform/${clusterName}_kubeconfig\n+export PATH=${WORKSPACE}/terraform/terraforminstall:$PATH\n+\n+echo \"creating storage class to setup OFSS ...\"\n+\n+echo \"getting MountTarget ID\"\n+compartment_ocid=$(prop 'compartment.ocid')\n+mount_target_id=`oci fs mount-target  list --compartment-id=$compartment_ocid  --display-name=${clusterName}-mt --availability-domain=${availability_domain} | jq -r '.data[] | .id'`\n+#export mount_target_id=$mount_target_id\n+mt_privateip_id=`oci fs mount-target  list --compartment-id=$compartment_ocid  --display-name=${clusterName}-mt --availability-domain=${availability_domain} | jq -r '.data[] | .\"private-ip-ids\"[]'`\n+\n+mt_private_ip=`oci network private-ip get --private-ip-id $mt_privateip_id | jq -r '.data | .\"ip-address\"'`\n+export NFS_SERVER=$mt_private_ip\n+echo \"Using NFS Server ${NFS_SERVER}\"\n+\n+echo \"Creating Storage Class to mount OFSS\"\n+\n+cat << EOF | kubectl apply -f -\n+kind: StorageClass\n+apiVersion: storage.k8s.io/v1beta1\n+metadata:\n+  name: oci-fss\n+provisioner: oracle.com/oci-fss\n+parameters:\n+  # Insert mount target from the FSS here\n+  mntTargetId: ${mount_target_id}\n+EOF\n+\n+echo 'Set up test running ENVVARs...'\n+NODE_IP=`kubectl get nodes -o wide| awk '{print $7}'| tail -n+3`\n+if [ -z \"$NODE_IP\" ]; then\n+\techo \"retry get node ip \";\n+    sleep 15;\n+    NODE_IP=`kubectl get nodes -o wide| awk '{print $7}'| tail -n+3`\n+fi\n+\n+export K8S_NODEPORT_HOST=$NODE_IP\n+export JAVA_HOME=\"${JAVA_HOME:-`type -p java|xargs readlink -f|xargs dirname|xargs dirname`}\"\n+\n+echo 'Clean up result root...'\n+rm -rf \"${RESULT_ROOT:?}/*\"\n+\n+cd ${WORKSPACE}\n+\n+echo 'Run tests...'\n+\n+if [ \"${maven_profile_name}\" = \"oke-cert\" ]; then\n+echo \"Running mvn -Dwdt.download.url=${wdt_download_url} -Dwit.download.url=${wit_download_url} -pl integration-tests -P ${maven_profile_name} verify\"\n+mvn -Dwdt.download.url=\"${wdt_download_url}\" -Dwit.download.url=\"${wit_download_url}\" -Djdk.tls.client.protocols=TLSv1.2 -pl integration-tests -P ${maven_profile_name} verify 2>&1 | tee \"${RESULT_ROOT}/oke.log\"\n+else\n+  if [ \"${parallel_run}\" = \"false\" ]; then\n+  echo \"Running mvn -Dit.test=${test_filter} -Dwdt.download.url=${wdt_download_url} -Dwit.download.url=${wit_download_url} -pl integration-tests -P integration-tests verify\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b1915df960112318116beb62191b01378f9285d"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk5MTUzMg==", "bodyText": "fixed", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r545991532", "createdAt": "2020-12-18T17:49:39Z", "author": {"login": "marinakog"}, "path": "oketest.sh", "diffHunk": "@@ -0,0 +1,194 @@\n+#!/bin/bash\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# This script provisions a OKE Kubernetes cluster using terraform (https://www.terraform.io/) and runs the new\n+# integration test suite against that cluster. Blog https://blogs.oracle.com/weblogicserver/easily-create-an-oci-container-engine-for-kubernetes-cluster-with-terraform-installer-to-run-weblogic-server\n+# provides detailed explanation for OCI properties file creation.\n+#\n+#\n+# As of May 6, 2020, the tests are clean on Kubernetes 1.16 with the following JDK workarounds:\n+# 1. Maven must be run with OpenJDK 11.0.7, available here: https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.7%2B10/OpenJDK11U-jdk_x64_linux_11.0.7_10.tar.gz\n+#    This is because of a critical bug fix. Unfortunately, the Oracle JDK 11.0.7 release was based on an earlier build and doesn't have the fix.\n+# 2. The WebLogic Image Tool will not accept an OpenJDK JDK. Set WIT_JAVA_HOME to an Oracle JDK Java Home.\n+#    For example, \"export WIT_JAVA_HOME=/usr/java/jdk-11.0.7\" before running this script.\n+#\n+set -o errexit\n+set -o pipefail\n+\n+script=\"${BASH_SOURCE[0]}\"\n+scriptDir=\"$( cd \"$( dirname \"${script}\" )\" && pwd )\"\n+\n+function usage {\n+  echo \"usage: ${script} [-n <terraform config files directory>] [-o <directory>] [-t <tests>] [-c <name>] [-p true|false] [-x <number_of_threads>] [-d <wdt_download_url>] [-i <wit_download_url>] [-m <maven_profile_name>] [-h]\"\n+  echo \"  -n Terraform config files directory \"\n+  echo \"  -o Output directory (optional) \"\n+  echo \"      (default: \\${WORKSPACE}/logdir/\\${BUILD_TAG}, if \\${WORKSPACE} defined, else /scratch/\\${USER}/kindtest) \"\n+  echo \"  -b  Availability Domain Name \"\n+  echo \"      (for example: VPGL:PHX-AD-1 , check limits quota with OCI admin)\"\n+  echo \"  -t Test filter (optional) \"\n+  echo \"      (default: **/It*) \"\n+  echo \"  -s Oracle Cloud Infra properties file  \"\n+  echo \"  -p Run It classes in parallel\"\n+  echo \"      (default: false) \"\n+  echo \"  -x Number of threads to run the classes in parallel\"\n+  echo \"      (default: 2) \"\n+  echo \"  -d WDT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-deploy-tooling/releases/latest) \"\n+  echo \"  -i WIT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-image-tool/releases/latest) \"\n+  echo \"  -m Run integration-tests or oke-cert \"\n+  echo \"      (default: integration-tests, supported values: oke-cert) \"\n+  echo \"  -h Help\"\n+  exit $1\n+}\n+\n+function prop {\n+    grep \"${1}\" ${oci_property_file}| grep -v \"#\" | cut -d'=' -f2\n+}\n+\n+if [[ -z \"${WORKSPACE}\" ]]; then\n+  outdir=\"/scratch/${USER}/oketest\"\n+  export WORKSPACE=${PWD}\n+else\n+  outdir=\"${WORKSPACE}/logdir/${BUILD_TAG}\"\n+fi\n+test_filter=\"**/It*\"\n+parallel_run=\"false\"\n+threads=\"2\"\n+wdt_download_url=\"https://github.com/oracle/weblogic-deploy-tooling/releases/latest\"\n+wit_download_url=\"https://github.com/oracle/weblogic-image-tool/releases/latest\"\n+maven_profile_name=\"integration-tests\"\n+\n+while getopts \":h:n:o:t:x:s:p:d:i:m:b:\" opt; do\n+  case $opt in\n+    n) terraform_script_dir_name=\"${OPTARG}\"\n+    ;;\n+    s) oci_property_file=\"${OPTARG}\"\n+    ;;\n+    b) availability_domain=\"${OPTARG}\"\n+    ;;\n+    o) outdir=\"${OPTARG}\"\n+    ;;\n+    t) test_filter=\"${OPTARG}\"\n+    ;;\n+    x) threads=\"${OPTARG}\"\n+    ;;\n+    p) parallel_run=\"${OPTARG}\"\n+    ;;\n+    d) wdt_download_url=\"${OPTARG}\"\n+    ;;\n+    i) wit_download_url=\"${OPTARG}\"\n+    ;;\n+    m) maven_profile_name=\"${OPTARG}\"\n+    ;;\n+    h) usage 0\n+    ;;\n+    d) echo \"Ignoring -d=${OPTARG}\"\n+    ;;\n+    i) echo \"Ignoring -i=${OPTARG}\"\n+    ;;\n+    *) usage 1\n+    ;;\n+  esac\n+done\n+\n+k8s_version=$(prop 'k8s.version')\n+echo \"Using Kubernetes version: ${k8s_version}\"\n+\n+\n+mkdir -m777 -p \"${outdir}\"\n+export RESULT_ROOT=\"${outdir}/wl_k8s_test_results\"\n+if [ -d \"${RESULT_ROOT}\" ]; then\n+  rm -Rf \"${RESULT_ROOT}/*\"\n+else\n+  mkdir -m777 \"${RESULT_ROOT}\"\n+fi\n+\n+echo \"Results will be in ${RESULT_ROOT}\"\n+\n+export PV_ROOT=\"${outdir}/k8s-pvroot\"\n+if [ -d \"${PV_ROOT}\" ]; then\n+  rm -Rf \"${PV_ROOT}/*\"\n+else\n+  mkdir -m777 \"${PV_ROOT}\"\n+fi\n+\n+echo \"Persistent volume files, if any, will be in ${PV_ROOT}\"\n+\n+echo 'Create a OKE cluster'\n+mkdir -p \"${WORKSPACE}/terraform\"\n+cp -rf ${terraform_script_dir_name}/*.tf ${WORKSPACE}/terraform/.\n+cp -rf ${WORKSPACE}/kubernetes/samples/scripts/terraform/template.tfvars ${WORKSPACE}/terraform/.\n+cp -rf ${WORKSPACE}/kubernetes/samples/scripts/terraform/*.sh ${WORKSPACE}/terraform/.\n+chmod 777 ${WORKSPACE}/terraform/*.sh\n+mkdir -p ${WORKSPACE}/terraform/terraforminstall\n+\n+\n+if ! sh ${WORKSPACE}/terraform/oke.create.sh ${oci_property_file} ${WORKSPACE}/terraform ; then\n+sh ${WORKSPACE}/terraform/oke.delete.sh ${oci_property_file} ${WORKSPACE}/terraform\n+fi\n+\n+clusterName=$(prop 'okeclustername')\n+\n+export KUBECONFIG=${WORKSPACE}/terraform/${clusterName}_kubeconfig\n+export PATH=${WORKSPACE}/terraform/terraforminstall:$PATH\n+\n+echo \"creating storage class to setup OFSS ...\"\n+\n+echo \"getting MountTarget ID\"\n+compartment_ocid=$(prop 'compartment.ocid')\n+mount_target_id=`oci fs mount-target  list --compartment-id=$compartment_ocid  --display-name=${clusterName}-mt --availability-domain=${availability_domain} | jq -r '.data[] | .id'`\n+#export mount_target_id=$mount_target_id\n+mt_privateip_id=`oci fs mount-target  list --compartment-id=$compartment_ocid  --display-name=${clusterName}-mt --availability-domain=${availability_domain} | jq -r '.data[] | .\"private-ip-ids\"[]'`\n+\n+mt_private_ip=`oci network private-ip get --private-ip-id $mt_privateip_id | jq -r '.data | .\"ip-address\"'`\n+export NFS_SERVER=$mt_private_ip\n+echo \"Using NFS Server ${NFS_SERVER}\"\n+\n+echo \"Creating Storage Class to mount OFSS\"\n+\n+cat << EOF | kubectl apply -f -\n+kind: StorageClass\n+apiVersion: storage.k8s.io/v1beta1\n+metadata:\n+  name: oci-fss\n+provisioner: oracle.com/oci-fss\n+parameters:\n+  # Insert mount target from the FSS here\n+  mntTargetId: ${mount_target_id}\n+EOF\n+\n+echo 'Set up test running ENVVARs...'\n+NODE_IP=`kubectl get nodes -o wide| awk '{print $7}'| tail -n+3`\n+if [ -z \"$NODE_IP\" ]; then\n+\techo \"retry get node ip \";\n+    sleep 15;\n+    NODE_IP=`kubectl get nodes -o wide| awk '{print $7}'| tail -n+3`\n+fi\n+\n+export K8S_NODEPORT_HOST=$NODE_IP\n+export JAVA_HOME=\"${JAVA_HOME:-`type -p java|xargs readlink -f|xargs dirname|xargs dirname`}\"\n+\n+echo 'Clean up result root...'\n+rm -rf \"${RESULT_ROOT:?}/*\"\n+\n+cd ${WORKSPACE}\n+\n+echo 'Run tests...'\n+\n+if [ \"${maven_profile_name}\" = \"oke-cert\" ]; then\n+echo \"Running mvn -Dwdt.download.url=${wdt_download_url} -Dwit.download.url=${wit_download_url} -pl integration-tests -P ${maven_profile_name} verify\"\n+mvn -Dwdt.download.url=\"${wdt_download_url}\" -Dwit.download.url=\"${wit_download_url}\" -Djdk.tls.client.protocols=TLSv1.2 -pl integration-tests -P ${maven_profile_name} verify 2>&1 | tee \"${RESULT_ROOT}/oke.log\"\n+else\n+  if [ \"${parallel_run}\" = \"false\" ]; then\n+  echo \"Running mvn -Dit.test=${test_filter} -Dwdt.download.url=${wdt_download_url} -Dwit.download.url=${wit_download_url} -pl integration-tests -P integration-tests verify\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk4MDk3Nw=="}, "originalCommit": {"oid": "3b1915df960112318116beb62191b01378f9285d"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTc2MjQxOnYy", "diffSide": "RIGHT", "path": "oketest.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNzozMDo1OFrOIIsDAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNzo1MjoyNVrOIIsw8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk4MTE4NA==", "bodyText": "delete these empty lines.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r545981184", "createdAt": "2020-12-18T17:30:58Z", "author": {"login": "xiancao"}, "path": "oketest.sh", "diffHunk": "@@ -0,0 +1,194 @@\n+#!/bin/bash\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# This script provisions a OKE Kubernetes cluster using terraform (https://www.terraform.io/) and runs the new\n+# integration test suite against that cluster. Blog https://blogs.oracle.com/weblogicserver/easily-create-an-oci-container-engine-for-kubernetes-cluster-with-terraform-installer-to-run-weblogic-server\n+# provides detailed explanation for OCI properties file creation.\n+#\n+#\n+# As of May 6, 2020, the tests are clean on Kubernetes 1.16 with the following JDK workarounds:\n+# 1. Maven must be run with OpenJDK 11.0.7, available here: https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.7%2B10/OpenJDK11U-jdk_x64_linux_11.0.7_10.tar.gz\n+#    This is because of a critical bug fix. Unfortunately, the Oracle JDK 11.0.7 release was based on an earlier build and doesn't have the fix.\n+# 2. The WebLogic Image Tool will not accept an OpenJDK JDK. Set WIT_JAVA_HOME to an Oracle JDK Java Home.\n+#    For example, \"export WIT_JAVA_HOME=/usr/java/jdk-11.0.7\" before running this script.\n+#\n+set -o errexit\n+set -o pipefail\n+\n+script=\"${BASH_SOURCE[0]}\"\n+scriptDir=\"$( cd \"$( dirname \"${script}\" )\" && pwd )\"\n+\n+function usage {\n+  echo \"usage: ${script} [-n <terraform config files directory>] [-o <directory>] [-t <tests>] [-c <name>] [-p true|false] [-x <number_of_threads>] [-d <wdt_download_url>] [-i <wit_download_url>] [-m <maven_profile_name>] [-h]\"\n+  echo \"  -n Terraform config files directory \"\n+  echo \"  -o Output directory (optional) \"\n+  echo \"      (default: \\${WORKSPACE}/logdir/\\${BUILD_TAG}, if \\${WORKSPACE} defined, else /scratch/\\${USER}/kindtest) \"\n+  echo \"  -b  Availability Domain Name \"\n+  echo \"      (for example: VPGL:PHX-AD-1 , check limits quota with OCI admin)\"\n+  echo \"  -t Test filter (optional) \"\n+  echo \"      (default: **/It*) \"\n+  echo \"  -s Oracle Cloud Infra properties file  \"\n+  echo \"  -p Run It classes in parallel\"\n+  echo \"      (default: false) \"\n+  echo \"  -x Number of threads to run the classes in parallel\"\n+  echo \"      (default: 2) \"\n+  echo \"  -d WDT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-deploy-tooling/releases/latest) \"\n+  echo \"  -i WIT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-image-tool/releases/latest) \"\n+  echo \"  -m Run integration-tests or oke-cert \"\n+  echo \"      (default: integration-tests, supported values: oke-cert) \"\n+  echo \"  -h Help\"\n+  exit $1\n+}\n+\n+function prop {\n+    grep \"${1}\" ${oci_property_file}| grep -v \"#\" | cut -d'=' -f2\n+}\n+\n+if [[ -z \"${WORKSPACE}\" ]]; then\n+  outdir=\"/scratch/${USER}/oketest\"\n+  export WORKSPACE=${PWD}\n+else\n+  outdir=\"${WORKSPACE}/logdir/${BUILD_TAG}\"\n+fi\n+test_filter=\"**/It*\"\n+parallel_run=\"false\"\n+threads=\"2\"\n+wdt_download_url=\"https://github.com/oracle/weblogic-deploy-tooling/releases/latest\"\n+wit_download_url=\"https://github.com/oracle/weblogic-image-tool/releases/latest\"\n+maven_profile_name=\"integration-tests\"\n+\n+while getopts \":h:n:o:t:x:s:p:d:i:m:b:\" opt; do\n+  case $opt in\n+    n) terraform_script_dir_name=\"${OPTARG}\"\n+    ;;\n+    s) oci_property_file=\"${OPTARG}\"\n+    ;;\n+    b) availability_domain=\"${OPTARG}\"\n+    ;;\n+    o) outdir=\"${OPTARG}\"\n+    ;;\n+    t) test_filter=\"${OPTARG}\"\n+    ;;\n+    x) threads=\"${OPTARG}\"\n+    ;;\n+    p) parallel_run=\"${OPTARG}\"\n+    ;;\n+    d) wdt_download_url=\"${OPTARG}\"\n+    ;;\n+    i) wit_download_url=\"${OPTARG}\"\n+    ;;\n+    m) maven_profile_name=\"${OPTARG}\"\n+    ;;\n+    h) usage 0\n+    ;;\n+    d) echo \"Ignoring -d=${OPTARG}\"\n+    ;;\n+    i) echo \"Ignoring -i=${OPTARG}\"\n+    ;;\n+    *) usage 1\n+    ;;\n+  esac\n+done\n+\n+k8s_version=$(prop 'k8s.version')\n+echo \"Using Kubernetes version: ${k8s_version}\"\n+\n+\n+mkdir -m777 -p \"${outdir}\"\n+export RESULT_ROOT=\"${outdir}/wl_k8s_test_results\"\n+if [ -d \"${RESULT_ROOT}\" ]; then\n+  rm -Rf \"${RESULT_ROOT}/*\"\n+else\n+  mkdir -m777 \"${RESULT_ROOT}\"\n+fi\n+\n+echo \"Results will be in ${RESULT_ROOT}\"\n+\n+export PV_ROOT=\"${outdir}/k8s-pvroot\"\n+if [ -d \"${PV_ROOT}\" ]; then\n+  rm -Rf \"${PV_ROOT}/*\"\n+else\n+  mkdir -m777 \"${PV_ROOT}\"\n+fi\n+\n+echo \"Persistent volume files, if any, will be in ${PV_ROOT}\"\n+\n+echo 'Create a OKE cluster'\n+mkdir -p \"${WORKSPACE}/terraform\"\n+cp -rf ${terraform_script_dir_name}/*.tf ${WORKSPACE}/terraform/.\n+cp -rf ${WORKSPACE}/kubernetes/samples/scripts/terraform/template.tfvars ${WORKSPACE}/terraform/.\n+cp -rf ${WORKSPACE}/kubernetes/samples/scripts/terraform/*.sh ${WORKSPACE}/terraform/.\n+chmod 777 ${WORKSPACE}/terraform/*.sh\n+mkdir -p ${WORKSPACE}/terraform/terraforminstall\n+\n+\n+if ! sh ${WORKSPACE}/terraform/oke.create.sh ${oci_property_file} ${WORKSPACE}/terraform ; then\n+sh ${WORKSPACE}/terraform/oke.delete.sh ${oci_property_file} ${WORKSPACE}/terraform\n+fi\n+\n+clusterName=$(prop 'okeclustername')\n+\n+export KUBECONFIG=${WORKSPACE}/terraform/${clusterName}_kubeconfig\n+export PATH=${WORKSPACE}/terraform/terraforminstall:$PATH\n+\n+echo \"creating storage class to setup OFSS ...\"\n+\n+echo \"getting MountTarget ID\"\n+compartment_ocid=$(prop 'compartment.ocid')\n+mount_target_id=`oci fs mount-target  list --compartment-id=$compartment_ocid  --display-name=${clusterName}-mt --availability-domain=${availability_domain} | jq -r '.data[] | .id'`\n+#export mount_target_id=$mount_target_id\n+mt_privateip_id=`oci fs mount-target  list --compartment-id=$compartment_ocid  --display-name=${clusterName}-mt --availability-domain=${availability_domain} | jq -r '.data[] | .\"private-ip-ids\"[]'`\n+\n+mt_private_ip=`oci network private-ip get --private-ip-id $mt_privateip_id | jq -r '.data | .\"ip-address\"'`\n+export NFS_SERVER=$mt_private_ip\n+echo \"Using NFS Server ${NFS_SERVER}\"\n+\n+echo \"Creating Storage Class to mount OFSS\"\n+\n+cat << EOF | kubectl apply -f -\n+kind: StorageClass\n+apiVersion: storage.k8s.io/v1beta1\n+metadata:\n+  name: oci-fss\n+provisioner: oracle.com/oci-fss\n+parameters:\n+  # Insert mount target from the FSS here\n+  mntTargetId: ${mount_target_id}\n+EOF\n+\n+echo 'Set up test running ENVVARs...'\n+NODE_IP=`kubectl get nodes -o wide| awk '{print $7}'| tail -n+3`\n+if [ -z \"$NODE_IP\" ]; then\n+\techo \"retry get node ip \";\n+    sleep 15;\n+    NODE_IP=`kubectl get nodes -o wide| awk '{print $7}'| tail -n+3`\n+fi\n+\n+export K8S_NODEPORT_HOST=$NODE_IP\n+export JAVA_HOME=\"${JAVA_HOME:-`type -p java|xargs readlink -f|xargs dirname|xargs dirname`}\"\n+\n+echo 'Clean up result root...'\n+rm -rf \"${RESULT_ROOT:?}/*\"\n+\n+cd ${WORKSPACE}\n+\n+echo 'Run tests...'\n+\n+if [ \"${maven_profile_name}\" = \"oke-cert\" ]; then\n+echo \"Running mvn -Dwdt.download.url=${wdt_download_url} -Dwit.download.url=${wit_download_url} -pl integration-tests -P ${maven_profile_name} verify\"\n+mvn -Dwdt.download.url=\"${wdt_download_url}\" -Dwit.download.url=\"${wit_download_url}\" -Djdk.tls.client.protocols=TLSv1.2 -pl integration-tests -P ${maven_profile_name} verify 2>&1 | tee \"${RESULT_ROOT}/oke.log\"\n+else\n+  if [ \"${parallel_run}\" = \"false\" ]; then\n+  echo \"Running mvn -Dit.test=${test_filter} -Dwdt.download.url=${wdt_download_url} -Dwit.download.url=${wit_download_url} -pl integration-tests -P integration-tests verify\"\n+  mvn -Dit.test=\"${test_filter}, !ItExternalRmiTunneling, !ItSamples, !ItMiiSample, !ItTwoDomainsLoadBalancers, !ItMonitoringExporter, !ItPodRestart\" -Dwdt.download.url=\"${wdt_download_url}\" -Dwit.download.url=\"${wit_download_url}\" -Djdk.tls.client.protocols=TLSv1.2 -pl integration-tests -P ${maven_profile_name} verify 2>&1 | tee \"${RESULT_ROOT}/oke.log\"\n+  else\n+    echo \"Running mvn -Dit.test=${test_filter}, !ItOperatorUpgrade, !ItDedicatedMode -Dwdt.download.url=${wdt_download_url} -Dwit.download.url=${wit_download_url} -DPARALLEL_CLASSES=${parallel_run} -DNUMBER_OF_THREADS=${threads}  -pl integration-tests -P ${MVN_PROFILE} verify\"\n+     mvn -Dit.test=\"${test_filter}, !ItTwoDomainsLoadBalancers, !ItExternalRmiTunneling, !ItMiiSample, !ItSamples, !ItPodRestart\" -Dwdt.download.url=\"${wdt_download_url}\" -Dwit.download.url=\"${wit_download_url}\" -DPARALLEL_CLASSES=\"${parallel_run}\" -DNUMBER_OF_THREADS=\"2\" -Djdk.tls.client.protocols=TLSv1.2 -pl integration-tests -P ${maven_profile_name} verify 2>&1 | tee \"${RESULT_ROOT}/oke.log\"\n+  fi\n+fi\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b1915df960112318116beb62191b01378f9285d"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk5Mjk0Nw==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r545992947", "createdAt": "2020-12-18T17:52:25Z", "author": {"login": "marinakog"}, "path": "oketest.sh", "diffHunk": "@@ -0,0 +1,194 @@\n+#!/bin/bash\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# This script provisions a OKE Kubernetes cluster using terraform (https://www.terraform.io/) and runs the new\n+# integration test suite against that cluster. Blog https://blogs.oracle.com/weblogicserver/easily-create-an-oci-container-engine-for-kubernetes-cluster-with-terraform-installer-to-run-weblogic-server\n+# provides detailed explanation for OCI properties file creation.\n+#\n+#\n+# As of May 6, 2020, the tests are clean on Kubernetes 1.16 with the following JDK workarounds:\n+# 1. Maven must be run with OpenJDK 11.0.7, available here: https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.7%2B10/OpenJDK11U-jdk_x64_linux_11.0.7_10.tar.gz\n+#    This is because of a critical bug fix. Unfortunately, the Oracle JDK 11.0.7 release was based on an earlier build and doesn't have the fix.\n+# 2. The WebLogic Image Tool will not accept an OpenJDK JDK. Set WIT_JAVA_HOME to an Oracle JDK Java Home.\n+#    For example, \"export WIT_JAVA_HOME=/usr/java/jdk-11.0.7\" before running this script.\n+#\n+set -o errexit\n+set -o pipefail\n+\n+script=\"${BASH_SOURCE[0]}\"\n+scriptDir=\"$( cd \"$( dirname \"${script}\" )\" && pwd )\"\n+\n+function usage {\n+  echo \"usage: ${script} [-n <terraform config files directory>] [-o <directory>] [-t <tests>] [-c <name>] [-p true|false] [-x <number_of_threads>] [-d <wdt_download_url>] [-i <wit_download_url>] [-m <maven_profile_name>] [-h]\"\n+  echo \"  -n Terraform config files directory \"\n+  echo \"  -o Output directory (optional) \"\n+  echo \"      (default: \\${WORKSPACE}/logdir/\\${BUILD_TAG}, if \\${WORKSPACE} defined, else /scratch/\\${USER}/kindtest) \"\n+  echo \"  -b  Availability Domain Name \"\n+  echo \"      (for example: VPGL:PHX-AD-1 , check limits quota with OCI admin)\"\n+  echo \"  -t Test filter (optional) \"\n+  echo \"      (default: **/It*) \"\n+  echo \"  -s Oracle Cloud Infra properties file  \"\n+  echo \"  -p Run It classes in parallel\"\n+  echo \"      (default: false) \"\n+  echo \"  -x Number of threads to run the classes in parallel\"\n+  echo \"      (default: 2) \"\n+  echo \"  -d WDT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-deploy-tooling/releases/latest) \"\n+  echo \"  -i WIT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-image-tool/releases/latest) \"\n+  echo \"  -m Run integration-tests or oke-cert \"\n+  echo \"      (default: integration-tests, supported values: oke-cert) \"\n+  echo \"  -h Help\"\n+  exit $1\n+}\n+\n+function prop {\n+    grep \"${1}\" ${oci_property_file}| grep -v \"#\" | cut -d'=' -f2\n+}\n+\n+if [[ -z \"${WORKSPACE}\" ]]; then\n+  outdir=\"/scratch/${USER}/oketest\"\n+  export WORKSPACE=${PWD}\n+else\n+  outdir=\"${WORKSPACE}/logdir/${BUILD_TAG}\"\n+fi\n+test_filter=\"**/It*\"\n+parallel_run=\"false\"\n+threads=\"2\"\n+wdt_download_url=\"https://github.com/oracle/weblogic-deploy-tooling/releases/latest\"\n+wit_download_url=\"https://github.com/oracle/weblogic-image-tool/releases/latest\"\n+maven_profile_name=\"integration-tests\"\n+\n+while getopts \":h:n:o:t:x:s:p:d:i:m:b:\" opt; do\n+  case $opt in\n+    n) terraform_script_dir_name=\"${OPTARG}\"\n+    ;;\n+    s) oci_property_file=\"${OPTARG}\"\n+    ;;\n+    b) availability_domain=\"${OPTARG}\"\n+    ;;\n+    o) outdir=\"${OPTARG}\"\n+    ;;\n+    t) test_filter=\"${OPTARG}\"\n+    ;;\n+    x) threads=\"${OPTARG}\"\n+    ;;\n+    p) parallel_run=\"${OPTARG}\"\n+    ;;\n+    d) wdt_download_url=\"${OPTARG}\"\n+    ;;\n+    i) wit_download_url=\"${OPTARG}\"\n+    ;;\n+    m) maven_profile_name=\"${OPTARG}\"\n+    ;;\n+    h) usage 0\n+    ;;\n+    d) echo \"Ignoring -d=${OPTARG}\"\n+    ;;\n+    i) echo \"Ignoring -i=${OPTARG}\"\n+    ;;\n+    *) usage 1\n+    ;;\n+  esac\n+done\n+\n+k8s_version=$(prop 'k8s.version')\n+echo \"Using Kubernetes version: ${k8s_version}\"\n+\n+\n+mkdir -m777 -p \"${outdir}\"\n+export RESULT_ROOT=\"${outdir}/wl_k8s_test_results\"\n+if [ -d \"${RESULT_ROOT}\" ]; then\n+  rm -Rf \"${RESULT_ROOT}/*\"\n+else\n+  mkdir -m777 \"${RESULT_ROOT}\"\n+fi\n+\n+echo \"Results will be in ${RESULT_ROOT}\"\n+\n+export PV_ROOT=\"${outdir}/k8s-pvroot\"\n+if [ -d \"${PV_ROOT}\" ]; then\n+  rm -Rf \"${PV_ROOT}/*\"\n+else\n+  mkdir -m777 \"${PV_ROOT}\"\n+fi\n+\n+echo \"Persistent volume files, if any, will be in ${PV_ROOT}\"\n+\n+echo 'Create a OKE cluster'\n+mkdir -p \"${WORKSPACE}/terraform\"\n+cp -rf ${terraform_script_dir_name}/*.tf ${WORKSPACE}/terraform/.\n+cp -rf ${WORKSPACE}/kubernetes/samples/scripts/terraform/template.tfvars ${WORKSPACE}/terraform/.\n+cp -rf ${WORKSPACE}/kubernetes/samples/scripts/terraform/*.sh ${WORKSPACE}/terraform/.\n+chmod 777 ${WORKSPACE}/terraform/*.sh\n+mkdir -p ${WORKSPACE}/terraform/terraforminstall\n+\n+\n+if ! sh ${WORKSPACE}/terraform/oke.create.sh ${oci_property_file} ${WORKSPACE}/terraform ; then\n+sh ${WORKSPACE}/terraform/oke.delete.sh ${oci_property_file} ${WORKSPACE}/terraform\n+fi\n+\n+clusterName=$(prop 'okeclustername')\n+\n+export KUBECONFIG=${WORKSPACE}/terraform/${clusterName}_kubeconfig\n+export PATH=${WORKSPACE}/terraform/terraforminstall:$PATH\n+\n+echo \"creating storage class to setup OFSS ...\"\n+\n+echo \"getting MountTarget ID\"\n+compartment_ocid=$(prop 'compartment.ocid')\n+mount_target_id=`oci fs mount-target  list --compartment-id=$compartment_ocid  --display-name=${clusterName}-mt --availability-domain=${availability_domain} | jq -r '.data[] | .id'`\n+#export mount_target_id=$mount_target_id\n+mt_privateip_id=`oci fs mount-target  list --compartment-id=$compartment_ocid  --display-name=${clusterName}-mt --availability-domain=${availability_domain} | jq -r '.data[] | .\"private-ip-ids\"[]'`\n+\n+mt_private_ip=`oci network private-ip get --private-ip-id $mt_privateip_id | jq -r '.data | .\"ip-address\"'`\n+export NFS_SERVER=$mt_private_ip\n+echo \"Using NFS Server ${NFS_SERVER}\"\n+\n+echo \"Creating Storage Class to mount OFSS\"\n+\n+cat << EOF | kubectl apply -f -\n+kind: StorageClass\n+apiVersion: storage.k8s.io/v1beta1\n+metadata:\n+  name: oci-fss\n+provisioner: oracle.com/oci-fss\n+parameters:\n+  # Insert mount target from the FSS here\n+  mntTargetId: ${mount_target_id}\n+EOF\n+\n+echo 'Set up test running ENVVARs...'\n+NODE_IP=`kubectl get nodes -o wide| awk '{print $7}'| tail -n+3`\n+if [ -z \"$NODE_IP\" ]; then\n+\techo \"retry get node ip \";\n+    sleep 15;\n+    NODE_IP=`kubectl get nodes -o wide| awk '{print $7}'| tail -n+3`\n+fi\n+\n+export K8S_NODEPORT_HOST=$NODE_IP\n+export JAVA_HOME=\"${JAVA_HOME:-`type -p java|xargs readlink -f|xargs dirname|xargs dirname`}\"\n+\n+echo 'Clean up result root...'\n+rm -rf \"${RESULT_ROOT:?}/*\"\n+\n+cd ${WORKSPACE}\n+\n+echo 'Run tests...'\n+\n+if [ \"${maven_profile_name}\" = \"oke-cert\" ]; then\n+echo \"Running mvn -Dwdt.download.url=${wdt_download_url} -Dwit.download.url=${wit_download_url} -pl integration-tests -P ${maven_profile_name} verify\"\n+mvn -Dwdt.download.url=\"${wdt_download_url}\" -Dwit.download.url=\"${wit_download_url}\" -Djdk.tls.client.protocols=TLSv1.2 -pl integration-tests -P ${maven_profile_name} verify 2>&1 | tee \"${RESULT_ROOT}/oke.log\"\n+else\n+  if [ \"${parallel_run}\" = \"false\" ]; then\n+  echo \"Running mvn -Dit.test=${test_filter} -Dwdt.download.url=${wdt_download_url} -Dwit.download.url=${wit_download_url} -pl integration-tests -P integration-tests verify\"\n+  mvn -Dit.test=\"${test_filter}, !ItExternalRmiTunneling, !ItSamples, !ItMiiSample, !ItTwoDomainsLoadBalancers, !ItMonitoringExporter, !ItPodRestart\" -Dwdt.download.url=\"${wdt_download_url}\" -Dwit.download.url=\"${wit_download_url}\" -Djdk.tls.client.protocols=TLSv1.2 -pl integration-tests -P ${maven_profile_name} verify 2>&1 | tee \"${RESULT_ROOT}/oke.log\"\n+  else\n+    echo \"Running mvn -Dit.test=${test_filter}, !ItOperatorUpgrade, !ItDedicatedMode -Dwdt.download.url=${wdt_download_url} -Dwit.download.url=${wit_download_url} -DPARALLEL_CLASSES=${parallel_run} -DNUMBER_OF_THREADS=${threads}  -pl integration-tests -P ${MVN_PROFILE} verify\"\n+     mvn -Dit.test=\"${test_filter}, !ItTwoDomainsLoadBalancers, !ItExternalRmiTunneling, !ItMiiSample, !ItSamples, !ItPodRestart\" -Dwdt.download.url=\"${wdt_download_url}\" -Dwit.download.url=\"${wit_download_url}\" -DPARALLEL_CLASSES=\"${parallel_run}\" -DNUMBER_OF_THREADS=\"2\" -Djdk.tls.client.protocols=TLSv1.2 -pl integration-tests -P ${maven_profile_name} verify 2>&1 | tee \"${RESULT_ROOT}/oke.log\"\n+  fi\n+fi\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk4MTE4NA=="}, "originalCommit": {"oid": "3b1915df960112318116beb62191b01378f9285d"}, "originalPosition": 192}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTg3MTU5OnYy", "diffSide": "RIGHT", "path": "kubernetes/samples/scripts/terraform/oke.create.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODowMDoyNVrOIItCRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODoxNToyMVrOIItfnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk5NzM4MQ==", "bodyText": "delete this empty line", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r545997381", "createdAt": "2020-12-18T18:00:25Z", "author": {"login": "xiancao"}, "path": "kubernetes/samples/scripts/terraform/oke.create.sh", "diffHunk": "@@ -68,6 +68,60 @@ function createCluster () {\n     terraform apply -auto-approve -var-file=${terraformVarDir}/${clusterTFVarsFile}.tfvars\n }\n \n+function createRoleBindings () {\n+    kubectl -n kube-system create serviceaccount $okeclustername-sa\n+    kubectl create clusterrolebinding add-on-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:$okeclustername-sa\n+    TOKENNAME=`kubectl -n kube-system get serviceaccount/$okeclustername-sa -o jsonpath='{.secrets[0].name}'`\n+    TOKEN=`kubectl -n kube-system get secret $TOKENNAME -o jsonpath='{.data.token}'| base64 --decode`\n+    kubectl config set-credentials $okeclustername-sa --token=$TOKEN\n+    kubectl config set-context --current --user=$okeclustername-sa\n+}\n+\n+function checkClusterRunning () {\n+\n+    echo 'Confirm we have kubectl working...'\n+\n+    myline=`kubectl get nodes | awk '{print $2}'| tail -n+2`\n+    status=\"NotReady\"\n+    max=50\n+    count=1\n+\n+    privateIP=${vcn_cidr_prefix//./\\\\.}\\\\.10\\\\.\n+    myline=`kubectl get nodes -o wide | grep \"${privateIP}\" | awk '{print $2}'`\n+    NODE_IP=`kubectl get nodes -o wide| grep \"${privateIP}\" | awk '{print $7}'`\n+    echo $myline\n+    status=$myline\n+    max=100\n+    count=1\n+    while [ \"$myline\" != \"Ready\" -a $count -le $max ] ; do\n+      echo \"echo '[ERROR] Some Nodes in the Cluster are not in the Ready Status , sleep 10s more ...\"\n+      sleep 10\n+      myline=`kubectl get nodes -o wide | grep \"${privateIP}\" | awk '{print $2}'`\n+      NODE_IP=`kubectl get nodes -o wide| grep \"${privateIP}\" | awk '{print $7}'`\n+      [[ ${myline} -eq \"Ready\"  ]]\n+      echo \"Status is ${myline} Iter [$count/$max]\"\n+      count=`expr $count + 1`\n+    done\n+\n+    NODES=`kubectl get nodes -o wide | grep \"${privateIP}\" | wc -l`\n+    if [ \"$NODES\" == \"1\" ]; then\n+      echo '- looks good'\n+    else\n+      echo '- could not talk to cluster, aborting'\n+      cd ${terraformVarDir}\n+      terraform destroy -auto-approve -var-file=${terraformVarDir}/${clusterTFVarsFile}.tfvars\n+      exit 1\n+    fi\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd1ccd8682c807fcac7c5d74ce7924a0a6a55cd9"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAwNDg5Mw==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r546004893", "createdAt": "2020-12-18T18:15:21Z", "author": {"login": "marinakog"}, "path": "kubernetes/samples/scripts/terraform/oke.create.sh", "diffHunk": "@@ -68,6 +68,60 @@ function createCluster () {\n     terraform apply -auto-approve -var-file=${terraformVarDir}/${clusterTFVarsFile}.tfvars\n }\n \n+function createRoleBindings () {\n+    kubectl -n kube-system create serviceaccount $okeclustername-sa\n+    kubectl create clusterrolebinding add-on-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:$okeclustername-sa\n+    TOKENNAME=`kubectl -n kube-system get serviceaccount/$okeclustername-sa -o jsonpath='{.secrets[0].name}'`\n+    TOKEN=`kubectl -n kube-system get secret $TOKENNAME -o jsonpath='{.data.token}'| base64 --decode`\n+    kubectl config set-credentials $okeclustername-sa --token=$TOKEN\n+    kubectl config set-context --current --user=$okeclustername-sa\n+}\n+\n+function checkClusterRunning () {\n+\n+    echo 'Confirm we have kubectl working...'\n+\n+    myline=`kubectl get nodes | awk '{print $2}'| tail -n+2`\n+    status=\"NotReady\"\n+    max=50\n+    count=1\n+\n+    privateIP=${vcn_cidr_prefix//./\\\\.}\\\\.10\\\\.\n+    myline=`kubectl get nodes -o wide | grep \"${privateIP}\" | awk '{print $2}'`\n+    NODE_IP=`kubectl get nodes -o wide| grep \"${privateIP}\" | awk '{print $7}'`\n+    echo $myline\n+    status=$myline\n+    max=100\n+    count=1\n+    while [ \"$myline\" != \"Ready\" -a $count -le $max ] ; do\n+      echo \"echo '[ERROR] Some Nodes in the Cluster are not in the Ready Status , sleep 10s more ...\"\n+      sleep 10\n+      myline=`kubectl get nodes -o wide | grep \"${privateIP}\" | awk '{print $2}'`\n+      NODE_IP=`kubectl get nodes -o wide| grep \"${privateIP}\" | awk '{print $7}'`\n+      [[ ${myline} -eq \"Ready\"  ]]\n+      echo \"Status is ${myline} Iter [$count/$max]\"\n+      count=`expr $count + 1`\n+    done\n+\n+    NODES=`kubectl get nodes -o wide | grep \"${privateIP}\" | wc -l`\n+    if [ \"$NODES\" == \"1\" ]; then\n+      echo '- looks good'\n+    else\n+      echo '- could not talk to cluster, aborting'\n+      cd ${terraformVarDir}\n+      terraform destroy -auto-approve -var-file=${terraformVarDir}/${clusterTFVarsFile}.tfvars\n+      exit 1\n+    fi\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk5NzM4MQ=="}, "originalCommit": {"oid": "fd1ccd8682c807fcac7c5d74ce7924a0a6a55cd9"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTg3NDUxOnYy", "diffSide": "RIGHT", "path": "kubernetes/samples/scripts/terraform/oke.delete.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODowMToxOVrOIItEAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODoxNToxNlrOIItfcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk5NzgyNQ==", "bodyText": "delete this empty line", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r545997825", "createdAt": "2020-12-18T18:01:19Z", "author": {"login": "xiancao"}, "path": "kubernetes/samples/scripts/terraform/oke.delete.sh", "diffHunk": "@@ -0,0 +1,67 @@\n+#!/bin/bash\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# This script deletes provisioned OKE Kubernetes cluster using terraform (https://www.terraform.io/)\n+#\n+\n+set -o errexit\n+set -o pipefail\n+\n+function prop {\n+  grep \"${1}\" ${oci_property_file}| grep -v \"#\" | cut -d'=' -f2\n+}\n+\n+function cleanupLB {\n+  echo 'Clean up left over LB'\n+  myvcn_id=`oci network vcn list --compartment-id $compartment_ocid  --display-name=${clusterName}_vcn | jq -r '.data[] | .id'`\n+  declare -a vcnidarray\n+  vcnidarray=(${myvcn_id// /})\n+  myip=`oci lb load-balancer list --compartment-id $compartment_ocid |jq -r '.data[] | .id'`\n+  mysubnets=`oci network subnet list --vcn-id=${vcnidarray[0]} --display-name=${clusterName}-LB-${1} --compartment-id $compartment_ocid | jq -r '.data[] | .id'`\n+\n+  declare -a iparray\n+  declare -a mysubnetsidarray\n+  mysubnetsidarray=(${mysubnets// /})\n+\n+  iparray=(${myip// /})\n+  vcn_cidr_prefix=$(prop 'vcn.cidr.prefix')\n+  for k in \"${mysubnetsidarray[@]}\"\n+    do\n+      for i in \"${iparray[@]}\"\n+         do\n+            lb=`oci lb load-balancer get --load-balancer-id=$i`\n+            if [[ (-z \"${lb##*$vcn_cidr_prefix*}\") || (-z \"${lb##*$k*}\") ]] ;then\n+               echo \"deleting lb with id $i\"\n+               oci lb load-balancer delete --load-balancer-id=$i --force || true\n+            fi\n+        done\n+    done\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd1ccd8682c807fcac7c5d74ce7924a0a6a55cd9"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAwNDg1MA==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r546004850", "createdAt": "2020-12-18T18:15:16Z", "author": {"login": "marinakog"}, "path": "kubernetes/samples/scripts/terraform/oke.delete.sh", "diffHunk": "@@ -0,0 +1,67 @@\n+#!/bin/bash\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# This script deletes provisioned OKE Kubernetes cluster using terraform (https://www.terraform.io/)\n+#\n+\n+set -o errexit\n+set -o pipefail\n+\n+function prop {\n+  grep \"${1}\" ${oci_property_file}| grep -v \"#\" | cut -d'=' -f2\n+}\n+\n+function cleanupLB {\n+  echo 'Clean up left over LB'\n+  myvcn_id=`oci network vcn list --compartment-id $compartment_ocid  --display-name=${clusterName}_vcn | jq -r '.data[] | .id'`\n+  declare -a vcnidarray\n+  vcnidarray=(${myvcn_id// /})\n+  myip=`oci lb load-balancer list --compartment-id $compartment_ocid |jq -r '.data[] | .id'`\n+  mysubnets=`oci network subnet list --vcn-id=${vcnidarray[0]} --display-name=${clusterName}-LB-${1} --compartment-id $compartment_ocid | jq -r '.data[] | .id'`\n+\n+  declare -a iparray\n+  declare -a mysubnetsidarray\n+  mysubnetsidarray=(${mysubnets// /})\n+\n+  iparray=(${myip// /})\n+  vcn_cidr_prefix=$(prop 'vcn.cidr.prefix')\n+  for k in \"${mysubnetsidarray[@]}\"\n+    do\n+      for i in \"${iparray[@]}\"\n+         do\n+            lb=`oci lb load-balancer get --load-balancer-id=$i`\n+            if [[ (-z \"${lb##*$vcn_cidr_prefix*}\") || (-z \"${lb##*$k*}\") ]] ;then\n+               echo \"deleting lb with id $i\"\n+               oci lb load-balancer delete --load-balancer-id=$i --force || true\n+            fi\n+        done\n+    done\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk5NzgyNQ=="}, "originalCommit": {"oid": "fd1ccd8682c807fcac7c5d74ce7924a0a6a55cd9"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTg3NTE3OnYy", "diffSide": "RIGHT", "path": "kubernetes/samples/scripts/terraform/oke.delete.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODowMTozMFrOIItEaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODoxNToxMVrOIItfOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk5NzkyOA==", "bodyText": "delete this empty line", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r545997928", "createdAt": "2020-12-18T18:01:30Z", "author": {"login": "xiancao"}, "path": "kubernetes/samples/scripts/terraform/oke.delete.sh", "diffHunk": "@@ -0,0 +1,67 @@\n+#!/bin/bash\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# This script deletes provisioned OKE Kubernetes cluster using terraform (https://www.terraform.io/)\n+#\n+\n+set -o errexit\n+set -o pipefail\n+\n+function prop {\n+  grep \"${1}\" ${oci_property_file}| grep -v \"#\" | cut -d'=' -f2\n+}\n+\n+function cleanupLB {\n+  echo 'Clean up left over LB'\n+  myvcn_id=`oci network vcn list --compartment-id $compartment_ocid  --display-name=${clusterName}_vcn | jq -r '.data[] | .id'`\n+  declare -a vcnidarray\n+  vcnidarray=(${myvcn_id// /})\n+  myip=`oci lb load-balancer list --compartment-id $compartment_ocid |jq -r '.data[] | .id'`\n+  mysubnets=`oci network subnet list --vcn-id=${vcnidarray[0]} --display-name=${clusterName}-LB-${1} --compartment-id $compartment_ocid | jq -r '.data[] | .id'`\n+\n+  declare -a iparray\n+  declare -a mysubnetsidarray\n+  mysubnetsidarray=(${mysubnets// /})\n+\n+  iparray=(${myip// /})\n+  vcn_cidr_prefix=$(prop 'vcn.cidr.prefix')\n+  for k in \"${mysubnetsidarray[@]}\"\n+    do\n+      for i in \"${iparray[@]}\"\n+         do\n+            lb=`oci lb load-balancer get --load-balancer-id=$i`\n+            if [[ (-z \"${lb##*$vcn_cidr_prefix*}\") || (-z \"${lb##*$k*}\") ]] ;then\n+               echo \"deleting lb with id $i\"\n+               oci lb load-balancer delete --load-balancer-id=$i --force || true\n+            fi\n+        done\n+    done\n+\n+}\n+\n+function deleteOKE {\n+  cd ${terraform_script_dir}\n+  terraform init -var-file=${terraform_script_dir}/${clusterName}.tfvars\n+  terraform plan -var-file=${terraform_script_dir}/${clusterName}.tfvars\n+  terraform destroy -auto-approve -var-file=${terraform_script_dir}/${clusterName}.tfvars\n+}\n+\n+#MAIN\n+oci_property_file=${1:-$PWD/oci.props}\n+terraform_script_dir=${2:-$PWD}\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd1ccd8682c807fcac7c5d74ce7924a0a6a55cd9"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAwNDc5Mw==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r546004793", "createdAt": "2020-12-18T18:15:11Z", "author": {"login": "marinakog"}, "path": "kubernetes/samples/scripts/terraform/oke.delete.sh", "diffHunk": "@@ -0,0 +1,67 @@\n+#!/bin/bash\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# This script deletes provisioned OKE Kubernetes cluster using terraform (https://www.terraform.io/)\n+#\n+\n+set -o errexit\n+set -o pipefail\n+\n+function prop {\n+  grep \"${1}\" ${oci_property_file}| grep -v \"#\" | cut -d'=' -f2\n+}\n+\n+function cleanupLB {\n+  echo 'Clean up left over LB'\n+  myvcn_id=`oci network vcn list --compartment-id $compartment_ocid  --display-name=${clusterName}_vcn | jq -r '.data[] | .id'`\n+  declare -a vcnidarray\n+  vcnidarray=(${myvcn_id// /})\n+  myip=`oci lb load-balancer list --compartment-id $compartment_ocid |jq -r '.data[] | .id'`\n+  mysubnets=`oci network subnet list --vcn-id=${vcnidarray[0]} --display-name=${clusterName}-LB-${1} --compartment-id $compartment_ocid | jq -r '.data[] | .id'`\n+\n+  declare -a iparray\n+  declare -a mysubnetsidarray\n+  mysubnetsidarray=(${mysubnets// /})\n+\n+  iparray=(${myip// /})\n+  vcn_cidr_prefix=$(prop 'vcn.cidr.prefix')\n+  for k in \"${mysubnetsidarray[@]}\"\n+    do\n+      for i in \"${iparray[@]}\"\n+         do\n+            lb=`oci lb load-balancer get --load-balancer-id=$i`\n+            if [[ (-z \"${lb##*$vcn_cidr_prefix*}\") || (-z \"${lb##*$k*}\") ]] ;then\n+               echo \"deleting lb with id $i\"\n+               oci lb load-balancer delete --load-balancer-id=$i --force || true\n+            fi\n+        done\n+    done\n+\n+}\n+\n+function deleteOKE {\n+  cd ${terraform_script_dir}\n+  terraform init -var-file=${terraform_script_dir}/${clusterName}.tfvars\n+  terraform plan -var-file=${terraform_script_dir}/${clusterName}.tfvars\n+  terraform destroy -auto-approve -var-file=${terraform_script_dir}/${clusterName}.tfvars\n+}\n+\n+#MAIN\n+oci_property_file=${1:-$PWD/oci.props}\n+terraform_script_dir=${2:-$PWD}\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk5NzkyOA=="}, "originalCommit": {"oid": "fd1ccd8682c807fcac7c5d74ce7924a0a6a55cd9"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTg3NTc0OnYy", "diffSide": "RIGHT", "path": "kubernetes/samples/scripts/terraform/oke.delete.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODowMTo0MVrOIItEuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODoxNTowN1rOIItfCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk5ODAwOA==", "bodyText": "delete this empty line", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r545998008", "createdAt": "2020-12-18T18:01:41Z", "author": {"login": "xiancao"}, "path": "kubernetes/samples/scripts/terraform/oke.delete.sh", "diffHunk": "@@ -0,0 +1,67 @@\n+#!/bin/bash\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# This script deletes provisioned OKE Kubernetes cluster using terraform (https://www.terraform.io/)\n+#\n+\n+set -o errexit\n+set -o pipefail\n+\n+function prop {\n+  grep \"${1}\" ${oci_property_file}| grep -v \"#\" | cut -d'=' -f2\n+}\n+\n+function cleanupLB {\n+  echo 'Clean up left over LB'\n+  myvcn_id=`oci network vcn list --compartment-id $compartment_ocid  --display-name=${clusterName}_vcn | jq -r '.data[] | .id'`\n+  declare -a vcnidarray\n+  vcnidarray=(${myvcn_id// /})\n+  myip=`oci lb load-balancer list --compartment-id $compartment_ocid |jq -r '.data[] | .id'`\n+  mysubnets=`oci network subnet list --vcn-id=${vcnidarray[0]} --display-name=${clusterName}-LB-${1} --compartment-id $compartment_ocid | jq -r '.data[] | .id'`\n+\n+  declare -a iparray\n+  declare -a mysubnetsidarray\n+  mysubnetsidarray=(${mysubnets// /})\n+\n+  iparray=(${myip// /})\n+  vcn_cidr_prefix=$(prop 'vcn.cidr.prefix')\n+  for k in \"${mysubnetsidarray[@]}\"\n+    do\n+      for i in \"${iparray[@]}\"\n+         do\n+            lb=`oci lb load-balancer get --load-balancer-id=$i`\n+            if [[ (-z \"${lb##*$vcn_cidr_prefix*}\") || (-z \"${lb##*$k*}\") ]] ;then\n+               echo \"deleting lb with id $i\"\n+               oci lb load-balancer delete --load-balancer-id=$i --force || true\n+            fi\n+        done\n+    done\n+\n+}\n+\n+function deleteOKE {\n+  cd ${terraform_script_dir}\n+  terraform init -var-file=${terraform_script_dir}/${clusterName}.tfvars\n+  terraform plan -var-file=${terraform_script_dir}/${clusterName}.tfvars\n+  terraform destroy -auto-approve -var-file=${terraform_script_dir}/${clusterName}.tfvars\n+}\n+\n+#MAIN\n+oci_property_file=${1:-$PWD/oci.props}\n+terraform_script_dir=${2:-$PWD}\n+\n+\n+clusterName=$(prop 'okeclustername')\n+compartment_ocid=$(prop 'compartment.ocid')\n+vcn_cidr_prefix=$(prop 'vcn.cidr.prefix')\n+export KUBECONFIG=${terraform_script_dir}/${clusterName}_kubeconfig\n+export PATH=${terraform_script_dir}/terraforminstall:$PATH\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd1ccd8682c807fcac7c5d74ce7924a0a6a55cd9"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAwNDc0Ng==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r546004746", "createdAt": "2020-12-18T18:15:07Z", "author": {"login": "marinakog"}, "path": "kubernetes/samples/scripts/terraform/oke.delete.sh", "diffHunk": "@@ -0,0 +1,67 @@\n+#!/bin/bash\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# This script deletes provisioned OKE Kubernetes cluster using terraform (https://www.terraform.io/)\n+#\n+\n+set -o errexit\n+set -o pipefail\n+\n+function prop {\n+  grep \"${1}\" ${oci_property_file}| grep -v \"#\" | cut -d'=' -f2\n+}\n+\n+function cleanupLB {\n+  echo 'Clean up left over LB'\n+  myvcn_id=`oci network vcn list --compartment-id $compartment_ocid  --display-name=${clusterName}_vcn | jq -r '.data[] | .id'`\n+  declare -a vcnidarray\n+  vcnidarray=(${myvcn_id// /})\n+  myip=`oci lb load-balancer list --compartment-id $compartment_ocid |jq -r '.data[] | .id'`\n+  mysubnets=`oci network subnet list --vcn-id=${vcnidarray[0]} --display-name=${clusterName}-LB-${1} --compartment-id $compartment_ocid | jq -r '.data[] | .id'`\n+\n+  declare -a iparray\n+  declare -a mysubnetsidarray\n+  mysubnetsidarray=(${mysubnets// /})\n+\n+  iparray=(${myip// /})\n+  vcn_cidr_prefix=$(prop 'vcn.cidr.prefix')\n+  for k in \"${mysubnetsidarray[@]}\"\n+    do\n+      for i in \"${iparray[@]}\"\n+         do\n+            lb=`oci lb load-balancer get --load-balancer-id=$i`\n+            if [[ (-z \"${lb##*$vcn_cidr_prefix*}\") || (-z \"${lb##*$k*}\") ]] ;then\n+               echo \"deleting lb with id $i\"\n+               oci lb load-balancer delete --load-balancer-id=$i --force || true\n+            fi\n+        done\n+    done\n+\n+}\n+\n+function deleteOKE {\n+  cd ${terraform_script_dir}\n+  terraform init -var-file=${terraform_script_dir}/${clusterName}.tfvars\n+  terraform plan -var-file=${terraform_script_dir}/${clusterName}.tfvars\n+  terraform destroy -auto-approve -var-file=${terraform_script_dir}/${clusterName}.tfvars\n+}\n+\n+#MAIN\n+oci_property_file=${1:-$PWD/oci.props}\n+terraform_script_dir=${2:-$PWD}\n+\n+\n+clusterName=$(prop 'okeclustername')\n+compartment_ocid=$(prop 'compartment.ocid')\n+vcn_cidr_prefix=$(prop 'vcn.cidr.prefix')\n+export KUBECONFIG=${terraform_script_dir}/${clusterName}_kubeconfig\n+export PATH=${terraform_script_dir}/terraforminstall:$PATH\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk5ODAwOA=="}, "originalCommit": {"oid": "fd1ccd8682c807fcac7c5d74ce7924a0a6a55cd9"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTg3OTU1OnYy", "diffSide": "RIGHT", "path": "kubernetes/samples/scripts/terraform/oke.create.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODowMjo1MVrOIItG2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODoxNDo1NVrOIItesg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk5ODU1Mg==", "bodyText": "delete this empty line.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r545998552", "createdAt": "2020-12-18T18:02:51Z", "author": {"login": "xiancao"}, "path": "kubernetes/samples/scripts/terraform/oke.create.sh", "diffHunk": "@@ -37,12 +37,12 @@ function setupTerraform () {\n       curl -O https://releases.hashicorp.com/terraform/0.11.10/terraform_0.11.10_darwin_amd64.zip\n       unzip terraform_0.11.10_darwin_amd64.zip\n     elif [[ \"${OSTYPE}\" == \"linux\"* ]]; then\n-       curl -O https://releases.hashicorp.com/terraform/0.11.8/terraform_0.11.8_linux_amd64.zip\n-       unzip terraform_0.11.8_linux_amd64.zip\n+       curl -LO --retry 3 https://releases.hashicorp.com/terraform/0.11.8/terraform_0.11.8_linux_amd64.zip\n+       unzip -o terraform_0.11.8_linux_amd64.zip -d ${terraformDir}\n     else\n        echo \"Unsupported OS\"\n     fi\n-    chmod 777 ${terraformDir}/terraform\n+    chmod +x ${terraformDir}/terraform\n     export PATH=${terraformDir}:${PATH}\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd1ccd8682c807fcac7c5d74ce7924a0a6a55cd9"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAwNDY1OA==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r546004658", "createdAt": "2020-12-18T18:14:55Z", "author": {"login": "marinakog"}, "path": "kubernetes/samples/scripts/terraform/oke.create.sh", "diffHunk": "@@ -37,12 +37,12 @@ function setupTerraform () {\n       curl -O https://releases.hashicorp.com/terraform/0.11.10/terraform_0.11.10_darwin_amd64.zip\n       unzip terraform_0.11.10_darwin_amd64.zip\n     elif [[ \"${OSTYPE}\" == \"linux\"* ]]; then\n-       curl -O https://releases.hashicorp.com/terraform/0.11.8/terraform_0.11.8_linux_amd64.zip\n-       unzip terraform_0.11.8_linux_amd64.zip\n+       curl -LO --retry 3 https://releases.hashicorp.com/terraform/0.11.8/terraform_0.11.8_linux_amd64.zip\n+       unzip -o terraform_0.11.8_linux_amd64.zip -d ${terraformDir}\n     else\n        echo \"Unsupported OS\"\n     fi\n-    chmod 777 ${terraformDir}/terraform\n+    chmod +x ${terraformDir}/terraform\n     export PATH=${terraformDir}:${PATH}\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk5ODU1Mg=="}, "originalCommit": {"oid": "fd1ccd8682c807fcac7c5d74ce7924a0a6a55cd9"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMjA3MTU5OnYy", "diffSide": "RIGHT", "path": "oketest.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODo1NzowOVrOIIu68g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxOTo1NTo1NVrOIIw5-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAyODI3NA==", "bodyText": "match echo with actual mvn command", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r546028274", "createdAt": "2020-12-18T18:57:09Z", "author": {"login": "vanajamukkara"}, "path": "oketest.sh", "diffHunk": "@@ -0,0 +1,183 @@\n+#!/bin/bash\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# This script provisions a OKE Kubernetes cluster using terraform (https://www.terraform.io/) and runs the new\n+# integration test suite against that cluster. Blog https://blogs.oracle.com/weblogicserver/easily-create-an-oci-container-engine-for-kubernetes-cluster-with-terraform-installer-to-run-weblogic-server\n+# provides detailed explanation for OCI properties file creation.\n+#\n+#\n+# As of May 6, 2020, the tests are clean on Kubernetes 1.16 with the following JDK workarounds:\n+# 1. Maven must be run with OpenJDK 11.0.7, available here: https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.7%2B10/OpenJDK11U-jdk_x64_linux_11.0.7_10.tar.gz\n+#    This is because of a critical bug fix. Unfortunately, the Oracle JDK 11.0.7 release was based on an earlier build and doesn't have the fix.\n+# 2. The WebLogic Image Tool will not accept an OpenJDK JDK. Set WIT_JAVA_HOME to an Oracle JDK Java Home.\n+#    For example, \"export WIT_JAVA_HOME=/usr/java/jdk-11.0.7\" before running this script.\n+#\n+set -o errexit\n+set -o pipefail\n+\n+script=\"${BASH_SOURCE[0]}\"\n+scriptDir=\"$( cd \"$( dirname \"${script}\" )\" && pwd )\"\n+\n+function usage {\n+  echo \"usage: ${script} [-n <terraform config files directory>] [-o <directory>] [-t <tests>] [-c <name>] [-p true|false] [-x <number_of_threads>] [-d <wdt_download_url>] [-i <wit_download_url>] [-m <maven_profile_name>] [-h]\"\n+  echo \"  -n Terraform config files directory \"\n+  echo \"  -o Output directory (optional) \"\n+  echo \"      (default: \\${WORKSPACE}/logdir/\\${BUILD_TAG}, if \\${WORKSPACE} defined, else /scratch/\\${USER}/kindtest) \"\n+  echo \"  -b  Availability Domain Name \"\n+  echo \"      (for example: VPGL:PHX-AD-1 , check limits quota with OCI admin)\"\n+  echo \"  -t Test filter (optional) \"\n+  echo \"      (default: **/It*) \"\n+  echo \"  -s Oracle Cloud Infra properties file  \"\n+  echo \"  -p Run It classes in parallel\"\n+  echo \"      (default: false) \"\n+  echo \"  -x Number of threads to run the classes in parallel\"\n+  echo \"      (default: 2) \"\n+  echo \"  -d WDT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-deploy-tooling/releases/latest) \"\n+  echo \"  -i WIT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-image-tool/releases/latest) \"\n+  echo \"  -m Run integration-tests or oke-cert \"\n+  echo \"      (default: integration-tests, supported values: oke-cert) \"\n+  echo \"  -h Help\"\n+  exit $1\n+}\n+\n+function prop {\n+    grep \"${1}\" ${oci_property_file}| grep -v \"#\" | cut -d'=' -f2\n+}\n+\n+if [[ -z \"${WORKSPACE}\" ]]; then\n+  outdir=\"/scratch/${USER}/oketest\"\n+  export WORKSPACE=${PWD}\n+else\n+  outdir=\"${WORKSPACE}/logdir/${BUILD_TAG}\"\n+fi\n+test_filter=\"**/It*\"\n+parallel_run=\"false\"\n+threads=\"2\"\n+wdt_download_url=\"https://github.com/oracle/weblogic-deploy-tooling/releases/latest\"\n+wit_download_url=\"https://github.com/oracle/weblogic-image-tool/releases/latest\"\n+maven_profile_name=\"integration-tests\"\n+\n+while getopts \":h:n:o:t:x:s:p:d:i:m:b:\" opt; do\n+  case $opt in\n+    n) terraform_script_dir_name=\"${OPTARG}\"\n+    ;;\n+    s) oci_property_file=\"${OPTARG}\"\n+    ;;\n+    b) availability_domain=\"${OPTARG}\"\n+    ;;\n+    o) outdir=\"${OPTARG}\"\n+    ;;\n+    t) test_filter=\"${OPTARG}\"\n+    ;;\n+    x) threads=\"${OPTARG}\"\n+    ;;\n+    p) parallel_run=\"${OPTARG}\"\n+    ;;\n+    d) wdt_download_url=\"${OPTARG}\"\n+    ;;\n+    i) wit_download_url=\"${OPTARG}\"\n+    ;;\n+    m) maven_profile_name=\"${OPTARG}\"\n+    ;;\n+    h) usage 0\n+    ;;\n+    d) echo \"Ignoring -d=${OPTARG}\"\n+    ;;\n+    i) echo \"Ignoring -i=${OPTARG}\"\n+    ;;\n+    *) usage 1\n+    ;;\n+  esac\n+done\n+\n+k8s_version=$(prop 'k8s.version')\n+echo \"Using Kubernetes version: ${k8s_version}\"\n+\n+mkdir -m777 -p \"${outdir}\"\n+export RESULT_ROOT=\"${outdir}/wl_k8s_test_results\"\n+if [ -d \"${RESULT_ROOT}\" ]; then\n+  rm -Rf \"${RESULT_ROOT}/*\"\n+else\n+  mkdir -m777 \"${RESULT_ROOT}\"\n+fi\n+\n+echo \"Results will be in ${RESULT_ROOT}\"\n+\n+export PV_ROOT=\"${outdir}/k8s-pvroot\"\n+if [ -d \"${PV_ROOT}\" ]; then\n+  rm -Rf \"${PV_ROOT}/*\"\n+else\n+  mkdir -m777 \"${PV_ROOT}\"\n+fi\n+\n+echo \"Persistent volume files, if any, will be in ${PV_ROOT}\"\n+\n+echo 'Create a OKE cluster'\n+mkdir -p \"${WORKSPACE}/terraform\"\n+cp -rf ${terraform_script_dir_name}/*.tf ${WORKSPACE}/terraform/.\n+cp -rf ${WORKSPACE}/kubernetes/samples/scripts/terraform/template.tfvars ${WORKSPACE}/terraform/.\n+cp -rf ${WORKSPACE}/kubernetes/samples/scripts/terraform/*.sh ${WORKSPACE}/terraform/.\n+chmod 777 ${WORKSPACE}/terraform/*.sh\n+mkdir -p ${WORKSPACE}/terraform/terraforminstall\n+\n+if ! sh ${WORKSPACE}/terraform/oke.create.sh ${oci_property_file} ${WORKSPACE}/terraform ; then\n+  sh ${WORKSPACE}/terraform/oke.delete.sh ${oci_property_file} ${WORKSPACE}/terraform\n+fi\n+\n+clusterName=$(prop 'okeclustername')\n+\n+export KUBECONFIG=${WORKSPACE}/terraform/${clusterName}_kubeconfig\n+export PATH=${WORKSPACE}/terraform/terraforminstall:$PATH\n+\n+echo \"creating storage class to setup OFSS ...\"\n+\n+echo \"getting MountTarget ID\"\n+compartment_ocid=$(prop 'compartment.ocid')\n+mount_target_id=`oci fs mount-target  list --compartment-id=$compartment_ocid  --display-name=${clusterName}-mt --availability-domain=${availability_domain} | jq -r '.data[] | .id'`\n+mt_privateip_id=`oci fs mount-target  list --compartment-id=$compartment_ocid  --display-name=${clusterName}-mt --availability-domain=${availability_domain} | jq -r '.data[] | .\"private-ip-ids\"[]'`\n+mt_private_ip=`oci network private-ip get --private-ip-id $mt_privateip_id | jq -r '.data | .\"ip-address\"'`\n+\n+export NFS_SERVER=$mt_private_ip\n+echo \"Using NFS Server ${NFS_SERVER}\"\n+echo \"Creating Storage Class to mount OFSS\"\n+cat << EOF | kubectl apply -f -\n+kind: StorageClass\n+apiVersion: storage.k8s.io/v1beta1\n+metadata:\n+  name: oci-fss\n+provisioner: oracle.com/oci-fss\n+parameters:\n+  # Insert mount target from the FSS here\n+  mntTargetId: ${mount_target_id}\n+EOF\n+\n+echo 'Set up test running ENVVARs...'\n+NODE_IP=`kubectl get nodes -o wide| awk '{print $7}'| tail -n+3`\n+if [ -z \"$NODE_IP\" ]; then\n+\techo \"retry get node ip \";\n+  sleep 15;\n+  NODE_IP=`kubectl get nodes -o wide| awk '{print $7}'| tail -n+3`\n+fi\n+\n+export K8S_NODEPORT_HOST=$NODE_IP\n+export JAVA_HOME=\"${JAVA_HOME:-`type -p java|xargs readlink -f|xargs dirname|xargs dirname`}\"\n+\n+echo 'Clean up result root...'\n+rm -rf \"${RESULT_ROOT:?}/*\"\n+cd ${WORKSPACE}\n+echo 'Run tests...'\n+if [ \"${maven_profile_name}\" = \"oke-cert\" ]; then\n+  echo \"Running mvn -Dwdt.download.url=${wdt_download_url} -Dwit.download.url=${wit_download_url} -pl integration-tests -P ${maven_profile_name} verify\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13a473aedd9bca36d12aa76499ea8039d0cd6810"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA2MDc5NQ==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r546060795", "createdAt": "2020-12-18T19:55:55Z", "author": {"login": "marinakog"}, "path": "oketest.sh", "diffHunk": "@@ -0,0 +1,183 @@\n+#!/bin/bash\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# This script provisions a OKE Kubernetes cluster using terraform (https://www.terraform.io/) and runs the new\n+# integration test suite against that cluster. Blog https://blogs.oracle.com/weblogicserver/easily-create-an-oci-container-engine-for-kubernetes-cluster-with-terraform-installer-to-run-weblogic-server\n+# provides detailed explanation for OCI properties file creation.\n+#\n+#\n+# As of May 6, 2020, the tests are clean on Kubernetes 1.16 with the following JDK workarounds:\n+# 1. Maven must be run with OpenJDK 11.0.7, available here: https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.7%2B10/OpenJDK11U-jdk_x64_linux_11.0.7_10.tar.gz\n+#    This is because of a critical bug fix. Unfortunately, the Oracle JDK 11.0.7 release was based on an earlier build and doesn't have the fix.\n+# 2. The WebLogic Image Tool will not accept an OpenJDK JDK. Set WIT_JAVA_HOME to an Oracle JDK Java Home.\n+#    For example, \"export WIT_JAVA_HOME=/usr/java/jdk-11.0.7\" before running this script.\n+#\n+set -o errexit\n+set -o pipefail\n+\n+script=\"${BASH_SOURCE[0]}\"\n+scriptDir=\"$( cd \"$( dirname \"${script}\" )\" && pwd )\"\n+\n+function usage {\n+  echo \"usage: ${script} [-n <terraform config files directory>] [-o <directory>] [-t <tests>] [-c <name>] [-p true|false] [-x <number_of_threads>] [-d <wdt_download_url>] [-i <wit_download_url>] [-m <maven_profile_name>] [-h]\"\n+  echo \"  -n Terraform config files directory \"\n+  echo \"  -o Output directory (optional) \"\n+  echo \"      (default: \\${WORKSPACE}/logdir/\\${BUILD_TAG}, if \\${WORKSPACE} defined, else /scratch/\\${USER}/kindtest) \"\n+  echo \"  -b  Availability Domain Name \"\n+  echo \"      (for example: VPGL:PHX-AD-1 , check limits quota with OCI admin)\"\n+  echo \"  -t Test filter (optional) \"\n+  echo \"      (default: **/It*) \"\n+  echo \"  -s Oracle Cloud Infra properties file  \"\n+  echo \"  -p Run It classes in parallel\"\n+  echo \"      (default: false) \"\n+  echo \"  -x Number of threads to run the classes in parallel\"\n+  echo \"      (default: 2) \"\n+  echo \"  -d WDT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-deploy-tooling/releases/latest) \"\n+  echo \"  -i WIT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-image-tool/releases/latest) \"\n+  echo \"  -m Run integration-tests or oke-cert \"\n+  echo \"      (default: integration-tests, supported values: oke-cert) \"\n+  echo \"  -h Help\"\n+  exit $1\n+}\n+\n+function prop {\n+    grep \"${1}\" ${oci_property_file}| grep -v \"#\" | cut -d'=' -f2\n+}\n+\n+if [[ -z \"${WORKSPACE}\" ]]; then\n+  outdir=\"/scratch/${USER}/oketest\"\n+  export WORKSPACE=${PWD}\n+else\n+  outdir=\"${WORKSPACE}/logdir/${BUILD_TAG}\"\n+fi\n+test_filter=\"**/It*\"\n+parallel_run=\"false\"\n+threads=\"2\"\n+wdt_download_url=\"https://github.com/oracle/weblogic-deploy-tooling/releases/latest\"\n+wit_download_url=\"https://github.com/oracle/weblogic-image-tool/releases/latest\"\n+maven_profile_name=\"integration-tests\"\n+\n+while getopts \":h:n:o:t:x:s:p:d:i:m:b:\" opt; do\n+  case $opt in\n+    n) terraform_script_dir_name=\"${OPTARG}\"\n+    ;;\n+    s) oci_property_file=\"${OPTARG}\"\n+    ;;\n+    b) availability_domain=\"${OPTARG}\"\n+    ;;\n+    o) outdir=\"${OPTARG}\"\n+    ;;\n+    t) test_filter=\"${OPTARG}\"\n+    ;;\n+    x) threads=\"${OPTARG}\"\n+    ;;\n+    p) parallel_run=\"${OPTARG}\"\n+    ;;\n+    d) wdt_download_url=\"${OPTARG}\"\n+    ;;\n+    i) wit_download_url=\"${OPTARG}\"\n+    ;;\n+    m) maven_profile_name=\"${OPTARG}\"\n+    ;;\n+    h) usage 0\n+    ;;\n+    d) echo \"Ignoring -d=${OPTARG}\"\n+    ;;\n+    i) echo \"Ignoring -i=${OPTARG}\"\n+    ;;\n+    *) usage 1\n+    ;;\n+  esac\n+done\n+\n+k8s_version=$(prop 'k8s.version')\n+echo \"Using Kubernetes version: ${k8s_version}\"\n+\n+mkdir -m777 -p \"${outdir}\"\n+export RESULT_ROOT=\"${outdir}/wl_k8s_test_results\"\n+if [ -d \"${RESULT_ROOT}\" ]; then\n+  rm -Rf \"${RESULT_ROOT}/*\"\n+else\n+  mkdir -m777 \"${RESULT_ROOT}\"\n+fi\n+\n+echo \"Results will be in ${RESULT_ROOT}\"\n+\n+export PV_ROOT=\"${outdir}/k8s-pvroot\"\n+if [ -d \"${PV_ROOT}\" ]; then\n+  rm -Rf \"${PV_ROOT}/*\"\n+else\n+  mkdir -m777 \"${PV_ROOT}\"\n+fi\n+\n+echo \"Persistent volume files, if any, will be in ${PV_ROOT}\"\n+\n+echo 'Create a OKE cluster'\n+mkdir -p \"${WORKSPACE}/terraform\"\n+cp -rf ${terraform_script_dir_name}/*.tf ${WORKSPACE}/terraform/.\n+cp -rf ${WORKSPACE}/kubernetes/samples/scripts/terraform/template.tfvars ${WORKSPACE}/terraform/.\n+cp -rf ${WORKSPACE}/kubernetes/samples/scripts/terraform/*.sh ${WORKSPACE}/terraform/.\n+chmod 777 ${WORKSPACE}/terraform/*.sh\n+mkdir -p ${WORKSPACE}/terraform/terraforminstall\n+\n+if ! sh ${WORKSPACE}/terraform/oke.create.sh ${oci_property_file} ${WORKSPACE}/terraform ; then\n+  sh ${WORKSPACE}/terraform/oke.delete.sh ${oci_property_file} ${WORKSPACE}/terraform\n+fi\n+\n+clusterName=$(prop 'okeclustername')\n+\n+export KUBECONFIG=${WORKSPACE}/terraform/${clusterName}_kubeconfig\n+export PATH=${WORKSPACE}/terraform/terraforminstall:$PATH\n+\n+echo \"creating storage class to setup OFSS ...\"\n+\n+echo \"getting MountTarget ID\"\n+compartment_ocid=$(prop 'compartment.ocid')\n+mount_target_id=`oci fs mount-target  list --compartment-id=$compartment_ocid  --display-name=${clusterName}-mt --availability-domain=${availability_domain} | jq -r '.data[] | .id'`\n+mt_privateip_id=`oci fs mount-target  list --compartment-id=$compartment_ocid  --display-name=${clusterName}-mt --availability-domain=${availability_domain} | jq -r '.data[] | .\"private-ip-ids\"[]'`\n+mt_private_ip=`oci network private-ip get --private-ip-id $mt_privateip_id | jq -r '.data | .\"ip-address\"'`\n+\n+export NFS_SERVER=$mt_private_ip\n+echo \"Using NFS Server ${NFS_SERVER}\"\n+echo \"Creating Storage Class to mount OFSS\"\n+cat << EOF | kubectl apply -f -\n+kind: StorageClass\n+apiVersion: storage.k8s.io/v1beta1\n+metadata:\n+  name: oci-fss\n+provisioner: oracle.com/oci-fss\n+parameters:\n+  # Insert mount target from the FSS here\n+  mntTargetId: ${mount_target_id}\n+EOF\n+\n+echo 'Set up test running ENVVARs...'\n+NODE_IP=`kubectl get nodes -o wide| awk '{print $7}'| tail -n+3`\n+if [ -z \"$NODE_IP\" ]; then\n+\techo \"retry get node ip \";\n+  sleep 15;\n+  NODE_IP=`kubectl get nodes -o wide| awk '{print $7}'| tail -n+3`\n+fi\n+\n+export K8S_NODEPORT_HOST=$NODE_IP\n+export JAVA_HOME=\"${JAVA_HOME:-`type -p java|xargs readlink -f|xargs dirname|xargs dirname`}\"\n+\n+echo 'Clean up result root...'\n+rm -rf \"${RESULT_ROOT:?}/*\"\n+cd ${WORKSPACE}\n+echo 'Run tests...'\n+if [ \"${maven_profile_name}\" = \"oke-cert\" ]; then\n+  echo \"Running mvn -Dwdt.download.url=${wdt_download_url} -Dwit.download.url=${wit_download_url} -pl integration-tests -P ${maven_profile_name} verify\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAyODI3NA=="}, "originalCommit": {"oid": "13a473aedd9bca36d12aa76499ea8039d0cd6810"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMjA5MTIyOnYy", "diffSide": "RIGHT", "path": "oketest.sh", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxOTowMTo0MFrOIIvHYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxOTozMDo0MVrOIIwMbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAzMTQ1Ng==", "bodyText": "Can we make the number of thread as variable when we run the tests in parallel.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r546031456", "createdAt": "2020-12-18T19:01:40Z", "author": {"login": "anpanigr"}, "path": "oketest.sh", "diffHunk": "@@ -0,0 +1,183 @@\n+#!/bin/bash\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# This script provisions a OKE Kubernetes cluster using terraform (https://www.terraform.io/) and runs the new\n+# integration test suite against that cluster. Blog https://blogs.oracle.com/weblogicserver/easily-create-an-oci-container-engine-for-kubernetes-cluster-with-terraform-installer-to-run-weblogic-server\n+# provides detailed explanation for OCI properties file creation.\n+#\n+#\n+# As of May 6, 2020, the tests are clean on Kubernetes 1.16 with the following JDK workarounds:\n+# 1. Maven must be run with OpenJDK 11.0.7, available here: https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.7%2B10/OpenJDK11U-jdk_x64_linux_11.0.7_10.tar.gz\n+#    This is because of a critical bug fix. Unfortunately, the Oracle JDK 11.0.7 release was based on an earlier build and doesn't have the fix.\n+# 2. The WebLogic Image Tool will not accept an OpenJDK JDK. Set WIT_JAVA_HOME to an Oracle JDK Java Home.\n+#    For example, \"export WIT_JAVA_HOME=/usr/java/jdk-11.0.7\" before running this script.\n+#\n+set -o errexit\n+set -o pipefail\n+\n+script=\"${BASH_SOURCE[0]}\"\n+scriptDir=\"$( cd \"$( dirname \"${script}\" )\" && pwd )\"\n+\n+function usage {\n+  echo \"usage: ${script} [-n <terraform config files directory>] [-o <directory>] [-t <tests>] [-c <name>] [-p true|false] [-x <number_of_threads>] [-d <wdt_download_url>] [-i <wit_download_url>] [-m <maven_profile_name>] [-h]\"\n+  echo \"  -n Terraform config files directory \"\n+  echo \"  -o Output directory (optional) \"\n+  echo \"      (default: \\${WORKSPACE}/logdir/\\${BUILD_TAG}, if \\${WORKSPACE} defined, else /scratch/\\${USER}/kindtest) \"\n+  echo \"  -b  Availability Domain Name \"\n+  echo \"      (for example: VPGL:PHX-AD-1 , check limits quota with OCI admin)\"\n+  echo \"  -t Test filter (optional) \"\n+  echo \"      (default: **/It*) \"\n+  echo \"  -s Oracle Cloud Infra properties file  \"\n+  echo \"  -p Run It classes in parallel\"\n+  echo \"      (default: false) \"\n+  echo \"  -x Number of threads to run the classes in parallel\"\n+  echo \"      (default: 2) \"\n+  echo \"  -d WDT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-deploy-tooling/releases/latest) \"\n+  echo \"  -i WIT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-image-tool/releases/latest) \"\n+  echo \"  -m Run integration-tests or oke-cert \"\n+  echo \"      (default: integration-tests, supported values: oke-cert) \"\n+  echo \"  -h Help\"\n+  exit $1\n+}\n+\n+function prop {\n+    grep \"${1}\" ${oci_property_file}| grep -v \"#\" | cut -d'=' -f2\n+}\n+\n+if [[ -z \"${WORKSPACE}\" ]]; then\n+  outdir=\"/scratch/${USER}/oketest\"\n+  export WORKSPACE=${PWD}\n+else\n+  outdir=\"${WORKSPACE}/logdir/${BUILD_TAG}\"\n+fi\n+test_filter=\"**/It*\"\n+parallel_run=\"false\"\n+threads=\"2\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13a473aedd9bca36d12aa76499ea8039d0cd6810"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA0ODM3NA==", "bodyText": "it is optional variable, you can pass it as opt , this is just default value", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r546048374", "createdAt": "2020-12-18T19:29:03Z", "author": {"login": "marinakog"}, "path": "oketest.sh", "diffHunk": "@@ -0,0 +1,183 @@\n+#!/bin/bash\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# This script provisions a OKE Kubernetes cluster using terraform (https://www.terraform.io/) and runs the new\n+# integration test suite against that cluster. Blog https://blogs.oracle.com/weblogicserver/easily-create-an-oci-container-engine-for-kubernetes-cluster-with-terraform-installer-to-run-weblogic-server\n+# provides detailed explanation for OCI properties file creation.\n+#\n+#\n+# As of May 6, 2020, the tests are clean on Kubernetes 1.16 with the following JDK workarounds:\n+# 1. Maven must be run with OpenJDK 11.0.7, available here: https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.7%2B10/OpenJDK11U-jdk_x64_linux_11.0.7_10.tar.gz\n+#    This is because of a critical bug fix. Unfortunately, the Oracle JDK 11.0.7 release was based on an earlier build and doesn't have the fix.\n+# 2. The WebLogic Image Tool will not accept an OpenJDK JDK. Set WIT_JAVA_HOME to an Oracle JDK Java Home.\n+#    For example, \"export WIT_JAVA_HOME=/usr/java/jdk-11.0.7\" before running this script.\n+#\n+set -o errexit\n+set -o pipefail\n+\n+script=\"${BASH_SOURCE[0]}\"\n+scriptDir=\"$( cd \"$( dirname \"${script}\" )\" && pwd )\"\n+\n+function usage {\n+  echo \"usage: ${script} [-n <terraform config files directory>] [-o <directory>] [-t <tests>] [-c <name>] [-p true|false] [-x <number_of_threads>] [-d <wdt_download_url>] [-i <wit_download_url>] [-m <maven_profile_name>] [-h]\"\n+  echo \"  -n Terraform config files directory \"\n+  echo \"  -o Output directory (optional) \"\n+  echo \"      (default: \\${WORKSPACE}/logdir/\\${BUILD_TAG}, if \\${WORKSPACE} defined, else /scratch/\\${USER}/kindtest) \"\n+  echo \"  -b  Availability Domain Name \"\n+  echo \"      (for example: VPGL:PHX-AD-1 , check limits quota with OCI admin)\"\n+  echo \"  -t Test filter (optional) \"\n+  echo \"      (default: **/It*) \"\n+  echo \"  -s Oracle Cloud Infra properties file  \"\n+  echo \"  -p Run It classes in parallel\"\n+  echo \"      (default: false) \"\n+  echo \"  -x Number of threads to run the classes in parallel\"\n+  echo \"      (default: 2) \"\n+  echo \"  -d WDT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-deploy-tooling/releases/latest) \"\n+  echo \"  -i WIT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-image-tool/releases/latest) \"\n+  echo \"  -m Run integration-tests or oke-cert \"\n+  echo \"      (default: integration-tests, supported values: oke-cert) \"\n+  echo \"  -h Help\"\n+  exit $1\n+}\n+\n+function prop {\n+    grep \"${1}\" ${oci_property_file}| grep -v \"#\" | cut -d'=' -f2\n+}\n+\n+if [[ -z \"${WORKSPACE}\" ]]; then\n+  outdir=\"/scratch/${USER}/oketest\"\n+  export WORKSPACE=${PWD}\n+else\n+  outdir=\"${WORKSPACE}/logdir/${BUILD_TAG}\"\n+fi\n+test_filter=\"**/It*\"\n+parallel_run=\"false\"\n+threads=\"2\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAzMTQ1Ng=="}, "originalCommit": {"oid": "13a473aedd9bca36d12aa76499ea8039d0cd6810"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA0OTEzNA==", "bodyText": "x) threads=\"${OPTARG}\"", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r546049134", "createdAt": "2020-12-18T19:30:41Z", "author": {"login": "marinakog"}, "path": "oketest.sh", "diffHunk": "@@ -0,0 +1,183 @@\n+#!/bin/bash\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# This script provisions a OKE Kubernetes cluster using terraform (https://www.terraform.io/) and runs the new\n+# integration test suite against that cluster. Blog https://blogs.oracle.com/weblogicserver/easily-create-an-oci-container-engine-for-kubernetes-cluster-with-terraform-installer-to-run-weblogic-server\n+# provides detailed explanation for OCI properties file creation.\n+#\n+#\n+# As of May 6, 2020, the tests are clean on Kubernetes 1.16 with the following JDK workarounds:\n+# 1. Maven must be run with OpenJDK 11.0.7, available here: https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.7%2B10/OpenJDK11U-jdk_x64_linux_11.0.7_10.tar.gz\n+#    This is because of a critical bug fix. Unfortunately, the Oracle JDK 11.0.7 release was based on an earlier build and doesn't have the fix.\n+# 2. The WebLogic Image Tool will not accept an OpenJDK JDK. Set WIT_JAVA_HOME to an Oracle JDK Java Home.\n+#    For example, \"export WIT_JAVA_HOME=/usr/java/jdk-11.0.7\" before running this script.\n+#\n+set -o errexit\n+set -o pipefail\n+\n+script=\"${BASH_SOURCE[0]}\"\n+scriptDir=\"$( cd \"$( dirname \"${script}\" )\" && pwd )\"\n+\n+function usage {\n+  echo \"usage: ${script} [-n <terraform config files directory>] [-o <directory>] [-t <tests>] [-c <name>] [-p true|false] [-x <number_of_threads>] [-d <wdt_download_url>] [-i <wit_download_url>] [-m <maven_profile_name>] [-h]\"\n+  echo \"  -n Terraform config files directory \"\n+  echo \"  -o Output directory (optional) \"\n+  echo \"      (default: \\${WORKSPACE}/logdir/\\${BUILD_TAG}, if \\${WORKSPACE} defined, else /scratch/\\${USER}/kindtest) \"\n+  echo \"  -b  Availability Domain Name \"\n+  echo \"      (for example: VPGL:PHX-AD-1 , check limits quota with OCI admin)\"\n+  echo \"  -t Test filter (optional) \"\n+  echo \"      (default: **/It*) \"\n+  echo \"  -s Oracle Cloud Infra properties file  \"\n+  echo \"  -p Run It classes in parallel\"\n+  echo \"      (default: false) \"\n+  echo \"  -x Number of threads to run the classes in parallel\"\n+  echo \"      (default: 2) \"\n+  echo \"  -d WDT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-deploy-tooling/releases/latest) \"\n+  echo \"  -i WIT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-image-tool/releases/latest) \"\n+  echo \"  -m Run integration-tests or oke-cert \"\n+  echo \"      (default: integration-tests, supported values: oke-cert) \"\n+  echo \"  -h Help\"\n+  exit $1\n+}\n+\n+function prop {\n+    grep \"${1}\" ${oci_property_file}| grep -v \"#\" | cut -d'=' -f2\n+}\n+\n+if [[ -z \"${WORKSPACE}\" ]]; then\n+  outdir=\"/scratch/${USER}/oketest\"\n+  export WORKSPACE=${PWD}\n+else\n+  outdir=\"${WORKSPACE}/logdir/${BUILD_TAG}\"\n+fi\n+test_filter=\"**/It*\"\n+parallel_run=\"false\"\n+threads=\"2\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAzMTQ1Ng=="}, "originalCommit": {"oid": "13a473aedd9bca36d12aa76499ea8039d0cd6810"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMjIxMzM4OnYy", "diffSide": "RIGHT", "path": "oketest.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxOTozNToxMVrOIIwUfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxOTo1NTo0MVrOIIw5kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA1MTE5Ng==", "bodyText": "match with actual mvn command", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r546051196", "createdAt": "2020-12-18T19:35:11Z", "author": {"login": "vanajamukkara"}, "path": "oketest.sh", "diffHunk": "@@ -0,0 +1,183 @@\n+#!/bin/bash\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# This script provisions a OKE Kubernetes cluster using terraform (https://www.terraform.io/) and runs the new\n+# integration test suite against that cluster. Blog https://blogs.oracle.com/weblogicserver/easily-create-an-oci-container-engine-for-kubernetes-cluster-with-terraform-installer-to-run-weblogic-server\n+# provides detailed explanation for OCI properties file creation.\n+#\n+#\n+# As of May 6, 2020, the tests are clean on Kubernetes 1.16 with the following JDK workarounds:\n+# 1. Maven must be run with OpenJDK 11.0.7, available here: https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.7%2B10/OpenJDK11U-jdk_x64_linux_11.0.7_10.tar.gz\n+#    This is because of a critical bug fix. Unfortunately, the Oracle JDK 11.0.7 release was based on an earlier build and doesn't have the fix.\n+# 2. The WebLogic Image Tool will not accept an OpenJDK JDK. Set WIT_JAVA_HOME to an Oracle JDK Java Home.\n+#    For example, \"export WIT_JAVA_HOME=/usr/java/jdk-11.0.7\" before running this script.\n+#\n+set -o errexit\n+set -o pipefail\n+\n+script=\"${BASH_SOURCE[0]}\"\n+scriptDir=\"$( cd \"$( dirname \"${script}\" )\" && pwd )\"\n+\n+function usage {\n+  echo \"usage: ${script} [-n <terraform config files directory>] [-o <directory>] [-t <tests>] [-c <name>] [-p true|false] [-x <number_of_threads>] [-d <wdt_download_url>] [-i <wit_download_url>] [-m <maven_profile_name>] [-h]\"\n+  echo \"  -n Terraform config files directory \"\n+  echo \"  -o Output directory (optional) \"\n+  echo \"      (default: \\${WORKSPACE}/logdir/\\${BUILD_TAG}, if \\${WORKSPACE} defined, else /scratch/\\${USER}/kindtest) \"\n+  echo \"  -b  Availability Domain Name \"\n+  echo \"      (for example: VPGL:PHX-AD-1 , check limits quota with OCI admin)\"\n+  echo \"  -t Test filter (optional) \"\n+  echo \"      (default: **/It*) \"\n+  echo \"  -s Oracle Cloud Infra properties file  \"\n+  echo \"  -p Run It classes in parallel\"\n+  echo \"      (default: false) \"\n+  echo \"  -x Number of threads to run the classes in parallel\"\n+  echo \"      (default: 2) \"\n+  echo \"  -d WDT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-deploy-tooling/releases/latest) \"\n+  echo \"  -i WIT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-image-tool/releases/latest) \"\n+  echo \"  -m Run integration-tests or oke-cert \"\n+  echo \"      (default: integration-tests, supported values: oke-cert) \"\n+  echo \"  -h Help\"\n+  exit $1\n+}\n+\n+function prop {\n+    grep \"${1}\" ${oci_property_file}| grep -v \"#\" | cut -d'=' -f2\n+}\n+\n+if [[ -z \"${WORKSPACE}\" ]]; then\n+  outdir=\"/scratch/${USER}/oketest\"\n+  export WORKSPACE=${PWD}\n+else\n+  outdir=\"${WORKSPACE}/logdir/${BUILD_TAG}\"\n+fi\n+test_filter=\"**/It*\"\n+parallel_run=\"false\"\n+threads=\"2\"\n+wdt_download_url=\"https://github.com/oracle/weblogic-deploy-tooling/releases/latest\"\n+wit_download_url=\"https://github.com/oracle/weblogic-image-tool/releases/latest\"\n+maven_profile_name=\"integration-tests\"\n+\n+while getopts \":h:n:o:t:x:s:p:d:i:m:b:\" opt; do\n+  case $opt in\n+    n) terraform_script_dir_name=\"${OPTARG}\"\n+    ;;\n+    s) oci_property_file=\"${OPTARG}\"\n+    ;;\n+    b) availability_domain=\"${OPTARG}\"\n+    ;;\n+    o) outdir=\"${OPTARG}\"\n+    ;;\n+    t) test_filter=\"${OPTARG}\"\n+    ;;\n+    x) threads=\"${OPTARG}\"\n+    ;;\n+    p) parallel_run=\"${OPTARG}\"\n+    ;;\n+    d) wdt_download_url=\"${OPTARG}\"\n+    ;;\n+    i) wit_download_url=\"${OPTARG}\"\n+    ;;\n+    m) maven_profile_name=\"${OPTARG}\"\n+    ;;\n+    h) usage 0\n+    ;;\n+    d) echo \"Ignoring -d=${OPTARG}\"\n+    ;;\n+    i) echo \"Ignoring -i=${OPTARG}\"\n+    ;;\n+    *) usage 1\n+    ;;\n+  esac\n+done\n+\n+k8s_version=$(prop 'k8s.version')\n+echo \"Using Kubernetes version: ${k8s_version}\"\n+\n+mkdir -m777 -p \"${outdir}\"\n+export RESULT_ROOT=\"${outdir}/wl_k8s_test_results\"\n+if [ -d \"${RESULT_ROOT}\" ]; then\n+  rm -Rf \"${RESULT_ROOT}/*\"\n+else\n+  mkdir -m777 \"${RESULT_ROOT}\"\n+fi\n+\n+echo \"Results will be in ${RESULT_ROOT}\"\n+\n+export PV_ROOT=\"${outdir}/k8s-pvroot\"\n+if [ -d \"${PV_ROOT}\" ]; then\n+  rm -Rf \"${PV_ROOT}/*\"\n+else\n+  mkdir -m777 \"${PV_ROOT}\"\n+fi\n+\n+echo \"Persistent volume files, if any, will be in ${PV_ROOT}\"\n+\n+echo 'Create a OKE cluster'\n+mkdir -p \"${WORKSPACE}/terraform\"\n+cp -rf ${terraform_script_dir_name}/*.tf ${WORKSPACE}/terraform/.\n+cp -rf ${WORKSPACE}/kubernetes/samples/scripts/terraform/template.tfvars ${WORKSPACE}/terraform/.\n+cp -rf ${WORKSPACE}/kubernetes/samples/scripts/terraform/*.sh ${WORKSPACE}/terraform/.\n+chmod 777 ${WORKSPACE}/terraform/*.sh\n+mkdir -p ${WORKSPACE}/terraform/terraforminstall\n+\n+if ! sh ${WORKSPACE}/terraform/oke.create.sh ${oci_property_file} ${WORKSPACE}/terraform ; then\n+  sh ${WORKSPACE}/terraform/oke.delete.sh ${oci_property_file} ${WORKSPACE}/terraform\n+fi\n+\n+clusterName=$(prop 'okeclustername')\n+\n+export KUBECONFIG=${WORKSPACE}/terraform/${clusterName}_kubeconfig\n+export PATH=${WORKSPACE}/terraform/terraforminstall:$PATH\n+\n+echo \"creating storage class to setup OFSS ...\"\n+\n+echo \"getting MountTarget ID\"\n+compartment_ocid=$(prop 'compartment.ocid')\n+mount_target_id=`oci fs mount-target  list --compartment-id=$compartment_ocid  --display-name=${clusterName}-mt --availability-domain=${availability_domain} | jq -r '.data[] | .id'`\n+mt_privateip_id=`oci fs mount-target  list --compartment-id=$compartment_ocid  --display-name=${clusterName}-mt --availability-domain=${availability_domain} | jq -r '.data[] | .\"private-ip-ids\"[]'`\n+mt_private_ip=`oci network private-ip get --private-ip-id $mt_privateip_id | jq -r '.data | .\"ip-address\"'`\n+\n+export NFS_SERVER=$mt_private_ip\n+echo \"Using NFS Server ${NFS_SERVER}\"\n+echo \"Creating Storage Class to mount OFSS\"\n+cat << EOF | kubectl apply -f -\n+kind: StorageClass\n+apiVersion: storage.k8s.io/v1beta1\n+metadata:\n+  name: oci-fss\n+provisioner: oracle.com/oci-fss\n+parameters:\n+  # Insert mount target from the FSS here\n+  mntTargetId: ${mount_target_id}\n+EOF\n+\n+echo 'Set up test running ENVVARs...'\n+NODE_IP=`kubectl get nodes -o wide| awk '{print $7}'| tail -n+3`\n+if [ -z \"$NODE_IP\" ]; then\n+\techo \"retry get node ip \";\n+  sleep 15;\n+  NODE_IP=`kubectl get nodes -o wide| awk '{print $7}'| tail -n+3`\n+fi\n+\n+export K8S_NODEPORT_HOST=$NODE_IP\n+export JAVA_HOME=\"${JAVA_HOME:-`type -p java|xargs readlink -f|xargs dirname|xargs dirname`}\"\n+\n+echo 'Clean up result root...'\n+rm -rf \"${RESULT_ROOT:?}/*\"\n+cd ${WORKSPACE}\n+echo 'Run tests...'\n+if [ \"${maven_profile_name}\" = \"oke-cert\" ]; then\n+  echo \"Running mvn -Dwdt.download.url=${wdt_download_url} -Dwit.download.url=${wit_download_url} -pl integration-tests -P ${maven_profile_name} verify\"\n+  mvn -Dwdt.download.url=\"${wdt_download_url}\" -Dwit.download.url=\"${wit_download_url}\" -Djdk.tls.client.protocols=TLSv1.2 -pl integration-tests -P ${maven_profile_name} verify 2>&1 | tee \"${RESULT_ROOT}/oke.log\"\n+else\n+  if [ \"${parallel_run}\" = \"false\" ]; then\n+    echo \"Running mvn -Dit.test=${test_filter} -Dwdt.download.url=${wdt_download_url} -Dwit.download.url=${wit_download_url} -pl integration-tests -P integration-tests verify\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13a473aedd9bca36d12aa76499ea8039d0cd6810"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA2MDY4OA==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r546060688", "createdAt": "2020-12-18T19:55:41Z", "author": {"login": "marinakog"}, "path": "oketest.sh", "diffHunk": "@@ -0,0 +1,183 @@\n+#!/bin/bash\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# This script provisions a OKE Kubernetes cluster using terraform (https://www.terraform.io/) and runs the new\n+# integration test suite against that cluster. Blog https://blogs.oracle.com/weblogicserver/easily-create-an-oci-container-engine-for-kubernetes-cluster-with-terraform-installer-to-run-weblogic-server\n+# provides detailed explanation for OCI properties file creation.\n+#\n+#\n+# As of May 6, 2020, the tests are clean on Kubernetes 1.16 with the following JDK workarounds:\n+# 1. Maven must be run with OpenJDK 11.0.7, available here: https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.7%2B10/OpenJDK11U-jdk_x64_linux_11.0.7_10.tar.gz\n+#    This is because of a critical bug fix. Unfortunately, the Oracle JDK 11.0.7 release was based on an earlier build and doesn't have the fix.\n+# 2. The WebLogic Image Tool will not accept an OpenJDK JDK. Set WIT_JAVA_HOME to an Oracle JDK Java Home.\n+#    For example, \"export WIT_JAVA_HOME=/usr/java/jdk-11.0.7\" before running this script.\n+#\n+set -o errexit\n+set -o pipefail\n+\n+script=\"${BASH_SOURCE[0]}\"\n+scriptDir=\"$( cd \"$( dirname \"${script}\" )\" && pwd )\"\n+\n+function usage {\n+  echo \"usage: ${script} [-n <terraform config files directory>] [-o <directory>] [-t <tests>] [-c <name>] [-p true|false] [-x <number_of_threads>] [-d <wdt_download_url>] [-i <wit_download_url>] [-m <maven_profile_name>] [-h]\"\n+  echo \"  -n Terraform config files directory \"\n+  echo \"  -o Output directory (optional) \"\n+  echo \"      (default: \\${WORKSPACE}/logdir/\\${BUILD_TAG}, if \\${WORKSPACE} defined, else /scratch/\\${USER}/kindtest) \"\n+  echo \"  -b  Availability Domain Name \"\n+  echo \"      (for example: VPGL:PHX-AD-1 , check limits quota with OCI admin)\"\n+  echo \"  -t Test filter (optional) \"\n+  echo \"      (default: **/It*) \"\n+  echo \"  -s Oracle Cloud Infra properties file  \"\n+  echo \"  -p Run It classes in parallel\"\n+  echo \"      (default: false) \"\n+  echo \"  -x Number of threads to run the classes in parallel\"\n+  echo \"      (default: 2) \"\n+  echo \"  -d WDT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-deploy-tooling/releases/latest) \"\n+  echo \"  -i WIT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-image-tool/releases/latest) \"\n+  echo \"  -m Run integration-tests or oke-cert \"\n+  echo \"      (default: integration-tests, supported values: oke-cert) \"\n+  echo \"  -h Help\"\n+  exit $1\n+}\n+\n+function prop {\n+    grep \"${1}\" ${oci_property_file}| grep -v \"#\" | cut -d'=' -f2\n+}\n+\n+if [[ -z \"${WORKSPACE}\" ]]; then\n+  outdir=\"/scratch/${USER}/oketest\"\n+  export WORKSPACE=${PWD}\n+else\n+  outdir=\"${WORKSPACE}/logdir/${BUILD_TAG}\"\n+fi\n+test_filter=\"**/It*\"\n+parallel_run=\"false\"\n+threads=\"2\"\n+wdt_download_url=\"https://github.com/oracle/weblogic-deploy-tooling/releases/latest\"\n+wit_download_url=\"https://github.com/oracle/weblogic-image-tool/releases/latest\"\n+maven_profile_name=\"integration-tests\"\n+\n+while getopts \":h:n:o:t:x:s:p:d:i:m:b:\" opt; do\n+  case $opt in\n+    n) terraform_script_dir_name=\"${OPTARG}\"\n+    ;;\n+    s) oci_property_file=\"${OPTARG}\"\n+    ;;\n+    b) availability_domain=\"${OPTARG}\"\n+    ;;\n+    o) outdir=\"${OPTARG}\"\n+    ;;\n+    t) test_filter=\"${OPTARG}\"\n+    ;;\n+    x) threads=\"${OPTARG}\"\n+    ;;\n+    p) parallel_run=\"${OPTARG}\"\n+    ;;\n+    d) wdt_download_url=\"${OPTARG}\"\n+    ;;\n+    i) wit_download_url=\"${OPTARG}\"\n+    ;;\n+    m) maven_profile_name=\"${OPTARG}\"\n+    ;;\n+    h) usage 0\n+    ;;\n+    d) echo \"Ignoring -d=${OPTARG}\"\n+    ;;\n+    i) echo \"Ignoring -i=${OPTARG}\"\n+    ;;\n+    *) usage 1\n+    ;;\n+  esac\n+done\n+\n+k8s_version=$(prop 'k8s.version')\n+echo \"Using Kubernetes version: ${k8s_version}\"\n+\n+mkdir -m777 -p \"${outdir}\"\n+export RESULT_ROOT=\"${outdir}/wl_k8s_test_results\"\n+if [ -d \"${RESULT_ROOT}\" ]; then\n+  rm -Rf \"${RESULT_ROOT}/*\"\n+else\n+  mkdir -m777 \"${RESULT_ROOT}\"\n+fi\n+\n+echo \"Results will be in ${RESULT_ROOT}\"\n+\n+export PV_ROOT=\"${outdir}/k8s-pvroot\"\n+if [ -d \"${PV_ROOT}\" ]; then\n+  rm -Rf \"${PV_ROOT}/*\"\n+else\n+  mkdir -m777 \"${PV_ROOT}\"\n+fi\n+\n+echo \"Persistent volume files, if any, will be in ${PV_ROOT}\"\n+\n+echo 'Create a OKE cluster'\n+mkdir -p \"${WORKSPACE}/terraform\"\n+cp -rf ${terraform_script_dir_name}/*.tf ${WORKSPACE}/terraform/.\n+cp -rf ${WORKSPACE}/kubernetes/samples/scripts/terraform/template.tfvars ${WORKSPACE}/terraform/.\n+cp -rf ${WORKSPACE}/kubernetes/samples/scripts/terraform/*.sh ${WORKSPACE}/terraform/.\n+chmod 777 ${WORKSPACE}/terraform/*.sh\n+mkdir -p ${WORKSPACE}/terraform/terraforminstall\n+\n+if ! sh ${WORKSPACE}/terraform/oke.create.sh ${oci_property_file} ${WORKSPACE}/terraform ; then\n+  sh ${WORKSPACE}/terraform/oke.delete.sh ${oci_property_file} ${WORKSPACE}/terraform\n+fi\n+\n+clusterName=$(prop 'okeclustername')\n+\n+export KUBECONFIG=${WORKSPACE}/terraform/${clusterName}_kubeconfig\n+export PATH=${WORKSPACE}/terraform/terraforminstall:$PATH\n+\n+echo \"creating storage class to setup OFSS ...\"\n+\n+echo \"getting MountTarget ID\"\n+compartment_ocid=$(prop 'compartment.ocid')\n+mount_target_id=`oci fs mount-target  list --compartment-id=$compartment_ocid  --display-name=${clusterName}-mt --availability-domain=${availability_domain} | jq -r '.data[] | .id'`\n+mt_privateip_id=`oci fs mount-target  list --compartment-id=$compartment_ocid  --display-name=${clusterName}-mt --availability-domain=${availability_domain} | jq -r '.data[] | .\"private-ip-ids\"[]'`\n+mt_private_ip=`oci network private-ip get --private-ip-id $mt_privateip_id | jq -r '.data | .\"ip-address\"'`\n+\n+export NFS_SERVER=$mt_private_ip\n+echo \"Using NFS Server ${NFS_SERVER}\"\n+echo \"Creating Storage Class to mount OFSS\"\n+cat << EOF | kubectl apply -f -\n+kind: StorageClass\n+apiVersion: storage.k8s.io/v1beta1\n+metadata:\n+  name: oci-fss\n+provisioner: oracle.com/oci-fss\n+parameters:\n+  # Insert mount target from the FSS here\n+  mntTargetId: ${mount_target_id}\n+EOF\n+\n+echo 'Set up test running ENVVARs...'\n+NODE_IP=`kubectl get nodes -o wide| awk '{print $7}'| tail -n+3`\n+if [ -z \"$NODE_IP\" ]; then\n+\techo \"retry get node ip \";\n+  sleep 15;\n+  NODE_IP=`kubectl get nodes -o wide| awk '{print $7}'| tail -n+3`\n+fi\n+\n+export K8S_NODEPORT_HOST=$NODE_IP\n+export JAVA_HOME=\"${JAVA_HOME:-`type -p java|xargs readlink -f|xargs dirname|xargs dirname`}\"\n+\n+echo 'Clean up result root...'\n+rm -rf \"${RESULT_ROOT:?}/*\"\n+cd ${WORKSPACE}\n+echo 'Run tests...'\n+if [ \"${maven_profile_name}\" = \"oke-cert\" ]; then\n+  echo \"Running mvn -Dwdt.download.url=${wdt_download_url} -Dwit.download.url=${wit_download_url} -pl integration-tests -P ${maven_profile_name} verify\"\n+  mvn -Dwdt.download.url=\"${wdt_download_url}\" -Dwit.download.url=\"${wit_download_url}\" -Djdk.tls.client.protocols=TLSv1.2 -pl integration-tests -P ${maven_profile_name} verify 2>&1 | tee \"${RESULT_ROOT}/oke.log\"\n+else\n+  if [ \"${parallel_run}\" = \"false\" ]; then\n+    echo \"Running mvn -Dit.test=${test_filter} -Dwdt.download.url=${wdt_download_url} -Dwit.download.url=${wit_download_url} -pl integration-tests -P integration-tests verify\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA1MTE5Ng=="}, "originalCommit": {"oid": "13a473aedd9bca36d12aa76499ea8039d0cd6810"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMjIxMzYzOnYy", "diffSide": "RIGHT", "path": "oketest.sh", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxOTozNToxNlrOIIwUoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxOTo1NTo0N1rOIIw5tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA1MTIzMg==", "bodyText": "match with actual mvn command", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r546051232", "createdAt": "2020-12-18T19:35:16Z", "author": {"login": "vanajamukkara"}, "path": "oketest.sh", "diffHunk": "@@ -0,0 +1,183 @@\n+#!/bin/bash\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# This script provisions a OKE Kubernetes cluster using terraform (https://www.terraform.io/) and runs the new\n+# integration test suite against that cluster. Blog https://blogs.oracle.com/weblogicserver/easily-create-an-oci-container-engine-for-kubernetes-cluster-with-terraform-installer-to-run-weblogic-server\n+# provides detailed explanation for OCI properties file creation.\n+#\n+#\n+# As of May 6, 2020, the tests are clean on Kubernetes 1.16 with the following JDK workarounds:\n+# 1. Maven must be run with OpenJDK 11.0.7, available here: https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.7%2B10/OpenJDK11U-jdk_x64_linux_11.0.7_10.tar.gz\n+#    This is because of a critical bug fix. Unfortunately, the Oracle JDK 11.0.7 release was based on an earlier build and doesn't have the fix.\n+# 2. The WebLogic Image Tool will not accept an OpenJDK JDK. Set WIT_JAVA_HOME to an Oracle JDK Java Home.\n+#    For example, \"export WIT_JAVA_HOME=/usr/java/jdk-11.0.7\" before running this script.\n+#\n+set -o errexit\n+set -o pipefail\n+\n+script=\"${BASH_SOURCE[0]}\"\n+scriptDir=\"$( cd \"$( dirname \"${script}\" )\" && pwd )\"\n+\n+function usage {\n+  echo \"usage: ${script} [-n <terraform config files directory>] [-o <directory>] [-t <tests>] [-c <name>] [-p true|false] [-x <number_of_threads>] [-d <wdt_download_url>] [-i <wit_download_url>] [-m <maven_profile_name>] [-h]\"\n+  echo \"  -n Terraform config files directory \"\n+  echo \"  -o Output directory (optional) \"\n+  echo \"      (default: \\${WORKSPACE}/logdir/\\${BUILD_TAG}, if \\${WORKSPACE} defined, else /scratch/\\${USER}/kindtest) \"\n+  echo \"  -b  Availability Domain Name \"\n+  echo \"      (for example: VPGL:PHX-AD-1 , check limits quota with OCI admin)\"\n+  echo \"  -t Test filter (optional) \"\n+  echo \"      (default: **/It*) \"\n+  echo \"  -s Oracle Cloud Infra properties file  \"\n+  echo \"  -p Run It classes in parallel\"\n+  echo \"      (default: false) \"\n+  echo \"  -x Number of threads to run the classes in parallel\"\n+  echo \"      (default: 2) \"\n+  echo \"  -d WDT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-deploy-tooling/releases/latest) \"\n+  echo \"  -i WIT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-image-tool/releases/latest) \"\n+  echo \"  -m Run integration-tests or oke-cert \"\n+  echo \"      (default: integration-tests, supported values: oke-cert) \"\n+  echo \"  -h Help\"\n+  exit $1\n+}\n+\n+function prop {\n+    grep \"${1}\" ${oci_property_file}| grep -v \"#\" | cut -d'=' -f2\n+}\n+\n+if [[ -z \"${WORKSPACE}\" ]]; then\n+  outdir=\"/scratch/${USER}/oketest\"\n+  export WORKSPACE=${PWD}\n+else\n+  outdir=\"${WORKSPACE}/logdir/${BUILD_TAG}\"\n+fi\n+test_filter=\"**/It*\"\n+parallel_run=\"false\"\n+threads=\"2\"\n+wdt_download_url=\"https://github.com/oracle/weblogic-deploy-tooling/releases/latest\"\n+wit_download_url=\"https://github.com/oracle/weblogic-image-tool/releases/latest\"\n+maven_profile_name=\"integration-tests\"\n+\n+while getopts \":h:n:o:t:x:s:p:d:i:m:b:\" opt; do\n+  case $opt in\n+    n) terraform_script_dir_name=\"${OPTARG}\"\n+    ;;\n+    s) oci_property_file=\"${OPTARG}\"\n+    ;;\n+    b) availability_domain=\"${OPTARG}\"\n+    ;;\n+    o) outdir=\"${OPTARG}\"\n+    ;;\n+    t) test_filter=\"${OPTARG}\"\n+    ;;\n+    x) threads=\"${OPTARG}\"\n+    ;;\n+    p) parallel_run=\"${OPTARG}\"\n+    ;;\n+    d) wdt_download_url=\"${OPTARG}\"\n+    ;;\n+    i) wit_download_url=\"${OPTARG}\"\n+    ;;\n+    m) maven_profile_name=\"${OPTARG}\"\n+    ;;\n+    h) usage 0\n+    ;;\n+    d) echo \"Ignoring -d=${OPTARG}\"\n+    ;;\n+    i) echo \"Ignoring -i=${OPTARG}\"\n+    ;;\n+    *) usage 1\n+    ;;\n+  esac\n+done\n+\n+k8s_version=$(prop 'k8s.version')\n+echo \"Using Kubernetes version: ${k8s_version}\"\n+\n+mkdir -m777 -p \"${outdir}\"\n+export RESULT_ROOT=\"${outdir}/wl_k8s_test_results\"\n+if [ -d \"${RESULT_ROOT}\" ]; then\n+  rm -Rf \"${RESULT_ROOT}/*\"\n+else\n+  mkdir -m777 \"${RESULT_ROOT}\"\n+fi\n+\n+echo \"Results will be in ${RESULT_ROOT}\"\n+\n+export PV_ROOT=\"${outdir}/k8s-pvroot\"\n+if [ -d \"${PV_ROOT}\" ]; then\n+  rm -Rf \"${PV_ROOT}/*\"\n+else\n+  mkdir -m777 \"${PV_ROOT}\"\n+fi\n+\n+echo \"Persistent volume files, if any, will be in ${PV_ROOT}\"\n+\n+echo 'Create a OKE cluster'\n+mkdir -p \"${WORKSPACE}/terraform\"\n+cp -rf ${terraform_script_dir_name}/*.tf ${WORKSPACE}/terraform/.\n+cp -rf ${WORKSPACE}/kubernetes/samples/scripts/terraform/template.tfvars ${WORKSPACE}/terraform/.\n+cp -rf ${WORKSPACE}/kubernetes/samples/scripts/terraform/*.sh ${WORKSPACE}/terraform/.\n+chmod 777 ${WORKSPACE}/terraform/*.sh\n+mkdir -p ${WORKSPACE}/terraform/terraforminstall\n+\n+if ! sh ${WORKSPACE}/terraform/oke.create.sh ${oci_property_file} ${WORKSPACE}/terraform ; then\n+  sh ${WORKSPACE}/terraform/oke.delete.sh ${oci_property_file} ${WORKSPACE}/terraform\n+fi\n+\n+clusterName=$(prop 'okeclustername')\n+\n+export KUBECONFIG=${WORKSPACE}/terraform/${clusterName}_kubeconfig\n+export PATH=${WORKSPACE}/terraform/terraforminstall:$PATH\n+\n+echo \"creating storage class to setup OFSS ...\"\n+\n+echo \"getting MountTarget ID\"\n+compartment_ocid=$(prop 'compartment.ocid')\n+mount_target_id=`oci fs mount-target  list --compartment-id=$compartment_ocid  --display-name=${clusterName}-mt --availability-domain=${availability_domain} | jq -r '.data[] | .id'`\n+mt_privateip_id=`oci fs mount-target  list --compartment-id=$compartment_ocid  --display-name=${clusterName}-mt --availability-domain=${availability_domain} | jq -r '.data[] | .\"private-ip-ids\"[]'`\n+mt_private_ip=`oci network private-ip get --private-ip-id $mt_privateip_id | jq -r '.data | .\"ip-address\"'`\n+\n+export NFS_SERVER=$mt_private_ip\n+echo \"Using NFS Server ${NFS_SERVER}\"\n+echo \"Creating Storage Class to mount OFSS\"\n+cat << EOF | kubectl apply -f -\n+kind: StorageClass\n+apiVersion: storage.k8s.io/v1beta1\n+metadata:\n+  name: oci-fss\n+provisioner: oracle.com/oci-fss\n+parameters:\n+  # Insert mount target from the FSS here\n+  mntTargetId: ${mount_target_id}\n+EOF\n+\n+echo 'Set up test running ENVVARs...'\n+NODE_IP=`kubectl get nodes -o wide| awk '{print $7}'| tail -n+3`\n+if [ -z \"$NODE_IP\" ]; then\n+\techo \"retry get node ip \";\n+  sleep 15;\n+  NODE_IP=`kubectl get nodes -o wide| awk '{print $7}'| tail -n+3`\n+fi\n+\n+export K8S_NODEPORT_HOST=$NODE_IP\n+export JAVA_HOME=\"${JAVA_HOME:-`type -p java|xargs readlink -f|xargs dirname|xargs dirname`}\"\n+\n+echo 'Clean up result root...'\n+rm -rf \"${RESULT_ROOT:?}/*\"\n+cd ${WORKSPACE}\n+echo 'Run tests...'\n+if [ \"${maven_profile_name}\" = \"oke-cert\" ]; then\n+  echo \"Running mvn -Dwdt.download.url=${wdt_download_url} -Dwit.download.url=${wit_download_url} -pl integration-tests -P ${maven_profile_name} verify\"\n+  mvn -Dwdt.download.url=\"${wdt_download_url}\" -Dwit.download.url=\"${wit_download_url}\" -Djdk.tls.client.protocols=TLSv1.2 -pl integration-tests -P ${maven_profile_name} verify 2>&1 | tee \"${RESULT_ROOT}/oke.log\"\n+else\n+  if [ \"${parallel_run}\" = \"false\" ]; then\n+    echo \"Running mvn -Dit.test=${test_filter} -Dwdt.download.url=${wdt_download_url} -Dwit.download.url=${wit_download_url} -pl integration-tests -P integration-tests verify\"\n+    mvn -Dit.test=\"${test_filter}, !ItExternalRmiTunneling, !ItSamples, !ItMiiSample, !ItTwoDomainsLoadBalancers, !ItMonitoringExporter, !ItPodRestart\" -Dwdt.download.url=\"${wdt_download_url}\" -Dwit.download.url=\"${wit_download_url}\" -Djdk.tls.client.protocols=TLSv1.2 -pl integration-tests -P ${maven_profile_name} verify 2>&1 | tee \"${RESULT_ROOT}/oke.log\"\n+  else\n+    echo \"Running mvn -Dit.test=${test_filter}, !ItOperatorUpgrade, !ItDedicatedMode -Dwdt.download.url=${wdt_download_url} -Dwit.download.url=${wit_download_url} -DPARALLEL_CLASSES=${parallel_run} -DNUMBER_OF_THREADS=${threads}  -pl integration-tests -P ${MVN_PROFILE} verify\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13a473aedd9bca36d12aa76499ea8039d0cd6810"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA2MDcyNw==", "bodyText": "done", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2113#discussion_r546060727", "createdAt": "2020-12-18T19:55:47Z", "author": {"login": "marinakog"}, "path": "oketest.sh", "diffHunk": "@@ -0,0 +1,183 @@\n+#!/bin/bash\n+# Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+#\n+# This script provisions a OKE Kubernetes cluster using terraform (https://www.terraform.io/) and runs the new\n+# integration test suite against that cluster. Blog https://blogs.oracle.com/weblogicserver/easily-create-an-oci-container-engine-for-kubernetes-cluster-with-terraform-installer-to-run-weblogic-server\n+# provides detailed explanation for OCI properties file creation.\n+#\n+#\n+# As of May 6, 2020, the tests are clean on Kubernetes 1.16 with the following JDK workarounds:\n+# 1. Maven must be run with OpenJDK 11.0.7, available here: https://github.com/AdoptOpenJDK/openjdk11-upstream-binaries/releases/download/jdk-11.0.7%2B10/OpenJDK11U-jdk_x64_linux_11.0.7_10.tar.gz\n+#    This is because of a critical bug fix. Unfortunately, the Oracle JDK 11.0.7 release was based on an earlier build and doesn't have the fix.\n+# 2. The WebLogic Image Tool will not accept an OpenJDK JDK. Set WIT_JAVA_HOME to an Oracle JDK Java Home.\n+#    For example, \"export WIT_JAVA_HOME=/usr/java/jdk-11.0.7\" before running this script.\n+#\n+set -o errexit\n+set -o pipefail\n+\n+script=\"${BASH_SOURCE[0]}\"\n+scriptDir=\"$( cd \"$( dirname \"${script}\" )\" && pwd )\"\n+\n+function usage {\n+  echo \"usage: ${script} [-n <terraform config files directory>] [-o <directory>] [-t <tests>] [-c <name>] [-p true|false] [-x <number_of_threads>] [-d <wdt_download_url>] [-i <wit_download_url>] [-m <maven_profile_name>] [-h]\"\n+  echo \"  -n Terraform config files directory \"\n+  echo \"  -o Output directory (optional) \"\n+  echo \"      (default: \\${WORKSPACE}/logdir/\\${BUILD_TAG}, if \\${WORKSPACE} defined, else /scratch/\\${USER}/kindtest) \"\n+  echo \"  -b  Availability Domain Name \"\n+  echo \"      (for example: VPGL:PHX-AD-1 , check limits quota with OCI admin)\"\n+  echo \"  -t Test filter (optional) \"\n+  echo \"      (default: **/It*) \"\n+  echo \"  -s Oracle Cloud Infra properties file  \"\n+  echo \"  -p Run It classes in parallel\"\n+  echo \"      (default: false) \"\n+  echo \"  -x Number of threads to run the classes in parallel\"\n+  echo \"      (default: 2) \"\n+  echo \"  -d WDT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-deploy-tooling/releases/latest) \"\n+  echo \"  -i WIT download URL\"\n+  echo \"      (default: https://github.com/oracle/weblogic-image-tool/releases/latest) \"\n+  echo \"  -m Run integration-tests or oke-cert \"\n+  echo \"      (default: integration-tests, supported values: oke-cert) \"\n+  echo \"  -h Help\"\n+  exit $1\n+}\n+\n+function prop {\n+    grep \"${1}\" ${oci_property_file}| grep -v \"#\" | cut -d'=' -f2\n+}\n+\n+if [[ -z \"${WORKSPACE}\" ]]; then\n+  outdir=\"/scratch/${USER}/oketest\"\n+  export WORKSPACE=${PWD}\n+else\n+  outdir=\"${WORKSPACE}/logdir/${BUILD_TAG}\"\n+fi\n+test_filter=\"**/It*\"\n+parallel_run=\"false\"\n+threads=\"2\"\n+wdt_download_url=\"https://github.com/oracle/weblogic-deploy-tooling/releases/latest\"\n+wit_download_url=\"https://github.com/oracle/weblogic-image-tool/releases/latest\"\n+maven_profile_name=\"integration-tests\"\n+\n+while getopts \":h:n:o:t:x:s:p:d:i:m:b:\" opt; do\n+  case $opt in\n+    n) terraform_script_dir_name=\"${OPTARG}\"\n+    ;;\n+    s) oci_property_file=\"${OPTARG}\"\n+    ;;\n+    b) availability_domain=\"${OPTARG}\"\n+    ;;\n+    o) outdir=\"${OPTARG}\"\n+    ;;\n+    t) test_filter=\"${OPTARG}\"\n+    ;;\n+    x) threads=\"${OPTARG}\"\n+    ;;\n+    p) parallel_run=\"${OPTARG}\"\n+    ;;\n+    d) wdt_download_url=\"${OPTARG}\"\n+    ;;\n+    i) wit_download_url=\"${OPTARG}\"\n+    ;;\n+    m) maven_profile_name=\"${OPTARG}\"\n+    ;;\n+    h) usage 0\n+    ;;\n+    d) echo \"Ignoring -d=${OPTARG}\"\n+    ;;\n+    i) echo \"Ignoring -i=${OPTARG}\"\n+    ;;\n+    *) usage 1\n+    ;;\n+  esac\n+done\n+\n+k8s_version=$(prop 'k8s.version')\n+echo \"Using Kubernetes version: ${k8s_version}\"\n+\n+mkdir -m777 -p \"${outdir}\"\n+export RESULT_ROOT=\"${outdir}/wl_k8s_test_results\"\n+if [ -d \"${RESULT_ROOT}\" ]; then\n+  rm -Rf \"${RESULT_ROOT}/*\"\n+else\n+  mkdir -m777 \"${RESULT_ROOT}\"\n+fi\n+\n+echo \"Results will be in ${RESULT_ROOT}\"\n+\n+export PV_ROOT=\"${outdir}/k8s-pvroot\"\n+if [ -d \"${PV_ROOT}\" ]; then\n+  rm -Rf \"${PV_ROOT}/*\"\n+else\n+  mkdir -m777 \"${PV_ROOT}\"\n+fi\n+\n+echo \"Persistent volume files, if any, will be in ${PV_ROOT}\"\n+\n+echo 'Create a OKE cluster'\n+mkdir -p \"${WORKSPACE}/terraform\"\n+cp -rf ${terraform_script_dir_name}/*.tf ${WORKSPACE}/terraform/.\n+cp -rf ${WORKSPACE}/kubernetes/samples/scripts/terraform/template.tfvars ${WORKSPACE}/terraform/.\n+cp -rf ${WORKSPACE}/kubernetes/samples/scripts/terraform/*.sh ${WORKSPACE}/terraform/.\n+chmod 777 ${WORKSPACE}/terraform/*.sh\n+mkdir -p ${WORKSPACE}/terraform/terraforminstall\n+\n+if ! sh ${WORKSPACE}/terraform/oke.create.sh ${oci_property_file} ${WORKSPACE}/terraform ; then\n+  sh ${WORKSPACE}/terraform/oke.delete.sh ${oci_property_file} ${WORKSPACE}/terraform\n+fi\n+\n+clusterName=$(prop 'okeclustername')\n+\n+export KUBECONFIG=${WORKSPACE}/terraform/${clusterName}_kubeconfig\n+export PATH=${WORKSPACE}/terraform/terraforminstall:$PATH\n+\n+echo \"creating storage class to setup OFSS ...\"\n+\n+echo \"getting MountTarget ID\"\n+compartment_ocid=$(prop 'compartment.ocid')\n+mount_target_id=`oci fs mount-target  list --compartment-id=$compartment_ocid  --display-name=${clusterName}-mt --availability-domain=${availability_domain} | jq -r '.data[] | .id'`\n+mt_privateip_id=`oci fs mount-target  list --compartment-id=$compartment_ocid  --display-name=${clusterName}-mt --availability-domain=${availability_domain} | jq -r '.data[] | .\"private-ip-ids\"[]'`\n+mt_private_ip=`oci network private-ip get --private-ip-id $mt_privateip_id | jq -r '.data | .\"ip-address\"'`\n+\n+export NFS_SERVER=$mt_private_ip\n+echo \"Using NFS Server ${NFS_SERVER}\"\n+echo \"Creating Storage Class to mount OFSS\"\n+cat << EOF | kubectl apply -f -\n+kind: StorageClass\n+apiVersion: storage.k8s.io/v1beta1\n+metadata:\n+  name: oci-fss\n+provisioner: oracle.com/oci-fss\n+parameters:\n+  # Insert mount target from the FSS here\n+  mntTargetId: ${mount_target_id}\n+EOF\n+\n+echo 'Set up test running ENVVARs...'\n+NODE_IP=`kubectl get nodes -o wide| awk '{print $7}'| tail -n+3`\n+if [ -z \"$NODE_IP\" ]; then\n+\techo \"retry get node ip \";\n+  sleep 15;\n+  NODE_IP=`kubectl get nodes -o wide| awk '{print $7}'| tail -n+3`\n+fi\n+\n+export K8S_NODEPORT_HOST=$NODE_IP\n+export JAVA_HOME=\"${JAVA_HOME:-`type -p java|xargs readlink -f|xargs dirname|xargs dirname`}\"\n+\n+echo 'Clean up result root...'\n+rm -rf \"${RESULT_ROOT:?}/*\"\n+cd ${WORKSPACE}\n+echo 'Run tests...'\n+if [ \"${maven_profile_name}\" = \"oke-cert\" ]; then\n+  echo \"Running mvn -Dwdt.download.url=${wdt_download_url} -Dwit.download.url=${wit_download_url} -pl integration-tests -P ${maven_profile_name} verify\"\n+  mvn -Dwdt.download.url=\"${wdt_download_url}\" -Dwit.download.url=\"${wit_download_url}\" -Djdk.tls.client.protocols=TLSv1.2 -pl integration-tests -P ${maven_profile_name} verify 2>&1 | tee \"${RESULT_ROOT}/oke.log\"\n+else\n+  if [ \"${parallel_run}\" = \"false\" ]; then\n+    echo \"Running mvn -Dit.test=${test_filter} -Dwdt.download.url=${wdt_download_url} -Dwit.download.url=${wit_download_url} -pl integration-tests -P integration-tests verify\"\n+    mvn -Dit.test=\"${test_filter}, !ItExternalRmiTunneling, !ItSamples, !ItMiiSample, !ItTwoDomainsLoadBalancers, !ItMonitoringExporter, !ItPodRestart\" -Dwdt.download.url=\"${wdt_download_url}\" -Dwit.download.url=\"${wit_download_url}\" -Djdk.tls.client.protocols=TLSv1.2 -pl integration-tests -P ${maven_profile_name} verify 2>&1 | tee \"${RESULT_ROOT}/oke.log\"\n+  else\n+    echo \"Running mvn -Dit.test=${test_filter}, !ItOperatorUpgrade, !ItDedicatedMode -Dwdt.download.url=${wdt_download_url} -Dwit.download.url=${wit_download_url} -DPARALLEL_CLASSES=${parallel_run} -DNUMBER_OF_THREADS=${threads}  -pl integration-tests -P ${MVN_PROFILE} verify\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA1MTIzMg=="}, "originalCommit": {"oid": "13a473aedd9bca36d12aa76499ea8039d0cd6810"}, "originalPosition": 180}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3840, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}