{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNjc5NTAz", "number": 1721, "title": "Adding liveness probe test", "bodyText": "Adding liveness probe test\nRefactoring ItDomainInPV to have separate test methods for creating a domain, verifying t3 channel port, LB port, default node port.\nJenkins - https://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/346/\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-model-in-image-tests/924/\nKind cluster entire suite - https://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-kind-new/361/ - failure unrelated to the changes in PR, docker pull failing with net/http: request canceled\nnon-kind cluster Jenkins - https://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-model-in-image-tests-10/349/\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-model-in-image-tests/935/ - some intermittent failures not related to the changes in the PR\ndevelop branch also has some intermittent failures -\nhttps://build.weblogick8s.org:8443/job/weblogic-kubernetes-operator-model-in-image-tests-10/344/", "createdAt": "2020-06-10T20:22:20Z", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1721", "merged": true, "mergeCommit": {"oid": "ab86c968899534600fa13acf0c4f6f8f179c116c"}, "closed": true, "closedAt": "2020-06-16T20:55:47Z", "author": {"login": "vanajamukkara"}, "timelineItems": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcqCytbAH2gAyNDMyNjc5NTAzOjM5N2YxYmVlNGUyZTcwZDEzNzNlODI5NjQwZjhlZWIzNjY5OTgyMWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsB7u9AH2gAyNDMyNjc5NTAzOmE0MjBmNTZmOWU2Y2UzOGEzMDlhYzE2YTY3YzU3Mzc1Mjk5MjA4ODA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "397f1bee4e2e70d1373e829640f8eeb36699821b", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/397f1bee4e2e70d1373e829640f8eeb36699821b", "committedDate": "2020-06-11T00:06:06Z", "message": "adding test for liveness probe"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab9d8339c622562d3f1ec0c962ba9d48e43eb8d7", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ab9d8339c622562d3f1ec0c962ba9d48e43eb8d7", "committedDate": "2020-06-11T00:22:44Z", "message": "uncomment code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "587f76fb42f0918d9831e5d26ed689c53f5c2888", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/587f76fb42f0918d9831e5d26ed689c53f5c2888", "committedDate": "2020-06-11T00:31:05Z", "message": "fix log messages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e864f07fff0740b1c542b4a8e2efd362118f14f6", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e864f07fff0740b1c542b4a8e2efd362118f14f6", "committedDate": "2020-06-11T00:31:12Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into livenessprobe-it"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1186a519d2f46f8f85745d1a26cc7923c554877", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d1186a519d2f46f8f85745d1a26cc7923c554877", "committedDate": "2020-06-11T04:01:15Z", "message": "code refactoring to move some of the code to separate test methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94cbd6904f091b0839144847beb07fe6dfb95275", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/94cbd6904f091b0839144847beb07fe6dfb95275", "committedDate": "2020-06-11T04:17:03Z", "message": "code refactoring to move some of the code to separate test methods"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MTUyNzk4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1721#pullrequestreview-429152798", "createdAt": "2020-06-11T17:49:19Z", "commit": {"oid": "819fe53da6d9a9828c353ee777a906abc4339327"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzo0OToxOVrOGioSzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNzo0OToxOVrOGioSzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk2NDk0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param containerName name of the container, if null looks for first container\n          \n          \n            \n               * @param containerName name of the container, null if there is only one container", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1721#discussion_r438964940", "createdAt": "2020-06-11T17:49:19Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -476,6 +477,42 @@ public static DateTime getPodCreationTimestamp(String namespace, String labelSel\n     }\n   }\n \n+  /**\n+   * Get the container's restart count in the pod.\n+   * @param namespace name of the pod's namespace\n+   * @param labelSelector in the format \"weblogic.domainUID in (%s)\"\n+   * @param podName name of the pod\n+   * @param containerName name of the container, if null looks for first container", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "819fe53da6d9a9828c353ee777a906abc4339327"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "819fe53da6d9a9828c353ee777a906abc4339327", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/819fe53da6d9a9828c353ee777a906abc4339327", "committedDate": "2020-06-11T22:02:37Z", "message": "change env var name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70d1ae68c8c90a63f13f2cf8e5fd12740251925f", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/70d1ae68c8c90a63f13f2cf8e5fd12740251925f", "committedDate": "2020-06-12T04:41:49Z", "message": "reverting to java client api 8.0.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "049be10c079699dfa5c77ab3af9d4a050de5988d", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/049be10c079699dfa5c77ab3af9d4a050de5988d", "committedDate": "2020-06-12T06:08:52Z", "message": "copy file to /u01"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e15241fe3b39b27bb9cf7b2914a5ce941a7709c7", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e15241fe3b39b27bb9cf7b2914a5ce941a7709c7", "committedDate": "2020-06-12T10:30:14Z", "message": "adding debug msgs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37e2c1abe2b06255871fb0ba9e3b3213cb8ad33d", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/37e2c1abe2b06255871fb0ba9e3b3213cb8ad33d", "committedDate": "2020-06-12T11:11:22Z", "message": "push operator image when SKIP_BASIC_IMAGE_BUILD is set or not set"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee4d82c77d2d6d60f4d26733a024efcd6fcfc0e8", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ee4d82c77d2d6d60f4d26733a024efcd6fcfc0e8", "committedDate": "2020-06-12T11:44:48Z", "message": "add ns- to cleanup.sh to delete namespace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ed142328c6e559a17a3d1a8238a3347f27ddef1", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7ed142328c6e559a17a3d1a8238a3347f27ddef1", "committedDate": "2020-06-12T11:56:25Z", "message": "revert adding ns- to cleanup.sh"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8efd37610a63f486b387ff9e0f536fbc0350fd01", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8efd37610a63f486b387ff9e0f536fbc0350fd01", "committedDate": "2020-06-12T19:21:57Z", "message": "Update new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\n\nCo-authored-by: Sankar Periyathambi Neelakandan <45743425+sankarpn@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMDU3OTQx", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1721#pullrequestreview-430057941", "createdAt": "2020-06-12T21:57:06Z", "commit": {"oid": "8efd37610a63f486b387ff9e0f536fbc0350fd01"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5dba63cab9a37f45cbc54eea58ba23a2d75cd1c6", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5dba63cab9a37f45cbc54eea58ba23a2d75cd1c6", "committedDate": "2020-06-12T22:07:05Z", "message": "dont run dependent tests if previous test fails, revert to 8.0.2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fedade7a5c8e37a5fcbf54bf7f6789dda6bdece2", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/fedade7a5c8e37a5fcbf54bf7f6789dda6bdece2", "committedDate": "2020-06-13T00:55:29Z", "message": "increasing timeout for conditionfactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46d9cba1ef1c76b7944bd0bd01fb05b6752894ec", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/46d9cba1ef1c76b7944bd0bd01fb05b6752894ec", "committedDate": "2020-06-14T06:06:06Z", "message": "checking servers are ready after accessing the web using LB"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14c2be505eae8e8d85665470b785b035d9aa9d85", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/14c2be505eae8e8d85665470b785b035d9aa9d85", "committedDate": "2020-06-14T06:17:01Z", "message": "checking servers are ready after accessing the web using LB"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "139d563ee475e9a7363da26d2ee26b0bb7e16656", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/139d563ee475e9a7363da26d2ee26b0bb7e16656", "committedDate": "2020-06-14T06:18:49Z", "message": "Merge branch 'livenessprobe-it' of https://github.com/oracle/weblogic-kubernetes-operator into livenessprobe-it"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ddf1035fe0ba38c326b67f64503cd42a4683c38", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5ddf1035fe0ba38c326b67f64503cd42a4683c38", "committedDate": "2020-06-14T21:31:24Z", "message": "add more debug for webapp request"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74551e1fab4204a7e7378fc97c8464020675b52c", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/74551e1fab4204a7e7378fc97c8464020675b52c", "committedDate": "2020-06-14T21:38:27Z", "message": "move nginx installation to @beforeall as workaround"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNzc3Nzcy", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1721#pullrequestreview-430777772", "createdAt": "2020-06-15T15:54:03Z", "commit": {"oid": "74551e1fab4204a7e7378fc97c8464020675b52c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNTo1NDowNFrOGj4aDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNTo1OTowN1rOGj4n0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI3NzUxOQ==", "bodyText": "while you are refactoring the code, you can move this check to beforeAll", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1721#discussion_r440277519", "createdAt": "2020-06-15T15:54:04Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDomainInPV.java", "diffHunk": "@@ -178,86 +198,79 @@ public static void initAll(@Namespaces(4) List<String> namespaces) {\n       image = kindRepoImage;\n       isUseSecret = false;\n     }\n+\n+    wdtT3ChannelPort = getNextFreePort(31000, 32767);  // the port range has to be between 30,000 to 32,767\n+\n   }\n \n   /**\n-   * Create a WebLogic domain using WLST in a persistent volume.\n+   * Create a WebLogic domain using WDT in a persistent volume.\n    * Create a domain custom resource with domainHomeSourceType as PersistentVolume.\n    * Verify domain pods runs in ready state and services are created.\n    * Verify login to WebLogic console is successful.\n    */\n   @Test\n-  @DisplayName(\"Create WebLogic domain in PV using WLST script\")\n-  public void testDomainInPvUsingWlst() {\n-\n-    final String domainUid = \"wlstdomain-inpv\";\n-    final String clusterName = \"cluster-wlstdomain-inpv\";\n-    final String adminServerName = \"wlst-admin-server\";\n-    final String adminServerPodName = domainUid + \"-\" + adminServerName;\n-    final String managedServerNameBase = \"wlst-ms-\";\n-    final int managedServerPort = 8001;\n-    String managedServerPodNamePrefix = domainUid + \"-\" + managedServerNameBase;\n-    final int replicaCount = 2;\n-    final int t3ChannelPort = getNextFreePort(30000, 32767);  // the port range has to be between 30,000 to 32,767\n-\n-    final String pvName = domainUid + \"-pv\"; // name of the persistent volume\n-    final String pvcName = domainUid + \"-pvc\"; // name of the persistent volume claim\n+  @Order(1)\n+  @DisplayName(\"Create WebLogic domain in PV using WDT\")\n+  public void testDomainInPvUsingWdt() {\n+    previousTestSuccessful = false;\n+    final String pvName = wdtDomainUid + \"-pv\"; // name of the persistent volume\n+    final String pvcName = wdtDomainUid + \"-pvc\"; // name of the persistent volume claim\n \n     // create pull secrets for WebLogic image when running in non Kind Kubernetes cluster\n     if (isUseSecret) {\n-      createOCRRepoSecret(wlstDomainNamespace);\n+      createOCRRepoSecret(wdtDomainNamespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74551e1fab4204a7e7378fc97c8464020675b52c"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI4MDQwOA==", "bodyText": "We shouldn't be marking this as a Test method. The real test is whether we can create/start a domain in PV using WDT tool. This should simply be a assertion. Please make this as a private method and call it inside the test method or move it to common test utils if possible.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1721#discussion_r440280408", "createdAt": "2020-06-15T15:58:06Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDomainInPV.java", "diffHunk": "@@ -295,38 +308,111 @@ public void testDomainInPvUsingWlst() {\n                         .nodePort(0))\n                     .addChannelsItem(new Channel()\n                         .channelName(\"T3Channel\")\n-                        .nodePort(t3ChannelPort))))\n+                        .nodePort(wdtT3ChannelPort))))\n             .addClustersItem(new Cluster() //cluster\n-                .clusterName(clusterName)\n-                .replicas(replicaCount)\n+                .clusterName(wdtClusterName)\n+                .replicas(wdtReplicaCount)\n                 .serverStartState(\"RUNNING\")));\n \n     // verify the domain custom resource is created\n-    createDomainAndVerify(domain, wlstDomainNamespace);\n+    createDomainAndVerify(domain, wdtDomainNamespace);\n \n     // verify admin server pod is ready\n-    checkPodReady(adminServerPodName, domainUid, wlstDomainNamespace);\n+    checkPodReady(wdtAdminServerPodName, wdtDomainUid, wdtDomainNamespace);\n \n     // verify the admin server service created\n-    checkServiceExists(adminServerPodName, wlstDomainNamespace);\n+    checkServiceExists(wdtAdminServerPodName, wdtDomainNamespace);\n \n     // verify managed server pods are ready\n-    for (int i = 1; i <= replicaCount; i++) {\n+    for (int i = 1; i <= wdtReplicaCount; i++) {\n       logger.info(\"Waiting for managed server pod {0} to be ready in namespace {1}\",\n-          managedServerPodNamePrefix + i, wlstDomainNamespace);\n-      checkPodReady(managedServerPodNamePrefix + i, domainUid, wlstDomainNamespace);\n+          wdtManagedServerPodNamePrefix + i, wdtDomainNamespace);\n+      checkPodReady(wdtManagedServerPodNamePrefix + i, wdtDomainUid, wdtDomainNamespace);\n     }\n \n     // verify managed server services created\n-    for (int i = 1; i <= replicaCount; i++) {\n+    for (int i = 1; i <= wdtReplicaCount; i++) {\n       logger.info(\"Checking managed server service {0} is created in namespace {1}\",\n-          managedServerPodNamePrefix + i, wlstDomainNamespace);\n-      checkServiceExists(managedServerPodNamePrefix + i, wlstDomainNamespace);\n+          wdtManagedServerPodNamePrefix + i, wdtDomainNamespace);\n+      checkServiceExists(wdtManagedServerPodNamePrefix + i, wdtDomainNamespace);\n     }\n+    previousTestSuccessful = true;\n+  }\n+\n+  /**\n+   * Deploy an application using admin t3 channel port, target to both cluster and admin server.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"Deploy an application using t3 channel port\")\n+  public void testDeployAppUsingT3ChannelPort() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74551e1fab4204a7e7378fc97c8464020675b52c"}, "originalPosition": 281}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI4MTA0MA==", "bodyText": "This should be discouraged.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1721#discussion_r440281040", "createdAt": "2020-06-15T15:59:07Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDomainInPV.java", "diffHunk": "@@ -295,38 +308,111 @@ public void testDomainInPvUsingWlst() {\n                         .nodePort(0))\n                     .addChannelsItem(new Channel()\n                         .channelName(\"T3Channel\")\n-                        .nodePort(t3ChannelPort))))\n+                        .nodePort(wdtT3ChannelPort))))\n             .addClustersItem(new Cluster() //cluster\n-                .clusterName(clusterName)\n-                .replicas(replicaCount)\n+                .clusterName(wdtClusterName)\n+                .replicas(wdtReplicaCount)\n                 .serverStartState(\"RUNNING\")));\n \n     // verify the domain custom resource is created\n-    createDomainAndVerify(domain, wlstDomainNamespace);\n+    createDomainAndVerify(domain, wdtDomainNamespace);\n \n     // verify admin server pod is ready\n-    checkPodReady(adminServerPodName, domainUid, wlstDomainNamespace);\n+    checkPodReady(wdtAdminServerPodName, wdtDomainUid, wdtDomainNamespace);\n \n     // verify the admin server service created\n-    checkServiceExists(adminServerPodName, wlstDomainNamespace);\n+    checkServiceExists(wdtAdminServerPodName, wdtDomainNamespace);\n \n     // verify managed server pods are ready\n-    for (int i = 1; i <= replicaCount; i++) {\n+    for (int i = 1; i <= wdtReplicaCount; i++) {\n       logger.info(\"Waiting for managed server pod {0} to be ready in namespace {1}\",\n-          managedServerPodNamePrefix + i, wlstDomainNamespace);\n-      checkPodReady(managedServerPodNamePrefix + i, domainUid, wlstDomainNamespace);\n+          wdtManagedServerPodNamePrefix + i, wdtDomainNamespace);\n+      checkPodReady(wdtManagedServerPodNamePrefix + i, wdtDomainUid, wdtDomainNamespace);\n     }\n \n     // verify managed server services created\n-    for (int i = 1; i <= replicaCount; i++) {\n+    for (int i = 1; i <= wdtReplicaCount; i++) {\n       logger.info(\"Checking managed server service {0} is created in namespace {1}\",\n-          managedServerPodNamePrefix + i, wlstDomainNamespace);\n-      checkServiceExists(managedServerPodNamePrefix + i, wlstDomainNamespace);\n+          wdtManagedServerPodNamePrefix + i, wdtDomainNamespace);\n+      checkServiceExists(wdtManagedServerPodNamePrefix + i, wdtDomainNamespace);\n     }\n+    previousTestSuccessful = true;\n+  }\n+\n+  /**\n+   * Deploy an application using admin t3 channel port, target to both cluster and admin server.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"Deploy an application using t3 channel port\")\n+  public void testDeployAppUsingT3ChannelPort() {\n+    Assumptions.assumeTrue(previousTestSuccessful);\n+    previousTestSuccessful = false;\n+    logger.info(\"Getting node port for T3 channel\");\n+    int t3channelNodePort = assertDoesNotThrow(() -> getServiceNodePort(\n+        wdtDomainNamespace, wdtAdminServerPodName + \"-external\", \"t3channel\"),\n+        \"Getting admin server t3channel node port failed\");\n+    assertNotEquals(-1, wdtT3ChannelPort, \"admin server t3channelport is not valid\");\n+\n+    //deploy application using t3 channel port\n+    Path archivePath = Paths.get(ITTESTS_DIR, \"../src/integration-tests/apps/testwebapp.war\");\n+    logger.info(\"Deploying webapp {0} to domain using t3 channelport\", archivePath);\n+    DeployUtil.deployUsingWlst(K8S_NODEPORT_HOST, Integer.toString(t3channelNodePort),\n+        ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT, wdtClusterName + \",\" + wdtAdminServerName, archivePath,\n+        wdtDomainNamespace);\n+\n+    previousTestSuccessful = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74551e1fab4204a7e7378fc97c8464020675b52c"}, "originalPosition": 297}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwODA4MDg3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1721#pullrequestreview-430808087", "createdAt": "2020-06-15T16:31:34Z", "commit": {"oid": "74551e1fab4204a7e7378fc97c8464020675b52c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwOTc4MzI1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1721#pullrequestreview-430978325", "createdAt": "2020-06-15T20:42:34Z", "commit": {"oid": "3890934428d958e24cc2e979afa348b34edc98cd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMDo0MjozNFrOGkCBPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMDo0MjozNFrOGkCBPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQzNTAwNA==", "bodyText": "The application is not accessed after deployment for this domain.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1721#discussion_r440435004", "createdAt": "2020-06-15T20:42:34Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDomainInPV.java", "diffHunk": "@@ -533,46 +643,20 @@ public void testDomainInPvUsingWdt() {\n     assertTrue(loginSuccessful, \"Console login validation failed\");\n \n     logger.info(\"Getting node port for T3 channel\");\n-    int t3channelNodePort = assertDoesNotThrow(()\n-        -> getServiceNodePort(wdtDomainNamespace, adminServerPodName + \"-external\", \"t3channel\"),\n+    int t3channelNodePort = assertDoesNotThrow(() -> getServiceNodePort(\n+        wlstDomainNamespace, adminServerPodName + \"-external\", \"t3channel\"),\n         \"Getting admin server t3channel node port failed\");\n     assertNotEquals(-1, t3ChannelPort, \"admin server t3channelport is not valid\");\n \n-    //create ingress controller\n-    Map<String, Integer> clusterNameMsPortMap = new HashMap<>();\n-    clusterNameMsPortMap.put(clusterName, managedServerPort);\n-    logger.info(\"Creating ingress for domain {0} in namespace {1}\", domainUid, wdtDomainNamespace);\n-    createIngressForDomainAndVerify(domainUid, wdtDomainNamespace, clusterNameMsPortMap);\n-\n-    //deploy application\n+    //deploy application using t3 channel port\n     Path archivePath = Paths.get(ITTESTS_DIR, \"../src/integration-tests/apps/testwebapp.war\");\n-    logger.info(\"Deploying webapp to domain {0}\", archivePath);\n+    logger.info(\"Deploying webapp {0} to domain using t3 channelport\", archivePath);\n     DeployUtil.deployUsingWlst(K8S_NODEPORT_HOST, Integer.toString(t3channelNodePort),\n         ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT, clusterName + \",\" + adminServerName, archivePath,\n-        wdtDomainNamespace);\n-\n-    //access application from admin server\n-    String url = \"http://\" + K8S_NODEPORT_HOST + \":\" + serviceNodePort + \"/testwebapp/index.jsp\";\n-    assertEquals(200,\n-        assertDoesNotThrow(() -> OracleHttpClient.get(url, true),\n-            \"Accessing sample application on admin server failed\")\n-            .statusCode(), \"Status code not equals to 200\");\n-\n-    //access application in managed servers through NGINX load balancer\n-    logger.info(\"Accessing the sample app through NGINX load balancer\");\n-    String curlRequest = String.format(\"curl --silent --show-error --noproxy '*' \"\n-        + \"-H 'host: %s' http://%s:%s/testwebapp/index.jsp\",\n-        domainUid + \".\" + clusterName + \".test\", K8S_NODEPORT_HOST, nodeportshttp);\n-    List<String> managedServers = new ArrayList<>();\n-    for (int i = 1; i <= replicaCount; i++) {\n-      managedServers.add(domainUid + \"-\" + managedServerNameBase + i);\n-    }\n-    assertThat(callWebAppAndCheckForServerNameInResponse(curlRequest, managedServers, 20))\n-        .as(\"Verify NGINX can access the test web app from all managed servers in the domain\")\n-        .withFailMessage(\"NGINX can not access the test web app from one or more of the managed servers\")\n-        .isTrue();\n+        wlstDomainNamespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3890934428d958e24cc2e979afa348b34edc98cd"}, "originalPosition": 682}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3890934428d958e24cc2e979afa348b34edc98cd", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3890934428d958e24cc2e979afa348b34edc98cd", "committedDate": "2020-06-16T04:19:10Z", "message": "add app deployment to original test and leave other use cases as individual tests with dependencies"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNzkzMTUw", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1721#pullrequestreview-431793150", "createdAt": "2020-06-16T18:41:04Z", "commit": {"oid": "e1fee9ce91b4d5abd2404bde99927797b98fe3fc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODo0MTowNFrOGkog2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODo0MTowNFrOGkog2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA2NTY4OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Verify liveness probe by killing managed server process 3 times to kick\n          \n          \n            \n               * Verify liveness probe by killing managed server process 3 times to kickoff", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1721#discussion_r441065688", "createdAt": "2020-06-16T18:41:04Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDomainInPV.java", "diffHunk": "@@ -561,18 +571,91 @@ public void testDomainInPvUsingWdt() {\n     //access application in managed servers through NGINX load balancer\n     logger.info(\"Accessing the sample app through NGINX load balancer\");\n     String curlRequest = String.format(\"curl --silent --show-error --noproxy '*' \"\n-        + \"-H 'host: %s' http://%s:%s/testwebapp/index.jsp\",\n-        domainUid + \".\" + clusterName + \".test\", K8S_NODEPORT_HOST, nodeportshttp);\n+            + \"-H 'host: %s' http://%s:%s/testwebapp/index.jsp\",\n+        wdtDomainUid + \".\" + clusterName + \".test\", K8S_NODEPORT_HOST, nodeportshttp);\n     List<String> managedServers = new ArrayList<>();\n     for (int i = 1; i <= replicaCount; i++) {\n-      managedServers.add(domainUid + \"-\" + managedServerNameBase + i);\n+      managedServers.add(wdtDomainUid + \"-\" + wdtManagedServerNameBase + i);\n     }\n     assertThat(callWebAppAndCheckForServerNameInResponse(curlRequest, managedServers, 20))\n         .as(\"Verify NGINX can access the test web app from all managed servers in the domain\")\n         .withFailMessage(\"NGINX can not access the test web app from one or more of the managed servers\")\n         .isTrue();\n+    previousTestSuccessful = true;\n+  }\n+\n+  /**\n+   * Verify liveness probe by killing managed server process 3 times to kick", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1fee9ce91b4d5abd2404bde99927797b98fe3fc"}, "originalPosition": 292}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51d226066848679dc8378045e473007b94b3ac47", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/51d226066848679dc8378045e473007b94b3ac47", "committedDate": "2020-06-16T18:43:11Z", "message": "Update new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDomainInPV.java\n\nCo-authored-by: Sankar Periyathambi Neelakandan <45743425+sankarpn@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNzk0OTUz", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1721#pullrequestreview-431794953", "createdAt": "2020-06-16T18:43:36Z", "commit": {"oid": "e1fee9ce91b4d5abd2404bde99927797b98fe3fc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODo0MzozN1rOGkomWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODo0MzozN1rOGkomWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA2NzA5Nw==", "bodyText": "After pod restart we have to make sure the deployed applications can continue to be accessed. Please add a check for it.", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1721#discussion_r441067097", "createdAt": "2020-06-16T18:43:37Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDomainInPV.java", "diffHunk": "@@ -561,18 +571,91 @@ public void testDomainInPvUsingWdt() {\n     //access application in managed servers through NGINX load balancer\n     logger.info(\"Accessing the sample app through NGINX load balancer\");\n     String curlRequest = String.format(\"curl --silent --show-error --noproxy '*' \"\n-        + \"-H 'host: %s' http://%s:%s/testwebapp/index.jsp\",\n-        domainUid + \".\" + clusterName + \".test\", K8S_NODEPORT_HOST, nodeportshttp);\n+            + \"-H 'host: %s' http://%s:%s/testwebapp/index.jsp\",\n+        wdtDomainUid + \".\" + clusterName + \".test\", K8S_NODEPORT_HOST, nodeportshttp);\n     List<String> managedServers = new ArrayList<>();\n     for (int i = 1; i <= replicaCount; i++) {\n-      managedServers.add(domainUid + \"-\" + managedServerNameBase + i);\n+      managedServers.add(wdtDomainUid + \"-\" + wdtManagedServerNameBase + i);\n     }\n     assertThat(callWebAppAndCheckForServerNameInResponse(curlRequest, managedServers, 20))\n         .as(\"Verify NGINX can access the test web app from all managed servers in the domain\")\n         .withFailMessage(\"NGINX can not access the test web app from one or more of the managed servers\")\n         .isTrue();\n+    previousTestSuccessful = true;\n+  }\n+\n+  /**\n+   * Verify liveness probe by killing managed server process 3 times to kick\n+   * pod container auto-restart.\n+   */\n+  @Test\n+  @DisplayName(\"Test liveness probe of Pod\")\n+  public void testLivenessProbe() {\n+    Assumptions.assumeTrue(previousTestSuccessful);\n+    String serverName = wdtDomainUid + \"-\" + wdtManagedServerNameBase + \"1\";\n+    // create file to kill server process\n+    File killServerScript = assertDoesNotThrow(() ->\n+            createScriptToKillServer(),\n+        \"Failed to create script to kill server\");\n+    logger.info(\"File/script created to kill server {0}\", killServerScript);\n+\n+    checkPodReady(serverName, wdtDomainUid, wdtDomainNamespace);\n+\n+    // copy script to pod\n+    String destLocation = \"/u01/killserver.sh\";\n+    assertDoesNotThrow(() -> copyFileToPod(wdtDomainNamespace, serverName, \"weblogic-server\",\n+        killServerScript.toPath(), Paths.get(destLocation)),\n+        String.format(\"Failed to copy file %s to pod %s in namespace %s\",\n+            killServerScript, serverName, wdtDomainNamespace));\n+    logger.info(\"File copied to Pod {0} in namespace {1}\", serverName, wdtDomainNamespace);\n+\n+    // get the restart count of the container in pod before liveness probe restarts\n+    final int beforeRestartCount =\n+        assertDoesNotThrow(() -> getContainerRestartCount(wdtDomainNamespace, null, serverName, null),\n+            String.format(\"Failed to get the restart count of the container from pod {0} in namespace {1}\",\n+                serverName, wdtDomainNamespace));\n+    logger.info(\"Restart count before liveness probe {0}\", beforeRestartCount);\n+    // change file permissions\n+    ExecResult execResult = assertDoesNotThrow(() -> execCommand(wdtDomainNamespace, serverName, null,\n+        true, \"/bin/sh\", \"-c\", \"chmod +x \" + destLocation),\n+        String.format(\"Failed to change permissions for file %s in pod %s\", destLocation, serverName));\n+    assertTrue(execResult.exitValue() == 0,\n+        String.format(\"Failed to change file %s permissions, stderr %s stdout %s\", destLocation,\n+            execResult.stderr(), execResult.stdout()));\n+    logger.info(\"File permissions changed inside pod\");\n+    /* First, kill the mgd server process in the container three times to cause the node manager to\n+     * mark the server 'failed not restartable'. This in turn is detected by the liveness probe, which\n+     * initiates a container restart.\n+     */\n+    for (int i = 0; i < 3; i++) {\n+      execResult = assertDoesNotThrow(() -> execCommand(wdtDomainNamespace, serverName, null,\n+          true, \"/bin/sh\", \"-c\", destLocation + \" \" + serverName),\n+          String.format(\"Failed to execute script %s in pod %s namespace %s\", destLocation,\n+              serverName, wdtDomainNamespace));\n+      logger.info(\"Command executed to kill server inside pod, exit value {0}, stdout {1}, stderr {2}\",\n+          execResult.exitValue(), execResult.stdout(), execResult.stderr());\n+\n+      try {\n+        Thread.sleep(2 * 1000);\n+      } catch (InterruptedException ie) {\n+        // ignore\n+      }\n+    }\n+    // check pod is ready\n+    checkPodReady(serverName, wdtDomainUid, wdtDomainNamespace);\n+\n+    // get the restart count of the container in pod after liveness probe restarts\n+    int afterRestartCount = assertDoesNotThrow(() ->\n+            getContainerRestartCount(wdtDomainNamespace, null, serverName, null),\n+        String.format(\"Failed to get the restart count of the container from pod {0} in namespace {1}\",\n+            serverName, wdtDomainNamespace));\n+    assertTrue(afterRestartCount - beforeRestartCount == 1,\n+        String.format(\"Liveness probe did not start the container in pod {0} in namespace {1}\",\n+            serverName, wdtDomainNamespace));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1fee9ce91b4d5abd2404bde99927797b98fe3fc"}, "originalPosition": 359}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNzk1MzA5", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1721#pullrequestreview-431795309", "createdAt": "2020-06-16T18:44:08Z", "commit": {"oid": "e1fee9ce91b4d5abd2404bde99927797b98fe3fc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODo0NDowOFrOGkonYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODo0NDowOFrOGkonYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA2NzM2Mw==", "bodyText": "You don't need a method order for this method?", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1721#discussion_r441067363", "createdAt": "2020-06-16T18:44:08Z", "author": {"login": "sankarpn"}, "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDomainInPV.java", "diffHunk": "@@ -561,18 +571,91 @@ public void testDomainInPvUsingWdt() {\n     //access application in managed servers through NGINX load balancer\n     logger.info(\"Accessing the sample app through NGINX load balancer\");\n     String curlRequest = String.format(\"curl --silent --show-error --noproxy '*' \"\n-        + \"-H 'host: %s' http://%s:%s/testwebapp/index.jsp\",\n-        domainUid + \".\" + clusterName + \".test\", K8S_NODEPORT_HOST, nodeportshttp);\n+            + \"-H 'host: %s' http://%s:%s/testwebapp/index.jsp\",\n+        wdtDomainUid + \".\" + clusterName + \".test\", K8S_NODEPORT_HOST, nodeportshttp);\n     List<String> managedServers = new ArrayList<>();\n     for (int i = 1; i <= replicaCount; i++) {\n-      managedServers.add(domainUid + \"-\" + managedServerNameBase + i);\n+      managedServers.add(wdtDomainUid + \"-\" + wdtManagedServerNameBase + i);\n     }\n     assertThat(callWebAppAndCheckForServerNameInResponse(curlRequest, managedServers, 20))\n         .as(\"Verify NGINX can access the test web app from all managed servers in the domain\")\n         .withFailMessage(\"NGINX can not access the test web app from one or more of the managed servers\")\n         .isTrue();\n+    previousTestSuccessful = true;\n+  }\n+\n+  /**\n+   * Verify liveness probe by killing managed server process 3 times to kick\n+   * pod container auto-restart.\n+   */\n+  @Test\n+  @DisplayName(\"Test liveness probe of Pod\")\n+  public void testLivenessProbe() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1fee9ce91b4d5abd2404bde99927797b98fe3fc"}, "originalPosition": 297}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxODE3MjQ2", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1721#pullrequestreview-431817246", "createdAt": "2020-06-16T19:15:07Z", "commit": {"oid": "51d226066848679dc8378045e473007b94b3ac47"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxODg0NTE4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1721#pullrequestreview-431884518", "createdAt": "2020-06-16T20:55:35Z", "commit": {"oid": "a420f56f9e6ce38a309ac16a67c5737529920880"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55015f1606c128bed9cb94f981084d7df7a54fd7", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/55015f1606c128bed9cb94f981084d7df7a54fd7", "committedDate": "2020-06-17T00:38:23Z", "message": "revert refactoring changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1fee9ce91b4d5abd2404bde99927797b98fe3fc", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e1fee9ce91b4d5abd2404bde99927797b98fe3fc", "committedDate": "2020-06-17T00:38:56Z", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into livenessprobe-it"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "546e4890bc5a1d5d2270c07a5307a5aeeb7523ff", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/546e4890bc5a1d5d2270c07a5307a5aeeb7523ff", "committedDate": "2020-06-17T04:04:49Z", "message": "added check to access app after container restart"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a420f56f9e6ce38a309ac16a67c5737529920880", "author": {"user": {"login": "vanajamukkara", "name": "Vanajakshi Mukkara"}}, "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a420f56f9e6ce38a309ac16a67c5737529920880", "committedDate": "2020-06-17T04:13:54Z", "message": "add check to access app after container restart"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4508, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}